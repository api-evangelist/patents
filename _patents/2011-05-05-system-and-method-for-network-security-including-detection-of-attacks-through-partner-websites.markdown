---
title: System and method for network security including detection of attacks through partner websites
abstract: A computer readable storage medium has instructions for execution on a computer. The instructions monitor transactions between a server and a set of clients. An evaluation of session indicators associated with the transactions is performed. Individual sessions between the server and individual clients of the plurality of clients are isolated in response to the evaluation.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08756684&OS=08756684&RS=08756684
owner: EMC Corporation
number: 08756684
owner_city: Hopkinton
owner_country: US
publication_date: 20110505
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATION","FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION"],"p":["This application is a continuation-in-part of U.S. Ser. No. 13\/038,280, filed Mar. 1, 2011, which claims priority to U.S. Provisional Patent Application 61\/339,248, filed Mar. 1, 2010.","The present invention relates to computer network systems and methods for detecting and defending against attacks on websites, including attacks through third-party websites.","There are many different entities\u2014financial, business, government, charity, educational, individual, etc. \u2014that may choose to have online presences implemented by computer systems coupled to a network or computer program code running on systems of other entities that are connected to the network. Since these online systems can be used to provide information, accept and forward information, facilitate transactions, and\/or allow access to online resources, those entities have an interest in securing those systems so that authorized activities are allowed while unauthorized activities are prevented. Internet and other online facilities are commonly used for financial, business, private and other transactions preferably kept secure.","In a simple example, a bank may choose to provide its customers with online access to banking details and a facility to initiate transactions, such as funds transfers. Some illegitimate actions that unauthorized individuals or computer systems may wish to perform might be expected, such as improperly accessing the banking details, initiating unauthorized transactions, or modifying online resources for their own goals rather than those of the operator of the resources, such as defacing an online presence; stealing money, goods or information; sabotage; or performing other illegitimate actions. Other illegitimate actions might be unexpected.","As explained herein, a common approach to providing this online presence is via a \u201cwebsite\u201d. While users may consider a website a \u201cplace\u201d, it is often a logical place only, in that it is referenced by a URI, while its actual physical location is not important and may indeed be distributed over multiple data centers or even virtual data centers in computing clouds. More precisely, a website is typically the user interface aspects of an entity's network presence.","For example, a retailer might set up a server that has thereon software that can receive requests from a network and respond to those requests by returning content, accepting inputs and\/or performing some actions in response to requests. Some of that content returned can be in the form of web pages viewable by client devices in response to requests for those web pages from those client devices. Client devices might include computers, telephones, smart handheld devices, other computing devices, etc. These client devices might be used by the retailer's customers, potential customers, visitors, suppliers, or partners.","Some web pages are static and pre-generated in advance of a request, such as a page explaining a company's history, while others are dynamic and generated on the fly, such as a web page showing a user's current shopping cart contents or a page generated for a product that a user just requested. Thus, the server might have access to data systems usable for generating web pages and other content (video, music, etc.). The server might comprise multiple machines at different locations on the network, perhaps serving different sets of pages or not. Thus, the term \u201cwebsite\u201d can refer to the client-side view of a collection of servers, content, operations and the like, while end users might view a website as a collection of pages operated by an entity with a consistent approach that can be viewed in various aspects. As used herein, \u201cwebsite\u201d might refer to the content, the servers, the operators of the servers, and\/or the interaction with client devices, etc., depending on context.","As website developers have devised defensive methods to detect and thwart attacks, the attackers have in turn devised ways around those defenses, in a co-evolving cycle of increasing sophistication.","Many methods have been devised to steal legitimate users' identities for website abuses. A common method is called \u201cphishing\u201d, wherein an email sent under the guise of a trustworthy entity elicits personal information from unwitting recipients, typically by luring potential victims to a fraudulent website that requests identifying personal information such as usernames, passwords, account numbers, ATM PINs, etc. This stolen information is then used by impostors, either manually or robotically, to log in to the victims' accounts on the genuine websites in order to steal money, send forged emails, or perpetrate other illicit activity.","To combat such impostors, many website operators have developed more-sophisticated access-control methods that require secondary authentication information that simple phishing schemes cannot easily obtain. For example, when a website suspects that an account is being used by a third party, the website may verify that the user is indeed the owner of the account by demanding randomly chosen additional access credentials such as place of birth, mother's maiden name, or the answer to one of a set of questions preselected by the legitimate account-owner.","In response to the deployment of secondary authentication techniques, fraudsters have developed what is called a \u201cman-in-the-middle attack\u201d, in which a phisher lures a victim to a counterfeit website mimicking the appearance and behavior of the target site, on the one hand intercepting the victim's input and relaying it to the real website, while on the other hand intercepting the real website's output and relaying it back to the user through the bogus site. Thus, man-in-the-middle attacks permit fraudsters to gain entry into privileged sites by duping authorized users of the site into responding to all authorization challenges posed by the privileged sites, thus evading all direct authorization protocols. Despite the name \u201cman in the middle\u201d, the entire process, including any illicit activity perpetrated from within the burgled account, may be performed fully automatically, without the need for human intervention.","To combat man-in-the-middle attacks, many websites are programmed to look at structural identifying information, such as the users' Internet Protocol addresses and inferred geographic locations, \u201ccookies\u201d (site-generated tokens passed back and forth between site and client), user-agent identifiers, and request timestamps\u2014information over which the fraudster ordinarily has no direct control. This ancillary information allows a website to detect suspicious users who, despite meeting all explicit authorization challenges, are evidently not using the same browsers on the same computers in the same locations as they usually do, indicating that they may be victims of man-in-the-middle attacks.","Now that websites are examining structural session information to distinguish impostors from legitimate users, fraudsters have developed an even more sophisticated method of assault, called a \u201cman-in-the-browser attack\u201d, using malicious software surreptitiously installed on potential victims' own computers. Many mechanisms have been devised for getting the malware installed, including attachments to phishing emails, downloads from phishing sites, and self-propagating viruses and worms; any of which may be disguised within Trojan horses that apparently or actually perform desirable functions, or may be downloaded afterwards through a back door via a bootstrapping mechanism.","This malware, typically in the form of a browser plug-in (hence the name), lurks in the background until it recognizes that the potential victim has successfully signed in to a targeted website, thus eluding all direct authorization protocols. It then uses the victim's own browser on the victim's own computer in accordance with the user's own schedule to perpetrate fraud while the victim is also interacting with the website, thereby also eluding all structural authentication clues. Again, although some implementations provide for real-time human intervention, nevertheless the entire process, including any illicit activity perpetrated from within the hijacked account, may be performed fully automatically, despite the name \u201cman\u201d in the browser. The malware can elude detection by the user by performing its transactions invisibly, for example in an offscreen window, or, as in a man-in-the-middle attack, by intercepting the communications between the real user and the website, and spoofing the view presented to the user.","Since man-in-the-browser attacks, like man-in-the-middle attacks and other phishing attacks, cause substantial harm to websites and to the websites' legitimate users through direct financial and material theft as well as through sabotage, defamation, and other forms of damage, it is crucial for websites to have an effective means for detecting such attacks in order to take remedial actions against them.","At present, however, no methods exist for websites to detect man-in-the-browser attacks.","Many websites outsource some of their services to third-party websites specializing in those services, such as advertising, news, mapping, searching, indexing, categorization, tagging, ratings, reviews, email, chat, social networking, forums, social games, collaborative editing, questionnaires, polls, media hosting, special deals and promotions, purchasing, bill-paying, banking, wire transfers, and identity verification. Although these third-party services may be tailored, customized, and integrated so as to appear to be offered directly by the primary website, clients using these services are actually diverted to the corresponding partner websites, bypassing the web servers of the primary website. As a result, the host website loses all track of clients while they are dealing with the third parties, leaving it susceptible to attack through a partner website or a combination of partner sites and the host site. The primary website thus has to depend on its partner websites to monitor its clients in its stead. However, the monitoring information provided by third-party services, typically in the form of daily, weekly, or monthly logs or digests, is generally inadequate and untimely. Online criminals have been quick to take advantage of this weakness, so that many websites now incur their greatest losses indirectly, through third-party services, and urgently need an effective means for tracking users across third-party websites in addition to on their own websites.","A computer readable storage medium has instructions for execution on a computer. The instructions monitor transactions between a server and a set of clients. For example, the server may be a set of client-facing servers at a website. An evaluation of session indicators associated with the transactions is performed. Individual sessions between the server and individual clients of the plurality of clients are isolated in response to the evaluation.","The following detailed description together with the accompanying drawings will provide a better understanding of the nature and advantages of the present invention.","Individual elements of the embodiments are numbered consistently across these figures.","This description presents a system and method for determining when there is a man-in-the-browser attack on a website among other things. In an exemplary embodiment of the invention, man-in-the-browser attacks on a website are detected by comparing the current user's session with the average user session.","The inventive system operates upon an incoming stream of input data generated by actions on a website. Example actions on a website typically correspond to hyperlink clicks by the user of the website. These clicks can be performed by a human or by an automated computer program. Automated computer programs can work by simulating website clicks or by working through the application programming interface of the website.","Examples of actions taken on a website include entering data into forms on the website, and clicks to go to other pages of the website. Examples of entering data into forms on a website include entering a user name and password on a website to sign in to the website; filling out an email form to send email to another user of the website; and entering personal information to register for an account on the website.","As described in further detail below, each website action can comprise multiple parameters as defined by information corresponding to the action on the website that can be seen by the processors and computers related to a webserver, a firewall, or other device that processes website traffic and additional information provided by the website or third parties. Examples of parameters associated with website actions include IP addresses, including those of proxies used in the process of sending traffic to the website, browser header information, operating system information, information about other programs installed on the user's machine, information about the clock and other settings on the user's machine, cookies, referring URLs, usernames, parameters associated with a post to the website, and other information associated with the user's action on the website.","Several aspects of the current user session are compared with the average user session to detect man-in-the-browser attacks using a prestored data set representing the average parameter values across all user sessions during the data-collection period. This is compared to the average time between clicks for an average session. Next, the order in which website pages are viewed in the current session is compared with the order in which website pages are viewed in an average session for each page that is accessed. Finally, the time between clicks for each individual page in the user's session is compared to the average time between clicks for the average user session for that page. Additional tests might be used instead of, or as well as, those cited above.","The above comparisons are combined to generate a score that indicates the likelihood that the current session is a man-in-the-browser attack. The score is used to determine whether or not an alert should be generated to notify the appropriate parties, including the website administrator, the website alert processing system, and other associated website parties.","Top-level information-flow diagram  illustrates one way that the invention disclosed herein may be integrated with the data center or data centers  employed by a network service : as a rearguard threat detection system .","A service data center , the system which operates a website or other network service, may be configured in a number of different ways, depending largely on the size of the business: for example as a single virtual server shared with other services, a dedicated physical server, all or part of a server farm, or a virtual server farm in a computing cloud. A service data center receives client actions  from clients  of the service, who in turn receive service actions  such as webpages, webpage updates, email messages, text messages, telephone calls, or other information back from the service data centers. Typical client actions  correspond to hyperlink clicks or other interactions with a website such as entering form data or uploading images or other resources by clients  of the website, who can be human or computer automata. Automated computer programs can work by simulating website clicks, by using the service's application programming interface, if any, or by using some other protocol.","For each client action and service action, the responding service data center  relays a raw transaction record  to threat detector . A transaction record describes the parameters of the transaction between the client and the server, containing parameters of corresponding client action  and server response  needed for threat detection. In their rawest form, these transaction records can be simply copies of the low-level packets or datagrams for all network traffic between the exposed data centers and the website's clients, which the network service threat detector independently reassembles into complete transaction records.","The network-service threat detector  and other components may likewise be located onsite, offsite, or in a cloud computing center. In the preferred embodiment, the entire network-service threat detection system  is collocated with service data center  to facilitate security and real-time response. Very large Internet businesses employ multiple geographically dispersed data centers , in which case a single threat detection system  may serve one or multiple data centers.","Network-service threat detector  analyzes logged transactions  for suspicious behavior characteristic of man-in-the-browser (\u201cMiB\u201d) attacks and other types of attacks, and issues threat notifications  accordingly to service threat processors , including the service administrator, the service's alert processing system, and other associated service parties, as appropriate. If the service is not configured to provide all the transaction information needed by the detector in the stream of raw transaction records  pushed to the detector, then the detector may issue requests  to pull additional information  as needed from the client-facing data centers  or from internal service data centers , which are installed at some services where they are shielded from the Internet for reasons of security or efficiency. Additionally, for services that can make other use of information produced by the detector, the detector may send information  to the service data centers  or , either unsolicited or in response to requests  from the detector . Network-service threat detector  is described in more detail under .","Threat processors  review threat notifications , possibly in conjunction with additional information provided by other tools (not shown), and issue corresponding remedial actions  to client-facing data centers .","Remedial actions  may also be fed back to the threat detector , permitting the detector to respond on its own to subsequent matching threats, without incurring the delay entailed by encumbering the threat processors. Threat remediations  include immediately thwarting hijacked clients from accessing the service as a whole or sensitive portions thereof, by blocking them, delaying them, diverting them to harmless webpages, or spoofing sensitive information; warning the victims that their systems have been infected, either through independent channels such as telephone or paper mail, or through changes to account information that would go unrecognized by the hijackers but compel the victims to contact the business through other channels such as by telephone; reversing or blocking the fraudulent transactions; monitoring and tracking the compromised accounts; and forwarding incriminating evidence to the appropriate authorities for further investigation and prosecution, or other actions.","If a website incorporates services of third-party websites into its own services, then some of its service actions  contain referrals to the partner websites . When a client acts on a referral, such as by clicking on a hyperlink in an iframe sourced from a partner website, then the client's action  is ordinarily diverted (dashed arrow) directly to the partner website, and the partner website's response  is sent directly back to the client (dashed arrow), bypassing the primary website. The host website is thus unable to monitor the transactions between the client and the partner sites, and is thus unable to detect fraud or other illicit activity perpetrated through the partner websites.","The present invention enables the primary website to monitor client-partner traffic by including a novel partner channeler which intercepts the traffic between the primary website and its clients, and edits the outgoing service actions  to entrain the client-partner traffic through the partner channeler by replacing partner referrals with partner aliases referring back to the host website. When a client acts on an edited referral, the corresponding client action , instead of being diverted to the partner, comes back to the primary website, where the partner channeler intercepts it, replaces the client address with an alias at the host website to entrain the partner-client traffic back to the channeler, replaces the partner alias with the original partner referral, and passes the entrained client action  on to the partner website . When the partner website responds to the entrained client action, the corresponding entrained partner action  likewise comes back to the primary website, where the channeler intercepts it, replaces the client alias with the original client address, and again replaces partner referrals with partner aliases referring back to the host website, finally sending the entrained partner action on to the client under the guise of an ordinary service action .","In a rearguard threat-detector deployment, the channeler is installed in the host website's data center(s). In the preferred embodiment, the channeler is installed in the exposed data center(s)  where it can intercept all traffic between host, partners, and clients, with minimal disruption of the existing website architecture, and without burdening the interior data centers  with partner traffic. The partner channeler is discussed further under  and .","In the preferred embodiment, rearguard network-service threat detection system  is capable of detecting and remedying attacks on a service in substantially real time.","Top-level information-flow diagram  illustrates an alternate way to integrate with a service's data center(s): as a vanguard network-service threat detection system .","In this configuration, service traffic processor  is introduced as a proxy to intercept client actions  in order to output transaction records  to threat detector ; and to intercept normal website actions  output by website data centers  in order to substitute remedial actions  provided by the threat detector  or website threat processors , as appropriate. As with the other components, website traffic processor may be onsite, offsite, or in a cloud computing center. For generating transaction records, website traffic processor  has direct access to all the information in the HTTP request headers from client actions  and in the HTTP response headers from the website actions  or . It also has access, through its own clock, to the exact times that the client actions were received and the website actions  were transmitted, which it inserts in the transaction records, thus obviating the need for server synchronization during session reconstruction (See ) other than for conciliation with information exchanged internally with website data centers  and  through service responses  to detector requests  and detector responses  to service requests .","In the preferred embodiment of the vanguard threat detection system, to avoid superfluous generation of normal website actions  replaced by remedial actions , exposed data centers  receive client actions  only as filtered client actions  from website traffic processor , which either withholds remediated client actions from the website data centers, or flags them as remediated before passing them on to the data centers to log without responding.","In an alternative embodiment, for example if the website needs to log all client actions accurately but is not set up to refrain from responding to remediated client actions, client actions  are either passed through website traffic processor  unfiltered, or copied directly (dashed arrow) to the website data centers, to be filtered by the website traffic processor only on output .","In another alternative embodiment, if it is more convenient for certain actions or other information to be communicated internally, particularly if the vanguard threat detector is collocated with the data centers, threat detector  may request  information  directly from isolated  or exposed  website data centers, or provide 1130 information directly to the data centers.","In a vanguard deployment, in the preferred embodiment, the partner channeler is incorporated into server traffic processor  where it can intercept all traffic between host, clients, and partners, without burdening the host data centers with partner traffic.","A vanguard threat detection configuration  is preferable for websites that are not designed to produce the real-time transaction parameter records  needed by the threat detector; that are not designed to implement the remedial actions  desired to deal with threats in real time; or that prefer to have the threat detection and remediation handled offsite before offensive client actions have a chance to reach the website. Vanguard threat detection also offers the advantages of more-accurate and more-precise timestamps and tighter bounds on client response time estimates, as explained under .","In the preferred embodiment, threat detection system  is capable of detecting and remedying attacks on a website in substantially real time.","As depicted in high-level information-flow diagram , network-service threat detector  inputs raw transaction parameter records  streaming in from the website data center(s), applies a number of processing steps, and outputs threat notification alerts  to website threat processors.","In the first detection step, if the input transaction records  do not contain all the transaction information needed by the threat detector, as is often the case for rearguard detection systems  (See ), then record augmenter  obtains as much of the missing information as possible  by querying  the data center(s), outputting augmented transaction records .","Next, the augmented transaction records  are analyzed by session reconstructor  to separate them into individual client sessions , as further described under . The session reconstructor may be assisted in its analysis by use of a website map  generated and maintained by website analyzer , as further described under .","Session analyzer  then analyzes the client sessions for features characteristic of MiB attacks or similar website attacks, and for each input session can output a record of session threat parameters , as further described under . The session analyzer may also make use of information from the website map.","Next, session comparator  compares each current session-parameters record  against a set of session models  derived by session modeler  from aggregate current and prior session-parameters records, and for each current client session outputs a threat-score record . The session modeler may use the website map in its analysis. The session comparator is described further in connection with , and the session modeler in connection with .","Finally, for each client session, threat remediator  analyzes the threat score record  and, as warranted, outputs threat notification  for further analysis and remediation by website threat processors  (See ). If directed to do so, the threat remediator may also output remedial action  to client-facing website data center  (See ) or to website traffic processor  (See ).","As depicted in information-flow diagram , website analyzer  for use in network-service threat detector  (See ) analyzes the logical structure of the website and outputs website map  detailing the intrinsic linkages  among the webpages, as well as the intrinsic access level , intrinsic privilege level , and intrinsic security level  of each region of the website. Website spider  assembles a complete list of all pages and other services  provided by the website and of all internal hyperlinks  among the pages and other media of the website, by examining intrinsic hyperlinks on various pages, and following each link that leads to a new target, thus building up the lists of services and links as it goes.","Like ordinary website spiders of prior art, website spider  is launched at the website root and traverses the website by issuing client actions \u2014via simulated website clicks or, if available, the website's application programming interface\u2014to the client-facing website , and analyzing website action responses  for all traceable links. In case the website contains disjoint regions or regions not directly reachable by external spidering, the spider is also launched at unlisted services appearing in the Request URLs and Referrer URLs in client sessions . In addition, links untraceable by external spidering, such as deliberately disguised CGI POST methods, website spider  traces in parallel internally via transaction records . Where possible, website spider  also traverses the website by accessing the services and links directly through database queries  to website data center  or .","To distinguish the uniform resource locators (URLs) of genuinely new services from merely synonymous URLs of known services, the URL resolver (not shown) employed by website spider  and change detector  is augmented to resolve not only the URLs supplied and received by external spidering from client actions  and website actions , respectively, but also the URLs and equivalent identifiers provided by the website data centers in the responses  to database queries  and in the transaction records  in the client session records . To resolve URL aliases, spider  not only compares service contents as in prior-art spiders, but first correlates URLs presented externally in website actions  with internal URIs given in transaction records , synchronizing the two by, for example, including a sequence number in the User-Agent field of its requests.","Change detector  monitors client sessions  for the appearance of new services not in the list of website services , as well as periodically checking for changes to already listed services, and issues update orders  to the website spider accordingly.","Security classifier  examines each web service , and outputs security level  classifying the service according to whether its contents are ever transmitted as plaintext, or always transmitted in encrypted form via a secure protocol such as TLS or SSL, as recognizable by the \u201chttps:\/\/\u201d secure protocol name in the services' URLs, as opposed to \u201chttp:\/\/\u201d, or by the HTTP Upgrade header.","Linkage mapper  compiles the lists of services  and links  into a coherent map  of the website's intrinsic linkage structure.","Privilege classifier  examines website links  for checkpoints requiring passwords or higher levels of authentication, and uses this information to partition linkage map  into regions according to the echelon of privilege  required to access the services  within each region.","Access classifier  examines each web service and assigns it an access level , ranging from an innocuous static \u201cwall\u201d providing no access to personal or proprietary information; through an unsafe \u201cwindow\u201d permitting inherently risky transactions that a malicious agent could exploit to indirectly damage the interests of the client or the site's owner, such as viewing personal or proprietary information and using it elsewhen or elsewhere; to a dangerous \u201cdoor\u201d permitting inherently dangerous transactions that a malicious agent could exploit to directly damage the interests of the client or the site's owner, such as removing or transferring goods or money; creating, deleting, or changing information such as account ownership or shipping addresses; and in general effecting changes on the webserver or elsewhere outside the client's browser. Windows are typically indicated by HTTP GET and HEAD methods, while doors are typically indicated by HTTP POST, PUT, and DELETE methods.","Website mapper  compiles website linkage map , access level data , privilege level data , and security level data  into a single integrated website directed-graph map  for use by session reconstructor  and session modeler  (See ) to determine whether an observed transition coincides with an intrinsic website link; by session comparator  () to weight session threat scores according to intrinsic threat values of the services and transitions involved; and by website threat processors  and other website personnel to visualize and explore the threat terrain of their website; and by the website developers to improve the intrinsic security of their website.","The website map includes a service index and a link index for quick random access by service and link.","Website map  is also intended for use by other operations personnel, for example to determine whether all current regions of the website are properly connected, and whether abandoned or experimental regions are properly disconnected; for development research, for example to determine whether certain common pathways should be replaced with more-efficient ones, and whether certain uncommon ones should be removed; and for marketing research, for example to explore how various services can be accessed or promoted.","Conflict analyzer  uses website map  to analyze the structural integrity of the website, and outputs conflict warnings  for any structural security flaws in the website, ranked by priority, in order to thwart certain types of threats of which the website security personnel are presumably not yet aware and which fraudsters may already be exploiting. In particular, private information should never be sent in the clear, and risky actions should never be accessible to clients without the requisite clearance, so services containing windows and especially doors should be both privileged and secure. The conflict analyzer can also issue warnings  for broken links, as well as for orphaned regions of the website, whose unmaintained status may pose security risks.","As depicted in information-flow diagram , session reconstructor , for use in network-service threat detector  (See ), compiles the augmented transaction records  from the website data center(s) into synchronized individual client sessions  by synchronizing and sorting the records and then teasing them into individual client sessions.","The transaction synchronization phases, comprising service timing and server timing modeling , server synchronization , agent timing modeling , client timing modeling , and client synchronization , serve to bound as accurately and tightly as possibly the client response delay: the interval from the instant the client received and was able to respond to website action  (See ), to the instant the client responded by issuing client action . Only by knowing the precise client response delay can anomalous client response delays be accurately detected.","Transaction records typically provide two sets of timestamps: server timestamps and client timestamps, which for HTTP services are respectively supplied in the HTTP Response Date headers of the website actions  and in the HTTP Request Date headers of the client actions . These timestamps by themselves, even if both the request timestamps and the response timestamps were reliably present and accurate, are fundamentally inadequate for fixing the client response interval, because neither the response nor the request is instantaneous in its production, transmission, reception, and interpretation. Although websites concerned about security can be presumed to provide some sort of response timestamps, the client request timestamps are only optionally present. Moreover, many websites do not properly synchronize the clocks among their servers; the phase of the response marked by the server's response timestamp is undefined; and some provide a timestamp indicating when the transaction was logged in place of the server response time.","Clients' clocks are likewise often inaccurate, and are in fact intentionally misadjusted by users to help disguise their locations, including by some benign users for privacy; and request timestamps, when present, may be deliberately forged by MiB malware and other attackers to help evade detection. Thus, it is useful to have an accurate estimation of the client response interval from statistical information and models about the timing characteristics of the servers, services, clients, and agents.","In a vanguard deployment, the service traffic processor  (See ) records the times when it begins and finishes relaying each service request from each client to the website servers and the times when it begins and finishes relaying each corresponding response from the server back to the client, and can thus accurately estimate the client response interval for each transaction from transaction-specific timing information. In a rearguard deployment, however, the session reconstructor estimates the client response interval from more general statistics.","For website operators willing to modify their websites or have their websites modified, a client-side timing mechanism can be embedded in the website's services, which explicitly measures the time interval between service receipt and user response, and reports that time interval back directly to the website. For HTML pages, for example, the timer can be implemented as a Javascript Date( ) object created on load and set to the load date, and then, when a hyperlink on the page is clicked, either the load time or the elapsed time since loading is appended to the target URL or to the payload of the HTTP request.","In a vanguard deployment, with permission, the service traffic processor embeds this mechanism in the website services on the fly. Otherwise, having the website developers add this mechanism in a normal development cycle may take many months. In any case, since client-side timing information can be spoofed by an MiB attacker and other attackers, the session reconstructor still should corroborate it with independently derived server-side information.","In the first session-reconstruction step, server synchronizer  corrects for discrepant clock settings among active servers at the website during the data-collection period and compensates for the indeterminacy of the phase of service represented by the servers' date timestamps recorded in input transaction records , in order to accurately estimate the server's receive date, send date, and sent date for each input transaction record, augmenting the transaction record with these dates to output corresponding server-synchronized output transaction record . The server synchronizer bases the server clock correction and phase compensation on service-specific timing models  and server-specific service timing models  generated and maintained by service-timing and server-timing modeler  for each service and each server, respectively, appearing in the input transaction records. The server modeler is described in greater detail under , and the server synchronizer under .","Next, transaction sorter  sorts all the synchronized transaction records  from the data-collection period in chronological order, either by synchronized receive date, send date, or sent date, outputting sorted transaction records . In the preferred embodiment, the transaction records are sorted by the synchronized receive date, which tends to have the least variance of these three date estimates.","Session tracker  teases apart the sorted transaction records  into records belonging to individual clients, on the basis of such identifying characteristics as the account number, cookie, authentication, URL session ID, email address, IP (extended) address, TCP connection, and SSL\/TLS session ID, outputting each individual client's set of sorted transaction records as an individual client session . The session tracker is discussed at length under . TCP refers to the Transmission Control Protocol; SSL refers to a Secure Socket Layer; and TLS refers to Transport Layer Security.","Finally, client synchronizer  corrects for errant clock settings among all active clients using the website during the data-collection period, compensates for the indeterminacy of the phase of request represented by the user agents' date timestamps recorded in the input transaction records, adjusts for transmission time between each client and server in each direction, and adjusts for the user-agents' service load time, in order to accurately estimate the client's load date and click date, augmenting the transaction records in client sessions  with these dates to output corresponding client-synchronized output transaction records in synchronized client sessions . The client synchronizer bases the client clock correction, phase compensation, transmission delays, and load time on client-specific client-timing models  generated and maintained by client timing modeler , by agent-specific agent-timing models generated and maintained by agent timing modeler , as well as on server models  and service models . The agent modeler is described further under . The client modeler is detailed under .","At many websites, the accuracy of the timestamps is untrustworthy because each transaction may be received and transmitted by a different server, and the servers may not be properly synchronized, so that their clocks and hence their timestamps disagree significantly and gradually drift apart. This problem may be especially pronounced when different transactions within the same client session may even be served by data centers geographically distant from one another.","A further error, typically constant across all servers particular to a website, is due to the indeterminacy of the server phase denoted by a server timestamp: Many web services take a substantial interval of time to assemble and transmit, and the timestamp could refer to any instant during that interval. In fact, the precise meaning of the Date header in the server response is even officially undefined\u2014although the HTTP specification recommends that the date represent the moment just before the entity is generated, it allows for the date to be generated at any time during the message origination.","Therefore, depending on the website, the timestamp may denote when the server received and enqueued the HTTP request, when it dequeued the request and began serving the service, when it finished serving the service, when it recorded the received or fulfilled request in a database, or anything in between.","As depicted in information-flow diagram , service-timing and server-timing modeler , for use in session reconstructor  (See ), estimates and tracks the service timing characteristics  for each service  provided by the website during the data-collection period, and the server timing characteristics  for each client-facing server  in use at the website during the data-collection period, by using service- and server-delay modeler  to measure and model the server's service delay statistics  and server delay statistics  for each service provided by that server during the data-collection period; using echo modeler  to measure and model the server's echo delay statics ; using service-delay comparator  to compare the service-delay and echo-delay models; and using the server-delay comparator  to compare the server-delay and echo-delay models.","Service-and-server modeler  inputs transaction records  during the data-collection period and extracts the server identifier  to obtain a list of all exposed servers active during the data-collection period, which it provides to service- and server-modeler  and echo modeler ; and extracts the service identifier  to obtain a list of all services provided by each server during the data-collection period, which it provides to the service- and server-modeler. For the current Internet addressing schemes, the server identifier consists of the server's IPv6 or IPv4 address and port number in the TCP or UDP packet-header, the port number being necessary for website servers in a private network behind a proxy; and the service identifier consists of the service's URL.","During the data-collection period, service- and server-timing modeler  uses service- and server-timer  to measure the timing characteristics of each active server  identified by server identifier  for each of that server's active services , and uses service- and server-date comparator  to model the statistical distribution of the server's service timing characteristics.","Specifically, in a rearguard deployment, for each active server and each of that server's active services, the service- and server-timer sends a statistically significant number of requests  for that service to that server, and outputs the date timestamp  specified by the server in the service response \u2014in the server's Response Date header in the case of HTTP transactions. The moment the service timer sends a service request, it outputs service-request send date timestamp ; the moment it begins to receive corresponding service response , it outputs service-response receive date timestamp ; and the moment it has finished receiving the service response, it outputs service-response date timestamp ; each of these times being given by master clock  as respective current time . In a vanguard deployment, instead of issuing a statistically significant number of instances of each service request, the server timer can simply pass the filtered client actions  to the servers, and receive the corresponding normal service actions , thus providing an accurate fix for each actual client transaction without the need for additional samples.","Service- and server-date comparator  models the distribution of the difference between service-receipt date  and service-send date  for each service , outputting the models as service delay models . The service-date comparator also models the distribution of the difference between nominal response date  and each of service-send date , service-receive date , and service-receipt date  for each server  as a function of the service , outputting the models as server delay models . The service-date comparator is detailed under .","Also during the data-collection period, echo-timing modeler  uses echo timer  to measure the null-service timing characteristics of each active server , and uses echo date comparator  to model the statistical distribution of the null-service timing characteristics. Specifically, echo timer  issues a statistically significant number of echo requests , also known as ping requests, to each active website server , outputting echo send date timestamp  the moment it sends the echo request, and outputting echo receipt date timestamp  the moment it has received the echo response  back from the server, each timestamp being given by the respective current time  as specified by master clock .","For each timed echo, echo date comparator  calculates the difference between echo receipt time  and corresponding echo send time , and outputs a model of the distribution of the result as echo delay model . In the simplest embodiment, the server-specific echo delay model for each direction comprises half the mean roundtrip echo time. The preferred embodiment also takes into account any known speed and bandwidth asymmetries in the transmission rate of the Internet connection on either end, by partitioning the roundtrip echo time into two portions inversely proportional to the throughput in that direction.","Finally, for each active service , delay comparator  compares the service roundtrip delay  with the echo roundtrip delay , outputting the difference between the models as intrinsic service duration in service model .","In an alternative embodiment, the server timing is modeled in terms of service length in bytes, rather than in terms of intrinsic service duration.","For each active exposed website server , server delay comparator  also compares the server's service delay distribution  with the server's echo delay distribution , outputting the difference between the models as server timing model . In the simplest embodiment, the server timing model comprises three affine functions of the intrinsic service duration, each with an additive bias parameter and a multiplicative rate parameter. Specifically, the server receive function, used by server synchronizer  to estimate when the server received a service request, is calculated as the difference between the service request delay function and the echo request delay function; the server send function, used to estimate when the server started to send a response, is calculated as the difference between the service send function and the echo send function; and the server sent function, used to estimate when the server finished sending a response, is calculated as the difference between the service sent function and the echo send function.","In an alternative embodiment, instead of creating server-independent service-delay models  separate from server-delay models , server service-date comparator  generates a separate server-delay model for each active service for each active server providing that service. The simplest combined service-and-server-delay model then gives the service-request, service-respond, and service-response delays as constant functions specific to both the service and the server, computed as the observed mean of each respective difference. In this case, service-delay comparator  and server-delay comparator  are likewise combined into a single service-and-server-delay comparator that correspondingly outputs a separate timing model for each active service for each active server providing that service.","If either the service timer  or the echo timer  finds that a server fails to respond or finish responding to a request within a reasonable amount of time, typically within a few seconds or a small multiple of the average response time for that server or that service request, then it excludes that measurement from the statistics and issues a warning  to website administrators that the server is not responding as quickly as expected.","Service timing models  and server timing models  are updated by service-delay comparator  and server-delay comparator  periodically, frequently enough to track the drift among server clocks, as well as after power outages, daylight-savings-time clock shifts, and other exceptional events that might affect the server clock settings or alter the proxy's port numbers for individual servers. In the preferred embodiment, the server timer updates the server timing models frequently enough to accurately track server congestion. In an alternative embodiment, the service delay models  and the echo delay models , and thereby the server models , explicitly take website congestion into account, as thresholded affine functions of the server load.","In one embodiment, the service models  and server models  and the underlying service delay models , server delay models , and echo delay models  are computed in independent batches, for example for successive data-collection intervals such as once per hour for the preceding hour. In the preferred embodiment, these models are continually updated with a sliding window in shorter overlapping increments, even, in the limit, as each new transaction record is collected and as each old transaction ages beyond the time window.","In addition to their use for website threat detection, the service timing models  can be analyzed by service analyzer  and presented as service summaries  for operations research, for example to determine whether the resources devoted to particular services or types of services should be adjusted; for development research, for example to determine whether certain services should be replaced with more efficient ones; and for marketing research, for example to determine how various services are being used.","Similarly, in addition to their use for website threat detection, the server timing models  are analyzed by server analyzer  and presented as server summaries  for operations research, for example for load-balancing or to determine whether certain servers or types of servers are performing up to expectations.","As depicted in information-flow diagram , the server service-date comparator , used by service-and-server modeler  (See ) models the service delay  using service-delay modeler , and models the server delay  using server-delay modeler .","For each timed service transaction, the server service-delay modeler calculates the difference  between the service-receipt date  and the corresponding service-send date , outputting the result as service round-trip delay . Roundtrip-delay modeler  computes a server-independent model of the distribution of this difference for each service , outputting the result as service-delay model . In the simplest embodiment, the service-delay model comprises a service-specific constant function, computed as the mean round-trip time across all active servers, which is the least-squares best fit value. In the preferred embodiment, the model for each service takes caching into account by decomposing the round-trip data into cached versus uncached distributions, where caching is determined by rerequesting the same service from the same server in quick succession.","Similarly, for each timed service transaction, the server-delay modeler  uses differencer  to calculate the service-request delay  as the difference between nominal response date  and corresponding service-request send date ; uses differencer  to calculate the service-respond delay  as the difference between each service-receive date  and the corresponding nominal response date; and uses differencer  to calculate the service-response delay  as the difference between each service-receipt date  and the corresponding nominal response date. Service-model fetcher  then fetches service-duration parameters  for the service identified by service identifier  from service models .","In the simplest embodiment, the service-duration parameters used by the server-delay modeler comprise the mean duration of the service. Finally, request-delay modeler  models the request delay for each server  as a function of the service duration, which it outputs as request-delay model ; respond-delay modeler  likewise models the respond delay for each server as a function of the service duration, which it outputs as respond-delay model ; and response-delay modeler  likewise models the response delay for each server as a function of the service duration, which it outputs as response-delay model ; these three models comprising the server-delay model . In the simplest embodiment, the server-delay modeler models the service-request, service-respond, and service-response delays as server-specific affine functions of the intrinsic service duration, computed by the least-squares best fit, each function specified by an additive bias parameter and a multiplicative rate parameter. In the preferred embodiment, the model for each of the three service-delay components also takes caching into account, by decomposing the observed data for each into two separate affine functions, one for when the service is cached, the other for when it is uncached.","In the preferred embodiment, the server-delay modeler and service-delay modeler account for the effect of encryption\u2014such as TLS or SSL\u2014on service timing implicitly, by considering the encrypted versus encrypted versions as distinct services modeled separately. Ordinarily, this happens automatically as a result of the convention of giving securely encrypted services distinct URLs, such as \u201chttps: . . . \u201d versus \u201chttp: . . . \u201d.","Note that, since the bandwidth of the connection between the server timing modeler and the servers for a website is typically at least as great as that of any client, its effect on the serving duration is relatively insignificant.","As depicted in , server synchronizer , for use in session reconstructor  (See ), adjusts the response date timestamp  in each input website transaction record  for inaccuracies in the clock settings of the server  and for the indeterminacy of the phase of service, using receive-date estimator , send-date estimator , and sent-date estimator  to accurately estimate the server's receive date , send date , and sent date , respectively, for that transaction, and outputting those estimates in corresponding augmented server-synchronized output transaction record . The server synchronizer bases these adjustments on the timing model  for the service and the server timing model  for the server.","For detecting man-in-the-browser attacks, man-in-the-middle attacks, repetitive robotic attacks, and similar types of website attacks, which are characterized by anomalously ordered transactions and anomalously quick transactions, accurate server timestamps are critical. By giving transaction sorter  (See ) accurate and precise dates by which to sort the transaction records, it can be determined whether the order of transactions in a session appear anomalous. By giving event comparator  (See ) accurate and precise event-duration estimates, it can be determined whether an event is anomalously quick.","Although for non-streaming data, websites usually communicate with clients via TCP\/IP, which guarantees packet order, nevertheless a separate TCP socket session is created for each webpage, so if a client opens a plurality of pages concurrently, those requests may travel along different routes and be received by the website out of order, and they may be processed by servers of differing speeds and responded to out of order, and the responses may likewise travel along different paths and reach the client out of order. Note, however, that within a single processing thread, for example within a single browser window or tab, the client actions and website actions are necessarily strictly ordered, in the sense that the client has to receive each website action before being able to respond to it, while the website likewise has to receive each client action before being able to respond to it.","For each input transaction record , service- and server-modeler  extracts the service identifier  and passes it to service model fetcher , extracts server identifier  and passes it to server model fetcher , and extracts server response date timestamp , which it passes directly to each of the server date estimators: receive-date estimator , send-date estimator , and sent-date estimator .","Service-model fetcher  uses service identifier  to look up the appropriate service timing model , which it outputs to receive-date estimator , send-date estimator , and sent-date estimator . In the simplest embodiment, shown here, the service timing model comprises a mean service duration .","Server-model fetcher  uses server identifier  to fetch the appropriate server timing model , which it likewise outputs to the server date estimators. In the simplest embodiment, shown here, for each of the three server date estimators, receive-date estimator , send-date estimator , and sent-date estimator , the server timing model comprises an affine function of the service duration, each affine function being specified by a multiplicative rate parameter (receive rate , send rate , and sent rate ) and an additive bias parameter (receive bias , send bias , and sent bias ), respectively.","Receive-date estimator  estimates the server receive date \u2014the instant when the server received the service request\u2014by adjusting the server's response date timestamp  by the server receive bias  and the product of the server receive rate  and the service duration .","In detail, multiplier  multiplies the service duration estimate by the server receive rate estimate, outputting the result as receive duration estimate . Adder  then adds the receive duration estimate to the receive bias estimate, outputting the sum as total receive delay estimate . Finally, subtractor  subtracts the receive delay estimate from the recorded response date, outputting the difference as adjusted receive-date estimate .","Similarly, send-date estimator  estimates the server send date \u2014the instant when the server began sending the service response\u2014by adjusting the server's response date timestamp  by the server send bias  and the product of the server send rate  and the service duration . In detail, multiplier  multiplies the service duration estimate by the server send rate estimate, outputting the result as send duration estimate . Adder  then adds the send lag estimate to the send bias estimate, outputting the sum as total send delay estimate . Finally, subtractor  subtracts the recorded response date from the receive delay estimate, outputting the difference as adjusted send-date estimate .","Similarly, sent-date estimator  estimates the server sent date \u2014the instant when the server finished sending the service response\u2014by adjusting the server's response date timestamp  by the server sent bias  and the product of the server sent rate  and the service duration . In detail, multiplier  multiplies the service duration estimate by the server sent rate estimate, outputting the result as sent duration estimate . Adder  then adds the sent duration estimate to the sent bias estimate, outputting the sum as total sent delay estimate . Finally, subtractor  subtracts the recorded response date from the receive delay estimate, outputting the difference as adjusted sent-date estimate .","Finally, transaction-record editor  augments the input transaction record  to include server receive-date estimate , server send-date estimate , and server sent-date estimate , outputting the augmented transaction record as synchronized transaction record .","Often the response to a service request is assembled from a number of service components that may differ in service timing characteristics, provided by a number of servers that may differ in server timing characteristics. For example, a web page may include static text, dynamic client-specific text, images, and other materials, and may even include other web services, for example in separate HTML frames. In these cases, in the preferred embodiment, the receive-date estimator , send-date estimator , and sent-date estimator  accumulate the receive delays , send delays , and sent delay , respectively, before subtracting the response date, outputting a single receive-date estimate , single send-date estimate , and single sent-date estimate , respectively, for the entire transaction.","It should be noted that relative (and possibly absolute) timing of events can be done as described herein or using conventional methods, if available.",{"@attributes":{"id":"p-0144","num":"0143"},"figref":["FIG. 9","FIG. 5"],"b":["5080","3030","5080","5070"]},"The source IP address and destination IP address, including TCP port, are required in all HTTP(S) requests and responses as part of the IP packet header, making the IP address, alone among the specific types of session-identifying information, reliably present in all transaction records. Nevertheless, the value of the IP address is an inadequate discriminant of client sessions, because in legitimate use the relation between IP addresses and clients is both ambiguous (one-to-many) and degenerate (many-to-one). On one hand, a single IP address is commonly shared by multiple clients, for example when clients share a router in a local area network, or when they share a proxy or a firewall. Although in such cases the clients are distinguished by the port number in the extended IP address, the mapping between client and port is ephemeral, persisting only four minutes beyond the duration of a TCP connection, and is thus known to be unique only for transactions occurring within four minutes of each other. In such cases the clients may also be distinguished by HTTP Forwarded-for field in the request header, but that field is optional. On the other hand, a single client may use multiple IP addresses within a single session, for example when a mobile client is automatically switched between cell towers while travelling, when a client is automatically switched or intentionally switched between wireless routers due to interference in a congested wireless environment, or when using a multihoming system with plural public IP addresses; and when opening plural concurrent TCP connections during a session. Furthermore, the IP address and especially the Forwarded-for field in a client's request header are untrustworthy in that they may be spoofed by an attacker, for example in order to camouflage the client's response times and order of transactions.","In order to receive the website's responses, an attacker must of course have control of the bogus IP addresses, for example through legitimate ownership, hijacking the IP address through malware installed on the client's system at that IP address, or stealing the IP address by poisoning the network address translator in any router along the route to redirect traffic to the attacker's system, or poisoning the address resolution caches within a local area network to direct traffic to the attacker's system. For certain types of attacks, however, such as denial-of-service attacks on websites by flooding the websites with requests, denial-of-service attacks on clients by flooding the clients with responses, or attacks defaming or blacklisting clients by attributing unsavory or hostile actions to them, the attackers have no need to receive the website's responses. In man-in-the-browser attacks, the attacker automatically shares the client's IP address(es).","Although the IP address is a degenerate client indicator, the session tracker uses temporal association statistics to recognize separate IP-address strands belonging to the same client session, entwining concurrent strands into cohorts and linking sequential strands into chains.","To recognize concurrent IP-address strands belonging to a single client, the session analyzer relies on the fact that user-agents display characteristic temporal usage patterns of a cohort of paronymous IP addresses. Paronymous IP addresses are characteristically used in parallel by a client. In some cases, paronymous refers to an element that has a common root or stem, such as a common IP base address. The use of paronymous IP address is illustrated through the example in which immediately after receiving a web page description, a particular browser may characteristically fetch the secondary resources required by the page\u2014such as scripts, style sheets, and images\u2014in a flurry of requests through additional IP addresses. Thus, the agent-timing modeler  creates agent-specific time-normalized IP-address cohort templates of these patterns from the statistics of known paronymous IP-address usage, as identified by unambiguous or less-ambiguous session indicators, such as SSL|TLS session IDs and session cookies. The session tracker then applies the template for the appropriate user-agent, probabilistically time-warped according to the appropriate client and service timing models, in order to recognize the expected cohort of paronymous IP addresses, and confirms them by commonality of user-agent and other generic information such as the various Accept . . . HTTP headers. The session tracker also imposes a 4-minute threshold after and before the assignment of a client-and-server IP extended-address pair to a different client to account for the TCP TIME-WAIT reassignment period.","Typically, a cohort of paronymous IP addresses shares the same IP base address, in which case it is easy to recognize. But for multi-homing clients and load-balanced client proxies, the cohort may be distributed across different\u2014though usually convergent\u2014IP base addresses. For these cases, the session tracker uses a global table of paronymous IP base addresses and looks for the cohort among the entire set of IP addresses associated with the first IP address on which the client appears. The global table of paronymous IP addresses is compiled from known single-client cohorts, as identified by unambiguous session indicators such as SSL|TLS session IDs and session cookies, and is confirmed by commonality of IP-address geo-location. In one embodiment, to adequately cover the IP address space, this global table is federated among websites. To the extent that such information is available, this global table also includes sets of IP addresses declared to be paronymous by authorities, such as Internet service providers. Also, in one embodiment, to compensate for the rapid proliferation and turnover of IP addresses, this global table is continually updated.","To recognize sequential IP-address strands belonging to a single client, the session tracker links together temporally disjoint strands of metonymously associated IP addresses whose transactions show continuity of user-agent, number of client and server IP-address pairs, and other generic information, into a chain. Metonymous IP addresses are those which are characteristically used in sequence by a client","Often, a chain of metonymous IP addresses shares the same IP base address, which is relatively easy to recognize. But since IP addresses used in parallel by a single client can generally also be used in succession by a single client, the chain may also alternate between different IP addresses for multi-homing clients and load-balanced client proxies. The chain may also hop between different IP base addresses for mobile IP addresses, which may be very divergent when roaming between different carriers. For these cases, the session tracker uses a global table of metonymous IP base addresses for linking together successive strands. The global table of metonymous IP base addresses is a superset of the global table of paronymous IP base addresses, augmented to include associated IP base addresses, which are used sequentially but never concurrently, such as mobile IP addresses assigned to neighboring cells. The global table of metonymous IP addresses is compiled from known single-client chains, as identified by unambiguous session indicators, such as SSL|TLS session IDs and session cookies, and is confirmed by proximity of IP-address geo-location. To the extent that such information is available, this global table also includes sets of IP addresses declared to be metonymous by authorities, such as mobile Internet service providers. In one embodiment, to compensate for the rapid proliferation and turnover of IP addresses, this global table is continually updated.","The TCP connection, identified by the socket pair comprising the IP extended addresses of the client and server, in conjunction with the time the connection was opened, is less reliable than just the IP extended addresses in that it is only accessible in a vanguard embedment. It is also untrustworthy for the same reasons as the pair of IP addresses alone. However, unlike the IP addresses by themselves, the TCP connection is an unambiguous client discriminant, because in legitimate use all transactions during a single TCP connection come from the same client; and as of HTTP 1.1, TCP connections are often kept alive for far longer than 4 minutes. Moreover, although TCP connections are also just as degenerate as IP address-pairs alone, they are better suited for uniting a client's concurrent strands because user-agents that open multiple connections to a site tend to open them all nearly simultaneously. For a single-IP-address TCP connection, the connection information may not always be more helpful for linking sequential strands since prior TCP connections are not necessarily properly shut down before opening new connections during the hand-off between cells in a mobile environment or between wireless routers in a congested wireless environment. But for a cohort of concurrent connections, the TCP connection information is more useful, since concurrent connections are switched simultaneously in a mobile hop or wireless-router switch-over. Thus, when TCP connection information is available, as in vanguard deployments, the session tracker tracks TCP-connection strands rather than IP-address strands.","To recognize concurrent TCP-connection strands, the session tracker uses the same techniques as for recognizing concurrent IP-address strands, including agent-specific time-normalized TCP-connection cohort usage-pattern templates, commonality of user-agent and other generic information, and a global table of paronymous IP addresses.","Similarly, to recognize sequential TCP-connection strands, the session tracker uses the same techniques as for recognizing sequential IP-address strands, including temporal disjointness, continuity of user-agent, number of client and server IP-address pairs, and other generic information, and a global table of metonymous IP addresses.","The SSL or TLS session ID, a 32-byte sequence exchanged in the ClientHello and ServerHello messages, is even less reliable than the TCP connection, because its presence and accessibility is restricted not only to vanguard deployment, but also to secure transactions\u2014e.g. to encrypted HTTPS as opposed to plaintext HTTP. However, since HTTPS is used in the portions of web sessions most important for fraud detection, this further restriction is not a severe handicap. Like the IP address and TCP connection, the SSL|TLS session ID is also degenerate in that a single client may have multiple concurrent or sequential SSL|TLS sessions with the same server during a single client session. However, because SSL|TLS session IDs may be shared among plural TCP connections, and opening a secure connection is quite expensive in terms of execution time, user-agents generally conserve SSL|TLS sessions, so that in practice clients only open concurrent secure sessions with a server when using more than one application to access the same site, and almost always reuse the same SSL|TLS session ID when returning to secure mode at a site within the same client session. The SSL|TLS session ID can also be changed while in secure mode, but when this happens, the switch-over is overt, so that the session tracker can follow the change. Moreover, like TCP connections, SSL|TLS session IDs are unambiguous, because in legitimate use all transactions with the same session ID verifiably belong to the same client. More importantly, it is the only type of specific identifying information which can be considered trustworthy, although man-in-the-middle attacks making the SSL or TLS session ID untrustworthy are possible. For example, a proxy can intercept HTTPS traffic between a heedless user and the server by opening a plaintext session with the user and an SSL|TLS session with the server; or, worse, a secure website can be spoofed with a stolen or forged certificate.","The SSL|TLS session ID is of critical importance as a session indicator when the service traffic processor () is unable to decrypt the contents of the transactions. This may occur if the service traffic processor missed the beginning of the session or dropped part of it, or in TLS ephemeral mode using Diffie-Hellman key exchange, and does not otherwise have access to the encryption state or cleartext. In these cases the only other accessible session-identifying information is the ambiguous and untrustworthy IP addresses. Using the SSL|TLS session ID, certain types of anomalous behavior, such as velocity attacks, can still be detected.","For undecryptable secure transactions, whether in vanguard or rearguard deployment, the threat detector probabilistically determines the identities of the transactions by correlating the encrypted message sizes with those of decryptable secure transactions, taking the compression and cipher into account, where the correlation database is compiled both from naturally observed secure transactions and from naturally observed insecure transactions that are variously compressed and encrypted by the threat detector itself.","The TLS session ticket, opaque data up to 64 KB in length, is an optional substitute for the session ID, and as such, has exactly the same strengths and weaknesses. In the preferred embodiment, rather than directly comparing entire session tickets, session tickets are compared using a hashing function.","The login ID specified in the HTTP Authorization request-header field, unlike the IP address, is unreliably present, because many websites make no use of it, instead communicating authorization information in the Cookie field or in a query string in the URL, and because most websites permit clients to visit certain areas and perform certain types of actions without logging in. Many visitors to a website do not even have an account at the website to sign in to, and those clients with valid accounts at a website often avoid signing in, due to laziness or privacy concerns. Nevertheless, for websites that use HTTP Authorization to restrict access to privileged regions, the login ID is, when properly implemented by the website, reliably present in HTTP requests for services within those regions. Like IP addresses, login IDs are legitimately both ambiguous and degenerate client identifiers. On one hand, multiple clients commonly share the same login ID, for example in situations where one or more users are helping others with their accounts, one or more users are supervising others, or when multiple people in a firm or a family use the same login ID. On the other hand, a single client may use multiple login IDs, for example when a client has multiple independent accounts, or is serving a number of customers with independent accounts at the website. Login IDs are also untrustworthy, since they are often spoofed by attackers, for example in brute-force password-guessing attacks, in man-in-the-middle attacks, and for stolen accounts. In man-in-the-browser attacks, the attacker automatically shares the login ID.","The email address specified in the HTTP From request-header field is highly unreliable because, to protect users' privacy and to avoid spam, it is not implemented by most modern browsers, and is typically only supplied by scrupulous spiders and robots. The From email address is also legitimately both ambiguous and degenerate, since on the one hand, multiple users often share an email account, for example in a family or small business where a single person is Internet-savvy or imperious; while on the other hand, a single user may often have multiple email accounts, for example for home and office. When the email address is available, it is roughly as untrustworthy as the IP address, in that it is easily spoofed, but in order to receive any responses sent to that email address, an attacker would need to have access to the email account.","The cookie specified in the HTTP Cookie request-header field is unreliably present, because clients can refuse to accept cookies from the website and thus not return the cookies to the website, and modern browsers make it easy for users to refuse cookies. On the other hand, websites can refuse to serve users who refuse cookies, and many security-conscious websites do so. Moreover, when present and properly implemented by the website to include a unique session ID, a cookie is the most specific client identifier that insecure HTTP provides for, because the relation between clients and session cookies may be one to many, but not legitimately many-to-one: A single client may have multiple concurrent cookie sessions with a website by using multiple applications to access the website, for example, when using more than one browser to connect to the website because of website-browser incompatibilities, or when using automating applications to perform routine functions on the website. In contrast, a cookie can only be shared if it is deliberately stolen, for example by copying the cookie using malware installed on the intended recipient's system, by intercepting it through a counterfeit website, by side-jacking the cookie with a packet sniffer, or by forwarding the cookie by cross-site scripting; or if the cookie is deliberately planted or \u201cfixed\u201d, for example by getting the victim's browser to store the cookie via cross-site cooking or cross-subdomain scripting.","On some websites, a query string specifying the session ID is appended to the current URL.Query-string session IDs are susceptible to harvesting in a referred website from the URL query string in the HTTP Referrer field, and to session fixation by emailing the victim a hyperlink specifying a session ID in a URL query string, where the session ID may be generated by the attacker or by the target website, making it deceptively ambiguous and untrustworthy. The query-string session ID is also trivial to modify by hand, making it deceptively degenerate, and to erase, making it unreliable. Since its weaknesses are well known, query-string session IDs are not used by security-conscious sites.","Referring URLs, specified in the HTTP Referrer field, are unreliably present, because, to help protect users' privacy, some services, browsers, and browser extensions permit referrers to be disabled. Some browsers also omit the referrer when opening a new window or tab, or when following a link from a different application. Even when present and trustworthy, the referrer strand is only partially and implicitly client-specific, because it is both ambiguous and degenerate on a transaction-by-transaction basis.","The timestamps, in addition to being used to sort the transactions in chronological order, are also used to help segregate sessions on the basis of overlapping transactions. Note, however, that a single client may legitimately have overlapping transactions, for example by concurrently opening or operating multiple browser windows opened to the same website.","Besides timestamps and these eight specific types of information, the session tracker can also use generic types of information specified in HTTP Request headers, including Accept (acceptable content types), Accept-Charset (acceptable character sets), Accept-Encoding (acceptable encodings), Accept-Language (acceptable languages), Accept-Ranges (acceptable size ranges), User-Agent (name and details of web application), and Via (proxies through which the request was sent). All of these HTTP Request headers are optional and therefore unreliable. Moreover, they are all untrustworthy, being easily spoofed. Some browsers and freeware browser-plug-ins even exist to let ordinary users conveniently alter some of these headers during a session. However, spoofing such non-specific information during a session does not affect any of the specific session identifiers. Changes in any of these generic information types during a session can be flagged as potentially indicating that the session has been hijacked.","The session tracker  thus tracks sessions along three separate dimensions according to partially independent keys: IP-address, GUID and user ID. Because these three dimensions are in a many:many:many relationship, the session tracker resolves client sessions not only along each individual dimension, but also for each combination of dimensions.","The primary session tracker, IP tracker , first segregates the sorted transaction records  according to the only completely reliable session indicator, TCP connection IDs in a vanguard deployment, and client and server IP-address pair in a rearguard deployment. It then aggregates these strands by entwining cohorts in accordance with agent-specific cohort usage-pattern templates from agent models , global table of paronymous IP base addresses , and, in vanguard deployment during secure session segments, the SSL|TLS session IDs or TLS session tickets. It then links chains of these strands, provided they don't overlap, using a global table of metonymous IP base addresses , and, in vanguard deployment during secure session segments, the SSL|TLS session IDs or TLS session tickets. The resulting client sessions it outputs as IP sessions . The IP tracker also updates the global paronymous and metonymous IP-address tables from confirmed single-user sessions, as identified for example by SSL|TLS session ID or cookie session ID.","The secondary session tracker, GUID tracker , tracks the cookie session ID, email address, query session ID, or equivalent globally unique session identifier, as available. It tracks this session indicator both in complete sorted transaction records , outputting the resulting client sessions as GUID sessions ; and in IP strands , outputting the joint sessions as IP plus GUID sessions .","The tertiary session tracker, user tracker , tracks the authorization login ID, cookie user ID, internal user ID, or equivalent user identifier, as available. It tracks this session indicator in complete sorted transaction records , outputting the resulting client sessions as user sessions ; in IP strands  to yield joint IP plus user sessions ; in GUID strands  to yield joint GUID plus user sessions ; and in joint IP plus GUID strands  to yield triple-joint IP plus GUID plus user sessions .","In each of these strands, incongruities and discontinuities in generic information such as User-Agent and Accept . . . fields are flagged as suspicious, as are discontinuities in the Referrer strand.","Since the IP extended addresses (and, in vanguard deployment, the TCP connections) constitute the only reliably present session indicator, the session tracker extrapolates all other session indicators backward and forward along these strands.","The same techniques disclosed here for these session indicators apply to other session indicators not mentioned. In one embodiment, the specific session indicators are reduced to three keys as shown here, for transparency and simplicity; but other reductions, or even no reduction, are equally possible. In one embodiment, for computational efficiency, the three keys are applied in order of decreasing reliability, as shown, but they can be applied in any other order or even in combination with equivalent results.","As depicted in information-flow diagram , agent modeler , for use in session reconstructor  (See ), analyzes the timing characteristics of individual user agents by using agent request-timing modeler  and load modeler , and outputs agent timing models . Agent modeling is done off-line in a laboratory testing environment, by running precisely timed scripts on the combinations of hardware, operating system, and application employed by clients to use the website's services, as recorded, in the case of HTML webpages, by the user-agent field  in the HTTP request headers of the transaction records  received by the website. Assume the bandwidth from the website data center  to the agent test systems  is arranged to be at least as great as that from the website data center to any actual client.","Agent modeler  inputs transaction records  and extracts the agent identifier  to obtain a list of user agents used to visit the website; and extracts the service identifier  to obtain a list of services provided by the website; and provides both these identifiers to agent request-timing modeler .","For each available active user agent , agent modeler uses agent request-timing modeler  to model the agent request delay , and uses agent load modeler  to model the agent load delay .","Agent request-timing modeler  uses request timer  to measure the timing characteristics of each available agent  identified by agent identifier , for each service used by that agent, as identified by service identifier , or for a statistically significant number and variety of those services, and uses agent request-date comparator  to model the statistical distribution of the agent's request timing characteristics.","Specifically, for each available active user agent and each service requested by that agent and to be tested with that agent, the agent request timer runs a script  on that agent  to issue a statistically significant number of requests  for that service from the website . The script reports back to the request timer the time at the instant it simulated a click on a hyperlink requesting the service through the agent or otherwise naturalistically caused the agent to issue a request for the service, which date the request timer records as click date . The script then monitors the agent's system and reports back to the request timer the time at the instant the agent began to transmit the request, which the request timer records as request send date ; and the time at the instant the agent finished transmitting the request, which the timer records as request sent date . The request timer also records the request size . The click date, request send date, and request sent date are each given by the current time  according to master clock , to which all agents being timed are synchronized. The script also reports back the nominal request date recorded in the service request by the agent\u2014in the Date field of the HTTP request header, in the case of HTML pages\u2014which the agent request timer records as service-request date .","The service-request date is not always available for service requests; for HTTP requests, for example, the Date field in the HTTP Request header is optional, and some browsers and other web applications provide a user-interface control for blocking output of the request date.","For clients supplying a service-request date  through their agent, agent request-date comparator  models the distribution of the difference between the click date  and the nominal request date, between the request-send date  and the nominal request date, and between the request-sent date  and the nominal request date. For clients blocking the service-request date, the request-date comparator also models the distribution of the difference between the request send date and the click date, and between the request sent date and the click date. The agent request-date comparator models each of these five models as a function of the request, and outputs the functions as request-delay model , as part of agent-timing model  for the agent identified by agent identifier . In the simplest embodiment, the agent request-date-comparator models each of these delays as an agent-specific affine function of the request size , computed by the least-squares best fit, each function specified by an additive bias parameter and a multiplicative rate parameter.","Agent-request timing modeler  uses agent load timer  to measure the timing characteristics of each available agent  identified by agent identifier , for each service tested by agent request-timing modeler , and uses load-date comparator  to model the statistical distribution of the agent's load timing characteristics.","Specifically, for each service request issued by agent request-timing modeler , agent-timing script  monitors the agent's system and reports back to agent load timer  the time at the instant the agent's system begins to receive the service, which the load timer records as response receipt date ; and reports back to the load timer the instant the agent has finished loading the service\u2014or, more precisely, the instant the client can respond to the service, for example by clicking on hyperlinks, in the case of an HTML webpage\u2014which the load timer records as service loaded date . The load timer also records the size of the service .","In the preferred embodiment, if a single service request  receives multiple service responses , the load script and load timer track each such service separately for greater accuracy. The response receive dates and service loaded dates are given by the respective current times  specified by master clock .","Load-date comparator  models the distribution of the difference between service-loaded date  and response-receive date  as a function of the service, and outputs the function as load-delay model , as part of agent model .","In the simplest embodiment, the load-date comparator models the distribution as an agent-specific affine function of the size of the service , computed by the least-squares best fit, specified by an additive bias parameter and a multiplicative rate parameter. In the preferred embodiment, the load-delay model specifies separate affine parameters for plaintext versus unencrypted services, and for service elements of differing load speeds, such as HTML, images using different compression formats, and timed messages that the client must attend before proceeding. In the preferred embodiment, the load-delay model also involves separate load-delay models for cached versus uncached services.","If either the request timer or load timer fails to receive a response from the script within a reasonable amount of time\u2014typically a few seconds\u2014then it outputs a notification  to the test administrators warning that the agent is taking longer than expected, and specifying the agent and the service that elicited the problem.","In addition to outputting agent-timing models  for use by client modeler  and client synchronizer  (See ), agent modeler  also uses agent analyzer  to output agent summary  summarizing the agents  used to visit the website, along with their frequency of use. For those agents available for testing, the agent summary also summarizes their load times for different types of services; while those unavailable are marked for possible requisition for future testing. The agent summary is also useful for website-development research, for example to determine which agents the website should optimize for because of their popularity, or to determine whether alternate forms of certain services should be provided for agents that take too long; and for marketing research, for example to determine customer preferences.","For efficiency, agent-timing modeling may be integrated with normal quality-control testing of the website.","As depicted in information-flow diagram , client-timing modeler , for use in session reconstructor  (See ), estimates and tracks the timing characteristics  (See ) for each website client accessing the website during the data-collection period, by using client service-delay modeler  to measure and model the client's service delay statistics , using echo-timing modeler  to measure and model the client's echo delay statistics , or, if the echo fails, using trace-timing modeler  to measure and model the client's trace-delay statistics , or, if the trace also fails, applying the echo-delay modeler or trace-delay modeler to the closest responding proxy to the client located by close-proxy finder ; and comparing the service delay estimate with the null-service echo delay or trace delay.","In vanguard deployments, the client-timing modeller uses standard TCP round-trip time measurement based on TCP Timestamp Options [Jacobson, Braden, & Borman, 1992: RFC 1323], instead of echo timing and trace timing.","Many Internet service providers block ping and traceroute requests to prevent their network from being mapped out by malicious clients, and some individual clients also block ping requests to reduce the visibility of their systems and thus reduce the number of network attacks on their systems.","Client-timing modeler  inputs client transaction records  and extracts the client identifier  to obtain a list of all clients active during the data-collection period, which it provides to client service-timing modeler , client echo-timing modeler , client trace-timing modeler , and close-proxy finder . For each client transaction, the client-timing modeler uses the service-timing modeler to estimate the service delay based on service-request date  (if available), user-agent identifier , request size , and service identifier , which are obtained from the transaction record. The client identifier consists of the IPv6 or IPv4 address and port number in the TCP or UDP packet-header, the port number being necessary for clients in a private network behind a router, firewall, or other proxy. In the case of HTML webpages, the service-request date is originally from the Date field in the HTTP Request header, and the user-agent is from the User-Agent field. The request size is obtained either from the sum of the HTTP header lengths and the value of the Content-Length field, or from the TCP or UDP length fields.","During the data-collection period, client service-timing modeler  uses client service timer  to measure the timing characteristics of each active client identified by client identifier , and uses client service date comparator  to model the statistical distribution of the client's service delay characteristics . Specifically, at the moment each client action  (See ) is received by website traffic processor  (See ), client service timer  outputs service receipt date timestamp  from the current time  given by master clock .","For each service transaction, client service-date comparator  calculates the client's service-request delay from the service-request date timestamp  (if available), the user-agent identifier , the request size , the server traffic processor's service receipt date timestamp , and the user-agent model  identified by the client identifier, and outputs a model of the distribution as client service-delay model . The client service-date comparator is detailed under .","During the same measurement period, client echo-timing modeler uses echo timer  to measure the null-agent timing characteristics of each active client , and uses echo date comparator  to model the statistical distribution of the null-agent timing characteristics. Specifically, for an active client, the echo timer issues a statistically significant number of echo requests  of various sizes to the client or a close proxy , outputting echo send date timestamp  the moment it sends the echo request, and outputting echo-receipt date timestamp  the moment it has received the echo response  back from the client, each timestamp being given by the respective current time  given by master clock . The echo timer also records the echo request size .","When echo response  is delayed by more than a reasonable threshold\u2014typically no more than a few seconds, dependent on the distance to the client and on current network conditions\u2014then echo-timing modeler  aborts the ping attempt, under the assumption that the client is blocking ping requests, and the client-timing modeler  attempts trace timing instead.","For each active client, echo-date comparator  calculates the difference between each echo receipt time  and corresponding echo send time  for a statistically significant sample of echo requests of various sizes , and outputs a model of the distribution of the result as echo delay .","In the simplest embodiment, the client-specific echo-delay model comprises half the mean echo time for each direction and half the echo time variance for each direction, each as an affine function of the size of the echo request, computed by the least-squares best fit, where the function is specified by an additive bias parameter and a multiplicative rate parameter.","The preferred embodiment also takes into account any known speed and bandwidth asymmetries in the transmission rate of the Internet connection on either end, as determined for some clients from the client's IP address , by partitioning the roundtrip echo time into two portions inversely proportional to the throughput in that direction, and likewise proportionately scaling the variance for each direction.","Trace-timing modeler  has traceroute timer  issue traceroute requests  to the same client  or close proxy, with stepwise increasing time-to-live values until either the target node is reached or traceroute response  is delayed by more than a reasonable threshold\u2014again, typically no more than a few seconds, dependent on the distance to the client and on current network conditions. If the last response occurs within a plausible delay considering the distance and network conditions, then the trace timer outputs echo-send date timestamp  corresponding to the moment it sent the last successful traceroute request, and outputs trace-receipt date timestamp  corresponding to the moment it received the last successful traceroute response back from the client, each timestamp being given by the respective current time  according to master clock . The trace timer also records the trace request size .","Analogously to echo-date comparator, trace-date comparator  calculates the difference between each final trace-receipt time  and corresponding trace-send time  for a statistically significant sample of trace requests of various sizes , and outputs a model of the distribution of the result as trace delay .","In the simplest embodiment, the client-specific trace-delay model comprises half the mean trace time for each direction and half the trace-time variance for each direction, each as an affine function of the size of the trace request, computed by the least-squares best fit, where the function is specified by an additive bias parameter and a multiplicative rate parameter. Again, the preferred embodiment also takes into account any known speed and bandwidth asymmetries in the transmission rate of the Internet connection on either end, as determined for some clients from the client's IP address .","If neither the echo-timing modeler  nor the trace-timing modeler  succeeds in fixing the roundtrip delay to the actual client , then the client-timing modeler uses close-proxy finder  to find the IP address  of a nearby ping proxy. The close proxy finder first uses address locator  to look up the node location  of the actual client from the client's IP address . Then proxy finder  finds the ping proxy closest to that node location, outputting its IP address as target address . The client-timing modeler  then substitutes the ping proxy's IP address for use by echo-timing modeler  and trace-timing modeler . In case the selected ping proxy also fails, the client-timing modeler uses the close-proxy finder iteratively to find another ping proxy until one succeeds.","Finally, for each active client (or at least some clients), client delay comparator  compares the distribution of the client's service-request delay  with the distribution of the client's echo delay  or traceroute delay , outputting a model of the distribution of the result as client timing model . In the simplest embodiment, the client timing model comprises the echo-request delay or trace-request delay, as a pair of affine functions of request size , one for the transmit direction and one for the receive direction, each function specifying the mean behavior with an additive bias parameter and a multiplicative rate parameter, as well as the variance in the transmit direction; and, if the request dates are supplied by the client, the difference between the client's service-request delay and the echo-request delay or trace-request delay, giving the mean client clock bias and its variance. For websites with more than one data center, the client timer generates a separate model for each geographically separate data center.","In addition to outputting client-timing models  for use by client synchronizer  (See ), client-timing modeler  also uses client analyzer  to output client summary  summarizing the clients  visiting the website, along with their IP addresses, geographic locations, and timing characteristics, including whether they supply request dates and respond to ping requests. The client summary is also useful for website-development research, for example to determine whether to provide more-lavish services for clients with large connection bandwidths and short connection lags, or more-meager services for clients with small connection bandwidths and long connection lags; and for marketing research, to determine where customers are located and what kind of connections they have.","Information-flow diagram  depicts client service-date comparator  (See ), which uses agent-delay estimator  to estimate the agent delay ; differencer  to measure the raw service delay; differencer  to compare these two estimates, and service-delay modeler  to model the service delay .","For each service transaction, agent-delay estimator  uses agent-model fetcher  to fetch the agent model identified by agent identifier  from agent models . If the transaction record does not specify the agent, the agent delay estimator uses the default agent model, whose parameters are set to the modal values of the known agents active during the data-collection period.","In the simplest embodiment, shown here, the agent request-timing model comprises agent-specific request-bias parameter  and agent-specific request-rate parameter . Multiplier  then multiplies the agent request rate by the request size , outputting the product as agent request lag . Adder  then adds the agent request bias to the agent request lag, outputting the sum as total agent delay .","Likewise, for each service transaction, differencer  calculates the difference between service-receipt date timestamp  and service-request date timestamp , outputting the difference as raw service delay . Differencer  then computes the difference between the raw service delay and the agent delay  output by agent-delay estimator  for the same request, outputting the difference as service delay model .","Finally, for each client, as identified by client-identifier , service-delay modeler  models the distribution of the service, and outputs a model of the distribution of this difference as service-delay model . In the simplest embodiment, the service-delay model gives the service-request delay as the mean service delay for that client, which is the least-squares best-fit model.","As depicted in information-flow diagram , client synchronizer , for use in session reconstructor  (See ), inputs one client transaction record  at a time, and uses variance comparator , click-date estimator  and load-date estimator , and transaction-record editor  to synchronize the transaction with load-date and click-date estimates, outputting corresponding synchronized client transaction record .","Click-date estimator , using information from the input client transaction record , the client model  identified by the client identifier in the input transaction record, and the agent model  identified by the agent identifier in the input transaction record, outputs click-date estimate, accurately estimating the instant that the client requested the target service from the website, such as by clicking on a hyperlink in the source service, according to the network-service threat detector's master clock. The click-date estimator is detailed under .","Similarly, load-date estimator , using information from the client model , the server model , the service model , and the agent model , as identified by the client identifier, the server identifier, the service identifier, and the agent identifier, respectively, in the input transaction record, in addition to the click date  output by click-date estimator  for the same transaction record, outputs load-date estimate , accurately estimating the instant at which the client's agent finished loading the source service to the point when the client was able to act upon it, for example by clicking on a hyperlink, according to the network-service threat detector's master clock. The load-date estimator is detailed under .","The click-date estimator  can estimate the click date based either on the request-date timestamp recorded by the client, when available, or on the server's request-receive date recorded by the server synchronizer. The client-based click-time estimate is ordinarily more accurate because it depends only on the ordinarily constant client clock bias and brief agent click delay, whereas the server-based estimate depends on highly variable transmission time from the client and server, which cannot be estimated as accurately. Similarly, the load-date estimator  can estimate the load date based either on the load-date timestamp recorded by the client using an embedded load timer, when available, or on the server's service send date timestamp recorded by the server synchronizer. Again, the client-based load-time estimate is ordinarily much more accurate because it depends only on the ordinarily constant client clock and brief agent click delay, whereas the server-based estimate depends on highly variable transmission time from the server to the client, and on highly variable load time by the client, neither of which can be estimated as accurately. On the other hand, the date timestamps issued by the client are both unreliably present, being optional, for example, in the HTTP Request header specification; and untrustworthy, in that fraudsters can tamper with them directly.","Variance comparator  first checks whether the client request date  and the client load date are available in input client transaction record . If either one is available, the variance comparator compares the variance in the client's transmission bias  to the variance in the client's clock bias , as determined by the client model  identified by the client identifier in the input transaction record. If the difference between the clock-bias variance and the transmission-bias variance is greater than variance threshold , then the client's clock is deemed untrustworthy, otherwise it is deemed trustworthy, where the variance threshold is typically set to a value between zero and a few centiseconds.","If the client request date is available and the client's clock is deemed trustworthy, then the variance comparator sets click-date estimator switch  to use the request-based click-date estimator; else it sets it to use the receive-based click-date estimator. Similarly, if the client load date and the client request date are available and the client's clock is deemed trustworthy, then the variance estimator sets load-date estimator switch  to use the request-based load-date estimator; else it sets it to use the send-based load-date estimator.","As depicted in information-flow diagram , for each input client transaction record, click-date estimator , for use in client synchronizer  (See ), either uses receive-based click-date estimator  to output receive-based click-date estimate , or uses request-based click-date estimator  to output request-based click-date estimate , depending on the value of click-date-estimator switch .","For receive-based click-date estimator , agent-model fetcher  looks up the agent model  identified by agent identifier  in transaction record , outputting agent request rate  and agent request bias , modeling the delay between the instant the client requests a service, for example by clicking on a hyperlink in the source service, and the instant the client begins transmitting the request. Likewise, client-model fetcher  looks up the client model  identified by client identifier  in the transaction record, outputting client-transmission rate  and client transmission bias , modeling the delay between the instant the client begins transmitting a request and the instant the server receives it.","Multiplier  multiplies agent request rate  by the size of the request , obtained from transaction record , outputting the product as request-duration estimate . Multiplier  multiplies the client transmit rate by request size , outputting the product as transmit-duration estimate . Maximum operator  then computes the maximum of these two values, outputting the result as total request-duration estimate . Adder  adds agent request bias  and client transmission bias , outputting the sum as total request-bias estimate . Adder  then adds the request duration to the request bias, outputting the sum as request-delay estimate . Finally, subtractor  subtracts the request delay from the server request-receive date  obtained from the client transaction record, outputting the difference as receive-based click-date estimate .","For request-based click-date estimator , agent-model fetcher  looks up the agent model  identified by agent identifier  in transaction record , outputting agent click rate  and agent click bias , modeling the delay between the instant the client requests a service, for example by clicking on a hyperlink in the source service, and the request date  recorded by the agent in the client transaction record with a synchronized clock. Client-model fetcher  looks up the client model  identified by client identifier  in the transaction record, outputting client clock bias , modeling the difference between the client's clock setting and the network-service threat detector's master clock.","Multiplier  multiplies agent click rate  by request size , outputting the product as agent click-duration estimate . Adder  then adds the click duration to agent click bias , outputting the sum as agent click-delay estimate . Adder  then adds the agent click delay to client clock bias , outputting the sum as total click-delay estimate . Finally, adder  adds the click delay to request date , outputting the result as request-based click-date estimate .","As depicted in information-flow diagram , for each input client transaction record, load-date estimator , for use in client synchronizer  (See ), either uses load-duration estimator  and load-bias estimator  to output send-based load-date estimate , or outputs request-based load-date estimate , depending on the value of load-date estimator switch .","Service-model fetcher  looks up the service model  identified by service identifier  in client transaction record , outputting service duration  to the server sent-duration estimator, multiplier ; and outputting service size  to the client receive-duration estimator, multiplier  and agent load-duration estimator, multiplier .","Server-model fetcher  looks up the server model  identified by server identifier  in client transaction record , outputting server service-sent rate  and server service-sent bias , modeling the delay between the instant the server begins sending a service to the instant it finishes sending it. Likewise, client model fetcher  looks up the client model  identified by client identifier  in the transaction record, outputting client service-receive rate  and client service-receive bias , modeling the transmission delay between the instant the server begins sending a service and the instant the client finishes receiving it. Likewise, agent-model fetcher  looks up the agent model  identified by agent identifier  in the transaction record, outputting agent service-load rate  and agent service-load bias , modeling the delay between the instant the agent begins receiving the service and the instant the agent finishes loading the service to the extent that the client can act on it.","Load-duration estimator  uses multiplier  to multiply server sent rate  by service duration , outputting the product as sent duration estimate ; uses multiplier  to multiply client receive rate  by service size , outputting the product as receive duration estimate ; and uses multiplier  to multiply agent load rate  by service size , outputting the product as load duration . The load-duration estimator then uses maximum operator  to compute the maximum value among the sent duration, receive duration, and load duration, outputting the maximum as load duration estimate .","Load-bias estimator  uses adder  to add server sent bias , client receive bias , and agent load bias , outputting the result as total load bias .","Load-date estimator  then adds load duration  to load bias , outputting the sum as total load-delay estimate . Finally, adder  adds the load delay to server send date  in client transaction record , outputting the result as send-based load-date estimate .","Differencer  subtracts request date  specified in client transaction record  from click date  output by request-based click-date estimator  (See ), outputting the difference as click delay . Alternatively, the click-date estimator could pass the click delay directly to the load-date estimator. Adder  then adds the click delay to the load date  obtained from the client transaction record, outputting the sum as request-based load-date estimate .","Information-flow diagram  depicts timed-transition event analyzer , a particularly simple exemplary type of session analyzer  for use in network-service threat detector  (See ) which analyzes client transaction sessions  into atomic session events or elemental session events, comprising timed transitions, and repackages them as client event sessions  for efficient processing by session modeler  and session comparator  of . In a more-complex embodiment, the session analyzer analyzes client sessions into overlapping trigrams or larger chunks when there are sufficient statistics, and includes other client-distinguishing information.","The source names  and target names  may be either URLs from HTTP transaction records, or internal service names provided by the website in a rearguard deployment. In the embodiment shown, service names are tokenized for efficiency in session analyzer . In an alternative embodiment, they are tokenized earlier, in session reconstructor  or even in both website analyzer  and record augmenter  (See ).","Source encoder  tokenizes source name  to output source identifier , where the source name is the service name  held over  from the previous session transaction record. Similarly, target encoder  tokenizes target name  to output target identifier . The source encoder and target encoder encode a service name by looking up the name in a dictionary and returning the corresponding token, typically a hash of the name, inserting the name in the dictionary and thereby generating a token for it if the service name was not already entered in the dictionary. The token has the precision of a standard binary word in the machines embodying the threat detector, for efficient lookup, comparison, and other manipulation.","Duration encoder  encodes transition duration  to output transition time interval identifier , where the transition duration is computed as the difference  between the click date  (the estimated instant when the client requested the target service) and the source load date , the load date  held over  from the previous session transaction record (the estimated instant when the client was first able to request the service). In one embodiment, the duration encoder simply outputs the quantitative transition time to the precision of a standard binary word. In an alternative embodiment, the duration encoder coarsely quantizes the transition time on an exponential scale, and tokenizes the quantized intervals for efficient access in a sparse array. A sample exponential scale is [0 . . . 1\/16), [ 1\/16. . . \u215b), [\u215b. . . \u00bc), [\u00bc. . . \u00bd), [\u00bd . . . 1), [1 . . . 2), [2 . . . 4), [4 . . . 8), [8 . . . \u221e) seconds. A quantitative representation is preferable for atomic session analysis, where each individual event in each session is considered separately for accuracy. A tokenized representation is preferable for elemental session analysis, where all events of a type within a session are lumped together and treated as a group.","Transition encoder  encodes the ordered pair comprising source identifier  and target identifier  (as shown), or, equivalently, comprising source name  and target name , to output a single transition identifier  identifying the transition from the source to the target.","Timed-source encoder  encodes the combination of source identifier  and time-interval identifier  (as shown), or, equivalently, the combination of source name  and transition time , to output timed-source identifier . Similarly, timed-target encoder  encodes the combination of target identifier  and time-interval identifier  (as shown), or, equivalently, the combination of target name  and transition time , to output timed-target identifier .","Optional linkage encoder  looks up source identifier  and target identifier  (as shown), or, equivalently, source name  and target name , in website map  to determine the linkage type, and encodes the linkage type as linkage identifier .","Extrinsic transitions within a session may indicate a hijacking attack. However, certain extrinsic links are provided by web browsers and similar applications, typically accessed by buttons or menu items in the application user interface, including a \u201cback\u201d feature to return to the previous service in the session, a history function to return to other services recently visited by the client, and a bookmarks function to return to services previously marked by the client. In the simplest embodiment, the linkage encoder classifies links into one of three categories: intrinsic, back-step, and extrinsic. In a more complex embodiment, the linkage encoder also recognizes back-skips to previous services within the current session as a fourth category. Extrinsic links can also be provided by external sources such as websites and email messages, and the linkage encoder recognizes such inbound links by the referrer , when present in the client action record, and classifies them as yet another linkage type.","For elemental session analysis, session analyzer  uses event-type counter  to first check whether an existing session event  has matching identifiers\u2014in this case matching source identifier , matching target identifier , and matching duration identifier  and, if available, matching linkage identifier \u2014and, if so, merely increments the event-type count  for that event type, rather than encoding the derivative identifiers and packing a separate session event.","Session-event-record packer  assembles source identifier , target identifier , transition-duration identifier , timed-source identifier , transition identifier , and timed-target identifier , into session event record . If available, the session-event packer also records linkage-type identifier  in the session event record. For elemental session events, the session-event packer also stores the event-type instance count  in the session event record.","Output client event session  may be either an atomic-event session, listing each individual event as a separate record, or an elemental-event session digest, grouping equivalent events into a single record. For atomic session analysis, session event packer  simply appends each session event record  to the current atomic client event session on the fly. For elemental session analysis, the event-type counter  merges equivalent event records within a session, maintaining an instance count in the event record for each event type.","In the exemplary embodiment shown, the compound attributes service transition , timed-source , and timed-target  are encoded in session analyzer , saving time later in session modeler  and session comparator , but at the expense of the space required to store the additional identifiers in the session event records. In an alternative embodiment, compound attributes are encoded on the fly whenever needed, saving space at the expense of time.","Information-flow diagram  depicts timed-transition event modeler , a particularly simple type of session modeler  for use in network-service threat detector  (See ) whose session models  comprise event models  modeling not entire sessions, but only the atomic or elemental transition events of which sessions are composed, and modeling only the global statistics of the most rudimentary characteristics of those events: the identities of the constituent services of a transition and the duration of the transition\u2014along with joint combinations of those characteristics.","In particular, event modeler  models the global statistics during the data-collection period of a transition's source, transition duration, and target, as well as of joint source and target pairs, joint transition-duration and target pairs, and joint source and transition-duration pairs. When linkage information from a website map is available, the event modeler also models the global statistics of linkage types during the data-collection period. In detail, for each session-event record or session-type record , source-model updater  updates the source frequency  corresponding to the source identifier , transition-duration-model updater  updates the transition-duration frequency  corresponding to transition-duration identifier , target-model updater  updates the target frequency  corresponding to target identifier , timed-target-model updater  updates the timed-target frequency corresponding to timed-target identifier , transition-model updater  updates the transition frequency  corresponding to service-transition identifier , timed-source-model updater  updates the timed-source frequency , and linkage-model updater  optionally updates linkage-type frequency  corresponding to linkage-type identifier , where the source identifier, duration identifier, target identifier, timed-target identifier, transition identifier, timed-source identifier, and linkage-type identifier are obtained from the session-event record , and the corresponding models are updated in event models database . In addition, event-frequency updater  updates event frequency  in the event models database.","Source frequencies  are modeled separately from target frequencies  because the distribution of source frequencies is not in general identical to the distribution of target probabilities, because, for example, a login page is relatively unlikely to be a target, and a logout page is unlikely to be a source, since client sessions often begin with a login page and end with a logout page.","Event modeler  is designed to operate on either atomic session-event records, or on elemental session-event-type records, where each event-type record contains an instance count  in addition to the identifiers. When operating on atomic session-event records, the event modeler updates source frequency , duration frequency , target frequency , timed-target frequency , transition frequency , timed-source frequency , linkage frequency , and event frequency  by simply incrementing each frequency by one, the default value of increment . When operating on elemental session-event records, the event modeler updates these frequencies by incrementing each one by the session count , input as increment .","Moreover, the event modeler is designed to operate either in batch mode, for example for processing from scratch the entire set of website transactions during a data-collection period such as one hour; or in continual mode, for incrementally updating the models on the fly with a sliding window, for example by adding each transaction or each minute's worth of transactions as it occurs, and removing each transaction or increment of transactions as it ages beyond the data-collection period of, say, one hour. When operating in continual mode, switch  changes the increment to negative one to remove an atomic event record, and changes the increment to the negative of the instance count  to remove an event-type record from the running frequencies, as specified by remove flag .","In an alternative embodiment, the joint keys\u2014transition identifier , timed-source identifier , and timed-target identifier \u2014are not directly stored in session event , but are constructed from the elemental keys\u2014source identifier , duration , and target identifier , as appropriate\u2014on the fly by transition-model updater , timed-source-model updater , and timed-target-model updater , respectively. This alternative is preferable when the storage space available to store keys in session event records is more critical than the time required to generate the joint keys.","Information-flow diagram  depicts an independent-event session comparator , a particularly simple type of session comparator  for use in network-service threat detector  (See ), which scores each event in a client event session  independently, using session-event stepper  and event comparator , and uses session scorer  to combine the event scores into session threat score . The session comparator also optionally uses privilege-threat analyzer  to weight each event score according to the client's privilege level for the event; and also optionally uses intrinsic-threat analyzer  to weight each event score according to the intrinsic threat level of the event.","Session event stepper  steps through the elemental event-type records or chronologically sorted atomic event records in client session , outputting them one at a time as session events  to event comparator .","Event comparator  compares each event or event type to the model  for that event type, outputting event anomaly score  for that event. For elemental events, the event comparator also outputs the number of instances  of that event type from the event-type record. The event comparator is discussed further under .","For atomic events, session scorer  uses score accumulator  to accumulate the individual event anomaly scores , outputting threat score  for the session as a whole. In the preferred embodiment, the event anomaly scores are additive, rather than multiplicative (See ), to facilitate accumulating the scores for the many events in a long session without overflow. In the simplest embodiment, the session scorer simply adds all the event anomaly scores to produce the session threat score. For elemental events, the session scorer uses multiplier  to multiply the anomaly score for each event type by the number of instances  of that event type, outputting the result as event score , in which case score accumulator  sums the events scores instead of the event anomaly scores to compute the session threat score.","In the preferred embodiment, for evaluating session-hijacking threats such as man-in-the-browser threats and man-in-the-middle threats, where\u2014to avoid detection, to complete their fraudulent privileged transactions before the client closes the session, and to maximize the number of sessions hijacked under human supervision\u2014attackers are motivated to hijack a session as quickly and soon as possible after the client has successfully gained privileged access to a website, session comparator  uses privilege threat analyzer  to compute a time-damped weight  according to how soon after login the corresponding anomalous event has occurred, based on the session-event records , and, in some embodiments, event index  output by session-event stepper , and, for elemental events, event-instance count . For websites offering multiple echelons of privilege, the privilege-threat analyzer also weights the event score according to the privilege level. Privilege threat analyzer  is discussed further under .","When using privilege-threat analyzer , session scorer  uses multiplier  to multiply the score  for each event or event type by corresponding privilege weight , outputting the result as weighted event score , in which case the session scorer sums the weighted event scores, rather than unweighted event scores , to produce session threat score .","If website map  containing information concerning intrinsic threat levels is available (See ), then the session comparator also takes intrinsic threat levels into account, using intrinsic threat analyzer  to determine the intrinsic threat weight  for each event or event-type, in order to weight different intrinsic threat levels according to the preferences of the website security personnel.","In detail, intrinsic threat analyzer  uses intrinsic threat fetcher  to look up the intrinsic threat level associated with session event  in website map , outputting the result as intrinsic threat level . Intrinsic threat scorer  then looks up the intrinsic threat score corresponding to the intrinsic threat level in table of intrinsic threat scores , outputting the result as intrinsic weight .","When using intrinsic threat analyzer , session scorer  uses multiplier  to multiply the score  for each event or event type by corresponding intrinsic threat weight , outputting the result as weighted event score . When using both the intrinsic threat analyzer and privilege-threat analyzer , the session scorer first uses multiplier  to multiply the intrinsic threat weight by the privilege weight , outputting the result as event weight . It then multiplies the event weight by the event score to yield the weighted event score. In either case, the session scorer then sums the weighted event scores, rather than the unweighted event scores, to produce session threat score .","As depicted in information-flow diagram , privilege-threat analyzer  analyzes the privilege-related threat of each input session event or session-event type , using privilege analyzer , privilege ager , aged-privilege rescaler , and privilege scorer , and outputting privilege weight .","Specifically, for atomic session events , privilege-threat analyzer uses privilege analyzer  to monitor the chronologically sorted input events for privilege-altering events such as login and logout events, secondary authentication events, and HTTP Upgrade events, outputting the current privilege level  at the time of each event and the privilege duration \u2014the duration since the client last acquired that privilege level within the session.","In the preferred embodiment, the privilege duration for a particular privilege level is the total client response delay, computed by summing the transition durations  in each session event since the acquisition of that level of privilege, thereby discounting the phases when the client would ordinarily be waiting, rather than acting, including the transmission time, the serve time, and the load time. In an alternative embodiment, the privilege duration is the elapsed time since the instant of acquisition of that level of privilege, calculated as the difference between the time of the current event and the time of the privilege-acquisition event. In another alternative embodiment, the privilege duration is the number of client transactions since acquiring that privilege level, calculated as the difference in event index  output by session event stepper  (See ) since the privilege was acquired.","Privilege ager  converts the privilege duration  to a time-damped weight, outputting it as aged privilege , where the damping is governed by weight decay . Specifically, when the privilege duration is measured as elapsed time, the privilege ager uses multiplier  to multiply the privilege duration by the weight decay, outputting the product as weighted age ; and then uses exponentiator  to take the exponential value of the weighted age, outputting the result as aged privilege , where for time measured in seconds, the weight decay is typically around the natural logarithm of two, so that the weight drops from 1 at the instant of privilege acquisition to \u00bd a second later, to \u00bc at the end of 2 seconds. When the privilege duration is measured in terms of the number of transition events, the aged privilege may alternatively be calculated recursively, by initializing it to 1 at the privilege-acquisition event, and multiplying the result by the weight decay at each subsequent event.","For elemental session events, although neither the date nor the chronological event index is known for individual events, nevertheless if session analyzer  (See ) includes the privilege level in its event classification, then event types repeated within a session can be effectively aged by the minimal duration implied by the number of instances  of that event type in the session. Thus for elemental session events, privilege pseudo-ager  effectively ages each repeated event type by the number of instances that must have preceded it, in the simplest embodiment by multiplying the weight decay  by itself as often as the event instance count, and summing the partial products, outputting the sum as pseudo-aged privilege . The preferred embodiment implements the closed-form formula for the geometric series, (d\u2212d)\/(d\u22121), by using incrementer  to add 1 to the event instance count n , outputting the result as exponent p=n+1 ; using power operator  to raise the weight decay  to that exponent, outputting the result as power ; using subtractor  to subtract the weight decay from the power, outputting the result as numerator ; and using divider  to divide the numerator by divisor ; where the divisor is computed by using decrementer  to subtract one from the weight decay; the final result being output as pseudo-aged privilege .","Rescaler  rescales the damped series of aged-privilege weights to a minimum specified by weight floor , by using complementer  to subtract the weight floor from 1, outputting the difference as floor complement ; using multiplier  to multiply the floor complement by aged privilege , outputting the result as scaled privilege ; and using adder  to add the scaled privilege to the weight floor, outputting the result as decayed weight . A positive weight floor ensures that hijackers will continue be detected even if they change their behavior to postpone their fraudulent transactions later in a session.","Privilege scorer  looks up privilege score  corresponding to privilege level  in table of privilege scores  to weight different privilege levels according to the preferences of the website security personnel. Typical privilege score values for a website using logins with both password and secondary authorization are 0.1 for unlogged-in, 0.9 for logged-in with a password, and 1.0 for secondarily authorized, but other score values could be used.","Finally, multiplier  multiplies the privilege score  by the decayed weight , outputting the result as privilege weight .","In an alternative embodiment, privilege level  is determined beforehand by session analyzer  and stored in session event records  (See ).","As depicted in information-flow diagram , event comparator  compares a session event , which is either an atomic session event or an elemental session-event type, to the event models  for that type of event, and outputs corresponding event anomaly score . In MiB, MiM, and similar types of hijacking attacks, a fraudster uses a website account concurrently with a legitimate client of the account. The hijacker's website actions are thus interspersed with the legitimate client's actions.","In order to maximize the chance of completing the fraudulent transactions and minimize the chance of being discovered, the fraudster's actions need to be executed quickly and early in the login session. Therefore, the hijacker does not have the leisure to insert actions at appropriate junctures in the legitimate client's flow. As a result, the combined flow of the client's and fraudster's actions shortly after login is likely to exhibit transitions which are anomalous, often not intrinsic to the website, and anomalously quick for normal sessions in general and especially for normal sessions of the victim. Moreover, the flow of the fraudster's actions alone is likely to exhibit transitions which are anomalous, non-intrinsic, and anomalously quick for normal sessions in general and especially for normal sessions of the victim, because the hijacker is likely to use a streamlined flow skipping normal but strictly unnecessary intermediate steps, and is likely to automate that flow.","Thus, event comparator  examines both the relative frequency and the relative duration of the event, comparing the observed frequency  of the event type with the predicted frequency  of the event type, as well as comparing the observed duration  of the event or event type with the predicted duration  of the event type.","In detail, event frequency estimator  estimates the relative frequency of session event type  from event models , outputting observed event frequency .","Event duration estimator  estimates the duration of the event, outputting observed event duration . When session event  is provided by atomic session stepper  (See ), duration estimator  merely extracts the event duration, as adjusted by transaction synchronizer  (See ), from the session event record. When, on the other hand, the session event is provided by session event-type stepper  (See ) and the duration of individual events in the session is not known but the event type  is specific to a coarsely quantized time interval, then the event duration estimator estimates the event duration as the mean duration of the event type, or, if that information is unavailable, the event duration is estimated as the mean duration of the quantized time interval, either of which is retrieved from event models .","The event comparator uses one or more event frequency predictors  to predict the event frequency from marginal event frequencies retrieved from event models , each event frequency predictor outputting a corresponding event frequency prediction . Exemplary individual event frequency predictors are described under  through , and a combined event frequency predictor factoring out common operations among these four exemplary individual predictors is described under .","Corresponding to each event frequency predictor  is an event duration predictor  which predicts the duration of the event or event type  from event models  corresponding to those used in the event frequency predictors, each event duration predictor outputting a corresponding event duration prediction .","Optional anomalous event duration detector  compares each individual event duration prediction  with observed event duration , outputting predictor switch signal  to turn individual event frequency predictors  off for computational efficiency when the observed event duration is determined not to be anomalously brief by a particular event duration prediction.","The anomalous event duration detector determines an event to be anomalously brief if the observed duration is less than the predicted duration minus a duration threshold  or by another test. In the preferred embodiment, the duration threshold is zero, in order to postpone threat decisions until the anomaly of the entire session can be compared to the anomaly of all other sessions. Alternatively, if the number of detected attacks is expected to be substantially greater than threat processors  (See ) can handle, then the duration threshold can be adjusted upwards to throttle the least threatening events. The anomalous event duration detector is used as an efficiency optimization in embodiments where it reduces the computation time or other resource demands.","Prediction combiner  combines the individual event frequency predictions  and corresponding event duration predictions  into a single predicted event frequency  and a single corresponding predicted event duration . The prediction combiner is detailed under .","Event frequency scorer  compares predicted event frequency  with observed event frequency , taking frequency threshold  into account, and outputs frequency anomaly score . In one embodiment, the event frequency scorer is switched off if duration anomaly score  is below duration threshold , for computational efficiency. The event frequency scorer is discussed in greater detail under .","Event duration scorer  compares predicted event duration  with observed event duration , taking duration threshold  into account, and outputs duration anomaly score . In one embodiment, the event duration scorer is switched off if the frequency anomaly score is below frequency threshold , for computational efficiency. The event duration scorer is discussed in greater detail under .","Event anomaly scorer  inputs frequency anomaly score  and duration anomaly score , and outputs event anomaly score . If either the frequency anomaly score or the duration anomaly score is nonpositive, the event anomaly scorer outputs an event anomaly score of zero. In the preferred embodiment, the event anomaly scorer combines the frequency anomaly score and duration anomaly score by multiplying them together, where the resulting product can be interpreted as the point-wise mutual information between the terms of the event, weighted by the anomalousness briefness of the event.",{"@attributes":{"id":"p-0277","num":"0276"},"figref":["FIG. 21","FIG. 25","FIG. 21","FIG. 22","FIG. 23","FIG. 24","FIG. 25"],"b":["21000","22000","23000","24000"]},"As depicted in , atomic timed-transition predictor  uses source-model fetcher  to look up source frequency  corresponding to source identifier , transition-duration-model fetcher  to look up transition-duration frequency  corresponding to transition-duration identifier , target-model fetcher  to look up target frequency  corresponding to target identifier , optional linkage-model fetcher  to look up linkage-type frequency  corresponding to linkage identifier , and frequency-norm fetcher  to look up event-frequency norm , where the source identifier, duration identifier, target identifier, and linkage-type identifier are input from session event , and the corresponding models and the frequency norm are retrieved from event models . Multiplier  then multiplies together the source frequency, the duration frequency, the target frequency, and optionally the linkage frequency , outputting the product as absolute AxTxB frequency . Power operator  multiplies the frequency norm to the fourth power, outputting the result as quadruple norm . Finally, normalizer  divides the absolute AxTxB frequency by the quadruple norm, outputting the relative frequency as independent frequency prediction AxTxB . If the linkage frequency is not included in the combined frequency computation, then the power operator only raises the norm to the third power.","In atomic timed-transition predictor , duration model fetcher  also looks up duration  corresponding to duration identifier  in session event record , which it outputs as duration . Multiplier  multiplies the duration by the duration frequency , outputting the product as total duration . Divider  then divides the total duration by the absolute atomic frequency , outputting the quotient as independent duration prediction .","As depicted in , biased frequency predictor TxAB  uses transition-duration-model fetcher  to look up transition-duration frequency  corresponding to transition-duration identifier , transition-model fetcher  to look up transition frequency  corresponding to transition identifier , and frequency-norm fetcher  to look up event-frequency norm , where the duration identifier and transition identifier are input from session event , and the corresponding models and the frequency norm are retrieved from event models . Multiplier  then multiplies together the duration frequency and the transition frequency, outputting the product as absolute TxAB frequency . Power operator  squares the frequency norm, outputting the result as double norm . Finally, normalizer  divides the absolute TxAB frequency by the double norm, outputting the relative frequency as biased frequency prediction TxAB .","In biased predictor TxAB , duration-model fetcher  also looks up duration  corresponding to duration identifier  in session event record , which it outputs as duration . Multiplier  multiplies the duration by the duration frequency , outputting the product as total duration . Divider  then divides the total duration by the absolute TxAB frequency , outputting the quotient as biased duration prediction TxAB .","As depicted in , biased frequency predictor BxTA  uses target-model fetcher  to look up target frequency  corresponding to target identifier , timed-source-model fetcher  to look up timed-source frequency  corresponding to timed-source identifier , optional linkage-model fetcher  to look up linkage-type frequency  corresponding to linkage identifier , and frequency-norm fetcher  to look up event-frequency norm , where the target identifier, timed-source identifier, and linkage-type identifier are input from session event , and the corresponding models and the frequency norm are retrieved from event models . Multiplier  then multiplies together the target frequency, the timed-source frequency, and optionally the linkage frequency , outputting the product as absolute BxTA frequency . Power operator  multiplies the frequency norm to the third power, outputting the result as triple norm . Finally, normalizer  divides the absolute BxTA frequency by the triple norm, outputting the relative frequency as biased frequency prediction BxTA . If the linkage frequency is not included in the combined frequency computation, then the power operator only raises the norm to the second power.","In biased predictor BxTA , timed-source-model fetcher  also looks up duration  corresponding to timed-source identifier  in session event record , which it outputs as duration . Multiplier  multiplies the duration by the timed-source frequency , outputting the product as total duration . Divider  then divides the total duration by the absolute BxTA frequency , outputting the quotient as biased duration prediction BxTA .","Similarly, as depicted in , biased frequency predictor AxTB  uses source-model fetcher  to look up source frequency  corresponding to source identifier , timed-target-model fetcher  to look up timed-target frequency  corresponding to timed-target identifier , optional linkage-model fetcher  to look up linkage-type frequency  corresponding to linkage identifier , and frequency-norm fetcher  to look up event-frequency norm , where the source identifier, timed-target identifier, and linkage-type identifier are input from session event , and the corresponding models and the frequency norm are retrieved from event models . Multiplier  then multiplies together the source frequency, the timed-target frequency, and optionally the linkage frequency , outputting the product as absolute AxTB frequency . As in AxTB frequency predictor  (See ), power operator  multiplies the frequency norm to the third power, outputting the result as triple norm . Finally, normalizer  divides the absolute AxTB frequency by the triple norm, outputting the relative frequency as biased frequency prediction AxTB . If the linkage frequency is not included in the combined frequency computation, then the power operator only raises the norm to the second power.","In biased predictor AxTB , timed-target-model fetcher  also looks up duration  corresponding to timed-target identifier  in session event record , which it outputs as duration . Multiplier  multiplies the duration by the timed-target frequency , outputting the product as total duration . Divider  then divides the total duration by the absolute AxTB frequency , outputting the quotient as biased duration prediction AxTB .","As depicted in , combined timed-transition predictor  uses source-model fetcher  to look up source frequency  corresponding to source identifier , transition-duration-model fetcher  to look up transition-duration frequency  corresponding to transition-duration identifier , target-model fetcher  to look up target frequency  corresponding to target identifier , timed-target-model fetcher  to look up timed-target frequency corresponding to timed-target identifier , transition-model fetcher  to look up transition frequency  corresponding to transition identifier , timed-source-model fetcher  to look up timed-source frequency  corresponding to timed-source identifier , optional linkage-model fetcher  to look up linkage-type frequency  corresponding to linkage identifier , and frequency-norm fetcher  to look up event-frequency norm , where the source identifier, transition-duration identifier, target identifier, timed-target identifier, transition identifier, timed-source identifier, and linkage-type identifier are input from session event , and the corresponding models and the frequency norm are retrieved from event models .","Multiplier  squares the frequency norm , outputting the result as double norm ; multiplier  multiplies the double norm again by the norm, outputting the result as triple norm ; and multiplier  multiplies the triple norm yet again by the norm, outputting the result as quadruple norm .","As in independent frequency predictor AxTxB , atomic frequency predictor AxTxB  multiplies together the source frequency , the duration frequency , the target frequency , and optionally the linkage frequency , dividing the resulting absolute AxTxB frequency  by quadruple norm  and outputting the resulting relative frequency as independent frequency prediction AxTxB . As in biased frequency predictor AxTB , biased frequency predictor AxTB  multiplies together the source frequency, the timed-target frequency, and optionally the linkage frequency, dividing the resulting absolute AxTB frequency by triple norm , and outputting the resulting relative frequency as biased frequency prediction AxTB . As in biased frequency predictor TxAB , biased frequency predictor TxAB  multiplies together the duration frequency and the transition frequency, dividing the resulting absolute TxAB frequency by double norm , and outputting the resulting relative frequency as biased frequency prediction TxAB . And as in biased frequency predictor BxTA , biased frequency predictor BxTA  multiplies together the target frequency, the timed-source frequency, and optionally the linkage frequency, dividing the resulting absolute BxTA frequency by triple norm , and outputting the resulting relative frequency as biased frequency prediction BxTA . If the linkage frequency is not included in the combined frequency computations, then the AxTxB predictor  uses the triple norm instead of the quadruple norm, and the AxTB predictor  and BxTA predictor  use the double norm instead of the triple norm.","Combined predictor  also outputs the respective duration predictions as in  though .","In an alternative embodiment, the joint keys\u2014transition identifier , timed-source identifier , and timed-target identifier \u2014are not directly stored in session event , but are constructed from the elemental keys\u2014source identifier , transition duration , and target identifier , as appropriate\u2014on the fly by transition-model fetcher , timed-source-model fetcher , and timed-target-model fetcher , respectively. This alternative is preferable when the storage space available to store keys in session event records is more critical than the time required to regenerate the joint keys.","In an alternative embodiment, double frequency norm , triple frequency norm , and quadruple frequency norm  are precomputed and stored in event models , rather than being computed in the event predictor. This alternative is preferable when memory access is quicker than multiplication.","In an alternative embodiment, the marginal frequencies (source frequency , duration frequency , and target frequency ) and submarginal frequencies (transition frequency , timed-source frequency , and timed-target frequency ) are not precomputed and stored in event models database , but are instead computed on the fly from atomic events or from elemental frequencies by the marginal frequency fetchers (source-frequency fetcher , duration-frequency fetcher , and target-frequency fetcher ) and intermediate frequency fetchers (transition-frequency fetcher , timed-source-frequency fetcher , and timed-target-frequency fetcher ), respectively. This alternative embodiment is preferable when the storage space available for event models is more critical than the time available to compute the marginal and submarginal frequencies on the fly.","The marginal frequencies (source frequency , duration frequency , and target frequency ) and submarginal frequencies (transition frequency , timed-source frequency , and timed-target frequency ) as stored in event models database  and output by the respective frequency fetchers may be either absolute, in which case they can be represented exactly as integers; or relative, in which case they must be represented as approximate fractions or as space-inefficient rational numbers.","However, whereas atomic prediction  is a product of three marginal frequencies, the submarginal predictions (transition prediction , timed-source prediction , and timed-target prediction ), are products of only two frequencies, so if these products are computed from absolute frequencies, then to make the atomic frequency commensurate with the submarginal frequencies, either the submarginal frequencies must be multiplied by the norm, permitting the products to continue to be represented exactly as integers; or the atomic prediction must be divided by the norm, in which case the product must be approximated as a fraction or maintained as a rational number. This commensuration may be implemented at any stage between the end of event frequency predictors  and the beginning of prediction combiner . Note that, at least for straightforward relative frequency estimation, all the atomic, marginal, and submarginal frequencies have the same norm, which is the total timed-transition frequency, obtained from the event models database.","In some embodiments, the event models  are stored in a sparse array such as a heap, rather than as a complete array or complete tree, in order to conserve memory. For a large website, the number of observed transition types would otherwise require an impractically large complete array.","As depicted in information-flow diagram , prediction combiner  inputs the individual event frequency predictions  and the individual event duration predictions , combining them to output predicted event frequency  and predicted event duration , respectively.","In a preferred embodiment, the prediction combiner uses maximum selector  to select the maximum event frequency prediction for output as the predicted event frequency, and, via prediction switch , uses selector  to select the corresponding event duration prediction for output as the predicted event duration. The use of the maximum here implies that that an event is not to be considered unusual if any of a set of equally credible predictors shows that it is not unusual. In an alternative embodiment (not shown), a prediction combiner computes the Bayesian mean of the input frequency predictions and duration predictions, and outputs the means as the predicted event frequency and predicted event duration, respectively.","As depicted in , event frequency scorer  inputs observed event frequency  and predicted event frequency , compares them using event frequency comparator , normalizes the result, and outputs frequency anomaly score .","Event frequency comparator  uses differencer  to compare observed event frequency  to predicted event frequency , outputting the difference as frequency excess . Next, adder  adds frequency threshold  to the frequency excess, outputting adjusted frequency excess . Frequency thresher  then tests whether the adjusted frequency excess is greater than zero, indicating that the event is not anomalous, in which case it outputs a zero  as the frequency-anomaly score . For computational efficiency, the thresher may also optionally input duration anomaly score . If the duration anomaly score is below duration threshold , then the event is likewise determined not to be anomalous, and the thresher likewise outputs a frequency anomaly score of zero.","In a preferred embodiment, the frequency threshold is omitted or set to zero, in order to postpone threat decisions until the anomaly of the entire session can be compared to the anomaly of all other sessions. Alternatively, if the number of detected attacks is expected to be substantially greater than threat processors  (See ) can handle, then the frequency threshold can be adjusted upwards to throttle the least threatening events.","If, on the other hand, frequency thresher  determines the event to be anomalous, then it passes the observed event frequency  through as threshed event frequency .","Event frequency normalizer then divides  the threshed event frequency by predicted event frequency , outputting the result as frequency ratio . Outputting the frequency ratio rather than the absolute observed frequency ensures that the observed frequency of each event is evaluated only with respected to the predicted frequency of that event, and independently of the absolute frequencies of unrelated events.","Since the observed event frequency  is a simple frequency, whereas the predicted event frequency  is a frequency product, if the frequencies are represented as absolute frequencies, then in order to make the observed event frequency commensurate with the predicted frequency, either the observed event frequency is multiplied by the norm, or the predicted event frequency is divided by the norm. This commensuration may be implemented at any stage between the end of event frequency estimator  or event frequency predictor  and prior to comparison in the event frequency comparator or normalization in event frequency normalizer . Postponing this commensuration until the end of prediction combiner  can reduce the amount of computation.","Finally, log  calculates the logarithm of frequency ratio , outputting the result as frequency anomaly score . Using the logarithm rather than the ratio itself as the event score permits session comparator  (See ) to sum the event anomalies rather than multiplying them, thus avoiding overflow.","As logarithms of the ratio of the relative joint frequency to the product of the relative marginal frequencies, frequency anomaly scores  can be interpreted as measuring the point-wise mutual information between the marginal dimensions. In the preferred embodiment,  calculates the base-2 logarithm, so that the score is measured in bits. In particular, in the case of timed transitions, independent frequency predictor AxTxB  measures the point-wise mutual information between the source, transition time, and target; biased frequency predictor TxAB  measure the point-wise mutual information between the transition time and the service transition; biased frequency predictor BxTA  measures the point-wise mutual information between the target and the timed source; and biased frequency predictor  measures the point-wise mutual information between the source and the timed target. Although point-wise mutual information can be nonpositive, event anomaly scorer  ensures that only positive scores are output; That is, the session anomaly is determined only by anomalous events, so that no number of normal events can compensate for anomalous ones. This is in accordance with the fact that man-in-the-browser, man-in-the-middle, and similar attacks characteristically comprise a few brief events, typically near the beginning of a session, irrespective of how long the session lasts.","As depicted in , event duration scorer  inputs predicted event duration  and observed event duration , compares them using event duration comparator , normalizes the result, and outputs duration anomaly score .","Event duration comparator  uses differencer  to compare observed event duration  to predicted event duration , outputting the difference as duration shortfall . Next, adder  adds duration threshold  to the duration shortfall, outputting adjusted duration shortfall . Duration thresher  then tests whether the adjusted duration shortfall is greater than zero, indicating that the event is not anomalous, in which case it outputs a zero  as the duration-anomaly score . For computational efficiency, the thresher may also optionally input frequency-anomaly score ; if the frequency-anomaly score is less than frequency threshold , then the event is likewise determined not to be anomalous, and the thresher likewise outputs a duration-anomaly score of zero. In the preferred embodiment, the duration threshold is omitted or set to zero, in order to postpone threat decisions until the anomaly of the entire session can be compared to the anomaly of all other sessions. Alternatively, if the number of detected attacks is expected to be substantially greater than threat processors  (See ) can handle, then the duration threshold can be adjusted upwards to throttle the least threatening events. If, on the other hand, the event duration comparator determines that the event is anomalous, then it passes the adjusted duration shortfall through as threshed duration shortfall .","Event duration normalizer  then divides the threshed duration shortfall  by the predicted event duration  to yield duration anomaly score , ranging from zero if the event duration is not anomalous at all, to one if the event duration is as anomalously brief as possible.","As has now been explained, a network security system can include detection of man-in-the-browser attacks and other attacks using a variety of tools and approaches. Further embodiments can be envisioned to one of ordinary skill in the art after reading this disclosure. In other embodiments, combinations or sub-combinations of the above disclosed invention can be advantageously made. The example arrangements of components are shown for purposes of illustration and it should be understood that combinations, additions, re-arrangements, and the like are contemplated in alternative embodiments of the present invention. Thus, while the invention has been described with respect to exemplary embodiments, one skilled in the art will recognize that numerous modifications are possible.","For example, the processes described herein may be implemented using hardware components, software components, and\/or any combination thereof. The specification and drawings are, accordingly, to be regarded in an illustrative rather than a restrictive sense. It will, however, be evident that various modifications and changes may be made thereunto without departing from the broader spirit and scope of the invention as set forth in the claims and that the invention is intended to cover all modifications and equivalents within the scope of the following claims.","As depicted in block diagram , exemplary server traffic processor  (See ) uses channeler  to entrain host-instigated traffic between clients  and third-party partner services , so that it can be logged, along with traffic between the clients and primary network service , by logger  for analysis by threat detector , reviewed by threat processors , and, when necessary, remediated by remediator . The figure gives an example of one way in which the channeler may be integrated with other processes commonly found in a network service traffic processor, such as firewalls  and , authenticators , encrypters  and decrypters , compressors  and decompressors , link translators , reformatters , and load balancers .","Traffic from clients  and destined for host , entrained traffic from clients and destined for partners , and entrained traffic from partners destined for clients all enters service traffic processor  through front firewall , which protects the host site from the external network by using low-level security features such as IP+port blocking and plaintext packet filtering. Traffic from the host destined for clients, entrained traffic from clients destined for partners, and entrained traffic from partners destined for clients likewise all exits the service traffic processor through the front firewall.","Authenticator  is responsible for negotiation of encryption protocols such as SSL and TSL with clients  and partners , and for low-level verification of the identity of the clients and partners and confirmation of the identity of the host as its proxy, for example via SSL certificates.","Decrypter  converts securely encrypted incoming actions from clients  and partners  containing personal or proprietary information into plaintext so that it can be examined by channeler  and rear firewall , and acted upon by host . Encrypter  encrypts plaintext outgoing actions from the host and reencrypts outgoing actions relayed between clients and partners to shield sensitive information en route across the network to the clients and partners.","Similarly, decompressor  decompresses incoming actions from clients  and partners  into plaintext so that it can be examined by channeler  and rear firewall , and acted upon by host . Compressor  compresses outgoing actions such as HTML content from the host and recompresses actions relayed between clients and partners for faster transmission across the network.","Channeler  uses channeler router  to separate inbound traffic from clients  destined for host , which it routes through host channeler , from bidirectional entrained traffic between clients and partners , which it routes through partner channelers , short-circuiting it from the host. Host channeler  edits outgoing host traffic to entrain client responses back through the partner channelers. Likewise, partner channelers  edit outgoing partner-client traffic to entrain client responses back through the partner channelers. The channeler is discussed in greater detail under .","Link translator  remaps externally visible URL aliases in client requests back to the corresponding actual internal URLs, permitting the public structure of the host site to appear simple, constant, and user-friendly, while shielding the actual site structure from potential malefactors.","Rear firewall  remediates threats in inbound decrypted decompressed client actions, using higher-level features such as application-attack detection and malware detection. The rear firewall also remediates threats in outbound host actions, such as sensitive information disclosure and policy violations.","Load balancer  distributes client actions among the host website servers or data centers in network service , and routes back the corresponding host actions. A larger installation will often have load balancers at many junctures in the service traffic processor, each feeding multiple instances of its downstream components, in order to efficiently handle higher network traffic. For example, authentication , decryption , encryption , decompression , compression , channeling , and reformatting  are all compute-intensive processes, so a busy site may have one or more load balancers between the front firewall and multiple authenticators and decrypters, a load balancer between the rear firewall and multiple reformatters, and so on.","Reformatter  reformats outgoing host actions for specific client devices, such as mobile phones, that have different constraints such as bandwidth, processing power, spatial and temporal display resolution, and interactivity.","Throttler  buffers host actions and outgoing partner actions as necessary and feeds them out at a controlled rate to match the transmission bandwidth to the client and other rate constraints.","Logger  records each transaction, possibly from each layer in service traffic processor , including not just all client-host and host-client actions as at an ordinary site, but also all host-related client-partner-client transactions, for analysis by network-service threat detector , using a single master clock for accurate timing. In the preferred embodiment, the transaction times are recorded as close to the client as possible\u2014ideally at the front firewall in the configuration shown\u2014in order to bound the clients' action delay as tightly as possible, for accurate threat analysis. The logger may also obtain additional transaction information from the host site , as available and useful. Conversely, the network service may also augment its own logs with information from logger , or may even supplant its own logs with those from the service traffic processor's logger.","As explained in the bulk of this disclosure, threat detector  analyzes the transaction records output by logger  and network service  for different types of network service threats, outputting alerts and reports to threat processors .","Threat processors , in turn, output remedial-action rules to remediator , which implements the remedial actions through the appropriate components in service traffic processor  via enforcer .","In the preferred embodiment, each stage of service traffic processor  requiring significant processing power, including reformatters , link translators , host channelers , partner channelers , decompressors  and compressors , and decrypters  and encrypters , utilizes a cache for efficient service, outputting a cached copy of a processed resource if the unprocessed resource matches.","The deployment of channeler  to service traffic processor  may introduce new software bugs and incompatibilities, new risks of incorrect link mapping, new resource strains, and new opportunities for attack. Accordingly, the preferred embodiment also includes monitors , showing real-time diagnostic information such as current and comparative rates of host-channeler traffic and partner-channeler traffic for each partner, as well as related errors and remediation actions, for monitoring by threat processors \u2014either the same threat processors as for threat detector  or independent threat processors.","The addition of client-server and server-client traffic may substantially increase the load on an established service traffic processor. In such cases, in the preferred embodiment, router  is situated in front to offload partner channeler  onto a separate service traffic processor from host channeler , with its own front-end components, such as front firewall , authenticator , decrypter  and encrypter , decompressor  and compressor , throttler , and cache . In an alternative embodiment, this separate service traffic processor is located elsewhere on the exterior network, perhaps along with threat detector , threat processors , and remediator , with the host-channeler logs relayed to the partner-channeler site over a dedicated line or encrypted network traffic, and the host-channeler logger synchronized to the partner-channeler logger for accuracy.","Depending on network service traffic characteristics, cost, existing infrastructure, availability, expertise, and other considerations, the various components of service traffic processor  may be embodied as software modules in one or more physical or virtual servers, hardware components, a network of servers, a cloud computing center, or any combination of these and other possibilities.","Those skilled in the art will recognize that these and other front-end components could be employed in many alternative configurations, including employing multiple instances of various components, employing them in a different order, or omitting some of the components or adding others.","As depicted in information-flow diagram , channeler  (See ) entrains host-related traffic between clients  and third-party partner services  through partner channelers , where the traffic\u2014which would otherwise pass invisibly and inaccessibly between the clients and the partner services\u2014is logged by logger  to be monitored by monitors  (See ), analyzed by threat detector , remediated by remediator , and optionally accessed by host website . The channeler entrains host-introduced client-partner traffic by interposing host channeler  as reverse host*proxy  to the clients and as forward client*proxy  to the host servers, where partner paraproxy  processes the contents of host-client actions , finds all references to targeted partner services therein, and replaces them with reversibly mapped aliases referring to the partner channeler.","Similarly, a partner channeler , which acts as mediate partner*proxy  to the clients, entrains responsive partner-client traffic by acting as mediate client*proxy  to partners , and entrains subsequent partner-conducted client-partner traffic by using partner paraproxy  to find all targeted partner references in the contents of partner-client actions  and reversibly alias them to the partner channeler.","In detail, the network is configured so that client requests  destined for the primary network service  are intercepted by reverse host*proxy  in host channeler . The host*proxy uses client mapper  to reversibly replace the client return addresses in the incoming client-host*proxy actions with client*aliases local to the host channeler, outputting the modified requests as client*proxy-host*proxy actions , so that the host responses  will be routed back to the host channeler instead of going directly back to the client. The client mapper may optionally also append the client's public address  to the edited action, in case it is required by partner paraproxy  or by the primary network service.","Forward client*proxy  in host channeler  then uses host*remapper  to replace the host*aliases in the client*proxy-host*proxy actions  with the actual host addresses, outputting the modified requests as client*proxy-host actions . Note that client translation for host transactions may not be needed if the host channeler communicates with a single-server host via a dedicated connection or as a coresident module rather than through a network.","On intercepting host-client*proxy responses , forward client*proxy  in host channeler  uses host mapper  to reversibly replace the host return addresses in the host actions with their host-channeler aliases, outputting the modified responses as host*proxy-client*proxy actions .","Host service actions  often contain references to other services available at the primary website, and may also contain references to third-party services  on partner websites. Partner paraproxy  in host channeler  uses partner entrainer  to find partner referrals in the outgoing host service actions matching the targets in partner-reference translation rule-base , and replaces them with aliases local to the specified partner channeler , outputting the entraining results as host*proxy-client*proxy action*proxies , so that any client actions on those referrals will be routed through the specified partner channeler instead of going directly to the partner sites .","In an HTML webpage, host and partner references are specified as URI hyperlinks embedded in the HTML page description, corresponding to user-clickable controls in the graphical representation of the webpage. In the simplest embodiment, partner entrainer  uses a general-purpose character-string substituter to replace all occurrences of targeted URI patterns according to partner translation rule base . In a more sophisticated embodiment, the partner entrainer parses the HTML description, determines the appropriate character encoding, and searches for appropriate target strings, for example only in the \u2018href\u2019 fields of anchor (\u2018a\u2019) tags. More generally, the partner address translator is applied not just to HTML services, but, using analogous techniques obvious to those skilled in the art, to services of other MIME types listed in the partner-translation rule-base.","A URI may be specified in many different ways. For example, the following are all equivalent:","http:\/\/www.google.com\/","http:\/\/google.com\/ (omitting the optional \u201cwww\u201d subdomain)","http:\/\/www.google.com (omitting the optional \u201c\/\u201d directory indicator)","http:\/\/www.google.com\/\/ (adding a superfluous \u201c\/\u201d directory indicator)","http:\/\/www.google.com\/# (adding an empty \u201c#\u201d anchor indicator)","http:\/\/www.google.com\/? (adding an empty \u201c?\u201d query indicator)","http:\/\/www.google.com\/. (adding a vacuous \u201c.\u201d parent-directory indicator)","http:\/\/www.google.com\/index.html (adding the optional \u201cindex.html\u201d default page name)","http:\/\/www.google.com:80\/(adding the optional \u201c:80\u201d World Wide Web HTTP port)","HTTP:\/\/wWw.Google.cOm\/ (optionally capitalizing letters)","http:\/\/w%77w.%67oogle.c%6fm\/ (optionally percent-encoding characters)","http:\/\/garbage@www.google.com\/ (adding an ignored authorization code)","http:\/\/74.125.19.106\/ (using the decimal 4-octet IP address)","http:\/\/1249710954\/ (using the decimal IP address)","http:\/\/0112.0175.0023.0152\/ (using the octal 4-octet IP address)","http:\/\/0112.0175.0023.0000152\/ (adding superfluous leading zeroes)","http:\/\/0x4a.0x7d.0x13.0x6a\/ (using the hexadecimal 4-octet IP address)","In addition to the variants exemplified here, a URI may be specified relative to that of the page or iframe in which it occurs, or it may be a URN (uniform resource name), a PURL (persistent uniform resource locator), or even some other type of variant not yet defined. In the preferred embodiment, to facilitate detecting fraudsters through the use of nonstandard URIs, to reduce the size of the rule base, and to facilitate the caching of host actions, partner-paraproxy rule-base  includes rules for first resolving each URI to a canonical form, using well-known algorithms and services, before comparing the canonical URI to the targets in the partner translation table.","Some websites have additional synonymy conventions, such as optionally naming a service through a query string instead of a directory path; arranging subdirectories in a matrix instead of a tree; accepting optional abbreviations or misspellings of domain names, directory names, or service names; or assigning synonymous serial numbers to services. In the preferred embodiment, again to facilitate detecting fraudsters who use nonstandard URIs, to simplify the rule base, and to facilitate caching, partner-translation rule-base  is augmentable with custom algorithms and rules for reducing such site-specific synonyms to canonical form, before comparing the canonical URI to the targets in the partner translation table.","In many cases, all URIs within a partner's domain, a subdomain thereof, or a path thereunder, are to be entrained. In the preferred embodiment, partner entrainer  permits target URIs and their aliases to be specified with generic patterns in rule-base , for example using standard regular-expression syntax for string pattern matching and substitution, or using variable names for different components of a URI.","For standard URIs, the entraining partner*aliases can take several different forms. For example, the partner URL","https:\/\/www.partner.com\/path\/page.html#anchor?query","can be mapped straightforwardly to either a query parameter, a dynamically assigned port, a directory, a subdomain local to the host, or a different domain:","htps:\/\/www.host.com\/? service=partner%2fpath%2fpage.html%23anchor%3fquery","https:\/\/www.host.com:12345\/path\/page.html#anchor?query","https:\/\/www.host.com\/partner\/path\/page.hml#anchor?query","https:\/\/partner.host.com\/path\/page.html#anchor?query","https:\/\/www.hostpartner.com\/path\/page.html#anchor?query","In the preferred embodiment, the partner entrainer  supports all such methods in rule-base , permitting the host website to choose the most appropriate one. In the preferred embodiment, the URLs are mapped algorithmically, as in these examples, so that no detailed address translation table is required. In the preferred embodiment, the URLs are mapped straightforwardly to preserve their human readability, as in the examples, rather than, say, being replaced with serial numbers or hashed.","Reverse host*proxy  in host channeler  then uses client*remapper  to replace the client*aliases in the entraining host*proxy-client*proxy action*proxies  with the actual client addresses, outputting the modified responses as host*proxy-client action*proxies , and routes them on toward the respective clients .","When a client  acts on a partner*alias in an entraining host*proxy-client action*proxy  (or in an entraining partner*proxy-client action*proxy ), instead of being diverted directly to the partner's website, the referred client-partner*proxy action  is channeled through a partner channeler , which may be located at the primary website , a logging site, a monitoring site, a threat-detection site, in a computing cloud, or elsewhere. Analogously to client mapper  in reverse host*proxy , mediate partner*proxy  uses client mapper  to reversibly replace the client return addresses in the incoming client-partner*proxy actions with client*aliases local to the partner channeler, outputting the modified requests as client*proxy-partner*proxy actions , so that the partner responses  will be routed back to the partner channeler instead of going directly back to the client. The client mapper may optionally also append the client's public address  to the edited action, in case it is required by partner paraproxy  or the partner service .","The partner channeler then uses partner*remapper  in mediate client*proxy  to remap the local partner aliases to the partner service's actual addresses, and sends the client*proxy-partner actions  on toward the specified partner websites .","When a partner service  responds to an entrained referred client action , its entrained response , instead of going directly back to the client, is channeled back through the partner channeler . There, mediate client*proxy  uses partner mapper  to reversibly replace the partner return addresses in the partner actions with their partner-channeler aliases, outputting the modified responses as partner*proxy-client*proxy actions . Note that client address translation may be unnecessary for referred partner transactions if the partner channeler has a dedicated connection to the partner sites in question.","Analogously to partner paraproxy  in host channeler , partner paraproxy  in partner channeler  uses partner entrainer  to find partner referrals in the outgoing partner service actions matching the targets in partner-reference translation rule-base , and replaces them with aliases local to the specified partner channeler, outputting the entraining results as partner*proxy-client*proxy action*proxies , so that any client actions on those referrals will be routed through the desired partner channeler instead of going directly to the respective partner sites .","Finally, mediate partner*proxy  in host channeler  then uses client*remapper  to replace the client*aliases in the entraining partner*proxy-client*proxy action*proxies  with the actual client addresses, outputting the modified responses as partner*proxy-client action*proxies , and routes them on toward the respective clients .","In the preferred embodiment, partner paraproxies  and  are accelerated with caches  and , respectively. For static resources containing partner references requiring mapping, the caches store a copy of the resource with the references already mapped, along with information to determine whether the source has changed, such as a date and checksum of the unmapped resource. For static resources not requiring remapping, the caches stores only the change-determinant, the absence of content indicating that the source can be passed through unchanged. Each cache, or relevant items therein, is also cleared when respective partner translation rule-base  or  changes.","Partner address-translation rule-bases  and  are maintained by remediator  (See ) through remedial actions . In principle, the two rule bases can differ: The host service  and partner services  output different sets of responses  and  with different contents generally containing different sets of references to partner sites; It may be useful to route traffic differently even for the same partner references, in case an attack is directed directly at a partner site rather than to the host site. However, if the rule bases differ, or if host channeler  and partner channeler  are not coresident, it is important to keep the rule bases synchronized, both to avoid inadvertent collisions where different partner services are undesiredly mapped to the same address, and to avoid referring an action to a channeler unequipped to remap its destination.","In the preferred embodiment, substitutions in partner address-translation rule-bases  and  can be conditioned by the client, so that clients suspected of abuse through partner services  can be blocked from visiting those partners or diverted to other services on those sites, on the host site, on the threat-detection site, or elsewhere for monitoring or other remediation, either by changing the partner service addresses in the partner*proxy-client*proxy actions  after visiting a partner site, changing the partner addresses in the client*proxy-partner*proxy actions  before visiting a partner site, or by changing the partner addresses in the host*proxy-client*proxy actions  before the client can even try to visit a partner site. Client-conditional partner-address translation is also useful for testing the entrainment of a partner service or a remediation by limiting a substitution to the IP addresses of testing staff, and for phasing it in by limiting it to a trial group of clients.","By adding host-address substitutions, optionally client-specific, to the rule bases  and , the partner translator can also be used to change the host service addresses in incoming client actions or embedded in outgoing service actions, in order to remediate abuse involving a combination of partner and host services, or host services alone, whether in general or by specific clients.","More generally, since any partner service may itself refer to other partner services not referred to by the host or an earlier partner, rule base  in partner channeler  may target additional services not targetted in rule base  in host channeler . Thus the channeler may be used to entrain communication not just with primary partners, but with partners of partners, and beyond.","Host channeler  and partner channeler  output records of their actions to logger  (See ) as host-channeler record  and partner-channeler record , respectively, using the current time  given by master clock  (See ), to enable the threat detector  to detect threats involving partner sites, and so that security personnel can directly monitor the operation of channeler  for suspicious events and trends using monitor  (See ). The partner channeler logs also help the threat detector improve the timing statistics for client-host transactions, by taking excursions to partner sites into account.","An embodiment of the present invention relates to a computer storage product with a computer readable storage medium having computer code thereon for performing various computer-implemented operations. The media and computer code may be those specially designed and constructed for the purposes of the present invention, or they may be of the kind well known and available to those having skill in the computer software arts. Examples of computer-readable media include, but are not limited to: magnetic media such as hard disks, floppy disks, and magnetic tape; optical media such as CD-ROMs, DVDs and holographic devices; magneto-optical media; and hardware devices that are specially configured to store and execute program code, such as application-specific integrated circuits (\u201cASICs\u201d), programmable logic devices (\u201cPLDs\u201d) and ROM and RAM devices. Examples of computer code include machine code, such as produced by a compiler, and files containing higher-level code that are executed by a computer using an interpreter. For example, an embodiment of the invention may be implemented using JAVA\u00ae, C++, or other object-oriented programming language and development tools. Another embodiment of the invention may be implemented in hardwired circuitry in place of, or in combination with, machine-executable software instructions.","The foregoing description, for purposes of explanation, used specific nomenclature to provide a thorough understanding of the invention. However, it will be apparent to one skilled in the art that specific details are not required in order to practice the invention. Thus, the foregoing descriptions of specific embodiments of the invention are presented for purposes of illustration and description. They are not intended to be exhaustive or to limit the invention to the precise forms disclosed; obviously, many modifications and variations are possible in view of the above teachings. The embodiments were chosen and described in order to best explain the principles of the invention and its practical applications, they thereby enable others skilled in the art to best utilize the invention and various embodiments with various modifications as are suited to the particular use contemplated. It is intended that the following claims and their equivalents define the scope of the invention."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":["FIG. 3","FIG. 1","FIG. 2"]},{"@attributes":{"id":"p-0024","num":"0023"},"figref":["FIG. 4","FIG. 3"]},{"@attributes":{"id":"p-0025","num":"0024"},"figref":["FIG. 5","FIG. 3"]},{"@attributes":{"id":"p-0026","num":"0025"},"figref":["FIG. 6","FIG. 5"]},{"@attributes":{"id":"p-0027","num":"0026"},"figref":["FIG. 7","FIG. 6"]},{"@attributes":{"id":"p-0028","num":"0027"},"figref":["FIG. 8","FIG. 5"]},{"@attributes":{"id":"p-0029","num":"0028"},"figref":["FIG. 9","FIG. 5"]},{"@attributes":{"id":"p-0030","num":"0029"},"figref":["FIG. 10","FIG. 5"]},{"@attributes":{"id":"p-0031","num":"0030"},"figref":["FIG. 11","FIG. 5"]},{"@attributes":{"id":"p-0032","num":"0031"},"figref":["FIG. 12","FIG. 11"]},{"@attributes":{"id":"p-0033","num":"0032"},"figref":["FIG. 13","FIG. 5"]},{"@attributes":{"id":"p-0034","num":"0033"},"figref":["FIG. 14","FIG. 13"]},{"@attributes":{"id":"p-0035","num":"0034"},"figref":["FIG. 15","FIG. 13"]},{"@attributes":{"id":"p-0036","num":"0035"},"figref":["FIG. 16","FIG. 3"]},{"@attributes":{"id":"p-0037","num":"0036"},"figref":["FIG. 17","FIG. 3"]},{"@attributes":{"id":"p-0038","num":"0037"},"figref":["FIG. 18","FIG. 3"]},{"@attributes":{"id":"p-0039","num":"0038"},"figref":["FIG. 19","FIG. 18"]},{"@attributes":{"id":"p-0040","num":"0039"},"figref":["FIG. 20","FIG. 18"]},{"@attributes":{"id":"p-0041","num":"0040"},"figref":["FIG. 21","FIG. 20"]},{"@attributes":{"id":"p-0042","num":"0041"},"figref":["FIG. 22","FIG. 20"]},{"@attributes":{"id":"p-0043","num":"0042"},"figref":["FIG. 23","FIG. 20"]},{"@attributes":{"id":"p-0044","num":"0043"},"figref":["FIG. 24","FIG. 20"]},{"@attributes":{"id":"p-0045","num":"0044"},"figref":["FIG. 25","FIG. 20"]},{"@attributes":{"id":"p-0046","num":"0045"},"figref":["FIG. 26","FIG. 20"]},{"@attributes":{"id":"p-0047","num":"0046"},"figref":["FIG. 27","FIG. 20"]},{"@attributes":{"id":"p-0048","num":"0047"},"figref":["FIG. 28","FIG. 20"]},{"@attributes":{"id":"p-0049","num":"0048"},"figref":["FIG. 29","FIG. 2"]},{"@attributes":{"id":"p-0050","num":"0049"},"figref":["FIG. 30","FIG. 29"]}]},"DETDESC":[{},{}]}
