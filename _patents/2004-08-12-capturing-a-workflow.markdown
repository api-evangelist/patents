---
title: Capturing a workflow
abstract: Various embodiments of a method, system and computer program product for capturing a workflow are provided. A capture application automatically stores at least a portion of a copied screen of a source application from a clipboard to provide a captured screen. The capture application repeats the automatic storing to provide a set of captured screens. In various embodiments, a document is built based on the set of captured screens.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07594183&OS=07594183&RS=07594183
owner: International Business Machines Corporation
number: 07594183
owner_city: Armonk
owner_country: US
publication_date: 20040812
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION"],"p":["A portion of the disclosure of this patent document contains material which is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure, as it appears in the Patent and Trademark Office patent file or records, but otherwise reserves all copyright rights whatsoever.","1.0 Field of the Invention","This invention relates to capturing a workflow.","2.0 Description of the Related Art","A workflow application typically provides a graphical user interface to provide information to a user and to allow the user to make selections and input data. The graphical user interface comprises windows, which are also referred to as screens. Information is input to the screen and another screen is typically provided based on the inputs.","When testing computer software systems, the test sequence is documented to re-test the software and fix software problems. A user, such as a software tester, manually documents the test. For example, to document a test when testing a workflow application that has various screens, the tester manually copies and pastes the screens into an empty document. The tester also manually highlights certain portions of the text, documents the inputs, supplies comments and provides the workflow sequence. Because a workflow application may produce numerous different screens during a test, the process of manually documenting a test sequence is tedious and time consuming, and therefore expensive. In addition, different testers may document the test in different manners, and the documentation may not be standardized.","Therefore, there is a need for a technique to reduce the cost of testing a software application. This technique should also provide a link between the documentation and the application that was tested. In addition, this technique should allow documentation to be standardized for software testing.","To overcome the limitations in the prior art described above, and to overcome other limitations that will become apparent upon reading and understanding the present specification, various embodiments of a method, system and computer program product for capturing a workflow are provided. In various embodiments, a capture application automatically stores at least a portion of a copied screen of a source application from a clipboard to provide a captured screen. The capture application repeats the automatic storing to provide a set of captured screens.","In some embodiments, the screens are copied from the source application to the clipboard. In various embodiments, the captured screens are sequentially displayed in a viewing area. In another embodiment, a document is created based on the set of captured screens.","In this way, an improved technique for capturing a workflow is provided. In various embodiments, the captured workflow is from a software test and standardized documentation is produced.","After considering the following description, those skilled in the art will clearly realize that the teachings of the various embodiments of the present invention can be utilized to capture a workflow. In various embodiments, a capture application automatically stores at least a portion of a copied screen of a source application from a clipboard to provide a captured screen. The capture application repeats the automatic storing to provide a set of captured screens. In some embodiments, a document is built based on the set of captured screens.",{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIG. 1","b":["30","32","34","34","36","38","30","38","36","0","42","40","0","42","46","30","48","40","48","32","48"]},"The clipboard  is typically an area of memory that is used to store text or an image that has been copied from an application. In some embodiments, the source application  is executed, and a user copies at least a portion of a displayed screen  from the source application  to the clipboard . For example, a user may execute a source application which has a graphical user interface, that is, a screen, select a portion of the screen using a mouse, and copy, typically by simultaneously pressing a control \u201cCtrl\u201d key and a \u201cC\u201d key, the selected portion of the screen to the clipboard. In other embodiments, the screen  is automatically copied from the source application  to the clipboard . In various embodiments, the captured screens ,  are sequentially displayed in a viewing area.",{"@attributes":{"id":"p-0039","num":"0038"},"figref":"FIG. 2","b":["50","50","52","54","56","58","60","62","64","56","66","68","62","70","58","50","72","58","74","58","58"]},"The memory  generally comprises different modalities, illustratively semiconductor memory, such as random access memory (RAM), and disk drives. In various embodiments, the memory  stores an operating system , the capture application , the clipboard , and in some embodiments, a source application . In other embodiments, the memory  also stores a communications application .","In some embodiments, the network  is connected, via another transmission medium , to another computer system  that executes a source application . In various embodiments, the computer system  is a remote host, for example, a mainframe. The communications application  is used to connect the local computer system  to the remote computer system  via the network interface  and network  so that the source application  can be accessed. In various embodiments, the source application  executes on the remote computer system  in an OS\/390\u00ae (Registered Trademark of International Business Machines Corporation) environment; and the communications application  is International Business Machines (IBM) Personal Communications.","The source application  () may be the source application  on the local computer system  or may be the source application  on the remote computer system . The source application  is typically a workflow application which provides a graphical user interface comprising one or more windows or screens . In various embodiments, the screens are text-based. In some embodiments, the screens are Interactive System Productivity Facility (ISPF) panels. In other embodiments, the screens are images. In yet other embodiments, the screens comprise both text and images.","In various embodiments, the capture application  captures a workflow. The capture application  has a graphical user interface comprising a capture display screen  which is displayed on the display . In the capture application , a capture display module  provides the capture display screen . The capture application  comprises at least one handler which is associated with the graphical user interface. In some embodiments, the handlers comprise at least one or a combination of a screen capture module , a play handler , a forward handler , a back handler  and a build handler . The handlers will be described in further detail below.","In some embodiments, the capture application  is implemented using the Java\u00ae (Registered trademark of SUN Microsystems, Inc.) programming language. However, the capture application  is not meant to be limited to implementations using the Java programming language, and the capture application  may be implemented using other programming languages.","In various embodiments, the capture application  captures various screens of a workflow from the clipboard  and stores the screens in the working directory . Each captured screen is stored in a separate file, referred to as a clip with an integer indicating the order of capture, for example, clip, clip, . . . clip<n>, ,  and , respectively. Alternately, the captured screens are stored in a single file such that individual screens can be identified. The clips that are stored in the working directory form a set of captured screens. Alternately, the captured screens that are stored in a single file are a set of captured screens. In some embodiments, a comment may be associated with a particular clip. The comment is stored in a comment file. For example, a comment for clip  is stored in the comment file . In some embodiments, a document  is built based on at least a subset of the clips.","In various embodiments, the specific software instructions, data structures and data that implement various embodiments of the present invention are typically incorporated in the capture application , and in some embodiments, the communications application  and the source application . Generally, an embodiment of the present invention is tangibly embodied in a computer-readable medium, for example, the memory  and is comprised of instructions which, when executed by the processor , cause the computer system  to utilize the present invention. The memory  may store the software instructions, data structures and data for any of the operating system , capture application , the clipboard , the source application  and the communication application , in semiconductor memory, in disk memory, or a combination thereof.","The operating system  may be implemented by any conventional operating system such as AIX\u00ae (Registered Trademark of International Business Machines Corporation), UNIX\u00ae (UNIX is a registered trademark of the Open Group in the United States and other countries), WINDOWS\u00ae (Registered Trademark of Microsoft Corporation), LINUX\u00ae (Registered trademark of Linus Torvalds), Solaris\u00ae (Registered trademark of Sun Microsystems Inc.) and HP-UX\u00ae (Registered trademark of Hewlett-Packard Development Company, L.P.).","The clipboard  is typically provided by the operating system . For example, the Windows operating system typically provides a clipboard. Users can copy data to and from the clipboard.","In various embodiments, the present invention may be implemented as a method, apparatus, or article of manufacture using standard programming and\/or engineering techniques to produce software, firmware, hardware, or any combination thereof. The term \u201carticle of manufacture\u201d (or alternatively, \u201ccomputer program product\u201d) as used herein is intended to encompass a computer program accessible from any computer-readable device, carrier or media. In addition, the software in which various embodiments are implemented may be accessible through the transmission medium, for example, from a server over the network. The article of manufacture in which the code is implemented also encompasses transmission media, such as the network transmission line and wireless transmission media. Thus the article of manufacture also comprises the medium in which the code is embedded. Those skilled in the art will recognize that many modifications may be made to this configuration without departing from the scope of the present invention.","The exemplary computer system illustrated in  is not intended to limit the present invention. Other alternative hardware environments may be used without departing from the scope of the present invention.",{"@attributes":{"id":"p-0051","num":"0050"},"figref":["FIG. 3","FIG. 2","FIG. 2","FIG. 2","FIG. 2","FIG. 2"],"b":["90","30","92","92","90","90","112","114","116","118","30","90","90","120","120"]},"In various embodiments, the capture display screen  comprises a working directory text field  to allow a user to enter the name of a working directory. Alternately, no working directory text field is displayed and the capture display screen  uses a predefined default directory as the working directory. The working directory specifies where captured data is stored.","The capture display screen  also has a capture counter text field  which displays a value of a capture counter. The capture counter starts at zero and is incremented each time a screen is captured. Each captured screen is associated with a value of the capture counter. In various embodiments, a user may also supply the value of the capture counter in the capture counter text field .","When an \u201cOn\u201d button  is activated, data is automatically captured from the clipboard. The \u201cOn\u201d button  may be activated in any manner, for example, being clicked-on with a mouse or other input device, or using a keyboard. In some embodiments, another application invokes the capture application  () and source application  () and supplies the appropriate input(s), for example, activating the \u201cOn\u201d button, to perform a test and capture various screens. Typically, the data on the clipboard  () represents a screen that has been copied. The captured data is stored in a file. When the \u201cOn\u201d button  is deactivated, data is no longer captured from the clipboard. The \u201cOn\u201d button  may be deactivated in any manner, for example, by being clicked-on using a mouse or using the keyboard. The \u201cOn\u201d button  will be described in further detail below.","In various embodiments, a user may supply a comment in a comment\/note text field . Typically, the comment is entered in the comment\/note text field  prior to copying the associated screen to the clipboard. During capture, the comment is associated with the data that is captured from the clipboard and saved in a file that is associated with the file that stores the captured data. For example, comment  () is associated with clip (). Typically the comment file has a .txt extension. In an alternate embodiment, the comment is stored in the same file as the captured data.","Captured screens may be viewed in a viewing area . When activated, a \u201cplay\/pause\u201d button  causes a set of captured screens in a specified working directory to be displayed automatically. When deactivated, the \u201cplay\/pause\u201d button  causes the automatic display of captured screens to stop. A \u201cforward\u201d button  allows a user to single step through the set of captured screens in the specified working directory in a forward direction. Another captured screen is displayed each time the \u201cforward\u201d button  is clicked on. A \u201cback\u201d button  allows a user to single step in a reverse direction through the set of captured screens in the specified working directory. Another captured screen is displayed each time the \u201cback\u201d button  is clicked on.","In various embodiments, a user can build a document  (). A format field  is used to specify the format of the document. The format field  is associated with a down-arrow symbol . Referring also to , when the down-arrow symbol  is activated, a drop-down list box  is displayed. The drop-down list box  allows a user to select the document format. In the drop-down list box , the list of format choices comprises \u201cText\u201d and \u201cImage.\u201d When \u201cText\u201d is selected, the document format is hypertext markup language (HTML) displaying captured data of the type text. When \u201cImage\u201d is selected, the document format is HTML displaying captured data of the type image. When no format is specified, the document format defaults to HTML for captured data of the type text.","When the \u201cAll\u201d button  is selected, the document  () is built based on all captured screens in the specified working directory. When the \u201cFrom range\u201d button  is activated, a user enters the values of the capture counter associated with the screens from which the document is to be built. A starting value is entered and\/or displayed in a lower range text field  and an ending value is entered and\/or displayed in an upper range text field . When the \u201cBuild Document\u201d button  is activated, the build handler  () is invoked and builds the document  () in accordance with the range specified by either the \u201cAll\u201d button  or the \u201cFrom range\u201d button , depending on the selection.",{"@attributes":{"id":"p-0059","num":"0058"},"figref":["FIG. 5","FIG. 2","FIG. 2"],"b":["170","80","86","80","86"]},"In step , the capture application  () is executed and the capture display screen  () is displayed. In step , the clipboard  () is initialized. In various embodiments, a user copies a screen to the clipboard to initialize the clipboard. In other embodiments, a macro is created in the communications application  () to automatically copy one or more screens to the clipboard  () in addition to performing other functions. For example, a user may create a macro and invoke that macro to copy the currently displayed screen to the clipboard, to enter one or more characters or a command that supplies or emulates the enter key, and to copy the next displayed screen to the clipboard. In other embodiments, the source application  () automatically copies screens to the clipboard  (). Alternately, another application supplies input data and commands to the source application and causes screens from the source application to be copied to the clipboard.","In step , the screen capture is activated from the capture display. The the \u201cOn\u201d button  () is activated to enable automatic screen capture. In step , one or more screens are automatically captured. The capture application detects that a screen is available on the clipboard and saves the screen in a clip file for later analysis, and in some embodiments, document generation. In step , screen capture is deactivated. In step , in some embodiments, the user activates the \u201cBuild Document\u201d button  () to build the document  ().",{"@attributes":{"id":"p-0062","num":"0061"},"figref":["FIG. 6","FIG. 5","FIG. 5","FIG. 2","FIG. 2","FIG. 2","FIG. 3","FIG. 5","FIG. 3","FIG. 3","FIG. 5","FIG. 2","FIG. 3","FIG. 2","FIG. 3","FIG. 2","FIG. 2","FIG. 3"],"b":["190","190","170","192","30","30","92","90","192","172","194","122","196","198","130","198","176","200","30","202","130","202","30","130","204","204","200","202","130","206","48","48","160","206"]},{"@attributes":{"id":"p-0063","num":"0062"},"figref":["FIG. 7","FIG. 2","FIG. 3","FIG. 3","FIG. 3","FIG. 3"],"b":["92","220","222","224","90","124","122","138"]},{"@attributes":{"id":"p-0064","num":"0063"},"figref":["FIG. 8","FIG. 1","FIG. 2","FIG. 2","FIG. 2","FIG. 8"],"b":["228","230","32","32","230","86","84","78","50","86","84","228","230","50","230","230","232","234","236","2","236","238","240","240","238","240","242","230"]},{"@attributes":{"id":"p-0065","num":"0064"},"figref":["FIG. 9","FIG. 9","FIG. 8","FIG. 8","FIG. 9"],"b":["250","252","254","256","254","254","242","242","252","254","252","254"],"sup":"th "},{"@attributes":{"id":"p-0066","num":"0065"},"figref":["FIGS. 10A","FIG. 2","FIG. 2","FIG. 2","FIG. 2","FIG. 2","FIG. 3","FIG. 3"],"b":["10","10","94","94","94","94","94","130","130"]},"In step , the value of the capture counter (i) is retrieved from the capture counter text field  () of the capture display screen  (). In step , the name of the specified working directory is retrieved from the working directory text field  (). In step , the previous captured data size, a variable, is set equal to zero.","Step  determines whether data is on the clipboard. When step  determines that data is on the clipboard, in step , the data is retrieved from the clipboard to provide current data. Retrieving data from the clipboard results in that data being removed from the clipboard.","In some embodiments, in step , the screen capture module attempts to read the data from the clipboard as an image. When step  determines that the data from the clipboard cannot be read as an image, in step , the screen capture module reads the data from the clipboard as text, and the data is referred to as current data. In step , a variable, called filename, is set to clip<i>.txt. For example, when the value of the capture counter, i, is equal to 1, filename is set to clip .txt. The \u201ctxt\u201d extension is used because the current data is text-based. In step , the current data is saved to a temporary (temp) file, called clip, in the specified working directory. Step  proceeds to step .","When step  determines that the data from the clipboard was read as an image, the data is referred to as current data and, in step , the variable, called filename, is set to clip<i>.jpg. For example, when the value of the capture counter, i, is equal to 2, filename is set to clip.jpg. In step , the current data is saved to a temporary (temp) file, called clip, in the specified working directory. Step  proceeds to step .","Step  determines whether the size of the current data is the same as the previous captured data size. When step  determines that the size of the current data is the same as the previous captured data size, step  proceeds via Continuator A to step  of .","In , step  determines whether the filename ends in \u201ctxt\u201d. When step  determines that the filename ends in \u201ctxt\u201d, in step , clip<i-1> is retrieved from the specified working directory as previous captured data. In step , the current data and the previous captured data are compared. Step  determines whether there is a difference between the current data and the previous captured data. In some embodiments, steps  and  are combined.","When step  determines that there is a difference between the current data and the previous captured data, step  proceeds to step . In step , the file named clip is renamed to the filename in the specified working directory. In step , the previous captured data size is set equal to the size of the current captured data. In step , the current data is displayed in the viewing area of the capture display screen. In step , the value of the capture counter (i) is incremented by one. In step , the value of the capture counter (i) is displayed. In this embodiment, the displayed value of the capture counter references the next screen that will be captured. In other embodiments, steps  and  are reversed so that the displayed value of the capture counter references the clip file associated with the screen that contains the current data. Step  proceeds via Continuator B to step  of .","In , in step , the screen capture module waits for a predetermined amount of time. In some embodiments, the predetermined amount of time is about two seconds; however, the predetermined amount of time is not meant to be limited to two seconds, and other amounts of time may be used.","Step  determines whether the \u201cOn\u201d button  () is activated. When step  determines that the \u201cOn\u201d button is not activated, in step , the screen capture module exits. When step  determines that the \u201cOn\u201d button is activated, step  proceeds via Continuator C to step  of  to check for new data on the clipboard.","When step  of , determines that there is no data on the clipboard, step  proceeds via Continuator B to step  of  to wait for a predetermined amount of time before checking for data on the clipboard again.","When step  of  determines that the size of the current data is not the same as the previous captured data size, step  proceeds via Continuator D to step  of  to store the current data as captured data.","When step  of  determines that the filename does not end in \u201ctxt\u201d, step  proceeds via Continuator B to step  of  to wait for a predetermined amount of time.","When step  of  determines that there is no difference between the current data and the previous captured data, step  proceeds via Continuator B to step  of .","In another embodiment, the screen capture module stores a portion of the data which associated with a screen that is read from the clipboard.",{"@attributes":{"id":"p-0081","num":"0080"},"figref":["FIG. 11","FIG. 11","FIG. 9","FIG. 11"],"b":["300","302","306","304","115","114","115","302","115","302","1","304","1","304"]},{"@attributes":{"id":"p-0082","num":"0081"},"figref":["FIG. 12","FIG. 2","FIG. 3","FIG. 3","FIG. 3","FIG. 3","FIG. 3","FIG. 3","FIG. 3","FIG. 3","FIG. 3"],"b":["96","316","318","320","124","322","324","138","90","1","1","138","326","140","326","140","328","326","140","330","332","124","90","334","334","334","322","334","336","336","322"]},{"@attributes":{"id":"p-0083","num":"0082"},"figref":["FIG. 13","FIG. 3","FIG. 3","FIG. 13","FIG. 2","FIG. 3","FIG. 2"],"b":["142","90","98","142","98"]},"In step , the value of the capture counter is retrieved from the capture counter text field  () of the capture display screen  (). In step , the name of the specified working directory is retrieved from the working directory text field  (). In step , the value of the capture counter is incremented by one. In step , the captured data associated with the value of the capture counter is retrieved from the specified working directory. In particular, the clip associated with the value of the capture counter in the specified working directory is retrieved. For example, when the value of the capture counter is equal to two, clip, in the specified working directory, is retrieved. In step , the captured data associated with the value of the capture counter is displayed for a predetermined amount of time in the viewing area  () of the capture display screen  (). In step , the value of the capture counter is displayed. In step , the flowchart exits.",{"@attributes":{"id":"p-0085","num":"0084"},"figref":["FIG. 14","FIG. 3","FIG. 3","FIG. 14","FIG. 2","FIG. 3","FIG. 2","FIG. 14","FIG. 13","FIG. 13"],"b":["144","90","100","144","100","354","344","354"]},{"@attributes":{"id":"p-0086","num":"0085"},"figref":["FIG. 15","FIG. 2"],"b":["360","360","362","362","364","366"]},{"@attributes":{"id":"p-0087","num":"0086"},"figref":["FIG. 16","FIG. 15","FIG. 16","FIG. 2","FIG. 2","FIG. 3","FIG. 3","FIG. 3","FIG. 3","FIG. 3","FIG. 3","FIG. 3","FIG. 3"],"b":["102","102","160","370","122","372","148","53","150","154","152","90","154","152"]},"In step , clip<i> is retrieved from the specified working directory to a captured data area. In step , the value of i is stored in the table  () as the screen number  (). In step , clip<i> is stored in the capture screen column  () of the table. In various embodiments, the information in the clip file is formatted using HTML tags and stored in the table. Different formatting is typically used for text and image data. In step , i is incremented by one. Step  determines whether the value of i is less than or equal to the ending value. When step  determines that the value of i is less than or equal to the ending value, step  proceeds to step . When step  determines that the value of i is not less than or equal to the ending value, in step , the table, that is, the document, is stored as a file. Typically, the document is stored in the specified working directory. Alternately, the document is stored in a predetermined directory. In step , the flowchart exits.",{"@attributes":{"id":"p-0089","num":"0088"},"figref":["FIG. 17","FIG. 2","FIG. 2","FIG. 2","FIG. 2","FIG. 2","FIG. 2"],"b":["390","102","390","392","394","102","396","390","394","400","402","390","392","102","404","398","390","102","394","390","400","404","390","54"]},"In some embodiments, the document is an HTML document depicting captured data of the type text. In other embodiments, the document is an HTML document depicting captured data of the type image.","In various embodiments, the document is used to document a software test. However, the document is not meant to be limited to documenting a software test and may be used for other applications. Building the document typically depends on the type of source application, and the desired screens to be saved.",{"@attributes":{"id":"p-0092","num":"0091"},"figref":["FIG. 18","FIGS. 18A","FIG. 2","FIG. 18A"],"b":["18","18","18","410","410","412","414","416","418","412","418","412","414","416","418"]},{"@attributes":{"id":"p-0093","num":"0092"},"figref":["FIG. 18B","FIG. 18A","FIG. 18B"],"b":["420","2","422","418","424"]},{"@attributes":{"id":"p-0094","num":"0093"},"figref":["FIG. 18C","FIG. 18B","FIG. 18C","FIG. 18C"],"b":["430","424","432","434"]},{"@attributes":{"id":"p-0095","num":"0094"},"figref":["FIG. 18D","FIG. 18C"],"b":["436","438","436","440","434","442","436"]},"In row , the sequence number is equal to \u201c4\u201d. As shown in the user input column , the user supplied a value of \u201cTPADB101\u201d 444 in the TABLESPACE field of the screen in the verification column  of row  to provide the screen shown in the verification column  of row . In the screen shown in the verification column  of row , a distinct visual indicator is applied to the input value \u201cTPADB01\u201d . The distinct visual indicator was described above.",{"@attributes":{"id":"p-0097","num":"0096"},"figref":["FIG. 19","FIGS. 19A","FIG. 18","FIG. 19","FIG. 2","FIG. 3","FIG. 2"],"b":["19","19","19","19","19","19","410","102","160","102"]},"In step , a previous panel identifier (id) is initialized to an empty string; previous panel capture data is initialized to an empty string; a previous navigational value is initialized to NULL; a line number is initialized to equal zero; a current navigation value is initialized to NULL and a panel comment string is initialized to NULL. In step , table column headers are output. In various embodiments, the table column headers are Seq., Steps, User Input, and Verification, which correspond to columns one, two, three and four, , ,  and  (), respectively.","In step , the specified working directory is retrieved from the working directory text field of the capture display screen. In step , the starting value of a counter called i and ending value are determined as described with respect to step  of . In step , the build handler  () gets a handle (F) to contain the contents of a file, clip<i>.txt, which contains captured data in the specified working directory. Step  determines whether F  exists, in other words, whether the file clip<i> exists in the specified working directory. When step  determines that F  exists, in step , the build handler gets a handle (F) to a comment file, comment<i> in the specified working directory. Step  determines whether F exists, in other words, whether the comment file, comment<i>, exists in the specified working directory. When step  determines that F exists, in step , the comment in the comment file is retrieved into a panel comment string using handle F, and step  proceeds via Continuator A to step  of . When step  determines that F does not exist, step  proceeds via Continuator A to step  of .","In , in step , captured data from the file, clip<i>, is read into a current panel capture string using handle F. In step , the build handler gets the current panel identifier (id) from the current panel capture string. Step  determines whether the previous panel id is equal to the current panel id. When step  determines that the previous panel id is equal to the current panel id, in step , the build handler gets a current navigational value by comparing line two from the previous panel capture string to line two from the current panel capture string and proceeds to step . When step  determines that the previous panel id is not equal to the current panel id, step  proceeds to step .","Step  determines whether the current navigational value is NULL. When step  determines that the current navigational value is NULL, step  determines whether the line number is equal to zero.","When step  determines that the line number is not equal to zero, step  determines whether the previous panel id is equal to the current panel id and the previous navigational value is equal to NULL. When step  determines whether the previous panel id is not equal to the current panel id or the previous navigational value is not equal to NULL, step  determines whether the previous panel id is equal to the current panel id and whether the previous navigational value is not NULL.","When step  determines that the line number is equal to zero, step  proceeds via Continuator C to step  of  to generate the first row of the table.","In , in step , the first row of the table is generated. In various embodiments, the first row is generated as a HTML row tag <TR>. In step , an empty cell is output in column one of the row. Step  determines whether the panel comment string is not NULL. When step  determines that the panel comment string is not NULL, in step , the panel comment string is output in column two of the row and step  proceeds to step . When step  determines that the panel comment string is NULL, in step , the text \u201cStarting point\u201d is output in column two of the row, and step  proceeds to step . In step , an empty cell is output in column three of the row. In step , the current panel capture string is output in column four of the row. In various embodiments, the current panel capture string is output in a format that uses HTML tags. Step  proceeds via Continuator D to step  of .","In , in step , the line number is incremented by one. In step , the current panel id is copied into the previous panel id. In step , the current panel capture string is copied into the previous panel capture string. In step , the current navigational value is copied into the previous navigational value. In step , the counter i is incremented by one. Step  determines whether the value of the counter i is less than or equal to the ending value. When step  determines that the value of the counter i is not less than or equal to the ending value, in step , the table is stored. The table is an embodiment of the document of . In some embodiments, the table is stored as a file in the specified working directory. In other embodiments, the table is stored as a file in a predetermined directory. In step  the build handler  () exits. When step  determines that the value of the counter i is less than or equal to the ending value, step  proceeds via Continuator E to step  of  to process additional captured data.","In , when step  determines that the previous panel id is equal to the current panel id and that the previous navigational value is equal to NULL, step  proceeds via Continuator F to step  of .","In , in step , another row of the table is generated as a HTML row tag <TR>. In step , the current line number is output in column one of the row. Step  determines whether the panel comment is not NULL. When step  determines that the panel comment is not NULL, in step , the panel comment is output in column two of the row and step  proceeds to step . When step  determines that the panel comment is NULL, in step , an empty cell is output in column two of the row, and step  proceeds to step . In step , input values entered on the current panel, associated with the current panel capture string, are determined based on the previous and current panel capture strings. In step , the previous panel id and the input values are output in column three of the row. In step , the current panel capture string, with a distinct visual indicator applied to user input values, is output in column four of the row. In various embodiments, the current panel capture string is formatted using HTML tags. Step  proceeds via Continuator D to step  of .","In , when step  determines that the previous panel id is equal to the current panel id and that the previous navigational value is not equal to NULL, step  proceeds via Continuator G to step  of .","In , in step , another row of the table is generated as an HTML row tag <TR>. In step , the current line number is output in column one of the row. Step  determines whether the panel comment string is not NULL. When step  determines that the panel comment string is not NULL, in step , the panel comment string is output in column two of the row and step  proceeds to step . When step  determines that the panel comment string is NULL, in step , an empty cell is output in column two of the row, and step  proceeds to step . In step , input values entered on the current panel, associated with the current panel capture string, are determined based on the previous and current panel capture strings. In step , the previous panel id, the previous navigational value and the input values are output in column three of the row. In step , the current panel capture string, with a distinct visual indicator applied to user input values, is output in column four of the row. In various embodiments, the current panel capture string is output in a format using HTML tags. Step  proceeds via Continuator D to step  of .",{"@attributes":{"id":"p-0110","num":"0109"},"figref":["FIG. 19B","FIG. 19G"],"b":["484","484","546"]},"In , in step , another row of the table is generated as a HTML row tag <TR>. In step , the current line number is output in column one of the row. Step  determines whether the panel comment string is not NULL. When step  determines that the panel comment string is not NULL, in step , the panel comment string is output in column two of the row and step  proceeds to step . When step  determines that the panel comment string is NULL, in step , an empty cell is output in column two of the row, and step  proceeds to step . In step , the previous panel id, the previous navigational value and the user depress key [ENTER] are output in column three of the row. In step , the current panel capture string is output in column four. In various embodiments, the current panel capture string is output in a format using HTML tags. Step  proceeds via Continuator D to step  of .","In , when step  determines that the current navigational value is not NULL, step  proceeds via Continuator I to step  of .","In , when step  determines that F does not exist, step  proceeds via Continuator J to step  of .",{"@attributes":{"id":"p-0114","num":"0113"},"figref":["FIG. 20","FIG. 2","FIG. 20","FIG. 17"],"b":["602","604","610","612","614","616","618","616","602","618","604","618"]},{"@attributes":{"id":"p-0115","num":"0114"},"figref":["FIG. 21","FIGS. 21A","FIG. 2","FIG. 21","FIG. 21","FIG. 2"],"b":["21","21","21","102"]},"In step , table column headers are output. In some embodiments, the table column headers are \u201cBefore-data\u201d and \u201cAfter-data\u201d. In this embodiment, column one is the \u201cBefore-data\u201d column and column two is the \u201cAfter-data\u201d column.","In step , the name of the specified working directory is retrieved from the working directory text field of the capture display screen. In step , the starting value of a counter called i and ending value are determined as described with respect to step  of . Step  determines whether the value of counter i is less than or equal to the ending value. When step  determines that the value of counter i is not less than or equal to the ending value, in step , the table, that is, the document, is stored, and in step , the flowchart exits.","When step  determines that the value of counter i is less than or equal to the ending value, in step , the build handler gets an image handle (F) to the contents of a file, clip<i>, containing captured image data. The file clip<i> is read into random access memory (RAM). The image handle F  is associated with the address of the contents of the file, clip<i>, in RAM. In various embodiments, the image handle F is associated with an array that contains the pixel data of the captured image from clip<i>.","In step , the build handler gets an image handle (F) to the contents of a file, clip<i+1>, containing captured image data. The image handle F is associated with the address of the contents of the file, clip<i+1>, in RAM. In various embodiments, the image handle F is associated with an array that contains the pixel data of the captured image from clip<i+1>.","Step  determines whether the image handle F exists. When step  determines that the image handle F does not exist, that is, there is no file clip<i> for that value of i, in step , the value of the counter i is incremented by one, and step  proceeds to step .","When step  determines that the image handle F exists, in step , a row of a table is generated. Step  determines whether the image handle F exists. When step  determines that the image handle F exists, in step , the build handler gets another image handle (F) to a difference array by subtracting the contents of the array associated with image handle F from the contents of the array associated with image handle F which results in the array associated with image handle F containing a pixel-by-pixel offset.","In step , several variables, a total number of pixels, a number of changed pixels, a width and height, are initialized to zero. The width refers to the number of pixels in a horizontal direction across an image, and the height refers to the number of pixels in a vertical direction of an image. Step  proceeds via Continuator A to step  of .","In , step  determines whether the width is less than the width of the image associated with image handle F. When step  determines that the width is less than the width associated with image handle F, step  determines whether the height is less than the height associated with the image handle F. When step  determines that the height is less than the height associated with the image handle F, in step , the total number of pixels is incremented by one. In step , the build handler gets the pixel offset value from the image associated with image handle F for the location specified by width and height.","Step  determines whether the pixel offset value is greater than a predetermined offset threshold. In various embodiments, the predetermined offset threshold is used to determine if the pixel offset value is sufficiently significant such that the associated location should be highlighted as a difference. When step  determines that the pixel offset value is greater than the predetermined offset threshold, in step , the number of changed pixels is incremented by one. In step , the build handler sets the pixel value associated with yet another image handle F to a predetermined highlighting color at the location specified by the width and height. In some embodiments, the predetermined highlighting color is yellow. However, the predetermined highlighting color is not meant to be limited to yellow and other colors may be used. In various embodiments, the image handle F is associated with another array and indicates the pixels that should be highlighted. In step , the value of the height is incremented by one, and step  proceeds to step . When step  determines that the pixel offset value is not greater than the predetermined offset threshold, step  proceeds to step .","When step  determines that the value of height is not less than the height of the image associated with image handle F, in step , the value of width is incremented by one. In step , the value of height is set equal to zero, and step  proceeds to step . When step  determines that the width is not less than the width of the image associated with image handle F, step  proceeds via Continuator B to step  of .","In , step  determines whether the number of changed pixels divided by the total number of pixels is less than a predetermined change threshold. When step  determines that the number of changed pixels divided by the total number of pixels is less than the predetermined change threshold, in step , a composite image with image handle F is created using image handles F and F. In some embodiments, a method in the JAVA Advanced Imaging Application Programming Interface (API) is used to create the composite image with image handle F based on image handles F and F. In various embodiments, the composite image contains the image data of the image associated with image handle F, with highlighting applied to the pixels that are different from the image associated with image handle F.","In step , the image associated with image handle F is output in column one of the row. In step , the image associated with the image handle F is output in column two of the row. In step , the value of i is incremented by two and step  proceeds via Continuator C to step  of .","When step  determines that the number of changed pixels divided by the total number of pixels is not less than the predetermined change threshold, step  proceeds via Continuator D to step  of .","In  in step , the image associated with image handle F is output in column one spanning two cells of the row. In step , the value of counter i is incremented by one, and step  proceeds via Continuator C to step  of .","When step  of  determines that the image handle F does not exist, step  proceeds via Continuator D to step  of .",{"@attributes":{"id":"p-0131","num":"0130"},"figref":["FIG. 22","FIG. 2","FIGS. 19 and 21","FIG. 3","FIG. 3","FIG. 3","FIG. 21","FIG. 19","FIG. 19"],"b":["102","90","90","690","146","692","692","694","694","696","694","696","692","692"]},"Although the document has been described with respect to various embodiments of a table, the document is not meant to be limited to a table. For example, in various embodiments, the document may be a spreadsheet, a database table, a word processor document, or an extensible mark-up language (XML) document. For example, in yet another embodiment, the document is a video; in this embodiment, if the captured data is image data, each image is a frame in the video.","Various embodiments have been described with respect to a single source application. In some embodiments, at least a portion of one or more screens from a plurality of concurrently executing source applications may be captured to provide the set of captured screens.","The foregoing detailed description of various embodiments of the invention has been presented for the purposes of illustration and description. It is not intended to be exhaustive or to limit the invention to the precise form disclosed. Many modifications and variations are possible in light of the above teachings. It is intended that the scope of the invention be limited not by this detailed description, but rather by the claims appended thereto."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The teachings of the present invention can be readily understood by considering the following description in conjunction with the accompanying drawings, in which:",{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":["FIG. 3","FIG. 2"]},{"@attributes":{"id":"p-0016","num":"0015"},"figref":["FIG. 4","FIG. 3"]},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":["FIG. 6","FIG. 5"]},{"@attributes":{"id":"p-0019","num":"0018"},"figref":["FIG. 7","FIG. 2"]},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":["FIG. 9","FIG. 3"]},{"@attributes":{"id":"p-0022","num":"0021"},"figref":["FIG. 10","FIGS. 10A","FIG. 2"],"b":["10","10"]},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":["FIG. 12","FIG. 3"]},{"@attributes":{"id":"p-0025","num":"0024"},"figref":["FIG. 13","FIG. 3"]},{"@attributes":{"id":"p-0026","num":"0025"},"figref":["FIG. 14","FIG. 3"]},{"@attributes":{"id":"p-0027","num":"0026"},"figref":["FIG. 15","FIG. 2"]},{"@attributes":{"id":"p-0028","num":"0027"},"figref":["FIG. 16","FIG. 15"]},{"@attributes":{"id":"p-0029","num":"0028"},"figref":["FIG. 17","FIG. 2"]},{"@attributes":{"id":"p-0030","num":"0029"},"figref":["FIG. 18","FIGS. 18A","FIG. 2"],"b":["18","18","18"]},{"@attributes":{"id":"p-0031","num":"0030"},"figref":["FIG. 19","FIGS. 19A","FIG. 18"],"b":["19","19","19","19","19","19"]},{"@attributes":{"id":"p-0032","num":"0031"},"figref":["FIG. 20","FIG. 2"]},{"@attributes":{"id":"p-0033","num":"0032"},"figref":["FIG. 21","FIGS. 21A","FIG. 2"],"b":["21","21","21"]},{"@attributes":{"id":"p-0034","num":"0033"},"figref":["FIG. 22","FIG. 2","FIGS. 19 and 21","FIG. 3"]},"To facilitate understanding, identical reference numerals have been used, where possible, to designate identical elements that are common to some of the figures."]},"DETDESC":[{},{}]}
