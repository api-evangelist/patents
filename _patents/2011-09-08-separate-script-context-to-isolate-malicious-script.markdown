---
title: Separate script context to isolate malicious script
abstract: Various embodiments provide an ability to isolate execution of trusted content and/or script from execution of untrusted content and/or script. Separate contexts and/or execution environments can be used for the trusted content and untrusted content, respectively. A trusted context and/or execution environment associated with execution of trusted content can be configured to enable access to sensitive resources associated with a computing device. An untrusted context and/or execution environment associated with execution of untrusted content can be configured with limited and/or no access to the sensitive resources. Alternately or additionally, data generated within the untrusted context can be transferred to the trusted context in a benign manner.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08505070&OS=08505070&RS=08505070
owner: Microsoft Corporation
number: 08505070
owner_city: Redmond
owner_country: US
publication_date: 20110908
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DETAILED DESCRIPTION","CONCLUSION"],"p":["Computing devices today enable a user to run various types of applications. As such, applications can be created in many different ways. Traditionally, a developer uses a programming language to write source files that are compiled into an executable output. The executable output can then be loaded into memory of the computing device and run by the computing device's processor. More recently, modern applications use techniques applied to web page development to create web applications. For example, an application can be written using a scripting language. Applications composed of one or more scripting language files can be executed by loading the files into a hosting application and\/or environment (e.g. a web browser and\/or scripting engine). The hosting application then processes the files and, subsequently, executes the associated application.","In some cases, application script files can be downloaded from remote locations and stored on the computing device. When a user desires to run the application, the downloaded content can be selected and run in a manner as described above. However, sometimes the application can be further configured to acquire additional data and\/or script from a remote location at runtime. When properly used, the additional data and\/or script add flexibility to the executing application. Unfortunately, malicious parties often attempt to usurp the data and\/or script and replace it with data and\/or script designed to do harm. For example, some applications execute in an environment with extensive access to the user data and\/or sensitive information stored on the computing device. Without proper security measures in place, the malicious parties can gain desired access to these resources.","This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter, nor is it intended to be used to limit the scope of the claimed subject matter.","Various embodiments provide an ability to isolate execution of trusted content and\/or script from execution of untrusted content and\/or script. Separate contexts and\/or execution environments can be used for the trusted content and untrusted content, respectively. A trusted context and\/or execution environment associated with execution of trusted content can be configured to enable access to sensitive resources associated with a computing device. An untrusted context and\/or execution environment associated with execution of untrusted content can be configured with limited and\/or no access to the sensitive resources. Alternately or additionally, data generated within the untrusted context can be transferred to the trusted context in a benign manner.","Overview","Various embodiments provide an ability to isolate execution of trusted content and\/or script from execution of untrusted content and\/or script. Trusted content can execute in a first scripting context with access to sensitive resources of a computing device. In some embodiments, remote content acquired during a runtime of the trusted content can execute in a second scripting context that is isolated from the first scripting context. Alternately or additionally, the second scripting context can have reduced and\/or no access to the sensitive resources. Data generated in the second scripting context via the remote content can be manipulated to prevent undesired access to the sensitive resources when transferred to the first scripting context.","In the discussion that follows, a section entitled \u201cOperating Environment\u201d is provided and describes one environment in which one or more embodiments can be employed. Following this, a section entitled \u201cSeparate Scripting Contexts\u201d describes how multiple scripting contexts can be used to enforce secure access to sensitive resources. Next, a section entitled \u201cIsolating Execution of Remote Content\u201d describes how access to remote content can be identified and isolated. Last, a section entitled \u201cExample System\u201d describes an example system that can be utilized to implement one or more embodiments.","Having provided an overview of various embodiments that are to be described below, consider now an example operating environment in which one or more embodiments can be implemented.","Operating Environment",{"@attributes":{"id":"p-0017","num":"0016"},"figref":["FIG. 1","FIG. 5"],"b":["100","100","102","104","106"]},"In addition, computing device  includes one or more web application(s) . Web application(s)  represent hostable-application(s), such as an application that can be hosted by a browser application and\/or a script engine. In some embodiments, web application(s)  can be written in script and\/or markup languages, as further described below. Content associated with web application(s)  can be downloaded to computing devices  through network  from one or more remote computing device(s) .","Network  represents one or more data communication networks and\/or links. For example, the network  may include a wide area network (WAN), a local area network (LAN), a wireless network, an intranet, the Internet, and so on.","Computing device(s)  represents one or more device from which a web application can be downloaded, such as over network . Computing device(s)  can be any suitable type of device, such as a computing device configured as a server, a content distributor, and the like.","Web application(s)  includes packaged content . Package content  represents content associated with a web application that is downloaded prior to the web application executing. In some embodiments, package content to  can represent the script and\/or markup language that encompass and\/or compose web application(s) .","Web application(s)  also includes remote content . Remote content  represents content acquired and\/or requested by a web application(s)  at runtime. Alternately or additionally, remote content  represents content not downloaded initially as part of the web application. In some embodiments, computing device  downloads remote content  over network . Remote content  can be downloaded from a computing device that was used to acquire packaged content , a separate computing device than that which was used to acquire packaged content , and\/or a third party computing device. Here, remote content  is illustrated as originating on computing device(s)  and transmitted via network  to computing device  during runtime of web application(s) . Remote content  can include script files, scripting objects, markup language files, data, and the like. In some embodiments, remote content  can be mixed together with packaged content  dynamically at runtime.","Computing device  also includes global scripting context  and limited scripting context . While illustrated in  as being included in web application , it is to be appreciated and understood that global scripting context  and\/or limited scripting context  can be implemented as modules separate and\/or independent of web application  without departing from the spirit of the claimed subject matter. For example, global scripting context  and\/or limited scripting context  can represent separate software modules configured to run packaged content  and\/or remote content  in order to actualize web application .","Global scripting context  represents a scripting context, scripting engine, and\/or script execution environment that has access to sensitive resources associated with computing device . This can include access to particular operating system functionality and\/or software interfaces, user public and\/or private data, user picture libraries, user files, passwords, history information, system resources, etc. In some embodiments, scripts running in global scripting context  have access to the sensitive resources as well.","Limited scripting context  represents a scripting context, scripting engine, and\/or script execution environment that does not have access to sensitive resources associated with computing device . Some embodiments enable packaged content  running in global scripting context  to selectively execute remote content, such as remote content , in limited scripting context , as further described below.","Computing device  can be embodied as any suitable computing device such as, by way of example and not limitation, a desktop computer, a portable computer, a notebook computer, a handheld computer such as a personal digital assistant (PDA), cell phone, and the like.","Having described an example operating environment, consider now a discussion of separate scripting contexts in accordance with one or more embodiments.","Separate Scripting Contexts","As described above, an application, such as a web application, can be created through executable script and\/or markup language files and a hosting environment. Typically, installing a web application includes downloading these files to a computing device that contains the hosting application (e.g. a web browser and\/or script engine). To execute the web application, the downloaded files are loaded into the hosting application and executed local to the computing device. In most scenarios, the web application script files are acquired from a presumably trusted source, such as a content distributor or known server. As such, the script files are usually given access to sensitive resources associated with the computing device. In some cases, the script and\/or markup language files attempt access to remote content at runtime. Oftentimes, the remote content can include passive and\/or inactive content, such as the data value or image. Other times, the remote content can include active content, such as additional script configured to generate requested data. Unfortunately, malicious parties desiring access to the sensitive resources sometimes usurp the active content and\/or replace it with undesirable script.","Consider an example where remote content consists of additional script. At runtime, the web application acquires and runs the additional script, typically in the same execution environment as the web application. If the additional script executes in the same execution environment as the web application, the additional script has the same access to the same sensitive resources. Thus, when malicious parties replace and\/or modify the additional script, the modified script also has access to the same sensitive resources. For example, remote content can consist of JavaScript Object with Padding (JSONP) script. JSONP can be executed as JavaScript configured to generate data. Malicious parties can intercept and\/or influence the JSONP script and\/or data that gets downloaded and\/or generated without the web application's knowledge. When the web application loads and\/or runs the influenced JSONP script, malicious parties can acquire data that would otherwise be secure. For example, JSONP script can sometimes use a standardized <script> tag that is also used by Java script associated with a web site. Malicious parties can attempt to replace the JSONP script with malicious code and, subsequently, run APIs, access cookies, etc. that would otherwise be protected. In this scenario, the web site becomes under control of the malicious parties. Consequently, without knowledge of whether the remote script can be trusted or not, a computing device's sensitive resources can potentially be exposed to undesirable parties.","Various embodiments provide an ability to isolate execution of trusted content and\/or script from execution of untrusted content and\/or script. A first scripting context can be used for execution of trusted content, where the first scripting context has access to sensitive resources of a computing device. A second scripting context can be used for execution untrusted context, where the second scripting context has limited and\/or no access to sensitive resources of the computing device.","Consider , which illustrates a more detailed example implementation in accordance with one or more embodiments, such as that described in . However, some elements of  have not been included in  for the sake of brevity.","As discussed above, web application  represents a hostable-application. A web application can be written in any suitable script and\/or markup language, such as HyperText Markup Language (HTML), eXtensible Markup Language (XML), JavaScript, PostScript, and the like. Additionally, web application  can reside on any suitable type of computing device. In some cases, the script and\/or markup language reside in one or more files that reside local to the computing device. For instance, the file(s) can be acquired and\/or downloaded from a second computing device. These files embody web application , and can be considered trusted and\/or packaged content, such as packaged content . In other cases, the script and\/or markup language file(s) can be part of a remote web site being accessed by a web browser.","As part of the execution of web application , packaged content  can be loaded into global scripting context . Consequently, packaged content  has access to sensitive and\/or system resources associated with the computing device. During execution, packaged content  can employ variables and\/or functions to achieve desired results. In this example, packaged content  accesses and\/or generates variables  and , as well as calls and\/or executes functions  and .","In some cases, packaged content can reference remote content and\/or content not initially downloaded with web application . In this example, function , running in global scripting context , references and\/or attempts access to remote content associated with variable . Here, variable  represents data generated during execution of remote content . To access variable , remote content  is downloaded and executed. However, instead of running remote content  within global scripting context , a separate context can be started. Thus, in some embodiments, when a reference to remote content has been identified, the remote content and\/or execution of the remote content can be isolated from trusted content, as further described below.","Upon identifying a reference to remote content, web application  starts a new scripting context, such as limited scripting context . Unlike global scripting context , limited scripting context  has little and\/or no access to the sensitive and\/or system resources. In some embodiments, limited scripting context  has limited and\/or no communication mechanisms with other scripting contexts. For instance, in some embodiments, limited scripting context  can only communicate with global scripting context  through communication mechanisms provided by web application  and\/or the hosting application. Since limited scripting context  is a separate scripting context from a global scripting context , scripts running within limited scripting context  are inherently isolated. Functions and\/or variables that exist in limited scripting context  are independent of functions and\/or variables that exist in global scripting context . When remote content  executes within limited scripting context , variables and\/or functions utilized by remote content , such as variable , have no visibility into global scripting context , and are subsequently isolated.","In addition to isolating execution of scripts in separate contexts and\/or execution environments, interactions between the separate contexts can be isolated. For example, the execution environments can be configured to disallow direct the interactions between one another. Alternately or additionally, the execution environments can contain reduced communication capabilities, such as exposing only one or two Application Programming Interfaces (APIs) associated with communication. In some embodiments, a proxy, such as proxy , can be used to broker interactions between multiple execution environments. Here, proxy  brokers communication between global scripting context  and limited scripting context . Instead of directly accessing limited scripting context , global scripting context  sends and\/or receives data through proxy . In some cases, proxy  can be configured to perform various types of data validation and\/or security measures. Alternately or additionally, one or more objects created within the new scripting context can be exposed as read-only objects to other scripting contexts, thus enabling a more privileged scripting context to read data out of a less privileged scripting context.","When the packaged content  references remote content , typically some form of output is desired, such as data generated through execution of remote content. To ensure that data can be trusted and\/or safely transferred into global scripting context , objects and\/or data variables created by remote content can be transferred in a benign format (e.g. a format without active content\/script). For instance, data generated via remote content  in limited scripting context  can be converted to a string prior to being sent to global scripting context . A string conversion can clip and\/or remove any functions and\/or code that could be attached to the generated data. This can be achieved in any suitable manner. For example, a string conversion can execute within limited scripting context  prior to being transferred to proxy  and\/or global scripting context . In other embodiments, unconverted data can be sent to proxy . Proxy  can then convert the data to a string, convert the string back to data, and\/or be configured to perform the data validation or any other suitable type of security enforcement.","Continuing with the string conversion example, when global scripting context  receives a string format for data, global scripting context  can convert the string back to an expected object type and\/or appropriate data format safely and without unwanted functions. In other embodiments, properties associated with an object can be verified prior to receipt in the global scripting context. For example, raw data (e.g. variable ) can be transferred to proxy  and validated. If verification of properties fails, then the data can be refused by the global scripting context and\/or not forwarded from proxy .","By isolating remote content acquired during runtime, a web application can safely utilize web services and ensure that data returned to the web application does not include malicious content.","Having considered the usage of separate scripting contexts, consider now a discussion of identification of isolation of remote content that is in accordance with one or more embodiments.","Isolating Execution of Remote Content","When scripting and\/or markup files are considered to be trustworthy, a hosting environment associated with the files can be configured to allow access to otherwise protected resources. To further protect these resources, the scripting and\/or markup files can be monitored for access to questionable content (e.g. remote and\/or unknown content). When access to questionable and\/or remote content is identified, execution of the questionable\/remote content can be isolated to prevent malicious parties from compromising a computing device's security.","Consider , which illustrates example code, shown generally at , that is in accordance with one or more embodiments While this particular example illustrates HTML code, it is to be appreciated and understood that any suitable scripting language and\/or markup language can be used without departing from the spirit of the claimed subject matter.","Code  represents HTML code downloaded as part of a web application. For the sake of brevity, the web application code is not included in its entirety. While this particular example describes code  in context associated with a web application, it is to be appreciated and understood that code  can be associated with other types of applications and\/or implementations without departing from the spirit of the claimed subject matter. In some embodiments, code  can be determined trustworthy code, and subsequently given access to sensitive resources associated with a computing device. Code can be determined trustworthy in any suitable fashion. For instance, the code can be determined trustworthy by determining where it was acquired from (e.g. domain and\/or Internet Protocol (IP) address information), determining and\/or trusting the code was not tampered with during transmission (e.g. using a secure connection with a cryptographic certificate, a Hypertext Transfer Protocol Secure (HTTPS), Transport Layer Security (TLS), Secure Sockets Layer (SSL)), etc.","Code  includes script tag . Script tags can be configured to contain script statements, such as, but not limited to, a JavaScript statement. Alternately or additionally, a script tag can point to an external script file. Script tag  includes a reference  to remote content that has not been downloaded as part of code :\n\n","When non-local\/remote access has been identified, a new scripting context and\/or execution environment can be initiated. In some cases, the new scripting context has limited and\/or no access to sensitive resources associated with a computing device. Any suitable type of scripting context can be started, such as a scripting context can be configured to run JavaScript, VisualBasic, etc. In some cases, the type of scripting context to start can be determined from information contained within the script tag. Responsive to starting the new scripting context, content specified by the non-local address can be downloaded and executed within the new scripting context, thus isolating any potentially malicious content associated with the remote content.","In addition to specifying remote content, script tag  includes a callback reference . Callback reference  specifies a callback function to be called when execution of the non-local\/remote content has completed. In general, a callback function can be configured to be callable by a lower-level and\/or different software layer. For example, in some embodiments, callback reference  can be configured to be callable from a first scripting context (e.g. a limited scripting context), but executed in a second scripting context (e.g. a global scripting context). Thus, as a script completes execution in the first scripting context, it can call the callback function and\/or trigger execution of the callback function in the second scripting context. In this example, a callback function is setup as \u201cjsonFlickrApi\u201d by storing an associated name in \u201cmsExposeCallbackFunction\u201d.","Callback code  includes coding statements that implement the callback function specified by callback reference . In some embodiments, callback code  can be downloaded as a part of code  and run in the same scripting context as the rest of code . In this example, callback function \u201cjsonFlickrApi\u201d has an input parameter of \u201cjsonData\u201d. When \u201cjsonFlickrApi\u201d executes, any data passed into \u201cjsonFlickrApi\u201d exists and\/or runs in the same context as \u201cjsonFlickrApi\u201d. Thus, whatever resources \u201cjsonFlickrApi\u201d has access to, \u201cjsonData\u201d has access to as well. In some cases, \u201cjsonData\u201d can be data, script, and\/or other forms of information generated by remote content. When \u201cjsonData\u201d has been compromised by malicious parties, the malicious parties can access information that is otherwise protected.","In some embodiments, a \u201cstub\u201d method with a same name as the specified callback function can be inserted into the new scripting context for execution. For example, when a callback function has been identified in the script tag with remote content access, a \u201cstub\u201d method of the same name can be generated and\/or inserted into the new scripting context and configured to handle data generated by the remote content. Alternately or additionally, the \u201cstub\u201d can be configured as a proxy between the new scripting context and the global scripting context, such as that illustrated in . A \u201cstub\u201d method can be used as a substitute method within the new scripting context and configured to provide additional security associated with data generated within the new scripting context. For instance, the \u201cstub\u201d can be configured to validate and\/or convert data, such as converting data to a string. Data generated by remote content in the new scripting context can be passed in as a parameter to the \u201cstub\u201d and subsequently converted. Alternately or additionally, the \u201cstub\u201d can be configured to validate each attribute associated with the data, return a structured clone object associated with the data, convert data to an image, and the like. When remote content running in the new scripting context calls a specified callback function, the \u201cstub\u201d method of the same name is called instead. In this manner, data can be generated by remote content in an isolated environment and converted to a passive and\/or benign format. Once data has either been verified and\/or converted, it can be safely transferred to the global scripting context.","Upon receipt of data, the global scripting context can de-serialize and\/or convert the data back into a corresponding object associated with the global scripting context. The global scripting context can be configured to call an original version of the callback function named in callback reference , and defined in callback code , with a safe version of the received data. Accordingly, a calling web application can obtain data dynamically from remote content without risk of potential side effects from malicious parties.",{"@attributes":{"id":"p-0052","num":"0052"},"figref":["FIG. 4","FIG. 1"],"b":"102"},"Step  starts a first scripting context. For example, the first scripting context can be a scripting engine configured with access to sensitive resources associated with a computing device, examples of which are provided above. Any suitable type of scripting context can be started, such as an HTML script engine, XML script engine, JavaScript script engine, and the like. The scripting context can be a stand-alone application, a separate thread of a multi-threaded application, a software module included as part of an application, and the like.","Responsive to starting the first scripting context, step  loads at least one script into the first scripting context. The script can be any suitable type of script, such as script and\/or markup files that implement a web application. Alternately or additionally, the script can include syntax associated with any suitable scripting language and\/or markup language. In some embodiments, the script resides local to a computing device on which the first scripting context runs.","Step  identifies a reference to remote content within the script(s). For example, a script tag can include an attribute associated with a Uniform Resource Locator (URL) that points to content remote from the computing device. In some embodiments, the script tag can include a description of a format the remote content is in. For instance, the format description can indicate that the remote content contains JavaScript, JavaScript Object Notation (JSON), JSONP, or any other suitable type of script and\/or markup language.","Responsive to identifying a reference to remote content, step  starts a second scripting context. In some embodiments, the second scripting context can be associated with the format description associated with the remote content. If the format description indicates remote content contains JSON, a scripting engine associated with JSON can be started. As described above, in some embodiments, the second scripting context can be configured with limited, reduced, and\/or no access to sensitive resources associated with the computing device.","Step  loads the remote content into the second scripting context. Loading the remote content into the second scripting context can include loading and executing the remote content. In some cases, the remote content can be configured to generate at least some data.","Responsive to loading the remote content, step  transfers benign data from the second scripting context to the first scripting context. Benign data can be constructed in any suitable format, such as a string, a validated object, and the like. Alternately or additionally, benign data represents any type of data that has been converted, validated, verified, and\/or modified into a trusted format. Data can be transferred from the second scripting context to the first scripting context in any suitable way. For example, the second scripting context can transfer data via a callback function, a proxy, a dedicated API, and the like. In some embodiments, the second scripting context does not have direct access into the first scripting context in order to further isolate the scripting context.","Access to remote content in a script can be identified to enable isolation of the remote content when executed on a computing device. Having considered a discussion on identification and isolation of remote content, consider now an example system in accordance with one or more embodiments.","Example System",{"@attributes":{"id":"p-0061","num":"0061"},"figref":["FIG. 5","FIG. 1"],"b":["500","500","102"]},"Computing device  includes one or more processor(s) or processing unit(s) , one or more memory and\/or storage component(s) , one or more input\/output (I\/O) devices , and a bus  that allows the various components and devices to communicate with one another. Bus  represents one or more of any of several types of bus structures, including a memory bus or memory controller, a peripheral bus, an accelerated graphics port, and a processor or local bus using any of a variety of bus architectures. Bus  can include wired and\/or wireless buses.","Memory\/storage component  represents one or more computer hardware storage media. Component  can include volatile media (such as random access memory (RAM)) and\/or nonvolatile media (such as read only memory (ROM), Flash memory, optical disks, magnetic disks, and so forth). Component  can include fixed media (e.g., RAM, ROM, a fixed hard drive, etc.) as well as removable media (e.g., a Flash memory drive, a removable hard drive, an optical disk, and so forth).","One or more input\/output device(s)  allow a user to enter commands and information to computing device , and also allow information to be presented to the user and\/or other components or devices. Examples of input devices include a keyboard, a cursor control device (e.g., a mouse), a microphone, a scanner, and so forth. Examples of output devices include a display device (e.g., a monitor or projector), speakers, a printer, a network card, and so forth.","Various techniques may be described herein in the general context of software or program modules. Generally, software includes routines, programs, objects, components, data structures, and so forth that perform particular tasks or implement particular abstract data types. An implementation of these modules and techniques may be stored on or transmitted across some form of computer readable media. Computer readable media can be any available medium or media that can be accessed by a computing device. By way of example, and not limitation, computer readable media may comprise \u201ccomputer-readable storage media\u201d.","\u201cComputer-readable storage media\u201d include volatile and non-volatile, removable and non-removable hardware media implemented in any method or technology for storage of information such as computer readable instructions, data structures, program modules, or other data. Computer-readable hardware storage media include, but are not limited to, RAM, ROM, EEPROM, flash memory or other memory technology, CD-ROM, digital versatile disks (DVD) or other optical storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other medium which can be used to store the desired information and which can be accessed by a computer.","Various embodiments provide an ability to isolate execution of trusted content and\/or script from execution of untrusted content and\/or script. Separate contexts and\/or execution environments can be used for the trusted content and untrusted content, respectively. A trusted context and\/or execution environment associated with execution of trusted content can be configured to enable access to sensitive resources associated with a computing device. An untrusted context and\/or execution environment associated with execution of untrusted content can be configured with limited and\/or no access to the sensitive resources. Alternately or additionally, data generated within the untrusted context can be transferred to the trusted context in a benign manner.","Although the subject matter has been described in language specific to structural features and\/or methodological acts, it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather, the specific features and acts described above are disclosed as example forms of implementing the claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The same numbers are used throughout the drawings to reference like features.",{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 5"}]},"DETDESC":[{},{}]}
