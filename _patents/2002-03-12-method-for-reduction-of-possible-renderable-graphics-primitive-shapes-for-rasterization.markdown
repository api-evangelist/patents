---
title: Method for reduction of possible renderable graphics primitive shapes for rasterization
abstract: A graphics system and method for rendering a plurality of triangles. Information regarding the triangle may first be received. The method may then determine the longest edge or major edge of the triangle and also determine the direction or axis of the longest edge of the triangle. The method may then perform edge walking on the major edge (e.g., along the axis of the major edge) of the triangle, followed by span walking. The edge walking is preferably always performed on the major or longest edge of the triangle, prior to the span walking, and regardless of the orientation of the major edge of the triangle. This operates to load balance the edge walker and the span walker for the plurality of triangles.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06975317&OS=06975317&RS=06975317
owner: Sun Microsystems, Inc.
number: 06975317
owner_city: Santa Clara
owner_country: US
publication_date: 20020312
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE EMBODIMENTS"],"p":["1. Field of the Invention","This invention relates generally to the field of computer graphics and, more particularly, to rendering polygons such as triangles.","2. Description of the Related Art","A computer system typically relies upon its graphics system for producing visual output on the computer screen or display device. Early graphics systems were only responsible for taking what the processor produced as output and displaying it on the screen. In essence, they acted as simple translators or interfaces. Modem graphics systems, however, incorporate graphics processors with a great deal of processing power. They now act more like coprocessors rather than simple translators. This change is due to the recent increase in both the complexity and amount of data being sent to the display device. For example, modern computer displays have many more pixels, greater color depth, and are able to display more complex images with higher refresh rates than earlier models. Similarly, the images displayed are now more complex and may involve advanced techniques such as anti-aliasing and texture mapping.","As a result, without considerable processing power in the graphics system, the CPU would spend a great deal of time performing graphics calculations. This could rob the computer system of the processing power needed for performing other tasks associated with program execution and thereby dramatically reduce overall system performance. With a powerful graphics system, however, when the CPU is instructed to draw a box on the screen, the CPU is freed from having to compute the position and color of each pixel. Instead, the CPU may send a request to the video card stating \u201cdraw a box at these coordinates.\u201d The graphics system then draws the box, freeing the processor to perform other tasks.","Generally, a graphics system in a computer (also referred to as a graphics system) is a type of video adapter that contains its own processor to boost performance levels. These processors are specialized for computing graphical transformations, so they tend to achieve better results than the general-purpose CPU used by the computer system. In addition, they free up the computer's CPU to execute other commands while the graphics system is handling graphics computations. The popularity of graphical applications, and especially multimedia applications, has made high performance graphics systems a common feature of computer systems. Most computer manufacturers now bundle a high performance graphics system with their systems.","Since graphics systems typically perform only a limited set of functions, they may be customized and therefore far more efficient at graphics operations than the computer's general-purpose central processor. While early graphics systems were limited to performing two-dimensional (2D) graphics, their functionality has increased to support three-dimensional (3D) wire-frame graphics, 3D solids, and now includes support for three-dimensional (3D) graphics with textures and special effects such as advanced shading, fogging, alpha-blending, and specular highlighting.","A modern graphics system may generally operate as follows. First, graphics data is initially read from a computer system's main memory into the graphics system. The graphics data may include geometric primitives such as polygons (e.g., triangles), NURBS (Non-Uniform Rational B-Splines), sub-division surfaces, voxels (volume elements) and other types of data. The various types of data are typically converted into triangles (e.g., three vertices having at least position and color information). Then, transform and lighting calculation units receive and process the triangles. Transform calculations typically include changing a triangle's coordinate axis, while lighting calculations typically determine what effect, if any, lighting has on the color of triangle's vertices. The transformed and lit triangles may then be conveyed to a clip test\/back face culling unit that determines which triangles are outside the current parameters for visibility (e.g., triangles that are off screen). These triangles are typically discarded to prevent additional system resources from being spent on non-visible triangles.","Next, the triangles that pass the clip test and back-face culling may be translated into screen space. The screen space triangles may then be forwarded to the set-up and draw processor for rasterization. Rasterization typically refers to the process of generating actual pixels (or samples) by interpolation from the vertices. The rendering process may include interpolating slopes of edges of the polygon or triangle, and then calculating pixels or samples on these edges based on these interpolated slopes. Pixels or samples may also be calculated in the interior of the polygon or triangle.","As noted above, in some cases samples are generated by the rasterization process instead of pixels. A pixel typically has a one-to-one correlation with the hardware pixels present in a display device, while samples are typically more numerous than the hardware pixel elements and need not have any direct correlation to the display device. Where pixels are generated, the pixels may be stored into a frame buffer, or possibly provided directly to refresh the display. Where samples are generated, the samples may be stored into a sample buffer or frame buffer. The samples may later be accessed and filtered to generate pixels, which may then be stored into a frame buffer, or the samples may possibly filtered to form pixels that are provided directly to refresh the display without any intervening frame buffer storage of the pixels.","The pixels are converted into an analog video signal by digital-to-analog converters. If samples are used, the samples may be read out of sample buffer or frame buffer and filtered to generate pixels, which may be stored and later conveyed to digital to analog converters. The video signal from converters is conveyed to a display device such as a computer monitor, LCD display, or projector.","As noted above, the rendering process may include interpolating slopes of edges of the polygon or triangle, and then calculating pixels or samples based on these interpolated slopes. One problem that arises is that a graphics system typically","When rasterizing a triangle, there are two major accumulations (or \u201cwalking\u201d) required. The first accumulation (referred to as \u201cedge walking\u201d) comprises the \u201cslicing\u201d of the triangle into spans or slices while traversing an edge. The input to the edge walker or the first accumulator is the initial starting and ending points of the triangle and the slopes of each edge. While stepping along the edge, the edge walker generates the \u201cslices\u201d or \u201cspans\u201d which may be the start and end points for each slice (e.g., a scan line). These slices are the input to the second major accumulator, referred to as the \u201cspan walker\u201d. The second accumulator or span walker \u201cwalks\u201d the slice, generating the pixels that will eventually be stored in the frame buffer.","The size and shape of the triangle being rendered generally affects the work required to be performed by edge and span walkers. For example, if the triangle is mostly vertical, and if the first accumulator (edge walker) always accumulates left to right, then the second accumulator (span walker) will have a greater workload than the edge walker. This leaves the edge walker under utilized. If the triangle is mostly horizontal, then the edge walker will have an increased workload, but this increased workload may still be comparable to the span walker. This is because, in general, the span walking process is more time intensive than the edge walking process. Thus, with a random mixture of triangle shapes (including both horizontal and vertical triangles), the edge walker will typically be less utilized than the span walker.","Therefore, an improved system and method is desired for rendering polygons, such as triangles, with increased performance. A system and method is also desired for increasing the effective utilization of the span and edge walkers and removing bottlenecks in graphics rendering operations.","One embodiment of the present invention comprises a graphics system and method for rendering a plurality of triangles. The plurality of triangles may correspond to an image rendered on a display, and the method may be performed for each of the plurality of triangles, or for a substantial majority of the triangles.","The method may comprise receiving information regarding the triangle, such as vertex information describing position, color and other parameters of the vertices. The position information may comprise x, y coordinates of the vertices of the triangle. The method may then determine the longest edge of the triangle, e.g., the major edge of the triangle. The method may also determine the direction or axis of the longest edge of the triangle. The method may then operate on the major edge (e.g., along the axis of the major edge) of the triangle to generate start and end points on the major edge and at least one complementary edge of the triangle. The start and end points may define respective spans (or \u201cslices\u201d) encompassed by the triangle. As one example, an edge walking unit may perform an \u201cedge walking\u201d function to traverse the major edge and generate the start and end points. The method may then identify pixel locations in the spans of the triangle based on the start and end points. As one example, a span walking unit may perform a \u201cspan walking\u201d operation to generate colors at pixel locations in the spans determined by the edge walker.","The edge walking is preferably always performed on the major or longest edge of the triangle, prior to the span walking, and regardless of the orientation of the major edge of the triangle. This operates to load balance the edge walker and the span walker for the plurality of triangles. In other words, since the edge walker is typically less burdened than the span walker for triangles with a random sampling of orientations, one embodiment of the invention operates to effectively change the orientation of certain of the triangles so that the edge walker always operates on the major or longest edge of each triangle. This increases the workload of the edge walker, and thus may operate to provide more of a balance between the workload of the edge walker and span walker.","In one embodiment of the method, when the method determines a direction of the major edge of the triangle the method stores information regarding this direction in memory. The method then maps the x,y coordinates to a major, minor coordinate system having a \u201cmajor\u201d axis and a \u201cminor\u201d axis. The mapping may be performed based on the direction of the longest edge of the triangle, wherein the major axis of the major, minor coordinate system corresponds to the x,y axis of the longest or major edge of the triangle. For triangles that are mostly horizontal or x-major, the major, and where the edge walker operates in a left to right direction, the minor coordinate system is effectively the same as the x,y coordinate system. For triangles that are mostly vertical or y-major, this mapping effectively changes the orientation of the triangle to be mostly horizontal for the purposes of the edge walker.","The triangle may then be rasterized according to the major, minor coordinate system, wherein the rasterization begins along the major axis of the major, minor coordinate system. Thus the rasterization begins in the direction of the longest edge of the triangle regardless of the orientation of the major edge of the triangle. During the rasterization process, the edge walking process may be performed first along the major axis of the major, minor coordinate system. This effectively causes the edge walking process to always operate on the major edge of the triangle to generate start and end points, e.g., to preferably always perform the edge walking process along the major edge of the triangle. The span walking process may then be performed on spans which are along the minor axis of the major, minor coordinate system. After the edge walking and span walking operations, the coordinates of the triangle may then be mapped back to the x,y coordinates using the stored information regarding the direction of the longest edge of the triangle.","A graphics system for rendering a plurality of triangles may comprise an input for receiving information regarding the triangle; an edge walker that performs edge walking on a major edge of the triangle to generate start and end points on the major edge and at least one complementary edge of the triangle, wherein the start and end points define respective spans encompassed by the triangle; and a span walker that performs span walking on the triangle to identify pixel locations in the spans of the triangle based on the start and end points. As described above, the edge walker operates on the major edge of the triangle regardless of the orientation of the major edge of the triangle.","While the invention is susceptible to various modifications and alternative forms, specific embodiments thereof are shown by way of example in the drawings and will herein be described in detail. It should be understood, however, that the drawings and detailed description thereto are not intended to limit the invention to the particular form disclosed, but on the contrary, the intention is to cover all modifications, equivalents, and alternatives falling within the spirit and scope of the present invention as defined by the appended claims. Note, the headings are for organizational purposes only and are not meant to be used to limit or interpret the description or claims. Furthermore, note that the word \u201cmay\u201d is used throughout this application in a permissive sense (i.e., having the potential to, being able to), not a mandatory sense (i.e., must).\u201d The term \u201cinclude\u201d, and derivations thereof, mean \u201cincluding, but not limited to\u201d. The term \u201cconnected\u201d means \u201cdirectly or indirectly connected\u201d, and the term \u201ccoupled\u201d means \u201cdirectly or indirectly connected\u201d.","Incorporation by Reference","U.S. patent application Ser. No. 09\/939,296 titled \u201cInterpolating Sample Values from Known Triangle Vertex Values\u201d, and filed on Aug. 24, 2001, is hereby incorporated by reference as though fully and completely set forth herein.","Computer System\u2014",{"@attributes":{"id":"p-0041","num":"0040"},"figref":"FIG. 1","b":"80"},"As shown, the computer system  includes a system unit  and a video monitor or display device  coupled to the system unit . The display device  may be any of various types of display monitors or devices (e.g., a CRT, LCD, or gas-plasma display). Various input devices may be connected to the computer system, including a keyboard  and\/or a mouse , or other input device (e.g., a trackball, digitizer, tablet, six-degree of freedom input device, head tracker, eye tracker, data glove, or body sensors). Application software may be executed by the computer system  to display graphical objects on display device .","Computer System Block Diagram\u2014",{"@attributes":{"id":"p-0043","num":"0042"},"figref":"FIG. 2","b":["1","80","102","104","104","106","104"]},"Host processor  may include one or more processors of varying types, e.g., microprocessors, multi-processors and CPUs. The system memory  may include any combination of different types of memory subsystems such as random access memories (e.g., static random access memories or \u201cSRAMs,\u201d synchronous dynamic random access memories or \u201cSDRAMs,\u201d and Rambus dynamic random access memories or \u201cRDRAMs,\u201d among others), read-only memories, and mass storage devices. The system bus or host bus  may include one or more communication or host computer buses (for communication between host processors, CPUs, and memory subsystems) as well as specialized subsystem buses.","In , a graphics system  is coupled to the high-speed memory bus . The graphics system  may be coupled to the bus  by, for example, a crossbar switch or other bus connectivity logic. It is assumed that various other peripheral devices, or other buses, may be connected to the high-speed memory bus . It is noted that the graphics system  may be coupled to one or more of the buses in computer system  and\/or may be coupled to various types of buses. In addition, the graphics system  may be coupled to a communication port and thereby directly receive graphics data from an external source, e.g., the Internet or a network. As shown in the figure, one or more display devices  may be connected to the graphics system .","Host CPU  may transfer information to and from the graphics system  according to a programmed input\/output (I\/O) protocol over host bus . Alternately, graphics system  may access system memory  according to a direct memory access (DMA) protocol or through intelligent bus mastering.","A graphics application program conforming to an application programming interface (API) such as OpenGL\u00ae or Java 3D\u2122 may execute on host CPU  and generate commands and graphics data that define geometric primitives such as polygons for output on display device . Host processor  may transfer the graphics data to system memory . Thereafter, the host processor  may operate to transfer the graphics data to the graphics system  over the host bus . In another embodiment, the graphics system  may read in geometry data arrays over the host bus  using DMA access cycles. In yet another embodiment, the graphics system  may be coupled to the system memory  through a direct port, such as the Advanced Graphics Port (AGP) promulgated by Intel Corporation.","The graphics system may receive graphics data from any of various sources, including host CPU  and\/or system memory , other memory, or from an external source such as a network (e.g. the Internet), or from a broadcast medium, e.g., television, or from other sources.","Note while graphics system  is depicted as part of computer system , graphics system  may also be configured as a stand-alone device (e.g., with its own built-in display). Graphics system  may also be configured as a single chip device or as part of a system-on-a-chip or a multi-chip module. Additionally, in some embodiments, certain of the processing operations performed by elements of the illustrated graphics system  may be implemented in software.","Graphics System\u2014",{"@attributes":{"id":"p-0050","num":"0049"},"figref":"FIG. 3","b":["112","112","112","14","18","20","22","24","112","26","28","14","18"]},"In some embodiments, one or more of these components may be removed. For example, the texture buffer may not be included in an embodiment that does not provide texture mapping. In other embodiments, all or part of the functionality incorporated in either or both of the media processor or the hardware accelerator may be implemented in software.","In one set of embodiments, media processor  is one integrated circuit and hardware accelerator is another integrated circuit. In other embodiments, media processor  and hardware accelerator  may be incorporated within the same integrated circuit. In some embodiments, portions of media processor  and\/or hardware accelerator  may be included in separate integrated circuits.","As shown, graphics system  may include an interface to a host bus such as host bus  in  to enable graphics system  to communicate with a host system such as computer system . More particularly, host bus  may allow a host processor to send commands to the graphics system . In one embodiment, host bus  may be a bi-directional bus.","Media Processor\u2014",{"@attributes":{"id":"p-0054","num":"0053"},"figref":"FIG. 4","b":["14","14","112","80","80","112","14"]},"Transformation refers to the spatial manipulation of objects (or portions of objects) and includes translation, scaling (e.g. stretching or shrinking), rotation, reflection, or combinations thereof. More generally, transformation may include linear mappinga (e.g. matrix multiplications), nonlinear mappings, and combinations thereof.","Lighting refers to calculating the illumination of the objects within the displayed image to determine what color values and\/or brightness values each individual object will have. Depending upon the shading algorithm being used (e.g., constant, Gourand, or Phong), lighting may be evaluated at a number of different spatial locations.","As illustrated, media processor  may be configured to receive graphics data via host interface . A graphics queue  may be included in media processor  to buffer a stream of data received via the accelerated port of host interface . The received graphics data may include one or more graphics primitives. As used herein, the term graphics primitive may include polygons, parametric surfaces, splines, NURBS (non-uniform rational B-splines), sub-divisions surfaces, fractals, volume primitives, voxels (i.e., three-dimensional pixels), and particle systems. In one embodiment, media processor  may also include a geometry data preprocessor  and one or more microprocessor units (MPUs) . MPUs  may be configured to perform vertex transformation, lighting calculations and other programmable functions, and to send the results to hardware accelerator . MPUs  may also have read\/write access to texels (i.e. the smallest addressable unit of a texture map) and pixels in the hardware accelerator . Geometry data preprocessor  may be configured to decompress geometry, to convert and format vertex data, to dispatch vertices and instructions to the MPUs , and to send vertex and attribute tags or register data to hardware accelerator .","As shown, media processor  may have other possible interfaces, including an interface to one or more memories. For example, as shown, media processor  may include direct Rambus interface  to a direct Rambus DRAM (DRDRAM) . A memory such as DRDRAM  may be used for program and\/or data storage for MPUs . DRDRAM  may also be used to store display lists and\/or vertex texture maps.","Media processor  may also include interfaces to other functional components of graphics system . For example, media processor  may have an interface to another specialized processor such as hardware accelerator . In the illustrated embodiment, controller  includes an accelerated port path that allows media processor  to control hardware accelerator . Media processor  may also include a direct interface such as bus interface unit (BIU) . Bus interface unit  provides a path to memory  and a path to hardware accelerator  and video output processor  via controller .","Hardware Accelerator\u2014","One or more hardware accelerators  may be configured to receive graphics instructions and data from media processor  and to perform a number of functions on the received data according to the received instructions. For example, hardware accelerator  may be configured to perform rasterization, 2D and\/or 3D texturing, pixel transfers, imaging, fragment processing, clipping, depth cueing, transparency processing, set-up, and\/or screen space rendering of various graphics primitives occurring within the graphics data.","Clipping refers to the elimination of graphics primitives or portions of graphics primitives that lie outside of a 3D view volume in world space. The 3D view volume may represent that portion of world space that is visible to a virtual observer (or virtual camera) situated in world space. For example, the view volume may be a solid truncated pyramid generated by a 2D view window, a viewpoint located in world space, a front clipping plane and a back clipping plane. The viewpoint may represent the world space location of the virtual observer. In most cases, primitives or portions of primitives that lie outside the 3D view volume are not currently visible and may be eliminated from further processing. Primitives or portions of primitives that lie inside the 3D view volume are candidates for projection onto the 2D view window.","Set-up refers to mapping primitives to a three-dimensional viewport. This involves translating and transforming the objects from their original \u201cworld-coordinate\u201d system to the established viewport's coordinates. This creates the correct perspective for three-dimensional objects displayed on the screen.","Screen-space rendering refers to the calculations performed to generate the data used to form each pixel that will be displayed. For example, hardware accelerator  may calculate \u201csamples.\u201d Samples are points that have color information but no real area. Samples allow hardware accelerator  to \u201csuper-sample,\u201d or calculate more than one sample per pixel. Super-sampling may result in a higher quality image.","Hardware accelerator  may also include several interfaces. For example, in the illustrated embodiment, hardware accelerator  has four interfaces. Hardware accelerator  has an interface  (referred to as the \u201cNorth Interface\u201d) to communicate with media processor . Hardware accelerator  may receive commands and\/or data from media processor  through interface . Additionally, hardware accelerator  may include an interface  to bus . Bus  may connect hardware accelerator  to boot PROM  and\/or video output processor . Boot PROM  may be configured to store system initialization data and\/or control code for frame buffer . Hardware accelerator  may also include an interface to a texture buffer . For example, hardware accelerator  may interface to texture buffer  using an eight-way interleaved texel bus that allows hardware accelerator  to read from and write to texture buffer . Hardware accelerator  may also interface to a frame buffer . For example, hardware accelerator  may be configured to read from and\/or write to frame buffer  using a four-way interleaved pixel bus.","The vertex processor  may be configured to use the vertex tags received from the media processor  to perform ordered assembly of the vertex data from the MPUs . Vertices may be saved in and\/or retrieved from a mesh buffer .","The render pipeline  may be configured to rasterize 2D window system primitives and 3D primitives into fragments. A fragment may contain one or more samples. Each sample may contain a vector of color data and perhaps other data such as alpha and control tags. 2D primitives include objects such as dots, fonts, Bresenham lines and 2D polygons. 3D primitives include objects such as smooth and large dots, smooth and wide DDA (Digital Differential Analyzer) lines and 3D polygons (e.g. 3D triangles).","For example, the render pipeline  may be configured to receive vertices defining a triangle, to identify fragments that intersect the triangle.","The render pipeline  may be configured to handle full-screen size primitives, to calculate plane and edge slopes, and to interpolate data (such as color) down to tile resolution (or fragment resolution) using interpolants or components such as:\n\n","In embodiments using supersampling, the sample generator  may be configured to generate samples from the fragments output by the render pipeline  and to determine which samples are inside the rasterization edge. Sample positions may be defined by user-loadable tables to enable stochastic sample-positioning patterns.","Hardware accelerator  may be configured to write textured fragments from 3D primitives to frame buffer . The render pipeline  may send pixel tiles defining r, s, t and w to the texture address unit . The texture address unit  may determine the set of neighboring texels that are addressed by the fragment(s), as well as the interpolation coefficients for the texture filter, and write texels to the texture buffer . The texture buffer  may be interleaved to obtain as many neighboring texels as possible in each clock. The texture filter  may perform bilinear, trilinear or quadlinear interpolation. The pixel transfer unit  may also scale and bias and\/or lookup texels. The texture environment  may apply texels to samples produced by the sample generator . The texture environment  may also be used to perform geometric transformations on images (e.g., bilinear scale, rotate, flip) as well as to perform other image filtering operations on texture buffer image data (e.g., bicubic scale and convolutions).","In the illustrated embodiment, the pixel transfer MUX  controls the input to the pixel transfer unit . The pixel transfer unit  may selectively unpack pixel data received via north interface , select channels from either the frame buffer  or the texture buffer , or select data received from the texture filter  or sample filter .","The pixel transfer unit  may be used to perform scale, bias, and\/or color matrix operations, color lookup operations, histogram operations, accumulation operations, normalization operations, and\/or min\/max functions. Depending on the source of (and operations performed on) the processed data, the pixel transfer unit  may output the processed data to the texture buffer  (via the texture buffer MUX ), the frame buffer  (via the texture environment unit  and the fragment processor ), or to the host (via north interface ). For example, in one embodiment, when the pixel transfer unit  receives pixel data from the host via the pixel transfer MUX , the pixel transfer unit  may be used to perform a scale and bias or color matrix operation, followed by a color lookup or histogram operation, followed by a min\/max function. The pixel transfer unit  may then output data to either the texture buffer  or the frame buffer .","Fragment processor  may be used to perform standard fragment processing operations such as the OpenGL\u00ae fragment processing operations. For example, the fragment processor  may be configured to perform the following operations: fog, area pattern, scissor, alpha\/color test, ownership test (WID), stencil test, depth test, alpha blends or logic ops (ROP), plane masking, buffer selection, pick hit\/occlusion detection, and\/or auxiliary clipping in order to accelerate overlapping windows.","Texture Buffer ","Texture buffer  may include several SDRAMs. Texture buffer  may be configured to store texture maps, image processing buffers, and accumulation buffers for hardware accelerator . Texture buffer  may have many different capacities (e.g., depending on the type of SDRAM included in texture buffer ). In some embodiments, each pair of SDRAMs may be independently row and column addressable.","Frame Buffer ","Graphics system  may also include a frame buffer . In one embodiment, frame buffer  may include multiple 3D-RAM memory devices (e.g. 3D-RAM64 memory devices) manufactured by Mitsubishi Electric Corporation. Frame buffer  may be configured as a display pixel buffer, an offscreen pixel buffer, and\/or a supersample buffer. Furthermore, in one embodiment, certain portions of frame buffer  may be used as a display pixel buffer, while other portions may be used as an offscreen pixel buffer and sample buffer.","Video Output Processor\u2014","A video output processor  may also be included within graphics system . Video output processor  may buffer and process pixels output from frame buffer . For example, video output processor  may be configured to read bursts of pixels from frame buffer . Video output processor  may also be configured to perform double buffer selection (dbsel) if the frame buffer  is double-buffered, overlay transparency (using transparency\/overlay unit ), plane group extraction, gamma correction, psuedocolor or color lookup or bypass, and\/or cursor generation. For example, in the illustrated embodiment, the output processor  includes WID (Window ID) lookup tables (WLUTs)  and gamma and color map lookup tables (GLUTs, CLUTs) . In one embodiment, frame buffer  may include multiple 3DRAM64s  that include the transparency overlay  and all or some of the WLUTs . Video output processor  may also be configured to support two video output streams to two displays using the two independent video raster timing generators . For example, one raster (e.g., A) may drive a 1280\u00d71024 CRT while the other (e.g., B) may drive a NTSC or PAL device with encoded television video.","DAC  may operate as the final output stage of graphics system . The DAC  translates the digital pixel data received from GLUT\/CLUTs\/Cursor unit  into analog video signals that are then sent to a display device. In one embodiment, DAC  may be bypassed or omitted completely in order to output digital pixel data in lieu of analog video signals. This may be useful when a display device is based on a digital technology (e.g., an LCD-type display or a digital micro-mirror display).","DAC  may be a red-green-blue digital-to-analog converter configured to provide an analog video output to a display device such as a cathode ray tube (CRT) monitor. In one embodiment, DAC  may be configured to provide a high resolution RGB analog video output at dot rates of 240 MHz. Similarly, encoder  may be configured to supply an encoded video signal to a display. For example, encoder  may provide encoded NTSC or PAL video to an S-Video or composite video television monitor or recording device.","In other embodiments, the video output processor  may output pixel data to other combinations of displays. For example, by outputting pixel data to two DACs  (instead of one DAC  and one encoder ), video output processor  may drive two CRTs. Alternately, by using two encoders , video output processor  may supply appropriate video input to two television monitors. Generally, many different combinations of display devices may be supported by supplying the proper output device and\/or converter for that display device.","Sample-to-Pixel Processing Flow","In one set of embodiments, hardware accelerator  may receive geometric parameters defining primitives such as triangles from media processor , and render the primitives in terms of samples. The samples may be stored in a sample storage area (also referred to as the sample buffer) of frame buffer . The samples are then read from the sample storage area of frame buffer  and filtered by sample filter  to generate pixels. The pixels are stored in a pixel storage area of frame buffer . The pixel storage area may be double-buffered. Video output processor  reads the pixels from the pixel storage area of frame buffer  and generates a video stream from the pixels. The video stream may be provided to one or more display devices (e.g. monitors, projectors, head-mounted displays, and so forth) through DAC  and\/or video encoder .","The samples are computed at positions in a two-dimensional sample space (also referred to as rendering space). The sample space may be partitioned into an array of bins (also referred to herein as fragments). The storage of samples in the sample storage area of frame buffer  may be organized according to bins (e.g. bin ) as illustrated in FIG. . Each bin may contain one or more samples. The number of samples per bin may be a programmable parameter.","FIG. \u2014Render Pipeline",{"@attributes":{"id":"p-0082","num":"0086"},"figref":"FIG. 8","b":["166","166","162","302","304","306","308","166","312","314","316","166","322"]},"The Vertex Processor  operates to assemble the received vertices. The vertex information may be received from the host computer.","The Pre-Setup Unit  operates to pre-process vertex data.","The Setup Unit  operates to set up the triangle.","The Edge Walker  operates to interpolate along the controlling edge (or \u201cmajor edge\u201d) of a polygon or triangle.","The Span Walker  operates to interpolate along the subordinate edges (or \u201ccomplementary edges\u201d) of a polygon or triangle.","The Edge Walker  and Span Walker  may be referred to as \u201caccumulators\u201d. The Edge Walker  preferably operates first to generate spans or slices that are then operated on by the Span Walker . As described further below, for each of a plurality (or all) of the triangles, the Edge Walker  preferably always operates on the major or longest edge of the triangle (in the direction of the major or longest edge), regardless of the orientation of the major edge of the triangle. This operates to load balance the Edge Walker  and the Span Walker  for the plurality of triangles.","The system shown in  may at least partially operate as follows. First, the vertex data (x,y,z,r,g,b . . . ) sent by the host computer is assembled in the VP . The SU  then sets up the triangle for rendering. This includes computing initial intercepts along each edge and the slope along each edge. The Edge Walker  interpolates the x,y and related component values along the controlling edge. The controlling edge is the edge with the max(abs(dx),abs(dy)). Thus, as described further below, the Edge Walker  preferably always operates on the longest or major edge of the triangle. For each span or slice issued by the Edge Walker , the Span Walker  interpolates from the controlling to the subordinate edges. Samples or pixels may then be generated and\/or stored in the frame buffer.",{"@attributes":{"id":"p-0090","num":"0094"},"figref":"FIG. 9","b":["306","308"]},"For example, if the triangle is mostly vertical, and if the Edge Walker  always accumulates left to right, then the Span Walker  will have an even greater workload than the Edge Walker . This leaves the Edge Walker  underutilized. If the triangle is mostly horizontal, then the Edge Walker  will have an increased workload, but this increased workload may still only be comparable to the Span Walker . This is because, as noted above, the span walking process is more time intensive than the edge walking process. Thus, with a random mixture of triangle shapes, the Edge Walker  will typically be less utilized than the Span Walker . This may cause reduced performance in the graphics system.","FIG. \u2014Flowchart Diagram",{"@attributes":{"id":"p-0092","num":"0096"},"figref":"FIG. 10"},"In step  the graphics system receives information regarding a polygon, such as a triangle. For example, the graphics systems may receive vertex information or geometric primitive information describing parameters with respect to vertices of the triangle, including one or more of: position values, color values, normal values, alpha values, etc. The position information may include x,y position information specifying the position of each of the vertices of the triangle in an x,y coordinate system having x and y axes.","In step  the graphics system may determine the longest edge of the triangle. The longest edge in one embodiment may be the edge that has the maximum of the absolute value of dx and the maximum of the absolute value of dy. In another embodiment, the longest edge is the edge that has the maximum Euclidean distance. The longest edge may also be referred to as the \u201cmajor\u201d edge.","In step  the graphics system may determine the direction (or axis) of the longest edge, i.e., whether the direction is mostly vertical (up\/down) or mostly horizontal (left\/right). Exemplary x-major and y-major triangles are shown in FIG. . As shown, the x-major triangles (on the left of the figure) are mostly horizontal and thus have an x direction. The y-major triangles (on the right of the figure) are mostly vertical and thus have a y direction.","One or more of the Setup unit , Pre Setup unit  or vertex processor  may perform steps  and . First, the graphics system performs calculations to determine the length of all the edges. After this, the graphics system may identify the longest edge in step . The graphics system may also determine the orientation of the longest edge in step . In one embodiment, the graphics system first computes x, y deltas (dx, dy) along all three edges of the triangle. The graphics system then computes reciprocals of dx and dy (Dx, Dy). Then, using dx and dy, the graphics system may find the major dimension of each edge. Then the graphics system may find the controlling edge, which may also be the longest edge. The major dimension of the controlling edge is the major dimension of the triangle. The vertices may then be sorted along the major and minor dimensions of the triangle.","In step  the graphics system may then operate on the major edge (e.g., along the axis of the major edge) of the triangle to generate start and end points on the major edge and at least one complementary edge of the triangle. The start and end points may define respective spans (or \u201cslices\u201d) encompassed by the triangle. As one example, the edge walking unit  may perform an \u201cedge walking\u201d function to traverse the major edge and generate the start and end points.  illustrates an exemplary x-major triangle.  illustrates an example of edge walking the triangle of FIG. . As shown, the edge walking may generate start points on the edge referred to as \u201ccontrolling edge\u201d in , and may generate end points on the complementary edges referred to as \u201cx-major\u201d and \u201cy-major\u201d in FIG. . These start and end points define vertical spans or slices in the triangle, as designated by the dotted lines in FIG. .","In step  the graphics system may then identify pixel locations in the spans or slices of the triangle based on the start and end points determined in step . As one example, the span walking unit  may perform a \u201cspan walking\u201d operation to generate colors at pixel locations in the spans determined by the Edge Walker . The span walking in step  may be performed at least partially concurrently (e.g., in a pipelined fashion) with the edge walking in step , it being understood that the Edge Walker  first generates start and end points defining the spans that then may be traversed by the Span Walker .  illustrates an example of span walking various exemplary triangles.","The edge walking in step  is preferably always performed on (in the direction of) the major or longest edge of the triangle regardless of the orientation of the major edge of the triangle. This operates to load balance the Edge Walker  and the Span Walker  for the plurality of triangles. In other words, since the Edge Walker  is typically less burdened than the Span Walker  for triangles with a varied sampling of orientations, one embodiment of the invention operates to effectively change the orientation of certain of the triangles so that the Edge Walker  always operates on the major or longest edge of each triangle. This increases the workload of the Edge Walker  relative to the Span Walker  (i.e., increases the workload of the Edge Walker  and decreases the workload of the Span Walker ), and thus may operate to provide more of a balance between the workload of the Edge Walker  and Span Walker . In one embodiment, as a result of the method described herein, the Edge Walker  and Span Walker  have substantially similar workloads, and thus neither is waiting on the other and\/or neither is underutilized. This improves performance in the graphics system.","In step , the graphics system may generate and\/or store samples or pixels at least partially based on the computations performed in steps  and . The samples and\/or pixels may then be used to render an image on the display.","The above method is preferably performed for each of a plurality of triangles defining an image.",{"@attributes":{"id":"p-0102","num":"0106"},"figref":"FIG. 11","b":["406","322"]},"After step , in step  the graphics system may operate to map the x,y coordinates of the triangle to new coordinates or variables referred to as \u201cmajor\u201d and \u201cminor\u201d, e.g., maps the x,y coordinates of the triangle to a major, minor coordinate system having a \u201cmajor\u201d axis and a \u201cminor\u201d axis. The mapping may be performed based on the direction of the longest edge of the triangle, wherein the major axis of the major, minor coordinate system corresponds to either the x or y axis that corresponds to the longest or major edge of the triangle. For triangles that are mostly horizontal or x-major, and where the Edge Walker  operates in a left to right direction, the major, minor coordinate system is effectively the same as the x,y coordinate system. For triangles that are mostly vertical or y-major, this mapping effectively changes the orientation of the triangle to be mostly horizontal for the purposes of the Edge Walker .","This mapping effectively operates to take the orientation out of the accumulation calculations, thereby simplifying the calculations, reducing the total number of possible shapes, and improving performance.","In step  the graphics system may then rasterize the triangle. Step  may include steps  and . The triangle may be rasterized according to the major, minor coordinate system, wherein the rasterization begins along the major axis of the major, minor coordinate system. Thus the rasterization begins in the direction of the longest edge of the triangle, regardless of the orientation of the major edge of the triangle. During the rasterization process, the edge walking process may be performed first along the major axis of the major, minor coordinate system. This effectively causes the edge walking process to always operate on the major edge of the triangle to generate start and end points, e.g., to preferably always perform the edge walking process along the major edge of the triangle. The span walking process may then be performed on spans or slices which are in the direction perpendicular to the major orientation of the triangle. After the edge walking and span walking operations, the coordinates of the triangle may then be mapped back to the x,y coordinates using the stored information regarding the direction of the longest edge of the triangle.","After the triangle has been rasterized, the method may then map the pixel coordinates (in the major, minor coordinate system) back into x, y coordinates so that the pixels may then be written into the frame buffer properly.","Therefore, in summary, in one embodiment the method effectively \u201cinfluences\u201d the orientation of the triangle so that the average triangle may spend approximately comparable or equal time in both accumulators, i.e., in the Edge Walker  and Span Walker . In one embodiment, the amount of time spent by the two accumulators in analyzing a triangle may be made more comparable using the method described herein, although the amount of time spent in each still may not be substantially equal.","In summary, the orientation of the triangle may be influenced as follows. First, in the setting up of the triangle, calculations are performed to determine the length of all the edges. After that, the longest edge is identified, and the general orientation of the longest edge is determined. Information regarding the orientation of the longest edge may be preserved for use when writing the pixels out to the frame buffer. For example, if the longest edge is mostly horizontal, then the triangle can be considered as \u201cx-major\u201d and \u201cy-minor\u201d. If the longest edge is mostly vertical, then the triangle can be considered as \u201cy-major\u201d and \u201cx-minor\u201d.","In one embodiment the method moves from an \u2018x,y\u2019 coordinate system to a \u2018major,minor\u2019 coordinate system to effectively remove take the direction out of the calculations. As described above, this effectively takes the orientation of the triangle out of the accumulation calculations, simplifying the calculations, reducing the total number of possible shapes, and improving performance. In this system, calculations become one level of abstraction from the original. For instance, the equation of a slope now would be: slope=delta in minor\/delta in major; instead of slope=delta in y\/delta in x. This results in the first accumulator always working on the major edge of the triangle, regardless of orientation, and the second accumulator always works on the spans or slices in the direction perpendicular to the major orientation of the triangle.","In one embodiment, this method is used on all the of primitives (two and three dimensional) that are accelerated in hardware. In one embodiment, situations in which the method does not matter, (e.g., rectangles and points\/dots) the primitive is orthogonal and a default is picked of either always x-major or always y-major, although this choice does not matter. In another embodiment, this method is only used on triangle primitives. Also, although embodiments of the invention are described herein operating on triangles, it is noted that concepts described herein may readily be applied to other types of geometric primitives or polygons, such as NURBs (Non-Uniform Rational B-Splines), other splines, sub-division surfaces, voxels (volume elements) and other types of data. Thus, embodiments of the invention which operate on various other types of polygons or geometric primitives are contemplated.","Although the embodiments above have been described in considerable detail, other versions are possible. Numerous variations and modifications will become apparent to those skilled in the art once the above disclosure is fully appreciated. It is intended that the following claims be interpreted to embrace all such variations and modifications. Note the section headings used herein are for organizational purposes only and are not meant to limit the description provided herein or the claims attached hereto."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The foregoing, as well as other objects, features, and advantages of this invention may be more completely understood by reference to the following detailed description when read together with the accompanying drawings in which:",{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":["FIG. 4","FIG. 3"]},{"@attributes":{"id":"p-0028","num":"0027"},"figref":["FIG. 5","FIG. 3"]},{"@attributes":{"id":"p-0029","num":"0028"},"figref":["FIG. 6","FIG. 3"]},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0031","num":"0030"},"figref":["FIG. 8","FIG. 5"]},{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIG. 13"},{"@attributes":{"id":"p-0037","num":"0036"},"figref":["FIG. 14","FIG. 13"]},{"@attributes":{"id":"p-0038","num":"0037"},"figref":"FIG. 15"}]},"DETDESC":[{},{}]}
