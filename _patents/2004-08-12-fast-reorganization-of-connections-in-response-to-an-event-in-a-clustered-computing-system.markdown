---
title: Fast reorganization of connections in response to an event in a clustered computing system
abstract: Techniques for fast recovery and/or balancing of connections to a clustered computing system provide management of such connections by determining a number of connections to load balance across nodes and by triggering creation of such connections. In one aspect, a notification of an event regarding the clustered computing system is received by a connection pool manager, a pool of connections to the system is identified based on the notification, and one or more connections from the pool are processed in response to the event. According to an embodiment, the notification comprises the identities of the service, database, server instance and machine that correspond to the event.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07953860&OS=07953860&RS=07953860
owner: Oracle International Corporation
number: 07953860
owner_city: Redwood Shores
owner_country: US
publication_date: 20040812
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS REFERENCE TO RELATED APPLICATIONS","FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","Clustered Computing System","DETAILED DESCRIPTION OF EMBODIMENTS OF THE INVENTION","Functional Overview of Embodiments","EXTENSIONS AND ALTERNATIVES"],"p":["This application claims the benefit of priority to U.S. Provisional Patent Application No. 60\/500,096 filed on Sep. 3, 2003, entitled \u201cService Based Workload Management and Measurement In a Distributed System\u201d; and claims the benefit of priority to U.S. Provisional Patent Application No. 60\/495,368 filed on Aug. 14, 2003, entitled \u201cComputer Resource Provisioning\u201d; and is related to U.S. patent application Ser. No. 10\/917,660 filed on Aug. 12, 2004, entitled \u201cFast Application Notification in a Clustered Computing System\u201d; and is related to U.S. patent application Ser. No. 10\/917,715 filed on Aug. 12, 2004, entitled \u201cMeasuring Workload By Service\u201d; the contents of all of which are incorporated by this reference in their entirety for all purposes as if fully set forth herein.","The present invention relates generally to management of connection pool sessions and, more specifically, to fast reorganization of connections to a clustered computing system.","A clustered computing system is a collection of interconnected computing elements that provide processing to a set of client applications. Each of the computing elements is referred to as a node. A node may be a computer interconnected to other computers, or a server blade interconnected to other server blades in a grid. A group of nodes in a clustered computing system that have shared access to storage (e.g., have shared disk access to a set of disk drives or non-volatile storage) and that are connected via interconnects is referred to herein as a work cluster.","A clustered computing system is used to host clustered servers. A server is combination of integrated software components and an allocation of computational resources, such as memory, a node, and processes on the node for executing the integrated software components on a processor, where the combination of the software and computational resources are dedicated to providing a particular type of function on behalf of clients of the server. An example of a server is a database server. Among other functions of database management, a database server governs and facilitates access to a particular database, processing requests by clients to access the database.","Resources from multiple nodes in a clustered computing system can be allocated to running a server's software. Each allocation of the resources of a particular node for the server is referred to herein as a \u201cserver instance\u201d or instance. A database server can be clustered, where the server instances may be collectively referred to as a cluster. Each instance of a database server facilitates access to the same database, in which the integrity of the data is managed by a global lock manager.","Services for Managing Applications According to Service Levels","Services are a feature for database workload management that divide the universe of work executing in the database, to manage work according to service levels. Resources are allocated to a service according to service levels and priority. Services are measured and managed to efficiently deliver the resource capacity on demand. Source high availability service levels use the reliability of redundant parts of the cluster.","Services are a logical abstraction for managing workloads. Services can be used to divide work executing in a database cluster into mutually disjoint classes. Each service can represent a logical business function, e.g., a workload, with common attributes, service level thresholds, and priorities. The grouping of services is based on attributes of the work that might include the application function to be invoked, the priority of execution for the application function, the job class to be managed, or the data range used in the application function of a job class. For example, an electronic-business suite may define a service for each responsibility, such as general ledger, accounts receivable, order entry, and so on. Services provide a single system image to manage competing applications, and the services allow each workload to be managed in isolation and as a unit. A service can span multiple server instances in a cluster or multiple clusters in a grid, and a single server instance can support multiple services.","Middle tier and client\/server applications can use a service by, for example, by specifying the service as part of the connection. For example, application server data sources can be set to route to a service. In addition, server-side work sets the service name as part of the workload definition. For example, the service that a job class uses is defined when the job class is created, and during execution, jobs are assigned to job classes and job classes run within services.","Database Sessions","In order for a client to interact with a database server on a database cluster, a session is established for the client. Each session belongs to one service. A session, such as a database session, is a particular connection established for a client to a server, such as a database instance, through which the client issues a series of requests (e.g., requests for execution of database statements). For each database session established on a database instance, session state data is maintained that reflects the current state of a database session. Such information contains, for example, the identity of the client for which the session is established, the service used by the client, and temporary variable values generated by processes executing software within the database session. Each session may each have its own database process or may share database processes, with the latter referred to as multiplexing.","Connections are mechanisms for enabling sessions. A connection may refer to either a physical mechanism or a logical connection mechanism, or both. Often, there is a one-to-one mapping of logical connections to physical connections; however, it is possible to have more than one logical connection associated with single physical connection or more than one physical connection associated with a single logical connection. Regardless, management of connections to a clustered database that comprises multiple server instances executing on multiple machines is amplified as the number of instances, machines and clusters increases. An important and challenging feature that is expected from a clustered database is management of many connections to the clustered database server.","When using a connection pool, an application may \u201cborrow\u201d a connection from a connection pool and put the connection back into the pool when the session is ended. Generally, a session is a vehicle to perform work with a database.","High Availability","Certain changes occur within clustered computing systems which reduce high availability and cause client applications to waste time. Such changes can be generally classified as either a \u201cdown\u201d change, an \u201cup\u201d change, or a \u201cnot restarting\u201d change. A down change occurs when a service, a server instance, or a node machine (generally, a \u201ccomponent\u201d) terminates, or \u201cgoes down.\u201d An up change occurs when a service, a server instance, or a node initializes, or \u201ccomes up.\u201d A \u201cnot restarting\u201d change occurs when a service, instance or node can no longer start. Some changes may affect the existing sessions, as well as connections that are not currently in use but that are already created and associated with a service, instance or node.","Applications waste significant amounts of time and resources in their interactions with a clustered system, via a session, when the state of the clustered system changes. In particular, client applications of a clustered database waste time and resources when the state of the clustered system changes. For example, when a node or a server instance that the session is using \u201cgoes down,\u201d the application may not be interrupted for a long period of time. Specifically, if the node or network fails to close the session sockets, the application waits for a TCP\/IP timeout error from the local TCP\/IP stack. For another example, work may not be distributed across all instances supporting a service when a new service, node or instance becomes available, i.e., \u201ccomes up.\u201d In other words, time is wasted by not connecting with a service, node or instance when it becomes available. One other way in which time and resources are wasted is when clients keep retrying to communicate with a component that will not be coming back up, or has not restarted.","In general, traditional systems perform very poorly when a node goes down. Application sessions can wait up to two hours to be interrupted. In general, traditional systems function poorly in allocating work to a restored entity when a failed system entity is restored (i.e., an entity that has come up). Thus, traditional systems provide reduced availability, and potentially reduced service times, from what such a system could provide. Furthermore with traditional systems, following repair or restore of a failed component, traditional cold-failover systems typically offer fallback of the entire workload to the restored entity, rather than offering load balancing across the complement of components in the cluster.","Based on the foregoing, there is a general need for fast redistribution of sessions on a clustered computing system when a change occurs. There is a more specific need for fast processing of sessions to a clustered server in response to changes to resources in the cluster system.","Techniques for fast reorganization of session connections to a clustered computing system in response to system changes, are described, in which a notification of an event regarding the system is received and a connection manager or client\/server application responds by redistributing, within the system, connections from a connection pool. One example of such a clustered computing system is a clustered database server comprising multiple instances of a database server executing on multiple nodes configured to access and manipulate data from a database in response to requests from multiple client applications.","In one aspect, a notification of an event (e.g., a change in the status of a system resource) regarding the clustered computing system is received by a connection pool manager from an event handler, a pool of connections to the system is identified based on the notification, and one or more connections from the pool is processed in response to the event. In an embodiment, the notification comprises the identities of the service, database, instance and node that correspond to the event. With use of a described event processing mechanism, session requestors benefit from the high availability of connections in the pool and a balanced distribution of connections across functioning services, which results in better performance and scalability of the computing system.","The event to which the connection pool manager responds may be a DOWN event, an UP event, or a NOT RESTARTING event. For example, with a service down on a service or node event, connections that are associated with the service or node are identified from the pool and are quickly marked as invalid and removed from the associated pool. Thus, clients that are using the related service will not waste time trying to communicate with, or waiting for a response from, the down session. For another example, with a service up event, a number of sessions that were previously removed from the associated pool is quickly identified, for balancing across active instances associated with a related service. In scenarios in which no connections were previously removed from the pool, a subset of connections from the pool are closed and recreated, for allocation to and balancing across active instances associated with the related service.","With use of the described technique, an entire connection pool is addressed in response to a system event, rather than addressing connections in a piece-meal manner. Therefore, \u201cstale\u201d or useless (i.e., invalid) connections are rapidly removed from the respective connection pool, and mid-tier applications can instantly handle session requests to the system by handing out only valid connections, which is more efficient than the piece-meal approach.","The techniques described herein are primarily described in the context of connection pools; however, these techniques are not limited to use with connection pools. For example, in a client\/server context, clients are interrupted in response to a down event, retry if the service is unavailable, and reconnect in response to an up event.","Operating Environment",{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 1"},"Use of element identifiers ranging from a to n, for example, clients -, services -, instances -, and nodes -, does not mean that the same number of such components are required. In other words, n is not necessarily equal for the respective components. Rather, such identifiers are used in a general sense in reference to multiple similar components.","One or more clients -are communicatively coupled to a server . Server  refers to database server instances -and nodes -on which the instances execute. Other components may also be considered as part of the server , such as a connection pool manager , connection pools -, a notification service daemon  and an event handler . The actual architecture in which the foregoing components are configured may vary from implementation to implementation.","In , connection pool manager  and connection pools -are depicted as components not within server  for purposes of example. Connection pool manager  is communicatively coupled to and utilized by an application server or, generally, a middle tier application . In addition, connection pool manager  is logically coupled to connection pools -, which are logically coupled to server . Notification service daemon  and event handler  are also depicted as not within server , and are communicatively coupled to server .","Clients -may be applications executed by computers interconnected to an application server or some other middleware component between the clients and server  via, for example, a network.","Database  comprises data and metadata that is stored on a persistent memory mechanism, such as a set of hard disks that are communicatively coupled to nodes -, each of which is able to host one or more instances -, each of which hosts at least a portion of one or more services. Such data and metadata may be stored in database  logically, for example, according to relational database constructs, multidimensional database constructs, or a combination of relational and multidimensional database constructs. Nodes -can be implemented as a conventional computer system, such as computer system  illustrated in .","As described, a database server, such as each of instances -, is a combination of integrated software components and an allocation of computational resources (such as memory and processes) for executing the integrated software components on a processor, where the combination of the software and computational resources are used to manage a particular database, such as database . Among other functions of database management, a database server typically governs and facilitates access to database  by processing requests from clients to access the database . Therefore, connection pool manager , which manages connections to server , can be implemented as a processing layer between clients -and instances -, which manage access to database . Instances -, in conjunction with respective nodes -, host services, described hereafter.","Services ","As described, services are a logical abstraction for managing workloads. A service, such as service -, is the performance of work of a particular type or category, where the work performed is for the benefit of one or more clients of one or more servers, and where a level or quality of performance is prescribed for the particular type or category of work. The work performed as part of a service includes any use or expenditure of computer resources, including, for example, CPU processing time, storing and accessing data in volatile memory, read and writes from and\/or to persistent storage (i.e. disk space), and use of network or bus bandwidth.","In general, a service is work that is performed by a database server and typically includes the work performed to process and\/or compute queries that require access to a particular database. The term query as used herein refers to a statement that conforms to a database language, such as SQL, and includes statements that specify operations to add, delete, or modify data and create and modify database objects, such as tables, objects views, and executable routines.","A single database may support many services. For a non-limiting example, services may be divided into a FIN service and a PAY service, where the FIN and PAY services share the clustered database. The FIN service is the database service performed by server  for a FIN application. Typically, the FIN service involves accessing database objects on database  that store data for FIN applications. The PAY service is the service performed by server  for PAY applications. Typically, the PAY service involves accessing database objects on database  that store data for PAY applications.","Database instances of a database cluster are allocated to supporting one or more services. When a database instance (or node) is allocated to perform a service, the database instance is referred to herein as hosting, running, or providing the service, and the service is referred to herein as running or being placed on the database instance.","Services can be provided by one or more database server instances. The service on each instance is referred to as a master of that service. Thus, multiple server instances may work together to provide a service to a client. In , service (e.g., FIN) is depicted, with dashed brackets, as being provided by instance , service (e.g., PAY) is depicted as being provided by instances and , and service is depicted as being provided by instances -","Generally, the techniques described herein are service-centric, where events occurring within server  can be identified and\/or characterized based on the service(s) which is affected by the event.","Connection Pool Manager  and Connection Pools ","The connection pool manager  is a software component, which manages connection pools -and requests for connections for sessions with server , including the routing of connection requests to the appropriate connection pool -, based on the pool setup and configuration. Each connection pool -is a set of connections to database sessions. Each session, for which communications between a client -and an instance -are transmitted through one of the connections from a respective connection pool -, is considered a session with an instance -","Each connection can be instantiated as a connection object and for each connection object, the following information is recorded when a session connection is established: (1) the service that the session is using; (2) the name of the cluster node on which the associated service is available and to which this connection belongs; (3) the unique name of the database in use; and (4) the name of the instance to which this connection's database session belongs. Thus, the location (at times referred to as the \u201csignature\u201d) of each session is uniquely identified. The manner in which the signature is recorded may vary from implementation to implementation. For non-limiting examples, a signature may be recorded to a \u201cbulletin board\u201d mechanism that is accessible to various subscribers, or the signature may be stored in an indexed table or a hash table. The signature is also returned to the connection in various ways. In one embodiment, a handle is used as part of a connection conversation. Detailed actions that various subscribers may perform in response to notification events are beyond the scope of this description.","Methods for managing session connections, which are performed by connection pool manager  in conjunction with associated worker threads, are described in reference to .","Generally, connection pool manager  is responsible for creation, maintenance and removal of connections and connection pools -. For example, connection pool manager  may be used to manage connection pools -through use of a set of APIs. In addition, connection pool manager  binds a connection pool -to its corresponding data source object. In this context, a data source object is an abstraction of an interface to the database . Hence, binding a connection pool to a data source object may include mapping the connection pool to the data source object via a URL that identifies the associated service and the port through which the database  is accessed for the service.","In one embodiment, each connection pool -has an associated connection pool factory object and during its lifecycle a given connection pool factory object has a default user, default password and URL associated therewith. Typically, the default user\/password information is configured on a connection-pool-enabled data source. Hence, there is a connection pool factory object per connection pool, from which connections are created and populated into the connection pool, as a default.","As part of a connection pool creation process, the connection pool manager  may copy appropriate data source object properties to the connection pool factory object that specifically handles requests to the data source object, such as the default user and the default password associated with the data source object. Alternatively, in one embodiment, the connection pool factory object is used as a connection factory for the associated connection pool -and connection pool factory object properties are used for the data source object properties.","A particular service, such as any of services -, may be provided by one or more instances -. A particular service is associated with a particular connection pool -that consists of multiple connections to the one or more instances. For example, service may be provided through connections from connection pool ; service may be provided by connections from connection pool ; and service may be provided by connections from connection pool . Such an association, or mapping, can be implemented by setting and maintaining URLs that identify the instances -that can provide a given service -, where such an association is maintained by the connection pool manager . The database publishes many services. The connection pools -can use any service that is identified, such as by the URL or a connect string.","In general, a daemon is a process that runs in the background and that performs a specified operation at predefined times or in response to certain events. In general, an event is an action or occurrence whose posting is detected by a process. Notification service daemon  is a process that receives event information from server , such as from clusterware that is configured to manage the cluster of instances -. Such event information may include, for example, service, instance and node up or down event information. The database server  posts events when conditions change (i.e., UP, DOWN, NOT RESTARTING), as described in more detail herein.","Notification service daemon  has a publisher\/subscriber relationship with event handler , through which certain event information that is received by daemon  from server  is transmitted to event handler . In general, an event handler is a function or method containing program statements that are executed in response to an event. In response to receiving event information from daemon , event handler  invokes a method of connection pool manager , passing along the event type and property, which are described hereafter. In turn, a worker thread is created, per event, to process information between connection pool manager  and one or more relevant connection pools -, for managing connections to sessions with server .","Transmission of event information from server  to notification service daemon , and from notification service daemon  to event handler , is \u201cout-of-band\u201d. In this context, out-of-band means that such transmission is not through the session communication path because that path may be blocked due to the event, i.e., the session is blocked, waiting for the dead node to respond. For example, the out-of-band notifications may be issued asynchronously through gateway processes that are not part of the clusterware that manages the cluster. For a non-limiting example, notification service daemon  may use the Oracle Notification Service (ONS) API, which is a messaging mechanism that allows application components based on the Java 2 Platform, Enterprise Edition (J2EE) to create, send, receive, and read messages.","Notification Event Payload","When the state of a given service changes, i.e., when the state of a cluster resource that participates in performing the work of the given service changes, the new state is notified to interested subscribers through notification events. Applications can use this notification, for example, to achieve very fast detection of failures and for balancing of connection pools following failures and when the failed components are repaired and restarted. Each notification event that event handler  subscribes to and receives from notification service daemon , is received in the form of an event type and event property. The event type specifies whether the event is related to a service, to a cluster node, to a database, or to an instance. The event property contains details for an event.","\u201cFast application notification\u201d events are one example of an implementation of a high availability event structure and associated notification procedure to which a connection pool manager  responds when redistributing sessions on a cluster. Techniques for fast application notification are described in detail in U.S. patent application Ser. No. 10\/917,660 filed on Aug. 12, 2004, entitled \u201cFast Application Notification In a Clustered System\u201d, the disclosure of which is incorporated by reference in its entirety for all purposes as if fully set forth herein. In one embodiment, the events of interest to the connection pool manager include event property information as detailed in the foregoing referenced application.","The key property that is included in a notification event is the service name, which identifies the service to which the event corresponds. The connection pool manager  uses the service name to lookup, or match, the correct connection pool -that belongs to this service. The service name includes the domain name for the associated service. When a service name match is found, further failover processing occurs. When a service name match fails, in one embodiment, the event is simply ignored by the subscriber.","The database unique name identifies the database that is offering the service associated with the event, because the same service may be offered by multiple databases. The database \u201cunique\u201d name is a unique name separate from the database name because databases may be cloned. The instance name indicates whether a specific instance is up or down, or if the entire service is up or down. If the instance value is null, then all instances are down, that is, the entire service is down. Otherwise, the specific instance identified by the instance name is down. For an UP event, if the instance name is null, then if the event type is \u201cnode\u201d, then recovery processing is done on all connections that are on this node, which entails matching of the node name from the event property to the node name on every connection.","The cardinality identifies the number of instances of the service, which can be used for redistribution of connections across the cluster in response to UP and DOWN events. The status field value indicates whether this is an UP event, a DOWN event, or a NOT RESTARTING event. The reason field indicates whether the service event is planned or unplanned, i.e., whether the change was user-initiated or due to a failure.","Event Processing","The connection pool manager  maintains, for each service, a mapping of session connections to cluster location, i.e., nodes, databases and instances. Whenever a connection is established, the connection pool manager  records the location of the session connection. The manner in which session location information is recorded may vary from implementation to implementation. For non-limiting examples, session location information may be posted on a \u201cbulletin board\u201d mechanism that is accessible to various subscribers, or the session location information may be stored in an indexed table or a hash table, or the session location information may be obtained in linked lists. The session location information is used for fast redistribution of the connection pool whenever a notification event is received for a service, instance or node. A fast redistribution of the connections benefits the runtime distribution of work in the cluster by moving connections to functioning cluster components and, therefore, ensuring that the connection pool has connections that are ready to use when session requests are received.","In one embodiment, a dual index structure is used to implement the mappings, from service to database and instance, and from service to node, as follows:","ServiceDatabase nameInstance nameConnections;","ServiceNode nameConnections.","Down Event Processing","If a specific service is down at a specific instance, then the specific connections connected to this instance for this service are removed from the pool. If a node is down, then all connections associated with that node are removed from the pool.","The number of connections that are authenticated as the default user of a data source object and those connections that are stateless (described hereafter), which are removed from the connection pool, is tracked. This number can be used during up event processing by the connection pool manager , as described hereafter. If the number of connections falls below a specified minimum connection pool limit for a given connection pool -, then upon the first successful connection to the server , the connections are populated back to the minimum limit.","Stateless connections are associated with connection objects that have no connection attributes or tagging specified by a client. For example, a client may tag a connection object with session state information (e.g., a transaction isolation level), and identify the tagged connection, so that the client does not have to reinitialize the session each time it uses the connection. Hence, the client can borrow the tagged connection from the connection pool, use it to perform some work, place it back in the connection pool and borrow it again for further work, without having to waste resources on round trips to the database to reinitialize the session state.","The connection pools -can include both stateless connections and connections with state information. However, in an embodiment, only the number of stateless connections is tracked by the connection pool manager , rather than also connections with state.","According to one embodiment, when processing for connection recovery, the connections in the connection pool's \u201cchecked out\u201d list are processed after claiming the connections from the application that is using such connections, and then the connections that are available for use from a given connection pool are processed. Applications, such as clients -, that have connections to the down instance checked out (or borrowed) from the relevant connection pool -, receive an error (i.e., node with service down or instance down) and immediately the checked out connection are identified (e.g., via the hash table) and cleaned up. In one embodiment, the application is expected to borrow another connection from the connection pool, determine the last result and resubmit the request.","The connections that are affected by such an event can be identified by a state having only a socket connection value, without a corresponding session value. Generally, upon a service down event, connections in a relevant connection pool are aborted as quickly as possible. In addition, applications that request connections from the pool are prevented from receiving invalid or bad connections.","Service Down at an Instance Event",{"@attributes":{"id":"p-0069","num":"0068"},"figref":"FIG. 2","b":["202","114","120"]},"Once connection pool manager  receives event information that is associated with a service down at an instance event from event handler , connection pool manager  handles the event by matching the service and instance names that are identified in the event information with the session location information that was provided when the session connected. Hence, at block , based on the notification, a connection pool that is associated with the particular service is identified.","One or more connections from the identified connection pool are processed as follows. In one embodiment, at block , one or more connections are identified which are associated with the instance and the connection pool identified in the event information. For example, connection pool manager  handles the event by matching the instance name that is identified in the event information with the instance name that is set in each session location information that is associated with a respective connection, e.g., via a hash table.","At block , each connection that is identified at block  is marked as invalid. While invalid, the particular connection cannot be assigned to a requesting process. In one embodiment, a variable is maintained for the relevant connection pool, which indicates whether the connection pool has been processed for a down event. Hence, if a subsequent down event is received which identifies the down service that is associated with the previously processed connection pool, and which identifies a particular down instance, then no processing is performed and computational resources are not wasted.","At block , each connection that is marked down is aborted. A specific method on the connection pool may be invoked for removal of the connections, where the method actually performs the removal processing, for example, by calling each connection's abort( ) method. Aborting the connection interrupts the blocked application thread, which is typically blocked (i.e., waiting for read\/write on a socket) when the service or node goes down, and enables release of client side resources. Upon successful completion of the abort, the connection is effectively eliminated from the pool, thereby ensuring removal of the stale connection. In general, affected sessions blocked in I\/O are aborted and affected sessions that are idle or checked out and between calls are redistributed across the cluster. In one embodiment, the abort process is a low level TCP implementation to interrupt the session.","One example of how the one or more connections from the identified connection pool are processed, according to embodiments, is as follows. If a service-connection pool match is made at block , then relevant event information is posted on a FIFO queue that the matching connection pool manages. Connection pool manager  determines whether a worker thread already exists for processing connections from the identified connection pool. If such a worker thread does not already exist, then connection pool manager  spawns a worker thread to work on the failover processing of connections that are associated with the connection pool. For high availability purposes, threads should be cached and kept open.","The database instance name is hashed or used as the index to locate the relevant connections quickly. For each connection for which a match is found, the connection is marked down, e.g., marked as invalid, thereby allowing for fast processing and preventing bad or invalid connections from being handed out of the connection pool. The number of connections that are authenticated as the default user of a data source object, and those connections that are stateless and that are removed from the connection pool, is tracked. This number can be used during up event connection processing, as described hereafter. The worker thread can continue to process events as long as there are events in the queue.","Node Down Event","As discussed, when physical connections to the server  are created, the associated instance(s) -and cluster node(s) -are specified in the respective connection session location information. When connection pool manager  receives event information that indicates that a host node -is down, a worker thread scans the relevant connection pool that is associated with the service (a) that is identified in the event notification and (b) that is hosted by one or more instances that are hosted on the node that is identified in the notification, to match the host name that is identified in the event information with associated connections from the connection pool. Again, the node is used as the hash or index value to locate the session's connection. If a match is found, processing is similar to an instance down event, for which the matched connections are marked as invalid and then aborted, sockets are reset, and the application can resume on a different, good connection. In an embodiment, the matched connections that are checked out and held by applications are processed first and the inactive matched connections are processed next.","Service Up Event",{"@attributes":{"id":"p-0079","num":"0078"},"figref":"FIG. 3","b":["302","108","108","114","120","304"],"i":["a","n"]},"One or more connections from the identified connection pool are processed as follows. In one embodiment, at block , one or more of a certain type of connections that were previously removed from the pool (i.e., default user authenticated\/stateless) is identified, for determining a number of connections to distribute across a plurality the new resources that are providing the particular service. The plurality of active instances includes the instance that was identified as initialized in the event information. As discussed in reference to an embodiment, part of service down processing includes tracking the number of connections that are authenticated as the default user of a data source object and those connections that are stateless, which are removed from the connection pool. Hence, at block , connection pool manager  handles the event by accessing this number of connections that was tracked during previous down processing.","At block , the number of connections to allocate, or distribute, across a number of active instances is determined. In an embodiment, upon receiving a service up event, the number of connections to be balanced across existing active instances supporting the service is determined using the following procedure. The number of connections to distribute is determined from the number of those previously-removed connections that are stateless and that have the default user\/password information set on the data source, referred to hereafter as the \u201cselected connections\u201d. The connection creation logic may use a cardinality value (received in the event payload), which represents the number of active instances in a cluster at the time the up event was generated, to determine how many connections to release and recreate.","In an embodiment, if the number of selected connections is zero, such as when an up event is received when there was not a previous down event, then a portion of the total number of existing connections associated with the relevant connection pool are created by instantiating respective connection objects, and load balanced by the listener process across the active instances. For example, only 25% of the number of such existing connections are recreated and balanced. Hence, there is still connection capacity within the limits of the relevant connection pool for allocation to subsequent instances that initialize. In order to load balance, some idle connections associated with the relevant connection pool may need to be closed and recreated.","When the number of selected connections is greater than zero (based on the number of previously-removed connections that is tracked during down event processing), the number of connections to load balance is set equal to the number of selected connections divided by the cardinality value. In an embodiment, the process of recreating and rebalancing some connections is performed iteratively, such as in 25% increments or until the specified maximum number of connections is reached.","At block , the creation of at least a portion of the number of connections to allocate (determined at block ) is triggered. For example, connection pool manager  invokes a \u201ccreate connection\u201d method on a listener process or thread that is associated with server  for each of the connections to be created for the particular service. In turn, the listener process determines where to create the new connections, i.e., to what instances the server should allocate the created connections. Alternatively, the connection pool can request the listener to create connections as the named instance.","In an embodiment, if the number of connections to allocate plus the total number of existing connections associated with the relevant connection pool is greater than a specified maximum number of connections for that connection pool, then some connections are closed and recreated. Since the load balancing process performed by the database listener is performed during \u201cconnect-time\u201d (i.e., when the connections are created), closing and recreating some of the connections will automatically rebalance the connections based on session metrics and\/or runtime load balancing metrics.","Generally, with the described techniques, when an up event is generated, connections are established and automatically and instantaneously load balanced to the active instances, including the newly active instance, without waiting for client connection retries or requests.","Implementation Mechanisms","The approach for fast processing of connections to a clustered computing system, as described herein, may be implemented in a variety of ways and the invention is not limited to any particular implementation. The approach may be integrated into a system or a device, or may be implemented as a stand-alone mechanism. Furthermore, the approach may be implemented in computer software, hardware, or a combination thereof.","Hardware Overview",{"@attributes":{"id":"p-0089","num":"0088"},"figref":"FIG. 4","b":["400","400","402","404","402","400","406","402","404","406","404","400","408","402","404","410","402"]},"Computer system  may be coupled via bus  to a display , such as a cathode ray tube (CRT), for displaying information to a computer user. An input device , including alphanumeric and other keys, is coupled to bus  for communicating information and command selections to processor . Another type of user input device is cursor control , such as a mouse, a trackball, or cursor direction keys for communicating direction information and command selections to processor  and for controlling cursor movement on display . This input device typically has two degrees of freedom in two axes, a first axis (e.g., x) and a second axis (e.g., y), that allows the device to specify positions in a plane.","The invention is related to the use of computer system  for implementing the techniques described herein. According to one embodiment of the invention, those techniques are performed by computer system  in response to processor  executing one or more sequences of one or more instructions contained in main memory . Such instructions may be read into main memory  from another computer-readable medium, such as storage device . Execution of the sequences of instructions contained in main memory  causes processor  to perform the process steps described herein. In alternative embodiments, hard-wired circuitry may be used in place of or in combination with software instructions to implement the invention. Thus, embodiments of the invention are not limited to any specific combination of hardware circuitry and software.","The term \u201ccomputer-readable medium\u201d as used herein refers to any medium that participates in providing instructions to processor  for execution. Such a medium may take many forms, including but not limited to, non-volatile media, volatile media, and transmission media. Non-volatile media includes, for example, optical or magnetic disks, such as storage device . Volatile media includes dynamic memory, such as main memory . Transmission media includes coaxial cables, copper wire and fiber optics, including the wires that comprise bus . Transmission media can also take the form of acoustic or light waves, such as those generated during radio-wave and infra-red data communications.","Common forms of computer-readable media include, for example, a floppy disk, a flexible disk, hard disk, magnetic tape, or any other magnetic medium, a CD-ROM, any other optical medium, punchcards, papertape, any other physical medium with patterns of holes, a RAM, a PROM, and EPROM, a FLASH-EPROM, any other memory chip or cartridge, a carrier wave as described hereinafter, or any other medium from which a computer can read.","Various forms of computer readable media may be involved in carrying one or more sequences of one or more instructions to processor  for execution. For example, the instructions may initially be carried on a magnetic disk of a remote computer. The remote computer can load the instructions into its dynamic memory and send the instructions over a telephone line using a modem. A modem local to computer system  can receive the data on the telephone line and use an infra-red transmitter to convert the data to an infra-red signal. An infra-red detector can receive the data carried in the infra-red signal and appropriate circuitry can place the data on bus . Bus  carries the data to main memory , from which processor  retrieves and executes the instructions. The instructions received by main memory  may optionally be stored on storage device  either before or after execution by processor .","Computer system  also includes a communication interface  coupled to bus . Communication interface  provides a two-way data communication coupling to a network link  that is connected to a local network . For example, communication interface  may be an integrated services digital network (ISDN) card or a modem to provide a data communication connection to a corresponding type of telephone line. As another example, communication interface  may be a local area network (LAN) card to provide a data communication connection to a compatible LAN. Wireless links may also be implemented. In any such implementation, communication interface  sends and receives electrical, electromagnetic or optical signals that carry digital data streams representing various types of information.","Network link  typically provides data communication through one or more networks to other data devices. For example, network link  may provide a connection through local network  to a host computer  or to data equipment operated by an Internet Service Provider (ISP) . ISP  in turn provides data communication services through the world wide packet data communication network now commonly referred to as the \u201cInternet\u201d . Local network  and Internet  both use electrical, electromagnetic or optical signals that carry digital data streams. The signals through the various networks and the signals on network link  and through communication interface , which carry the digital data to and from computer system , are exemplary forms of carrier waves transporting the information.","Computer system  can send messages and receive data, including program code, through the network(s), network link  and communication interface . In the Internet example, a server  might transmit a requested code for an application program through Internet , ISP , local network  and communication interface .","The received code may be executed by processor  as it is received, and\/or stored in storage device , or other non-volatile storage for later execution. In this manner, computer system  may obtain application code in the form of a carrier wave.","Alternative embodiments of the invention are described throughout the foregoing description, and in locations that best facilitate understanding the context of the embodiments. Furthermore, the invention has been described with reference to specific embodiments thereof. It will, however, be evident that various modifications and changes may be made thereto without departing from the broader spirit and scope of the invention. For example, embodiments of the invention are described herein in the context of a server; however, the described techniques are applicable to any clustered computing system over which system connections are allocated or assigned, such as with a system configured as a computing cluster or a computing grid. Therefore, the specification and drawings are, accordingly, to be regarded in an illustrative rather than a restrictive sense.","In addition, in this description certain process steps are set forth in a particular order, and alphabetic and alphanumeric labels may be used to identify certain steps. Unless specifically stated in the description, embodiments of the invention are not necessarily limited to any particular order of carrying out such steps. In particular, the labels are used merely for convenient identification of steps, and are not intended to specify or require a particular order of carrying out such steps."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["Embodiments of the present invention are depicted by way of example, and not by way of limitation, in the figures of the accompanying drawings and in which like reference numerals refer to similar elements and in which:",{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 4"}]},"DETDESC":[{},{}]}
