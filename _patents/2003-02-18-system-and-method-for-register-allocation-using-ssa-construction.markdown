---
title: System and method for register allocation using SSA construction
abstract: The construction of Static Single Assignment form (SSA) is used as a dynamic conflict graph so that while constructing SSA in linear time, the program being analyzed is simultaneously register allocated. When allocating a register for the symbol, the conflict set is examined so that the register chosen for the symbol is not used by a symbol in the conflict set. When a symbol is register-allocated, the symbol is added to all the conflict set of all live symbols. A live symbol is determined by keeping two counters, called herein a use counter and a use threshold counter. Both counters are initialized when a definition of a symbol is encountered in a block. Both counters are incremented when a use of the symbol is encountered when traversing a block in a depth-first downward traversal. The use count is decremented when a use is detected when traversing the block in an upward traversal. A symbol is live when the use count is less than the use count threshold and the use count is greater than zero when a register is allocated. The register-allocated symbol is added to the conflict set of all live symbols.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07389501&OS=07389501&RS=07389501
owner: Microsoft Corporation
number: 07389501
owner_city: Redmond
owner_country: US
publication_date: 20030218
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF ILLUSTRATIVE EMBODIMENTS"],"p":["This invention relates to the field of computing and in particular to the field of allocating registers in a compiler.","Register allocation is a classic problem in computer science. The assignment of registers to variables is difficult and typically takes a long time because there are a limited number of (very fast access) registers. Variables can be stored in (much slower) memory instead of in registers, but doing so typically adversely affects run-time performance of the program. Hence optimal register allocation is considered a very difficult computer science problem and can take a very long time.","For example, assume that a computer has two registers and a user writes a program using three variables, a, b, and c. Suppose the lifetimes of variables a and c do not overlap, that is, the lifetime for a has no instructions in common with the lifetime for c. Suppose that the lifetime of b overlaps the lifetimes of both a and c. It is clear that b cannot be assigned the same register assigned to either a or c but that a and c can be assigned the same register because a and c do not conflict.","Hence, it is clear that the concept of the lifetime of variables are important when allocating registers in an efficient way. Registers can be allocated to variable lifetimes by: (1) building a conflict graph which identifies which variables cannot be assigned to the same register simultaneously; (2) assigning registers to variables until the registers are used up; (3) splitting the lifetime of some of the variables by \u201cspilling\u201d the contents of the registers into main memory so that registers can continue to be assigned to variables; and (4) returning to step (2). The process of assigning registers to variables is called register coloring.","Another problem encountered in an optimizing compiler is acquiring information about the structure and nature of the program. This problem has been addressed by associating every use of a variable in a program with a single unique definition for the variable by constructing a Static Single Assignment (SSA) form of the program. When a program has been put in SSA form, each use of a variable in the program will have a pointer associated with it that points to the single unique definition of the variable. These pointers are typically \u201cuse-def links\u201d or \u201cuse-def edges.\u201d","For example, given the following simple program, Program :","x=","y=","z=x+y","z=z+x","the SSA form might be represented as illustrated in .","When more than one definition for a given variable exists, phi functions are inserted. For example, suppose the following simple program, Program 2 exists:","If (some conditional C)","{","then x=","}","else","{","x=","}","=x","endif","This program can be represented in flowgraph form, Flowgraph , as shown in .","In Flowgraph , block  represents whatever code preceded the If statement. As a result of the If statement, control will branch to either block  or block . In block  there is a definition of x (x=?) and in block  there is a definition of x (x=?). As the program is written, then, we cannot draw in an edge from the use of X in block  (=x) to its \u201csingle unique definition\u201d. To overcome this problem, a phi function: x=\u03c3(x,x) is inserted in block . X (in block ) is renamed xand x (in block ) is renamed xIn this way every x has associated with it just one definition. It will be seen that there are as many inputs to a phi function as there are control flow edges that allow entrance into a block. In this case because there are two pathways to enter block  (via block  or via block ), so there are two inputs to the phi function. The end result (Flowgraph )_showing the control flow edges as well as the use-def edges is shown in .","A dominance frontier is a property of a block in a flowgraph. For example, consider the following simple program, represented in flowgraph form in Flowgraph  shown in .","A block (e.g., block ) is said to dominate another block (e.g., block ) if and only if all possible paths from the entry block (e.g., block ) to block  include block . Here you used to have the \u201cpreceding block\u201d which was correct in this case but only because of the coincidence that the predecessor block was the entry block. In Flowgraph , block  dominates blocks ,  and . By definition, a block also dominates itself. A block (e.g., block ) is said to strictly dominate another block (e.g., block ) if and only if block  dominates block  and block  is not block . Predecessors of a block are all the blocks that have edges going to it. For example, in the above diagram, block 's predecessors are blocks  and , and block 's predecessor is block  and so on. A dominance frontier of a block B (denoted df(B)) is the set of all blocks (b) such that B dominates a predecessor of b, and B does not strictly dominate b., or:","df (B)={b:B dom pred (b) & B does not strictly dom b}.","In Flowgraph , block  is a member of the dominance frontier of block . In this case B=block  and b=block . Block  is a predecessor of block  and block  dominates itself (by definition) so block  dominates a predecessor of . Block  does not strictly dominate block  because block  can be reached by going through block  (thereby circumventing block ) therefore block  is a member of the dominance frontier of .","Dominance frontiers are useful to indicate where phi functions should be inserted. For example, if there were a definition (e.g., x=) in a block (e.g., block ) in Flowgraph , a phi function (e.g., x=\u03c3(x,x)) should be placed in the blocks associated with the dominance frontier of block  (e.g., a phi function x=\u03c3(x,x) should be placed in block ). Flowgraph , shown in , illustrates Flowgraph  with the addition of definitions of x and the inserted phi function.","To construct the SSA form, first the dominance frontier is constructed for all the blocks (referred to as generating an iterated dominance frontier). Then by inspection from the location of all the definitions, the phi functions are placed. Finally, the control flowgraph edges are added. To accomplish this, the flowgraph is traversed in a depth-first order, as illustrated in .","To traverse Flowgraph  in depth-first order, first block  is traversed, and then block 's descendant, block , is traversed. Block  has two descendants, block  and block . One of the descendants is randomly selected (e.g., block ), one of block 's descendants is randomly selected (e.g., block ), one of block 's descendants is randomly selected (e.g., block ). At this point there are no more descendants so traversal continues at the predecessor block (e.g., block ), but there are no more unvisited descendants. Traversal continues at block 's predecessor, so block  is traversed, but there are no more unvisited descendants. Traversal continues at block 's predecessor (e.g., block ). Block  had another predecessor (e.g. block ) which has not been traversed yet. Block  is traversed. Block  has no unvisited descendants so the traversal continues to block . Block  has no unvisited descendants, so traversal continues to block . During this traversal, whenever a definition of a variable is encountered, the variable is pushed onto a renaming stack associated with that variable. When block  is traversed, a definition is found (labeled x) and is placed onto a renaming stack (currently empty). Block  has no definitions, but has a use (=x). By definition, the use is the current top of the stack so an edge is added (e.g., edge a). Block  contains another definition of x (a phi function, labeled x). Because block  contains a phi function, and only one definition of x (x) has been encountered so far, the first phi function parameter is wired up to the x in block  (edge b). The phi function is labeled xand is placed onto the renaming stack. Block  contains neither a definition nor a use. Traversal proceeds upwards to block  and then down to block . In block  a new definition is encountered (e.g., X), which is pushed on the stack. Also in block  a use (=x) is found and is wired up (edge c) to the definition of x on the top of the stack (x). Upon returning to block , the second x in the phi function is wired up to x(edge d).","Hence, SSA construction is typically broken down into the following sequence of steps: first an Iterated Dominance Frontier (IDF) is constructed; then the IDF is used to inject phi-functions where necessary into the instruction stream; and finally, the variables in the program are renamed with an array of renaming stacks while a pre-order depth-first recursive walk of the flow graph is performed. Because each block is processed once, the amount of work performed is a function of the number of blocks, so that SSA construction takes place in linear time.","In traditional compilers, the time expended to transform user code into machine code is not critical. Typically, it is more important to emit the best possible resultant code (e.g., making the resultant code run 10% faster) than to emit the code as fast as possible. In the world of just-in-time (JIT) compilers, in the JAVA run-time world, in IBM's run-time world, in the .NET run-time world and so on, however, compilation occurs while a user is running an application or program, hence trade-offs have to be made between the amount of time spent performing analysis and optimization and the expected improvement in run-time performance of the transformation. It would be helpful if multiple phases of compilation, such as register allocation and SSA construction, could be combined into a single phase without adding complexity so that optimally, more could be accomplished in less time, thus enabling both an increase in analysis\/optimization throughput and run-time performance.","The construction of Static Single Assignment form (SSA) is used as a dynamic conflict graph so that while constructing SSA in linear time, the program being analyzed is simultaneously register allocated. When a symbol is spilled to memory, context about the local code is available, enabling the development of heuristics that take into account nesting of loops and other important pieces of information yielding better resultant code. A conflict set for a symbol (e.g., a variable) is created during the Static Single Assignment form construction of a program. When allocating a register for the symbol, the conflict set is examined so that the register chosen for the symbol is not used by a symbol in the conflict set. When a symbol is register-allocated, the symbol is added to all the conflict set of all live symbols. A live symbol is determined by keeping two counters, called herein a use counter and a use threshold counter. Both counters are initialized when a definition of a symbol is encountered in a block. Both counters are incremented when a use of the symbol is encountered when traversing a block in a depth-first downward traversal. The use count is decremented when a use is detected when traversing the block in an upward traversal. When the process traverses back up the flow graph, and then starts going down again along a different path the UseCountThreshold is reset to the current value of the UseCount. Consequently, while descending it is a static property that the UseCount == UseCountThreshold. In addition, dummy uses may be injected when popping a block with unvisited predecessors and in loops. A symbol is live when the use count is less than the use count threshold and the use count is greater than zero when a register is allocated. The register-allocated symbol is added to the conflict set of all live symbols.","Overview","The construction of a modified Static Single Assignment form (SSA) of a program is used as a dynamic conflict graph so that while constructing modified SSA in linear time, the variables (symbols) in the program being analyzed are simultaneously register allocated. When a symbol is spilled to memory, context about the local code is available, enabling the development of heuristics that take into account nesting of loops and other important pieces of information yielding better resultant code.","During the renaming phase of the modified SSA construction, information equivalent to the conflict graph needed for register allocation may be available. Therefore, at any point in time, by examining the top of the renaming stack to determine what variables are live, enables the combination of modified SSA construction and register allocation into a single linear phase. Two new fields (use count and use count threshold) are added to the structure pushed onto the renaming stacks. Use count is the actual count of the number of uses of a variable that exists in the blocks that have been pushed during the depth first traversal of the renaming phase but have not yet been popped. Use count threshold is the total number of uses encountered while diving along a particular arc of the flowgraph during the depth first traversal, without decrementing that value when popped. By comparing use count and use count threshold at any point in time when popping back up from the depth first traversal of the flowgraph, it can be determined whether or not a symbol associated with the renaming stack is live.","Exemplary Computing Environment",{"@attributes":{"id":"p-0049","num":"0048"},"figref":"FIG. 7"},"Although not required, the invention can be implemented via an application programming interface (API), for use by a developer, and\/or included within the network browsing software which will be described in the general context of computer-executable instructions, such as program modules, being executed by one or more computers, such as client workstations, servers, or other devices. Generally, program modules include routines, programs, objects, components, data structures and the like that perform particular tasks or implement particular abstract data types. Typically, the functionality of the program modules may be combined or distributed as desired in various embodiments. Moreover, those skilled in the art will appreciate that the invention may be practiced with other computer system configurations. Other well known computing systems, environments, and\/or configurations that may be suitable for use with the invention include, but are not limited to, personal computers (PCs), automated teller machines, server computers, hand-held or laptop devices, multi-processor systems, microprocessor-based systems, programmable consumer electronics, network PCs, minicomputers, mainframe computers, and the like. The invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network or other data transmission medium. In a distributed computing environment, program modules may be located in both local and remote computer storage media including memory storage devices.",{"@attributes":{"id":"p-0051","num":"0050"},"figref":"FIG. 7","b":["100","100","100","100"]},"With reference to , an exemplary system for implementing the invention includes a general purpose computing device in the form of a computer . Components of computer  may include, but are not limited to, a processing unit , a system memory , and a system bus  that couples various system components including the system memory to the processing unit . The system bus  may be any of several types of bus structures including a memory bus or memory controller, a peripheral bus, and a local bus using any of a variety of bus architectures. By way of example, and not limitation, such architectures include Industry Standard Architecture (ISA) bus, Micro Channel Architecture (MCA) bus, Enhanced ISA (EISA) bus, Video Electronics Standards Association (VESA) local bus, and Peripheral Component Interconnect (PCI) bus (also known as Mezzanine bus).","Computer  typically includes a variety of computer readable media. Computer readable media can be any available media that can be accessed by computer  and includes both volatile and nonvolatile media, removable and non-removable media. By way of example, and not limitation, computer readable media may comprise computer storage media and communication media. Computer storage media includes both volatile and nonvolatile, removable and non-removable media implemented in any method or technology for storage of information such as computer readable instructions, data structures, program modules or other data. Computer storage media includes, but is not limited to, RAM, ROM, EEPROM, flash memory or other memory technology, CDROM, digital versatile disks (DVD) or other optical disk storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other medium which can be used to store the desired information and which can be accessed by computer . Communication media typically embodies computer readable instructions, data structures, program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term \u201cmodulated data signal\u201d means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example, and not limitation, communication media includes wired media such as a wired network or direct-wired connection, and wireless media such as acoustic, RF, infrared, and other wireless media. Combinations of any of the above should also be included within the scope of computer readable media.","The system memory  includes computer storage media in the form of volatile and\/or nonvolatile memory such as read only memory (ROM)  and random access memory (RAM) . A basic input\/output system  (BIOS), containing the basic routines that help to transfer information between elements within computer , such as during start-up, is typically stored in ROM . RAM  typically contains data and\/or program modules that are immediately accessible to and\/or presently being operated on by processing unit . By way of example, and not limitation,  illustrates operating system , application programs , other program modules , and program data .","The computer  may also include other removable\/non-removable, volatile\/nonvolatile computer storage media. By way of example only,  illustrates a hard disk drive  that reads from or writes to non-removable, nonvolatile magnetic media, a magnetic disk drive  that reads from or writes to a removable, nonvolatile magnetic disk , and an optical disk drive  that reads from or writes to a removable, nonvolatile optical disk , such as a CD ROM or other optical media. Other removable\/non-removable, volatile\/nonvolatile computer storage media that can be used in the exemplary operating environment include, but are not limited to, magnetic tape cassettes, flash memory cards, digital versatile disks, digital video tape, solid state RAM, solid state ROM, and the like. The hard disk drive  is typically connected to the system bus  through a non-removable memory interface such as interface , and magnetic disk drive  and optical disk drive  are typically connected to the system bus  by a removable memory interface, such as interface .","The drives and their associated computer storage media discussed above and illustrated in  provide storage of computer readable instructions, data structures, program modules and other data for the computer . In , for example, hard disk drive  is illustrated as storing operating system , application programs , other program modules , and program data . Note that these components can either be the same as or different from operating system , application programs , other program modules , and program data . Operating system , application programs , other program modules , and program data  are given different numbers here to illustrate that, at a minimum, they are different copies. A user may enter commands and information into the computer  through input devices such as a keyboard  and pointing device , commonly referred to as a mouse, trackball or touch pad. Other input devices (not shown) may include a microphone, joystick, game pad, satellite dish, scanner, or the like. These and other input devices are often connected to the processing unit  through a user input interface  that is coupled to the system bus , but may be connected by other interface and bus structures, such as a parallel port, game port or a universal serial bus (USB).","A monitor  or other type of display device is also connected to the system bus  via an interface, such as a video interface . A graphics interface , such as Northbridge, may also be connected to the system bus . Northbridge is a chipset that communicates with the CPU, or host processing unit , and assumes responsibility for accelerated graphics port (AGP) communications. One or more graphics processing units (GPUs)  may communicate with graphics interface . In this regard, GPUs  generally include on-chip memory storage, such as register storage and GPUs  communicate with a video memory . GPUs , however, are but one example of a coprocessor and thus a variety of coprocessing devices may be included in computer . A monitor  or other type of display device is also connected to the system bus  via an interface, such as a video interface , which may in turn communicate with video memory . In addition to monitor , computers may also include other peripheral output devices such as speakers  and printer , which may be connected through an output peripheral interface .","The computer  may operate in a networked environment using logical connections to one or more remote computers, such as a remote computer . The remote computer  may be a personal computer, a server, a router, a network PC, a peer device or other common network node, and typically includes many or all of the elements described above relative to the computer , although only a memory storage device  has been illustrated in . The logical connections depicted in  include a local area network (LAN)  and a wide area network (WAN) , but may also include other networks. Such networking environments are commonplace in offices, enterprise-wide computer networks, intranets and the Internet.","When used in a LAN networking environment, the computer  is connected to the LAN  through a network interface or adapter . When used in a WAN networking environment, the computer  typically includes a modem  or other means for establishing communications over the WAN , such as the Internet. The modem , which may be internal or external, may be connected to the system bus  via the user input interface , or other appropriate mechanism. In a networked environment, program modules depicted relative to the computer , or portions thereof, may be stored in the remote memory storage device. By way of example, and not limitation,  illustrates remote application programs  as residing on memory device . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.","One of ordinary skill in the art can appreciate that a computer  or other client device can be deployed as part of a computer network. In this regard, the present invention pertains to any computer system having any number of memory or storage units, and any number of applications and processes occurring across any number of storage units or volumes. The present invention may apply to an environment with server computers and client computers deployed in a network environment, having remote or local storage. The present invention may also apply to a standalone computing device, having programming language functionality, interpretation and execution capabilities.","Allocating Registers using a Modified SSA Technique","Referring now to , there is illustrated user code  on a client  that may be connected via a network  such as the Internet, an intranet or other suitable network to a computing device  such as but not limited to a server. User code may be transformed by compiler  using memory  to generate executable code (not shown). In one embodiment of the invention, the executable code is generated in real-time. It will be understood that  is exemplary only. For instance, compiler  and memory  may reside on computing device  and so on.",{"@attributes":{"id":"p-0062","num":"0061"},"figref":["FIG. 9","FIG. 9"],"i":["a ","b "],"b":["302","304","306","308","310","312","306","320","302","306","322","308","312","324","304","310","350","352","354","356","362","372"]},{"@attributes":{"id":"p-0063","num":"0062"},"figref":"FIG. 10","b":["400","401","402","406"]},"At step , the definition is pushed onto a stack associated with the symbol. Two counters, referred to herein as use count and use count threshold are initialized to a specified value (e.g., 1). At step , upon recursion the use count threshold is refreshed (described below). At step , the block is parsed for the presence of a use of the symbol in the block. If a use is found, processing continues at step . If no use is found, processing returns to step .","At step , an edge is wired from the use to the definition at the top of the stack associated with the symbol. At step , use count and use count threshold are incremented by a specified value (i.e., 1). At step , if there are no more blocks to traverse, processing continues at step . If there are more blocks to traverse, processing continues at step . At block , traversal proceeds upwards. The last block traversed is parsed at step . If a definition is found, processing continues at step . If no definition is found, the block is parsed for a use at step .","At step , the definition at the top of the renaming stack associated with the symbol is popped and the symbol may be assigned a register at step .","If a use is found at step , processing continues at step . If no use is found, processing continues at step . At step  the use count is decremented by a specified value (e.g., 1) and processing continues at step .","At step , the symbol may be assigned a register. The conflict set of the symbol to be assigned a register may be examined to determine a suitable register assignment. At step  the remaining live symbols may be determined. The symbol just assigned a register is added to the conflict set of the remaining live symbols at step . At step , it is determined if a join point has been encountered. If a join point has been encountered, processing continues at step . If a join point has not been encountered, processing continues at step . At step , dummy uses are added as described below and processing continues at step .","Because in the example straight line code is depicted, no dominance frontiers exist in the flowgraph of . There is only one route to each block. Referring now concurrently to , , and , at step  a block (block ) is traversed. As block  is traversed, a variable definition (A=) is found (step ) and pushed onto renaming stack a  (step ). Use count  and use count threshold  are initialized to 1 (step ). Because there are no uses in block  (step ), processing returns to step  and a new block (block ) is traversed.","As block  is traversed, a variable definition (B=) is found (step ) and pushed onto renaming stack b  (step ). Use count  and use count threshold  are initialized to 1 (step ). Because there are no uses in block , processing returns to step  and a new block (block ) is traversed.","As block  is traversed. In block , no definitions are found at step  so processing continues at step . At step  a use of A is found. Because a use is found the use of A is wired up to the definition of A  that is at the top of the renaming stack a  (step ). Use count  is incremented to   and use count threshold  is incremented to   (step ). Processing returns to step  and a new block (block ) is traversed.","As block  is traversed, a variable definition (C=) is found (step ) and pushed onto renaming stack c  (step ). Use count  and use count threshold  are initialized to 1 (step ). No use is found (step ) so processing returns to step  and a new block (block ) is traversed.","As block  is traversed, no definitions are found at step  so processing continues at step . At step  a use of B is found. Because a use is found the use of B is wired up to the definition of B  that is at the top of the renaming stack b  (step ). Use count  is incremented to   and use count threshold  is incremented to 2  (step ). Processing returns to step  and a new block (block ) is traversed.","As block  is traversed, no definitions are found at step  so processing continues at step . At step  a use of C is found. Because a use is found the use of C is wired up to the definition of C  that is at the top of the renaming stack c  (step ). Use count  is incremented to 2  and use count threshold  is incremented to 2  (step ).","Thus after descending all the way down the flowgraph to block , the following state exists:",{"@attributes":{"id":"p-0076","num":"0075"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"63pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"56pt","align":"center"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]},{"entry":[{},"A","B","C"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"63pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"56pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Use count","2","2","2"]},{"entry":[{},"Use count threshold","2","2","2"]},{"entry":[{},"Live?","no","no","no"]},{"entry":[{},"Explicit conflict set","\u2014","\u2014","\u2014"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]}]}}]}}},"Because there are no more blocks (step ) processing continues at step  and traversal proceeds upward (popping). The block just processed, block , is popped. At step , it is determined that there are no definitions in block , so processing continues at step . At step  it is determined that a use exists (=C). At step , use count  is decremented from 2 to 1 . Use count threshold  is unchanged () and processing continues at step  and block  is traversed.","Thus after popping block , the following state exists:",{"@attributes":{"id":"p-0079","num":"0078"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"63pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"56pt","align":"center"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]},{"entry":[{},"A","B","C"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"63pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"56pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Use count","2","2","1"]},{"entry":[{},"Use count threshold","2","2","2"]},{"entry":[{},"Live?","no","no","yes"]},{"entry":[{},"Explicit conflict set","\u2014","\u2014","\u2014"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]}]}}]}}},"The block  is popped. At step , it is determined that there are no definitions in block , so processing continues at step . At step  it is determined that a use exists (=B). At step , use count  is decremented from 2 to 1 . Use count threshold  is unchanged (). Processing continues at step  and block  is traversed.","Thus after popping block  the following states exist:",{"@attributes":{"id":"p-0082","num":"0081"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"63pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"56pt","align":"center"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]},{"entry":[{},"A","B","C"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"63pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"56pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Use count","2","1","1"]},{"entry":[{},"Use count threshold","2","2","2"]},{"entry":[{},"Live?","no","yes","yes"]},{"entry":[{},"Explicit conflict set","\u2014","\u2014","\u2014"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]}]}}]}}},"The block  is popped. At step , it is determined that there is a definition (C=) in block , so processing continues at step . The definition is popped from the renaming stack c . The conflict set of variable C  is empty. The definition (C=) is removed from stack c  and is assigned a register (r ) at step . At step  the top of the remaining renaming stacks, stacks a  and b  are examined. Variable A  is live if and only if use count  is less than use count threshold  and use count  is greater than zero. In this case use count  and use count threshold  are both 2 so variable A is not live. Variable B is live if and only if use count  is less than use count threshold  and use count  is greater than zero. In this case use count  is 1 and use count threshold  is 2 so variable B is live. Because variable B is live, it conflicts with the variable C so that variable B and variable C can never share the same register. (B does not have a register associated with it yet, therefore B is not present in variable C's conflict set  therefore any register was available for allocation to variable C.) At step  variable C is added to the conflict set of all live variables (variable B's conflict set ).","Thus after popping block  the following states exist:",{"@attributes":{"id":"p-0085","num":"0084"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"63pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"56pt","align":"center"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]},{"entry":[{},"A","B","C"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"63pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"56pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Use count","2","1","0"]},{"entry":[{},"Use count threshold","2","2","2"]},{"entry":[{},"Live?","no","yes","no"]},{"entry":[{},"Explicit conflict set","\u2014","C","\u2014"]},{"entry":[{},"Allocated register",{},{},"r1"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]}]}}]}}},"Processing continues at step . At step  block  is popped. Block  does not contain any definitions (step ) but it does contain a use of variable A (step ) so use count  is decremented by 1 (use count ). Use count threshold  is unchanged (use count threshold ).","Thus after popping block  the following states exist:",{"@attributes":{"id":"p-0088","num":"0087"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"63pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"56pt","align":"center"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]},{"entry":[{},"A","B","C"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"63pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"56pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Use count","1","1","0"]},{"entry":[{},"Use count threshold","2","2","2"]},{"entry":[{},"Live?","yes","yes","no"]},{"entry":[{},"Explicit conflict set","\u2014","C","\u2014"]},{"entry":[{},"Allocated register",{},{},"r1"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]}]}}]}}},"Processing continues at step . At step  block  is popped. Block  does not contain any uses (step ) but does contain a definition (B=). At step  a register may be allocated to variable B, but because variable C is in variable B's conflict set , register   will not be chosen. Instead another register, such as perhaps register  , may be assigned to B. At step  the top of the remaining renaming stacks, stack a  is examined. Variable A is live if and only if use count  is less than use count threshold  and use count  is greater than zero. In this case use count  is 1 and use count threshold  are 2 so variable A is live but no register has been allocated to it. At step  variable B is added to the conflict set of all live symbols (i.e., variable A's conflict set ).","Thus after popping block  the following states exist:",{"@attributes":{"id":"p-0091","num":"0090"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"63pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"56pt","align":"center"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]},{"entry":[{},"A","B","C"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"63pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"56pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Use count","1","0","0"]},{"entry":[{},"Use count threshold","2","2","2"]},{"entry":[{},"Live?","yes","no","no"]},{"entry":[{},"Explicit conflict set","B","C","\u2014"]},{"entry":[{},"Allocated register",{},"r2","r1"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]}]}}]}}},"Processing continues at step . At step  block  is popped. Block  does not contain any uses (step ) but does contain a definition (A=). At step  a register may be allocated to variable A, but because variable B is in variable A's conflict set , register   will not be chosen. Instead perhaps register   may be assigned to variable A. There are no remaining renaming stacks. At step , A is added to all currently live symbols but there are none.","Thus after popping block  the following states exist:",{"@attributes":{"id":"p-0094","num":"0093"},"tables":{"@attributes":{"id":"TABLE-US-00007","num":"00007"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"63pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"56pt","align":"center"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]},{"entry":[{},"A","B","C"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"63pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"56pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Use count","0","0","0"]},{"entry":[{},"Use count threshold","2","2","2"]},{"entry":[{},"Live?","no","no","no"]},{"entry":[{},"Explicit conflict set","B","C","\u2014"]},{"entry":[{},"Allocated register","r1","r2","r1"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]}]}}]}}},{"@attributes":{"id":"p-0095","num":"0094"},"figref":["FIG. 11","FIG. 9"],"i":["a ","b "],"b":["550","552","554"]},"As described above, when traversing block , definitions of variable A (A=) and B (B=) are found and pushed onto renaming stacks a  and b , use count  and  are initialized to 1, use count threshold  and  are initialized to 1. Thus, after traversing block , the following states exist:",{"@attributes":{"id":"p-0097","num":"0096"},"tables":{"@attributes":{"id":"TABLE-US-00008","num":"00008"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"63pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"56pt","align":"center"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]},{"entry":[{},"A","B","C"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"63pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"56pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Use count","1","1","0"]},{"entry":[{},"Use count threshold","1","1","0"]},{"entry":[{},"Live?","no","no","no"]},{"entry":[{},"Explicit conflict set","\u2014","\u2014","\u2014"]},{"entry":[{},"Allocated register"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]}]}}]}}},"When traversing block , a use of A is encountered, so use count  is incremented by 1 (use count ) and use count threshold  is incremented by 1 (use count threshold ) and edge  is drawn. After traversing block , the following states exist:",{"@attributes":{"id":"p-0099","num":"0098"},"tables":{"@attributes":{"id":"TABLE-US-00009","num":"00009"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"63pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"56pt","align":"center"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]},{"entry":[{},"A","B","C"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"63pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"56pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Use count","2","1","0"]},{"entry":[{},"Use count threshold","2","1","0"]},{"entry":[{},"Live?","no","no","no"]},{"entry":[{},"Explicit conflict set","\u2014","\u2014","\u2014"]},{"entry":[{},"Allocated register"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]}]}}]}}},"When traversing block , a use of B is encountered. Use count  is incremented by 1 (use count ) and use count threshold  is incremented by 1 (use count threshold ) and edge  is added. After traversing block , the following states exist:",{"@attributes":{"id":"p-0101","num":"0100"},"tables":{"@attributes":{"id":"TABLE-US-00010","num":"00010"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"63pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"56pt","align":"center"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]},{"entry":[{},"A","B","C"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"63pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"56pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Use count","2","2","0"]},{"entry":[{},"Use count threshold","2","2","0"]},{"entry":[{},"Live?","no","no","no"]},{"entry":[{},"Explicit conflict set","\u2014","\u2014","\u2014"]},{"entry":[{},"Allocated register"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]}]}}]}}},"When block  is popped. Use count  is decremented from 2 to 1 (use count ) but use count threshold  is unchanged (use count threshold ). Because block  is a join point (both blocks  and  lead to block ), at step  a dummy use of any existing live variables (in this case only variable B is live) in any blocks which are predecessors of block  that have not yet been visited. At least one of block 's predecessors (i.e., block ), has not been visited. Consequently, a dummy use is inserted for all live variables (variable B) in block . illustrates the flowgraph after block  is popped. In this case, an \u201c=B\u201d  is inserted in block . After popping block  the following states exist:",{"@attributes":{"id":"p-0103","num":"0102"},"tables":{"@attributes":{"id":"TABLE-US-00011","num":"00011"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"63pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"56pt","align":"center"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]},{"entry":[{},"A","B","C"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"63pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"56pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Use count","2","1","0"]},{"entry":[{},"Use count threshold","2","2","0"]},{"entry":[{},"Live?","no","yes","no"]},{"entry":[{},"Explicit conflict set","\u2014","\u2014","\u2014"]},{"entry":[{},"Allocated register"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]}]}}]}}},"When block  is popped, there are no definitions in the block, but there is a use of variable A. Use count  is decremented from 2 to 1 (use count ). After popping block , the following states exist:",{"@attributes":{"id":"p-0105","num":"0104"},"tables":{"@attributes":{"id":"TABLE-US-00012","num":"00012"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"63pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"56pt","align":"center"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]},{"entry":[{},"A","B","C"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"63pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"56pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Use count","1","1","0"]},{"entry":[{},"Use count threshold","2","2","0"]},{"entry":[{},"Live?","no","yes","no"]},{"entry":[{},"Explicit conflict set","\u2014","\u2014","\u2014"]},{"entry":[{},"Allocated register"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]}]}}]}}},"Next block  is traversed. Block  contains a definition of C so use count  and use count threshold  are initialized to 1. Because the traversal is a descent, use count thresholds are refreshed with their respective current use counts (step ). Use count threshold  is set to use count  and use count threshold  is set to use count . Therefore after updating the use count thresholds, the following states exist:",{"@attributes":{"id":"p-0107","num":"0106"},"tables":{"@attributes":{"id":"TABLE-US-00013","num":"00013"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"63pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"56pt","align":"center"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]},{"entry":[{},"A","B","C"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"63pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"56pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Use count","1","1","1"]},{"entry":[{},"Use count threshold","1","1","1"]},{"entry":[{},"Live?","no","no","no"]},{"entry":[{},"Explicit conflict set","\u2014","\u2014","\u2014"]},{"entry":[{},"Allocated register"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]}]}}]}}},"Next block  is traversed. Block  contains a usage of C and the dummy usage of B  that was added (). Use counts  and  are incremented by 1 to yield use counts  and . Use count thresholds  and  are incremented by 1 to yield use counts  and . Therefore, after the use count and use count threshold updates, the following states exist:",{"@attributes":{"id":"p-0109","num":"0108"},"tables":{"@attributes":{"id":"TABLE-US-00014","num":"00014"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"63pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"56pt","align":"center"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]},{"entry":[{},"A","B","C"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"63pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"56pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Use count","1","2","2"]},{"entry":[{},"Use count threshold","1","2","2"]},{"entry":[{},"Live?","no","yes","no"]},{"entry":[{},"Explicit conflict set","\u2014","\u2014","\u2014"]},{"entry":[{},"Allocated register"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]}]}}]}}},"Next block  is popped, decrementing the use count for both B and C. After decrementing the use counts, the following states exist:",{"@attributes":{"id":"p-0111","num":"0110"},"tables":{"@attributes":{"id":"TABLE-US-00015","num":"00015"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"63pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"56pt","align":"center"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]},{"entry":[{},"A","B","C"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"63pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"56pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Use count","1","1","1"]},{"entry":[{},"Use count threshold","1","2","2"]},{"entry":[{},"Live?","no","yes","yes"]},{"entry":[{},"Explicit conflict set","\u2014","\u2014","\u2014"]},{"entry":[{},"Allocated register"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]}]}}]}}},"Next, block  is popped. Because block  contains a definition (definition of variable C), a register is assigned to C. Variable B is live so C is added to the conflict set of B. After block  is popped, the following states exist:",{"@attributes":{"id":"p-0113","num":"0112"},"tables":{"@attributes":{"id":"TABLE-US-00016","num":"00016"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"63pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"56pt","align":"center"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]},{"entry":[{},"A","B","C"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"63pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"56pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Use count","1","1","0"]},{"entry":[{},"Use count threshold","1","2","2"]},{"entry":[{},"Live?","no","yes","no"]},{"entry":[{},"Explicit conflict set","\u2014","C","\u2014"]},{"entry":[{},"Register allocated",{},{},"r1"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]}]}}]}}},"Finally block  is popped. Block  contains definitions for A and B. When a register is assigned to A, B is live but does not yet have a register associated with it. Since the explicit conflict set of A is empty, A can be assigned register r and A is added to the explicit conflict set of B. A register is assigned to B. Registers used by the members of B's explicit conflict set (A and C) are not available for allocation to B, but register r may be assigned to B. After processing the following states exist:",{"@attributes":{"id":"p-0115","num":"0114"},"tables":{"@attributes":{"id":"TABLE-US-00017","num":"00017"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"56pt","align":"center"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]},{"entry":[{},"A","B","C"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"56pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Use count","0","0","0"]},{"entry":[{},"Use count threshold","1","2","2"]},{"entry":[{},"Live?","no","no","no"]},{"entry":[{},"Explicit conflict set","\u2014","A, C","\u2014"]},{"entry":[{},"Allocated register","r1","r2","r1"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]}]}}]}}},{"@attributes":{"id":"p-0116","num":"0115"},"figref":["FIG. 12","FIG. 12"],"b":["602","606","612","604","604","606","612","614"]},"It is noted that the foregoing examples have been provided merely for the purpose of explanation and are in no way to be construed as limiting of the present invention."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The foregoing summary, as well as the following detailed description of preferred embodiments, is better understood when read in conjunction with the appended drawings. For the purpose of illustrating the invention, there is shown in the drawings exemplary constructions of the invention; however, the invention is not limited to the specific methods and instrumentalities disclosed. In the drawings:",{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIGS. 1-6"},{"@attributes":{"id":"p-0038","num":"0037"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0039","num":"0038"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0040","num":"0039"},"figref":"FIG. 9","i":"a "},{"@attributes":{"id":"p-0041","num":"0040"},"figref":"FIG. 9","i":"b "},{"@attributes":{"id":"p-0042","num":"0041"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0043","num":"0042"},"figref":"FIG. 11","i":"a "},{"@attributes":{"id":"p-0044","num":"0043"},"figref":["FIG. 11","FIG. 11"],"i":["b ","a "],"b":"506"},{"@attributes":{"id":"p-0045","num":"0044"},"figref":"FIG. 11","i":"c "},{"@attributes":{"id":"p-0046","num":"0045"},"figref":"FIG. 12"}]},"DETDESC":[{},{}]}
