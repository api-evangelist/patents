---
title: Framework for creating user interfaces containing interactive and dynamic 3-D objects
abstract: An arrangement for creating a fully interactive user interface containing 3-D objects is provided by a suite of attached dependency properties in a single class that operates under the Windows Presentation Foundation (“WPF”) programming model. The framework for exposing such 3-D interactive functionality, named Facade 3-D, enables application developers to extend the existing functionality of WPF visual objects called FrameworkElements through mapping objects they have defined with 2-D visual trees to 3-D trees which contain arbitrary, application-defined 3-D models. Application users are enabled with highly-configurable ways to interact with the underlying source 2-D FrameworkElements vicariously through manipulation of their 3-D representations called “Facades.”
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07818690&OS=07818690&RS=07818690
owner: Microsoft Corporation
number: 07818690
owner_city: Redmond
owner_country: US
publication_date: 20070615
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DETAILED DESCRIPTION","AttachedPropertyProvider.PropertyName"],"p":["The Microsoft .NET Framework is a managed programming model for Microsoft Windows that includes Windows Presentation Foundation (\u201cWPF\u201d). WPF provides application developers with a unified programming model for building rich Windows smart client user experiences particularly including user interfaces (\u201cUIs\u201d) that make better use of current hardware and technologies. WPF provides a richer set of drawing features and performs considerably faster than its predecessor, the Win32-based UI graphics subsystem using Microsoft Windows Graphics Device Interface (\u201cGDI\u201d) and Microsoft Windows GDI+ which were originally developed more than 20 years ago.","WPF provides developers with a way to create applications having advanced UI graphics with fewer constraints in how graphical elements are controlled. WPF provides a library of commonly used, vector-drawn 2-D (two-dimension) shapes, such as rectangles and ellipses, which are not just shapes but are programmable elements that implement many of the features expected from most common controls including keyboard and mouse input. If the shapes in the library are not sufficient, WPF can support geometries and paths by which developers may create custom shapes, or use as drawing brushes, or use to clip other WPF elements.","WPF provides a library of 2-D classes that a developer may use to create a variety of effects. The 2-D rendering capability of WPF provides the ability to paint UI elements using brushes. Use of a \u201cVisual Brush,\u201d for example, enables a UI element to be painted with any visual tree. Those UI elements in the visual tree may be manipulated by using translation, rotation, scaling, and skewing. WPF further provides a set of 3-D (three-dimensional) rendering capabilities that integrate with 2-D graphics support in WPF so that developers can create interesting layouts, UIs, and data visualizations. The WPF 3-D implementation allows developers to draw, transform, and animate 3-D graphics in both mark-up and procedural code. Developers can combine 2-D and 3-D graphics to create rich controls, provide complex illustrations of data, or enhance the user experience of an application's interface.","While the WPF 3-D capabilities are well suited to many scenarios, the 3-D objects in a UI space are limited in that they are not interactive or dynamic in the same manner as their WPF 2-D counterparts. While an application developer can presently take a 2-D interface and place it on a 3-D surface, there is no currently supported functionality in WPF to enable interaction with that interface while in the 3-D space. For example, a UI might include some controls such as buttons, scroll bars, and text entry boxes. While WPF currently supports user interaction with the UI to enable the buttons to be pushed, scrolls bars to be used, and text to be entered by the application's user, such supported interaction ends once the interface is put into the 3-D space.","This Background is provided to introduce a brief context for the Summary and Detailed Description that follow. This Background is not intended to be an aid in determining the scope of the claimed subject matter nor be viewed as limiting the claimed subject matter to implementations that solve any or all of the disadvantages or problems presented above.","An arrangement for creating a fully interactive and dynamic UI containing 3-D objects is provided by a suite of attached dependency properties in a single static class that operates under the WPF programming model. The framework for exposing such 3-D interactive functionality, named Facade 3-D, enables application developers to extend the existing functionality of WPF interactive visual objects called FrameworkElements. This is accomplished by mapping FrameworkElements that comprise 2-D visual trees they have defined to 3-D objects with arbitrary 3-D geometry that are assembled into a parallel 3-D visual tree. Application users are enabled with highly-configurable ways to interact with the underlying source 2-D FrameworkElements vicariously through manipulation of their 3-D representations called \u201cFacades.\u201d","In an illustrative example, the mapping of the 2-D visual tree to the 3-D visual tree is effectuated using an interface comprising XAML-accessible (eXtensible Application Markup Language-accessible) static attached dependency properties that are definable by the application developer on the source FrameworkElements. Application developers may create interactive UIs in a typical manner for a 2-D WPF application by defining a variety of FrameworkElements, and then providing these objects with 3-D facades having interactive and visual properties that are controllable using the developer-defined attached dependency properties. Advantageously, very few new objects need to be explicitly defined by the application developer to fully specify the desired interactive 3-D functionality.","The 2-D visual tree hierarchies are utilized by the Facade 3-D framework to systematically construct and synchronize the structures of the corresponding 3-D visual trees. In addition, Facade 3-D further automatically moves the 2-D visuals of the source FrameworkElements off the display screen so that only the Facade 3-D geometry remains visible and available for interaction.","This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter, nor is it intended to be used as an aid in determining the scope of the claimed subject matter.","Like reference numerals indicate like elements in the drawings.","The primary WPF programming model is exposed through managed code classes in the WPF\/.NET application development environment that run on top of the common language runtime (\u201cCLR\u201d).  shows the major code components of the WPF architecture  which include a Presentation Framework , Presentation Core , and Milcore  (where \u201cMil\u201d stands for Media Integration Library). Of these components, only Milcore , which functions as the low-level WPF graphic composition engine, represents an unmanaged component. Milcore  is written in unmanaged code to enable tight integration with the DirectX APIs .","All UI display in WPF is done through the DirectX APIs  (application programming interfaces) to the kernel  to thereby communicate with the operating system and\/or graphic drivers etc., which thus allows for efficient hardware and software rendering. While the User32 library  is utilized to interact with various legacy elements, for example, to handle allocation of space to windows on the display, the DirectX APIs  renders all of the content inside the window.","The CLR  is the core runtime engine in the Microsoft .NET Framework for executing applications. The CLR  supplies the managed code components\u2014the Presentation Framework  and Presentation Core \u2014with services such as cross-language integration, code access security, object lifetime management, resource management, type safety, pre-emptive threading, metadata services (type reflection), and debugging and profiling support.","The Presentation Framework  sits at the top level in the WPF architecture  and provides a managed API that provides access to the underlying functionality. Many developers working in the WPF environment will work exclusively with this Presentation Framework . The framework includes a large number of standard controls (such as Button, Label, Menu), layout panels, 2-D and 3-D graphics and text primitives, support for imaging effects, media, animation and document services, and support for interoperability with GDI, DirectX and Windows Forms\/GDI+.","The Presentation Core  is a lower-level API in the WPF architecture  that enables interaction between the development framework provided by the managed Presentation Framework  and the unmanaged WPF graphics handling core comprised of Milcore  and the DirectX APIs . Most elements in WPF derive from a base Visual class which is exposed by the Presentation core  API. The Visual class is the base abstraction by which data is composited for output onto the screen and thus provides for building a tree of visual objects by WPF applications, where each visual tree optionally contains drawing instructions and metadata about how to render those instructions (clipping, transformation, etc.).","Visual objects in the Visual class are the core WPF objects whose primary role includes providing graphic rendering support. The Visual object provides support for output display, transformations, clipping, hit testing (i.e., determining whether a coordinate or geometry is contained within the bounds of the visual object), and bounding box calculations. However, the Visual object does not include support for non-rendering functions such as event handling, layout, styles, data binding, or globalization.",{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 2","b":["200","202","203"]},"The UIElement class  is a base class for WPF implementations that provides a starting point for element layout services, and also exposes virtual methods that derived classes can override, which can influence the layout rendering behavior of the element and its child elements. Much of the input and focusing behavior for elements in general is also defined in the UIElement class . This includes the events for the keyboard, mouse, and stylus input, and related status properties. The UIElement  also includes APIs that relate to the WPF event model, including methods that can raise specific routed events that are sourced from an element instance.","The FrameworkElement class  is the connecting point between WPF framework-level element classes and the WPF core-level set of UIElement presentation services. Accordingly, FrameworkElement  builds on the layout introduced by UIElement  and makes it easier for layout authors to have a consistent set of layout semantics. As noted above, it allows the developer to override the automatic layout functionality introduced by UIElement  by specifying alignment and layout properties for controls. In addition, two critical elements that FrameworkElement  introduces to the WPF are data binding, which enables application developers to bind and manipulate within applications, and styles, which are a set of properties applied to content used for visual rendering.","WPF 3-D views are composed within a Viewport3D  and typically use one or more objects to describe geometry, light sources, camera view, and material. Material is described using a property in WPF (properties are described below in more detail) which indicate the surface conditions of a 3-D model. If the property is empty, then the model is not visible in the UI. The Visual3D class  is the base class for all 3-D visual elements in WPF. The ModelVisual3D class  provides services and properties common to all 3-D visual objects, including hit testing and coordinating transformation.","WPF applications can be deployed on a desktop PC (personal computer) or hosted in a web browser, for example, and can provide very graphic-rich user experiences. WPF applications are typically built using a number of Extensible Application Markup Language (\u201cXAML,\u201d pronounced \u201cZAM-el\u201d) pages plus optional supporting code, called \u201ccode-behind.\u201d The XAML markup is utilized to declaratively set application properties, resources, and register events, while handling events and implementing the application-specific behavior in the code-behind.","At the core of all WPF applications is the Application object which operates in the Presentation Framework  (). The Application object forms the interface between the application and the operating system and enables the application to be managed as a collection of XAML pages.","A WPF application works by creating a tree of elements through the XAML markup and optional code-behind that becomes the application's \u201cvisual tree.\u201d The visual tree contains all the visual elements used in an application's UI. Since a visual element contains persisted drawing information, the visual tree may be thought of as a scene graph containing all of the rendering information needed to compose the output to a display device. The visual tree is thus the accumulation of all visual elements created directly by the application whether in markup or code. The visual tree also contains any visual elements that may be created through application of any templates.","As shown in , a simplified graphical representation of a visual tree  is created by a WPF application on a UI thread  in managed code in the Presentation Framework . The visual tree  is communicated via the Presentation Core  to the Milcore  over a communication channel  as a data structure where it is effectively replicated on a rendering thread  as a composition tree . Note that the visual tree  and composition tree  are not necessarily identical. For example, off-screen elements in the visual tree  may not be included in the composition tree .","The rendering thread  is responsible for traversing (i.e., \u201cwalking\u201d) the composition tree  and rendering the UI through the DirectX APIs . When an application wants to make a change to the displayed UI, the markup or code results in edits to the visual tree , for example by child elements being added or removed; the modifications to the visual tree  are sent as edits which are then reflected in the composition tree . The rendering thread  then re-composes and re-renders the changed portions of the UI, although it does not re-render some element's sub-trees in the composition tree  that, for example, are occluded in the UI display.","A WPF application utilizes a set of services which can be used to extend the functionality of a CLR property. Collectively, these services are known as the WPF property system. A property that is backed by the WPF property system is known as a dependency property.","The purpose of dependency properties is to provide a way to compute the value of a property based on the value of other inputs. These other inputs might include system properties such as themes and user preference, just-in-time property determination mechanisms such as data binding and animations\/storyboards, multiple-use templates such as resources and styles, or values known through parent-child relationships with other elements in an element tree.","In addition, a dependency property can be implemented to provide self-contained validation, default values, callbacks that monitor changes to other properties, and a system that can coerce property values based on potential runtime information. Derived classes can also change some specific characteristics of an existing property by overriding dependency property metadata, rather than overriding the actual implementation of existing properties or creating new properties.","The WPF property system further includes a metadata reporting system that goes beyond what can be reported about a property through reflection or CLR characteristics. Metadata for dependency properties can also be assigned uniquely by the class that defines a dependency property, and can be changed when the dependency property is added to a different class, and be specifically overridden by all derived classes that inherit the dependency property from the defining base class.","XAML defines a concept called an \u201cattached property\u201d which is intended to be used as a type of global property that is settable on any object. Under the WPF framework, most attached properties are implemented as dependency properties. Attached properties are set using the syntax:","Attached dependency properties are often created in order to have a property setting mechanism available for classes other than the defining (i.e., owning) class. The present framework for creating UIs containing 3-D objects uses attached dependency properties in another way in order to implement a service in which the Facade 3-D class represents a 3-D functionality service that is available to other WPF classes, in particular FrameworkElement. Using attached dependency properties in such a manner enables such classes to integrate the 3-D functionality service very transparently.","Accordingly, one of the main components of Facade 3-D is a single static WPF class that defines attached dependency properties and associated methods that are used to enhance implementations of existing instances of 2-D FrameworkElements to thereby enable a 3-D UI to incorporate much of the interactivity that is built into the UI provided by the underlying 2-D FrameworkElements. This aspect of the present arrangement advantageously enables WPF application developers to avoid needing to create custom 3-D objects or subclasses to re-implement such interactivity. Instead, they can leverage their existing FrameworkElement properties.","For example, if an application developer wants to create a 3-D object with button functionality, then, rather than creating code for button-like functions into a new 3-D object or subclass of an existing FrameworkElement, the developer can simply provide an existing instance of a WPF button with the Facade 3-D attached dependency properties. In most cases, this can be done purely with XAML without having to provide any code-behind. Use of such a technique advantageously enables application developers to develop complete and functional traditional 2-D UIs first, and then transform them into fully functional, interactive 3-D UIs later simply by defining certain attached properties on the original 2-D objects.",{"@attributes":{"id":"p-0045","num":"0044"},"figref":["FIGS. 4 and 5","FIG. 4","FIG. 4"],"b":["401","404","408","412","412","417"]},{"@attributes":{"id":"p-0046","num":"0045"},"figref":["FIG. 4","FIG. 4","FIG. 3","FIG. 4"],"i":"a ","b":["450","450","315","455","462","470","412","474"]},"Shown below is the application markup, expressed in XAML, that is associated with the UI shown in  and the 2-D visual tree  that is shown in . The markup is used to define the UI elements, data binding, eventing, and other features provided by the WPF framework as required to implement the illustrative 2-D UI shown.",{"@attributes":{"id":"p-0048","num":"0047"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<Grid>"},{"entry":"\u2002<Viewport3D Name=\u201cviewport\u201d>"},{"entry":"\u2003<Viewport3D.Camera>"},{"entry":"\u2003\u2002[define camera]"},{"entry":"\u2003<\/Viewport3D.Camera>"},{"entry":"\u2003<Viewport3D.Children>"},{"entry":"\u2003\u2002[define lighting visuals, and any static geometry]"},{"entry":"\u2003<\/Viewport3D.Children>"},{"entry":"\u2002<\/Viewport3D>"},{"entry":"\u2002<Grid>"},{"entry":"\u2003<ListBox ItemsSource=\u201c{StaticResource AlbumList}\u201d"},{"entry":"\u2003\u2003\u2003\u2009ItemTemplate=\u201c{StaticResource AlbumTemplate}\u201d>"},{"entry":"\u2003\u2002<ListBox.ItemContainerStyle>"},{"entry":"\u2003\u2003<Style>"},{"entry":"\u2003\u2003\u2002<Setter Property=\u201cWidth\u201d Value=\u201c50\u201d\/>"},{"entry":"\u2003\u2003\u2002<Setter Property=\u201cHeight\u201d Value=\u201c50\u201d\/>"},{"entry":"\u2003\u2003\u2002<Style.Triggers>"},{"entry":"\u2003\u2003\u2003<Trigger Property=\u201cIsSelected\u201d Value=\u201cTrue\u201d>"},{"entry":"\u2003\u2003\u2003\u2002<Trigger.EnterActions>"},{"entry":"\u2003\u2003\u2003\u2003<Storyboard>"},{"entry":"\u2003\u2003\u2003\u2003\u2002<DoubleAnimation TargetProperty=\u201cWidth\u201d To=\u201c75\u201d\/>"},{"entry":"\u2003\u2003\u2003\u2003\u2002<DoubleAnimation TargetProperty=\u201cHeight\u201d To=\u201c75\u201d\/>"},{"entry":"\u2003\u2003\u2003\u2003<\/Storyboard>"},{"entry":"\u2003\u2003\u2003\u2002<\/Trigger.EnterActions>"},{"entry":"\u2003\u2003\u2003\u2002<Trigger.ExitActions>"},{"entry":"\u2003\u2003\u2003\u2003<Storyboard>"},{"entry":"\u2003\u2003\u2003\u2003\u2002<DoubleAnimation TargetProperty=\u201cWidth\u201d To=\u201c50\u201d\/>"},{"entry":"\u2003\u2003\u2003\u2003\u2002<DoubleAnimation TargetProperty=\u201cHeight\u201d To=\u201c50\u201d\/>"},{"entry":"\u2003\u2003\u2003\u2003<\/Storyboard>"},{"entry":"\u2003\u2003\u2003\u2002<\/Trigger.ExitActions>"},{"entry":"\u2003\u2003\u2003<\/Trigger>"},{"entry":"\u2003\u2003\u2002<\/Style.Triggers>"},{"entry":"\u2003\u2003<\/Style>"},{"entry":"\u2003\u2002<\/ListBox.ItemContainerStyle>"},{"entry":"\u2003\u2002<ListBox.Triggers>"},{"entry":"\u2003\u2003<EventTrigger RoutedEvent=\u201cSelectionChanged\u201d>"},{"entry":"\u2003\u2003\u2002<Storyboard>"},{"entry":"\u2003\u2003\u2003<DoubleAnimation TargetProperty=\u201cOpacity\u201d From=\u201c0.7\u201d"},{"entry":"\u2003\u2003\u2003To=\u201c1.0\u201d\/>"},{"entry":"\u2003\u2003\u2002<\/Storyboard>"},{"entry":"\u2003\u2003<\/EventTrigger>"},{"entry":"\u2003\u2002<\/ListBox.Triggers>"},{"entry":"\u2003<\/ListBox>"},{"entry":"\u2003<Rectangle Background=\u201c{StaticResource WhiteDiscRadialBrush}\u201d"},{"entry":"\u2003\u2003\u2003\u2002Width=\u201c400\u201d Height=\u201c400\u201d\/>"},{"entry":"\u2002<\/Grid>"},{"entry":"<\/Grid>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"The markup below shows the original application XAML as enhanced by the present Facade 3D framework. The differences from the original 2-D application XAML are underlined.",{"@attributes":{"id":"p-0050","num":"0049"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<Grid>"},{"entry":"\u2002<Viewport3D Name=\u201cviewport\u201d>"},{"entry":"\u2003<Viewport3D.Camera>"},{"entry":"\u2003\u2002[define camera]"},{"entry":"\u2003<\/Viewport3D.Camera>"},{"entry":"<\u2003Viewport3D.Children>"},{"entry":"\u2003\u2002[define lighting visuals, and any static geometry]"},{"entry":"\u2003<\/Viewport3D.Children>"},{"entry":"\u2002<\/Viewport3D>"},{"entry":"\u2002<Grid "},{"entry":"\u2003<ListBox ItemsSource=\u201c{StaticResource AlbumList}\u201d"},{"entry":"\u2003\u2003\u2002ItemTemplate=\u201c{StaticResource AlbumTemplate}\u201d"},{"entry":"\u2003\u2003\u2002"},{"entry":"\u2003\u2003\u2002"},{"entry":"\u2003\u2002<ListBox.ItemContainerStyle>"},{"entry":"\u2003\u2003<Style>"},{"entry":"\u2003\u2003\u2002<Setter Property=\u201cWidth\u201d Value=\u201c50\u201d\/>"},{"entry":"\u2003\u2003\u2002<Setter Property=\u201cHeight\u201d Value=\u201c50\u201d\/>"},{"entry":"\u2003\u2003\u2002<\u201d"},{"entry":"\u2003\u2003\u2003\u2003\/>"},{"entry":"\u2003\u2003\u2002<"},{"entry":"\u2003\u2003\u2003\u2003\/>"},{"entry":"\u2003\u2003\u2002<\/>"},{"entry":"\u2003\u2003\u2002<>"},{"entry":"\u2003\u2003\u2002<>"},{"entry":"\u2003\u2003\u2002<Style.Triggers>"},{"entry":"\u2003\u2003\u2003<Trigger Property=\u201cIsSelected\u201d Value=\u201cTrue\u201d>"},{"entry":"\u2003\u2003\u2003\u2002<Trigger.EnterActions>"},{"entry":"\u2003\u2003\u2003\u2003<Storyboard>"},{"entry":"\u2003\u2003\u2003\u2003\u2002<DoubleAnimation TargetProperty=\u201cWidth\u201d To=\u201c75\u201d\/>"},{"entry":"\u2003\u2003\u2003\u2003\u2002<DoubleAnimation TargetProperty=\u201cHeight\u201d To=\u201c75\u201d\/>"},{"entry":"\u2003\u2003\u2003\u2003\u2002<>"},{"entry":"\u2003\u2003\u2003\u2003\u2002<>"},{"entry":"\u2003\u2003\u2003\u2003<\/Storyboard>"},{"entry":"\u2003\u2003\u2003\u2002<\/Trigger.EnterActions>"},{"entry":"\u2003\u2003\u2003\u2002<Trigger.ExitActions>"},{"entry":"\u2003\u2003\u2003\u2003<Storyboard>"},{"entry":"\u2003\u2003\u2003\u2003\u2002<DoubleAnimation TargetProperty=\u201cWidth\u201d To=\u201c50\u201d\/>"},{"entry":"\u2003\u2003\u2003\u2003\u2002<DoubleAnimation TargetProperty=\u201cHeight\u201d To=\u201c50\u201d\/>"},{"entry":"\u2003\u2003\u2003\u2003\u2002<>"},{"entry":"\u2003\u2003\u2003\u2003\u2002<>"},{"entry":"\u2003\u2003\u2003\u2003<\/Storyboard>"},{"entry":"\u2003\u2003\u2003\u2002<\/Trigger.ExitActions>"},{"entry":"\u2003\u2003\u2003<\/Trigger>"},{"entry":"\u2003\u2003\u2002<\/Style.Triggers>"},{"entry":"\u2003\u2003<\/Style>"},{"entry":"\u2003\u2002<\/ListBox.ItemContainerStyle>"},{"entry":"\u2003\u2002<ListBox.Triggers>"},{"entry":"\u2003\u2003<EventTrigger RoutedEvent=\u201cSelectionChanged\u201d>"},{"entry":"\u2003\u2003\u2002<Storyboard>"},{"entry":"\u2003\u2003\u2003<DoubleAnimation TargetProperty=\u201cOpacity\u201d From=\u201c0.7\u201d To=\u201c1.0\u201d\/>"},{"entry":"\u2003\u2003\u2003<"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\/>"},{"entry":"\u2003\u2003\u2002<\/Storyboard>"},{"entry":"\u2003\u2003<\/EventTrigger>"},{"entry":"\u2003\u2002<\/ListBox.Triggers>"},{"entry":"\u2003<\/ListBox>"},{"entry":"\u2003<Rectangle Background=\u201c{StaticResource WhiteDiscRadialBrush}\u201d"},{"entry":"\u2003\u2003\u2003\u2002\u2009Width=\u201c400\u201d Height=\u201c400\u201d"},{"entry":"\u2003\u2003\u2003\u2002\u2009"},{"entry":"\u2003\u2003\u2003\u2002\u2009"},{"entry":"\u2003\u2003\u2003\u2002\u2009\/>"},{"entry":"\u2002<\/Grid>"},{"entry":"<\/Grid>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"The utilization of the Facade 3-D enhanced application XAML shown above results in a UI having fully interactive 3-D objects as shown by the illustrative screenshot  in . In this particular illustrative example of Facade 3-D, no application-level code-behind is used.","The 3-D UI uses the same CD jewel boxes (indicated by reference numeral  in ) as are used in the illustrative WPF 2-D UI shown in . But rather than simply scrolling along in a flat, linear window in response to user input, the CD objects  rotate in a 3-D carousel arrangement . When a user selects a particular CD object  through a mouse click anywhere on the 3-D facade, the carousel is animated to rotate and then the selected CD object moves from its position in the carousel to a front and center position as shown by CD object  (which has its graphic artwork represented by the letter \u201cG\u201d). When another CD object  is selected by the user in the UI, the previously selected CD object moves from its front and center position back to a slot in the carousel . Keyboard functionality is also maintained from the 2-D example shown in  because the underlying 2-D visual tree is persisted.",{"@attributes":{"id":"p-0053","num":"0052"},"figref":["FIG. 5A","FIG. 3"],"b":["550","501","550","315","550","555"]},"FrameworkElements may implement a facade through definition of a Facade3D.Visual3DTemplate that uses a ModelVisual3D object containing a template of a desired 3-D geometry. Examples of this technique are shown by the ListBox control  that uses RackVisual, the Rectangle control  that uses xyPlaneVisual, and ListBoxItem \u20141, 2 . . . N that use CubeVisual. ModelVisual3D templates may be specified as resources, for example, in a ModelVisual3D repository at the application level.","The markup below shows several illustrative examples of ModelVisual3D template objects. Such objects could be stored, for example, in a general purpose ModelVisual3D repository.",{"@attributes":{"id":"p-0056","num":"0055"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<ModelVisual3D (\u201cCubeVisual\u201d)>"},{"entry":"\u2003<ModelVisual3D.Content>"},{"entry":"\u2003\u2003<Model3DGroup>"},{"entry":"\u2003\u2003\u2003<GeometryModel3D (Face1 - Front Face)>"},{"entry":"\u2003\u2003\u2003\u2003<GeometryModel3D.Geometry>"},{"entry":"\u2003\u2003\u2003\u2003\u2003[quad mesh for plane with appropriate positions, normals,"},{"entry":"\u2003\u2003\u2003\u2003\u2003texture coordinates, and triangle indices]"},{"entry":"\u2003\u2003\u2003\u2003<\/GeometryModel3D.Geometry>"},{"entry":"\u2003\u2003\u2003\u2003<GeometryModel3D.Transform>"},{"entry":"\u2003\u2003\u2003\u2003\u2003[transformation to location of front face]"},{"entry":"\u2003\u2003\u2003\u2003<\/GeometryModel3D.Transform>"},{"entry":"\u2003\u2003\u2003\u2003<GeometryModel3D.Material>"},{"entry":"\u2003\u2003\u2003\u2003\u2003<MaterialGroup>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003..."},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003<DummyMaterial (changed to DiffuseMaterial"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003with VisualBrush by Facade3D)\/>"},{"entry":"\u2003\u2003\u2003\u2003\u2003<\/MaterialGroup>"},{"entry":"\u2003\u2003\u2003\u2003<\/GeometryModel3D.Material>"},{"entry":"\u2003\u2003\u2003<\/GeometryModel3D>"},{"entry":"\u2003\u2003\u2003<GeometryModel3D (Face2 - Back Face)>"},{"entry":"\u2003\u2003\u2003\u2003[quad geometry, with appropriate transformation]"},{"entry":"\u2003\u2003\u2003<\/GeometryModel3D>"},{"entry":"\u2003\u2003\u2003<GeometryModel3D (Face3 - Left Face)>"},{"entry":"\u2003\u2003\u2003\u2003[quad geometry, with appropriate transformation]"},{"entry":"\u2003\u2003\u2003<\/GeometryModel3D>"},{"entry":"\u2003\u2003\u2003<GeometryModel3D (Face4 - Right Face)>"},{"entry":"\u2003\u2003\u2003\u2003[quad geometry, with appropriate transformation]"},{"entry":"\u2003\u2003\u2003<\/GeometryModel3D>"},{"entry":"\u2003\u2003\u2003<GeometryModel3D (Face5 - Top Face)>"},{"entry":"\u2003\u2003\u2003\u2003[quad geometry, with appropriate transformation]"},{"entry":"\u2003\u2003\u2003<\/GeometryModel3D>"},{"entry":"\u2003\u2003\u2003<GeometryModel3D (Face6 - Bottom Face)>"},{"entry":"\u2003\u2003\u2003\u2003[quad geometry, with appropriate transformation]"},{"entry":"\u2003\u2003\u2003<\/GeometryModel3D>"},{"entry":"\u2003\u2003<\/Model3DGroup>"},{"entry":"\u2003<\/ModelVisual3D.Content>"},{"entry":"<\/ModelVisual3D>"},{"entry":"<Model Visual3D (\u201cCylinderVisual\u201d)>"},{"entry":"\u2003<ModelVisual3D Content>"},{"entry":"\u2003\u2003<Model3DGroup>"},{"entry":"\u2003\u2003\u2003<GeometryModel3D"},{"entry":"\u2003\u2003\u2003\u2003<GeometryModel3D.Geometry>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2009[cylinder mesh with appropriate positions, normals,"},{"entry":"\u2003\u2003\u2003\u2003\u2003texture coordinates, and triangle indices]"},{"entry":"\u2003\u2003\u2003\u2003<GeometryModel3D.Geometry>"},{"entry":"\u2003\u2003\u2003\u2003<GeometryModel3D.Material>"},{"entry":"\u2003\u2003\u2003\u2003\u2003<MaterialGroup>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003..."},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003<DummyMaterial (changed to DiffuseMaterial"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003with VisualBrush by Facade3D)\/>"},{"entry":"\u2003\u2003\u2003\u2003\u2003<\/MaterialGroup>"},{"entry":"\u2003\u2003\u2003\u2003<\/GeometryModel3D.Material>"},{"entry":"\u2003\u2003\u2003<GeometryModel3D>"},{"entry":"\u2003\u2003<Model3DGroup>"},{"entry":"\u2003<ModelVisual3D Content>"},{"entry":"<ModelVisual3D>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"Other ModelVisual3D template objects may include application-specific ModelVisual3D templates. An illustrative example is shown below.",{"@attributes":{"id":"p-0058","num":"0057"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<ModelVisual3D (\u201cRackVisual\u201d)>"]},{"entry":[{},"\u2003<ModelVisual3D.Children>"]},{"entry":[{},"\u2003\u2003<ModelVisual3D (\u201cCylinderVisual\u201d)>"]},{"entry":[{},"\u2003\u2003\u2003<ModelVisual3D.Transform>"]},{"entry":[{},"\u2003\u2003\u2003\u2003[inner ring size\/position]"]},{"entry":[{},"\u2003\u2003\u2003<\/ModelVisual3D.Transform>"]},{"entry":[{},"\u2003\u2003<\/ModelVisual3D>"]},{"entry":[{},"\u2003\u2003<ModelVisual3D (\u201cCylinderVisual\u201d)>"]},{"entry":[{},"\u2003\u2003\u2003<ModelVisual3D.Transform>"]},{"entry":[{},"\u2003\u2003\u2003\u2003[outer ring size\/position]"]},{"entry":[{},"\u2003\u2003\u2003<\/ModelVisual3D.Transform>"]},{"entry":[{},"\u2003\u2003<\/ModelVisual3D>"]},{"entry":[{},"\u2003<\/ModelVisual3D.Children>"]},{"entry":[{},"<\/ModelVisual3D>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"The Facade 3-D framework generates a suite of 3-D transformations having six degrees-of-freedom with scaling (the \u201c6 D-O-F Transformation Stack\u201d) using an ordered transformation stack, and assigns the transformation stack to the ModelVisual3D that makes up the Facade3D.Visual3D. These transformations are:","Theta-Pre-translation rotation around Y","AngOfElev-Pre-translation rotation around X","Translation-X, Y, Z","Yaw-Rotation around Y","Pitch-Rotation around X","Roll-Rotation around Z","Scale-X, Y, Z","The following are the attached dependency properties exposed by the Facade 3-D framework that are each configured to map to a transformation:","Facade3D.Theta","Facade3D.AngOfElev","Facade3D.Translation\n\n","Facade3D.Yaw","Facade3D.Pitch","Facade3D.Roll","Facade3D.Scale\n\n","By setting and animating these properties, 3-D facades applied to FrameworkElements can be controlled using six degrees of freedom, plus scale.","These properties may also be controlled within current WPF Bindings, Style Setters, Triggers, etc. just like any other property on the source FrameworkElement. Moreover, controlling these properties using WPF Styles that package 3-D functionality in a reusable way is a particularly advantageous feature provided by the present Facade 3-D framework. For example, the rotating 3-D rings used by the carousel  () may use a ListBox Style named OrbitListStyle that packages this functionality and which may be used by other FrameworkElements operating in the UI.","The markup below shows the 6-DOF Transformation Stack expressed in XAML, with bindings to Facade 3-D attached properties underlined:",{"@attributes":{"id":"p-0078","num":"0083"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"287pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<Transform3DGroup"},{"entry":"\u2003<Transform3DGroup.Children>"},{"entry":"\u2003\u2003<!--Scale-->"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["\u2003\u2003\u2003<ScaleTransform3D","ScaleX=[Binding To ]"]},{"entry":[{},"ScaleY=[Binding To ]"]},{"entry":[{},"ScaleZ=[Binding To ]\/>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"287pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2003\u2003\u2003<!--Roll-->"},{"entry":"\u2003\u2003\u2003<RotateTransform3D>"},{"entry":"\u2003\u2003\u2003\u2003<RotateTransform3D.Rotation>"},{"entry":"\u2003\u2003\u2003\u2003\u2003<AxisAngleRotation3D Axis=\u201d0,0,1\u201d Angle=[Binding To ] \/>"},{"entry":"\u2003\u2003\u2003\u2003<\/RotateTransform3D.Rotation>"},{"entry":"\u2003\u2003\u2003<\/RotateTransform3D>"},{"entry":"\u2003\u2003\u2003<!--Pitch-->"},{"entry":"\u2003\u2003\u2003<RotateTransform3D>"},{"entry":"\u2003\u2003\u2003\u2003<RotateTransform3D.Rotation>"},{"entry":"\u2003\u2003\u2003\u2003\u2003<AxisAngleRotation3D Axis=\u201d1,0,0\u201d Angle=[Binding To ] \/>"},{"entry":"\u2003\u2003\u2003\u2003<\/RotateTransform3D.Rotation>"},{"entry":"\u2003\u2003\u2003<\/RotateTransform3D>"},{"entry":"\u2003\u2003\u2003<!--Yaw-->"},{"entry":"\u2003\u2003\u2003<RotateTransform3D>"},{"entry":"\u2003\u2003\u2003\u2003<RotateTransform3D.Rotation>"},{"entry":"\u2003\u2003\u2003\u2003\u2003<AxisAngleRotation3D Axis=\u201d0,1,0\u201d Angle=[Binding To ] \/>"},{"entry":"\u2003\u2003\u2003\u2003<\/RotateTransform3D.Rotation>"},{"entry":"\u2003\u2003\u2003<\/RotateTransform3D>"},{"entry":"\u2003\u2003\u2003<--Radial transformation-->"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["\u2003\u2003\u2003<TranslateTransform3D","OffsetX=[Binding To ]"]},{"entry":[{},"OffsetY=[Binding To ]"]},{"entry":[{},"OffsetZ=[Binding To ] \/>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"287pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2003\u2003\u2003<!--Angle of Elevation-->"},{"entry":"\u2003\u2003\u2003<RotateTransform3D>"},{"entry":"\u2003\u2003\u2003\u2003<RotateTransform3D.Rotation>"},{"entry":"\u2003\u2003\u2003\u2003\u2003<AxisAngleRotation3D Axis=\u201d1,0,0\u201d Angle=[Binding To ]\/>"},{"entry":"\u2003\u2003\u2003\u2003<\/RotateTransform3D.Rotation>"},{"entry":"\u2003\u2003\u2003<\/RotateTransform3D>"},{"entry":"\u2003\u2003\u2003<!--Theta-->"},{"entry":"\u2003\u2003\u2003<RotateTransform3D>"},{"entry":"\u2003\u2003\u2003\u2003<RotateTransform3D.Rotation>"},{"entry":"\u2003\u2003\u2003\u2003\u2003<AxisAngleRotation3D Axis=\u201d0,1,0\u201d Angle=[Binding To ] \/>"},{"entry":"\u2003\u2003\u2003\u2003<\/RotateTransform3D.Rotation>"},{"entry":"\u2003\u2003\u2003<\/RotateTransform3D>"},{"entry":"\u2003<Transform3DGroup.Children>"},{"entry":"<Transform3DGroup>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"At runtime, the Facade 3-D framework facilitates the generation of an application 3-D visual tree that is comprised of objects which are sourced from the application XAML, in combination with objects sourced from a ModelVisual3D repository, and the Facade 3-D framework itself. The application visual tree using XAML-like expression is shown in the Appendix.",{"@attributes":{"id":"p-0080","num":"0085"},"figref":"FIGS. 6","i":["a","b","c","d "],"b":["6","6","6"]},"As noted above, the 3-D visual tree follows the 2-D structure for the source FrameworkElements that define the 3-D facades. Accordingly, the 3-D visual tree is assembled initially and constantly synchronized during application runtime to be responsive to changes in 2-D application visual tree.","As shown in , when the Facade 3-D framework is initialized (), the static Facade 3-D attached dependency properties are declared (), and the framework further subscribes to property changed events for many of the declared attached dependency properties by the addition of WPF PropertyChangedCallbacks to the property metadata ().","As shown in , when a \u201cViewport3D\u201d Facade 3-D attached dependency property is defined on a FrameworkElement (), the Facade 3-D framework subscribes to the Viewport3D object's WPF PreviewGotKeyboardFocus event () and all mouse events from the Viewport3D (). In addition, the 2-D visual tree rooted at the defining FrameworkElement is translated off-screen () so that only the 3-D geometry is displayed, and not the defining 2-D source elements.","As noted above, a 3-D facade may be specified by defining a Facade3D.Visual3DTemplate to be a ModelVisual3D object that contains the template of the 3-D geometry. Accordingly as shown in , when the Visual3DTemplate Facade 3-D attached dependency property is defined on a FrameworkElement (), the Facade 3-D framework clones the specified ModelVisual3D template () for example, from the general purpose repository as described above. The Facade3D.Visual3D is set to the cloned ModelVisual3D ().","Similarly, as shown in , when a Facade3D.Material attached dependency property is defined on a FrameworkElement (), the Facade 3-D framework sets the Facade3D.Material to the specified reference on the element in the 3-D application visual tree ().","As shown in , when a Facade3D.Visual3D attached dependency property is defined on a FrameworkElement (), the Facade 3-D framework subscribes to the defining element's Loaded event () and Unloaded event (). This enables synchronization of the 2-D and 3-D application visual trees as shown below.",{"@attributes":{"id":"p-0087","num":"0092"},"figref":"FIG. 12","b":["1200","1205"]},"Continuing with the description of , in further response to a Loaded event, the Facade 3-D framework will also assign a clone of the 6-DOF Transformation Stack to the defining FrameworkElement's counterpart ModelVisual3D (). Properties within the 6-DOF Transformation Stack are initialized with the corresponding Facade 3-D property values that are set in the application XAML (). The Facade 3-D framework creates two-way bindings between the defining FrameworkElement's Facade 3-D transformation properties (e.g., Facade3D.Yaw) and the corresponding properties of objects in the ModelVisual3D's transformation stack ().","The Loaded and Unloaded events correspond respectively to nodes being added and removed from the application visual tree. Therefore, when a source 2-D FrameworkElement is Loaded, its ModelVisual3D facade is \u201cattached\u201d to the ModelVisual3D facade of its nearest ancestor that also has a 3-D facade defined (), by adding the ModelVisual3D facade to the Children list of that element.","Likewise, as shown in , when the source 2-D Framework Element is Unloaded (), the FrameworkElement's ModelVisual3D facade is removed from the application 3-D visual tree ().","There are basic properties of FrameworkElements that make them dynamic, interactive, and controllable. The Facade 3-D framework utilizes and, in some cases, may transfer these properties onto the 3-D facades that these FrameworkElements define.","One such property is handling input as shown in . Facade 3-D accomplishes mouse interaction with the 3-D facades by intercepting and handling mouse events captured on their 3-D geometry (), and performing 3-D hit tests () to determine which ModelVisual3D was hit.","Facade 3-D is able to perform these steps in code defined within event handlers that are attached to the Viewport3D containing the 3-D tree when these Facade 3-D properties are defined. After determining which ModelVisual3D was hit by the mouse, Facade 3-D iterates up the 3-D tree in order to identify the ModelVisual3D that was defined as the corresponding Facade 3-D visual of some 2-D FrameworkElement counterpart (). Finally, Facade 3-D re-raises the captured mouse event on this source 2-D FrameworkElement counterpart (). These steps enable application users to interact with the 3-D geometry that comprise the 3-D facades using the mouse vicariously as though they are interacting with the 2-D source FrameworkElements themselves.","Another property that FrameworkElements may have is keyboard focus (\u201cfocus\u201d refers generally to the object in the UI which is currently receiving input from, in this case, the keyboard). The 2-D source FrameworkElements that have these Facade 3-D properties defined still exist in the application's visual tree, so focus is handled just as with any FrameworkElement.","As a result, there is an inherent notion of \u201cfocus\u201d that these FrameworkElements can maintain. As indicated in , Facade 3-D properties may respond to focus events () just as any other dependency properties could (). For example, if an application developer desires, the 3-D geometry can be scaled up, rotated into place, or moved closer to the screen using a WPF Trigger once the source FrameworkElement receives focus. WPF handles all the logic for transfer of focus itself, since the 3-D geometry is associated with the FrameworkElement in the application visual tree.",{"@attributes":{"id":"p-0096","num":"0101"},"figref":"FIG. 16","b":["1600","1605"]},{"@attributes":{"id":"p-0097","num":"0102"},"figref":"FIG. 17","b":["1700","1705"]},"The events and respective actions shown in , and described in the accompanying text, are summarized in the Event-Action table and , respectively shown in and ","Although the subject matter has been described in language specific to structural features and\/or methodological acts, it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather, the specific features and acts described above are disclosed as example forms of implementing the claims.",{"@attributes":{"id":"p-0100","num":"0105"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"thead":{"row":[{"entry":"APPENDIX"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<Grid>"},{"entry":"\u2003<Viewport3D>"},{"entry":"\u2003\u2002<Viewport3D.Camera>"},{"entry":"\u2003\u2003[define camera]"},{"entry":"\u2003\u2002<\/Viewport3D.Camera>"},{"entry":"\u2003\u2002<Viewport3D.Children>"},{"entry":"\u2003\u2003[define lighting visuals, and any static geometry]"},{"entry":"\u2003\u2003<ModelVisual3D (\u201cRackVisual\u201d)>"},{"entry":"\u2003\u2003\u2002<ModelVisual3D.Transform>"},{"entry":"\u2003\u2003\u2003<... \/>"},{"entry":"\u2003\u2003\u2003<... \/>"},{"entry":"\u2003\u2003\u2003<... \/>"},{"entry":"\u2003\u2003\u2003<... \/>"},{"entry":"\u2003\u2003\u2003<TranslateTransform3D OffsetX=\u201c...\u201d"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003OffsetY=\u201c1.0\u201d"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003OffsetZ=\u201c...\u201d \/>"},{"entry":"\u2003\u2003\u2003<... \/>"},{"entry":"\u2003\u2003\u2003<RotateTransform3D (Theta)>"},{"entry":"\u2003\u2003\u2003\u2002<RotateTransform3D.Rotation>"},{"entry":"\u2003\u2003\u2003\u2003<AxisAngleRotation3D Axis=\u201c0,1,0\u201d Angle=\u201c{Binding}\u201d \/>"},{"entry":"\u2003\u2003\u2003\u2002<\/RotateTransform3D.Rotation>"},{"entry":"\u2003\u2003\u2002\u2009<\/RotateTransform3D>"},{"entry":"\u2003\u2003\u2002<\/ModelVisual3D.Transform>"},{"entry":"\u2003\u2003\u2002<ModelVisual3D.Content>"},{"entry":"\u2003\u2003\u2003[rack geometry]"},{"entry":"\u2003\u2003\u2002<\/ModelVisual3D.Content>"},{"entry":"\u2003\u2003\u2002<ModelVisual3D.Children>"},{"entry":"\u2003\u2003\u2003<ModelVisual3D (\u201cCubeVisual\u201d)>"},{"entry":"\u2003\u2003\u2003\u2002<ModelVisual3D.Transform>"},{"entry":"\u2003\u2003\u2003\u2003<ScaleTransform3D ScaleX=\u201c\u201d"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003ScaleY=\u201c\u201d"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003ScaleZ=\u201c0.1\u201d \/>"},{"entry":"\u2003\u2003\u2003\u2003..."},{"entry":"\u2003\u2003\u2003\u2003<RotateTransform3D (Yaw)>"},{"entry":"\u2003\u2003\u2003\u2003\u2002<RotateTransform3D.Rotation>"},{"entry":"\u2003\u2003\u2003\u2003\u2003<AxisAngleRotation3D Axis=\u201c0,1,0\u201d Angle=\u201c{Binding}\u201d \/>"},{"entry":"\u2003\u2003\u2003\u2003\u2002<\/RotateTransform3D.Rotation>"},{"entry":"\u2003\u2003\u2003\u2003<\/RotateTransform3D>"},{"entry":"\u2003\u2003\u2003\u2003<TranslateTransform3D OffsetX=\u201c...\u201d"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003OffsetY=\u201c{Binding}\u201d"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003OffsetZ=\u201c\u22122.0\u201d \/>"},{"entry":"\u2003\u2003\u2003\u2003..."},{"entry":"\u2003\u2003\u2003\u2002<\/ModelVisual3D.Transform>"},{"entry":"\u2003\u2003\u2003\u2002<ModelVisual3D.Content>"},{"entry":"\u2003\u2003\u2003\u2003<Model3DGroup>"},{"entry":"\u2003\u2003\u2003\u2003\u2002<GeometryModel3D (Face1)>"},{"entry":"\u2003\u2003\u2003\u2003\u2003<GeometryModel3D.Geometry>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2002[quad mesh]"},{"entry":"\u2003\u2003\u2003\u2003\u2003<\/GeometryModel3D.Geometry>"},{"entry":"\u2003\u2003\u2003\u2003\u2003<GeometryModel3D.Transform>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2002[translation to location of front face]"},{"entry":"\u2003\u2003\u2003\u2003\u2003<\/GeometryModel3D.Transform>"},{"entry":"\u2003\u2003\u2003\u2003\u2003<GeometryModel3D.Material>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2002<MaterialGroup>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003..."},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003<DiffuseMaterial>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2002<DiffuseMaterial.Brush>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003<VisualBrush>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2002<VisualBrush.Visual>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003<ListBoxItem Width=\u201c50\u201d Height=\u201c50\u201d Content=[List Item 0]>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2002..."},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2002[This is the content of the entire UI tree representing"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2002the first list Album item in the AlbumList]"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003<\/ListBoxItem>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2002<\/VisualBrush.Visual>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003<\/VisualBrush>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2002<\/DiffuseMaterial.Brush>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003<\/DiffuseMaterial>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2002<\/MaterialGroup>"},{"entry":"\u2003\u2003\u2003\u2003\u2003<\/GeometryModel3D.Material>"},{"entry":"\u2003\u2003\u2003\u2003\u2002<\/GeometryModel3D>"},{"entry":"\u2003\u2003\u2003\u2003\u2002<GeometryModel3D (Face2)>"},{"entry":"\u2003\u2003\u2003\u2003\u2003[quad geometry]"},{"entry":"\u2003\u2003\u2003\u2003\u2002<\/GeometryModel3D>"},{"entry":"\u2003\u2003\u2003\u2003\u2002... [GeometryModel3Ds for cube faces 3-6]"},{"entry":"\u2003\u2003\u2003\u2003\u2002<\/GeometryModel3D>"},{"entry":"\u2003\u2003\u2003\u2003\u2002<GeometryModel3D (Face6)>"},{"entry":"\u2003\u2003\u2003\u2003\u2003[quad geometry]"},{"entry":"\u2003\u2003\u2003\u2003\u2002<\/GeometryModel3D>"},{"entry":"\u2003\u2003\u2003\u2003<\/Model3DGroup>"},{"entry":"\u2003\u2003\u2003\u2002<\/ModelVisual3D.Content>"},{"entry":"\u2003\u2003\u2003<\/ModelVisual3D>"},{"entry":"\u2003\u2003\u2003<ModelVisual3D (\u201cCubeVisual\u201d)>"},{"entry":"\u2003\u2003\u2003\u2002[analogous visual for cube representing 2nd item from AlbumList]"},{"entry":"\u2003\u2003\u2003<\/ModelVisual3D>"},{"entry":"\u2003\u2003\u2003<ModelVisual3D (\u201cCubeVisual\u201d)>"},{"entry":"\u2003\u2003\u2003\u2002[analogous visual for cube representing 3nd item from AlbumList]"},{"entry":"\u2003\u2003\u2003<\/ModelVisual3D>"},{"entry":"\u2003\u2003\u2003..."},{"entry":"\u2003\u2003\u2003ModelVisual3D \u00d7 N"},{"entry":"\u2003\u2003\u2003[a cube ModelVisual3D object is generated"},{"entry":"\u2003\u2003\u2003for each N items in AlbumList; each cube displays"},{"entry":"\u2003\u2003\u2003the visuals of its corresponding list item on its"},{"entry":"\u2003\u2003\u2003front face]"},{"entry":"\u2003\u2003\u2002<\/ModelVisual3D.Children>"},{"entry":"\u2003\u2003<\/ModelVisual3D>"},{"entry":"\u2003\u2003<ModelVisual3D (\u201cxyPlaneVisual\u201d)>"},{"entry":"\u2003\u2003\u2002<ModelVisual3D.Transform>"},{"entry":"\u2003\u2003\u2003..."},{"entry":"\u2003\u2003\u2003<RotateTransform3D (Pitch)>"},{"entry":"\u2003\u2003\u2003\u2002<RotateTransform3D.Rotation>"},{"entry":"\u2003\u2003\u2003\u2003<AxisAngleRotation3D Axis=\u201c1,0,0\u201d Angle=\u201c90\u201d \/>"},{"entry":"\u2003\u2003\u2003\u2002<\/RotateTransform3D.Rotation>"},{"entry":"\u2003\u2003\u2002<\/RotateTransform3D>"},{"entry":"\u2003\u2003\u2002..."},{"entry":"\u2003\u2003<\/ModelVisual3D.Transform>"},{"entry":"\u2003\u2003<ModelVisual3D.Content>"},{"entry":"\u2003\u2003\u2002<Model3DGroup>"},{"entry":"\u2003\u2003\u2003\u201cGeometryModel3D>"},{"entry":"\u2003\u2003\u2003\u2002<GeometryModel3D.Geometry>"},{"entry":"\u2003\u2003\u2003\u2003[xy plane mesh]"},{"entry":"\u2003\u2003\u2003\u2002<\/GeometryModel3D.Geometry>"},{"entry":"\u2003\u2003\u2003\u2002<GeometryModel3D.Material>"},{"entry":"\u2003\u2003\u2003\u2003<MaterialGroup>"},{"entry":"\u2003\u2003\u2003\u2003\u2002..."},{"entry":"\u2003\u2003\u2003\u2003\u2002<DiffuseMaterial>"},{"entry":"\u2003\u2003\u2003\u2003\u2003<DiffuseMaterial.Brush>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2002<VisualBrush>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003<VisualBrush.Visual>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2002<Rectangle Background=\u201c{StaticResource WhiteDiscRadialBrush}\u201d\/>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2002[This is the same rectangle as in the application's visual tree]"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003<\/VisualBrush.Visual>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2002<\/VisualBrush>"},{"entry":"\u2003\u2003\u2003\u2003\u2003<\/DiffuseMaterial.Brush>"},{"entry":"\u2003\u2003\u2003\u2003\u2002<\/DiffuseMaterial>"},{"entry":"\u2003\u2003\u2003\u2003<\/MaterialGroup>"},{"entry":"\u2003\u2003\u2003\u2002<\/GeometryModel3D.Material>"},{"entry":"\u2003\u2003\u2003<\/GeometryModel3D>"},{"entry":"\u2003\u2003\u2002<\/Model3DGroup>"},{"entry":"\u2003\u2003<\/ModelVisual3D.Content>"},{"entry":"\u2003\u2002<\/ModelVisual3D>"},{"entry":"\u2003<\/Viewport3D.Children>"},{"entry":"\u2002<\/Viewport3D>"},{"entry":"\u2002<Grid>"},{"entry":"\u2003<Grid.RenderTransform>"},{"entry":"\u2003\u2002<TranslateTransform X=\u201c[some value > app width]\u201d\/>"},{"entry":"\u2003<\/Grid.RenderTransform>"},{"entry":"\u2003[entire 2D UI from original tree]"},{"entry":"\u2002<\/Grid>"},{"entry":"<\/Grid>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":["FIG. 4","FIG. 4"],"i":"a "},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":["FIG. 5","FIG. 5"],"i":"a "},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIGS. 6","i":["a","b","c","d "],"b":["6","6","6"]},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIGS. 7-17"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIGS. 18","i":["a ","b "],"b":"18"}]},"DETDESC":[{},{}]}
