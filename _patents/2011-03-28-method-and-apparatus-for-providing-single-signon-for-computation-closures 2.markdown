---
title: Method and apparatus for providing single sign-on for computation closures
abstract: An approach is provided for providing single sign-on for computation closures. A single sign-on management platform determines to create a single sign-on computation closure in response to an initiation of a single sign-on authentication session. The single sign-on management platform also determines one or more computation entities that are to execute at least one other computation closure under the single sign-on authentication session. The single sign-on management platform further causes, at least in part, a transfer of the single sign-on computation closure to the one or more computation entities.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09536074&OS=09536074&RS=09536074
owner: NOKIA TECHNOLOGIES OY
number: 09536074
owner_city: Espoo
owner_country: FI
publication_date: 20110328
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["RELATED APPLICATIONS","BACKGROUND","SOME EXAMPLE EMBODIMENTS","DESCRIPTION OF SOME EMBODIMENTS"],"p":["This application claims the benefit of the earlier filing date under 35 U.S.C. \u00a7119(e) of U.S. Provisional Application Ser. No. 61\/447,207 filed Feb. 28, 2011, entitled \u201cMethod and Apparatus for Providing Single Sign-on for Computation Closures,\u201d the entirety of which is incorporated herein by reference.","Mobile devices with various methods of connectivity are now for many people becoming the primary gateway to the internet and also a major storage point for personal information. This is in addition to the normal range of personal computers and furthermore sensor devices plus internet based providers. Combining these devices together and lately the applications and the information stored by those applications is a major challenge of interoperability. This can be achieved through numerous, individual and personal information spaces in which persons, groups of persons, etc. can place, share, interact and manipulate (or program devices to automatically perform the planning, interaction and manipulation of) webs of information with their own locally agreed semantics without necessarily conforming to an unobtainable, global whole.","Furthermore, in addition to information, the information spaces may be combined with webs of shared and interactive computations or computation spaces so that the devices having connectivity to the computation spaces can have the information in the information space manipulated within the computation space environment and the results delivered to the device, rather than the whole process being performed locally in the device. It is noted that such computation spaces may consist of connectivity between devices, from devices to network infrastructure, to distributed information spaces so that computations can be executed where enough computational elements are available. These combined information spaces and computation spaces often referred to as computation clouds, are extensions of the \u2018Giant Global Graph\u2019 in which one can apply semantics and reasoning at a local level.","In one example, clouds are working spaces respectively embedded with distributed information and computation infrastructures spanned around computers, information appliances, processing devices and sensors that allow people to work efficiently through access to information and computations from computers or other devices. An information space or a computation space can be rendered by the computation devices physically presented as heterogeneous networks (wired and wireless). However, despite the fact that information and computation presented by the respective spaces can be distributed with different granularity, still there are challenges in certain example implementations to achieve scalable high context information processing within such heterogeneous environments. For example, in various implementations, due to distributed nature of the cloud, data, information, and computation elements (e.g., computation closures) are being exchanged among distributed devices within heterogeneous network environments wherein information with various levels of granularity and various structures is provided by and transmitted among various independent sources. In such environments, unique authentication and context validation for information, computation closures and computation entities at development time and at runtime, by unique signatures, throughout the distributed environment of the computation architecture is a very important issue.","Therefore, there is a need for an approach for providing single sign-on for computation closures, in order to be able to uniquely authenticate the computations and the entities executing the computations.","According to one embodiment, a method comprises determining to create a single sign-on computation closure in response to an initiation of a single sign-on authentication session. The method also comprises determining one or more computation entities that are to execute at least one other computation closure under the single sign-on authentication session. The method further comprises causing, at least in part, a transfer of the single sign-on computation closure to the one or more computation entities.","According to another embodiment, an apparatus comprises at least one processor, and at least one memory including computer program code, the at least one memory and the computer program code configured to, with the at least one processor, cause, at least in part, the apparatus to determine to create a single sign-on computation closure in response to an initiation of a single sign-on authentication session. The apparatus is also caused to determine one or more computation entities that are to execute at least one other computation closure under the single sign-on authentication session. The apparatus is further caused to cause, at least in part, a transfer of the single sign-on computation closure to the one or more computation entities.","According to another embodiment, a computer-readable storage medium carries one or more sequences of one or more instructions which, when executed by one or more processors, cause, at least in part, an apparatus to determine to create a single sign-on computation closure in response to an initiation of a single sign-on authentication session. The apparatus is also caused to determine one or more computation entities that are to execute at least one other computation closure under the single sign-on authentication session. The apparatus is further caused to cause, at least in part, a transfer of the single sign-on computation closure to the one or more computation entities.","According to another embodiment, an apparatus comprises means for determining to create a single sign-on computation closure in response to an initiation of a single sign-on authentication session. The apparatus also comprises means for determining one or more computation entities that are to execute at least one other computation closure under the single sign-on authentication session. The apparatus further comprises means for causing, at least in part, a transfer of the single sign-on computation closure to the one or more computation entities.","In addition, for various example embodiments of the invention, the following is applicable: a method comprising facilitating a processing of and\/or processing (1) data and\/or (2) information and\/or (3) at least one signal, the (1) data and\/or (2) information and\/or (3) at least one signal based, at least in part, on (or derived at least in part from) any one or any combination of methods (or processes) disclosed in this application as relevant to any embodiment of the invention.","For various example embodiments of the invention, the following is also applicable: a method comprising facilitating access to at least one interface configured to allow access to at least one service, the at least one service configured to perform any one or any combination of network or service provider methods (or processes) disclosed in this application.","For various example embodiments of the invention, the following is also applicable: a method comprising facilitating creating and\/or facilitating modifying (1) at least one device user interface element and\/or (2) at least one device user interface functionality, the (1) at least one device user interface element and\/or (2) at least one device user interface functionality based, at least in part, on data and\/or information resulting from one or any combination of methods or processes disclosed in this application as relevant to any embodiment of the invention, and\/or at least one signal resulting from one or any combination of methods (or processes) disclosed in this application as relevant to any embodiment of the invention.","For various example embodiments of the invention, the following is also applicable: a method comprising creating and\/or modifying (1) at least one device user interface element and\/or (2) at least one device user interface functionality, the (1) at least one device user interface element and\/or (2) at least one device user interface functionality based at least in part on data and\/or information resulting from one or any combination of methods (or processes) disclosed in this application as relevant to any embodiment of the invention, and\/or at least one signal resulting from one or any combination of methods (or processes) disclosed in this application as relevant to any embodiment of the invention.","In various example embodiments, the methods (or processes) can be accomplished on the service provider side or on the mobile device side or in any shared way between service provider and mobile device with actions being performed on both sides.","For various example embodiments, the following is applicable: An apparatus comprising means for performing the method of any of originally filed claims -, -, and -.","Still other aspects, features, and advantages of the invention are readily apparent from the following detailed description, simply by illustrating a number of particular embodiments and implementations, including the best mode contemplated for carrying out the invention. The invention is also capable of other and different embodiments, and its several details can be modified in various obvious respects, all without departing from the spirit and scope of the invention. Accordingly, the drawings and description are to be regarded as illustrative in nature, and not as restrictive.","Examples of a method, apparatus, and computer program for providing single sign-on for computation closures are disclosed. In the following description, for the purposes of explanation, numerous specific details are set forth in order to provide a thorough understanding of the embodiments of the invention. It is apparent, however, to one skilled in the art that the embodiments of the invention may be practiced without these specific details or with an equivalent arrangement. In other instances, well-known structures and devices are shown in block diagram form in order to avoid unnecessarily obscuring the embodiments of the invention.","As used herein, the term \u201ccomputation closure\u201d identifies a particular computation procedure together with relations and communications among various processes including passing arguments, sharing process results, flow of data and process results, etc. The computation closures (e.g., a granular reflective set of instructions, data, and\/or related execution context or state) provide the capability of slicing of computations for processes and transmitting the computation slices between devices, infrastructures and information sources.","As used herein, the term \u201ccloud\u201d refers to an aggregated set of information and computation closures from different sources. This multi-sourcing is very flexible since it accounts and relies on the observation that the same piece of information or computation can come from different sources. In one embodiment, information and computations within the cloud are represented using Semantic Web standards such as Resource Description Framework (RDF), RDF Schema (RDFS), OWL (Web Ontology Language), FOAF (Friend of a Friend ontology), rule sets in RuleML (Rule Markup Language), etc. Furthermore, as used herein, RDF refers to a family of World Wide Web Consortium (W3C) specifications originally designed as a metadata data model. It has come to be used as a general method for conceptual description or modeling of information and computations that is implemented in web resources; using a variety of syntax formats. Although various embodiments are described with respect to clouds, it is contemplated that the approach described herein may be used with other structures and conceptual description methods used to create distributed models of information and computations.",{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 1"},"The basic concept of cloud computing technology provides access to distributed computations for various devices within the scope of the cloud, in such a way that the distributed nature of the computations is hidden from users and it appears to a user as if all the computations are performed on the same device. The cloud computing also enables a user to have control over computation distribution by transferring computations between devices that the user has access to. For example, a user may want to transfer computations among work devices, home devices, and portable devices, other private and public devices, etc. Current technologies enable a user of a mobile device to manipulate contexts such as data and information via the elements of a user interface of their user equipment. However, distribution of computations and processes related to or acting on the data and information within the cloud is typically controlled by the system. In other words, a cloud in general does not provide a user (e.g., an owner of a collection of information distributed over the information space) with the ability to control distribution of related computations and processes of, for instance, applications acting on the information. For example, a contact management application that processes contact information distributed within one or more clouds generally executes on a single device (e.g., with all processes and computations of the application also executing on the same device) to operate on the distributed information. In some cases (e.g., when computations are complex, the data set is large, etc.), providing a means to also distribute the related computations in addition to the information is advantageous.","This goal is achieved by introduction of the capability to construct, distribute, and aggregate computations as well as their related data. More specifically, to enable a user of a cloud (e.g., a mobile device user, an application developer, etc.) who connects to the cloud via one or more devices, to distribute computations among the one or more user devices or other devices with access to the cloud, each computation is deconstructed to its basic or primitive processes or computation closures. Once a computation is divided into its primitive computation closures, the processes within or represented by each closure may be executed in a distributed fashion and the processing results can be collected and aggregated into the result of the execution of the initial overall computation.","In one embodiment, a distributed computational architecture consists of a plurality of architectural levels such as, for example, a device level, and infrastructure level, a cloud computing level, etc. A device from the device level has connectivity to the cloud computing level via one or more infrastructure levels, wherein each infrastructure level may consist of layers and components such as backbones, routers, base stations, etc. Typically, the computation closures associated with a process related to a device from device level are defined, constructed, and executed within other computing levels which may have various levels of distribution as well. However, components of a distributed architectural environment each may differ in configuration, communication capability, policies applied in terms of ownership, privacy and security of distributed computations, etc.","In one embodiment, a distributed computation architecture includes mechanism for secure dispersing, processing and assembling of computations around a number of physical or logical components by associating signatures to the computations. The closures may be signed and those signatures utilized for providing secure means for communication between devices, devices to infrastructures, or infrastructures to clouds. Signatures are entities that are generated by means of isomorphic transformations thus represent domain independent fragments that could be interpreted in some cases as at least meaningful information sets. Furthermore, distribution, access and execution of computation closures among components and levels of a distributed architectural environment may require compatibility among policies and rules of security imposed by various components and levels of architecture.","In one embodiment, different components of each architectural level support different types of closures with different levels and\/or types of security defined, enforced, or a combination thereof. Each component (e.g. infrastructure component, node) may have a number of previously created secure entities, closures, links, and distribution paths for the distribution and execution of the computation closures such as connectors between closures, multiple branches, interaction points, rules, etc., that can significantly affect the efficiency of distribution and execution of computations and security of the computations in distributed architectures.","In one embodiment, the computations can be transferred and\/or expanded from one component to another or from an architectural level to another (e.g. from infrastructure to cloud). Components and levels of distributed computation architectures may be equipped with signature mechanisms in order to sign computations and verify signatures by other components to ensure computation security. For example, computations signed by unknown or unapproved entities may be regarded as illegitimate. However, various signature mechanisms may be based on different rules, verification methods, encoding and decoding mechanisms, etc.","Therefore, there is a challenge to authenticate computation closures and computation entities in a distributed computation environment when each closure and\/or each computation entity may have a different signature mechanism or verification method.","To address this problem, a system  of  introduces the capability to provide single sign-on for computation closures and computation entities. A computational architecture environment consists of different levels of proactive computational entities available for various levels of the computational architecture. Since these computational entities provide various levels of functionality for each of the levels of the architecture, providing different levels of distribution of the computational closures within the computational architecture enables the execution of the computational closures after the least required level of distribution. However, a very important functionality for execution of computational closures is to detect, identify, and determine computation security and to ensure security of computational closures, by creating compatibility among various types and levels of existing security measures at each part of the distributed computational architecture and to determine secure paths for the distribution of computations.","In one embodiment, a cloud may include a superset of closure elements (e.g. closure primitives) while other computation entities may have subsets of, and therefore the cloud may be capable of supporting computational closures and their security more effectively compared to other entities.","In one embodiment, device setup at various architectural levels such as security settings, quality of service (QOS) settings, class of service (COS) settings, priority settings etc., may affect direction and method of computational closure distribution, as different setups may lead to different situations and different available secure distribution paths and requirement. Additionally, computation closures' security can be indirectly affected by other features of architectural levels such as privacy settings, security enforcement strategies for computational entities, etc. On the other hand, ensuring secure distribution between different architectural levels and components can be achieved by different levels of computation distribution.","In one embodiment, certain amount of computation functionality can be transferred among levels and components of distributed computation architecture. For example, for computations associated with a public device that is used commonly by multiple users, a strict security measure may not be necessary, while private and confidential computations may require more advanced security measures (e.g. signatures).","In another embodiment, when a computation entity has a limited security support capability, the computations may be transferred to a next nearest entity with higher security capabilities where computation can continue, and redistributed to the cloud level if there is no entity with sufficient security support capability. It is noted that different device setups, limits and configurations may change the direction of computation closure distribution, as security support capability can be different.","In one embodiment, operations can be performed to determine and compare security of computation closure processes and security capabilities of computation entities. It can also be determined where it is more cost effective to transfer computation closures to, what the acceptable range of security for one or a group of computation closures is (taking into account other capabilities relevant for the computation such as privacy levels and rules, energy issues like battery vs. main power plug connection, etc). Furthermore, each signature can be associated with a security level so that proper signatures can be assigned to computations based on their security requirements.","In one embodiment, in a distributed computation environment any process within a run time environment can be captured, analyzed and sliced into particular pieces (computation closures) for further execution within remote run time environments.","In another embodiment, a single sign-on (SSO) mechanism may be adopted so that computation closures and functional flows can be identified by unique signatures throughout the distributed environment of the distributed computation architecture. In this embodiment, a computation closure or a set of computation closures may be associated with a signature, wherein the signature is known and is verifiable by multiple components and levels of architecture throughout the environment of the distributed computation structure.","In another embodiment, components and levels of the distributed computation architectures (e.g. computation entities) can be encrypted, for example using an algorithm, providing single sign-on signatures unique to the signed computation entities. Such signatures can be decomposed and recombined for further analysis and reasoning within encrypted domain so that isomorphic transformation between original and encrypted domains is preserved.","In one embodiment, signing computation entities with unique signatures based on a single sign-on mechanism, wherein the single sign-on is verifiable throughout a distributed computation environment, provides secure and flexible mechanisms for authentication of distributed computation entities as well as distributed computations (e.g., computation closures).","As shown in , the system  comprises a set  of user equipments (UEs) -having connectivity to single sign-on management platform  via a communication network . By way of example, the communication network  of system  includes one or more networks such as a data network (not shown), a wireless network (not shown), a telephony network (not shown), or any combination thereof. It is contemplated that the data network may be any local area network (LAN), metropolitan area network (MAN), wide area network (WAN), a public data network (e.g., the Internet), short range wireless network, or any other suitable packet-switched network, such as a commercially owned, proprietary packet-switched network, e.g., a proprietary cable or fiber-optic network, and the like, or any combination thereof. In addition, the wireless network may be, for example, a cellular network and may employ various technologies including enhanced data rates for global evolution (EDGE), general packet radio service (GPRS), global system for mobile communications (GSM), Internet protocol multimedia subsystem (IMS), universal mobile telecommunications system (UMTS), etc., as well as any other suitable wireless medium, e.g., worldwide interoperability for microwave access (WiMAX), Long Term Evolution (LTE) networks, code division multiple access (CDMA), wideband code division multiple access (WCDMA), wireless fidelity (WiFi), wireless LAN (WLAN), Bluetooth\u00ae, Internet Protocol (IP) data casting, satellite, mobile ad-hoc network (MANET), and the like, or any combination thereof","The UEs -are any type of mobile terminal, fixed terminal, or portable terminal including a mobile handset, station, unit, device, multimedia computer, multimedia tablet, Internet node, communicator, desktop computer, laptop computer, notebook computer, netbook computer, tablet computer, personal communication system (PCS) device, personal navigation device, personal digital assistants (PDAs), audio\/video player, digital camera\/camcorder, positioning device, television receiver, radio broadcast receiver, electronic book device, game device, or any combination thereof, including the accessories and peripherals of these devices, or any combination thereof. It is also contemplated that the UE  can support any type of interface to the user (such as \u201cwearable\u201d circuitry, etc.).","In one embodiment, the UEs -are respectively equipped with one or more user interfaces (UI) -. Each UI -may consist of several UI elements (not shown) at any time, depending on the service that is being used. UI elements may be icons representing user contexts such as information (e.g., music information, contact information, video information, etc.), functions (e.g., setup, search, etc.) and\/or processes (e.g., download, play, edit, save, etc.). These contexts may require certain sets of media dependent computational closures, which may affect the service, for example the bit error rate, etc. Additionally, each UI element may be bound to a context\/process by granular distribution. In one embodiment, granular distribution enables processes to be implicitly or explicitly migrated between devices, computation clouds, and other infrastructure.","In one embodiment, process distribution can be initiated for example by means of unicast (e.g., to just another device) or multicast (e.g., to multiple other devices). For example one UE  may communicate with many infrastructures (or many components of many infrastructures), while many nodes of infrastructures may communicate with multiple clouds. Additionally, process distribution may be triggered via gesture recognition, wherein the user preselects a particular set of UI elements and makes a gesture to simulate \u201cpouring\u201d the selected UE elements from one device to another. In other embodiments, process distribution may be initiated automatically without direct user involvement and based on default setup by the manufacturer of the UE -, previous setup by the user of the UE, default setup in an application activated on or associated with a UE -, or a combination thereof.","As seen in , a user of UEs -may own, use, or otherwise have access to various pieces of information and computations distributed over one or more computation clouds -in information stores -and computation stores -where each of the one or more computation spaces -include multiple sets of one or more computation closures. In one embodiment, the user may be an application developer that uses a UE -to connect to the infrastructure and the cloud not only for accessing the services provided for end users but also for activities such as developing, distributing, processing, and aggregating various computations.","In one embodiment, the single sign-on management platform  controls and manages the signing, authentication and signature validation of computations in the computation stores -of clouds -, associated with UEs -and of computation entities (not shown) which are components (e.g. processing units) of the distributed computation environment executing the computations.","In one embodiment, authentication of computations and computation entities may be initiated by the user, or based on a background activity for example by triggering a sequence of computation closures which in turn support distribution process. Prior to computation distribution the capabilities, including the security capabilities of computation entities performing the computations, are evaluated based on the single sign-on mechanism. If the authenticity of an entity cannot be approved, the evaluation may fail and the computation distribution to the entity may be terminated. The distribution flow to the entity may also be blocked so that further computations are not directed to the entity.","In one embodiment, no differentiation is distinguished between authentication of computations in development time and run time of the computation. The single sign-on management platform  provides early validation (at component level before the distribution) and contextual validation, wherein closure capabilities (e.g. energy consumption, security elements, privacy rules, etc.) can be represented as data. Additionally, the single sign-on management platform  may determine if certain entities have been modified so that all signatures associated with that entity can be evaluated and if necessary, isolated and marked as invalid.","In one embodiment, computation entities may be components of a network infrastructure (not shown) accessible by the UEs -and by clouds -via the communication network .","By way of example, the UEs -, the single sign-on management platform  communicate with each other and other components of the communication network  using well known, new or still developing protocols. In this context, a protocol includes a set of rules defining how the network nodes within the communication network  interact with each other based on information sent over the communication links. The protocols are effective at different layers of operation within each node, from generating and receiving physical signals of various types, to selecting a link for transferring those signals, to the format of information indicated by those signals, to identifying which software application executing on a computer system sends or receives the information. The conceptually different layers of protocols for exchanging information over a network are described in the Open Systems Interconnection (OSI) Reference Model.","Communications between the network nodes are typically effected by exchanging discrete packets of data. Each packet typically comprises (1) header information associated with a particular protocol, and (2) payload information that follows the header information and contains information that may be processed independently of that particular protocol. In some protocols, the packet includes (3) trailer information following the payload and indicating the end of the payload information. The header includes information such as the source of the packet, its destination, the length of the payload, and other properties used by the protocol. Often, the data in the payload for the particular protocol includes a header and payload for a different protocol associated with a different, higher layer of the OSI Reference Model. The header for a particular protocol typically indicates a type for the next protocol contained in its payload. The higher layer protocol is said to be encapsulated in the lower layer protocol. The headers included in a packet traversing multiple heterogeneous networks, such as the Internet, typically include a physical (layer 1) header, a data-link (layer 2) header, an internetwork (layer 3) header and a transport (layer 4) header, and various application (layer 5, layer 6 and layer 7) headers as defined by the OSI Reference Model.",{"@attributes":{"id":"p-0061","num":"0060"},"figref":"FIG. 2","b":["201","203","205","207","209","211"]},{"@attributes":{"id":"p-0062","num":"0061"},"figref":["FIG. 2","FIG. 3","FIG. 3","FIG. 10","FIG. 3"],"b":["300","300","301","201","201","111","111"],"i":["a","n "]},"In step  of , the setup module  determines one or more computation entities that are to execute at least one other computation closure under the single sign-on authentication session. The one or more computation entities may be components of the distributed computation environment, including devices -, execution components associated with clouds -, or any entities with processing capabilities having connectivity to UEs -and clouds -via the communication network .","In one embodiment, the at least one other computation closure may be computation closures related to one or more processes associated with a service provided to the users of UEs -within the environment of distributed computation. In other embodiments, the at least one computation closures may be any computations performed by the components of a distributed computation environment such as, for example, system procedures.","Per step  of , the setup module  causes, at least in part, transfer of the single sign-on computation closure to the one or more computation entities. In one embodiment, transfer of the single sign-on computation closure is propagated to the determined computation entities or to any computation entities involved in current user session.","In one embodiment, the single sign-on computation closure may be given a high priority level for the computation entities so that the computation entities receiving the single sign-on computation closure are required to be signed before being permitted to execute the one or more other closures associated with the session. In one embodiment, the computation entities may switch to a waiting mode to wait to be signed. In other embodiments, the computation entities may communicate with the single sign-on management platform requesting a signature.","In one embodiment, per step  of , the setup module  causes, at least in part, a signing of the single sign-on computation closure for authentication of the single sign-on computation closure to the one or more computation entities. The signing of the single sign-on computation closure ensures the authentication of the single sign-on closure so that the computation entities receiving the single sign-on closure would know that the single sign-on closure was generated by a trusted source.","In one embodiment, per step  of , the authentication module  executes and\/or facilitates execution of the single sign-on computation closure to sign the one or more computation entities, wherein the signing of the one or more computation entities authenticates the one or more computation entities for operation under the single sign-on authentication session. The authentication module  may verify the signature of the single sign-on computation closure to verify the authentication of the single sign-on prior to the execution of the single sign-on closure for signing the one or more computation entities. The execution of the single sign-on closure causes the computation entities to be signed with a unique single sign-on signature which is common among all the computation entities involved in the session.","In one embodiment, per step  of , the computation validation module  processes and\/or facilitates a processing of the single sign-on computation closure to validate the at least one other computation closure executing at the one or more computation entities. In one embodiment, one or more other computation closures associated with one or more processes of UE -or one or more processes of clouds -, or a combination thereof, which may be stored at a local storage of the UEs -(not shown) or at the computation stores -, or a combination thereof, may be assigned to one or more computation entities for execution. In this embodiment, the computation validation module  validates the computation closures by verifying the single sign-on signatures associated with the computation entities.","In one embodiment, if at least one other computation closure is not validated, per step  of , the computation validation module  per step  causes, at least in part, a stopping of an execution of the at least one other computation closure at the one or more computation entities. Otherwise, if no invalid closures are determined, the execution will continue until it is completed.","In one embodiment, upon completion of the execution of other computation closures by the computation entities, per step  of  the single sign-on closure generator  may cause, at least in part, reuse of the single sign-on computation closure for signing of the one or more computation entities under one or more subsequent single sign-on authentication sessions. In one embodiment, the single sign-on closure generator  may store the used single sign-on closure, for example in storage , for further use for subsequent sessions. The reuse of single sign-on closures may increase the signing efficiency, especially for processes with frequent recurring computations and involving a specified set of computation entities.","In one embodiment, upon the completion of the execution of one or more other computation closures, the signature revocation module  determines a termination of the single sign-on authentication session (per step ). In this embodiment, the end of session may be determined by the computation entities executing the one or more other computation closures upon completion of the execution, by the user upon receiving the computation results, or a combination thereof. The signature revocation module  may also cause, at least in part, a revocation of the signing of the one or more computation entities. Although it may not be necessary for the single sign-on computation closure to be deleted or somehow invalidated\/deactivated after the session is closed, but in one embodiment, per step  of , the signature revocation module  may clean up the signed computation entities from any obsolete and\/or outdated signatures. The clean up process may increase the efficiency of the single sign-on mechanism and reduce the amount of storage used for signature related data.",{"@attributes":{"id":"p-0073","num":"0072"},"figref":["FIGS. 4A-4B","FIG. 4A","FIG. 4A"],"b":["401","111","107","107","401","403","407","107","107","405","405","409","403","5","407","403","3","4","401","405","405","107","1","107","2","3","4","107","107","413","413","111","415","415","413","413","417","417","401"],"i":["a ","b ","a ","b ","a ","b","a ","b ","a ","b ","a ","b ","a ","b ","a","e ","a","b "]},"In one embodiment, the backend device  may be equipped with a closure recycling and marshaling component  that monitors and manages any access to the computation closures store . In other embodiments the closure recycling and marshaling (i.e. standardization for uniform use) may be a function of the single sign-on management platform .","In one embodiment, the computation closures within environments , and the computation closures store  may be composed based on anonymous function objects and automatically created by a compiling system using methods for generating anonymous function objects such as lambda expressions.",{"@attributes":{"id":"p-0076","num":"0075"},"figref":["FIG. 4B","FIG. 4A","FIG. 1","FIG. 2","FIG. 3"],"b":["413","413","413","423","107","107","423","103","1","423","449","423","449","441"]},"In another embodiment, the computation closure environment  has a developer experience module  that provides various tools for a developer for manipulating services offered by the UE . The tools may include standardized and\/or abstract data types and services allowing the developers to chain processes together across development platforms. In one embodiment, the developer experience module  provides cross platform support for abstract data types and services under the supervision of a single sign-on management platform  as discussed in . The agent Agent retrieves the computation closures required by the developer experience module  from the computation closures store  and stores the newly generated computation closures by the developer experience module  into the computation closures store  for distribution purposes per arrow .","In yet another embodiment, the computation closure environment  has a scalable computing module  that provides an abstract wrapper (i.e. monadic wrapper) for the migrating closures . This abstraction provides computation compatibility between the closures  and the UE . The abstract wrapper may provide scheduling, memory management, system calls and other services for various processes associated with the closures . These services are provided under the supervision of the single sign-on management platform  as discussed in . The agent Agent retrieves the computation closures required by the scalable computing module  from the computation closures store  and stores the newly generated computation closures by the scalable computing module  into the computation closures store  for distribution purposes per arrow . In one embodiment, the backend environment  may access the computation closures store  and exchange\/migrate one or more computer closures  between the computation closures store  and the backend computation closures store .",{"@attributes":{"id":"p-0079","num":"0078"},"figref":"FIG. 5","b":["500","501","501","501","501","500","503","503","505","501","501","503","503","500"],"i":["a","d","a","d","a","d","a","d ","a","d "]},"In one embodiment, distribution of process  includes distribution of closures -, combinators -and the process states  as independent elements into, for instance, a backend environment . The independent closures -from backend environment  may be distributed into different components (e.g. computation entities) where they may be executed.",{"@attributes":{"id":"p-0081","num":"0080"},"figref":["FIG. 6","FIG. 6"],"b":["107","107","603","1","2","603","605","1","2","107","607","1","609","1","613","611"],"i":["a ","a ","a"]},"It is assumed, in this example, that component  of an infrastructure level (not shown) or a cloud  is selected by the single sign-on management platform  as a destination for closure distribution from UE , based on the availability of sufficient security. The extracted computation closure, closure_ is migrated to component  following the assignment of a distribution path, and is executed on component .","In one embodiment, the component  receives the computation closure closure_ and extracts it from the computation closure store  using the Get command . The extracted closure_ is projected into a closure with the user device context and the object  is produced. The block  represents the reconstruction of the closure into the initial context by a component in charge of the execution. The aggregated context may then be executed in the run-time environment  of component by Agent.","In another embodiment, the UE and component  may exchange places and the distribution is performed from the component  to UE or both devices may be UEs. In this embodiment the decomposition and aggregation processes are similar to the above example.",{"@attributes":{"id":"p-0085","num":"0084"},"figref":["FIG. 7","FIG. 7"],"b":["701","107","723","111"],"i":"a "},"In one embodiment, the UE may include RDF store , which holds computation closures for processes associated with the UE . Similarly the backend device  may includes a RDF store , which holds computation closures associated with processes related to device , UEs -, or any other devices having connectivity to device  or cloud .","In other embodiments, the Uniform Resource Identifiers (URIs)  in UE and  in backend device  may be used to identify names or resources accessible to their respective devices via the communication network . Additionally, UE and backend device  may have rule sets and that include security rules imposed on the device. It is noted that the rule base of UE may be a subset of the rule base of the backend device , wherein the rules is a subset of a superset of rules managed by a cloud . Furthermore, the legacy codes associated with each device may be stored in legacy code memory areas and on UE and and on backend device .","In one embodiment, UE may be provided with a non-volatile memory space  as a closure store. The closure store  may include a set of closure primitives shown as geometric objects. Similarly, the backend device  may be provided with a non-volatile memory space  as a closure store. The closure store  may also include a set of closure primitives shown as geometric objects. In one embodiment, the closure store  is a subset of closure store  determined, at least in part, based on one or more criteria such as time of access, frequency of access, a priority classification, security settings, etc. The geometric shapes of closure stores  and  have been each divided into two groups of solidly filled geometric shapes (representing signed closures) and unfilled geometric shapes (representing unsigned closures). Since non-volatile memories are costly and require extensive resources (e.g. power consumption) compared with volatile memories (such as , , , and ), the capacity of non-volatile memory on a UE -is limited. However, a backend device , serving high numbers of users, may be equipped with larger volumes of non-volatile memory spaces. Because of the limited capacity of non-volatile memory spaces on UEs -, and also because differing levels of security setup on various devices, only a subset of the closure store  is stored locally at the closure store  for local use by the UE . In order to minimize the number of times a UE  needs to retrieve one or more primitives from closure store  of device , the subset  is determined based on one or more criteria. In one embodiment, the closure store  may be determined as a set of the most frequently accessed closure primitives of closure store  by UE . In another embodiment, the closure store  may be determined as a set of the most recently accessed closure primitives of closure store  by UE . In other embodiments, various combined conditions and criteria may be used for determining subset  from set  as the content of closure store for UE . Furthermore, the closure stores  and  may be periodically synchronized. The synchronization of closure stores ensures that any changes (addition, deletion, modification, etc.) in closure primitives and in root elements of the signature lattice of closure store  are reflected in the closure store .","In one embodiment, for execution of a subset of closure store  associated with a process on UE , the closure set can be signed under the supervision of the single sign-on management platform  and after verification of the signatures of closures and capabilities and authentication of the destination computation entities, to the backend device  which is a component of the cloud  (the distribution path shown as arrow ). The single sign-on management platform  may then inform the computation entities of the UE , the backend device  or a combination thereof (the computation entities are not shown), that the authentication of closure primitives has been approved and the closures are ready for execution. Alternatively, the single sign-on management platform  may determine that the closures are not approved from point of view of the security and terminate their distribution and execution. Additionally, the single sign-on management platform  may disapprove validation of one or more of the computation entities. Similarly in this case the single sign-on management platform  may terminate the execution of the closures by the invalid computation entities.","In one embodiment, any changes on the closure store  of the backend device  (e.g., addition, deletion, modification, etc.) may first enter the URIs  via the communication network . The changes may then be applied from URIs  on closure store  shown by arrows -. Similarly, the closure store  is updated based on the content of the closure store  and the updates are shared with other authorized components within UE (e.g. with URIs  as shown by arrows -).","In one embodiment, the commonly accessible memory address space  is formed from the RDF stores  and  and the closure stores  and . The commonly accessible memory address space  can be accessed as a continuous memory space by each of the devices and .","The processes described herein for providing single sign-on for computation closures may be advantageously implemented via software, hardware, firmware or a combination of software and\/or firmware and\/or hardware. For example, the processes described herein, may be advantageously implemented via processor(s), Digital Signal Processing (DSP) chip, an Application Specific Integrated Circuit (ASIC), Field Programmable Gate Arrays (FPGAs), etc. Such exemplary hardware for performing the described functions is detailed below.",{"@attributes":{"id":"p-0093","num":"0092"},"figref":["FIG. 8","FIG. 8"],"b":["800","800","800","800","810","800","800"]},"A bus  includes one or more parallel conductors of information so that information is transferred quickly among devices coupled to the bus . One or more processors  for processing information are coupled with the bus .","A processor (or multiple processors)  performs a set of operations on information as specified by computer program code related to providing single sign-on for computation closures. The computer program code is a set of instructions or statements providing instructions for the operation of the processor and\/or the computer system to perform specified functions. The code, for example, may be written in a computer programming language that is compiled into a native instruction set of the processor. The code may also be written directly using the native instruction set (e.g., machine language). The set of operations include bringing information in from the bus  and placing information on the bus . The set of operations also typically include comparing two or more units of information, shifting positions of units of information, and combining two or more units of information, such as by addition or multiplication or logical operations like OR, exclusive OR (XOR), and AND. Each operation of the set of operations that can be performed by the processor is represented to the processor by information called instructions, such as an operation code of one or more digits. A sequence of operations to be executed by the processor , such as a sequence of operation codes, constitute processor instructions, also called computer system instructions or, simply, computer instructions. Processors may be implemented as mechanical, electrical, magnetic, optical, chemical or quantum components, among others, alone or in combination.","Computer system  also includes a memory  coupled to bus . The memory , such as a random access memory (RAM) or any other dynamic storage device, stores information including processor instructions for providing single sign-on for computation closures. Dynamic memory allows information stored therein to be changed by the computer system . RAM allows a unit of information stored at a location called a memory address to be stored and retrieved independently of information at neighboring addresses. The memory  is also used by the processor  to store temporary values during execution of processor instructions. The computer system  also includes a read only memory (ROM)  or any other static storage device coupled to the bus  for storing static information, including instructions, that is not changed by the computer system . Some memory is composed of volatile storage that loses the information stored thereon when power is lost. Also coupled to bus  is a non-volatile (persistent) storage device , such as a magnetic disk, optical disk or flash card, for storing information, including instructions, that persists even when the computer system  is turned off or otherwise loses power.","Information, including instructions for providing single sign-on for computation closures, is provided to the bus  for use by the processor from an external input device , such as a keyboard containing alphanumeric keys operated by a human user, or a sensor. A sensor detects conditions in its vicinity and transforms those detections into physical expression compatible with the measurable phenomenon used to represent information in computer system . Other external devices coupled to bus , used primarily for interacting with humans, include a display device , such as a cathode ray tube (CRT), a liquid crystal display (LCD), a light emitting diode (LED) display, an organic LED (OLED) display, a plasma screen, or a printer for presenting text or images, and a pointing device , such as a mouse, a trackball, cursor direction keys, or a motion sensor, for controlling a position of a small cursor image presented on the display  and issuing commands associated with graphical elements presented on the display . In some embodiments, for example, in embodiments in which the computer system  performs all functions automatically without human input, one or more of external input device , display device  and pointing device  is omitted.","In the illustrated embodiment, special purpose hardware, such as an application specific integrated circuit (ASIC) , is coupled to bus . The special purpose hardware is configured to perform operations not performed by processor  quickly enough for special purposes. Examples of ASICs include graphics accelerator cards for generating images for display , cryptographic boards for encrypting and decrypting messages sent over a network, speech recognition, and interfaces to special external devices, such as robotic arms and medical scanning equipment that repeatedly perform some complex sequence of operations that are more efficiently implemented in hardware.","Computer system  also includes one or more instances of a communications interface  coupled to bus . Communication interface  provides a one-way or two-way communication coupling to a variety of external devices that operate with their own processors, such as printers, scanners and external disks. In general the coupling is with a network link  that is connected to a local network  to which a variety of external devices with their own processors are connected. For example, communication interface  may be a parallel port or a serial port or a universal serial bus (USB) port on a personal computer. In some embodiments, communications interface  is an integrated services digital network (ISDN) card or a digital subscriber line (DSL) card or a telephone modem that provides an information communication connection to a corresponding type of telephone line. In some embodiments, a communication interface  is a cable modem that converts signals on bus  into signals for a communication connection over a coaxial cable or into optical signals for a communication connection over a fiber optic cable. As another example, communications interface  may be a local area network (LAN) card to provide a data communication connection to a compatible LAN, such as Ethernet. Wireless links may also be implemented. For wireless links, the communications interface  sends or receives or both sends and receives electrical, acoustic or electromagnetic signals, including infrared and optical signals, that carry information streams, such as digital data. For example, in wireless handheld devices, such as mobile telephones like cell phones, the communications interface  includes a radio band electromagnetic transmitter and receiver called a radio transceiver. In certain embodiments, the communications interface  enables connection to the communication network  for providing single sign-on for computation closures to the UEs -of UE sets -","The term \u201ccomputer-readable medium\u201d as used herein refers to any medium that participates in providing information to processor , including instructions for execution. Such a medium may take many forms, including, but not limited to computer-readable storage medium (e.g., non-volatile media, volatile media), and transmission media. Non-transitory media, such as non-volatile media, include, for example, optical or magnetic disks, such as storage device . Volatile media include, for example, dynamic memory . Transmission media include, for example, twisted pair cables, coaxial cables, copper wire, fiber optic cables, and carrier waves that travel through space without wires or cables, such as acoustic waves and electromagnetic waves, including radio, optical and infrared waves. Signals include man-made transient variations in amplitude, frequency, phase, polarization or other physical properties transmitted through the transmission media. Common forms of computer-readable media include, for example, a floppy disk, a flexible disk, hard disk, magnetic tape, any other magnetic medium, a CD-ROM, CDRW, DVD, any other optical medium, punch cards, paper tape, optical mark sheets, any other physical medium with patterns of holes or other optically recognizable indicia, a RAM, a PROM, an EPROM, a FLASH-EPROM, an EEPROM, a flash memory, any other memory chip or cartridge, a carrier wave, or any other medium from which a computer can read. The term computer-readable storage medium is used herein to refer to any computer-readable medium except transmission media.","Logic encoded in one or more tangible media includes one or both of processor instructions on a computer-readable storage media and special purpose hardware, such as ASIC .","Network link  typically provides information communication using transmission media through one or more networks to other devices that use or process the information. For example, network link  may provide a connection through local network  to a host computer  or to equipment  operated by an Internet Service Provider (ISP). ISP equipment  in turn provides data communication services through the public, world-wide packet-switching communication network of networks now commonly referred to as the Internet .","A computer called a server host  connected to the Internet hosts a process that provides a service in response to information received over the Internet. For example, server host  hosts a process that provides information representing video data for presentation at display . It is contemplated that the components of system  can be deployed in various configurations within other computer systems, e.g., host  and server .","At least some embodiments of the invention are related to the use of computer system  for implementing some or all of the techniques described herein. According to one embodiment of the invention, those techniques are performed by computer system  in response to processor  executing one or more sequences of one or more processor instructions contained in memory . Such instructions, also called computer instructions, software and program code, may be read into memory  from another computer-readable medium such as storage device  or network link . Execution of the sequences of instructions contained in memory  causes processor  to perform one or more of the method steps described herein. In alternative embodiments, hardware, such as ASIC , may be used in place of or in combination with software to implement the invention. Thus, embodiments of the invention are not limited to any specific combination of hardware and software, unless otherwise explicitly stated herein.","The signals transmitted over network link  and other networks through communications interface , carry information to and from computer system . Computer system  can send and receive information, including program code, through the networks ,  among others, through network link  and communications interface . In an example using the Internet , a server host  transmits program code for a particular application, requested by a message sent from computer , through Internet , ISP equipment , local network  and communications interface . The received code may be executed by processor  as it is received, or may be stored in memory  or in storage device  or any other non-volatile storage for later execution, or both. In this manner, computer system  may obtain application program code in the form of signals on a carrier wave.","Various forms of computer readable media may be involved in carrying one or more sequence of instructions or data or both to processor  for execution. For example, instructions and data may initially be carried on a magnetic disk of a remote computer such as host . The remote computer loads the instructions and data into its dynamic memory and sends the instructions and data over a telephone line using a modem. A modem local to the computer system  receives the instructions and data on a telephone line and uses an infra-red transmitter to convert the instructions and data to a signal on an infra-red carrier wave serving as the network link . An infrared detector serving as communications interface  receives the instructions and data carried in the infrared signal and places information representing the instructions and data onto bus . Bus  carries the information to memory  from which processor  retrieves and executes the instructions using some of the data sent with the instructions. The instructions and data received in memory  may optionally be stored on storage device , either before or after execution by the processor .",{"@attributes":{"id":"p-0107","num":"0106"},"figref":["FIG. 9","FIG. 8"],"b":["900","900","900","900","900","900"]},"In one embodiment, the chip set or chip  includes a communication mechanism such as a bus  for passing information among the components of the chip set . A processor  has connectivity to the bus  to execute instructions and process information stored in, for example, a memory . The processor  may include one or more processing cores with each core configured to perform independently. A multi-core processor enables multiprocessing within a single physical package. Examples of a multi-core processor include two, four, eight, or greater numbers of processing cores. Alternatively or in addition, the processor  may include one or more microprocessors configured in tandem via the bus  to enable independent execution of instructions, pipelining, and multithreading. The processor  may also be accompanied with one or more specialized components to perform certain processing functions and tasks such as one or more digital signal processors (DSP) , or one or more application-specific integrated circuits (ASIC) . A DSP  typically is configured to process real-world signals (e.g., sound) in real time independently of the processor . Similarly, an ASIC  can be configured to performed specialized functions not easily performed by a more general purpose processor. Other specialized components to aid in performing the inventive functions described herein may include one or more field programmable gate arrays (FPGA) (not shown), one or more controllers (not shown), or one or more other special-purpose computer chips.","In one embodiment, the chip set or chip  includes merely one or more processors and some software and\/or firmware supporting and\/or relating to and\/or for the one or more processors.","The processor  and accompanying components have connectivity to the memory  via the bus . The memory  includes both dynamic memory (e.g., RAM, magnetic disk, writable optical disk, etc.) and static memory (e.g., ROM, CD-ROM, etc.) for storing executable instructions that when executed perform the inventive steps described herein to provide single sign-on for computation closures. The memory  also stores the data associated with or generated by the execution of the inventive steps.",{"@attributes":{"id":"p-0111","num":"0110"},"figref":["FIG. 10","FIG. 1"],"b":"1001"},"Pertinent internal components of the telephone include a Main Control Unit (MCU) , a Digital Signal Processor (DSP) , and a receiver\/transmitter unit including a microphone gain control unit and a speaker gain control unit. A main display unit  provides a display to the user in support of various applications and mobile terminal functions that perform or support the steps of providing single sign-on for computation closures. The display  includes display circuitry configured to display at least a portion of a user interface of the mobile terminal (e.g., mobile telephone). Additionally, the display  and display circuitry are configured to facilitate user control of at least some functions of the mobile terminal. An audio function circuitry  includes a microphone  and microphone amplifier that amplifies the speech signal output from the microphone . The amplified speech signal output from the microphone  is fed to a coder\/decoder (CODEC) .","A radio section  amplifies power and converts frequency in order to communicate with a base station, which is included in a mobile communication system, via antenna . The power amplifier (PA)  and the transmitter\/modulation circuitry are operationally responsive to the MCU , with an output from the PA  coupled to the duplexer  or circulator or antenna switch, as known in the art. The PA  also couples to a battery interface and power control unit .","In use, a user of mobile terminal  speaks into the microphone  and his or her voice along with any detected background noise is converted into an analog voltage. The analog voltage is then converted into a digital signal through the Analog to Digital Converter (ADC) . The control unit  routes the digital signal into the DSP  for processing therein, such as speech encoding, channel encoding, encrypting, and interleaving. In one embodiment, the processed voice signals are encoded, by units not separately shown, using a cellular transmission protocol such as enhanced data rates for global evolution (EDGE), general packet radio service (GPRS), global system for mobile communications (GSM), Internet protocol multimedia subsystem (IMS), universal mobile telecommunications system (UMTS), etc., as well as any other suitable wireless medium, e.g., microwave access (WiMAX), Long Term Evolution (LTE) networks, code division multiple access (CDMA), wideband code division multiple access (WCDMA), wireless fidelity (WiFi), satellite, and the like, or any combination thereof.","The encoded signals are then routed to an equalizer  for compensation of any frequency-dependent impairments that occur during transmission though the air such as phase and amplitude distortion. After equalizing the bit stream, the modulator  combines the signal with a RF signal generated in the RF interface . The modulator  generates a sine wave by way of frequency or phase modulation. In order to prepare the signal for transmission, an up-converter  combines the sine wave output from the modulator  with another sine wave generated by a synthesizer  to achieve the desired frequency of transmission. The signal is then sent through a PA  to increase the signal to an appropriate power level. In practical systems, the PA  acts as a variable gain amplifier whose gain is controlled by the DSP  from information received from a network base station. The signal is then filtered within the duplexer  and optionally sent to an antenna coupler  to match impedances to provide maximum power transfer. Finally, the signal is transmitted via antenna  to a local base station. An automatic gain control (AGC) can be supplied to control the gain of the final stages of the receiver. The signals may be forwarded from there to a remote telephone which may be another cellular telephone, any other mobile phone or a land-line connected to a Public Switched Telephone Network (PSTN), or other telephony networks.","Voice signals transmitted to the mobile terminal  are received via antenna  and immediately amplified by a low noise amplifier (LNA) . A down-converter  lowers the carrier frequency while the demodulator  strips away the RF leaving only a digital bit stream. The signal then goes through the equalizer  and is processed by the DSP . A Digital to Analog Converter (DAC)  converts the signal and the resulting output is transmitted to the user through the speaker , all under control of a Main Control Unit (MCU)  which can be implemented as a Central Processing Unit (CPU) (not shown).","The MCU  receives various signals including input signals from the keyboard . The keyboard  and\/or the MCU  in combination with other user input components (e.g., the microphone ) comprise a user interface circuitry for managing user input. The MCU  runs a user interface software to facilitate user control of at least some functions of the mobile terminal  to provide single sign-on for computation closures. The MCU  also delivers a display command and a switch command to the display  and to the speech output switching controller, respectively. Further, the MCU  exchanges information with the DSP  and can access an optionally incorporated SIM card  and a memory . In addition, the MCU  executes various control functions required of the terminal. The DSP  may, depending upon the implementation, perform any of a variety of conventional digital processing functions on the voice signals. Additionally, DSP  determines the background noise level of the local environment from the signals detected by microphone  and sets the gain of microphone  to a level selected to compensate for the natural tendency of the user of the mobile terminal .","The CODEC  includes the ADC  and DAC . The memory  stores various data including call incoming tone data and is capable of storing other data including music data received via, e.g., the global Internet. The software module could reside in RAM memory, flash memory, registers, or any other form of writable storage medium known in the art. The memory device  may be, but not limited to, a single memory, CD, DVD, ROM, RAM, EEPROM, optical storage, magnetic disk storage, flash memory storage, or any other non-volatile storage medium capable of storing digital data.","An optionally incorporated SIM card  carries, for instance, important information, such as the cellular phone number, the carrier supplying service, subscription details, and security information. The SIM card  serves primarily to identify the mobile terminal  on a radio network. The card  also contains a memory for storing a personal telephone number registry, text messages, and user specific mobile terminal settings.","While the invention has been described in connection with a number of embodiments and implementations, the invention is not so limited but covers various obvious modifications and equivalent arrangements, which fall within the purview of the appended claims. Although features of the invention are expressed in certain combinations among the claims, it is contemplated that these features can be arranged in any combination and order."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The embodiments of the invention are illustrated by way of example, and not by way of limitation, in the figures of the accompanying drawings:",{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIGS. 4A-4B"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 6","b":"107","i":"a "},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 10"}]},"DETDESC":[{},{}]}
