---
title: Method for using a floating pallet for a digital asset managements system in a plurality of different applications
abstract: An method for using a floating pallet for a digital asset management system in a plurality of different applications is disclosed. A single extension plug-in is created to interface with API's of all of the plurality of different applications, wherein the extension plug-in communicates with the digital asset management system. The floating pallet for said digital asset management system is created in one of the plurality of different applications wherein the floating pallet uses the properties and behaviors of a selected application. An indication that a file has been transferred from said digital asset management system to said selected application is then given.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07124411&OS=07124411&RS=07124411
owner: Extensis, Inc.
number: 07124411
owner_city: Portland
owner_country: US
publication_date: 20000726
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION"],"p":["The present invention relates to an asset management database system, and more particularly to an asset management database system using a multi-tiered server system.","With the explosion of digital technology, more and more digital assets are being created. Digital assets can include, for instance, images, sound files, documents, logos, or anything else that can be stored digitally. As the number of digital assets grows in a company, it becomes harder to effectively manage these assets. Typically, digital assets are presently just stored on a file server somewhere and the only way to identify the asset is by the filename under which the asset is stored. Filenames however can also be very cryptic. The only way to perform a search of digital assets is by searching the filenames, which may not be very helpful if the filenames are not very descriptive. Furthermore, once you find a file that may or may not contain the digital assets that you are looking for, the file must be opened so that asset can be viewed. This can be a very slow, time-consuming process. Thus, there is a need for asset management system that efficiently and effectively organizes digital assets.","Another challenge with using digital assets is the need to interrupt ones work in one application to search for and retrieve a digital asset to be used in the first application. For example, if a user is writing an article and wants to insert a picture into the article, typically the user must leave the application that is being used to write the article and use at least one other application to find and retrieve the desired picture. This approach does not seem very integrated to the user. Thus, there is a need for a way to create an extension of a plurality of programs for an asset management system so as to provide the user with a more integrated feel.","According to one embodiment of the present invention, a method for managing digital assets using a multi-tiered server system is disclosed. A path to a digital asset is first determined in a client server in response to a request. The digital asset is then opened by the client server. The digital asset is then rasterized to create a thumbnail image of the digital asset in the client server. The client server then extracts keyword data and other data from the digital asset. The client server then requests the second tier server to create a record for the digital asset. The path information, keyword data and thumbnail image from the client server is transferred to the second tier server wherein the second tier server stores the transferred information in the record. The transferred information is then reassembled to fit the structure of a third tier database. The reassembled data is then transferred to the third tier database and is stored therein.","According to another embodiment of the present invention, a method for managing digital assets using a multiple tiered server system is disclosed. A request is received at a client server to enter a digital asset into the system. The request is transferred to the second tier server and the second tier server determines a path to the digital asset in response to the request. The digital asset is then opened by the second tier server and rasterized to create a thumbnail image of the digital asset. Keyword data and other data is then extracted from the digital asset. The second tier server then creates a record for the digital asset. The path information, keyword data and thumbnail image are stored in the record. The stored information is then reassembled to fit the structure of a third tier database. The reassembled data is then transferred to the third tier database and is stored therein.","According to another embodiment of the invention, a multi-tiered server system for managing digital assets is disclosed. A client determines a path to a digital asset in response to a request, opens the digital asset, rasterizes the digital asset to create a thumbnail image of the digital asset, extracts keyword data from the digital asset, requests an application server to create a record, and transfers the path information, keyword data and thumbnail image to the application server. The application server stores the transferred data, reassembling the transferred data to fit structure of a third tier database, and transfers the reassembled data to the third tier database. The third tier database stores the reassembled data.","According to another embodiment of the invention, a multiple tiered server for managing digital assets is disclosed. A client interfaces with a user and receives a request to enter a digital asset into the system. An application server determines a path to a digital asset in response to the request, opens the digital asset, rasterizes the digital asset to create a thumbnail image of the digital asset, extracts keyword data from the digital asset, creates a record and stores the path information, keyword data and thumbnail image for the digital asset, and reassembles the stored information to fit structure of a third tier database. A third tier database stores the transferred reassembled data.","According to another embodiment of the invention, a method and apparatus for using a floating pallet for a digital asset management system in a plurality of different applications is disclosed. A single extension plug-in is created to interface with API's of all of the plurality of different applications, wherein the extension plug-in communicates with the digital asset management system. The floating pallet for said digital asset management system is created in one of the plurality of different applications wherein the floating pallet uses the properties and behaviors of a selected application. An indication that a file has been transferred from said digital asset management system to said selected application is then given.","Internet technology has enabled computer users to access increasing amounts of data for business and personal purposes. The Internet consists of computers linked to each other via a computer network using common communication protocols. Most networks implement the TCP\/IP (Transmission Control Protocol\/Internet Protocol) as a means for communicating between computers. The computers are designated as client computers or server computers. Client computers make requests for data from a server computer according to one of a number of available client\/server protocols. Internet users currently favor the Hypertext Transfer Protocol (HTTP) because of its ease of use. Each HTTP enables users to select data based on a text or graphical icon or image on their client server that represents a link to particular remote data. The interlinking of data through hypertext links creates a web of links that can be navigated by the user to access the data he or she desires.","The basic network structure includes a network server and one or more network clients. The network server contains software that enables it to respond to a request for data from the client machines. Server software includes, for example, the Internet Connection Server software (ICS) from IBM Corp., the Lotus Domino Server from Lotus Development Corp., The Netscape SuiteSpot Server from Netscape Communications and the Internet Server Software from Microsoft Corporation. The above server software packages accept a request for information from the client system, locates the request for data and formats and presents the data back to the client. The data to be returned is typically contained on the server computer system or on a computer link directly to that system.","Client computer systems employ a browser comprising software necessary for the client system to format a request, transmit the request to the appropriate server and then to receive and format the response to the user. A number of commercial browsers are in use, including Netscape, Navigator and Netscape Communicator from Netscape Corporation and the Internet Explorer from Microsoft Corporation. The use of standardized client\/server protocol's enables any browser conforming to the client protocol to communicate with any server having the reciprocal server protocol. This flexibility enables independent implementation of client and server technologies.","Communications between the client and the server take place over communication links such as telephone lines and computer to computer telecommunication links that are not inherently secure. Users of network computer systems have recognized the need for secure communications between the client and server system as essential for applications such as online banking, electronic ordering of products, and transmission of credit card or other financial transactions. Two secure network protocols account for the majority of secured transactions over the Internet.","Web servers, such as those described above, access local and remote data. Companies that found that web servers and the Internet (termed the intranet when use is limited to a specific company or firm) provide an effective means for disseminating corporate data. This data is contained in corporate databases and often is managed by a older legacy information system. Enabling web access permits access to legacy data using modern graphical user interfaces in network tools without requiring a legacy system to be rewritten. The resulting combination of the web browser, server, and data systems is termed the three tier system model. The tiers include the client, a middle tier server such as the web server and backend data and file system servers.",{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 1","b":["102","106","110","106"]},"Further application functionality is provided by application logic managed by the application server  in application tier . The apportionment of application functionality between client tier  and application tier  is dependent upon whether a \u201cthin client\u201d or \u201cthick client\u201d topology is desired. Database tier  contains the data that is accessed by the application logic in application tier . Database server  manages the data its structure and the operations that can be performed on the data and\/or its structure. Application server  can include applications such as a corporation scheduling, accounting, personal and payroll applications, for example. Application server  manages requests for the applications that are stored therein. Application server  can also manage the storage and dissemination of product versions of enterprise applications logic ie, the versions that are currently being used by the corporate users. Database server  manages the database(s) that manage data for applications. Database server  responds to a request to access the scheduling, accounting, personal and payroll application data for example.","Connection  is used to transmit enterprise data between client tier  and the application tier , and may also be used to transfer enterprise application logic to client tier . The client tier can communicate with the application tier via, for example, a remote method invocation (RMI) application programming interface (API). The RMI API provides the ability to invoke methods, software modules, that reside on another computer system. Parameter are packaged and unpackaged for transmittal to and from the client. Connection  between application server  and the database server  represents the transmission and request for data and the responses to such requests from applications that reside in application server . In these conventional systems, the client does not really know the problem to be solved but rather acts more like a terminal for allowing the user to make requests. Likewise, the third tier is simply a database. Almost all of the processing is done by the application server.","Elements of the client tier, application tier, database tier may execute within single computer. However, in a typical system, elements of the client tier, application tier and database tier may execute within separate computers interconnected over a network such as a LAN (Local Area Network) or WAN (Wide Area Network).","When a user wants to enter a digital asset into the system, the digital asset must be cataloged. First, the file path information must be determined and the image is then opened up. The system then rasterizes the image to create a thumbnail image of the digital asset. The system then extracts information from the digital asset to create keywords which are stored with the thumbnail image and can be searched. In addition, the path information and other information from the asset file can also be used to create keywords for the search. All of this information is then stored in a database when a user wants to perform a search for a digital asset, the user can enter keywords or search terms into the system and the system will then search the appropriate databases for any digital assets that meet the search criteria. The system will then return a list of thumbnail images which the user can look at to determine whether or not the digital asset has been found. The advantage of this system is that the images themselves do not need to be opened up in order to determine whether or not the correct digital asset has been found by the search.","The digital asset management system uses a multiple tiered server system to perform all of its functions. While the present invention is described using a three tiered server system, it would be understood that one skilled in the art that N-tiered systems such as four-tiered, five-tiered and six-tiered, etc., could also be used. In the N-tiered systems, multiple servers and be connected between the client and the last tier database.",{"@attributes":{"id":"p-0034","num":"0033"},"figref":["FIG. 2","FIG. 2"],"b":["202","204","206","202","208","202","204","212","202","210","214"]},"The operation of the three-tiered server system illustrated in  will now be explained with reference to . When the digital asset is to be entered into the digital asset management system, a request is made to enter the digital asset into the system. Once the request has been received by the client , the client determines the path information to the image for digital asset in step . The client  then opens the digital asset in step . The client includes a translator  which is used to rasterize the digital asset to create a thumbnail image of the digital asset in step . In addition, the client  contains means for extracting keyword data and other data from the digital asset and from the path information that has already been determined in step . For example, if the digital asset includes text, the text section can be searched for keywords that would be helpful to determine or to identify the digital asset. In addition, keywords can also be manually entered through a keyboard or the like by a user to describe or identify a digital asset. The client  requests the application server  to create a record in its memory  from the digital asset in step . The path information, keyword data and thumbnail image are then transferred from the client to the application server in step  wherein the application server stores the transferred information in the record that is created in memory  in step . The client  may not know the structural makeup of the database  so the transferred data may need to be reassembled in order to fit the structure of the third tier database. The application server  knows the structure of the database  and thus reassembles the transferred information to fit the structure of the database  in step . Once the data has been reassembled, the data is transferred to the third tier database in step  where it is stored in step .",{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIG. 3","b":["300","302","304","306","302","308","302","304","310","312","314"]},"The operation of the three tiered server system illustrated in  will now be explained with reference to . When a user wants to enter a digital asset into the digital asset management system, the user requests the client to enter the digital asset in step . The client  transfers the request to the application server . The application server  then determines the path information to the image or digital asset in step  and opens the digital asset in step . The translator  then rasterizes the image to create a thumbnail image of the digital asset in step . The application server also extracts keyword data from the digital asset path information in step . The application server  creates a record for the digital asset in memory  in step  and stores the path information keyword data and thumbnail image for the asset in the record in step . The application server then reassembles the stored information to fit the structure of the third tier database in step . Alternatively, the application server may originally store the path information keyword data and thumbnail image in the appropriate format so as to be compatible with the third tier database. The reassembled data is then transferred to the third tier database in step  and then stored therein in step .","Once the digital asset has been stored in the multi-tiered server system, a user can then search all of the digital assets that are stored within the database or databases connected to the second tier server as illustrated in . For example, a search screen can be displayed on the client which asks the user to enter search criteria, such as keywords, for the search in step . Once the keywords or search criteria have been entered by the user, the client  transfers the search request and search criteria to the application server  in step . The application server  then searches the database  and any other database connected to the application server  using the search criteria in step . Any digital asset that meets the search criteria in the database(s) is then placed in a results list along with its thumbnail image in step . The result are then sent back to the client  for display in step . The user can then scroll through the thumbnail sketches to determine if any of the digital assets on the result list are the one he or she is looking for. A selected digital asset can then be dragged and dropped onto imaging programs such as Photoshop or desktop publishing applications such as QuarkXpress which will open the image.","According to another embodiment of the present invention, it would be advantageous to able to use the digital asset management system while in a different applications or programs such as QuarkXpress or Photoshop. One way to accomplish this is to create a floating pallet using a plug-in application programming interface API.","Many existing software applications support \u201cplug-in\u201d modules and are referred to as client applications to such plug-in modules. These plug-in modules provide the client applications with new or extended services. Plug-ins may, for example, provide specially tailored image filtering functionality to client applications. Several such client applications are Photoshop and QuarkXpress which are popular image processing and desktop publishing applications. It would be advantageous to be able to write a generic plug-in module for the above-described digital asset management system to add extended services to these and other applications.",{"@attributes":{"id":"p-0041","num":"0040"},"figref":"FIG. 7","b":["701","701","702","704","705","702"]},"The computer system  also comprises a mass storage device such as a computer disk  for storing data files, peripheral drivers, application programs and for storing computer executable process steps embodying the invention. A scanner  is also included, and may be used to scan documents so as to provide bitmap images of those documents to the computer system . Images may also be inputted into the computer system  from a variety of other sources such as from a Local Area Network through network interface  or from the World Wide Web through facsimile\/modem interface  or through the network interface . A printer  is provided for outputting processed images. It should be understood that although a programmable general purpose computer system is shown in , a dedicated, or stand alone, computer or other type of data processing equipment can also be used to execute the process steps of the invention.",{"@attributes":{"id":"p-0043","num":"0042"},"figref":["FIG. 8","FIG. 8"],"b":["701","701","712","714","714","715","716","717","719","729","721","706","722","724"]},"The main memory  interfaces with the computer bus  so as to provide RAM storage to the CPU  for executing stored processed steps such as process steps to implement a plug-in module host framework according to one embodiment of the invention. More specifically, the CPU  loads process steps from the disk  into the main memory  and executes the stored process steps from the memory  in order to provide a plug-in host API to a client application and to communicate to a plug-in module via a plug-in API. As also shown in , the disk  contains document images in either compressed or uncompressed format, peripheral drivers, and other application programs.",{"@attributes":{"id":"p-0045","num":"0044"},"figref":["FIG. 9","FIG. 9"],"b":["751","754","752","751"]},"According to one embodiment of the invention, a simple extension \u201cplug-in\u201d for a plurality of image processing and desktop publishing systems which simply communicates with the digital asset management system and the selected image processing or desktop publishing system. According to one embodiment of the invention, an application which mimics the operation of a plug-in is used to create a simple means for interacting with a plurality of different systems. As illustrated in , a client application  communicates with an application  via a operating system level interface .","According to one embodiment of the invention, the application  uses the APIs of the operating system to create the API's needed to connect to the different processing and publishing systems. In this embodiment, the application calls the same API that the operating system would call to interact with the client application.","Alternatively, the application can intercept a call to the operating system and redirect the call back to the application. When a client application wants to communicate with the operating system, the application links to a stub library which has the address of the operating system. According to one embodiment of the invention, the application  changes the address in the stub library for the operating system to the address of the application . Now when the client application calls the operating system, the stub library points the client application to the appropriate functional procedure in program . Likewise, according to one embodiment of the invention, the application  can intercept a call from the client application to the operating system. The application  can also interface with the client application using the same API that the operating system uses to interact with the client application","An example of how the above-identified asset management system can interface with a desktop publishing system will now be disclosed but it will be understood that this example is illustrative rather than restrictive. When the desktop publishing system is installed on a computer system, an installation management section of the computer can prompt the user with a list of applications that are presently running on the computer or are installed on the computer. The user can then select what application(s) should also be running when the desktop publishing system is running, for example, the asset management system. The computer records the users selections along with a unique identifier for the desktop publishing system. When the desktop publishing system is launched, a background application running on the computer detects the start of the desktop publishing system and then checks to see what other applications should be launched in response to the launch of the desktop publishing system. As a result, in this example, the asset management system is launched. The asset management system determines whether its floating pallet was open or closed the last time the desktop publishing system was being used. If the floating pallet was open, the asset management system creates a child window in the parent window of the desktop publishing system to display the floating pallet.","Once the plug-in for the asset management system has been added to the client image processing system, the user can go to a menu and request that the asset management system be represented by a floating pallet  as illustrated in . If the user wishes to use the asset management system to locate a digital asset for incorporation into a document being prepared, the user clicks on the floating pallet . The floating pallet may contain a search field  in which the user can enter search criteria as illustrated in . The search criteria is them sent to the asset management system which is running in the background through the application \u201cplug-in\u201d. The digital asset system performs the search as described above with reference to  and sends the list of results back to the client application through the extension plug-in for display in .","It would be understood from the foregoing description that various modifications and changes may be made in the preferred embodiments of the present invention without departing from its true scope. It is intended that this description is purposes as illustration only and should not be construed in a limiting intent. The scope of this invention should be limited to only be the language of the following claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["A more complete appreciation of the invention will be readily obtained as the same becomes better understood by reference to the following detailed description when considered in connection with the accompanying drawings, wherein:",{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":["FIG. 8","FIG. 7"]},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 12"}]},"DETDESC":[{},{}]}
