---
title: Access to supplemental data based on identifier derived from corresponding primary application data
abstract: Primary data for an application is stored at a remotely located first server such as cloud storage. A user of the application may wish to modify or add to the primary data to create supplemental data for which storage is not supported in the first server. Configurations herein include a way to store the supplemental data (e.g., edits, additions, etc.) on a second server at a second storage service provider (e.g. a corporate intranet). Different instances of the application executing on different computer devices by that same user can retrieve the primary data from the first storage service provider as well as retrieve the supplemental data from the second storage service provider.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09396277&OS=09396277&RS=09396277
owner: Microsoft Technology Licensing, LLC
number: 09396277
owner_city: Redmond
owner_country: US
publication_date: 20111209
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","BRIEF DESCRIPTION","DETAILED DESCRIPTION"],"p":["In areas of computer and network technologies, the terms \u201ccloud\u201d and \u201ccloud computing\u201d are often used as metaphors for certain network technologies such as the Internet, which is an abstraction of an underlying network infrastructure of computers, routers, servers, etc., that supports connectivity amongst many different types of computer resources.","So-called \u201ccloud computing\u201d is a natural evolution of the widespread adoption of virtualization, service-oriented architecture, autonomic, and utility computing. In certain cases, cloud computing abstracts the user from having to be an expert in or having to control certain application features; such features are managed by services in the cloud and the cloud storage is often provided by a third party entity known as a cloud storage service provider. Accordingly, cloud computing can provide a way to increase capacity or add capabilities to a computer system for user within an entity such as corporation (that is a separate entity that the cloud storage service provider), without the need to invest in new infrastructure, train new personnel, license new software, etc. Conventional cloud computing technologies provide users with example services such as remote document management and storage, email and contact management and the like, regardless of which device a user uses to connect to the cloud. In this manner, a user can access a document in the cloud on one computing device such as a desktop computer at his or her office, and then later access the same document from another computing device, such as his or her home computer. Applications that access cloud storage an do so using a set of standardized and well published application programming interfaces (APIs) and preset cloud storage data formats.","The cloud is thus instrumental in providing useful services to respective users and a respective device operated by a user may rely heavily or completely on services provided by the cloud. This provides the ability to execute an instance of a computer application on any of multiple different computers without the hassles of having to store the data associated with the application in a restrictive location such as a single computer device.","Use of conventional techniques such as cloud computing that enable execution of different instances of a software application on different computing devices can suffer from deficiencies. For example, suppose a third party cloud storage service provides cloud storage of specific data in a specific data format using a specific API (e.g. contact data in a given predetermined record format or data format such as XML). Multiple third party software companies may each develop and sell software programs (e.g. contact manager software) that accesses the data stored in the cloud in this specific data format. One vendor of such software might desire to create a new or updated version of the software that enables a user to add supplemental data to their contact information. As an example, the new version of the software may allow a user to identify contact information for people as being preferred or a favorite. In such cases, the cloud storage service provider may not support storage of this supplemental data since the predefined contact record or data format of the cloud storage is not adaptable to enable addition of the supplemental data. This may be the case since many vendors of different software programs that all manage contact data might utilize the same cloud storage service and thus the contact data format does not rapidly adapt to new data storage requirements from certain vendors. When this problem presents itself in conventional situations, the new version of the software must store the supplemental data in a local storage device (e.g. the disk system of that user's desktop computer on which the instance of the new version of the software is presently operating and installed). One problem with this conventional approach is that if the user operates that same software on another computing device (e.g. another instance of the software executing on his or her mobile device), the supplemental data created on the other computer system will not be available to the same version of the software for that same user on the mobile device because the cloud storage does not support storage of the supplemental data and the mobile device has no way to access the local disk of the other computing device that the user used to create the supplemental data.","Embodiments disclosed herein substantially overcome the deficiencies of the conventional techniques as discussed above. Embodiments herein include one or more ways to store supplemental data (e.g., data associated with modifications or additions to primary data that is stored by the third party storage provider such as cloud storage) at a secondary remote location (e.g., separate from the cloud, or in addition to the cloud storage) accessible by multiple devices operated by the user. As discussed herein, because supplemental data is available to each of the multiple devices, a user who uses a given software application on different computing devices can execute an instance of an application on any of these different devices and the techniques and mechanisms disclosed herein allow those separate instances of software to be provided with the supplemental data stored in a secondary storage location (e.g. a second cloud storage area, or a corporate server accessible to the multiple user computing devices and that supports storage of the supplemental data) in addition to data stored by the cloud.","In one example a user executes a first instance of an application on a first computer device in a network. Suppose the first instance is a contacts management software program that allows a user to manage contact data for individual people. Via the first instance of the application, the user retrieves primary application data from a first server. This primary application data may be, for example, data stored in a predefined or fixed data format as required for cloud storage (stored by the first server) operated by a given cloud storage vendor. During use of the first instance of the application, the user can operate the first instance to produce supplemental application data that is to be associated with the primary application data. For example, the user may purchase a new version of the contact manager software that enable the user to identify favorite contacts within the primary application data. The first server or first storage service provider (e.g. a cloud computing environment operated by a cloud storage vendor) that stores the primary application data in a given data format may not able to support storage of the supplemental application data since the cloud storage data format does not accommodate storage of the supplemental data. To overcome this problem, the first instance of the application receives the supplemental application data (e.g. from the user) and associates it with the primary application data. For example, in one embodiment, to associate the supplemental data with the primary application data, the first instance of the application computes a unique identifier value (e.g. a hash value) based at least in part on the primary application data. In a specific embodiment, generating the unique identifier value can include applying a hash function to at least a portion of the primary application data to produce the unique identifier value. Other examples are including, in the unique identifier, a hash of a user identity associated with the user operating the first instance of the application. The first instance of the application forwards the unique identifier value as well as the supplemental application data to a second server for subsequent retrieval of the supplemental application data. The second server may be, for example, a server that provides storage on a corporate intranet that is different than the cloud storage but that is also accessible to the user's various computing devices (that each operate independent instances of the contacts manager software program). The second server enables subsequent retrieval of the supplemental application data by any of one or more other instances of the application on user devices via the unique identifier, thus enabling the user experience on each device to include access to the supplemental data, even though the cloud storage (i.e. the first server) does not support storage of the supplement data.","Further details of example embodiments will be provided below in reference to the figures and detailed description and claims. Note that this preliminary discussion of example embodiments does not specify every embodiment and\/or incrementally novel aspect of the present disclosure or claimed invention(s). Instead, this brief description only presents general embodiments and corresponding points of novelty over conventional techniques. For additional details and\/or possible perspectives (permutations) of the invention(s), and additional points of novelty, the reader is directed to the Detailed Description section and corresponding figures of the present disclosure as further discussed below. In addition to providing additional details associated with different embodiments, the Detailed Description below includes a further summary of embodiments. Accordingly, this brief description does not limit the scope of the invention and\/or accompanying claims.","Example embodiments disclosed herein provide mechanisms that enable a user who uses multiple instances of a software application on different computing devices (e.g. the same program on a laptop computer, desktop computer and mobile device) to have access to all data created by those application instances. This system accommodates situations where some of the data (i.e., primary data) created and stored by the application is stored in cloud storage that may be, for example, operated by a third party vendor that has a limited or predefined data format. If the application enables a user to create supplemental data (e.g. a new version of application might provide for enhanced user features that require storage of supplement user data that cannot be stored in cloud storage given the data format limitations), the mechanisms disclosed herein all the application to store this supplemental data in secondary storage provided by a second storage service provider (e.g. non-cloud storage operated by a corporate intranet that the user's computing devices have access to).","According to one embodiment, primary data for an application can be stored at a remotely located first storage service provider in a cloud computing environment. As used herein, the term primary data includes data that the application can store in a first service provider on a first server that may be, for example, a cloud server. A user of the application may wish to modify the primary data in a way that is not supported by the first storage service provider. Such modifications, additions, or the like are referred to herein as supplemental data which cannot be stored in the first server operated by the first storage service provider (i.e. cannot be stored in the cloud for example because the cloud storage does not provide for this supplemental data in its data or record format). In other words, the first storage service provider may not support storage of the changes and\/or additions (supplemental data) that the user would like to make to the primary data and that the user would like to be able to access on any of his or her computing devices. A conventional solution is to store the supplemental data locally in the user's device. However, in such conventional solutions, the user would not be able to (or it would be difficult for the user to) use the application on multiple devices while having access to this supplemental data. This is problematic when a user moves from one device to another and expects all data, changes and additions to be available on all devices.","To free a user from being restricted to executing an application on only a single computer device while having access to all data, configurations herein provide mechanisms and techniques to store modification data (e.g., supplemental application data such as, for example, edits or additions associated with the primary application data) at a second storage service provider over a network connection. Using the system disclosed herein, different instances of the application executing on different computer devices can retrieve the primary data from the first storage service provider (e.g. from a cloud operated by a third party vendor) as well as retrieve the supplemental application data from the second storage service provider (e.g. a corporate intranet server operated by an employer of the user of the software and which is a different entity that the third party cloud storage service provider). Thus, a respective user is not restricted to executing an instance of the application on only a single machine and is able to gain access to both primary and supplement data on multiple user computing devices.",{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 1"},"In this example the network environment  includes multiple storage service providers  (e.g., storage service provider -, storage service provider -, etc.), and network . Storage service provider - includes server - and a respective repository - in which to store data. Storage service provider - may be a cloud storage service in this example operated by a given cloud server storage provider. Storage service provider - includes server - and a respective repository - in which to store data. Storage service provider - may be a corporate intranet in this example. It is to be understood that the storage service providers  may be the same or different entity, corporation or organization.","Network  can include resources such as the Internet, mobile phone network, etc., and can further include one or more computer devices  that can be operated by a same user or different users.","Each of the computer devices  can execute an instance of application  on behalf of one or more users. In this example, computer device - executes application instance - and computer device - executes application instance -. In accordance with further embodiments, the same computer device can be used to execute the different application instances . The application instances - and - can be executed at the same or different times. In this example, the storage service provider - may be a cloud storage system operated by a third party cloud storage service (the first storage service provider) accessible over a public network such as the Internet. In contrast, in this same example, storage service provider - may be storage available within a corporate intranet that is only accessible to authorized users of application instances . The user of the application instances - and - may be an employee of the company (e.g. second storage service provider -) who operates and\/or controls access to the second server -.","In general, as will be discussed in the following figures and text of this application, during execution, the application instance - operates on a client device and communicates with server - to produce and initiate storage of primary application data - (also referred to as primary data) in repository - (e.g. storage of data in the cloud that requires or may be limited by a specific predefined data format). In this example, assume that the user of the computer device - also produces supplemental data - (also referred to as supplemental application data). The supplemental data - may be produced from a user operating instances of the application . Examples of supplemental data - include a user providing an indication of favorites for given contacts in his or her contact list. This example is not meant to be limiting. The supplemental data - is any data that is produced by the application  (either instance - or -) that cannot be stored along with the primary application data - by the first server - operated by the first storage service provider -. There may be many reasons why the supplemental data - cannot be stored with the primary data -. Examples include one or more situations in which a data format, record format, protocol, data type, size, security requirement, or other aspect or characteristic of the supplemental application data - is not technically supported, compatible with, or allowed to be stored by the storage server provider -.","By way of example, the storage service provider - may not be configured to store certain types of data such as the supplemental data - in repository - because the data or record format required to store primary data - is not able to be extended in the cloud storage (i.e. by data stored by the first storage service provider -) to include the supplemental data. This situation may exist if many entities have different software applications that store data using cloud storage provided by the first storage service provider - and the cloud storage data format is not updated frequently. By contrast, a software vendor of the application  may release new releases of the application  that enable a user to add additional information (e.g. identifying a given contact as a favorite contact) that was not present in earlier versions or releases of the application . In this example, this new favorites contact information is the supplemental data - that is not supported for storage by the first storage service provider -. Via communications with server - as explained herein, the application instance - initiates storage of the supplemental data in repository -.","Accordingly, a portion of application data can be stored at multiple different locations in network environment . For example, a first portion of application data can be stored in repository -; a second portion of the application can be stored in repository -; and so on. The system disclosed herein allows the multiple instances of the application  that operate on different devices  to identify situations in which there is supplemental application data available (i.e. stored in a secondary location -, -) and allows access (read, write, update) to this supplemental data without requiring modifications to data formats, protocols, storage mechanism and the like associated with the applications primary storage service provider - (e.g. a cloud storage environment). The system overcomes issues that arise, for example, when a software application  is initially released in a first version that allows access to a predefined data format that is operable to store data (referred to as primary data) in cloud storage. The application  may then be modified in a newer release to allow a user to create, store and\/or update additional data, referred to as supplemental data -. The cloud storage may be provided by a third party storage service that does not allow modification of data types, storage formats, or the like. As a specific example, the first storage service provider - may not update the cloud storage data format to support storage of this supplemental data -. The system disclosed herein enables storage and access to this supplemental data - by storing it using a second server -. As such, the system enables the application  to be modified and still use the cloud storage (e.g. -) for storage of primary application data, while allowing the secondary or supplemental storage provider - to store the additional supplemental data -. The system further enables different instances of the application  that a given user may operate on different computer systems (e.g. laptop, desktop and mobile devices) to all identify the existence of both the primary and supplement application data and to access these two sets of data for that user.",{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 2"},"For example, as shown, a user executes application instance - on a first computer device -. Via the application instance -, the user retrieves primary application data - via communications with server - of storage service provider -. The user provides input to the application instance - to use the primary application data - for any suitable purpose such as to display information in a graphical user interface.","Note that if the primary application data - is not yet stored in the repository -, the user can provide input to the application instance - to create such data and store it in repository -.","In this example, during use of application instance -, the user produces supplemental application data - with respect to primary application data - that is stored in repository -. The supplemental application data - can indicate enhancements, modifications, edits, additional information, etc., with respect to the primary application data -. Thus, supplemental application data - can be associated in some way with primary application data -. By way of a non-limiting example, as will be discussed later in this specification, the primary application data  can be contacts information, enabling the user to communicate with one or more other persons in the network environment.","As mentioned, assume in this example, that the storage service provider - and server - storing the primary application data - is not able to support storage of the supplemental application data - produced by the user. In accordance with embodiments herein, the application instance - receives the supplemental application data - inputted from the user of computer device -. As explained herein, the application  executing on computer device - associates the supplemental application data - with the primary application data -. For example, in one embodiment, to associate the supplemental application data - with the primary application data -, the application instance - utilizes processing function  to compute a unique identifier value - based on, for example, at least a portion of the primary application data -. In a specific embodiment, the processing function  generates the unique identifier value - by applying a hash function to at least a portion of the primary application data - in combination with a user identity of a user operating first instance of the application. This produces a unique identifier value for the supplemental application data to allow access to the supplemental application data by the user of a second instance of the application on another device. In this manner, as the user operated the same software on different devices, the supplemental application data will be a available to each instance.","The application instance - forwards the unique identifier value - to the server -. The application instance - also forwards supplemental application data - to second storage service provider - for storage in repository -. The unique identifier - and supplemental application data - may be transmitted separately or together in a single record to the second storage service provider -. In one embodiment, the storage service provider - associates the unique identifier value (UIV) - with the supplemental application data - by including an entry of the UIV - and a pointer to the supplemental application data - in map .","In one embodiment, the UIV - in map  serves as an index to the supplemental application data -. For example, as discussed, the application instance - initiates storage of the supplemental application data - in repository - of storage service provider - because storage service provider - is unable to or is not configured to store the supplemental application data -.","As discussed above, the application instance - also notifies the storage service provider - that the unique identifier value - corresponds to the supplemental application data -. Thus, in one embodiment, the application instance - effectively produces the UIV  as an index entry in map . For example, the entry in map  associates the UIV - with a pointer to the supplemental application data - stored in the repository -.","The server - of the storage service provider - enables subsequent retrieval of the supplemental application data - by any of one or more other instances of the application  operating in network environment . Generally, and as will be explained in more detail below, this is done by having any instance of the application , upon execution, computing the UIV value for a retrieved set of primary application data - and then transmitting this to the supplemental application data server -. The server - can use the UID to check the map  to determine if any supplemental application data - exists.","A given user may execute application instance - at a first point in time. The given user may execute application instance - at a later time. Via access to the storage service providers , the given user is able to save modifications (e.g., via supplemental application data) in storage service provider - and retrieve them at a later time using an instance of the application  executed on the same or different computer device.",{"@attributes":{"id":"p-0039","num":"0038"},"figref":"FIG. 3","b":"230"},"As shown, the application instance - communicates with storage service provider - to retrieve primary data stored in repository -. Application instance - produces the UIV  and communicates the UIV  to the storage service provider - to retrieve supplemental data from repository -. As mentioned, and as further discussed below, the ability to store and retrieve the supplemental application data from storage service provider - using a UIV enables one or more users to execute an instance of the application  from a computer device at any location in network environment  without losing data or having to store the data locally in the computer device.",{"@attributes":{"id":"p-0041","num":"0040"},"figref":"FIG. 4"},"Assume in this example that a user in network environment  initiates execution of application instance - on a respective computer device such as - ().","The application instance - displays a graphical user interface for viewing by the user. Via input with respect to the graphical user interface, a user can request to view data (either primary or supplemental) associated with the application  that happens to be stored in either or both repository - and repository -.","In this example, assume that the user of application instance - operates the graphical user interface to display information requiring at least the retrieval of primary application data - from repository -. In response to the input, the application instance - retrieves the primary application data - from the storage service provider -. As discussed below, the graphical user interface of application instance - can be operated by the user in a manner (e.g. user requests to see his or her favorite contacts) that requires the application instance - to retrieve the supplemental application data -.","Recall in this example that the server - of storage service provider - is unable to store the supplemental application data - in repository - (e.g. the supplemental data - is not storable in a cloud storage system). By way of a non-limiting example, the supplemental application data - can indicate special features to apply when displaying data on the graphical user interface and the data, record format, protocol or other operation of the cloud storage system provided by the provider - does not support storage of this supplemental data -.","In one embodiment, the application instance - performs a query to server - to check whether modification or supplemental application data is available for retrieval from storage service provider -. As explained below, this is done by computing a UIV  for the primary data - and sending this UIV value to the secondary (supplemental) storage service provider . If there is supplemental application data available for primary application data -, the application instance initiates retrieval of such data from storage service provider -.","To retrieve the supplemental application data -, subsequent to retrieving a copy of the primary application data -, the application instance - produces a unique identifier value (the same UIV that was previously generated by the application instance -) based at least in part on processing (i.e. retrieving) of the primary application data - retrieved from server -. For example, in one embodiment, the application instance - applies a processing function  such as a hash function to at least a portion of the primary application data - to produce the unique identifier value -. The hash function can include hashing some portion or multiple different portions or all of the primary application data - to get the UIV -. The user identity can be included in this hash to produce a UIV - to can be used to associate the specific proper set of supplemental application data  for that application (i.e. for that version) for that user.","In one embodiment, the processing function  is the same processing function used by the first application instance - to produce unique identifier value - when the supplemental application data was initially produced.","In this example, assuming the primary application data - has not changed since the application instance - stored primary application data - in repository -, the processing function  of application instance - produces the same index value that the application instance - generated when initiating storage of the supplemental application data - in storage service provider -.","For example, the application instance - produces unique identifier value - based on primary application data -. In this instance, the unique identifier value - produced by the application instance - is the same as the unique identifier value - produced by the application instance - because both instances of application  apply the same processing function to the same primary application data -.","Application instance - utilizes the unique identifier value - it just produced as an index to identify supplemental application data to retrieve from storage service provider -. For example, the application instance - initiates retrieval of the supplemental application data - by forwarding the unique identifier value - it produced to the server -. The server - maps the unique identifier value - to a location in which the supplemental application data - is stored in repository -.","The server - retrieves the supplemental application data - from repository - and forwards it to the application instance -. The application instance - thus receives the supplemental application data - from the server -.","In one embodiment, the application instance - utilizes the retrieved primary application data - to identify primary settings information. The application instance - utilizes the retrieved supplemental application data - to identify modifications with respect to the primary settings as specified by the primary application data -.","In this manner, each of multiple different application instances of the same executed application can access application data stored at one or more different locations in a cloud without having to store the data locally in a single computer device, which would potentially restrict usage of the application.","As mentioned, the primary application data - and the corresponding supplemental application data - can be contacts information used in an address book application. In such an embodiment, when the user initiates an action, command, etc., in which application data cannot be written back to storage service provider - located in network environment , the application instance - creates a unique identifier value - (e.g., an index value, a hash-based key, etc.) based on properties of the primary application data - (e.g., specific contact information). The application instance - uses the unique identifier value - as a key or index value to store the additional contact information that is identified only by the key. For example, in one embodiment, the client or application instance - then transmits the unique identifier value - to storage service provider -. The server - stores the unique identifier value (e.g., key, index value, hash value, etc.) and allows the supplemental application data - to be provided (via the mechanisms disclosed herein) to any client (e.g., application instance  in network environment ) that has access to the address book and respective application data.","In one embodiment, when the application instance - attempts synchronization, the application instance - produces a unique identifier value for each of the contacts as specified by the primary application data stored and retrieved from storage service provider -. The application instance - forwards the unique identifier values to the server - to check whether supplemental data is available for each respective contact. If so, the server - forwards the appropriate supplemental application data to application instance -. Via retrieval of the primary application data and the supplemental application data for each contact in an address book, the application instance - can be properly synchronized.","In certain cases, there may not be any supplemental application data for a given set of primary data stored in repository -. In such an instance, the application instance - utilizes only the primary application data retrieved from storage service provider - to initiate display of corresponding information in the graphical user interface.",{"@attributes":{"id":"p-0058","num":"0057"},"figref":"FIG. 5"},"As previously discussed, the user of a respective application  initiates storage of multiple sets of primary application data  (e.g., primary application data -, primary application data -, primary application data -, etc.) in repository - of storage service provider -. As mentioned, by way of a non-limiting example, the primary application data can be contact information.","As previously discussed, a respective user can modify the primary application data via generation of supplemental application data. In this example, the user produces supplemental application data -.","In a manner as previously discussed, the respective application instance - produces unique identifier value - and initiates storage of the supplemental application data - and unique identifier value - at storage service provider -.","As further shown in this example, the user produces supplemental application data - associated with primary application data -. The respective application instance - produces unique identifier value - and initiates storage of the unique identifier value - and corresponding supplemental application data - in storage service provider -.","As mentioned, map  stores the association between the unique identifier values and the supplemental data produced for respective primary application data.","In one embodiment, the storage service provider - can store supplemental data for each of multiple different users. In such an instance, the map can be configured to group the identifier values on a per user basis. For example, the application instance requesting to retrieve the supplemental application data can also provide a user identifier to the server - when checking for availability of supplemental application data.","Via the user's identifier, the storage service provider - can identify a corresponding group of unique identifier values to check in the map  (rather than checking all unique identifier values in the map ) in order to identify whether supplemental application data is stored in the storage service provider - for the user.",{"@attributes":{"id":"p-0066","num":"0065"},"figref":"FIG. 6"},"Assume in this example that the primary application data produced by the respective user via application instance - corresponds to contact information of entries in an address book. For example, assume that primary application data - includes information (e.g., name, e-mail information, phone information, etc.) associated with a first contact such as Joseph Smith; assume that primary application data - includes information associated with a second contact such as John Doe; assume that primary application data - includes information associated with a third contact such as David Johnson; and so on.","As previously discussed, the primary application data  can be produced by the user or some other resource.","The storage service provider - is able to store certain information such as name, e-mail information, phone number, etc. associated with a respective contact. However, assume in this example that the application  supports functionality such as bolding text to indicate a favorite) in the contact information when it is displayed in a graphical user interface, adding of extra text for display near a contact, etc.","As noted above there are several reasons why the storage service provider - may not support storage of such information. As mentioned, the application instance can be configured to initiate creation of supplemental application data  in such situations. For example, application instance - produces supplemental application data - to indicate selection of highlighting Joseph Smith as a favorite; application instance - produces supplemental application data - to indicate additional information (e.g., company and title information) to be displayed for entry David Johnson; and so on. When the application instance - is written (e.g. coded) by a developer (e.g. a software engineer), the developer can utilize the mechanisms disclosed herein to store supplemental application data  within the supplemental storage service provider - for any data that cannot be stored as primary data  in the primary storage service provider -. Application programming interfaces (APIs) can be provided for general functionality disclosed herein such as retrieval of primary application data, creation of a UIV, and communication of the UIV and storage and 1 retrieval of supplemental application data with the supplemental storage service provider -.","In a manner as previously discussed, the application instance - initiates storage of the supplemental application data and corresponding unique identifier values in storage service provider -.","When the same of different user initiates execution of application instance - to view the contacts information in network environment , the application instance - initiates retrieval of the primary application data. Via application of the processing function  to all or a selected portion of the primary application data, the application instance - initiates generation of unique identifier values and retrieval of respective supplemental application data. In this instance, the application instance initiates retrieval of supplemental application data -, supplemental application data -, etc., and applies the settings as specified by the supplemental application data to the contacts information eventually displayed in the address book in contacts manager graphical user interface .","In one embodiment, note that the application instance - can initiate further modification to the primary application data information to be displayed in the address book. In such an instance, if a given instance  initiates changes to a set of primary application data stored by storage service provider -, the given instance generates a new unique identifier value based on the changes to the set of primary application data and forwards the updated unique identifier value to the server - for storage in map . In this manner, the UIV is always \u201ccurrent\u201d with the most up to date set of primary application data. If the user also modifies the corresponding supplemental application data, the application instance also forwards the updated supplemental application data to the storage service provider - for storage and subsequent retrieval. Accordingly, via the updated unique identifier value, another application instance can still retrieve the supplemental application data even though the primary application data has changed and any changes to the supplemental application data are also captured and stored (by storage service provider -) for subsequent retrieval.",{"@attributes":{"id":"p-0074","num":"0073"},"figref":"FIG. 7","b":"140"},"Computer system  can include one or more computerized devices such as a personal computer, workstation, portable computing device, console, network terminal, processing device, network device, etc., operating as a server, client, etc.","Note that the following discussion provides a basic embodiment indicating how to execute functionality associated with application instances  according to embodiments herein. However, it should be noted that the actual configuration for carrying out the operations as described herein can vary depending on a respective application. Also, note that each of the servers -, -, etc., can be configured with similar resources such as a computer readable storage medium and a respective one or more processor device to carry out functionality as discussed herein.","As shown, computer system  of the present example includes an interconnect  that couples computer readable storage media  such as a non-transitory type of computer readable storage media in which digital information can be stored and retrieved. Computer system  further includes a processor device , I\/O interface , and a communications interface .","I\/O interface  provides connectivity to input\/output devices such as repository  and, if present, other devices such as display screen , peripheral devices , (e.g., keyboard, computer mouse, etc.), etc.","Computer readable storage medium  can be any suitable device such as memory, optical storage, hard drive, floppy disk, etc. In one embodiment, the computer readable storage medium  is a storage media (i.e., hardware storage media) configured to store instructions and\/or data.","Communications interface  enables the computer system  and processor device  to communicate over a network  to retrieve information from and\/or forward information to any of multiple different remote resources such as other computers, servers, etc. As mentioned, I\/O interface  enables processor device  to retrieve respective information from repository .","As shown, computer readable storage media  can be encoded with application instance  (e.g., software, firmware, etc.) executed by processor device .","During operation of one embodiment, processor device  accesses computer readable storage media  via the use of interconnect  in order to launch, run, execute, interpret or otherwise perform the instructions of application -X stored on computer readable storage medium .","Execution of the application -X produces processing functionality such as process  in processor device . In other words, the application -X associated with processor device  represents an instance of executing application  within or upon the processor device  in the computer system .","Those skilled in the art will understand that the computer system  can include other processes and\/or software and hardware components, such as an operating system that controls allocation and use of hardware resources to execute application .","In accordance with different embodiments, note that computer system  may be any of various types of devices, including, but not limited to, a personal computer system, desktop computer, laptop, notebook, netbook computer, mainframe computer system, handheld computer, workstation, network computer, application server, storage device, a consumer electronics device such as a camera, camcorder, set top box, mobile device, video game console, handheld video game device, a peripheral device such as a switch, modem, router, or in general any type of computing or electronic device.","Functionality supported by application instances  will now be discussed via flowcharts in . Note that there will be some overlap with respect to concepts discussed above for . Also, note that the steps in the below flowcharts need not always be executed in the order shown. That is, the steps can be executed in any suitable order.",{"@attributes":{"id":"p-0087","num":"0086"},"figref":"FIG. 8","b":"800"},"In step , the application instance - retrieves primary application data -. The primary application data - can be retrieved from server - or produced by the user.","In step , the application instance - receives supplemental application data to be associated with the primary application data -.","In step , the application instance - computes a unique identifier value - based at least in part on the primary application data -.","In sub-step , the application instance - applies a processing function such as a hash function to at least a portion (e.g., e-mail address, phone number, etc.) of the primary application data - to produce the unique identifier value - for associating with the supplemental application data -.","In step , the application instance - forwards the unique identifier value - to server -; the server - enables subsequent retrieval of the supplemental application data - by application instance -.","In step , the application instance - initiates storage of the supplemental application data - in server -.","In step , the server - initiates storage of an index entry in map , associating the unique identifier value - to the supplemental application data - stored in repository -.",{"@attributes":{"id":"p-0095","num":"0094"},"figref":"FIG. 9","b":"900"},"In step , the application instance - retrieves primary application data - from server -.","In step , the application instance - produces a unique identifier value - based at least in part on the primary application data - retrieved form server -.","In sub-step , the application instance - applies a hash or other suitable function to at least a portion of the primary application data - to produce the unique identifier value -.","In step , the application instance - utilizes the unique identifier value - (as produced by the application instance -) as an index to identify the supplemental application data - stored in storage service provider -.","In sub-step , the application instance - forwards the unique identifier value - to the server -. The second server - maps the unique identifier value - as produced by the application instance - to the supplemental application data -.","In step , the application instance - initiates retrieval of the supplemental application data - from server -.","In sub-step , the application instance - receives the supplemental application data - from the server -.","In step , the application instance - utilizes the retrieved primary application data - to identify primary settings associated with application instance -.","In step , the application instance - utilizes the supplemental application data - to identify modifications with respect to the primary settings as specified by the primary application data -.","Using the techniques disclosed herein, each of multiple different instances of the same executed application can access data services provided by a cloud computing environment while still allowing customization of the application by accessing supplemental application data stored at one or more different locations without having to store the supplemental data locally, which would restrict usage of a computer system. In this manner, even though a cloud computing environment may not support additional features, an application utilizing the system disclosed herein can provide additional services for a user and those services (that require storage and access to supplemental data) will be available on different devices used by that user.","The same processing function used by the different instances of the application to produce the unique identifier values to retrieve the supplemental application data can be unique with respect to the user of the application. Accordingly, only the user's application (amongst may possible applications) will be able to generate the appropriate keys or index values to retrieve the supplemental application data. Thus, embodiments herein can provide a level of security over conventional techniques.","As mentioned, in an example embodiment, the primary application data and the supplemental application data can pertain to contacts information used in an address book. In such an embodiment, in a first instance of the application, when the user operates the application to create or modify data that cannot be written back to a first storage service provider located in the network, the application  creates a unique identifier value (e.g., an index value, a hash-based key, etc.) based on properties of the primary application data (e.g., specific contact information) and uses this key to store the additional contact information that is identified only by the key. The application then sends this unique identifier value to a second storage service provider. The second storage service provider stores the unique identifier value and allows the supplemental application data to be synchronized to any other instance of that application operated by that user.","When the second instance of the application attempts synchronization, the second instance of the application produces hash values for each of the contacts. The second instance of the application forwards the hash values (i.e., unique identifier values) to the supplemental server to check whether supplemental data is available for a respective contact. If so, the supplemental server forwards the data to the second instance of the application. Via retrieval of the primary application data from the first storage service provider and retrieval of the supplemental application data for each contact from the second storage service provider, the second instance of the application can be properly synchronized.","Techniques herein are well suited for use in applications in which multiple instances of software can be executed on multiple disparately located devices connected to a network. However, it should be noted that embodiments herein are not limited to use in such applications and that the techniques discussed herein are well suited for other applications as well.","Note that embodiments herein can include a configuration of one or more computerized devices, workstations, handheld or laptop computers, or the like to carry out and\/or support any or all of the method operations disclosed herein. In other words, one or more computerized devices or processors can be programmed and\/or configured to operate as explained herein to carry out different embodiments of the invention.","Yet other embodiments herein include software programs to perform the steps and operations summarized above and disclosed in detail below. One such embodiment comprises a computer program product including a computer-readable storage medium (i.e., any type of hardware storage medium) on which software instructions are encoded for subsequent execution. The instructions and\/or program, when executed in a computerized device having a processor, cause the processor to perform the operations disclosed herein. Such arrangements are typically provided as software, code, instructions, and\/or other data (e.g., data structures) arranged or encoded on a non-transitory computer readable storage medium such as an optical medium (e.g., CD-ROM), floppy disk, hard disk, memory stick, etc., or other a medium such as firmware or microcode in one or more ROM, RAM, PROM, etc., or as an Application Specific Integrated Circuit (ASIC), etc. The software or firmware or other such configurations can be installed onto a computerized device to cause the computerized device to perform the techniques explained herein.","Other embodiments of the present disclosure include software programs and\/or respective hardware to perform any of the method embodiment steps and operations summarized above and disclosed in detail below. The ordering of the steps has been added for clarity sake. These steps can be performed in any suitable order.","It is to be understood that the system, method, apparatus, instructions on computer readable storage media, etc., as discussed herein can be embodied strictly as a software program, as a hybrid of software and hardware, or as hardware alone such as within a processor, or within an operating system or a within a software application. Example embodiments of the invention may be implemented within products and\/or software applications such as those manufactured by Microsoft Corporation, Redmond, Wash., USA.","Additionally, although each of the different features, techniques, configurations, etc., herein may be discussed in different places of this disclosure, it is intended that each of the concepts can be executed independently of each other or, where suitable, the concepts can be used in combination with each other. Accordingly, the one or more present inventions as described herein can be embodied and viewed in many different ways.","Based on the description set forth herein, numerous specific details have been set forth to provide a thorough understanding of claimed subject matter. However, it will be understood by those skilled in the art that claimed subject matter may be practiced without these specific details. In other instances, methods, apparatuses, systems, etc., that would be known by one of ordinary skill have not been described in detail so as not to obscure claimed subject matter. Some portions of the detailed description have been presented in terms of algorithms or symbolic representations of operations on data bits or binary digital signals stored within a computing system memory, such as a computer memory. These algorithmic descriptions or representations are examples of techniques used by those of ordinary skill in the data processing arts to convey the substance of their work to others skilled in the art. An algorithm as described herein, and generally, is considered to be a self-consistent sequence of operations or similar processing leading to a desired result. In this context, operations or processing involve physical manipulation of physical quantities. Typically, although not necessarily, such quantities may take the form of electrical or magnetic signals capable of being stored, transferred, combined, compared or otherwise manipulated via processing circuitry and\/or software. It has proven convenient at times, principally for reasons of common usage, to refer to such signals as bits, data, values, elements, symbols, characters, terms, numbers, numerals or the like. It should be understood, however, that all of these and similar terms are to be associated with appropriate physical quantities and are merely convenient labels. Unless specifically stated otherwise, as apparent from the following discussion, it is appreciated that throughout this specification discussions utilizing terms such as \u201cprocessing,\u201d \u201ccomputing,\u201d \u201ccalculating,\u201d \u201cdetermining\u201d or the like refer to actions or processes of a computing platform, such as a computer or a similar electronic computing device, that manipulates or transforms data represented as physical electronic or magnetic quantities within memories, registers, or other information storage devices, transmission devices, or display devices of the computing platform.","While this invention has been particularly shown and described with references to preferred embodiments thereof, it will be understood by those skilled in the art that various changes in form and details may be made therein without departing from the spirit and scope of the present application as defined by the appended claims. Such variations are intended to be covered by the scope of this present application. As such, the foregoing description of embodiments of the present application is not intended to be limiting. Rather, any limitations to the invention are presented in the following claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The foregoing and other objects, features, and advantages of the invention will be apparent from the following more particular description of preferred embodiments herein, as illustrated in the accompanying drawings in which like reference characters refer to the same parts throughout the different views. The drawings are not necessarily to scale, with emphasis instead being placed upon illustrating the embodiments, principles, concepts, etc.",{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 9"}]},"DETDESC":[{},{}]}
