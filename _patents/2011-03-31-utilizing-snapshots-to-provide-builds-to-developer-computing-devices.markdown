---
title: Utilizing snapshots to provide builds to developer computing devices
abstract: A method and system for utilizing snapshots to provide software builds to developer computing devices is described. In some examples, the system, in response to receiving a request for a software build, performs a snapshot of a storage volume containing the requested build, and mounts the snapshot to the developer computing device, enabling the developer computing device to access the software build. In some examples, the system, in response to receiving a request for a software build, establishes a virtual machine, performs a snapshot of a storage volume containing the requested build, mounts the snapshot to the established virtual machine, and provides the virtual machine to the requesting computing device.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08719767&OS=08719767&RS=08719767
owner: CommVault Systems, Inc.
number: 08719767
owner_city: Oceanport
owner_country: US
publication_date: 20110331
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","BACKGROUND","DETAILED DESCRIPTION","Overview","Suitable System","CONCLUSION"],"p":["This application is related to U.S. patent application Ser. No. 12\/553,294, filed on Sep. 3, 2009, entitled SYSTEMS AND METHODS FOR MANAGEMENT OF VIRTUALIZATION DATA, which is incorporated by reference in its entirety.","The development of software is generally done as a series of software builds, also known as development builds, dev builds, or just builds. A build may refer to a process of converting source code files into standalone software artifacts capable of being run by a computer, or the result of such a process. Thus, during the creation of software, developers may create many different builds, such as weekly or even daily builds, before reaching a final product.","As can be appreciated, a single computing machine is often unable to manage and store many builds during the development of software, and arrays and other external storage devices may be utilized. However, although the arrays may provide enough storage for a development environment, conventional systems require the copying and moving around of build data to developers requesting the data. Such moving and copying, often manual processes, may not be feasible for many software development environments, such as software development environments that include many software developers creating and modifying many builds over a network.","There is a need for a system that overcomes the above problems, as well as providing additional benefits.","A method and system for utilizing snapshots to provide software builds to developer computing devices is described. In some examples, the system, in response to receiving a request for a software build, performs a snapshot of a storage volume containing the requested build, and mounts the snapshot to the developer computing device, enabling the developer computing device to access the software build.","In some examples, the system, in response to receiving a request for a software build, establishes a virtual machine, performs a snapshot of a storage volume containing the requested build, mounts the snapshot to the established virtual machine, and provides the virtual machine to the requesting computing device.","Thus, the system, in some examples, enables software developers in a software build environment to access builds stored within the environment without requiring the build environment to copy and\/or transfer the build to computing devices associated with the software developers, among other benefits. Furthermore, the system, in some examples, provides software developers with virtual build environments, including any requested builds and\/or computing resources associated with the build, in order to provide the developers with the build data and resources needed to perform certain tasks during the development of software. Such a system may facilitate a faster, more accurate, development of software, among other things.","The system will now be described with respect to various embodiments. The following description provides specific details for a thorough understanding of, and enabling description for, these embodiments of the system. However, one skilled in the art will understand that the system may be practiced without these details. In other instances, well-known structures and functions have not been shown or described in detail to avoid unnecessarily obscuring the description of the embodiments of the system.","The terminology used in the description presented below is intended to be interpreted in its broadest reasonable manner, even though it is being used in conjunction with a detailed description of certain specific embodiments of the system. Certain terms may even be emphasized below; however, any terminology intended to be interpreted in any restricted manner will be overtly and specifically defined as such in this Detailed Description section.",{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIGS. 1 and 2"},"Aspects of the system can be embodied in a special purpose computer or data processor that is specifically programmed, configured, or constructed to perform one or more of the computer-executable instructions explained in detail herein. Aspects of the system can also be practiced in distributed computing environments where tasks or modules are performed by remote processing devices, which are linked through a communications network, such as a Local Area Network (LAN), Wide Area Network (WAN), Storage Area Network (SAN), Fibre Channel, or the Internet. In a distributed computing environment, program modules may be located in both local and remote memory storage devices.","Aspects of the system may be stored or distributed on computer-readable media, including magnetically or optically readable computer discs, hard-wired or preprogrammed chips (e.g., EEPROM semiconductor chips), nanotechnology memory, biological memory, or other data storage media. Indeed, computer implemented instructions, data structures, screen displays, and other data under aspects of the system may be distributed over the Internet or over other networks (including wireless networks), on a propagated signal on a propagation medium (e.g., an electromagnetic wave(s), a sound wave, etc.) over a period of time, or they may be provided on any analog or digital network (packet switched, circuit switched, or other scheme). Those skilled in the relevant art will recognize that portions of the system reside on a server computer, while corresponding portions reside on a client computer, and thus, while certain hardware platforms are described herein, aspects of the system are equally applicable to nodes on a network.",{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 1","b":["100","100","110","110","110","150","150","110","120","150","150","150","155","155","155","150"],"i":["a","b","c","a","b ","a","c ","a","b ","a","b ","a","b","a","b ","a","b"]},"In some cases, a snapshot refers to the state of a system as a specific point in time. For example, a snapshot component may create a read-only copy of a data set within a volume at a point in time, allowing applications to continue writing data to the volume. Generally, snapshot components are efficient and do not unduly tax a volume. In some examples, once the initial snapshot is taken of a volume, subsequent incremental snapshots copy changed data only, and use a system of pointers to reference the initial snapshot. Such a technique may consume less disk capacity versus continually taking a snapshot of an entire volume. Read-write snapshots are sometimes called branching snapshots, because they implicitly create diverging versions of their data. In addition to backups and data recovery, read-write snapshots may be used in virtualization, sandboxing, virtual hosting, and other regimes, because of their usefulness in managing changes to large sets of files, among other things.","The arrays -may include hardware snapshot components associated with the type of array. For example, an IBM XIV array includes a snapshot component configured to take snapshots of data sets stored in the array volume. The computing environment  may include other snapshot components not array specific, such as software-based snapshot components used in data storage systems, such as the CommVault Simpana system, available from CommVault Systems, Inc.","The computing environment  also includes a development manager , which may include a virtual layer capable of establishing a virtual machine environment  accessible by one or more of the development machines -. The development manager  may provide various management functions associated with the development of software within the computing environment , including storage functions, indexing functions, control functions, coordination functions, build management, and so on. The development manager  may provide some or all resources and data by utilizing a cloud-based computing system , or other computing resources (not shown). For example, the development manager  may establish a virtual machine  to be accessed by the development machines -within the cloud-based computing system .","The development manager  may function, in part, as a build tool for software development within computing environment . The process of building computer software is usually managed by a build tool, which is a program that coordinates and controls other programs. Examples of such a program include make, ant, maven, SCons, Phing, and so on, The build tool, which may also be stored on development machines -, often compile and\/or link various files, in the correct order. For example, if the source code in a particular file has not changed, then it may not need to be recompiled. Further details regarding the development manager  will now be discussed with respect to .",{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 2","b":["135","135","210","220","230","240","250"]},"In some examples, the user interface component  provides an interface to the development machines -that presents developers with builds available to be accessed. For examples, the user interface component  may present a list of builds available to a developer at his\/her development machine , and receive input indicating a selection of a desired build.","In some examples, the snapshot management component  facilitates the performance of snapshot on volumes that store build data. For example, the snapshot management component , in response to the system receiving a request for access to a certain build, may cause a snapshot component at an external array storing the requested build to take a snapshot of the volume storing the requested build. The snapshot management component  may also cause or facilitate the mounting of the taken snapshot to the requesting development machine or to a virtual machine  which may be establishes by the virtual machine component .","In some examples, the reservation management component  monitors and\/or managers the provision of snapshot-based access of development machines -to builds stored in arrays -. For example, the reservation management component  may reserve a certain number of development machines for a certain build, may delete snapshots once a development machine is finished with a provided build, and\/or may perform other functions described herein.","For example, in collaboration with the virtual machine component , the reservation management component  may cause a virtual machine to be established and provided to a development machine in response to a request from the development machine for a certain build.  is a block diagram illustrating a virtualization layer  in which aspects of the system may be implemented.","In general, virtualization refers to the simultaneous hosting of one or more operating systems on a physical computer. Such virtual operating systems and their associated virtual resources are called virtual machines. Virtualization software sits between the virtual machines and the hardware of the physical computer. One example of virtualization software is ESX Server, by VMware, Inc. of Palo Alto, Calif. Other examples include Microsoft Virtual Server and Microsoft Windows Server Hyper-V, both by Microsoft Corporation of Redmond, Wash., and Sun xVM by Sun Microsystems Inc. of Santa Clara, Calif. Virtualization software provides to each virtual operating system virtual resources, such as a virtual processor, virtual memory, a virtual network device, and a virtual disk. Each virtual machine has one or more virtual disks. Virtualization software typically stores the data of virtual disks in files on the file system of the physical computer, called virtual machine disk files (in the case of VMware virtual servers) or virtual hard disk image files (in the case of Microsoft virtual servers). For example, VMware's ESX Server provides the Virtual Machine File System (VMFS) for the storage of virtual machine disk files. A virtual machine reads data from and writes data to its virtual disk much the same way that an actual physical machine reads data from and writes data to an actual disk.","Referring to , the virtual layer  may operate on on or be hosted by a computing device, such as the development manager . The virtual layer  may also include or be connected to a virtual data store, such as primary data store disk  or secondary data store disk , connected to the virtual layer via a storage area network. The virtual layer  also includes a virtual machine storage manager  operating on or being hosted by another computing device, which may be another server, and a secondary storage data store  connected to the computing device. The computing devices may be connected to each other via a network, which may be a LAN, a WAN, the public Internet, some other type of network, and so on.","The virtual layer hosts one or more virtual machines . The virtual machine  includes an operating system  and one or more applications  executing on the operating system or loaded on the operating system. The operating system  may be any type of operating system, such as Microsoft Windows 95\/98\/NT\/2000\/XP\/2003\/2008\/2010, Linux operating systems, Sun Solaris operating systems, UNIX operating systems, Apple OSx, and so on, that can be hosted by the virtual layer . The applications  may be any applications (e.g., database applications, file server applications mail server applications, web server applications, transaction processing applications, snapshot applications, media streaming applications, build applications, and so on) that may run on the operating system . The virtual machine may also be connected to the various networks described herein.","The operating system  may be connected to the virtual storage disks ,  via the SAN, which may be any type of SAN, such as a Fibre Channel SAN, an iSCSI SAN, or any other type of SAN. A primary storage data store may store the virtual disks ,  of the virtual machine  hosted by the virtual layer . A virtual disk ,  may correspond to one or more files (e.g., one or more*.vmdk or*.vhd files) on the primary storage data store. The primary storage data store may store a primary copy of the data of the virtual machine . Additionally or alternatively, the virtual disks ,  may be stored by other storage devices in a data storage system, such as in the cloud-based computing system .","A primary copy of data generally includes a production copy or other \u201clive\u201d version of the data that is used by a software application and is generally in the native format of that application. Primary copy data may be maintained in a local memory or other high-speed storage device (e.g., on the virtual disks ,  located in the primary storage data store) that allows for relatively fast data access, if necessary. Such primary copy data may be intended for short-term retention (e.g., several hours or days) before some or all of the data is stored as one or more secondary copies, for example, to prevent loss of data in the event a problem occurs with the data stored in primary storage.","In contrast, secondary copies include point-in-time data and are typically intended for long-term retention (e.g., weeks, months, or years depending on retention criteria, for example, as specified in a storage or retention policy) before some or all of the data is moved to other storage or discarded. Secondary copies may be indexed so users can browse and restore the data at another point in time. After certain primary copy data is backed up, a pointer or other location indicia, such as a stub, may be placed in the primary copy to indicate the current location of that data.","The virtual machine storage manager  includes a virtual machine storage operation component, which includes a Virtual Logical Unit Number (VLUN) driver for accessing virtual disks , , and a virtual machine mount component for mounting virtual machines. The virtual machine storage manager  also includes a data agent. The data agent includes an integration component that provides functionality for the virtual machine storage operation component. The data agent also includes a virtual disk analyzer component that examines the virtual disk and configuration files corresponding to the virtual disks ,  and extracts metadata from the virtual disk and configuration files. For example, the integration component may include a set of scripts that the data agent causes to be run prior to, during, and\/or following a copy of virtual machine data. As another example, the integration component may be a component that encapsulates or wraps the virtual machine mount component and provides an Application Programming Interface (API) with functions for accessing the virtual machine mount component. The virtual machine storage manager  also includes a data store  that maintains data used by the virtual machine storage manager , such as data used during storage operations, and configuration data.","Virtual disks ,  may have various configurations. As previously described, a virtual disk ,  corresponds to one or more virtual disk files (e.g., one or more*.vmdk or *.vhd files) on a primary storage data store. A virtual layer  may support several types of virtual disks , . For example, a virtual disk may be either: 1) a growable virtual disk contained in a single virtual disk file that can grow in size (e.g., a monolithic sparse virtual disk that starts at 2 GB and grows larger); 2) a growable virtual disk split into multiple virtual disk files (e.g., a split sparse virtual disk comprising multiple 2 GB virtual disk files), the aggregation of which can grow in size by adding new virtual disk files; 3) a preallocated virtual disk contained in a single virtual disk file (e.g., a monolithic flat virtual disk, the size of which does not change); or 4) a preallocated virtual disk split into multiple virtual disk files (e.g., a split flat virtual disk comprising multiple 2 GB virtual disk files, the number of which and the size of each of which does not change). Where a virtual disk is split into multiple virtual disk files, each individual virtual disk file is called an extent. A virtual layer  may also support types of virtual disks other than these types. Those of ordinary skill in the art will understand that a virtual disk can be structured in a wide variety of configurations, and that virtual disks are not limited to the configurations described herein.","A virtual layer  may support snapshotting, or taking a snapshot of a virtual machine. The virtual layer  can snapshot a virtual machine in a linear fashion (in which there is only one branch of snapshots from the original state of the virtual machine, and each snapshot in the branch linearly progresses from prior snapshots) or in a process tree (in which there are multiple branches of snapshots from the original state of the virtual machine, and two snapshots may or may not be in the same branch from the original state of the virtual machine). When a snapshot is taken of a virtual machine, the virtual machine stops writing to its virtual disks (e.g., stops writing to the one or more *.vmdk files). The virtual machine writes future writes to a delta disk file (e.g., a *delta.vmdk file) using, for example, a copy-on-write (COW) semantic. As the virtual machine layer  can snapshot a virtual machine repeatedly, there can be multiple delta disk files. The virtual disk and delta disk files can be analogized to links in a chain. Using this analogy, the original disk file is a first link in the chain. A first child delta disk file is a second link in the chain, and a second child delta disk file is a third link in the chain, and so forth.","Also as previously described, a virtual machine generally has associated configuration files that a virtual layer  uses to store configuration data about the virtual machine. These configuration files may include a *.vmx file, which stores data about the parent-child relationships created between virtual disk files and delta disk files when a snapshot of a virtual machine is taken. These configuration files may also include a disk descriptor file (e.g., a *.vmdk file). In some examples, instead of using a disk descriptor file, the disk descriptor is embedded into a virtual disk file (e.g., embedded in a *.vmdk file).","The disk descriptor file generally stores data about the virtual disk files that make up a virtual disk , . This data includes information about the type of the virtual disk. For example, the virtual disk may be a monolithic flat virtual disk, a monolithic sparse virtual disk, a split flat virtual disk, a split sparse virtual disk or another type of a virtual disk. This data also includes an identifier of the parent of the virtual disk file, if it has one (if the virtual machine has been snapshotted, its original virtual disk file will have a child virtual disk file), a disk database describing geometry values for the virtual disk (e.g., cylinders, heads and sectors) and information describing the extents that make up the virtual disk. Each extent may be described by a line in the disk descriptor file having the following format: [type of access] [size] [type] [file name of extent]. Following is an example of a line in the disk descriptor file describing an extent: [0053]RW 16777216 VMFS \u201ctest-flat.vmdk.\u201d This line describes an extent for which read\/write access is allowed, of size 16777216 sectors, of type VMFS (e.g., for use on a primary storage data store), and the filename of the virtual disk file\u2014\u201ctest-flat.vmdk.\u201d","A virtual layer  provides an abstraction layer such that the one or more virtual disks files (and any delta disk files) of the virtual disks ,  appear as one or more actual disks (e.g., one or more hard disk drives) to a virtual machine. Because the virtual layer  abstracts the virtual disk so that it appears as an actual disk to an operating system  executing on the virtual machine , the operating system  can generally use its standard file system for storing data on a virtual disk , . The various structures used by the file system and the operating system  (e.g., the partition table(s), the volume manager database(s) and the file allocation table(s)) are stored in the one or more virtual disk files that make up a virtual disk.","For example, a virtual layer  may store a single virtual disk file (e.g., a single *.vmdk file) that is a preallocated virtual disk (a monolithic flat virtual disk) for each virtual disk used by a virtual machine operating on the virtual layer . The single virtual disk file may be named <virtual machine name>-flat.vmdk. There would also be a disk descriptor file for the single virtual disk file that would typically be named <virtual machine name>-.vmdk. A snapshot taken of the virtual machine would result in an additional delta disk file being created that is a single virtual disk file (e.g., a single *.vmdk file), which is a growable virtual disk (a monolithic sparse virtual disk). The delta disk file would typically be named <virtual disk name>-<######>-delta.vmdk, where <######> is a number indicating the sequence of the snapshot. There would also be a disk descriptor file for the single virtual disk file that would typically be named <virtual disk name>-<######>-.vmdk, again, where <######> is a number indicating the sequence of the snapshot.","Further details regarding the establishment of a virtual machine may be found in commonly-assigned U.S. patent application Ser. No. 12\/553,294, filed on Sep. 3, 2009, entitled SYSTEMS AND METHODS FOR MANAGEMENT OF VIRTUALIZATION DATA, which is incorporated by reference in its entirety.","Thus, the system may include devices and\/or components configured and\/or programmed to perform snapshots on build data stored in array volumes. Further, the system may include devices and\/or components configure and\/or programmed to mount the snapshots to requesting development machines, mount the snapshots to established virtual computing provided to requesting development machines, or perform other functions that facilitate access to build data via the snapshots.","Utilizing Snapshots to Provide Builds to Computing Devices","As discussed herein, the system enables development machines to access software builds by utilizing snapshot mechanisms to provide copies of the software builds.  is a flow diagram illustrating a routine  for providing a development build to a computing device.","In step , the system presents a display showing available builds within a software development environment. For example, a user interface component  may present a user interface that presents a list of builds\/data volumes associated with software development to a development machine . The user interface may be a webpage or other page provided within a network that enables developers to review and access various different builds during the development of software.","In step , the system receives an indication that a build has been selected at a computing device. For example, the user interface component  presented at a development machine receives an indication that a developer wishes to access a certain build during the development of software, such as a selection of a build\/volume presented within the user interface.","In step , the system performs a snapshot on an external array having a volume storing the selected build. For example, a snapshot management component , in communication with the user interface component , causes a snapshot mechanism at the external array to perform a snapshot of a volume containing the selected build. In some cases, the system may automatically perform the snapshot in response to the selection. In some cases, the system may only perform the snapshot once a build is requested.","In step , the system mounts the snapshot to the requesting computing device. For example, the snapshot management component  may cause the snapshot to be mounted to the development machine . In step , the system provides access to the requested build. For example, the system may provide a drive or other transparent access to a requested build mounted to a development machine.","During access, a developer, via his\/her mounted development machine, may make changes to the build, such as modifications, corrections, and so on. Once access is complete and the development machine no longer needs access to the build, the system may delete the snapshot, take a snapshot of the snapshot, automatically take another snapshot when changes are made to the build, and so on. That is, the system, in response to changes made to a build, may take a snapshot of the build before checking the build back into the development environment. The system may then delete the original snapshot.","Thus, in some examples, the system provides an automatic way to mount any software build stored in any external storage device to any development machine creating data for the software build. That is, the system enables a developer to view available builds, select a build, access the build, and utilize the build, without copying and transferring the data of the build across the development environment, among other benefits. In addition, the system, in some examples, may also provide a complete build environment to developers, when needed. For example, a certain development machine associated with a developer may not have the tools\/resources to compile or otherwise work with a build provided to the developer. In such examples, the system may enable the developer to receive the necessary resources along with a desired build.  is a flow diagram illustrating a routine  for providing a virtual machine associated with a development build to a computing device.","In step , the system presents a display showing available builds within a software development environment. For example, a user interface component  may present a user interface that presents a list of builds\/data volumes associated with software development to a development machine . The user interface may be a webpage or other page provided within a network that enables developers to review and access various different builds during the development of software.","In step , the system receives an indication that a build has been selected at a computing device. For example, the user interface component  presented at a development machine receives an indication that a developer wishes to access a certain build during the development of software, such as a selection of a build\/volume presented within the user interface.","In step , the system establishes a virtual machine associated with the selected build. For example, the system may determine that a development machine requesting a selected build does not include resources necessary to compile the build. The system may, therefore, establish a virtual machine that includes preinstalled software and other resources associated with the build. That is, the system may create a new, virtual build machine that contains all the tools and resources to manipulate the data within the selected build.","In step , the system performs a snapshot on an external array having a volume storing the selected build. For example, a snapshot management component , in communication with the user interface component , causes a snapshot mechanism at the external array to perform a snapshot of a volume containing the selected build. In some cases, the system may automatically perform the snapshot in response to the selection. In some cases, the system may only perform the snapshot once a build is requested.","In step , the system mounts the snapshot to the established virtual machine. For example, the snapshot management component  may cause the snapshot to be mounted to a virtual machine  established by the virtual machine component .","In step , the system provides the virtual machine to the computing device. For example, the virtual machine component  provides a virtual machine and all the necessary build data to a development machine ","Thus, the system may, in response to a request for build data, establish a virtual machine, mount a snapshot of a volume containing build data to the establishes virtual machine, and provide the virtual machine to a software developer.","In addition to development environments, the system may be utilized by other computing environments. For example, the system may utilize access to data using snapshot in document storage environments, multimedia libraries, document management systems (e.g., SharePoint), and other environments in which data may be staged and\/or accessed by users without affecting other users.","In some examples, the system may perform various load balancing on arrays and other external storage devices that take snapshots of data and provide the data to users within a network. For example, the system may balance the load across various connectors in an array when multiple snapshots are being performed at the array. Additionally, the system may employ a reservation policy that limits the time of access of a build for a developer. That is, the system may automatically delete snapshots after a certain time period of inactivity associated with a developer's access of a requested build. Thus, such load balancing techniques may facilitate the system to provide access to builds within a development environment without bottlenecks on storage devices, among other benefits.","Therefore, the system, in some examples, enables developers to access builds (and associated computing resources) in a software development environment by utilizing the snapshot capabilities of external arrays and other data storage components. The snapshot mechanisms facilitate quick and easy access to data associated with builds, providing developers with access to an entire development environment at their development machine. Further, the system may establish virtual development machines to developers, providing developers with a wide variety of resources and data within a development environment.","From the foregoing, it will be appreciated that specific embodiments of the system have been described herein for purposes of illustration, but that various modifications may be made without deviating from the spirit and scope of the system. Accordingly, the system is not limited except as by the appended claims.","Unless the context clearly requires otherwise, throughout the description and the claims, the words \u201ccomprise,\u201d \u201ccomprising,\u201d and the like are to be construed in an inclusive sense, as opposed to an exclusive or exhaustive sense; that is to say, in the sense of \u201cincluding, but not limited to.\u201d The word \u201ccoupled\u201d, as generally used herein, refers to two or more elements that may be either directly connected, or connected by way of one or more intermediate elements. Additionally, the words \u201cherein,\u201d \u201cabove,\u201d \u201cbelow,\u201d and words of similar import, when used in this application, shall refer to this application as a whole and not to any particular portions of this application. Where the context permits, words in the above Detailed Description using the singular or plural number may also include the plural or singular number respectively. The word \u201cor\u201d in reference to a list of two or more items, that word covers all of the following interpretations of the word: any of the items in the list, all of the items in the list, and any combination of the items in the list.","The above detailed description of embodiments of the system is not intended to be exhaustive or to limit the system to the precise form disclosed above. While specific embodiments of, and examples for, the system are described above for illustrative purposes, various equivalent modifications are possible within the scope of the system, as those skilled in the relevant art will recognize. For example, while processes or blocks are presented in a given order, alternative embodiments may perform routines having steps, or employ systems having blocks, in a different order, and some processes or blocks may be deleted, moved, added, subdivided, combined, and\/or modified. Each of these processes or blocks may be implemented in a variety of different ways. Also, while processes or blocks are at times shown as being performed in series, these processes or blocks may instead be performed in parallel, or may be performed at different times.","The teachings of the system provided herein can be applied to other systems, not necessarily the system described above. The elements and acts of the various embodiments described above can be combined to provide further embodiments.","These and other changes can be made to the system in light of the above Detailed Description. While the above description details certain embodiments of the system and describes the best mode contemplated, no matter how detailed the above appears in text, the system can be practiced in many ways. Details of the system may vary considerably in implementation details, while still being encompassed by the system disclosed herein. As noted above, particular terminology used when describing certain features or aspects of the system should not be taken to imply that the terminology is being redefined herein to be restricted to any specific characteristics, features, or aspects of the system with which that terminology is associated. In general, the terms used in the following claims should not be construed to limit the system to the specific embodiments disclosed in the specification, unless the above Detailed Description section explicitly defines such terms. Accordingly, the actual scope of the system encompasses not only the disclosed embodiments, but also all equivalent ways of practicing or implementing the system under the claims.","While certain aspects of the system are presented below in certain claim forms, the inventors contemplate the various aspects of the system in any number of claim forms. For example, while only one aspect of the system is recited as embodied in a computer-readable medium, other aspects may likewise be embodied in a computer-readable medium. Accordingly, the inventors reserve the right to add additional claims after filing the application to pursue such additional claim forms for other aspects of the system."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0006","num":"0005"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 5"}]},"DETDESC":[{},{}]}
