---
title: Application of data-binding mechanism to perform command binding
abstract: A data-binding engine is used to perform command binding. A data binding engine binds user interface controls such as buttons, menus, list boxes, etc. to commands exposed on an application model. A data source and data binding path may be specified in a markup language that defines how the commands are bound to UI elements.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07653880&OS=07653880&RS=07653880
owner: Microsoft Corporation
number: 07653880
owner_city: Redmond
owner_country: US
publication_date: 20040413
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF ILLUSTRATIVE EMBODIMENTS"],"p":["The application is related to patent application Ser. No. 10\/823,461 entitled \u201cPRIORITY BINDING\u201d, filed herewith.","The invention relates to computer processing and in particular to using a data-binding mechanism for command binding.","The code for application programs is frequently separated into a layer for user interaction (a set of \u201cviews\u201d or user interfaces (UIs)) and a layer for implementing the internal application logic and data management (often realized through a set of \u201cmodels\u201d). The user interface typically includes menu items and other UI elements that invoke functionality implemented on the models.","Typically, a graphic designer designs the look of the user interface while a developer writes the code that implements the user interface and\/or the underlying model. Graphic design and software development are two very different disciplines and it is frequently difficult for designers and developers to work together productively. Typically, a designer uses graphics tools such as Adobe\u00ae Photoshop\u00ae and Adobe\u00ae Illustrator\u00ae to create a mock up of a user interface (UI) and then a developer re-implements the UI in code. The original graphic design elements are typically not re-used in the final implementation and sometimes, parts of the design are lost in the process because the developer either cannot easily recreate the design in code or does not fully understand the design. If the design is modified, the designer may be required to redraw the UI and the developer may have to rewrite parts of the code to match the design. In short, the process is clumsy.","Another problem encountered when architecting such an application is how to expose functionality (commands) and how to map or bind that functionality to elements in the UI. For example, a text processing application may expose functionality for cutting selected text. This functionality may be exposed as a \u201ccommand\u201d (e.g., the document exposes a way to invoke a \u201ccut\u201d command). Program code is required to make the connection between what happens on the UI and what happens to the underlying data, that is, to define how the command binds to the menu item.","Traditionally, event handlers or command routing was employed to perform this task. Event handlers provide a direct way to bind code and UI elements. A UI element may expose an event declaration (e.g., \u201cClick\u201d on a menu item) and the model may implement a method (e.g., an event handler) that matches the signature of the event declaration. However, this mechanism is not very flexible. Changes in the active data model (e.g., the active document in the above example) or the command state (e.g., the \u201ccut\u201d command becomes inactive or disabled) typically requires additional code to be written by a developer to connect and disconnect event handlers and to update the state of the user interface.","Advanced applications that require flexibility in command handling typically assign an identifier (ID) for each command associated with a UI element. Such systems usually have a central service (sometimes called a command manager) that maps a command ID to the currently active implementation of the command. The command manager handles a set of active command targets (i.e., a set of models that expose commands). To execute a command, an identifier is sent from the UI to the command manager and the command manager finds the command target that is handling a command with the received ID and invokes the command on that target. Unfortunately, this mechanism is rather complex and difficult to master.","It would be helpful if there were an easy, flexible way to connect UI elements to the commands exposed on the application model. Moreover, it would be helpful if it were also possible to make the software development process easier for designers and developers.","A data-binding engine is used to perform command binding. A data binding engine binds user interface controls such as buttons, menus, list boxes, etc. to commands exposed on an application model. In some embodiments of the invention the command binding is specified declaratively in markup language. A data binding path and data source may be specified in the markup that defines how the commands are bound to UI elements.","Overview","Suppose a text processing application handles a number of document objects that expose functionality for cutting selected text. The application may provide a menu item labeled \u201cCut\u201d on the \u201cEdit\u201d menu. The application needs to define how the \u201cCut\u201d command binds to the menu item and to the active document. Traditional methods of command binding are complex and add to the difficulties inherent in designer\/developer interaction. In accordance with some embodiments of the invention, command binding is accomplished by declaratively associating data binding command paths to elements or components of a user interface, sending change notifications when a command property changes and updating the target automatically by a object-binding mechanism, thereby decreasing the complexity level and the need for technical expertise in command binding and routing.","Exemplary Computing Environment",{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 1"},"Although not required, the invention can be implemented via an application programming interface (API), for use by a developer, and\/or included within the network browsing software which will be described in the general context of computer-executable instructions, such as program modules, being executed by one or more computers, such as client workstations, servers, or other devices. Generally, program modules include routines, programs, objects, components, data structures and the like that perform particular tasks or implement particular abstract data types. Typically, the functionality of the program modules may be combined or distributed as desired in various embodiments. Moreover, those skilled in the art will appreciate that the invention may be practiced with other computer system configurations. Other well known computing systems, environments, and\/or configurations that may be suitable for use with the invention include, but are not limited to, personal computers (PCs), automated teller machines, server computers, hand-held or laptop devices, multi-processor systems, microprocessor-based systems, programmable consumer electronics, network PCs, minicomputers, mainframe computers, and the like. The invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network or other data transmission medium. In a distributed computing environment, program modules may be located in both local and remote computer storage media including memory storage devices.",{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 1","b":["100","100","100","100"]},"With reference to , an exemplary system for implementing the invention includes a general purpose computing device in the form of a computer . Components of computer  may include, but are not limited to, a processing unit , a system memory , and a system bus  that couples various system components including the system memory to the processing unit . The system bus  may be any of several types of bus structures including a memory bus or memory controller, a peripheral bus, and a local bus using any of a variety of bus architectures. By way of example, and not limitation, such architectures include Industry Standard Architecture (ISA) bus, Micro Channel Architecture (MCA) bus, Enhanced ISA (EISA) bus, Video Electronics Standards Association (VESA) local bus, and Peripheral Component Interconnect (PCI) bus (also known as Mezzanine bus).","Computer  typically includes a variety of computer readable media. Computer readable media can be any available media that can be accessed by computer  and includes both volatile and nonvolatile media, removable and non-removable media. By way of example, and not limitation, computer readable media may comprise computer storage media and communication media. Computer storage media includes both volatile and nonvolatile, removable and non-removable media implemented in any method or technology for storage of information such as computer readable instructions, data structures, program modules or other data. Computer storage media includes, but is not limited to, RAM, ROM, EEPROM, flash memory or other memory technology, CDROM, digital versatile disks (DVD) or other optical disk storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other medium which can be used to store the desired information and which can be accessed by computer . Communication media typically embodies computer readable instructions, data structures, program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term \u201cmodulated data signal\u201d means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example, and not limitation, communication media includes wired media such as a wired network or direct-wired connection, and wireless media such as acoustic, RF, infrared, and other wireless media. Combinations of any of the above should also be included within the scope of computer readable media.","The system memory  includes computer storage media in the form of volatile and\/or nonvolatile memory such as read only memory (ROM)  and random access memory (RAM) . A basic input\/output system  (BIOS), containing the basic routines that help to transfer information between elements within computer , such as during start-up, is typically stored in ROM . RAM  typically contains data and\/or program modules that are immediately accessible to and\/or presently being operated on by processing unit . By way of example, and not limitation, illustrates operating system , application programs , other program modules , and program data .","The computer  may also include other removable\/non-removable, volatile\/nonvolatile computer storage media. By way of example only, illustrates a hard disk drive  that reads from or writes to non-removable, nonvolatile magnetic media, a magnetic disk drive  that reads from or writes to a removable, nonvolatile magnetic disk , and an optical disk drive  that reads from or writes to a removable, nonvolatile optical disk , such as a CD ROM or other optical media. Other removable\/non-removable, volatile\/nonvolatile computer storage media that can be used in the exemplary operating environment include, but are not limited to, magnetic tape cassettes, flash memory cards, digital versatile disks, digital video tape, solid state RAM, solid state ROM, and the like. The hard disk drive  is typically connected to the system bus  through a non-removable memory interface such as interface , and magnetic disk drive  and optical disk drive  are typically connected to the system bus  by a removable memory interface, such as interface .","The drives and their associated computer storage media discussed above and illustrated in  provide storage of computer readable instructions, data structures, program modules and other data for the computer . In , for example, hard disk drive  is illustrated as storing operating system , application programs , other program modules , and program data . Note that these components can either be the same as or different from operating system , application programs , other program modules , and program data . Operating system , application programs , other program modules , and program data  are given different numbers here to illustrate that, at a minimum, they are different copies. A user may enter commands and information into the computer  through input devices such as a keyboard  and pointing device , commonly referred to as a mouse, trackball or touch pad. Other input devices (not shown) may include a microphone, joystick, game pad, satellite dish, scanner, or the like. These and other input devices are often connected to the processing unit  through a user input interface  that is coupled to the system bus , but may be connected by other interface and bus structures, such as a parallel port, game port or a universal serial bus (USB).","A monitor  or other type of display device is also connected to the system bus  via an interface, such as a video interface . A graphics interface , such as Northbridge, may also be connected to the system bus . Northbridge is a chipset that communicates with the CPU, or host processing unit , and assumes responsibility for accelerated graphics port (AGP) communications. One or more graphics processing units (GPUs)  may communicate with graphics interface . In this regard, GPUs  generally include on-chip memory storage, such as register storage and GPUs  communicate with a video memory . GPUs , however, are but one example of a coprocessor and thus a variety of coprocessing devices may be included in computer . A monitor  or other type of display device is also connected to the system bus  via an interface, such as a video interface , which may in turn communicate with video memory . In addition to monitor , computers may also include other peripheral output devices such as speakers  and printer , which may be connected through an output peripheral interface .","The computer  may operate in a networked environment using logical connections to one or more remote computers, such as a remote computer . The remote computer  may be a personal computer, a server, a router, a network PC, a peer device or other common network node, and typically includes many or all of the elements described above relative to the computer , although only a memory storage device  has been illustrated in . The logical connections depicted in include a local area network (LAN)  and a wide area network (WAN) , but may also include other networks. Such networking environments are commonplace in offices, enterprise-wide computer networks, intranets and the Internet.","When used in a LAN networking environment, the computer  is connected to the LAN  through a network interface or adapter . When used in a WAN networking environment, the computer  typically includes a modem  or other means for establishing communications over the WAN , such as the Internet. The modem , which may be internal or external, may be connected to the system bus  via the user input interface , or other appropriate mechanism. In a networked environment, program modules depicted relative to the computer , or portions thereof, may be stored in the remote memory storage device. By way of example, and not limitation, illustrates remote application programs  as residing on memory device . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.","One of ordinary skill in the art can appreciate that a computer  or other client device can be deployed as part of a computer network. In this regard, the present invention pertains to any computer system having any number of memory or storage units, and any number of applications and processes occurring across any number of storage units or volumes. The present invention may apply to an environment with server computers and client computers deployed in a network environment, having remote or local storage. The present invention may also apply to a standalone computing device, having programming language functionality, interpretation and execution capabilities.","System and Method for Using a Data-Binding Mechanism for Command Binding",{"@attributes":{"id":"p-0031","num":"0030"},"figref":["FIG. 2","FIG. 2","FIG. 1"],"b":["202","202","110","208","206","203"]},"In some embodiments of the invention, data-binding component  is a data binding engine , that enables the dynamic binding of a command object of a source object, (e.g., exemplary source objects , , etc.) to a target object, (e.g., exemplary target objects , , etc.). The data binding engine may listen to property change notifications on objects so that a change to a source object command property is automatically reflected on the associated target object property. The data binding engine may listen to property change notifications on objects so that a change to a source object non-command property is automatically reflected on the associated target object property and vice versa. A target object may be associated with a data source, which identifies the source to which the target object is bound. The data binding engine may support the evaluation of property paths to enable the binding of specific parts of the target to specific parts of the source. In some embodiments of the invention, binding target object properties to source object command properties may be done declaratively in a markup language such as HTML (HyperText Markup Language), XML (eXtensible Markup Language), XAML (eXtensible Application Markup Language) or other suitable markup language. The data binding engine may search for the source object command property on the target object's data source and perform the appropriate updating.","In some embodiments of the invention, a graph of object-oriented objects is generated where one, some, or all objects point to other objects, forming a graph where each arrow pointing from one object to another in the graph represents a property. An exemplary graph of object-oriented objects is illustrated in . In , object  represents a document manager object, objects  and  represent document objects and object  represents a \u201ccut\u201d command. In , the active document is document object  (denoted by sold line  representing the ActiveDocument property). It will be understood that the invention as contemplated is not limited to such objects and commands. Any suitable objects and commands may be acted upon. Indeed, the invention as contemplated is not limited to objects in an object-oriented programming language environment but may be equally applied to any data source and hierarchy of properties. In some embodiments of the invention, the data binding engine  enables the specification of a data source (object ) and a property path such as \u201cActiveDocument.CutCommand\u201d representing the path from object  to object  to object . The data binding engine  can query into the object graph representing \u201clive\u201d objects within a running program, to dynamically determine which object is represented by the path \u201cActiveDocument.CutCommand\u201d (in this case, object ).","Referring again to , source  may include one or more source objects as represented by source objects , , etc. Source objects , , etc. may be associated with one or more source command objects, represented in  by source command object , etc. In some embodiments of the invention, source  may represent a model. A model in some embodiments of the invention is the underlying application logic representing a collection of underlying state. For example, consider an application that enables a user to explore the file system. The model for the application in this case may be a file system: the set of folders and files within the folders of a selected directory. A number of views may be bound to one model. The views bound to the model may be dependent on the model. In some embodiments of the invention, however, the model is not dependent on the view or views. A model may send a change notification if a property on one of its objects changes or if a change in state occurs. For example, if a new file is added to a folder, a change notification may be sent.","Source objects , , etc. may be associated with one or more command objects as represented by source command objects , etc. In some embodiments of the invention, a command object is an object that is associated with an execution method, (that is, a command object is an executable object) and has state. The state associated with the command object in some embodiments of the invention is a Boolean value representing whether or not the command can be executed, that is, whether or not the command is active (enabled) or inactive (not enabled). Examples of commands include but are not limited to \u201copen a document\u201d, \u201ccut selected text\u201d and so on","Target  may include one or more target objects as represented in  by target objects , , etc. In some embodiments of the invention, the target may be a view or user interface. One or more views may be bound to a model and display the state of the underlying model. In some embodiments of the invention, a view or user interface is defined in a markup language such as HTML (HyperText Markup Language), XML (eXtensible Markup Language), XAML (eXtensible Application Markup Language) or other suitable markup language, in which the look of the user interface is defined and the elements or components of the user interface are defined. A target object may be a user interface element or control such as but not limited to a menu item, button or list box. In the file system example described above, an exemplary user interface may display the list of current files in the folders of the selected directory.","To bind the user interface to the underlying model, in some embodiments of the invention, instead of explicitly defining the binding using an event handler or indirectly associating the user interface component to the underlying model via assigning an ID and invoking a command manager, the object representing the user interface component is bound to the underlying model object by specifying a data source object and a query path, as described above with respect to . If any part of the query changes, a change notification is sent by the object, and the data binding engine detects the change notification and updates the appropriate object(s). It will be appreciated that the subject that is being queried are live objects within a running program.",{"@attributes":{"id":"p-0038","num":"0037"},"figref":["FIG. 3","FIG. 2","FIG. 3"],"b":["320","322","324","330","320","326","322","328","334","324","330","330","332","330"]},"In some embodiments of the invention, the UI property to bind  is a sink or target property for a command object and the model property to bind  is a command property on the model. An exemplary non-limiting target property may be, for example, \u201cClickCommand\u201d. In some embodiments of the invention, command binding is achieved by assigning the model  as a data source and data binding the property on the UI component  to the command property on the model . The binding may be achieved declaratively in some embodiments, without requiring any program code. An exemplary declarative statement may be:\n\n","This statement means that the data source associated with the menu item \u201cClickCommand\u201d is the object \u201cmodel\u201d and the object to be associated with the ClickCommand is the Cut Command property on the Active Document. The UI may be authored within a UI designer tool in markup without writing code, or outside of a designer tool in markup. Alternatively, the same result may be accomplished by writing program code.","In some embodiments of the invention, the command object may be associated with additional state exposed as properties. Examples include but are not limited to IsEnabled, textual name to be represented to the user, key binding or icon. State can either be provided explicitly by the developer or be computed or derived from other properties of the application. In some embodiments of the invention, the target object knows how to handle these properties (e.g. a menu item sets its enabled state to the IsEnabled property of the command object and updates its visual appearance, a menu item updates the text represented to the user to the Text property on the command object). The command object provides change notifications for those properties. The target object listens to change notifications and updates its properties and appearance in case of a change notification. Not all properties on the command object need to be known to the target object.","In some embodiment of the invention the target object doesn't implicitly handle some state properties. In this case data-binding is used to bind a known property on the command object to a known property on the target object:\n\n","In some embodiment of the invention the command object is stateless and provides no properties at all. State properties can still be provided by the model and bound to the target elements using data-binding.","In some embodiment of the invention stateless commands can be realized by providing a method on the model and binding to that method (instead of a command object).\n\n",{"@attributes":{"id":"p-0045","num":"0048"},"figref":"FIG. 4","b":["408","410","410","404","408","410","412","410","402"],"ul":{"@attributes":{"id":"ul0006","list-style":"none"},"li":["<MenuItem ClickCommand=\u201c*Bind(Path=DocumentManager.ActiveDocument.CutCommand)\u201d\/> or:","<MenuItem ClickCommand=\u201c*Bind(Path=DocumentManager.ActiveDocument.CopyCommand)\u201d\/> or:","<MenuItem ClickCommand=\u201c*Bind(Path=DocumentManager.ActiveDocument.PasteCommand)\u201d\/>\n\nIn some embodiments the document manager  may provide a change notification for any change to the active document  property (e.g., user changes the active document). The change notification is detected by the data binding engine  and the command is rebound to the active document. It will be noted that in some embodiments of the invention, the above result was accomplished declaratively without authoring program code. No service for command management is required.\n"]}},"In some embodiments of the invention, arbitrary properties which are not command properties may be bound to menu items. For example, a Boolean property on a model may be bound to a check box menu item. In some embodiments of the invention, a check box UI component may expose a property such as \u201cIsChecked\u201d that can be used as a target property. Similarly, lists of object can be bound to a special list box menu item to address a scenario such as but not limited to a \u201cmost recently used\u201d files list.",{"@attributes":{"id":"p-0047","num":"0053"},"figref":["FIG. 5","FIG. 5"],"b":["502","504","506","504"]},"At step , the application comprising the model and the user interface may be generated and\/or instantiated. A binding engine may listen on the paths of the model and evaluate the command binding statement. If the command binding statement evaluates successfully, the target and model may be synchronized as described above. In some embodiments of the invention, one or more command binding statements may be provided. The command binding may be accomplished by declaratively assigning one or more data binding command paths and data sources to a source as described above. In some embodiments of the invention, the command path and data source is declaratively defined in a markup language such as HTML, XML, XAML or another suitable markup language. The paths of the model may be continuously monitored for change notifications. A change notification may be received from a command object indicating that a command property has changed. In some embodiments of the invention, the change notification is sent by the command object and is detected by a data binding engine. If a change notification is received, the command binding statement may be re-evaluated and the source and target synchronized as described above. In some embodiments, the data binding engine queries into the object graph to find the object indicated by the data source and data path and the data binding engine updates the target automatically by a generic object-binding mechanism.","The various techniques described herein may be implemented in connection with hardware or software or, where appropriate, with a combination of both. Thus, the methods and apparatus of the present invention, or certain aspects or portions thereof, may take the form of program code (i.e., instructions) embodied in tangible media, such as floppy diskettes, CD-ROMs, hard drives, or any other machine-readable storage medium, wherein, when the program code is loaded into and executed by a machine, such as a computer, the machine becomes an apparatus for practicing the invention. In the case of program code execution on programmable computers, the computing device will generally include a processor, a storage medium readable by the processor (including volatile and non-volatile memory and\/or storage elements), at least one input device, and at least one output device. One or more programs that may utilize the creation and\/or implementation of domain-specific programming models aspects of the present invention, e.g., through the use of a data processing API or the like, are preferably implemented in a high level procedural or object oriented programming language to communicate with a computer system. However, the program(s) can be implemented in assembly or machine language, if desired. In any case, the language may be a compiled or interpreted language, and combined with hardware implementations.","While the present invention has been described in connection with the preferred embodiments of the various figures, it is to be understood that other similar embodiments may be used or modifications and additions may be made to the described embodiments for performing the same function of the present invention without deviating therefrom. Therefore, the present invention should not be limited to any single embodiment, but rather should be construed in breadth and scope in accordance with the appended claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The foregoing summary, as well as the following detailed description of illustrative embodiments, is better understood when read in conjunction with the appended drawings. For the purpose of illustrating the invention, there is shown in the drawings exemplary constructions of the invention; however, the invention is not limited to the specific methods and instrumentalities disclosed. In the drawings:",{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":["FIG. 3","FIG. 2"]},{"@attributes":{"id":"p-0015","num":"0014"},"figref":["FIG. 4","FIG. 3"]},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 6"}]},"DETDESC":[{},{}]}
