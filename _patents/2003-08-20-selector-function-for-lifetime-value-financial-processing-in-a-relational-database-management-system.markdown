---
title: Selector function for life-time value financial processing in a relational database management system
abstract: A Life-Time Value system is a data-driven computer-facilitated financial model that provides accurate and consistent profitability projections using current period account level profitability data stored in a Relational Database Management System. The Life-Time Value system performs Net Present Value and Future Value calculations using accounts, amounts and rates retrieved from the Relational Database Management System by a Selector function using selection criteria specified by one or more rules. The results from the Net Present Value and Future Value calculations are integrated to provide a Life-Time Value of one or more customers.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07752100&OS=07752100&RS=07752100
owner: Terodata US, Inc.
number: 07752100
owner_city: Miamisburg
owner_country: US
publication_date: 20030820
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS REFERENCE TO RELATED APPLICATIONS","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENT","Overview","Hardware and Software Environment","Life-Time Value Operation","CONCLUSION"],"p":["This application is related to the following co-pending and commonly assigned patent applications:","Utility application Ser. No. 10\/644,131, filed on Aug. 20, 2003, by Peter H. Redweik, entitled \u201cLIFE-TIME VALUE FINANCIAL PROCESSING IN A RELATIONAL DATABASE MANAGEMENT SYSTEM,\u201d","Utility application Ser. No. 10\/644,110, filed on Aug. 20, 2003, by Peter H. Redweik, entitled \u201cNET PRESENT VALUE FORECAST FOR LIFE-TIME VALUE FINANCIAL PROCESSING IN A RELATIONAL DATABASE MANAGEMENT SYSTEM,\u201d","Utility application Ser. No. 10\/644,169, filed on Aug. 20, 2003, by Peter H. Redweik, entitled \u201cNET PRESENT VALUE ATTRITION FOR LIFE-TIME VALUE FINANCIAL PROCESSING IN A RELATIONAL DATABASE MANAGEMENT SYSTEM,\u201d","Utility application Ser. No. 10\/644,171, filed on Aug. 20, 2003, by Peter H. Redweik, entitled \u201cFUTURE VALUE PROPENSITY FOR LIFE-TIME VALUE FINANCIAL PROCESSING IN A RELATIONAL DATABASE MANAGEMENT SYSTEM,\u201d and","Utility application Ser. No. 10\/644,421, filed on Aug. 20, 2003, by Peter H. Redweik, entitled \u201cFUTURE VALUE ATTRITION FOR LIFE-TIME VALUE FINANCIAL PROCESSING IN A RELATIONAL DATABASE MANAGEMENT SYSTEM,\u201d","all of which applications are incorporated by reference herein.","This application is a continuation-in-part of the following co-pending and commonly assigned patent applications:","Utility application Ser. No. 10\/227,909, filed on Aug. 26, 2002, by Brian J. Wasserman and Thomas K. Ryan, entitled \u201cPLATFORM INDEPENDENT ARCHITECTURE FOR FINANCIAL PROCESSING IN A RELATIONAL DATABASE MANAGEMENT SYSTEM,\u201d","Utility application Ser. No. 10\/227,726, filed on Aug. 26, 2002, by Richard C. Schwarz, Brian J. Wasserman, Sang Y. Yum and Thomas K. Ryan, entitled \u201cDRIVER AMOUNT\/COUNT SELECTION FOR FINANCIAL PROCESSING IN A RELATIONAL DATABASE MANAGEMENT SYSTEM,\u201d","Utility application Ser. No. 10\/228,031, filed on Aug. 26, 2002, now U.S. Pat. No. 7,418,415, by Brian J. Wasserman, entitled \u201cOBJECT-ORIENTED REPRESENTATION OF A GENERIC PROFITABILITY RULE FOR FINANCIAL PROCESSING IN A RELATIONAL DATABASE MANAGEMENT SYSTEM,\u201d","Utility application Ser. No. 10\/227,976, filed on Aug. 26, 2002, by Brian J. Wasserman, George R. Hood and Thomas K. Ryan, entitled \u201cDISCRETE PROFITABILITY CALCULATIONS FOR FINANCIAL PROCESSING IN A RELATIONAL DATABASE MANAGEMENT SYSTEM,\u201d","Utility application Ser. No. 10\/228,022, filed on Aug. 26, 2002, by Brian J. Wasserman, George R. Hood and Thomas K. Ryan, entitled \u201cRULES-BASED, DATA-DRIVEN PROFITABILITY CALCULATIONS FOR FINANCIAL PROCESSING IN A RELATIONAL DATABASE MANAGEMENT SYSTEM,\u201d","Utility application Ser. No. 10\/016,779, filed on Dec. 10, 2001, now U.S. Pat. No. 7,249,138, by Brian J. Wasserman, entitled \u201cPARALLEL SELECTION PROCESSING FOR FINANCIAL PROCESSING IN A RELATIONAL DATABASE MANAGEMENT SYSTEM,\u201d which is a continuation-in-part of the applications listed herein that are identified by Ser. No. 10\/013,422, Ser. No. 10\/013,434, and Ser. No. 10\/016,452;","Utility application Ser. No. 10\/013,422, filed on Dec. 10, 2001, by Brian J. Wasserman, entitled \u201cACCOUNT SELECTION FOR FINANCIAL PROCESSING IN A RELATIONAL DATABASE MANAGEMENT SYSTEM,\u201d which is a continuation-in-part of the applications listed herein that are identified by Ser. No. 10\/016,779, Ser. No. 10\/013,434, and Ser. No. 10\/016,452;","Utility application Ser. No. 10\/013,434, filed on Dec. 10, 2001, by Brian J. Wasserman, entitled \u201cDRIVER AMOUNT AND COUNT SELECTION PROCESSING FOR FINANCIAL PROCESSING IN A RELATIONAL DATABASE MANAGEMENT SYSTEM,\u201d which is a continuation-in-part of the applications listed herein that are identified by Ser. No. 10\/016,779, Ser. No. 10\/013,422, and Ser. No. 10\/016,452; and","Utility application Ser. No. 10\/016,452, filed on Dec. 10, 2001, by Brian J. Wasserman, George R. Hood, and Thomas K. Ryan, entitled \u201cDYNAMIC EVENT SELECTION FOR FINANCIAL PROCESSING IN A RELATIONAL DATABASE MANAGEMENT SYSTEM,\u201d which is a continuation-in-part of the applications listed herein that are identified by Ser. No. 10\/016,779, Ser. No. 10\/013,422, Ser. No. 10\/013,434, Ser. No. 09\/845,461, Ser. No. 09\/845,924, Ser. No. 09\/845,851, Ser. No. 09\/608,355 filed Jun. 29, 2000, Ser. No. 09\/610,646, filed Jun. 29, 2000 Ser. No. 09\/608,681, filed Jun. 29, 2000 Ser. No. 09\/608,675, filed Jun. 29, 2000 Ser. No. 09\/608,342, filed Jun. 29, 2000 and Ser. No. 09\/608,682 filed Jun. 29, 2000;","all of which applications are incorporated by reference herein.","This application is related to the following co-pending and commonly assigned patent applications:","Utility application Ser. No. 09\/845,461, filed on Apr. 30, 2001, by George R. Hood, entitled \u201cTAX ADJUSTMENT FOR FINANCIAL PROCESSING IN A RELATIONAL DATABASE MANAGEMENT SYSTEM,\u201d which is a continuation-in-part of the applications listed herein that are identified by Ser. No. 09\/608,355, Ser. No. 09\/610,646, Ser. No. 09\/608,681, Ser. No. 09\/608,675, Ser. No. 09\/608,342, and Ser. No. 09\/608,682;","Utility application Ser. No. 09\/845,924, filed on Apr. 30, 2001, by George R. Hood, entitled \u201cAMORTIZATION FOR FINANCIAL PROCESSING IN A RELATIONAL DATABASE MANAGEMENT SYSTEM,\u201d which is a continuation-in-part of the applications listed herein that are identified by Ser. No. 09\/608,355, Ser. No. 09\/610,646, Ser. No. 09\/608,681, Ser. No. 09\/608,675, Ser. No. 09\/608,342, and Ser. No. 09\/608,682;","Utility application Ser. No. 09\/845,851, filed on Apr. 30, 2001, by George R. Hood, entitled \u201cSHAREHOLDER VALUE ADD FOR FINANCIAL PROCESSING IN A RELATIONAL DATABASE MANAGEMENT SYSTEM,\u201d which is a continuation-in-part of the applications listed herein that are identified by Ser. No. 09\/608,355, Ser. No. 09\/610,646, Ser. No. 09\/608,681, Ser. No. 09\/608,675, Ser. No. 09\/608,342, and Ser. No. 09\/608,682;","Utility application Ser. No. 09\/608,355, filed on Jun. 29, 2000, by George R. Hood and Paul H. Phibbs, Jr., entitled \u201cADVANCED AND BREAKTHROUGH NET INTEREST REVENUE IMPLEMENTATION FOR FINANCIAL PROCESSING IN A RELATIONAL DATABASE MANAGEMENT SYSTEM,\u201d","Utility application Ser. No. 09\/610,646, filed on Jun. 29, 2000, by George R. Hood and Paul H. Phibbs, Jr., entitled \u201cBASIC AND INTERMEDIATE NET INTEREST REVENUE IMPLEMENTATION FOR FINANCIAL PROCESSING IN A RELATIONAL DATABASE MANAGEMENT SYSTEM,\u201d","Utility application Ser. No. 09\/608,681, filed on Jun. 29, 2000, by George R. Hood, entitled \u201cOTHER REVENUE IMPLEMENTATION FOR FINANCIAL PROCESSING IN A RELATIONAL DATABASE MANAGEMENT SYSTEM,\u201d","Utility application Ser. No. 09\/608,675, filed on Jun. 29, 2000, by George R. Hood, entitled \u201cDIRECT EXPENSE IMPLEMENTATION FOR FINANCIAL PROCESSING IN A RELATIONAL DATABASE MANAGEMENT SYSTEM,\u201d","Utility application Ser. No. 09\/608,342, filed on Jun. 29, 2000, by George R. Hood, entitled \u201cINDIRECT EXPENSE IMPLEMENTATION FOR FINANCIAL PROCESSING IN A RELATIONAL DATABASE MANAGEMENT SYSTEM,\u201d","Utility application Ser. No. 09\/608,682, filed on Jun. 29, 2000, by George R. Hood, entitled \u201cRISK PROVISION IMPLEMENTATION FOR FINANCIAL PROCESSING IN A RELATIONAL DATABASE MANAGEMENT SYSTEM,\u201d","all of which applications are incorporated by reference herein.","This application is related to the following co-pending and commonly assigned patent applications:","Utility application Ser. No. 09\/943,060, filed on Aug. 30, 2001, by Paul H. Phibbs, Jr., entitled \u201cCAPITAL ALLOCATION IN A NET INTEREST REVENUE IMPLEMENTATION FOR FINANCIAL PROCESSING IN A RELATIONAL DATABASE MANAGEMENT SYSTEM,\u201d which claims the benefit under 35 U.S.C. \u00a7119(e) to Provisional Application Ser. No. 60\/253,281, filed Nov. 27, 2000, by Paul H. Phibbs, Jr., entitled \u201cCAPITAL ALLOCATION IN A NET INTEREST REVENUE IMPLEMENTATION FOR FINANCIAL PROCESSING IN A RELATIONAL DATABASE MANAGEMENT SYSTEM,\u201d and Provisional Application Ser. No. 60\/253,254, filed Nov. 27, 2000, by Paul H. Phibbs, Jr., entitled \u201cALLOCATED BALANCES IN A NET INTEREST REVENUE IMPLEMENTATION FOR FINANCIAL PROCESSING IN A RELATIONAL DATABASE MANAGEMENT SYSTEM,\u201d and which is a continuation-in-part of the applications listed herein that are identified by Ser. No. 09\/608,355 and Ser. No. 09\/610,646;","Utility application Ser. No. 09\/943,059, filed on Aug. 30, 2001, by Paul H. Phibbs, Jr., entitled \u201cALLOCATED BALANCES IN A NET INTEREST REVENUE IMPLEMENTATION FOR FINANCIAL PROCESSING IN A RELATIONAL DATABASE MANAGEMENT SYSTEM,\u201d which claims the benefit under 35 U.S.C. \u00a7119(e) to Provisional Application Ser. No. 60\/253,254, filed Nov. 27, 2000, by Paul H. Phibbs, Jr., entitled \u201cALLOCATED BALANCES IN A NET INTEREST REVENUE IMPLEMENTATION FOR FINANCIAL PROCESSING IN A RELATIONAL DATABASE MANAGEMENT SYSTEM,\u201d and Provisional Application Ser. No. 60\/253,281, filed Nov. 27, 2000, by Paul H. Phibbs, Jr., entitled \u201cCAPITAL ALLOCATION IN A NET INTEREST REVENUE IMPLEMENTATION FOR FINANCIAL PROCESSING IN A RELATIONAL DATABASE MANAGEMENT SYSTEM,\u201d and which is a continuation-in-part of the applications listed herein that are identified by Ser. No. 09\/608,355 and Ser. No. 09\/610,646;","both of which applications are incorporated by reference herein.","1. Field of the Invention","This invention relates in general to financial processing systems performed by computers, and in particular, to a selector function for life-time value financial processing using data accessed from a relational database management system.","2. Description of Related Art","Operating a business on current financials is a critical first step towards success. However, for sustained long-term growth and profitability, businesses must look beyond traditional profit and loss statements and current value measurements. Instead, businesses need to develop a clear calculation of the life-time value of every facet of the company's business, from customers and products to delivery channels. However, there are few tools available for performing theses tasks.","The present invention, known as the Life-Time Value (LTV) system, satisfies these needs. The Life-Time Value system brings together the results and trends of a company's financial information, such as the measurements used to determine current profitability, and blends them with the future metrics, such as propensities, attrition rates and growth values. Using the Life-Time Value system, businesses can perform a number of analyses.","In the area of marketing, the Life-Time Value system can be used to identify long-term targets, optimize customer mix, attract, retain and maintain profitable customer relationships, and design intelligent offers targeted to specific customers. In the area of distribution, the Life-Time Value system can be used to understand channel life-time value, and enhance customer servicing, relationship management and migration. In the area of finance, the Life-Time Value system can be used to substantiate pricing and revenue mix, and rationalize cost and expense justification. In the area of product management, the Life-Time Value system can be used to provide sophisticated product design, pricing and relationships, and develop cutting-edge, future product and testing. In the area of risk management, the Life-Time Value system can be used to incorporate future exposures, hedges and fluctuations.","A Life-Time Value system is a data-driven computer-facilitated financial model that provides accurate and consistent profitability projections using current period account level profitability data stored in a Relational Database Management System. The Life-Time Value system performs Net Present Value and Future Value calculations using accounts, amounts and rates retrieved from the Relational Database Management System by a Selector function using selection criteria specified by one or more rules. The results from the Net Present Value and Future Value calculations are integrated to provide a Life-Time Value of one or more customers.","In the following description of the preferred embodiment, reference is made to the accompanying drawings which form a part hereof, and in which is shown by way of illustration a specific embodiment in which the invention may be practiced. It is to be understood that other embodiments may be utilized and structural changes may be made without departing from the scope of the present invention.","The Life-Time Value (LTV) system is a data-driven computer-facilitated financial modeling system that provides accurate and consistent profitability projections using current period account level profitability data stored in a Relational Database Management System (RDBMS). The LTV system performs Net Present Value (NPV) and Future Value (FV) processing using business-rule and data-driven applications that embrace current period profit components, defines forecast periods, parameters and methodologies, and applies appropriate growth values, attrition values and propensity values to a life-time value object.",{"@attributes":{"id":"p-0048","num":"0047"},"figref":"FIG. 1","b":["100","102","104","106"]},"In the preferred embodiment, the RDBMS  includes at least one Parsing Engine (PE)  and one or more Access Module Processors (AMPs) A-E storing the relational database in one or more data storage devices A-E. The Parsing Engine  and Access Module Processors  may be implemented in separate machines, or may be implemented as separate or related processes in a single machine. The RDBMS  used in the preferred embodiment comprises the Teradata\u00ae RDBMS sold by NCR Corporation, the assignee of the present invention, although other DBMS's could be used.","Generally, the LTV Client  includes a graphical user interface (GUI) for operators of the system , wherein requests are transmitted to the LTV Calculation Engine  and\/or the RDBMS , and responses are received therefrom. In response to the requests, the LTV Calculation Engine  performs the functions described below, including formulating queries for the RDBMS  and processing data retrieved from the RDBMS . Moreover, the results from the functions performed by the LTV Calculation Engine  may be provided directly to the LTV Client  or may be provided to the RDBMS  for storing into the relational database. Once stored in the relational database, the results from the functions performed by the LTV Calculation Engine  may be independently retrieved from the RDBMS  by the LTV Client  or another system.","Note that the LTV Client , the LTV Calculation Engine , and the RDBMS  may be implemented in separate machines, or may be implemented as separate or related processes in a single machine. Moreover, in the preferred embodiment, the system  may use any number of different parallelism mechanisms to take advantage of the parallelism offered by the multiple tier architecture, the client-server structure of the Life-Time Value Client , Life-Time Value Calculation Engine , and RDBMS , and the multiple Access Module Processors  of the RDBMS . Further, data within the relational database may be partitioned across multiple data storage devices  to provide additional parallelism.","Generally, the Life-Time Value Client , Life-Time Value Calculation Engine , RDBMS , Parsing Engine , and\/or Access Module Processors A-E comprise logic and\/or data tangibly embodied in and\/or accessible from a device, media, carrier, or signal.","However, those skilled in the art will recognize that the exemplary environment illustrated in  is not intended to limit the present invention. Indeed, those skilled in the art will recognize that other alternative environments may be used without departing from the scope of the present invention. In addition, it should be understood that the present invention may also apply to components other than those disclosed herein.",{"@attributes":{"id":"p-0054","num":"0053"},"figref":"FIG. 2","b":"100"},"The life-time value of a customer is estimated by calculating the net present profitability value of the customer's already purchased products, as well as estimating the possible future profitability value of products the customer may buy in the future. In this context, the net present profitability value of the current product set is referred to as the Net Present Value (NPV) and the possible future profitability value is referred to as the Future Value (FV). The NPV and FV are used to give the user an indication of the life-time value of the customer.","To calculate the NPV and FV of the customer, the LTV system  integrates existing account data along with basic assumptions about behavior and valuations to calculate the NPV and FV for each customer. One of the basic requirements for the NPV and FV calculations is to obtain the current profitability value of the accounts for each customer.","In , the RDBMS  stores detailed information on the current profitability value of the accounts for each customer. Specifically, the RDBMS  provides account data  for use by the Life-Time Value system . A Selector function  of the LTV Calculation Engine  selects from this account data  to create the NPV\/FV data , based on selection criteria that is specified by user input or one or more Rules .","The LTV Calculation Engine  performs one or more NPV\/FV Calculations  on the NPV\/FV data , based on the Rules , as well as Forecast Amounts , Attrition Rates  and Propensity Rates  accessed from the RDBMS  and\/or otherwise defined by the user. The NPV\/FV results  from these NPV\/FV Calculations  provide an indication to the user of the potential profitability value of each customer. The NPV\/FV results  can then be sent the LTV Client , or other systems, as desired.","Selector Function","The Selector function  dynamically generates SQL statements to select accounts from the account data , as well as to select the Forecast Amounts , Attrition Rates  and Propensity Rates  via the RDBMS . The selection criteria used by the Selector function  is specified by the Rules  and\/or user input, and the selection criteria used will differ among the various Rules , as described in more detail below:\n\n","The selection criteria may comprise attributes, predicates, operators and\/or functions, wherein a group of accounts, amounts or rates that satisfy the selection criteria comprise partitions. For example, it is possible to compare an account, amount or rate attribute (i.e., a column) to another account, amount or rate attribute, a literal value, or a domain value (which is an indirect reference to a literal value that is resolved by a lookup function). Operators may include any number of different relational operators, i.e., =, >=, <=, <, >, BETWEEN, etc., and functions may comprise aggregations or other functions.","Using the selection criteria, the Selector function  dynamically generates SQL statements to select the proper account data , and to aggregate the appropriate account data . Moreover, the Selector function  optimizes the dynamic generation of the SQL statements, so that multiple selection predicates can be processed in parallel by the RDBMS .","The Selector function  uses one or more object-oriented parameterized templates to dynamically generate the SQL statements for selecting the accounts, amounts and rates from the relational database. The object-oriented parameterized template is represented by a C++ class hierarchy that contains all the core source code to generate any of the required SQL queries, and that can generate SQL macros as needed. Moreover, the object-oriented parameterized template can be modified by subclassing with inheritance and then customizing the subclasses.","The object-oriented parameterized template typically comprises a join of (potentially) multiple tables within the relational database to a constraint table (storing the selection criteria) and an in-list table (storing IN clauses for the SQL templates). Both the constraint and in-list tables are created and populated from the selection criteria.","Specifically, there are several very important steps in generating the SQL statements:\n\n","For the purpose of grouping selection criteria, the Selector function  treats the relational operators, e.g., =, <, >, =>, <=, as equivalent to a BETWEEN operation. In fact, the Selector function  converts these relational operators into an equivalent BETWEEN operation according to the mappings in the following table:",{"@attributes":{"id":"p-0067","num":"0074"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"6"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"6","colwidth":"42pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"6","align":"center","rowsep":"1"}}},{"entry":["Operator","Maps to","BETWEEN","Left Value","AND","Right Value"]},{"entry":{"@attributes":{"namest":"1","nameend":"6","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["=X","Maps to","BETWEEN","X","AND","X"]},{"entry":["<X","Maps to","BETWEEN","MIN(X)","AND","LOWER(X)"]},{"entry":["<=X","Maps to","BETWEEN","MIN(X)","AND","X"]},{"entry":[">X","Maps to","BETWEEN","HIGHER(X)","AND","MAX(X)"]},{"entry":[">=X","Maps to","BETWEEN","X","AND","MAX(X)"]},{"entry":{"@attributes":{"namest":"1","nameend":"6","align":"center","rowsep":"1"}}}]}}}}},"wherein:","MAX(X) is the maximum value of X in the domain of its data type. For example, if X is a BYTEINT value, then the maximum value of X is 127.","MIN(X) is the minimum value of X in the domain of its data type. For example, if X is a BYTEINT value, then the minimum value of X is \u2212128.","LOWER(X) is the next lowest value of X in the domain of its data type. For example, if X is a BYTEINT value, then the next lower value of X is \u2018X\u22121\u2019 (unless X is already \u2212128).","HIGHER(X) is the next greater value of X in the domain of its data type. For example, if X is a BYTEINT value, then the next greater value of X is \u2018X+1\u2019 (unless X is already 127).","If the relational operator in the selection criteria is of the type \u2018>=\u2019, \u2018<=\u2019, \u2018>\u2019, or \u2018<\u2019, then there may exist another selection criteria within the group of selection criteria that matches, i.e., that would form a valid BETWEEN operation. To match first and second selection criteria, the first and second selection criteria must be the same attribute, and if the relational operator of the first selection criteria is either \u2018>=\u2019 or \u2018>\u2019, then it will match either \u2018<=\u2019 or \u2018<\u2019 in the second selection criteria. Likewise, if the relational operator of the first selection criteria is \u2018<=\u2019 or \u2018<\u2019, then it will match either \u2018>=\u2019 or \u2018>\u2019 in the second selection criteria.","Once a matching pair of first and second selection criteria is found, the combination into one BETWEEN operation is straightforward. It is worth noting that, just as in the simple case, \u2018<X\u2019 results in \u2018BETWEEN Y AND LOWER(X)\u2019 and \u2018>X\u2019 results in \u2018BETWEEN HIGHER(X) and Y\u2019.","As noted above, the Selector function  optimizes the dynamic generation of SQL statements, so that multiple selection criteria can be processed in parallel by the RDBMS . Generally, this requires an understanding of the operation of the Parsing Engine  of the RDBMS , and how it transforms SQL statements into an operator tree that, in turn, can be used to generate multiple, parallelized access plans for execution by Access Module Processors A-E of the RDBMS .","In generating the SQL statements, the Selector function  groups multiple sets of selection criteria together and processes the groups in parallel to the extent possible, and generates several sets of output tables. The goal is to process similar selection criteria together at the same time, so that fewer passes need to be made through the tables in the relational database.","This step is necessary because the NPV\/FV Calculations  are scripts that operate against known, statically defined, tables. In the LTV system , the specification of selection criteria, and the attributes that can be used in the Selector function , are completely dynamic and user-driven. There is no way for the scripts to contain this knowledge, nor can it be predefined as part of the scripts.","When grouping selection criteria, the following is required:\n\n","Using the above, each distinct group of selection criteria can be processed independently. This allows the Selector function  to process each distinct group of selection criteria in parallel. In this context, a partition is a set of one or more accounts that satisfy one or more selection criteria, in order to apply costs and revenues to each account.","In the preferred embodiment, the Selector function  optimizes the SQL statements that are dynamically generated based on the specified selection criteria. The basic principles of this optimization are:\n\n","Two features of the RDBMS  motivate the method chosen for optimization. First, it is assumed that every SQL statement that partitions accounts, amounts or rates needs to perform a full file scan of one or more tables in the relational database. A full file scan reads every single row of a table and, since it is assumed that the tables are distributed evenly across all AMPs A-E in the RDBMS , it therefore means that every AMP A-E uses one worker task to read the rows to satisfy the query. However, each AMP A-E has a limited pool of worker tasks. Hence, only a limited number of full file scans can take place at any time and therefore only a limited number of SQL statements generated by the Selector function  can take place at any time.","The synchronous scan feature of the RDBMS  allows multiple worker tasks to share the same read activity. If two tasks are scanning the same table in the relational database the same time, then the RDBMS  is only going to perform the scan once. If one of the tasks starts the scan earlier than the other one, the second task starts reading wherever the first task happens to be. When the scan reaches the end of the table, the first task is completed, but the second task starts the scan again at the beginning of the table, in order to pick up whatever it missed in the first pass. Because the queries generated by the Selector function  will tend to scan many of the same tables in the relational database, it is an overall performance improvement if all of the queries can run at the same time in order to minimize the total amount of disk scanning necessary to complete all of the SQL statements.","After the temporary work tables have been created, the Selector function  filters and combines the temporary work tables, yielding output tables corresponding to the inputs for the NPV\/FV Calculations . These output tables include the partitions for the Rule , wherein the partitions represent the target accounts, amounts or rates against which the Rules  are applied. The output tables are then processed by one or more of the NPV\/FV Calculations  in the LTV Calculation Engine  to accomplish a final result.","Logic of the Life-Time Value System",{"@attributes":{"id":"p-0085","num":"0097"},"figref":"FIG. 3"},"Block  represents the LTV Client  accepting user input from the user, which may include selection criteria for accounts, amounts or rates, as well as other data.","Block  represents the LTV Calculation Engine  determining the selection criteria from the user input or the Rules .","Block  represents the LTV Calculation Engine  invoking the Selector function  for selecting accounts, amounts or rates, as well as other data from the relational database via the RDBMS .","Block  represents the Selector function  standardizing the selection criteria.","Block  represents the Selector function  grouping the standardized selection criteria, so that the grouped selection criteria, which comprise similar selection criteria, are processed independently and in parallel. The selection criteria are grouped when the selection criteria are applied to a same level of accounts, amounts or rates, as well as other data, when the selection criteria are of a same type, or when the selection criteria access identical attributes, or when the selection criteria access identical tables.","Block  represents the Selector function  dynamically generating SQL statements for the selected accounts, amounts or rates, as well as other data based on the specified selection criteria, wherein the SQL statements are optimized for processing by the RDBMS . Preferably, the SQL statements are optimized to satisfy the selection criteria using as few of the SQL statements as possible, and so that the SQL statements are executed in parallel by the RDBMS .","Block  represents the Selector function  invoking the dynamically generated SQL statements as SQL macros performed within the RDBMS , in order to perform the selection of the accounts, amounts or rates, as well as other data. Preferably, the SQL macros are grouped together for execution in parallel by the RDBMS . Moreover, the SQL macros are executed in a correct order by nesting the SQL macros and grouping the nested SQL macros into a high-level control macro.","Block  represents the Parsing Engine  of the RDBMS  transforming the SQL statements into an operator tree.","Block  represents the Parsing Engine  of the RDBMS  generating one or more access plans from the operator tree.","Block  represents the Parsing Engine  of the RDBMS  parallelizing the access plans, and then transmitting the access plans to their assigned Access Module Processors A-E of the RDBMS .","Block  represents the Access Module Processors A-E of the RDBMS  executing the access plans, and thereby performing the required data manipulation associated with the access plans received from the Parsing Engine , wherein the required data manipulation associated with the access plans are performed in parallel by the Access Module Processors A-E.","Block  represents the Parsing Engine  of the RDBMS  standardizing the results received from the Access Module Processors A-E and providing the standardized results to the LTV Calculation Engine  as NPV\/FV data , Forecast Amounts , Attrition Rates  and Propensity rates .","Block  represents the LTV Calculation Engine  invoking and performing the NPV\/FV Calculations  using the NPV\/FV data , Forecast Amounts , Attrition Rates  and Propensity Rates , as well as one or more Rules .","Block  represents the LTV Calculation Engine  delivering the NPV\/FV results  from the NPV\/FV Calculations  to the LTV Client  and\/or some other system, such as the RDBMS . With regard to the LTV Client , the results may be presented to the user, printed, or used by various other computer programs, as desired. With regard to the RDBMS  or other system, the results may be stored for later use by the LTV Client , the LTV Calculation Engine , or other computer programs, as desired.","This concludes the description of the preferred embodiment of the invention. The following paragraphs describe some alternative embodiments for accomplishing the same invention.","In one alternative embodiment, any type of computer or configuration of computers could be used to implement the present invention. In addition, any database management system, decision support system, on-line analytic processing system, or other computer program that performs similar functions could be used with the present invention.","The foregoing description of the preferred embodiment of the invention has been presented for the purposes of illustration and description. It is not intended to be exhaustive or to limit the invention to the precise form disclosed. Many modifications and variations are possible in light of the above teaching. It is intended that the scope of the invention be limited not by this detailed description, but rather by the claims appended hereto."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["Referring now to the drawings in which like reference numbers represent corresponding parts throughout:",{"@attributes":{"id":"p-0043","num":"0042"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0044","num":"0043"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0045","num":"0044"},"figref":"FIG. 3"}]},"DETDESC":[{},{}]}
