---
title: Method and apparatus to debug a program from a predetermined starting point
abstract: A method and apparatus allow a programmer to repeatedly debug a program from the same starting point. The entire process state of the process can be saved at any time in the course of a debugging session to a disk file, called the checkpoint file. Now registers or memory may be modified, if necessary, and the program may be brought back to the same starting point where the state had been previously saved by resuming from the checkpoint file. The method and apparatus allow the state of all the programs to be saved multiple times and resumed from any one of those states. The debugging of a problem is considerably facilitated by not having to start from scratch to debug the problem as the last saved state of the program can be used to start the debugging.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06981243&OS=06981243&RS=06981243
owner: International Business Machines Corporation
number: 06981243
owner_city: Armonk
owner_country: US
publication_date: 20000720
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENT"],"p":["1. Technical Field","The present invention relates to an improved data processing system and, in particular, to a method and apparatus for debugging a program or programs. Still more particularly, the present invention provides a method and apparatus for resuming debugging from a predetermined starting point.","2. Description of Related Art","A computer program, also referred to as software, is a set of instructions that directs the functioning of various computer hardware resources in order to accomplish a particular task. In order to run a computer program, that program is typically loaded into the computer's main memory, where each instruction within the program is stored at a unique location, specified by an address.","One thing that all programs have in common is the need to ensure that they actually perform the task that they are designed to perform. The act of making this determination is generally referred to as testing the software, and the act of identifying the cause of a known problem, or \u201cbug\u201d, in a program is called \u201cdebugging\u201d the software. To facilitate this process, computer programs, called \u201cdebuggers\u201d have been created. A debugger supplies a program control interface to the programmer that allows one to do such things as executing only one program instruction at a time (referred to as \u201csingle stepping\u201d the program), determining what the next instruction to be executed is, examining and\/or modifying computer register and memory locations, and setting breakpoints at particular locations within the program, whereby computer program execution will continue unimpeded until the breakpoint is the next location in the program that is to be executed by the computer. These features, and others, greatly assist the programmer in determining whether the sequence of program instruction execution is as expected, and whether the correct data is being moved from one computer resource to another. This view into the actual operation of the program allows the programmer to identify where an error has been made in the program design.","However, using prior art debugging systems, the user must step through the entire process until a breakpoint is encountered. While prior art debuggers allow the user to set points at which the process will stop, no technique exists which allows the user to set a state from which debugging will begin. For long-running programs, which crash after several hours of running, the programmer must start from scratch to debug the problem. Therefore, a need exists for a method and apparatus for debugging a program from a predetermined starting point.","The present invention provides a new way to use debuggers to debug a program or programs from a predetermined starting point. The entire process state of the process or processes can be saved at any time in the course of a debugging session to a disk file by the debugger through a system call. This disk file is also called a checkpoint file. Now registers or memory may be modified, if necessary, and the program or programs continued. At any time, the current execution of the programs may be terminated and the programs brought back to the same starting point where their state had been previously saved by resuming from the checkpoint file using another system call. Now a new set of registers or memory may be modified and the programs continued again.","With reference now to the figures and in particular with reference to , a pictorial representation of a data processing system in which the present invention may be implemented is depicted in accordance with a preferred embodiment of the present invention. A computer  is depicted which includes a system unit , a video display terminal , a keyboard , storage devices , which may include floppy drives and other types of permanent and removable storage media, and mouse . Additional input devices may be included with personal computer , such as, for example, a joystick, touchpad, touch screen, trackball, microphone, and the like. Computer  can be implemented using any suitable computer, such as an IBM RS\/6000 computer or IntelliStation computer, which are products of International Business Machines Corporation, located in Armonk, N.Y. Although the depicted representation shows a computer, other embodiments of the present invention may be implemented in other types of data processing systems, such as a network computer. Computer  also preferably includes a graphical user interface that may be implemented by means of systems software residing in computer readable media in operation within computer .","With reference now to , a block diagram of a data processing system is shown in which the present invention may be implemented. Data processing system  is an example of a computer, such as computer  in , in which code or instructions implementing the processes of the present invention may be located. Data processing system  employs a peripheral component interconnect (PCI) local bus architecture. Although the depicted example employs a PCI bus, other bus architectures such as Accelerated Graphics Port (AGP) and Industry Standard Architecture (ISA) may be used. Processor  and main memory  are connected to PCI local bus  through PCI bridge . PCI bridge  also may include an integrated memory controller and cache memory for processor . Additional connections to PCI local bus  may be made through direct component interconnection or through add-in boards. In the depicted example, local area network (LAN) adapter , small computer system interface SCSI host bus adapter , and expansion bus interface  are connected to PCI local bus  by direct component connection. In contrast, audio adapter , graphics adapter , and audio\/video adapter  are connected to PCI local bus  by add-in boards inserted into expansion slots. Expansion bus interface  provides a connection for a keyboard and mouse adapter , modem , and additional memory . SCSI host bus adapter  provides a connection for hard disk drive , tape drive , and CD-ROM drive . Typical PCI local bus implementations will support three or four PCI expansion slots or add-in connectors.","An operating system runs on processor  and is used to coordinate and provide control of various components within data processing system  in . The operating system may be a commercially available operating system such as Windows 2000, which is available from Microsoft Corporation. An object oriented programming system such as Java may run in conjunction with the operating system and provides calls to the operating system from Java programs or applications executing on data processing system . \u201cJava\u201d is a trademark of Sun Microsystems, Inc. Instructions for the operating system, the object-oriented operating system, and applications or programs are located on storage devices, such as hard disk drive , and may be loaded into main memory  for execution by processor .","Those of ordinary skill in the art will appreciate that the hardware in  may vary depending on the implementation. Other internal hardware or peripheral devices, such as flash ROM (or equivalent nonvolatile memory) or optical disk drives and the like, may be used in addition to or in place of the hardware depicted in . Also, the processes of the present invention may be applied to a multiprocessor data processing system.","For example, data processing system , if optionally configured as a network computer, may not include SCSI host bus adapter , hard disk drive , tape drive , and CD-ROM , as noted by dotted line  in  denoting optional inclusion. In that case, the computer, to be properly called a client computer, must include some type of network communication interface, such as LAN adapter , modem , or the like. As another example, data processing system  may be a stand-alone system configured to be bootable without relying on some type of network communication interface, whether or not data processing system  comprises some type of network communication interface. As a further example, data processing system  may be a Personal Digital Assistant (PDA) device, which is configured with ROM and\/or flash ROM in order to provide non-volatile memory for storing operating system files and\/or user-generated data.","The depicted example in  and above-described examples are not meant to imply architectural limitations. For example, data processing system  also may be a notebook computer or hand held computer in addition to taking the form of a PDA. Data processing system  also may be a kiosk or a Web appliance.","The processes of the present invention are performed by processor  using computer implemented instructions, which may be located in a memory such as, for example, main memory , memory , or in one or more peripheral devices \u2013.","The operating system creates software copies of the processor and the memory and assigns them to programs. Each instance of a program executing in memory is called a \u201cprocess.\u201d A program is thus a passive entity, such as the contents of a file stored on disk, whereas a process is an active entity. The process includes the value of the \u201cprogram counter\u201d specifying the next instruction to execute, the contents of processor's registers, the process \u201cstack,\u201d a data section containing global values, and a \u201cuser block\u201d which contains information about opened files and devices, pending signals, signal handlers, etc. The process stack contains temporary data, such as sub-routine parameters, return addresses, and temporary variables. The \u201cprocess image\u201d defines a process in memory and includes all information about a process as described above.","The operating system will allow a process to create new processes by use of a system call. The relationship between processes is often referred to as the parent-child relationship with the calling process referred to as the parent of the created process, which is called the child process. For example, a word processing program executes in memory as a process. When the word processing process calls a spell checker program, a child process is created whose parent is the word processing process.","The present invention provides a debugger combined with a child process that can be checkpointed and restarted. In a preferred embodiment, the debugger, executing in memory as a process, creates a child process for the program being debugged. The program can then, in turn, create further child processes. The debugger, which is the parent process, has control over the child processes. The debugger of the present invention may save the image of all processes under control of the debugger in a checkpoint file and recreate the image of the processes from the checkpoint file to resume debugging from that state. Thus, the present invention provides a mechanism for resuming debugging from a saved state, allowing the programmer to modify registers and memory variables and resume debugging from a known state.","A checkpoint is a snapshot of the image of a process, which is saved on non-volatile storage, such as disk  in , and which survives process failure. The checkpoint\/restart facilities save information (i.e., checkpoint data) necessary to restart the execution of a process from that point in the program execution at which the information is saved. Upon restart, the checkpointed process may be reloaded into volatile memory, such as main memory  in , and the process can resume execution from the checkpointed state. Checkpointing reduces the amount of lost work in the event of a process failure because the checkpointed processes only need to be rolled back to the last checkpoint. Even if the processes complete execution normally or are aborted because of program failure, the processes can be recreated from the image saved in the checkpoint file and debugged from that point instead of starting from scratch.","Processes may be checkpointed and their process image saved in a checkpoint file even when they are not being traced. The present invention also provides a debugger to recreate processes from the checkpoint file and to start tracing them from the point at which they were checkpointed. This use of a debugger to recreate processes from a checkpoint file can potentially save a user several hours or even days of debugging efforts to debug a long-running process that crashes after several hours or days of execution if a checkpoint file containing the process image is created on some interval-basis.","According to a preferred embodiment of the present invention, checkpoint\/restart facilities are used to save the state of a process or processes of a program being debugged to a checkpoint file. At any time, the current execution of the program may be terminated and the program brought back to the same starting point where the state had been previously saved by resuming from the checkpoint file using another system call. Now a set of registers or memory may be modified and the program continued again.","With reference now to , a data flow diagram of the operation of a debugger with checkpoint\/restart facilities is depicted according to a preferred embodiment of the present invention. A debugger  controls the operation of a program . Debugger  provides a checkpoint\/restart facility to save the entire process state of a process or processes being traced including its registers and machine state in a checkpoint file . Debugger  also provides a way to read the checkpoint file and create the process image from the data saved in the file and resume the process at the point at which it was checkpointed as a traced process.","The program runs until it reaches a stopped state , when, for example, it reaches a breakpoint set by the debugger. The entire process image may be saved to the checkpoint file. It may be beneficial to permit only the debugger to checkpoint a traced process. If any process other than the debugger attempts to checkpoint a traced process, the call will fail. It may also be beneficial to allow a debugger process to checkpoint processes that are not being traced by it. For example, multiple processes may be included in a checkpoint\/restart group and identified through a common checkpoint\/restart group ID (CRID), even though the processes are not all being traced by the debugger. Furthermore, it may be beneficial to checkpoint a traced process that is already running, as well as a traced process stopped in the debugger.","The following is an example of some code to checkpoint a process that is stopped in debugger mode which uses the ptrace( ) system call to communicate between the debugger and the traced process:\n\n","After the process state is saved in a checkpoint file, registers or variables in memory may be modified and the program is ready to run in state . In state , the program is running and the debugger is debugging the program. At any time, the current execution of the program or programs may be terminated to enter a stopped state , such as at a breakpoint. Thereafter, the program or programs may be brought back to the same starting point where the state had been previously saved by restoring program data from the checkpoint file using another system call.","The following is an example of some code to restart a single process that was checkpointed:\n\n","After the state of the processes are restored in stopped state , registers or variables in memory may be modified and the program is ready to run in state . The program returns to state , where the program is running and the debugger is debugging the program.","Turning now to , a diagram is shown illustrating the components of a checkpoint file and their relationships in accordance with a preferred embodiment of the present invention. The components of the checkpoint file include a header , which is stored at location  (zero), and a process descriptor  for each process whose image is saved in the checkpoint file. Each process descriptor has a data type  for each type of data (e.g., process, thread, stack, heap, etc.) associated with the process descriptor. Each data type has at least one instance  mapping in file and application. Each instance of a data type has at least one data block  of subsystem dependent data.","An example of a checkpoint file is presented in . The file  comprises a header and two processes P and P. Process P has two data types and, hence, two descriptors to represent them, namely P.T and P.T. The data type P.T has two instances associated with it, namely P.T.I and P.T.I. The P.T.I instance has two blocks of data, P.T.I.D and P.T.I.D. Data instance P.T.I has one data block, namely P.T.I.D. Data type P.T has one instance P.T.I with one data block, namely P.T.I.D.","A person of ordinary skill in the art will recognize that the configuration of the checkpoint file described with respect to  may vary depending on implementation. Other components may be used in addition to or in place of the components depicted in . For example, the debugger may be used to debug a plurality of programs running concurrently. The debugger may also be implemented in a distributed processing environment. A plurality of debuggers may also be implemented to debug different processes or parts of processes. Furthermore, the checkpoint file in  may also be implemented as another data structure, such as a linked list or database, rather than a flat file. Also, as mentioned earlier the checkpoint file may be created even when processes are not being traced, such as when the checkpoint file is created by a non-debugger, in the same format as described above, but used by the debugger in the same way.","Turning next to  a flowchart of the operation of a debugger is shown in accordance with a preferred embodiment of the present invention. The debugger process begins and creates a child process for the program being debugged (step ). In step , the debugger process is debugging the program in a running state. Next, a determination is made as to whether the program is stopped (step ). The program may be stopped because of a crash, because a breakpoint is encountered, or due to a system call by the debugger process. If the program is not stopped, the debugger process continues debugging the program in a running state in step .","If the program is stopped in step , a determination is made as to whether the user wishes to set a breakpoint (step ). If the debugger process is to set a breakpoint, the debugger process sets the breakpoint (step ) and a determination is made as to whether the debugger process is to save a checkpoint (step ). If the debugger process determines that a breakpoint is not to be set in step , the debugger process proceeds directly to step  to determine whether a checkpoint is to be saved.","The debugger may set a breakpoint or save a checkpoint in response to an event. For example, the programmer may instruct the debugger to stop the program, set a breakpoint, and save a checkpoint after three hours of running, regardless of the instructions being executed or the state of the processes under the control of the debugger. In this example, the event of three hours of running would indicate to the debugger that a breakpoint is to be set and that a checkpoint is to be saved. The debugger may also be instructed to save a checkpoint periodically or before or after a specific instruction is executed.","If a checkpoint is to be saved in step , the debugger saves process data to a checkpoint file (step ) and a determination is made as to whether the debugger is to restore the image of the process from a checkpoint file (step ). If the debugger process determines that a checkpoint is not to be saved in step , the debugger process proceeds directly to step  to determine whether the image of the process is to be restored from a checkpoint file.","If the image of the process is to be restored from a checkpoint file in step , the debugger restores process data from the checkpoint file (step ) and a determination is made as to whether the debugger is to modify registers and\/or memory variables (step ). If the debugger process determines that the process image is not to be restored in step , the debugger process proceeds directly to step  to determine whether registers and\/or memory variables are to be modified.","The debugger may also restore the image of the process being debugged and modify registers or memory variables in response to an event. For example, the debugger may be instructed to run between a checkpoint and breakpoint repeatedly using a plurality of register or memory variable values and output results.","If registers and\/or memory variables are to be modified in step , the debugger modifies the values (step ) and a determination is made as to whether the debugger process is to terminate (step ). If the debugger process determines that registers and\/or memory variables are not to be modified in step , the debugger process proceeds directly to step  to determine whether the debugger process is to terminate.","If the debugger process determines that debugging is to terminate in step , the debugger process ends. Otherwise, the debugger process continues debugging the program in a running state in step .","Thus, the present invention provides a way to save the entire process image of a process being traced including its registers and machine state in a file called the checkpoint file. It also provides a way to read a checkpoint file and to recreate the process image from the state saved in the file and resume it at the point where it was checkpointed as a traced process. A programmer debugging an especially insidious bug has an opportunity to try alternative values for registers and memory variables and run through the same computation window. The present invention also allows a programmer to debug a problem that may occur after several hours of running without the need to run the program from the beginning every time registers or memory variables are modified.","It is important to note that while the present invention has been described in the context of a fully functioning data processing system, those of ordinary skill in the art will appreciate that the processes of the present invention are capable of being distributed in the form of a computer readable medium of instructions and a variety of forms and that the present invention applies equally regardless of the particular type of signal bearing media actually used to carry out the distribution. Examples of computer readable media include recordable-type media such a floppy disc, a hard disk drive, a RAM, and CD-ROMs and transmission-type media such as digital and analog communications links.","The description of the present invention has been presented for purposes of illustration and description, but is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art. For example, while the description of the invention and any examples herein may be specific to the UNIX operating system, a person of ordinary skill in the art will recognize that the present invention may be implemented in any operating system. The embodiment was chosen and described in order to best explain the principles of the invention, the practical application, and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The novel features believed characteristic of the invention are set forth in the appended claims. The invention itself, however, as well as a preferred mode of use, further objectives and advantages thereof, will best be understood by reference to the following detailed description of an illustrative embodiment when read in conjunction with the accompanying drawings, wherein:",{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 6"}]},"DETDESC":[{},{}]}
