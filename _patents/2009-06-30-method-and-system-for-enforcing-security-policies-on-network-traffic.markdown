---
title: Method and system for enforcing security policies on network traffic
abstract: A computer readable medium that includes computer readable program code embodied therein. The computer readable medium causes the computer system to receive, by a data link rule enforcer, a packet from a packet source of the packets, and obtain a data link rule applying to a data link. The data link is operatively connected to the packet source, and the data link is associated with a media access control (MAC) address. The computer readable medium further causes the computer system to determine, by the data link rule enforcer, whether the packet complies with the data link rule, and drop, by the data link rule enforcer, the packet when the packet fails to comply with the data link rule.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09059965&OS=09059965&RS=09059965
owner: Oracle America, Inc.
number: 09059965
owner_city: Redwood Shores
owner_country: US
publication_date: 20090630
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["Network traffic is transmitted across a network, such as the Internet, from a sending system (e.g., a computer system) to a receiving system (e.g., a computer system) via a network interface card (NIC). The NIC is a piece of hardware found in a typical computer system that includes functionality to send and receive network traffic. Typically, network traffic is transmitted in the form of packets, where each packet includes a header and a payload. The header contains information regarding the source address, destination address, size, transport protocol used to transmit the packet, and various other identification information associated with the packet. The payload contains the actual data to be transmitted from the network to the receiving system.","It is often desirable to monitor packets sent by a sender and packets received by a receiver. For example, the monitoring may be performed to ensure that the sender on a sending computer system is not maliciously sending packets, such as by impersonating another sender. Similarly, the monitoring of a receiving computer system may be to ensure that the receiver is not receiving packets that could maliciously alter the receiving computer system.","In general, in one aspect, the invention relates to a computer readable medium that includes computer readable program code embodied therein. The computer readable medium causes the computer system to receive, by a data link rule enforcer, a packet from a packet source of the packets, and obtain a data link rule applying to a data link. The data link is operatively connected to the packet source, and is associated with a media access control (MAC) address. The computer readable medium further causes the computer system to determine, by the data link rule enforcer, whether the packet complies with the data link rule, and drop, by the data link rule enforcer, the packet when the packet fails to comply with the data link rule.","In general, in one aspect, the invention relates to a computer readable medium that includes computer readable program code embodied therein. The computer readable medium causes the computer system to receive, by a data link rule enforcer, a packet from a network. The packet specifies a packet destination. The computer readable medium further causes the computer system to obtain a data link rule applying to a data link corresponding to the packet destination. The data link is operatively connected to the packet destination, and is associated with a MAC address. The computer readable medium further causes the computer system to determine, by the data link rule enforcer, whether the packet complies with the data link rule, and drop, by the data link rule enforcer, the packet when the packet fails to comply with the data link rule.","In general, in one aspect, the invention relates to a computer system that includes a processor, a memory, and instructions stored in memory. The instructions cause the processor to receive, by a data link rule enforcer, a packet from a packet source of the packets, and obtain a data link rule applying to a data link. The data link is operatively connected to the packet source, and is associated with a MAC address. The instructions further cause the processor to determine, by the data link rule enforcer, whether the packet complies with the data link rule, and drop, by the data link rule enforcer, the packet when the packet fails to comply with the data link rule. The packet source is a virtual machine or a container.","Other aspects of the invention will be apparent from the following description and the appended claims.","Specific embodiments of the invention will now be described in detail with reference to the accompanying FIGs. Like elements in the various FIGs. are denoted by like reference numerals for consistency. Further, the use of \u201cFIG.\u201d in the drawings is equivalent to the use of the term \u201cFIG.\u201d in the description.","In the following detailed description of embodiments of the invention, numerous specific details are set forth in order to provide a more thorough understanding of the invention. However, it will be apparent to one of ordinary skill in the art that the invention may be practiced without these specific details. In other instances, well-known features have not been described in detail to avoid unnecessarily complicating the description.","In general, embodiments of the invention enforce data link rules at the data link layer of the network communication stack. Specifically, embodiments of the invention monitor and filter packets sent and received by a packet source\/destination to ensure that the packets comply with one or more data link rule(s). Packets that do not comply with the data link rule(s) are dropped in accordance with one or more embodiments of the invention.","A data link is a component (physical or virtual) that is registered in the Media Access Control (MAC) layer and associated with at least one MAC address. For example, the data link may be the physical NIC, a link aggregation group, a Virtual Network Interface, a virtual local area network (VLAN), any other component with a MAC address, or a combination thereof.","In one or more embodiments of the invention, the data link rules are defined using link properties associated with all or a subset of data links used to send and receive packets from the packet source\/destination. More specifically, a data link rule is defined for all or a subset of data links corresponding to a packet source\/destination. For example, if a packet source\/destination is connected to a public network and a private network, then the data link rules may apply to only the data links for the public network and not to the data links corresponding to the private network.","In one or more embodiments of the invention, data link rules are defined to enforce security policies. Specifically, data link rules may be defined to ensure that packets sent by a packet source on the host are not malicious (e.g., change the network configuration, impersonate another packet source, or perform other such nepharious acts) and to ensure that packets received by a packet destination on the host are not malicious (e.g., receive confidential network configuration information, receive a multicast message that is not intended for the packet destination, or receive other data not intended for the packet destination).","In one embodiment of the invention, the data link rules are associated with a given data link (or data links) based on the MAC address of the data link(s) for which the data link rule applies. Specifically, the data link rule may directly or indirectly reference a specific MAC address. Data link rules may also indirectly reference a data link being applicable to all data links or all data links having a certain characteristic. For example, the data link rule, without actually identifying the MAC address of the data link, may specify that all packets sent from a data link must specify a source MAC address that corresponds to the MAC address of the data link. As another example, the data link rule may specify that all packets sent on a public network, and therefore all data links that are capable of sending packets on a public network, must conform with the rule. Data link rules applicable to a given data link may be obtained according to the properties of the data link (e.g., MAC address, corresponds to a public network, etc.). For example, when a packet is received for a data link, the data link rules are obtained that apply to the data link (e.g., data link rules that identify the MAC address of the data link, data link rules that apply to all data links, data link rules that apply to data links corresponding to public networks when the data link corresponds to a public network, etc.).","The following are a few examples of data link rules. The following are for example purposes only and not intended to limit the scope of the invention. Specifically, other types of data link rules may be defined without departing from the scope of the invention. In an example, a data link rule may require that the Media Access Control (MAC) address of the Virtual Network Interface Card (VNIC) associated with the packet source\/destination matches the MAC address specified in the packet. Such a data link rule may assist in assuring that the packet source\/destination is not impersonating another packet source\/destination.","As another example, the data link rule may be defined to block control messages from being sent or received by a packet source\/destination. In one or more embodiments of the invention, a control message includes information about the topology of the network or specifies a change in the topology of the network. The data link rule may specify protocols used to send and receive packets. For example, a data link rule may indicate that packets corresponding to control messages using protocols for configuring the network are blocked. In another example, the data link rule may block control messages based on a value of a multicast address in the control message.","In another example, the data link rule may be based on the Internet Protocol (IP) address of the packet source\/destination. In the example, the data link rule may specify that only packets sent from the packet source having an IP address matching the IP address of the packet source are allowed.","Another example of a data link rule may specify that packets received from a network and corresponding to unsolicited address resolution protocol (ARP) messages are dropped. An ARP message is a request to match an IP address with a MAC address of a device used to receive data for the IP address.","In one or more embodiments of the invention, the data link rules are enforced by a data link rule enforcer. In one or more embodiments of the invention, the data link rule enforcer includes functionality to enforce the data link rules for a data link. In one or more embodiments of the invention, the data link rule includes a MAC address of the data link to which the rule applies. In one or more embodiments of the invention, data from the data link is divided into frames. Additionally, in one or more embodiments of the invention, the data link does not perform network layer or transport layer processing.",{"@attributes":{"id":"p-0023","num":"0022"},"figref":["FIG. 1","FIG. 1"],"b":["100","102","102","100","102","102"]},"In one embodiment of the invention, the NIC () includes a classifier (), one or more hardware receive rings (HRRs) (A, B), and one or more hardware transmit rings (HTRs) (A, B). In one embodiment of the invention, the HRRs (A, B) correspond to portions of memory used to store, temporarily, the received packets. Similarly, the HTRs (A, B) correspond to portions of memory used to store packets to send on the network. In one or more embodiments of the invention, the HRRs (A, B) and HTRs (A, B) are implemented as ring buffers. A ring buffer is a temporary data structure in which the individual data elements in the ring buffer are arranged in a circle. Specifically, ring buffers do not have ending data elements.","In one embodiment of the invention, the classifier () is configured to analyze the incoming network traffic, typically in the form of packets, received from the network (not shown). Those skilled in the art will appreciate that while the NI is described above as being part of the NIC (), the NI may be implemented using other hardware configurations (i.e., in hardware other than a \u201ccard\u201d).","In one embodiment of the invention, analyzing the packets by the classifier () includes analyzing one or more fields in each of the packets to determine to which of the HRRs (A, B) the packets are forwarded. As an alternative, the classifier () may use the contents of one or more fields in each packet as an index into a data structure that includes information necessary to determine to which HRR (A, B) that packet is forwarded. The classifier () may be implemented entirely in hardware (i.e., the classifier () may be a separate microprocessor embedded on the NIC ()). In such scenario, the classifier is a hardware classifier on the NIC (). Alternatively, the classifier () may be a software classifier implemented in software stored in memory (e.g., firmware, etc.) on the NIC () and executed by a microprocessor on the NIC (). The classifier () may be configured to drop packets based on the data link rules defined for the HRRs (A, B).","In one or more embodiments of the invention, the NIC () includes a data link rule enforcer (not shown). The data link rule enforcer on the NIC () may correspond to a hardware or software component on the NIC () that enforces the data link rules. In one or more embodiments of the invention, the data link rule enforcer enforces the rules based on the HRR (A, B) and HTR (A, B) in which the packets are placed. In one or more embodiments of the invention, the data link rules enforced by the data link rule enforcer on the NIC () are stored on the NIC ().","As discussed above, the NIC () is connected to the host (). In one embodiment of the invention, the host () may include a NIC driver (), one or more virtual NICs (VNIC) (A, B), one or more virtual network stack(s) (VNS) (A, B), and one or more packet sources\/destinations (A, B). Each of these components is described below.","In one embodiment of the invention, the NIC driver () provides an interface between the HRRs (A, B) and the host (). More specifically, the NIC driver () exposes the HRRs (A, B) and the HTRs (A, B) to the host (). Although not shown in , the host () may be connected to multiple physical NICs. In such a scenario, each physical NIC () may have a corresponding NIC driver on the host (). An aggregation driver (not shown) may be used to manage the data from the multiple physical NICs.","In one embodiment of the invention, each VNIC (A, B) is located within the Media Access Control (MAC) layer () of the host (). In one embodiment of the invention, each of the VNICs (A, B) is associated with one or more HRRs (A, B) and one or more HTRs (A, B). Further, an HRR (A, B) and an HTR (A, B) may be associated with more than one VNIC (A, B). For example, each of multiple HRRs on the NIC () may correspond to a disjoint set of multiple VNICs on the host (). In embodiments in which an HRR is associated with more than one VNIC, the host may include a software classifier (not shown). The software classifier on the host may include functionality similar to the classifier on the NIC (). Specifically, the software classifier may include functionality to analyze a packet to identify a VNIC for receiving the packet and place the packet in a queue corresponding to the VNIC.","The VNICs (A, B) provide an abstraction layer between the NIC () and the various packet sources\/destinations (A, B) (discussed below). More specifically, each VNIC (A, B) operates like a NIC () for a single packet source\/destination. For example, in one embodiment of the invention, each VNIC (A, B) is associated with one or more Internet Protocol (IP) addresses, one or more ports, and configured to handle one or more protocol types. Thus, while the host () may be operatively connected to a single NIC (), packet sources\/destinations (A, B) and other applications executing in the user level on the host () operate as if the host () is bound to multiple NICs. Said another way, each VNIC (A, B) operates as a separate network device connected to the network.","In one or more embodiments of the invention, each VNIC (A, B) is within the MAC layer () of the data link layer (). The data link layer () includes functionality transfer data between network entities and to detect and possibly correct errors that may occur in the physical layer (i.e., on data received by the NIC ()). The data link layer () includes a Logical Link Control (LLC) layer () and the MAC layer (). The LLC layer () provides multiplexing and flow control mechanisms. The MAC layer () allows multiple hosts to connect to the same network by having separate MAC addresses. Each VNIC performs MAC layer processing of packets. Specifically, each VNIC (A, B) has a corresponding MAC address and performs MAC layer addressing. In one or more embodiments of the invention, each VNIC (A, B) is a data link rule enforcer for packets processed by the VNIC. Specifically, each VNIC (A, B) includes functionality to determine whether the packet complies with the data link rules. Alternatively, the MAC layer () may include a data link rule enforcer, which is used by all data links in the MAC layer ().","In one or more embodiments of the invention, the packet source\/destination(s) (A, B) corresponds to any process or group of processes executing on the host that sends and receives network traffic. For example, the packet source\/destinations (A, B) include, but are not limited to containers, services (e.g., web server), and virtual machines.","In one embodiment of the invention, a container is a virtualized environment that does not have a separate operating system from the host. Rather, the execution environment of applications in the container is a partition of the host's operating system. Therefore, the execution environment of applications in two different containers executing on the same host is the same single instance of the operating system on the host. A container provides an isolated execution environment in order to have the same protections of separate machines on a single instance of an operating system. Specifically, each container has a security boundary surrounding it that prevents a process in one container from interacting with or observing processes in other containers. In one embodiment of the invention, a virtual machine is a virtualized environment that has a separate operating system. Specifically, the execution environments of applications executing in different virtual machines are different instances of one or more operating systems.","Returning to , each of the VNICs (A, B) is operatively connected to a corresponding VNS (A, B) via a VNIC pseudo driver (A, B). A VNIC pseudo driver (A, B) provides an interface to the corresponding VNIC (A, B). In one or more embodiments of the invention, a VNS (A, B) is a network stack that is virtualized to account for multiple network stacks operating in the same execution environment. In one embodiment of the invention, a network stack includes functionality to process packets in accordance with various protocols used to send and receive packets (e.g., Transmission Communication Protocol (TCP), Internet Protocol (IP), User Datagram Protocol (UDP), etc.). By having separate network stacks for each VNIC, embodiments of the invention compartmentalize the packets of different packet source\/destinations into individual structures thereby providing greater security in accordance with one or more embodiments of the invention. Each network stack may also include functionality to send and receive packets from an associated VNIC (A, B). Further, each network stack may also include functionality to send and receive packets from an associated packet source\/destination (A, B).","In one embodiment of the invention, each virtual network stack includes network layer and transport layer functionality. In one embodiment of the invention, network layer functionality corresponds to functionality to manage packet addressing and delivery on a network (e.g., functionality to support IP, ARP, Internet Control Message Protocol, etc.). In one embodiment of the invention, transport layer functionality corresponds to functionality to manage the transfer of packets on the network (e.g., functionality to support TCP, UDP, Stream Control Transmission Protocol (SCTP), etc.).","In one embodiment of the invention, the NIC driver (), the VNICs (A, B), and the VNSs (A, B) each use memory located on the host () to transfer packets. In one embodiment of the invention, the NIC driver (), the VNICs (A, B), and the VNSs (A, B) use the kernel level memory (not shown), located on the host (). The kernel level memory corresponds to a section of memory located on the host () for use by the kernel and other processes executing in the kernel level.","In one embodiment of the invention, packet sources\/destinations (A, B) and other user level applications use memory located on the host (), referred to as user level memory (not shown). In one embodiment of the invention, the user level memory corresponds to a section of memory located on the host () for use by processes in the user level.","In one or more embodiments of the invention, the host () includes a configuration interface (). In one or more embodiments of the invention, the configuration interface () is an application programming interface or user interface for defining data link rules. Specifically, the configuration interface provides an interface for specifying data link rules for one or more data links associated with a packet source\/destination (A, B). The configuration interface includes functionality to transmit the data link rules to the data link rule enforcer for enforcement. Specifically, the configuration interface () includes functionality to interface with the data link rule enforcer.","In one embodiment of the invention, the configuration interface () includes functionality to transmit the data link rules to a data link rule enforcer on the NIC () through a MAC layer () located on the host (). Alternatively, the configuration interface () configures the data link rule enforcer on the NIC () directly, without passing through the MAC layer (). As another alternative, the configuration interface () may include functionality to transmit data link rules to a data link rule enforcer on the host ().",{"@attributes":{"id":"p-0041","num":"0040"},"figref":["FIG. 2","FIG. 1"],"b":["116","116","130","130","130","130","130","130","132","132","134","134","134","134","134","134","136","136","118","118","136","136","100","130","130"]},{"@attributes":{"id":"p-0042","num":"0041"},"figref":"FIGS. 3-5"},{"@attributes":{"id":"p-0043","num":"0042"},"figref":"FIG. 3","b":"201"},"In Step , at least one VNIC is created for the packet source\/destination.","Specifically, at least one new instance of a VNIC is created for the packet source\/destination. The new instance of the VNIC is assigned a MAC address. The MAC address may be set by an administrator, correspond to a random number, provided by the NIC, etc.","In Step , a virtual network stack is optionally created for the packet source\/destination in accordance with one or more embodiments of the invention. Specifically, a virtual network stack is created for each VNIC created for the packet source\/destination. As discussed above, if the packet source\/destination corresponds to a virtual machine, then installing the operating system in the virtual machine may create a network stack for the packet source\/destination in accordance with one or more embodiments of the invention. In such a scenario, an additional virtual network stack may not be required.","In Step , a hardware and\/or software classifier is subsequently programmed so that network traffic for the VNIC created in Step  is directed to a particular receive ring by the hardware or software classifier in accordance with one or more embodiments of the invention.","In Step , data link rule(s) are generated for data link(s) connected to the packet source\/destination. In one or more embodiments of the invention, generating the data link rules includes identifying security policies for packet traffic to and from the packet source\/destination. Specifically, security policies relating to the type of packets that should and\/or should not be received by the packet source\/destination are identified. Similarly, security policies relating to the type of packets that should and\/or should not be sent by the packet source\/destination are identified. The security policies are used to create the data link rules. For example, a security policy may specify that packets sent by a packet source on a public network should not be allowed to impersonate other packet sources executing on the same host. Such security policy may be used to create a data link rule that specifies the MAC address of packets sent by the packet source on the public network must match the MAC address of the VNIC used to send the packets on the public network.","In Step , a determination is made whether to program a data link enforcer on the NIC to enforce the data link rule(s). If a determination is made to have the data link enforcer on the NIC perform the enforcement, then a data link enforcer on the NIC is programmed to enforce the data link rule(s). Specifically, the data link rules are sent to the data link enforcer on the NIC. On the NIC, the data link rules are associated with the receive ring corresponding to the data link to which the rule is applied. For example, the data link rules may be stored in a table that references the hardware receive ring. Alternatively, the data link rules may be stored in the hardware receive ring. Further, in one or more embodiments of the invention, the information in the data link rules may vary based on the type of data link rules. For example, a data link rule that is based on the MAC address of the VNIC connected to the receive ring may not explicitly include the MAC address because the MAC address is already associated with the receive ring. However, in another example, a data link rule that is based on the protocol or an IP address may be stored with in NIC in a location accessible to the data link rule enforcer.","Although not explicitly discussed above, a subset of the data link rules may be enforced by a data enforcer on the NIC while the remaining data link rules may be enforced in the MAC layer in accordance with one or more embodiments of the invention. In such embodiments, both data link enforcers may be programmed to enforce the data link rules.","In Step , a determination is made whether to enforce the data link rule(s) on the VNIC (or in the MAC layer). If the VNIC (or another process in the MAC layer) is the data link rule enforcer, then the VNIC (or another process in the MAC layer) is programmed to enforce the data link rules in Step . In one embodiment of the invention, for each data link rule, the VNIC corresponding to the data link rule is programmed with the data link rule. A VNIC corresponds to a data link rule when the data link rule specifies a filtering of the packets sent through the VNIC. Programming the VNIC may include storing the data link rule in a memory location accessible and referenced by the VNIC in accordance with one or more embodiments of the invention.","After the data link rule enforcer is programmed with data link rules, the data link rule enforcer may enforce the rules. The data link rule enforcer may be occasionally reprogrammed with new data link rules and data link rules may be removed from enforcement.",{"@attributes":{"id":"p-0053","num":"0052"},"figref":"FIG. 4","b":["221","223"]},"In one or more embodiments of the invention, if the classifier is a hardware classifier on the NIC, then a determination is made whether the data link rule enforcer is on the NIC in Step . In Step , if the data link rule enforcer is on the NIC and performing the classifier for the receive rings, then the data link rule enforcer on the NIC drops packets that do not comply with the data link rule(s) for the data link corresponding to the packets. Specifically, for each receive ring, the data link rule enforcer analyzes the data in the packet (header data and\/or packet load) and compares the data with the data link rules. In one or more embodiments of the invention, any packets that do not comply with the data link rules are dropped. Specifically, the packets that violate the data link rules are not forwarded to the host in accordance with one or more embodiments of the invention.","In Step , the (remaining) packets are subsequently forwarded to the appropriate receive ring (if the classifier is a hardware classifier) or virtual NIC queue (if the classifier is a software classifier) as determined by the classifier. At this stage, the processing of the packets differs depending on which mode the virtual serialization queue (which is bound to the receive ring or virtual NIC queue via the stack) is operating in. Specifically, the processing of the packets depends on whether the virtual serialization queue is operating in polling mode or interrupt mode in Step .","In one embodiment of the invention, the data link enforcer may analyze the packets after they are stored in the appropriate receive ring and remove any packets that do not satisfy the appropriate data link rule(s).","Continuing with , if the virtual serialization queue is operating in polling mode, then the packets remain in the receive ring or virtual NIC queue (depending on the implementation) until the VNIC requests all or a specified number of packets from the receive ring or virtual NIC queue in Step .","Those skilled in the art will appreciate that the receive rings and\/or virtual NIC queues store a finite number of packets. Thus, if the receive rings and\/or virtual NIC queues are receiving packets at a faster rate than the corresponding virtual serialization queue is requesting packets, the receive rings and\/or virtual NIC queues fills with packets and packets received after this point are dropped until packets on the receive rings and\/or virtual NIC queues are requested and processed.","Alternatively, if the virtual serialization queue is operating in interrupt mode, then an interrupt is issued to the CPU bound to the receive ring or virtual NIC queue in Step . When the interrupt is serviced, all packets in the receive ring or virtual NIC queue are forwarded to the VNIC in Step .","In Step , a determination is made whether the data link rule enforcer is the VNIC (or another process in the MAC layer). If the data link rule enforcer is the VNIC, then the VNIC drops packets that do not comply with the data link rule(s) associated with the data link in Step . Specifically, for each receive ring, the VNIC analyzes the data in the packet (header data and\/or packet load) and compares the data with the data link rules. In one or more embodiments of the invention, any packets that do not comply with the data link rules are dropped. Specifically, the packets that violate the data link rules are not forwarded to the (virtual) network stack for the packet destination. If the data link rule enforcer is not the VNIC, then the process proceeds to Step .","In Step , the remaining packets are subsequently forwarded to the appropriate network stack associated with the VNIC. In one or more embodiments of the invention, after the packets are forwarded to the network stack, the packets are processed using network layer and transport layer processing. Accordingly, in one or more embodiments of the invention, if the packet destination is a virtual machine, then the enforcement of the security policies to ensure that the virtual machine is not performing malicious acts is not performed by the network stack executing in the virtual machine; rather, the enforcement is performed by the host or NIC.",{"@attributes":{"id":"p-0062","num":"0061"},"figref":"FIG. 5","b":"251"},"In Step , a determination is made whether the data link rule enforcer is the VNIC. If the data link rule enforcer is the VNIC, then the VNIC drops packets that do not comply with the data link rule(s) associated with the data link in Step . Enforcing the data link rule(s) for packets to be sent on the network may be performed in a manner similar to enforcing rules for packets received from the network.","In Step , the (remaining) packets are subsequently forwarded to the NIC in accordance with one or more embodiments of the invention. In one or more embodiments of the invention, rather than sending the packets to the NIC to be sent on a network, the packets may be directed to another packet destination on the same host. In such scenario, the packets may be forwarded to a virtual switch on the host to send to the packet destination.","If the packets are forwarded to the NIC, a determination is made whether the data link rule enforcer is on the NIC in Step . In Step , if the data link rule enforcer is on the NIC, then the transmit ring corresponding to the VNIC is identified. The data link rule enforcer on the NIC drops packets that do not comply with the data link rule(s) corresponding to the transmit ring. The remaining packets may be stored in the transmit ring. The (remaining) packets are sent from the transmit ring via the network to their respective packet destinations in Step .","Embodiments of the invention may be implemented on virtually any type of computer regardless of the platform being used. For example, as shown in , a computer system () includes one or more processor(s) (), associated memory () (e.g., random access memory (RAM), cache memory, flash memory, etc.), a storage device () (e.g., a hard disk, an optical drive such as a compact disk drive or digital video disk (DVD) drive, a flash memory stick, etc.), and numerous other elements and functionalities typical of today's computers (not shown). The computer () may also include input means, such as a keyboard (), a mouse (), or a microphone (not shown). Further, the computer () may include output means, such as a monitor () (e.g., a liquid crystal display (LCD), a plasma display, or cathode ray tube (CRT) monitor). The computer system () may be connected to a network () (e.g., a local area network (LAN), a wide area network (WAN) such as the Internet, or any other type of network) via a network interface connection (not shown). Those skilled in the art will appreciate that many different types of computer systems exist, and the aforementioned input and output means may take other forms. Generally speaking, the computer system () includes at least the minimal processing, input, and\/or output means necessary to practice embodiments of the invention. Further, software instructions to perform embodiments of the invention may be stored on a computer readable medium such as a compact disc (CD), a diskette, a tape, or any other physical computer readable storage device.","While the invention has been described with respect to a limited number of embodiments, those skilled in the art, having benefit of this disclosure, will appreciate that other embodiments can be devised which do not depart from the scope of the invention as disclosed herein. Accordingly, the scope of the invention should be limited only by the attached claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF DRAWINGS","p":[{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIGS. 1 and 2"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIGS. 3-5"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 6"}]},"DETDESC":[{},{}]}
