---
title: Methods and systems for importing source data
abstract: Systems and methods are disclosed for importing source data. The disclosed systems and methods may include uploading the source data from at least one source system and translating the source data into command language commands. Furthermore, the disclosed systems and methods may include checking the command language commands for completeness or consistency and executing the command language commands to generate import data for at least one destination.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08554805&OS=08554805&RS=08554805
owner: SAP AG
number: 08554805
owner_city: Walldorf
owner_country: DE
publication_date: 20040517
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION"],"p":["I. Field of the Invention","The present invention generally relates to methods and systems for importing source data. More particularly, the present invention relates to methods and systems for importing source data from one or more external sources using a central and\/or consistent interface comprising, for example, a software-based framework.","II. Background Information","Importing source data is a process for taking source data comprising a particular format or structure and changing it into another format or structure. In some situations, an ad hoc approach to data importation is applied that depends on the source data. For example, for a given input format or structure, a particular application may be used for transforming the source data into another format or structure suitable for a predetermined environment or destination. If more than one source is utilized, then a separate application may be required for each of the possible source formats or structures. Thus, the conventional strategy is to provide a solution dependent upon the source data.","The above-mentioned approach is inefficient and can cause errors and\/or other problems. For example, the conventional strategy does not provide a consistent approach for importing data. As a result, where multiple sources exist, data transformation errors may arise when importing the data. Further, with the conventional strategy, customization and maintenance is difficult since updates must be developed and applied for each source data format.","In view of the foregoing, there is a need for improved methods and systems for importing source data. Furthermore, there is a need for methods and systems for importing source data that are customizable and\/or may be used with different source data formats.","Consistent with embodiments of the present invention, systems and methods are disclosed for importing source data. In accordance with one embodiment, a data import framework is provided for importing data from one or more sources. Embodiments of the invention also relate to systems and methods for importing source data, wherein the systems and methods provide a consistent framework for importing data and\/or are customizable by a user.","In accordance with one embodiment, a method for importing source data comprises translating the source data into command language commands, checking the command language commands for at least one of completeness and consistency, and executing the command language commands wherein the executed command language commands generate import data.","According to another embodiment, a system for importing source data comprises a memory storage for maintaining a database and a processing unit coupled to the memory storage, wherein the processing unit is operative to translate the source data into command language commands, check the command language commands for at least one of completeness and consistency, and execute the command language commands wherein the executed command language commands generate import data.","In accordance with yet another embodiment, a computer-readable medium which stores a set of instructions which when executed performs a method for importing source data, the method executed by the set of instructions comprises translating the source data into command language commands, checking the command language commands for at least one of completeness and consistency, and executing the command language commands wherein the executed command language commands generate import data.","In accordance with yet another embodiment, a method for importing source data comprises uploading the source data, the source data comprising command language commands, checking the command language commands for at least one of completeness and consistency, and executing the command language commands wherein the executed command language commands generate import data.","It is to be understood that both the foregoing general description and the following detailed description are exemplary and explanatory only, and should not be considered restrictive of the scope of the invention, as described and claimed. Further, features and\/or variations may be provided in addition to those set forth herein. For example, embodiments of the invention may be directed to various combinations and sub-combinations of the features described in the detailed description.","The following detailed description refers to the accompanying drawings. Wherever possible, the same reference numbers are used in the drawings and the following description to refer to the same or similar parts. While several exemplary embodiments and features of the invention are described herein, modifications, adaptations and other implementations are possible, without departing from the spirit and scope of the invention. For example, substitutions, additions or modifications may be made to the components illustrated in the drawings, and the exemplary methods described herein may be modified by substituting, reordering or adding steps to the disclosed methods. Accordingly, the following detailed description does not limit the invention. Instead, the proper scope of the invention is defined by the appended claims.","Systems and methods consistent with embodiments of the present invention import source data. The source data may be provided from one or more sources. The import of the source data may include transforming the format or structure of the source data to generate import data. The import data may have a predetermined format or structure that is suitable for a system environment or application program of at least one destination.","Embodiments of the invention also comprise a data import framework for transforming source data into import data. In one embodiment, the data import framework provides a central and\/or consistent interface for importing data from one or more sources into a destination (see, e.g., ). The data import framework may be implemented through any suitable combination of hardware, software and\/or firmware. By way of example, in one embodiment, the data import framework is implemented with one or more software modules that are provided as part of a destination. In another embodiment, the data import framework is implemented with software module(s) that are provided separately from the destination. In yet another embodiment, the data import framework may be implemented as a central interface for transforming and importing data for a plurality of destinations.","As disclosed herein, the source data may be imported from a source to a destination using a consistent interface comprising, for example, a software-based framework. The source may comprise, for example, a source system, database or data processor (see, e.g., ). The application program or system environment of the destination may provide specific functionality, such as financial or costing analysis. While embodiments of the invention are disclosed herein with reference to financial or costing solutions, the invention is not limited to such applications and embodiments of the invention may be applied to transform and\/or import data into any application or system environment.","In accordance with another embodiment of the invention, the source data's terms and structures may be translated into the terms and structures of the destination. For example, appropriate objects in a financial program of the destination may be assigned to entities in the source data. Further, when importing hierarchical or network-like data from the source processor, appropriate networks may be formed for the financial program.","The data import framework may transform the source data, as described above. For example, the source data may be classified by the data import framework according to data types. The source data's classified types may then be assigned by the data import framework to types used by the destination. These assignments may be configured or customized by a user, for example. Moreover, the data import framework may offer programming interfaces to different levels, for example: (i) a specialized interface that may import data from an R\/3 or NetWeaver system; (ii) a generic interface that may import data based on extensible markup language (XML); and (iii) a direct interface that may import data directly in a command language form. R\/3 and NetWeaver are integrated suites of client\/server applications from SAP AG, Walldorf, Germany. R\/3 and NetWeaver may include information systems for manufacturing, distribution, order processing, accounting and human resources. XML is an open standard for describing data and may be used for defining data elements on an Internet page and business-to-business documents, for example.","For purposes of illustration,  is a block diagram of an exemplary system environment that includes a data import framework , consistent with an embodiment of the invention. As shown in , the data import framework may provide an interface for importing data from a plurality of sources A to N. Each of the sources A to N may provide data in one or more formats or structures (e.g., XML documents, data from an R\/3 system, etc.). After transforming the data, data import framework  may generate import data for a destination . As disclosed herein, the destination may comprise one or more applications or system environments (e.g., financial or costing solutions). Consistent with embodiments, data import framework  may also be implemented to generate import data for a plurality of destinations (not shown in ).","The components of  may be implemented using conventional hardware (e.g., servers, workstations, personal computers, etc.) and software (e.g., application programs or modules). Further, to provide connectivity and the communication of data, communication bus line(s) and\/or network(s) may be employed. For example, each of the sources A to N may be connected to data import framework  by one or more networks, such as a local area network (LAN), a wide area network (WAN), an intranet or the Internet. Each destination  may also be connected to data import framework  in a similar fashion.","Data import framework  may comprise a syntactical analyzer (a parser, for example), contextual analyzer (a checker, for example), and an interpreter, to import data from any one of external sources A to N into destination . Processing performed by data import framework  may include: (i) translating the data from at least one source into a command language (by the parser, for example); (ii) checking the translated commands for completeness or consistency (by the checker, for example); and (iii) executing the import command to generate import data (by the interpreter, for example). The import data may comprise, for example, data objects that are processed by the destination.","An embodiment consistent with the invention may comprise a system for transforming source data to generate import data. The system may comprise a memory storage for maintaining a database and a processing unit coupled to the memory storage. The processing unit may be operative to translate the source data into command language commands. Furthermore, the processing unit may be operative to check the command language commands for at least one of completeness and consistency. In addition, the processing unit may be operative to execute the command language commands wherein the executed command language commands generate import data.","Consistent with an embodiment of the present invention, the aforementioned memory, processing unit, and other components may be implemented in a data import system, such as the embodiment of  or the exemplary data import system  of . Any suitable combination of hardware, software and\/or firmware may be used to implement the memory, processing unit, or other components. By way of example, the memory, processing unit, or other components may be implemented with one or more sources  (such as a source data processor) and a data import framework , in combination with system . The aforementioned system and processors are exemplary and other systems and processors may comprise the aforementioned memory, processing unit, or other components, consistent with embodiments of the present invention.","By way of a non-limiting example,  illustrates system  in which the features and principles of the present invention may be implemented. As illustrated in the block diagram of , system  may include a source system in the form of source data processor , a data import framework , and a network . Consistent with embodiments of the invention, a user of system  may be an individual, for example, desiring to transform data using data import framework . A user of system  may also be an employee or representative of an organization, enterprise, or any other entity having such desires.","As shown in , data import framework  may include a processing unit  and a memory . Memory  may include: (i) an import agent software module ; (ii) an uploader software module ; (iii) a parser software module ; (iv) a mapper software module ; (v) a checker software module ; (vi) an interpreter software module ; (vii) a costing software module ; (viii) a type and field database ; and (ix) a business database . The software modules  through  residing in memory  may be executed on processing unit  and may access type and field database  and business database .","Consistent with embodiments of the present invention, the source data may be imported from source data processor  over network  to data import framework . Working in conjunction, import agent software module , uploader software module , parser software module , mapper software module , checker software module , and interpreter software module  may transform the source data received from source data processor  into a form usable by one or more application programs of the destination. In the exemplary embodiment of , the destination application program(s) may comprise, for example, costing software module , however, any application program may be used.","Consistent with the present invention, source data processor's  terms and structures may be translated into costing software module's  terms and structures. For example, appropriate objects in costing software module  may be assigned to entities in the source data supplied by source data processor . When importing hierarchical or network-like data from source data processor , appropriate networks may be formed for costing software module .","In accordance with one embodiment, the costing software module may be configured to use or provide concurrent costing. As illustrated in , concurrent costing may be a function for planning, monitoring, and optimizing the costs of new products during the planning, design, or offer phase. The costs of many products may largely be determined by engineering. Concurrent costing may be used in an early phase of the product life cycle because, at this point, the product costs may be approximately estimated with reference to an incomplete data basis. However, the course for the real costs may be set as they occur later.  shows which share of the costs associated with the definition have in the costs realized in the different phases of the product life cycle. As shown in , the total costs that occur may be influenced to a considerable extent with clever and constructive decisions in the product's design phase.","Concurrent costing may enable object types definition completely independent of firmly established data structures. The object types may be made of a combination of characteristics and key figures that may have been determined and the cost structure of which may be influenced by varying the characteristic values. For example, when producing a window frame, a pole for the locking mechanism may be needed. An object type pole that contains the characteristics material and plant may be defined. By varying these characteristics, the differences in costs in the planning phase may be assessed which result from using different materials that are suitable for the mechanism or from the origin of these materials from different plants.","As illustrated in the exemplary embodiment of , a data import framework consistent with the invention may manage a transformation from the source data, comprising for example, transforming tables into a costing engine network. In this example, the source data may be distributed over various tables. One table, for example, may contain leading data including R\/3 cost estimate for materials. In addition, the leading data may point to dependent data over various levels of indirection. The data import framework may transform the source data into a costing engine network using a set of rules (type and field mappings, for example) that may have been customized. The costing engine network can in turn be used by costing software module . As shown in , after the transformation, the source data may no longer be distributed over a number of loosely coupled tables, for example, but may be organized in a clearly defined network comprising nodes and edges, for example. Moreover, the nodes may include an inner structure that may simplify subsequent processing by costing software module . For example, the nodes may comprise containers for structure information and network data.","Nodes and edges are terms that may be used to describe structural information in, for example, a costing engine network. For example, nodes may be connected by edges. The edges may be directional, for example, there may be a \u201csender\u201d node and a \u201creceiver\u201d node. In the context of costing software module , these terms may be used to represent the components of products and activities that are needed to assemble them. For example, in , a node  may be a sender node, a node  may be a receiver node, and nodes  and  may be both sender and receiver nodes. Edges  and  may connect node  to nodes  and , respectively. Further, edges  and  may respectively connect nodes  and  to node .","Generally, parts, represented by nodes, maybe subdivided into further parts and activities. Particularly, no distinction may be made between a product and a part. The terms \u201csender\u201d and \u201creceiver\u201d are defined with respect to a given edge, for example, the same node may be a sender node on one edge and a receiver node on another. Apart from this structural information, the nodes and edges may also have data containers to store data that identifies and characterizes them. For example, the source data may be in a table format similar to the tables of . In this example, the structural information as well as the proper data (e.g., object keys, quantities, amounts, etc.) may be encoded in the fields of the source data table lines. By using type and field mapping, as described below, the structural information and the proper data may be extracted from the source data tables and translated into command language commands by the parser software module.","Referring again to , import agent software module , when executed on processing unit , may display screens allowing user  to enter data queries and\/or commands to source data processor  in order to import the source data. The sequence of these screens may follow, for example, a \u201cwizard pattern\u201d or another suitable graphical user interface (GUI) pattern. Such display screens or GUIs may be provided to enable a user to define and\/or customize the import of data form a source system.","In accordance with an embodiment of the invention,  illustrate exemplary screen shots of GUIs for facilitating data import and user customization. The GUIs may enable a user to define and customize the data import. In general,  show exemplary screens for configuring import agent software module  for an R\/3 upload. For example, as shown in , a user may select objects in the remote system in the Object Type column, action for costing software module  in the Action column, and parameters for costing software module  in the Parameter column. Furthermore, as shown in , a user may select structures and field names for the remote system in the left-most Structure and Field Name columns and may select structures and filenames for costing software module  in the right-most Structure and Field Name columns.",{"@attributes":{"id":"p-0044","num":"0043"},"figref":["FIG. 5C","FIG. 5C","FIG. 5","FIG. 5E","FIG. 5F","FIG. 5E","FIG. 5F","FIG. 5G","FIG. 5H","FIG. 5C","FIG. 5"]},"The data imported by import agent software module  may be in any format or working environment including, for example, R\/3 and XML data. The aforementioned formats are exemplary and others may be used. Once import agent software module  imports the source data, the source data may be supplied to uploader software module .",{"@attributes":{"id":"p-0046","num":"0045"},"figref":["FIG. 6","FIG. 6","FIGS. 1 and 2","FIG. 6"],"b":["500","500"]},"More specifically, as shown in , uploader software module  may comprise an R\/3 uploader sub-module  and an XML uploader sub-module  for uploading R\/3 and XML data, respectively. In addition, module  may include a connector uploader sub-module  for uploading source data provided in command language format. To parse source data in R\/3 and XML format, parser software module  may comprise an R\/3 parser sub-module  and an XML parser sub-module . Sub-modules , , , , and  are exemplary and uploader software module  and parser software module  may comprise any number of sub-modules corresponding to any data format or working environment.","R\/3 sub-module  may accept source data sets from an R\/3 system. These R\/3 source data sets may be analyzed in R\/3 parser sub-module  and translated into a command language, as described below. Similarly, XML uploader sub-module  may accept XML source data sets. These XML source data sets may be analyzed by the XML parser sub-module  and translated into the command language as well. In addition, connector uploader sub-module  may pass command language commands directly to checker software module . For example, a third-party application may be configured to send the source data, comprising command language commands for example, directly to costing software module .","Parser software module , including both R\/3 parser sub-module  and XML parser sub-module  in this example, may use mapper software module . Mapper software module  may use type and field mappings that may be customized and stored in type and field database . This is because the source data may have a certain type system and costing software module  may have a type system different from the source data's type system. For example, R\/3 source data may have various built-in types, such as \u201ccost estimate\u201d, \u201cmaterial\u201d, \u201ccost center\u201d, and \u201cactivity type\u201d. Accordingly, the R\/3 source data may be transformed, within a certain transaction, into the node, edge, object, and table types used by costing software module , for example. Consequently, mapper software module  may become configured in detail according to a user's business and\/or other needs.","Type mapping may define a relation between the source data types and the types used by the destination software module . For example, the R\/3 \u201ccost center\u201d and \u201cactivity\u201d type data may be mapped to \u201cactivity\u201d nodes used by software module . Furthermore, field mapping may complete the type mapping on a per field basis. After the types have been assigned, field mapping may designate which source data field ends up on which target data field.","The data import framework and the costing engine may be built upon a \u201cdata definition framework\u201d that allows the user to define the data fields and types. Particularly, the user may specify names for the fields and types that are meaningful to the user as opposed, for example, to a software programmer. This may be part of the costing engine customizing. Therefore, when importing data from a source system, the source data fields and types may be mapped to the ones defined in the destination system. This may be advantageous if the source system uses very technical fields and types which are not meaningful to the user. Table 1 illustrates exemplary mappings.",{"@attributes":{"id":"p-0052","num":"0051"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"98pt","align":"left"}}],"thead":{"row":[{"entry":[{},"TABLE 1"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Source System","Destination System"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"98pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Type","M","MATERIAL"]},{"entry":[{},"Type","E","ACTIVITY"]},{"entry":[{},"Field","KOKRS","CO_AREA"]},{"entry":[{},"Field","KOSTL","COST_CENTER"]},{"entry":[{},"Field","LSTAR","ACTIVITY_TYPE"]},{"entry":[{},"Field","WERKS","PLANT"]},{"entry":[{},"Field","MATNR","MATERIAL NUMBER"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]}}]}}},"Once parser software module  creates the command language, it may send the command language to checker software module . Checker software module  may rework certain commands within the command language according to a current state of costing software module . For example, a command within the command language to insert an item may be changed into a command to update that item, if, for example, that item is already known to costing software module . In addition, as stated above, the command language may also be passed directly to checker software module  from connector uploader sub-module , if, for example, a third-party application is configured to send import commands directly to costing software module .","Once the command language commands are checked, they may be passed to interpreter software module . Interpreter software module  may execute the command language commands by, for example, transforming the commands into calls to a costing engine application program interface (CEAPI). Theses calls to the CEAPI may generate import data for costing software module  that may be stored in business database . The import data may be stored using costing engine network, as illustrated in  above. The costing engine network is exemplary, and the import data maybe stored in any number of ways.","Consistent with an embodiment of the invention, the destination for the import data may be fixed to the costing engine. Accordingly, interpreter  may know what commands mean and how to operate the costing engine in order to execute the commands. For example, there may be code in interpreter  to perform the following function:",{"@attributes":{"id":"p-0056","num":"0055"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u201cif command = \u2018INS_NODE\u2019 then call method costing engine"]},{"entry":[{},">api_create_instance_node\u201d."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{}},"The concept of an Application Programming Interface (API) is a software design pattern generally known to those skilled in the art. For example, consider a software programmer who has built a software module. It turns out that the functions of this software module are useful not only within the specific application but also more generally. Therefore, the programmer may define a set of function calls to the module considered useful and makes them publicly available. This set may be the software module's API. From other software modules' view, using an API has the advantage that the API provider grants some stability, for example, the call parameters may not change every other time.","The CEAPI may not generate any import data in the sense that information is generated. This data may already be present along with the command. As a result of the transformation from commands to calls, the command data may become a parameter to the call. The import data may be \u201cpipelined\u201d from the source through the commands to the calls to the destination. Import data may be generated in the sense that data sets containing the import data may be created in the destination database.","Data source processor  or data import framework  (\u201cthe processors\u201d) included in system  may be implemented using a personal computer, network computer, mainframe, or other similar microcomputer-based workstation. The processors may though comprise any type of computer operating environment, such as hand-held devices, multiprocessor systems, microprocessor-based or programmable sender electronic devices, minicomputers, mainframe computers, and the like. The processors may also be practiced in distributed computing environments where tasks are performed by remote processing devices. Furthermore, any of the processors may comprise a mobile terminal, such as a smart phone, a cellular telephone, a cellular telephone utilizing wireless application protocol (WAP), personal digital assistant (PDA), intelligent pager, portable computer, a hand held computer, a conventional telephone, or a facsimile machine. The aforementioned systems and devices are exemplary and the processor may comprise other systems or devices.","Network  may comprise, for example, a local area network (LAN) or a wide area network (WAN). Such networking environments are commonplace in offices, enterprise-wide computer networks, intranets, and the Internet, and are known by those skilled in the art. When a LAN is used as network , a network interface located at any of the processors may be used to interconnect any of the processors. When network  is implemented in a WAN networking environment, such as the Internet, the processors may typically include an internal or external modem (not shown) or other means for establishing communications over the WAN. Further, in utilizing network , data sent over network  may be encrypted to insure data security by using known encryption\/decryption techniques.","In addition to utilizing a wire line communications system as network , a wireless communications system, or a combination of wire line and wireless may be utilized as network  in order to, for example, exchange web pages via the Internet, exchange e-mails via the Internet, or for utilizing other communications channels. Wireless can be defined as radio transmission via the airwaves. However, it may be appreciated that various other communication techniques can be used to provide wireless transmission, including infrared line of sight, cellular, microwave, satellite, packet radio, and spread spectrum radio. The processors in the wireless environment can be any mobile terminal, such as the mobile terminals described above. Wireless data may include, but is not limited to, paging, text messaging, e-mail, Internet access and other specialized data applications specifically excluding or including voice transmission.","System  may also transmit data by methods and processes other than, or in combination with, network . These methods and processes may include, but are not limited to, transferring data via, diskette, CD ROM, facsimile, conventional mail, an interactive voice response system (IVR), or via voice over a publicly switched telephone network.",{"@attributes":{"id":"p-0063","num":"0062"},"figref":["FIG. 7","FIG. 7","FIGS. 1 and 2"],"b":["700","110","700"]},"As shown in , exemplary method  may begin at starting block  and proceed to stage  where data import framework  may upload the source data. The source data to be uploaded may be defined and\/or customized by the user. For example, import agent software module , when executed on processing unit , may display screens allowing user  to enter data queries and\/or commands to source data processor  in order to import the source data. An exemplary sequence is shown in , as discussed above. The source data imported by import agent software module  may be in any format or working environment, including R\/3 and XML data. The aforementioned formats are exemplary and others may be used.","An example of source data for an R\/3 cost estimate is shown in Table 2. The structural information may be encoded in the level field, for example: 1\u2014\u201ctop level\u201d material=\u201cproduct\u201d; 2\u2014component of the top level material=\u201cpart\u201d or \u201cactivity\u201d; and 3\u2014component of a level 2 component.",{"@attributes":{"id":"p-0066","num":"0065"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"8"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"5","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"6","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"7","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"8","colwidth":"35pt","align":"center"}}],"thead":{"row":[{"entry":"TABLE 2"},{"entry":{"@attributes":{"namest":"1","nameend":"8","align":"center","rowsep":"1"}}},{"entry":[{},{},{},{},{},{},{},"Quantity"]},{"entry":[{},{},{},{},{},{},{},"and"]},{"entry":[{},"Item",{},{},"Con-",{},{},"Base"]},{"entry":[{},"Cat-",{},{},"trolling","Cost","Activity","Unit of"]},{"entry":["Level","egory","Plant","Material","Area","Center","Type","Measure"]},{"entry":{"@attributes":{"namest":"1","nameend":"8","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["1","M","1000","P-100","1000",{},{},"100 ST"]},{"entry":["2","M","1000","100-100","1000",{},{},"100 ST"]},{"entry":["3","M","1000","100-101","1000",{},{},"200 ST"]},{"entry":["3","E","1000",{},"1000","4230","1422","0.250 H"]},{"entry":["2","M","1000","100-110","1000",{},{},"200 ST"]},{"entry":["2","E","1000",{},"1000","4230","1422","0.250 H"]},{"entry":["2","E","1000",{},"1000","4230","1422","8.250 H"]},{"entry":{"@attributes":{"namest":"1","nameend":"8","align":"center","rowsep":"1"}}}]}}}}},"Once import agent software module  imports the source data, the source data may be supplied to uploader software module . As shown in , and as discussed above, uploader software module , may comprise R\/3 uploader sub-module , XML uploader sub-module , and connector uploader sub-module . R\/3 sub-module  may accept source data sets from an R\/3 system. Similarly, SML uploader sub-module  may accept XML source data sets. In addition, connector uploader sub-module  may pass command language commands directly to checker software module . For example, a third-party application may be configured to send the source data, comprising command language commands for example, directly to costing software module .","From stage , where data import framework  uploads the source data, exemplary method  may advance to stage  where data import framework  may translate the source data into command language commands. For example, as shown in  and discussed above, parser software module  may comprise R\/3 parser sub-module  and XML parser sub-module . R\/3 source data sets may be analyzed in R\/3 parser sub-module  and translated into a command language. Similarly, XML source data sets may be analyzed by the XML parser sub-module  and translated into the command language as well. Parser software module , including both R\/3 parser sub-module  and XML parser sub-module  in this example, may use mapper software module . As discussed above, mapper software module  may use type and field mappings that may be customized and stored in type and field database . If the source data is provided in command language format, then step  may be skipped and the source data may be passed directly to the checker for analysis (i.e., step ).","The data in Table 2 may be processed into the follow command sequence shown in Table 3.",{"@attributes":{"id":"p-0070","num":"0069"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"6"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"35pt","align":"center"}},{"@attributes":{"colname":"5","colwidth":"35pt","align":"center"}},{"@attributes":{"colname":"6","colwidth":"42pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 3"},{"entry":{"@attributes":{"namest":"1","nameend":"6","align":"center","rowsep":"1"}}},{"entry":[{},{},{},"Reference",{},{}]},{"entry":[{},"The","Ref-","Identifiers","Reference"]},{"entry":[{},"Result","er-","To Build","Identifiers"]},{"entry":[{},"Of The","ence","Up A","To Build","Result Of"]},{"entry":["Command","Type","Iden-","Network","Up A","The Field"]},{"entry":["Name","Mapping","tifier","Network","Network","Mapping"]},{"entry":{"@attributes":{"namest":"1","nameend":"6","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"6"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"4","colwidth":"35pt","align":"char","char":"."}},{"@attributes":{"colname":"5","colwidth":"35pt","align":"char","char":"."}},{"@attributes":{"colname":"6","colwidth":"42pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["INS_OBJ","MATERIAL","1","0","0","data"]},{"entry":[{},{},{},{},{},"compartment"]},{"entry":["INS_NODE","NODE","2","1","0","data"]},{"entry":[{},{},{},{},{},"compartment"]},{"entry":["INS_EDGE","EDGE","3","2","0","data"]},{"entry":[{},{},{},{},{},"compartment"]},{"entry":["INS_OBJ","MATERIAL","4","0","0","data"]},{"entry":[{},{},{},{},{},"compartment"]},{"entry":["INS_NODE","NODE","5","4","0","data"]},{"entry":[{},{},{},{},{},"compartment"]},{"entry":["INS_EDGE","EDGE","6","5","2","data"]},{"entry":[{},{},{},{},{},"compartment"]},{"entry":["INS_OBJ","MATERIAL","7","0","0","data"]},{"entry":[{},{},{},{},{},"compartment"]},{"entry":["INS_NODE","NODE","8","7","0","data"]},{"entry":[{},{},{},{},{},"compartment"]},{"entry":["INS_EDGE","EDGE","9","8","5","data"]},{"entry":[{},{},{},{},{},"compartment"]},{"entry":["INS_OBJ","ACTIVITY","10","0","0","data"]},{"entry":[{},{},{},{},{},"compartment"]},{"entry":["INS_NODE","NODE","11","10","0","data"]},{"entry":[{},{},{},{},{},"compartment"]},{"entry":["INS_EDGE","EDGE","12","11","5","data"]},{"entry":[{},{},{},{},{},"compartment"]},{"entry":["INS_OBJ","ACTIVITY","13","0","0","data"]},{"entry":[{},{},{},{},{},"compartment"]},{"entry":["INS_NODE","NODE","14","13","0","data"]},{"entry":[{},{},{},{},{},"compartment"]},{"entry":["INS_EDGE","EDGE","15","14","2","data"]},{"entry":[{},{},{},{},{},"compartment"]},{"entry":["INS_OBJ","ACTIVITY","16","0","0","data"]},{"entry":[{},{},{},{},{},"compartment"]},{"entry":["INS_NODE","NODE","17","16","0","data"]},{"entry":[{},{},{},{},{},"compartment"]},{"entry":["INS_EDGE","EDGE","18","17","2","data"]},{"entry":[{},{},{},{},{},"compartment"]},{"entry":["INS_OBJ","ACTIVITY","19","0","0","data"]},{"entry":[{},{},{},{},{},"compartment"]},{"entry":["INS_NODE","NODE","20","19","0","data"]},{"entry":[{},{},{},{},{},"compartment"]},{"entry":["INS_EDGE","EDGE","21","20","2","data"]},{"entry":[{},{},{},{},{},"compartment"]},{"entry":{"@attributes":{"namest":"1","nameend":"6","align":"center","rowsep":"1"}}}]}}]}}},"An exemplary data compartment may comprise:",{"@attributes":{"id":"p-0072","num":"0071"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"MATERIAL | P-100"},{"entry":"PLANT | 1000"},{"entry":"CO_AREA | 1000"},{"entry":"UNIT | ST"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"Once data import framework  translates the source data into command language commands in stage , exemplary method  may continue to stage  where data import framework  may check the command language commands for at least one of completeness and consistency. For example, checker software module  may rework certain commands within the command language according to a current state of costing software module . For example, a command within the command language to insert an item may be changed into a command to update that item, if, for example, that item is already known to costing software module . In addition, as stated above, the command language may also be passed directly to checker software module  from connector uploader sub-module , if, for example, a third-party application is configured to send import commands directly to costing software module .","As illustrated in Table 4, if the above example is a re-import (i.e., all positions are already known to costing software module ), checker  may transform the command sequence to that illustrated in Table 5 below. (For example, INS=insert becomes UPD=update.) Checker  may re-sorts the command according to internal algorithmic reasons.",{"@attributes":{"id":"p-0075","num":"0074"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"6"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"35pt","align":"center"}},{"@attributes":{"colname":"5","colwidth":"35pt","align":"center"}},{"@attributes":{"colname":"6","colwidth":"42pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 5"},{"entry":{"@attributes":{"namest":"1","nameend":"6","align":"center","rowsep":"1"}}},{"entry":[{},{},"Ref-","Reference","Reference",{}]},{"entry":[{},{},"er-","Identifiers","Identifiers"]},{"entry":[{},"The Result","ence","To Build","To Build","Result Of"]},{"entry":["Command","Of The Type","Iden-","Up A","Up A","The Field"]},{"entry":["Name","Mapping","tifier","Network","Network","Mapping"]},{"entry":{"@attributes":{"namest":"1","nameend":"6","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"6"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"4","colwidth":"35pt","align":"char","char":"."}},{"@attributes":{"colname":"5","colwidth":"35pt","align":"char","char":"."}},{"@attributes":{"colname":"6","colwidth":"42pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["UPD OBJ","MATERIAL","1","0","0","data"]},{"entry":[{},{},{},{},{},"compartment"]},{"entry":["UPD OBJ","MATERIAL","4","0","0","data"]},{"entry":[{},{},{},{},{},"compartment"]},{"entry":["UPD OBJ","MATERIAL","7","0","0","data"]},{"entry":[{},{},{},{},{},"compartment"]},{"entry":["UPD OBJ","ACTIVITY","10","0","0","data"]},{"entry":[{},{},{},{},{},"compartment"]},{"entry":["UPD OBJ","ACTIVITY","13","0","0","data"]},{"entry":[{},{},{},{},{},"compartment"]},{"entry":["UPD OBJ","ACTIVITY","16","0","0","data"]},{"entry":[{},{},{},{},{},"compartment"]},{"entry":["UPD OBJ","ACTIVITY","19","0","0","data"]},{"entry":[{},{},{},{},{},"compartment"]},{"entry":["UPD NODE","NODE","2","1","0","data"]},{"entry":[{},{},{},{},{},"compartment"]},{"entry":["UPD NODE","NODE","5","4","0","data"]},{"entry":[{},{},{},{},{},"compartment"]},{"entry":["UPD NODE","NODE","8","7","0","data"]},{"entry":[{},{},{},{},{},"compartment"]},{"entry":["UPD NODE","NODE","11","10","0","data"]},{"entry":[{},{},{},{},{},"compartment"]},{"entry":["UPD NODE","NODE","14","13","0","data"]},{"entry":[{},{},{},{},{},"compartment"]},{"entry":["UPD NODE","NODE","17","16","0","data"]},{"entry":[{},{},{},{},{},"compartment"]},{"entry":["UPD NODE","NODE","20","19","0","data"]},{"entry":[{},{},{},{},{},"compartment"]},{"entry":["UPD EDGE","EDGE","3","2","0","data"]},{"entry":[{},{},{},{},{},"compartment"]},{"entry":["UPD EDGE","EDGE","6","5","2","data"]},{"entry":[{},{},{},{},{},"compartment"]},{"entry":["UPD EDGE","EDGE","9","8","5","data"]},{"entry":[{},{},{},{},{},"compartment"]},{"entry":["UPD EDGE","EDGE","12","11","5","data"]},{"entry":[{},{},{},{},{},"compartment"]},{"entry":["UPD EDGE","EDGE","15","14","2","data"]},{"entry":[{},{},{},{},{},"compartment"]},{"entry":["UPD EDGE","EDGE","18","17","2","data"]},{"entry":[{},{},{},{},{},"compartment"]},{"entry":["UPD EDGE","EDGE","21","20","2","data"]},{"entry":[{},{},{},{},{},"compartment"]},{"entry":{"@attributes":{"namest":"1","nameend":"6","align":"center","rowsep":"1"}}}]}}]}}},"After data import framework  checks the command language commands in stage , exemplary method  may proceed to stage  where data import framework  may execute the command language commands, wherein the executed command language commands generate import data. For example, interpreter software module  may execute the command language commands by, for example, transforming the commands into calls to a costing engine application program interface (CEAPI). As discussed above, these calls to the CEAPI may generate import data for costing software module  that may be stored in business database . The import data may be stored using costing engine network as illustrated in  above. The costing engine network is exemplary, and the import data maybe stored in other ways.","Within costing software module , objects (OBJ), nodes (NODE), and edges (EDGE) may be polymorphically referred to as \u201celements\u201d. All commands in Table 5 above may end up in calls of the form:\n\n","After data import framework  execute the command language commands in stage , exemplary method  may then end at stage . The exemplary method  may be repeated for additional sets of data to be imported or on a predetermined cycle defined by a user.","While certain features and embodiments of the invention have been described, other embodiments of the invention will be apparent to those skilled in the art from consideration of the specification and practice of the embodiments of the invention disclosed herein. Furthermore, although embodiments of the present invention have been described as being associated with data stored in memory and other storage mediums, one skilled in the art will appreciate that these aspects can also be stored on or read from other types of computer-readable media, such as secondary storage devices, like hard disks, floppy disks, or a CD-ROM, a carrier wave from the Internet, or other forms of RAM or ROM. Further, the steps of the disclosed methods may be modified in any manner, including by reordering steps and\/or inserting or deleting steps, without departing from the principles of the invention.","It is intended, therefore, that the specification and examples be considered as exemplary only, with a true scope and spirit of the invention being indicated by the following claims and their full scope of equivalents."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The accompanying drawings, which are incorporated in and constitute a part of this disclosure, illustrate various embodiments and aspects of the present invention. In the drawings:",{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIGS. 5A-5H"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 7"}]},"DETDESC":[{},{}]}
