---
title: Role-based authorization of network services using diversified security tokens
abstract: A mechanism for performing role-based authorization of the one or more services using security tokens associated with received service request messages. This role-based authentication is performed regardless of the type of security token associated with the received service request messages. Upon receiving a service request message over the network for a particular service offered by the service providing computing system, the service providing computing system accesses a security token associated with the received service request message. Then, the computing system identifies one or more roles that include the identity associated with the security token, and correlates the roles with the security token. These correlated roles are then used to authorize the requested service. This mechanism is performed regardless of the type of the security token.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07434252&OS=07434252&RS=07434252
owner: Microsoft Corporation
number: 07434252
owner_city: Redmond
owner_country: US
publication_date: 20040714
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","BRIEF SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS"],"p":["1. The Field of the Invention","The present invention relates to network technology; and more specifically, to mechanisms for performing role-based authorization of requested network services by correlating roles to security tokens associated with the request regardless of its security token type, and then later authorizing the requested services using the correlated role(s).","2. Background and Related Art","Computing technology has transformed the way we work and play. Computing systems now take a wide variety of forms including desktop computers, laptop computers, tablet PCs, Personal Digital Assistants (PDAs), household devices and the like. In its most basic form, a computing system includes system memory and one or more processors. Software in the system memory may be executed by the processor to direct the other hardware of the computing system to perform desired functions.","Networking technologies enable computing systems to communicate even over vast distances, thereby expanding on computer functionality. For example, networking technologies enable such applications as e-mail, web browsing, file transfer, instant messaging, electronic whiteboarding, network collaboration, and the like. Accordingly, computer networks enable widespread communication and information access.","Unfortunately, computer networks also can potentially open up connected computing systems to security breaches. One type of security breach is for one computing system or user to make false claims about who they are to thereby access network resources they should not have access to. Another security breach is referred to as \u201ceavesdropping\u201d by which an eavesdropper computing system accesses the content of a network communication even though the eavesdropper is an unintended and unwanted party in the communication. In addition, an eavesdropper or other entity might alter the network communication on its way to its intended destination. Any of these security breaches can be quite harmful.","In order to guard against these security breaches, a variety of security technologies have been developed. These technologies are based upon the use of security tokens. Security tokens may be used to authenticate a provider of the security token. In this manner, the security token is the comparable in the electronic domain to a passport or driver's license in the physical domain. Proper authentication provides some level of security that each party to the network communication is indeed who they purport to be. Security tokens may also be used to encrypt all or portions of a network message, thereby preventing eavesdropping by those who do not have access to the security token. Furthermore, security tokens may be used to sign portions of an electronic message to thereby allow those validating this signed portion to determine if the electronic message has been changed since the time it was signed. Authentication, encryption, and electronic signing thus provide some protection against security breaches in network communications.","Network communications increasingly extend beyond transport-level barriers. For example, a Simple Object Access Protocol (SOAP) envelope may be transmitted from one computing system to even while traveling through several transport domains. This is referred to as SOAP tunneling. A HyperText Transport Protocol (HTTP) computing system may transmit a SOAP envelope within an HTTP message to another HTTP computing system. Along the way, however, the SOAP envelope may be placed in other messages that follow different transport protocols, such as, for example, Message Queues (MQ), Simple Mail Transport Protocol (SMTP), CORBA\/IIOP, or the like.","While transport-independent network messaging allows for great flexibility in communication, conventional security mechanisms are transport-dependent. End-to-end message level security across multiple transports requires additional technology. Conventional end-to-end security across multiple transport domains has been provided in the form of the Web Services (WS)-Security specification.","The WS-Security Specification only expressly addresses the use of specific security tokens such as, for example, user name token with user name and password, X.509 certificates, Kerberos tokens, and others. However, the number of types of security tokens available for use in authentication, encryption, and electronic signing is rapidly expanding. Accordingly, what would be advantageous is a mechanism for managing security tokens that is extensible to a variety of different security token types, and which is compatible with transport-independent networking technologies such as SOAP.","As a separate issue from the security services described above, it is often desirable to authorize requested service. The security services described above merely provide some assurance through authentication that the service requestor is who they purport to be, some assurance through encryption that the message has not been eavesdropped on, and some assurance through signing that the message has not been altered. However, these security services do not ensure that the authenticated identity has the right to access the service.","In order to provide proper authorization, there is typically a layer of processing needed in order to authorize, separate and apart from authentication. This processing usually relies on some expression of authorization for each service. One way of expressing authorization for a given service is to list all identities that have authority to obtain the service. This can be quite cumbersome when there are numerous identities that have authority to access the service. Another more flexible and less cumbersome way of expressing authorization for a given service is to assign particular identities to one or more roles. A \u201crole\u201d is an expression that may be associated with one or more, and potentially many, identities. The roles, rather than the identities, may then be mapped to specific authorized services.","The following illustrates an example code syntax that enables role-based authentication using ASP.NET. The example code access the HttpContext object to check membership with a Windows user group or Active Directory group.","[WebMethod]",{"@attributes":{"id":"p-0016","num":"0015"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"public void AuthorizeOrder(long orderID)"},{"entry":"{"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"if (! HttpContext.Current.User.IsInRole(@\u201cDOMAIN\\Accounting\u201d))"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"throw new Exception(\u201cOnly members of \u2018Accounting\u2019 may call this method.\u201d);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\/\/ . . . update the database"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"In the following example, users in the role \u201cHR\u201d might call the method, but only members of the role \u201cPointyHairedBoss\u201d might set a salary higher than a certain amount:",{"@attributes":{"id":"p-0018","num":"0017"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"287pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"public void SetMonthlySalary(long employeeID, double salary)"},{"entry":"{"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"273pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"if (! HttpContext.Current.User.IsInRole(@\u201cDOMAIN\\HR\u201d))"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"throw new Exception(\u201cOnly members of \u2018HR\u2019 may call this method.\u201d);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"if (salary > 2000)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"273pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"{"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"if (! HttpContext.Current.User.IsInRole(@\u201cDOMAIN\\PointyHairedBoss\u201d))"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"throw new Exception(\u201cOnly pointy haired bosses may set salaries larger than 2K\u201d);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"273pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\/\/ . . . update the database"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"287pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"The code shown above relies on standard ASP.NET. However, this does not enable end-to-end authentication or authorization because it relies upon HTTP authentication.","Accordingly, what would be further desired is an authorization mechanism that does not rely on any specific authentication mechanism and that is flexible across different security token types to thereby enable fine-grained authorization in conjunction with end-to-end authentication.","The foregoing problems with the prior state of the art are overcome by the principles of the present invention, which are directed towards a mechanism for performing role-based authorization of one or more services using security tokens associated with received service request messages. This role-based authentication is performed regardless of the type of security token associated with the received service request messages.","Upon receiving a service request message over the network for a particular service offered by the service providing computing system, the service providing computing system accesses a security token associated with the received service request message. Then, the computing system identifies the identity associated with the security token, and one or more roles that the identity is assigned to. The one or more roles are subsequently correlated in some fashion with the security token. These correlated roles may then be used to authorize the requested service. This mechanism is performed regardless of the type of the security token. Accordingly, authorization is flexible and may be extended to network environments in which there may be a variety of security token types used.","Additional features and advantages of the invention will be set forth in the description that follows, and in part will be obvious from the description, or may be learned by the practice of the invention. The features and advantages of the invention may be realized and obtained by means of the instruments and combinations particularly pointed out in the appended claims. These and other features of the present invention will become more fully apparent from the following description and appended claims, or may be learned by the practice of the invention as set forth hereinafter.","The principles of the present invention relate to a mechanism for performing role-based authorization of the one or more services using security tokens associated with received service request messages. This role-based authentication is performed regardless of the type of security token associated with the received service request messages.","Turning to the drawings, wherein like reference numerals refer to like elements, the principles of the present invention are illustrated as being implemented in a suitable computing environment. The following description is based on illustrated embodiments of the invention and should not be taken as limiting the invention with regard to alternative embodiments that are not explicitly described herein.","In the description that follows, embodiments of the invention are described with reference to acts and symbolic representations of operations that are performed by one or more computers, unless indicated otherwise. As such, it will be understood that such acts and operations, which are at times referred to as being computer-executed, include the manipulation by the processing unit of the computer of electrical signals representing data in a structured form. This manipulation transforms the data or maintains them at locations in the memory system of the computer, which reconfigures or otherwise alters the operation of the computer in a manner well understood by those skilled in the art. The data structures where data are maintained are physical locations of the memory that have particular properties defined by the format of the data. However, while the principles of the invention are being described in the foregoing context, it is not meant to be limiting as those of skill in the art will appreciate that several of the acts and operations described hereinafter may also be implemented in hardware.",{"@attributes":{"id":"p-0031","num":"0030"},"figref":["FIG. 1","FIG. 1"]},"The principles of the present invention are operational with numerous other general-purpose or special-purpose computing or communications environments or configurations. Examples of well known computing systems, environments, and configurations suitable for use with the invention include, but are not limited to, mobile telephones, pocket computers, personal computers, servers, multiprocessor systems, microprocessor-based systems, minicomputers, mainframe computers, and distributed computing environments that include any of the above systems or devices.","In its most basic configuration, a computing system  typically includes at least one processing unit  and memory . The memory  may be volatile (such as RAM), non-volatile (such as ROM, flash memory, etc.), or some combination of the two. This most basic configuration is illustrated in  by the dashed line .","The storage media devices may have additional features and functionality. For example, they may include additional storage (removable and non-removable) including, but not limited to, PCMCIA cards, magnetic and optical disks, and magnetic tape. Such additional storage is illustrated in  by removable storage  and non-removable storage . Computer-storage media include volatile and non-volatile, removable and non -removable media implemented in any method or technology for storage of information such as computer-readable instructions, data structures, program modules, or other data. Memory , removable storage , and non-removable storage  are all examples of computer-storage media. Computer-storage media include, but are not limited to, RAM, ROM, EEPROM, flash memory, other memory technology, CD-ROM, digital versatile disks, other optical storage, magnetic cassettes, magnetic tape, magnetic disk storage, other magnetic storage devices, and any other media that can be used to store the desired information and that can be accessed by the computing system.","As used herein, the term \u201cmodule\u201d or \u201ccomponent\u201d can refer to software objects or routines that execute on the computing system. The different components, modules, engines, and services described herein may be implemented as objects or processes that execute on the computing system (e.g., as separate threads). While the system and methods described herein are preferably implemented in software, implementations in software and hardware or hardware are also possible and contemplated.","Computing system  may also contain communication channels  that allow the host to communicate with other systems and devices over, for example, network . Communication channels  are examples of communications media. Communications media typically embody computer-readable instructions, data structures, program modules, or other data in a modulated data signal such as a carrier wave or other transport mechanism and include any information-delivery media. By way of example, and not limitation, communications media include wired media, such as wired networks and direct-wired connections, and wireless media such as acoustic, radio, infrared, and other wireless media. The term computer-readable media as used herein includes both storage media and communications media.","The computing system  may also have input components  such as a keyboard, mouse, pen, a voice-input component, a touch-input device, and so forth. Output components  include screen displays, speakers, printer, etc., and rendering modules (often called \u201cadapters\u201d) for driving them. The computing system  has a power supply . All these components are well known in the art and need not be discussed at length here.",{"@attributes":{"id":"p-0038","num":"0037"},"figref":"FIG. 2","b":["200","201","202","201","100","201"]},"The service providing computing system  may have in its memory computer-executable instructions that when executed by the computing system  cause the computing system to instantiate several functional components in its system memory. If the computing system  is a cluster of computing systems, the instantiated functional components described hereinafter may be distributed.","For instance, as illustrated in , the service providing computing system  may instantiate a message handling component , a number of security token managers , a security token plug-in component , and a policy component . Each of these components may be one or more executable components. In addition, the illustrated components may be functionally distributed across multiple components. If the message handling computing system  were the computing system  of , the associated system memory may be, for example, memory , and the network  may be, for example, network .","The message handling component  is configured to receive network messages each associated with a security token, apply security to the received messages, authorize the requested service, and then potentially also to provide the requested service. For example, the message security component  may receive service request message  having associated security token A and service request B. A security token is \u201cassociated with\u201d a message in that it is either included in the message, or referenced in the message.","The security token managers  include any number of security token managers. In the illustrated case, the security token managers include five security token managers as represented by security token managers A through E amongst potentially many others as represented by the ellipses F. Each of the security token managers is configured to provide security services for network messages that correspond to a security token of a particular type. Such \u201csecurity services\u201d may include authenticating the identity of a message sender based on a security token provided to it, and\/or providing of a processable representation of a security token in response to receive another (e.g., XML) representation of the security token or a security token identifier. The message handling component may then rely on that authentication and\/or use the processable representation of the security token for further processing such as encryption\/decryption and\/or electronic signing. Security services may alternatively or in addition involve the actual encryption or decryption of the message, the electronic signing of at least a portion of the message, the verifying of electronic signatures and\/or the authorization itself.","As just mentioned, each of the security token managers provides security services for security tokens one particular type. For example, security token manager A may provide security services for messages having user name security tokens. Security token manager B may provide security services for Kerberos security tokens. Security token manager C may provide security services for X.509 certificate security tokens. Security token manager D may provide security services for SAML security tokens. Security token manager E may provide security services for XrML security tokens. Other security token managers F may be for SecurityContextToken, or DerivedKeyToken. In addition, there is a rapidly expanding number of security tokens becoming available for authentication, encryption, and signing. There are literally dozens of such security tokens now available. Each of the security token managers  interfaces with the message handling component  using a standardized message handling application program interface .","The number and variety of security token managers is expandable and contractible. In order to facilitate this, a security token plug-in component  registers new security token managers for new security token types with the message handling computing system . As example of this register is register . The new security token manager may include executable code for automatically notifying the security token manager plug-in component  of its identifier, along with the security token types that the new security token manager provides security services for.","In addition, when security token managers are to be removed (e.g., due to reduced or eliminated use of the corresponding security token type), the security plug-in manager  may deregister the security token manager from the message handler computing system  in one embodiment of the present invention.","In order to implement appropriate policy on messages having particular security tokens, a policy component  may also be provided. In general, policy involves rules regarding how a message having a particular security token is to be handled. For example, the policy may involve what authentication techniques are appropriate for a given security token, when encryption decryption algorithm is to be imposed for the security token, or what portions of the message are to be signed for a given security token. In addition, the policy may also govern how messages are to be treated in response to characteristics other than the security token. Furthermore, the policy may include an expression of conditions that should be satisfied before access to a service is granted. In accordance with the principles of the present invention, the expression of conditions may include, for example, an expression of acceptable roles associated with the particular security token that will permit access to a particular set of one or more services. One mechanism that permits expression of such a policy using eXtensible Markup Language (XML) is specified in the conventionally known WS-Security Policy specification. However, this specification expresses particular policy schemas only for particular security token types.","The remaining items illustrated in  will be described with respect to , which illustrates a method for receiving and processing a service request message using in the expandable security token message handling architecture of . As the method  of  may be performed in the environment of , the method  of  will be described with frequent reference to the network environment  of .","The processes associated with receiving and processing a service request will be described generally, and also with respect to a specific embodiment in which the service request message is or includes Simple Object Access Protocol (SOAP) envelopes. SOAP is a protocol that permits transport-independent delivery of network messages since the SOAP envelope may be encapsulated using a variety of different transport protocols such as, for example, MQ, Simple Mail Transport Protocol (SMTP), CORBA\/IIOP, or the like. The compatibility of the principles of the present invention with SOAP permits for the convenient end-to-end role-based authorization regardless of the security token type associated with the received service request message.","Referring to , the service request message is received over the network  (act ). For example, the received service request message may be represented in  by service request message . As previously mentioned, the service request message  includes a requested service B, which may be expressed in the service request message  or implied.","The service providing computing system  then accesses a security token associated with the received service request message (act ). As illustrated in , the service request message  may include the security token A. This embodiment will be referred to as the \u201csecurity token inclusion embodiment\u201d. Alternatively, however, the associated security token  may not be included in the service request message , but may instead be acquired from another source. This latter embodiment will be referred to as the \u201csecurity token reference embodiment\u201d.","The accessing of the associated security token may be accomplished in any manner. However, in the environment illustrated in , the message handling component  identifies a security token manager capable of providing a processable security token associated with the received service request message . To do so, the network handling component  deserializes and parses the received service request message  into its constituent components. For example, if the received network message  is a SOAP envelope, the constituent components may be an XML document that follows a predefined schema understood by the parser.","After this parsing, the message handling component  may then access the security token type in the security token inclusion embodiment, or an identifier representing the security token in the security token reference embodiment. The message handling component  may then use the register  to identify the corresponding security token manager for that security token type.","Alternatively, the message handling component may enumerate through the plurality of security token managers with information from the received network message until one of the security token managers indicates an ability to provide the processable security token associated with the received network message. This polling may be accomplished by placing calls through the message handling application program interface .","In one embodiment, the register  indicates a one-to-one correlation between security token type and the security token manager. However, a single security token manager may be capable of providing security services for more than one security token type.","The message handling component  then may place a call through the message handling application programming interface  to provide the security token identifier and\/or the security token itself to the appropriate security token manager . For the rest of this discussion, assume that the appropriate security token manager for the security token A associated with the received service request message  is security token manager A.","In response, the security token manager A uses the security token identifier to access a stored processable security token if a security token identifier is provided as in the security token reference embodiment. The processable security token may be, for example, an executable object having a standardized interface through which another component may place calls to the processable security token to access security services associated with the corresponding security token. An example of a situation in which the security token identifier is provided, rather than the security token, is when the security token was used to decrypt on the receiving end. In that case, the security token may be a secret key not to be transmitted in the open. Accordingly, a security token identifier, rather than the security token itself, is in the network message.","Alternatively or in addition, the security token itself may be provided to the security token manager A as in the security token inclusion embodiment. In that case, the security token manager A may generate the processable version of the security token. An example of a situation in which the security token would be provided to the security token manager may be, for example, when the security token is used to authenticate the message sender, and the security token had not previously been sent to the recipient. If the network message were, for example, a SOAP envelope, the security token may be a deserialized version of the XML element that corresponds to the security token. The security token manager may receive the deserialized security token as an input, and use that to generate the processable security token. Any method for converting a deserialized security token into a processable security token will suffice.","The service providing computing system  then identifies one or more roles that include the identity associated with the security token (act ), and then correlates the one or more identified roles with the accessed security token (act ). For example, the processable security token  may be an object that has associated properties and methods. When the processable security token  is created, one of the properties that may be populated may include an identity of the entity (e.g., the name of a person) associated with the security token. The security token manager may also provide methods that allow one to query to processable security token  for whether the security token is associated with an identity that corresponds to a particular role (e.g., the \u201cmanager\u201d role). The processable security token is then returned to the message handling component  using the message handling application program interface . An example of this processable security token is illustrated as processable security token  having a security token application program interface A.","The message handling component  may then use the processable security token  to perform any one of many possible security services for the security token. The security token application program interface A may then be used to access executable code in the processable security token  to authenticate the sender of the message, decrypt any encrypted portions of the network message, validate any electronically signed portions of the network message, or access any role information associated with the security token. Alternatively, the corresponding security token manager may provide any or all of these security services.","The message handling component  may cache processable security tokens that had been previously acquired from an appropriate security token manager. These cached processable security tokens are illustrated as cached processable security tokens A through D amongst potentially others as represented by the ellipses E. The processable security tokens might be cached for an appropriate duration such as for example, the duration of a session.","The message handling component  then may pass the received message (or a processed version of the received message) to a policy component . The policy component evaluates how to handle the received message using a policy object corresponding to the security token type of the security token corresponding to the received network message. The policy object may be an executable component that is also constructed by the appropriate security token manager. In one embodiment, an XML document expressing policy to be applied to the messages corresponding to a particular security token type is provided to the policy component . For example, an XML schema for expressing policy for a number of different security types is defined by WS-Security Policy. WS-Security Policy defines such schemas for user name and password, Kerberos, X.509 certificates, and the like.","The policy component  then provides the XML policy document to the appropriate security token manager through the message handling application program interface . The security token manager converts the XML policy document into an executable policy object, which exposes methods whereby the policy expressed in the XML policy document is applied. The policy component  then receives this processable policy component through the message handling application program interface . The policy objects correspond to security token types rather than the particular security token itself. An example of the policy object is illustrated in  as policy object .","The service providing computing system then authorizes the requested service using the one or more roles correlated with the security token that is associated with the service request message that requests the requested service (act ). In one example, the authorization conditions for a particular security token may be expressed in the policy object for that security token. For example, the policy object may include a metadata expression of the conditions that must be met in order to receive the requested service, with at least one of the conditions including an indication that the security token must be correlated with a particular role of the one or more roles. Alternatively, the conditions may be imposed by executing an executable object that imposes role-based conditions for access to the requested service. The service providing computing system may then optionally provide the requested service (act ) in response to a positive authorization. For example, the service providing computing system  may pass the service request B to an application program, which then services the request.","What has been described is a mechanism in which a role may be assigned to a security token regardless of its security token type. If another service request corresponding to a different security token type were to be received, the process described above may be repeated for that different security token type. Accordingly, role-based authorization is enabled in an end-to-end messaging that is transport and security-token type independent.","The present invention may be embodied in other specific forms without departing from its spirit or essential characteristics. The described embodiments are to be considered in all respects only as illustrative and not restrictive. The scope of the invention is, therefore, indicated by the appended claims rather than by the foregoing description. All changes, which come within the meaning and range of equivalency of the claims, are to be embraced within their scope."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["In order to describe the manner in which the above-recited and other advantages and features of the invention can be obtained, a more particular description of the invention briefly described above will be rendered by reference to specific embodiments thereof which are illustrated in the appended drawings. Understanding that these drawings depict only typical embodiments of the invention and are not therefore to be considered to be limiting of its scope, the invention will be described and explained with additional specificity and detail through the use of the accompanying drawings in which:",{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":["FIG. 3","FIG. 2"]}]},"DETDESC":[{},{}]}
