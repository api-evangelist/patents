---
title: Service definition document for providing blended services utilizing multiple service endpoints
abstract: A service definition document (SDD) framework is provided for defining blended services that utilize multiple service endpoints. The SDD framework can comprise a first category that defines a service endpoint representing a blended service, a second category that defines a plurality of service endpoints utilized by the blended service, and a third category that defines execution of the blended service. Blended services can be provided by creating a model of a blended service and saving a representation of the model of the blended service in a service definition document (SDD) framework. A blended service defined in a SDD framework can be executed by receiving the SDD and executing the blended service as defined by the SDD using a service execution environment (SEE).
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08504989&OS=08504989&RS=08504989
owner: Infosys Limited
number: 08504989
owner_city: Bangalore
owner_country: IN
publication_date: 20110517
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DETAILED DESCRIPTION OF EXEMPLARY EMBODIMENTS"],"p":["Developers are increasingly seeking new ways of using the various services available on networks such as the Internet. Service providers and other businesses (e.g., vertical businesses) publish software development kits and application programming interfaces for the services they provide so application developers can develop applications that utilize their services.","Currently, a developer can download a software development kit for using a service, such as a network service, from a specific service provider. Using the software development kit, the developer can develop a software application that uses the service from the service provider. Typically, the developer develops the software application locally and then transfers the software application to a sandbox (e.g., hosting or staging environment provided by the service provider) where the application can be tested. However, using such sandbox environments provided by the service provider can be difficult and time consuming for the developer. For example, the developer may have to register or pay to access the sandbox. Furthermore, the sandbox may not provide an interface that is as responsive or full-featured as the interface provided locally by the software development kit on the developer's machine. In addition, the sandbox may not provide sufficient or complete support for various testing needs, such as negative test scenarios.","In addition, software developers often desire to develop software applications that utilize multiple services provided by multiple different service providers or businesses. Currently, such a developer would have to use multiple different software development kits, one for each of the specific services the developer wants to use. Alternatively, such a developer would have to write code to separately access each of the services the developer wants to use.","Therefore, there exists ample opportunity for improvement in technologies related to providing a development and deployment environment within which a developer can easily and efficiently integrate information from different services provided by different service providers. This should ease the effort in developing blended applications that will create more value to end customers.","A variety of technologies related to using service definition documents for defining blended services that integrate multiple service endpoints are applied.","For example, a service definition document (SDD) framework is provided for defining blended service software applications that utilize multiple service endpoints. The SDD framework comprises a first category of the SDD that defines a service endpoint representing a blended service, a second category of the SDD that defines a plurality of service endpoints utilized by the blended service, and a third category of the SDD that defines execution of the blended service.","As another example, a method is provided for defining blended service software applications that utilize multiple service endpoints. The method comprises creating, using a graphical blended service creation environment, a model of a blended service and saving, using the graphical blended service creation environment, a representation of the model of the blended service as a service definition document (SDD) framework. The SDD framework comprises a first category of the SDD that defines a service endpoint representing a blended service, a second category of the SDD that defines a plurality of service endpoints utilized by the blended service, and a third category of the SDD that defines execution of the blended service.","As another example, a method is provided for executing blended services defined by a service definition document (SDD) framework using a service execution environment (SEE). The method comprises receiving a service definition document, where the SDD defines a blended service, where the blended service integrates information from a plurality of service endpoints, and where the plurality of service endpoints are a plurality of different service endpoints provided by a plurality of different service providers, and executing the blended service as defined by the SDD. Executing the blended service comprises connecting to the plurality of service endpoints, where the plurality of service endpoints are located remotely, via a communication network, from the SEE.","In some implementations, the service definition document (SDD) framework is defined in an extensible markup language (XML) structure.","The foregoing and other features and advantages of the invention will become more apparent from the following detailed description, which proceeds with reference to the accompanying figures.","The following description is directed to techniques and solutions for creating, testing, and deploying blended services that integrate multiple service endpoints. The various techniques and solutions can be used in combination or independently. Different embodiments can implement one or more of the described techniques and solutions.","Furthermore, the various techniques and solutions for creating, testing, and\/or deploying blended services that integrate multiple service endpoints can be used by various types of users including software developers and other types of users, such as those without software-development or programming experience (e.g., third party vendors, business analysts, service designers, innovators, or anyone else who wants to develop such services).","I. Example Service Endpoint","In the techniques and solutions described herein, service endpoints refer to computing services (e.g., services that are provided, at least in part, via computing devices) provided by service providers. A service endpoint represents a specific computing service provided by a specific service provider. For example, a specific service endpoint can be an online map service (the computing service) provided by Company A (the service provider). Another example of a specific service endpoint is a conference calling service provided by Company B. Further examples of service endpoints include a service that provides GPS coordinates for a mobile device, a service that provides calendar\/appointment scheduling, and a service that provides Short Message Service (SMS) communication.","Service endpoints are exposed by service providers to allow use of the service by outside users (e.g., individual users or other software\/services). In some instances, a user or other service connects to the service endpoint over a network such as the Internet.","II. Example Blended Service Creation Environment","In the techniques and solutions described herein, a blended service creation environment is provided for developing blended services that utilize services provided by service endpoints. In a specific implementation, a blended service creation environment comprises a software development kit, a graphical service creation environment, and one or more service endpoint simulators. The blended service creation environment can also be implemented as, or comprise, an integrated development environment (IDE) platform. In another specific implementation, various components of the blended service creation environment (e.g., the graphical service creation environment and the service endpoint simulators) are built upon an existing IDE platform, such as the Eclipse\u2122 IDE platform (Eclipse is a trademark of Eclipse Foundation, Inc.)","A blended service creation environment can be used to create blended services. For example, a business or other entity may want to create a blended service to realize new revenue streams.",{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 1","b":["100","100","110","110","110","100"]},"The blended service creation environment  also includes a graphical service creation environment . The graphical service creation environment  provides graphical user interface tools allowing users to create blended service software applications that integrate various service endpoints. Using the graphical service creation environment , a user can use GUI tools to model blended services (e.g., via drag-n-drop widgets). Using the graphical service creation environment  allows developers, or other types of users such as people without specialized software development experience, with different skill levels to develop blended services. For example, a non-programmer can develop blended services by selecting GUI widgets representing various service endpoints, dragging desired widgets into the creation environment, connecting them together, and configuring various parameters to select information from service endpoints and combine\/integrate the information to achieve the desired output. The graphical service creation environment  also supports programmer developers by providing access to a programming environment (e.g., Java, C++, etc.) for creating more complex solutions for integrating and processing the information obtained from the various service endpoints.","The blended service creation environment  also includes one or more service endpoint simulators . The service endpoint simulators  support simulation of various service endpoints. The service endpoint simulators  simulate the service endpoints locally, without the blended service creation environment  having to connect and communicate (e.g., via the Internet) with the actual service endpoints. The service endpoint simulators  can be configured (e.g., user configured) to simulate various test cases.","In some implementations, the service endpoint simulators  are implemented as independent software modules within the blended service creation environment . In a specific implementation, the independent software modules are servlets.","Using the service endpoint simulators , a user can develop a blended service that integrates a plurality of service endpoints and fully test the blended service locally with various test cases. When the user has finished building and testing the blended service, the user can deploy the blended service as a composite service (e.g., deploy the composite service using a service execution environment). Therefore, by using the blended service creation environment  with the service endpoint simulators , the user does not have to rely on a sandbox or staging area provided by the service providers.","In a specific implementation, the blended service creation environment  provides all the tools needed for the user to create and test blended services that utilize multiple service endpoints. The user does not have to download or use other tools, such as those provided by the multiple service endpoints. Everything the user needs to develop and test blended services is integrated into the blended service creation environment .","In a specific implementation, the blended service creation environment  also comprises a service execution engine, allowing users to develop and deploy services using one integrated environment.","III. Example Software Development Kit","In the techniques and solutions described herein, a software development kit (SDK) provides application programming interfaces (APIs) for developing software applications that utilize services provided by service endpoints. A software development kit can provide application programming interfaces for any number of programming languages (e.g., Java, C++, etc.). A software development kit can be provided as part of a blended service creation environment (e.g., blended service creation environment ).","In a specific implementation, the software development kit abstracts out the underlying implementation details and other activities for accessing services provided by service endpoints. For example, the software development kit can abstract the task of generating client stubs for web services. The SDK also takes care of authentication, authorization, and other security requirements necessary before accessing service endpoints.",{"@attributes":{"id":"p-0040","num":"0039"},"figref":"FIG. 2","b":["210","210","210","220","220","250"]},"In a specific implementation, the API layer  contains specialized packages with classes that can be instantiated and operations called through their public interfaces. The implementation of these classes makes use of the core layer  to realize the functionality or operations that the classes are exposing to the application programmer.","The second layer of the software development kit  is the core layer . The core layer  is the interface between the API layer  and the communication layer . The core layer  receives commands from the API layer , transforms those commands into appropriate calls for the specific service endpoints used, and uses the communication layer  to communicate with the service endpoints .","In a specific implementation, the core layer  contains three key components: specialized worker pools that contain worker classes (service access adapters) that perform service specific operations (e.g., each worker can be associated with its respective service endpoint), transformers that convert API inputs to out-bound formats for communication with the service endpoints, and a configuration manager that manages the configuration settings of the SDK, such as access to URLs\/URIs (Uniform Resource Locator\/Uniform Resource Identifier). The core layer  is also responsible for providing the respective worker from the worker pool for a given service endpoint. Well defined interfaces are used by the core layer  to facilitate future additions of worker pools and worker classes, and to add new service access capabilities through the SDK . The core layer  provides for both synchronous and asynchronous communication with the service endpoints. For enabling asynchronous communication the SDK  uses the observer\/notifier arrangement which provides notification when a response is received.","The third layer of the software development kit  is the communication layer . The communication layer  includes communication functionality for communicating with various service endpoints  when the blended service software application is executed or run (e.g., using a service execution environment).","In a specific implementation, the communication layer  is responsible for providing interfaces for communicating with the service endpoints . For example, the service endpoints  can use a RESTful (Representational State Transfer) HTTP\/s (Hypertext Transfer Protocol) connection or a protocol endpoint such as SMPP (Short Message Peer-to-Peer). The communication layer  defines the interfaces and protocol adapters needed for such communication and makes them pluggable into the SDK  framework.","In a specific implementation, a developer uses the APIs provided by the API layer  to perform the following operations:","1. Load a configuration for the SDK using a configuration manager interface","2. Instantiate the SDK using the loaded configuration","3. Obtain a specialized worker object for the particular service endpoint from the worker pool","4. Perform an operation using the worker object","IV. Example Graphical Service Creation Environment","In the techniques and solutions described herein, a graphical service creation environment (SCE) provides a graphical development environment for developing blended services (e.g., software applications) that utilize various service endpoints. A service creation environment can be provided as part of a blended service creation environment (e.g., blended service creation environment ).","In a specific implementation, the service creation environment includes graphical user interface (GUI) tools providing drag and drop functionality. The service creation environment also includes the capability to define and model service endpoint functionality, validate operation, re-use services, etc. For example, the SCE enables users to model composite services with the aid of GUI-based modeling components by dragging and dropping widgets representing actual services (e.g., in a visual programming environment).","Once a blended service has been created within a graphical service creation environment, it can be exported or saved as a service definition document. The service definition document can be read into the SCE later and used to modify the blended service. The service definition document can also be used by a service execution environment to execute (run) the blended service. The service definition document can also be registered with a service repository, which provides storage and version control functions. In some implementations, the service repository is remotely hosted and is accessed over the Internet from the SCE.","Using the graphical service creation environment, a user can create a new blended service (e.g., a composite or mashed-up service) that combines functionality from multiple existing service endpoints provided by different service providers (e.g., third parties). In some implementations, the user is not required to have any specific programming language knowledge as the SCE provides graphical drag-and-drop widgets for the various service endpoints. All the user has to do is use the GUI widgets to define the new blended service, set various properties and attributes, save the blended service as a SDD, and run the new service on the SEE.",{"@attributes":{"id":"p-0056","num":"0055"},"figref":"FIG. 3","b":["300","310","320"]},"Once blended services have been developed using the graphical service creation environment , they can be stored in the service repository . For example, the blended services can be stored in the service repository  as service definition documents. The service repository  stores the blended services, provides version control, and provides blended services to the service execution environment . Alternatively, blended services can be provided (e.g., as service definition documents) directly from the graphical service creation environment  to the service execution environment .","In order to execute or run the blended services, they are sent to the service execution environment . For example, the service execution environment  can obtain the blended services as service definition documents from the service repository . The service execution environment  executes the blended services, which can then be accessed by end users . For example, users  can access the blended services running on the service execution environment  over a network, such as the Internet. Various types of users  can access the blended services, such as mobile device users (e.g., using smart phones), desktop computer users, laptop\/notebook computer users, etc. In a specific implementation, user devices run an application, or other code, allowing the user device to access the blended services running on the service execution environment .","During execution of the blended services, the service execution environment  facilitates communication between the blended services and service endpoints (e.g., service endpoint A-C) utilized by the blended services. In a specific implementation, the service execution environment  comprises a number of service endpoint adapters, with each service endpoint adapter configured for communicating with a specific one of the service endpoints (e.g., a specific service endpoint adapter configured for sending and receiving information from service endpoint A, A).","V. Example Service Definition Document","In the techniques and solutions described herein, a service definition document (SDD) contains sufficient information for describing the operation of blended services and for executing (e.g., running) such blended services. For example, a service definition document can be created by a graphical service creation environment.","In a specific implementation, the service definition document is an XML-based file created by the service creation environment. The service definition document contains the definition of a blended service created by a user of the service creation environment. The service definition document is used to regenerate the graphical user interface (GUI) model of the blended service within the service creation environment. The service definition document is also used by the service execution environment to execute the blended service.","In a specific implementation, the service definition document is built on object modeling principles to represent services, attributes of services, sequencing information, type of flow (e.g., parallel, sequential, timed), service type (e.g., synchronous or asynchronous), etc. The SDD also defines the order in which multiple services are executed, the information sent\/received\/processed at various states, failure points, etc.",{"@attributes":{"id":"p-0064","num":"0063"},"figref":"FIG. 4","b":"410"},"At , the blended service is tested using one or more service endpoint simulators. The service endpoint simulators locally simulate (e.g., within a blended service creation environment) operation of the plurality of service endpoints.","At , a service definition document is created. The service definition document defines operation of the blended service. The service definition document can be used later to edit or modify the blended service (e.g., by reading the service definition document into the graphical service creation environment). The service definition document can also be used to execute the blended service (e.g., using a service execution environment).","The service definition document contains sufficient information to define operation of a blended service. For example, the SDD provides a framework for representing services, attributes of services, sequencing information, type of flow (e.g., parallel, sequential, timed), service type (e.g., synchronous or asynchronous), etc. The SDD framework also defines the order in which multiple services are executed, the information sent\/received\/processed at various states, failure points, etc.","The SDD framework can be defined and stored using different document structures. For example, the SDD can be defined in a markup language (e.g., in extensible markup language (XML) and stored in a file. The SDD can also be stored in a binary file, or any other type of document structure.","In a specific implementation, the SDD framework contains three general categories or sections of information, as follows.\n\n","The SDD format is scalable. For example, the SDD format can be used to define a blended service that utilizes multiple primary and\/or blended service endpoints. The created blended service can itself be utilized by another blended service. This provides flexibility and promotes re-use of blended services within other (e.g., larger) blended service environments.","The SDD can also be used to deploy the blended service endpoint defined by the SDD. For example, the SDD can be deployed via a service execution environment (e.g., as described below with reference to ). Once deployed, the blended service endpoint is available for use as a new service.","The SDD can be used to develop a client-side application. For example, the blended service defined by the SDD can be executed as an application (without being deployed).","Execution of the blended service using the SDD involves orchestration. In a specific implementation, adapters are used to communicate with each service endpoint utilized by the blended service. For example, a service execution environment can utilize adapters provided by SDKs by incorporating the SDKs into the service execution environment. Adapters can also be obtained from an external source, such as from a service provider (e.g., service owner) of the utilized service endpoint.","Execution of the blended service using the SDD can also involve the use of transformers. Transformers assist with converting data (e.g., data types or data formats) from one service to another service (e.g., transforming data output from a first service into a format compatible for input to a second service). For example, if Service A outputs a string of numbers and Service B (which will receive the output of Service A) needs a numeric input, then a transformer can be used that converts the string output of Service A into a numeric data type for input to Service B.",{"@attributes":{"id":"p-0075","num":"0077"},"figref":["FIG. 10","FIG. 3"],"b":["1000","1000"]},"The example blended service model  depicts the flow of the blended service from the start state to a fork. From the fork, two service endpoints are utilized in parallel, service endpoint A  and service endpoint B . Service endpoint A  could be a primary service endpoint or a blended service, as could service endpoint B . While two services are depicted in this example, in general any number of service endpoints can be utilized within the blended service model .","After processing of the service endpoints A and B ( and ) is complete, control flow is joined and control flow of the example blended service model  proceeds to the end state.","Within a graphical service creation environment, the blended service model  can be displayed and various parameters and configuration options set. For example, a service endpoint utilized by the blended service (e.g., ) can be selected and various parameters and configuration options set (e.g., input parameters, output parameters, worker classes, etc.). Similarly, the join state can be selected and other types of parameters can be set (e.g., receiving output from the utilized service endpoints, processing the received output, and generating results for a user of the blended service).","Below is an example SDD in an XML format according to a specific implementation. In the example XML SDD document below, a blended service is defined (LocationBasedServicebyEmail). The blended service utilizes two service endpoints. The first utilized service endpoint is a blended service (LocationBasedService), which in the example below is simulated by a service endpoint simulator. The second utilized service endpoint is a primary (basic) service (sendMail).",{"@attributes":{"id":"p-0080","num":"0082"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<?xml version=\u201c1.0\u201d encoding=\u201cUTF-8\u201d?>"]},{"entry":[{},"<definitions id=\u201cdefinitions\u201d"]},{"entry":[{},"\u2003\u2003xmlns=\u201cURL\u201d"]},{"entry":[{},"\u2003\u2003xmlns:xsi=\u201cURL\u201d"]},{"entry":[{},"\u2003\u2003targetNamespace=\u201cURL\u201d>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{}},"a. Location Based Service (LBS) is invoked using the SDK APIs, This service requires the users MSISDN number as the input and it will return a LBSResponse object which will have information about the MSISDN's latitude and longitude. The SDK APIs obtain the location information through an interface to the LBS Simulator.","b. Once the LBS service is executed, the information provided by its output object (latitude and longitude) are sent to the subscriber's email id.","c. (a) and (b) are used together to create the blended service namely \u2018LocationBasedServicebyEmail\u2019 which takes the MSISDN and subscriber's email id as input and the output is a mail received by the subscriber and the LBSResponse object. For illustration purposes, the id\/name of I\/O objects are kept the same. -->",{"@attributes":{"id":"p-0084","num":"0086"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2003\u2003<process"},{"entry":"\u2003\u2003\u2003\u2003id=\u201cLocationBasedServicebyEmail\u201d>"},{"entry":"<!--The service properties\/configuration can be defined as displayed below (the service"},{"entry":"QoS parameters such as repsonseTime, availability, etc., are defined here) -->"},{"entry":"\u2003\u2003\u2003\u2003<dataObject id=\u201cresponseTime\u201d itemSubjectRef=\u201cEmailDelivery\u201d \/>"},{"entry":"\u2003\u2003\u2003\u2003<dataObject id=\u201cavailability\u201d itemSubjectRef=\u201cSimulatorData\u201d \/>"},{"entry":"\u2003\u2003\u2003\u2003<!-- These are the service parameters required to operate this service -->"},{"entry":"\u2003\u2003\u2003\u2003<ioSpecification>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003<dataInput"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003itemSubjectRef=\u201cLBSServiceByEmail\u201d"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003id=\u201cLBSServiceByEmail\u201d \/>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003<inputSet>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003<dataInputRefs>UserMSISDN<\/dataInputRefs>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003<dataInputRefs>SubscriberEmailID<\/dataInputRefs>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003<\/inputSet>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003<outputSet>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003<dataInputRefs>LBSResponse<\/dataInputRefs>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003<\/outputSet>"},{"entry":"\u2003\u2003\u2003\u2003<\/ioSpecification>"},{"entry":"\u2003\u2003\u2003\u2003<startEvent id=\u201cStartLBSbyMail\u201d><\/startEvent>"},{"entry":"\u2003\u2003\u2003\u2003<!-- Services -->"},{"entry":"\u2003\u2003\u2003\u2003<!-- Service (1) : Get location Service -->"},{"entry":"\u2003\u2003\u2003\u2003<!-- The GetLocation Service is using the LBSWorker class provided by"},{"entry":"the SDK and internally invoking its API getLocationService( ) by passing the service"},{"entry":"parameter MSISDN -->"},{"entry":"\u2003\u2003\u2003\u2003<!-- LBS is depicted as a subprocess task only to indicate that any"},{"entry":"readily available service (both basic and blended) can be reused in this format. In this"},{"entry":"specific example, this subprocess is invoking only one service. In other scenarios, it"},{"entry":"could invoke one or more primary and\/or blended services. -->"},{"entry":"\u2003\u2003\u2003\u2003<subprocess"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003id=\u201cLocationBasedService\u201d name=\u201cLBS\u201d>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003<startEvent id=\u201cStartLBS\u201d>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003<ioSpecification>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003<dataInput"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003itemSubjectRef=\u201cMSISDN\u201d id=\u201cMSISDN\u201d \/>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003<dataOutput"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003itemSubjectRef=\u201cLBSOutput\u201d"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003id=\u201cLBSOutput\u201d \/>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003<!-- The data Input\/output associations"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003define the mapping between the object"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003provided to the service and the actual"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003representation of it in the service -->"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003<dataInputAssociation>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003<sourceRef>UserMSISDN<\/sourceRef>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003<targetRef>MSISDN<\/targetRef>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003<\/dataInputAssociation>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003<dataOutputAssociation>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003<sourceRef>LBSOutput<\/sourceRef>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003<targetRef>LBSResponse<\/targetRef>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003<\/dataOutputAssociation>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003<\/ioSpecification>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003<\/startEvent>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003<serviceTask"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003id=\u201cgetLocationService\u201d"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003name=\u201cLocation Based Services\u201d"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003class=\u201cSDKLBSWorkerClass\u201d><\/serviceTask>"},{"entry":"<!--The SDKLBSWorkerClass invokes the interface to the LBS Simulator and obtains"},{"entry":"the location based results for the provided MSISDN (see \u2018Interface to the Simulator\u2019"},{"entry":"below for the interface definition) -->"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003<endEvent id=\u201cEndLBS\u201d"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003name=\u201cEndLBS\u201d><\/endEvent>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003<sequenceFlow id=\u201cf1\u201d"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003sourceRef=\u201cStartLBS\u201d targetRef=\u201cgetLocationService\u201d \/>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003<sequenceFlow id=\u201cf2\u201d"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003sourceRef=\u201cgetLocationService\u201d"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003targetRef=\u201cEndLBS\u201d \/>"},{"entry":"\u2003\u2003\u2003\u2003<\/subprocess>"},{"entry":"\u2003\u2003\u2003\u2003<!-- Service (2): Email Service -->"},{"entry":"\u2003\u2003\u2003\u2003<!-- This is a primary Email service. This service is available as a web"},{"entry":"service and is hence invoked by a web service client SendMailWSWSClient -->"},{"entry":"\u2003\u2003\u2003\u2003<serviceTask id=\u201csendMail\u201d"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003name=\u201cSend LBS info by Email\u201d"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003class=\u201cSendMailWSWSClient\u201d>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003<ioSpecification>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003<dataInput"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003itemSubjectRef=\u201cMailLocation\u201d"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003id=\u201cMailLocation\u201d \/>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003<inputSet>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003<dataInputRefs>EmailId<\/dataInputRefs>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003<\/inputSet>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003<outputSet>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003<dataInputRefs>EmailResponse<\/dataInputRefs>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003<\/outputSet>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003<\/ioSpecification>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003<dataInputAssociation>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003<sourceRef>SubscriberEmailID<\/sourceRef>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003<targetRef>EmailId<\/targetRef>"},{"entry":"\u2003\u2003\u2003\u2003<\/serviceTask>"},{"entry":"\u2003\u2003\u2003\u2003<endEvent id=\u201cEndLBSbyEmail\u201d"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003name=\u201cEndLBSbyEmail\u201d><\/endEvent>"},{"entry":"<!-- The sequence flows are controlled by gateways. The gateways could be"},{"entry":"conditional, timer based, event based, etc. -->"},{"entry":"\u2003\u2003\u2003\u2003<parallelGateway"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003id=\u201cfork\u201d \/> <!-- diverge\/branches the sequence flow control -->"},{"entry":"\u2003\u2003\u2003\u2003<parallelGateway"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003id=\u201cjoin\u201d \/> <!-- converges\/merges the sequence flow control -->"},{"entry":"\u2003\u2003\u2003\u2003<itemDefinition"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003id=\u201cEmailDelivery\u201d isCollection=\u201cfalse\u201d"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003itemKind=\u201cInformation\u201d"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003structureRef=\u201ccom.company.EmailDelivery\u201d \/>"},{"entry":"\u2003\u2003\u2003\u2003<itemDefinition"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003id=\u201cSimulatorData\u201d isCollection=\u201cfalse\u201d"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003itemKind=\u201cPhysical\u201d"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003structureRef=\u201ccom.company.SimulatorData\u201d \/>"},{"entry":"\u2003\u2003\u2003\u2003<!-- Interface to the Simulator -->"},{"entry":"<!-- the output of the Location Based Service (LBSResponse) is populated through this"},{"entry":"interface to the LBSSimulator -->"},{"entry":"\u2003\u2003\u2003\u2003<itemDefinition"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003id=\u201cLBSResponse\u201d isCollection=\u201cfalse\u201d"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003itemKind=\u201cInformation\u201d"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003structureRef=\u201ccom.company.LBSClient\u201d"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003import=\u201chttp:\/\/readfromesbregistry\/registry\/LBSSimulator\u201d \/>"},{"entry":"\u2003\u2003\u2003\u2003<!-- Interface to the Email web-service -->"},{"entry":"<!-- the output of the SendMail service (EmailResponse) is populated by this web"},{"entry":"service client interface which invokes the Email web service available on the web -->"},{"entry":"\u2003\u2003\u2003\u2003<itemDefinition"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003id=\u201cEmailResponse\u201d isCollection=\u201cfalse\u201d"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003itemKind=\u201cInformation\u201d"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003structureRef=\u201ccom.company.EmailWSClient\u201d"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003import=\u201chttp:\/\/readfromesbregistry\/registry\/email.wsdl?\u201d \/>"},{"entry":"\u2003\u2003\u2003\u2003<sequenceFlow id=\u201cflow1\u201d"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003sourceRef=\u201cStartLBSbyMail\u201d"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003targetRef=\u201cfork\u201d \/>"},{"entry":"\u2003\u2003\u2003\u2003<sequenceFlow id=\u201cflow2\u201d"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003sourceRef=\u201cfork\u201d targetRef=\u201cLocationBasedService\u201d \/>"},{"entry":"\u2003\u2003\u2003\u2003<sequenceFlow id=\u201cflow3\u201d"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003sourceRef=\u201cfork\u201d targetRef=\u201csendMail\u201d \/>"},{"entry":"\u2003\u2003\u2003\u2003<sequenceFlow id=\u201cflow4\u201d"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003sourceRef=\u201cLocationBasedService\u201d"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003targetRef=\u201cjoin\u201d \/>"},{"entry":"\u2003\u2003\u2003\u2003<sequenceFlow id=\u201cflow5\u201d"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003sourceRef=\u201csendMail\u201d targetRef=\u201cjoin\u201d \/>"},{"entry":"\u2003\u2003\u2003\u2003<sequenceFlow id=\u201cflow6\u201d"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003sourceRef=\u201cjoin\u201d targetRef=\u201cEndLBSbyEmail\u201d \/>"},{"entry":"\u2003\u2003<\/process>"},{"entry":"<\/definitions>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"An example of the execution of the above example XML SDD is as follows. First, a user accesses the blended service (LocationBasedServicebyEmail). For example, the blended service could be hosted on the web using a service execution environment (e.g., as depicted in ). The user could access the blended service using an application running on the user's mobile device (e.g., mobile phone, tablet computer, etc.). The blended service obtains the user's device MSISDN and the user's email address.","Next, the LocationBasedService service is executed (e.g., by the service execution environment), which takes as input the user's MSISDN (the user's unique mobile device identifier) and returns the LBSResponse object which includes the location of the user's mobile device (e.g., latitude and longitude values, or other location-based information).","Next, the sendMail service is executed, which sends the location of the user's mobile device to the user's email address.","VI. Example Blended Service","In the techniques and solutions described herein, a blended service is a service that uses, at least in part, two or more service endpoints (e.g., third party service endpoints). A blended service is a composite service that utilizes (e.g., obtains information from) the two or more service endpoints. A blended service can be defined in terms of a service workflow. A blended service can be created by a graphical service creation environment. For example, a service creation environment can be used to develop a blended service that uses a plurality of service endpoints from remote and\/or local service providers.","A blended service can be defined by a service definition document. For example the service definition document can store the operations of the blended service (e.g., as a state diagram). The service definition document can be used to execute or run the blended service using a service execution environment.","A blended service can be defined in terms of a state machine model. A state machine model is a useful modeling concept for defining blended services. In a specific implementation, the following components are used to represent and define blended services for composite services:\n\n","In a specific implementation, a developer creates a blended service by downloading a blended service creation environment comprising a software development kit, service endpoint simulators, and graphical service creation environment. The developer creates blended service software applications using the blended service creation environment. The developer then tests the blended service software applications using the service endpoint simulators (e.g., by configuring the service endpoint simulators to test the blended services using various test cases). In order to deploy the blended services, the developer uploads them to a service provider that hosts a service execution environment.","In another implementation, a service execution environment can be provided for a developer to test blended services. In addition, third party vendors can use a service execution environment to deploy a blended service that uses a plurality of service endpoints.","VII. Example Service Repository","In the techniques and solutions described herein, a service repository can be used to store service definition documents for a community of SCE users. The service repository can include features comprising:\n\n","VIII. Example Service Endpoint Simulator","In the techniques and solutions described herein, a service endpoint simulator (or a collection of service endpoint simulators) can be used to simulate a service endpoint (or a collection of service endpoints). A service endpoint simulator for a specific service endpoint simulates the behavior of the actual service endpoint, without requiring any connection to, or communication with, the actual service endpoint. In some implementations, one or more simulators are provided with the service creation environment or blended service creation environment allowing a user to develop blended services and test them with various service endpoints using the simulators. Because no connection to the actual service endpoint is necessary for such testing, the user can develop blended services locally in a self-contained development environment (e.g., the blended service creation environment).","Using the simulator, the user can configure test cases (e.g., positive or negative test cases) to test blended services. The user can configure the simulator to return information to simulate various operating conditions (e.g., extreme conditions) of the actual service endpoint. In a specific implementation, the user can specify a group of test cases in a comma delimited file and upload the file for automated testing.","For example, consider a service endpoint that provides calendar and appointment services. Using a simulator, a user could configure the simulator to return a specific appointment in response to a get-next-appointment service request. For example, the user could configure the simulator to return values such as: appointment date: Oct. 25, 2010, appointment time: 11:00 AM, appointment description: meeting with marketing team, appointment alert: 15 minutes prior.",{"@attributes":{"id":"p-0100","num":"0115"},"figref":["FIG. 5","figure 510"],"b":["500","500","510"]},"In the example interface , there is an area for configuring various settings and\/or test cases . For the selected LBS service endpoint, the example interface displays an area for configuring test cases for the GetLocation operation of the LBS service endpoint . For example, a user can configure a test case that returns various values (including latitude, longitude, altitude, accuracy, etc.) for a specific mobile identifier (MSISDN). The user can also configure whether the result is a standard response or an error response. Once the user has entered the test case values, the user can create the test case using the \u201cadd\u201d button.","The example interface  includes an area displaying entered test cases . The test cases depicted in the test case area  are example test cases for testing the LBS service endpoint.","For example, a user using a graphical service creation environment can create a blended service that uses the LBS service endpoint (that uses the GetLocation operation of the LBS service endpoint to obtain location information for mobile devices). The blended service can then be tested using the test cases created with the service endpoint simulator interface . For example, according to the first test case, the blended service can be tested by receiving, by the service endpoint simulator for the LBS service endpoint, a request from the blended service for the MSISDN \u201c123456\u201d and returning, by the service endpoint simulator for the LBS service endpoint, a response comprising \u201c156.9\u201d latitude, \u201c56.0\u201d longitude, \u201c11.0\u201d altitude, and \u201c1\u201d accuracy.","Using the service endpoint simulators interface , a developer of blended services can locally test multiple different service endpoints without having to actually communicate with the service endpoints. This also allows the developer to test extreme cases (e.g., a full range of possible values) and error conditions. Furthermore, in some implementations, the developer does not have to be connected to a network (e.g., the Internet) to perform such testing as the service endpoint simulators can run locally within the blended service creation environment.","The service endpoint simulators provide advantages over other implementations, such as sandbox environments. For example, a sandbox environment may not provide the testing functionality (e.g., error and negative test cases) to test a developed application.",{"@attributes":{"id":"p-0106","num":"0121"},"figref":"FIG. 6","b":"610"},"At , the blended service is tested using a plurality of service endpoint simulators. The testing comprises executing the plurality of service endpoint simulators. The plurality of service endpoint simulators simulate communication with a corresponding plurality of actual service endpoints, without communicating with the actual service endpoints.","At , results of the testing of the blended service  are displayed. For example, results can comprise output from the blended service in response to communication with the service endpoint simulators. The results can comprise indications of whether the blended service responded correctly to various positive and\/or negative test cases run by the service endpoint simulators.","IX. Example Service Execution Environment","In the techniques and solutions described herein, a service execution environment (SEE) is used to execute or run blended service software applications. The service execution environment handles communication with the various service endpoints utilized by the blended services. In addition, the service execution environment provides access to end users who want to utilize the blended services.",{"@attributes":{"id":"p-0111","num":"0126"},"figref":"FIG. 7","b":["710","710","720","730","740"]},"The service request handler  acts as a gateway between users  and the blended service deployed on the SEE . For example, the service request handler  can handle communication with various types of users  (e.g., web clients, desktop software applications, mobile computing devices, etc.).","The orchestrator  executes or runs the blended service. In a specific implementation, the orchestrator  executes the blended service by running a service definition document defining the blended service.","The enterprise service bus  handles communications with the various service endpoints . For example, the enterprise service bus  can comprise adapters configured to communicate with the various service endpoints  (e.g., one adapter per service endpoint). If a new service endpoint is to be supported by the SEE , then a new adapter can be created. The enterprise service bus  can also transform information sent to, or received from, the various service endpoints  into a standard or common format (e.g., so that blended services see a standardized message format when communicating with the various service endpoints ).",{"@attributes":{"id":"p-0115","num":"0130"},"figref":"FIG. 8","b":["800","810"]},"At , the blended service is executed by the service execution environment. The blended service is executed by executing operations as defined by the service definition document. The blended service accesses information from a plurality of service endpoints.","At , during execution of the blended service, the service execution environment communicates with a plurality of service endpoints. The blended service uses information from the plurality of service endpoints in providing a composite service to end users.","For example, a blended service can be created that integrates information from a calendaring service endpoint and a location service endpoint. The blended service could obtain appointments from the calendaring service endpoint (provided by a first company or service provider) and obtain a current location of a person or vehicle from the location service endpoint (provided by a second company or service provider). Using these two service endpoints, the blended service can integrate the information and display, to an end user, a map (e.g., obtained from a third service endpoint) showing locations of future appointments in relation to the current location of the person or vehicle.","X. Example Computing Device","The techniques and solutions described herein can be performed by software and\/or hardware of a computing environment, such as a computing device. For example, computing devices include server computers, desktop computers, laptop computers, notebook computers, netbooks, tablet devices, mobile devices, and other types of computing devices (e.g., devices such as televisions, media players, or other types of entertainment devices that comprise computing capabilities such as audio\/video streaming capabilities and\/or network access capabilities). The techniques and solutions described herein can be performed in a cloud computing environment (e.g., comprising virtual machines and underlying infrastructure resources).",{"@attributes":{"id":"p-0121","num":"0136"},"figref":"FIG. 9","b":["900","900"]},"With reference to , the computing environment  includes at least one central processing unit  and memory . In , this most basic configuration  is included within a dashed line. The central processing unit  executes computer-executable instructions. In a multi-processing system, multiple processing units execute computer-executable instructions to increase processing power and as such, multiple processors can be running simultaneously. The memory  may be volatile memory (e.g., registers, cache, RAM), non-volatile memory (e.g., ROM, EEPROM, flash memory, etc.), or some combination of the two. The memory  stores software  that can, for example, implement the technologies described herein. A computing environment may have additional features. For example, the computing environment  includes storage , one or more input devices , one or more output devices , and one or more communication connections . An interconnection mechanism (not shown) such as a bus, a controller, or a network, interconnects the components of the computing environment . Typically, operating system software (not shown) provides an operating environment for other software executing in the computing environment , and coordinates activities of the components of the computing environment .","The storage  may be removable or non-removable, and includes magnetic disks, magnetic tapes or cassettes, CD-ROMs, CD-RWs, DVDs, or any other tangible storage medium which can be used to store information and which can be accessed within the computing environment . The storage  stores instructions for the software , which can implement technologies described herein.","The input device(s)  may be a touch input device, such as a keyboard, keypad, mouse, pen, or trackball, a voice input device, a scanning device, or another device, that provides input to the computing environment . For audio, the input device(s)  may be a sound card or similar device that accepts audio input in analog or digital form, or a CD-ROM reader that provides audio samples to the computing environment . The output device(s)  may be a display, printer, speaker, CD-writer, or another device that provides output from the computing environment .","The communication connection(s)  enable communication over a communication medium (e.g., a connecting network) to another computing entity. The communication medium conveys information such as computer-executable instructions, compressed graphics information, or other data in a modulated data signal.","XI. Example Alternatives and Variations","Although the operations of some of the disclosed methods are described in a particular, sequential order for convenient presentation, it should be understood that this manner of description encompasses rearrangement, unless a particular ordering is required by specific language set forth below. For example, operations described sequentially may in some cases be rearranged or performed concurrently. Moreover, for the sake of simplicity, the attached figures may not show the various ways in which the disclosed methods can be used in conjunction with other methods.","Any of the disclosed methods can be implemented as computer-executable instructions stored on one or more computer-readable media (tangible computer-readable storage media, such as one or more optical media discs, volatile memory components (such as DRAM or SRAM), or nonvolatile memory components (such as hard drives)) and executed on a computing device (e.g., any commercially available computer, including smart phones or other mobile devices that include computing hardware). By way of example, computer-readable media include memory  and\/or storage . As should be readily understood, the term computer-readable media does not include communication connections (e.g., ) such as modulated data signals.","Any of the computer-executable instructions for implementing the disclosed techniques as well as any data created and used during implementation of the disclosed embodiments can be stored on one or more computer-readable media. The computer-executable instructions can be part of, for example, a dedicated software application or a software application that is accessed or downloaded via a web browser or other software application (such as a remote computing application). Such software can be executed, for example, on a single local computer (e.g., any suitable commercially available computer) or in a network environment (e.g., via the Internet, a wide-area network, a local-area network, a client-server network (such as a cloud computing network), or other such network) using one or more network computers.","For clarity, only certain selected aspects of the software-based implementations are described. Other details that are well known in the art are omitted. For example, it should be understood that the disclosed technology is not limited to any specific computer language or program. For instance, the disclosed technology can be implemented by software written in C++, Java, Perl, JavaScript, Adobe Flash, or any other suitable programming language. Likewise, the disclosed technology is not limited to any particular computer or type of hardware. Certain details of suitable computers and hardware are well known and need not be set forth in detail in this disclosure. Furthermore, any of the software-based embodiments (comprising, for example, computer-executable instructions for causing a computing device to perform any of the disclosed methods) can be uploaded, downloaded, or remotely accessed through a suitable communication means. Such suitable communication means include, for example, the Internet, the World Wide Web, an intranet, software applications, cable (including fiber optic cable), magnetic communications, electromagnetic communications (including RF, microwave, and infrared communications), electronic communications, or other such communication means.","The disclosed methods, apparatus, and systems should not be construed as limiting in any way. Instead, the present disclosure is directed toward all novel and nonobvious features and aspects of the various disclosed embodiments, alone and in various combinations and subcombinations with one another. The disclosed methods, apparatus, and systems are not limited to any specific aspect or feature or combination thereof, nor do the disclosed embodiments require that any one or more specific advantages be present or problems be solved. I therefore claim as my invention all that comes within the scope and spirit of these claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 10"}]},"DETDESC":[{},{}]}
