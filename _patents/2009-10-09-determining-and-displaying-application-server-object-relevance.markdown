---
title: Determining and displaying application server object relevance
abstract: In embodiments, the number of references to an object which is deployed into an application server framework may be determined by examining metadata extracted from configuration data sources within a multi-tier application framework. In embodiments, an object relevance value based on the extracted number of references to an object may be associated with the object. In embodiments, the number of references extracted from a data source may be weighted using a weight factor that is associated with the data source. In embodiments, the number of references to a source object may be extracted by traversing a source inheritance hierarchy and parsing the objects within the hierarchy. In embodiments, an object relevance display of a set of objects may be generated based in part on object relevance values of the set of objects. In embodiments, an object relevance display may be a molecular display, a flash tag cloud, and/or a source tree hierarchy.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08266153&OS=08266153&RS=08266153
owner: Oracle International Corporation
number: 08266153
owner_city: Redwood Shores
owner_country: US
publication_date: 20091009
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["COPYRIGHT NOTICE","BACKGROUND","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS"],"p":["A portion of the disclosure of this patent document contains material which is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document, as it appears in the Patent and Trademark Office patent file or records, but otherwise reserves all copyright rights whatsoever.","A. Technical Field","The present invention pertains generally to data analysis and display, and relates more particularly to determining and displaying relevance of objects.","B. Background of the Invention","Modern enterprise software applications typically are deployed onto a multi-tier (n-tier) client-server software architecture in which presentation, data processing, and data storage are logically separate processes. The most common implementation of an n-tier software architecture is the 3-tier architecture, where application integration, co-ordination, and processing are performed in the middle tier by a software application server and associated software components. The application server and associated software components in the middle tier may be called middleware, and the multi-tier software architecture may be called an application server framework.","Although a variety of application server framework implementations exist, the most common implementations are Java-based J2EE (Java 2 Enterprise Edition) application server frameworks in which the software components are implemented in the Java language. The enterprise applications that are deployed into a J2EE application server framework are implemented as associated sets of Java objects that provide application programming interfaces (APIs) to other applications for access to their services (i.e., their execution of tasks and\/or functions). A deployed Java object can be considered to be a re-usable application building block that can participate in multiple types of associations to provide access to a variety of services.","A typical J2EE enterprise application framework hosts a large variety and number of deployed Java objects, and a key role of an application server is runtime management of deployed Java objects and the access to their interfaces. This runtime management is based on sets of configuration data files, which describe and define properties of the applications, objects, and interfaces that are currently deployed into the framework. Software application developers and enterprise architecture administrators are able to access framework runtime configuration data via displays provided by the application server administration console user interface (UI).","When a newly developed J2EE application is deployed, the associated objects and data components necessary to execute the application within the application framework are organized into a structured file hierarchy and packaged as a data archive. Examples of J2EE application data archives are JAR (Java ARchive), containing Java classes and associated data; WAR (Web ARchive), containing Java classes and other components, such as Java servlets and Java Server Pages (JSPs), used to execute web applications; and EAR (Enterprise ARchive), containing JAR and WAR files, used to execute enterprise applications. An application is deployed into an application server framework when its data archive is provided to the application server. The application server updates the framework configuration data to reflect the presence of the new application and enables runtime access to the application objects and interfaces.","Since application objects are meant to be re-usable, designing a new application will most likely include creating associations between at least some of the newly created application objects and objects that already are deployed into the framework. An application developer may use the application server UIs to identify the currently deployed objects, and the developer may make application design decisions based on which deployed objects are available for re-use. The choice of whether to re-use an object may be based on design usage patterns among the objects that already are deployed into the framework.","The application server UIs available to a developer typically display deployed objects alphabetically by name, deployment state (e.g., currently deployed), and\/or object type. Since each deployed application contains many objects and many applications are hosted on a typical enterprise application framework, there may be a very large number of currently deployed objects being hosted by the application server at any given time. Design usage patterns among the objects are difficult to identify based on such an object listing displays. Current runtime configuration data also would not include design usage pattern information, since it is derived from the configuration files associated with the Java Virtual Machine (JVM). Discovery of design usage pattern information enables an application developer to design and develop new applications with optimal speed and efficiency.","In embodiments, the number of references to an object which is deployed into an application server framework may be determined by examining metadata extracted from configuration data sources within a multi-tier application framework. In embodiments, an object relevance value based on the extracted number of references to an object may be associated with the object. In embodiments, the number of references extracted from a data source may be weighted using a weight factor that is associated with the data source. In embodiments, the number of references to a source object may be extracted by traversing a source inheritance hierarchy and parsing the objects within the hierarchy. In embodiments, an object relevance display of a set of objects may be generated based in part on object relevance values of the set of objects. In embodiments, an object relevance display may be a molecular display, a flash tag cloud, and\/or a source tree hierarchy.","In embodiments, a computer program product may provide a method for generating a stored relevance value of an object selected from a set of objects, and the method may comprise examining a set of metadata sources to determine a number of references to the object from each of the set of metadata sources; calculating a relevance value based on a number of references to the object determined from the set of metadata sources; and storing the relevance value in data storage. In embodiments, the set of objects is deployed to an application server framework, and the set of metadata sources are within the application server framework. In embodiments, the application server framework is a J2EE framework, and the set of metadata sources comprises database descriptors, application data framework (ADF) entity descriptors, runtime configuration descriptors, and source code.","In embodiments, the set of metadata sources is ranked according to one or more priority factors, and calculating the relevance value may comprise associating a weight factor with each of the set of metadata sources; calculating a weighted number of references for each of the metadata sources by multiplying the number of references determined from a metadata source by the weight factor associated with the metadata source; and calculating the relevance value based on a weighted number of references to the object determined from the set of metadata sources. In embodiments, the weight factor is retrieved from a stored weights template comprising the ranked set of metadata sources and their corresponding weight factors. In embodiments, the stored weights template is configurable.","In embodiments, the set of objects are source objects within an object inheritance hierarchy, the set of metadata sources are the source objects within the object inheritance hierarchy, and determining the number of references to a source object within the inheritance hierarchy comprises examining each of the source objects.","In embodiments, a computer processing system for generating an object relevance display may comprise an object ordering processor that receives an object relevance display request comprising a set of objects to display and, in response, retrieves a set of stored relevance values associated with the set of objects and sorts the set of objects according to their associated relevance values; and a display generator that generates the object relevance display in response to receiving the sorted set of objects. In embodiments, a relevance value is based on the number of references to an object, and the object relevance display comprises a set of icons representing the sorted set of objects and their associated relevance values.","In embodiments, the object relevance display request may further comprise a set of filtering parameters, and the object ordering processor selects a subset of objects to display based on the set of filtering parameters.","In embodiments, the set of object relevance display icons are graphic icons that indicate magnitudes of the relevance values corresponding to the sorted set of objects. In embodiments, magnitude of a relevance value is indicated by at least one attribute of a graphic object representing the object associated with the relevance value. In embodiments, HAS-A relationships among a subset of the displayed objects are identified by indicating connections between the graphic icons corresponding to the subset of the displayed objects.","In embodiments, the set of object relevance display icons are text icons that indicate magnitudes of the relevance values corresponding to the sorted set of objects, and the set of icons are displayed in a revolving cloud that is moved and rotated in response to interaction with a user.","In embodiments, the object relevance display is a tree hierarchy and the set of icons are text icons that are displayed in a list that is in descending order of magnitudes of the relevance values associated with the sorted set of objects.","In embodiments, a computer processing system for generating a stored relevance value associated with an object selected from a set of objects may comprise a metadata extractor that examines a set of metadata sources to determine a number of references to the object from each of the set of metadata sources; and a relevance value calculator that calculates a relevance value based on a number of references to the object determined from the set of metadata sources and stores the relevance value in data storage.","In embodiments, the metadata extractor may comprise an object entity parser that determines references to the object by analyzing metadata from an application data framework (ADF) entity; a descriptor parser that determines references to the object by analyzing metadata from runtime code configuration descriptors; a database parser that determines references to the object by analyzing metadata from a database configuration; and a source code parser that determines references to an object by analyzing metadata by parsing source code object definitions.","In embodiments, the set of metadata sources is ranked according to one or more priority factors, and calculating the relevance value may comprise associating a weight factor with each of the set of metadata sources; calculating a weighted number of references for each of the metadata sources by multiplying the number of references determined from a metadata source by the weight factor associated with the metadata source; and calculating the relevance value based on a weighted number of references to the object determined from the set of metadata sources. In embodiments, the weight factor is retrieved from a stored weights template comprising the ranked set of metadata sources and their corresponding weight factors.","In embodiments, the set of objects are source objects within an object inheritance hierarchy, and determining the number of references to a source object comprises examining the source objects within the object inheritance hierarchy.","Some features and advantages of the invention have been generally described in this summary section; however, additional features, advantages, and embodiments are presented herein or will be apparent to one of ordinary skill in the art in view of the drawings, specification, and claims hereof. Accordingly, it should be understood that the scope of the invention shall not be limited by the particular embodiments disclosed in this summary section.","In the following description, for purposes of explanation, specific details are set forth in order to provide an understanding of the invention. It will be apparent, however, to one skilled in the art that the invention can be practiced without these details. Furthermore, one skilled in the art will recognize that embodiments of the present invention, described below, may be implemented in a variety of ways, including software, hardware, or firmware, or combinations thereof. Accordingly, the figures described herein are illustrative of specific embodiments of the invention and are meant to avoid obscuring the invention.","Components, or modules, shown in block diagrams are illustrative of exemplary embodiments of the invention and are meant to avoid obscuring the invention. It shall also be understood that throughout this discussion that components may be described as separate functional units, which may comprise sub-units, but those skilled in the art will recognize that various components, or portions thereof, may be divided into separate components or may be integrated together, including integrated within a single system or component.","Furthermore, connections between components within the figures are not intended to be limited to direct connections. Rather, data between these components may be modified, re-formatted, or otherwise changed by intermediary components. Also, additional or fewer connections may be used. It shall also be noted that the terms \u201ccoupled\u201d or \u201ccommunicatively coupled\u201d shall be understood to include direct connections, indirect connections through one or more intermediary devices, and wireless connections.","Reference in the specification to \u201cone embodiment,\u201d \u201cpreferred embodiment,\u201d \u201can embodiment,\u201d or \u201cembodiments\u201d means that a particular feature, structure, characteristic, or function described in connection with the embodiment is included in at least one embodiment of the invention and may be in more than one embodiment. The appearances of the phrases \u201cin one embodiment,\u201d \u201cin an embodiment,\u201d or \u201cin embodiments\u201d in various places in the specification are not necessarily all referring to the same embodiment or embodiments.","The use of certain terms in various places in the specification is for illustration and should not be construed as limiting. Usage of the term \u201cservice\u201d is not limited to describing a single function; usage of the term also may refer to a grouping of related functions or functionality. Similarly, usage of the term \u201cresource\u201d is not limited to describing a single resource; the term also may be used to refer to a set of resources that may either be distributed or aggregated within a computing environment.","One specific application of the invention is its use in embodiments of J2EE application server frameworks. These embodiments will be described for illustrative purposes and not for limitation. Those skilled in the art shall recognize the general applicability of the present invention.","A. Object Relevance System",{"@attributes":{"id":"p-0047","num":"0046"},"figref":"FIG. 1A","b":["100","105","135","100","110","120"]},"In embodiments, a new J2EE application module contains a set of Java objects that are associated to perform a set of services within a J2EE application framework. For example, a Person class object may be a fundamental component of a Human Capital Management (HCM) enterprise application suite, and a J2EE application developer may create a Person Module that creates, retrieves, updates, and deletes Person object instances. To deploy a new application module to an application server within a J2EE application server framework, the application objects (e.g., Java classes, Java servlets, Java Server Pages (JSPs)), their associated data, and associated configuration data files are packaged into a structured file hierarchy within an archive file format such as JAR, WAR, or EAR. The archive file is provided to the application server, which integrates the application module components into the application server framework so that they may be accessed and executed. Typically, integrating the application module into a J2EE application server framework includes updating at least a subset of the application server framework configuration data files that are managed by the application server. In various embodiments, object relevance system  may process a selected set of objects in an application module as part of the application deployment process. In alternate embodiments, object relevance system  may process a selected set of objects in a deployed application in response to a task request issued from another process, such as an interactive development environment (IDE). Those skilled in the art will recognize that implementation choices of an object relevance system  are not critical to the invention.","1. Metadata Extraction","In embodiments, metadata extractor  parses application server framework configuration data files to examine metadata in order to extract the number of references to an input object  within a deployed application module. In embodiments, metadata describing the references to an object that is deployed into a three-tier application server framework may be extracted from data configuration files that are associated with all three tiers of the framework (e.g., the data storage tier, the middle tier, and the presentation tier). For illustration and not for limitation, Table 1 depicts exemplary metadata sources (from which references may be extracted) within three exemplary configuration data categories according to various embodiments of the invention. Those having skill in the art will recognize that a variety of configuration data categories and metadata sources exist, and that the choice of configuration data category and\/or metadata source is not critical to the invention.",{"@attributes":{"id":"p-0051","num":"0050"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 1"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Exemplary metadata sources for extracting"},{"entry":"references to a deployed object."}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Configuration",{}]},{"entry":[{},"Data Category","Metadata Source"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Database","Foreign Keys"]},{"entry":[{},{},"Views"]},{"entry":[{},{},"Stored Procedures"]},{"entry":[{},"ADF Entity","Enterprise Object (EO) Components"]},{"entry":[{},{},"Enterprise Object (EO) Associations"]},{"entry":[{},{},"View Object (VO) Components"]},{"entry":[{},{},"View Object (VO) View Links"]},{"entry":[{},"Descriptor","Web Service usage (e.g. WSDL)"]},{"entry":[{},{},"User Interface usage (e.g. JSP and JSF)"]},{"entry":[{},"Source Code","Web Service Implementation classes"]},{"entry":[{},{},"User Interface Implementation classes"]},{"entry":[{},{},"Plain source files"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}]}}},{"@attributes":{"id":"p-0052","num":"0051"},"figref":"FIG. 1B","b":["110","110"]},"In embodiments, object entity parser  determines references to an object by analyzing metadata from an application data framework (ADF) entity (i.e., an application object in an enterprise object framework (EOF)), such as enterprise object (EO) components, EO associations, and view object (VO) view links. It is well known to those skilled in the art that an enterprise application suite is associated with enterprise data that is stored within a database, and that there is a mapping between some of the application objects (components of an application object model) and their corresponding entities in the database schema. An EO is an application object that is mapped to a corresponding entity in a database schema. For example, the Person class object previously described within an HCM application is an EO that has a corresponding Person entity within the HCM database schema. An EO, which encapsulates business logic and rules, may be linked to one or more other EOs, and the relationship between two linked EOs is described as an EO Association object. A View Object (VO) is associated with an EO, and represents the information returned in response to a database query (i.e., the information associated with a database view). A VO may be linked to one or more other VOs, and the relationship between two linked VOs is described as a View Link object. Since EOFs are well known in the art, further discussion of EOF components is omitted here.","In embodiments, descriptor parser  determines references to an object by analyzing metadata from runtime code configuration descriptors, such as web service descriptors and user interface (UI) descriptors. It is well known in the art that web service interfaces are described declaratively using standard XML-based schemas, such as Web Services Description Language (WSDL), and that the interface descriptions are stored in data configuration files that are managed by an application server. A WSDL file is an exemplary web service interface descriptor. In embodiments, presentation of application data via a UI may be described declaratively using UI descriptors such as Java Server Pages (JSP) and Java Server Faces (JSF). It is well known to those skilled in the art that interface and UI presentation descriptions contain object references.","In embodiments, database parser  determines references to an object by analyzing metadata from a database configuration. In embodiments, references to an EO may be determined from database metadata such as the set of foreign keys associated with a relational database entity corresponding to the EO, view definitions that reference the relational database entity, and the text definition of stored procedures defined in the database which contain the relational database entity.","In embodiments, source code parser  determines references to other objects by parsing source code object definitions. Within a source code object definition file, references to other objects may be determined from direct references to other objects as variables as well as from class declarations (i.e., which class or classes the file extends). For example, the name of a base class (i.e., the parent class of the class being defined) follows the keyword extends in a Java class definition. Thus, the base class Person can be determined from parsing the class definition of its subclass Employee Java source file, which may state \u201cpublic class Employee extends Person\u201d. References to other objects also may be found within the \u201cimport\u201d section of a Java class source file or the \u201cinclude\u201d section of a C++ source file.","2. Object Relevance Calculation","In embodiments, relevance value calculator  receives input data comprising a set of extracted references to a deployed object , and identification of the corresponding set of metadata sources from which the references were extracted, and uses the input data to calculate a relevance value for that object. In embodiments, the input data may be received from an embodiment of metadata extractor .","As previously described, the set of metadata sources may be a set of configuration data within an application framework. In embodiments, the set of metadata sources may be prioritized and ranked, and each metadata source may be weighted (i.e., assigned a weight factor) based on its position within the rank order. In embodiments, a metadata source having a higher priority may be assigned a greater weight factor. In embodiments, the number of references extracted from a metadata source may be weighted by multiplying it by the weight factor that has been associated with the metadata source. In embodiments, the weight factor may be retrieved from a stored weights template  comprising a set of metadata sources and their associated weight factors. In embodiments, a default weights template  may be provided with an object relevance system  implementation, and, in alternate embodiments, the number, ranking, and\/or associated weight factors of metadata sources within a weights template  may be configured and\/or re-configured via an interface to the object relevance system  implementation. Table 2 depicts exemplary weight factors which may be associated with the metadata sources depicted in Table 1.",{"@attributes":{"id":"p-0060","num":"0059"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 2"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Exemplary weight factors associated"},{"entry":"with a set of metadata sources."}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"126pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"35pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Configuration",{},{}]},{"entry":["Data Category","Metadata Source","Weight"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"126pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"35pt","align":"char","char":"."}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Database","Foreign Keys","20"]},{"entry":[{},"Views","10"]},{"entry":[{},"Stored Procedures","5"]},{"entry":["ADF Entity","Enterprise Object (EO) Components","25"]},{"entry":[{},"Enterprise Object (EO) Associations","20"]},{"entry":[{},"View Object (VO) Components","25"]},{"entry":[{},"View Object (VO) View Links","20"]},{"entry":["Descriptor","Web Service usage (e.g. WSDL)","10"]},{"entry":[{},"User Interface usage (e.g. JSP and JSF)","10"]},{"entry":["Source Code","Web Service Implementation classes","5"]},{"entry":[{},"User Interface Implementation classes","5"]},{"entry":[{},"Plain source files","5"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"In embodiments, the relevance value Rassociated with an object  is calculated as the sum of the references to the object that were extracted from a set of n metadata sources, according to the equation:\n\n=ref+ref+ . . . +ref\u2003\u2003(1)\n","where refis the number of references extracted from the metadata source m, refis the number of references extracted from the metadata source m, and refis the number of references extracted from the nmetadata source.","In various embodiments in which configuration data sources are weighted, the number of references extracted from a metadata source may be multiplied by a weight factor \u03b1 associated with the metadata source (such as those depicted in Table 2), and the relevance value Rassociated with an object  may be calculated as the sum of the references to the object that were extracted from a set of n metadata sources according to the equation:\n\n=\u03b1ref+\u03b1ref+ . . . +\u03b1ref\u2003\u2003(2)\n","where \u03b1is the weight factor associated with the metadata source m, \u03b1is the weight factor associated with the metadata source m, and \u03b1is the weight factor associated with the nmetadata source.","It shall be noted that the calculation of the relevance value may take other forms including, without limitation, non-linear calculations.","3. Object Relevance Storage","In embodiments, the relevance value associated with an object may be stored in data storage , such as a database or data file system deployed on a storage medium, so that it is available for further processing and\/or display. In embodiments, the relationship information among objects (e.g., HAS-A and IS-A relationships) also may be stored.","B. Object Relevance Display System",{"@attributes":{"id":"p-0069","num":"0068"},"figref":"FIG. 2","b":["200","225","205","200","210","220","200","100"]},"In embodiments, an object relevance display request  may be received from a process within an enterprise software platform, such as an application server or an integrated development environment (IDE). In embodiments, the display request  specifies a set of one or more objects to be displayed. In various embodiments, the display request  may further specify a set of one or more filtering parameters which may be used to select a subset of objects of interest from the specified set of objects. As is well known in the art, there potentially are thousands of objects in an enterprise level application, and many of these objects are low level objects that do not have a bearing on identification of higher level application objects that may be available for re-use in application development. For example, there are many basic Java classes that are used throughout all Java applications (e.g., java.lang.String class in the java.lang package included within the J2SE (Java 2 Software Environment) class libraries supplied by Sun Microsystems, Inc. and used as the foundation for Java applications). It would be difficult for an application developer to discover relevant higher level application objects within an object relevance display that also includes the many references to such low level objects.","In embodiments, object ordering processor  retrieves a set of relevance values associated with the set of objects to be displayed from object relevance storage , and ranks and\/or sorts the set of objects based on their associated relevance values. In embodiments, display generator  generates an object relevance display based on the ranked and\/or sorted set of objects, their associated object relationship values, and their associated object relationship data. In embodiments, the object relationship data associated with the objects (such as HAS-A and IS-A relationships) may be retrieved from object relevance storage .","It is well known in the art that developing a new application for a J2EE application framework typically can involve re-using Java objects that already have been deployed into the J2EE application framework. For example, in developing the Person application module previously described, an application developer may create, delete, and\/or modify instances of the Person class object, which already has been created and deployed within the HCM application framework. J2EE application objects are designed to be re-usable application building blocks, so, rather than define new objects, it is likely that the Person application developer also will create, delete, and\/or modify instances of other deployed objects that are associated with the Person class object, such as other EOs, VOs, and their association objects. Since a typical enterprise application framework contains a very large number of deployed objects, discovering the subset of deployed objects available for re-use in a particular application becomes a difficult task for an application developer whose typical access to deployed objects is via an application server display of runtime data (e.g., all currently deployed objects listed alphabetically by name). Using such a display, an application developer could identify a deployed object possessing certain attributes only if the developer knew the object name and attributes beforehand. In contrast, an object relevance display , which indicates the relevance of each object based on the number of references to it as well as its relationships to other deployed objects, enables a developer to discover the most relevant deployed objects available for re-use.","In embodiments, an object within an object relevance display  may be represented by a graphic and\/or text icon. In embodiments, an object relevance display  may be interactive, enabling a user to access additional information about an object by interacting with the icon representing the object. For example, information about an object's associated relevance value may be displayed in response to a user selecting the object icon using a mouse right button, and information about the object's attributes may be displayed in response to the user selecting the object icon using a mouse left button.","In various embodiments, an object relevance display may be a \u201cflash tag cloud\u201d display, in which text icons are displayed in a revolving cloud that can be moved and rotated in response to a user's interaction with the display. The relevance values of the objects may be indicated by displaying the object text icons in various combinations of font size, color, and\/or boldness.","1. Molecular Object Relevance Display",{"@attributes":{"id":"p-0076","num":"0075"},"figref":"FIGS. 3","b":["4","5","225"]},{"@attributes":{"id":"p-0077","num":"0076"},"figref":"FIG. 3"},"In the illustrated display, class Person  is associated (i.e., is linked via a HAS-A relationship) with an Email address , a location Address , a Name , and a Job . Class Job  is associated with a Department , which in turn is associated with a Location , which in turn is associated with an Address . In embodiments, the displayed object \u201cmolecules\u201d represent weighted objects, and the size of an object molecule icon is proportional to the number of references to the object (the object's associated relevance value). In the exemplary display view, the Person  and Job  \u201cmolecule\u201d icons have the largest diameters, and thus the display enables these two objects to be identified as the deployed objects which have the greatest number of references.",{"@attributes":{"id":"p-0079","num":"0078"},"figref":"FIG. 4","b":["410","310","410","310","310","410"]},{"@attributes":{"id":"p-0080","num":"0079"},"figref":["FIG. 5","FIG. 5"],"b":["510","520","530","310","312","314","316","320","322","324","326","510"]},"Those skilled in the art will recognize that a variety of design implementations, (such as the use of shape, pattern, and color) for a graphical and\/or text display exist, and that the choice of object relevance display design implementation is not critical to the invention.","2. Source Tree Object Relevance Display","As previously described, embodiments of the present invention may enable a developer to make a rapid and efficient identification of deployed objects that are available for re-use in a J2EE application. It is well known in the art that J2EE application development commonly is performed by using a Java interactive development environment (IDE), such as JDeveloper from Oracle International Corporation of Redwood Shores, Calif. An IDE contains an integrated set of development tools such as a code editor and graphical object management tools. A developer using an IDE can create, delete, or edit an application source code object by accessing development tool user interfaces (UIs) provided by the IDE.",{"@attributes":{"id":"p-0084","num":"0083"},"figref":["FIG. 6","FIG. 6"],"b":["645","610","620"]},{"@attributes":{"id":"p-0085","num":"0084"},"figref":["FIG. 7","FIG. 6","FIG. 6","FIG. 6"],"b":["745","620","610","620"]},"C. Methods for Calculating an Object Relevance Value","The following sections describe embodiments of methods for computing a relevance value for an object. The method embodiments may be implemented in embodiments of object relevance system .","1. A First Embodiment of a Method for Calculating a Relevance Value for a Deployed Object",{"@attributes":{"id":"p-0089","num":"0088"},"figref":"FIG. 8","b":"800"},"As previously described, a J2EE application module contains a set of Java objects that are associated to perform a set of services within a J2EE application framework. To deploy a new application module to an application server within a J2EE application server framework, the application server is provided with an archive file (such as a JAR, WAR, or EAR) containing the application objects, their associated data, and associated configuration data files. The application server then integrates the application module components into the application server framework so that they may be accessed and executed. Typically, integrating an application module into a J2EE application server framework includes updating at least a subset of the application server framework configuration data files that are managed by the application server.","A typical application server manages a large number of deployed application objects, and provides a display of the deployed objects via the application server administrator console user interface. This display focuses on runtime characteristics of the objects (such as how many object instances are deployed, deployment date, and deployment status), and deployed objects are listed alphabetically by name. As previously discussed, an application server administrator console display of deployed objects does not enable a J2EE application developer to discover deployed objects available for reuse during development of new application modules, because the developer is required to know an object's name and characteristics in order to identify it in the list of deployed objects.","In embodiments, the relevance of a selected  deployed application object may be determined by calculating the number of references to the object . In embodiments, references to the object  may be determined by examining  a set of metadata sources, such as application framework data configuration files. In embodiments, the configuration data files may be associated with one or more tiers in a multi-tier application framework. Table 1 depicts exemplary metadata sources (from which references may be extracted) within three exemplary configuration data categories according to various embodiments of the invention.","In embodiments, a relevance value associated with the object  is calculated  as the sum of the references to the object that were extracted from each of the set of metadata sources (See Equation 1). In embodiments, the relevance value associated with the object is be stored  in data storage , such as a database or data file system deployed on a storage medium, so that it is available for further processing and\/or display. In various embodiments, relationship data (such as HAS-A relationships and IS-A relationships) associated with the object may be derived from source files by parsing the class member variables (HAS-A) and\/or the inheritance declaration for the class (IS-A), and this information also may be stored in data storage .","2. A Second Embodiment of a Method for Calculating a Relevance Value for a Deployed Object",{"@attributes":{"id":"p-0095","num":"0094"},"figref":"FIG. 9","b":"900"},"In embodiments, references to a selected  deployed object may be determined by examining  each of a set of metadata sources, such as application framework data configuration files, in the same way as described for steps  and  in method . In various embodiments, a weight factor associated with each of the set of metadata sources may be retrieved  from a weight template  comprising a set of ranked metadata sources and their associated weight factors. The number of references determined for each of the set of metadata sources may be weighted  by multiplying by the weight factor associated with the corresponding metadata source.","In embodiments, a relevance value associated with the object  is calculated  as the sum of the weighted references to the object that were extracted from each of the set of metadata sources (See Equation 2). In embodiments, at least the relevance value associated with the object is be stored  in data storage  in the same way as described for step  in method .","3. Method for Calculating a Relevance Value for a Source Object",{"@attributes":{"id":"p-0099","num":"0098"},"figref":"FIG. 10","b":"1000"},"As previously described, J2EE application development commonly is performed by creating, editing, and\/or deleting Java source objects. As is well known to those skilled in the art, Java source objects are class objects that are organized into an inheritance hierarchy in which class Object is the root, and where each class within the hierarchy has one superclass and zero or more subclasses.","In embodiments, an object relevance value for a selected source object within an inheritance hierarchy may be based on the number of references to the object from other objects within the hierarchy. In embodiments, each object within the inheritance hierarchy may be parsed to determine how many references to the selected object it contains, and the relevance value associated with the selected object is the total number of references to the object from all of the objects in the hierarchy.","In various embodiments, the number of references to each object within an inheritance hierarchy may be determined by traversing the tree and parsing each object to determine the references it contains. In embodiments, the inheritance hierarchy may be traversed by selecting  a source object based on its position within the inheritance hierarchy. In embodiments, the initially selected object may be the root object of the inheritance hierarchy.","In various embodiments, all objects in the inheritance hierarchy may be assigned an initial relevance value of zero.","In embodiments, a source object may be parsed  in order to determine if it contains references to at least one other source object within the hierarchy. If the object contains references to one or more objects , the object relevance value of each referenced object is increased by a factor based on the number of references to the object. In various embodiments, the object relevance value represents a count of the number of references to an object, and the count is incremented each time a reference to the object is identified. Thus, for example, the Person class in an HCM application may be extended by Employee, ContingentWorker, and Contractor, and the Person object relevance value after examining those subclasses of Person would be three.","If there are remaining source objects in the hierarchy that have not been parsed, a next source object is selected  based on a path through the inheritance hierarchy determined by a traversal algorithm. Exemplary traversal algorithms include breadth-first (search all nodes on a level) and depth-first (search all child nodes until you reach a leaf node). Those skilled in the art will recognize that a variety of algorithms exist for traversing an inheritance hierarchy, and that the choice of algorithm is not critical to the invention. The next source object identified by the traversal algorithm is selected for analysis until all source objects within the inheritance hierarchy have been parsed . In embodiments, at least the relevance values associated with each of the objects are stored  in data storage , such as a database or data file system deployed on a storage medium, so that they are available for further processing and\/or display.","D. Method for Generating an Object Relevance Display",{"@attributes":{"id":"p-0107","num":"0106"},"figref":"FIG. 11","b":["1100","1100","200"]},"In embodiments, an object relevance display request  may be received  from a process within an enterprise software platform, such as an application server or an integrated development environment (IDE). In embodiments, the display request  specifies a set of objects to be displayed. In embodiments, the relevance values associated with the specified set of objects may be retrieved  from data storage .","In embodiments, the retrieved set of objects may be ordered (ranked and\/or sorted)  based on the size of their associated relevance values. In embodiments, an object relevance display is generated  using the ranked and\/or sorted set of objects and their associated relevance values. In embodiments, the object relevance display also may be based on object relationship data associated with the set of objects (such as HAS-A relationships and IS-A relationships) that also may be retrieved from data storage. For example, in various embodiments, a generated object relevance display may be a molecular display (, , and ) and\/or a hierarchical source tree display ().","E. Computing System Implementations","It shall be noted that the present invention may be implemented in any instruction-execution\/computing device or system capable of processing data. The present invention may also be implemented into other computing devices and systems. Furthermore, aspects of the present invention may be implemented in a wide variety of ways including software, hardware, firmware, or combinations thereof. For example, the functions to practice various aspects of the present invention may be performed by components that are implemented in a wide variety of ways including discrete logic components, one or more application specific integrated circuits (ASICs), and\/or program-controlled processors. It shall be noted that the manner in which these items are implemented is not critical to the present invention.",{"@attributes":{"id":"p-0112","num":"0111"},"figref":["FIG. 12","FIG. 12"],"b":["1200","1202","1202","1204","1202","1204","1204","1202","1204","1206","1202","1204","1202","1200"]},"An addressable memory , coupled to processor , may be used to store data and software instructions to be executed by processor . Memory  may be, for example, firmware, read only memory (ROM), flash memory, non-volatile random access memory (NVRAM), random access memory (RAM), or any combination thereof. In one embodiment, memory  stores a number of software objects, otherwise known as services, utilities, components, or modules. One skilled in the art will also recognize that storage  and memory  may be the same items and function in both capacities. In an embodiment, one or more of the components of , B, and  may be modules stored in memory ,  and executed by processor .","In an embodiment, computing system  provides the ability to communicate with other devices, other networks, or both. Computing system  may include one or more network interfaces or adapters ,  to communicatively couple computing system  to other networks and devices. For example, computing system  may include a network interface , a communications port , or both, each of which are communicatively coupled to processor , and which may be used to couple computing system  to other computer systems, networks, and devices.","In an embodiment, computing system  may include one or more output devices , coupled to processor , to facilitate displaying graphics and text. Output devices  may include, but are not limited to, a display, LCD screen, CRT monitor, printer, touch screen, or other device for displaying information. Computing system  may also include a graphics adapter (not shown) to assist in displaying information or images on output device .","One or more input devices , coupled to processor , may be used to facilitate user input. Input device  may include, but are not limited to, a pointing device, such as a mouse, trackball, or touchpad, and may also include a keyboard or keypad to input data or instructions into computing system .","In an embodiment, computing system  may receive input, whether through communications port , network interface , stored data in memory \/, or through an input device , from a scanner, copier, facsimile machine, or other computing device.","In embodiments, computing system  may include one or more databases, some of which may store data used and\/or generated by programs or applications. In embodiments, one or more databases may be located on one or more storage devices  resident within a computing system . In alternate embodiments, one or more databases may be remote (i.e. not local to the computing system ) and share a network  connection with the computing system  via its network interface . In various embodiments, a database may be a relational database, such as an Oracle database, that is adapted to store, update, and retrieve data in response to SQL-formatted commands.","One skilled in the art will recognize no computing system is critical to the practice of the present invention. One skilled in the art will also recognize that a number of the elements described above may be physically and\/or functionally separated into sub-modules or combined together.","It shall be noted that embodiments of the present invention may further relate to computer products with a computer-readable medium that have computer code thereon for performing various computer-implemented operations. The media and computer code may be those specially designed and constructed for the purposes of the present invention, or they may be of the kind known or available to those having skill in the relevant arts. Examples of computer-readable media include, but are not limited to: magnetic media such as hard disks, floppy disks, and magnetic tape; optical media such as CD-ROMs and holographic devices; magneto-optical media; and hardware devices that are specially configured to store or to store and execute program code, such as application specific integrated circuits (ASICs), programmable logic devices (PLDs), flash memory devices, and ROM and RAM devices. Examples of computer code include machine code, such as produced by a compiler, and files containing higher level code that are executed by a computer using an interpreter. Embodiments of the present invention may be implemented in whole or in part as machine-executable instructions that may be in program modules that are executed by a computer. Examples of program modules include libraries, programs, routines, objects, components, and data structures. In distributed computing environments, program modules may be physically located in settings that are local, remote, or both.","While the invention is susceptible to various modifications and alternative forms, specific examples thereof have been shown in the drawings and are herein described in detail. It should be understood, however, that the invention is not to be limited to the particular forms disclosed, but to the contrary, the invention is to cover all modifications, equivalents, and alternatives falling within the scope of the appended claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["Reference will be made to embodiments of the invention, examples of which may be illustrated in the accompanying figures. These figures are intended to be illustrative, not limiting. Although the invention is generally described in the context of these embodiments, it should be understood that it is not intended to limit the scope of the invention to these particular embodiments.",{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 1A"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 1B"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0038","num":"0037"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0039","num":"0038"},"figref":"FIG. 12"}]},"DETDESC":[{},{}]}
