---
title: Method and system for transparently directing graphics processing to a graphical processing unit (GPU) of a multi-GPU system
abstract: A method for transparently directing data in a multi-GPU system. A driver application receives a first plurality of graphics commands from a first graphics application and selects a first GPU from the multi-GPU system to exclusively process the first plurality of graphics commands. The first plurality of graphics commands is transmitted to the first GPU for processing and producing a first plurality of renderable data. The first plurality of renderable data is stored in a first frame buffer associated with the first GPU. A second plurality of graphics commands is received from a second graphics application and a second GPU is selected to exclusively process the second plurality of graphics commands. The second GPU processing the second plurality of graphics commands produces a second plurality of renderable data. The second plurality of renderable data is stored in a second frame buffer associated with the second GPU.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09041719&OS=09041719&RS=09041719
owner: NVIDIA CORPORATION
number: 09041719
owner_city: Santa Clara
owner_country: US
publication_date: 20091203
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND ART","SUMMARY","DETAILED DESCRIPTION","Method and System for Transparently Directing Graphics Processing to a Graphical Processing Unit (GPU) of a Multi-GPU System"],"p":["The embodiments of the present invention relate to transparently directing graphics processing work to a graphical processing unit (GPU) of a multi-GPU system.","Multi-GPU systems have become prevalent in the industry. In general, multi-GPU systems may be used to accelerate processing of graphical applications.","One conventional system uses a multi-GPU system to accelerate processing of a single graphics application. For example, a display driver may be configured to redirect a 3D application programming interface (API) workload to the multi-GPU system in either per frame alternating pattern or intra-frame alternating pattern or a mixture of the two. In this case, different frames of the graphics application may be assigned to different GPUs to increase performance.","Unfortunately using a multi-GPU system to accelerate processing of a single graphical application according to the above conventional system consumes all available GPU resources of the multi-GPU system. As a result, no additional graphics application may utilize the resources of the multi-GPU during the time which the single graphical application is utilizing the multi-GPU system. Alternatively, running an additional graphical application simultaneously with the single graphical application may be allowed but will degrade the overall performance because the available resources of the multi-GPU system will be time shared between the multiple graphics applications.","Other conventional systems have been developed to utilize a multi-GPU system in order to accelerate processing of graphical applications. For example, a graphics application may use a special middleware graphical library to split up its command stream for transmission to an appropriate GPU of the multi-GPU system for processing.","Unfortunately, a graphics application that directs its command stream to a particular GPU needs to be aware of this GPU assignment and will fail to work retroactively for existing graphical applications that are otherwise unaware of any particular GPU assignment. For example, existing graphics applications have to be rewritten in order to take advantage of directing their command stream to an enumerated GPU. In other words, a rewrite and recompilation of a graphical application is required to leverage a multi-GPU system in order to improve performance of multiple graphical applications operating simultaneously in this convention method.","Accordingly, a need has arisen to accelerate processing of multiple graphics applications simultaneously in a multi-GPU system. Moreover, a need has arisen to accelerate processing of multiple applications in a multi-GPU system without a need to rewrite the graphics applications. A need has arisen to simultaneously operate a plurality of graphics applications on a multi-GPU system with no reduction of processing performance measurable by the user. It will become apparent to those skilled in the art after reading the detailed description of the present invention that the embodiments of the present invention satisfy the above mentioned needs.","A multi-GPU system or \u201cserver\u201d according to one embodiment of the present invention may include a central processing unit (CPU) running an operating system, a plurality of graphical processing units (GPUs), and a memory component. The memory component may store a plurality of graphics applications, e.g., a first graphics application, a second graphics application, operating system, a driver application, etc. Each GPU includes its own respective frame buffer memory.","According to one embodiment of the present invention the driver application implements a method executed by the CPU. The driver application accelerates processing of multiple graphical applications on a multi-GPU system in a manner that is transparent to the graphics applications. According to one embodiment, the driver application receives a first plurality of graphics commands from a first graphics application. The driver application selects a first graphical processing unit (GPU) from the plurality of GPUs. Selecting the first GPU associates the first GPU to process the first plurality of graphics commands exclusively.","The driver application transmits the first plurality of graphics commands to the first GPU. The first GPU processes the plurality of graphics commands and produces a first plurality of renderable data. The first plurality of renderable data is stored in a first frame buffer. The first frame buffer is associated with the first GPU.","According to one embodiment, after the selection of the first GPU, the driver application may receive a second plurality of graphics commands from the first graphics application. The driver application transmits the second plurality of graphics commands to the first GPU for processing. The first GPU processes the second plurality of graphics commands and produces a second plurality of renderable data. The second plurality of renderable data is stored in the first frame buffer associated with the first GPU.","According to one embodiment, the driver application may receive a third plurality of graphics commands from a second graphics application. The driver application selects a second graphical processing unit (GPU) from the plurality of GPUs to exclusively process the third plurality of graphics commands. The third plurality of graphics commands is transmitted to the second GPU for processing. The second GPU produces a third plurality of renderable data. The third plurality of renderable data is stored in a second frame buffer. The second frame buffer is associated with the second GPU.","It is appreciated that according to one embodiment, the first graphics application is launched by a first remote client. Furthermore, it is appreciated that the second graphics application may be launched by a second remote client. The first, the second, and the third plurality of renderable data stored in their respective frame buffers may be rendered by a display.","According to one embodiment, GPU selection, transmission of graphics commands to the selected GPU, and storage of the content resulting from the processed graphics commands in a frame buffer associated with the selected GPU occur transparent to the graphics application, e.g., the first and the second graphics applications. The GPU selection may be based on a plurality of heuristics, e.g., bottleneck, utilization of GPUs, GPU speed, type of graphics application, etc. It is appreciated that the GPU selection may be based on the first available GPU and it may occur in a round robin fashion.","According to embodiments of the present invention, each graphics application is transparently assigned to a dedicated GPU for processing graphics commands of that particular graphics application. The driver performs this assignment. Thus, multiple graphics applications may be launched and operated simultaneously without degradation in graphics performance as long as the number of graphics applications operating is less than or equal to the number of GPUs available in the system. Furthermore, acceleration in processing is achieved without a need to rewrite graphics applications and occurs transparent to the graphics applications.","In one embodiment, the multi-GPU system may be coupled to a single display screen and user interface, e.g., a desktop system. In such a system, one GPU and frame buffer are used to control display to the screen. In such system, one of the frame buffers may be referred to as a \u201cmaster\u201d which the other GPU frame buffers are referenced to as \u201cslaves.\u201d In such a desktop system, data from a slave buffer is copied into the master frame buffer in order to render the data for display.","In the case of a remote GPU server system, no single display connection exists. Instead, several remote displays are connected. In this case, there is no distinction between \u201cslave\u201d and \u201cmaster\u201d GPU frame buffers.","Reference will now be made in detail to embodiments of the present invention, examples of which are illustrated in the accompanying drawings. While the invention will be described in conjunction with these embodiments, it will be understood that they are not intended to limit the invention to these embodiments. On the contrary, the invention is intended to cover alternatives, modifications and equivalents, which may be included within the spirit and scope of the invention as defined by the appended claims. Furthermore, in the following detailed description of the present invention, numerous specific details are set forth in order to provide a thorough understanding of the present invention. However, it will be evident to one of ordinary skill in the art that the present invention may be practiced without these specific details. In other instances, well known methods, procedures, components, and circuits have not been described in detail as not to unnecessarily obscure aspects of the invention.","Notation and Nomenclature","Some portions of the detailed descriptions which follow are presented in terms of procedures, steps, logic blocks, processing, and other symbolic representations of operations on data bits that can be performed on computer memory. These descriptions and representations are the means used by those skilled in the art to most effectively convey the substance of their work to others skilled in the art. A procedure, computer executed step, logic block, process, etc., is here, and generally, conceived to be a self-consistent sequence of steps or instructions leading to a desired result. The steps are those requiring physical manipulations of physical quantities.","Usually, though not necessarily, these quantities take the form of electrical or magnetic signals capable of being stored, transferred, combined, compared, and otherwise manipulated in a computer system. It has proven convenient at times, principally for reasons of common usage, to refer to these signals as bits, values, elements, symbols, characters, terms, numbers, or the like.","It should be borne in mind, however, that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise as apparent from the following discussions, it is appreciated that throughout the present invention, discussions utilizing terms such as \u201cprocessing\u201d or \u201ccreating\u201d or \u201ctransferring\u201d or \u201cexecuting\u201d or \u201cdetermining\u201d or \u201cinstructing\u201d or \u201cissuing\u201d or \u201cclearing\u201d or \u201caccessing\u201d or \u201cobtaining\u201d or \u201cselecting\u201d or \u201ccalculating\u201d or \u201cmeasuring\u201d or \u201cquerying\u201d or \u201creceiving\u201d or \u201csending\u201d or \u201cproviding\u201d or \u201cstoring\u201d or \u201cincrementing\u201d or \u201cordering\u201d or \u201ctransmitting\u201d or \u201ccomputing\u201d or \u201cperforming\u201d or \u201cconverting\u201d or \u201cdisplaying\u201d or \u201crendering\u201d or the like, refer to the action and processes of a computer system, or similar electronic computing device, that manipulates and transforms data represented as physical (electronic) quantities within the computer system's registers and memories into other data similarly represented as physical quantities within the computer system memories or registers or other such information storage, transmission or display devices.","Referring to , a multi-GPU system  in accordance with one embodiment of the present invention is shown. The system  includes multiple independent GPUs where multiple graphics applications may be launched and operated simultaneously without causing performance degradation. Data processing associated with graphics applications is accelerated without a need to rewrite the graphics applications. In other words, acceleration in graphics processing occurs transparent to the graphics applications.","The system  includes a main or \u201cmaster\u201d GPU  associated with a local frame buffer . The system  further includes a memory component  for storing computer instructions thereon, e.g., graphics applications , , etc., driver , operating system , etc. The computer instructions are executed by a central processing unit . The system  further includes a plurality of \u201cslave\u201d GPUs, e.g., GPU , , , , etc., that have local frame buffers associated therewith, e.g., local frame buffer , , , , etc. According to one embodiment, the system  further includes a display  to render graphics and data. This embodiment of the multi-GPU system may be referred to as a \u201cdesktop system.\u201d","According to one embodiment, the graphics application  is launched. The graphics application  transmits a plurality of graphics commands to the driver .","The driver  automatically selects an appropriate vacant or idle GPU, e.g., GPU , from the plurality of GPUs , , , and . The selection of GPU  by the driver  dedicates GPU  to exclusively process information and graphics commands from the graphics application . Therefore, the selected GPU is no longer idle.","It is appreciated that the selection process may be based on a plurality of heuristics. For example, the selection may be based on the amount of resources available for each GPU, idle time of GPUs, first available GPU, bottleneck conditions and utilization conditions of GPUs, etc. It is appreciated that in one embodiment, the GPU is selected based on a first available GPU. In this case type, the selection process may occur in a round robin fashion.","The graphics commands from the graphics application  are transmitted by the driver  to the selected GPU . The GPU  processes the graphics commands and produces a plurality of renderable data. The plurality of renderable data is data operable to be rendered by a device, e.g., display. The plurality of renderable data is stored in the local frame buffer  that is associated with the selected GPU . It is appreciated that the selected GPU  may be dedicated to the graphics application  by driver  as long as the graphics application  is operating. Thus, the additional graphics commands issued by the graphics application  may be transmitted to the selected GPU  via the driver  without the need to go through the selection process again.","It is appreciated that the plurality of renderable data stored in the frame buffer  may be fed copied to master frame buffer area  hosted by the main GPU  for display to display . For example, the plurality of renderable data stored in the frame buffer  may be transmitted to the frame buffer  via a peer to peer frame buffer blits. The display  may access the plurality of renderable data stored in the frame buffer  to display content associated with the graphics application . An analogous frame buffer copy can be done by any of the frame buffers , , , or  to master frame buffer  for display to display .","It is appreciated that one or more additional graphics applications, e.g., , may be launched while graphics application  is operating. The sequence of events following the launch of the graphics application  is similar to that of graphics application . For example, the driver  receives the graphics commands associated with the graphics application . The driver  automatically selects a GPU, e.g., GPU , to process the graphics commands from the graphics application . The selection of GPU  by the driver  dedicates GPU  to exclusively process information and graphics commands from graphics application .","The graphics commands from the graphics application  are transmitted by the driver  to the selected GPU . The GPU  processes the graphics commands and produces a plurality of renderable data associated with the graphics application . The plurality of renderable data associated with the graphics application  is stored in the local frame buffer  that is associated with the GPU . It is appreciated that the selected GPU  may be dedicated to the graphics application  as long as the graphics application  is operating. Thus, additional graphics commands issued by the graphics application  may be transmitted to the selected GPU  via the driver  without the need to go through the selection process again.","It is appreciated that the plurality of renderable data stored in the frame buffer  may be copied to master frame buffer area  hosted by the main GPU  for display to display . For example, the plurality of renderable data stored in the frame buffer  may be transmitted to the frame buffer  via a peer to peer frame buffer blits. The display  may access the plurality of renderable data stored in the frame buffer  to display content associated with the graphics application .","In this environment, because each graphics application is assigned its own GPU and frame buffer pair, there is no performance degradation of the display , even though both graphics applications are simultaneously active.","It is appreciated that graphics applications, e.g., , , etc., are unaware of their particular GPU assignment within the multi-GPU system. Thus, for all intended purposes the graphics applications , , etc., are unaware of their graphics commands being processed by different GPUs of the multi-GPU system, e.g., GPU , , , , etc., instead of the main GPU .","Accordingly, the selection of a GPU from the multi-GPU system, transmission of graphics commands by the driver to the selected GPU, generation of renderable data by the selected GPU, storage of renderable data in the frame buffer associated with the selected GPU, and transmission of renderable data to the local frame buffer  associated with the main GPU  occur transparent to the graphics applications. Thus, there is no need to rewrite a graphics application to include dedicated code for selecting particular GPUS to leverage a multi-GPU system. Furthermore, dedicating a respective GPU to each graphics application ensures that launching of an additional graphics application would not degrade the graphics performance of operating applications as long as the number of previously launched graphics applications is less than the number of GPUs.",{"@attributes":{"id":"p-0041","num":"0040"},"figref":["FIG. 2","FIG. 1"],"b":["200","200","220","222","224","226","230","232","234","236","210","202","204","206"]},"The driver application  operates substantially similar to the driver  described with respect to . For example, the driver  receives a plurality of graphics commands when a graphics application, e.g., application , is launched. The driver  automatically selects an appropriate idle GPU to exclusively process the graphics commands from the graphics application . For example, the driver  may select GPU  to exclusively process the graphics commands from graphics application . It is appreciated that the selection may be based on a plurality of heuristics, as described above with respect to .","The driver  transmits the graphics commands of the graphics application  to the GPU  for processing. The GPU  processes the graphics commands to produce a plurality of renderable data associated with the graphics application . The plurality of renderable data may be stored in the frame buffer  that is associated with the GPU . The plurality of renderable data may be transmitted from the frame buffer  to a remote display such that the renderable data can be displayed.","It is appreciated that an additional graphics application, e.g., application , may be launched while the graphics application  is operating. The driver  receives the graphics commands associated with the graphics application . The driver  automatically selects an appropriate GPU, e.g., GPU , to process the graphics commands from the graphics application . The driver  transmits the graphics commands associated with the graphics application  to the selected GPU . The GPU  processes the graphics commands associated with the graphics application  to produce a plurality of renderable data. The plurality of renderable data is stored in the frame buffer  that is associated with the GPU . The stored information in the frame buffer  may be accessed in order to transfer the content to a renderable device, e.g., display, for rendering.","It is appreciated that the driver  similarly operates to accommodate an additional graphics application, e.g., application . For example, the driver  selects GPU  to exclusively process graphics commands from the graphics application . The graphics commands associated with the graphics application  are similarly transmitted by the driver  to the GPU  and processed to produce a plurality of renderable data. The plurality of renderable data is stored in the frame buffer  associated with the GPU .","It is appreciated that in this exemplary embodiment, the number of graphics applications operating is less than the number of available GPUs. Thus, GPU  is idle and awaits a launch of a graphics application. Alternatively, the GPU  may assist a currently operating GPU in processing one of the graphics applications, e.g., applications , , or , until a new application is launched.",{"@attributes":{"id":"p-0047","num":"0046"},"figref":"FIG. 3","b":["300","300","200","300","310","320","330","202","204","206","310","320","330","202","204","310","206","330"]},"It is appreciated that renderable data stored in the frame buffers of the server  may be transmitted to the respective clients for rendering. For example, the content stored in the frame buffer  may be transmitted to the client  for rendering and for display. Each client is assigned to one respective frame buffer.",{"@attributes":{"id":"p-0049","num":"0048"},"figref":"FIGS. 4A and 4B","b":["400","400","190","170","190","170"]},"Common forms of computer-readable media include, for example, a floppy disk, a flexible disk, hard disk, magnetic tape, or any other magnetic medium, a CD-ROM, any other optical medium, punch cards, paper tape, any other physical medium with patterns of holes, a RAM, a PROM, and EPROM, a FLASH-EPROM, any other memory chip or cartridge, a carrier wave as described hereinafter, or any other medium from which a computer can read.","At step , the driver application receives a first plurality of graphics commands from a first graphics application that is launched concurrently. For example, the first plurality of graphics commands may be initiated when the first graphics application is launched. At step , the driver application receives a second plurality of graphics commands from a second graphics application. For example, the second plurality of graphics commands may be initiated when the second graphics application is launched.","It is appreciated that the second graphics application may be launched and its respective graphics commands are received by the driver at any time. Thus, the receipt of the second plurality of graphics commands immediately after the first plurality of graphics commands is exemplary and not intended to limit the scope of the present invention. It is appreciated that the graphics application may be local to the user or may be launched remotely.","At step , the driver application automatically selects a first GPU from a plurality of idle GPUs to exclusively process the first plurality of graphical commands from the first graphics application. At step , the driver application automatically selects a second GPU from the plurality of idle GPUs to exclusively process the second plurality of graphical commands from the second graphics application. Once selected, a GPU is no longer idle.","It is appreciated that the automatic selection of a GPU to exclusively process the graphical commands from a given graphics application may be based on a plurality of heuristics. For example, the selection may be based on the amount of resources available for each GPU, idle time of GPUs, first available GPU, GPU utilization and bottleneck conditions, etc. It is appreciated that in one embodiment, the GPU is selected based on a first available GPU. Furthermore, the selection may occur in a round robin fashion.","At step , the first plurality of graphics commands associated with the first graphics application is transmitted or rerouted by the driver application to the first GPU. The first GPU processes the first plurality of graphics commands to produce a first plurality of renderable data. The plurality of renderable data is data operable to be rendered by a renderable device, e.g., a display. At step , the second plurality of graphics commands associated with the second graphics application is transmitted or rerouted by the driver application to the second GPU. The second GPU processes the second plurality of graphics commands to produce a second plurality of renderable data.","At step , the first plurality of renderable data is stored in a first frame buffer. It is appreciated that the first frame buffer is associated with the first GPU. It is further appreciated that the content stored in the first frame buffer may be transmitted from the first frame buffer to a main frame buffer associated with the main GPU of the system. At step , the second plurality of renderable data is stored in a second frame buffer. It is appreciated that the second frame buffer is associated with the second GPU. In one embodiment, the content stored in the first and the second frame buffers may be transferred to the \u201cmaster\u201d frame buffer.","At step , a third plurality of graphics commands is received from the first graphics application. The third plurality of graphics commands is received after the first plurality of graphics commands and after the driver application has selected the first GPU to process graphics commands associated with the first graphics application. Thus, at step , the third plurality of graphics commands is transmitted to the first GPU that has previously been selected and dedicated to process commands from the first graphics application.","The first GPU processes the third plurality of graphics commands to generate a third plurality of renderable data. The third plurality of renderable data is stored in the first frame buffer where the first frame buffer is associated with the first GPU, at step . The stored content of the frame buffers, e.g., the first frame buffer and\/or the second frame buffer, may be transferred to a local frame buffer associated with the main GPU for rendering. At step , the first, the second, and\/or the third plurality of renderable data may be rendered, e.g., displayed.","Although not shown in  or B, it is appreciated that upon termination of a graphics application, its associated GPU and frame buffer are returned to the pool of idle GPUs and can be reassigned to a different graphics application at a subsequent launch thereof.","Furthermore, in the case when a graphics application is launched and there are no idle GPUs remaining, the driver may time share a GPU between two or more graphics applications or may prevent the launching of the new graphics application. Prescribed user preferences can dictate the action taken and can also direct the driver in selecting a GPU for time sharing.","In accordance with embodiments of the present invention, the task of GPU selection from the multi-GPU system and a code to leverage the multi-GPU system is performed by the driver. Thus, GPU selection, transmission of graphics commands by the driver to the selected GPU, generation of renderable data by the selected GPU, storage of renderable data in the frame buffer associated with the selected GPU, and transmission of renderable data to the local frame buffer  associated with the main GPU  occur totally transparent to the graphics applications. Thus, the need to rewrite a graphics application to include dedicated code to leverage performance advantages of a multi-GPU system is eliminated. Furthermore, dedication of a respective GPU to each graphics application ensures that launching of additional graphics application does not degrade the individual performance of the operating applications as long as the number of previously launched graphics applications is less than the number of GPUs.","In the foregoing specification, embodiments of the invention have been described with reference to numerous specific details that may vary from implementation to implementation. Thus, the sole and exclusive indicator of what is, and is intended by the applicants to be, the invention is the set of claims that issue from this application, in the specific form in which such claims issue, including any subsequent correction. Hence, no limitation, element, property, feature, advantage or attribute that is not expressly recited in a claim should limit the scope of such claim in any way. The specification and drawings are, accordingly, to be regarded in an illustrative rather than a restrictive sense."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["Embodiments of the present invention are illustrated by way of example, and not by way of limitation, in the figures of the accompanying drawings and in which like reference numerals refer to similar elements and in which:",{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIGS. 4A and 4B"}]},"DETDESC":[{},{}]}
