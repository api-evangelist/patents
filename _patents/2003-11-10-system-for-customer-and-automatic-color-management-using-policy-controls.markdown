---
title: System for customer and automatic color management using policy controls
abstract: Methods and apparatuses for supporting a color management system that processes an image in accordance to a hierarchically-structured policy are provided. The policy may be modeled with a schema in which the policy is organized with a plurality of policy levels. Policy settings at a lower policy level may override policy settings at a higher policy level, which may be inhibited with a lockout mechanism. A user interface supports the capability of a user configuring policy settings through a series of dialog boxes. The dialog boxes are hierarchically organized in accordance with configuration levels, where the configuration levels are associated with the policy levels. The dialog boxes provide a consolidated approach for configuring a color management system by a user. An interface is supported, enabling a component to send inputs to a color management system in order to configure the policy.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07636468&OS=07636468&RS=07636468
owner: Microsoft Corporation
number: 07636468
owner_city: Redmond
owner_country: US
publication_date: 20031110
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","BRIEF SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION"],"p":["This application is related to application Ser. No. 10\/683,153, entitled \u201cCOLOR MANAGEMENT SYSTEM THAT ENABLES DYNAMIC BALANCING OF PERFORMANCE WITH FLEXIBILITY,\u201d which is incorporated herein by reference and which was filed Oct. 14, 2003.","The present invention relates to color management technology for a computer system, and in particular provides control of color management.","With a one-input-one-output workflow, as supported by the prior art, color management was not typically required. Images were typically scanned by a professional operator using a single scanner producing a color representation, e.g., cyan, magenta, yellow, and black (CMYK) format, that was tuned to a single output device. Spot colors were handled either by mixing spot inks or by using standard CMYK formulas in swatch books. An accurate monitor display was not typically available. The system worked because the CMYK values that the scanner produced were tuned for the output device, forming a closed loop that dealt with one set of numbers.","More recently, the types of input and output devices have increased dramatically. Input devices include not only high-end drum scanners but also high-end flatbed scanners, desktop flatbeds, desktop slide scanners, and digital cameras. Output devices include not only web and sheetfeed presses with waterless inks, soy inks, direct-to-plate printing, and Hi-Fi color but also digital proofers, flexography, film recorders, silk screeners, color copiers, laser printers, inkjet printers, and even monitors that function as final output devices. The diversity of input and output devices vastly complicates the approach of a closed workflow as previously discussed. Thus, possible workflows may be associated with a many-to-many mapping of input devices to output devices.","The result is a potentially huge number of possible conversions from input devices to output devices. With an m-input to n-output workflow, one may need m\u00d7n different conversions from the input to the output. With the increasing diversity of input and output devices, the task of providing desired color conversions from input to output can easily become unmanageable.","Color management is a solution for managing the different workflows that may be supported between different input device and output device combinations. Color management typically supports an intermediate representation of the desired colors. The intermediate representation is commonly referred as a profile connection space (PCS), which may be alternately referred as a working space. The function of the profile connection space is to serve as a hub for the plurality of device-to-device transformations. With such an approach, the m\u00d7n link problem is reduced to m+n links, in which only one link is needed for each device. Each link effectively describes the color reproduction behavior of a device. A link is commonly referred as a device profile. A device profile and the profile connection space are two of the four key components in a color management system.","As based upon current International Color Consortium (ICC) specifications, the four basic components of a color management system are a profile connection space, a set of profiles, a color management module (CMM), and rendering intents. The profile connection space allows the color management system to give a color an unambiguous numerical value in CIE XYZ or CIE LAB color space that does not depend on the quirks of the plurality of devices being used to reproduce the color but instead defines the color as a person actually sees the color. (Both CIE XYZ and CIE LAB are color spaces that are modeled as being device independent.) A profile describes the relationship between a device's RGB (red, green, and blue) or CMYK control signals and the actual colors that the control signals produce. Specifically, a profile defines the CIE XYZ or CIE LAB values that correspond to a given set of RGB or CMYK numbers. A color management module (CMM) is often called the engine of the color management system. The color management module is a piece of software that performs all of the calculations needed to convert the RGB or CMYK values. The color management module works with the color data that is contained in the profiles. Rendering intents includes four different rendering intents. Each type of rendering intent is a different way of dealing with \u201cout-of-gamut\u201d colors, where the output device is not physically capable of reproducing the color that is present in the source space.","As a workflow becomes more complex, color management becomes more important to the user for managing colors of an image file as the image file flows from input (e.g., a scanner) to output (e.g., printer). A workflow utilizes four stages of color management that include defining color meaning, normalizing color, converting color, and proofing. Defining the color meaning includes determining if a profile is embedded in the content and defining a profile if there is no embedded profile. The workflow can then proceed with normalizing color to a working space (corresponding to a device independent color space) or with converting the color representation of the image file directly to the destination space. If the color is normalized to a working space, operations are performed in the working space, e.g., the user modifying selected colors in the working space. A color management system can then determine a transformation table from the source profile and the destination profile, using the common values from the working space. Consequently the color management system can convert a source image to a destination image using the transformation table.","With the prior art, color management is typically administered at both the application level and the device level. For example, with the Adobe\u00ae Photoshop\u00ae software application, which is a professional image-editing standard for producing high quality images for print and the Web, the user configures the application in accordance with a policy. The policy is a set of rules or actions that may be dependent on different contingencies. For example, with an untagged document, the Photoshop application can assume a profile, assign a profile, or assign a profile and do a conversion to some other profile in accordance with user selections selected by the user in a dialog box. The user typically responds to a plurality of dialog boxes in order to establish the desired policy. The Photoshop application allows the user to configure other aspects of color management, including configuring printer controls (e.g., a printer profile and rendering intent). If, however, the output device is changed, the user typically must re-enter the appropriate dialog and modify the policy.","The above example illustrates a common deficiency with the prior art. In particular, a policy is established for each combination of application, device, and system. A user may use a plurality of applications in processing colors documents, where each application requires the user to respond to a series of dialog boxes for each application. Moreover, the user may process a color document from one of a plurality of input devices and to one of a plurality of output devices with one or more applications. Furthermore, in a commercial or educational setting a plurality of users may use the same system or each of a plurality of users may use a different system in which the consistency of color management policies is desired. Having to configure policies separately for each application, device, user, and system can be very demanding on the user. Hence, there is a real need in the industry to provide a more integrated and consolidated approach for controlling the policies of color management systems.","The present invention provides methods and apparatuses for supporting a color management system that processes an image in accordance to a policy that is structured in a hierarchical fashion. The policy may be modeled with a schema in which the policy is organized with a plurality of policy levels, including a system level, a user level, an operational level, profile level, a device and codec (image format) level, and a color management application programming interface level. With an aspect of the invention, policy settings at a lower policy level may override policy settings at a higher policy level. However, a lockout mechanism may prevent a lower policy level from overriding a higher policy level.","With another aspect of the invention, a user interface supports the capability of a user configuring policy settings through a series of dialog boxes. The dialog boxes are hierarchically organized in accordance with configuration levels, including a system level, an input device level, a display device level, and an output device level, where the configuration levels are associated with the policy levels. The dialog boxes provide a consolidated approach for configuring a color management system by a user.","With another aspect of the invention, an interface is supported, enabling a component, e.g., an application, to send inputs to a color management system in order to configure the policy. An embodiment of the invention supports an application program interface, in which an application may set a policy setting and get (retrieve) a policy setting from the color management system.","In the following description of the various embodiments, reference is made to the accompanying drawings which form a part hereof, and in which is shown by way of illustration various embodiments in which the invention may be practiced. It is to be understood that other embodiments may be utilized and structural and functional modifications may be made without departing from the scope of the present invention.","Definitions for the following terms are included to facilitate an understanding of the detailed description.\n\n",{"@attributes":{"id":"p-0045","num":"0062"},"figref":["FIG. 1","FIG. 1"],"b":["100","161","100","100","100","100"]},"The invention is operational with numerous other general purpose or special purpose computing system environments or configurations. Examples of well known computing systems, environments, and\/or configurations that may be suitable for use with the invention include, but are not limited to, personal computers, server computers, hand-held or laptop devices, multiprocessor systems, microprocessor-based systems, set top boxes, programmable consumer electronics, network PCs, minicomputers, mainframe computers, distributed computing environments that include any of the above systems or devices, and the like.","The invention may be described in the general context of computer-executable instructions, such as program modules, being executed by a computer. Generally, program modules include routines, programs, objects, components, data structures, etc. that perform particular tasks or implement particular abstract data types. The invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment, program modules may be located in both local and remote computer storage media including memory storage devices.","With reference to , an exemplary system for implementing the invention includes a general purpose computing device in the form of a computer . Components of computer  may include, but are not limited to, a processing unit , a system memory , and a system bus  that couples various system components including the system memory to the processing unit . The system bus  may be any of several types of bus structures including a memory bus or memory controller, a peripheral bus, and a local bus using any of a variety of bus architectures. By way of example, and not limitation, such architectures include Industry Standard Architecture (ISA) bus, Micro Channel Architecture (MCA) bus, Enhanced ISA (EISA) bus, Video Electronics Standards Association (VESA) local bus, and Peripheral Component Interconnect (PCI) bus also known as Mezzanine bus.","Computer  typically includes a variety of computer readable media. Computer readable media can be any available media that can be accessed by computer  and includes both volatile and nonvolatile media, removable and non-removable media. By way of example, and not limitation, computer readable media may comprise computer storage media and communication media. Computer storage media includes both volatile and nonvolatile, removable and non-removable media implemented in any method or technology for storage of information such as computer readable instructions, data structures, program modules or other data. Computer storage media includes, but is not limited to, RAM, ROM, EEPROM, flash memory or other memory technology, CD-ROM, digital versatile disks (DVD) or other optical disk storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other medium which can be used to store the desired information and which can accessed by computer . Communication media typically embodies computer readable instructions, data structures, program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term \u201cmodulated data signal\u201d means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example, and not limitation, communication media includes wired media such as a wired network or direct-wired connection, and wireless media such as acoustic, RF, infrared and other wireless media. Combinations of the any of the above should also be included within the scope of computer readable media.","The system memory  includes computer storage media in the form of volatile and\/or nonvolatile memory such as read only memory (ROM)  and random access memory (RAM) . A basic input\/output system  (BIOS), containing the basic routines that help to transfer information between elements within computer , such as during start-up, is typically stored in ROM . RAM  typically contains data and\/or program modules that are immediately accessible to and\/or presently being operated on by processing unit . By way of example, and not limitation,  illustrates operating system , application programs , other program modules , and program data .","The computer  may also include other removable\/non-removable, volatile\/nonvolatile computer storage media. By way of example only,  illustrates a hard disk drive  that reads from or writes to non-removable, nonvolatile magnetic media, a magnetic disk drive  that reads from or writes to a removable, nonvolatile magnetic disk , and an optical disk drive  that reads from or writes to a removable, nonvolatile optical disk  such as a CD ROM or other optical media. Other removable\/non-removable, volatile\/nonvolatile computer storage media that can be used in the exemplary operating environment include, but are not limited to, magnetic tape cassettes, flash memory cards, digital versatile disks, digital video tape, solid state RAM, solid state ROM, and the like. The hard disk drive  is typically connected to the system bus  through an non-removable memory interface such as interface , and magnetic disk drive  and optical disk drive  are typically connected to the system bus  by a removable memory interface, such as interface .","The drives and their associated computer storage media discussed above and illustrated in , provide storage of computer readable instructions, data structures, program modules and other data for the computer . In , for example, hard disk drive  is illustrated as storing operating system , application programs , other program modules , and program data . Note that these components can either be the same as or different from operating system , application programs , other program modules , and program data . Operating system , application programs , other program modules , and program data  are given different numbers here to illustrate that, at a minimum, they are different copies. A user may enter commands and information into the computer  through input devices such as a keyboard  and wireless pointing device , commonly referred to as a mouse, trackball or touch pad. In an embodiment of the invention, wireless pointing device  may be implemented as a mouse with an optical sensor for detecting movement of the mouse. Other input devices (not shown) may include a microphone, joystick, game pad, satellite dish, scanner, or the like. These and other input devices are often connected to the processing unit  through a user input interface  that is coupled to the system bus, but may be connected by other interface and bus structures, such as a parallel port, game port or a universal serial bus (USB). In , wireless pointer , communicates with user input interface  over a wireless channel . Wireless channel  utilizes an electromagnetic signal, e.g., a radio frequency (RF) signal, an infrared signal, or a visible light signal. A monitor  or other type of display device is also connected to the system bus  via an interface, such as a video interface . In addition to the monitor, computers may also include other peripheral output devices such as speakers  and printer , which may be connected through a output peripheral interface .","The computer  may operate in a networked environment using logical connections to one or more remote computers, such as a remote computer . The remote computer  may be a personal computer, a server, a router, a network PC, a peer device or other common network node, and typically includes many or all of the elements described above relative to the computer , although only a memory storage device  has been illustrated in . The logical connections depicted in  include a local area network (LAN)  and a wide area network (WAN) , but may also include other networks. Such networking environments are commonplace in offices, enterprise-wide computer networks, intranets and the Internet.","When used in a LAN networking environment, the computer  is connected to the LAN  through a network interface or adapter . When used in a WAN networking environment, the computer  typically includes a modem  or other means for establishing communications over the WAN , such as the Internet. The modem , which may be internal or external, may be connected to the system bus  via the user input interface , or other appropriate mechanism. In a networked environment, program modules depicted relative to the computer , or portions thereof, may be stored in the remote memory storage device. By way of example, and not limitation,  illustrates remote application programs  as residing on memory device . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.","A peripheral interface  may interface to a video input device such as a scanner (not shown) or a digital camera , where output peripheral interface may support a standardized interface, including a universal serial bus (USB) interface. Color management, which may be supported by operating system  or by an application , assists the user in obtaining a desired color conversion between computer devices. The computer devices are typically classified as input devices, e.g., digital camera , display devices, e.g., monitor , and output devices, e.g., printer . Operation of color management is explained in greater detail in the following discussion.",{"@attributes":{"id":"p-0056","num":"0073"},"figref":"FIG. 2","b":["200","200","201","211","201","1"]},"The color management system supports three quality settings for specified gamut mappings in converting an image file to either the small working space or the large working space as shown in Table 1. The first quality setting Q1 (optimize for size) optimizes a conversion so that a specified gamut mapping (as discussed with rendering",{"@attributes":{"id":"p-0058","num":"0075"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 1"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"QUALITY SETTINGS"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"126pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"91pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"MAPPING TO"]},{"entry":["QUALITY SETTING","WORKING SPACE"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Q1","Optimize for size"]},{"entry":["Q2","Ensure no loss"]},{"entry":["Q3","Optimize for quality"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}},"br":{}},"With the first and third quality settings (Q1 and Q3), the conversion of an image file may require that the image file be converted to a corresponding smaller working space (e.g., an image space having a scRGB color space being converted to the small working space) or to a larger working space (e.g., an image space having a RGB color space converted to the large working space). In such cases, a rendering intent setting indicates to the color management system how to handle the issue of converting color between color spaces when going from a larger gamut to a smaller one as shown in Table 2. When converting",{"@attributes":{"id":"p-0060","num":"0077"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 2"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"RENDERING INTENTS"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"105pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"COMPARISON OF",{}]},{"entry":[{},"GAMUT SPACES A, B","CONDITION"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"A > B","A encompasses B"]},{"entry":[{},"A < B","A is fully enclosed by B"]},{"entry":[{},"A has an intersection with B","Neither A or B enclose the other"]},{"entry":[{},"A independent of B","No commonality"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}]}},"br":{}},"In another embodiment of the invention, binary gamut mapping operations are supported. For example, a camera manufacturer may provide a source profile and a source gamut map to replicate the camera's \u201clook and feel\u201d, while a printer manufacturer may provide a destination profile and a destination gamut map to replicate the printer's \u201clook and feel\u201d. In the embodiment, a color management system supports the capability of selecting the following choices:\n\n","In some cases, a user may disable color management in its entirety so that color spaces may be meaningless. However, there are mappings that are meaningful with the activation of color management. In such cases, simple arithmetic operations are executed without a traditional color managed context. An example is the conversion from 3-channel RGB to 4-channel CMYK.","Referring to , a user may disable color management entirely or select the small working space and the large working space at policy level  (system level). A lower level policy level (i.e. policy level , , , , or ) may override policy level . However, policy level  may lockout the ability of a lower policy level from overriding policy . Moreover, the override\/lockout mechanisms may be configured with other policy levels. Each policy level , , , , and  has a locking function to provide the user control over whether a lower policy level may override the settings of the policy level, whether or not to prompt the user, or simply carry out the request in accordance with the user's instructions.","At policy level  (user level), the user can configure policy for the user without affecting policy for other users. This capability may be important if the color management system supported by a computer system (e.g., computer ) is used by a plurality of users such in an educational system.","At policy level  (operational level), the user has the ability of controlling color management based upon the operation being supported by the color management system. (As will be explained with , operations include \u201ccapture\u201d, \u201cdisplay\u201d, \u201cprint\u201d, \u201cload\u201d, and \u201csave\u201d, \u201ccopy\u201d and \u201cpaste\u201d.) For example, when loading an image file is being performed, the color management system may be configured to always convert the image file to scRGB. When printing an image file, the color management system may be configured to convert the image file go Epson 9600\u2014Premium Luster. Policies can be configured for each designated operation.","At policy level  (profile level), the user has the ability to control color management based on an image file's embedded profile or a lack of an embedded profile. The user may desire to perform a certain conversion when certain policies are encountered.","At policy level  (device and codec level), the user can control conversions by the color management system according to the device and then to codec (format of image file).","At policy level  (color management API), an application may make an API call directly to the color management API to perform a color operation. (The color management API is discussed in more detail with .) In the embodiment, policy level  is not typically exposed to the user.",{"@attributes":{"id":"p-0069","num":"0090"},"figref":"FIG. 3","b":["300","201","203","205","209","301","201","201","201"]},"In the schema shown in , each of three user entities , , and , as associated with user level , may correspond to different users of computer , in which each user may configure policy for the user's environment without affecting other users. However, in other embodiments user entities , , and  may correspond to other associations. For example, user entities , , and  may correspond to different customers of a user, where each customer has different color management objectives that require different policy settings.","Capture operation , display operation , print operation , load\/save operation , copy operation , and paste operation  are associated with operational level , in which policy configuration settings are contingent on the type of operation. Each operation is hierarchically associated with devices that can support the operation.","Different devices can be configured with different policy settings at device\/codec level . For example, capture operation , as shown in , can be associated with a plurality of input devices e.g., cameras  and scanners , in which each device type is associated with different policy settings. Load\/save operation  can be associated with different codec (format) types including JPEG format , TIFF format , and GIF format . Display operation  may be associated with different monitor devices (not shown). Print operation  may be associated with different printer devices (not shown). For each device type, different device models can be configured with specific policy settings. For example, D1X model 327 and D100 model 329 are associated with cameras . Although not shown in hierarchical policy schema , other embodiments of the invention may support a policy on an application level.","Color management settings, in accordance with schema , may be represented in text file, e.g., as an Extensible Markup Language (XML) file in which color management settings for each policy level are represented with at least one attribute. The XML file facilitates configuring the policies on computer , if the policy settings become contaminated or to conform to policy settings of another computer.",{"@attributes":{"id":"p-0074","num":"0095"},"figref":["FIG. 4","FIGS. 5-12","FIGS. 14 and 15"],"b":["400","400","401","411","413","421","401","407","405","409","400","411","407","405","415","417","400","405","407","409","405","407","409","409","411","413","413","411","400","411","419","421","419","400"]},"Using the interpolation algorithm defined by color management module , color management system  builds a table for source device  and a table for destination device . Color management system  connects the two tables together through common working space values and builds a combined table that goes directly from source device  and destination device . Color management system  then passes each pixel in the source image through the combined table, converting the values from source to destination.","A color management system (e.g., color management system ) allows for robust color management by permitting a user to monitor, inspect, interrogate, correct, modify, and\/or ignore, a color management workflow. By use of choke points, the color management system assures a user of what color management has been or will be performed, when color management was or will be performed, and by whom color management has, will, or should be performed. A choke point is defined as a predefined contact point for a certain operation where all pixels of color object data are sent through one function in a very limited fixed set of exclusive functions. In the embodiment, choke points are implemented as disclosed in a patent application entitled \u201cCOLOR MANAGEMENT SYSTEM THAT ENABLES DYNAMIC BALANCING OF PERFORMANCE WITH FLEXIBILITY\u201d, having Ser. No. 10\/683,153, filed Oct. 14, 2003, wherein the patent application is incorporated by reference in its entirety.",{"@attributes":{"id":"p-0077","num":"0098"},"figref":["FIG. 5","FIG. 2"],"b":["500","500","501","503","505","507","201","509","513","515","517","517","519"]},"In some embodiments, dialog  provides a plurality of user tabs so that another dialog box (not shown) can be displayed, in which the corresponding user may enter policy settings that pertain only to the user and not to other users. This capability may be useful in a computer system that is shared by a plurality of users.",{"@attributes":{"id":"p-0079","num":"0100"},"figref":"FIG. 6","b":["600","600","503","601","603","605","607","700","800","900"]},"\u201cInput device list\u201d object  is a list is devices capable of delivering images to a computer, e.g., computer . Object  displays the input device selected from object . \u201cEnable color management policy for this input device\u201d object  is a global setting for the device. When object  is cleared, all other controls (not shown) are disabled, and the device is not included in the set of rules that are applied against incoming images.","\u201cColor manage\u201d object  indicates whether color management system  silently handles color management or whether the user should be prompted at run-time for color management decisions. If object  is set to \u201cmanual\u201d, the remaining controls on the tab are disabled (not shown). As shown in , when object  is set to \u201cautomatically (by policy)\u201d, color management decisions are automatically determined in according to the policy.","\u201cImages with a profile\u201d object  sets the policy of what to do when an image with an embedded profile is encountered. If object  is set to \u201cRespect profile\u201d, color management system  converts from the color space indicated by the image's profile. If object  is set to \u201cAssign\u201d, color management system  ignores the image's embedded profile and uses the specified profile in lieu of the embedded profile.","\u201cImages without a profile\u201d object  set the policy of what to do when an image without a profile is encountered. If object  is set to \u201cAssign\u201d, color management system  uses the specified file and may convert (if selected) the image from the assigned profile color space to the working space. If object  is set to \u201cAsk me what to do\u201d, color management system  prompts the user at the time that the situation is encountered.","\u201cGamut mapping\u201d object  controls how subject elements of a conversion takes place. A list of options is similar (in this embodiment is identical) to the list of options presented in objects  and  as shown in  with the additional choice of \u201cUse System Setting\u201d. Object  provides description text that is relevant to dialog box .",{"@attributes":{"id":"p-0085","num":"0106"},"figref":["FIG. 7","FIG. 6"],"b":["700","700","503","603","713","715","717","719","721","723","613","615","617","619","621","623","701","725","701","700","400"]},{"@attributes":{"id":"p-0086","num":"0107"},"figref":["FIG. 8","FIG. 6"],"b":["800","800","503","605","813","815","817","819","821","823","613","615","617","619","621","623","801","825","801"]},{"@attributes":{"id":"p-0087","num":"0108"},"figref":["FIG. 9","FIG. 6"],"b":["900","900","503","607","913","917","919","921","923","613","615","617","619","621","623","1001"]},{"@attributes":{"id":"p-0088","num":"0109"},"figref":["FIG. 10","FIG. 6"],"b":["1000","1000","505","1019","1021","1023","619","621","623","1001","1003","1025","1027"]},{"@attributes":{"id":"p-0089","num":"0110"},"figref":["FIG. 11","FIG. 6"],"b":["1100","1100","507","1101","1107","1117","1119","1121","1123","617","619","621","623","1125","1127","1129","1131"]},{"@attributes":{"id":"p-0090","num":"0111"},"figref":["FIG. 12","FIG. 6","FIG. 11"],"b":["1200","1200","507","1103","1205","1233","1235","1117","1119","1121","1123","617","619","621","623","1225","1227","1229","1231","1125","1127","1129","1131"]},{"@attributes":{"id":"p-0091","num":"0112"},"figref":["FIG. 13","FIG. 8","FIG. 6","FIG. 11"],"b":["1300","1300","507","1105","1305","1333","1335","1117","1119","1121","1123","617","619","621","623","1325","1327","1329","1331","1125","1127","1129","1131"]},"While dialog boxes - imply a mapping between different configuration levels -, as shown in , and policy levels -, as shown in , other embodiments of the invention may utilize a different mapping between the configuration levels and the policy levels.",{"@attributes":{"id":"p-0093","num":"0114"},"figref":["FIG. 14","FIG. 1"],"b":["1401","400","1401","1401","110","134"]},"Requesting component  may configure color management system  by setting policy settings that may be similar to the policy settings described in  (corresponding to dialog boxes -) in which a user inputs the policy settings through user interface  and configuration module  as shown in . A policy setting may correspond to different objects in , e.g., the specification of color spaces and gamut mappings. Requesting component  sends an input  (which is API call SET(A,B)  in the embodiment shown in ) to color management system . Input  contains parameter  (which corresponds to a value of a policy setting) and parameter  (which corresponds to an associated configuration level). In response to input , color management system  returns a result (corresponding to RETURN RESULT ), where parameter  is indicative whether the value of the policy setting was successfully updated.","Also, requesting component  may send an input  (which is API call GET(A,B) in the embodiment) to color management system  to obtain the current value of a policy setting. Parameter  corresponds to an identification of a policy setting and parameter  corresponds to an associated configuration level. In response to input , color management system  returns a result (corresponding to RETURN RESULT ), where parameter  is indicative of the value of the policy setting.",{"@attributes":{"id":"p-0096","num":"0117"},"figref":["FIG. 15","FIG. 14"],"b":["1501","400","1551","1501","1503","1509","1511","1505","1515","1517","400","1551","1551","400","1551","1507","1501","1513"]},"Referring to , inputs , , , and  may be expanded to a support a plurality of policy settings within each input, where parameters , , , and  may contain a list of parameter settings and where parameters  and  may contain a list of results for each of the corresponding parameter settings.","A programming interface (or more simply, interface) may be viewed as any mechanism, process, protocol for enabling one or more segment(s) of code to communicate with or access the functionality provided by one or more other segment(s) of code. Alternatively, a programming interface may be viewed as one or more mechanism(s), method(s), function call(s), module(s), object(s), etc. of a component of a system capable of communicative coupling to one or more mechanism(s), method(s), function call(s), module(s), etc. of other component(s). The term \u201csegment of code\u201d in the preceding sentence is intended to include one or more instructions or lines of code, and includes, e.g., code modules, objects, subroutines, functions, and so on, regardless of the terminology applied or whether the code segments are separately compiled, or whether the code segments are provided as source, intermediate, or object code, whether the code segments are utilized in a runtime system or process, or whether they are located on the same or different machines or distributed across multiple machines, or whether the functionality represented by the segments of code are implemented wholly in software, wholly in hardware, or a combination of hardware and software.","Notionally, a programming interface may be viewed generically, as shown in  or .  illustrates an interface Interface as a conduit through which first and second code segments communicate.  illustrates an interface as comprising interface objects I and I (which may or may not be part of the first and second code segments), which enable first and second code segments of a system to communicate via medium M. In the view of , one may consider interface objects I and I as separate interfaces of the same system and one may also consider that objects I and I plus medium M comprise the interface. Although  show bi-directional flow and interfaces on each side of the flow, certain implementations may only have information flow in one direction (or no information flow as described below) or may only have an interface object on one side. By way of example, and not limitation, terms such as application programming interface (API), entry point, method, function, subroutine, remote procedure call, and component object model (COM) interface, are encompassed within the definition of programming interface.","Aspects of such a programming interface may include the method whereby the first code segment transmits information (where \u201cinformation\u201d is used in its broadest sense and includes data, commands, requests, etc.) to the second code segment; the method whereby the second code segment receives the information; and the structure, sequence, syntax, organization, schema, timing and content of the information. In this regard, the underlying transport medium itself may be unimportant to the operation of the interface, whether the medium be wired or wireless, or a combination of both, as long as the information is transported in the manner defined by the interface. In certain situations, information may not be passed in one or both directions in the conventional sense, as the information transfer may be either via another mechanism (e.g. information placed in a buffer, file, etc. separate from information flow between the code segments) or non-existent, as when one code segment simply accesses functionality performed by a second code segment. Any or all of these aspects may be important in a given situation, e.g., depending on whether the code segments are part of a system in a loosely coupled or tightly coupled configuration, and so this list should be considered illustrative and non-limiting.","This notion of a programming interface is known to those skilled in the art and is clear from the foregoing detailed description of the invention. There are, however, other ways to implement a programming interface, and, unless expressly excluded, these too are intended to be encompassed by the claims set forth at the end of this specification. Such other ways may appear to be more sophisticated or complex than the simplistic view of , but they nonetheless perform a similar function to accomplish the same overall result. We will now briefly describe some illustrative alternative implementations of a programming interface.","A communication from one code segment to another may be accomplished indirectly by breaking the communication into multiple discrete communications. This is depicted schematically in . As shown, some interfaces can be described in terms of divisible sets of functionality. Thus, the interface functionality of  may be factored to achieve the same result, just as one may mathematically provide 24, or 2 times 2 times 3 times 2. Accordingly, as illustrated in , the function provided by interface Interface may be subdivided to convert the communications of the interface into multiple interfaces InterfaceA, Interface B, Interface C, etc. while achieving the same result. As illustrated in , the function provided by interface I may be subdivided into multiple interfaces I, I, I, etc. while achieving the same result. Similarly, interface I of the second code segment which receives information from the first code segment may be factored into multiple interfaces I, I, I, etc. When factoring, the number of interfaces included with the 1code segment need not match the number of interfaces included with the 2code segment. In either of the cases of , the functional spirit of interfaces Interface and I remain the same as with , respectively. The factoring of interfaces may also follow associative, commutative, and other mathematical properties such that the factoring may be difficult to recognize. For instance, ordering of operations may be unimportant, and consequently, a function carried out by an interface may be carried out well in advance of reaching the interface, by another piece of code or interface, or performed by a separate component of the system. Moreover, one of ordinary skill in the programming arts can appreciate that there are a variety of ways of making different function calls that achieve the same result.","In some cases, it may be possible to ignore, add or redefine certain aspects (e.g., parameters) of a programming interface while still accomplishing the intended result. This is illustrated in . For example, assume interface Interface of  includes a function call Square(input, precision, output), a call that includes three parameters, input, precision and output, and which is issued from the 1Code Segment to the 2Code Segment., If the middle parameter precision is of no concern in a given scenario, as shown in , it could just as well be ignored or even replaced with a meaningless (in this situation) parameter. One may also add an additional parameter of no concern. In either event, the functionality of square can be achieved, so long as output is returned after input is squared by the second code segment. Precision may very well be a meaningful parameter to some downstream or other portion of the computing system; however, once it is recognized that precision is not necessary for the narrow purpose of calculating the square, it may be replaced or ignored. For example, instead of passing a valid precision value, a meaningless value such as a birth date could be passed without adversely affecting the result. Similarly, as shown in , interface I is replaced by interface I\u2032, redefined to ignore or add parameters to the interface. Interface I may similarly be redefined as interface I\u2032, redefined to ignore unnecessary parameters, or parameters that may be processed elsewhere. The point here is that in some cases a programming interface may include aspects, such as parameters, that are not needed for some purpose, and so they may be ignored or redefined, or processed elsewhere for other purposes.","It may also be feasible to merge some or all of the functionality of two separate code modules such that the \u201cinterface\u201d between them changes form. For example, the functionality of  may be converted to the functionality of , respectively. In , the previous 1and 2Code Segments of  are merged into a module containing both of them. In this case, the code segments may still be communicating with each other but the interface may be adapted to a form which is more suitable to the single module. Thus, for example, formal Call and Return statements may no longer be necessary, but similar processing or response(s) pursuant to interface Interface may still be in effect. Similarly, shown in , part (or all) of interface I from  may be written inline into interface I to form interface I\u2033. As illustrated, interface I is divided into Iand I, and interface portion Ihas been coded in-line with interface I to form interface I\u2033. For a concrete example, consider that the interface I from  performs a function call square (input, output), which is received by interface I, which after processing the value passed with input (to square it) by the second code segment, passes back the squared result with output. In such a case, the processing performed by the second code segment (squaring input) can be performed by the first code segment without a call to the interface.","A communication from one code segment to another may be accomplished indirectly by breaking the communication into multiple discrete communications. This is depicted schematically in . As shown in , one or more piece(s) of middleware (Divorce Interface(s), since they divorce functionality and\/or interface functions from the original interface) are provided to convert the communications on the first interface, Interface, to conform them to a different interface, in this case interfaces InterfaceA, InterfaceB and InterfaceC. This might be done, e.g., where there is an installed base of applications designed to communicate with, say, an operating system in accordance with an Interface protocol, but then the operating system is changed to use a different interface, in this case interfaces InterfaceA, InterfaceB and InterfaceC. The point is that the original interface used by the 2Code Segment is changed such that it is no longer compatible with the interface used by the 1Code Segment, and so an intermediary is used to make the old and new interfaces compatible. Similarly, as shown in , a third code segment can be introduced with divorce interface DI to receive the communications from interface I and with divorce interface DI to transmit the interface functionality to, for example, interfaces Iand I, redesigned to work with DI, but to provide the same functional result. Similarly, DI and DI may work together to translate the functionality of interfaces I and I of  to a new operating system, while providing the same or similar functional result.","Yet another possible variant is to dynamically rewrite the code to replace the interface functionality with something else but which achieves the same overall result. For example, there may be a system in which a code segment presented in an intermediate language (e.g. Microsoft IL, Java ByteCode, etc.) is provided to a Just-in-Time (JIT) compiler or interpreter in an execution environment (such as that provided by the .Net framework, the Java runtime environment, or other similar runtime type environments). The JIT compiler may be written so as to dynamically convert the communications from the 1Code Segment to the 2Code Segment, i.e., to conform them to a different interface as may be required by the 2Code Segment (either the original or a different 2Code Segment). This is depicted in . As can be seen in , this approach is similar to the Divorce scenario described above. It might be done, e.g., where an installed base of applications are designed to communicate with an operating system in accordance with an Interface  protocol, but then the operating system is changed to use a different interface. The JIT Compiler could be used to conform the communications on the fly from the installed-base applications to the new interface of the operating system. As depicted in , this approach of dynamically rewriting the interface(s) may be applied to dynamically factor, or otherwise alter the interface(s) as well.","It is also noted that the above-described scenarios for achieving the same or similar result as an interface via alternative embodiments may also be combined in various ways, serially and\/or in parallel, or with other intervening code. Thus, the alternative embodiments presented above are not mutually exclusive and may be mixed, matched and combined to produce the same or equivalent scenarios to the generic scenarios presented in . It is also noted that, as with most programming constructs, there are other similar ways of achieving the same or similar functionality of an interface which may not be described herein, but nonetheless are represented by the spirit and scope of the invention, i.e., it is noted that it is at least partly the functionality represented by, and the advantageous results enabled by, an interface that underlie the value of an interface.","While the invention has been described with respect to specific examples including presently preferred modes of carrying out the invention, those skilled in the art will appreciate that there are numerous variations and permutations of the above described systems and techniques that fall within the spirit and scope of the invention as set forth in the appended claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["A more complete understanding of the present invention and the advantages thereof may be acquired by referring to the following description in consideration of the accompanying drawings, in which like reference numbers indicate like features, and wherein:",{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 13"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 14"},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 15"},{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 16"},{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 17"},{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 18"},{"@attributes":{"id":"p-0034","num":"0033"},"figref":["FIG. 19","FIG. 18"]},{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 20"},{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIG. 21"},{"@attributes":{"id":"p-0037","num":"0036"},"figref":["FIG. 22","FIG. 16"]},{"@attributes":{"id":"p-0038","num":"0037"},"figref":["FIG. 23","FIG. 17"]},{"@attributes":{"id":"p-0039","num":"0038"},"figref":"FIG. 24"},{"@attributes":{"id":"p-0040","num":"0039"},"figref":"FIG. 25"},{"@attributes":{"id":"p-0041","num":"0040"},"figref":"FIG. 26"},{"@attributes":{"id":"p-0042","num":"0041"},"figref":"FIG. 27"}]},"DETDESC":[{},{}]}
