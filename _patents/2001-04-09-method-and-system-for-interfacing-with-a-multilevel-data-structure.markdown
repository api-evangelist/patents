---
title: Method and system for interfacing with a multi-level data structure
abstract: The present invention provides a method and system for interfacing with a multi-level data structure by selecting a concept object stored in the multi-level data structure, displaying a first image representing the selected concept object, displaying one or more second images generally above the first image, and displaying a first connector connecting each second image to the first image. Whenever the selected concept object has one or more child concept objects, one or more third images are displayed generally below the first image, and a second connector is displayed connecting each third image to the first image. Whenever the selected concept object has one or more lateral concept objects, one or more fourth images are displayed generally on one or both sides of the first image, and a third connector is displayed connecting each fourth image to the first image.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07120646&OS=07120646&RS=07120646
owner: Health Language, Inc.
number: 07120646
owner_city: Aurora
owner_country: US
publication_date: 20010409
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION"],"p":["The present invention relates generally to the field of computer systems and, in particular, to a method and system for interfacing with a multi-level data structure.","As demonstrated by the Unified Medical Language System (\u201cUMLS\u201d), merging multiple incompatible terminology \u201cideas\u201d into one imposes a unity upon concepts that are not equivalent. This unification results in ambiguity of interpretation and a loss of structural integrity of the original coding system. While the UMLS has achieved the goal of imposing order upon unrelated data sets, it results in inappropriate representation of all the coding systems involved and, worse, true errors in the stated congruence of conceptual models.","Accordingly, there is a need for a multi-level data structure that provides a wide breadth of standardized knowledge, representing the concepts of every aspect of an enterprise. In addition, there is a need for a method and system that interfaces with the multi-level data structure and that enables easy access, use and maintenance of standardized knowledge relating to an enterprise.","The present invention provides a method and system for interfacing with a multi-level data structure that encompasses a wide breadth of standardized knowledge representing the concepts of every aspect of an enterprise. The multi-level data structure of the present invention provides concepts and relationships that provide controlled terminology completely capturing the language of an enterprise. Moreover, the multi-level data structure or knowledge model of the present invention provides for the accurate and complete representation of all terminology systems thereby maintaining the truth and integrity of each of those terminology systems.","In one representative embodiment of the present invention, an interface provides access to a multi-level data structure that has concepts and relationships that provide controlled medical terminology that completely captures the language of healthcare. The present invention also includes a multidimensional semantic content network. The interface of the present invention provides a language-modeling environment enabling the user to maintain and enhance the semantic content. A graphical user interface (\u201cGUI\u201d) is also provided with which a user can easily navigate in order to use and maintain the terminology content.","The present invention provides a method for interfacing with a multi-level data structure by selecting a concept object stored in the multi-level data structure, displaying a first image representing the selected concept object, displaying one or more second images generally above the first image, and displaying a first connector connecting each second image to the first image. Each second image represents a parent concept object of the selected concept object. Whenever the selected concept object has one or more child concept objects, one or more third images are displayed generally below the first image, and a second connector is displayed connecting each third image to the first image. Each third image represents a child concept object of the selected concept object. Whenever the selected concept object has one or more lateral concept objects, one or more fourth images are displayed generally on one or both sides of the first image, and a third connector is displayed connecting each fourth image to the first image. Each fourth image represents a lateral concept object of the selected concept object.","The present invention also provides a computer program embodied on a computer readable medium for interfacing with a multi-level data structure. The computer program includes code segments for selecting a concept object stored in the multi-level data structure, displaying a first image representing the selected concept object, displaying one or more second images generally above the first image, and displaying a first connector connecting each second image to the first image. Each second image represents a parent concept object of the selected concept object. Whenever the selected concept object has one or more child concept objects, one or more third images are displayed generally below the first image, and a second connector is displayed connecting each third image to the first image. Each third image represents a child concept object of the selected concept object. Whenever the selected concept object has one or more lateral concept objects, one or more fourth images are displayed generally on one or both sides of the first image, and a third connector is displayed connecting each fourth image to the first image. Each fourth image represents a lateral concept object of the selected concept object.","In addition, the present invention provides a system for interfacing with a multi-level data structure that includes a computer, a display communicably connected to the computer, a memory communicably connected to the computer for storing the multi-level data structure, and a computer program resident on the computer. The computer program selects a concept object stored in the multi-level data structure, displays a first image representing the selected concept object, displays one or more second images generally above the first image, and displays a first connector connecting each second image to the first image. Each second image represents a parent concept object of the selected concept object. Whenever the selected concept object has one or more child concept objects, one or more third images are displayed generally below the first image, and a second connector is displayed connecting each third image to the first image. Each third image represents a child concept object of the selected concept object. Whenever the selected concept object has one or more lateral concept objects, one or more fourth images are displayed generally on one or both sides of the first image, and a third connector is displayed connecting each fourth image to the first image. Each fourth image represents a lateral concept object of the selected concept object.","While the making and using of various embodiments of the present invention are discussed herein in terms of a controlled medical vocabulary engine, it should be appreciated that the present invention provides many applicable inventive concepts that can be embodied in a wide variety of specific contexts. The specific embodiments discussed herein are merely illustrative of specific ways to make and use the invention and are not meant to limit its scope in any way.","The present invention provides a method and system for interfacing with a multi-level data structure that encompasses a wide breadth of standardized knowledge representing the concepts of every aspect of an enterprise. The multi-level data structure of the present invention provides concepts and relationships that provide controlled terminology completely capturing the language of an enterprise. Moreover, the multi-level data structure or knowledge model of the present invention provides for the accurate and complete representation of all terminology systems thereby maintaining the truth and integrity of each of those terminology systems.","In one representative embodiment of the present invention, an interface provides access to a multi-level data structure that has concepts and relationships that provide controlled medical terminology that completely captures the language of healthcare. The present invention also includes a multidimensional semantic content network. The interface of the present invention provides a language-modeling environment enabling the user to maintain and enhance the semantic content. A graphical user interface (\u201cGUI\u201d) is also provided with which a user can easily navigate in order to use and maintain the terminology content.","The controlled vocabulary engine and GUI of the present invention are centered around the Systematized Nomenclature of Medicine Reference Terminology (\u201cSNOMED RT\u201d) of the College of American Pathologists. Added to this core are concepts and relationships that completely capture the language of healthcare. Additional terminology sets can be added to supplement the clinical foundation supplied by SNOMED RT. These terminology sets may include administrative terminologies, such as ICD and CPT, pharmacy terminologies, MeSH, UMLS CUI codes, and others that are necessary for the management of clinical healthcare.","Referring to , a deployment model of a language engine  in accordance with the present invention is shown. The language engine  uses a three-tier deployment architecture, which includes a front tier  for client applications, a middle tier  for application services and a back tier  for a knowledge base. This deployment model offers the benefit of proven services, such as scalability, fault tolerance, etc., while providing an application programmer with several alternatives to choose from, when it comes to integrating the language model and its content within their application. The multi-level data structure or language model and its content will hereinafter be referred to as \u201cthe Lexicon.\u201d","The Lexicon content provided by the present invention is unique in the industry in its breadth of coverage for Healthcare industry standards. In addition to providing SNOMED\/RT as the clinical foundation, the Lexicon contains the administrative terminologies needed in today's healthcare environment: The diagnosis and procedure codes (e.g. ICD 9 CM, ICD10, ICD 10AM) needed by billing applications; drug codes needed by pharmacy applications (e.g., FDB and Multum), MeSH codes needed by literature search engines and more. While SNOMED RT provides a clinical foundation, administrative terminologies are logically mapped to their SNOMED RT counterparts and to each other, as appropriate.","The main service mechanism is delivered using a three-tier deployment architecture with access provided through Enterprise JavaBeans (\u201cEJB\u201d) and Common Object Request Broker Architecture (\u201cCORBA\u201d). The present invention facilitates local, enterprise-specific modifications and additions to the terminology content. New concepts can be added and linked to the reference standards. Unique concepts, such as charges, can be added. Microglossaries (term lists) can be managed for specific applications.","The front tier  client applications include various applications that provide access to the middle tier  application services and thus control of the language model and its content. The front tier  client applications may include LExScape , Vendor applications , LExIndex  and Web Browser . LExScape  is a graphical user interface (\u201cGUI\u201d) for browsing and manipulating the Lexicon. A screen shot of LExScape  is depicted in . LExScape  is a content management facility for use by administrators and content editors of the Lexicon. Vendor applications  are user specific applications that access the middle tier  application services. LExIndex  is a GUI for indexing (or tagging) documents with concept identifiers. Web Browser applications  allow users to access the middle tier  application services via a wide area network, such as the Internet.","The middle tier  application services include an Application Server  and a Web Server . The Application Server , such as BEA's WebLogic, provides the Enterprise Java Bean (\u201cEJB\u201d) server and container that provide access to the exposed object model via standard remote and serialized objects. The object model includes core objects, such as Relation , Concept , Term , Microglossary  and Facet , that will be discussed in more detail in reference to . The core objects , , ,  and  are implemented as visible EJB objects (i.e., accessible remotely), while supporting objects are passed as serialized objects. This model properly optimizes and makes trade-offs between round-trip method invocation time and EJB modeling. The EJB objects are also made available as CORBA objects (using IIOP). This provides support for distributed access from non-Java environments. The Application Server  may be hosted on either a Windows NT, Windows 2000, or AIX platform.","The Web Server  hosts servlets  that provides access to the Lexicon via an HTML\/XML data stream over HTTP. The Web Server  provides servlet-based functionality, such as indexing and searching, when the full power of LExScape  is not needed. For example, LExIndex  uses the servlet  to perform the indexing operation and retrieve the index results. When accessed by LExIndex  using an HTTP GET operation, the servlet  returns a simple web form that can be used to access the indexing services. When a URL or text buffer is submitted, an HTTP POST operation is sent back to the same servlet . In response to the POST operation, LExIndex  retrieves the contents of the indicated URL (or text buffer) and then indexes the document using the requested query set. The results of the index operation are returned to the client in an XML document.","The database tier  handles the relational database that holds the Lexicon, mapped into relational form. The middle tier  provides the necessary relational-to-object mapping for the database. Access to the database is made through JDBC from within the Application Server . Preferably, application programmers are not provided direct access to the back tier . The Lexicon utilizes a highly optimized, simple dB schema to hold the relational form of the Lexicon. The present invention supports the use of MS SQL Server 7.0 and Oracle 8i running on a Windows NT or Windows 2000 Server platform, and Oracle 8i running on AIX.","The present invention provides an application programming interface (\u201cAPI\u201d) having three major functional categories: (1) Direct and Related Object Access; (2) Searching; and (3) Exporting. Each of the objects in the model has a unique identifier. This identifier can be used to directly access the object on the server. For example, an application may store the Concept ID during data entry and then later access that Concept  via the stored ID. Each object API provides methods for accessing the related objects. For example, from a Concept , you can obtain all the associated Terms . From a Term , you can access the associated Concept . Navigation between objects is simple and intuitive.","The API includes a wide variety of search capabilities. Client applications can search for Concepts  by any of the following attributes: (1) by a specified Term type's text (the text of a Synonym, for example); by the text of any related Term  or by the value of a specified Facet , such as SNOMED code. On any of these searches, wildcards may be used. For example, one could search for Concepts  that have an ICD-9 code starting with \u201c207.\u201d Further, the search may be constrained to locating Concepts  in a specified Taxonomy  (), or of a given ConceptType  (). Client applications may search for Terms  by any of the following attributes: (1) by text; or (2) by text and a specified Term type (only misspellings, for example). In addition to the above search mechanisms, client applications can also search Microglossaries  for term text or facet values.","The present invention can be used to provide data to applications that will not be continually connected to the Lexicon server by exporting data to external files. Exports can be made of specified Concepts , entire sub-hierarchies, and Microglossaries . The client has control over exactly what data are exported and the format of the export, such as XML, Comma-separated Values (CSV), or Query Set (intended for use in generating query sets to be used by the LExIndex tools).","The system can be accessed by logging-on through the use of a user ID and password. Security permissions are assigned on an individual or group basis, through the user ID. Security permissions determine the types of modeling activities that a user can perform. Some users may be limited to merely viewing, while others may be given full access to the entire range of functions available in the system. A \u201ccontent administrator\u201d has the highest access. Only content administrators may make changes that can potentially alter SNOMED RT or other coding systems.","Now referring to , an object model  of a language engine in accordance with the present invention is shown. Object model  includes the following objects: Concept , Relation , Facet , ConceptType , RelationDefinition , FacetDefinition , Taxonomy , Microglossary , MicroglossaryEntry , Term , TermType  and TermPhrase . The Lexicon is exposed to client applications , ,  and  () via object model . Objects that need to be remotely accessible are implemented as EJB objects, while those that are not are implemented as serialized objects.  uses UML syntax to represent the Lexicon objects and their associations. Information regarding UML syntax can be found at the web site http:\/\/www.rational.com\/uml\/index.jtmpl.","The present invention provides an \u201caligned model\u201d for representing terminology standards. This means that each standard is uniquely represented and then alignments (relationships) are created between the concepts in each standard. The power of this object model  lies in the understanding that the relationships between terminology systems must be represented independently of the conceptual ideas within the individual terminologies. This approach to terminology modeling provides unparalleled ability to represent and access the multitude of terminology standards in a specified field while remaining open to extension and enhancement by the end-user.","The object model  is preferably a meta-model, which means that the customer can define entirely new model component types. The use of a meta-model enables the present invention to accurately and completely represent nearly any terminology standard. Instead of trying to force each standard into a rigid, pre-defined structure, the object model  can be adapted to represent the standard in its true form.","The meta-model components define the attributes, or properties, for instances of each model type. For example, ConceptType  defines instances of Concept objects , RelationDefinition  defines instances of a Relation , and FacetDefinition  defines instances of a Facet . This defining relationship is comparable to the relationship between a Class definition and a Class instance in object oriented programming languages.","Each of the major terminology systems, such as SNOMED RT, ICD-9 and MeSH, are defined as unique Concept types . This allows the present invention system to recognize that the \u201cideas\u201d represented in the terminology are defined within different logical realms. Even though Concepts  from different types can be related, they are not the exact same idea. For example, the concept of \u201cDiabetes Mellitus\u201d in SNOMED RT is related to the concept of \u201cDiabetes Mellitus\u201d in ICD-9, but they are fundamentally different ideas.","A RelationDefinition  essentially defines a unique way in which one or more Concepts  may be related. The present invention comes pre-configured with several useful RelationDefinitions . For example, the IS-A RelationDefinition  defines a hierarchical relationship between two Concepts  where one concept is the \u201cparent\u201d and one is the \u201cchild\u201d. Further, the parent is more general than the child and the child is more specific than the parent. Another example is \u201cSNOMED-ICD9\u201d, a relation that provides a correspondence between a SNOMED concept and it's closest (semantically similar) concept within ICD-9.","As mentioned above, Facets  are the mechanism used to store attributional data on an object within the Lexicon content. All of the core model components can have attributes, including Concept , Term , Relation , Microglossary , and MicroglosaryEntry objects . The FacetDefinition  specifies the properties of a type of Facet , including the restrictions on which types of object Facet  instances may be applied (e.g., a modeler may wish to restrict the use of a Facet  to only Term objects ), and constraints on the values the Facet  instances may hold (such as restricting values to integers or floating point numbers).","All of the meta-model components share a set of common properties: (1) a Globally Unique ID (\u201cGUID\u201d); (2) a localized display name; (3) a localized description; and (4) a nickname. The GUID is a unique ID of the object that is a large string of meaningless numbers used to uniquely identify all the major objects in the system. Preferably, the algorithm used to generate a GUID ensures the no two systems can generate the same GUID. The localized display name is specific to a given language locale, such as \u201cen_US\u201d for US English. Each component can have multiple display names associated with it so that multiple languages can be supported. Likewise, the localized description allows multiple descriptions to be associated with each meta-model component. The Nickname eases access from within customer written applications, meta-model components each have a text nickname. This nickname must be unique among all the objects of a given type. Finder methods allow an application to locate a component by nickname. Thus, an application can locate the ConceptType  for SNOMED RT by doing a lookup on the nickname \u201cSNOMED_RT\u201d instead of embedding the GUID (a string of 32 hex digits) constant within their application. This increases readability and maintainability of the customer written code.","Each major terminology system (such as SNOMED, ICD-9, or MeSH) is defined as a unique ConceptType . This allows the present invention to recognize that the \u201cideas\u201d represented in the terminology are defined within different logical realms. Even though Concepts  from different types can be related, they are not the exact same idea. For example, the concept of \u201cDiabetes Mellitus\u201d in SNOMED is related to the Concept  of \u201cDiabetes Mellitus\u201d in ICD-9, but they are fundamentally different ideas.","The use of ConceptTypes  is not limited to representing medical terminologies. For example, assume that an enterprise wants to store within the lexicon supplies that can be consumed during various procedures. They can create a new ConceptType  to contain the supply objects and then relate each procedure to the supplies that are, or can be, used during that procedure. There is no limit to the types of data that can be modeled and correlated within the lexicon.","A RelationDefinition  essentially defines a unique way in which one or more Concepts  may be related. Each Relation  has a single \u201csource\u201d Concept  and the instance relates that source to one or more \u201ctarget\u201d Concepts . Since most terminology standards utilize a hierarchical, or taxonomic structure, the present invention comes with a parent\/child relation already defined. The parent\/child relation (also called an IS-A relation) defines a hierarchical relationship between two Concepts  where one concept is the \u201cparent\u201d and one is the \u201cchild\u201d, the parent being a more general idea than the child. The parent\/child relation also defines a classification system wherein the child is classified as a \u201ckind of\u201d the parent. For example, the Concept  of \u201cPeptic Ulcer\u201d is a child of \u201cGI Ulcer\u201d which is a child of \u201cDisease of GI tract\u201d which is (skipping some intermediate concepts) a child of \u201cDisease. Thus, \u201cPeptic Ulcer\u201d is a more specific form of \u201cGI Ulcer\u201d and it is classified as a \u201cDisease\u201d. Further, the Concept  of \u201cPeptic Ulcer\u201d has a relationship (of type \u201cAssociated Topography\u201d, as defined by SNOMED) to the \u201cUpper GI tract\u201d, meaning that this disease affects the upper GI tract.","SNOMED RT, for example, defines numerous \u201crole\u201d relationships. These roles provide additional semantic definition to the medical concepts that are being related. The present invention represents each of these role types using a RelationDefinition . Then, instances of the Relation  embody the specific relationships defined by SNOMED RT. A few of the roles are explained below for clarity.\n\n","Relations  allow one to richly articulate the complex interactions of medical information. In its simplest form a \u201crelation\u201d allows us to say that the clinical disease, \u201cDiabetes Mellitus\u201d is equivalent to the billing code ICD-9 \u201c250\u201d. Equivalent relations are often referred to as \u201ccrosswalks\u201d or \u201ccrossmaps\u201d and the present invention comes with a rich assortment of these crosswalks. Even simple relations such as these can be made more complex in the medical realm when one considers the reciprocity of relations. If we assert that \u201cA\u201d is related to \u201cB\u201d, it may also be true that \u201cB\u201d has some relation to \u201cA\u201d. The knowledge model supports the definition of such reciprocal relations, with the full understanding that they are not always true and must be carefully articulated. Further, relations between billing codes and clinical notions may not be one-to-one. That is to say that a given ICD-9 code may be more specific than, equal to, or more general than its related clinical Concept . The knowledge model allows such clarifications to be expressed with the \u201cRelationship\u201d property, see below for details.","But Relations  are useful for more than just saying that two things are equivalent. They provide a robust mechanism for specifying arbitrary types of relationship between objects. It is these complex relations that allow us to represent the information needed by medical logic modules, billing modules, rules engines, and more.","For example, a medical logic module might depend upon relations in the lexicon to support the following alerts: (1) alert the clinician to do an eye exam whenever the diagnosis of diabetes is made; and (2) if the diagnosis of meningitis is made, make sure the patient has neck stiffness and fever. In another example, a billing logic module might depend upon relations in the Lexicon to send an ICD-9 code (\u201c250\u201d) to a billing application each time a clinician enters a diagnosis of \u201cDiabetes Mellitus.\u201d In yet another example, a business logic module might depend upon relations in the lexicon to assert enterprise policy: (1) if an upper GI series is ordered, a GI consult is required; and (2) if a 5generation antibiotic is ordered, an Infectious Disease consult is required.","Each RelationDefinition  holds the properties that define characteristics of the instances of the relation type. The salient properties are listed below.",{"@attributes":{"id":"p-0071","num":"0074"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"161pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Property","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Displayable","Whether instances of this relation should be displayed"]},{"entry":[{},"(by default) within visual clients."]},{"entry":["Immutable","Indicates if, once an instance of this relation is created,"]},{"entry":[{},"it can be modified or removed by the standard modeler"]},{"entry":[{},"security level. This setting provides support for"]},{"entry":[{},"controlling the modifiability of relations defined by"]},{"entry":[{},"external standards (like SNOMED) or by vendor"]},{"entry":[{},"customers that wish to prevent their customers from"]},{"entry":[{},"modifying pre-defined relation instances."]},{"entry":["Hierarchical","Indicates if this relation is hierarchical in nature."]},{"entry":[{},"Hierarchical relations can be used by LExScape to"]},{"entry":[{},"provide a hierarchy view. By definition, the source"]},{"entry":[{},"Concept 122 is \u201cgreater than\u201d the target Concept 122"]},{"entry":[{},"in the hierarchy; i.e., the source is the parent and the"]},{"entry":[{},"target is the child."]},{"entry":["Inheritance","Indicates if facet values inherit along this relation"]},{"entry":["Inheritable","Indicates if this relation is inheritable along"]},{"entry":[{},"hierarchical lines. If true, then when a parent is added"]},{"entry":[{},"to a concept 122 (or a new child is created), then the"]},{"entry":[{},"parent's values for this relation will be inherited by"]},{"entry":[{},"the child 122."]},{"entry":["Cardinality","Either single (1:1) or multiple (1:M)."]},{"entry":["Ordered","For 1:M relations, indicates if the set contents are"]},{"entry":[{},"ordered."]},{"entry":["TypeRestriction","Indicates the restrictions, if any, on the source and"]},{"entry":[{},"target concept types. Possible values are:"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"112pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"None","No restrictions"]},{"entry":[{},"Equal","The types are not individually"]},{"entry":[{},{},"restricted, but the source and target"]},{"entry":[{},{},"must be of the same type."]},{"entry":[{},"LimitSource","Limits the source concept type to the"]},{"entry":[{},{},"type indicated in the SourceType"]},{"entry":[{},{},"property."]},{"entry":[{},"LimitTarget","Limits the target concept type to the"]},{"entry":[{},{},"type indicated in the TargetType"]},{"entry":[{},{},"property."]},{"entry":[{},"LimitBoth","Limits the source and target concept"]},{"entry":[{},{},"type to the types indicated in the"]},{"entry":[{},{},"appropriate property."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["SourceType","If used, this is a ConceptType ID indicating that this"]},{"entry":[{},"relation can only be applied to Concepts of that type."]},{"entry":["TargetType","If used, this is a ConceptType ID indicating that this"]},{"entry":[{},"relation can only be targeted at Concepts of that type."]},{"entry":["Relationship","In essence, how do the concepts 122 compare to each"]},{"entry":[{},"other. The options are:"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"112pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"None","The concepts are simply related, no"]},{"entry":[{},{},"comparison is being made."]},{"entry":[{},"Equal","They are equivalent concepts."]},{"entry":[{},"More general","The source Concept 122 is more"]},{"entry":[{},{},"general than the target Concept 122."]},{"entry":[{},"More specific","The source Concept 122 is more"]},{"entry":[{},{},"specific than the target Concept 122."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Note that \u201cMore general\u201d and \u201cMore specific\u201d are"]},{"entry":[{},"commonly used to relate coding concepts to foundation"]},{"entry":[{},"(clinical) concepts."]},{"entry":["Transitive","Indicates if this is a transitive relationship. That is, if"]},{"entry":[{},"Concept A is related to Concept B, which is related to"]},{"entry":[{},"Concept C, is Concept A related to Concept C?"]},{"entry":["Acyclic","If this Relation 120 is hierarchical, then this property is"]},{"entry":[{},"always TRUE. For non-hierarchical Relations, this flag"]},{"entry":[{},"indicates whether the server must enforce acyclic"]},{"entry":[{},"relationship graphs."]},{"entry":["Reciprocal","A flag indicating if this Relation 120 can be viewed in"]},{"entry":[{},"a reciprocal (inverse) manner. For example, the inverse"]},{"entry":[{},"of \u201cHas Parts\u201d is \u201cPart Of\u201d. Some relations may not"]},{"entry":[{},"reasonably be, or make no sense when inverted."]},{"entry":["ReciprocalName","If Reciprocal is TRUE, then this field provides the"]},{"entry":[{},"display name to use when referencing the reciprocal"]},{"entry":[{},"view of a relation."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"A FacetDefinition  defines the properties of facet values that can be applied to many of the core model objects. Facets  can be applied to Concepts , Relations , Terms , Microglossaries , and MicroglossaryEntries . Facets  are attributional data, often application-specific, associated with a model object.","Facet values are used to represent the \u201ccode\u201d values that most terminology standards associate with a conceptual object within the terminology. For example, the SNOMED Code associated with a specific concept is stored in a facet value on that Concept  object, and the SNOMED Description Id associated with a term is stored in a facet value on the Term  object. Similarly, the ICD-9 code is associated with an ICD-9 concept using a facet value.","Facets  are the typical place that an application would store information regarding a model object, such as a cost code, or ancillary ordering code for a Concept  that represents an orderable test. Another example, applicable to an e-commerce setting, would be to store identifiers indicating items for sale that are related to a specific symptom or diagnosis, such as syringes or blood test kits for Diabetes.","Each FacetDefinition  holds the properties that define characteristics of the instances of that Facet type. The salient properties are listed below.",{"@attributes":{"id":"p-0076","num":"0079"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Property","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Displayable","Whether instances of this Facet 128 should be displayed (by"]},{"entry":[{},"default) within visual clients."]},{"entry":["Value Type","Controls the type of values that can be specified in"]},{"entry":[{},"instances of this Facet 128. Options are:"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"String","Any value."]},{"entry":[{},"Integer","Values must be strings that are legal integer"]},{"entry":[{},{},"numbers, e.g., 12345."]},{"entry":[{},"Float","Values must be strings that are legal floating-"]},{"entry":[{},{},"point numbers, e.g., 54.321."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Immutable","Indicates if, once an instance of this Facet 128 is created, it"]},{"entry":[{},"can be modified or removed by the standard modeler"]},{"entry":[{},"security level. This setting provides support for controlling"]},{"entry":[{},"the modifiability of facet values defined by external"]},{"entry":[{},"standards (like SNOMED) or by vendor customers that"]},{"entry":[{},"wish to prevent their customers from modifying pre-defined"]},{"entry":[{},"facet instances."]},{"entry":["Inheritable","Indicates if this Facet 128 is inheritable along hierarchical"]},{"entry":[{},"lines. If true, then when a parent is added to a Concept 122"]},{"entry":[{},"(or a new child is created), then the parent's values for this"]},{"entry":[{},"Facet 128 will be inherited by the child."]},{"entry":["Cardinality","Either single or multiple. Single cardinality facets can only"]},{"entry":[{},"have a single value, while multiple cardinality facets may"]},{"entry":[{},"have multiple values. Cardinality has a specific impact on"]},{"entry":[{},"inheritable facets, as shown in the table below."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"Note that the Inheritability and Cardinality attributes of a FacetDefinition  interact as defined in the table below.",{"@attributes":{"id":"p-0078","num":"0081"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"84pt","align":"left"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Non-Inherited","Inherited"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"84pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Single","The Facet 128 may be given","The Facet 128 will apply to"]},{"entry":["Cardinality","only a single value and it will","the Concept 122 on which"]},{"entry":[{},"apply only to the Concept 122","it is mentioned and to all of"]},{"entry":[{},"on which the Facet 128 is","that Concept's 122"]},{"entry":[{},"mentioned. None of that","descendents. If a Concept"]},{"entry":[{},"Concept's 122 descendents","122 inherits the Facet 128"]},{"entry":[{},"are affected. In essence this","from multiple parents, only"]},{"entry":[{},"type of Facet 128 is local to","a single value will be"]},{"entry":[{},"the Concept 122 on which it","selected. Further, a Facet"]},{"entry":[{},"is placed (mentioned).","128 of this type placed"]},{"entry":[{},{},"(mentioned) on a given"]},{"entry":[{},{},"Concept 122 overrides any"]},{"entry":[{},{},"value it might inherit from"]},{"entry":[{},{},"its parents, and this new"]},{"entry":[{},{},"value is then inherited"]},{"entry":[{},{},"down to all the descendents"]},{"entry":[{},{},"of said Concept 122."]},{"entry":["Multiple","The Facet 128 may be given","The Facet 128 may be"]},{"entry":["Cardinality","one or more values and they","given one or more values"]},{"entry":[{},"will apply only to the Concept","and they will apply to the"]},{"entry":[{},"122 on which the Facet 128","Concept 122 on which it is"]},{"entry":[{},"is mentioned. None of that","mentioned and to all of that"]},{"entry":[{},"Concept's 122 descendents","Concept's 122 descendents."]},{"entry":[{},"are affected. In essence this","If a Concept 122 inherits"]},{"entry":[{},"type of Facet 128 is local to","the Facet 128 from multiple"]},{"entry":[{},"the Concept 122 on which it","parents, all the values from"]},{"entry":[{},"is placed (mentioned).","all the parents are"]},{"entry":[{},{},"accumulated. Any value for"]},{"entry":[{},{},"a Facet 128 of this type"]},{"entry":[{},{},"mentioned on a given"]},{"entry":[{},{},"Concept 122 is added to the"]},{"entry":[{},{},"set of values inherited to"]},{"entry":[{},{},"further descendents."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"The core, or central object within the Lexicon is the Concept . As described above, it represents a \u201cunique entity of medical domain knowledge.\u201d Its defining ConceptType  categorizes each Concept . Every Concept  has at least one parent Concept  and zero or more child Concepts  (determined by instances of the CHILD relation type). Concepts  that have no children are referred to as leaf Concepts .","A Concept  may represent something as broad as \u201cDiagnosis\u201d (i.e., the class of all diagnoses), to extremely granular entities necessary for clinical documentation, such as \u201cBiliary Calculus (or Gallstone).\u201d Concepts  are organized into a multi-axial hierarchy. This means that a Concept  can have multiple parents, i.e., it can reside in multiple classifications. For example, the Concept  representing \u201cBacterial Pneumonia\u201d is classified within \u201cInfection of Trunk\u201d as well as within \u201cBacterial Infectious Disease.\u201d Each Concept  should be unique and distinct from all other concepts.","Much of a Concept's  meaning stems from its relations to other concepts. Its parentage determines the classification of the Concept , while the Concept  itself determines one level of classification for all its descendents. Its non-hierarchical relations can specify additional semantic context. For example, the SNOMED Roles associate a Concept  with affected topographic location, morphologies, etc. Concept  objects may have an arbitrary number of Facets . However, essentially all the interesting data regarding a Concept  resides in other objects associated with the Concept  object. These objects are discussed below.","Terms  hold the words used to verbalize a Concept . Terms  are organized within language locales (such as \u201cen_US\u201d) to support international usage. Terms  are also the words used to document an encounter with a patient. When a physician documents that a patient has a broken leg, the phrase used to do so comes from the Term  associated with the Concept  of \u201cBroken Leg\u201d. Each Concept  can have numerous Terms  associated with it, but each Term  object is associated with exactly one Concept  object. Each Term  has a number of attributes that further define its applicability for different uses. The attributes are: (1) the language locale in which this Term  is used, \u201cen_US\u201d for example; (2) the text string, as in \u201cBroken Leg\u201d, (3) Display Term, which marks the Term  that should be used by default to display the associated Concept  (This term is the one LExScape uses to render the nodes in the Concept Display); and (4) the Term Type , which indicates the primary use of the Term . Term objects  may have an arbitrary number of Facets .","The various TermTypes  are listed below:",{"@attributes":{"id":"p-0084","num":"0087"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"147pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Synonym","The set of Synonym terms for a Concept 122 are"]},{"entry":[{},"all the standard ways of expressing the Concept"]},{"entry":[{},"122. The use of synonymous Terms 124 is the"]},{"entry":[{},"standard method for providing local variations in"]},{"entry":[{},"terminology, both for an Enterprise and for"]},{"entry":[{},"individual caregivers."]},{"entry":["Consumer Term","A \u201ccommon name\u201d or colloquialism for a medical"]},{"entry":[{},"Concept 122. For example, the Term \u201cPass out\u201d"]},{"entry":[{},"is a consumer Term for \u201cSyncope\u201d."]},{"entry":["Grammatical Variant","Grammatical variants, noun and verb tenses, etc.,"]},{"entry":[{},"of the preferred Term 124 or synonym. For"]},{"entry":[{},"example, \u201cnervousness\u201d vs. \u201cnervous\u201d, \u201cbreak\u201d"]},{"entry":[{},"vs. \u201cbroken\u201d."]},{"entry":["Abbreviation","An accepted abbreviation or shortened form. For"]},{"entry":[{},"example, \u201cCoronary Artery Bypass Graft\u201d is often"]},{"entry":[{},"abbreviated as \u201cCABG.\u201d"]},{"entry":["Misspelling","A common misspelling of another Term 124."]},{"entry":[{},"Misspellings can be entered to aid in searching,"]},{"entry":[{},"especially when supporting lay people. Note that"]},{"entry":[{},"misspellings should never be used to document,"]},{"entry":[{},"but are useful information for locating Concepts."]},{"entry":["Short","Many coding systems use lengthy, detailed text"]},{"entry":[{},"strings to refer to Concepts 122. These lengthy"]},{"entry":[{},"strings are often truncated for use by applications."]},{"entry":[{},"The only difference between these terms is the"]},{"entry":[{},"length, or detail, of the phrase. This term type"]},{"entry":[{},"indicates a \u201cshort\u201d phrase for the Concept"]},{"entry":[{},"122. Note that the determination of what is short,"]},{"entry":[{},"medium, or long is up to the creators of the"]},{"entry":[{},"coding system."]},{"entry":["Medium","A \u201cmedium\u201d length phrase."]},{"entry":["Long","A \u201clong\u201d phrase."]},{"entry":["Coding Modifier","The term type \u201cCoding Modifier\u201d indicates a term"]},{"entry":[{},"that must be used in the context of the hierarchy"]},{"entry":[{},"in which it lives. An example from ICD-10 is a"]},{"entry":[{},"term \u201cLips\u201d. Out of the context of the hierarchy,"]},{"entry":[{},"it is not meaningful (worse it is ambiguous)."]},{"entry":[{},"However, within the context of the hierarchy, this"]},{"entry":[{},"term indicates a sub-classification of the parent"]},{"entry":[{},"concept (\u201cMalignancy of\u201d) clarifying its usage to"]},{"entry":[{},"the \u201cLips\u201d."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"Each Concept  object may have an arbitrary number of Relation  instances associated with it. A Relation  is a connection between one or more Concepts . A relation  provides an explanation for the way in which two concepts interact with one another. IS-A (parent-child or hierarchical) relations suggest a relation in which the parent concept is larger\/broader and the child concept is more granular. Each Relation  instance holds the Concept Id (GUID) of the source Concept  and the target Concept(s) . All the pertinent information regarding the usage of the Relation  is specified in the RelationDefinition . Each instance of a Relation  is either mentioned or inherited. When a Relation  is created on a given source Concept , the Relation  is mentioned on that Concept . If the RelationDefinition  indicates that the Relation  is inheritable, then inherited instances of the Relation  will be added to all the descendents of the original source Concept . Note that in each inherited Relation , the source Concept  is the current descendent, not the original source Concept . Inherited Relation  instances cannot be modified. Relation  objects may have an arbitrary number of Facets .","A role relation is a special type of relation strictly defined by SNOMED to suggest horizontal relations that are definitional and not assertional. Example: \u201cAsthma\u201d has topography \u201ctracheobronchial tree\u201d is a SNOMED role relation. It relates two distinct concepts (a diagnosis and a body part, in this example) in a defining way.","Arbitrary Relations can be used in many ways to associate concepts of interest. For example, a SNOMED clinical diagnosis can be related to its ICD billing code. This would permit an interaction between a clinical documentation system and a billing application. Or an agency might wish to link a clinical diagnosis with its common symptoms to fuel a decision support system.","A FacetDefinition  defines each Facet  instance. The core model objects can have Facets  that hold attributional information about the object. Facets  are the typical place that an application would store information regarding an object, such as a cost code, or ancillary ordering codes. Facets  are also used to hold the \u201ccode\u201d values defined by most terminology standards. Facets  can be applied to the following object types: (1) Concept ; (2) Term ; (3) Relation ; (4) Microglossary ; and (5) MicroglossaryEntry .","When applied to Concept  objects, each instance of a Facet  is additionally defined as mentioned or inherited. When a Facet  is created on a given Concept , the Facet  is mentioned on that Concept . If the FacetDefinition  indicates that the Facet  is inheritable, then inherited instances of the Facet  will be added to all the descendents of the original Concept . Inherited Facet  instances cannot be modified, but they can be overridden by mentioning an instance of the Facet  on a descendent of the original Concept . The cardinality of the Facet  determines how inherited and mentioned Facets  interact.","Each Concept  is uniquely categorized by its defining ConceptType . Concepts  may be additionally categorized into Taxonomies . A Taxonomy  object is applied to a single Concept  object and defines a named sub-hierarchy of the Lexicon content. All the descendents of the target Concept  are part of the Taxonomy . The taxonomy name can then be used to constrain certain operations, such as searching, to Concepts  that reside within the sub-hierarchy. For example, the \u201cDisease\u201d taxonomy refers to the entire sub-hierarchy containing the Concept \u201cDisease\u201d and all of its descendants. Enterprises may specify their own names for identified sub-hierarchies and use them to bound searches or control exports.","As the name implies, a Microglossary  is a subset list (micro) of Terms  (glossary) from the Lexicon allowing users to view a custom subset of the Lexicon content rather than viewing the entirety of the Lexicon content. These Term  lists can be used for any purpose, at the discretion of the application designers. Typical uses are for creating \u201cpick\u201d lists for use within an application to speed structured data entry during an encounter. For example, a Microglossary  could be created that contains the top 25 chief complaints that a GP sees every day. Another example would be a list of medications that the Pharmacy has decided to carry for specific treatments, such as Beta-blockers. Microglossaries  are provided primarily for application use.","A Microglossary  contains an ordered list of MicroglossaryEntry  objects, described below, and an associated ExportContext. A Microglossary  can be exported to an external file. At the time of the export, the application (or user via LexScape ) can select which attributes are to be exported. For example, an application may export the Term text, the related Concept ID, and the Concept's SNOMED ID. The ExportContext saves the settings from the last export performed on a Microglossary . This allows for an automated re-export using the same settings. Microglossary  objects may have an arbitrary number of Facets .","Facets  can be applied to entire Microglossaries  to provide application-level information about an entire list. For example, a Microglossary  containing blood tests required for management of pregnant patients may have a Facet  that contains an instruction to display this list only for Obstetric encounters. Similarly a Microglossary  containing drugs to treat asthma in children might have a Facet  to constrain display of the list to encounters with pediatric patients.","Each entry in a Microglossary  contains the following: (1) the TermPhrase , which is an object holding one or more Term  references; and (2) a set of Facets . Facet values placed on a MicroglossaryEntry  provide a mechanism to associate data with a Term  \u201cin context\u201d of the MicroglossaryEntry . Facet values associated with a MicroglossaryEntry  are intended to provide a simple storage area for use by the application developer. With proper application support, this allows individual caregivers to manage their own term lists.","As another example, a Pharmacy could provide a Microglossary  of drugs orderable for certain conditions, in this case Beta-blockers. Based upon negotiated contracts, supply, or other factors, the Pharmacy manager will determine the \u201cBeta-blocker of choice\u201d on a semi-regular basis. Instead of having to notify every prescribing physician, the Pharmacy manager could simply assign a DRUG_CHOICE of \u201cBETA1\u201d to the drug of choice. Now, the physician that wants to prescribe a Beta-blocker and doesn't need a specific drug (based on other findings) can simply order \u201cBETA1\u201d. This provides the Pharmacy with the control they need to manage costs in a manner that is extremely simple to administer.","The use of Facet values on MicroglossaryEntry  objects provides for \u201cin context\u201d information, i.e., the facet value is unique to the combination of Microglossary  and Term . It is often inappropriate to place a Facet value on the Term  object, since there is no \u201ccontext\u201d for the Term  object. In the example above, it might not be appropriate to place the \u201cBETA1\u201d facet value on the Term \u201cAtenolol\u201d, so the value is placed on the MicroglossaryEntry  in the specific formulary (Microglossary ) in which it is located. In another formulary, possibly for use at a different clinic, Atenolol may not be the preferred beta-blocker, and in that MicroglossaryEntry  it would not have the \u201cBETA1\u201d facet value.","A TermPhrase  is an ordered set of one or more Terms  that represent a collection of Concepts , such as \u201cDialysis without complications\u201d. TermPhrase  objects live strictly within a given MicroglossaryEntry  object. They have no life beyond their use in a Microglossary . Each TermPhrase  holds either a single term, or multiple, ordered Terms . If the TermPhrase  holds multiple Terms , it is said to be compound. Compound TermPhrase  objects are primarily used for rapid documentation and to handle combinatorial coding sets required by applications. A new Concept  could be created to represent the combination of Terms , but that could lead to combinatoric explosion and general, non-useful clutter within the Lexicon. The TermPhrase  object should address existing incompatibilities between coding schemes of vastly different granularities that could not otherwise co-exist in the same data source.","Referring now to , an illustrative example of the LexScape  graphical user interface display in accordance with the present invention is shown. LexScape  provides a fully graphical, highly intuitive, interface with which users navigate the multidimensional semantic network of the Lexicon content. LExScape  provides the language-modeling environment used to maintain and enhance the Lexicon content. The display  includes several adjustable viewing areas. Concept display  is the viewing area of the graphical user interface (\u201cGUI\u201d) where the lexicon is depicted graphically. The selected or focus concept  is the concept that is being worked on. Images representing the concepts or concept objects are typically displayed as text strings, which is usually the name of the displayed concept. Its facets and relations are listed in attribute panel . Lateral relation  depicts other concepts connected to the focus concept. A line or other type of connector between the two represents either a lateral relation or navigational line, such as navigation line . The appearance of a target concept and line connecting it with its source concept is an aid to navigation that remains only for the duration of the current work session. Pushpin  enables the user to stack multiple attributes panels  or term facet panels . The user can click pushpin  to retain a panel while navigating to other concepts. Clicking a panel tab brings that panel to the front. To remove a tacked panel, the user clicks that panel's tab to bring it to the front and then clicks pushpin  to release it.","Attribute panel  lists the lateral relations and facets of focus concept . Concept details  contain details relating to focus concept  such as its unique identifer, type, and taxonomy. Term panel  lists names for focus concept . Term panel  also indicates such information as the display name, a retired term, text and type for focus concept . Workbench  is the work area where the user can temporarily store terms and term phrases while modifying them. Microglossaries tab  displays the microglossaries panel. This panel will be blank until a microglossary has been created. Term facets tab  displays the term facets panel. Relation facets tab  displays the relation facets panel. Relation facets provide arbitrary data that may be stored in relations. Term phrase editor tab  displays the term phrase editor that is used to build phrases that can be stored as microglossary entries. Status bar  displays informational messages about system status and activities.",{"@attributes":{"id":"p-0100","num":"0103"},"figref":["FIG. 3B","FIG. 3A"],"b":["310","315","320","311","317","313","313","311","311","323","319","321"]},"Before the user can create and modify such object values as concepts, facets, relations and microglossaries, the user must first define the objects. The present invention provides many predefined objects such as concept type, relation definition, facet definition and microglossary definition. When the user begins adding objects and values by adding new concepts and facets, the first step is to decide the type of object or value to be added. To view a list of predefined object types, the user selects the appropriate \u201cEdit [object type] Definitions\u201d in the \u201cEdit\u201d selection from the menu bar at the top of the main GUI display as shown in . For example, if the user wants to see a list of relation types, the appropriate selection would be \u201cEdit Relation Definitions.\u201d The list appears as part of a dialog box that also allows the user to create new objects, delete objects and edit objects.","In addition, a user can open multiple main windows at one time. A new window is opened by selecting the \u201cNew Window\u201d entry from the File menu, or by pressing a button on the toolbar. The new window is initially focused on the concept that was the focus concept of the window from which the \u201cnew window\u201d operation was performed. Each window may be navigated independently. Drag and drop operations work between main windows. Using \u201cside by side\u201d windows dramatically simplifies the creation of lateral maps between concept types.",{"@attributes":{"id":"p-0103","num":"0106"},"figref":"FIG. 4","b":["405","410","415","420","425","430","435","415","440","440","445","450","420","455","460","425","430","435","465","470","475","480","485"]},{"@attributes":{"id":"p-0104","num":"0107"},"figref":"FIG. 5","b":["505","510","510","515","535","555","520","540","555","525","545","555","530","550","555","560"]},"There are several navigation methods that may be employed: the concept display, the GO menu, bookmarking or by term. Each of these methods can be easily accessed through the main GUI display as exemplified by . Additionally, the present invention provides methods of temporary linking multiple aspects together for easy access through the usage of a \u201cpushpin.\u201d The pushpin enables the user to retain concept, term facet and relation facet panels by stacking multiple panels of the same kind for comparison purposes.","Navigation through the concept display is accomplished by clicking on the concept as shown in the main GUI display as shown in . The new concept then becomes the focus concept. A focus concept can indicate, through the use of colors, its relationship to other concepts (i.e., parents, children, and facets). For example, the display of a blue background when the mouse cursor is placed over a focus concept can indicate that the concept has children. A green background could indicate that the focus concept is a \u201cleaf concept\u201d (i.e. one that has no children).","Navigation through the use of the GO menu is accomplished by selecting \u201cGO\u201d from the menu bar at the top of the main GUI display as shown in . This functions in a manner similar to a WEB browser. The \u201cGO\u201d menu item \u201cremembers\u201d the locations within the concepts that the user has accessed and displays these locations in a list. The user can select the desired location from the list and will then be returned to that location. The \u201cGO\u201d menu item is reset when the user returns to the top-level concept.","Navigation through the use of bookmarks is a two-step process. First, the bookmark must be set. This can be accomplished in a variety of ways. The first way is by right-clicking the desired concept and then selecting \u201cBookmark this Concept\u201d from the menu that is displayed. The second way is by navigating to the concept and then selecting \u201cBookmark\u201d from the \u201cBookmarks\u201d menu item on the main GUI screen as displayed in . Alternatively, the user can select a concept and then click the \u201cBookmark\u201d icon on the toolbar as shown on the main GUI screen of . To return to a desired concept, the user can select the \u201cBookmarks\u201d menu item from the main GUI screen as shown in . This also functions in a manner similar to a WEB browser. A list of bookmarks will be displayed, from which the user can select the desired concept in order to navigate to that concept. By double-clicking a concept listed in attribute panel , term panel , search results or a microglossary, the user can be navigated to the desired concept.",{"@attributes":{"id":"p-0109","num":"0112"},"figref":"FIG. 6","b":["605","610","615","620","625","630","635","640"]},"Searches can be performed in a variety of ways, such as exact match, contains and fuzzy search. Searches can be restricted by taxonomy or concept type. There are two (2) ways to access the search function. First, the user can select \u201cSearch\u201d from the \u201cFile\u201d menu item as shown in the GUI display of . Alternatively, the user can select the \u201cSearch\u201d icon from the toolbar as shown in the GUI display of . Either of these methods opens the search dialog box.","The search dialog box allows the user to conduct a full text search or a search by term or by facet. Drop down selection boxes display lists of available terms or facets, depending on the type of search selected. The user can also select whether to restrict either the taxonomy or the concept type. Additionally, the user can choose the type of search methods from such options as: exact match; contains; starts with; and fuzzy. A text box enables the user to conduct searches on keywords not specifically found in either the term or facet drop down selection boxes. A full text type search is also available; this option implicitly inserts the \u201cand\/or\u201d operators between all terms entered in the text box. Search results are returned in groups of 25 in alphabetical order by default. Other types of sorts and groupings may alternatively be used. A user can also navigate by using the search results. For example, by double-clicking on a returned result, the user can display the concept. Right-clicking on a returned result can display a menu containing options such as activiate (navigate to the concept), show properties, add to exports or export now.",{"@attributes":{"id":"p-0112","num":"0115"},"figref":"FIG. 6B","b":["650","652","654","654","656","658","658","660","662","664","654","654","656","654","654","654","654","658","658","658","658","660","662","666"]},"Search results are displayed in box . Each result  is displayed on a separate line. A result  can be used to navigate as previously described. The user can jump forward in the search result list by pressing next  and can jump backward in the search result list by pressing back . Line  displays the location of the user in the results list. The screen is closed by pressing close .","A taxonomy is a division of items in two ordered groups, categories, or hierarchies. Medical information, for example, can best be present within hierarchies. In the present invention, a taxonomy is a hierarchy of concepts. For example, \u201cprocedure\u201d is a taxonomy. All the children of \u201cprocedure\u201d are a part of that taxonomy. The top level of a taxonomy is the root concept. The root concepts of the present invention are defined by the enterprise in which it is used. For example, the root concepts for the healthcare industry are: SNOMED RT; HCPCS 2000 (HCFA Common Procedure Coding System); ICD-10 (International Statistical Classification of Disease and Related Health Problems, Tenth Revision); ICD-10 AM (International Statistical Classification of Disease and Related Health Problems, Tenth Revision Australian Modification); CPT (Physicians' Current Procedural Terminology); and ICD-9 CM (The International Classification of Diseases: 9Revision-Clinical Modification). Users can define new taxonomies at any level below the root level. When a user defines a new taxonomy, the user does not create a new hierarchy by giving a name to a portion of an existing hierarchy. Identifying new taxonomies can optimize searching. For example, a cardiologist doing modeling solely in the area of cardiac disease could create a taxonomy with the concept \u201cmyocardial disease\u201d as its top-level concept. This would enable searches that are restricted to this taxonomy.",{"@attributes":{"id":"p-0115","num":"0118"},"figref":"FIG. 7","b":["705","720","755","720","725","730","735","710","710","715","710","740","745","750","755"]},"A user can create new taxonomies and delete those taxonomies that the user has created. To create a new taxonomy, the user navigates to the root-level concept under which the new taxonomy will be placed. Then, the user selects \u201cCreate Taxonomy\u201d from the \u201cEdit\u201d menu item on the GUI display as shown in . A dialog box that allows the user to enter the name of the new taxonomy will then be displayed. After entering the name, the user selects \u201cOK.\u201d The time it takes to create a new taxonomy will be based on the number of concepts in the custom taxonomy. Status messages may be displayed to update the user as to the progress of the creation. A status bar may also supply additional messages related to the creation. Once the new taxonomy is created, it will be displayed in the GUI screen as shown in .","To remove a taxonomy, the user navigates to the root-level concept of the custom taxonomy. Then, the user selects \u201cRemove Taxonomy\u201d from the \u201cEdit\u201d menu item as shown on the GUI display of . The present invention prevents the user from removing a taxonomy if the root-level concept has not been selected. Once the correct level has been selected, a dialog box will be displayed the selected taxonomy. Multiple taxonomies can also be selected. They will all be displayed in the dialog box. The user can then select the one or more taxonomies (thereby reconfirming the choices) for removal and select \u201cOK.\u201d",{"@attributes":{"id":"p-0118","num":"0121"},"figref":"FIG. 8","b":["805","810","815","820","825","830","810","835","850","865","835","850","835","837","839","841","843","845","850","852","854","856","858","860","865","815","870","875","820","825","880","885","890","830"]},"The present invention enables the user to manage, export and retire concepts. Concepts can be shown or hidden. The user can clone concepts, add or remove facet values, add or remove terms, change term text, drag concepts to the workbench, include concepts on term phrases, include concepts in term lists (microglossaries), add or remove concepts, add or remove taxonomies.","Hiding or displaying concepts is accomplished by first choosing \u201cSelect Concept Type Displayability\u201d from the \u201cEdit\u201d menu of the GUI display as shown in . This results in a listing of available Concepts and their displayability settings in various locations of the present invention. Checking a setting displays all concepts of the selected type; removing a check hides the concept.",{"@attributes":{"id":"p-0121","num":"0124"},"figref":["FIG. 8B","FIG. 6","FIG. 3","FIG. 3"],"b":["872","874","876","878","878","670","876","330","874","305"]},"To create a new concept, the user navigates to the concept under which the new concept will be placed. The user then selects \u201cCreate Child Concept\u201d from the \u201cEdit\u201d menu of the GUI display as shown in . This causes a dialog box to be displayed in which the user can enter the new concept name, set its facets and view its type. The child inherits the type from the parent. The user then selects \u201cOK\u201d and the new concept is created.","An alternative method for creating concepts is by cloning. This is accomplished by navigating to the concept to be cloned and making it the focus concept. The user then selects \u201cClone Concept\u201d from the \u201cEdit\u201d menu of the GUI display as shown in . This displays a dialog box containing the concept being cloned and allowing the user to enter a name for the new concept. The type is also shown, but again is unmodifiable. The user then selects \u201cOK\u201d and the new concept is cloned from the existing concept.","New concept types can also be created. This is accomplished by selecting \u201cEdit Concept Types\u201d from the \u201cEdit\u201d menu of the GUI display as shown in . A dialog box is displayed, listing available concept types available for modifications and deletions and containing an option for creating a new concept type. The selection of the \u201cNew\u201d option results in another dialog box. The user then can enter a new concept type name, a nickname and a description. If the new concept type name is not entered, the nickname will be used for display purposes. In this case, the nickname will be required. Alternatively, if the nickname is not entered, the new concept type name can be used in its place. In this case, the new concept type name will be required. The description is also optionally, but can be made mandatory. Selection of the \u201cOK\u201d button returns the user to dialog box containing the listing of available concept types. Selecting \u201cOK\u201d on this dialog box returns the user to the GUI display as shown in .",{"@attributes":{"id":"p-0125","num":"0128"},"figref":"FIG. 8C","b":["836","838","838","840","838","840","840","842","842"]},"A concept's properties can also be viewed and added. This can be accomplished by right-clicking the desired concept. The resultant menu displays such options as: show concept properties and add concept properties.","Concepts and their associated facets can also be exported into such formats as XML (extensible Markup Language), a query set and CSV (comma-separated values). This is accomplished by navigating to the concept, right-clicking on it and selecting either \u201cMark for Export\u201d or \u201cExport Now\u201d from the resultant menu. The first selection adds the concept to a list of concepts to be exported. This list can be accessed by selecting \u201cConcept Export Manager\u201d from the \u201cFile\u201d menu of the GUI display as shown in . This displays a dialog box containing selected concepts and their relations and descendents. The second selection adds the concept to a list of concepts to be exported and immediately commences the export procedure by displaying the dialog box containing selected concepts and their relations and descendents. The Export Manager can also be invoked from a button on the toolbar.","In this dialog box, the user has the option of deselecting the concept(s) and\/or their relations and\/or descendents. The user can further refine the export by selecting the \u201cEnable Export Filters\u201d option. This allows the user to include or exclude concepts based on facets. Any number of filters can be used. After making selections, the user clicks \u201cNext.\u201d The procedure then differs based on whether or not filters have been enabled.","If filters have been enabled, a dialog box is displayed allowing the user to define and add filters based on facets. Various types of filters can be used, such as \u201cinclude-if-present\u201d and \u201cexclude-if-present.\u201d Selecting \u201cNext\u201d resumes the basic export procedure.","At this point, the user is allowed to select the format into which the concepts will be exported. Again, the user selects \u201cNext\u201d to continue the export procedure. A dialog box is then displayed allowing the user to perform a variety of export-related functions such as specifying the export destination (for example, exporting to a new file or appending to an existing file) and testing the export. It is also possible to test the export and then save it to a file. Clicking \u201cFinish\u201d completes the export. The export may also be halted by selecting \u201cStop the Export.\u201d If the user selects CSV format, they may then select specific facets to be included as columns in the export. This option is not available for XML format since XML format contains all information on the concept being exported.","A concept that has been retired, has been removed from use but is still in the system. Retired concepts can be cloned, displayed or hidden. They may also be \u201cunretired.\u201d However, terms, facets or relations cannot be added to retired concepts. All of the descendents of a concept selected to be retired must also be retired or moved to become the children of other concepts before a concept can be retired. Additionally, when a concept is retired, its terms are also retired.","To retire a concept, the user navigates to the concept and right-clicks on it. Then, the user selects \u201cRetire Concept\u201d from the resultant menu. A confirmation box is then displayed. The user clicks \u201cOK\u201d to retired the concept. When displayed, retired concepts can be visually designated by such means as a special symbol.",{"@attributes":{"id":"p-0133","num":"0136"},"figref":"FIG. 9","b":["905","910","915","920","925","910","930","940","930","932","934","936","938","940","942","944","915","950","952","954","956","958","960","962","964","966"]},"Terms give names to concepts. When creating a concept, the user must assign it at least one term so that the concept can have a display term. After a concept has been created, the user can add new terms to it, retire outdated terms, change a term's type and reassign the display term. As with retired concepts, retired terms can also be shown or hidden. Terms can be used to build term lists, also known as microglossaries. Terms have facets and types. Term facets enable the user to link codes or other data to terms in the same manner that concept facets link associated data with concepts.","There are a variety of term types, such as: synonym (for example, asthma), misspelling (for example, azma for asthma), abbreviation (for example MI for myocardial infarction), grammatical variant (for example reddish as a variant of red), consumer term (for example, heart attack for myocardial infarction), short (for example, exploratory heart surgery), medium (for example, cardiotomy, exploratory w\/removal, FB; w\/o bypass), long (exploratory heart surgery with removal of foreign body; without bypass), coding modifier (external upper lip). Coding modifiers represent a portion of a diagnosis, procedure, or other entity. They are used in a coding system to reduce text by omitting the common part of a statement that would be repeated for a series of codes. For example, one group of coding modifiers from the ICD-10 series lists various areas of a lip (C00.0-.9). Use of one of these coding modifiers also assumes the inclusion of the text from code C00 which is \u201cmalignant neoplasm of lip.\u201d","The present invention allows the user to import lists of words that can be used as terms. By creating a plain text file of these words and importing the file into the present invention through the \u201cImport Term Candidates\u201d option on the \u201cFile\u201d menu of the GUI display as shown in . Once imported, these words appear on the workbench as shown in the GUI display of .","To add a new term to a concept, the user navigates to the concept and right-clicks on it. From the resultant menu, the user then selects \u201cAdd Tern.\u201d A dialog box is then displayed enabling the user to enter the new term and select its type. The present invention checks to ensure that no identical active term exists for this concept in the current locale. If the term is unique, it is assigned and appears in the term panel for that concept.","To change a term type, the user right-clicks on the term and selects \u201cChange Term Type\u201d from the resultant menu (Terms may also be added, replaced and retired from the same menu.). A type list dialog box appears from which the user can select the new type. The change is completed when the user selects \u201cChange\u201d from the dialog box.","The display term for a concept can be changed if the concept has more than one term assigned to it. This is accomplished by right-clicking the term that will become the new display term and selecting \u201cMake Display Term\u201d from the resultant menu (This menu also allows the user to add terms, retire and replace terms, retire terms, change term type and access properties.). The present invention requests confirmation of the desired action. Selecting \u201cYes\u201d completes the action.",{"@attributes":{"id":"p-0140","num":"0143"},"figref":["FIG. 10A","FIG. 12"],"b":["1005","1010","1015","1010","1020","1030","1040","1022","1032","1042","1024","1028","1024","1038","1044","1048","1026","1036","1046","1015","1050"]},"Facets store values associated with concepts, terms, relations, microglossaries and microglossary entries. Facets have a variety of attributes, among them mentioned versus inherited, cardinality and inheritability. Facet values are \u201cmentioned\u201d only once. This is as related to the first concept to which it is added. Facet values can be inherited many times. If the facet is defined as inheritable, changes made to facet values on the concept where the facet value is mentioned affect not only the mentioned facet values, but also their descendents. Cardinality determines whether a facet can have only one, or multiple values of a particular facet on any given concept or term. Inheritability determines whether facet values are inherited by the concept's descendents.","Some facets store coding systems such as MeSH and LOINC. Others store information that will be used by external applications. For the healthcare industry, coding systems such as LOINC, MedicineNet, MeSH and UMLS, are stored in facets. Facets can be created, changed and deleted. Concept facets, term facets and relation facets are accessible from the GUI display as shown in . Two (2) types of microglossary facets currently are available: those associated with the entire microglossary, and those associated with entries in the microglossary. Microglossary facets are accessed by selecting the \u201cMicroglossary Manager\u201d from the \u201cFile\u201d menu of the GUI display as shown in . Microglossaries will be discussed in greater detail in relation to .","To manage facet definitions, the user selects \u201cEdit Facet Definitions\u201d from the \u201cEdit\u201d menu of the GUI display as shown in . A facet management dialog box is displayed, listing all existing facet definitions and allowing the user to edit, create and delete. Selecting \u201cNew\u201d will display a facet definition dialog box in which the user enters the facet name and\/or nickname (one or the other will always be required and must be unique) and an optional, but highly useful, description. Various other facet attributes can also be set, such as type restriction, cardinality, displayability, inheritability, immutability and applicabilities (for example, term and concept). Clicking \u201cOK\u201d after entering and setting the facet name and attributes creates the new type of facet and closes the facet definition dialog box.",{"@attributes":{"id":"p-0144","num":"0147"},"figref":"FIG. 10B","b":["1060","1064","1062","1066","1068","1070","1072","1074","1076","1078","1070","1078"]},"To modify an existing facet definition, the user would highlight the desired facet definition and select \u201cEdit\u201d on the facet management dialog box. This displays the facet definition dialog box with the data related to the selected facet definition displayed. The user can then make modifications to the facet definitions in the areas as described in relation to creating new facet definitions.","To delete an existing facet definition, the user highlights the desired facet definition and selects \u201cDelete\u201d on the facet management dialog box. The system then requests confirmation prior to performing the deletion.","The procedures for adding facet values to concepts, terms and relations are similar. In each case, the user must navigate to the concept, term or relation to which the facet value will be added. To add a facet value to a concept, the user right-clicks within the body of the attribute panel on the GUI display as shown in  (or on a row in the panel if a values are present). From the resultant menu, the user then selects \u201cAdd Facet.\u201d To add a facet value to a term or relation, selects the term or relation then clicks within the term or relations panel to access the context menu for that panel. To select a relation, the user then clicks its relation line in the concept display. Once the relation is selected, the name of the relation is displayed in the tab of the relation facets panel. To select a term, click that term in the term panel. In each case, the final result will be a dialog box listing the available facet types and a value data entry box. From the list, the user clicks the desired facet type and enters the facet's value. Finally, the user clicks \u201cAdd\u201d and the new facet value is displayed as related to the concept, term or relation that the user selected.","Facet values can also be modified and\/or deleted. To modify a facet value, the user right-clicks the facet value in the attribute or term panel of the GUI display as shown in . The user then selects \u201cEdit Facet Value\u201d from the resultant menu. A dialog box will then appear allowing the user to enter and new value for the facet. Clicking \u201cChange\u201d completes the process. To delete a facet value, the user right-clicks on the concept, term or relation from which the facet value is to be deleted. The user then selects \u201cRemove Facet Value\u201d from the resultant menu. The system requests confirmation of the action prior to processing the deletion request.",{"@attributes":{"id":"p-0149","num":"0152"},"figref":"FIG. 11","b":["1105","1110","1115","1120","1110","1139","1127","1129","1131","1133","1135","1137","1115","1145","1150","1149","1151","1153","1120","1155","1160","1165"]},"A concept is defined by its relations, which link two concepts. The present invention provides two (2) predefined relation types: hierarchical (parent-child) and lateral. New relations types can be created. Parent-child relations are created when new concepts are added. Existing concepts can be linked by adding new parent-child relations. This can be accomplished by adding a new parent to a child concept, or by adding a new child to a parent concept.",{"@attributes":{"id":"p-0151","num":"0154"},"figref":"FIG. 11B","b":["1112","1114","1116","1112","1114","1124","1112","1122","1114","1124","1112","1122","1126"]},"The new parent cannot already exist within the child's hierarchy, either as an ancestor or a descendent. If it does, the present invention will generate a message. The message may be simply an error message or may offer an alternative action such as replacing the parent. If such an alternative is selected, inheritable properties of the new parent are added to the child concept, retaining its inheritability.","To add a parent, the user drags the concept to which the parent is to be added to the workbench on the GUI display as shown in . Then, the user navigates to the concept to be added as the new parent and makes it the focus concept. The user drags the child concept from the workbench to an area below the new parent in the concept display. Alternatively, the parent concept could be dragged to the workbench, the child concept made the focus concept in the concept display, and the parent concept then dragged to an area above the child concept in the concept display. To remove a parent-child link, the user clicks the link and then confirms the removal for the system.","Lateral relations are not hierarchical. They may or may not define the focus concept. The present invention represents all SNOMED RT roles as lateral relations that define the source concept. Another type of lateral relation is a code set mapping, such as that which links SNOMED RT to ICD or CPT codes, but does not define either SNOMED RT or the coding concept. Code set mappings link a concept to another concept that represents a code in a set such as CPT or ICD-10. It is useful, for example, to link a clinical concept with an administrative coding concept.","To add a lateral relation, the user navigates to the concept that will be the target of the new relation and drags the concept to the workbench on the GUI display as shown in . Next, the user navigates to the concept that will be the source of the new relation and right-clicks in the body of the attribute panel of the GUI display as shown in . From the resultant menu, the user then selects \u201cAdd Relation.\u201d A dialog box is displayed containing drop down selection boxes that list available relations and available concepts. The user selects the relation type and the concept that had been previously dragged to the workbench. Finally, the user clicks \u201cAdd\u201d to establish the relation. A relation can also be created by dragging and dropping a concept from the workbench onto the attribute panel. In this case the add relation dialog appears, with the list of relation types already filtered down to those relation types that can legally have the focus concept as a source and the dropped concept as a target.","To create a new relation definition, the user selects \u201cEdit Relation Definitions\u201d from the \u201cEdit\u201d menu of the GUI display as shown in . A relation management dialog box is displayed from which the user can select a relation name and opt to add, edit or delete. Selecting \u201cNew\u201d displays a relation definition dialog box. Again, the user will enter either or both the name and nickname (one of which will be required and must be unique) and an optional description. Various relation attributes can also be selected such as: is reciprocal, reciprocal name, type restriction, source type, target type, hierarchical, inheritance relation, cardinality, ordered, transitive, acyclic, inheritable, relationship qualifier, displayable and immutable. Once all of the desired selections have been made, the user clicks \u201cOK\u201d to create the new relation type. The user is then returned to the relation management dialog box.",{"@attributes":{"id":"p-0157","num":"0160"},"figref":"FIG. 11C","b":["1154","1158","1156","162","1164"]},{"@attributes":{"id":"p-0158","num":"0161"},"figref":"FIG. 11D","b":["1170","1172","1172","1174","1172","1174","1174","1176","1176","1178","1180","1182","1184"]},{"@attributes":{"id":"p-0159","num":"0162"},"figref":"FIG. 12","b":["1202","1204","1206","1208","1210","1212","1214","1204","1216","1218","1220","1222","1224","1226","1228","1220","1230","1232","1234","1236","1208","1238","1240","1242","1244","1246","1242","1244","1248","1246","1250","1252","1254","1212","1256","1258","1214","1260","1262","1264","1266","1268","1270"]},"Microglossaries are custom lists made up of terms from the present invention and may also contain user-entered values. Microglossaries are built from terms, term phrases and facets. A microglossary might contain a list of commonly used drugs, major diagnosis areas, common procedures, or even a listing of ICD concepts. Microglossaries can be used as input to other applications to create, for example, a pick list. The following actions can be performed on microglossaries: add and delete terms; add, modify and delete term phrases; copy terms among open microglossaries; associate facets with the entire microglossary; build microglossary entries (one per row) by adding terms and term phrases; associate user-defined facets with entries; display concept and term facets associated with entries; delete entries (rows in the microglossary); delete entry values; and delete entire microglossaries.","Any term from any taxonomy within the present invention can be added to a microglossary. From the GUI display as shown in , display terms from the concept display, terms from the term panel and selected terms and term phrases from the workbench can be added to a microglossary. The display term from search results can be added to a microglossary. Selected terms and term phrases can be added to a microglossary from another microglossary.","Term phrases are built by dragging terms onto the workbench on the GUI display as shown in  and then arranging them in the term phrase editor. The individual terms used to build a term phrase retain their unique identifiers that had been assigned to them by the present invention at their creation. But, a term phrase is not automatically assigned a unique identifier. However, it may be possible to create an option whereby a user may alternatively define a default setting to accomplish this task. Editing functions in the term phrase editor includes selection of multiple terms and individual terms, rearranging\/reordering terms, adding terms, deleting terms. Once the desired phrase is created, the output option allows the user to send the created phrase to the workbench from which it can be dragged into one or more microglossaries.",{"@attributes":{"id":"p-0163","num":"0166"},"figref":"FIG. 12B","b":["1235","1237","1237","1237","1239","1237","1237","1241","1243","1235","1249","1235","1247","1245","1243"]},"All functions related to microglossaries are accessed by selecting \u201cMicroglossary Manager\u201d from the \u201cFile\u201d menu of the GUI display as shown in . The Microglossary Manager currently enables the user to view all current microglossaries, search microglossaries and manipulate microglossaries. The microglossary view may be arranged in a manner similar to the Windows Explorer system, using folders, group folders and sub-folders. Selecting a specific microglossary displays its description and its facets.",{"@attributes":{"id":"p-0165","num":"0168"},"figref":["FIG. 12C","FIG. 12D"],"b":["1200","1282","1288","1284","1286","1290","1292","1294"]},"To edit a microglossary, the user selects the microglossary and the \u201cEdit Microglossary Properties\u201d option on the \u201cAction\u201d menu of the Microglossary Manager. This results in the display of a dialog box that allows the user to modify the name, group name and description of the microglossary.","To create a microglossary, the user selects \u201cNew Microglossary\u201d from the \u201cAction\u201d menu of the Microglossary Manager. A dialog box is then displayed enabling the user to enter a name, group name and description for the new microglossary.","Microglossaries can be opened in a number of ways. First, the user opens the Microglossary Manager as described above. The user can then either double-click the desired microglossary or right-click the desired microglossary to display the context menu containing the \u201cOpen Microglossary\u201d option.","A microglossary entry is a row in the microglossary that contains a term or term phrase and may also contain the term's associated concept or term facets as well as microglossary entry facets. Any number of terms can be added to a microglossary any number of times. Terms can be added by dragging them onto the cell that contains the words \u201cno entries yet\u201d or on top of terms already listed. New entries are added to the bottom of the list. A couple of ways to add a concept's display term to a microglossary is by dragging the concept to a microglossary from the workbench or from the concept display, both on the GUI display as shown in , or by selecting \u201cAdd to Active Microglossary\u201d from the \u201cEdit\u201d menu of the GUI display as shown in .","Microglossary term phrase entries can be replaced by highlighting and then right-clicking the microglossary entry. The user then selects the \u201cEdit Term Phrase\u201d option from the resultant menu. Other terms and\/or phrases can then be used to build the new term phrase. Once the desired term phrase has been created, the user then selects the destination as either the workbench or \u201cReplace in Microglossary.\u201d The user can also edit existing phrases in microglossaries by dragging them back to the term phrase editor.","User-defined facets can be associated with either entire microglossaries or with individual entries (rows) within a microglossary. To add facets to an entire microglossary, the user first selects or creates an appropriate facet definition. Then, the user opens the Microglossary Manager as described above. Next, the user highlights the microglossary with which the facet definition is to be associated. A facet panel will become visible at the bottom of the Microglossary Manager. The user then right-clicks the facet panel and selects \u201cAdd Facet\u201d from the resultant menu. A dialog box appears with a drop down selection box from which the user can select an available facet. The label for the text data entry box indicates the type of data expected (string, floating point or integer, for example). The user enters the facet value in the data entry box and then clicks \u201cAdd.\u201d","Microglossary entry facets associate miscellaneous data with individual entries in a microglossary. To add facets to microglossary entries, the user locates or creates an appropriate facet definition. Then, the user opens the Microglossary Manager as described above and opens the microglossary to which the entry facets are to be added. Next, the user right-clicks the \u201cTerm Name\u201d column header and selects \u201cdd Entry Facet Column\u201d from the resultant menu. From the displayed dialog box, the user selects the name of the facet definition to be added and then clicks \u201cOK.\u201d Once the entry facet column has been created, entry facet values can be entered\/edited by typing directly into the cell in the table at the intersection of the entry row and facet column.","Concept and term facets can be displayed using the Microglossary Manager. After opening the desired microglossary, the user right-clicks on the \u201cTerm Name\u201d column header and selects either the \u201cDisplay Concept Facet Column\u201d or the \u201cDisplay Term Facet Column\u201d from the resultant menu. Select facets for inclusion in the microglossary by turning on their display values. The user then clicks \u201cOK.\u201d","To copy a term from an open microglossary the user hightlights, then right-clicks the term in the Microglossary Manager, then selects the \u201cCopy to Open Microglossary\u201d option from the resultant menu.","Individual cells (for entry facet columns), rows and columns can be deleted from microglossaries. To delete a microglossary entry, the user highlights, then right-clicks its \u201cTerm Name\u201d cell, the selects \u201cDelete Entry\u201d from the resultant menu. To delete an entry facet, the user highlights, then right-clicks the cell to be deleted, then selects the \u201cDelete [entry facet column name] values\u201d from the resultant menu.","Microglossary entries can be rearranged\/reordered. Columns can be reordered by clicking and dragging the column header. Rows can be sorted by value in a given column in either ascending or descending order. Rows can also be rearranged manually by clicking and dragging the entry.","Microglossaries can be copied. To accomplish this, the user highlights the microglossary to be copied and selects \u201cCopy Microglossary\u201d from the \u201cActions\u201d menu of the Microglossary Manager. To close a microglossary, the user right-clicks the desired microglossary in the Microglossary Manager and selects \u201cClose Microglossary\u201d from the resultant menu. To delete a microglossary, the user right-clicks the desired microglossary in the Microglossary Manager and selects \u201cDelete Microglossary\u201d from the resultant menu.","Microglossaries can be searched for terms or properties (name, group or description) or any combination of these elements. To search a microglossary, the user selects the \u201cSearch\u201d tab in the Microglossary Manager. Next, the user selects the search scope, such as properties, terms or both and a type of search, such as exact match, contains or starts with. Then, the user enters a search string into the text box and clicks \u201cSearch.\u201d Search results can be displayed any number of ways, including in a hierarchical manner similar to the listing of microglossaries in the Microglossaries Manager. Users can use microglossary search results to navigate by either double-clicking the microglossary in the search results or right-clicking the microglossary in the search results and selecting \u201cOpen Microglossary\u201d from the resultant menu.",{"@attributes":{"id":"p-0179","num":"0182"},"figref":"FIG. 12D","b":["1272","1272","1272","1274","1274","1274","1276","1278","1280","1281"],"i":["a","b ","c","a","b ","c"]},"Microglossaries can be exported for use in other applications. Microglossaries can be exported individually, as a set or entirely. As described above in relation to exporting concepts, the export file formats currently available are XML, CSV and query set. The export process places each microglossary in a separate file in a directory named after the microglossary group name. The export directory is currently specified in a separate properties file under the section \u201cExport Properties.\u201d","To export all microglossaries, the user selects \u201cExport All Microglossaries\u201d from the \u201cActions\u201d menu of the Microglossaries Manager. The export process for single and multiple microglossaries is similar to that previously described in relation to exporting concepts. To export a single microglossary, the user highlights the desired microglossary, right-clicks and either selects \u201cExport Now\u201d or \u201cMark for Export.\u201d The latter adds the microglossary to an export list. The former invokes the export process. To export numerous microglossaries, the user highlights and marks each microglossary, individually adding them to the export list.","While exporting all or a single microglossary automatically displays the list, marking microglossaries for export requires an extra step. The user must select \u201cExport Now\u201d from the \u201cActions\u201d menu of the Microglossary Manager. Eventually, each microglossary export procedure displays the list of microglossaries marked for export. At this point, the user can remove microglossaries from the list, include related concepts and\/or enable filters as previously described in relation to exporting concepts. After making selections, the user clicks \u201cNext.\u201d The procedure then differs based on whether or not filters have been enabled.","If filters have been enabled, a dialog box is displayed allowing the user to define and add filters based on facets. Various types of filters can be used, such as \u201cinclude-if-present\u201d and \u201cexclude-if-present.\u201d Selecting \u201cNext\u201d resumes the basic export procedure.","At this point, the user is allowed to select the format into which the concepts will be exported. If the microglossaries are to be exported in CSV format, additionally selections related to delimination will be required. As with Concept exports in CSV format, the user can select the set of facet values to export as columns in the output. The export may also be sorted by term text or by facet value. After the selections have been made, the user clicks \u201cNext\u201d to continue. The system then displays an export message indicating that the user may complete the export by selecting \u201cFinish,\u201d can the export by selecting \u201cStop Export\u201d and\/or save the export criteria, but do not export the microglossaries. The system displays status messages as the export progresses.",{"@attributes":{"id":"p-0185","num":"0188"},"figref":"FIG. 12E","b":["1253","1253","1253","1255","1253","1259","1253","1257","1257","1257","1257","1261","1263","1263","1263","1265","1267","1271","1269"],"i":["a","b ","c ","c ","c ","a","b","c ","d","a ","b","b"]},{"@attributes":{"id":"p-0186","num":"0189"},"figref":"FIG. 13","b":["1305","1310","1315","1320","1325","1330","1335","1320","1340","1345","1350","1355","1360"]},"Several of the elements of  can be resized and some user preferences can be set. For instance, the font size for concept display  of  can be modified. Located around focus concept  will be a circle. By clicking and dragging the circle, the user can resize the font. To shrink fonts in concept display , the user selects the circle and moves the mouse toward the center of the circle. To expand fonts in concept display , the user selects the circle and moves the mouse toward the edges of the GUI display. To resize the panels, the user places the mouse cursor over either a vertical or horizontal bar separating the panels. When the cursor turns into a double-sided arrow, the user then clicks and drags the bar to resize the panel.","There are several things that can be accomplished by setting user preferences: the user's preferred configurations can be saved for later use; e-mail information can be recorded to facilitate sending system error messages; facets to be included in the content display can be identified; and the type of value to be included in the attributes panel can be selected for relations. To access user preferences, the user selects \u201cEdit Preferences\u201d from the \u201cEdit\u201d menu of the GUI display as shown in .","The user can modify a wide variety of preferences, such as: restore last active concept; restore window position and dimensions; restore concept bookmarks; enable plex resizing. The last active concept is the concept that was in focus when the user last exited the system. If preferred, the system can restore that concept rather than returning the user to the root concept. Restoring window positions and dimensions restores the window settings established in previous sessions. Restoring concept bookmarks saves bookmarks. Enabling plex resizing turns on the circle in the concept display, enabling the user to resize display fonts. The user may also enter an e-mail address and SMTP host and set facet and relation display properties.","The user can also set navigation and modeling settings, such as: view coding concepts in navigation hierarchy, view retired concepts in navigation hierarchy; auto-replace subsumed parents on addParent; and restore term candidates. Viewing coding concepts in navigation hierarchy includes coding concepts in the concept display. View retired concepts in navigation hierarchy includes retired concepts in the concept display. Auto-replace subsumed parents on addparent, in effect, performs a delete parent on a child's current location, followed by an add new child to the new location when a user attempts to add a child that is already a descendent of the concept WITHOUT asking the user to verify the modification. Restore term candidates restores term candidates in the workbench from the previous session.",{"@attributes":{"id":"p-0191","num":"0194"},"figref":"FIG. 13B","b":["1326","1351","1356","1361","1311","1321","1327","1346","1348","1314","1316","1318","1337","1339","1343","1341","1346"]},{"@attributes":{"id":"p-0192","num":"0195"},"figref":"FIG. 14","b":["1405","1410","1415","1420","1425"]},"There are currently a limited number of predefined reports included in the present invention. They can be accessed from the \u201cReports\u201d menu item of the GUI display as shown in . These predefined reports are: duplicate terms, concepts with duplicate facet values, and branch factor. Duplicate terms creates a list of terms associated with concepts of the same type that have the same display term. After selecting this report, the user can select one or more concept types and apply those types as report restrictions. The user can also choose to \u201cIgnore Restriction.\u201d Concepts with duplicate facet values creates a list of concepts that share a facet with identical values. Branch factor reports concepts with greater than a user-specified number of children.",{"@attributes":{"id":"p-0194","num":"0197"},"figref":"FIG. 15","b":["1505","1510","1515","1520","1530","1535","1540","1545"]},"Java interface files can be generated using the present invention. There are currently two (2) main ways to accomplish this. The first is to extract the unique identifiers from the present invention and imbed them directly in the application. The second is to use the present invention to export literal constants of the unique identifiers as Java interface files.","When the present invention creates Java interface files by exporting literal constants of unique identifiers, it includes only identifiers for relation definitions, facet definitions, concept types and taxonomies. The generated interface files can then be included in an application so that these objects can be referenced by their nicknames, rather than by hard-coding the unique identifiers.","To generate interface code using the present invention, the user would select \u201cGenerate Interface Code\u201d from the \u201cFile\u201d menu of the GUI display as shown in . A dialog box is then displayed containing available object types, such as concept type, relation definition, facet definition and taxonomy. All are currently selected by default. The user can individually select and\/or deselect object types. The user then indicates the destination for the interface code either by accepting the given location, typing in the location or browsing the system to select the location. The user then clicks \u201cGenerate\u201d to generate code.","Now referring to , an illustration of a LExIndex  graphical user interface display in accordance with the present invention is shown. The end user determines the set of concepts used in the indexing operation by creating a custom query set. A query set is a subset of the concepts in the Lexicon chosen for relevance to the indexing task to be performed. All of the Terms  associated with each Concept  form the \u201cevidence phrases\u201d to determine when a concept is referenced in a given document. Using the Lexicon content to construct query sets, the LExIndex tools provide a powerful mechanism to tag documents with relevant Concepts . Concept-based indexing is a powerful model for organizing documents around the Lexicon Concept(s) that are referred to in the document.","While specific alternatives to steps of the present invention have been described herein, additional alternatives not specifically disclosed but known in the art are intended to fall within the scope of this invention. Thus, it is understood that other applications of the present invention will be apparent to those skilled in the art upon the reading of the described embodiments and a consideration of the appended claims and drawings."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The above and further advantages of the present invention may be understood by referring to the following description in conjunction with the accompanying drawings in which corresponding numerals in the different figures refer to the corresponding parts in which:",{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 3A"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":["FIG. 3B","FIG. 3A"],"b":["310","315","320"]},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 6A"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 6B"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 8A"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 8B"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 8C"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 10A"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 10B"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 11A"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 11B"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 11C"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 11D"},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 12A"},{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 12B"},{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 12C"},{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 12D"},{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 12E"},{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 13A"},{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIG. 13B"},{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIG. 14"},{"@attributes":{"id":"p-0038","num":"0037"},"figref":"FIG. 15"},{"@attributes":{"id":"p-0039","num":"0038"},"figref":"FIG. 16"}]},"DETDESC":[{},{}]}
