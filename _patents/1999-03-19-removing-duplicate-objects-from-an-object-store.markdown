---
title: Removing duplicate objects from an object store
abstract: A computer program for removing duplicate objects from an object store. The program allows the user to select which properties of the objects will be compared to determine equivalence. These properties are then read and a signature number is calculated based on the values of the those properties, using the cyclic redundancy code. Prior to the calculation of the signature, special cases are accounted for by modifying the properties. Such special cases can include: missing critical properties which can be calculated, text field formatting and leading and lagging spaces, order of attachments, order of categories, name properties, and recurring appointments. Once the signature values are calculated, objects with the same signature are, by definition, equivalent by the properties the user selected. Prior to discarding all but one of the equivalent objects, the program can check whether the object contains a link. As between two equivalent objects, the one with the link should be retained.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06901413&OS=06901413&RS=06901413
owner: Microsoft Corporation
number: 06901413
owner_city: Redmond
owner_country: US
publication_date: 19990319
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION"],"p":["This invention relates generally to computer utility programs and, more particularly, relates to computer programs which remove duplicate files or objects.","Computer users often use more than one computer during the day, inputting and changing information on many different computing machines. To provide to the user the most recent data, a synchronization is required between each of the machines on which the user has changed or added data. Synchronization involves a comparison of the files resident on one machine to the files resident on another. If the file only exists on one machine, then it is copied to the other. If both contain the file, then the most recent version will be copied from one machine to the other. In such a manner both machines will ultimately contain the same files, and the files contained on each machine will reflect the user's latest edits. If the more than two machines need to be synchronized, multiple synchronizations may be required.","Because of the nature of most synchronization software, multiple copies of the same file may be created. The files, containing insignificant variations, are not exactly the same, and may therefore be treated as two separate files by the synchronization software. The synchronization software will therefore copy each to the other machine, instead of comparing the two and copying only the most recent version. As a result, instead of having only the latest version, the user finds all of the previous versions available as well. This is a waste of computer resources, and can result in user confusion.","The problem is compounded when the files may be created and edited by someone other than the user. For example, if the user is using an information management program, such as Microsoft\u00ae OUTLOOK from Microsoft Corporation, multiple copies of identical files may be created, not only by the synchronization process between the user's machines, but also by the messages sent by others through an email system. For example, a user may receive an email message with an attached file. The same email message may then get forwarded to the user from a different colleague. Finally, the user may update the file attached to the message on a handheld computer and then synchronize it to the desktop computer. The user now has potentially three copies of the same message, and yet needs only one. However, because the messages are not strictly identical, the synchronization program will not recognize that they are the same file, and will copy each file to every machine. The user will therefore find three copies of the same message on both their handheld and desktop computers.","Therefore, the present invention is directed to a more flexible method for removing duplicate objects from an object store.","The present invention is also directed to a method of comparing objects based on user selected criteria and special cases, to determine whether two objects are duplicates.","The present invention provides a user interface, which allows the user to select which properties of the objects in the object store will be compared to determine equivalency. A unique identifying number can then be calculated based on the values of those properties. Objects which have the same number therefore have the same user selected properties, and are equivalent according to the user's criteria. Some properties may require modification prior to the calculation of the unique identifying number. For example, a telephone field should yield the same value whether the telephone number includes dashes between the area code, prefix and suffix; parentheses around the area code; or spaces between the area code, prefix and suffix. Thus, the dashes, parentheses, and spaces need to be removed prior to calculation, so that the same telephone numbers result in the calculation of the same unique identifying number, regardless of the format of the telephone number. Once two objects are calculated to have the same unique identifying number, and are thus considered identical, either one can be removed. However, some \u201cidentical\u201d objects may differ because one of the objects can contain a link to other objects. The object without the link should be the one removed, so that the user's changes to the remaining object can be accurately updated via the link. Therefore, prior to removal of \u201cduplicate\u201d objects, the system can check for links in the objects and remove the ones without links.","Additional features and advantages of the invention will be made apparent from the following detailed description of illustrative embodiments which proceeds with reference to the accompanying figures.","Turning to the drawings, wherein like reference numerals refer to like elements, the invention is illustrated as being implemented in a suitable computing environment. Although not required, the invention will be described in the general context of computer-executable instructions, such as program modules, being executed by a personal computer. Generally, program modules include routines, programs, objects, components, data structures, etc. that perform particular tasks or implement particular abstract data types. Moreover, those skilled in the art will appreciate that the invention may be practiced with other computer system configurations, including hand-held devices, multi-processor systems, microprocessor based or programmable consumer electronics, network PCs, minicomputers, mainframe computers, and the like. The invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment, program modules may be located in both local and remote memory storage devices.","With reference to , an exemplary system for implementing the invention includes a general purpose computing device in the form of a conventional personal computer , including a processing unit , a system memory , and a system bus  that couples various system components including the system memory to the processing unit . The system bus  may be any of several types of bus structures including a memory bus or memory controller, a peripheral bus, and a local bus using any of a variety of bus architectures. The system memory includes read only memory (ROM)  and random access memory (RAM) . A basic input\/output system (BIOS) , containing the basic routines that help to transfer information between elements within the personal computer , such as during start-up, is stored in ROM . The personal computer  further includes a hard disk drive  for reading from and writing to a hard disk , a magnetic disk drive  for reading from or writing to a removable magnetic disk , and an optical disk drive  for reading from or writing to a removable optical disk  such as a CD ROM or other optical media.","The hard disk drive , magnetic disk drive , and optical disk drive  are connected to the system bus  by a hard disk drive interface , a magnetic disk drive interface , and an optical disk drive interface , respectively. The drives and their associated computer-readable media provide nonvolatile storage of computer readable instructions, data structures, program modules and other data for the personal computer . Although the exemplary environment described herein employs a hard disk , a removable magnetic disk , and a removable optical disk , it will be appreciated by those skilled in the art that other types of computer readable media which can store data that is accessible by a computer, such as magnetic cassettes, flash memory cards, digital video disks, Bernoulli cartridges, random access memories, read only memories, and the like may also be used in the exemplary operating environment.","A number of program modules may be stored on the hard disk , magnetic disk , optical disk , ROM  or RAM , including an operating system , one or more applications programs , other program modules , and program data . A user may enter commands and information into the personal computer  through input devices such as a keyboard  and a pointing device . Other input devices (not shown) may include a microphone, joystick, game pad, satellite dish, scanner, or the like. These and other input devices are often connected to the processing unit  through a serial port interface  that is coupled to the system bus, but may be connected by other interfaces, such as a parallel port, game port or a universal serial bus (USB). A monitor  or other type of display device is also connected to the system bus  via an interface, such as a video adapter . In addition to the monitor, personal computers typically include other peripheral output devices, not shown, such as speakers and printers.","The personal computer  may operate in a networked environment using logical connections to one or more remote computers, such as a remote computer . The remote computer  may be another personal computer, a server, a router, a network PC, a peer device or other common network node, and typically includes many or all of the elements described above relative to the personal computer , although only a memory storage device  has been illustrated in FIG. . The logical connections depicted in  include a local area network (LAN)  and a wide area network (WAN) . Such networking environments are commonplace in offices, enterprise-wide computer networks, intranets and the Internet.","When used in a LAN networking environment, the personal computer  is connected to the local network  through a network interface or adapter . When used in a WAN networking environment, the person computer  typically includes a modem  or other means for establishing communications over the WAN . The modem , which may be internal or external, is connected to the system bus  via the serial port interface . In a networked environment, program modules depicted relative to the personal computer , or portions thereof, may be stored in the remote memory storage device. It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.","In the description that follows, the invention will be described with reference to acts and symbolic representations of operations that are performed by one or more computer, unless indicated otherwise. As such, it will be understood that such acts and operations, which are at times referred to as being computer-executed, include the manipulation by the processing unit of the computer of electrical signals representing data in a structured form. This manipulation transforms the data or maintains it at locations in the memory system of the computer, which reconfigures or otherwise alters the operation of the computer in a manner well understood by those skilled in the art. The data structures where data is maintained are physical locations of the memory that have particular properties defined by the format of the data. However, while the invention is being described in the foregoing context, it is not meant to be limiting as those of skill in the art will appreciate that various of the acts and operation described hereinafter may also be implemented in hardware.","In accordance with the invention,  illustrates an exemplary user interface for an information management program. By way of example only, one such information management program is Microsoft\u00ae OUTLOOK from Microsoft Corporation. An information management program can create computer readable objects with certain properties. An object, such as object  shown in , is defined as a set of properties . For example, each message shown in the \u201cInbox\u201d illustrated in  is an object. The properties of such an object can include the sender, the recipient, the subject, the date sent, the date received, and attachments. Each property , in , includes a property tag  and a property value . The property tag  can be a 32-bit number where the most significant 16 bits are the property ID  and the least significant 16 bits are the property type . The property value  can vary in length, depending on the property type . , , and  illustrate the properties for various types of objects which can exist in an object store of an information management program. As can be seen in , a MailItem, the message object from the Inbox of , can have many such properties.","Because of the numerous properties which can exist for a given object, it can be rare to find two objects which are identical, where each property in one object is the same as the corresponding property in the other object. Furthermore, the user may consider objects to be functionally equivalent without the objects necessarily being identical. The present invention provides the user with the ability to select which properties of the objects will be compared to determine functional equivalency.","As will be described in more detail below, once the user has selected the properties which will be used to determine function equivalency, the present invention reads all of the objects. The application need not obtain the value of all of the properties. Rather only the values of the critical properties (properties selected by the user to be compared) need be read. Once the critical properties have been read into the application, some will have to be modified because of special cases which will be explained further below. Once the properties have been read an modified, they are fed into a Cyclic Redundancy Check (CRC) calculator, which calculates a unique identifying value, or signature, from the values of the properties. The signatures are then sorted. The objects whose signatures are the same must, by definition, have the same values in the critical properties. Objects with the same signatures are, for the user's purposes, functionally equivalent, and only one such object is kept. In such a way all functionally equivalent duplicates are discarded.","Turning now to , in step  the user is given the option of changing or setting the properties which will be compared to determine equivalency. At step  the user is allowed to select the type of object which will be compared. As can be seen from , , and , different types of objects have different types of types of properties. Therefore, the user can select different properties to be compared depending on the type of objects which will be searched for duplicates. As an example only,  illustrates the steps of the application for three types of objects. At step , the user can select the properties to be compared for contacts objects, at step  the user can select the properties to be compared for calendar objects, and at step  the user can select task object properties to be compared. As will be known by those skilled in the art, the user can be presented with any number of types of objects at step . One exemplary user interface for presenting the user the option of selecting the properties to be compared is shown in FIG. .","Once the user has specified the properties of the objects which will be compared to determine equivalency, the application can begin, as indicated, at step  in FIG. . The application can first log into the object store at step . This may be required if the information management program is password protected, or otherwise requires a login to identify the user. The application then reads all of the objects in the object store of the information management program at step . The objects can be read using any one of a number of protocols, such as the Microsoft\u00ae OUTLOOK Object Model, or the Messaging Application Programming Interface (MAPI). An object is \u201cread\u201d by obtaining the data in each of the object's properties. To increase efficiency, the present invention need only obtain the data from the properties selected by the user, since only those properties will be used in computing the signature, as described in more detail below.","At step , in , the application can read the recurring events table. As will be known to those of skill in the art, information management applications often create separate objects should the user require a recurring event, such as a weekly meeting, a birthday or an anniversary. Such objects, which will be described in more detail below, can be stored in a table, so that all recurring events are located in one place. The present invention can read the objects in the table, whether or not any of the properties in those objects have been selected by the user. The properties of the objects in the recurring events table will aid the application in determining which duplicate objects in the object store can be removed, as will be described in more detail below.","At step , the application can modify the selected properties it has read. Certain properties may require modification to reflect the user's intent. For example, the user will consider the following telephone numbers to be identical: (123) 456-7890, 123-456-7890, and 123 456 7890. However, the numbers would not be identical to a computer, as spaces, parentheses, and dashes are all associated with different values. Thus, if the user had selected the telephone number property of an object as one of the properties to determine equivalence, two otherwise equivalent objects would be found to be different if the same telephone number was entered in different formats. The invention takes into account such special cases by temporarily editing appropriate properties prior to the calculation of the signature, to be described in more detail below.","One special case can be the problem of missing critical properties which can be calculated. For example, the user may have selected the duration property of a meeting to be included in the comparison process to determine equivalency. The duration property is thus a critical property: it is required for the comparison. However, some meeting appointment objects may not contain any data in the duration property; they may only have a start time and an end time. Given a start time and an end time, however, it is possible calculate the duration. Thus the duration property becomes a missing critical property which can be calculated. In such a case, the present invention will calculate the missing critical property prior to performing a comparison. Property relationships can be stored into the application so that the application can determine, when a critical property is missing, whether other properties can be used to derive the critical property. The other properties need not have been selected by the user. The application can, when attempting to calculate a missing critical property, read other properties not selected by the user. If the application finds that there are sufficient other properties, it can attempt to calculate the missing critical property.","A second special case which can be considered at step  in  is the case of a text field, such as a notes field in a contact object. A text field can have formatting options, such as font size or font color, which will be taken into account when the signature is calculated. The user, however, considers a message to \u201ccall Bill\u201d to be the same message whether it is in large or small print or in red or black text. To reflect this reality, the application removes all formatting temporarily, prior to the calculation of the signature.","A third special case, related to the second special case above, concerns file attachments within the text fields. The application can determine equivalency by reference to the names of the attached files. However, while the user may consider the attachment \u201c<file_A>, <file_Z>\u201d to be equivalent to the attachment \u201c<file_Z>, <file_A>\u201d the application, in comparing the properties, will find them to be different. To avoid this result, all of the attachments are organized into alphabetical order by their names prior to comparing the properties. In this way an identical set of attachments will yield the same signature value.","A fourth special case, which can also be considered at step  in , is the situation where an object contains multiple categories. Information management applications often group objects by categories to facilitate the presentation of information to the user. For example, email could be categorized as an \u201cemail with attachment\u201d and as an \u201cemail you responded to\u201d. The particular email message, the object in this case, would belong to the \u201cemail with attachment\u201d category and the \u201cemail you responded to\u201d category. The user would therefore find the message when viewing all the messages with attachments and when viewing all of the messages that the user responded to. The user would consider the order of the categories irrelevant: an email with the categories of \u201cemail with attachments\u201d and \u201cemail you responded to\u201d would be considered equivalent to an email with the categories of \u201cemail you responded to\u201d and \u201cemail with attachment\u201d. However, the category values are fed into the CRC calculator to determine a signature number, and CRC calculations are order-dependent. Thus, to match the user's expectations, the present invention can reorder the categories in alphabetical order, prior to calculating the signature.","A fifth special case can be the problem of white space. As is known by those of skill in the art, a space, such as the spaces between the words of a text file, contains a finite, non-zero value. Therefore, when calculating a signature, a telephone property containing \u201c123-456-7890\u201d as an entry would result in a different signature than the same property containing an entry of \u201c123-456-7890\u201d. However, the user would not expect that such leading or lagging spaces would affect the calculation. To reflect the user's perceptions, the invention can remove any leading or lagging spaces from entries in the properties. Spaces between the text, however, may contain significance to the user. For example, in a text field, the user may use spaces between text to line up items under columns. Therefore, spaces between the text are not removed by the present invention.","A sixth special case, which can be considered at step  in , involves \u201cname properties\u201d. The property ID , shown in , can be 16 bits long, as was explained previously. However, should the property ID value exceed 8000 in hexadecimal, the value may not remain constant among different copies of the information management application. Such values are known in the art as \u201cname properties\u201d. Thus, when such a property ID is used by the CRC calculator, in a manner to be described below, the signature values many be different among two objects which otherwise have identical critical properties. Therefore, to ensure consistency, the present invention can use the NameID reference of the property, rather than the property ID.","A seventh special case is the case of Boolean properties. As is known by those skilled in the art, a Boolean property of an object does not necessarily contain a value of either zero or one. Rather, a Boolean property with a value of zero is defined to be \u201cfalse\u201d, while a Boolean property with any non-zero value is defined to be \u201ctrue\u201d. Therefore, Boolean properties could have different values and yet still be \u201ctrue\u201d, thus yielding different signature numbers for two functionally equivalent properties. The present invention, therefore, can change any non-zero Boolean property value to one prior to the calculation of the signature. In this way all, Boolean properties set to \u201ctrue\u201d have the same value for comparison purposes.","An eighth special case deals with recurring appointments. The problem is that many information management applications store recurring appointments as one object which describes the recurrence pattern for another object. For example, an appointment object can be linked to a recurrence object where the appointment object contains the name of the appointment, the location, the phone number, and the recurrence object contains the start time, the end time, the duration, and the appointment frequency (weekly, monthly, etc.). Objects such as these are known as \u201cparent-child\u201d objects, where the appointment object is the original object, and hence the \u201cparent\u201d and the recurrence object was created when the user modified the appointment object to become a recurring event, and thus is called the \u201cchild\u201d. As will be explained further below, parent-child objects are linked together. However, because the child object may contain more properties than the critical properties selected by the user, the present invention can parse the child object to obtain only the values of the critical properties. In this way, recurring events with functionally equivalent recurring event properties, such as frequency and duration, are found to be equivalent.","Once these special cases are taken into account, and the properties are modified accordingly, the invention proceeds to step  in  where it calculates the signature value. As has been previously mentioned, the signature value is calculated using a CRC calculator. The signature value is dependent on the order in which the properties are presented to the CRC calculator. Therefore, to ensure that the properties are always presented in the same order, the application can sort the properties using the property tag . Once the properties are sorted, the property value  is first provided to the CRC calculator. Then the property tag  is provided to the CRC calculator. The CRC calculator uses the values of the property value  and the property tag  to calculate a unique signature using the Cyclic Redundancy Check in a manner known to those of skill in the art. The calculation of the signature value from properties is further described in the co-pending application entitled USE OF OBJECT SIGNATURE PROPERTY AS A SEARCH PARAMETER DURING SYNCHRONIZATION OF OBJECTS ON A COMPUTER by Wu, filed on Mar. 16, 1999, and assigned to the assignee of the present application, which is incorporated herein by reference in its entirety.","Once the signature number has been calculated, the numbers can be sorted, at step  in , to facilitate comparison. Equivalent signatures will be located adjacent to each other after sorting. Therefore, at step , the application need only search for signatures directly above and below a given signature in the list to determine if there are any which are equivalent.","In MAPI the \u201cEntryId\u201d property contains an object identifier which points back to the object. The invention can use the \u201cEntryId\u201d to determine which object corresponds to which signature. Thus, once equivalent signatures are found, the \u201cEntryId\u201d is used to relate back to the appropriate objects in the object store. All but one of those objects can then be removed. The equivalent objects selected to be discarded can in most cases be selected randomly.","Prior to randomly discarding all but one of the objects which have the same signature, however, the present invention can consider link cases. Some of the objects with the same signature may include a link. Thus, while the objects are equivalent by the criteria selected by the user, and hence they have equivalent signature numbers, they are not identical, since some of the objects may contain a link. As is known by those skilled in the art, a link can allow automatic updating or messaging. For example, a meeting request object may contain a link to the other participants of the meeting. Therefore, if the user accepts the meeting request, all of the other participants can be notified automatically, via the link, that the user is planning on attending. Similarly, if the user deletes the meeting request object, all of the other participants can be automatically notified that the user does not wish to attend the meeting. It is therefore desirable, as between two equivalent objects, to retain the object which contains the link.","The invention considers these link cases at step  in FIG. . One type of link case is the recurring event object. As was explained previously, a recurring event object is a child object. The child object can have a link to the parent object so that changes to the parent can be reflected in the child. For example, a recurrence object is a child created when the user modifies a parent appointment object so that the parent's recurring property is set to \u201ctrue\u201d. If the user were then to change the parent appointment object so that the parent's recurring property was set to \u201cfalse\u201d, the child recurrence object would need to be discarded. A link between the parent and child objects allows that the child reflect such changes made in the parent. It is, therefore, beneficial to retain, as between equivalent objects, the object with a link. At step , the invention reads all of the child objects from the recurring events table. One of the properties of such a child object can be the link to the parent object. The present invention can, therefore, follow this link back and determine which object, of those found to be equivalent, is linked. The object with the link is then retained, while the other duplicates are collected in the list of duplicates at step . If more than one equivalent object contains a link, then the application will randomly select which of the objects with the link to retain.","A second type of link case is the meeting request object. A meeting request object can schedule a meeting for a user, and contains a link back to the requestor of the meeting. Deleting a meeting request object can cause the information management application to use the link to the requester to inform the requester that the user has canceled the meeting. To avoid undesired cancellations of meetings during the removal of duplicates, the present invention reads the objects with the same signature to determine which is an appointment object and which is a meeting request object. The meeting request object is then retained and the other equivalents are collected in the list of duplicates at step .","Once the application has completed the link cases at step , it builds a list of the duplicate objects at step . Some duplicate objects are placed in the list after the application considers the link cases at step , as described above. Other duplicate objects are chosen randomly so that only one object with a given signature number is retained and not placed in the list. The application then prompts the user at step  to remove the duplicates. Should the user not choose to remove the duplicates, the application ends at step . If the user chooses to remove the duplicates, then the application can check whether an appropriate folder, such as a \u201cduplicated items\u201d folder exists at step . If such a folder does not exist, the application can create one at step . If such a folder does exist, then the application can move the objects referenced by the signatures in the duplicates list from their original locations in the object store into the appropriate folder at step . The application then ends at step .","The application only relocates the objects, and does not permanently delete them. Thus, the user can recover any object which the user may not have desired to delete. It is also possible for the application to create a different folder for each pass through the object store. For example, the application could move the duplicate objects it found on its first pass into a folder entitled \u201cduplicated items \u201d. Then, at a later time, when the user runs the application again, it could move the duplicate objects found the second time into a folder entitled \u201cduplicated items \u201d. In such a way, the application could provide the user with undo functionality. To undo the most recent removal of duplicates the application, or the user, can simply return to the object store the objects from the \u201cduplicated items\u201d folder with the highest number.","All of the references cited herein, including patents, patent applications, and publications, are hereby incorporated in their entireties by reference.","In view of the many possible embodiments to which the principles of this invention may be applied, it should be recognized that the embodiment described herein with respect to the drawing figures is meant to be illustrative only and should not be taken as limiting the scope of invention. For example, those of skill in the art will recognize that the elements of the illustrated embodiment shown in software may be implemented in hardware and vice versa or that the illustrated embodiment can be modified in arrangement and detail without departing from the spirit of the invention. Therefore, the invention as described herein contemplates all such embodiments as may come within the scope of the following claims and equivalents thereof."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["While the appended claims set forth the features of the present invention with particularity, the invention, together with its objects and advantages, may be best understood from the following detailed description taken in conjunction with the accompanying drawings of which:",{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 8"}]},"DETDESC":[{},{}]}
