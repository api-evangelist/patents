---
title: System and method for transferring data between a user space and a kernel space in a server associated with a distributed network environment
abstract: A system () and method provide for the transfer of at least one packet () comprising data between a user space () and a kernel space () associated with a server () that is positioned in a distributed network arrangement () with a plurality of clients (). A distribution program () associated with the user space () is operable to accumulate the at least one packet (). An application program interface () associated with the user space () transfers the at least one packet () to the kernel space () with a number of software interrupts (). A driver () associated with the kernel space () is operable to distribute the at least one packet () to a subset of the plurality of clients () in response to receiving the number of software interrupts (). The number of software interrupts () is less than one software interrupt per packet per client.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07587510&OS=07587510&RS=07587510
owner: Charles Schwab & Co., Inc.
number: 07587510
owner_city: San Francisco
owner_country: US
publication_date: 20030421
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION"],"p":["This invention relates in general to data distribution in a distributed network environment including a server and a plurality of clients and, in particular, to a system and method for transferring data between a user space and a kernel space in a server associated with a distributed network environment.","Without limiting the scope of the present invention, its background will be described with regard to trading common stock, as an example.","In trading common stock, there are three fundamental factors an investor must consider. These factors are what stock to trade, when to open a position in the stock and when to close that position in the stock. There are enumerable models that attempt to help the investor identify these factors each of which are based upon particular criteria. Some of the models are best suited for the long-term investor using a buy and hold approach. Other models are better suited for the short-term investor including, for example, an active investor who opens and closes positions in the same day or week.","In determining what stock to trade, a typical long-term investor may perform substantial research into a particular company in an effort to evaluate the future success of that company. For example, a long term investor may evaluate whether the company has products or services that are likely to have an increase in sales, the effectiveness of a company's research and development, the profit margin of the company, the size and effectiveness of the company's sales organization, labor relations within the company, the quality of management personnel at the company, the competitiveness of the company in relation to other companies in the industry, the long range outlook for profits and the like.","In addition to these business related factors, the long term investor may look at factors such as whether the company typically pays dividends on common stock, the price to earnings ratio of the stock and the market capitalization of the company as well as earnings, revenue and net income of the company. On the other hand, an investor that is interested in short term investments may not perform such detailed research but instead may focus on factors such as volume of trades, proximity to a milestone such as a fifty two week high, difference between current volume and a historical volume, number of daily highs, money flow and the like in identifying a stock of interest.","Once an investor has identified a stock of interest, the investor must then determine when and how to open a position in that stock. A long-term investor might, for example, call a broker and request the purchase of a certain number of shares of the stock at the market price. The short term investor, however, who may be more interested in such factors as the volatility of the stock or the liquidity of the stock in making such a decision may want to use an online system to place an order to achieve faster execution.","The next step for an investor once they have opened a position in a stock is to determine when to close that position. A long term investor may, for example, make a decision to sell a stock based upon factors such as a fundamental change in a company that does not comport with the investor's original criteria for buying stock in that company, a change in management in the company, under performance of the stock, the stock reaching an unacceptable low, a belief that the stock has peaked or simply a belief that another investment has better long term prospects. Again, the long-term investor may call a broker and request that the stock be sold at a particular time or when it reaches a particular price. While some of the above factors may also be important to a short-term investor, a short-term investor may focus more heavily on such factors as the continued momentum of the stock or simply making certain all open positions are closed by the end of a day and may again use an online system to achieve trade execution.","Regardless of the investment strategies, however, the investor requires information relative to what to stock to trade, when and how to open a position in that stock and when and how to close the position in that stock. Therefore, a need has arisen for a system and method that provide the investor with information that is useful in selecting stocks and that allow the investor to execute trades. A need has also arisen for such a system and method that provide the information the investor requires in a manner that optimizes system resources.","The present invention disclosed herein comprises a system and method that provide information to the investor in a manner that optimizes system resources by minimizing the interrupt overhead associated with transferring data packets between a user space and a kernel space associated with a server that is in a distributed network environment. The present invention optimizes the system resources, and, in particular, interrupt overhead and memory allocation, by providing for the time deferred processing of data packets being transferred between the user space and the kernel space.","In one aspect, the present invention is directed to a system for minimizing the frequency of mode transfers between a user space and a kernel space associated with a server in a distributed network environment. The system comprises a driver associated with the kernel space that is operable to queue user space-bound packets and process the packets with one interrupt. In addition, the system comprises a driver-compliant application interface associated with the user space is operable to queue kernel space-bound packets and process the packets with one interrupt.","In another aspect, the present invention is directed to a system for transferring at least one packet comprising data between a user space and a kernel space associated with a server that is in a distributed network arrangement with a plurality of clients. A distribution program is associated with the user space in order to accumulate the at least one packet. An application program interface associated with the user space transfers the at least one packet to the kernel space with a number of software interrupts. A driver is associated with the kernel space that distributes the at least one packet to a subset of the plurality of clients in response to receiving the number of software interrupts. The number of software interrupts is less than one software interrupt per packet per client.","In one embodiment, the number of software interrupts comprises one software interrupt. In another embodiment, the distribution program may accumulate the multiple packets over a nominal period of time. In a further embodiment, the system may include a memory structure associated with the kernel space to store the multiple packets in a buffer.","In an additional aspect, the present invention is directed to a system for transferring multiple packets between a kernel space and a user space associated with a server. A driver is associated with the kernel space to accumulate the multiple packets relative to data transfers between a subset of the plurality of clients and the server. The driver transfers the multiple packets to the user space with a number of software interrupts. A driver-compliant application program interface associated with the user space is operable to receive the multiple packets. The number of software interrupts is less than one software interrupt per packet per client. In one embodiment, the packets may include information selected from the group consisting of connections, reads, send errors and disconnects.","In a further aspect, the present invention is directed to a method for transferring data packets between a kernel space and a user space associated with a server that is in a distributed network arrangement with a plurality of clients. The method comprises receiving the data packets in the kernel space. The data packets are relative to a network data distribution between a subset of the plurality of clients and the server. The method further comprises accumulating the data packets in a memory structure associated with the kernel space and transferring the data packets from the kernel space to the user space in response to a user initiated software interrupt. Alternatively, the driver is operable to accumulate at least one packet and transfer an indication representative of the information in the accumulated packets to the user space with a number of software interrupts.","In one embodiment, the method further comprises establishing a socket connection between the server and the subset of the plurality of clients. The method may further comprise the step of monitoring connection status conditions between the server and the subset of the plurality of clients.","In another aspect, the present invention is directed to a computer program embodied on a computer readable medium for transferring data between a kernel space and a user space associated with a server that is in a distributed network arrangement with a plurality of clients.","While the making and using of various embodiments of the present invention are discussed in detail below, it should be appreciated that the present invention provides many applicable inventive concepts which can be embodied in a wide variety of specific contexts. The specific embodiments discussed herein are merely illustrative of specific ways to make and use the invention, and do not delimit the scope of the invention.","Referring initially to , therein is depicted a platform layout of a system including a server that is in a distributed network environment employing the teachings of the present invention that is generally designated . As illustrated, system  includes a server system  and a pair of client systems . Client systems  may include any number of peripheral input, storage and display devices such as a keyboard , a mouse  and a monitor . Server system  may communicate with each client system  by any suitable means. In one illustrated embodiment, server system  is in communication with a client system  via a direct connection  such as a T1 line, a frame, a dial up modem or the like. In the other illustrated embodiment, server system  is in communication with the other client system  via an Internet connection .","Server system  is also in communication with one or more security data sources  via a T1 line, a high speed modem or other transmission line  using, for example, a direct socket connection such as a Transmission Control Protocol\/Internet Protocol (TCP\/IP) connection. Security data sources  provide data feeds to server system  from a plurality of sources such as PC Quote, S&P Comstock, NQDS and the like that contain all types of information relating to thousands of securities that are traded at the various market participants. The data feeds contain a variety of information relating to each security. For example, the data feeds may contain level I information, which is best ask and best bid information as well as time and sales information and level II information which includes detailed market information. In addition, the data feeds may include fundamental information such as market capitalization, sector information, price to earning ratio, 52 week highs and lows and the like. It should be noted by those skilled in the art that the term security as used herein refers to stocks, bonds, options and the like that are traded at the various market participants.","In the illustrated networked computer environment, server system  regularly generates packets comprising securities data for distribution to client systems . As the amount of information received and processed by server system  from security data sources  is voluminous, each client system  typically receives only the information that the user of client system  requests. As such, each client system  requests and receives only a small subset of the information processed by server system . A dissemination of data to client systems  during a nominal time period may include the transfer of multiple packets containing requested data to a particular client. Alternatively, the dissemination of data during a nominal time period may include the transfer of identical packets of data to multiple clients.","In order to distribute the packets, existing servers generate one kernel or software interrupt for each packet for each client. In applications requiring real time data feeds, such as the tracking and trading of common stock, the large number of clients and large number of packets transferred results in excessive interrupt overhead. The present invention minimizes interrupt overhead by providing a server system  that includes a driver and driver-compliant application which provide a networking programming interface that queues packets and processes the packets with a minimum number of software interrupts.","Referring now to , therein is depicted a more detailed diagram of server system  of the system of the present invention. Server system  comprises numerous integrated servers that enable the processing of security data received from security data sources  for dissemination to various client systems  based upon the request made from each client system  and that route orders generated by the user of client systems  to various trade execution locations  which include multiple market participant types.","Specifically, server system  includes a quote server , a chart server  and book servers . Quote server  receives the data feed from one or more of the security data sources  and parses the data based upon the feed parsing API. The parsed information may be sent via direct connection to a client system  upon request by a client system . In the illustrated embodiment, however, the connection between quote server  and client system  includes a mid-level server  and an HTTP tunneling server  as will be explained in more detail below. As such, quote server  may disseminate real-time first level security data, real-time second level security data and the like to client system . For speed of delivery to client systems , some of this data preferably resides in the cache memory of quote server  or may alternatively reside in RAM on mid-level server .","Chart server  receives the data feed from one or more of the security data sources  and parses the data based upon the feed parsing API. Database manager  further processes the parsed information such that information relating to the securities may be stored in database . Database  is used for historical charting of security data. For example, database  builds one, two, three and five minute charts for intraday activity as well as historical charts for daily volume, daily highs and lows and the like for specified time increments such as the prior week, month or year. Database  is preferably an in-memory database utilizing cache memory and RAM such that information requested by a client system  can be quickly disseminated.","Book server  receives the data feed from one or more of the security data sources  and parses that data based upon the feed parsing API. More specifically, each book server  receives book data from, for example, an ECN or a market maker. The book data feeds contain not only the first and second level security data but also information relating to all the available asks and bids of each security.","Mid-level server  monitors information on a subset of the securities on which data feeds are received. While quote server , chart server  and book server  monitor all securities, perhaps 12,000 to 15,000 or more, mid-level server  only monitors those securities that are frequently requested by a client system , perhaps several hundred to a few thousand. For example, mid-level server  monitors all open positions that users presently have as well as additional securities that are being watched by such users, for example, those that are part of real-time user requests. Use of mid-level server  adds flexibility to server system  by reducing the load on the other servers. In addition, the use of mid-level server  enhances the speed at which information is disseminated to client systems  by, among other things, gathering, combining and placing in cache memory data from quote server , chart server  and book server  such that a request from a client system  does not have to be processed by more than one server.","It should be understood by those skilled in the art that the use of the term server herein may mean a single physical server, multiple physical servers or multiple instances of an execution on a single physical server. As will be discussed in more detail hereinbelow, the present invention minimizes the required number of servers, however, by providing a scheme that minimizes a server's interrupt overhead and optimizes the server's memory allocation.","In addition to the above-described servers, server system  may include a boss server  that manages the operation of the other servers. Boss server  optimizes the processing of server system  by routing connection requests from client systems  to the servers within server system , for example, to a specific mid-level server , that is presently operating with appropriate capacity to handle the new connection to avoid overloading any of the servers.","Server system  includes smart server  that processes orders received from client systems , such that the best fill for that order is obtained. For example, smart server  may parse an order into a plurality of suborders, each of which are sent to a trade execution location  to be filled. When all of the suborders are filled, at the best price for that suborder, the best price is obtained for the order. For connection between server system  and client systems  over the Internet, server system  may also include HTTP tunneling server . HTTP tunneling server  allows client systems  to work through firewalls, proxy servers and the like.","Server system  includes a decision support server . As with the mid-level server , decision support server  performs specific tasks which enable server system  to be more responsive to client systems . Decision support server  provides a data feed to client systems  that help a user of a client system  to select a security of interest. In the illustrated embodiment, decision support server  receives data feeds from chart server  and quote server . In addition, decision support server  receives a data feed from data compiled in database .","Server system  also includes a master server  and an execution server . Client systems  may connect directly to master server  or may connect through HTTP tunneling server . In either case, once a user of a client system  connects to server system , client system  receives IP addresses from boss server  then connects to master server . Master server  loads information relating to that user into memory from account server . Account server  retrieves user information via a connection to broker server  located remotely at broker system . Broker server  queries a broker mainframe  for the required information. The information is then passed back to account server  via broker server . Account server  then populates the cache memory of master server  with the client information.","Account server  also sends the client information to a database , to repopulate the client information in database  and to update any discrepancies between client information in database  and broker mainframe . In addition, to assure a high level of availability, if the client information cannot be obtained from broker system , account server  may alternatively obtain the client information previously stored in database .","Once master server  has received the client information, master server  monitors orders from client system  and performs compliance checks on the orders. For example, master server  would reject an order from client system  if the user attempts a trade that exceeds the user's buying power. Likewise, master server  would disallow an order from client system  that would be in violation of securities regulations. Once the compliance checks are completed, master server  sends the order to execution server .","Execution server  receives the orders from master server . Execution server  then routes the orders directly to a trade execution location , such as the ECN of Isld or the market maker of BEST, indirectly to a trade execution location  via an order processing location , such as SOES or Select Net for a NASDAQ trade or Super DOT for an NYSE trade, or indirectly to a trade execution location  via broker system . For example, a user may request execution at a specific market participant, such as Isld, in which case execution server  will send the order directly to the requested trade execution location . Alternatively, the user may request execution at a specific market participant type, such as any ECN, but may allow server system  to automate the selection of the specific ECN. In such a case, server system  may select a trade execution location  based upon factors such as the liquidity of the security at a particular trade execution location , the speed at which a particular trade execution location  fills orders, the ratio of orders filled at a particular trade execution location  and the like. In either case, once the trade execution location  is selected, the order is formatted for the proprietary application programming interface of that trade execution location  by execution server . The order is then sent to that trade execution location  to be filled.","The system and method for transferring data between a user space and a kernel space in a server associated with a distributed network environment of the present invention may be practiced between any two computers connected in a server-client or co-located server relationship. For example, with reference to , the present invention may be practiced between decision support server , boss server , mid-level server , master server , chart server , book server , quote server  and\/or client system , for example. The driver and driver-compliant application programming interface of the present invention provide a networking interface that queues asynchronous and synchronous packets and processes the packets with one software interrupt. Accordingly, the teachings of the present invention are applicable to any two computers that exchange information.","By way of illustration and not by way of limitation, however, the following  will describe the systems and methods of the present invention in relation to mid-level server  and multiple client systems . Moreover, by way of illustration and not by way of limitation, the present invention will be described relative to the distribution of securities information. It will be appreciated by one skilled in the art, however, that the teachings of the present invention are practicable with any type or form of data distribution.",{"@attributes":{"id":"p-0049","num":"0048"},"figref":"FIG. 3","b":["90","92","94","96","98","92","94","100","96","98","102","100","98","102","98"]},"Similarly, a database or memory structure  is associated with network data distribution program  to provide access to client-related information. Database  may include connectivity information, client-profile information detailing the fundamental information of interest to client  and similar information that network distribution program  may employ to distribute information to client . A driver-compliant application program interface (API)  provides formalized software interrupts to access the underlying services provided by kernel space . As will be discussed in more detail hereinbelow, a software interrupt  signals kernel space  that network distribution program  has generated packets for distribution to client .","Kernel space  provides the system-level commands and functions that manage system resources such as device drivers, memory management routines, scheduling and system calls, for example. In general, device drivers provide the necessary software components that permit the server to communicate with platform hardware devices associated with a hardware space that provides the actual physical computing machinery. In particular, a device driver  provides control for a network hardware device  associated with a hardware space . Device driver  may be a single static or loadable software module such as a kernel subsystem that implements the fundamental aspects of the software interrupt management system described herein. Memory structure  is associated with device driver  in kernel space  to provide buffers for processing packets and software interrupts  received from user space . Device driver  and driver-compliant API  provide software interrupt servicing between user space  and kernel space  that minimizes interrupt overhead by batch processing packets and packet related information with a minimum number of interrupts. Preferably, over a nominal duration of time, packets and packet related information are deferred time processed with a single software interrupt.","Hardware space  includes components such as liquid crystal displays (LCD) panels, video adapters, integrated drive electronics (IDEs), network hardware device, CD-ROMs, memory structures and hard disk controllers, for example. As alluded to in the previous paragraph, network hardware device  enables network interface functionality that allows server  to transmit and receive data communications with the external environment and, in particular, client . Depending on the network protocol employed, network hardware device , which may take the form of a local area network (LAN) card, employs a particular physical addressing scheme. In the illustrated TCP\/IP protocol type connection, network hardware device  includes an assigned or configurable Ethernet address, i.e., a media access control (MAC) or hardware address, which identifies server  to the external environment in order to allow packets to reach the correct destination.","Device driver  includes a socket port descriptor  that is operable to provide the port-level connectivity necessary to establish socket connection communications with client  via network hardware device  and network . As illustrated, TCP\/IP protocol type connection , which may be effectuated by the Internet, for example, includes a physical layer  or data link, such as Ethernet or token-ring, that is responsible for the delivery of packets. A network layer  that comprises an IP layer may sit above physical layer  in the stack. A transport layer  that comprises a TCP layer sits above the network layer  and may be independent of both physical layer  and the network layer .","Remote client socket identifier  uniquely identifies the endpoint of the communication link between network data distribution program  and the client application program of server  and client , respectively. The socket connection, as exemplified by socket port descriptor  and remote client socket identifier , initiates and accepts communications, sends data, receives data and terminates the connection gracefully. As illustrated, the socket connection may be a stream socket connection wherein when client  connects to server , a new socket is created and server  uses that socket for communication with client . The stream socket connection employs a series of well-known connection calls such as Socket(PARAMETER), Bind(PARAMETER), Listen(PARAMETER) and Accept(PARAMETER), for example, to provide reliable connected networking services with minimal packet error. It should be appreciated that although a specific type of connection has been described, other types of server-client connection protocols are within the teachings of the present invention.","In operation, network data distribution program  accumulates packets , ,  over a nominal time period for distribution to client  in accordance with client-related data . Packets , ,  may be synchronously or asynchronously generated. For instance, packets , ,  may be synchronously generated in response to a periodic update client  receives relative to securities of particular interest to the client and the substantially real-time performance of the stock market. Alternatively, packets , ,  may be asynchronously generated and accumulated over a nominal time period in response, for example, to a series of market-related requests received from client . Regardless of the method of packet initiation, API  sends packets , ,  to device driver  with software interrupt . By accumulating packets , ,  over a nominal time period and transferring packets , ,  to client  with a single software interrupt, interrupt overhead is minimized and system resources are optimized. This represents a significant reduction in software interrupts over existing implementations wherein existing API's employ a one to one relationship between software interrupts and packets to be sent to each client, i.e., each packet to each client requires one software interrupt or stated another way, one software interrupt is required per packet per client.","Responsive to software interrupt , device driver  temporarily stores packets , ,  going to client  in a single buffer  prior to distributing packets , ,  to client  via the socket connection. Storing packets , ,  in a single buffer  prior to distribution, rather than employing one memory buffer for each of the packet , ,  as with existing device drivers, results in fewer memory allocations and less total memory, thereby optimizing system resources.",{"@attributes":{"id":"p-0057","num":"0056"},"figref":["FIG. 4","FIG. 3"],"b":["150","152","154","156","194","158","160","162","164","90","150","152","154","166","152","168","170","172","174","154","204","176","178","206","168","180","182","184","186","188","190","192","156","158","160","162","164"]},"As illustrated, network data distribution program  accumulates packet  and client-related data , , ,  for multiple clients , , , . Each of the clients , , ,  has requested the packet  which may be a periodic update clients , , ,  receive relative to a parameter of the stock market. API  sends packet  which is destined for clients , , ,  to device driver  with a single software interrupt . By processing and transferring the packet  destined for multiple clients , , ,  from user space  to kernel space  with a single interrupt , interrupt overhead is minimized and system resources are optimized. This represents a significant reduction in software interrupts over existing implementations wherein existing APIs employ one software interrupt per client for the transfer and processing of one packet.","Device driver  temporarily stores packet  and associated client related information , , ,  in a single buffer  prior to distributing packet  to clients , , ,  via the multiple socket connections. By storing packet  and client related information , , ,  in a single buffer  prior to distribution, the system of the present invention expends fewer memory allocations and optimizes system resources. It should be appreciated that although four clients , , ,  are depicted receiving packet , the server of the present invention may service any number of clients and any subset of these clients may be receiving packet .",{"@attributes":{"id":"p-0060","num":"0059"},"figref":["FIG. 5","FIG. 4","FIG. 5"],"b":["220","222","224","226","228","230","232","234","226","228","230","232","234","236","222","238","240","242","244","246","248","250","252","254","256","258"]},"As illustrated, in order to minimize interrupt overhead and optimize system resources, a driver-compliant API  processes and transfers packets , , ,  of market-related information and packets , , ,  of client-related information to a device driver  associated with kernel space  with a single software interrupt . In kernel space , to minimize memory usage and optimize system resources, the multiple packets , , ,  of market-related information and packets , , ,  of client-related information are stored in a single buffer  of a memory structure . Socket connections, as exemplified by socket port descriptor  and remote client socket identifiers , , , , enable the efficient distribution of the market-related data packets , , ,  to clients , , , . As alluded to previously, the distributed network arrangement may distribute data other than securities information. For example, the multiple packets may represent streaming content being transferred to multiple clients to enable the multiple clients to receive audio and visual content almost immediately. The multiple packets may also be associated with files, such as audio, video, graphical or textual, provided by a web server.","Accordingly, in operation, the present invention minimizes interrupt overhead by providing for the transfer of multiple data packets bound for multiple clients from the user space to the kernel space with less than one interrupt per packet per client. Existing servers transfer data packets from the user space to the kernel space with one interrupt per packet per client, i.e., one interrupt per packet per socket connection, thereby resulting in excessive interrupt overhead. For example, if ten packets are bound for ten clients, then 100 software interrupts are required in existing servers to transfer the ten packets for the ten clients from the user space to the kernel space.","The present invention overcomes the interrupt overhead limitations of the existing servers by batch processing the client-bound packets. Specifically, with reference to the previous example, the present invention provides for the accumulation over a nominal period of time of the ten packets bound for each of the ten clients. The present invention then processes all the client-bound packets with preferably a single software interrupt. Hence, the present invention provides an interrupt overhead savings of 99 software interrupts in the instant example. It should be appreciated that in an actual application the number of data packets could be much greater, the number of clients could be much greater and the interrupt overhead savings would accordingly be much greater.","It should also be appreciated, however, that the teachings of the present invention provide for the processing of all the client-bound packets with any number of software interrupts that is less than one software interrupt per packet per client. For example, continuing with the example presented hereinabove, the ten packets bound for the ten clients, could be processed with 2, 10, 50 or 99 software interrupts, and an interrupt overhead savings would still be achieved. Additionally, in operation, the present invention provides for the optimization of memory allocation by establishing a scheme wherein all of the client-bound packets transferred from the user space to the kernel space may be stored in a single buffer. Existing kernels store the client-bound packets in one buffer per packet per client.","The benefits of the present invention may be further appreciated with reference to the following formulas that compare the existing scheme of transferring data between a user space and a kernel space and the system and method of the present invention for transferring data between a user space and a kernel space. The existing approach is as follows:","N=X*Y wherein N is the number of software interrupts generated by existing implementations; X is the number of data packets to be sent; and Y is the number of clients requiring the data packets.","The system and method of the present invention may be described as follows:","N\u2032<X*Y and more preferably N\u2032=1 wherein N\u2032 is the number of software interrupts generated by the systems and methods of the present invention; X is the number of data packets to be sent; and Y is the number of clients requiring the data packets. Accordingly, the present invention reduces the interrupt overhead by at least one interrupt and, preferably, by (X*Y\u22121) software interrupts.",{"@attributes":{"id":"p-0069","num":"0068"},"figref":"FIG. 6","b":["300","302","304","306","302","308","310","304","312","314","316","306","318","320","322","324","326","328","312","330","332","334","336","318","320","322","324","306","318","320","322","324","338","340"]},"In the system of the present invention, device driver  accumulates success statuses ,  indicative of successful transmissions in a memory structure  as represented by the \u201cdarkened\u201d buffers. To minimize interrupt overhead and optimize system resources, device driver  does not transfer the success statuses ,  to user space  since user space  does not require knowledge of successful transmissions to operate. By filtering the packets that are received from clients , , ,  and forwarding only the packets to user space  that are required by user space , device driver  intelligently manages system resources. This is an improvement over existing device drivers which forward every packet received from the clients to the user space, regardless of the content of the packet or the packets necessity to the user space.","Per a request from user space , device driver  accumulates send error packets ,  received from clients , , respectively, in memory structure . Subsequently, in response a software interrupt , device driver forwards all of the accumulated pertinent information about the socket connections, in the illustrated example, send errors ,  with any accompanying data, to user space . API  accepts send errors ,  and forwards send errors ,  to network data distribution program  for storage in buffers ,  of a memory structure  for proper bookkeeping. Accordingly, the present system optimizes the processing and storage resources of user space  by sending all of the accumulated connection status conditions in response to a single software interrupt. For example, over a period of time, if the kernel receives send errors packets from ten clients, rather than transferring the ten packets to the user space in response to receiving ten interrupts, the kernel transfers all the packets of the ten clients in response to receiving a single interrupt, thereby minimizing interrupt overhead and optimizing system resources.",{"@attributes":{"id":"p-0072","num":"0071"},"figref":["FIG. 7","FIG. 6"],"b":["360","362","364","366","366","368","370","372","374","376","378","380","364","366","382","384","386","388","368","370","372","374"]},"In the system of the present invention, device driver  accumulates over a nominal time period the various connection status conditions in a memory structure . For example, clients ,  have disconnected from server  during the same nominal time period. The disconnect status connection conditions of clients ,  are stored as buffers , , respectively, in memory structure . Similar to the description presented in relation to , to minimize interrupt overhead and optimize system resource, device driver  accumulates the disconnect status conditions and forwards an indication representative of the disconnects to a network data distribution program  via a driver-compliant API  in response to receiving a single software interrupt  at time t. Network data distribution program  stores the indicator in a memory structure  at buffer  for appropriate bookkeeping.","Subsequently, client  reports a read status connection  condition that is stored in memory structure  at buffer . Client  reports a send error  in the same nominal time period as client  reports read status connection condition . Device driver  stores the read status  in memory structure  at buffer . Device driver then forwards both the send error and read to network data distribution program  in response to receiving a single software interrupt  at time t. Accordingly, the present system optimizes the processing and storage resources of user space  by sending a single indicator representative of the connection statuses received and batch processing various status connection conditions with a single software interrupt. Network data distribution program  stores the read  and send error  in memory structure  at buffers  and , respectively, for proper bookkeeping.","Accordingly, in operation, the present invention minimizes interrupt overhead by providing for the transfer of multiple data packets received from multiple clients from the kernel space to the user space with less than one interrupt per packet per client. Existing servers transfer data packets from the kernel space to user space with one interrupt per packet per client, i.e., one interrupt per packet per socket connection, thereby resulting in excessive interrupt overhead. For example, if ten packets, such as success indications, are each received from ten clients, then 100 software interrupts are required in existing servers to transfer the ten packets received from the ten clients from the user space to the kernel space.","The present invention overcomes the interrupt overhead limitations of the existing servers by batch processing the packets. Specifically, with reference to the previous example, the present invention provides for the accumulation over a nominal period of time of the ten packets received from the ten clients. The present invention then processes all the received packets with preferably a single software interrupt. Hence, the present invention provides an interrupt overhead savings of 99 software interrupts in the instant example. It should be appreciated that in an actual application the number of data packets could be much greater, the number of clients could be much greater and accordingly the interrupt overhead savings would be much greater. It should also be appreciated, however, that the teachings of the present invention provide for the processing of all the received packets with any number of software interrupts that is less than one software interrupt per packet per client. For example, continuing with the example presented hereinabove, the ten packets received from the ten clients, could be processed with 2, 10, 50 or 99 software interrupts, and an interrupt overhead savings would still be achieved.",{"@attributes":{"id":"p-0077","num":"0076"},"figref":"FIG. 8","b":["430","432"]},{"@attributes":{"id":"p-0078","num":"0077"},"figref":"FIG. 9","b":["434","436","438","440"]},{"@attributes":{"id":"p-0079","num":"0078"},"figref":"FIG. 10","b":["442","444","446","444","448"]},"While this invention has been described with a reference to illustrative embodiments, this description is not intended to be construed in a limiting sense. Various modifications and combinations of the illustrative embodiments as well as other embodiments of the invention, will be apparent to persons skilled in the art upon reference to the description. It is, therefore, intended that the appended claims encompass any such modifications or embodiments."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["For a more complete understanding of the present invention, including its features and advantages, reference is now made to the detailed description of the invention, taken in conjunction with the accompanying drawings of which:",{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 10"}]},"DETDESC":[{},{}]}
