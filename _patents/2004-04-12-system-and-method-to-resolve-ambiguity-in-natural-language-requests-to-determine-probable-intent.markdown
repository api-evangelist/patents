---
title: System and method to resolve ambiguity in natural language requests to determine probable intent
abstract: In response to receiving a natural language request, possible intents may be determined and ranked and an appropriate action performed. Intent may be determined by removing as much ambiguity as possible by leveraging all the available information received to generate and rank interpretations of a user request. Actions may be generated as a result of the ranked interpretations. Actions may include performing a task or search. Search results from multiple pluggable search providers may be returned.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07596568&OS=07596568&RS=07596568
owner: Microsoft Corporation
number: 07596568
owner_city: Redmond
owner_country: US
publication_date: 20040412
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF ILLUSTRATIVE EMBODIMENTS","Overview"],"p":["The application is related to patent application Ser. No. 10\/822,516 entitled \u201cSystem and Method to Resolve Ambiguity in Natural Language Requests Using Schema Annotations\u201d, filed herewith.","The invention relates to computing and in particular to resolving ambiguity in natural language requests.","One of the most challenging problems in computer science is the development of a computer that can understand natural language. One of the main reasons for the difficulty of this task is the ambiguity inherent in the way humans communicate. For example, suppose a person says \u201ce-mail Tom about dogs\u201d. When such a communication occurs between humans, often the human recipient effortlessly resolves the ambiguity using context, experience, memory, previous knowledge, visual cues (if available) and various other environmental clues to interpret the message. A recipient of the message (say, \u201cJohn\u201d, for instance), may instantly recognize that he is being reminded to send Tom a list of Jack Russell terriers that John has for sale because Tom wants to buy one.","Unfortunately, many computers capable of inverting large matrixes in the twinkling of an eye are stumped when presented with such a natural language request on a search or command line. With respect to searches, a traditional search might look for all documents with the words \u201ce-mail\u201d, \u201cto\u201d, \u201cJohn\u201d, \u201cabout\u201d and \u201cdogs\u201d in it and completely fail to satisfy the user's intent. Similarly, a traditional search query might be generated using a GUI (graphical user interface), for example, choosing \u201ce-mail\u201d, \u201csender\u201d, \u201cTom\u201d etc. but this requires developer intervention and user effort and is typically tied to a particular information source. Known systems that generate an action such as opening an email with \u201cTom\u201d in the TO field and \u201cDogs\u201d in the subject field are currently available only by custom-coding.","It would be helpful if there were a way for a computer to use available clues to interpret natural language requests so that the user's intent is divined and thus more relevant results are returned or more appropriate actions are automatically performed. Furthermore, it would be helpful if information could be returned from many (or any) locations, that is, if multiple search providers could respond to the user's interpreted request.","In response to receiving a natural language request, possible intents may be determined and ranked and an appropriate action performed. Intent may be determined by removing as much ambiguity as possible by leveraging all the available information received to generate and rank interpretations of a user request. Actions may be generated as a result of the ranked interpretations. Actions may include performing a task or search. Search results from multiple pluggable search providers may be returned.","Suppose a user enters \u201cE-mail to Tom about dogs\u201d. What is the user's intent? To divine the user's intent, one or more of the following information items may be required: information about what is possible, information about what is probable, information about the environment and information about how language is expressed over the above. Some of the information required to divine intent may be available. The intent in this case may be one of the following:\n\n","Once the possible intents have been determined, a calling program may transform one, some or all of the possible intents into actions. For example, an intent may be transformed into a set of documents that the intent represents. That is, a set of constraints may be generated over the documents in the system and a search may be conducted to return the documents satisfying the constraints. Alternatively, an action may be taken, such as, for example, an e-mail message screen may be opened and some of the fields in the e-mail may be automatically populated.","Exemplary Computing Environment",{"@attributes":{"id":"p-0016","num":"0019"},"figref":"FIG. 1"},"Although not required, the invention can be implemented via an application programming interface (API), for use by a developer, and\/or included within the network browsing software which will be described in the general context of computer-executable instructions, such as program modules, being executed by one or more computers, such as client workstations, servers, or other devices. Generally, program modules include routines, programs, objects, components, data structures and the like that perform particular tasks or implement particular abstract data types. Typically, the functionality of the program modules may be combined or distributed as desired in various embodiments. Moreover, those skilled in the art will appreciate that the invention may be practiced with other computer system configurations. Other well known computing systems, environments, and\/or configurations that may be suitable for use with the invention include, but are not limited to, personal computers (PCs), automated teller machines, server computers, hand-held or laptop devices, multi-processor systems, microprocessor-based systems, programmable consumer electronics, network PCs, minicomputers, mainframe computers, and the like. The invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network or other data transmission medium. In a distributed computing environment, program modules may be located in both local and remote computer storage media including memory storage devices.",{"@attributes":{"id":"p-0018","num":"0021"},"figref":"FIG. 1","b":["100","100","100","100"]},"With reference to , an exemplary system for implementing the invention includes a general purpose computing device in the form of a computer . Components of computer  may include, but are not limited to, a processing unit , a system memory , and a system bus  that couples various system components including the system memory to the processing unit . The system bus  may be any of several types of bus structures including a memory bus or memory controller, a peripheral bus, and a local bus using any of a variety of bus architectures. By way of example, and not limitation, such architectures include Industry Standard Architecture (ISA) bus, Micro Channel Architecture (MCA) bus, Enhanced ISA (EISA) bus, Video Electronics Standards Association (VESA) local bus, and Peripheral Component Interconnect (PCI) bus (also known as Mezzanine bus).","Computer  typically includes a variety of computer readable media. Computer readable media can be any available media that can be accessed by computer  and includes both volatile and nonvolatile media, removable and non-removable media. By way of example, and not limitation, computer readable media may comprise computer storage media and communication media. Computer storage media includes both volatile and nonvolatile, removable and non-removable media implemented in any method or technology for storage of information such as computer readable instructions, data structures, program modules or other data. Computer storage media includes, but is not limited to, RAM, ROM, EEPROM, flash memory or other memory technology, CDROM, digital versatile disks (DVD) or other optical disk storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other medium which can be used to store the desired information and which can be accessed by computer . Communication media typically embodies computer readable instructions, data structures, and program modules. By way of example, and not limitation, communication media includes wired media such as a wired network or direct-wired connection. Combinations of any of the above should also be included within the scope of computer readable media.","The system memory  includes computer storage media in the form of volatile and\/or nonvolatile memory such as read only memory (ROM)  and random access memory (RAM) . A basic input\/output system  (BIOS), containing the basic routines that help to transfer information between elements within computer , such as during start-up, is typically stored in ROM . RAM  typically contains data and\/or program modules that are immediately accessible to and\/or presently being operated on by processing unit . By way of example, and not limitation, illustrates operating system , application programs , other program modules , and program data .","The computer  may also include other removable\/non-removable, volatile\/nonvolatile computer storage media. By way of example only, illustrates a hard disk drive  that reads from or writes to non-removable, nonvolatile magnetic media, a magnetic disk drive  that reads from or writes to a removable, nonvolatile magnetic disk , and an optical disk drive  that reads from or writes to a removable, nonvolatile optical disk , such as a CD ROM or other optical media. Other removable\/non-removable, volatile\/nonvolatile computer storage media that can be used in the exemplary operating environment include, but are not limited to, magnetic tape cassettes, flash memory cards, digital versatile disks, digital video tape, solid state RAM, solid state ROM, and the like. The hard disk drive  is typically connected to the system bus  through a non-removable memory interface such as interface , and magnetic disk drive  and optical disk drive  are typically connected to the system bus  by a removable memory interface, such as interface .","The drives and their associated computer storage media discussed above and illustrated in  provide storage of computer readable instructions, data structures, program modules and other data for the computer . In , for example, hard disk drive  is illustrated as storing operating system , application programs , other program modules , and program data . Note that these components can either be the same as or different from operating system , application programs , other program modules , and program data . Operating system , application programs , other program modules , and program data  are given different numbers here to illustrate that, at a minimum, they are different copies. A user may enter commands and information into the computer  through input devices such as a keyboard  and pointing device , commonly referred to as a mouse, trackball or touch pad. Other input devices (not shown) may include a microphone, joystick, game pad, satellite dish, scanner, or the like. These and other input devices are often connected to the processing unit  through a user input interface  that is coupled to the system bus , but may be connected by other interface and bus structures, such as a parallel port, game port or a universal serial bus (USB).","A monitor  or other type of display device is also connected to the system bus  via an interface, such as a video interface . A graphics interface , such as Northbridge, may also be connected to the system bus . Northbridge is a chipset that communicates with the CPU, or host processing unit , and assumes responsibility for accelerated graphics port (AGP) communications. One or more graphics processing units (GPUs)  may communicate with graphics interface . In this regard, GPUs  generally include on-chip memory storage, such as register storage and GPUs  communicate with a video memory . GPUs , however, are but one example of a coprocessor and thus a variety of coprocessing devices may be included in computer . A monitor  or other type of display device is also connected to the system bus  via an interface, such as a video interface , which may in turn communicate with video memory . In addition to monitor , computers may also include other peripheral output devices such as speakers  and printer , which may be connected through an output peripheral interface .","The computer  may operate in a networked environment using logical connections to one or more remote computers, such as a remote computer . The remote computer  may be a personal computer, a server, a router, a network PC, a peer device or other common network node, and typically includes many or all of the elements described above relative to the computer , although only a memory storage device  has been illustrated in . The logical connections depicted in include a local area network (LAN)  and a wide area network (WAN) , but may also include other networks. Such networking environments are commonplace in offices, enterprise-wide computer networks, intranets and the Internet.","When used in a LAN networking environment, the computer  is connected to the LAN  through a network interface or adapter . When used in a WAN networking environment, the computer  typically includes a modem  or other means for establishing communications over the WAN , such as the Internet. The modem , which may be internal or external, may be connected to the system bus  via the user input interface , or other appropriate mechanism. In a networked environment, program modules depicted relative to the computer , or portions thereof, may be stored in the remote memory storage device. By way of example, and not limitation, illustrates remote application programs  as residing on memory device . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.","One of ordinary skill in the art can appreciate that a computer  or other client device can be deployed as part of a computer network. In this regard, the present invention pertains to any computer system having any number of memory or storage units, and any number of applications and processes occurring across any number of storage units or volumes. The present invention may apply to an environment with server computers and client computers deployed in a network environment, having remote or local storage. The present invention may also apply to a standalone computing device, having programming language functionality, interpretation and execution capabilities.","System and Method to Resolve Ambiguity in Natural Language Requests to Determine Probable Intent",{"@attributes":{"id":"p-0028","num":"0031"},"figref":["FIG. 2","FIG. 2","FIG. 1"],"b":["200","110","200","220","226","230","240","250","220","226","240","250","252","260","260","260","200","200","200"],"i":["a","b","c"]},"In some embodiments of the invention, system  may receive inputs including one or more of the following: a query , a filter , a bias , a schema , an annotation  and\/or a culture  as well as other inputs discussed below, and may generate therefrom one or more interpretations  according to or based on a schema  or based on a schema  and one or more annotations  for input to one or more search providers , , , etc. via a search manager  and\/or an expansion manager .",{"@attributes":{"id":"p-0030","num":"0033"},"figref":["FIG. 3","FIG. 3"],"b":["302","304","306"]},"Referring concurrently to , a request may be the actual words a user typed (a natural language request). Examples of such requests include but are not limited to such requests as: \u201ce-mail from Chris about dogs\u201d, \u201cJazz music by Benny Goodman released in 1945\u201d, \u201cdocuments I printed last week\u201d, \u201cbenny goodman\u201d and so on. A request may be a search query as illustrated in , as represented by query , or may be a request for another type of action.","Divining intent from the words of a request may be accomplished by removing as much ambiguity in the request as possible by taking advantage of available information. Information about what is possible may often be determined by the structure or schema of the associated data. For example, in the case of a search, the data result returned from a search engine typically has a structure\u2014that is, the data the search engine returns may have fields including Title, CreationDate and so on, which define the boundaries of what is possible (what can be returned). In the case of a command, such as \u201cinsert a 3\u00d72 table\u201d, the words of the request can be interpreted as the command \u201cInsertTable\u201d with the constraints Rows=3 and Cols=2. In some embodiments of the invention, schema information describing the structure of the data is provided by a search provider and is stored in datastore . In some embodiments of the invention, annotation information is stored in datastore .","Information about the structure of the data desired can often be gleaned from the request itself. That is, the words in the request may imply part of the underlying structure or schema of the desired data or suggest an action to be performed. For example, in the request \u201ce-mail to Tom\u201d, the word \u201ce-mail\u201d may imply an underlying type \u201cMessage\u201d, and the word \u201cto\u201d may imply a property of \u201cMessage\u201d called \u201cRecipient\u201d. The occurrence of both of these terms in the same request may increase the likelihood that the request's intent can be expressed in terms of a Message object.","Sometimes, the patterns of the characters in the request may provide useful information. For example, a data pattern of \u201c(123)456-1234\u201d may suggest a telephone number. Tom@microsoft.com may suggest an e-mail address. Presence of the words \u201ctoday\u201d, \u201ctomorrow\u201d, \u201cnext week\u201d \u201c10:30 am\u201d and similar date\/time expressions are readily identifiable as date\/time information, which may provide clues as to what type of information or action is desired.","Some search providers may provide statistics associated with the frequency of the appearance of certain tokens in various fields. The statistics may provide information concerning how often a token occurs in a specific corpus. For example, the statistics may provide information concerning how often a particular word appears in the body of a group of documents. This information may be provided by a search provider to the system via a standardized input mechanism.","Knowledge of system state may be useful to divine intent. For example, the presence of a particular type of printer on the system may act to increase the likelihood of a request about printers to be about that type of printer. Similarly, the state of the printer (online, offline, out-of-paper, etc.) may be used to divine probable intent.","Logs such as query logs, etc. may be mined to build statistical models to be used to divine intent. For example, if it is known that a particular request has been mapped to a particular result or action in the past, a statistical model built from these results can be used for divining an intent.","In some embodiments of the invention, linguistic information is available about the words in the request. For example, a word in the request may be known to be a noun or an adjective, or part of a noun-phrase or verb-phrase. This information may be utilized by the system  to divine intent.","In some embodiments of the invention, API  receives the request and analyzes the words of the request and associated information as discussed above to divine the intent of the user request. Other information may also be provided to API  from a calling application (not shown) useful in determining probable intents. This information may include any combination of the following: types to reason over from schema(s) , filter(s) , bias(es) , culture  and annotations . In some embodiments of the invention, a collection of ranked interpretations are generated as constraints over the schema. The constraints may be passed to one or more search providers via search manager . In some embodiments of the invention, the constraint language utilized is MICROSOFT's OPath constraint language, although other constraint languages such as XPath, XQuery, QIL, or SQL may be employed. The one or more search providers may return results to expansion manager  which may display results according to a specified expansion policy (described more fully below).","In some embodiments of the invention, the available information is analyzed to identify terms (also referred to as features). For example, the individual tokens that make up a query string may be identified as features. Similarly, possible combinations of those tokens into sub-phrases may also be identified as features, as may patterns that are recognized inside the tokens or across multiple tokens, and so on.","Features may be transformed into fragments based on heuristics and schema annotations. A schema is a structural model that defines how objects in the real world are represented in a datastore. A schema may define the structure of the data, including the names of the objects or elements in the data, and the attributes and formatting rules for the objects or elements. For example, a mailing address typically includes a name, address, city, state, and ZIP code. This description of the mailing address is its metadata schema. A schema may be represented in XML (eXtensible Mark-up Language) or other modeling language or via an object type hierarchy. In some embodiments of the invention, the schema is represented using computer-language independent object types (e.g., MICROSOFT\u00ae Common Language Runtime or CLR objects, JAVA\u00ae Classes and objects, etc.).","A schema in some embodiments of the invention is a collection of structured types of data. The data may be stored in a storage system such as a database, file system or other storage technology. Similarly, the schema may define or embody the structure of an action to be taken and may be passed to the entity performing the action from the requestor of the action. A search provider for the storage technology may return the object types defined by its schema. In some embodiments of the invention, these results may be returned in the form of machine-independent objects.","For example, consider the following schema:","Enum EntryType={Add,Remove}","Class Bank","{\n\n","}","Class Account","{\n\n","}","Class Entry","{\n\n","}","Each field of each type is a property. (ID and Name are properties of the object type Bank). The associated search provider may return objects of type Bank, Account, and Entry.","One or more schema annotations, as represented by exemplary annotations  may also be available to system . In some embodiments of the invention, annotations are supplied. In some embodiments of the invention, annotations may be authored externally, enabling system  to be data-driven and open-ended. That is, new authored data (authored data as used herein is any data that requires something external to the system in order to be explicitly created) may be added at any time. Annotations may be created to enhance the relevance of the system, to extend it, to define new types of data and so on. System  processes annotations by using the annotation data in the creation of fragments. Annotations are described more fully below.","A fragment may be considered a possible part of a solution. Exemplary fragments include type, a property of a type, a value for a type-plus-property, a constraint over a type and explicitly specified results. Fragments may be identified as \u201ccompatible\u201d based on an underlying type system. In some embodiments of the invention, each token in a sentence or request may have one fragment selected for it. An interpretation is made up of a set of compatible fragments from those possible for the input query. That is, compatible fragments may be combined together into an interpretation with a score. The resultant set of fragments may be referred to as a collection of ranked interpretations, representing a list of probable intents, a best guess as to the intents of the user, and may be presented in an order of \u201cmost probable\u201d to \u201cleast probable\u201d. The collection of ranked interpretations may be consumed directly (e.g., as commands, \u201csort by first name\u201d) or they may be expanded into a set of objects represented by the interpretation (e.g., treated as search intents).","For example, upon receiving a request for \u201cshow me large deposits to my USBank account\u201d, the combination of the above annotations in some embodiments will result in the generation of the following fragments:","\u201clarge\u201d\u2192Entry.Amount>1000.0","\u201cdeposits\u201d\u2192Entry","\u201cUSBank\u201d\u2192BankID=123","\u201caccount\u201d\u2192Account","The underlying structure of the type may be used to determine which fragments are compatible and thus are combined. The resulting constraint statement sent to the search provider may thus be:","Entry where AccountID=A and A.BankID=123 and Amount>1000.00\u2033","Thus, it will be appreciated that in some embodiments of the invention, rather than analyzing the sentence structure of the request at a linguistic level, the request is analyzed at a conceptual level as expressed by a data schema via a type hierarchy. That is, if, for example, a first term could mean two different things expressed in two different types, the fact that a second term in the request refers to the first type may be used to divine that the first term also refers to the first type. To illustrate, suppose there are two available types, \u201cMessage\u201d and \u201cAudioTrack\u201d. Both \u201cMessage\u201d and \u201cAudioTrack\u201d may have a date\/time property called \u201cCreationDate\u201d. Suppose the request \u201cMessages created in July\u201d is received. In some embodiments of the invention, the following fragments are generated:","the fragment Message is generated from \u201cMessages\u201d","Message.CreationDate and AudioTrack.CreationDate are generated from \u201ccreated in July\u201d","The fragments Message and Message.CreationDate are compatible because both Message and Message.CreationDate are of type Message and therefore these fragments in some embodiments of the invention are combined. The score (relative score determines relative rank) is higher for the combination of Message and Message.CreationDate than is the score for AudioTrack.CreationDate because more fragments (that is, two) have been combined to create the combination than have been combined to create AudioTrack.CreationDate (that is, one). The collection of ranked interpretations that result from this process thus includes Message\/Message.CreationDate and AudioTrack.CreationDate.","One or more filters, as represented by exemplary filter  may be specified. In some embodiments of the invention, a calling program passes in explicit knowledge concerning the intent of a user via one or more filters, hence a filter may represent a constraint fragment. In some embodiments of the invention at least one interpretation per filter is generated. A filter may define a type allowed for a search result or action and\/or define restrictions imposed upon a search result or action. Exemplary filters include but are not limited to filters for documents, videos, music, messages, contacts and files. An exemplary use of a filter is as follows: Suppose an e-mail application has a search dialog. The calling e-mail application may know, for example that only e-mails, meetings and tasks are desired even though other types of objects, etc. may be returned by the associated search provider. Hence a filter of e-mail messages, meetings and tasks may be specified as constraint fragments. In some embodiments of the invention, a filter may specify that only items of a specified type found in a specified folder are to be returned.","Specification of a filter may prevent a search provider from being called because that search provider cannot return the specified type of results. For example, if the calling application specifies a filter for e-mail messages, the ranked interpretation(s) generated may not be sent to an Internet search engine that does not include e-mail messages in its search domain.","One or more biases, as represented by exemplary bias  may also be specified or received from a calling application. A bias in some embodiments is a constraint fragment that is passed in to influence the rank of search results. A bias may act to raise or lower the rank of a search result obtained by the execution of a particular individual interpretation associated with the bias. For example, an email application may specify a filter of \u201ce-mail\u201d and a bias of \u201cIf it is in the current folder, rank it higher.\u201d As a result of this bias an e-mail that appears in the current folder may receive a higher rank in the returned search results than a similar message appearing in another folder.","A bias may be determined by the calling application in any way. For example, a music playing application may employ a filter to specify the selection of music of a particular musician. A bias may specify that if the music is blues or rock, it should be rated more highly. The application may have selected the \u201cblues or rock\u201d bias by what music is played the most, by most-recently played music or by any other suitable method.","Culture as represented by exemplary culture  may also be received. Culture (e.g., US English, English, Japanese, etc.) in some embodiments determines the annotations and language-dependent heuristics to be employed. In some embodiments of the invention, if no culture is specified, the culture of the calling application or user interface is used.","After all the available information has been analyzed, and known constraints are applied, the resulting collection of ranked interpretations represent a list of probable intents, presented in an order of \u201cmost probable\u201d to \u201cleast probable\u201d. The collection of ranked interpretations implemented as a set of constraints on a schema may be consumed directly (e.g., as commands, \u201csort by first name\u201d) or they may be expanded into a set of objects represented by the interpretation (e.g., treated as search intents). The collection of interpretations to be executed may be sent to one or more search providers to be executed. In some embodiments of the invention, the search providers to be accessed can be explicitly specified.","In some embodiments one or more search provider will be passed the set of constraints, one or more filters, biases, and the original query. Each search provider is expected to return a relevance-ordered set of results, however no requirements are placed on how the search provider goes about retrieving results. Some of the information passed to the search provider may not be processed. A search provider may provide results based on a conventional IR (information retrieval) search, database search (e.g., a SQL SERVER\u00ae search, DB2 search, etc.), or whatever data source the search provider can access.","In some embodiments of the invention, only the most probable interpretation is sent to the search provider for execution. Alternatively interpretations may be generated for execution according to a specified policy. Exemplary interpretation generation and execution policies include but are not limited to the following:\n\n","A search provider may receive the collection of interpretations to be executed and generate a set of results, each result associated with a relevance score. The results may be displayed as they are returned (streaming mode), in relevance order, as blocks of results from search providers, merged results from multiple search providers in relevance order and so on. Duplicate results may be eliminated. In some embodiments of the invention, a subset of the returned search results may be selected for display. The selected subset may be a explicitly specified by the calling application, or may be inferred from the query or request, or may be a combination thereof. The results may be displayed in table format. For example, a request such as \u201cchris phone number\u201d may generate columns for Contact name and all the phone number fields associated with the Contact. Search results from search providers may be returned to an expansion manager for display processing.","In some embodiments of the invention, an expansion policy may be specified. Exemplary expansion policy options include but are not limited to the following information:\n\n","In some embodiments of the invention, a duplication removing policy may be specified. Exemplary duplication removal policies include","keep all duplicates","keep the duplicate with the highest relevance","keep the most recent duplicate","In some embodiments of the invention, a search result is encapsulated within a generic wrapper. The search result wrapper may include information including but not limited to a generic title and description, the interpretation that came from the search provider, its rank (score), modification time, unique identifier and so on. The wrapper in some embodiments points to the object returned by the search provider.",{"@attributes":{"id":"p-0081","num":"0104"},"figref":"FIG. 4","b":["402","404","406","408","406","424","406","408","410","412","414","416","418","420","422","424"]},"Generation of Annotations","An annotation is a piece of extra information about the data and is sometimes referred to as metadata. Annotations in some embodiments of the invention control the mapping of features to data structures and provide rules for combining fragments. Annotations may be global or local. Global annotations in some embodiments of the invention are used by all applications in the runtime environment whereas local annotations are used only by a single application. A number of types of annotations may be provided. Exemplary annotations include but are not limited to term annotations, state annotations, type annotations, property annotations, value annotations, instance annotations and constraint annotations.","A term annotation in some embodiments is a word or phrase which triggers whatever it is attached to when it is encountered in a request. For example, the terms \u201cemail\u201d, \u201ce-mail\u201d, \u201cmessage\u201d, \u201cmessages\u201d and \u201celectronic mail\u201d may all be synonyms for the underlying schema type fragment Message. The term \u201cwritten by\u201d may be a synonym for the underlying schema type fragment Document.Author and so on. The terms \u201cimportant\u201d, \u201chigh priority\u201d may be terms which all indicate a constraint fragment on the schema of Email.Priority>2 and so on.","A state annotation may refer to the state of some part of the user's system. For example, the fact that a particular brand of printer is installed can be used to bias results related to that manufacturer higher by authoring a state annotation.","Standard inheritance rules such as type inheritance, complex types, etc., apply to both the schema modeling language and to the annotations on the schema in some embodiments of the invention. Annotations can be created to enable the identification of types, properties, values, instances and constraints by recognizing words or phrases in a request that identify a particular structure of the schema, such as a type or a property in a type. For example, the word \u201caccount\u201d in a request may mean that Account type information is desired.","\u201cTo\u201d, \u201cFrom\u201d \u201cCC\u201d and \u201cSubject\u201d may be exemplary properties of an e-mail type. In the \u201caccount\u201d example above, a request containing the word \u201camount\u201d may refer to an Account.Amount property. Properties may themselves be complex types, so sub-properties (nested properties of any depth of nesting) are also possible.","One or more values of a property of a type may be defined. Defined values may be associated with terms. When a term associated with a value is encountered in a request, the value may be added to the query sent to the search provider. For example, the annotation segment:","\u201cAccount.Type=\u2018Remove\u201d\n\n","\u201cBank.ID=\u2018123\u2019\u201d\n\n","Constraints may also be defined in an annotation. For example, the following annotation segment:","Entry, \u201cAmount>1000.00\u201d\n\n","Entry, \u201cAmount<10.00\u201d\n\n","Entry, \u201cAmount>=10.00 and Amount<=1000.00\u201d\n\n",{"@attributes":{"id":"p-0094","num":"0130"},"figref":["FIG. 5","FIG. 5","FIG. 5"]},"Class Car","{\n\n","}","Enum CarType={Truck,sedan, sports, SUV, minivan,van}","At step , various ways that objects of a particular type may be searched for are considered. For example, if a user were looking for newer Ford trucks, the following request may be entered:","\u201cshow me ford trucks built in 1999\u201d","If a user were looking for a particular BMW, the following request may be entered:","\u201cshow me classic bmws\u201d","If a user were looking for a good deal on a new convertible of no particular Make to buy, the following request may be entered:","\u201cI want an inexpensive new convertible\u201d","At this point, annotations may be generated, computed or authored to handle some of the types of queries or requests that might be received. In some embodiments of the invention, annotations are defined in a declarative hierarchical markup language such as HTML (HyperText Markup Language), XML (eXtensible Markup Language) or XAML (eXtensible Application Markup Language) although it will be understood that any suitable definition language may be used. At step , term annotations may be created. An annotation type can be explicitly specified so that when a particular type is desired to be surfaced, several different (specified) interpretations may be generated. For example, referring to the car example described above, perhaps Term annotations that generate the Car type may be created. They may be generated as a \u201cGeneratedBy\u201d type so that, if triggered, the target object will be created. Variations on the possible words that may be used in a request that are to generate a Car type may be created as follows:","<type name=\u201ccar\u201d>","<generatedBy>\n\n","<\/generatedBy>","Annotations on properties may be used to identify terms in the input stream which imply a particular property of the type. By identifying the underlying property, interpretations can be built which are expressed in terms of the underlying type. At step , annotation properties may be defined to identify fields that are likely to appear in a request or query. For example, the following is an exemplary property annotation for the generatedby property:","<property name=\u201cMake\u201d\n\n","Biasing is an annotation property in some embodiments. If an annotation that is marked as \u201cBias\u201d is triggered, in some embodiments of the invention, a bias is created which will raise or lower the weight of a fragment for an object that was created by a generated annotation type.","Exclusion is an annotation property in some embodiments. If the annotation marked as an exclusion is triggered, any fragment representing the object may be removed from consideration.","In some embodiments of the invention, a weight property enables specific weights to be associated with annotations. It may not be desirable for weights to be explicitly specified for annotation. Weights may be associated with annotations so that differences between annotations may be algorithmically determined.","An ID or identification property in some embodiments is a unique identifier for an annotation. It may be used for logging.","In some embodiments of the invention, multiple textual field can be combined to create a virtual property. For example, a virtual field \u201ccontents\u201d may exist which may be defined within the context \u201cmusic\u201d as artist, album and song title. If none of these field are mentioned in a query or request, the request may be associated via an annotation to the virtual field \u201ccontents\u201d, resulting in all three items artist, album and song title being searched. That is, if no field is explicitly mentioned in a query, but there are tokens left, those tokens may be searched for in the default location. For example, receipt of the request \u201cdoors music\u201d may result in Artist.AlbumTitle and Track being examined for \u201cdoors\u201d whereas receipt of the query \u201cmusic by the doors\u201d may result in looking for \u201cdoors\u201d in the artist field because the phrase \u201cby\u201d would generate the Artist property. The creation of virtual properties in some embodiments may be used as a means of query expansion. The creation of virtual properties may be especially effective when the semantic idea of the user request or query does not map neatly to a single property, but instead is linked to multiple properties in the underlying schema. For example, suppose the word \u201cabout\u201d is encountered within the context of documents. In the query or request: \u201cdocuments about fishing\u201d, \u201cabout\u201d may refer to the Subject property, the Title property, the Comments property or it may refer to the Body of the document. Instead of selecting only one of the fields in which to look for \u201cfishing\u201d, the Subject, Title, Comment and Body may be selected for examination for the word \u201cfishing\u201d via a virtual property.","Matching rules may be defined to determine how matching should be performed so that a particular Type of recognized data can be mapped to a specified property. For example, suppose a Document has a DateCreated property and a DateLastPrinted property. Suppose a request \u201cDocuments 3\/1\/2004\u201d is received. An annotation may specify a matching rule such as \u201cgiven a date and no other evidence as to which date property the date should be mapped to, default to mapping to this specified field\u201d. If selection of just one field as a default is not desired, definition of a virtual property, as described above, may enable a set of fields to be mapped to for the default.","In some embodiments an exact match means that the term must match the query or request in its entirety. An exact minus noise property may specify that after noise words (e.g., the, a, and so on) are removed, if the query matches the annotation in its entirety, the annotation will be triggered.","Definitions for all the properties of the annotation may be created. In some embodiments of the invention, annotation property defaults are provided but may be overridden by explicit definition of the properties.","In some embodiments of the invention, annotations may be used to define values for a property. For example, it may be useful to define a value if a search provider does not support or provide statistics for the property or if there are known values for the property (that, for example, a user is likely to know and use in a search) or if the internal representation of the value does not equate to the query representation (e.g., \u201cford\u201d\u2192typeof(car), \u201cmake=\u2018193949\u2019\u201d. No statistics are likely to be available for this query). At step , values may be created. Exemplary value definitions may be as follows:","<property name=\u201cmake\u201d>\n\n","<\/property>","At step , the values defined in step  may be annotated to map the tokens to specific values. For example, the following value annotations may be made:","<property name=\u201cmake\u201d>\n\n","In some embodiments of the invention, annotations may be used to define constraints for a property. For example, a constraint may be used to express a compound statement (e.g., \u201cMicrosoft office\u201d\u2192typeof(file), \u201cext=\u2018doc\u2019 or ext=\u2018ppt\u2019 or ext=\u2018xls\u2019\u201d). At step , constraints may be created.","Hence, in some embodiments of the invention, given a natural language query such as \u201cshow me large deposits to my USBank account\u201d an appropriate description of the interpretation will be generated in an appropriate constraint language using all of the appropriate fragments based on the relevant annotations, using the underlying structure of the type to decide which fragments are compatible with each other.","For example, in the above car scenario, the following constraints may make sense within the context of the desired objects:","1. Constrain Year to have definitions of Classic, Antique, and New","2. Constrain Price to have definitions of cheap, mid-price, and expensive.","3. Create Constraints which combine legal combinations of Make and Models","An exemplary constraint definition thus may be as follows:","<type name=\u201ccar\u201d>\n\n","<type name=\u201ccar\u201d>\n\n","<constraint>","At step  synonym expansion may be defined. Synonym expansion in some embodiments provides additional words to be searched for. This may improve the number of search results that are returned. For example, suppose an annotation is defined that specifies a set of synonyms for purposes of expanding a search. Suppose the following:","Type Document\n\n","Property Body\n\n","expandSynonyms {\u201cTom\u201d, \u201cThomas\u201d, \u201cTomas\u201d, \u201cThom\u201d}","expandSynonyms {\u201ccars\u201d, \u201ccar\u201d, \u201cauto\u201d, \u201cautomobile\u201d, \u201cauto-mobile\u201d}","Suppose a user has specified the query: \u201cfind docs about cars\u201d","\u201cdocs\u201d identifies a type Document","\u201cabout\u201d identifies the property Body","Suppose it is determined based on word placement that \u201ccars\u201d is a blurb (text to search for). In some embodiments, the interpretation may be:","Find typeof<Document>, \u201cbody contains \u2018cars\u2019\u201dBut cars is a member of list of synonyms to expand the search for, so the query may be expanded to be:","Find typeof<Document>, \u201cbody contains \u2018cars\u2019 or body contains \u2018car\u2019 or body contains \u2018auto\u2019 or body contains \u2018automobile\u2019 or body contains \u2018auto-mobile\u2019\u201d","Hence, the search may be constructed so that if a document is surfaced based on matching \u201ccars\u201d it is a higher ranked result then if it surfaces on the alternatives.","In some embodiments of the invention, blurbs are token(s) which are left over after all of the terms which matched annotations are removed. Blurbs thus may represent the actual data which is being searched for. For example, \u201cemail about IBM\u201d may use the term \u201cemail\u201d to determine the type should be Email object, the term \u201cabout\u201d to identify that they are probably talking about the Email.Subject property, or the Email.Body object. Left over is the token \u201cIBM\u201d. This is considered to be the item to be searched for in the Subject and Body of email messages.","In some embodiments of the invention, hard-coded algorithms such as proximity may be used to determine where a blurb should be passed. Some search providers may have the ability to pass statistics on the frequency a blurb shows up in particular properties. This information may be used to resolve ambiguity concerning the placement of blurbs.","In some embodiments of the invention, Synonym Expansion for expanding blurb search may be specified. In addition, synonyms may be defined for search expansion of blurbs. For example, an author may specify that if either \u201cIBM\u201d or \u201cInternational Business Machines\u201d is a blurb, then the search should be expanded to search for both terms. Hence, in some embodiments, the OPath Email, \u201cSubject contains \u2018IBM\u2019 or Body contains \u2018IBM\u2019\u201d would become, Email, \u201cSubject contains \u2018IBM\u2019 or Subject contains \u2018International Business Machines\u2019 or Body contains \u2018IBM\u2019 or Body contains \u2018International Business Machines\u2019\u201d Synonym expansion for blurbs may be used effectively for people names, company names, well-known acronyms, etc. (e.g., \u201cSuzi\u201d, \u201cSusi\u201d, \u201cSuzy\u201d). Synonym expansion may be effectively used when the object being searched over has synonyms (e.g., CPU, Central Processing Unit, Processor) and\/or when the object searched over is commonly misspelled.","The various techniques described herein may be implemented in connection with hardware or software or, where appropriate, with a combination of both. Thus, the methods and apparatus of the present invention, or certain aspects or portions thereof, may take the form of program code (i.e., instructions) embodied in tangible media, such as floppy diskettes, CD-ROMs, hard drives, or any other machine-readable storage medium, wherein, when the program code is loaded into and executed by a machine, such as a computer, the machine becomes an apparatus for practicing the invention. In the case of program code execution on programmable computers, the computing device will generally include a processor, a storage medium readable by the processor (including volatile and non-volatile memory and\/or storage elements), at least one input device, and at least one output device. One or more programs that may utilize the creation and\/or implementation of domain-specific programming models aspects of the present invention, e.g., through the use of a data processing API or the like, are preferably implemented in a high level procedural or object oriented programming language to communicate with a computer system. However, the program(s) can be implemented in assembly or machine language, if desired. In any case, the language may be a compiled or interpreted language, and combined with hardware implementations.","While the present invention has been described in connection with the preferred embodiments of the various figures, it is to be understood that other similar embodiments may be used or modifications and additions may be made to the described embodiments for performing the same function of the present invention without deviating therefrom. Therefore, the present invention should not be limited to any single embodiment, but rather should be construed in breadth and scope in accordance with the appended claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The foregoing summary, as well as the following detailed description of illustrative embodiments, is better understood when read in conjunction with the appended drawings. For the purpose of illustrating the invention, there is shown in the drawings exemplary constructions of the invention; however, the invention is not limited to the specific methods and instrumentalities disclosed. In the drawings:",{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 5"}]},"DETDESC":[{},{}]}
