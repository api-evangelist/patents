---
title: Preserving data availability and I/O performance when creating virtual raid volumes
abstract: A method for preserving data availability and I/O performance when creating a virtual RAID volume includes exposing a set of backend virtual volumes. The backend virtual volumes are implemented on a set of physical storage devices (e.g., physical disks or solid state drives) residing on a storage system. The method further enables selection of the set of backend virtual volumes to create a virtual RAID volume having a selected RAID level. The method further provides verification that the backend virtual volumes will be implemented on the physical storage devices in a way that preserves the data availability and I/O performance associated with the selected RAID level. A corresponding computer program product and apparatus are also described.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09552160&OS=09552160&RS=09552160
owner: International Business Machines Corporation
number: 09552160
owner_city: Armonk
owner_country: US
publication_date: 20110627
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["Field of the Invention","This invention relates to apparatus and methods for preserving data availability and I\/O performance when creating virtual RAID volumes with storage virtualization products.","Background of the Invention","Storage virtualization software running on a host computer or in a storage-area-network (SAN) may be used to create virtual RAID volumes such as striped or mirrored volumes. Applications may use these virtual RAID volumes instead of accessing physical disks directly. I\/O performance may be improved by striping data across multiple physical disks. Data availability may be improved by replicating data across multiple physical disks.","With the increasing popularity of thin provisioning, disk array vendors may expose virtual volumes (e.g., virtual logical unit numbers, or LUNs) that are thin provisioned. In such volumes, physical storage space is allocated on demand. That is, the total virtual space allocated to a thin-provisioned volume is not fully backed by physical storage space until an application writes to the volume, at which time space is allocated to hold the write data. On-demand allocation may be performed from a storage pool that consists of physical disks within the disk array.","Unfortunately, on-demand allocation of physical space inside storage arrays can cause problems for virtual RAID volumes created by storage virtualization products such as IBM's Logical Volume Manager (LVM), Veritas Volume Manager (VxVM), VMWare, IBM's SAN Volume Controller (SVC), or the like. For example, to improve I\/O performance, SVC may be used to create a three-way striped virtual RAID volume from three thin-provisioned volumes exposed by a backend disk array. The disk array is unaware that the thin-provisioned volumes are used in the three-way striped virtual RAID volume. When writes occur to the three-way striped volume, the disk array allocates physical space to the three thin-provisioned volumes from a pool of physical disks. Since the disk array is unaware that the thin-provisioned volumes are used in a virtual RAID volume, the disk array may allocate physical storage to the three thin-provisioned volumes from the same physical disk. This will defeat the very purpose of creating the three-way striped volume on the SVC.","Similarly, if storage virtualization software were to create an n-way mirrored virtual RAID volume from n thin-provisioned volumes, it is possible that the disk array would allocate space to some or all of the n thin-provisioned volumes from a single backend physical disk, thereby reducing or eliminating the data availability characteristic that the n-way mirrored virtual RAID volume was intended to create. As stated above, this occurs because the backend disk array is unaware of the I\/O performance and\/or data availability characteristics associated with virtual RAID volumes exposed by higher layers of storage virtualization software. This can create significant problems in enterprise data centers where the I\/O performance and data availability characteristics of a virtual RAID volume are critical to an application's requirements.","In view of the foregoing, what is needed are apparatus and methods to preserve data availability and I\/O performance associated with particular RAID levels when creating virtual RAID volumes.","The invention has been developed in response to the present state of the art and, in particular, in response to the problems and needs in the art that have not yet been fully solved by currently available apparatus and methods. Accordingly, the invention has been developed to provide apparatus and methods for preserving data availability and I\/O performance characteristics when creating virtual RAID volumes. The features and advantages of the invention will become more fully apparent from the following description and appended claims, or may be learned by practice of the invention as set forth hereinafter.","Consistent with the foregoing, a method for preserving data availability and I\/O performance when creating a virtual RAID volume is disclosed. In one embodiment, such a method includes exposing a set of backend virtual volumes. The backend virtual volumes are implemented on a set of physical storage devices (e.g., physical disks or solid state drives) residing on a storage system. The method further enables selection of the set of backend virtual volumes to create a virtual RAID volume having a selected RAID level. The method further provides verification that the backend virtual volumes will be implemented on the physical storage devices in a way that preserves the data availability and I\/O performance associated with the selected RAID level. A corresponding computer program product and apparatus are also disclosed and claimed herein.","In another aspect of the invention, a method for preserving data availability and I\/O performance when creating a virtual RAID volume includes selecting a RAID level for use with an application. The RAID level is selected to provide a desired level of data availability and I\/O performance. The method further includes selecting a set of backend virtual volumes to create a virtual RAID volume in accordance with the selected RAID level. The backend virtual volumes are implemented on a set of physical storage devices residing on a storage system. The method further includes verifying that the backend virtual volumes will be implemented on the physical storage devices in a way that preserves the data availability and I\/O performance associated with the RAID level.","It will be readily understood that the components of the present invention, as generally described and illustrated in the Figures herein, could be arranged and designed in a wide variety of different configurations. Thus, the following more detailed description of the embodiments of the invention, as represented in the Figures, is not intended to limit the scope of the invention, as claimed, but is merely representative of certain examples of presently contemplated embodiments in accordance with the invention. The presently described embodiments will be best understood by reference to the drawings, wherein like parts are designated by like numerals throughout.","As will be appreciated by one skilled in the art, the present invention may be embodied as an apparatus, system, method, or computer program product. Furthermore, the present invention may take the form of a hardware embodiment, a software embodiment (including firmware, resident software, micro-code, etc.) configured to operate hardware, or an embodiment combining software and hardware aspects that may all generally be referred to herein as a \u201cmodule\u201d or \u201csystem.\u201d Furthermore, the present invention may take the form of a computer-usable storage medium embodied in any tangible medium of expression having computer-usable program code stored therein.","Any combination of one or more computer-usable or computer-readable storage medium(s) may be utilized to store the computer program product. The computer-usable or computer-readable storage medium may be, for example but not limited to, an electronic, magnetic, optical, electromagnetic, infrared, or semiconductor system, apparatus, or device. More specific examples (a non-exhaustive list) of the computer-readable storage medium may include the following: an electrical connection having one or more wires, a portable computer diskette, a hard disk, a random access memory (RAM), a read-only memory (ROM), an erasable programmable read-only memory (EPROM or Flash memory), a portable compact disc read-only memory (CDROM), an optical storage device, or a magnetic storage device. In the context of this document, a computer-usable or computer-readable storage medium may be any medium that can contain, store, or transport the program for use by or in connection with the instruction execution system, apparatus, or device.","Computer program code for carrying out operations of the present invention may be written in any combination of one or more programming languages, including an object-oriented programming language such as Java, Smalltalk, C++, or the like, and conventional procedural programming languages, such as the \u201cC\u201d programming language or similar programming languages. Computer program code for implementing the invention may also be written in a low-level programming language such as assembly language.","The present invention may be described below with reference to flowchart illustrations and\/or block diagrams of methods, apparatus, systems, and computer program products according to various embodiments of the invention. It will be understood that each block of the flowchart illustrations and\/or block diagrams, and combinations of blocks in the flowchart illustrations and\/or block diagrams, can be implemented by computer program instructions or code. These computer program instructions may be provided to a processor of a general-purpose computer, special-purpose computer, or other programmable data processing apparatus to produce a machine, such that the instructions, which execute via the processor of the computer or other programmable data processing apparatus, create means for implementing the functions\/acts specified in the flowchart and\/or block diagram block or blocks.","The computer program instructions may also be stored in a computer-readable storage medium that can direct a computer or other programmable data processing apparatus to function in a particular manner, such that the instructions stored in the computer-readable storage medium produce an article of manufacture including instruction means which implement the function\/act specified in the flowchart and\/or block diagram block or blocks. The computer program instructions may also be loaded onto a computer or other programmable data processing apparatus to cause a series of operational steps to be performed on the computer or other programmable apparatus to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions\/acts specified in the flowchart and\/or block diagram block or blocks.","Referring to , one example of a network architecture  is illustrated. The network architecture  is presented to show one example of an environment where various embodiments of the invention might operate. The network architecture  is presented only by way of example and not limitation. Indeed, the apparatus and methods disclosed herein may be applicable to a wide variety of different network architectures in addition to the network architecture  shown.","As shown, the network architecture  includes one or more computers ,  interconnected by a network . The network  may include, for example, a local-area-network (LAN) , a wide-area-network (WAN) , the Internet , an intranet , or the like. In certain embodiments, the computers ,  may include both client computers  and server computers  (also referred to herein as \u201chosts\u201d  or \u201chost systems\u201d ). In general, the client computers  initiate communication sessions, whereas the server computers  wait for requests from the client computers . In certain embodiments, the computers  and\/or servers  may connect to one or more internal or external direct-attached storage systems  (e.g., arrays of hard-disk drives, solid-state drives, tape drives, etc.). These computers ,  and direct-attached storage systems  may communicate using protocols such as ATA, SATA, SCSI, SAS, Fibre Channel, or the like.","The network architecture  may, in certain embodiments, include a storage network  behind the servers , such as a storage-area-network (SAN)  or a LAN  (e.g., when using network-attached storage). This network  may connect the servers  to one or more storage systems , such as arrays of hard-disk drives or solid-state drives, tape libraries , individual hard-disk drives or solid-state drives , tape drives , CD-ROM libraries, or the like. To access a storage system , a host system  may communicate over physical connections from one or more ports on the host  to one or more ports on the storage system . A connection may be through a switch, fabric, direct connection, or the like. In certain embodiments, the servers  and storage systems  may communicate using a networking standard such as Fibre Channel (FC) or iSCSI.","Referring to , as previously mentioned, in many cases, backend storage systems  such as disk arrays may be unaware of the I\/O performance and data availability characteristics associated with virtual RAID volumes exposed by higher layers of storage virtualization software.  shows one example of a prior art storage system that allocates physical space to thin-provisioned volumes -in a way that does not preserve the data availability and I\/O performance of a virtual RAID volume  exposed by a higher layer of storage virtualization software. In the illustrated embodiment, the storage virtualization layer  is implemented by a SAN appliance  (e.g., IBM's SAN Volume Controller (SVC)) that sits in the data path between the host  and the storage system ","In the illustrated example, assume that the storage virtualization layer  creates a virtual RAID volume  for use by an application running on the host . In this example, the virtual RAID volume  is a three-way striped virtual RAID volume , which uses three thin-provisioned volumes -exposed by the backend disk array . The disk array is unaware that the thin-provisioned volumes  are used in the three-way striped volume . When the host  writes to the three-way striped volume , a thin-provisioning layer  in the disk array allocates physical space to the three thin-provisioned volumes -from a physical disk storage pool . Since the disk array is unaware that the thin-provisioned volumes -are used in the three-way striped volume , the thin-provisioning layer  allocates physical storage to the three thin-provisioned volumes -from the same physical storage pool , possibly from the same physical disk .","For example, as shown in , space is undesirably allocated to each of the thin-provisioned volumes -from the same physical disk . As understood by those of skill in the art, such a situation defeats the very purpose of creating the three-way striped virtual RAID volume , which is to increase I\/O performance by spreading data across multiple physical disks . Thus, apparatus and methods are needed to preserve data availability and I\/O performance when creating virtual RAID volumes  from backend virtual volumes , such as backend thin-provisioned volumes .",{"@attributes":{"id":"p-0035","num":"0034"},"figref":["FIG. 3","FIG. 2"],"b":["110","200","202","204","210","106","110","204","202","200","110","206","200","208","200","212","200","208","200","208","200","208","202","212"],"i":["a ","a","c ","a","a","c ","a","a","c","a ","a","b ","b","c ","c"]},"Various different approaches may be used to verify that data availability and I\/O performance associated with a particular RAID level are preserved when creating a virtual RAID volume  from backend virtual volumes , such as thin-provisioned volumes . In one embodiment, the storage system is configured to expose an application programming interface (API) to enable external storage virtualization products to set domain separation requirements for backend virtual volumes . For example, when creating a striped virtual RAID volume  from several backend thin-provisioned volumes , the storage virtualization product may use the API to direct the storage system to allocate physical space to the thin-provisioned volumes from different physical disks  or pools  of physical disks  in order to preserve the data availability and I\/O performance of the RAID level. For example, in response to such a request, the storage system may allocate space to a first virtual volume from a first physical disk pool , to a second virtual volume from a second physical disk pool , and to a third virtual volume from a third physical disk pool . One example of such an approach is illustrated in .","Alternatively, the storage system may expose, along with the thin-provisioned volumes , information designating which storage pools  are used to allocate space to the thin-provisioned volumes -. Higher level storage virtualization software  may use this information to select thin-provisioned volumes -that are provisioned from different physical disk pools  in order to create virtual RAID volumes  with the desired domain separation. This will ensure that the RAID level's data availability and I\/O performance are preserved as much as possible.","In certain embodiments, physical disk pools  that are used to allocate space to different thin-provisioned volumes  may be discovered by way of a SCSI or other command sent to the storage system . This may enable storage virtualization software to query the storage system , which may in turn respond to the storage virtualization software, to determine which physical disk pools  are used to allocate space to selected thin-provisioned volumes . The storage virtualization software  may use the returned information to create virtual RAID volumes  from virtual volumes -with the desired domain separation.",{"@attributes":{"id":"p-0039","num":"0038"},"figref":"FIG. 4","b":["200","212","110","400","200","402","404","406","200","202"],"i":"a "},"Using the storage system API, the storage virtualization product queries  the storage system to determine which of the selected backend virtual volumes  is thin-provisioned. The storage system returns  information indicating which if any of the virtual volumes  is thin-provisioned. If any of the virtual volumes  are thin-provisioned, the storage virtualization product directs  the storage system to use different physical disk pools  to allocate space to the selected thin-provisioned volumes .",{"@attributes":{"id":"p-0041","num":"0040"},"figref":"FIG. 5","b":["200","212","110","500","200","110","502","212","208","200","504","506","508","200","110","200","208","510","202","200"],"i":["a ","a ","a "]},"Referring to , to ensure that data availability and I\/O performance are preserved when creating virtual RAID volumes , a storage system may be programmed or configured to include one or more modules. These modules may be implemented in hardware, software or firmware executable on hardware, or a combination thereof. These modules may be included in or work in conjunction with one or more APIs  of the storage system . The modules are presented only by way of example and are not intended to be limiting. Indeed, alternative embodiments may include additional or fewer modules. The functionality of the modules may also be organized differently. For example, the functionality of some modules may be broken into multiple modules or, conversely, the functionality of several modules may be combined into a single module or fewer modules.","As illustrated in , in certain embodiments, the storage system may include one or more of an expose module , a selection module , and a verification module . The expose module  may expose virtual volumes , such as thin-provisioned volumes , residing on the storage system . This will allow the virtual volumes  to be seen by external systems such as storage virtualization products. In certain embodiments, the expose module  may also expose which physical disks  or disk pools  are used to allocate space to the virtual volumes . The selection module  may enable external systems to select one or more virtual volumes . For example, the selection module  may allow a storage virtualization product to select one or more virtual volumes  for inclusion in a virtual RAID volume .","The verification module  may enable an external system such as a storage virtualization product to verify that the data availability and I\/O performance associated with a particular RAID level are preserved when creating a virtual RAID volume . For example, the verification module  may allow storage virtualization products to verify that two different thin-provisioned volumes  are allocated from different physical disks  or disk pools . As previously mentioned, various different approaches may be used to provide this verification. In certain embodiments, the verification module  includes one or more of a query module , an advertisement module , and an instruction module  to provide such verification.","The query module  may be configured to respond to queries, from external systems such as storage virtualization products, regarding domain separation. For example, the query module  may respond to queries requesting information about the physical disks  or disk pools  that are used to allocate space to thin-provisioned volumes . This may allow storage virtualization software to create virtual RAID volumes  from thin-provisioned volumes  that are allocated from different physical disks  or disk pools . In certain embodiments, the queries are received in the form of special (e.g., vendor-unique) SCSI commands. The storage system may respond to these commands by returning the physical disk IDs or disk pool IDs associated with the virtual volumes  for which the queries were sent.","An expose module  may expose information designating which physical disks  or storage pools  are used to allocate space to exposed virtual volumes . In certain embodiments, this information is exposed without the need to query the storage system . Higher level storage virtualization software may use this exposed information to select suitable virtual volumes  for creating virtual RAID volumes .","An instruction module  may receive and execute instructions from external systems such as storage virtualization software. For example, when creating a virtual RAID volume  from several virtual volumes , storage virtualization software may instruct the storage system to allocate space to the virtual volumes  from different physical disks  or disk pools  in order to preserve data availability and I\/O performance. The storage system may respond to such requests and allocate space in the instructed manner. In certain embodiments, the instructions are received in the form of special SCSI commands which are then executed by the storage system ","Referring to , the apparatus and methods disclosed herein may allow storage virtualization software  to co-exist at various levels, such as at the host system , storage network , and storage system  levels. This is significant since storage virtualization at each level may have different sets of advantages and disadvantages.",{"@attributes":{"id":"p-0049","num":"0048"},"figref":["FIG. 7","FIG. 8","FIG. 7"],"b":["204","110","204","202","200","200","110","204","110","1","110","2","110","1","110","2","204","110","1","202","200","200","110","2"],"i":["a","a","a","a ","a","a "]},{"@attributes":{"id":"p-0050","num":"0049"},"figref":"FIG. 9","b":["204","106","200","110","204","202","106","106","204","204","200"],"i":"a"},"The flowcharts and block diagrams in the Figures illustrate the architecture, functionality, and operation of possible implementations of systems, methods, and computer-usable media according to various embodiments of the present invention. In this regard, each block in the flowcharts or block diagrams may represent a module, segment, or portion of code, which comprises one or more executable instructions for implementing the specified logical function(s). It should also be noted that, in some alternative implementations, the functions noted in the block may occur out of the order noted in the Figures. For example, two blocks shown in succession may, in fact, be executed substantially concurrently, or the blocks may sometimes be executed in the reverse order, depending upon the functionality involved. It will also be noted that each block of the block diagrams and\/or flowchart illustrations, and combinations of blocks in the block diagrams and\/or flowchart illustrations, may be implemented by special purpose hardware-based systems that perform the specified functions or acts, or combinations of special purpose hardware and computer instructions."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["In order that the advantages of the invention will be readily understood, a more particular description of the invention briefly described above will be rendered by reference to specific embodiments illustrated in the appended drawings. Understanding that these drawings depict only typical embodiments of the invention and are not therefore to be considered limiting of its scope, the invention will be described and explained with additional specificity and detail through use of the accompanying drawings, in which:",{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 9"}]},"DETDESC":[{},{}]}
