---
title: Visualizing and updating learned event maps in surveillance systems
abstract: Techniques are disclosed for visually conveying an event map. The event map may represent information learned by a surveillance system. A request may be received to view the event map for a specified scene. The event map may be generated, including a background model of the specified scene and at least one cluster providing a statistical distribution of an event in the specified scene. Each statistical distribution may be derived from data streams generated from a sequence of video frames depicting the specified scene captured by a video camera. Each event may be observed to occur at a location in the specified scene corresponding to a location of the respective cluster in the event map. The event map may be configured to allow a user to view and/or modify properties associated with each cluster. For example, the user may label a cluster and set events matching the cluster to always (or never) generate an alert.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08625884&OS=08625884&RS=08625884
owner: Behavioral Recognition Systems, Inc.
number: 08625884
owner_city: Houston
owner_country: US
publication_date: 20090818
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS"],"p":["1. Field of the Invention","Embodiments of the invention provide techniques for conveying information learned by surveillance systems. More specifically, embodiments of the invention relate to techniques for visualizing and updating event maps in surveillance systems.","2. Description of the Related Art","Some currently available video surveillance systems provide simple object recognition capabilities. For example, a video surveillance system may be configured to classify a group of pixels (referred to as a \u201cblob\u201d) in a given frame as being a particular type of object (e.g., a person or vehicle). Once identified, a \u201cblob\u201d may be tracked frame-to-frame in order to follow the \u201cblob\u201d moving through the scene over time, e.g., a person walking across the field of vision of a video surveillance camera. Further, such systems may be configured to determine when an object has engaged in certain predefined behaviors.","However, such surveillance systems typically require that the objects and\/or behaviors which may be recognized by the system to be defined in advance. Thus, in practice, these systems rely on predefined definitions for objects and\/or behaviors to evaluate a video sequence. In other words, unless the underlying system includes a description for a particular object or behavior, the system is generally incapable of recognizing that behavior (or at least instances of the pattern describing the particular object or behavior). Thus, what is \u201cnormal\u201d (acceptable) or \u201cabnormal\u201d (anomalous) behavior needs to be defined in advance, and separate software products need to be developed to recognize additional objects or behaviors. This results in surveillance systems with recognition capabilities that are labor intensive and prohibitively costly to maintain or adapt for different specialized applications. Accordingly, currently available video surveillance systems are typically unable to recognize new patterns of behavior that may emerge in a given scene or recognize changes in existing patterns. More generally, such systems are often unable to identify objects, events, behaviors, or patterns as being \u201cnormal\u201d or \u201cabnormal\u201d by observing what happens in the scene over time; instead, such systems rely on static patterns defined in advance.","One embodiment of the invention includes a computer-implemented method. The method may generally include receiving a request to view an event map of a specified event type involving a specific class of object for a scene depicted in a sequence of video frames; retrieving a background image associated with the scene; retrieving an adaptive theory resonance (ART) network modeling the specified event type, wherein the ART network is generated from the sequence of video frames depicting the scene captured by a video camera, and wherein a location of each cluster in the ART network models a region of the scene were one or more events of the specified type has been to observed to occur; generating a visual representation of each cluster; and superimposing each visual representation over the background image of the scene.","Another embodiment of the invention includes a computer-readable storage medium containing a program which, when executed by a computer processor, performs an operation. The operation may generally include receiving a request to view an event map of a specified event type for a scene depicted in a sequence of video frames; retrieving a background image associated with the scene; retrieving an adaptive theory resonance (ART) network modeling the specified event type, wherein the ART network is generated from the sequence of video frames depicting the scene captured by a video camera, and wherein a location of each cluster in the ART network models a region of the scene were one or more events of the specified type has been to observed to occur; generating a visual representation of each cluster; and superimposing each visual representation over the background image of the scene.","Still another embodiment includes a system having one or more computer processors and a memory containing a program, which, when executed by the one or more computer processors is configured to perform an operation. The operation may generally include receiving a request to view an event map of a specified event type for a scene depicted in a sequence of video frames; retrieving a background image associated with the scene; retrieving an adaptive theory resonance (ART) network modeling the specified event type, wherein the ART network is generated from the sequence of video frames depicting the scene captured by a video camera, and wherein a location of each cluster in the ART network models a region of the scene were one or more events of the specified type has been to observed to occur; generating a visual representation of each cluster; and superimposing each visual representation over the background image of the scene.","Embodiments of the invention provide an interface configured to visually convey information learned by a behavior-recognition system. The behavior-recognition system may be configured to identify, learn, and recognize patterns of behavior by observing and evaluating events depicted by a sequence of video frames. In a particular embodiment, the behavior-recognition system may include both a computer vision engine and a machine learning engine. The computer vision engine may be configured to evaluate a stream of video frames. Typically, each frame of video may be characterized using multiple color (or grayscale) channels (e.g., a radiance value between 0-255 and a set of red, green, and blue (RGB) color channels values, each between 0-255). Further, the computer vision engine may generate a background image by observing the scene over a number of video frames. For example, consider a video camera trained on a stretch of a highway. In such a case, the background would include the roadway surface, the medians, any guard rails or other safety devices, and traffic control devices, etc., that are visible to the camera. Vehicles traveling on the roadway (and any other person or thing engaging in some activity) that are visible to the camera would represent scene foreground objects.","The computer vision engine may compare the pixel values for a given frame with the background image and identify objects as they appear and move about the scene. Typically, when a region of the scene (referred to as a \u201cblob\u201d or \u201cpatch\u201d) is observed with appearance values that differ substantially from the background image, that region is identified as depicting a foreground object. Once identified, the object may be evaluated by a classifier configured to determine what is depicted by the foreground object (e.g., a vehicle or a person). Further, the computer vision engine may identify features (e.g., height\/width in pixels, average color values, shape, area, and the like) used to track the object from frame-to-frame. Further still, the computer vision engine may derive a variety of information while tracking the object from frame-to-frame, e.g., position, current (and projected) trajectory, direction, orientation, velocity, acceleration, size, color, and the like. In one embodiment, the computer vision outputs this information as a stream of \u201ccontext events\u201d describing a collection of kinematic information related to each foreground object detected in the video frames. Each context event may provide kinematic data related to a foreground object observed by the computer vision engine in the sequence of video frames.","Data output from the computer vision engine may be supplied to the machine learning engine. In one embodiment, the machine learning engine may evaluate the context events to generate \u201cprimitive events\u201d describing object behavior. Each primitive event may provide semantic meaning to a group of one or more context events. For example, assume a camera records a car entering a scene, and that the car turns and parks in a parking spot. In such a case, the computer vision engine could initially recognize the car as a foreground object; classify it as being a vehicle, and output kinematic data describing the position, movement, speed, etc., of the car in the context event stream. In turn, a primitive event detector could generate a stream of primitive events from the context event stream such as \u201cvehicle appears,\u201d vehicle turns,\u201d \u201cvehicle slowing,\u201d and \u201cvehicle stops\u201d (once the kinematic information about the car indicated a speed of 0). As events occur, and re-occur, the machine learning engine may create, encode, store, retrieve, and reinforce patterns representing the events observed to have occurred, e.g., long-term memories representing a higher-level abstraction of a car parking in the scene\u2014generated from the primitive events underlying multiple observations of different cars entering and parking. Further still, patterns representing an anomalous event (relative to prior observation) or events identified as an event of interest may result in alerts passed to users of the behavioral recognition system.","In one embodiment, the machine learning engine may include a mapper component configured to parse data coming from the context event stream and the primitive event stream and to supply portions of these streams as input to multiple neural networks (e.g., Adaptive Resonance Theory (ART) networks). Each individual ART network may generate clusters from the set of inputs data specified for that ART network. Each cluster represents an observed statistical distribution of a particular thing or event being observed by that ART network. Further, the mapper component may be configured to detect unusual events occurring in the scene depicted by the video frames. For example, the mapper component may monitor the clusters that emerge from a given one of the ART networks, and in some cases, when a set of inputs results in a new cluster, generate an alert representing the occurrence of an unusual or anomalous event. In one embodiment, the ART network may be configured to provide dynamic clustering. That is, unlike ART networks known in the art, a cluster in the modified ART network described herein may change in size as each set of input data is mapped to that cluster. As described in greater detail below, a cluster may initially be defined as a relatively small size (e.g., an area corresponding to a radius of 5-10 pixels). However, as inputs are mapped to that cluster, the size may grow and change over time. Further, the clusters may decay over time. For example, if a cluster does not receive a set of input data (reinforcing the importance of that cluster) for a specified period of time, such a cluster may be removed from an ART network.","Further, an ART network of the mapper component  may determine whether a detected event matches a cluster, according to one embodiment. For example, the ART network may receive a vector as input and either update an existing cluster or create a new cluster, as determined using a choice test and a vigilance test for the ART network. The choice test provides a ranking of the existing clusters, relative to the vector input data. Once ranked, the vigilance test evaluates the existing clusters to determine whether to map the input to a given cluster. If no cluster is found to update using the data supplied to the input layer, evaluated sequentially using the ranked clusters, then a new cluster is created.","In one embodiment, the machine learning engine may also include a transaction server. The transaction server may generate an event map using data retrieved from the mapper component. Further, the transaction server allows users to: (i) explore data learned by the machine learning engine and (ii) supply metadata specifying how the system is to respond to certain observed events and\/or behaviors (for example, when to produce or not to produce an alert). For example, a user may supply metadata to override default behavior of the machine learning engine. The default behavior may include alerting the user upon detecting novel or rare events occurring (the user is not alerted upon detecting events that frequently occur). For example, the transaction server may receive a request to view an event map generated by the mapper component for a scene. In response, the transaction server may generate a visual representation of the clusters superimposed over background model for the specified scene.","Further, the transaction server may also receive user requests to associate metadata with one of the clusters. The metadata may be used to guide system behavior. For example, a user may specify to name a cluster, always alert on a cluster, ignore a cluster, modify metadata for a cluster, etc.","In the following, reference is made to embodiments of the invention. However, it should be understood that the invention is not limited to any specifically described embodiment. Instead, any combination of the following features and elements, whether related to different embodiments or not, is contemplated to implement and practice the invention. Furthermore, in various embodiments the invention provides numerous advantages over the prior art. However, although embodiments of the invention may achieve advantages over other possible solutions and\/or over the prior art, whether or not a particular advantage is achieved by a given embodiment is not limiting of the invention. Thus, the following aspects, features, embodiments and advantages are merely illustrative and are not considered elements or limitations of the appended claims except where explicitly recited in a claim(s). Likewise, reference to \u201cthe invention\u201d shall not be construed as a generalization of any inventive subject matter disclosed herein and shall not be considered to be an element or limitation of the appended claims except where explicitly recited in a claim(s).","One embodiment of the invention is implemented as a program product for use with a computer system. The program(s) of the program product defines functions of the embodiments (including the methods described herein) and can be contained on a variety of computer-readable storage media. Examples of computer-readable storage media include (i) non-writable storage media (e.g., read-only memory devices within a computer such as CD-ROM or DVD-ROM disks readable by an optical media drive) on which information is permanently stored; (ii) writable storage media (e.g., floppy disks within a diskette drive or hard-disk drive) on which alterable information is stored. Such computer-readable storage media, when carrying computer-readable instructions that direct the functions of the present invention, are embodiments of the present invention. Other examples media include communications media through which information is conveyed to a computer, such as through a computer or telephone network, including wireless communications networks.","In general, the routines executed to implement the embodiments of the invention may be part of an operating system or a specific application, component, program, module, object, or sequence of instructions. The computer program of the present invention is comprised typically of a multitude of instructions that will be translated by the native computer into a machine-readable format and hence executable instructions. Also, programs are comprised of variables and data structures that either reside locally to the program or are found in memory or on storage devices. In addition, various programs described herein may be identified based upon the application for which they are implemented in a specific embodiment of the invention. However, it should be appreciated that any particular program nomenclature that follows is used merely for convenience, and thus the invention should not be limited to use solely in any specific application identified and\/or implied by such nomenclature.",{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 1","b":["100","100","105","110","115","118","110","105","115","111","115","120","125","130","135","140","135","140","105"]},"Network  receives video data (e.g., video stream(s), video images, or the like) from the video input source . The video input source  may be a video camera, a VCR, DVR, DVD, computer, web-cam device, or the like. For example, the video input source  may be a stationary video camera aimed at a certain area (e.g., a subway station, a parking lot, a building entry\/exit, etc.), which records the events taking place therein. Generally, the area visible to the camera is referred to as the \u201cscene.\u201d The video input source  may be configured to record the scene as a sequence of individual video frames at a specified frame-rate (e.g., 24 frames per second), where each frame includes a fixed number of pixels (e.g., 320\u00d7240). Each pixel of each frame may specify a color value (e.g., an RGB value) or grayscale value (e.g., a radiance value between 0-255). Further, the video stream may be formatted using known such formats e.g., MPEG2, MJPEG, MPEG4, H.263, H.264, and the like.","The computer vision engine  may be configured to analyze this raw information to identify active objects in the video stream, classify the objects, derive a variety of metadata regarding the actions and interactions of such objects, and supply this information to a machine learning engine . In turn, the machine learning engine  may be configured to evaluate, observe, learn, and remember details regarding events (and types of events) that transpire within the scene over time.","In one embodiment, the machine learning engine  receives the video frames and the data generated by the computer vision engine . The machine learning engine  may be configured to analyze the received data, build semantic representations of events depicted in the video frames, detect patterns, and, ultimately, to learn from these observed patterns to identify normal and\/or abnormal events. Additionally, data describing whether a normal\/abnormal behavior\/event has been determined and\/or what such behavior\/event is may be provided to output devices  to issue alerts, for example, an alert message presented on a GUI screen. In general, the computer vision engine  and the machine learning engine  both process video data in real-time. However, time scales for processing information by the computer vision engine  and the machine learning engine  may differ. For example, in one embodiment, the computer vision engine  processes the received video data frame-by-frame, while the machine learning engine  processes data every N-frames. In other words, while the computer vision engine  analyzes each frame in real-time to derive a set of information about what is occurring within a given frame, the machine learning engine  is not constrained by the real-time frame rate of the video input.","Note, however,  illustrates merely one possible arrangement of the behavior-recognition system . For example, although the video input source  is shown connected to the computer system  via the network , the network  is not always present or needed (e.g., the video input source  may be directly connected to the computer system ). Further, various components and modules of the behavior-recognition system  may be implemented in other systems. For example, in one embodiment, the computer vision engine  may be implemented as a part of a video input device (e.g., as a firmware component wired directly into a video camera). In such a case, the output of the video camera may be provided to the machine learning engine  for analysis. Similarly, the output from the computer vision engine  and machine learning engine  may be supplied over computer network  to other computer systems. For example, the computer vision engine  and machine learning engine  may be installed on a server system and configured to process video from multiple input sources (i.e., from multiple cameras). In such a case, a client application ,  running on another computer system may request (or receive) the results of over network .",{"@attributes":{"id":"p-0036","num":"0035"},"figref":["FIG. 2","FIG. 1"],"b":["135","140","135","205","210","215","220","205","210","215","220","105","205","210","215","220","205","210","215","220"]},"In one embodiment, the BG\/FG component  may be configured to separate each frame of video provided by the video input source  into a stationary or static part (the scene background) and a collection of volatile parts (the scene foreground.) The frame itself may include a two-dimensional array of pixel values for multiple channels (e.g., RGB channels for color video or grayscale channel or radiance channel for black and white video). The BG\/FG component  may be configured to generate a mask used to identify which pixels of the scene have been determined to depict foreground and, conversely, which pixels have been determined to depict scene background. The BG\/FG component  then identifies regions of the scene that contain a portion of scene foreground (referred to as a foreground \u201cblob\u201d or \u201cpatch\u201d) and supplies this information to subsequent stages of the pipeline. Additionally, portions of the scene determined to depict scene background maybe used to update pixel values in a background image modeling the scene.","The tracker component  may receive the foreground patches produced by the BG\/FG component  and generate computational models for the patches. The tracker component  may be configured to use this information, and each successive frame of raw-video, to attempt to track the motion of the objects depicted by the foreground patches as they move about the scene. Further, once the tracker component  identifies an object, the tracker component  may continue tracking the object even if the BG\/FG component  does not continuously report pixels of the object as foreground.","The estimator\/identifier component  may receive the output of the tracker component  (and the BF\/FG component ) and classify each tracked object as being one of a known category of objects. For example, in one embodiment, estimator\/identifier component  may classify a tracked object as being a \u201cperson,\u201d a \u201cvehicle,\u201d an \u201cunknown,\u201d or an \u201cother.\u201d In this context, the classification of \u201cother\u201d represents an affirmative assertion that the object is neither a \u201cperson\u201d nor a \u201cvehicle.\u201d Additionally, the estimator\/identifier component may identify characteristics of the tracked object, e.g., for a person, a prediction of gender, an estimation of a pose (e.g., standing or sitting) or an indication of whether the person is carrying an object. In an alternative embodiment, the machine learning engine  may classify foreground objects observed by the vision engine . For example, the machine learning engine  may include an unsupervised classifier (e.g., an ART network) configured to observe, and ultimately classify actors in a scene based on a plurality of micro-features (e.g., size, speed, appearance, etc).","The context processor component  may receive the output from other stages of the pipeline (i.e., the tracked objects, the background and foreground models, and the results of the estimator\/identifier component ). Using this information, the context processor  may be configured to generate a stream of context events regarding objects tracked (by tracker component ) and classified (by estimator identifier component ). For example, the context processor component  may evaluate a foreground object from frame-to-frame and output context events describing that object's height, width (in pixels), position (as a 2D coordinate in the scene), acceleration, velocity, orientation angle, etc.","The computer vision engine  may take the outputs of the components , , , and  describing the motions and actions of the tracked objects in the scene and supply this information to the machine learning engine . In one embodiment, the primitive event detector  may be configured to receive the output of the computer vision engine  (i.e., the video images, the object classifications, and context event stream) and generate a sequence of primitive events\u2014labeling the observed actions or behaviors in the video with semantic meaning. For example, assume the computer vision engine  has identified a foreground object and classified that foreground object as being a vehicle and the context processor component  estimates kinematic data regarding the car's position and velocity. In such a case, this information is supplied to the machine learning engine  and the primitive event detector . In turn, the primitive event detector  may generate a semantic symbol stream providing a simple linguistic description of actions engaged in by the vehicle. For example, a sequence of primitive events related to observations of the computer vision engine  occurring at a parking lot could include formal language vectors representing the following: \u201cvehicle appears in scene,\u201d \u201cvehicle moves to a given location,\u201d \u201cvehicle stops moving,\u201d \u201cperson appears proximate to vehicle,\u201d \u201cperson moves,\u201d person leaves scene\u201d \u201cperson appears in scene,\u201d \u201cperson moves proximate to vehicle,\u201d \u201cperson disappears,\u201d \u201cvehicle starts moving,\u201d and \u201cvehicle disappears.\u201d As described in greater detail below, the primitive event stream may be supplied to excite the perceptual associative memory .","Illustratively, the machine learning engine  includes a long-term memory , a perceptual memory , an episodic memory , a workspace , codelets , a mapper component , mapper event data , and a transaction server . In one embodiment, the perceptual memory , the episodic memory , and the long-term memory  are used to identify patterns of behavior, evaluate events that transpire in the scene, and encode and store observations. Generally, the perceptual memory  receives the output of the computer vision engine  (e.g., the context event stream) and a primitive event stream generated by primitive event detector . The episodic memory  stores data representing observed events with details related to a particular event. That is, the episodic memory  may encode specific details of a particular event, i.e., \u201cwhat, when, and where\u201d something occurred within a scene, such as a particular vehicle (car A) moved to a location believed to be a parking space (parking space 5) at 9:43 AM.","The long-term memory  may store data generalizing events observed in the scene. To continue with the example of a vehicle parking, the long-term memory  may encode information capturing observations and generalizations learned by an analysis of the behavior of objects in the scene such as \u201cvehicles tend to park in a particular place in the scene,\u201d \u201cwhen parking vehicles tend to move a certain speed,\u201d and \u201cafter a vehicle appears and parks, people tend to appear in the scene proximate to the vehicle,\u201d etc. Thus, the long-term memory  stores observations about what happens within a scene with much of the particular episodic details stripped away. In this way, when a new event occurs, memories from the episodic memory  and the long-term memory  may be used to relate and understand a current event, i.e., the new event may be compared with past experience, leading to both reinforcement, decay, and adjustments to the information stored in the long-term memory , over time. In a particular embodiment, the long-term memory  may be implemented as an ART network and a sparse-distributed memory data structure.","Further, as described in greater detail below, the mapper component  may receive the context event stream and the primitive event stream and parse information sent to multiple ART networks to generate statistical models of what occurs in the scene for different groups of context events and primitive events. The statistical models of what occurs in the scene for different groups of context events and primitive events may be referred to as what is \u201clearned\u201d by the mapper component  and may be stored as the mapper event data . As described below, the transaction server  may generate, at least in part from the mapper event data , event maps for display via a GUI tool .","Note, however, the transaction server  is shown in  as a separate component from the machine learning engine  for reasons of clarity. In an alternative embodiment, the functions provided by the transaction server  may be integrated into the machine learning engine . For example, the event maps provided for display via the GUI tool  may be generated directly by the mapper component . Of course, one of ordinary skill in the art will recognize that the functions of the transaction server  may be implemented in a variety of ways.","Generally, the workspace  provides a computational engine for the machine learning engine . For example, the workspace  may be configured to copy information from the perceptual memory , retrieve relevant memories from the episodic memory  and the long-term memory , select and invoke the execution of one of codelets . In one embodiment, each codelet  is a software program configured to evaluate different sequences of events and to determine how one sequence may follow (or otherwise relate to) another (e.g., a finite state machine). More generally, the codelet may provide a software module configured to detect interesting patterns from the streams of data fed to the machine learning engine. In turn, the codelet  may create, retrieve, reinforce, or modify memories in the episodic memory  and the long-term memory . By repeatedly scheduling codelets  for execution, copying memories and percepts to\/from the workspace , the machine learning engine  performs a cognitive cycle used to observe, and learn, about patterns of behavior that occur within the scene.","In one embodiment, the transaction server  processes user requests from the GUI tool  for event maps. The transaction server  may be configured to retrieve information from the mapper component  in order to generate a visual display of information learned by the machine learning engine, i.e., to generate the requested event map. In another embodiment, the mapper component  may itself integrate the transaction server . Table I shows examples of transactions that may be supported by the transaction server :",{"@attributes":{"id":"p-0048","num":"0047"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE I"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Transactions supported by the transaction server 260"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Transaction","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Get preset list","Obtain a list of presets for a specified camera"]},{"entry":["Get scene image","Obtain a picture that represents a scene as viewed by"]},{"entry":[{},"the camera"]},{"entry":["Get list of maps","Obtain a list of maps for a specified preset"]},{"entry":["Get map","Obtains data for a specified map"]},{"entry":[{},"(e.g., including properties)"]},{"entry":["Set always alert","Specifies to always alert on an event matching a"]},{"entry":[{},"specified cluster"]},{"entry":["Set always ignore","Specifies to never alert on an event matching a"]},{"entry":[{},"specified cluster"]},{"entry":["Modify property","Modify a specified property of a specified cluster"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},{"@attributes":{"id":"p-0049","num":"0048"},"figref":"FIG. 3","b":["300","305","310","305","305","305","305","305","305","300","305","310","310","211"]},{"@attributes":{"id":"p-0050","num":"0049"},"figref":"FIG. 4","b":["415","420","135"]},{"@attributes":{"id":"p-0051","num":"0050"},"figref":["FIG. 5","FIG. 2"],"b":["500","502","504","506","504","502","140","502","211","260","502","504","502","502"]},"As shown, the method  begins at step , where the user  invokes the client . At step , the client  connects to the server . For example, the client  may connect to a specified IP address and port number on which the server  is listening. At step , the client  queries for a list of cameras and associated presets . Each preset may include a location and orientation of a respective camera observing (or having observed) a scene. At step , the server  returns a list of cameras and presets to the client . At step , the client  displays the list of cameras and presets to the user .","At step , the user  selects a camera and a preset. The client  then queries for the event maps from the server  for the selected camera and preset (step ). The query may also specify filtering criteria for excluding event maps from being displayed, according to one embodiment. At step , the server  returns the event maps to the client . In another embodiment, the user need not select a camera and\/or a preset. For example, the server  may be configured to return the event maps for a currently active scene. At step , the client  displays the event maps to the user . In one embodiment, the client  may generate a display based on specified filtering criteria. In one embodiment, the event map may include clusters for an event type superimposed on a background model of the selected camera and preset. The client  may superimpose the clusters on the background model (both of which may be received from the server  in step ), according to one embodiment. The client  may allow the user  to select one or more clusters of the event map. The client  may also display properties associated with selected clusters. The properties may include an identifier for the cluster, a label of the cluster, a location of the cluster in the scene, a size of the cluster, identifiers for ancestors of the cluster, alert preferences for the cluster, etc. Ancestors of a cluster refer to two or more clusters that are merged to form the cluster. The client  may also allow the user  to modify one or more properties for a cluster. For example, a user  may modify a label or display properties for a cluster to customize how the event map conveys information for a particular event.","At step , the user  modifies the displayed event map via the client . For example, the user  may modify a property of a cluster in the displayed event map. At step , the client  sends a request to the server  to update the event map. In one embodiment, the server  may treat each client request as a separate transaction. At step , the server  attempts to update the event map and returns a result to the client  indicating success or failure of the attempted update. After the step , the method  may terminate or return to the steps , , or . At a discretion of the user, the method  may also terminate prior to the step  or the step .",{"@attributes":{"id":"p-0055","num":"0054"},"figref":"FIG. 6","b":["600","600","601","620","601","604","606","608","610","612","614","616","604","606","608","610","612","614","616","604","620","604","604","604","604","601","604","604","604","604","604"]},{"@attributes":{"id":"p-0056","num":"0055"},"figref":["FIG. 7","FIG. 7","FIG. 7"],"b":["710","710","211","710","211","270"]},{"@attributes":{"id":"p-0057","num":"0056"},"figref":"FIG. 8","b":["800","800","810","260","820","260","135","830","260","260","211","260","260"]},"At step , the transaction server  may superimpose the visual representation over the background model to create the event map. In another embodiment, the transaction server merely provides the background image and a cluster, delegating, to a client application, the steps of generating a visual representation of the cluster and\/or superimposing the visual representation on the background image. The event map represents information learned by the mapper component . For example, the event map may represent ART network clusters that emerge from primitive events and input data showing where people appear in given scene. Further, the GUI tool  for event maps may be configured to allow the user to view and\/or modify properties of any cluster selected by the user. Modifying a property of a selected cluster is described further below in conjunction with . At step , the mapper component  may output the event map to a graphical display. After step , the method  terminates.",{"@attributes":{"id":"p-0059","num":"0058"},"figref":"FIG. 9","b":["900","900","910","260","940","260","945","950","260","211","955","960","260","211","965","925","945","955","965","260","975","960","975","900"]},"Advantageously, embodiments of the invention provide users with a visualization of data observed by a machine learning engine of a behavior recognition system. Further, the visualization may provide an interface used to guide system behavior. For example, a user may use the interface to specify that the behavior recognition system is to alert (or not to alert) on detecting an event that maps to a specified cluster. In one embodiment, the interface visually conveys an event map. The event map represents information learned by the mapper component of the machine learning engine. That is, the event map conveys information used by the computer vision engine to identify uncommon events as they are observed to occur in a sequence of video frames. Further, a transaction server of the machine learning engine may receive a request to view an event map for a specified scene. The transaction server may generate the event map for the specified scene. The event map may include a background model of the specified scene and at least one cluster. The event map may also be configured to allow a user to view and\/or modify properties associated with a cluster. For example, the user may label a cluster and set events matching the cluster to never generate an alert.","While the foregoing is directed to embodiments of the present invention, other and further embodiments of the invention may be devised without departing from the basic scope thereof, and the scope thereof is determined by the claims that follow."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["So that the manner in which the above recited features, advantages, and objects of the present invention are attained and can be understood in detail, a more particular description of the invention, briefly summarized above, may be had by reference to the embodiments illustrated in the appended drawings.","It is to be noted, however, that the appended drawings illustrate only typical embodiments of this invention and are therefore not to be considered limiting of its scope, for the invention may admit to other equally effective embodiments.",{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 9"}]},"DETDESC":[{},{}]}
