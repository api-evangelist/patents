---
title: User-defined indexing of multimedia content
abstract: Methods, systems, and computer program products for arbitrarily indexing multimedia content. In accordance with example embodiments, a multimedia content stream that comprises one or more samples is received. At least one of the samples is passed to one or more multimedia filters for analysis based on criteria that define an index type for the multimedia filter. Once it is determined that the sample meets the criteria for an arbitrary filter and index type, an index entry that identifies both the sample and the index type of the arbitrary filter is created. The index entry is adapted in accordance with a common, extensible indexing scheme to coexist with other index entries of other or the same index type for the sample. The created index entry is stored for subsequent access.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07984089&OS=07984089&RS=07984089
owner: Microsoft Corporation
number: 07984089
owner_city: Redmond
owner_country: US
publication_date: 20040213
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","BACKGROUND OF THE INVENTION","BRIEF SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS"],"p":["N\/A","1. The Field of the Invention","The present invention relates to indexes for multimedia content. More specifically, the present invention relates to adding an arbitrary index to multimedia content such that the arbitrary index is capable of coexisting with one or more other arbitrary indexes.","2. Background and Related Art","Traditionally, indexing of multimedia content has been either time-based or frame-based. In other words, access to multimedia content (other than sequential access) requires specifying a particular time offset (e.g., 5 minutes and 18 seconds) or specifying a particular frame offset (e.g., frame 302010). With respect to content for which compression is linear, such as audio content, time offsets essentially correspond to byte offsets within the content, and therefore the content may appear to be indexed, when in fact it is not\u2014seeking to a particular time offset is simply a matter of seeking to the corresponding byte offset within the content. Compression for other content, such as video content, is nonlinear, and therefore seeking to a particular time offset usually requires a time index that maps either directly to a byte offset within a file or indirectly to a byte offset through a frame index that maps directly to a byte offset.","One of the problems with traditional multimedia indexes is their lack of flexibility. Generally these indexes are produced by the content author and may not be subsequently altered or extended. In some cases, the indexing also may be linked to the layout or physical storage of the multimedia content on a medium. For example, DVDs often allow for navigation by scene. This navigation, however, is based on the multimedia content being divided into chapters on the DVD (each scene is a separate chapter). As a result, it would not be possible for a consumer to alter the DVD's scene navigation, by adding, deleting, or combining scenes. Other traditional indexes are stored in a file header and therefore are limited in size. When the index needs to expand, the multimedia content must be shifted down in the file, which in this context, may be prohibitive, given that the size of multimedia data often is measured in gigabytes.","Traditional indexes also tend to be brittle. For instance, returning to the DVD example above, a content author could alter the scene navigation, but in doing so, the original navigation is no longer possible. Because the scene indexing is based on chapter divisions, it is not possible for two different scene navigations to coexist on the same medium. Of course, altering scene navigation for a DVD would not be possible for anyone other than the DVD zauthor.","Similar indexing problems arise in other multimedia contexts. For example, the increasing popularity of personal video recorders (PVRs) offers an opportunity for a number of desirable indexing scenarios. PVRs generally are used to record multimedia content that is broadcast over a cable network, a satellite network, or publicly accessible frequency bands. Examples of desirable indexes might include an index for scene changes, voice changes, commercials, MPEG video frames (I, P, and B), viewer-defined events (e.g., favorite scenes, etc.), content protection information, and so forth. Traditional multimedia indexing schemes, however, lack the ability to generate arbitrary indexes that can coexist and not interfere or collide with each other. This is particularly so, where different indexes of the same type are present (e.g., scene changes, favorite scenes, favorite scenes of different consumers or users, etc.).","Accordingly, methods, systems, and computer program products are desired for arbitrarily indexing multimedia content such that the arbitrary indexes are capable of coexisting with each other.","The present invention relates to arbitrarily indexing multimedia content. In accordance with example embodiments, one or more multimedia content streams are received, each stream comprising one or more samples. At least one sample is passed to one or more multimedia filters for analysis based on criteria that define an index type for each filter. A determination is made that the sample meets the criteria for an arbitrary filter and index type. An index entry that identifies the sample and the index type of the arbitrary filter is created. The index entry is adapted in accordance with a common, extensible indexing scheme to coexist with other index entries of other or the same index type for the sample. The created index entry is stored for subsequent access.","The sample may have already been indexed, perhaps by the content author, with at least one other index, such as a time- or frame-based index, or a Society of Motion Picture and Television Engineers (SMPTE) timecode index. If multiple filters are present, it may be determined that the sample meets the criteria for another filter and index type. In this case, another index entry that identifies the sample and the index type of the other filter is created and stored for subsequent access. Multiple filters may be arranged in serial, in parallel, and\/or a combination of serial and parallel. Index entries may be stored with the multimedia content, in a separate file, or in a temporary memory, such as an index cache. Types of filters and indexes are completely arbitrary, and may include new scenes, a user's favorite scenes, correlated external events (such a clocks, Internet pulses, instant messages, phone calls, and so forth), text criteria (such as closed captioning criteria, subtitle criteria, descriptive video criteria, and the like), voice change or other audio criteria, commercials, video frames, content protection information, etc. It should be recognized that indexes may be hierarchical (i.e., they may reference previously generated indexes to an arbitrary number of levels, which finally reference the actual content). Multimedia content should be interpreted broadly to encompass audio, video, graphics images, closed-captioning data, subtitles, Advanced Television Enhancement Forum (ATVEF) data, and the like.","Additional features and advantages of the invention will be set forth in the description which follows, and in part will be obvious from the description, or may be learned by the practice of the invention. The features and advantages of the invention may be realized and obtained by means of the instruments and combinations particularly pointed out in the appended claims. These and other features of the present invention will become more fully apparent from the following description and appended claims, or may be learned by the practice of the invention as set forth hereinafter.","The present invention extends to methods, systems, and computer program products for adding an arbitrary index to multimedia content such that the arbitrary index is capable of coexisting and not interfering with one or more other arbitrary indexes regardless of index type. The embodiments of the present invention may comprise one or more special purpose and\/or one or more general purpose computers including various computer hardware, as discussed in greater detail below.",{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIGS. 1A-1C","b":["100","1","110","2","120","3","130"]},"When the analysis criteria of a filter is met or satisfied, the sample is flagged and an index entry is subsequently generated for the content under analysis. (An example multimedia index is described in greater detail below with respect to .) For example, as shown in , index  was generated based on the analysis criteria of filter  being met, index  was generated based on the analysis criteria of filter  being met, and index  was generated based on the analysis criteria of filter  being met. Following analysis by the filters, the generated index entries are saved in storage . ( show example file formats for storing multimedia indexes.) The indexes also may be stored in a temporary memory, such as an index cache, so the entries are accessible while the index is being built.","The analysis of the filters may be applied to multimedia content in real-time as the content is received from a broadcaster or other source, or may be applied as a post-processing operation. For example, as a personal video recorder (PVR), such as the one described below with respect to , receives multimedia content, several indexes may be created.","PVRs frequently are used as time shifting devices. For a recorded program, it may be desirable to fast forward (or rewind), which may be implemented as a seek ahead\/back a given amount of time or a given number of I-frames, requiring either a time-based index or a frame-based index. During playback, a user may be bored or uninterested with a particular scene and want to skip forward to the next scene, or may enjoy a particular scene and wish to play the scene back again, in which case a scene change index is needed. For content subject to conditional access (such as premium movie channels, pay-per-view, etc.), randomly seeking within the content may require locating content protection information in order to view the content, in which case a content protection index would be helpful.","A user may desire to locate a particular character within the multimedia content, in which case a voice change index may be needed, and depending on the sophistication of the filter, the filter may be able to index whenever the particular character speaks within the content. When closed captioning information is displayed, seeking to any of various indexes may start the closed caption in the middle of a word. Accordingly, a closed captioning index could be used as a fine adjustment to a more coarsely specified starting point within the content. For example, when seeking by time or frame, the actual time or frame may be altered using the closed captioning index to help assure that complete closed captioning information can be displayed when playback begins.","Similarly, PVRs may implement content jumps or skips of fixed amounts of time, such as 30 seconds. However, if a new scene begins in 25 seconds or 35 seconds, it is likely that the user would prefer jumping directly to the scene change, rather than rigidly holding to an exact 30 seconds. Here too, one index may be used as a fine adjustment to another index. The scene index can be used to alter a 30-second jump slightly, since it is most probable the user would prefer to navigate directly to the new scene, rather than having to rewind or fast forward manually after making the fixed 30-second jump.","Users also may wish to define their own indexes. For example, a user may wish to index favorite scenes within the multimedia content. The favorite scene index could be built on top of the scene index, or could be completely independent index. A favorite scenes index illustrates a filter and index with criteria based, at least in part, on receiving some form of input from the user. One of the problems that may be encountered with traditional indexes is the inability to keep similar indexes (e.g., scene-based indexes) from interfering with each other. In other words, keeping a separate index for all scenes, for one user's favorite scenes, and for another user's favorite scenes has not been possible. Indexing in accordance with the present invention, as described below with respect to the embodiment illustrated in , allows for arbitrary indexing multimedia content, including the generation and\/or addition of multiple indexes of the same type for the same content. In view of the foregoing, it should be emphasized that many possible environments exist for practicing the present invention\u2014the PVR environment illustrated in  and the personal computer environment illustrated in  are merely two examples.","In another example, the scenes and VBI data within a newscast could be analyzed to generate two indexes for content: 1) scene changes on video, 2) programming type e.g. headlines, sports, weather, etc. The PVR could combine these two indexes so that one newscast could be replayed in a customized manner for two viewers from the same recording. Viewer A might prefer to watch only headlines and sports, in that order. Viewer B might prefer to watch weather first, then headlines, then sports.","Similarly, a voice-recognition index might allow a third viewer of the same newscast to watch only the content when the news anchor is speaking.","Another possible use of an index is a real-time analysis. For example, some analysis module might measure the average color of each frame and store a moving average once a second. Other modules might measure the video bit-rate, also sampled over a one-second duration. Several such measures might be combined to post-process the file and detect subtle correlations between the various measures to categorize passages of video.","Each entry (see , below) generated in a index can have some data associated with it. Generally, this data will be relatively small, but it will allow the multimedia filters to store some context with the entry. For example, the PVR might generate a thumbnail preview of the newscast recording. Each of the thumbnails might have some trans-coded VBI data that was present at the time of the scene change. The scene change entry might store a scene indexing number, and\/or other type of context information.","As indicated above,  illustrate example arrangements of multimedia content filters.  shows a serial or sequential arrangement of filters , , and  for indexing the multimedia content received from source . In one embodiment, the filters tag individual samples of multimedia content via an interface to add an attribute of {GUID,blob} form. Subsequently, collection code associated with the filters scan samples for the presence of the attribute and makes an index entry with the blob content of the attribute in an index with the attributes GUID. As described in more detail below,  shows an example index. This arrangement allows filters to be very simple: there are no required callback interfaces or complicated synchronization semantics.","Because the analysis performed by the filters requires some amount of processing time, filters generally introduce at least some delay when processing the content.  illustrates a parallel arrangement of filters , , and . The parallel arrangement allows for simultaneous analyzing the multimedia content with multiple filters, and therefore reduces overall processing time. However, each of the parallel filters may introduce a different amount of delay in the multimedia content they process. Synchronizer\/multiplexer  takes the analyzed multimedia content from each filter and produces a single multimedia content stream, with the indexes from each filter. It should be noted that the present invention does not impose any limitation on the number of indexes that may be associated with the multimedia content.",{"@attributes":{"id":"p-0036","num":"0035"},"figref":["FIG. 1C","FIGS. 3A-3C","FIGS. 1A-1C"],"b":["110","120","130","140","150"]},"Although  show relatively simple filter arrangements or topologies, multimedia content may flow in any arbitrary topology between the analysis filters, such as skipping filters, jumping filter branches, feedback (recursive) loops, and the like. Since filters may be implemented in software, in hardware, or a combination of hardware and software, topologies may cover the full range of software and\/or hardware branching options. In some embodiments, one or more filters may store an arbitrary number of samples or other data, including state data, internally for comparison with newly arriving samples. Alternatively, certain data may be included within the index blob or otherwise associated, perhaps temporarily, with the samples themselves. It also should be noted that filters may communicate analysis results, intermediate calculations or computations, or other data with each other to improve performance and\/or create arbitrarily complex filters. In this manner, multiple individual filters may be combined to produce a composite filter, with some or all of the attributes of each constituent filter. Furthermore, filters need not process the same multimedia stream. For example, one filter may process a video stream while another filter processes an audio stream, such as a scene detection video filter that uses audio information to hint at scene changes. Of course, the scene detection filter could also be implemented as a third filter that uses analysis (results, intermediate calculations or computations, etc.) from the video stream filter and the audio stream filter in detecting scene changes. Simply stated, filter topologies that support arbitrary ordering, feedback and crosstalk with shared data on multiple data stream are all within the scope of the present invention.","The analysis performed by filters , , and  may be performed as the content is being received and\/or may be conducted as part of a post-processing analysis. In either case, the multimedia content may already include existing indexes. As indicated above, the indexing may be saved or stored for subsequent access as either temporary or transitory indexing or as long-term indexing.",{"@attributes":{"id":"p-0039","num":"0038"},"figref":["FIG. 2","FIGS. 1A-1C"],"b":"200"},"Index  include type  index entry , type  index entry , type  index entry , and type  index entry . Index  includes type  index entry , type  index entry , type  index entry , and type  index entry . Note that type  index entry  and type  index entry  reference the same multimedia content. This is simply an indication that the sample met the criteria for both filters. Index  includes type  begin index entry  and type  end index entry . Note that index  explicitly defines a span or sample of multimedia content using a \u201cbegin\u201d and an \u201cend\u201d index entry. Other indexes may simply imply a sample or span based on one or more index entries. Although not shown in , other indexes may be built using existing indexes or portions of existing indexes. Accordingly, a fourth index, for example, could be made up of type  index entry , type  index entry , and type  index entry .",{"@attributes":{"id":"p-0041","num":"0040"},"figref":["FIGS. 3A-3C","FIG. 3A"],"b":["300","310","320","330","340","342","344","346","348","310","320","330"]},"In , file B includes a header object ; multiple data objects  and , user-defined index entries , , and , a meta user-defined index entry , and a time index object  as top-level objects. Note, however, in contrast to , that the user-defined index entries are distributed throughout multimedia file B. Meta user-defined index entry  includes pointers to each user-defined index entries, and therefore acts as an index to the index entries. To aid navigation, each user-defined index entry includes previous\/next pointers.",{"@attributes":{"id":"p-0043","num":"0042"},"figref":["FIG. 3C","FIGS. 3A and 3B","FIGS. 3A-3C","FIGS. 3A-3C"],"b":["300","340","300","310","320","330","340","341","342","344","346","348"]},{"@attributes":{"id":"p-0044","num":"0043"},"figref":["FIG. 4","FIGS. 3A-3C","FIG. 4"],"b":["400","402","404","410","410","420","450","420","430","422","424","424","430","440","432","456","434","440","442","444"]},"GUID  is intended to describe the type of index (e.g., scene, voice, commercial, etc.). Stream identifier  is used because the same index may be applied to different streams within the multimedia content (e.g., the audio stream, the video stream, etc.). It is also possible to have more than one index on a particular stream. For example, a user may wish to index commercials, scene changes, and frames, all on the video stream. Accordingly, each index will have a different GUID (commercials, scene changes, and frames), but will reference the same stream.","UDI data  includes various index entries, labeled Entry[], Entry[], and Entry[K] in the figure. Each entry includes a timestamp , a packet offset , and entry data . Timestamp  is a time offset into the multimedia content, packet offset  is a position offset into the multimedia content, and entry data  is a blob that can be used to hold application specific data for the index. Accordingly, at a high-level, a {GUID,blob} attribute exists for each indexed sample (e.g., GUID  and entry data ), where the GUID distinguishes between different indexes and the blob holds application or index specific data. In , entry data  is shown as a fixed size, but in other embodiments variable sized data may be appropriate.","An example pseudo-code embodiment of a programming interface for indexing multimedia content may be found at the end of this specification.","The present invention also may be described in terms of methods comprising functional steps and\/or non-functional acts.  shows example acts and steps for methods of adding an arbitrary index to multimedia content in accordance with the present invention. Usually, functional steps describe the invention in terms of results that are accomplished, whereas non-functional acts describe more specific actions for achieving a particular result. Although the functional steps and non-functional acts may be described or claimed in a particular order, the present invention is not necessarily limited to any particular ordering or combination of acts and\/or steps.","A step for obtaining () one or more multimedia content streams, each comprising one or more samples may include an act of receiving () the one or more multimedia content streams. A step for sending () at least one sample to one or more multimedia filters for analysis based on one or more criteria that define an index type for each of the one or more multimedia filters may include an act of passing () the at least one sample to the one or more multimedia filters. A step for concluding () that the at least one sample meets the one or more criteria for an arbitrary filter and index type may include an act of determining () that the at least one sample meets the one or more criteria. A step for generating () an index entry that identifies the at least one sample and the index type of the arbitrary filter, the index entry being adapted in accordance with a common, extensible indexing scheme to coexist and not interfere with one or more other index entries of either a same or different type for the at least one sample may include an act of creating () the index entry. A step for saving () the index entry for subsequent access may include an act of storing () the index entry. As described above, index entries themselves may be further indexed to create an index hierarchy, which is illustrated by the dashed line from the act of storing () the index entry to the act of receiving () one or more multimedia content streams. It should also be noted here that for parallel filtering\/analysis the multiplexing\/synchronization of, for example,  may be included within the processing illustrated in .","Embodiments within the scope of the present invention also include computer-readable media for carrying or having computer-executable instructions or data structures stored thereon. Such computer-readable media can be any available media that can be accessed by a general purpose or special purpose computer. By way of example, and not limitation, such computer-readable media can comprise RAM, ROM, EEPROM, CD-ROM or other optical disc storage, magnetic disk storage or other magnetic storage devices, or any other medium which can be used to carry or store desired program code means in the form of computer-executable instructions or data structures and which can be accessed by a general purpose or special purpose computer. When information is transferred or provided over a network or another communications connection (either hardwired, wireless, or a combination of hardwired or wireless) to a computer, the computer properly views the connection as a computer-readable medium. Thus, any such connection is properly termed a computer-readable medium. Combinations of the above should also be included within the scope of computer-readable media. Computer-executable instructions comprise, for example, instructions and data which cause a general purpose computer, special purpose computer, or special purpose processing device to perform a certain function or group of functions.",{"@attributes":{"id":"p-0051","num":"0050"},"figref":["FIG. 5","FIG. 5"],"b":["210","500","510","511","512","511","510","512","510","513","511","514","515"]},"The processor  oversees the general video processing by dispatching instructions over the control bus  instructing the various components of the ASIC  to perform their specialized tasks. The processor  also monitors the progress of such tasks, thus controlling the various components of ASIC  in a coordinated fashion. The processor  may be any processor capable of performing such oversight functions including a MIPS or X86 architecture processor.","Typically, memory is required to perform such coordinated operations. Accordingly, the ASIC  has access to one or more memory subsystems  which provide volatile memory that is shared between the components of the ASIC . The memory subsystems  may be any memory subsystem that allows for rapid access to stored information. For example, the memory subsystems  may be SRAM or DRAM.","A memory unit  communicates directly with the memory subsystems . The memory unit  is more efficient if there are large, less frequent accesses to the memory subsystems . However, many of the components of the ASIC  may operate most efficiently when there are smaller, but more frequent memory transactions. The direct memory access (\u201cDMA\u201d) unit  acts as a buffering interface such that the components may have small, frequent transactions with the DMA unit , while leaving it up to the DMA unit  to bundle the smaller transactions into larger, less frequent transactions for the memory unit  to conduct with the memory subsystems . In this manner, when a component needs to access the memory subsystems , the component either communicates directly with the memory unit  or communicates through the DMA unit  depending on the nature of the transaction.","A universal serial bus (\u201cUSB\u201d) interface  is capable of running a universal serial bus. The USB unit  may be any conventional USB interface that is capable of interfacing with the control bus  and the memory bus .","A device unit  includes interfaces for a number of miscellaneous devices. For example, the device unit  contains a bi-directional interface for an I2C bus  for communication with external components, a bi-directional interface for a smart card , a bi-directional infra red (\u201cIR\u201d) serial interface , and a bi-directional ISA\/IDE bus  that interfaces with a read only memory , a hard disk drive , as well as a number of other devices such as a DVD-ROM drive.","A graphics unit  comprises a 3-D graphic rendering engine that may be, for example, an eight million polygon DirectX7 compatible 3-D graphics unit.","An audio unit  drives a PC audio interface  such as an AC'97 audio interface that may receive or transmit audio. The audio unit  may also drive other audio interfaces including a digital interface such as SPDIF digital audio interface .","A video unit  receives video data from the memory bus  and converts the video data into a digital display. The video unit  handles multiple windows of video data and may operate in RGB, YUV, or other color formats as needed. The video unit  provides the digital display data to the digital video encoder  which converts the digital display data into the desired format (e.g., NTSC or HDTV) and provides the digital video through a digital to analog converter (\u201cDAC\u201d) and filter  to a composite, S-Video or component output. The digital video encoder  also may output the video to a digital video interface (\u201cDVI\u201d)  using a DVI converter .","An MPEG decoder  is provided to decode MPEG streams. The MPEG decoder also performs subsample decoding by reducing the frame size of the resulting decoded frame.","A clock  synchronizes the components of the system with each other. Accurate clocks also can provide somewhat loose synchronization with external devices that have their own clocks, without any feedback or exchange of clock signals between the devices. In this way, indexes driven by clock times may be produced and stored, and then exchanged between different devices and\/or multimedia content consumers.",{"@attributes":{"id":"p-0062","num":"0061"},"figref":"FIG. 6"},"Those skilled in the art will appreciate that the invention may be practiced in network computing environments with many types of computer system configurations, including personal computers, hand-held devices, multi-processor systems, microprocessor-based or programmable consumer electronics, network PCs, minicomputers, mainframe computers, and the like. The invention may also be practiced in distributed computing environments where tasks are performed by local and remote processing devices that are linked (either by hardwired links, wireless links, or by a combination of hardwired or wireless links) through a communications network. In a distributed computing environment, program modules may be located in both local and remote memory storage devices.","With reference to , an exemplary system for implementing the invention includes a general purpose computing device in the form of a conventional computer , including a processing unit , a system memory , and a system bus  that couples various system components including the system memory  to the processing unit . The system bus  may be any of several types of bus structures including a memory bus or memory controller, a peripheral bus, and a local bus using any of a variety of bus architectures. The system memory includes read only memory (ROM)  and random access memory (RAM) . A basic input\/output system (BIOS) , containing the basic routines that help transfer information between elements within the computer , such as during start-up, may be stored in ROM .","The computer  may also include a magnetic hard disk drive  for reading from and writing to a magnetic hard disk , a magnetic disk drive  for reading from or writing to a removable magnetic disk , and an optical disc drive  for reading from or writing to removable optical disc  such as a CD-ROM or other optical media. The magnetic hard disk drive , magnetic disk drive , and optical disc drive  are connected to the system bus  by a hard disk drive interface , a magnetic disk drive-interface , and an optical drive interface , respectively. The drives and their associated computer-readable media provide nonvolatile storage of computer-executable instructions, data structures, program modules and other data for the computer . Although the exemplary environment described herein employs a magnetic hard disk , a removable magnetic disk  and a removable optical disc , other types of computer readable media for storing data can be used, including magnetic cassettes, flash memory cards, digital versatile discs, Bernoulli cartridges, RAMs, ROMs, and the like.","Similar to clock  of , a clock  synchronizes the components of the system with each other. As noted above, accurate clocks also can provide somewhat loose synchronization with external devices that have their own clocks, without necessarily requiring any feedback or exchange of clock signals between the devices. In this way, indexes driven by clock times may be produced and stored, and then exchanged between different devices and\/or multimedia content consumers.","Program code means comprising one or more program modules may be stored on the magnetic hard disk , removable magnetic disk , removable optical disc , ROM  or RAM , including an operating system , one or more application programs , other program modules , and program data . A user may enter commands and information into the computer  through keyboard , pointing device , or other input devices (not shown), such as a microphone, joy stick, game pad, satellite dish, scanner, or the like. These and other input devices are often connected to the processing unit  through a serial port interface  coupled to system bus . Alternatively, the input devices may be connected by other interfaces, such as a parallel port, a game port or a universal serial bus (USB). A monitor  or another display device is also connected to system bus  via an interface, such as video adapter . In addition to the monitor, personal computers typically include other peripheral output devices (not shown), such as speakers and printers.","The computer  may operate in a networked environment using logical connections to one or more remote computers, such as remote computers and . Remote computers and may each be another personal computer, a server, a router, a network PC, a peer device or other common network node, and typically include many or all of the elements described above relative to the computer , although only memory storage devices and and their associated application programs and have been illustrated in . The logical connections depicted in  include a local area network (LAN)  and a wide area network (WAN)  that are presented here by way of example and not limitation. Such networking environments are commonplace in office-wide or enterprise-wide computer networks, intranets and the Internet.","When used in a LAN networking environment, the computer  is connected to the local network  through a network interface or adapter . When used in a WAN networking environment, the computer  may include a modem , a wireless link, or other means for establishing communications over the wide area network , such as the Internet. The modem , which may be internal or external, is connected to the system bus  via the serial port interface . In a networked environment, program modules depicted relative to the computer , or portions thereof, may be stored in the remote memory storage device. It will be appreciated that the network connections shown are exemplary and other means of establishing communications over wide area network  may be used.",{"@attributes":{"id":"p-0070","num":"0069"},"figref":"FIGS. 7A-7L"},"Notionally, a programming interface may be viewed generically, as shown in  or .  illustrates an interface Interface as a conduit through which first and second code segments  and  communicate.  illustrates an interface as comprising interface objects I and I (which may or may not be part of the first and second code segments), which enable first and second code segments  and  of a system to communicate via medium M. In the view of , one may consider interface objects I and I as separate interfaces of the same system and one may also consider that objects I and I plus medium M comprise the interface. Although  show have information flow in one direction (or no information flow as described below) or may only have an interface object on one side. By way of example, and not limitation, terms such as application programming interface (API), entry point, method, function, subroutine, remote procedure call, and component object model (COM) interface, are encompassed within the definition of programming interface.","Aspects of such a programming interface may include the method whereby the first code segment  transmits information (where \u201cinformation\u201d is used in its broadest sense and includes data, commands, requests, etc.) to the second code segment ; the method whereby the second code segment  receives the information; and the structure, sequence, syntax, organization, schema, timing and content of the information. In this regard, the underlying transport medium itself may be unimportant to the operation of the interface, whether the medium be wired or wireless, or a combination of both, as long as the information is transported in the manner defined by the interface. In certain situations, information may not be passed in one or both directions in the conventional sense, as the information transfer may be either via another mechanism (e.g. information placed in a buffer, file, etc. separate from information flow between the code segments) or non-existent, as when one code segment simply accesses functionality performed by a second code segment. Any or all of these aspects may be important in a given situation, e.g., depending on whether the code segments are part of a system in a loosely coupled or tightly coupled configuration, and so this list should be considered illustrative and non-limiting.","This notion of a programming interface is known to those skilled in the art and is clear from the foregoing detailed description of the invention. There are, however, other ways to implement a programming interface, and, unless expressly excluded, these too are intended to be encompassed by the claims set forth at the end of this specification. Such other ways may appear to be more sophisticated or complex than the simplistic view of , but they nonetheless perform a similar function to accomplish the same overall result. We will now briefly describe some illustrative alternative implementations of a programming interface.","Factoring","A communication from one code segment to another may be accomplished indirectly by breaking the communication into multiple discrete communications. This is depicted schematically in . As shown, some interfaces can be described in terms of divisible sets of functionality. Thus, the interface functionality of  may be factored to achieve the same result, just as one may mathematically provide 24, or 2 times 2 times 3 times 2. Accordingly, as illustrated in , the function provided by interface Interface may be subdivided to convert the communications of the interface into multiple interfaces InterfaceA, InterfaceB, InterfaceC, etc. while achieving the same result.","As illustrated in , the function provided by interface I may be subdivided into multiple interfaces I, I, I, etc. while achieving the same result. Similarly, interface I of the second code segment which receives information from the first code segment may be factored into multiple interfaces I, I, I, etc. When factoring, the number of interfaces included with the first code segment need not match the number of interfaces included with the second code segment. In either of the cases of , the functional spirit of interfaces Interface and I remain the same as with , respectively.","The factoring of interfaces may also follow associative, commutative, and other mathematical properties such that the factoring may be difficult to recognize. For instance, ordering of operations may be unimportant, and consequently, a function carried out by an interface may be carried out well in advance of reaching the interface, by another piece of code or interface, or performed by a separate component of the system. Moreover, one of ordinary skill in the programming arts can appreciate that there are a variety of ways of making different function calls that achieve the same result.","Redefinition","In some cases, it may be possible to ignore, add or redefine certain aspects (e.g., parameters) of a programming interface while still accomplishing the intended result. This is illustrated in . For example, assume interface Interface of  includes a function call Square (input, precision, output), a call that includes three parameters, input, precision and output, and which is issued from the first code segment  to the second code segment .","If a parameter, such as precision, is of no concern in a given scenario, as shown in , it could just as well be ignored or even replaced with a meaningless (in this situation) parameter. One may also add an additional parameter of no concern. In either event, the functionality of square can be achieved, so long as output is returned after input is squared by the second code segment. Precision may very well be a meaningful parameter to some downstream or other portion of the computing system; however, once it is recognized that precision is not necessary for the narrow purpose of calculating the square, it may be replaced or ignored. For example, instead of passing a valid precision value, a meaningless value such as a birth date could be passed without adversely affecting the result.","Similarly, as shown in , interface I is replaced by interface I\u2032, redefined to ignore or add parameters to the interface. Interface I may similarly be redefined as interface I\u2032, redefined to ignore unnecessary parameters, or parameters that may be processed elsewhere. The point here is that in some cases a programming interface may include aspects, such as parameters, that are not needed for some purpose, and so they may be ignored or redefined, or processed elsewhere for other purposes.","Inline Coding","It may also be feasible to merge some or all of the functionality of two separate code modules such that the \u201cinterface\u201d between them changes form. For example, the functionality of  may be converted to the functionality of , respectively. In , the previous first and second code segments  and  of  are merged into a module containing both of them. In this case, the code segments may still be communicating with each other but the interface may be adapted to a form which is more suitable to the single module. Thus, for example, formal Call and Return statements may no longer be necessary, but similar processing or response(s) pursuant to interface Interface may still be in effect.","Similarly, shown in , part (or all) of interface I from  may be written inline into interface I to form interface I\u2033. As illustrated, interface I is divided into Iand I, and interface portion Ihas been coded in-line with interface I to form interface I\u2033. For a concrete example, consider that the interface I from  performs a function call square (input, output), which is received by interface I, which after processing the value passed with input (to square it) by the second code segment, passes back the squared result with output. In such a case, the processing performed by the second code segment (squaring input) can be performed by the first code segment without a call to the interface.","Divorce","A communication from one code segment to another may be accomplished indirectly by breaking the communication into multiple discrete communications. This is depicted schematically in . As shown in , one or more pieces of middleware (Divorce Interfaces DI, since they divorce functionality and\/or interface functions from the original interface) are provided to convert the communications on the first interface, Interface, to conform them to a different interface, in this case interfaces Interface, Interfaceand Interface. This might be done, e.g., where there is an installed base of applications designed to communicate with, say, an operating system in accordance with an Interface protocol, but then the operating system is changed to use a different interface, in this case interfaces Interface, Interfaceand Interface. The point is that the original interface used by the second code segment is changed such that it is no longer compatible with the interface used by the first code segment, and so an intermediary is used to make the old and new interfaces compatible.","Similarly, as shown in , a third code segment can be introduced with divorce interface DI to receive the communications from interface I and with divorce interface DI to transmit the interface functionality to, for example, interfaces Iand I, redesigned to work with DI, but to provide the same functional result. Similarly, DI and DI may work together to translate the functionality of interfaces I and I of  to a new operating system, while providing the same or similar functional result.","Rewriting","Yet another possible variant is to dynamically rewrite the code to replace the interface functionality with something else but which achieves the same overall result. For example, there may be a system in which a code segment presented in an intermediate language (e.g. Microsoft IL, Java ByteCode, etc.) is provided to a just-in-time (JIT) compiler or interpreter  in an execution environment (such as that provided by the Net framework, the Java runtime environment, or other similar runtime type environments). The JIT compiler  may be written so as to dynamically convert the communications from the first code segment  to the second code segment , i.e., to conform them to a different interface, such as the interface shown in new first code segment , as may be required by the new second code segment  (either the original or a different second code segment). This is depicted in .","As can be seen in , this approach is similar to the divorce scenario described above. It might be done, e.g., where an installed base of applications are designed to communicate with an operating system in accordance with an Interface  protocol, but then the operating system is changed to use a different interface. The JIT Compiler could be used to conform the communications on the fly from the installed-base applications to the new interface of the operating system. As depicted in , this approach of dynamically rewriting the interface(s) may be applied to dynamically factor, or otherwise alter the interface(s) as well.","It is also noted that the above-described scenarios for achieving the same or similar result as an interface via alternative embodiments may also be combined in various ways, serially and\/or in parallel, or with other intervening code. Thus, the alternative embodiments presented above are not mutually exclusive and may be mixed, matched and combined to produce the same or equivalent scenarios to the generic scenarios presented in . It is also noted that, as with most programming constructs, there are other similar ways of achieving the same or similar functionality of an interface which may not be described herein, but nonetheless are represented by the spirit and scope of the invention, i.e., it is noted that it is at least partly the functionality represented by, and the advantageous results enabled by, an interface that underlie the value of an interface.","The present invention may be embodied in other specific forms without departing from its spirit or essential characteristics. The described embodiments are to be considered in all respects only as illustrative and not restrictive. The scope of the invention is, therefore, indicated by the appended claims rather than by the foregoing description. All changes which come within the meaning and range of equivalency of the claims are to be embraced within their scope.",{"@attributes":{"id":"p-0088","num":"0087"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"301pt","align":"center"}},"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"COMPUTER PROGRAM LISTING"},{"entry":"PROGRAMMING INTERFACE"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"301pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"Structures"},{"entry":"\/\/\u2003\u2002uniquely identifies an index: {guid,stream}"},{"entry":"\/\/\u2003\u2003\u2003\u2003*\u2003GUIDs identify a unique index; some GUIDs are well-known e.g."},{"entry":"\/\/\u2003\u2003\u2003\u2003\u2003\u2003MF_TIME_FORMAT_TIMECODE, others are known only by the"},{"entry":"\/\/\u2003\u2003\u2003\u2003\u2003\u2003hosting application it is legal to use the same GUID on more"},{"entry":"\/\/\u2003\u2003\u2003\u2003\u2003\u2003than 1 stream"},{"entry":"\/\/\u2003\u2003\u2003\u2003*\u2003wStreamId must match a stream in the profile; samples on that"},{"entry":"\/\/\u2003\u2003\u2003\u2003\u2003\u2003stream will be indexed"},{"entry":"typedef struct _SBECORE_INDEX_IDENTIFIER {"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"252pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["\u2009\u2003\u2003GUID","Id ;"]},{"entry":["\u2009\u2003\u2003WORD","wStream ;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"301pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}\u2003*\u2003PSBECORE_INDEX_IDENTIFIER, SBECORE_INDEX_IDENTIFIER ;"},{"entry":"\/\/\u2003\u2003maximum length of the index descriptive string; time-based indexes"},{"entry":"\/\/\u2003\u2003\u2003\u2003cannot have a descriptive string"},{"entry":"#define SBECORE_INDEX_MAX_DESC_LEN 32"},{"entry":"cpp_quote (\u201c#define SBECORE_INDEX_MAX_DESC_LEN 32\u201d)"},{"entry":"\/\/\u2003\u2002describes an index"},{"entry":"\/\/\u2003\u2003\u2003\u2003*\u2003Identifier uniquely identifies the index : {guid,stream}"},{"entry":"\/\/\u2003\u2003\u2003\u2003*\u2003cPerEntryDataBytes specifies how many private bytes are stored"},{"entry":"\/\/\u2003\u2003\u2003\u2003\u2003\u2003with each entry; this field is ignored for a time-based index"},{"entry":"\/\/\u2003\u2003\u2003\u2003\u2003\u2003i.e. of GUID SBECore_TimeIndex, but can be non-zero for a"},{"entry":"\/\/\u2003\u2003\u2003\u2003\u2003\u2003user-defined index 0xff is reserved"},{"entry":"\/\/\u2003\u2003\u2003\u2003*\u2003szDescription contains a descriptive string; this field is"},{"entry":"\/\/\u2003\u2003\u2003\u2003\u2003\u2003ignored for a time-based index"},{"entry":"typedef struct _SBECORE_INDEX_DESCRIPTOR {"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"126pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["\u2003\u2003SBECORE_INDEX_IDENTIFIER","Identifier ;"]},{"entry":["\u2003\u2003WORD","cPerEntryDataBytes ;"]},{"entry":["\u2003\u2003WCHAR","szDescription [SBECORE_INDEX_MAX_DESC_LEN];"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"301pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}\u2003*\u2003PSBECORE_INDEX_DESCRIPTOR, SBECORE_INDEX_DESCRIPTOR ;"},{"entry":"\/\/\u2003\u2002specifies an index configuration"},{"entry":"\/\/\u2003\u2003\u2003\u2003*\u2003Descriptor is a data structure as specified above"},{"entry":"\/\/\u2003\u2003\u2003\u2003*\u2003cbContext and pbContext are used to enter data that is specific"},{"entry":"\/\/\u2003\u2003\u2003\u2003\u2003\u2003to the type of index being created; a time-based index is"},{"entry":"\/\/\u2003\u2003\u2003\u2003\u2003\u2003well-known and its configuration is listed below"},{"entry":"typedef struct _SBECORE_INDEX_CONFIG {"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"133pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["\u2003\u2003\u2009SBECORE_INDEX_DESCRIPTOR","Descriptor ;"]},{"entry":["\u2003\u2003\u2009DWORD","cbContext ;"]},{"entry":["\u2003\u2003\u2009[size_is (cbContext)] const BYTE *","pbContext ;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"301pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}\u2003*\u2003PSBECORE_INDEX_CONFIG, SBECORE_INDEX_CONFIG ;"},{"entry":"\/\/\u2003\u2002data structure passed up in a went-stale event"},{"entry":"typedef struct _SBECORE_INDEX_STALE {"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"126pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["\u2003\u2003SBECORE_INDEX_IDENTIFIER","Identifier ;"]},{"entry":["\u2003\u2003LONGLONG","llMinTime ;"]},{"entry":["\u2003\u2003LONGLONG","llMaxTime ;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"301pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}\u2003*\u2003PSBECORE_INDEX_STALE, SBECORE_INDEX_STALE ;"},{"entry":"ISBECoreUDIndexCollection"},{"entry":"\/*++"},{"entry":"Interface Description:"},{"entry":"\u2003\u2003\u2002This interface is used to manage a number of User Defined Interfaces"},{"entry":"\u2003\u2003\u2003\u2003\u2002(UDIs).\u2003UDIs are retrieved from via this interface.\u2003This"},{"entry":"\u2003\u2003\u2002interface is associated with a grouping of UDIs e.g. on 1"},{"entry":"\u2003\u2003\u2002recording. This interface is retrieved from the object that is"},{"entry":"\u2003\u2003\u2002used to write or read to the grouping target e.g., a recording."},{"entry":"\u2212\u2212*\/"},{"entry":"["},{"entry":"\u2003\u2003\u2002object,"},{"entry":"\u2003\u2003\u2002uuid(a2a19a1d-3309-11d7-adb3-00065bc819a1),"},{"entry":"\u2003\u2003\u2002pointer_default(unique)"},{"entry":"]"},{"entry":"interface ISBECoreUDIndexCollection : IUnknown"},{"entry":"{"},{"entry":"\u2003\u2003\u2002\/\/ NOTE: (GUID,stream) identify a unique UDI"},{"entry":"\u2003\u2003\u2002\/*++"},{"entry":"\u2003\u2003\u2002Routine Description:"},{"entry":"\u2003\u2003\u2003\u2003\u2002This method returns the count of UDIs in the store from which"},{"entry":"\u2003\u2003\u2003\u2003\u2002this interface is obtained (via QueryInterface)."},{"entry":"\u2003\u2003\u2002Arguments:"},{"entry":"\u2003\u2003\u2003\u2003\u2002pcIndexes\u2003returns the count of UDIs"},{"entry":"\u2003\u2003\u2002Return Values:"},{"entry":"\u2003\u2003\u2003\u2003\u2002Returns S_OK if the call succeeds, otherwise an HRESULT failure."},{"entry":"\u2003\u2003\u2002\u2212\u2212*\/"},{"entry":"\u2003\u2003\u2002HRESULT"},{"entry":"\u2003\u2003\u2002GetCount ("},{"entry":"\u2003\u2003\u2003\u2003\u2002[out]\u2003DWORD * pcIndexes"},{"entry":"\u2003\u2003\u2003\u2003\u2002) ;"},{"entry":"\u2003\u2003\u2002\/*++"},{"entry":"\u2003\u2003\u2002Routine Description:"},{"entry":"\u2003\u2003\u2003\u2003\u2002This method returns an a UDI interface pointer for the specified"},{"entry":"\u2003\u2003\u2003\u2003\u2002index."},{"entry":"\u2003\u2003\u2002Arguments:"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["\u2003\u2003\u2003\u2003\u2002dwPosition","0-based index position"]},{"entry":["\u2003\u2003\u2003\u2003\u2002ppIndex","returns a refcounted pointer to the requested UDI"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"301pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2003\u2003\u2002Return Values:"},{"entry":"\u2003\u2003\u2003\u2003\u2002Returns S_OK if the call succeeds, otherwise an HRESULT failure."},{"entry":"\u2003\u2003\u2002\u2212\u2212*\/"},{"entry":"\u2003\u2003\u2002HRESULT"},{"entry":"\u2003\u2003\u2002GetIndexFromPosition ("}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["\u2003\u2003\u2003\u2003\u2002[in]","DWORD","dwPosition,"]},{"entry":["\u2003\u2003\u2003\u2003\u2002[out]","ISBECoreUDIndex **","ppIndex"]},{"entry":"\u2003\u2003\u2003\u2003\u2002) ;"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"301pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2003\u2003\u2002\/*++"},{"entry":"\u2003\u2003\u2002Routine Description:"},{"entry":"\u2003\u2003\u2003\u2003\u2002Returns an index, based on the identifying GUID"},{"entry":"\u2003\u2003\u2002Arguments:"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"217pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["\u2003\u2003\u2003\u2003\u2002pUDIIdentifier","identifies the index"]},{"entry":["\u2003\u2003\u2003\u2003\u2002ppIndex","returns a refcounted pointer to requested UDI"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"301pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2003\u2003\u2002Return Values:"},{"entry":"\u2003\u2003\u2003\u2003\u2002Returns S_OK if the call succeeds, otherwise an HRESULT failure."},{"entry":"\u2003\u2003\u2002\u2212\u2212*\/"},{"entry":"\u2003\u2003\u2002HRESULT"},{"entry":"\u2003\u2003\u2002GetIndex ("}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"119pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["\u2003\u2003\u2003\u2003\u2002[in]","SBECORE_INDEX_IDENTIFIER *","\u2003pUDIIdentifier,"]},{"entry":["\u2003\u2003\u2003\u2003\u2002[out]","ISBECoreUDIndex **","ppIndex"]},{"entry":"\u2003\u2003\u2003\u2003\u2002) ;"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"301pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2003\u2003\u2002\/*++"},{"entry":"\u2003\u2003\u2002Routine Description:"},{"entry":"\u2003\u2003\u2003\u2003\u2002Returns position of the specified index, identified by the GUID."},{"entry":"\u2003\u2003\u2002Arguments:"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"217pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["\u2003\u2003\u2003\u2003\u2002pUDIIdentifier","identifies the index"]},{"entry":["\u2003\u2003\u2003\u2003\u2002pdwPosition","returns the 0-based position of requested UDI"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"301pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2003\u2003\u2002Return Values:"},{"entry":"\u2003\u2003\u2003\u2003\u2002Returns S_OK if the call succeeds, otherwise an HRESULT failure."},{"entry":"\u2003\u2003\u2002\u2212\u2212*\/"},{"entry":"\u2003\u2003\u2002HRESULT"},{"entry":"\u2003\u2003\u2002GetIndexPosition ("}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"119pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["\u2003\u2003\u2003\u2003\u2002[in]","SBECORE_INDEX_IDENTIFIER *","\u2003pUDIIdentifier,"]},{"entry":["\u2003\u2003\u2003\u2003\u2002[out]","DWORD *","pdwPosition"]},{"entry":"\u2003\u2003\u2003\u2003\u2002) ;"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"301pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"} ;"},{"entry":"ISBECoreUDIndex"},{"entry":"\/*++"},{"entry":"Interface Description:"},{"entry":"\u2003\u2003\u2002This interface is used to access an individual User Defined Index"},{"entry":"\u2003\u2003\u2003(UDI). This interface is retrieved from a UDI collection. It"},{"entry":"\u2003\u2003\u2003is not used to generate entries. In SBE entries are generated"},{"entry":"\u2003\u2003\u2003via the use of extensible attributes."},{"entry":"\u2212\u2212*\/"},{"entry":"["},{"entry":"\u2003\u2003\u2002object,"},{"entry":"\u2003\u2003\u2002uuid(a2a19a1e-3309-11d7-adb3-00065bc819a1),"},{"entry":"\u2003\u2003\u2002pointer_default(unique)"},{"entry":"]"},{"entry":"interface ISBECoreUDIndex : IUnknown"},{"entry":"{"},{"entry":"\u2003\u2003\u2002\/*++"},{"entry":"\u2003\u2003\u2002Routine Description:"},{"entry":"\u2003\u2003\u2003\u2003\u2002Returns the UDI's descriptor."},{"entry":"\u2003\u2003\u2002Arguments:"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"224pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["\u2003\u2003\u2003\u2003\u2002pbDescriptor","byte array begins with the"]},{"entry":[{},"\u2003SBECORE_INDEX_DESCRIPTOR structure"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["\u2003\u2003\u2003\u2003\u2002cDescriptor","in:","bytes available in pbDescriptor"]},{"entry":[{},"out:","returned length of pbDescriptor"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"301pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2003\u2003\u2002Return Values:"},{"entry":"\u2003\u2003\u2003\u2003\u2002Returns S_OK if the call succeeds, otherwise an HRESULT failure."},{"entry":"\u2003\u2003\u2002\u2212\u2212*\/"},{"entry":"\u2003\u2003\u2002HRESULT"},{"entry":"\u2003\u2003\u2002GetDescriptor ("}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"126pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["\u2003\u2003\u2003\u2003\u2002[out,size_is (* pcDescriptor)]","BYTE *","pbDescriptor,"]},{"entry":["\u2003\u2003\u2003\u2003\u2002[in,out]","DWORD *","pcDescriptor"]},{"entry":"\u2003\u2003\u2002) ;"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"301pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2003\u2003\u2002\/*++"},{"entry":"\u2003\u2003\u2002Routine Description:"},{"entry":"\u2003\u2003\u2003\u2003\u2002Returns the current count of index entries"},{"entry":"\u2003\u2003\u2002Arguments:"},{"entry":"\u2003\u2003\u2003\u2003\u2002pcIndexEntry\u2003\u2003returns the count of entries"},{"entry":"\u2003\u2003\u2002Return Values:"},{"entry":"\u2003\u2003\u2003\u2003\u2002Returns S_OK if the call succeeds, otherwise an HRESULT failure."},{"entry":"\u2003\u2003\u2002\u2212\u2212*\/"},{"entry":"\u2003\u2003\u2002HRESULT"},{"entry":"\u2003\u2003\u2002GetCount ("},{"entry":"\u2003\u2003\u2003\u2003\u2002[out]\u2003ULONGLONG * pcIndexEntry"},{"entry":"\u2003\u2003\u2003\u2003\u2002) ;"},{"entry":"\u2003\u2003\u2002\/*++"},{"entry":"\u2003\u2003\u2002Routine Description:"},{"entry":"\u2003\u2003\u2003\u2003\u2002Returns an entry based on a position"},{"entry":"\u2003\u2003\u2002Arguments:"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"224pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["\u2003\u2003\u2003\u2003\u2002ullPosition","0-based index to specify an entry"]},{"entry":["\u2003\u2003\u2003\u2003\u2002pllTime","returned time of index"]},{"entry":["\u2003\u2003\u2003\u2003\u2002pbEntryData","returned entry data"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["\u2003\u2003\u2003\u2003\u2002cEntryData","in:","length of available bytes pointed to by"]},{"entry":[{},{},"\u2003pbEntryData"]},{"entry":[{},"out:","actual length of entry data"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"301pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2003\u2003\u2002Return Values:"},{"entry":"\u2003\u2003\u2003\u2003\u2002Returns S_OK if the call succeeds, otherwise an HRESULT failure."},{"entry":"\u2003\u2003\u2002\u2212\u2212*\/"},{"entry":"\u2003\u2003\u2002HRESULT"},{"entry":"\u2003\u2003\u2002GetEntryFromPosition ("}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"119pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["\u2003\u2003\u2003\u2003\u2002[in]","ULONGLONG","ullPosition,"]},{"entry":["\u2003\u2003\u2003\u2003\u2002[out]","LONGLONG *","pllTime,"]},{"entry":["\u2003\u2003\u2003\u2003\u2002[out,size_is (* cEntryData)]","BYTE *","pbEntryData,"]},{"entry":["\u2003\u2003\u2003\u2003\u2002[in,out]","DWORD *","cEntryData"]},{"entry":"\u2003\u2003\u2003\u2003\u2002) ;"},{"entry":"\u2003\u2003\u2002\/*++"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"301pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2003\u2003\u2002Routine Description:"},{"entry":"\u2003\u2003\u2003\u2003\u2002Returns an entry based on time. The optional search direction"},{"entry":"\u2003\u2003\u2003\u2003\u2003can be used to indicate whether the nearest index entry"},{"entry":"\u2003\u2003\u2003\u2003\u2003before, at, or after the time to look for is retrieved."},{"entry":"\u2003\u2003\u2003\u2003\u2003If no entries match the criteria, the call fails."},{"entry":"\u2003\u2003\u2002Arguments:"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"224pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["\u2003\u2003\u2003\u2003\u2002llTime","time to look for"]},{"entry":["\u2003\u2003\u2003\u2003\u2002lSearchDir","search direction (0=before,1=at\/after,2=closest)"]},{"entry":["\u2003\u2003\u2003\u2003\u2002pullPosition","returned 0-based index to entry"]},{"entry":["\u2003\u2003\u2003\u2003\u2002pbEntryData","returned entry data"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["\u2003\u2003\u2003\u2003\u2002cEntryData","in:","length of available bytes pointed to by"]},{"entry":[{},{},"\u2003pbEntryData"]},{"entry":[{},"out:","actual length of entry data"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"301pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2003\u2003\u2002Return Values:"},{"entry":"\u2003\u2003\u2003\u2003\u2002Returns S_OK if the call succeeds, otherwise an HRESULT failure."},{"entry":"\u2003\u2003\u2002\u2212\u2212*\/"},{"entry":"\u2003\u2003\u2002HRESULT"},{"entry":"\u2003\u2003\u2002GetEntryFromTime ("}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"119pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["\u2003\u2003\u2003\u2003\u2002[in]","LONGLONG","llTime,"]},{"entry":["\u2003\u2003\u2003\u2003\u2002[in]","LONG","lSearchDir,"]},{"entry":["\u2003\u2003\u2003\u2003\u2002[out]","ULONGLONG *","pullPosition,"]},{"entry":["\u2003\u2003\u2003\u2003\u2002[out,size_is (* cEntryData)]","BYTE *","pbEntryData,"]},{"entry":["\u2003\u2003\u2003\u2003\u2002[in,out]","DWORD *","cEntryData"]},{"entry":"\u2003\u2003\u2003\u2003\u2002) ;"},{"entry":"} ;"},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["In order to describe the manner in which the above-recited and other advantages and features of the invention can be obtained, a more particular description of the invention briefly described above will be rendered by reference to specific embodiments thereof which are illustrated in the appended drawings. Understanding that these drawings depict only typical embodiments of the invention and are not therefore to be considered as limiting its scope, the invention will be described and explained with additional specificity and detail through the use of the accompanying drawings in which:",{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIGS. 1A-1C"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIGS. 3A-3C"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIGS. 5 and 6"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIGS. 7A-7L"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 8"}]},"DETDESC":[{},{}]}
