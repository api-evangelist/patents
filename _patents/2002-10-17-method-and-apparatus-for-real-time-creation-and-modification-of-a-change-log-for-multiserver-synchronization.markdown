---
title: Method and apparatus for real time creation and modification of a change log for multi-server synchronization
abstract: A method, apparatus, and computer instructions for synchronizing a database utilized by a client device with a set of servers in which one server has the database. A change log is used with a client database for synchronizing the database. Dirty bits set in the client database are identified and a change log is modified based on the identified dirty bits. This change log is used to synchronize the database on the server with a client database on the client device.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06976038&OS=06976038&RS=06976038
owner: International Business Machines Corporation
number: 06976038
owner_city: Armonk
owner_country: US
publication_date: 20021017
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENT"],"p":["1. Technical Field","The present invention relates generally to an improved data processing system, and in particular, to a method and apparatus for synchronizing data. Still more particularly, the present invention provides a method and apparatus for creating a change log to be used in synchronizing data between a single client database and multiple server databases.","2. Description of Related Art","Portable devices, such as personal digital assistants (PDAs) and laptop computers, have become more and more pervasive in everyday use. As microprocessors have become more powerful and storage has become smaller in physical size, PDAs have become more and more popular. A PDA is a handheld computer that serves as an organizer for personal information. A PDA generally includes at least a name and address database, to-do list and note taker. PDAs are pen based and use a stylus to enter selections on menus and to enter printed characters. A PDA also may include a small on-screen keyboard, which is tapped with the pen.","Data may be synchronized between the PDA and desktop computer through a communications link, such as a cable or a wireless link. The databases on these types of devices are also referred to as embedded databases. An embedded database is a database program used on an embedded device, such as a PDA, a cell phone, or some other similar dedicated device. This type of database may be developed from scratch or may be a slimmed down version of a database management system. These embedded devices have limited amounts of memory. The databases are typically synchronized with other devices, such as a desktop data processing system or a server. The synchronization is performed to transfer data to data processing systems with more processing power, storage and capability, as well as to keep data synchronized with other embedded devices.","In many cases, these devices communicate through a low bandwidth connection, such as a wide area wireless connection. In such a case, it is very important to send a minimal amount of data because of the low bandwidth connection. In synchronizing data between multiple databases, minimizing the amount of data sent is even more important in order to reduce the time needed to synchronize a client database in an embedded device with other databases. Therefore, it would be advantageous to have an improved method, apparatus, and computer instructions for synchronizing a database on an embedded device with databases on other servers or computers.","The present invention provides a method, apparatus, and computer instructions for synchronizing a database utilized by a client device with a set of servers in which one server has the database. A change log is used with a client database for synchronizing the database. Dirty bits set in the client database are identified and a change log is modified based on the identified dirty bits. This change log is used to synchronize the database on the server with a client database on the client device.","As part of the synchronization process, the group of identified dirty bits is cleared and changes are sent to the server having the database in which the changes are from a last change index associated with the server. Afterwards, modifications are received from the server after sending the changes. The modifications received from the server are added to the client database. Another group of dirty bits associated with the modifications is set and the changes are appended to the change log. These changes are based on the modifications.","With reference now to the figures, and in particular to , a diagram illustrating a network data processing system is depicted in accordance with a preferred embodiment of the present invention. Network data processing system  is a network of computers in which the present invention may be implemented. Network data processing system  contains network , which is the medium used to provide communications links between various devices and computers connected together within network data processing system . Network  may include connections, such as wire, wireless communication links, or fiber optic cables.","Network  provides communications with server , server , PDA , and PDA . In these examples, PDA  and PDA  contain databases, which may be synchronized with databases on servers  and . The synchronization process may occur through a connection to network , which may take various forms. For example, network  may be as simple as a set of wires directly connecting the PDAs to the servers or a wireless connection. Network  may take a more complex form, such as a local or wide area network to which PDA  and PDA  establish a connection to synchronize their databases with databases located on servers  or . The databases on PDAs  and  may synchronize with a single database or multiple databases depending on the particular implementation. These databases may be located on a single server or on multiple servers.","The present invention provides an improved method, apparatus, and computer instructions for synchronizing a database on an embedded device, such as PDA , with a database, such as one located on server . The mechanism of the present invention uses a local unique identifier (LUID), which is currently used in databases. A LUID is a non-zero number that uniquely identifies a given database record. In these examples, the LUID may be a time stamp of when a record was created. The mechanism of the present invention uses a selected value for the LUID to indicate that the record has been deleted. In this manner, no additional fields or change logs are required.","With reference now to , a block diagram of a data processing system is shown in which the present invention may be implemented. PDA  is an example of an embedded device, such as PDA  in , in which code or instructions implementing the processes of the present invention may be located.","PDA  includes a bus system, which provides an interconnect for host\/bus cache bridge , audio unit , storage unit , communications unit , and touch screen unit . Host\/bus cache bridge  provides a connection for processor  and main memory .","The processes of the present invention are performed by processor  using computer implemented instructions, which may be located in a memory, such as, for example, main memory  or storage unit . Audio unit  provides a mechanism for an audio output, such as presentation of an audio file. Audio unit  may be, for example, a speaker and\/or an output for a headphone. Storage unit  may take various forms, such as, for example, a compact flash or a memory stick. In some cases, storage unit  may even take the form of a hard disk drive. Communications unit  provides for establishing a communications link with another device, such as, for example, a PDA or a server. Touch screen unit  provides a display to present information to a user as well as a mechanism to receive input. In this example, the input is received through the use of a stylus that is tapped on the display mechanism of touch screen unit .","A database system is located on PDA  and synchronized with one or more servers. The present invention provides an improved method, apparatus, and computer instructions for synchronizing a client database with more than one database. These databases are typically located on different servers. The mechanism of the present invention modifies a change log located in the client device at the time of synchronization by using dirty bits located on the local or client database.","With reference now to , a diagram illustrating components used in synchronizing a client database to another database is depicted in accordance with a preferred embodiment of the present invention. In this example, change manager  is part of a database management system located on a client, such as PDA  in FIG. . Change manager  provides a mechanism for synchronizing data located within database  with database  at server . Change manager  accesses change log  identifying changes that are to be synchronized with database  on server . Additionally, change manager  reads and writes entries to database  and manages change log .","Database  is in essence a local data store and includes in these examples application programming interfaces used to clear dirty bits within the database. Database  sets dirty bits in response to any modification of a record within database . In these examples, three settable dirty bits are present for each record in database . These bits are set based on whether a record has been inserted, modified, or deleted. Records with \u201cdeleted\u201d dirty bits are referred to as \u201csoft-deleted\u201d because these records may be undeleted by unsetting the dirty bit.","Change log  includes records . An entry or record is added to the set of records  by change manager  based on dirty bits that have been set since the last change log update. In these examples, the records are added to change log  in a batch manner. Once the records have been added to records  in change log , the dirty bits in database  are cleared. \u201cSoft-deleted\u201d records will be set to a \u201chard-deleted\u201d state, removing them from database . Change log  contains an ordered list of changes that includes indices that correspond to a particular server. The index for a server marks a point within change log  that has been sent to the server. These indices serve as anchors that map to a particular server and also are referred to just as \u201canchors\u201d.","In synchronizing database  with database  on server , client manager  begins by obtaining record identifiers for dirty records. These identifiers are unique IDs that identify a particular data entry. For example, database  may support an application program interface that provides all dirty records. Alternatively, client manager  may check each record within database  to see if a record is dirty. These dirty records are records for which dirty bits have been set. After these record identifiers have been obtained by client manager , the dirty bits are cleared within database . Thereafter, client manager  appends changes to change log . The appending of changes to the change log and the clearing of dirty bits occur atomically in these examples. These changes are added to the beginning of records  within change log  in these examples. In this example, the last synchronization with database  is located at anchor . The changes appended by change manager  add records from anchor  to point  in change log . These changes are sent to server  for synchronization with database .","Afterwards, modifications are received from server  by change manager . These modifications may be, for example, changes made to database  since the last synchronization with database . These changes also may include reconciliations between differences in records sent to server . These modifications are added to database  and the records in which changes are made have dirty bits set for these records. Client manager  then obtains identifiers for dirty records and clears the dirty bits. These changes are appended to change log .","Thereafter, the anchor or index associated with the server is set to the top of change log  as shown by anchor . This process may be performed for each database with which database  is synchronized. Each server will have an anchor associated with the server in change log .","Turning now to , a flowchart of a process used for synchronizing a client database with another database is depicted in accordance with a preferred embodiment of the present invention. The process illustrated in  may be implemented in a database management system, such as change manager  and database  in FIG. .","The process begins when the client manager obtains record IDs for dirty records and clears dirty bits (step ). The client manager appends changes to the change log (step ). In these examples, steps  and  occur atomically. The change log is walked from last change index for server sending modifications (step ). For example, anchor  in FIG. A represents the last change index since a client database was synchronized with another database. Point  in  is an example of records or changes made since the last synchronization shown by anchor . These are the modifications, which are sent to the server. In response, modifications may be received from the server (step ). Modifications received from the server are added to the database, setting dirty bits for the records affected by the modifications (step ). The client manager gets record IDs for dirty records and clears dirty bits (step ). The client manager appends changes to records identified by the dirty bits to the change log (step ). In these examples, steps  and  occur atomically.","The server's change index is then reset to the top of the change log (step ). A determination is made as to whether another server is present (step ). If another server is absent, the process terminates. Otherwise, the process returns to step  as described above. At this point, the process starts over to synchronize the client database with another database located on another server. The process in  may be repeated until the client database has been synchronized with all of its associated servers.","Thus, the present invention provides an improved method, apparatus, and computer instructions for synchronizing a client to multiple databases. The mechanism of the present invention allows for reading the dirty bits and modifying the change log as a synchronization process starts. This feature provides advantages because the change log is only used by the synchronization process. If the database is never synchronized, no unnecessary overhead is added. Further, the mechanism of the present invention reduces the amount of information sent from the client to a server. As opposed to a change log being appended with each database modification when dirty bits are not used, a create followed by some number of modifies will result only in a single change log entry such as \u201ccreate\u201d. Some changes are literally a number of modifies on an existing record between synchronizations which will result in only a single change entry of modified. A create of an entry followed by a number of modifications including no modifications, followed by a delete between synchronizations, will not end up creating a change log entry at all.","Further, the database does not need to have any knowledge of the existence of a change log. Instead, a change manager is used to manage modifications to the change log. The database may manage dirty bits such that applications accessing the database do not need to have any knowledge of the dirty bits. In these examples, an application may be written using standard SQL updates. As a result, there is no need for a special application programming interface to update both the database and the change log.","It is important to note that while the present invention has been described in the context of a fully functioning data processing system, those of ordinary skill in the art will appreciate that the processes of the present invention are capable of being distributed in the form of a computer readable medium of instructions and a variety of forms and that the present invention applies equally regardless of the particular type of signal bearing media actually used to carry out the distribution. Examples of computer readable media include recordable-type media, such as a floppy disk, a hard disk drive, a RAM, CD-ROMs, DVD-ROMs, and transmission-type media, such as digital and analog communications links, wired or wireless communications links using transmission forms, such as, for example, radio frequency and light wave transmissions. The computer readable media may take the form of coded formats that are decoded for actual use in a particular data processing system.","The description of the present invention has been presented for purposes of illustration and description, and is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art. The embodiment was chosen and described in order to best explain the principles of the invention, the practical application, and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The novel features believed characteristic of the invention are set forth in the appended claims. The invention itself, however, as well as a preferred mode of use, further objectives and advantages thereof, will best be understood by reference to the following detailed description of an illustrative embodiment when read in conjunction with the accompanying drawings, wherein:",{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 4"}]},"DETDESC":[{},{}]}
