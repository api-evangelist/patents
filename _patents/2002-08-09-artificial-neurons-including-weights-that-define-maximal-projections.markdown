---
title: Artificial neurons including weights that define maximal projections
abstract: An artificial neuron includes inputs and dendrites, a respective one of which is associated with a respective one of the inputs. A respective dendrite includes a respective power series of weights. The weights in a given power of the power series represent a maximal projection. A respective power also may include at least one switch, to identify holes in the projections. By providing maximal projections, linear scaling may be provided for the maximal projections, and quasi-linear scaling may be provided for the artificial neuron, while allowing a lossless compression of the associations. Accordingly, hetero-associative and/or auto-associative recall may be accommodated for large numbers of inputs, without requiring geometric scaling as a function of input.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07016886&OS=07016886&RS=07016886
owner: Saffron Technology Inc.
number: 07016886
owner_city: Morrisville
owner_country: US
publication_date: 20020809
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS-REFERENCE TO PROVISIONAL APPLICATION","FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF PREFERRED EMBODIMENTS"],"p":["This application claims the benefit of provisional Application Ser. No. 60\/311,316, filed Aug. 10, 2001, entitled Compression of Power Series of Weights and Counts That Represent Row and Column Associations, assigned to the assignee of the present application, the disclosure of which is hereby incorporated herein by reference in its entirety as if set forth fully herein.","This invention relates to artificial intelligence systems, methods and computer program products, and more particularly to artificial neuron systems, methods and computer program products.","Associative memories, also referred to as content addressable memories, are widely used in the field of pattern matching and identification, expert systems and artificial intelligence. A widely used associative memory is the Hopfield artificial neural network. Hopfield artificial neural networks are described, for example, in U.S. Pat. No. 4,660,166 to Hopfield entitled \u201cElectronic Network for Collective Decision Based on Large Number of Connections Between Signals\u201d.","Although associative memories may avoid problems in prior back-propagation networks, associative memories may present problems of scaling and spurious memories. Recent improvements in associative memories have attempted to solve these and other problems. For example, U.S. Pat. No. 6,052,679 to coinventor Aparacio, IV et al., entitled \u201cArtificial Neural Networks Including Boolean-Complete Compartments\u201d provides a plurality of artificial neurons and a plurality of Boolean-complete compartments, a respective one of which couples a respective pair of artificial neurons. By providing Boolean-complete compartments, spurious complement memories can be avoided.","Associative memories also have been marketed commercially. For example, a product known as MemoryAgent marketed by International Business Machines Corporation (IBM) provides a low level set of application programming interfaces that can be used for building embedded learning agents, characterized by the term \u201cSmart Assistance\u201d. See the publication entitled \u201c\u201d, Intelligence In Industry, Vol. 8, No. 1, January 1999, pp. 5\u20139. Other vendors, including Haley Enterprises and Intellix A\/S also offer associative memory tools. In particular, Haley Enterprises supports a commercial associative memory called \u201cThe Intelligent Memory\u201d. See haley.com. Intellix A\/S supports another commercial associative memory called \u201cKnowman\u201d using a software framework called SOUL (Self-Optimizing Universal Learner). See intellix.com. Some vendors offer self-organizing feature maps, as described in U.S. Pat. No. 5,870,729 to Yoda entitled Self-Organizing Neural Network for Pattern Classification; and U.S. Pat. No. 5,943,670 to Prager entitled System and Method for Categorizing Objects in Combined Categories, which also are a form of associative memory. Associative memories also have been applied to electronic commerce, as shown in U.S. Pat. No. 5,619,709 to Caid et al. entitled System and Method of Context Vector Generation and Retrieval. Other applications of associative memories include handwriting recognition in hand-held devices, such as the Palm Pilot, marketed by 3Com. Moreover, memory-based reasoning may now be included in data mining systems such as marketed by SAS Institute, Oracle Corporation and others.","Although associative memories only recently have been marketed commercially, they are expected to rapidly grow for applications that desire personalization and knowledge management. In fact, one expert has predicted that \u201cBuilding autoassociative memories will be a very large business\u2014some day more silicon will be consumed building such devices than for any other purpose.\u201d See Technology Review, Vol. 102, No. 4, July\/August 1999, p. 79.","Unfortunately, there is a fundamental scaling problem that may limit the use of associative memories to solve real world problems. In particular, many associative memories use linear weights. As shown in , each input can be associated once with each output according to a weight W\u2013W. However, the inputs in such linear networks generally do not associate with each other. This can severely limit the ability of such networks to learn and represent possible nonlinearities, such as interactions between the inputs, that may be found in co-requirements or trade-offs between inputs.","An alternative to the linear network of  is the geometric Hopfield network of . In the Hopfield network, one-to-one connections are provided between all nodes, and a weight is provided for each arch between the nodes. As shown in , it may be difficult to scale Hopfield networks for real-world applications due to the explosion of weights that is provided between all inputs. Since nonlinear networks generally intercept all inputs with each other, an Nor geometric scaling function is produced. More specifically, the number of connections between inputs generally is equal to N\u00b7(N\u22121)\/2, where N is the number of inputs.","This geometric scaling generally is unreasonable to support applications at the scale of complexity that warrants such technology. For example, for general purpose search and personal modeling, tens of thousands of input variables and millions of models may need to be managed. At the other extreme, machine learning in operating systems may need to be more efficient as client machines become smaller, wireless devices. In such situations, only one user's model may be needed, but the number of contexts and input variables may still be very large. Even at the level of a household with a few individuals, the number of inputs may be on the order of hundreds of thousands. It therefore may be unreasonable to use present techniques in such applications, even in the larger physical memory capacities that are expected in the next few years. Thus, applications of agent-based learning for such environments are now emerging, but the learning technology to support these applications may be difficult to implement due to the scaling problems of learning and using nonlinear associations.","Embodiments of the present invention can provide an artificial neuron that includes a plurality of inputs and a plurality of dendrites, a respective one of which is associated with a respective one of the plurality of inputs. At least some of the dendrites comprise a power series of weights. At least some of the weights in at least one power of the power series define a maximal projection. In other embodiments, a respective dendrite comprises a power series of weights, the respective weights in a respective power of the power series defining a maximal projection. By providing a maximal projection, linear scaling may be provided for the maximal projection, and quasi-linear scaling may be provided for the artificial neurons, while allowing a lossless compression of the associations in some embodiments of the present invention. Accordingly, hetero-associative and\/or auto-associative recall may be accommodated for large numbers of inputs, in some embodiments of the invention, without requiring geometric scaling as a function of input.","In some embodiments of the present invention, at least one power of the power series also includes at least one switch, to identify holes in the projection. In some embodiments of the present invention, the power series of weights is a base 2 power series of weights, and at least some of the weights in the at least one power of the power series define a maximal row projection and\/or maximal column projection. The maximal row projection and\/or maximal column projection is sorted by sums of row projections and\/or or column projections, respectively.","In other embodiments of the present invention, the artificial neuron also includes a trace that is responsive to an input signal at the associated input. The trace is configured to map activations of the input signal to locations in the maximal row projection and\/or maximal column projection. In still other embodiments of the present invention, the artificial neuron also includes a router that is configured to map the at least some of the weights in the at least one power of the power series, to define the maximal row projection and\/or column projection.","In order to provide a reading operation, according to some embodiments of the present invention, an activated subset in the plurality of maximal row projections and\/or maximal column projections is determined, in response to the trace. For each column of the activated subset, a smallest row projection that is greater than or equal to an index for the column is selected. In other embodiments, the smallest row projections that are greater than or equal to the index for the associated column are accumulated for the columns of the activated subset, to thereby obtain an association of the input signal with the weights. In other embodiments, a writing or memorizing operation is provided by embedding the trace into the maximal projections and the switch. In some embodiments, redundant projections between the trace and the maximal projections is found.","It will be understood that, although a power series of weights may be used with maximal projections according to some embodiments of the present invention, maximal projections may be used without the power series of weights in other embodiments of the invention. It also will be understood that the present invention may be embodied as systems, methods, computer program products and\/or combinations thereof.","The present invention now will be described more fully hereinafter with reference to the accompanying drawings, in which embodiments of the invention are shown. However, this invention should not be construed as limited to the embodiments set forth herein. Rather, these embodiments are provided so that this disclosure will be thorough and complete, and will fully convey the scope of the invention to those skilled in the art. Like numbers refer to like elements throughout.","Embodiments of the present invention will now be described using the illustrations of . It will be understood that an element of the illustrations, and combinations of elements in the illustrations, can be implemented by general and\/or special purpose hardware-based systems which perform the specified functions or steps, or by combinations of general and\/or special purpose hardware and computer instructions.","Introduction","These program instructions may be provided to a processor to produce a machine, such that the instructions which execute on the processor create means for implementing the functions specified in the illustrations. The computer program instructions may be executed by a processor to cause a series of operational steps to be performed by the processor to produce a computer implemented process such that the instructions which execute on the processor provide steps for implementing the functions specified in the illustrations. Accordingly,  support combinations of means for performing the specified functions, combinations of steps for performing the specified functions and program instructions for performing the specified functions.","A breakthrough in neural networks is described in application Ser. No. 09\/436,925, now U.S. Pat. No. 6,581,049, entitled Artificial Neurons Including Power Series of Weights and Counts That Represent Prior and Next Associations, assigned to the assignee of the present application, the disclosure of which is hereby incorporated herein by reference in its entirety as if set forth fully herein. As described in application Ser. No. 09\/436,925, an artificial neuron includes a plurality of inputs and a plurality of dendrites, a respective one of which is associated with a respective one of the plurality of inputs. Each dendrite comprises a power series of weights, and each weight in a power series includes an associated count for the associated power. It will be understood that a weight generally is a place-holder for a count, and need not be a separate physical entity. The power series of weights preferably is a base-two power series of weights, each weight in the base-two power series including an associated count that represents a bit position. A power series of weights is illustrated, for example, in FIG. 5 of application Ser. No. 09\/436,925, reproduced herein as . It was found, according to application Ser. No. 09\/436,925, that, in part, by representing the weights as a power series, the geometric scaling as a function of input in conventional artificial neurons can be reduced to a liner scaling as a function of input. Large numbers of inputs may be handled using real world systems, to thereby solve real-world applications.","As also described in application Ser. No. 09\/436,925, the counts for the associated power preferably are statistical counts. More particularly, the dendrites preferably are sequentially ordered, and the power series of weights preferably comprises a pair of first and second power series of weights. Each weight in the first power series includes a first count that is a function of associations of prior dendrites, and each weight of the second power series includes a second count that is a function of associations of next dendrites. Prior\/next counts are illustrated, for example, in FIG. 6 of application Ser. No. 09\/436,925, reproduced herein as .","It has now been found, however, that prior\/next counts may not perfectly reflect a weightless graph. For example,  shows how different graphs can have the same prior\/next weights. The smaller graphs at the left side of  show that the prior\/next weights may not distinguish between two possible configurations: A is associated with D and B is associated with C, or A might equally be associated with C with B associated with D. In effect, the prior\/next representations can provide for compression, but this compression may be lossy.","This lossy compression may not be significant in many applications. For example, application Ser. No. 09\/436,925 describes an application for scoring, based on hetero-associative recall: given an input vector, the application returns a general measure of similarity. The lossy compression may have little effect in this application, as can be seen in the larger arrays of prior\/next weights at the right side of . The weights give only a statistical sense of association between any one node and other nodes after it. Although the D-E association may be confusable with the D-G association, these errors may have a low effect in hetero-associative recall, given all the associations.","On the other hand, the lousiness of prior\/next accounting may not provide auto-associative recall: given an input vector of known values, it may be desirable to give back a specific association to unknown values. For this application, it may be desirable for an associative memory to represent exact associations between inputs.","In order to facilitate a complete understanding of the present invention, a theoretical discussion of the separation and reconfiguration of an observation matrix into a linear structure first will be provided, as was described in application Ser. No. 09\/436,925. Artificial neuron structures according to application Ser. No. 09\/436,925 then will be described in detail. The generation and propagation of trace waves then will be generally described. Operations of application Ser. No. 09\/436,925 for memorization (writing) and imagination (reading) will be described in detail. FIGS. 1\u201321 of the present application are reproductions of FIGS. 1\u201321 of application Ser. No. 09\/436,925.","Then, artificial neurons including weights that represent maximal projections according embodiments of the present invention, will be described. A theoretical discussion of maximal projections will be provided, followed by a description of embodiments of the present invention, and a description of reading and writing according to embodiments of the present invention.","Artificial Neurons Including Power Series of Weights and Counts That Represent Prior and Next Associations","Theoretical Considerations","Some embodiments of the present invention were inspired by the cerebellar structure, long believed to be an auto-associative memory. While the cerebellum was traditionally thought to record and play unconscious motor skills, it is now understood to play a role in all cognitive activity, particularly in imagining and decision making generally.",{"@attributes":{"id":"p-0061","num":"0060"},"figref":"FIG. 2","i":"The Cortex of the Cerebellum","sup":"2"},"Some embodiments of the present invention can provide artificial neuron systems, methods and\/or computer program products that can virtually represent the learned interactions between inputs but can be physically implemented in a realizable system. In fact, an approximation of an O(N) virtual representation will be shown as an O(N) physical machine. Such pure linearity can allow scaling of high performance prediction and pattern matching, up to the Internet and down to small wireless devices.","A theoretical consideration can begin with a 2\u00d72 observation matrix that is used in statistics. Given any two binary input variables (such as the flip of two coins), there are four possible observations. The 2\u00d72 observation matrix is a set of four counters for the observed combinations. For instance,  shows two variables A and B. A can be ON or OFF, A or !A, respectively. This is similar for B. The observation count shows, for example, that the co-occurrence of A and B has been observed three times. Overall, it appears that A and B tend to exclude each other (represent a strong stochastic XOR relationship).","As shown in , each of the four cell counters may be represented as one of four phases. Each phase is identified by 00, 01, 10, or 11 relative to the ON (1) or OFF (0) condition of each of the two inputs. In this case, the low bit represents the A coordinate while the high bit represents the B coordinate.","When more than two input variables are considered, an O(N) number of 2\u00d72 matrixes may be needed. For example, as shown in , for three inputs (A, B, and C) there are three matrixes (A\u00d7B, A\u00d7C, B\u00d7C). Geometric scaling takes place with more inputs so that four inputs use six matrixes, five inputs use ten matrixes, etc. However, the simple graph of three inputs more clearly shows all relationships as a triangle. Each pair-wise edge of the triangle has a 2\u00d72 observation matrix. Note that the sums of observations can be different, which allows the tri-state input values of true, false, and unknown.","Some embodiments of the present invention can compress this representation of associations into a linear form. There appears to be little possibility of finding commonality across any two matrices. For example, the collapse of even two such matrices only may be accomplished if four observation counts match each other. In a worst case, all possible pair-wise matrices can be different from each other, allowing no compression by some combinations. However, some embodiments of the present invention can separate such counts in ways that can allow their compression.","Two rearrangements of these matrixes can result in graphs that have appropriate properties. The first rearrangement separates each of the phases from each other and recombines them into four graphs, one for each phase. See . The result of each graph can leave only a single weight, rather than a matrix of weights, on each edge of the graph.","The second rearrangement separates each weight of the phase graph into a power series, preferably a base-two power series.  shows one phase graph with weights of 3, 6, and 5 between the input variables A, B, and C. The binary representation of each weight is also shown. Each bit of a weight represents the base-two power of that weight.","Because these bit powers are additive in representing the full magnitude of the weight (6=2+2), each phase graph can be further separated into a set of power graphs, one for each bit.  shows an example phase graph separated into three power graphs, for 2, 2and 2magnitudes. The power of the graph is associated with the graph itself, but each graph now can be weightless, meaning that each arc represents one occurrence or nonoccurrence of an association between any two inputs for a particular phase and power.","A set of weightless graphs therefore can be produced. These graphs can each be of geometric size and can be further reduced, but the number of such graphs now may be contained. Given a representation of 2\u00d72 matrixes (other basic shapes can also be decomposed as such), there are only four phases. As with the efficient binary representation of exponentially large weights, the binary separation of any weight then limits the number of power graphs to log(weight). Any particular weight is limited to the number of total memory loadings, M (assuming that all observations are of only one phase), with an expected value of M\/4.","Continuing with the theoretical description, the weightless graphs then can be compressed, also into a linear form, using a statistic around each node. A statistic represents the characteristics around the node, but are not the characteristics themselves. For example, the number of links to each node is one such statistic. Each node may be characterized by one number, which may represent the number of associations of that node to all others. However, this statistic may not carry very strong constraints, such as which node-to-node associations are actually represented.","A preferred statistic may be obtained by analogy from dynamic programming. Dynamic programming techniques can reduce combinatoric complexity. Rather than explicitly accounting for all combinations, dynamic programming can find properties that allow implicit enumeration of many elements at once. Dynamic programming conventionally is used in tree structures. For example, each branch of a tree contains an exponential number of leaf nodes, but some problems have constraints such that an entire branch can be accounted at once. An exponential number of leaves are implicitly accounted, without the computational burden of actually accounting for each leaf.",{"@attributes":{"id":"p-0073","num":"0072"},"figref":["FIG. 6","FIG. 5","FIG. 6"],"sup":"0 "},"More specifically, each power graph is represented as a power series of ordered weight pairs, one weight of each pair representing all associations to inputs before it (prior inputs) and the other weight representing all associations after it (next inputs) in the ordering. The notation for the pair is shown as [prior]\/[next], and each pair is shown associated with one and only one input. These weight pairs generally are highly constrained to each other. For example, the weights of A are 0\/2 for 2\u00b0 weight power, representing two edges with B and C. The weight pairs of B and C are 1\/0 and 1\/0. Assuming the lexical ordering of A, B, and C, the prior weights of B and C match the next weight of A. In general, the sum of all prior weights has a complement sum of next weights. As will be shown later, the constraints between these pairs actually can be much stronger.",{"@attributes":{"id":"p-0075","num":"0074"},"figref":"FIG. 6","sup":"1 "},"This completes the theoretical discussion of separation and reconfiguration of the observation matrix into a linear structure. Specifically, the scaling factor generally is 4*log(M)*2N. There are four phases. The number of power graphs for each phase grows as a log function of observations, M. Each graph is represented by two weights for each input, given N such inputs.","Artificial Neuron Structures",{"@attributes":{"id":"p-0077","num":"0076"},"figref":["FIG. 7","FIG. 7","FIG. 7","FIG. 7","FIG. 6","FIG. 8","FIG. 7"],"b":["700","710","710","720","720","730","700","11","720"],"i":["a","c ","a","c","c "],"sup":"2 "},"Thus, each input or sensor neuron \u2013is connected to one dendrite branch \u2013. With this branch, the weight pairs for each power preferably are arranged from strongest to weakest. These weights are persistent. They can represent all the accumulated experiences that have been stored in the particular multipolar neuron.","In addition, each dendrite also contains a trace store  also referred to as a trace, which is transient. A trace  represents the current active sensor signal. The trace many be analogized to a post-synaptic biochemical trace (intracellular calcium buildup) left by sensor signaling. According to such biochemistry of learning, if a strong signal to memorize the signal follows the sensor signal, the trace signal interacts with the memorize signal to effect a permanent change in the dendritic weights.","A representation of a trace according to some embodiments of the present invention preferably is not as simple as a direct recording of the sensor signal. The trace representation preferably is converted into the same structure as the weights, preferably a power series of prior\/next associations. In a sense, the trace may be regarded as the weakest \u201cweight\u201d. The trace, rather than the sensor signals themselves, are used in the neuron's computational dynamics. The weights and trace preferably are in the same form for their most efficient computation together, as will be described below.","While  shows the dendritic arrangement for one phase,  represents all the phases, powers, and weight pairs to provide a multipolar neuron .  shows the initialized state of such a neuron. All weights and traces are initialized to zero, and there are no higher weight powers. Each major branch \u2013of the neuron  represents one of the possible observation phases. The outputs of the branches \u2013are summed at summing node  to provide an output on a multipolar output line .","Note that inputs \u2013are represented by sensor neurons. Each sensor neuron connects to a lateral dendritic branch at its appropriate level. The sensor neuron connects with every lateral branch at its level, but this is not shown for simplicity. Each lateral branch stores its weight pairs across all powers as detailed in .","Since the mathematics allows the arbitrary ordering of sensors and their weights for dynamic programming, biological neural architecture apparently has been decided on birth order. The terms proximal and distal rather than \u201cprior\u201d and \u201cnext\u201d, respectively, are used in  to indicate the oldest and newest dendrites, respectively. The latter terms may properly represent the birth order of sensors and connections to the multipolar neuron, but the former terms may be clearer and more structural. Proximal dendrites are closer to the cell body (summing node ). They are formed first by the earliest sensor inputs to connect. By analogy to neurocortical systems, new growth is added at the distal \u201csurface\u201d. In other words, newer dendrites are connected distally, after the earlier dendrites.","The dendritic structure may change over time. The ordering of dendrites may be from oldest to newest as shown, but this ordering can be rearranged to improve performance and to add more information. For instance, the stronger dendrites can be ordered to be more proximal. This could overlay a stronger ordering of phases so that, for example, phase 01 can be considered weaker than 10.","Trace Wave Propagation","The creation of a trace is the simplest of the multipolar dynamics for artificial neurons according to some embodiments of the present invention, and can show how the linear array of weight pairs represents observations and their memories. Accordingly, trace creation and trace wave propagation now will be described.","Dynamics of the multipolar neuron preferably are mediated by the propagation of waves from one dendrite to another. Such wave propagation is known across biological neural systems and has been very well studied in Purkinje neurons.  shows how the wave moves across the dendrites to trace the sensor signal. While the biology may be more of a parallel processor and may update the trace as each sensor signal changes, the computational model starts the wave at the soma (the cell body) of the multipolar neuron. The wave preferably moves from the proximal dendrites (arrow ) and then from the distal dendrites (arrow ) in one pass.","Referring to , first, the wave is initialized to represent the given phase of the dendrite, as shown by arrow . The two bits of the phase, high bit and low bit, are kept in the wave as a highFilter and lowFilter. This setting of \u201chigh\u201d and \u201clow\u201d can be arbitrary, as long as each dendrite will assume two perspectives: 1) calculating its associations to dendrites before it; and 2) calculating its associations to dendrites after it. In order to calculate the existence of an association between such dendrites\u2014given a particular phase\u2014one dendrite acts as one bit of the phase while another one acts as the other bit of the phase. For example, for phase 10, one dendrite must decide if its input is ON while another dendrite must determine if its input is OFF for the two of them to represent one such association. By convention, prior dendrites are assumed to act as the high bit while the next dendrite acts as the lower bit. More correctly, each dendrite acts first as the low bit, when calculating its associations to prior dendrites, and then acts as the high bit (acting like a prior dendrite) when passing its own signal into the wave to the next dendrite.","As the wave moves across the dendrites, the highFilter represents the sensor signal for the dendrite to be considered active within the given phase from the perspective of being the proximal dendrite in association with other distal dendrites. The lowFilter takes the opposite perspective; it represents the sensor signal for the dendrite's perspective as the distal dendrite in association with other proximal dendrites. Again, this assignment of \u201chigh\u201d and \u201clow\u201d is merely by convention. In general, each dendrite acts as one bit of the phase for one perspective and then the other bit for the other perspective.","The wave's priorSignals counter is initialized to 0. As the wave moves across the dendrites, they accumulate their signals for association to the next dendrites.",{"@attributes":{"id":"p-0090","num":"0089"},"figref":"FIG. 10"},"The dendrite then takes the perspective of the high-bit proximal dendrite before the wave moves to the next dendrite. If the wave's high bit filter matches the sensor's signal, the dendrite is active in this perspective for this phase and accumulates itself in the wave's prior signals counter. As the simplest form of the multipolar's dynamic programming, the trace wave propagation shows how one dendrite, representing one sensor input, can implicitly enumerate all associations to other dendrites and their signal patterns.","In particular, at Block , a test is made as to whether the sensor signal is the same as the wave's low bit of phase. If yes, then at Block , the proximal trace is set to the number of proximal dendrite signals, as accumulated in the wave. If not, a test made at Block  as to whether the sensor signal is the same as the wave's high bit of phase. If yes, then the accumulated dendrite signal's in the wave are incremented for passing to the next dendrite at Block . At Block , a test is made as to whether there is a more distal dendrite, and if yes, then the trace process is started in the more distal dendrite at Block . If there is no more distal dendrite, then the wave accumulation of signals is set to 0 at Block  and a test is made at Block  as to whether the sensor signal is the same as the wave's high bit of phase. If yes, then at Block , the distal trace is set to the number of distal dendrite signals as accumulated in the wave. At Block , a test is made as to whether the sensor signal is the same as the wave's low bit of phase. If yes, then the accumulated dendrite signals are incremented in the wave for passing to the next dendrite at Block .","The dendrite structure preferably is recursive. Each dendrite is connected to a possible next dendrite. Each dendrite propagates the trace signal to the next dendrite, the most distal dendrite tells the wave to reset itself (set the priorSignals back to 0) and returns control to the prior dendrite recursively. The return propagation preferably works like the forward propagation. The distal pass of the wave calculates the proximal traces, while the proximal pass of the wave calculates the distal traces.","Those skilled in the art of electronic design and parallel processing will recognize that these traces may be updated with real-time propagation in physical hardware. For example, any signal change can propagate proximally and distally at the same time, beginning with the dendrite associated with the changing sensor. Such waves preferably would propagate a prior change in signals rather than prior signals, but the dynamics otherwise can be identical. The single pass operations described above may be more efficient for sequential processing computer architectures. All sensor signals are assumed clamped and stable when the trace signal is called; all possibly parallel propagations are computed once in a single sequential pass.",{"@attributes":{"id":"p-0095","num":"0094"},"figref":["FIG. 11","FIG. 10"],"b":["1010","1014","1026","1032","1012","1034","1016","1028"]},"Each dendrite object is recursively connected to another more distal dendrite. Each dendrite calls the trace member function of such a next dendrite, if it exists. Otherwise, the trace function returns void.","Memorization","A description of memorizing or writing into an artificial neuron according to some embodiments of the present invention now will be provided. Memorization generally is more complex, preferably using more than one wave propagation. Multi-wave propagation also may be indicated in the cerebellum in that a single signal from the climbing fiber causes a burst of activity in the Purkinje neuron.  shows the climbing fiber and how it surrounds the Purkinje neuron's dendrites. Given the sensor signal's formation of the trace signal, the climbing fiber may provide the memorize signal.","Analogous to the biology, a memorize signal to a multipolar neuron of some embodiments of the present invention generally causes a burst of wave activity.  shows that the neuron initializes (arrow ) and propagates a wave through the dendritic field (arrows  and ), much like the formation of a trace. However, the weight structure is more complex than the trace and may use several passes. As shown, each wave passes through each power of the weights. Starting from the weakest 2weight column, the memorize signal causes a transfer from the traces to the more permanent weights.","The example shown in  is simple. The trace weights are simply accumulated to the permanent weights at 2. However, the separation of observation weights into power graphs and the resulting power columns in the dendritic field may produce a carry function from one weight power to another. For example, addition and carrying in binary codes is simple. When adding one bit to another, the value of the bit is doubled, and hence needs to be shifted into the next, higher-bit column. If the higher bit is off, then it is turned on. If the higher bit is on, then it is doubled and needs to be left-shifted into its next, higher bit column. This operation continues until the carry bit propagates appropriately.",{"@attributes":{"id":"p-0100","num":"0099"},"figref":"FIG. 12","sub":"2"},"Although the memorize function is complex, it may be viewed as somewhat similar to the trace formation described above. The wave generally travels to each dendrite in succession, modifying the proximal weight (like forming the proximal trace) and changing the wave as well to implicitly communicate its activity with other more distal dendrites through dynamic programming. The wave adjusts the proximal weights, and then reverses to adjust the distal weights. However, the nature of the dynamic programming generally is more intricate and elegant, as now will be described.","Memorization first will be generally described. Then, a detailed description of carrying from one weight power to another will be described.  shows the overall memorization operation and its call to the Double Match\/Filter to be introduced next.","In particular, when the wave first enters a dendrite, the dendrite assumes the perspective of the distal dendrite. Given both its proximal weight and trace values, the dendrite must determine whether the addition caused by the trace should be added to the current weight or carried to the next power. The logic of the decision is much like in binary coding: if the association does not exist, then the weight is set so that it does exist. If the association already exists, then the old and new association account for two-of-the-same and should be left-shifted to a higher power. As will be described below, Double Match\/Filter finds such \u201cdoubling\u201d of the currently known associations, which should be carried to the next power.","Referring now to , the Double Match\/Filter (Block ) extracts the number of proximal doubles that should be carried forward and also alters the wave, which the dendrite sends to the next dendrite (Block ), if there is one (Block ). The wave returns (Block ) and the Double Match\/Filter is called again (Block ), this time to extract the number of distal doubles (Block ).","Once the number of doubles is determined to carry forward to the next power (Block ), the weights at the current power can be determined (Block ). Both proximal and distal weights are decremented by the number of associations (doubles) that should be carried forward. In other words, if the weight already held an association and the sensor signals added it again, the association should be removed from the current power and doubled into the next. Each weight is then incremented to account for the new trace values, minus those that matched old associations and are accounted in the doubles to be carried.","Finally, the doubles are carried by assigning them as traces for the next weight powers to add, as done for the lowest weight power. If there are in fact any doubles and they are set as the trace values for the next wave, then the wave's carry trigger is set true. The multipolar neuron sends a burst of waves, each tuned to a higher weight power until there are no more associations to carry forward.","The time scaling factor is the same linear O(N) function as it is for the space complexity. The neuron creates one wave, which is tuned 4 times for each phase of its dendritic field. Within each phase, a log(O) number of bursts (maximum possible bursts) complete the weight change.",{"@attributes":{"id":"p-0108","num":"0107"},"figref":["FIG. 14","FIG. 13"],"b":["1302","1312","1314"]},"The traces are reassigned to the number of match doubles. This represents the value to be carried to the next wave power. In order to use the same memorize function (Block \u2032) on subsequent passes of the wave, these carry values are placed in the trace, just as if they represented input signals for the next weight power\u2014which in fact they are.","Before returning, the dendrite determines whether there is in fact anything to carry in the traces (Block \u2032). If so, it trips the wave's carryTrigger (Block \u2032) so that it passes back at a higher wave power.","The most intricate part of this linear scaling is the operation for finding doubles. The actual power graphs explicitly represent edges of the graph, so it can be determined if a particular association exists or not. An association of a particular power between two inputs is represented as one and only one edge between the respective input vertices. The linear weight scheme inside the dendrites may be much more peculiar and can represent a geometric number of associations, but it can be very difficult to see that one dendrite\/sensor has an association with another.","However, the dynamic programming of wave propagation can account for these associations. As was shown in , a distal weight of 2 must encounter 2 proximal weights to match it. Considering the highest power column in , the weight of 2 at A will first encounter a 1 at B (A and B are associated) and another 1 at C (A and C are associated). B and C could also have had a matched pair of proximal and distal weights, but they did not have such an association in this example.",{"@attributes":{"id":"p-0113","num":"0112"},"figref":["FIG. 15","FIG. 15"]},"More specifically, the dendrite generally can calculate only the number of possible doubles. Although a dendrite may have some number of weights and some number of traces, there generally is no local guarantee that they represent the same associations. For example, input A might have an old association with B and a new trace with C. But A has no explicit connection with B or C to decide this. Imagine that the proximal dendrite is \u201clooking\u201d distally through the weights of the other dendrites trying to determine if there is another double, with which to match. There is too much noise and confusion of weights in such a perspective. Fortunately, there are a number of intricate constraints, allowing another form of dynamic programming to match-and-filter such doubles.",{"@attributes":{"id":"p-0115","num":"0114"},"figref":"FIG. 16"},"The first example (first row of ) shows how some associations are doubled by a new observation while others are left to simply add as new single associations. The second example (second row of ) shows how some possible doubling of weights might appear within one dendrite, but by going through the following processing, none of the new associations actually match those of the prior memories.","For example, initial weights and traces for input A are identical across both examples. Input A has a weight of 2 associations below it, and it might be assumed that the new trace of 1 association might match an association already stored. If so, then the doubling of the association should be carried to a high power. However, only the first example has a true doubling of an existing association. While A should propose that it has a possible double in both examples, the second example shows how the trace value of C forces an accounting of the traces for both A and B above it. The trace value in A is accounted by C, but without a corresponding weight. Unlike the first example in which C can match the weight-trace double of A, the possible double in A is split and is not in fact a double in the second example.",{"@attributes":{"id":"p-0118","num":"0117"},"figref":"FIGS. 17A\u201317C","b":["1706","1702","1704","1708","1712"]},"If these possible doubles are true doubles and can be matched to each other as true doublings of an association, then the possible weights and residual traces of the distal dendrite preferably are accountable by matching weights and traces in the wave. This is a hard constraint; when accounting for a distal wave, all proximal counts of the dendrite preferably are accounted to match the wave's accumulations. Matched weights and traces (Blocks  and ) are calculated as the minimums of the dendrite's and wave's weights and traces (Blocks  and ), respectively.","If the dendrite's possible weights or traces cannot be accounted for by matching to the wave's accumulations, then the possible doubles in the wave may have been too greedy. This is calculated by finding the residual weights and traces, i.e. the possible values that were not matched at Blocks  and  respectively. The larger residual is the number of wave doubles that must be split into their separate weights and traces in order to balance the accounting. This forced split (Block ) is removed from the wave's accumulation of doubles (Block ) and given to its individual weights and traces (Blocks  and ).","Then, referring to , the dendrite's possible doubles (Block ), which also should be completely accounted before the wave moves on, might be true doubles (Block ), but only if the wave is carrying possible doubles (Block ) to match it. The minimum of these possible doubles and the wave's doubles are in fact true doubles, which have been found and matched to each other as matched doubles (Block ).","Knowing the number of true matchedDoubles, the number of true weights and traces can be calculated. The matchedDoubles are subtracted from the stored weights to determine the truePriorTrace (Block ). The matchedDoubles also are subtracted from the stored traces to determine the truePriorTraces (Block ).","Finally, referring to , the dendrite takes the perspective of looking distally before sending the wave to the next dendrite. It calculates the possible next doubles (Block ) as the minimum of its distal weights (Block ) and traces (Block ). Again these are possible doubles, which this process will resolve in the next dendrites. The wave's weights and traces also are updated from the dendrite's distal perspective in order to keep a balanced account of all associations for repeated operation.",{"@attributes":{"id":"p-0124","num":"0123"},"figref":["FIG. 18","FIGS. 17A\u201317C","FIGS. 17A\u201317C"],"b":["1802","1804","1806","1802","1804","1806"]},"Reading","Reading of the artificial neuron now will be described. The calculation of matched doubles is used in both writing and reading operations. As described for memorization, matched doubles indicate which associations in the current sensor pattern are already known so that they can be carried to the next weight power. For the read operation, also called \u201cimagine\u201d, matched doubles represent the number of associations in memory (the weights) that match the associations in the new observation (the trace). The Double Match\/Filter process also can be the heart of this associative memory's matching function and its measure of similarity\/distance.","The read operation is cast as recalling or imaging of past associations given a set of new observations. In other words, the new pattern of observations is clamped to the sensor input neurons and focused to one of the multipolar neurons. This multipolar neuron then imagines the possible output (feed-forward prediction) and imagines possible associations to any other inputs (feedback pattern completion). These two read operations are often referred to as heteroassociation (inputs to output) and autoassociation (inputs to other inputs). In the psychology of learning theory, these elements are referred to as stimulus-response associations and stimulus-stimulus associations, respectively.","The Double Match\/Filter process preferably is used for such recalling of memory. Briefly, recall is a comparison for matches between the trace associations of the current observation and the permanent weight associations representing the past. The strengths of the hetero- and auto-associative images may be directly correlated to the degree to which past experiences match the current experience.",{"@attributes":{"id":"p-0128","num":"0127"},"figref":"FIG. 19","b":["1910","1910","1920","1930"],"i":["a","b"]},"Given that each multipolar neuron represents some output action or other label-category, relevance is the degree to which the current observation relates to the action or category. This can also be understood as a membership function: how well the new observation belongs to the set of observations associated with this particular output.",{"@attributes":{"id":"p-0130","num":"0129"},"figref":["FIG. 20","FIG. 13"],"b":["2006","2014"]},"The nonlinear function of this accumulation can be derived from both the linear and nonlinear associative models introduced in . Assume that the relevance value for any observation matrix is composed of both linear and nonlinear terms:\n\nRelevance=\n\nEach weight can be calculated from the raw observation counts as\n\n\n\n\n\n\n\nwhich can be rearranged into the following partial formulas in terms of each phase\n\nrelevance=(\u2212)\n\nrelevance=()\n\nrelevance=()\n\nrelevance=().\n\nGiven that the phase is already a filter of A's and B's signal states, it can be seen that the sensor terms are constant for any phase, in fact, a constant of 1 for each phase. For one instance, relevance=w. In other words, the partial relevance of each phase is an accumulation of the observation weight. Thus, some embodiments of the present invention can account for both linear and nonlinear associations, even though the physical representation is linear and the recall functions are an accumulation of observation counts. The Double Match\/Filter selects those observation counts that represent the current observations.\n",{"@attributes":{"id":"p-0132","num":"0131"},"figref":["FIG. 21","FIG. 19"],"b":["2014","2006"]},"It will be understood that the Purkinje neuron is only one form of multipolar neuron. The pyramidal neurons of the cerebral cortex also are well known, but nervous systems generally display a very wide variety of dendritic branching patterns, many of which are complex and multipolar. Likewise, some embodiments of the present invention can be applied to many other forms of observation counting. The 2\u00d72 observation matrix was introduced as a fundamental element of recording observations and interactions; however, one skilled in the art will recognize that higher dimension matrixes, polar coordinates, Karnaugh maps, Boolean functions, and\/or hierarchical structures also can be used to collect observation counts, which can then be decomposed and compressed as was described above.","In fact, even a unipolar neuron can use some embodiments of the present invention within its only dendrite. For instance, the ratio between A and B results in a single 1\u00d71 cell, one value for each pairwise combination of inputs. This is equivalent to a single weighted graph, which can be decomposed into a set of un-weighted power graphs, which in turn can be dynamically programmed as above. A single dendritic recursion, perhaps the only one in a unipolar neuron, could then represent such ratio numbers.","In summary, the incremental learning and recall of observations has been described within a multipolar neuron, composed of primary branches for each possible pair-wise combination of terms. Although other multipolar structures can be represented, this 2\u00d72 observation matrix provided an example of four phases. Each branch preferably is composed of recursive dendrites, each dendrite connected to one bipolar input neuron and containing a set of weights and traces. Each dendrite stores weight pairs, one weight storing the number of associations to other dendrites proximal to it, and one weight storing the number of associations to other dendrites distal to it. The dendrite preferably stores multiple weight pairs, one pair for each base-two power of possible weights. The total number of weight pairs per dendrite thus can be limited to logof all stored observations. Each dendrite also preferably contains a single pair of transient traces, which represent the current observation using the same proximal\/distal form of accumulation weights.","Several operations using dynamic programming can allow reading from and writing to the memory in linear space and time, even though the accounting approximates nonlinear associations between all inputs. All operations can use wave propagation in which the wave filters the dendrites' phase orientation and carries the accumulation of their signals as it travels from one dendrite to another. A Double Match\/Filter can process the hard constraints between dendritic weights and traces, resulting in an implicit enumeration of past associations that are matched by the current observation. Thus, weights can be added and carried from one weight power to another during the memorize operation. It also measures the pattern match between past memories and the new input in order to determine the relevance of the new observation and the sensitivity of each input in effecting such relevance.","The hypermachine scaling factor of some embodiments of the present invention can profoundly broaden the general utility of associative memories. Although the implementation described here may admit some loss in its compression from nonlinear to linear, an incremental-loading, parameter-free, nonlinear associator now can be physically implemented in a linear size and speed to open new possibilities for machine learning, both at the largest scales of the Internet and the smallest scales of wireless devices.","Artificial Neurons Including Weights That Define Maximal Projections","Some embodiments of the present invention may be based on a power series separation and prior\/next counts as was described above. However, some embodiments of the present invention that now will be described can provide for a lossless compression of associations using maximal projections, and may be used in many applications of both hetero-associative and auto-associative recall.","A theoretical discussion of maximal projections first will be provided. A description of embodiments of neural networks including maximal projections according to some embodiments of the present invention then will be provided. Finally, detailed description of reading and writing according to some embodiments of the present invention will be provided.","Theoretical Discussion of Maximal Projections","It has been realized, according to some embodiments of the present invention, that concepts in the unrelated field of tomographic reconstruction may be informative to solving the potential problem of information loss. In particular, consider the problem of digital tomography in which the row and column weights for a matrix can be sensed from projections along the edge of a binary matrix.","Consider row and column sums of a full matrix as the tomographic generalization of prior\/next sums as illustrated in . Row\/column sums are typically denoted as {R, S} in such matrix computations. It will be understood that the terms \u201crow\u201d and \u201ccolumn\u201d are being used to indicate two different dimensions in a two-dimensional matrix, rather than an absolute direction. Accordingly, the terms \u201crow\u201d and \u201ccolumn\u201d may be interchanged throughout.","Referring now to , it can be seen that the prior\/next and row\/column projections can be equivalent for triangular matrices.  shows how the \u201cprior\u201d weight can be mapped to a \u201crow\u201d weight in R, the vector of all row sums of a matrix. \u201cNext\u201d weights can be mapped to S, the \u201ccolumn\u201d weights of the matrix. The description that follows will use the {R, S} denotation as more typical of matrix mathematics, which may also demonstrate potential applicability of embodiments of the present application to very large matrices.","Embodiments of the present invention can make use of a finding from Lorentz. Lorentz found that some arrangements of bits in a binary matrix are \u201cmaximal\u201d, meaning that the rows and columns can be resorted in such a way that all the bits are well \u201cpacked\u201d into one corner, with no holes occurring in the packing. In some embodiments of the present invention, a power series separation as was described in some embodiments of the present invention may be used to generate bit matrices (a set of matrices containing only binary values), from which {R,S} projections can be efficiently manipulated and used.","First, it will be shown that matrix rows and columns can be resorted without loss of information.  illustrates a bit matrix and its unsorted {R, S} projections. The matrix can then be sorted such that the {R,S} sums are in descending order.  illustrates such a matrix of sorted projections. Note that most of the ONE bits are now in the upper-left. The shaded areas in  are better consolidated and arranged in  to all be just outside this area of maximal bit packing. The non-maximal areas are called \u201cswitches\u201d because the bits can move or switch into different configurations without changing the {R,S} projections.","Lorentz also determined that maximal matrixes\u2014sorted matrices that do have such maximal bit packings\u2014can be completely determined by their {R, S} projections as seen in . The row projections are denoted Maximal R and the column projections are denoted Maximal S. Here, the projections represent only the maximally packed portion of the matrix, excluding the bits that are within the switches. The projections and the matrix are equivalent and can be determined from each other. Hence, the full matrix is reversible from the projections.","For tomography, this means that some projections can be resorted and the location of bits can be determined from the projections. Lorentz determined that, given a sorted projection of a matrix indexed by i and j, any element aof a maximal matrix can be determined by the formula a=1 iff r\u2267j. In other words, the bit is on if and only if the row projection (r) is greater than or equal to the column index j.",{"@attributes":{"id":"p-0147","num":"0146"},"figref":["FIG. 27","FIG. 27","FIG. 27"],"sub":["1","4,5 "]},"It will be understood that many matrices and their projections do not tend to be maximal. Rather, maximal matrices are a special case of many matrices. As seen in , however, sorting can arrange {R, S} so that there is one contiguous maximal area, but the non-maximal holes still remain.","Such holes are called \u201cswitches\u201d or \u201c4-switches\u201d. The simplest condition of such a switch is shown in the shaded area of , when 2 bits are on and two bits are off in such a diagonal arrangement. The 4 locations form a switch in that 2 different arrangements shown in  are possible. The projections generally cannot determine the position of the bits in the switch. Accordingly, 4-switches are a cause of indeterminacy and non-reversibility between a binary matrix and its projections. However, 4-switches are known to be the only cause of such errors. This is known to be the only mathematical object to disturb a matrix from maximality.","Artificial Neurons Including Weights That Represent Maximal Projections","Some embodiments of the present invention can employ power series separation and\/or the projection counting that were described above, but can also use maximal projections in an associative memory. These new systems, methods and\/or computer program products may improve both reading and writing to and from the memory. Generally speaking, using the properties of maximal matrices may improve the speed of reading. Moreover, knowing the cause of lousiness by 4-switches may lead to a lossless reading and writing, as will be described in detail below.","Artificial Neurons Including Maximal Projections","Referring now to , a block diagram of artificial neurons according to some embodiments of the present invention is shown. As shown in , an artificial neuron  according to some embodiments of the present invention, includes a plurality of inputs \u2013, and a plurality of dendrites \u2013, a respective one of which is associated with a respective one of the plurality of inputs \u2013. In embodiments of , a respective dendrite \u2013includes a respective power series of weights \u2013representing weights 2\u20132. It will be understood that a weight generally is a place-holder for a count, and need not be a separate physical entity. In embodiments of , a respective weight  in the power series includes a respective projection . In embodiments of , the projections  for a respective power in the power series of weights \u2013are sorted to define a respective maximal projection \u2013, i.e., a plurality of projections that are arranged to be maximal, for the associated power. The projections for the associated power are mapped, sorted or indexed by projection length, by a router , for example in a manner that was described above, to provide mapped, indexed or sorted projections that define the maximal projections \u2013. A separate mapping, sorting or indexing may be provided in the router  for each power of the power series.","In some embodiments, at least some of the weights in the power series \u2013also include at least one switch . It will be understood that, although a projection and\/or switch may not be present at a particular point in time, some embodiments of the present invention provide a place-holder for a projection  at every weight position in the power series and at least one switch for each power in the power series of weights \u2013. In some embodiments, the power series of weights \u2013is a base  power series of weights, wherein the maximal projections \u2013include a plurality of maximal row projections and\/or a plurality of maximal column projections. In other embodiments, the respective maximal row projection and\/or the maximal column projection is sorted by sums of row projections and column projections, respectively, that are represented by the weights in the power series. It also will be understood that not every dendrite  may include a power series of weights  and not every weight  may include a projection . Thus, in some embodiments, at least some of the dendrites  includes a power series of weights and at least some weights in at least one power of the power series define a maximal projection .","Still continuing with the description of , embodiments of artificial neurons  also may include a trace or activation vector , that is responsive to an input signal at the associated input. As will be described in detail below, the trace  is configured to map activations of the input signal to locations in the maximal row projections and\/or maximal column projections . The trace  also may map activations to the switches .","Still referring to , a reader  is configured to determine an activated subset in the maximal row projection and\/or maximal column projection  from the trace , and to select, for each column of the activated subset, a smallest row projection that is greater than or equal to an index for the column. In other embodiments, the reader  is further configured to accumulate the smallest row projections that are greater than or equal to the index for the associated column, for the columns of the activated subset, to thereby obtain an association of the input signal with the weights.","Still referring to , a writer  also is included that is configured to embed the trace  into the maximal projections  and the switches . In some embodiments, as will be described in detail below, the writer  includes a matrix compressor that is configured to find redundant projections between the trace  and the maximal projections .","It also will be understood by those having skill in the art that in other embodiments, the dendrites \u2013need not comprise a power series of weights \u2013. Rather, one or more weights may be provided that are not in a power series, wherein at least some of the weights for at least some of the dendrites define a maximal projection . The weights are sorted by the router  to define a maximal projection and a switch . Thus, maximal projections and switches according to embodiments of the present invention may be used independently of the power series of weights according to embodiments of the present invention.","Reading","Some embodiments of invention that were described above allowed linear reading and writing, which may be desirable when considering that an associative matrix scales quadratically. However, the entire prior\/next weight set may need to be scanned from beginning to end in order to compute even a subset of the associations. Some embodiments of the present invention that now will be described can allow the reading of an individual association, independent of the length of the entire row and column projection arrays. Given that associative strength can be segmented into a set of bits, one within each matrix, each bit level can be read by lookup of any two A and B inputs in the rows and columns. Knowing the projections and indices of A and B in each matrix, one can then determine if A and B are associated for that bit.","This can allow for very large neurons. In particular, in some embodiments, reading and writing can be dependent only on the size of the given input vector\u2014and need not be dependent on the size of the complete neuron. In many applications, the vector to be read is usually a fraction of the entire feature space in the neuron memory at large. For example, in some embodiments, a vector of 100 attribute-values may be read in milliseconds even if the entire memory contains 10K\u2013100K possible attribute-values.","On the other hand, the read (and write) time is still generally quadratic if each attribute-value in the vector needs to be considered with each of the others. For several more demanding applications, the input vectors can be 1K\u201310K in size. Even if read times are independent of associative matrix sizes up to 1M features, this geometric scaling can be further improved.",{"@attributes":{"id":"p-0160","num":"0159"},"figref":["FIG. 29","FIG. 28","FIG. 28"],"b":["2860","2810","2810"],"i":["a","m "]},"For example, as shown in , the trace T input terms include {A, B, D, F, G, J, K, N, P, Q, R, T}, with this particular matrix storing the associations A\u2013I with J\u2013V. The activations of these inputs are mapped to their locations in rows and\/or columns of the matrix. Given this trace activation,  also shows the highlighting of active associations between active rows and active columns as shaded cells. Active rows and columns are highlighted with darker shading, showing their intersections to the specific associations, the cells within the matrix. The trace activates 25 associations in .","It will be understood that an explicit matrix is shown in  and in many of the other figures, in order to describe embodiments of the present invention, but need not be used as part of a system, method and\/or computer program product according to embodiments of the invention. As already demonstrated, the projections themselves can be sufficient to represent the matrix. While the matrix scales quadratically, the projections can scale linearly. The following embodiments use only the projections to read from and accumulate the activations of a trace in linear time.",{"@attributes":{"id":"p-0163","num":"0162"},"figref":["FIG. 30","FIG. 29","FIG. 30"]},"Given only the original projections and the addition of {+R\u2033, +S\u2033}, which can be calculated in time linear to the size of {+R, +S}, these embodiments select (for each column) the lowest possible projection of +R such that +R\u2267+S\u2032. In other words, +S\u2033 represents the index of a column for which the row projection must be long enough to reach it. Stated differently, from a conceptual standpoint, if there is an activated row projection long enough to reach the column, it and all row projections longer than it also are able to reach the column. Because projections are in rank order, +R\u2032 gives the number of such rows in the original matrix. Because reading need only be interested in the number of activated rows that can reach the column, +R\u2033 gives the number of such activated rows. It can be seen in  how these values of +R\u2033 correspond to the number of activations in the respective columns.","The above reasoning for one cell of a maximal matrix can be extended to cover all the activated cells in linear time. This can be appreciated from . Looking at the first row (R\u2032=1) and its projection (R) of 13, it can extend to all column activations (S) below or at an index (S\u2032) of 13. Column  is the largest such index, which is the 7such activated index. Therefore, the activated projection of 13 will intersect with 7 columns. These intersections can be accumulated to one count of 25 or can be given as maximal projections of the activation themselves. This subset projection, such as {7, 7, 5, 4, 2}, describes the number of subset associations per row. While the total \u201cscore\u201d of the trace can be accumulated as 25 associations, each specific association is perfectly recalled. For example, the subset projection of A is 7, meaning that A has 7 associations in the matrix with other terms in the trace set {A, B, D, F, G, J, K, N, P, Q, R, T}, which is true.","More specifically,  is a flowchart of operations that may be performed for reading, according to some embodiments of the present invention. Because R and S both contain the same information about the matrix, either can be used. However, in , construction and return of both new row and column projections are shown.","Referring now to , for each Activated Value (AV) in the trace (Block ), the activated attribute-value is contained in either the row (Block ) or column (Block ). All such rows and columns are accumulated according to their projections {+R, +S} and their indices {+R\u2032, +S\u2032} at Blocks  and . Then, assuming the left side of , beginning with the lowest projection in +S and lowest index in +R\u2032 (Block ), if the projection is greater than or equal to the index (\u201creaches\u201d the index) (Block ), then the activated projection from R is equal to the index of +S in the subset matrix (Block ). If not, the next higher projection in +S is evaluated (Block ) and these operations are repeated until the projection does reach the index (Block ) and the new projection from +S\u2033 is marked. These operations are repeated for each successive index in +R\u2032. Projections are returned at Block . Analogous operations for columns may be performed at Blocks \u2013.","Because the projections are in sorted order (maximal projections), the last value of +S will be the lowest possible value to begin with in the next iteration of +R\u2032. In other words, this last property can allow embodiments of the invention to be linear in time to the size of +R\u2032 or +S, whichever is larger.","These accumulations of bits from each compressed matrix can be accumulated to construct the associative weights as integers, and these integers can be used for both hetero-associative and auto-associative recall. Thus, a precise account of any attribute-value to any other attribute value can be reconstructed without loss in some embodiments of the present invention. In addition to the global accumulation of counts as described for hetero-associative functions in some embodiments of the present invention, some embodiments the present invention can support exact accounting of auto-associations\u2014the count of any attribute-value to any other.","The following algebra demonstrates how computations can be collected from this linear read. In particular, the addition of conditional probabilities can be computed from the addition of power series projections, as follows:","The conditional probability of an association between a given variable such as B and the target variable such as A is given as Prob(A|B), which can be calculated as AB\/B, where AB is the number of times AB are associated and where B is the sum of all associations to B. These two values can be read from the projections of maximal matrixes. As described above, it is possible to determine whether the numerator, AB, is ON or OFF. The denominator, B, is the value of the entire projection, which represents all associations of B.","However, to read all the conditional probabilities contained in a maximal matrix in linear time rather than quadratic time (reading each combination), the linear read described above can be employed. Assume the need to accumulate two conditional probabilities:\n\n()+()==()\/().\n\nSuch addition is only an approximation of the joint probability, but this formulation can now be accumulated in linear time from a maximal matrix by calculating AB+AC and B and C. Using a power series of some embodiments of the present invention, the integer value of any association can be decomposed into its power series representation. The integer weights of AB and AC can be decomposed into:\n\n=1+2+4\n\n=1+2+4,\n\nwhere AB represents the bit at 2(1) and AB represents the bit at 2(2) and so on up to 2(4). Each element is multiplied by the strength of its power, such as AB being multiplied by 2(4). These terms can be rearranged to:\n\n=1*()+2*()+4*().\n\nThe linear read described above is now available to calculate such sums as AB and AC. In other words, the combined associative count of B and C to A in the 2matrix is given by the subset projection of A in this matrix. Assuming a trace of {A, B, C}, the subset projection of A will be:\n\n,\n\nwhere rA represents the subset row projection of A for the first matrix projections in the power series. The sum of the subset projections across the power series is calculated as:\n\n+2+4*,\n\nwhere rA represents the associative strength of A to the other terms across all the power series. To convert this associative strength to the sum of conditional probabilities, rA is divided by the total weight of B and C as follows:\n\n()+()=\/().\n\nThus, the total weight of B can be accumulated from the sum of total projections in the power series. For example, if the row projection of B equals 5 in the 2matrix and equals 3 in the 2matrix, then B=1*5+2*3=11.\n","In summary, many matrix calculations can be computed in linear time when the matrices are maximal. To do so, the calculation may be decomposed into a power series representation as described above, and individual terms may be collectable and readable as subset projections or total projections of each power series level. In other embodiments, a power series decomposition need not be used with the maximal projections. The simultaneous computation in linear time of many pair-wise conditional probabilities is an example of one such linear reading, but many other formulations (such as measures of variation) are also possible, according to embodiments of the present invention.","Writing","Writing according to some embodiments of the present invention now will be described. Given the above-described ability to read maximal matrices in linear time, these embodiments will describe how to extract such maximal matrices and manage both the maximal and non-maximal partitions.","A goal of discrete tomography is to estimate the internal position of the bits within the matrix from these projections. In tomographic applications, the projections are given. The matrix itself is hidden within an object, and the tomographic method is used to \u201csee\u201d into the matrix and regenerate the matrix such as for medical imaging. The write operation of an associative memory can present the opposite problem. The association matrix is given, and the memory compresses all the associations into such efficient projections.","Ideally, all the associations would be arranged as maximal matrices in the power series. If so, then the prior\/next projections can perfectly represent the compression of the bits into a linear form, as assumed in some embodiments of the present invention that were described above. However, many, if not most, associative matrices will yield areas of maximality but also include residual 4-switches as shown in  and . The maximal areas may be highly compressed, but first the existence and location of 4-switches may need to be determined. Solving this 4-switch problem can then reduce or remove the lossy compression of prior\/next counts in some embodiments of the present invention, according to some embodiments of the present invention.","One approach for finding switches is to isolate the maximal parts of the matrix from the non-maximal parts. As already described, sorting the projections tends to collect the switches along the diagonal. Many sorting techniques then can be used. In some embodiments, but the special properties of {R, S} can allow the use of a conventional technique called C-Sort. C-Sort scales linearly but may not be used often because of a special assumption: the largest number being sorted cannot be greater than the number of items being sorted. However, {R, S} projections have this property. In particular, because the numbers being sorted represent the number of associations in a row or column to other rows or columns, the number of associations cannot be greater than the number of rows or columns. Therefore, C-Sort is usable to sort maximal projections. However, many other sort programs such as a conventional Java sort also may be used.","Once the projections are sorted, the following operations can determine the coordinates of the 4 switches.  is provided as an example.  is a flowchart of operations that may be used to find switches according to some embodiments of the present invention.","Referring now to , in order to find switches (Block ), \u201ckarns\u201d are computed at Block . In respect to Lorentz' method, L in L(R) and L(S) denotes a cross reference of {R, S} projections. To give this computation a name, \u201ckarn\u201d is used as an anagram of \u201crank\u201d. For each column (for example), L(S)=max R\u2032|R\u2267S\u2032 (Block ). Likewise, L(R)=max S\u2032|S\u2267R\u2032. In other words, the karn of R (Block ) is the largest row index such that the row projection is greater than or equal to the column index of R, using a zero-based indexing scheme. For example, in , LR of term C equals 11, even though its projection equals 8. This is because the column index  is the maximum index for which the column projection, 2, is greater than the zero-based index of C. R\u2032 for C=3, making the zero-based index=2. Hence, the 11column projection\u2267the zero-based index of C, 2\u22672. Conceptually, such LS and LR values can be seen to determine the \u201cedge\u201d of uncertainty\u2014the outer edge of the maximal area and switches for each row and column.","Still referring to , at Blocks  and , partial sums are compared. In other words, \u03a3R, \u03a3S, \u03a3L(R), and \u03a3L(S), respectively, are computed from the first to last index of the rows and columns. Whenever \u03a3S<\u03a3L(S) and \u03a3R<\u03a3L(R), there is a \u201ccrossover\u201d of the row and column projections. Such crossovers are caused by variant areas of the matrix and indicate the locations of 4 switches. For example, in , the partial sums for the input term C are not equal to each other. The \u03a3R=34 while \u03a3L(R)=35. In other words, the running sum of projections is smaller than the running sum of the outer edge. When these values are the same, the projections are maximal. When the outer edge of uncertainty is greater than the projection, all the bits are not \u201cpacked\u201d. There is a switch at row C. The switch ends when these partial sums are again equal to each other, but the switch includes this point. Therefore, rows D and E are also part of a switch.","Still referring to , at Blocks  and , operations are performed at intervals. The coordinate intervals that contain the 4-switches are found by combining the row and column crossovers with each other. For example,  shows that rows [C, E] form one interval while [G, H] forms another. Likewise, [L, O] and [R, T] form the column intervals. Basic geometry may be used for combining these intervals (Block ) into the corner coordinates of the 4-switches (Block ). Given the constraint that such switches exist on the diagonal of the matrix, the [C, E] row interval is crossed with [R, T] column interval while the [G, H] interval is crossed with the [L, O] interval. Determining the comers of each switch (Block ), CR is the top-left corner while ET is the bottom-right corner of one switch. Once these locations are determined (Block ), the maximal values can be separated into a highly compressed {R, S} projection and the residual switches.","It will be understood that finding switches may only be part of writing. A complete system may not only find and store the maximal portions of each power series of projections, it may also store the residual switches. A number of conventional techniques may be employed to represent the switches as separate from the maximal projections, but explicit storage as a binary matrix is one conceptually straightforward technique, which may be used in some embodiments of the present invention.",{"@attributes":{"id":"p-0183","num":"0182"},"figref":["FIG. 34","FIG. 34"],"b":["3400","3401","3402"]},"Compression may be used for larger matrices. In this case, the operations for finding switches (Blocks ), such as were described in , will return any switches, or \u201choles\u201d. If there are no holes (Block ), then the matrix is returned as a maximal matrix at Block  and can be stored linearly as its projections. Otherwise, a few other considerations may be used. If more compression is not warranted (Block ), then the operations return a maximal matrix as its projections and the 4-switch areas as small matrices (Block ).","On the other hand, it is also possible to have relatively large 4-switches that can be broken down, resulting in two maximal matrices. The exact technique of splitting (Block ) may be arbitrary, but splitting the original non-maximal matrix in two may destroy at least the largest and potentially most troublesome switches. The 2 split matrices are passed back to Block , to determine if they are small, maximal, or require further splitting.","Embedding new trace inputs into the existing matrices (writing or memorizing) according to some embodiments of the present invention is illustrated in . In these embodiments, the object-oriented property of encapsulation is used. This can avoid bit-by-bit manipulation of all the associations and can, in some embodiments, allow the current representation to be the most efficient and canonical representation. Thus, the following description does not specify a detailed implementation of machine internals. Rather, it specifies the behavior of several objects, which may be implemented in a number of ways.","In , all matrices are of type ISummable (Block ). In this ISummable interface, the matrix representation can report its row and column sizes and its row and column projections at . Maximal and small matrices can implement this interface so that all of the other reading and writing machinery can be isolated from this difference.","Moreover, ISummables can be recursive. Any one ISummable can contain any number of other ISummables in lists or nests. Thus, the containing ISummable can collate the results sizes and projections of contained ISummables. For instance, any two maximal projections can be added together and treated as one ISummable.","From outside the ISummable \u201cbox\u201d , it does not matter whether it is composed of one projection, many projections, or may even by implemented as a small binary matrix, so long as the object can report its size (getNumRows and getNumCols) and projections (getRowSums and getColSums) at . As such, combinations of matrices can be arbitrarily composed and treated accordingly by their collective sizes and projections.","As seen in , a matrix compressor  which can be part of a writer  of , can call to any ISummable , regardless of its unknown internal structure, as indicated by a question mark (?) in the ISummable . Looking only at its virtual but complete structure, the compressor  can create maximal matrices  and new optimal compositions from the original composition.",{"@attributes":{"id":"p-0191","num":"0190"},"figref":["FIG. 36","FIG. 36","FIG. 36","FIG. 36"],"sup":"0 "},"A second observation is another new trace matrix, which in this example is a completely filled maximal triangular matrix.  dispenses with showing such full matrices, but shows how the projections can be treated as ISummables for adding a new trace to a given memory.","First, the matrix compressor  of  finds which elements are redundant between the memory and new trace. These bit elements become carries to another plane of the power series representation. Given read methods described above, any element can be determined using the projections. Any elements that are ON in both the memory and trace are placed in the carry of  and the projections of the memory and trace are lowered. In the case of , the entire trace becomes the carry, resulting in a memory with reduced projections.","Second, as shown in , because the projection weights have been changed, they may not be in sorted order. Thus, they are resorted.","Third, because the row projections, column projections, and full matrix are equivalent and derivable from each other, the compressor generates the column projections from the row projections in order to execute the createMatrix and its findHoles methods (). Karns and partial sums are computed (), but in this case, there are no holes, because the addition of the trace into this memory results in a memory that is still maximal. Therefore, the updated and resorted row projections continue to accurately represent the first memory in the power series. As shown in , this memory is stored as its row projections but the redundant column projections may be discarded.","Note that, in , the order of the input terms has been changed from its original order. In particular, B and C have been swapped. Although such detail has been removed from , embodiments of the present invention may account for such changes in order to map the outside terms to the inside coordinates. If not, embodiments of the invention may have to find the projection of each term each time by searching through the term list. Instead, embodiments of the invention may maintain a map of offsets (Block ) for each term. These offsets can serve as a map from outside terms to inside locations in the sorted projection order.","Finally, the carry is added to the next memory in the power series, but because there is none yet, the carry becomes the next memory in the power series, much like the original trace became the first memory in .",{"@attributes":{"id":"p-0198","num":"0197"},"figref":["FIG. 38","FIG. 33"]},"In summary, for direct composition of two matrices within an ISummable instance, the matrix compressor  can construct the optimal new ISummables  by analyzing their joint projections. The carry matrix as described in some embodiments of the present invention may be handled in the same way. The carry result can be read, for example by the above linear procedure, from one bit level and used in the composition of the next bit level, just like the original trace matrix in the first level.","For efficiency, the indices of each matrix may be local and relative to an offset in the larger matrix. These offsets ,  may be used to translate between the indices of application attribute-values and the local indices that can be used in all the embodiments described above. Such offsets may also represent the locations of switches (\u201choles\u201d) within an otherwise maximal matrix.","Although other techniques might provide some level of compression, other techniques may not be able to provide the level of compression of embodiments of the present invention without duplicating at least one of its embodiments. In particular, according to information theory, the binary encoding of a number is known to be its most efficient encoding. Separation of the weights into power series bit matrices, according to some embodiments of the present invention, can preserve this ideal encoding. Like the binary encoding of any number, the scaling effect of this separation generally is logarithmic to the largest number of any pairwise association (the largest number in any non-binary matrix). Such logarithmic scaling may not be superceded in any other single separation or convolution.","Moreover, once the weighted counts of an ordinary matrix are split into binary matrices (weightless graphs), it has been shown that 4-switches are the one and only problem to solve. Specifically, it is known that the 4-switch problem is the only problem in reconstructing a matrix from its {R,S} projections. Embodiments of the present invention can attack the problem by identifying, isolating, and splitting such switches. Thus, power series separation may be the best possible primary technique of decomposition and that following this approach, there may be one and only one solution to the unique problem of switches, as described herein.","In the drawings and specification, there have been disclosed embodiments of the invention and, although specific terms are employed, they are used in a generic and descriptive sense only and not for purposes of limitation, the scope of the invention being set forth in the following claims."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIGS. 1A and 1B"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIGS. 3A and 3B"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIGS. 4A and 4B"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIGS. 10 and 11"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIGS. 13 and 14"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 15"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":["FIG. 16","FIG. 15"]},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIGS. 17A\u201317C","b":"18"},{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 19"},{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIGS. 20 and 21"},{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 22"},{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 23"},{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 24"},{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIG. 25"},{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIG. 26"},{"@attributes":{"id":"p-0038","num":"0037"},"figref":"FIG. 27"},{"@attributes":{"id":"p-0039","num":"0038"},"figref":"FIG. 28"},{"@attributes":{"id":"p-0040","num":"0039"},"figref":"FIG. 29"},{"@attributes":{"id":"p-0041","num":"0040"},"figref":"FIG. 30"},{"@attributes":{"id":"p-0042","num":"0041"},"figref":"FIG. 31"},{"@attributes":{"id":"p-0043","num":"0042"},"figref":"FIG. 32"},{"@attributes":{"id":"p-0044","num":"0043"},"figref":"FIG. 33"},{"@attributes":{"id":"p-0045","num":"0044"},"figref":"FIG. 34"},{"@attributes":{"id":"p-0046","num":"0045"},"figref":"FIG. 35"},{"@attributes":{"id":"p-0047","num":"0046"},"figref":"FIG. 36"},{"@attributes":{"id":"p-0048","num":"0047"},"figref":"FIG. 37"},{"@attributes":{"id":"p-0049","num":"0048"},"figref":"FIG. 38"}]},"DETDESC":[{},{}]}
