---
title: Service platform for in-context results
abstract: Various embodiments provide a service platform that integrates services, such as web services and/or local services, across a variety of applications. In at least some embodiments, services can be integrated with legacy applications that are “unaware” of such services, as well as applications that are aware of such services.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08146110&OS=08146110&RS=08146110
owner: Microsoft Corporation
number: 08146110
owner_city: Redmond
owner_country: US
publication_date: 20071210
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DETAILED DESCRIPTION","Implementation Example","CONCLUSION"],"p":["To date, integrating services such as web services and local services with client applications has been a challenging task. Challenges are posed not only from the standpoint of easing integration with client applications, but also exposing services in a graceful, consistent way. These challenges have resulted in complex coding scenarios as well as inconsistent user experiences which, in turn, can lead to dissatisfaction on the part of users.","This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter, nor is it intended to be used to limit the scope of the claimed subject matter.","Various embodiments provide a service platform that integrates services, such as web services and\/or local services, across a variety of applications. In at least some embodiments, services can be integrated with legacy applications that are \u201cunaware\u201d of such services, as well as applications that are aware of such services.","In at least some embodiments, the platform comprises a multi-layered structure designed to integrate services across a variety of applications. The multi-layered structure includes, in at least some embodiments, a global integration layer that is designed to integrate services with legacy applications, as well as a common control integration layer and a custom integration layer. The common control integration layer can be used to provide a common control that can be used across applications to integrate not only services of which the applications are aware, but services of which the applications are not aware. The custom integration layer can be used by various applications to customize user interfaces that are designed to integrate various offered services.","Overview","Various embodiments provide a service platform that integrates services, such as web services and\/or local services, across a variety of applications. In at least some embodiments, services can be integrated with legacy applications that are \u201cunaware\u201d of such services, as well as applications that are aware of such services. Services can include, by way of example and not limitation, any of a variety of services such as search services, definition services, investigation services, mapping services, news services, image services, translation services and the like. In one or more embodiments, the service platform is extensible to provide for integration of new or changed services in a seamless manner across a variety of applications.","In at least some embodiments, the platform comprises a multi-layered structure designed to integrate services across a variety of applications. The multi-layered structure includes, in at least some embodiments, a global integration layer that is designed to integrate services with legacy applications, as well as a common control integration layer and a custom integration layer. The common control integration layer can be used to provide a common control that can be used across applications to integrate not only services of which the applications are aware, but services of which the applications are not aware. The custom integration layer can be used by various applications to customize user interfaces that are designed to integrate various offered services.","In the discussion that follows, a section entitled \u201cOperating Environment\u201d is provided and describes one environment in which one or more embodiments can be employed. Following this, a section entitled \u201cExample Multi-layered Service Platform\u201d is provided and describes a multi-layered platform in accordance with one or more embodiments. Next, a section entitled \u201cImplementation Example\u201d describes an example implementation of a multi-layered service platform. Next, a section entitled \u201cDeclarative Model\u201d is provided and describes an example declarative model that can be used to enable service providers to describe services that are offered. Following this, sections entitled \u201cGlobal Integration Layer\u2014User Interface Example\u201d, \u201cCommon Control Integration Layer\u2014User Interface Example\u201d, and \u201cCustom Integration Layer\u2014User Interface Example\u201d each respectively provide examples of user interfaces in accordance with one or more embodiments. Next, a section entitled \u201cExample Methods\u201d describes example methods in accordance with one or more embodiments. A section entitled \u201cExample APIs\u201d gives a description of a set of APIs in accordance with one or more embodiments. Finally, a section entitled \u201cExample System\u201d describes an example system that can be utilized to implemented one or more embodiments.","Operating Environment",{"@attributes":{"id":"p-0032","num":"0031"},"figref":["FIG. 1","FIG. 19"],"b":["100","100","102","104","106","108","108"]},"In addition, computing device  includes a service platform . The service platform is designed to integrate services, such as web services and\/or local services, across a variety of applications such as those mentioned above and others. In at least some embodiments, services can be integrated with legacy applications that are \u201cunaware\u201d of such services, as well as applications that are aware of such services as will become apparent below. As indicated in the figure, the service platform resides in the form of computer-readable instructions or code that resides on computer-readable media .","In addition, environment  includes a network , such as the Internet, and one or more web sites  from and to which content can be received and sent. Websites  can offer a variety of services that can be integrated by service platform , as will become apparent below.","Computing device  can be embodied as any suitable computing device such as, by way of example and not limitation, a desktop computer, a portable computer, a handheld computer such as a personal digital assistant (PDA), cell phone, and the like.","Example Multi-Layered Service Platform",{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIG. 2","b":["200","200","202","204","206","208","210","200","202","210","212","214","216"]},"In the illustrated and described embodiment, the global integration layer  is designed to enable applications that are not \u201cservice aware\u201d to nonetheless allow a user to access and use such services from within the applications. To this end, in at least some embodiments, the global integration layer provides a generic user interface that displays one or more services that are available and which can be invoked from within an application. In this embodiment, functionality of the global integration layer is supported by an operating system operating on a local client device. When a user wishes to ascertain which services are available from within an application that is not service aware, the user can take a particular action, such as using a shortcut on the operating system desktop (e.g. keying a hot key combination) which is detected by the operating system. Responsive to detecting the user action, the operating system can make an API call to a local service store to receive a listing of services that are available. The operating system can then present a generic user interface that lists the available services for the user.","In one or more embodiments, once the generic user interface has been presented to the user, the user can take a number of different actions. For example, in some embodiments, the user can hover their cursor over a particular service description or icon and receive a preview of that service. Alternately or additionally, a user can click on a particular service description or icon and then be navigated to that service's functionality. Navigation to a particular service's functionality can include a local navigation or a web-based navigation. In one or more embodiments, navigation can include sending data, such as that selected by a user, to the service for operation by the service.","Thus, in this embodiment, the generic user interface which is provided by the operating system is knowledgeable of the particular API calls that are used to present available services and to enable users to select one or more of the services. In this manner, applications that are not \u201cservice aware\u201d can still be used as a starting point for a user to access services.","In the illustrated and described embodiment, the common control integration layer  provides a control that can be hosted by one or more applications. The control can allow applications to populate those services that the applications natively support, as well as to provide a means by which services which are not natively supported by the applications can nonetheless be offered to a user. When a user wishes to ascertain which services are available from within an application, the user can take a particular action such as making a particular selection, such as a text selection or file selection. Responsive to detecting the user action, the hosted control can make an API call to a local service store to receive a listing of services that are available. The control can then present a user interface that lists the available services for the user. These services can include services that are offered by the application natively, as well as services that are offered by other service providers either locally or remotely.","In one or more embodiments, once the user interface has been presented to the user, the user can take a number of different actions. For example, in some embodiments, the user can hover their cursor over a particular service description or icon and receive a preview of that service. Alternately or additionally, a user can click on a particular service description or icon and then be navigated to that service's functionality. Navigation to a particular service's functionality can include a local navigation or a web-based navigation.","Thus, in this embodiment, the control is knowledgeable of the particular API calls that are used to present available services and to enable users to select one or more of the services. In this manner, applications can use the control to both offer services natively and provide services offered by other service providers. In addition, as the control can be hosted by many different applications, a common user experience can be provided across a variety of applications.","In one or more embodiments, the custom integration layer  provides a set of APIs that can be used by applications that are aware of the APIs to receive a list of offered services and then create their own user interface and user experience through which a user can consume the offered services.","Having described the general notion of a multi-layered service platform, consider now an implementation example that describes one specific instance of a multi-layered service platform. It is to be appreciated and understood that the following description provides but one example, and is not to be used to limit application of the claimed subject matter to a specific implementation. Accordingly, other implementations can be utilized without departing from the spirit and scope of the claimed subject matter.",{"@attributes":{"id":"p-0046","num":"0045"},"figref":"FIG. 3","b":["300","300","302","304","306","308","310"]},"In this particular example, a global integration layer includes a system service menu  and a service management component , and a common control integration layer includes a common context menu . Further, in one or more embodiments, a custom integration layer includes a data recognizer component , an application program interface or API , a service store , a preview component , and an execute component .","In one or more embodiments, the system service menu  of the global integration layer can be invoked by a user while using one or more applications and with context provided by the application(s). In practice, applications that are not \u201cservice aware\u201d can be used to invoke the system service menu. In one or more embodiments, the system service menu is supported by the client device's operating system and can be invoked in any suitable way. For example, in at least some embodiments, a user can access the system service menu by keying in a particular hot key combination. Once detected by the operating system, the hot key combination results in an API call to application program interface  to receive a list of available services. The available services can be services that are offered locally and\/or services that are offered by remote service providers. System service menu  then presents a user interface that lists the available services that can be accessed by the user. In one or more embodiments, the user interface presented by the system service menu  is generic across a variety of applications, thus offering an integrated, unified user experience.","Once the services are listed for the user via the user interface presented by the system service menu , the user may choose a particular service. In one or more embodiments, a user can receive a preview of a service, via a preview component  by taking some action with respect to a displayed service. For example, a user may hover their cursor over or near a particular description or icon associated with the service and receive the preview of that service. In one or more embodiments, previews can be provided for the user without the user having to leave the context of their application. When the user hovers their cursor in this manner, the operating system can make an API call to the preview component  to receive information or data that is to be presented as part of the preview. Alternately or additionally, by clicking on a particular service description or icon, a user can cause the service to execute. When this happens, the operating system can make an API call to the execute component  which, in turn, can cause the service to execute. Execution of the service can include, by way of example and not limitation, a navigation activity which can be either or both of a local navigation or a remote navigation. Examples of how this can be done are provided below.","In one or more embodiments, service management component  provides various management functionalities associated with services. For example, in one or more embodiments, the service management component  can provide functionality that enables a user to add, delete, and\/or update the particular service. Further, in one or more embodiments, the service management component can enable a user to set a particular service as a default service for easy access.","In one or more embodiments, the common context menu  of the common control integration layer provides a common context menu across a variety of applications. In one or more embodiments, the common context menu is a control that can be hosted by a variety of applications. In at least some embodiments, these applications do not have to natively understand how a service or associated activity works. Yet, by hosting the control, the application can still offer the service as part of the application experience. When an application hosts the common context menu, the application can populate the menu with services it offers, as well as other services that are offered by other service providers. As such, an application can offer both native services as well as non-native services. In one or more embodiments, the common context menu is knowledgeable of the application program interface  and can make appropriate API calls to receive information on services that are offered and described in service store . Specifically, in one or more embodiments, the common context menu is aware of the particular service API.","In one or more embodiments, data recognizer  is configured to recognize data associated with particular API calls in which service listings are requested. Accordingly, the data recognizer  can then ensure that a proper set of services are returned to the caller. For example, if a user selects a particular portion of text, such as an address, then a particular subset of services may be inappropriate to return. In this case, the data recognizer  can see to it that a correct listing of services is returned.","In one or more embodiments, application program interface  provides a set of APIs that can be used to add, delete, or otherwise manage services that can be presented to the user. The APIs can include those that are used to receive a listing of services. But one example of the set of APIs is provided below in a section entitled \u201cExample APIs\u201d.","In one or more embodiments, service store  is utilized to maintain information and\/or data associated with different services that can be offered. Services can be flexibly added and deleted from the service store. This can be done in any suitable way. In one or more embodiments, this can be done through the use of a declarative model that service providers use to describe the services that they offer. One example of a declarative model is provided just below in a section entitled \u201cDeclarative Model\u201d. When a call is received by the application program interface , information associated with the call can be retrieved from the service store  and presented accordingly.","In one or more embodiments, the preview component  can be utilized to provide a preview of one or more offered services. An example of how this can be done is provided below.","In one or more embodiments, the execute component  can be utilized to execute one or more of the services that are offered. An example of how this can be done is provided below.","Declarative Model","In one or more embodiments, service providers can utilize a declarative model to describe services that are offered. In at least some embodiments, the declarative model utilizes an XML description to describe aspects of offered services. As an example, consider . There, an example XML excerpt is shown and describes aspects and other parameters associated with an offered service. By using a declarative model, a service can define how it uses data in a declarative manner.","Specifically, the XML description pertains to a mapping service. The XML description provides a homepage URL which is the homepage associated with the offered service. In addition, a <display> tag enables a service provider to provide a name that is then used in a preview display as shown. An <activity> tag contains information associated with the offered service. Specifically, in this example, the <activity> tag describes a category of service which, in this example, is a \u201cmap\u201d service. An <activityAction> tag then describes context that can trigger the service, as well as behaviors that can be performed responsive to a triggering context.","Specifically, in this example, when a user makes a particular selection (i.e. context=\u201cselection\u201d), a preview action can be performed. In this case, the user's selection is provided as a value parameter which is then sent to the URL listed in the <preview> tag. The recipient of the value parameter can then return content associated with a preview of the user's selection, such as the illustrated preview map. Likewise, if a user clicks on or otherwise selects the preview, their selection is provided to the URL listed in the <execute> tag and the user can be navigated to that URL to be exposed to further functionality provided by the service provider. In this example, if a user clicks on the preview map, they are navigated to the listed URL and one or more of the included parameters are used to provide driving directions to a particular address.","By using a declarative model as described above, services can be easily extended and\/or modified by service providers. Specifically, service providers can continually modify and change their provided services and can simply update their declarative model for incorporation in the service platform. In addition, this makes it easier for the system hosting these services to be more secure and provide a consistent experience.","Having now considered a system that implements a multi-layered service platform as well as an example declarative model, consider now a discussion of example user interfaces that can be employed in connection with the global integration layer, the common control integration layer, and the custom integration layer, each of which appears under its own heading.","Global Integration Layer\u2014User Interface Example",{"@attributes":{"id":"p-0064","num":"0063"},"figref":"FIG. 4","b":["400","402"]},"Referring to , the user has selected the text \u201cBlogging\u201d with their cursor, indicated by the dashed box at . Responsive to this user action, the operating system has made an API call to application program interface  () and responsively, presents a system service menu  which lists a number of available services. As shown, the services include by way of example and not limitation, a search service, a define service, an investigate service, a map service, a news service, an images service, and a translate service. In the illustrated and described embodiment, none of the listed services are natively supported by the reader application .","Referring to , the user has hovered their cursor over or near the define service listing. Responsively, a preview  is presented for the user. In this particular example, the preview briefly defines the term that has been selected by the user. In this example, presentation of preview  is a result of an API call made by the operating system to the application program interface  () in cooperation with preview component . In this particular example, the presented preview causes a navigation to a remote service provider which, in turn, provides the information displayed in the preview.","At this point, the user may or may not choose to execute the service. If the user chooses to execute the service by, for example, clicking on the preview , a full navigation to a definition site can take place. For example,  illustrates a user interface  that is provided as a result of the navigation to a definition site. In this example, a full definition of the term selected by the user can be provided as well as other information provided by the definition site.","In this manner, an application that does not natively support a particular service can, nonetheless, through the support of the operating system, provide access to a number of services.","As another example, consider . There, the reader application  and document  are shown. In this example, the user has selected, with their cursor, an address indicated by the dashed box at .","Referring to , a preview in the form of a map user interface  has been presented to the user. By clicking on the preview, the user can be navigated to a map site that can, for example, provide the user with an option to receive driving directions to the particular address, as well as other functionality that is commonly provided at map sites.","Again, in this instance, a reader application that does not natively support a mapping service can nonetheless, through the support of the operating system, provide access to a mapping service.","Common Control Integration Layer\u2014User Interface Example","In one or more embodiments, the common control integration layer can provide a common control that can be used by applications to expose services that can be accessed by an application. In one or more embodiments, the common control takes the form of a system service menu such as that provided by system service menu  (). As an example, consider  which illustrates a user interface provided by an email application generally at . In this example, the user has selected an address indicated at .","Responsive to the user's selection, a common control can be presented which can display for the user not only services offered by the application, but services that are offered by other service providers. As an example, consider  which illustrates a common control  that lists services offered by the application as well as services that are provided by other service providers. Specifically, in this example, services offered by the application include \u201cCopy\u201d services and \u201cSelect All\u201d services. In addition, other services that are not natively offered by the application can be displayed as well. Specifically, in this example, such services include a \u201cMap on Windows Live\u201d service, a \u201cSend to Gmail\u201d service, and a \u201cTranslate with BabelFish\u201d service. In this example, the services that are presented within common control  are the result of an API call that has been made by the control.","Referring to , a user has hovered their cursor over or near the mapping service and, responsively, has been presented with a map preview  which provides a preview of the service. Now, by clicking on the preview , the user can be navigated to an associated mapping site that provides other mapping functionality as described above.","In this manner, a common control can be used across a variety of applications to enable services to be presented to a user that are natively supported by the application as well as those that are not natively supported by the application. Use of a common control across different applications provides a unified, integrated user experience.","Custom Integration Layer\u2014User Interface Example","In one or more embodiments, the custom integration layer provides a set of APIs that can be used by applications that are aware of the APIs to receive a list of offered services and then create their own user interface and user experience through which a user can consume the offered services. As an example, consider  which shows an application in the form of an instant messaging application having a user interface . In this example, a user has entered into a dialogue with another person. The dialogue concerns where the participants would like to get dinner. One of the participants has mentioned a particular caf\u00e9.","Referring to , the user has selected the text \u201ccaf\u00e9 presse\u201d as indicated by the dashed box . Responsive to detecting this text selection, the instant messaging application which, in this example, is aware of the platform's APIs, has made an API call to receive back a list of offered services. In this example, a mapping service is provided and is associated with the icon shown at . By hovering their cursor on or near icon , a user can receive a preview of the service as described above. As an example, consider . There, a preview in the form of a map user interface  is provided for the user. By clicking on the preview, the user can be navigated to further functionality associated with the map preview. For example, the user can be navigated to a map site that might, for example, provide driving directions associated with the user's particular selection.","Example Methods",{"@attributes":{"id":"p-0081","num":"0080"},"figref":"FIG. 16"},"Step  detects, with an operating system, a user action. In the examples above, a user is working within an application such as a legacy application that does not necessarily support services that are desired to be offered. Here, a user action can be one that indicates that the user wishes to learn about and possibly consume one or more services that are not offered by the application. Accordingly, through the user's action, which can constitute any type of action such as a hot key combination, the user can indicate that they wish to learn about offered services. The user action is detected by the operating system and, responsively, step  retrieves a list of services that are not natively supported by the application. The list of services can be retrieved in any suitable way. In the examples above, the list is retrieved through an operating system call to a platform-supported API. Step  displays the list of services for the user. This step can be performed in any way using any suitable user interface. Step  provides a preview of one or more services. This step can be performed in any suitable way. In the examples above, previews are provided responsive to the user taking some action such as hovering their cursor over or near an icon associated with the service or a description of the service. Step  provides access to service functionality which can include, in this example, navigating the user to a remote website where the service functionality is offered. Alternately or additionally, service functionality can be provided locally.",{"@attributes":{"id":"p-0083","num":"0082"},"figref":"FIG. 17"},"Step  provides a control that can be hosted by multiple applications. Examples of such a control are provided above. Step  populates the control with services offered by an application. Here, the services that are offered by the application are those that are natively offered by the application. Step  populates the control with services that are not natively offered by the application. This step can be performed in any suitable way. For example, an API call can be made by the control to an API to retrieve a list of services that are not natively offered by the application. Step  displays a list of populated services for the user. Examples of how this can be done are provided above. Step  provides a preview of one or more services and step  provides access to service functionality associated with one or more of the services. Examples of how this can be done are provided above.",{"@attributes":{"id":"p-0085","num":"0084"},"figref":"FIG. 18"},"Step  maintains a service store that describes various services. Examples of various services are provided above. Step  provides an application program interface that can be called to discover services. In one or more embodiments, the application program interface can be called by different entities or different types of entities. For example, in some embodiments, a caller might constitute an operating system. An example of this is provided in the global integration layer described above. Alternately or additionally, a caller might constitute a control, such as a common control that can be hosted across different types of applications. An example of this is provided in the common control integration layer described above. Alternately or additionally, a caller might constitute an application that is aware of the application program interface. Collectively, these different types of callers can provide for a robust service platform implementation which supports service offerings across a variety of applications including those that are not aware of services that are offered as well as those applications that are aware of services that can be offered.","Step  receives a call to discover one or more services. As noted above, this call can come from different entities or types of entities. Step  retrieves information associated with one or more services. This step can be performed by accessing a service store, such as the one that is described above. Step  provides information to the caller for display for a user. Specifically, in this example, the retrieved information associated with the services can be provided to the caller so that it can be displayed or otherwise exposed for the user.","Step  displays a list of services for the user. Examples of how this can be done are provided above. Step  provides a preview of one or more services and step  provides access to service functionality. Examples of how this can be done are provided above.","Having described a number of methods that can be implemented in one or more embodiments, consider now an example set of APIs that can be provided by the service platform. It is to be appreciated and understood that the example provided just below is intended to serve as an example only. Accordingly, the example is not meant to limit application of the claim subject matter to the specific APIs shown and described.","Example APIs","In accordance with one or more embodiments, the following set of APIs can be included and exposed by the service platform and\/or used by third party providers as indicated. It is to be appreciated and understood that the following set of APIs constitutes an example only. As such, other APIs can be utilized without departing from the spirit and scope of the claimed subject matter.",{"@attributes":{"id":"p-0092","num":"0091"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\/\/ Represents the different types of data on which an activity may execute."},{"entry":"enum ActivityContentType {"},{"entry":"\u2003Selection,"},{"entry":"\u2003Link,"},{"entry":"\u2003Document };"},{"entry":"\/\/ There is one activity manager available to the system that manages a list of activities."},{"entry":"IActivityManager"},{"entry":"\/\/ Get a list of the activities that may execute for a particular activity content type by"},{"entry":"group."},{"entry":"- HRESULT GetActivityGroupEnumerator(ActivityContentType type,"},{"entry":"IActivityGroupEnumerator**);"},{"entry":"\/\/ Set the provided activity as the default of its group"},{"entry":"- HRESULT SetActivityGroupDefault(IActivity *pActivity);"},{"entry":"\/\/ Enable or disable an activity."},{"entry":"- HRESULT SetActivityEnabled(IActivity *pActivity, bool fEnabled);"},{"entry":"\/\/ Remove an activity from the activity manager."},{"entry":"- HRESULT UninstallActivity(IActivity *pActivity);"},{"entry":"\/\/ Install a declarative activity from an OpenService XML description of that activity that"},{"entry":"may be found at the provided URI."},{"entry":"- HRESULT InstallXMLActivity(LPCWSTR pwzActivityXMLURI);"},{"entry":"\/\/ Install an activity that is based on the provided COM class which implements the"},{"entry":"ICOMActivity interface. Those properties that are not defined by the COM class are"},{"entry":"provided upon installation (activity's display name, group name, etc)."},{"entry":"- HRESULT InstallCOMActivity(REFIID riidCOMClass, LPCWSTR pwzDisplayName,"},{"entry":"LPCWSTR pwzHandlerName, LPCWSTR pwzGroupName, LPCWSTR pwzIconPath);"},{"entry":"\/\/ Represents a list of activity groups."},{"entry":"IActivityGroupEnumerator"},{"entry":"\/\/ Provides activity groups in sequence. After the final activity group NULL is returned."},{"entry":"- HRESULT Next(IActivityGroup**);"},{"entry":"\/\/ Represents an activity group."},{"entry":"IActivityGroup"},{"entry":"\/\/ Get the activity content type on which the activities of this group may execute."},{"entry":"- HRESULT GetType(ActivityContentType type*);"},{"entry":"\/\/ Get the name of this activity group."},{"entry":"- HRESULT GetName(BSTR**);"},{"entry":"\/\/ Get the default activity of this activity group. This may be NULL if there is no default."},{"entry":"- HRESULT GetDefaultActivity(IActivity**);"},{"entry":"\/\/ Get the list of activities of this activity group."},{"entry":"- HRESULT GetActivityEnumerator(IACtivityEnumerator**);"},{"entry":"\/\/ Represents a list of activities"},{"entry":"IActivityEnumerator"},{"entry":"\/\/ Provides activities in sequence. After the final activity NULL is returned."},{"entry":"- HRESULT Next(IActivity**);"},{"entry":"\/\/ Represents a single activity"},{"entry":"IActivity"},{"entry":"\/\/ The activity returns true if and only if it may execute input of the specified activity"},{"entry":"content type."},{"entry":"- HRESULT CanExecuteType(ActivityContentType type, BOOL*)"},{"entry":"\/\/ The activity returns true if and only if it may preview input of the specified activity"},{"entry":"content type."},{"entry":"- HRESULT CanPreviewType(ActivityContentType type, BOOL*)"},{"entry":"\/\/ The activity returns true if and only if it can execute the specified input"},{"entry":"- HRESULT CanExecute(IActivityInput *pInput, BOOL*);"},{"entry":"\/\/ The activity returns true if and only if it can preview the specified input"},{"entry":"- HRESULT CanPreview(IActivityInput *pInput, BOOL*);"},{"entry":"\/\/ The activity will execute the specified input in the provided output context."},{"entry":"- HRESULT Execute(IActivityInput *pInput, IActivityOutputContext *pOutput);"},{"entry":"\/\/ The activity will execute the specified input in the provided output context."},{"entry":"- HRESULT Preview(IActivityInput *pInput, IActivityOutputContext *pOutput);"},{"entry":"\/\/ Returns a brief message about what would happen for the execution of the provided"},{"entry":"input. For example, the URI to which the activity will navigate upon execution."},{"entry":"- HRESULT GetStatusText(IActivityInput *pInput, BSTR*);"},{"entry":"\/\/ Returns the display name of the activity, for example, \u2018Map with Windows Live\u2019."},{"entry":"- HRESULT GetDisplayName(BSTR*);"},{"entry":"\/\/ Returns the handler name of the activity, for example \u2018Windows Live\u2019."},{"entry":"- HRESULT GetHandlerName(BSTR*);"},{"entry":"\/\/ Returns the group name of the activity, for example \u2018Map\u2019."},{"entry":"- HRESULT GetGroupName(BSTR*);"},{"entry":"\/\/ Returns the Windows file path to the icon."},{"entry":"- HRESULT GetIconPath(BSTR*);"},{"entry":"\/\/ Returns true if this activity is the default for its group."},{"entry":"- HRESULT IsDefault(BOOL*);"},{"entry":"\/\/ Returns a string that uniquely identifies this activity in this activity manager."},{"entry":"- HRESULT GetID(BSTR*);"},{"entry":"\/\/ This interface is implemented by third party activity implementors. It is a subset of the"},{"entry":"methods found in the IActivity interface."},{"entry":"ICOMActivity - Implemented by third party Activity implementer"},{"entry":"\u2003\u2003HRESULT CanExecuteType\/CanPreviewType(ActivityContentType type, BOOL*)"},{"entry":"\u2003\u2003HRESULT CanExecute\/CanPreview(IActivityInput *pInput, BOOL*)"},{"entry":"\u2003\u2003HRESULT Execute\/Preview(IActivityInput *pInput, IActivityOutput *pOutput)"},{"entry":"\u2003\u2003HRESULT GetStatusText(BSTR*)"},{"entry":"\/\/ Represents the input text selection, link, or document on which an activity will execute"},{"entry":"or preview."},{"entry":"IActivityInput"},{"entry":"\/\/ Get the value of a named variable. Variables are specific to the input type and are"},{"entry":"described by the OpenService specification. The type may be \u2018text\u2019 or \u2018html\u2019 and define"},{"entry":"the format in which the variable's value is returned."},{"entry":"\u2003\u2003HRESULT GetVariable(LPCWSTR pwzVariableName, LPCWSTR"},{"entry":"\u2003\u2003\u2003pwzOutputType, BSTR*)"},{"entry":"\/\/ Returns true if the specified named variable defined."},{"entry":"\u2003\u2003HRESULT HasVariable(LPCWSTR pwzVariableName, LPCWSTR"},{"entry":"pwzOutputType, BOOL*)"},{"entry":"\/\/ Returns the activity content type of this input."},{"entry":"\u2003\u2003HRESULT GetType(ActivityContentType*)"},{"entry":"\/\/ Represents a browser in which an activity may execute or preview"},{"entry":"IActivityOutputContext"},{"entry":"\/\/ Navigate to the specified URI optionally with the specified HTTP headers and post data"},{"entry":"\u2003\u2003HRESULT Navigate(BSTR uri, BSTR headers, VARIANT* pvarPostData)"},{"entry":"\/\/ Set a string of HTML for the browser to render. A caller may only either navigate or"},{"entry":"set HTML."},{"entry":"\u2003HRESULT SetHTMLContent(BSTR html)"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"Having described an example set of APIs, consider now an example system that can be utilized to implement one or more of the above-described embodiments.","Example System",{"@attributes":{"id":"p-0095","num":"0094"},"figref":["FIG. 19","FIG. 1"],"b":["1900","1900","102"]},"Computing device  includes one or more processors or processing units , one or more memory and\/or storage components , one or more input\/output (I\/O) devices , and a bus  that allows the various components and devices to communicate with one another. Bus  represents one or more of any of several types of bus structures, including a memory bus or memory controller, a peripheral bus, an accelerated graphics port, and a processor or local bus using any of a variety of bus architectures. Bus  can include wired and\/or wireless buses.","Memory\/storage component  represents one or more computer storage media. Component  can include volatile media (such as random access memory (RAM)) and\/or nonvolatile media (such as read only memory (ROM), Flash memory, optical disks, magnetic disks, and so forth). Component  can include fixed media (e.g., RAM, ROM, a fixed hard drive, etc.) as well as removable media (e.g., a Flash memory drive, a removable hard drive, an optical disk, and so forth).","One or more input\/output devices  allow a user to enter commands and information to computing device , and also allow information to be presented to the user and\/or other components or devices. Examples of input devices include a keyboard, a cursor control device (e.g., a mouse), a microphone, a scanner, and so forth. Examples of output devices include a display device (e.g., a monitor or projector), speakers, a printer, a network card, and so forth.","Various techniques may be described herein in the general context of software or program modules. Generally, software includes routines, programs, objects, components, data structures, and so forth that perform particular tasks or implement particular abstract data types. An implementation of these modules and techniques may be stored on or transmitted across some form of computer readable media. Computer readable media can be any available medium or media that can be accessed by a computing device. By way of example, and not limitation, computer readable media may comprise \u201ccomputer storage media\u201d.","\u201cComputer storage media\u201d include volatile and non-volatile, removable and non-removable media implemented in any method or technology for storage of information such as computer readable instructions, data structures, program modules, or other data. Computer storage media include, but are not limited to, RAM, ROM, EEPROM, flash memory or other memory technology, CD-ROM, digital versatile disks (DVD) or other optical storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other medium which can be used to store the desired information and which can be accessed by a computer.","Various embodiments provide a service platform that integrates services, such as web services and\/or local services, across a variety of applications. In at least some embodiments, services can be integrated with legacy applications that are \u201cunaware\u201d of such services, as well as applications that are aware of such services.","In at least some embodiments, the platform comprises a multi-layered structure is designed to integrate services across a variety of applications. The multi-layered structure includes, in at least some embodiments, a global integration layer that is designed to integrate services with legacy applications, as well as a common control integration layer and a custom integration layer. The common control integration layer can be used to provide a common control that can be used across applications to integrate not only services of which at the applications are aware, but services of which the applications are not aware. The custom integration layer can be used by various applications to customize user interfaces that are designed to integrate various offered services. In addition, users can have access to their services from many different types of applications regardless of how the applications choose to surface them.","Although the subject matter has been described in language specific to structural features and\/or methodological acts, it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather, the specific features and acts described above are disclosed as example forms of implementing the claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The same numbers are used throughout the drawings to reference like features.",{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 3","i":"a "},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 13"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 14"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 15"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 16"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 17"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 18"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 19"}]},"DETDESC":[{},{}]}
