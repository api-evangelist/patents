---
title: Hierarchical scale unit values for storing instances of data among nodes of a distributed store
abstract: Techniques are described herein for storing instances of data among nodes of a distributed store based on hierarchical scale unit values. Hierarchical scale unit values are assigned to the respective nodes of the distributed store. A first instance (e.g., a primary instance) of a data module is stored in a first node having a first hierarchical scale unit value. A primary instance of the data module with respect to a data operation is an instance of the data module at which the data operation with respect to the data module is initiated or initially directed. A second instance (e.g., a primary or secondary instance) of the data module is stored in a second node having a second hierarchical scale unit value based on a magnitude of a difference between the first hierarchical scale unit value and the second hierarchical scale unit value. A secondary instance is essentially a “back-up” instance.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09325802&OS=09325802&RS=09325802
owner: Microsoft Technology Licensing, LLC
number: 09325802
owner_city: Redmond
owner_country: US
publication_date: 20090716
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DETAILED DESCRIPTION","I. INTRODUCTION","II. EXAMPLE IMPLEMENTATION OF A DISTRIBUTED CACHE","III. EXAMPLE EMBODIMENTS FOR STORING INSTANCES OF DATA AMONG NODES OF A DISTRIBUTED STORE BASED ON HIERARCHICAL SCALE UNIT VALUES","IV. CONCLUSION"],"p":["A distributed store is a storage system in which data is stored on multiple machines (e.g., computers or other processing systems). The multiple machines may include multiple respective nodes among which multiple instances of data may be stored to provide \u201chigh availability\u201d of the data. For example, a distributed store may be a distributed cache, a distributed database (e.g., a distributed SQL database), or other suitable type of distributed storage system.","Data operations with respect to data in a distributed store are usually initiated at or initially directed to one instance of the data, which is referred to as the primary instance of the data. Examples of data operations include but are not limited to a read operation, a write operation, an eviction operation, a notification operation, etc. For example, an instance of data to which a read (or write) operation is initially directed with respect to the data is the primary instance of the data with respect to that read (or write) operation. In another example, an instance of data at which an eviction (or notification) operation is initiated with respect to the data is the primary instance of the data with respect to that eviction (or notification) operation. Instances of data with respect to a data operation that are not primary instances with respect to the data operation are referred to as secondary instances with respect to the data operation. Placement of the various instances of data among the nodes of the distributed store can sometimes result in the primary instance of the data and one or more of the secondary instances of the data being included in the same \u201cscale unit\u201d (a.k.a. unit of failure).","A scale unit is an entity in an information technology (IT) infrastructure with respect to which data failures may be determined, upgrades may be performed, latency issues may be addressed, etc. A data failure may be a loss of an instance of data, an inability to access an instance of data, etc. For example, a scale unit traditionally is defined at a machine, pod, or rack boundary by an administrator who manages the infrastructure. A pod is a physical structure on which machines may be stored. A rack is a grouping of pods within a data center, for example. Accordingly, nodes that are included in the same scale unit traditionally are assigned a common scale unit value. Scale units may be defined (and respective values may be assigned) using a configuration file, an automated process, or other suitable technique. Conventional techniques for assigning scale unit values are relatively inflexible, and conventional data storing techniques may provide relatively little protection against loss of access to data even when multiple instances of the data are included in the distributed store. For example, if all instances of the data are included in a single entity within the IT infrastructure, a data failure with respect to that entity may result in loss of access to the data.","Various approaches are described herein for, among other things, storing instances of data among nodes of a distributed store based on hierarchical scale unit values. The nodes of the distributed store are hosted by machines (e.g., computers or other processing systems). Each node includes data module(s) of the distributed store. A data module is a respective portion (e.g., partition(s) or other suitable portion) of the distributed store or a replica of the distributed store. It should be noted that any portion of the distributed store may be replicated across multiple nodes. For example, a first instance of a portion may be included in a first node, a second instance of the portion may be included in a second node, and so on. Moreover, a node may include multiple instances of the same portion of the distributed store. A \u201creplica of the distributed store\u201d, however, refers to an instance of all data stored in the distributed store. The distributed store may be implemented in a networked environment or in absence of a network. For instance, the distributed store may be implemented in a cloud of a cloud computing environment.","A hierarchical scale unit is an entity (e.g., a node, a virtual machine, a machine, etc.) in a hierarchical information technology (IT) infrastructure that stores a distributed store. The hierarchical IT infrastructure includes a plurality of levels and may have any suitable configuration. In one example configuration, nodes of the distributed store are hosted on respective virtual machines, which are executed on respective machines. The nodes of the distributed store may correspond to a first level of the hierarchical IT infrastructure, the virtual machines may correspond to a second level of the infrastructure, and the machines may correspond to a third level of the infrastructure. The machines can be located on respective pods, which may correspond to a fourth level of the infrastructure. The pods can be grouped into respective racks, which may correspond to a fifth level of the infrastructure. The racks can be grouped into respective data centers, which may correspond to a sixth level of the infrastructure, and so on. The example hierarchical IT infrastructure levels described herein are provided for illustrative purposes and are not intended to be limiting. For instance, the hierarchical IT infrastructure may not include one or more of the example levels discussed herein. Moreover, the hierarchical IT infrastructure may include level(s) in addition to or in lieu of one or more of the example levels discussed herein.","A hierarchical scale unit value is a value (e.g., number, character string, etc.) that is assigned to a hierarchical scale unit of the hierarchical IT infrastructure. The hierarchical scale unit value that is assigned to a hierarchical scale unit corresponds to that hierarchical scale unit and each of the hierarchical scale units in other respective levels of the hierarchical IT infrastructure that include that hierarchical scale unit. For example, a hierarchical scale unit that is assigned to a node may correspond to that node, a machine on which the node is stored, a data center that includes the machine, etc. Such hierarchical scale unit values may be used to store instances of data among hierarchical scale units of the distributed store based on a magnitude of a difference between respective hierarchical scale unit values.","A data manager is at least one computer or other processing system(s), including one or more processors, which distributes instances of data modules of a distributed store among nodes. In a replication scenario, multiple instances of data modules may be stored in different nodes for \u201chigh availability\u201d of those data modules. The data manager also determines which instances of data modules are to be primary instances of the data modules with respect to data operations and which are to be secondary instances of the data modules with respect to the data operations.","A primary instance of a data module with respect to a data operation is an instance of the data module at which the data operation with respect to the data module is initially directed or at which the data operation with respect to the data module is initiated. Examples of data operations include but are not limited to a read operation, a write operation, an eviction operation, a notification operation, etc. For example, an instance of a data module to which a read (or write) operation is initially directed with respect to the data module is the primary instance of the data module with respect to that read (or write) operation. In another example, an instance of a data module at which an eviction (or notification) operation is initiated with respect to the data module is the primary instance of the data module with respect to that eviction (or notification) operation. Secondary instances of data modules with respect to data operations are essentially \u201cback-up\u201d instances of the data modules with respect to the data operations. It should be noted that the data manager may store multiple primary instances of a data module among the nodes. For instance, storing multiple instances of the data module may enable or facilitate scaling of the data operations with respect to the data module.","The data manager may be capable of assigning hierarchical scale unit values to respective hierarchical scale units (e.g., nodes, virtual machines, machines, etc.) of the distributed store. The data manager may be configured to determine in which nodes of the distributed store to store instances of a data module based on the hierarchical scale unit values that are assigned to the respective nodes. For instance, the data manager may store the instances of the data module based on a magnitude of a difference between the hierarchical scale unit values assigned to the respective nodes.","In an example implementation, the data manager stores a primary instance of a data module with respect to a data operation in a first node having a first hierarchical scale unit value. The data manager stores a second instance (e.g., another primary instance or a secondary instance) of the data module with respect to the data operation in a second node having a second hierarchical scale unit value based on a magnitude of a difference between the first and second hierarchical scale unit values. The data manager may store other instances of the data module with respect to the data operation in other nodes having respective hierarchical scale unit values based on a magnitude of a difference between those respective hierarchical scale unit values and hierarchical scale unit value(s) of at least one of the nodes in which an instance of the data module has been stored.","The data manager may be capable of storing a primary instance and secondary instance(s) of a data module with respect to a data operation such that the primary instance is not stored in the same node as any secondary instance. The data manager may be capable of storing secondary instances of a data module across multiple hierarchical scale unit boundaries, which may result in a relatively lower probability that the data module will become inaccessible in the event of a data failure. For instance, a data failure with respect to an entity in the hierarchical IT infrastructure may be less likely to render all instances of a data module inaccessible if the instances of the data module are stored in accordance with technique(s) described herein. In an example implementation, the hierarchical scale units may be geographically diverse, such that storing the secondary instances of the data module across hierarchical scale unit boundaries effectively stores the secondary instances across geographic boundaries.","An example method is described in which hierarchical scale unit values are assigned to respective nodes of a distributed store. A primary instance of a data module with respect to a data operation is stored in a first node having a first hierarchical scale unit value. A second instance of the data module with respect to the data operation is stored in a second node having a second hierarchical scale unit value based on a magnitude of a difference between the first hierarchical scale unit value and the second hierarchical scale unit value.","Another example method is described in which hierarchical scale unit values are assigned to respective nodes of a distributed store. A primary instance of a data module with respect to a data operation is stored in a first node having a first hierarchical scale unit value. A determination is made that a magnitude of a difference between the first hierarchical scale unit value and a second hierarchical scale unit value of a second node exceeds a magnitude of a difference between the first hierarchical scale unit value and a hierarchical scale unit value of any of the other nodes. A determination is made whether a load of the second node exceeds a threshold. If the load of the second node does not exceed the threshold, a second instance of the data module with respect to the data operation is stored in the second node. Otherwise, the second instance of the data module with respect to the data operation is stored in a third node having a third hierarchical scale unit value based on a magnitude of a difference between the first hierarchical scale unit value and the third hierarchical scale unit value.","An example data manager is described that includes an assigning module and a storing module. The assigning module is configured to assign hierarchical scale unit values to respective nodes of a distributed store. The storing module is configured to store a primary instance of a data module with respect to a data operation in a first node having a first hierarchical scale unit value. The storing module is further configured to store a second instance of the data module with respect to the data operation in a second node having a second hierarchical scale unit value based on a magnitude of a difference between the first hierarchical scale unit value and the second hierarchical scale unit value.","A computer program product is also described. The computer program product includes a computer-readable medium having computer program logic recorded thereon for enabling a processor-based system to store instances of a data module among nodes of a distributed store. The computer program product includes first, second, and third program logic modules. The first program logic module is for enabling the processor-based system to assign hierarchical weighted scale unit values to respective nodes of the distributed store. The second program logic module is for enabling the processor-based system to store a primary instance of the data module with respect to a data operation in a first node having a first hierarchical weighted scale unit value. The third program logic module is for enabling the processor-based system to store a second instance of the data module with respect to the data operation in a second node having a second hierarchical weighted scale unit value based on a magnitude of a difference between the first hierarchical weighted scale unit value and the second hierarchical weighted scale unit value.","This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter, nor is it intended to be used to limit the scope of the claimed subject matter. Moreover, it is noted that the invention is not limited to the specific embodiments described in the Detailed Description and\/or other sections of this document. Such embodiments are presented herein for illustrative purposes only. Additional embodiments will be apparent to persons skilled in the relevant art(s) based on the teachings contained herein.","The features and advantages of the disclosed technologies will become more apparent from the detailed description set forth below when taken in conjunction with the drawings, in which like reference characters identify corresponding elements throughout. In the drawings, like reference numbers generally indicate identical, functionally similar, and\/or structurally similar elements. The drawing in which an element first appears is indicated by the leftmost digit(s) in the corresponding reference number.","The detailed description begins with an introductory section to introduce some of the concepts that will be discussed in further detail in subsequent sections. An example implementation of a distributed cache is described in the next section to provide an example context in which example embodiments may be implemented. Example embodiments for storing instances of data among nodes of a distributed store based on hierarchical scale unit values are then discussed, followed by a conclusion section.","The following detailed description refers to the accompanying drawings that illustrate exemplary embodiments of the present invention. However, the scope of the present invention is not limited to these embodiments, but is instead defined by the appended claims. Thus, embodiments beyond those shown in the accompanying drawings, such as modified versions of the illustrated embodiments, may nevertheless be encompassed by the present invention. For example,  discuss an example implementation of a distributed cache to provide an example context in which example embodiments may be implemented. However, persons skilled in the relevant art(s) will recognize that the disclosed technologies are not limited to the context of a distributed cache. Rather, the disclosed technologies are applicable to any suitable distributed store, including but not limited to a distributed cache, a distributed database (e.g., a distributed SQL database), or other suitable type of distributed storage system.","References in the specification to \u201cone embodiment,\u201d \u201can embodiment,\u201d \u201can example embodiment,\u201d or the like, indicate that the embodiment described may include a particular feature, structure, or characteristic, but every embodiment may not necessarily include the particular feature, structure, or characteristic. Moreover, such phrases are not necessarily referring to the same embodiment. Furthermore, when a particular feature, structure, or characteristic is described in connection with an embodiment, it is submitted that it is within the knowledge of one skilled in the relevant art(s) to implement such feature, structure, or characteristic in connection with other embodiments whether or not explicitly described.","Example embodiments are capable of storing instances of data among nodes of a distributed store based on hierarchical scale unit values. The nodes of the distributed store are hosted by a plurality of machines (e.g., computers or other processing systems). Each node includes one or more data modules of the distributed store. A data module is a respective portion (e.g., partition(s) or other suitable portion) of the distributed store or a replica of the distributed store. It should be noted that any portion of the distributed store may be replicated across multiple nodes. For example, a first instance of a portion may be included in a first node, a second instance of the portion may be included in a second node, and so on. Moreover, a node may include multiple instances of the same portion of the distributed store. A \u201creplica of the distributed store\u201d, however, refers to an instance of all data stored in the distributed store. The distributed store may be implemented in a networked environment or in absence of a network. For instance, the distributed store may be implemented in a cloud of a cloud computing environment.","A hierarchical scale unit is an entity (e.g., a node, a virtual machine, a machine, etc.) in a hierarchical information technology (IT) infrastructure that stores a distributed store. The hierarchical IT infrastructure includes a plurality of levels and may have any suitable configuration. In one example configuration, nodes of the distributed store are hosted on respective virtual machines, which are executed on respective machines. The nodes of the distributed store may correspond to a first level of the hierarchical IT infrastructure, the virtual machines may correspond to a second level of the infrastructure, and the machines may correspond to a third level of the infrastructure. The machines can be located on respective pods, which may correspond to a fourth level of the infrastructure. The pods can be grouped into respective racks, which may correspond to a fifth level of the infrastructure. The racks can be grouped into respective data centers, which may correspond to a sixth level of the infrastructure, and so on. In accordance with this example configuration, a hierarchical scale unit may be a node in the first level of the hierarchical IT infrastructure, a virtual machine in the second level, a machine in the third level, etc.","The example hierarchical IT infrastructure levels described herein are provided for illustrative purposes and are not intended to be limiting. For instance, the hierarchical IT infrastructure may not include one or more of the example levels discussed herein. Moreover, the hierarchical IT infrastructure may include level(s) in addition to or in lieu of one or more of the example levels discussed herein.","A hierarchical scale unit value is a value (e.g., number, character string, etc.) that is assigned to a hierarchical scale unit of the hierarchical IT infrastructure. The hierarchical scale unit value that is assigned to a hierarchical scale unit corresponds to that hierarchical scale unit and each of the hierarchical scale units in other respective levels of the hierarchical IT infrastructure that include that hierarchical scale unit. In accordance with the example above, if a node of the distributed store is represented as a first node, which is included in a fifth virtual machine of a seventh machine, which is stored on a third pod of a second rack in a fourth data center, the hierarchical scale unit value of that first node may be represented as 4.2.3.7.5.1. Such hierarchical scale unit values may be used to store instances of data among the hierarchical scale units of the distributed store based on a magnitude of a difference between respective hierarchical scale unit values.","A data manager is at least one computer or other processing system(s), including one or more processors, which distributes instances of data modules of a distributed store among machines that host respective nodes. In a replication scenario, multiple instances of data modules may be stored in different nodes for \u201chigh availability\u201d of those data modules. The data manager also determines which instances of data modules are to be primary instances of the data modules with respect to data operations and which are to be secondary instances of the data modules with respect to the data operations.","A primary instance of a data module with respect to a data operation is an instance of the data module at which the data operation with respect to the data module is initially directed or at which the data operation with respect to the data module is initiated. Examples of data operations include but are not limited to a read operation, a write operation, an eviction operation, a notification operation, etc. For example, an instance of a data module to which a read (or write) operation is initially directed with respect to the data module is the primary instance of the data module with respect to that read (or write) operation. In another example, an instance of a data module at which an eviction (or notification) operation is initiated with respect to the data module is the primary instance of the data module with respect to that eviction (or notification) operation. Secondary instances of data modules with respect to data operations are essentially \u201cback-up\u201d instances of the data modules with respect to the data operations. It should be noted that the data manager may store multiple primary instances of a data module among the nodes. For instance, storing multiple instances of the data module may facilitate scaling of the data operations.","In accordance with example embodiments, a data manager is capable of assigning hierarchical scale unit values to respective nodes of a distributed store. A primary instance of a data module with respect to a data operation is stored in a first node having a first hierarchical scale unit value. A second instance (e.g., another primary instance or a secondary instance) of the data module with respect to the data operation is stored in a second node having a second hierarchical scale unit value based on a magnitude of a difference between the first and second hierarchical scale unit values.","For example, the second instance may be stored in the second node based on the magnitude of difference exceeding a threshold. In another example, the second instance may be stored in the second node based on the magnitude of difference exceeding a magnitude of a difference between the first hierarchical scale unit value and a hierarchical scale unit value of any of the other nodes. In yet another example, the second instance may be stored in the second node based on the magnitude of difference exceeding a magnitude of a difference between the first hierarchical scale unit value and a hierarchical scale unit value of any of the other nodes having a load that does not exceed a threshold.","In some example embodiments, one or more of the hierarchical scale unit values may be weighted for the purpose of determining the magnitude of difference. The weights of such hierarchical scale unit values may be based on any suitable one or more factors, including but not limited to loads of the respective nodes to which the respective weighted hierarchical scale unit values are assigned, load latencies of the respective nodes to which the respective weighted hierarchical scale unit values are assigned, failure probabilities of the respective nodes to which the respective weighted hierarchical scale unit values are assigned, etc.","Example embodiments may be capable of storing a primary instance and one or more secondary instances of a data module with respect to a data operation such that the primary instance is not stored in the same node as any secondary instance. Example embodiments may be capable of storing secondary instances of a data module across multiple hierarchical scale unit boundaries, which may result in a relatively lower probability that the data module will become inaccessible in the event of a data failure. For instance, a data failure with respect to an entity in the hierarchical IT infrastructure may be less likely to render all instances of a data module inaccessible if the instances of the data module are stored in accordance with technique(s) described herein. In an example implementation, the hierarchical scale units may be geographically diverse, such that storing the secondary instances of the data module across hierarchical scale unit boundaries effectively stores the secondary instances across geographic boundaries.",{"@attributes":{"id":"p-0045","num":"0044"},"figref":"FIG. 1","b":["100","102","102"]},"Distributed cache  includes named caches A and B. A named cache is a logical grouping of data. A named cache may be thought of as a database for ease of discussion, though the scope of the example embodiments is not limited in this respect. Named caches A and B specify physical configurations and cache policies, including but not limited to failover, expiration, eviction, etc. Applications that need to communicate with a designated distributed cache (e.g., distributed cache ) instantiate the same named cache.","An application may use one or more named caches based on the policies for the various caches. For example, a first type of data (e.g., activity data) may be stored in a named cache that is partitioned, while a second type of data (e.g., reference data) may be stored in a named cache that is replicated. Partitioned and replicated distributed caches are discussed in greater detail below.","Two named caches (i.e., named caches A and B) are shown in  for illustrative purposes and are not intended to be limiting. Persons skilled in the relevant art(s) will recognize that distributed cache  may include any number of named caches. Named cache A is shown to store data associated with a product catalog, and named cache B is shown to store data associated with an electronics inventory, though it will be recognized that named caches may store any suitable groupings of data.","Each of the nodes A-Z (a.k.a. \u201ccache hosts\u201d) includes one or more data modules of distributed cache . A data module is a respective portion (e.g., partition(s) or other suitable portion) of the distributed cache or a replica of the distributed cache. It should be noted that any portion of the distributed cache may be replicated across multiple nodes. For instance, a first instance of a portion may be included in a first node, a second instance of the portion may be included in a second node, and so on. Moreover, a node may include multiple instances of the same portion of the distributed cache. A \u201creplica of the distributed cache\u201d, however, refers to an instance of all data stored in the distributed cache. Nodes A-Z are referred to collectively as \u201cthe cluster.\u201d","Each of the named caches A and B includes one or more regions. A region is a logical grouping of objects in a named cache. For instance, named cache A is shown in  to include regions A-Y for illustrative purposes. Accordingly, each data module among nodes A-Z may include one or more respective regions of named cache A and\/or named cache B. A region may be thought of as a table for ease of discussion, though the scope of the embodiments is not limited in this respect. For instance, a region may store arbitrary sets of key value pairs. A key value pair includes a key and a corresponding value. A key may be a string of characters, for example, that is used to find a location in distributed cache . The value is data (e.g., an object) that corresponds to the location indicated by the key. Further discussion of key value pairs is provided below with reference to .","It should be noted that an application need not necessarily specify a region in order to access a named cache (e.g., named cache A or B). For instance, the application may use put, get, and remove application programming interfaces (APIs) using only a key to a corresponding object. In fact, the application may scale better when not using regions because key value pairs that are written by the application can be distributed across a named cache without regard for region. For example, if no region is specified during the creation and writing of key value pairs, the key value pairs may be automatically partitioned into multiple implicitly created regions, for example.","Each region A-Y includes one or more cache items. As shown in , region A includes cache items A-P for illustrative purposes. A cache item represents the lowest level of caching that includes the object to be cached along with other information which may include but is not limited to a key, an object payload, one or more tags, a time to live (TTL), created timestamp, a version number, other internal bookkeeping information, etc. Each of the cache items A-P is shown to include a key, a payload, and tags for illustrative purposes, though it will be recognized that the example embodiments are not limited in this respect. For example, cache items A-P need not necessarily include respective keys, payloads, and\/or or tags. In another example, cache items A-P may include information in addition to or in lieu of the keys, payloads, and\/or tags shown in . The following is an example of C# code that shows the creation of a named cache and region:",{"@attributes":{"id":"p-0053","num":"0052"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/CacheFactory class provides methods to return cache objects"]},{"entry":[{},"\/\/Create instance of CacheFactory (reads appconfig)"]},{"entry":[{},"CacheFactory fac = new CacheFactorc( );"]},{"entry":[{},"\/\/Get a named cache from the factory"]},{"entry":[{},"Cache catalog = fac.GetCache(\u201ccatalogcache\u201d);"]},{"entry":[{},"\/\/-----------------------------------------------------------"]},{"entry":[{},"\/\/Simple Get\/Put"]},{"entry":[{},"catalog.Put(\u201ctoy-101\u201d, new Toy(\u201cThomas\u201d, .,.));"]},{"entry":[{},"\/\/From the same or a different client"]},{"entry":[{},"Toy toyObj = (Toy)catalog.Get(\u201ctoy-101\u201d);"]},{"entry":[{},"\/\/-----------------------------------------------------------"]},{"entry":[{},"\/\/Region based Get\/Put"]},{"entry":[{},"catalog.CreateRegion(\u201ctoyRegion\u201d);"]},{"entry":[{},"\/\/Both toy and toyparts are put in the same region"]},{"entry":[{},"catalog.Put(\u201ctoyRegion\u201d, \u201ctoy-101\u201d, new Toy( .,.));"]},{"entry":[{},"catalog.Put(\u201ctoyRegion\u201d, \u201ctoypart-100\u201d, new ToyParts(...));"]},{"entry":[{},"Toy toyObj = (Toy)catalog.Get(\u201ctoyRegion\u201d, \u201ctoy-101\u201d);"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"The example code provided above is not intended to be limiting. It will be recognized that any suitable type of code may be used to create a named cache and\/or a region.","In a replication scenario, multiple instances of data modules may be stored across nodes A-Z for \u201chigh availability\u201d. Each of the nodes A-Z may be a primary node or a secondary node with respect to any one or more data modules of distributed cache . A primary node is a node that includes a primary instance of a designated data module. For instance, access to the designated data module is routed to the primary node for the designated data module. A secondary node is a node that includes a secondary instance of a designated region. For instance, if a named cache is configured to have \u201cbackup instances\u201d of a data module for high availability, then a primary node is specified for providing access to the data module, and one or more other nodes are chosen to include one or more respective secondary instances of the data module in case the primary instance becomes inaccessible, for example. Changes that are made to the primary instance of the data module are reflected in the secondary instances. Such changes may be provided to the secondary instances synchronously or asynchronously. In the asynchronous approach, if the primary node for a data module fails, the secondary node(s) can be used to read data that is stored in the data module without having to have logs written to disk. For instance, failure of the primary node causes a secondary node to become the primary node, so that the data module remains accessible.","A node may be a primary node with respect to one or more first data modules and a secondary node with respect to one or more second data modules of the same distributed cache. For example, if the node is specified to have the primary instance of the first data module(s), the node is considered to be a primary node with respect to the first data module(s). Any other nodes that include an instance of a first data module but do not provide access to that first data module are considered to be secondary nodes with respect to that first data module. If the node does not provide access to the second data module(s), the node is considered to be a secondary node with respect to the second data module(s). A node that provides access to a second data module is considered to be a primary node with respect to that second data module.","Distributed cache  may be any of a variety of cache types, including but not limited to a partitioned cache, replicated cache, or local cache. It should be recognized that each of these types of distributed cache may include multiple instances of any one or more data modules. For example, a plurality of instances of a data module may be stored in a plurality of respective nodes of the distributed cache. In another example, a plurality of instances of a data module may be stored on a common node. One instance of each data module may be designated as the primary instance of the respective data module. Other instances of the data modules are designated as secondary instances of the respective data modules.","Applications may choose the appropriate type of cache based on the type of data to be cached, for example. A partitioned cache is a cache that includes regions that are partitioned among the nodes on which a named cache is defined. The combined memory of the machines across the cluster (e.g., machines A-N) can be used to cache data, which may increase the amount of memory available to distributed cache . All data operations associated with a data partition are initiated at or initially directed to the node(s) that contain the primary instance(s) of the data partition with respect to the respective data operations.","A partitioned cache may be used to achieve a desired scale. For instance, machines and\/or nodes may be added to distributed cache  to enable automatic load balancing to occur. For instance, some partitions that are stored among machines A-N (or nodes A-Z) may be migrated to the added machines and\/or nodes. Such automatic load balancing may result in keys being distributed across the revised cluster. Access requests may be routed to more machines, which may result in an increased throughput. Additional machines may provide additional memory. Additional memory may enable distributed cache  to store more data.",{"@attributes":{"id":"p-0060","num":"0059"},"figref":["FIG. 2","FIG. 2"],"b":["200","206","208","210","210","210","210","104","104","104","104","206","100","208","100","206","208","202","202"]},"A cache client is a software application that communicates with a node for writing and\/or reading data with respect to data partitions in a distributed cache. A cache client may be configured as a simple cache client or a routing cache client. A simple cache client is a cache client that is configured to contact one node (e.g., one of nodes A-C) in a cluster. The simple cache client has no routing capabilities and does not track where each cached object is stored in the distributed cache. If a simple cache client requests an object from a node that does not store the object or that is not the primary node for that object, that node retrieves the object from the cluster and then returns the object to the simple cache client. A routing client, on the other hand, is a cache client that has routing capabilities. The routing cache client includes a routing table to keep track of cached object placement across the nodes (e.g., nodes A-C) in the cluster. Because the routing cache client keeps track of where each of the cached objects are, the routing cache client can make requests directly to the node that stores the object in memory.","As shown in , cache clients A and B are configured as simple cache clients for illustrative purposes. It will be recognized, however, that any one or more of cache clients A or B may be configured as a routing cache client. In , Put operation  assigns a value \u201cV\u201d for a key \u201cK\u201d. A routing layer A of node A determines that the key \u201cK\u201d is associated with node B. Accordingly, routing layer A routes the request that is associated with Put operation  to primary data partition B of node B. A routing layer C routes a request corresponding to Get operation  for the key \u201cK\u201d to primary data partition B, as well. It should be noted that routing layers may be incorporated into cache clients. Accordingly, routing layer A may be incorporated into cache client A, and\/or routing layer C may be incorporated into cache client B.",{"@attributes":{"id":"p-0063","num":"0062"},"figref":"FIG. 3","b":["300","206","208","210","210","302","302","1","1","2","2","3","3","104","104","210","210","302","302"]},"As shown in , cache client A sends a request to put the value \u201cV\u201d with the key \u201cK\u201d to node A. Routing layer A determines that the key \u201cK\u201d belongs to node B and therefore routes the key \u201cK\u201d to node B. Node B performs Put operation  locally and also sends the put request corresponding to Put operation  to secondary nodes A and C. Nodes A and C are deemed to be secondary nodes with respect to the key value pair \u201cK, V\u201d because nodes A and C include secondary instances of the key value pair \u201cK, V.\u201d Node B waits for an acknowledgement from nodes A and C that the request for the key value pair \u201cK, V\u201d has been received from node B. Upon receiving such acknowledgement, node B provides an indicator acknowledging success of the Put operation to node A. Node A forwards the indicator to cache client A.","Get operation  is performed in a manner similar to that discussed above with reference to . For instance, routing layer C routes the request corresponding to Get operation  to primary data partition B, which includes the key \u201cK.\u201d",{"@attributes":{"id":"p-0066","num":"0065"},"figref":["FIG. 4","FIG. 4"],"b":["400","206","208","104","104","402","402","402","402","1","1","2","2","3","3","202","206","104","2","2","104","104","204","104","2","104","104","104","104","104","202","104","104","208"]},{"@attributes":{"id":"p-0067","num":"0066"},"figref":["FIG. 5","FIG. 5"],"b":["500","206","208","502","502","202","202","502","502","502","502","504","504","502","502"]},{"@attributes":{"id":"p-0068","num":"0067"},"figref":["FIG. 6","FIG. 1","FIG. 6"],"b":["600","100","600","602","602","602","600","602","600"]},"First level A includes a plurality of data centers, labeled as Data Center  through Data Center Z. Second layer B includes Z sets of racks, each of which is included in a respective data center of first level A. For instance, Data Center  in first level A includes set A of the racks in second level B. Data Center Z includes set Z of the racks in second level B. Each rack in second level B is assigned a hierarchical scale unit value that corresponds to that rack and to the data center in which the rack is included. For example, the racks in set A, which are included in Data Center , are assigned the hierarchical scale unit values ., ., and so on. The racks in set Z, which are included in Data Center Z, are assigned the hierarchical scale unit values Z., Z., and so on.","Third level C includes a plurality of sets of pods. Each rack in second level B includes a respective set of the pods in third level C. For example, Rack . in second level B includes set A of the pods in third level C. The pods in set A are assigned the hierarchical scale unit values .., .., and so on. Rack Z. includes set Y of the pods in third level C. The pods in set Y are assigned the hierarchical scale unit values Z.., Z.., and so on.","Fourth level D includes a plurality of sets of machines. Each pod in third level C includes a respective set of the machines in fourth level D. For example, Pod .. in third level C includes set A of the machines in fourth level D. The machines in set A are assigned the hierarchical scale unit values ..., ..., and so on. Pod Z.. includes set X of the machines in fourth level D. The machines in set X are assigned the hierarchical scale unit values Z..., Z..., and so on.","Fifth level E includes a plurality of sets of virtual machines. Each machine in fourth level D includes a respective set of the virtual machines in fifth level E. For example, Machine ... in fourth level D includes set A of the virtual machines in fifth level E. The virtual machines in set A are assigned the hierarchical scale unit values ...., ...., and so on. Machine Z... includes set W of the virtual machines in fifth level E. The virtual machines in set W are assigned the hierarchical scale unit values Z...., Z...., and so on.","Sixth level F includes a plurality of sets of nodes. Each virtual machine in fifth level E includes a respective set of the nodes in sixth level F. For example, Virtual Machine .... in fifth level E includes set A of the nodes in sixth level F. The nodes in set A are assigned the hierarchical scale unit values ....., ....., and so on. Virtual Machine Z.... includes set V of the nodes in sixth level F. The nodes in set V are assigned the hierarchical scale unit values Z....., Z....., and so on.","In accordance with some example embodiments, the hierarchical scale unit values are weighted based on at least one factor for the purpose of determining magnitudes of difference between the respective hierarchical scale unit values. Example factors include but are not limited to loads of respective hierarchical scale units of hierarchical IT infrastructure , load latencies associated with respective hierarchical scale units of hierarchical IT infrastructure , failure probabilities associated with respective hierarchical scale units of hierarchical IT infrastructure , etc. A failure probability is a likelihood of encountering a data failure.","A load of a hierarchical scale unit may be based on any of a variety of factors, including but not limited to a proportion of the hierarchical scale unit's processing capabilities that is being consumed, a proportion of the hierarchical scale unit's bandwidth that is being consumed, a number of requests that are processed by the hierarchical scale unit in a designated period of time, and\/or other suitable factors. A load latency associated with a hierarchical scale unit may be based on a number of switches that are accessed in order to read and\/or write data at the hierarchical scale unit, and\/or other suitable factors. For example, storing an instance of a data module at a particular rack may result in a 10% increase in latency as compared to storing the instance at another rack. In another example, storing the instance of the data module at a particular data center may result in a 100% increase in latency as compared to storing the instance at another data center. A failure probability associated with a hierarchical scale unit indicates the likelihood that a data failure is to occur with respect to the hierarchical scale unit. Further discussion of weighted hierarchical scale unit values is provided below with reference to .","As shown in , hierarchical IT infrastructure  includes six levels A-F for illustrative purposes and is not intended to be limiting. Persons skilled in the relevant art(s) will recognize that hierarchical IT infrastructure  may include any number of levels. For instance, hierarchical IT infrastructure  may not include one or more of the levels A-F. Moreover, hierarchical IT infrastructure  may include level(s) in addition to or in lieu of one or more of the levels A-F.","Hierarchical scale unit values, such as the example hierarchical scale unit values described with respect to , may be used to store instances of a data module among the hierarchical scale units (e.g., nodes, virtual machines, machines, etc.) of the distributed store based on a magnitude of a difference between respective hierarchical scale unit values. Techniques for storing instances of a data module among nodes of a distributed store are discussed in greater detail below with reference to .",{"@attributes":{"id":"p-0078","num":"0077"},"figref":["FIG. 7","FIG. 1","FIG. 7"],"b":["700","100","700","700","702","702","704","708","710","710","102","102","702","702","704","102","102","708","708"]},"User systems A-M are computers or other processing systems, each including one or more processors, that are capable of communicating with machines A-N. User systems A-M are capable of accessing data that is stored in the distributed store, which is hosted by hosting system . The distributed store includes nodes A-N, which are hosted by respective machines A-N. For example, user systems A-M may be configured to provide write requests (e.g., Put requests) to machines A-N for requesting to write data thereto. In another example, user systems A-M may be configured to provide read requests (e.g., Get requests) to machines A-M for requesting to read data that is stored thereon. For instance, a user may initiate a write request or a read request using a client deployed on a user system  that is owned by or otherwise accessible to the user.","Hosting system  hosts the distributed store. Hosting system  includes a plurality of machines A-N. Machines A-N are computers or other processing systems, each including one or more processors, that are capable of communicating with user systems A-M. Machines A-N are configured to host respective node(s) A-N. Each node includes respective data module(s) of the distributed store. As shown in , first node(s) A include first data module(s) A, second node(s) B include second module(s) B, and so on.","A data module is a respective portion (e.g., item(s), region(s), partition(s), etc.) of the distributed store or a replica of the distributed store. It should be noted that any portion of the distributed store may be replicated across nodes A-N. For instance, a first instance of a portion may be included in a node of the first node(s) A, a second instance of the portion may be included in a node of the second node(s) B, and so on. Moreover, a node may include multiple instances of the same portion of the distributed store. For example, a node of the first node(s) A may include two or more instances of item(s), region(s), data partition(s), or other suitable portion of the distributed store. A \u201creplica of the distributed store\u201d, however, refers to an instance of all data stored in the distributed store.","Any number of instances of a data module may be stored among nodes A-N. One instance of the data module is often specified as the primary instance of that data module with respect to a data operation at a given time, though it will be recognized that multiple primary instances of the data module may be stored among nodes A-N for purposes such as enabling or facilitating scalability of data operations with respect to the data module. Some example embodiments are described with reference to storage of a single primary instance of a data module for illustrative purposes and are not intended to be limiting. Persons skilled in the relevant art(s) will recognize that such example embodiments are applicable to storage of multiple primary instances of the data module.","Primary instance(s) of the data module with respect to a data operation are said to be in a primary state with respect to the data operation, and any other instances are said to be in a secondary state with respect to the data operation. It should be noted that a node that includes a primary instance of a data module is referred to as the primary node for that data module. Nodes that include secondary instances of a data module are referred to as secondary nodes for that data module. It will be recognized that a node may be the primary node for some data modules and a secondary node for other data modules.","Any of a variety of applications may be deployed on machines A-N. As shown in , first application(s) A are deployed on machine A, second application(s) B are deployed on machine B, and so on. Application(s) A-N may perform operations that create new data to be written to the distributed store or that read or modify existing data that is stored in the distributed store. For instance, applications A-N may use Put requests and Get requests to respectively write and read data across machines A-N. In some example embodiments, user systems A-M are capable of accessing one or more of the applications A-N without having to go through network . Any one or more of the application(s) A-N may be deployed on a respective user system A-M, in addition to or in lieu of being deployed on a respective machine A-N.","Data manager  is at least one computer or other processing system(s), including one or more processors, which distributes instances of data modules of the distributed store among machines A-N. Data manager  also determines which instances of respective data modules are to be primary data modules and which are to be secondary data modules.","Data manager  includes a hierarchy scaler . Hierarchy scaler  is configured to assign hierarchical scale unit values to respective hierarchical scale units of a hierarchical IT infrastructure (e.g., hierarchical IT infrastructure ) that stores the distributed store. The hierarchical scale unit value that is assigned to a hierarchical scale unit corresponds to that hierarchical scale unit and each of the hierarchical scale units in other respective levels of the hierarchical IT infrastructure that include that hierarchical scale unit. For instance, hierarchical scaler  may assign a hierarchical scale unit value to each of the nodes A-N. For example, the hierarchical scale unit value(s) assigned to respective first node(s) A may indicate that first node(s) A are included in machine A and\/or perhaps hierarchical scale unit(s) in other respective level(s) of the hierarchical IT infrastructure. The hierarchical scale unit value(s) assigned to respective second node(s) B may indicate that second node(s) B are included in machine B and\/or perhaps hierarchical scale unit(s) in other respective level(s) of the hierarchical IT infrastructure, and so on.","Hierarchy scaler  is further configured to store instances of a data module among nodes A-N based on the hierarchical scale unit values that are assigned to nodes A-N. For example, hierarchical scaler  may store first and second instances of the data module in respective first and second nodes A, B having respective first and second hierarchical scale unit values based on a magnitude of a difference between the first and second hierarchical scale unit values. In an example embodiment, the first instance of the data module is a primary instance, and the second instance of the data module is a secondary instance. In another example embodiment, the first and second instances of the data module are respective primary instances. In yet another example embodiment, the first and second instances of the data module are respective secondary instances. Further discussion of techniques for storing instances of a data module among nodes of a distributed store is provided below with reference to .","Data manager  is shown in  to be a standalone computer(s) or processing system(s) for illustrative purposes and is not intended to be limiting. It will be recognized that data manager  may be partially or entirely incorporated into hosting system . For instance, a portion or all of data manager  may be stored on one of the machines A-N or distributed among any two or more of the machines A-N.","In an example embodiment, hosting system  is configured in a cloud of a cloud computing environment. For instance, machines A-N may be servers that are accessible over the Internet via a client (e.g., Web crawler, Web browser, etc.) deployed on a user system  that is owned by or otherwise accessible to a user.","In another example embodiment, the distributed store is a distributed cache. In accordance with this example embodiment, computer system  may further include a database (not shown in ). The database may be configured to store original data in a structured manner in accordance with a database model (e.g., a relational model, a hierarchical model, a network model, etc.). User systems A-M and\/or machines A-N may access the original data in accordance with query language(s), including but not limited to structured query language (SQL), SPARQL, extensible markup language path language (XPath), etc. Any one or more data modules A-C of the distributed store may store a frequently used subset of the original data that is stored in the database, for example. The original data may be expensive to access due to a relatively longer access time associated with the database, as compared to an access time associated with the distributed store. Accordingly, it may be desirable to access the data at the nodes A-N, rather than at the database.",{"@attributes":{"id":"p-0091","num":"0090"},"figref":["FIGS. 8A-8C","FIG. 7","FIG. 9"],"b":["800","800","800","704","700","800","704","704"]},"As shown in , data manager \u2032 includes a hierarchy scaler \u2032. Hierarchy scaler \u2032 includes an assigning module , a determination module , a weight module , a storing module , a comparing module , and an elimination module . Further structural and operational embodiments will be apparent to persons skilled in the relevant art(s) based on the discussion regarding flowchart . Flowchart  is described as follows.","As shown in , the method of flowchart  begins at step . In step , a plurality of hierarchical scale unit values is assigned to a plurality of respective nodes of a distributed store. In an example implementation, assigning module  assigns the plurality of hierarchical scale unit values to the plurality of respective nodes.","At step , a determination is made whether a plurality of weights is to be applied to the plurality of respective hierarchical scale unit values. The plurality of weights may be based on any suitable one or more factors, including but not limited to loads of respective nodes to which the respective hierarchical scale unit values are assigned, load latencies of the respective nodes to which the respective hierarchical scale unit values are assigned, failure probabilities of the respective nodes to which the respective hierarchical scale unit values are assigned, etc. The determination whether the plurality of weights is to be applied to the plurality of respective hierarchical scale unit values may be based on a value of a weight indicator. For instance, the weight indicator having a first value may indicate that the weights are to be applied. The weight indicator having a second value may indicate that the weights are not to be applied. In an example implementation, determination module  determines whether the plurality of weights is to be applied to the plurality of respective hierarchical scale unit values. If the plurality of weights is to be applied to the plurality of respective hierarchical scale unit values, flow continues to step . Otherwise, flow continues to step .","At step , the plurality of weights is applied to the plurality of respective hierarchical scale unit values. For instance, the plurality of hierarchical values may be multiplied by the plurality of respective weights to provide weighted hierarchical weighted scale unit values. In an example implementation, weight module  applies the plurality of weights to the plurality of respective hierarchical scale unit values.","At step , a primary instance of a data module with respect to a data operation is stored in a first node of the plurality of nodes. A primary instance of a data module with respect to a data operation is an instance of the data module at which the data operation with respect to the data module is initially directed or at which the data operation with respect to the data module is initiated. The first node has a first hierarchical scale unit value of the plurality of hierarchical scale unit values. In an example implementation, storing module  stores the primary instance of the data module with respect to the data operation in the first node.","At step , magnitudes of differences between the first hierarchical scale unit value and the plurality of respective hierarchical scale unit values are determined. For instance, each hierarchical scale unit value of the plurality of hierarchical scale unit values may be compared to the first hierarchical scale unit value to provide a respective difference therebetween, the difference having a respective magnitude. In an example implementation, determination module  determines the magnitudes of the differences. Upon performance of step , flow continues to step , which is shown in .","At step , a determination is made whether the magnitudes are to be compared to a first threshold. The determination whether the magnitudes are to be compared to the first threshold may be based on a value of a threshold indicator. For instance, the threshold indicator having a first value may indicate that the magnitudes are to be compared to the first threshold. The threshold indicator having a second value may indicate that the magnitudes are not to be compared to the first threshold. In an example implementation, determination module  determines whether the magnitudes are to be compared to the first threshold. If the magnitudes are not to be compared to the first threshold, flow continues to step . If the magnitudes are to be compared to the first threshold, however, flow continues to step .","At step , each of the magnitudes is compared to the first threshold. In an example implementation, comparing module  compares each of the magnitudes to the first threshold.","At step , a determination is made whether each magnitude is greater than the first threshold. In an example implementation, determination module  determines whether each magnitude is greater than the first threshold. If each magnitude is greater than the first threshold, flow continues to step . Otherwise, flow continues to step .","At step , each node for which the respective magnitude is less than the first threshold is eliminated from the plurality of nodes. It should be noted that eliminating such nodes from the plurality of nodes does not affect the operability of those nodes. Rather, such nodes are merely eliminated from consideration for storing a second instance of the data module with respect to flowchart . In an example implementation, elimination module  eliminates each node for which the respective magnitude is less than the first threshold from the plurality of nodes.","At step , a determination is made whether loads of respective nodes are to be compared to a second threshold. The determination whether the loads of the respective nodes are to be compared to the second threshold may be based on a value of a load indicator. For example, the load indicator having a first value may indicate that the loads of the respective nodes are to be compared to the second threshold. The threshold indicator having a second value may indicate that the loads of the respective nodes are not to be compared to the second threshold. In an example implementation, determination module  determines whether the loads of the respective nodes are to be compared to the second threshold. If the loads of the respective nodes are to be compared to the second threshold, flow continues to step . Otherwise, flow continues to step , which is shown in .","At step , a plurality of loads of the plurality of respective nodes is compared to the second threshold. The load of a node may be based on any of a variety of factors, including but not limited to a proportion of the node's processing capabilities that is being consumed, a proportion of the node's bandwidth that is being consumed, a number of requests that are processed by the node in a designated period of time, and\/or other suitable factors. In an example implementation, comparing module  compares the plurality of loads of the plurality of respective nodes to the second threshold.","At step , a determination is made whether each load is less than the second threshold. In an example implementation, determination module  determines whether each load is less than the second threshold. If each load is less than the second threshold, flow continues to step , which is shown in . Otherwise, flow continues to step .","At step , each node for which the respective load is greater than the second threshold is eliminated from the plurality of nodes. It should be noted that eliminating such nodes from the plurality of nodes does not affect the operability of those nodes. Rather, such nodes are merely eliminated from consideration for storing a second instance of the data module with respect to flowchart . In an example implementation, elimination module  eliminates each node for which the respective load is greater than the second threshold from the plurality of nodes.","At step , a determination is made whether a second instance of the data module with respect to the data operation is to be stored in a node of the plurality of nodes that corresponds to the greatest magnitude. The second instance may be another primary instance or a secondary instance of the data module. A secondary instance of a data module with respect to a data operation is an instance of the data module at which the data operation with respect to the data module is not initially directed and at which the data operation with respect to the data module is not initiated. For instance, it may be desirable for the primary instance and the secondary instance of the data module with respect to the data operation to be stored as far from each other as possible within the hierarchical IT infrastructure.","The determination whether the second instance of the data module with respect to the data operation is to be stored in a node of the plurality of nodes that corresponds to the greatest magnitude may be based on a value of a magnitude indicator. For instance, the magnitude indicator having a first value may indicate that the second instance of the data module with respect to the data operation is to be stored in a node of the plurality of nodes that corresponds to the greatest magnitude. The magnitude indicator having a second value may indicate that no requirement exists for the second instance of the data module with respect to the data operation to be stored in a node of the plurality of nodes that corresponds to the greatest magnitude.","In an example implementation, determination module  determines whether the second instance of the data module with respect to the data operation is to be stored in the node of the plurality of nodes that corresponds to the greatest magnitude. If the second instance of the data module with respect to the data operation is to be stored in the node of the plurality of nodes that corresponds to the greatest magnitude, flow continues to step . Otherwise, flow continues to step .","At step , the magnitudes corresponding to the respective nodes of the plurality of nodes are compared to determine a second node that corresponds to the greatest magnitude. For instance, the node that corresponds to the greatest magnitude may be designated as the second node. In an example implementation, comparing module  compares the magnitudes corresponding to the respective nodes of the plurality of nodes to determine the second node that corresponds to the greatest magnitude.","At step , a second instance of the data module with respect to the data operation is stored in a second node of the plurality of nodes having a second hierarchical scale unit value of the plurality of hierarchical scale unit values based on a magnitude of a difference between the first hierarchical scale unit value and the second hierarchical scale unit value. For example, if step  was performed, the second instance with respect to the data operation is stored based on the magnitude of the difference between the first and second hierarchical scale unit values exceeding the first threshold. If step  was performed, the second instance with respect to the data operation is stored in the second node based on the magnitude of the difference between the first and second hierarchical scale unit values being the greatest magnitude generally or being the greatest magnitude with respect to nodes having respective loads that are less than the second threshold. In an example implementation, storing module  stores the second instance of the data module with respect to the data operation in the second node.","At step , a determination is made whether another instance of the data module with respect to the data operation is to be stored. The determination whether another instance of the data module with respect to the data operation is to be stored may be based on a value of an instance indicator. For example, the instance indicator having a first value may indicate that another instance of the data module with respect to the data operation is to be stored. The instance indicator having a second value may indicate that no other instance of the data module with respect to the data operation is to be stored. In an example implementation, determination module  determines whether another instance of the data module with respect to the data operation is to be stored. If another instance of the data module with respect to the data operation is to be stored, flow continues to step . Otherwise, flowchart  ends.","At step , criteria regarding a node in which another instance of the data module with respect to the data operation is to be stored are identified. For example, the criteria may specify that the node is to have a hierarchical scale unit value that is less than a hierarchical scale unit value of any other node of the plurality of nodes other than the first and second nodes. In another example, the criteria may specify that the node is to have a hierarchical scale unit value that is greater than a hierarchical scale unit value of any other node of the plurality of nodes other than the first and second nodes. In yet another example, the criteria may specify that the node is to have a hierarchical scale unit value that is approximately half of the sum of the first and second hierarchical scale unit values. In still another example, the criteria may specify that another instance of the data module is to be stored in a node based on a load of the node. For instance, the criteria may specify that the load of the node is not to exceed a threshold in order for another instance of the data module with respect to the data operation to be stored in the node.","In an example implementation, determination module  identifies the criteria of the node in which another instance of the data module with respect to the data operation is to be stored. The example criteria discussed herein are provided for illustrative purposes and are not intended to be limiting. Any suitable criteria regarding a node may be specified for storing another instance of the data module with respect to the data operation in the node.","At step , another instance of the data module with respect to the data operation is stored in a node of the plurality of nodes in accordance with the criteria. In an example implementation, storing module  stores another instance of the data module with respect to the data operation in the node of the plurality of nodes in accordance with the criteria.","In some example embodiments, one or more steps , , , , , , , , , , , , , , , , , , and\/or  of flowchart  may not be performed. Moreover, steps in addition to or in lieu of steps , , , , , , , , , , , , , , , , , , and\/or  may be performed. It will be recognized that any one or more factors that are considered for storing a primary instance of a data module with respect to a data operation may be used for storing a secondary instance of the data module with respect to the data operation, and vice versa. Moreover, factor(s) that may be used to apply weights to hierarchical scale unit values may be used for storing instance(s) of a data module among hierarchical scale units (e.g., nodes) having hierarchical scale unit values that are not weighted.","For instance, it may be desirable to store instance(s) of a data module at hierarchical scale units that have relatively low loads, load latencies, and\/or failure probabilities. Accordingly, an instance of the data module may be stored at a hierarchical scale unit having a load that is less than a threshold load. In accordance with this example, hierarchical scale units having respective loads that exceed the threshold load may not be considered for storage of the instance of the data module.","In another example, an instance of the data module may be stored at a hierarchical scale unit having a load that is less than a load of other hierarchical scale unit(s) (e.g., any other hierarchical scale unit) in a designated level of the hierarchical IT infrastructure.","In yet another example, an instance of the data module may be stored at a hierarchical scale unit having a load latency that is less than a threshold latency. In accordance with this example, hierarchical scale units having respective load latencies that exceed the threshold latency may not be considered for storage of the instance of the data module.","In still another example, an instance of the data module may be stored at a hierarchical scale unit having a load latency that is less than a load latency of other hierarchical scale unit(s) (e.g., any other hierarchical scale unit) in a designated level of the hierarchical IT infrastructure.","In another example, an instance of a data module may be stored at a hierarchical scale unit having a failure probability that is less than the threshold failure probability. In accordance with this example, hierarchical scale units having respective failure probabilities that exceed the threshold may not be considered for storage of the instance of the data module.","In yet another example, an instance of the data module may be stored at a hierarchical scale unit having a failure probability that is less than a failure probability of other hierarchical scale unit(s) (e.g., any other hierarchical scale unit) in a designated level of the hierarchical IT infrastructure.","It will be recognized that data manager \u2032 may not include one or more of assigning module , determination module , weight module , storing module , comparing module , and\/or elimination module . Furthermore, data manager \u2032 may include modules in addition to or in lieu of assigning module , determination module , weight module , storing module , comparing module , and\/or elimination module .",{"@attributes":{"id":"p-0123","num":"0122"},"figref":["FIG. 10","FIG. 7","FIG. 11"],"b":["1000","1000","1000","704","700","1000","704","704"]},"As shown in , data manager \u2033 includes a hierarchy scaler \u2033. Hierarchy scaler \u2033 includes an assigning module \u2032, a determination module \u2032, and a storing module \u2032. Further structural and operational embodiments will be apparent to persons skilled in the relevant art(s) based on the discussion regarding flowchart . Flowchart  is described as follows.","As shown in , the method of flowchart  begins at step . In step , a plurality of hierarchical scale unit values are assigned to a plurality of respective nodes of a distributed store. In an example implementation, assigning module \u2032 assigns the plurality of hierarchical scale unit values to the plurality of respective nodes.","At step , a primary instance of a data module with respect to a data operation is stored in a first node of the plurality of nodes. A primary instance of a data module with respect to a data operation is an instance of the data module at which the data operation with respect to the data module is initially directed or at which the data operation with respect to the data module is initiated. The first node has a first hierarchical scale unit value of the plurality of hierarchical scale unit values. In an example implementation, storing module \u2032 stores the primary instance of the data module with respect to the data operation in the first node.","At step , a determination is made that a magnitude of a difference between the first hierarchical scale unit value and a second hierarchical scale unit value of a second node of the plurality of nodes exceeds a magnitude of a difference between the first hierarchical scale unit value and a hierarchical scale unit value of any other node of the plurality of nodes. In an example implementation, determination module \u2032 determines that the magnitude of the difference between the first hierarchical scale unit value and the second hierarchical scale unit value exceeds the magnitude of the difference between the first hierarchical scale unit value and the hierarchical scale unit value of any other node of the plurality of nodes.","At step , a determination is made whether a load of the second node exceeds a threshold. In an example implementation, determination module  determines whether the load of the second node exceeds the threshold. If the load of the second node does not exceed the threshold, flow continues to step . If the load of the second node exceeds the threshold, however, flow continues to step .","At step , a second instance of the data module with respect to the data operation is stored in the second node of the plurality of nodes. In an example implementation, storing module  stores the second instance of the data module with respect to a data operation in the second node.","At step , a second instance of the data module with respect to the data operation is stored in a third node of the plurality of nodes having a third hierarchical scale unit value of the plurality of hierarchical scale unit values based on a magnitude of a difference between the first hierarchical scale unit value and the third hierarchical scale unit value. In an example implementation, storing module  stores the second instance of the data module with respect to the data operation in the third node.","In some example embodiments, one or more steps , , , , , and\/or  of flowchart  may not be performed. Moreover, steps in addition to or in lieu of steps , , , , , and\/or  may be performed.",{"@attributes":{"id":"p-0132","num":"0131"},"figref":["FIG. 12","FIGS. 1 and 7","FIG. 7","FIGS. 9 and 11"],"b":["1200","102","102","702","702","704","1200","1200","1200","1200","1200"]},"As shown in , computer  includes a processing unit , a system memory , and a bus  that couples various system components including system memory  to processing unit . Bus  represents one or more of any of several types of bus structures, including a memory bus or memory controller, a peripheral bus, an accelerated graphics port, and a processor or local bus using any of a variety of bus architectures. System memory  includes read only memory (ROM)  and random access memory (RAM) . A basic input\/output system  (BIOS) is stored in ROM .","Computer  also has one or more of the following drives: a hard disk drive  for reading from and writing to a hard disk, a magnetic disk drive  for reading from or writing to a removable magnetic disk , and an optical disk drive  for reading from or writing to a removable optical disk  such as a CD ROM, DVD ROM, or other optical media. Hard disk drive , magnetic disk drive , and optical disk drive  are connected to bus  by a hard disk drive interface , a magnetic disk drive interface , and an optical drive interface , respectively. The drives and their associated computer-readable storage media provide nonvolatile storage of computer-readable instructions, data structures, program modules and other data for the computer. Although a hard disk, a removable magnetic disk and a removable optical disk are described, other types of computer-readable media can be used to store data, such as flash memory cards, digital video disks, random access memories (RAMs), read only memories (ROM), and the like.","A number of program modules may be stored on the hard disk, magnetic disk, optical disk, ROM, or RAM. These programs include an operating system , one or more application programs , other program modules , and program data . Application programs  or program modules  may include, for example, computer program logic for implementing nodes A-Z, named caches A-B, regions A-Y, cache items A-P, cache clients A-B, routing layers A-C, Put operation , Get operation , primary instances of data modules A-C, secondary instances of data modules A-C, replicated instances of data modules A-C, local caches A-B, routing layers A-B, hierarchy scaler , nodes A-N, data modules A-N, application(s) A-N, assigning module , determination module , weight module , storing module , comparing module , assigning module \u2032, determination module \u2032, storing module \u2032, flowchart  (including any step of flowchart ), and\/or flowchart  (including any step of flowchart ), as described herein.","A user may enter commands and information into the computer  through input devices such as keyboard  and pointing device . Other input devices (not shown) may include a microphone, joystick, game pad, satellite dish, scanner, or the like. These and other input devices are often connected to the processing unit  through a serial port interface  that is coupled to bus , but may be connected by other interfaces, such as a parallel port, game port, or a universal serial bus (USB).","A monitor  or other type of display device is also connected to bus  via an interface, such as a video adapter . In addition to the monitor, computer  may include other peripheral output devices (not shown) such as speakers and printers.","Computer  is connected to a network  (e.g., the Internet) through a network interface or adapter , a modem , or other means for establishing communications over the network. Modem , which may be internal or external, is connected to bus  via serial port interface .","As used herein, the terms \u201ccomputer program medium\u201d and \u201ccomputer-readable medium\u201d are used to generally refer to media such as the hard disk associated with hard disk drive , removable magnetic disk , removable optical disk , as well as other media such as flash memory cards, digital video disks, random access memories (RAMs), read only memories (ROM), and the like.","As noted above, computer programs and modules (including application programs  and other program modules ) may be stored on the hard disk, magnetic disk, optical disk, ROM, or RAM. Such computer programs may also be received via network interface  or serial port interface . Such computer programs, when executed or loaded by an application, enable computer  to implement features of embodiments discussed herein. Accordingly, such computer programs represent controllers of the computer .","Embodiments are also directed to computer program products comprising software (e.g., computer-readable instructions) stored on any computer useable medium. Such software, when executed in one or more data processing devices, causes a data processing device(s) to operate as described herein. Embodiments may employ any computer-useable or computer-readable medium, known now or in the future. Examples of computer-readable mediums include, but are not limited to storage devices such as RAM, hard drives, floppy disks, CD ROMs, DVD ROMs, zip disks, tapes, magnetic storage devices, optical storage devices, MEMS-based storage devices, nanotechnology-based storage devices, and the like.","While various embodiments have been described above, it should be understood that they have been presented by way of example only, and not limitation. It will be apparent to persons skilled in the relevant art(s) that various changes in form and details can be made therein without departing from the spirit and scope of the invention. Thus, the breadth and scope of the present invention should not be limited by any of the above-described exemplary embodiments, but should be defined only in accordance with the following claims and their equivalents."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS\/FIGURES","p":["The accompanying drawings, which are incorporated herein and form part of the specification, illustrate embodiments of the present invention and, together with the description, further serve to explain the principles involved and to enable a person skilled in the relevant art(s) to make and use the disclosed technologies.",{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIGS. 8A-8C"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":["FIG. 9","FIG. 7"]},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":["FIG. 11","FIG. 7"]},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 12"}]},"DETDESC":[{},{}]}
