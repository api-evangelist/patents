---
title: System and method of managing access to web services
abstract: A gateway module for managing functionality for one or more web services is provided. The web services gateway module comprises a client application interface unit for receiving communication from a client application over a standard protocol, a communication processor for processing the communication for a web service, and a web services interface unit for delegating the processed communication to the web service.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07640348&OS=07640348&RS=07640348
owner: Corel Corporation
number: 07640348
owner_city: 
owner_country: CA
publication_date: 20020923
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["PRIORITY","FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS"],"p":["This patent application claims priority from U.S. patent application No. Ser. 60\/324,191 entitled \u201cWeb Services Infrastructure\u201d, Atwal et. al., filed Sep. 21, 2001.","This invention relates to an infrastructure for managing functionality for web services. In particular, the invention relates to a web services gateway.","Software developers wish to provide programmatic functionality over the Internet through the creation of web services. These web services provide some valuable technology in which the developer has expertise. A web services is often deployed in such a way that the user of the web service has a direct connection with a server hosing the web service. For example, if there are ten servers hosting different web services, then there are ten \u201cconnection points\u201d into the different web services. This makes addition of web server independent common features, such as application-level authentication, authorization and transaction logging tedious, time consuming and prone to errors at the integration layer.",{"@attributes":{"id":"p-0005","num":"0004"},"figref":"FIG. 1","b":["10","20","30","20","1","10","20","25","10","10","25","20","25","25","10","30","25"]},"One problem that arises from this process of exposing the web services  for consumption over the web by client applications is that in order to protect unauthorized access of these web services  over the Internet, all the web services  must somehow incorporate authentication and authorization of users and other security measures. When a user wishes to use a web service  on a server, the server usually needs to ensure that (a) the user is authentic and (b) is authorized to access the web service. This authentication of the user is typically done by sending the user's name and password to the server which then verifies the given data before granting access. Since the authentication data is sensitive, it is desirable to send the authentication data over a secured channel, such as the hypertext transfer protocol over secure socket layer (https), which encrypts the data. Once the user is authenticated, the user's access to the web service is verified. This is typically done by querying an Access Control List (ACL) for the user's access rights.","Complexity is added and efforts are duplicated if every web service  provided by a developer implements or is even aware of all of the above infrastructure. Aside from the infrastructure common to the services  provided, a developer may wish to provide value adding functionality to all or some of the web services . There is currently no way of adding these methods without having to reimplement them for each web service  or without the web service  even being aware that they exist.","Additionally, a company may wish to combine several web services  or parts of several web services  into an existing or new web service . It is time consuming for a developer to construct new web services  that call these other web services , and limiting in that the combinations are fixed at design time. There is no way to dynamically aggregate web services  based on a user's identity or some other criteria.","Furthermore, the location or address of a web service  must remain fixed so that its client applications will always know where to find it. However, the logistics of deployment may dictate that a web service  needs to be moved or exists on multiple servers at the same time. A user may not be able to find a web service  that has been moved from one location to another.","Web services  may be created from existing libraries of functionality with an existing application programming interface (API). In order to restrict access and bill by method, identification data must be provided by the client for every invoked method call. Adding these additional parameters, or any parameter that may be required by the particular business logic involved to an existing API is both complex and time consuming.","Currently, web service  capabilities remain uniform, irrespective of the identity of the client accessing them. This implies that there is no means of tailoring those web services , based on the presumed or assigned roles of the clients. For developers creating applications which consume a company's web services , this software \u2018contract\u2019, i.e., the list of functionality provided by a particular web service , is fixed. For companies providing these web services , there is no standard means of modifying the contract for different developers. Also, these developers, provided with a particular contract for web services , cannot count on the company providing the web services  with a means of limiting usage of these web services  to consumers of the application being developed by the developer.","Typically, the problems listed above are addressed by creating a library encapsulating the common or new functionality which is then consumed from each location where it is needed. This is inadequate here, as it does not offer the flexibility of leaving the web services  in question entirely intact and unaware that they are part of the infrastructure. Nor does it allow a dynamic data-driven approach to the problem since the behaviors are fixed at design time.","Current solutions also do not describe any mechanism for a means to customize that contract in any way, either for the developer of the application that consumes the web services , or for the user of that application. In order to provide this customization, the publisher of the web service  must develop several versions of the web service  in parallel, each version with capabilities unique to each developer.","It is therefore desirable to provide means for better managing functionality for web services .","It is an objective of the invention to provide a novel system and method for managing functionality for web services that obviates or mitigates at least one of the disadvantages of existing systems.","In an aspect of the present invention, there is provided a gateway module for managing functionality for one or more web services. The web services gateway module comprises a client application interface unit for receiving communication from a client application over a standard protocol, a communication processor for processing the communication for a web service, and a web services interface unit for delegating the processed communication to the web service.","In another aspect of the present invention, there is provided a method for managing functionality for one or more web services. The method comprises steps of receiving communication from a client application over a standard protocol, processing the communication for a web service, and delegating the processed communication to the web service.","In another aspect of the present invention, there is provided computer readable media storing the instructions and\/or statements for use in the execution in a computer of a method for managing functionality for one or more web services. The method comprises steps of receiving communication from a client application over a standard protocol, processing the communication for a web service, and delegating the processed communication to the web service.","In another aspect of the present invention, there is provided electronic signals for use in the execution in a computer of a method for managing functionality for one or more web services. The method comprises steps of receiving communication from a client application over a standard protocol, processing the communication for a web service, and delegating the processed communication to the web service.","In another aspect of the present invention, there is provided computer program product for use in the execution in a computer of a method for managing functionality for one or more web services. The computer program product comprises a module for receiving communication from a client application over a standard protocol, a module for processing the communication for a web service, and a module for delegating the processed communication the web service.","Other aspects and features of the present invention will be readily apparent to those skilled in the art from a review of the following detailed description of preferred embodiments in conjunction with the accompanying drawings.",{"@attributes":{"id":"p-0043","num":"0042"},"figref":"FIG. 2","b":["201","201","15","20","300","31","300","32","300","15","25","31","32","201"]},"The client applications  may be end user applications , other web service providers , or any application which requests access to a web service . Some client applications  may be used by client application developers to obtain a web service application programming interface (API) contract to develop other client applications  that will consume or use that particular web service . Each client application  has a client application connection . Client application connections  may be any suitable connection that allows the transfer of information between the client application  and the gateway module . The web service providers  have web services WS to WSx, WS to WSy, and WS to WSz, where x, y, and z are integers greater than zero. The web services  may be different for each web service provider . Each web service  has a web service connection  to the gateway module . Web service connections  may be any suitable connection that allows the transfer of information between the web services  and the gateway module . The gateway module  is an application that adds common and additional functionality, as will be described below, to any web service  registered with the gateway module . The gateway module  remains transparent to the client application  and the web service . Web services  are registered with the gateway module  as described below. In this description, clients may sometimes be referred to as users, consumers, and\/or end users.",{"@attributes":{"id":"p-0045","num":"0044"},"figref":["FIG. 3","FIG. 2","FIG. 2","FIG. 2"],"b":["300","300","310","311","312","300","310","31","15","300","310","311","311","25","312","312","25","32","25","300","300"]},"Alternatively, the gateway module  may not include a client application interface unit , whereby the function of the client application interface unit  is performed by either the communication processor  or an external module. Parts of the remainder of this application will refer to a gateway module  containing a client application interface unit . However, the client application interface unit  may be removed, and the communication processor  modified, as described above.","As is described above, the gateway module  may be used by both client application developers and client application users. When developing client applications  that may use a web service , client application developers may use the gateway module  to obtain a web service API contract from a web service . When a client application  is used by a client application user, the client application  may use the gateway module  to send a method call to a web service. Some method calls instruct a web service to perform a task. Some method calls instruct a web service to return an item or response. The web service  may use the gateway module  to return an item or response to the client application .",{"@attributes":{"id":"p-0048","num":"0047"},"figref":"FIG. 4","b":["25","400","400","15","401","310","311","402","311","25","403","312","25","403","404","400"]},"An aspect of an embodiment of the gateway module  pertains to the field of distributed computing, where software running on a client system interacts with software running on remote server systems. More specifically, where the software running on a server has been developed such that its capabilities can be discovered programmatically using the tools based on a standard network protocol based on a standard language. An example of a standard network protocol is the Internet protocol known as simple object access protocol (SOAP), which is itself based on the standard extensible markup language (XML). The actual data transmitted between the client application  used by client application user and the server code may be transmitted via SOAP. The server functionality is typically referred to as web services. A typical client application  may be either a web browser or an Internet-aware application. The following description refers mainly to SOAP communication, but the gateway module  may be used with other standard protocols based on a standard language.",{"@attributes":{"id":"p-0050","num":"0049"},"figref":"FIG. 5","b":["501","501","15","31","500","1","2","3","32","15","25","31","32","501","500","310","311","312","520","525","530","500","15","25","520","525","500"]},"The client application interface module  may operate on hypertext transfer protocol (http) and SOAP. The communication processor  and the web services interface unit  may be similar to those described above referring to . The authentication module  and the authentication module  may comprise code for authenticating and authorizing a client application . The web service repository  is a centralized registry of web services being exposed. It may store a unique identifier (ID) of the web service , its location, an API contract request string, and a brief description, all of which is mapped to the web service's unique name or uniform resource identifier (URI).","The gateway module  is an application that sits between client applications  and the web services  being consumed, intercepting communication between them. Some communication between client application  and web service  occurs over the SOAP protocol, while some communication includes the exchange of an API contract description, such as a web service description language (WSDL) contract document. The gateway module  acts as a SOAP processor with respect to communication between a web service  and a client application  used by a client application user. Furthermore, the gateway module  acts as an API contract (for example, WSDL) processor with respect to communication between a web service  and a client application  used by a client application developer. Therefore, the gateway module  transparently alters both the way the client application  calls the web service , and how the web service  appears to the client application  without either party being aware of the gateway module .",{"@attributes":{"id":"p-0053","num":"0052"},"figref":"FIG. 6A","b":["25","600","25","15","31","310","601","311","311","25","520","15","602","311","602","525","15","25","603","311","602","609","15","25","603","610","15","31","31","609","610","611"]},"If the client application  does have authorization (), then the method call is passed to the web services interface unit . The web services interface unit  searches the web service registry repository  to determine the location of the requested web service  (). The web service registry repository  provides a mapping from the identity of the web service (a URI) to the physical location of the web service  and any other attributes of the web service  that are desirable to assist the gateway module  to interpret, process, and make actual requests or method calls of said web service . Once the location of the web service  is determined (), the method call is delegated to the web service  via the corresponding web service connection  ().","If the method call does not have a corresponding response (), then the method is done (). Otherwise, the web services interface unit  receives a corresponding response from the web service  (), in response to the method call. The web services interface unit  passes the response to the communication processor  to be passed back to the client application interface unit . The client application interface unit  sends the response through the appropriate client application connection  to the client application  from which the method call originated (). The method is done ().",{"@attributes":{"id":"p-0056","num":"0055"},"figref":"FIG. 6B","b":["25","620","25","15","31","310","621","520","622","622","500","520","523","310","15","622","631","633","520","15"]},"An issued authentication ID may be passed as a parameter with subsequent web service method calls invoked by the client application . The client application interface unit  receives a web service method call () and passes the method call to the communication processor . The communication processor  determines which web service  is associated with the method call. The method call is then passed to the authorization module  to determine if the client application  associated with the authentication ID is authorized to use the method call in the web service  (). For example, authorized client applications  for methods in web services  may be listed in a repository. If the client application  is not authorized to use the method call (), then the method call is rejected () and the method is done ().","If the client application  is authorized to use the method call (), then the method call is passed to the communication processor  to be processed (), i.e., prepared to be delegated to the web service . The authentication ID parameter is removed from the method call and the modified method call is passed to the web service interface unit . The web services interface unit  searches the web service registry repository  to determine the location of the requested web service , as described above. The method call is delegated to the web service  via the corresponding web service connection  ().","If the method call does not have a corresponding response (), then the method is done (). Otherwise, a response is received from the web service  () and sent to the client application  (), as described above. The method is done ().",{"@attributes":{"id":"p-0060","num":"0059"},"figref":"FIG. 6C","b":["25","650","25","15","31","310","311","651","311","25","312","312","530","652","530","25","25","25","500","25","25","652","25","32","653"]},"The web services interface unit  receives the requested web service API contract from the web service  () in response to the API request. The web services interface unit  passes the API contract to the communication processor  to be passed back to the client application interface unit . The client application interface unit  sends the response through the appropriate client application  to the client application  from which the API request originated (). The method is done (). Alternatively, the method may include access restriction measures such as requirements for authentication and\/or authorization, as described above with respect to web service method calls.","The gateway module  is transparent to the client application  and the web services . The gateway module  processes communication between client application  and web service . In the case of a client application developer, a single entry point, i.e., a single address, is exposed for client application developers to retrieve a web service API contract document, such as WSDL. WSDL contains a port, which is a single address in which to bind a client application . A WSDL returned by normal web services  contains its own address. Hence if a client application  has ten web services, the client application  will require ten addresses to connect to these web services  (as depicted in ). An API contract processor in the communication processor , such as a WSDL processor, replaces this port address with the address of the gateway module  before returning the WSDL back to the client application developer. This ensures that the client application  that will be created by the client application developer will send its SOAP requests to the address that is associated with the client application interface unit . Subsequent SOAP requests sent by the client application  are received by the client application interface unit  and delegated to a web method call processor, such as a SOAP processing module, in the communication processor .","Two scenarios are described above: A) requests from a client application user (method calls over SOAP); and B) requests from a client application developer for the API contract (WSDL). In scenario A, the gateway module  acts as a SOAP processor. Scenario A occurs over the SOAP protocol whenever a method of the web service  is invoked. In scenario B, the gateway module acts as an API contract (WSDL) processor. Scenario B does not occur over SOAP and occurs during the design\/development time of the client application  consuming the web service . In both scenarios, there may be two areas of processing: i) the processing of the request before the request is forwarded to the web service ; and ii) if there is a response, the processing of the response before it is returned to the client application .","This description contains references to login and logon procedures. The embodiments of the inventions described in this specification apply to both login and logon procedures. A login reference is intended to include a logon reference and vice versa.","A client application user or client application developer may call a Login method, passing his\/her credentials, through the use of a client application . The credentials may be authenticated and a list of web services  to which the client application  is authorized to access may be established and stored in a repository. After authenticating the credentials, the gateway module  returns an authentication ID to be passed with every method call. Advantageously, this simplifies the authentication and authorization checking steps in the management of web service  functionality. The use of authentication IDs will be described further below.","In order to achieve the transparency described above, client application developers may use parameters added to and\/or modified from existing parameters to method calls of web services  API contract. These extra and\/or modified parameters are created by an administrator or developer of the gateway module  and assist the gateway module  to distinguish method calls from one client application  from method calls of another client application . Furthermore, the extra and\/or modified parameters assist in other administrative functions such as classification and storage of the web service  method calls, and storage of authentication IDs. The API contract request method may also include extra parameters. The areas of processing referred to above relate to i) transformations between the method call received from the client application  and the method call passed to the web service; and ii) transformations between the response, if any, received from the web service and the response passed to the client application .",{"@attributes":{"id":"p-0067","num":"0066"},"figref":"FIG. 7A","b":["701","501","15","701","701","500","701","311","500","701","702","25","702","500","25"]},"The gateway module  receives a web service SOAP response (WS response)  from the web service , as described above. The SOAP processor of the communication processor  translates the WS response  into a SOAP based response (client response)  that the client application  will understand. The translation may be the addition or modification of a parameter in the WS response. The gateway module  then sends the client response  to the client application , as described above.","The ability to act as a SOAP processor allows the functionality of the web services  to be better managed. Since the web services infrastructure  is listening to SOAP communication between client  and web service , the web services infrastructure  has the information to determine what methods  are being called, under what conditions and even by whom, provided that identification information was given by the caller. Furthermore, the web services infrastructure  is able to check authentication, authorization, and\/or billing information and determine if the method call should be allowed to proceed to the service. When the response from the web service  returns, the web services infrastructure  is then able to update any relevant billing or audit information, as described below. In general the web services infrastructure  can perform infrastructure functions common to the related web services  because the web services infrastructure  is privy to the information passed from client application  to web service .",{"@attributes":{"id":"p-0070","num":"0069"},"figref":"FIG. 7B","b":["750","501","15","751","25","751","500","751","311","500","751","752","752","500","25"]},"In response to the API call , the gateway module  receives an API contract (for example, WSDL)  from the web service  as described above. The API contract processor of the communication processor  translates the WSDL  into a modified WSDL  that the client application developer will use. The translation may be the addition or modification of a parameter in the WSDL , such as the modification of an address, as described above. The gateway module  then sends the modified WSDL  to the client application , as described above.","By modifying the API contract (WSDL)  as it is delivered from the web service  to the client application , the web services infrastructure  is able to enforce the requirement of the consuming client application developer to insert parameters into any or all method calls in that web service . This allows the newly developed client application  to believe the added or amended parameters are part of the web service  method being invoked while the web service  is not even aware that parameters exist. When the new client application  calls the method , the SOAP processor in the gateway module  strips out the extra parameters, performs any processing required, and passes the SOAP message (minus the extra parameters)  onto the web service . For example, the web services infrastructure  can receive and process a user identifier parameter which allows for the association of method calls ,  to a given client application  and all of the authorization and billing information appropriate for that client application . The web services  are not concerned with the identifier and the identifier need not be a parameter for any of their methods . From the client application  point of view, however, the methods  use this parameter.",{"@attributes":{"id":"p-0073","num":"0072"},"figref":["FIG. 8","FIG. 8","FIG. 8"],"b":["500","753","702","1","753","702","702"],"ul":{"@attributes":{"id":"ul0001","list-style":"none"},"li":{"@attributes":{"id":"ul0001-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0002","list-style":"none"},"li":["method1(string param1, int param2, MyType param3);","method2(char param1, MyType param2); and","method3( ).\n\n also depicts the modified web service WS API contract  as seen by the client application  with method calls, i.e., client calls , that contain an additional parameter \u201cgparam1\u201d of type \u201cAuthID\u201d. For example, this additional parameter may be an identifier that the client application  is authorized to use the method in the web service . In this example, the additional parameter is placed as the first parameter to all client calls . Other parameters may be added to the client calls . Thus, the three corresponding examples of client calls  in the client application  are:\n","method1(AuthID gparam1, string param1, int param2, MyType param3);","method2(AuthID gparam1, char param1, MyType param2); and","method3(AuthID gparam1).\n\nAdditionally, if it is a requirement for a web service  to have certain parameter types converted to other types (from the perspective of the client caller), these parameters, along with the associated target types, and the conversion method would be described in the web service registry , or an additional table indexed off of the web service registry .\n"]}}}},"By modifying the API contract, the gateway module  can make it appear that any web service  has any set of methods as desired, regardless of what methods the service actually implements. As long as calls to these methods are honored somewhere inside of the web services infrastructure , it appears to the client application  as though the client method was really implemented by the web service . The web service  remains unaware that the client method exists let alone that the separate client call  was made. In general the web services infrastructure  is able to dynamically modify the methods that would appear to be offered by a web service ; even adding methods that might have a central implementation somewhere inside of the web services infrastructure. For example, for more convenient calling on the client side, the web service provider  may add a DoMethod( ) method that takes an enumeration of the methods offered by a given web service  to each web service  it offers.","In similar ways that extra methods can be added to a given web service , new virtual services can be composed of methods from various other web services  using the infrastructure . By creating a complete API contract  for a virtual service that does not really exist, the infrastructure  can then route the client calls  made to said virtual service methods to the real web services  that implement the WS methods . These virtual services could be composed by a system administrator through an application that interfaces with the infrastructure's databases.","Again, through modification of the API contract  whenever it is requested, the gateway module  is able to make it appear that a web service  resides at any virtual location. By ensuring that the WSDL processor of the gateway module  intercepts references to the web service  at this virtual location, the gateway module  can then route the call to one of the physical locations where it actually exists. When a web service  changes its physical location, it is just a matter of updating the data table in the web service registry repository  that indicates its location to the gateway module . The original entry in the web service registry repository  may be created through a gateway module system administration application when a web service  is registered with the gateway module . Clients need not even be aware that the web service  has moved.",{"@attributes":{"id":"p-0077","num":"0082"},"figref":"FIG. 9","b":["900","900","310","311","312","530","950","960","965","970","980","520","525","940","945","900"]},"The client application interface unit , communication processor , web services interface unit , authentication module , authorization module , and web services registry repository  may be similar to those described above. The metering module  keeps track of the usage of web service client call  methods for the specific client application , including the number of client calls  made and amount of server resource consumed. The web method call processor  comprises code to perform the modifications to the method calls ,  and responses ,  described above. The web method call processor  may be a SOAP processor, or any suitable processor for other web method protocols. The API contract processor  comprises code to perform the modifications to the API method calls ,  and WSDL ,  described above. The API contract processor  may be a WSDL processor, or any suitable processor for other web service API. The billing unit  comprises code to bill client applications  for the transparent use of web services . The login services module  comprises code to administer and service a login request received from a client application , and to administer authorization and authentication of a client application . The login request may be passed directly to the login services module  from the client application interface unit . Alternatively, the login request may be first sent to the communication processor  to be sent to the login services module. The authentication ID provider  may comprise code which assigns one or more authentication IDs to a client application  when the client application  logs into a web service . The authentication ID validator  may comprise code to validate the authentication ID. These components will be further described below.",{"@attributes":{"id":"p-0079","num":"0084"},"figref":"FIG. 10","b":["25","1000","1000","15","25","1001","15","25","15","701","751","25","703","753"]},"If the client application interface unit  receives a login request () to a web service , the client application interface unit  sends the login request to the login services module . Alternatively, the login request may be passed to the communication processor  to be passed onto the login services module . The login services module  processes the login request (). The authentication module  validates the client application , as described above. If the login request is successful, i.e., the client application  is valid, then the authentication ID provider  issues an authentication ID for the client application . Information regarding the web service  for which the authentication ID is valid may be stored in the authentication ID validator . Alternatively, the information relating to the issued authentication ID may be stored in an additional repository accessible by the authentication ID validator . The client application interface unit  returns the authentication ID to the client application  (). The gateway module  now returns to a state of listening for communications (). This thread will be further described below.","If the client application interface unit  receives a client call  or a developer call  (), the client application interface unit  passes the call ,  to the communication processor . The call ,  contains an authentication ID passed as a parameter. The web method call processor  would process a client call  (), as described above. The API contract processor  would process a developer call  (), as described above. The removed authentication ID is sent to the authentication ID validator  for validation. If the authentication ID is valid, then the communication processor  passes the corresponding WS call  or API call  to the web services interface unit  to be delegated to the appropriate web service  (). Information regarding the client application  and the call ,  may be logged in a repository. The gateway module  now returns to a state of listening for communications ().","If the web services interface unit  receives a WS response  or a WSDL  (), then the web services interface unit  passes the WSDL  to the communication processor . The web method call processor  would process a WS response  (), as described above. The API contract processor  would processes a WSDL  (), as described above. If the call ,  and the response ,  are asynchronous, then information stored in a repository may be accessed to determine the client application  which sent the original call ,  corresponding to the response , . If the call ,  and the response ,  are synchronous, then the identity of the client application  which sent the original call ,  is clear. The client response  or modified WSDL  is passed to the client application interface unit  to be sent to the client application  (). The gateway module  now returns to a state of listening for communications ().","Other steps may be added to the method (), including metering the gateway module  usage and billing the client application , as well as billing a web service provider .","In alternative examples of a communication processor , the web method call processor  and the API contract processor  may comprise further sub-components, to handle their tasks. For example, the web method call processor may either contain a SOAP method call processor and a SOAP response processor. Similarly, the API contract processor may contain a WSDL communication processor and a WSDL response processor. Method call processors for other protocols and API contract processors for other API contract documents may be added to the web method call processor and the API contract processor, respectively. Furthermore, the communication processor  may be created to only contain desired sub-components.","An alternative to the login thread (----) described above will now be described. Some of the detail in this alternative description may be used to augment the description of the above thread as well.","Using a secured channel is safer but slower than an unsecured channel since a secured channel requires the extra encryption\/decryption steps. An alternative solution is to have the client application  log into the web service  once by sending client application credentials, typically a user name and password, over the secure channel and in return the client application  will receive a unique authentication identifier (ID) over the secured channel. Sometimes an authentication ID is called a session ID. However, there is a distinction between a session ID that refers to a locked communication between a client and a server and a session ID that refers to the fact that authentication has occurred. Thus, the term authentication ID is used in this specification.","Successive calls to the web service  are then made over an unsecured channel with the authentication ID to identify the client application . Since the client application credentials are not sent during the successive calls, the calls no longer needs to be done over a secure channel. The calls can be sent over an unencrypted channel, such as http. This will improve performance as well as limit the number of times that the client application credentials are sent. When the server receives a web service call, it will authorize the client application  by verifying that the authentication ID is valid at that point in time.","This use of an authentication ID is only partially acceptable since the client credentials are safe as they are passed over the secure channel once and the client application  can still be authenticated for access to web services using the authentication ID. The problem is that since the web service calls are not done over a secured channel, the authentication ID could be compromised. Anyone who is observing the unsecured channel could note the authentication ID as it is used in the web service calls. The observer could then reuse this authentication ID and gain unauthorized access to the web service .","One adaptation to the use of an authentication ID is to have the authentication ID time out after a certain period of time. Once an authentication ID has expired, anyone who has obtained it with or without authorization will no longer be able to use it and the authorized user will have to logon again and receive a new authentication ID. While the time-out of an authentication ID solution is better than no solution, there is still the problem that a misuse of a web service may occur for a limited time.","Another aspect of the gateway module  described here uses a pool of authentication IDs. A pool of authentication IDs contains a plurality of authentication IDs. As described above, the authentication ID provider  may comprise code which assigns one or more authentication IDs to a client application  when the client application  logs into a web service . These authentication IDs are passed as parameters in the method calls ,  as described above. The authentication ID validator  may comprise code to validate the authentication ID. This authentication code be done in a number of ways. In an example of an embodiment of the present invention, a working table mapping is setup when the client application  is authenticated (i.e., authentication ID returned). The authentication ID is checked every time a method is called, then deleted if the client application  logs off or the authentication ID expires. An alternative of using a hashing system would require care to remain as secure.","The user of a client application  logs onto a web service  by sending client application credentials, typically a user name and password, over a secured channel as described above. In return, the client application  will receive a group or pool of authentication IDs. The pool of authentication IDs returned is secure since the pool is sent back over the secured channel. The exact number of authentication IDs returned can vary depending on the system administration requirements for the web service . Once the client application  has this pool of authentication IDs, the client application  may use a different authentication ID from this pool with each successive call to the web service . The authentication ID that is used will then expire upon use so that it can not be reused. This means that even if an eavesdropper is able to compromise an authentication ID, the eavesdropper will not be able to use it since it can only be used once.",{"@attributes":{"id":"p-0092","num":"0097"},"figref":["FIG. 11","FIG. 11"],"b":["25","1","1","15","1","15","1","15"]},"After the client application  has used up all the authentication IDs in the pool that was given, the client application  may log on again to receive another pool of authentication IDs. No one other than the client application  will be able to use the authentication IDs since the authentication IDs are always given to the client application  over a secured channel and the authentication IDs expire upon use. Each authentication ID is not compromised during or after its use over an unsecured channel because an unauthorized person who manages to capture an authentication ID only receives an expired authentication ID.","Further security features may be added to the pool of authentication IDs. For example, unused authentication IDs in a pool of authentication IDs can be set to expire after a preset event such as the expiry of a period of time.",{"@attributes":{"id":"p-0095","num":"0100"},"figref":"FIG. 12","b":["1200","310","1201","15","940","980","940","1202","15","940","310","15","1203","1204","15"]},{"@attributes":{"id":"p-0096","num":"0101"},"figref":"FIG. 13","b":["701","701","310","701","1301","701","311","945","1302","701","1305","1302","15","701","1303","15","1303","701","1305","15","1303","702","1304","1305"]},{"@attributes":{"id":"p-0097","num":"0102"},"figref":"FIG. 14","b":["1400","1400","900","1400","940","945","520","525","1401","520","525","940","945","1401","15","1401","940","945","520","525","1401","311"]},"Alternatively, the repository  may be accessed by components of the gateway module , including the metering module  and the billing module . Client applications  may be charged for the pool of authentication IDs based upon the size of the pool of authentication IDs. Packages of authentication IDs may be available for a client application  to order. For example, a client application  may order a basic package of  authentication IDs, or a premium package of  authentication IDs. Other sizes of packages may be preset. A client application  may also be prompted by the authentication ID provider to enter the number of authentication IDs in the pool of authentication IDs.","Alternatively, the billing module  may charge based upon use of an authentication ID. In such a scenario, the metering module  tracks and records usage of the pool of authentication IDs. The information collected by the metering module  is stored in the repository , or another central repository which may be accessed by components of the gateway module .",{"@attributes":{"id":"p-0100","num":"0105"},"figref":"FIG. 15","b":["1500","1400","15","1400","310","1501","520","15","1502","520","1401","15","15","1502","1505","15","1502","940","940","310","15","1503","15","701","940","1401","940","15","1504","1506","15","1500","15","20","15","15"]},"The assignment of the pool of authentication IDs may be registered in the information repository . Alternatively, the assignment of the pool of authentication IDs may be registered with the authentication ID validator . The registration of the pool of authentication IDs may be in the form of a file containing the assigned pool of authentication IDs, their status, such as used and not used, and client application credentials information, such as the user name and password. Other information may be added to the registration file as desired. The registration file may be referenced by the authentication ID validator  when the client application  uses each authentication ID.","One aspect of the gateway module  relates to the field of dynamic application programming interface (API) and type reflection as well as dynamic modification of these API and types used. Another aspect of the gateway module  relates to the authentication of a client application  to gain access to the web services  that are hosted by the remote server. Another aspect of the gateway module  pertains to the field of web services hosting, monitoring and administration. Preferably, the gateway module  is independent from the platforms on which the web services  are hosted. Furthermore, the gateway module  is independent from the protocol used to access the web services . A further aspect of the gateway module  pertains to the field of billing and authorization of web services .",{"@attributes":{"id":"p-0103","num":"0108"},"figref":"FIG. 16","b":["1601","300","1601","15","1600","25","1600","1610","1620","1630","1640","1650","1660","300","25","1600"]},{"@attributes":{"id":"p-0104","num":"0109"},"figref":"FIG. 16","b":["15","1650","300","15","300","1620","1640","1640","1640","1680","1600","1600","1610"]},"The gateway module  delegates the authorized requests to the actual web service , which may be either hosted locally or on remote systems. The reporting module  generates reports on the usage for billing and auditing purposes. The deployment and registration module  registers local and remote web services  with the gateway module . There is also an administrator console  that is used to perform administration tasks, including provisioning users, setting or modifying access rights, generating reports, and other tasks desired for administration purposes. Finally, the repository  is used to store information desired and accessible by components of the internal web services management system . The repository  may be a database. The components of the internal web services management system  may be software code or code embedded in hardware.","Alternatively, the components of the internal web services management system  may be components added to a gateway module , , .","With another aspect of the gateway module , a mechanism is described for returning a web service contract to a third-party client application developer, which is tailored to that specific developer, who, in turn, can tailor that contract to different end users of that client application . This increased flexibility is made possible by adding a layer above the web services , such that the developer of those web services, hereby referred to as the web service developer, does not need to be concerned with the process of limiting access to third-party developers, who are programmatic consumers of the web services , or to end users. This extra layer, referred to as the gateway module , , , can provide this flexibility at two different points in time, one during development and the other at run-time.","In the web service commerce model, each web service provider  hosts a set of web services  either to be consumed over the web by an application publisher, which in turn caters to the end user (i.e., consumer), or another web services provider . The other web service provider  may bind to those web services  across the Internet, aggregate the web services  with their own set of web services , or build upon the web services  to provide more sophisticated web services  of their own. Therefore, a chain of producer-consumer relationships exists between the client application  and suppliers of the lowest level web services . The scenario can be contrasted with the traditional web application model, which is client-server oriented, operating between the web browser on the end user side and an application hosted on a particular web site.",{"@attributes":{"id":"p-0109","num":"0114"},"figref":"FIG. 17","b":["1700","15","20","1700","15","20","1","9","1","8","1","5","1","7","1","8","25","15","1","2","4","5","6","8","25","2","5","25","1","3","25","20","1","25","20","4","25","20","3","25","20","3","25","20","4","25","20","3","25","20"]},"Each party in the supply chain  would perceivably have similar concerns. For example, each might want to keep a database of its users, whether private or corporate, and authenticate, authorize and bill them accordingly. Since the technology for hosting of web services  is relatively new, currently each entity in the supply chain implements their own business logic to handle the aforementioned concerns.","The following is a summary of how a web service infrastructure ,  provides a chain of producer-consumer relationships, according to an embodiment of the invention. The gateway module , ,  caters to the common hosting, monitoring and administrative needs of entities in the web service supply chain. This embodiment concerns the manner in which the gateway module , ,  is architected and deployed. The embodiment includes four features.","One feature is that the web services infrastructure , ,  includes one single logically coherent entity (the gateway module , , ) through which communication between client applications  and hosted web services  are routed. Tightly associated with it is any logic that requires an understanding of how to handle events that occurred within the web services . The centralization of this logic is desirable to provide a comprehensive solution for the web service provider .","Consider a typical scenario where the provider  needs to authenticate and authorize the client , log any events that occur during any access, delegate the request to the appropriate web service  as necessary and log any events that occur during the process. At the least, an event infrastructure should be provided to all modules of which the infrastructure is aware, so that events can be sent and that the infrastructure is aware of any module that need to be notified of events. For example, the billing module  is notified in the event that a web service  is being accessed in order to do its job; and the authorization module  might want to notify that a login has failed. The modules should either directly or indirectly be able to communicate with each other. In an implementation where no such centralized infrastructure exists, it is difficult to add modules that need to be notified of events. Thus a comprehensive solution is not be practical without a centralized infrastructure, such as the web services infrastructure , .","Another feature is that the gateway module , ,  is able to support off-the-shelf web services  as-is without need for adaptation. This is achieved by monitoring low-level requests that comes through, executing necessary logic and finally delegating to the appropriate web service. This is beneficial to both web service providers  and web service authors, as they do not have to adapt their logic in order for the services to be hosted, administered and monitored.","Yet another feature is that the gateway module , ,  is capable of masking the interfaces, addresses and service description of each web service  to appear different to client applications , which are able to access the web services  as advertised in a transparent manner.","The masquerading of interface and service description is desirable to allow the web service provider  is to be able to rename web services functionalities and add parameters to their list of formal arguments. This capability is particularly desirable for authentication and authorization purposes. For example, the provider may want to assign the client an authentication ID that once authenticated, requires the client to access web service functions (or methods) with the authentication ID. Here the gateway module , ,  disguises these web service functions as having an extra authentication ID parameter.","The masquerading of web service addresses serves the above purposes. Another effect is that it allows the service provider  to transparently aggregate services offered by another web service provider  as though it is one of its own.","A fourth feature is that the gateway module , , , along with all the accompanying functionality, is scalable across multiple processing units, and state data can be persisted across multiple requests. This is achieved by having a thread-safe data store. Thus, in one example of a gateway , all of the data in the entire system, including the web service registry , the web method registry, the authorization tables, the billing tables which indicate how to bill clients, the actual billing data which indicate the details of a bill, potentially the authentication tables (users\/passwords), potentially the authentication ID to user mappings, and the audit logs are kept in a thread-safe data store, such as the repository . There is no state information in any of the modules of the gateway module  as all state is effectively kept in this data store. This feature is an implementation detail of how the various modules accomplish their intent.","The gateway module , ,  enables the production of a homogeneous, comprehensive and extendable solution that will work for parties in a web service distribution framework. The gateway , , , can recursively service a chain of web services providers .","Another problem that arises from providing web services  is that in order to create revenues, the web services  must also incorporate billing of the client applications , auditing of all transactions that occur, administration of client applications  and billing schemes and any other common functionality that arises from the fact that a web service  is being sold to a client application . For example, each web service provider  can host any number of web services . Each web service provider  can contain any number of functions (or methods), which can potentially be billed in a different manner. Service providers  might wish to tailor billing and authorization schemes for each function to its client applications . Therefore, the permutation of user to billing\/authorization pairs to be maintained can be large.","There are many complexities regarding billing and authorization. Each billing and authorization method can take on any number of parameters. For example, a pay per use billing scheme can be tagged with any price. Groups of functions, perhaps across web services , might only make sense to be billed and authorized the same way. For example, blur image effect filters published by different companies and distributed across different web services . Billing schemes can vary across time and temporal cycles. For example, a web service provider  might want to charge more during busy hours. Authorization may be independent of billing schemes. For example, an administrator might want to temporarily deny a user from accessing certain functions. However, the billing scheme should remain effective once the restriction is lifted. Finally, some billing methods are intrinsically tied to authorization. For example, the client might pay $ to use a given web service function one hundred times. Afterwards, the web service  will have to become unavailable.","Billing schemes may be created such that a billing module in the web services management system  (or the billing module  in the gateway module ) requires information regarding which web services methods a client application  has used. Such information is tracked by the logging and metering module  (or the metering module ) and stored in the repository  (or a central repository of the gateway module ). Alternatively, the logging and metering module  (or the metering module ) may pass the web services methods usage information directly to the billing module (or billing module ) to be used or stored for later use.","The following description will refer to web services management systems . However, the authorization schemes portion of the following description also applies to the gateway module .","A web service comprises one or more methods which users or client applications may invoke. Different web services may have a different amount of methods. In embodiments of the gateway module , , , web services are registered with a central repository. Identifications of the methods of the web services are stored in the repository and grouped into bundles. A bundle of methods contains one or more methods from one or more web services. For example, consider four web services where a first web service contains 10 methods, a second web service contains 20 methods, a third web service contains 100 methods, and a fourth web service contains 50 methods. A bundle may be created to contain one method which belongs to the first web service, two methods which belong to a second web service, and six methods which belong to a fourth web service. Another bundle may be created to contain six methods which belong to the first web services, 11 methods which belong to the second web service, 71 methods which belongs to the third web service, and all 50 methods which belong to the fourth web service. Other combinations of methods belonging to a plurality of web services containing a plurality of methods may be created.","With reference to , the following describes how the web services management system  is used to package web services.  shows client applications  assigned to packages  comprising of bundles . The bundles  comprise web services methods or routines  which a client application  may use when calling web services methods . In this example, the basic bundle  contains matrix manipulation, math, miscellaneous, and third party web services methods .","Web services methods are registered in the repository  (or a central repository in the gateway module ). The web services methods are then grouped into bundles . Client applications  may also register with the web services management system . Client applications  usage rights relating to the bundles are stored in the repository . Thus, by accessing the repository  to determine if a client application  has usage rights to a bundle, the authentication and authorization module  determines if a client application  is authorized to access a web services method in that bundle.","The bundles  are grouped into packages . The web services methods  of bundles  are billed and authorized in the same manner within the same package . For example, Package 1 contains a basic bundle, a file conversion bundle, and a text editing bundle. Package 2 contains a basic bundle, a bitmap methods bundle, a vector methods bundle, and a special effects bundle. Other packages  containing other combinations of bundles  may be created.","Advantageously, providing web services functionality through packages  eliminates much of the logistics needed to manage\/present billing and authorization requirements. Tables or records in the repository  may contain a listing of methods  of all web services registered with the web services management system . Methods  of different web services may be organized together into a bundle .","Packages  organize bundles  into default billing\/authorization plans to which client applications  may subscribe. The same bundle can reside in different packages , with different billing\/authorization specifications. In the example shown in , the basic bundle is contained in both packages .","A client application  may only subscribe to one package . This limitation advantageously reduces the logistics since allowing a client application to subscribe to more than one package  may create a potential scenario of the two packages  both containing the same bundle  (or even different bundles  with the same methods) but associated with a different billing\/authorization plan. For example, the basic bundle in Package 1 is priced at $1 per use and is limited to use on weekdays. The basic bundle in Package 2 contains the same web services methods the basic bundle in Package 1. However, there are no limitations to availability for the basic bundle in Package 2 and therefore, a price of $2 per use is assigned to Package 2.","In one example of a billing scheme, a web service administrator can override the default billing\/authorization plan specified in the package  to which a client application  subscribes. Advantageously, this allows for further flexibility for billing client applications .","Billing and\/or authorization schemes may be created to vary depending on the time of day, day of the week, week of the month, etc. Alternatively, billing\/authorization may expire after a set amount of time has passed since the package  was assigned to the client application. For example, a client application may sign up for a trial package of web services that allows the client application to use the services for a trial period, like a month, after which access will expire. Thus, the system  may be designed to be aware of time and temporal cycles using time stamps as to when the client application signed up, the server clock, and other means of measuring time available to the server upon which the web services management system  is implemented.","The logging and metering module  and authentication and authorization module  modules may employ a plug-in architecture which allows new components to be easily added without changing the core architecture. There are several ways in which this plug-in archetecture can be accomplished. One example provides that the core architecture would search a particular location on the server, in which the web services management system  is implement, for the existence of billing\/authorization schemes. Since the architecture can be designed to always search the same location, additional schemes can be added. For example, other bundles  may be added to a package , or other web services methods  may be added to a bundle .","The determination of a client application's permissions to use a given resource may depend on the current standing of the client application's billing data. For example, if a client application's billing type specifies that the client application has paid a certain fee which allows the client application to make X number of calls to a bundle of methods, then on the (X+1)th call that client application will not be authorized to make the call. To achieve this, the authentication and authorization module  may query the logging and metering module , or the logging and metering module  may set some state in the authentication and authorization module .",{"@attributes":{"id":"p-0135","num":"0140"},"figref":"FIG. 19","b":["1900","1900","1801","15","1901","1803","1802","1801","1902","1803","1802","1903","1801","1904","1905"]},"Other steps may be added to the method (), such as registering a web service with the web services management system , registering a client application  with the web services management system , and storing in the repository  the web services and the client applications  which are authorized to access the web services methods .","The web services infrastructure ,  creates value directly to the web services provider , in that it specifically addresses the need for a web service hosting architecture described above. It could similarly address this problem for any company that wants to develop and host a collection of web services .","Of notable advantage is the fact that the web services  making use of the gateway module , ,  do not have to be designed with its use in mind. Any SOAP service can be used with the web services infrastructure . Furthermore neither the web services  nor the clients  are aware the gateway module , , , lies between them. In this regard, the system , ,  is transparent. Since the system , ,  is built on the SOAP and XML standards, it will remain viable going forward as web services  and their usage continue to evolve.","The purpose and practical use of the gateway module , , , is that it be deployed on the servers which host a company's web services . The web services  are registered with the web service registry repository  and an administrator may set up user rights, billing schemes and any other infrastructure for these services.","The gateway module , , , or web services management system , provides value to the web services provider , in that it allows for the tailoring of functionality on a per-client application basis. The alternative would be to develop different versions of its web services  for different customers, thus requiring duplication of code and additional strains on disk space, to maintain multiple copies of similar code. The gateway module , , , provides the framework around which the web services provider  can track usage of the web services  and charge accordingly, on a per-client application basis.","The gateway module , , , is also designed for scalability and portability, in the sense that it can be sold as a separate product, to be run on the third-party developer's server, to allow the third-party developer to restrict access to the end users who are running the application  consuming the web services  or the third-party developer's own web services .","The pool of authentication IDs is valuable to the end user since they will know that nobody can misuse their authentication ID and make use of the web service  that they are paying for. It is also good for the web services provider  or host, since web service access will be more secure which may be a requirement to gain contracts with certain clients. The pool of authentication IDs may be used independently from the gateway module , , .","The gateway module , , , makes possible the implementation of a comprehensive solution for web service providers  by serving their web service hosting, monitoring and administration needs. The web service infrastructure , ,  is applicable to any party in the chain  of web service providers . This lowers development, distribution, maintenance and support cost for the web services provider or host, which will pass on to the web service providers .","The ability of the web service infrastructure to abstract away web service addresses and signatures provides web service providers with high degrees of flexibility on how the web services are to be managed and presented to the end users, who in turn benefit from interfaces that are presented in a well-organized manner.","The ability of the web service infrastructure to aggregate services provided by external entities promotes software reuse and collaboration between web service providers. Since the web service infrastructure is scalable across multiple processing units, web service providers gain addition deployment flexibility, and invest in hardware only as needed.","The gateway module , , , provides an elegant, comprehensive and extendable system for handling the most complex of web services  billing and authorization scenarios. To web services providers , the gateway module , , , means reduced administration, resource and upgrade costs. To the end users, the gateway module , , , opens up the possibility of finely customized billing and authorization options.","The gateway module , , , is not dependent on the transport layer. The gateway , , , performs authentication through the payload, i.e., parameters in SOAP messages. With the gateway module , , , client applications  do not have any direct contact with web services provider . Since the web services provider  is not exposed to client applications , advantageously web services providers  of the registered web services  in the gateway module , , , do not have to implement authentication.","The gateway module , , , according to the present invention may be implemented by any hardware, software or a combination of hardware and software having the above described functions. The software code, either in its entirety or a part thereof, may be stored in a computer readable memory. Further, a computer data signal representing the software code which may be embedded in a carrier wave may be transmitted via a communication network. Such a computer readable memory and a computer data signal are also within the scope of the present invention, as well as the hardware, software and the combination thereof.","While particular embodiments of the present invention have been shown and described, changes and modifications may be made to such embodiments without departing from the true scope of the invention."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The invention will be further understood from the following description with reference to the drawings in which:",{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIGS. 6A","b":["6","6"]},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIGS. 7A"},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIGS. 7B"},{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIG. 13"},{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIG. 14"},{"@attributes":{"id":"p-0038","num":"0037"},"figref":"FIG. 15"},{"@attributes":{"id":"p-0039","num":"0038"},"figref":"FIG. 16"},{"@attributes":{"id":"p-0040","num":"0039"},"figref":"FIG. 17"},{"@attributes":{"id":"p-0041","num":"0040"},"figref":"FIG. 18"},{"@attributes":{"id":"p-0042","num":"0041"},"figref":"FIG. 19"}]},"DETDESC":[{},{}]}
