---
title: Error simulation
abstract: An error simulation module may receive an indication of an external function call made by a computer application program. In response to the function call, the error simulation module may provide a simulated output parameter to the computer application program. The error simulation module may receive an indication of a behavior of the computer application program in response to the simulated output parameter.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09075921&OS=09075921&RS=09075921
owner: Red Hat, Inc.
number: 09075921
owner_city: Raleigh
owner_country: US
publication_date: 20110504
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND","DETAILED DESCRIPTION"],"p":["This disclosure relates to the field of software testing and, in particular, to error simulation in a computer application program.","Computer application programs are software, consisting of instructions and data, that run on processing systems such as computers. The processing systems may execute the instructions in the computer application program using the data contained therein and\/or other data received from other sources (e.g., user input, other computer application programs, etc.). Occasionally a computer application program may encounter an error during processing. The error may be a flaw, mistake, failure, or fault in the computer application program that produces an incorrect or unexpected result, or causes the program to behave in unintended ways. In general, the error may arise from mistakes made by software developers in either a program's source code or its design. In addition, some errors may be caused by compilers producing incorrect code.","Generally, most computer application programs cannot handle an error or other non-expected process or data flow. Some errors may have only a subtle effect on the functionality of the computer application program and may be undetected for a long period of time. Other, more serious, errors may cause the computer application program to crash or freeze, partially or completely interrupting the functionality. These, or other errors, may be used to exploit the system, such as by allowing a malicious user or program unauthorized access. In general, testing how a computer application program will respond to the occurrence of such an error is a difficult and time consuming process. Testing may require access to the source of the computer application program, which a third party may or may not have, and may require that the program be recompiled.","The following description sets forth numerous specific details such as examples of specific systems, components, methods, and so forth, in order to provide a good understanding of several embodiments of the present invention. It will be apparent to one skilled in the art, however, that at least some embodiments of the present invention may be practiced without these specific details. In other instances, well-known components or methods are not described in detail or are presented in simple block diagram format in order to avoid unnecessarily obscuring the present invention. Thus, the specific details set forth are merely exemplary. Particular implementations may vary from these exemplary details and still be contemplated to be within the scope of the present invention.","In one embodiment, an error simulation module simulates the occurrence of an error in order to test the resulting behavior of a computer application program. In response to a function call by the computer application program, the error simulation module returns an unexpected output parameter (or return value) to the computer application program. The returned output parameter may be determined from a configuration file which may be created for the purposes of error simulation. The error simulation module may monitor the behavior of the computer application program in response to receiving the output parameter. This allows an application developer, system administrator, user, or other person to determine how the computer application program will react to the occurrence of an error.","The error simulation techniques described herein simplify the procedure of testing the response of a computer application program to an error. The program may be tested without requiring access or changes to the source code of the program. Thus, a tester may simulate errors on a third-party computer application program. In addition, it is not required to rebuild or recompile the code of the computer application program in order to simulate the errors. This makes the error testing process significantly cheaper, faster, and easier.",{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 1","b":["100","100","110","110","110","140","100","140","100"]},"Operating system  may include software, consisting of programs and data, that runs on computing device . The OS  manages computer hardware and provides common services for efficient execution of various computer application software programs, such as computer application program . The OS  may include a number of shared libraries  accessible to computer application program  running on top of the OS . The libraries  may provide, for example, well defined programming sequences that the applications can reuse. These sequences may be referred to as functions. Numerous interfaces may exist in the OS  to allow computer application program  to access the needed libraries. The shared libraries  may be stored on a storage device . Storage device  may be, for example, memory, such as read-only memory (ROM), flash memory, random access memory (RAM), etc., or a mass storage device, such as a magnetic or optical storage device. Storage device  may store various information regarding operating system  and computer application program . Storage device  may store one or more shared libraries , each of which may include one or more functions accessible to all or a subset of the computer application programs  running on computing device . In one embodiment, one or more shared libraries may be stored externally to computing device  and be remotely accessible, such as over a network. Shared libraries  may be provided by operating system  or by some other computer application program running on computing device .","When computer application program  makes a function call to one of shared libraries , the function performs an associated subroutine (possibly using one or more input parameters supplied by computer application program ) and generates one or more output parameters (or return values). These output parameters are provided to computer application program , which may execute a series of instructions along a corresponding software path in response to the output parameter. For example, one function may be used to open a particular file (e.g., the OpenFile function). Computer application program  may call the function (e.g., using an application programming interface (API) call) from shared library . The function call may include one or more input parameters, such as the name of the file to open. The function may perform the steps to open the specified file and return an output parameter (or return value) to computer application program  indicating whether or not the file was opened successfully. For example, if the file was found and opened, the return value may be \u201cOK,\u201d but if the file was not found or opened successfully, the return value may be \u201cFAIL.\u201d Computer application program  may include different execution paths depending on the received return value. For example, if the return value was \u201cOK,\u201d computer application program  may move on to a next instruction, but if the return value was \u201cFAIL,\u201d computer application program  may close or exit. In some embodiments, the execution paths for certain conditions may be unknown, undefined, or contain errors. Error simulation module  allows a tester to simulate the return values provided by the function in shared library  and monitor how computer application program  responds. Error simulation module  may be an independent software program or may be part of another program running on computing device , or may be part of operating system . In one embodiment, the simulated return values may be part of a configuration file  which may be stored, for example, in storage device . Configuration file  may be, for example, a database, table, or some other datastructure.","Other examples of functions available in shared library  may include memory allocation, reading a file, or reading a number of files in a directory. For memory allocation (e.g., the AllocMemory function), the input parameter provided by computer application program  may include the requested memory size. The output parameters may include a location of the memory, if the allocation was successful, or a zero or other value if there is insufficient memory to satisfy the request. In one embodiment, error simulation module  may return a zero to computer application program  in order to monitor the response. For reading a file (e.g., the ReadFile function), the input parameter may be a file name and the output parameters may include \u201cOK,\u201d if the read was successful, or \u201cELATER\u201d if the file is currently in use by some other program or user. In one embodiment, error simulation module  may return \u201cELATER\u201d to computer application program  in order to monitor the response. For reading a number of files in a directory (e.g., the FilesCount), the input parameter may include the directory name. The output parameters may include the number of files in the directory. In one embodiment, error simulation module  may return an incorrect count value, such as a negative or very high number, to computer application program  in order to monitor the response.",{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 2","b":["120","222","224","222","110","222","134","110","134","134","222","110","110"]},"Simulation analysis module  may receive an indication of program behavior from computer application program  in response to test scenario identifier module providing a simulated return value. As described above, computer application program may enter different execution paths depending on the return value received. Computer application program  may return a signal or message indicating what execution path was entered and the results of that execution path. Simulation analysis module  receives this information and may store it, for example in storage device , for later analysis by a software developer, system administrator, user, another computer application program, etc. In other embodiments, simulation analysis module  may store the data indicating computer application program behavior in some other location.",{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 3","b":["300","110","132","120","300","110","310","132","132","320","320","320","120","120","330","340","120","340","110","310"]},"In response to receiving the simulated output parameters , computer application program  enters a corresponding execution path . In one embodiment, simulated output parameters  are designed to simulate an error and cause execution path  in computer application program  to be an error path. Error simulation module  may monitor the program behavior  upon providing the simulated output parameters  and may receive an indication of the program behavior  from computer application program . Error simulation results may use the same hooks provided by the operating system which are used to intercept the function call made by computer application program  to monitor the behavior of computer application program  in response to receiving the simulated output parameters . Error simulation module  may used the hooks to retrieve and store information about the execution path  such as the names, arguments, and\/or nesting of the called functions. Error simulation module  may store the indication of program behavior as simulation results . Simulation results  may be used in later analysis of how computer application program  responds to the occurrence of an error.",{"@attributes":{"id":"p-0022","num":"0021"},"figref":["FIG. 4","FIGS. 1 and 2"],"b":["400","300","120"]},"Referring to , at block , method  receives an indication of a function call made by a computer application program, such as computer application program . Test scenario identifier module  of error simulation module  may intercept the indication, such as a function identifier, from the function call made to shared library . At block , method  identifies a test scenario corresponding to the received indication of the function call. Test scenario identifier module  may read configuration file  and identify, based on the function identifier, one or more simulated output parameters (or return values) that make up the test scenario. The test scenario may be stored in configuration file , or any other data structure, by a software developer, system administrator or other user, and may be designed to simulate an error in computer application program . In one embodiment, the test scenario may include a plurality of simulated output parameters, each designed to cause computer application program  to enter a different execution path (e.g., an error path). In one embodiment, where a function call is made several times during the execution of computer application program , the test scenario may include an indication of which function call will be the subject of the error simulation. In one embodiment, the application is executed multiple times and at each occurrence of the function call, the error simulation is implemented sequentially. However, in other embodiments, the error simulation may be designated to occur for a particular function call. At block , method  provides one of the simulated output parameters from the identified test scenario to computer application program .","At block , method  receives an indication of program behavior from the computer application program . As discussed above, the simulated output parameters provided at block  cause the computer application program  to enter an error path. Error simulation module  monitors the behavior (e.g., what path was entered and the results of that path) and stores that information using simulation analysis module . At block , method  determines if there are additional simulated output parameters in the test scenario identified at block . As discussed above, the test scenario may include a plurality of simulated output parameters. If there are additional simulated output parameters in the test scenario, execution of the computer application program finishes and method  returns to block , where the next simulated output parameter is provided to computer application program  during a next execution of the computer application program. Method  may then repeat the steps at blocks -, as necessary for additional simulated output parameters during subsequent executions of the computer application program. If at block , method  determines that there are no additional simulated output parameters in the test scenario, at block , method  stores the simulation results for later analysis. The simulation results may include the indication of program behavior received at block  for each of the simulated output parameters. Simulation analysis module  may store the simulation results, for example, in storage device .","In other embodiments, the steps in blocks - may be performed in some other order. For example, method  may store the simulation results for the first simulated output parameter at block  before providing the second simulated output parameter at block . These are merely examples of how the order of the steps in blocks - may be ordered, and one of skill in the art would recognize that the steps in blocks - may be performed in any other order.",{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 5","b":"500"},"The exemplary computer system  includes a processing device , a main memory  (e.g., read-only memory (ROM), flash memory, dynamic random access memory (DRAM) (such as synchronous DRAM (SDRAM) or Rambus DRAM (RDRAM), etc.), a static memory  (e.g., flash memory, static random access memory (SRAM), etc.), and a data storage device , which communicate with each other via a bus . Any of the signals provided over various buses described herein may be time multiplexed with other signals and provided over one or more common buses. Additionally, the interconnection between circuit components or blocks may be shown as buses or as single signal lines. Each of the buses may alternatively be one or more single signal lines and each of the single signal lines may alternatively be buses.","Processing device  represents one or more general-purpose processing devices such as a microprocessor, central processing unit, or the like. More particularly, the processing device may be complex instruction set computing (CISC) microprocessor, reduced instruction set computer (RISC) microprocessor, very long instruction word (VLIW) microprocessor, or processor implementing other instruction sets, or processors implementing a combination of instruction sets. Processing device  may also be one or more special-purpose processing devices such as an application specific integrated circuit (ASIC), a field programmable gate array (FPGA), a digital signal processor (DSP), network processor, or the like. The processing device  is configured to execute processing logic  for performing the operations and steps discussed herein.","The computer system  may further include a network interface device . The computer system  also may include a video display unit  (e.g., a liquid crystal display (LCD) or a cathode ray tube (CRT)), an alphanumeric input device  (e.g., a keyboard), a cursor control device  (e.g., a mouse), and a signal generation device  (e.g., a speaker).","The data storage device  may include a machine-accessible storage medium , on which is stored one or more set of instructions  (e.g., software) embodying any one or more of the methodologies of functions described herein. The instructions  may also reside, completely or at least partially, within the main memory  and\/or within the processing device  during execution thereof by the computer system ; the main memory  and the processing device  also constituting machine-accessible storage media. The instructions  may further be transmitted or received over a network  via the network interface device .","The machine-readable storage medium  may also be used to store instructions to perform an error simulation method as described above, and\/or a software library containing methods that call the above applications. While the machine-readable storage medium  is shown in an exemplary embodiment to be a single medium, the term \u201cmachine-readable storage medium\u201d should be taken to include a single medium or multiple media (e.g., a centralized or distributed database, and\/or associated caches and servers) that store the one or more sets of instructions. A machine-readable medium includes any mechanism for storing information in a form (e.g., software, processing application) readable by a machine (e.g., a computer). The machine-readable medium may include, but is not limited to, magnetic storage medium (e.g., floppy diskette); optical storage medium (e.g., CD-ROM); magneto-optical storage medium; read-only memory (ROM); random-access memory (RAM); erasable programmable memory (e.g., EPROM and EEPROM); flash memory; or another type of medium suitable for storing electronic instructions.","Although the operations of the methods herein are shown and described in a particular order, the order of the operations of each method may be altered so that certain operations may be performed in an inverse order or so that certain operation may be performed, at least in part, concurrently with other operations. In another embodiment, instructions or sub-operations of distinct operations may be in an intermittent and\/or alternating manner."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The present disclosure is illustrated by way of example, and not by way of limitation, in the figures of the accompanying drawings.",{"@attributes":{"id":"p-0006","num":"0005"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 5"}]},"DETDESC":[{},{}]}
