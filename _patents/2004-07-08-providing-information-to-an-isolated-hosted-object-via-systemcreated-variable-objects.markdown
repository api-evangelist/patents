---
title: Providing information to an isolated hosted object via system-created variable objects
abstract: A system-created variable object may expose a property of an object model to an internal object that does not have access to the object model directly. The system-created variable object may provide a mechanism for communicating the external state of an object model to an internal member (object) without exposing the object model to the internal object. This feature enables an object model object to be isolated, a concept that can be advantageously exploited.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08214799&OS=08214799&RS=08214799
owner: Microsoft Corporation
number: 08214799
owner_city: Redmond
owner_country: US
publication_date: 20040708
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["CROSS-REFERENCE","FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF ILLUSTRATIVE EMBODIMENTS","Overview"],"p":["This application is related to U.S. application Ser. No. 10\/887,273, filed Jul. 8, 2004, now abandoned.","The invention relates to object models and in particular to providing information to isolated hosted objects via system-created variable objects.","The concept of data hiding or containment is well-known in computer science. The motivation for data hiding is to reduce dependency between the environment, internal structure and the code that manipulates it. Illegally accessing hidden data usually results in a compile-time or run-time error.","Data hiding is a characteristic of object-oriented programming. Because an object can only be associated with data in predefined classes or templates, the object can only \u201cknow\u201d about the data it needs to know about, eliminating the possibility that someone maintaining the code may inadvertently point to or otherwise access the wrong data unintentionally.","It is sometimes desirable, however, to provide some of this hidden data to an isolated object, while maintaining the object's isolation. It would be helpful if there were a way to provide hidden data to an isolated object without destroying the object's isolation.","A system-created variable object may expose a property of an object model to an internal object that does not have access to the object model directly. The system-created variable object may provide a mechanism for communicating the external state of an object model to an internal member (object) without exposing the object model to the internal object. This feature enables an object model object to be isolated, a concept that can be advantageously exploited.","A portion of an object model such as a package may be associated with one or more variables, which may be implemented as objects. A variable object in a package may be used in a way similar to the way a variable is used in a traditional programming language, that is, a variable object may be created, its value may be changed or updated, the variable may be associated with a particular type (e.g., read-only, temporary, etc.) and so on.","In the object model, an object may be wrapped by a host object that isolates the object from the rest of the object model. Often the hosted object needs access to the properties of other objects in the object model, but because of the benefits of isolation, it is not desirable to permit the object access to the other objects directly.","System variables are variable objects which may be created by the runtime, (the execution environment that handles the execution time behavior of the object model), to expose certain properties of the object model to an isolated hosted object. The collection of system variables is accessible by the hosted object, and may be identified by using a specified naming convention. In this way, the hosted object has access to required or useful system information, yet the hosted object remains isolated.","An object model may be defined as a collection of objects and relationships. Each of the objects may be associated with one or more properties that govern the execution behavior of the object.","In an illustrative implementation, a Data Transformation Service (DTS) provides a set of tools that allows for the extraction, transformation\/consolidation and loading of data from one or more sources into one or more destinations supported by DTS connectivity. By using DTS tools to graphically build DTS packages or by programming a package with the DTS object code, custom data movement solutions tailored to the specialized business needs of an organization may be created.","A DTS package is an organized collection of connections, DTS tasks, DTS transformations and workflow constraints assembled either programmatically or with a DTS tool and saved to MICROSOFT\u00ae SQL Server\u2122, a structured storage file, an XML file or a Microsoft Visual Basic\u00ae file. Generally, each package includes one or more steps that are executed sequentially or in parallel when the package is run. When executed, the package connects to the appropriate data source(s), extracts data from the source(s), (optionally) transforms the data, and loads the transformed data into one or more destinations.","A DTS task is a discrete set of functionality, executed as a step in a DTS package. Each task defines a work item to be performed as part of the data movement and data transformation process, or as a job to be executed. Examples of commonly used DTS tasks include importing and exporting data, transforming data, copying database objects, and sending messages to and receiving messages from other users and packages, and so on. A DTS transformation may include one or more functions or operations applied to a piece of data before the data is loaded into the destination. A DTS transformation may be composed of a number of DTS sub-transformations, connected together into a transformation chain; that is, the output of a first sub-transformation may be input to the next sub-transformation in the chain and so on.","A DTS connection manager establishes valid connections to source and destination data and to any additional data sources (for example, lookup tables). A DTS connection manager enables connections to data stored in a wide variety of OLE DB-compliant formats as well as custom or nonstandard formats. The following varieties of connections, among others, may be enabled:","a data source connection to standard databases including but not limited to Microsoft SQL Server\u2122 2000, Microsoft Access 2000, Oracle, dBase, Paradox; OLE DB connections to ODBC data sources; Microsoft Excel 2000 spreadsheet data; HTML sources; and other OLE DB providers.","a file connection. When specifying a text file connection, the format of the file may be specified (e.g., whether a text file is in delimited or fixed field format, whether the text file is in a Unicode or an ANSI format, the row delimiter and column delimiter if the text file is in fixed field format, the text qualifier, whether the first row contains column names.","a data link connection, in which an intermediate file outside of SQL Server stores the connection string.","Logging and failure notification options are accessed by setting an output file to which notifications are set. Business rules may be applied to data without writing code for scheduling, logging, notifying of failure or completion, or file downloading.","A DTS package may be associated with one or more variables, which may be implemented as objects. A variable object in a package may be used in a way similar to the way a variable is used in a traditional programming language, that is, a DTS variable object may be created, its value may be changed or updated, the variable may be associated with a particular type (e.g., read-only, temporary, etc.) and so on.","In the DTS object model, an object may be wrapped by a host object that isolates the object from the rest of the object model. Often the hosted object needs access to the properties of other objects in the object model, but because of the benefits of isolation, it is not desirable to permit the object access to the other objects directly.","System variables are variable objects created by the DTS runtime, (the execution environment that handles the execution time behavior of the DTS object model), to expose certain possibly critical properties of the object model to an isolated hosted object. The collection of system variables is accessible by the hosted object, and may be identified by using a specified naming convention. In this way, the hosted object has access to required or useful system information, yet the hosted object remains isolated.","Exemplary Computing Environment",{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 1"},"Although not required, the invention can be implemented via an application programming interface (API), for use by a developer, and\/or included within the network browsing software which will be described in the general context of computer-executable instructions, such as program modules, being executed by one or more computers, such as client workstations, servers, or other devices. Generally, program modules include routines, programs, objects, components, data structures and the like that perform particular tasks or implement particular abstract data types. Typically, the functionality of the program modules may be combined or distributed as desired in various embodiments. Moreover, those skilled in the art will appreciate that the invention may be practiced with other computer system configurations. Other well known computing systems, environments, and\/or configurations that may be suitable for use with the invention include, but are not limited to, personal computers (PCs), automated teller machines, server computers, hand-held or laptop devices, multi-processor systems, microprocessor-based systems, programmable consumer electronics, network PCs, minicomputers, mainframe computers, and the like. The invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network or other data transmission medium. In a distributed computing environment, program modules may be located in both local and remote computer storage media including memory storage devices.",{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 1","b":["100","100","100","100"]},"With reference to , an exemplary system for implementing the invention includes a general purpose computing device in the form of a computer . Components of computer  may include, but are not limited to, a processing unit , a system memory , and a system bus  that couples various system components including the system memory to the processing unit . The system bus  may be any of several types of bus structures including a memory bus or memory controller, a peripheral bus, and a local bus using any of a variety of bus architectures. By way of example, and not limitation, such architectures include Industry Standard Architecture (ISA) bus, Micro Channel Architecture (MCA) bus, Enhanced ISA (EISA) bus, Video Electronics Standards Association (VESA) local bus, and Peripheral Component Interconnect (PCI) bus (also known as Mezzanine bus).","Computer  typically includes a variety of computer readable media. Computer readable media can be any available media that can be accessed by computer  and includes both volatile and nonvolatile media, removable and non-removable media. By way of example, and not limitation, computer readable media may comprise computer storage media and communication media. Computer storage media includes both volatile and nonvolatile, removable and non-removable media implemented in any method or technology for storage of information such as computer readable instructions, data structures, program modules or other data. Computer storage media includes, but is not limited to, RAM, ROM, EEPROM, flash memory or other memory technology, CDROM, digital versatile disks (DVD) or other optical disk storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other medium which can be used to store the desired information and which can be accessed by computer . Communication media typically embodies computer readable instructions, data structures, program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term \u201cmodulated data signal\u201d means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example, and not limitation, communication media includes wired media such as a wired network or direct-wired connection, and wireless media such as acoustic, RF, infrared, and other wireless media. Combinations of any of the above should also be included within the scope of computer readable media.","The system memory  includes computer storage media in the form of volatile and\/or nonvolatile memory such as read only memory (ROM)  and random access memory (RAM) . A basic input\/output system  (BIOS), containing the basic routines that help to transfer information between elements within computer , such as during start-up, is typically stored in ROM . RAM  typically contains data and\/or program modules that are immediately accessible to and\/or presently being operated on by processing unit . By way of example, and not limitation,  illustrates operating system , application programs , other program modules , and program data .","The computer  may also include other removable\/non-removable, volatile\/nonvolatile computer storage media. By way of example only,  illustrates a hard disk drive  that reads from or writes to non-removable, nonvolatile magnetic media, a magnetic disk drive  that reads from or writes to a removable, nonvolatile magnetic disk , and an optical disk drive  that reads from or writes to a removable, nonvolatile optical disk , such as a CD ROM or other optical media. Other removable\/non-removable, volatile\/nonvolatile computer storage media that can be used in the exemplary operating environment include, but are not limited to, magnetic tape cassettes, flash memory cards, digital versatile disks, digital video tape, solid state RAM, solid state ROM, and the like. The hard disk drive  is typically connected to the system bus  through a non-removable memory interface such as interface , and magnetic disk drive  and optical disk drive  are typically connected to the system bus  by a removable memory interface, such as interface .","The drives and their associated computer storage media discussed above and illustrated in  provide storage of computer readable instructions, data structures, program modules and other data for the computer . In , for example, hard disk drive  is illustrated as storing operating system , application programs , other program modules , and program data . Note that these components can either be the same as or different from operating system , application programs , other program modules , and program data . Operating system , application programs , other program modules , and program data  are given different numbers here to illustrate that, at a minimum, they are different copies. A user may enter commands and information into the computer  through input devices such as a keyboard  and pointing device , commonly referred to as a mouse, trackball or touch pad. Other input devices (not shown) may include a microphone, joystick, game pad, satellite dish, scanner, or the like. These and other input devices are often connected to the processing unit  through a user input interface  that is coupled to the system bus , but may be connected by other interface and bus structures, such as a parallel port, game port or a universal serial bus (USB).","A monitor  or other type of display device is also connected to the system bus  via an interface, such as a video interface . A graphics interface , such as Northbridge, may also be connected to the system bus . Northbridge is a chipset that communicates with the CPU, or host processing unit , and assumes responsibility for accelerated graphics port (AGP) communications. One or more graphics processing units (GPUs)  may communicate with graphics interface . In this regard, GPUs  generally include on-chip memory storage, such as register storage and GPUs  communicate with a video memory . GPUs , however, are but one example of a coprocessor and thus a variety of coprocessing devices may be included in computer . A monitor  or other type of display device is also connected to the system bus  via an interface, such as a video interface , which may in turn communicate with video memory . In addition to monitor , computers may also include other peripheral output devices such as speakers  and printer , which may be connected through an output peripheral interface .","The computer  may operate in a networked environment using logical connections to one or more remote computers, such as a remote computer . The remote computer  may be a personal computer, a server, a router, a network PC, a peer device or other common network node, and typically includes many or all of the elements described above relative to the computer , although only a memory storage device  has been illustrated in . The logical connections depicted in  include a local area network (LAN)  and a wide area network (WAN) , but may also include other networks. Such networking environments are commonplace in offices, enterprise-wide computer networks, intranets and the Internet.","When used in a LAN networking environment, the computer  is connected to the LAN  through a network interface or adapter . When used in a WAN networking environment, the computer  typically includes a modem  or other means for establishing communications over the WAN , such as the Internet. The modem , which may be internal or external, may be connected to the system bus  via the user input interface , or other appropriate mechanism. In a networked environment, program modules depicted relative to the computer , or portions thereof, may be stored in the remote memory storage device. By way of example, and not limitation,  illustrates remote application programs  as residing on memory device . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.","One of ordinary skill in the art can appreciate that a computer  or other client device can be deployed as part of a computer network. In this regard, the present invention pertains to any computer system having any number of memory or storage units, and any number of applications and processes occurring across any number of storage units or volumes. The present invention may apply to an environment with server computers and client computers deployed in a network environment, having remote or local storage. The present invention may also apply to a standalone computing device, having programming language functionality, interpretation and execution capabilities.","Providing Information to an Isolated Hosted Object Via System-Created Variables",{"@attributes":{"id":"p-0040","num":"0039"},"figref":["FIG. 2","FIG. 2","FIG. 1"],"b":["200","110","200"]},"In , system  may comprise one or more of the following: an execution environment , one or more containers, as represented by container , one or more host objects as represented by host object , and one or more hosted objects as represented by hosted object . A container such as container  may be included within another container, (not shown). Similarly, container  may include another container, (not shown). Any number of levels of nesting of containers are possible. A container such as container  may be associated with one or more properties or other system environment information points such as counters, enumerators, environment variables, execution parameters and so on as represented by system environment information  in . The collection of all the objects of system  may be referred to as the object model for system . In , the object model includes container , host object , hosted object , system environment information , and variable object .","An execution environment (e.g., a runtime) may execute container . Container  may include one or more host objects such as host object . A host object may wrap a hosted object and expose properties of the hosted object and other properties and behavior. Host object  may host one or more hosted objects such as hosted object .","Hosted object  in some embodiments of the invention may be an isolated object, that is, hosted object  may execute within the environment of host object  and be unaware of container  or anything external to host object . In other words, hosted object  may be wrapped by a host (e.g., host object ) that isolates hosted object  from the rest of the object model. In some embodiments of the invention, the hosted object  may be extensible. An object type that may be extended, modified, replaced or created by a third party may be considered an extensible object. Exemplary extensible objects include but are not limited to a new object type that \u201cplugs in\u201d to an existing object model and an object type from which a new object type may be derived.","Container  may be associated with one or more properties or other information about the environment such as counters, enumerators, environment variables, execution parameters or the like, represented in  by exemplary system environment information . System environment information  in some embodiments of the invention is directly inaccessible to hosted object . In some embodiments of the invention, one or more variable objects, represented in  by exemplary variable object  are created to store the value of system environment information . Variable object  may be directly accessible to hosted object .",{"@attributes":{"id":"p-0045","num":"0044"},"figref":["FIG. 3","FIG. 3"],"b":["304","320","322","304","302","302","320","322"]},"A DTS package such as DTS package  may be associated with one or more properties (e.g., PackageName, PackageVersion, PackageID, etc.) or other system environment information including counters, enumerators, environment variables, execution parameters or the like. The collection of properties and other system environment information is represented in  as package properties , a collection of properties and other system environment information including PackageName , PackageVersion , PackageID , etc. In some embodiments of the invention, runtime  creates a collection of variable objects for storing the values for the collection of properties and other system environment information. In , this collection of variable objects is represented as system variables , and includes system variable objects System::PackageName , System::PackageVersion , System::PackageID , etc. corresponding respectively to PackageName , PackageVersion , PackageID , etc. That is, for example, System::Package.Name  may be the system-created object corresponding to Package.Name  and so on. Runtime  may update the collection of system variable objects  as the values of the package properties  change.","An exemplary DTS package  in  may include pipeline task. A pipeline task such as pipeline task  may reference connection managers and transformations. Connection managers, as represented by connection managers  and  in , may in some embodiments, enable connections to be made to a source or destination. For example, connection manager  may manage the connection between the DTS package  and the source  while connection manager  may manage the connection between the DTS package  and the destination .","Data extracted from source  may be transformed as determined by transformations, such as transformations . Transformations  may be composed of one or more steps in a transformation chain, as represented by sub-transformations , , etc. in .","A DTS package such as DTS package  may include one or more hosted objects, representing functionality within the DTS package. DTS hosted objects may be tasks, connection managers, (also called connections), log providers and so on. Hosted objects may be hosted by respective host objects such as ConnectionHost, TaskHost, LogProviderHost and so on.","DTS package  may include a number of hosted objects, such as exemplary hosted objects ,  and  hosted respectively by host objects ,  and  in . These hosted objects may be tasks, connections, log providers and so on. Exemplary host objects may include but are not limited to a task host, a connection host, a log provider host and so on. Exemplary tasks include but are not limited to FTP tasks, SQL tasks, file system tasks and the like. Hosted objects such as tasks, connections, log providers and so on may be included within containers such as a sequence (e.g., sequence ) or a for each loop (e.g., for each loop ) or the like. Hosted objects, as discussed above, do not have direct access to properties and other environment information associated with the DTS package (e.g., collection of properties ). Suppose, for example, that DTS package  includes an isolated hosted object (e.g., a task ). Suppose further that task  needs to know the value of the PackageVersion property  for package . Task , because it is an isolated hosted object within host object , does not have direct access to property PackageVersion property , however, task  does have direct access to system variables object collection  and may access System.Package.Version property  of system variables objects collection  to obtain this information.",{"@attributes":{"id":"p-0051","num":"0050"},"figref":"FIG. 4","b":["402","404","406","408","410","412"]},"For example, referring again to , suppose a host object  hosts a hosted object . Suppose hosted object  is a logging task within container . Logging task  may require the Package.Version property of DTS package  in order to place this information on the log. However, logging task  may be unable to directly access Package.Version . Logging task  may request Package.Version from task host  (step  in ). The task host  may request this information from FOR EACH loop , (step ) which may request Package.Version from DTS package  (step ) which may request this information from the runtime . Runtime  (step ) may place the value of Package.Version  in system-created variable object System.Package.Version . Logging task  may then access System.Package.Version.","The various techniques described herein may be implemented in connection with hardware or software or, where appropriate, with a combination of both. Thus, the methods and apparatus of the present invention, or certain aspects or portions thereof, may take the form of program code (i.e., instructions) embodied in tangible media, such as floppy diskettes, CD-ROMs, hard drives, or any other machine-readable storage medium, wherein, when the program code is loaded into and executed by a machine, such as a computer, the machine becomes an apparatus for practicing the invention. In the case of program code execution on programmable computers, the computing device will generally include a processor, a storage medium readable by the processor (including volatile and non-volatile memory and\/or storage elements), at least one input device, and at least one output device. One or more programs that may utilize the creation and\/or implementation of domain-specific programming models aspects of the present invention, e.g., through the use of a data processing API or the like, are preferably implemented in a high level procedural or object oriented programming language to communicate with a computer system. However, the program(s) can be implemented in assembly or machine language, if desired. In any case, the language may be a compiled or interpreted language, and combined with hardware implementations.","While the present invention has been described in connection with the preferred embodiments of the various figures, it is to be understood that other similar embodiments may be used or modifications and additions may be made to the described embodiments for performing the same function of the present invention without deviating therefrom. Therefore, the present invention should not be limited to any single embodiment, but rather should be construed in breadth and scope in accordance with the appended claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The foregoing summary, as well as the following detailed description of illustrative embodiments, is better understood when read in conjunction with the appended drawings. For the purpose of illustrating the invention, there is shown in the drawings exemplary constructions of the invention; however, the invention is not limited to the specific methods and instrumentalities disclosed. In the drawings:",{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":["FIG. 3","FIG. 2"]},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 4"}]},"DETDESC":[{},{}]}
