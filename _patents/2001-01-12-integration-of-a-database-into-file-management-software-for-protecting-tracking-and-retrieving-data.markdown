---
title: Integration of a database into file management software for protecting, tracking, and retrieving data
abstract: A data protection system that integrates a database with Windows Explorer in the Microsoft Windows 9X and NT Environments that mimics the Windows Explorer user interface, enabling the user to apply already known use paradigms. The data protection system appears as an extension to Windows Explorer and visibly appears as a folder item called the data vault. The data vault is a virtual disk that represents the underlying database. The database creates records and stores information about files backed up to removable secondary storage medium. Files may be backed up manually or automatically. A schedule can be set up for automatic protection of selected files and file types. The database can be searched to find files for restoration purposes without having to load secondary storage medium. Once a file or files are selected, the data protection system indicates which labeled removable secondary storage medium must be loaded for retrieval.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06839721&OS=06839721&RS=06839721
owner: Hewlett-Packard Development Company, L.P.
number: 06839721
owner_city: Houston
owner_country: US
publication_date: 20010112
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND OF THE INVENTION","DISCLOSURE OF THE INVENTION","BEST MODE FOR CARRYING OUT THE INVENTION"],"p":["This invention relates to computer systems and more particularly to data stored on computer systems. Even more particularly, the invention relates to integration of a database into file management software for protecting, tracking, and retrieving data stored on computer systems.","Most computer users in the desktop environment employ some sort of data protection procedures and devices to protect computer system files and data files in the event of an accidental delete or overwrite of these files from the primary storage medium, which is usually the computer's hard drive. Computer data protection systems usually involve the backup of system and data files onto some sort of secondary storage device utilizing removable storage media, such as floppy disk drives, other hard disk drives, tape drives, etc. More sophisticated users may utilize automatic data protection devices and procedures that backup the entire system on a regular basis, allowing for a full system recovery if needed.","In many cases, however, computer users employ only manual backup procedures for data files and some system files on an inconsistent basis. This is because many users find the cost of automatic backup systems to be prohibitive. Others find the performance of automatic backup systems to be lacking, especially when trying to restore one file or a particular version of a file. Many users complain that finding and retrieving a backup file is very time consuming and difficult to do. Some also find that an automatic backup system does not lend itself very well to an unscheduled manual backup of a particular file or group of files. Many users are only interested in backups of their current data files rather than backups for system files or for a full system recovery. Other users do not want to take the time to learn a backup system's methods and procedures. Still others do not want to spend the time it takes to manually backup their data and system files, and fail to backup at all.","Recent research indicates that 70-80% of those who have purchased a compact disk device, such as a CD-R drive, are today using the device for performing simple data backup manually, even if they originally purchased the drive for another purpose. Simple data backup refers to backup of the user's data, and sometimes executable programs, as opposed to backup for the purposes of full system recovery. This use is obvious in light of the storage capability of the CD medium and the speed at which data can be transferred to and from it.","However, even with the increased storage capacity and speed of such disks, restoring a backup file to the hard drive involves shuffling disks in and out of the CD drive until the right disk is located that contains the desired file or files. This can be quite time consuming, especially if the user has a number of disks and does not have a listing of what files are on each disk. In addition, if a file is backed up in a number of different versions, which may also be on different disks, the user has to check for the date, time, or size of the file in addition to the file name to find the right version.","One other problem that exists in the art is the problem of creating a unique file name or disk name for a backup file or disk. There have been several prior art solutions to this problem. The first is to generate a name and append an integer number to the name to make the name unique. This solution presumes that the computer generating the name has access to all other possible names so that the names can be compared in order to increment the integer number until a unique name results. This solution fails when the computer generating the name does not have access to all other names, as is the case when generating a unique disk name for a removable disk. This solution is also inefficient since it must read all the file or disk names available to it to determine the integer that will make the file unique.","A second solution to the unique name problem is to generate a random number and either use its ASCII representation or convert the number into a number in base 36 notation, wherein the 26 letters and 10 digits are used to represent the number. This solution is also inefficient since it must read all the file or disk names available to determine if the name is unique, or rely on the chance that it is unique and not test it.","One problem with both the above solutions to creating a unique file or disk name is that two computers on a network may both generate the same name at the same time, since both are checking the same list of previously used names at the same time.","Thus, there is a need in the art in the desktop environment today for a simple and efficient automatic data protection system directed toward protecting current data or executable files that utilizes CD-R (Recordable) drives and CD-RW (Re-Writeable) drives. There is a further need in the art for a data protection system that has a simple, intuitive user interface that does not require the user to learn a whole new method and procedure. There is also a need in the art for a data protection system that allows for both manual and automatic data backup. There is a further need in the art for a method of off-line browsing of data stored on removable storage media that does not require the shuffling of the media in and out of the storage device. There is also a need in the art for a method that will indicate which removable storage medium to insert in the storage device in order to restore a particular file. Yet another need in the art is for a system that generates a unique file or disk name for use in naming each backup file or disk. The present invention meets these and other needs in the art.","It is an aspect of the present invention to provide a simple and efficient data protection system which utilizes a database and a secondary storage device with removable storage media.","It is another aspect of the present invention to provide a unique name for each disk of removable storage media, and a unique name for backup files, through the use of Globally Unique Identifiers (GUIDs).","It is another aspect of the invention to utilize an already familiar user interface for file management software for the data protection system.","Yet another aspect of the invention is to provide for both manual and automatic data protection.","Still another aspect of the invention is to find files stored on a secondary storage device by utilizing existing user interfaces that do not require the shuffling of removable storage media in and out of the secondary storage device.","A further aspect of the invention is to identify which of possibly many individual removable storage medium should be inserted into the secondary storage device in order to restore the desired data or files from the individual removable storage medium to the primary storage medium.","A still further aspect of the invention is to allow retrieval of a file based on date, time, file type, or content in a natural and logical manner.","The above and other aspects of the invention are accomplished in a data protection system that integrates a database with Windows Explorer file management software in the Microsoft Windows\u00ae 9X and NT operating system environments. This integration appears to a user as if the data protection system is just another component of Windows Explorer and the operating system.","The data protection system is integrated into Windows Explorer such that the functionality naturally expected by the user working in this environment is maintained. Changes to the Windows Explorer menu system and tool bar are minimized to make the integration of the data protection system with Windows Explorer as unobtrusive as possible. The data protection system appears as an extension to Windows Explorer. The database appears as a folder item in the Windows Explorer, referred to as the data vault folder item. Though the data vault folder item appears to be no different from the other storage entities accessible from the left pane of the Windows Explorer window, the data vault folder item is in reality a virtual disk that represents the database, not an actual physical disk.","The database is used to record information about files backed up to removable secondary storage media utilizing the data protection system. Each disk of removable media is given a unique identifier through the use of Globally Unique Identifers (GUIDs). This provides for correctly identifying the removable disk before copying a file back to the primary storage, and it allows disks from other networked computers to be incorporated into the database, without the problem of duplicate disk names. For these backed up files, records are created in the database to track information about the file. Such tracking information includes the source directory and path of the file, including any sub-directories and folders, the name of the removable storage medium to which the files were backed up, as well as the file characteristics, such as file name, size, file type, and file date and time. The database also creates a name for the set of files backed up during the same operation, called a document set.","The underlying database supports different views of the information stored in the database. The user can configure different logical hierarchical views of the files located on removable secondary storage media. Information may be grouped and put in a hierarchy based on different dimensional criteria, such as by removable storage medium, by source drive and directory path, by document set, by folders, or by application file type. Some users may wish to browse hierarchies rooted from a specific removable storage medium, while others may be more comfortable browsing a hierarchy which reflects the original source of the information. Temporal or logical views of the database at the time when a file was backed up to a removable storage medium are also available. Though the views displayed in Windows Explorer of the data vault appear to be no different from other storage entities displayed, all the data vault items displayed are virtual drives, folders, subdirectories, and files. One skilled in the art will recognize the database may be custom written, or be any one of a number of commercially available data bases, or a flat file or files.","A specific component of the data protection system, referred to as data protector, allows the user to copy files from primary storage to the data vault. The data protector is a supplement to the functionality of the database integration with Windows Explorer. The data protector consists of context menus added to the Windows Explorer user interface, and a separate data protector application program, each of which presents the user with a simple, minimal interface for selecting folders and files for protection.","Setting the schedule for automatic data protection is done through the data protector application program. This is because setting a schedule is not a natural use paradigm from within Windows Explorer. The user can select and edit an automated protection list based on folders, individual files, or wildcard file types. The user can view a summary of what data is selected, and when it is scheduled to be protected. The user can also at any time manually save selected files to secondary storage by selecting the \u201cProtect Now\u201d Option in the data protector application program.","Finding a file that has been stored through the data protection system is accomplished by first right clicking on the data vault folder item in the left pane of Windows Explorer, which brings up a context menu. From here, the user can select the \u201cFind\u201d Option, which brings up the Data Vault Find Dialog Box. An alternative way of reaching this dialog box is to select the \u201cIn Data Vault\u201d Option from the \u201cFind\u201d entry in the Windows Explorer Tools Menu.","The Data Vault Find Dialog Box is modeled to match Windows Explorer in terms of look and feel. The user can find files stored in the data vault based on date, time, file name, and wildcard. The user can access the version history of a file by right clicking and selecting the \u201cView Versions\u201d Option on the data vault submenu. This brings up a Data Protection System Version Display Dialog Box showing when the file was protected, with date, time, and size information for each version. The file can be restored to its original directory location in the hard drive or to some other location specified by the user.","The following description is of the best presently contemplated mode of carrying out the present invention. This description is not to be taken in a limiting sense but is made merely for the purpose of describing the general principles of the invention. The scope of the invention should be determined by referencing the appended claims.",{"@attributes":{"id":"P-00042","num":"00042"},"figref":["FIG. 1","FIG. 1"],"b":["100","102","102","100","104","106","100","110","100","108","112","100","112","122","104","124","116","104","118","114","120","118","114","120","114"]},"Data Protection Software  exposes a database, stored on Primary Storage Device , that is tracking copies of files (and related versions) that have been written to Removable Storage Media . Though the Removable Storage Media  may be off line, the user can browse the contents of all Removable Storage Media  used to protect files as if they were present on the on line portion of the file system. When Data Protection Software  is installed on Computer System , it will add a desktop icon to Existing File Management Software  to represent the files on the Removable Storage Media  being tracked\u2014hereafter referred to as the data protection system domain. The data protection system of the present invention includes Data Protection Software , the database stored on Primary Storage Device , Secondary Storage Device , and Removable Storage Media .",{"@attributes":{"id":"P-00044","num":"00044"},"figref":["FIG. 2","FIG. 2"],"b":["114","204","206","208","208","114","210","208","212","208","208","212"]},"The Name Space Extension  component provides an in-process Common Object Model (COM) object interface with which Existing File Management Software  may interact to extend the user's file system. This component has several responsibilities to provide integration into Existing File Management Software  for displaying the data protection system domain. First, if in \u2018Explore\u2019 mode (dual pane, tree\/list view), Name Space Extension  provides a tree hierarchical representation of the file information saved in the database so that Existing File Management Software  may display this tree in its left pane. The tree represents the hierarchy of folders for the off line Removable Storage Media  that the product is tracking\u2014the data protection system domain.","Name Space Extension  must also control the right pane of Existing File Management Software  (or the only pane if in \u2018Open\u2019\/single pane view mode), and display the contents of the currently open folder in the data protection system domain in similar manner as folders and files are displayed for the local on line drives. The frame menu must also be controlled when the context is within the data protection system domain (i.e., objects within the data protection system domain are highlighted\/selected) and provide context menus for objects displayed in the data protection system domain with the \u2018Retrieve\u2019 and \u2018View Versions\u2019 Options. Name Space Extension  also alters Existing File Management Software  frame menus, tool bars, and status bar text as appropriate. Context menus are also supplied by Name Space Extension  for all objects exposed at and under the root folder of Name Space Extension . The context menu that appears depends on the object selected.","Additionally, Name Space Extension  must invoke a Data Protection System Version Display Dialog Box that displays information about all versions of the selected file when the user selects the \u2018View Versions\u2019 Option on the data protection system domain object's associated context menu (as mentioned above). Arrow  shows that Name Space Extension  also invokes the Protect File Component  when files are dropped (from a drag and drop maneuver with a mouse or a copy and paste menu action) onto the data protection system domain. And finally, Arrow  shows that Name Space Extension  invokes the Retrieve File Component  for the selected files when the user selects the \u2018Retrieve\u2019 Option on the data protection system domain object's associated context menu.","Shell Extension  is also loaded by Existing File Management Software  for the purpose of extending the context menu of Existing File Management Software  objects that are not within the data protection system domain. Shell Extension  extends the context menu of non data protection system domain Existing File Management Software  files, folders, and disk drives with the new options of \u2018Protect\u2019, \u2018Add to Protection List\u2019, and \u2018View Versions\u2019 (for files only). Each menu option has a handler function that is invoked when the user selects one such option. Arrow  shows that Shell Extension  also invokes the Protect File Component  when the user selects the \u2018Protect\u2019 Option on the associated context menu.","Arrow  shows that Shell Extension  also adds the file name and full path of each of the selected files to the Protection List Text File, discussed below regarding the Protection List Editor Scheduler  component, and stores it on Primary Storage Device  when the user selects the \u2018Add to Protection List\u2019 Option on the associated context menu. Shell Extension  also invokes a Data Protection System Version Display Dialog Box that displays information about all versions of the selected file that may be within the data protection system domain when the user selects the \u2018View Versions\u2019 Option on its associated context menu.","Arrow  shows that Shell Extension  invokes the Retrieve File Component  if the user selects the \u2018Retrieve\u2019 Option on a particular version of a file while in the Data Protection System Version Display Dialog Box mentioned above. Finally, Arrow  shows that Shell Extension  allows the user to view the current Protection List in order to make changes or verify which files are scheduled to be protected.","Find Utility  compliments an already existing find utility, which in the preferred embodiment of the invention is the Windows Explorer Find Utility, to allow users to find files that are being tracked in the data protection system domain. Again, this is integrated so that based on the context of invocation of the Windows Explorer Find Utility that the user is familiar with, the user will interact with either the standard Windows Explorer Find Utility or the Find Component  and Find Utility  components. When finding objects within the data protection system domain, the user may specify a single wildcard or name representing folders\/files, and optionally either a date range for the modified date time stamp of the files within the data protection system domain and\/or a date range for the time that the files were protected into the data protection system domain.","Find Utility  may be invoked either by Find Component , or by Name Space Extension  when the user selects the \u2018Find\u2019 Option from Name Space Extension  folder's context menu. Find Utility  also provides a context menu for files that appear in the result list of the find operation. This context menu is actually supplied via Name Space Extension . The same options provided by Name Space Extension  are automatically available to find results.","The Protection List Editor Scheduler  component is a standalone utility that allows the user to create and modify a profile of files on their system that they would like to have protected on a regular basis. Individual files, file types, whole folders and sub-folders, as well as wild carded entries may be added or removed from the Protection List from this component. The user may also choose to protect the files immediately and\/or specify a schedule that is to be applied such that the files are automatically protected regularly per the schedule. Arrow  shows that if a schedule is specified, Protection List Editor Scheduler  invokes the Scheduler Runner  to watch the system clock and perform the protection operation specified in the schedule. Arrow  shows that changes made to the Protection List Text File are saved to Primary Storage Device , which is the user's local hard drive(s).","The Scheduler Runner  component watches the system clock to determine when to begin an operation to protect the files contained in the Protection List. Arrow  shows that Scheduler Runner  receives the Protection List Text File from Primary Storage Device  as input for the scheduled operation. Arrow  shows that when the scheduled time arrives, Scheduler Runner  passes the contents of the Protection List Text File to Protect File Component .","Protect File Component  is a COM object local out-of-process server that controls all aspects of copying files from Primary Storage Device  to the Installable File System . Protect File Component  accepts a list of IDataObjects, a Microsoft COM object, that describes a list of files that are to be protected within the data protection system domain. Arrow  shows that this process involves reading the specified files from Primary Storage Device  (or accessible network drives). Arrow  shows that these files are then copied to the Installable File System . In the preferred embodiment of the invention, Installable File System  consists of a writeable or re-writeable CD device with an installed IFS interface. Arrow  shows that Protect File Component  is also responsible for saving file information (names, attributes, sizes, date stamps, etc.), along with the source location as well as the target location, and removable storage medium  identification to the Database Server . Protect File Component  also checks the files protect status with the Database Server  and updates it if the file is reprotected. The Protect File Component  and the Retrieve File Component  are actually implemented within the same executable file.","Retrieve File Component  is a COM object local out-of-process server that controls all the aspects of copying files from Installable File System  back to Primary Storage Device . Retrieve File Component  accepts a list of unique database IDs for files that are to be restored from the data protection system domain back onto Primary Storage Device  (or accessible network drives). Arrow  shows that this component retrieves information about the files\/folders to be restored from the Database Server . Arrow  shows that Retrieve File Component  reads the specified files from the appropriate Removable Storage Medium  (prompting for its insertion if necessary), and Arrow  shows that this component then copies the specified files onto Primary Storage Device  (or accessible network drives). This component also allows the user to specify an alternate target location other than the default location (which is the original source location as saved in Database Server ).","The Database Server  is a COM object local out-of-process server that, in the preferred embodiment of the invention, provides a C++ object interface to an underlying Microsoft Data Access Object (DAO) relational database. Its purpose, as Arrow  shows, is to read\/update the database file on Primary Storage Device  and to save file related information such as names, attributes, sizes, date stamps, etc., along with a source location on Primary Storage Device  (or network drives) as well as a target location on a Removable Storage Medium . In addition, Database Server  is responsible for relating all copies of files that have the same source location as multiple versions of a single logical file. Removable Storage Medium  identification is saved as well, along with information that groups multiple files that were copied\/protected in the same operation. This saved information is available for displaying, traversing, and searching via the object interface provided. Arrow  shows that Database Server  provides information to Name Space Extension  about the Removable Storage Medium  and\/or files\/folders contained in a selected entry. Arrow  shows that this component also supplies information to Name Space Extension  and to Shell Extension  regarding version information on a selected file.",{"@attributes":{"id":"P-00058","num":"00058"},"figref":["FIG. 3","FIG. 3"],"b":["302","304","312","308","310","258"]},"Media Manager  is designed to save a running history of the user's file system. It tracks Removable Storage Media , temporal collections of files, called document sets, and files and folders. It also tracks the original location of files that are copied to new locations. Media Manager  relates not only copies of the same file, but also files that have been changed. All such files will have a common source location. Version information, such as create\/modify\/access dates, file sizes, attributes, new file name if different from original, etc., are all saved so that specific instances of files may be located based on this information.","Media Manager  can show a familiar hierarchy of files and folders that have been saved in Database  as one large tree structure, or the files and folders can be separated by the Removable Storage Media  that they actually reside on. They may be further separated by the document set collection that they belong to. In addition, the above three viewing options can show the files and folders with respect to where they originated, called the source view, or by their actual physical locations on Removable Storage Media . Any given file has a related list of versions each of which may have one or more actual physical locations.","Database Server  has its own user interface which may be used to interrogate the current contents of Database . It also allows for automatic population, deletion, and manipulation of its contents. The user interface for Database Server  is directly connected to Media Manager  as a static library. When accessed by Client , however, the user interface for Database Server  is invisible.","There are two basic types of objects in the user interface to Media Manager , MMLists and MMItems. From MMItems are derived all the other main file system objects: MMMedia which are sources of Removable Storage Media , MMDocumentSet which are groups of files belonging to the same copy operation, and MMEntry which are file system entries, further distinguished as either folders or documents (files).","Client Interface  is also directly connected to Media Manager . This layer serves as the translation layer between COM  function calls that Client  triggers, and the actual objects that live in the server process space of Media Manager . This is because COM  does not marshal structured data, i.e., C++ objects, in a standard way. Client Interface  is required because the interface for Media Manager  cannot be directly exposed via COM .","Media Manager  rests on Updates  and Views , another object interface layer, which provides query classes and basic add and delete functionality. Each class basically resolves to a customized database query with access functions to obtain the field values from the resulting set of records. Views  is used to show the hierarchy relationship of the files stored on Removable Storage Media . Updates  is used to alter the database. At the lowest level is Database  which directly manipulates the database.","Client  may add new objects, delete, or modify existing objects in Database . Client  instantiates objects in its own process space via Stub , and a corresponding real object is created in Media Manager . Stub  and Client Interface  work together to reflect the actual data from Media Manager  into the Client  process space. In this way, Client  remains ignorant that it is even using COM . Proxy DLL  is transparently and automatically loaded by Client  to handle marshaling of the data for the custom Client Interface .",{"@attributes":{"id":"P-00066","num":"00066"},"figref":["FIG. 4","FIG. 4","FIG. 1"],"b":["402","114","404","406","410","404","114","410","404","406","318","3","406","410","406"]},"In Left Pane , Plus Box  indicates by the minus sign that Data Vault Folder Item  has been expanded, revealing Data Protection System Domain , the graphical representation of the off line Removable Storage Media  and files being tracked by the data protection system of the present invention.","The Data Vault Folder Item  serves as a drop target for files to be protected as well as a drag source for file restoration. Context menu entries are also created as part of the Data Vault Folder Item  functionality, allowing the user to find files and look at their version history. Rather than using a separate application to view the contents of Database , the design of Data Protection Software  () is modeled to match Existing File Management Software  in terms of look and feel. The user is able to utilize the conventions he is already familiar with, such as browse, explore, right click, left click, double click, drag and drop, and copy and paste. Mimicking the Existing File Management Software  user interface provides integration and ease-of-use that users logically expect. This also enables users to utilize Data Protection Software  much faster than if they had to learn the methods and procedures for a separate application user interface.","Under Data Vault Folder Item  are media folder items , indicating the different removable storage Removable Storage Medium  () that have been used in protecting files. In this example, three such Removable Storage Medium  have been used, labeled CD , CD , and CD . When a Media Source Folder Item  is opened up by clicking on its associated plus box, the directory structures for all the files protected on the associated Removable Storage Medium  are displayed. For example, Source Drive Item  indicates that files from the C Drive have been protected on CD . Listed beneath Source Drive Item  are all the Folder Items  and sub folders (not shown in ) in the directory path for the files that have been protected on CD .","Folder Item  labeled \u2018Mouse\u2019 has been opened by clicking on it, and Right Pane  is populated with the Contents  of Folder Item . Contents  consist of a list of files that have been protected from the user's system on the C drive from Folder Item . Contents  indicates for each file the file name, size, type, date\/time modified, and date\/time last stored in the data protection system domain. Existing File Management Software  access means, such as right click, drag and drop, and copy and paste, work the same in the data protection system as they do for other disks and files displayed in Existing File Management Software . Secondary (duplicate) access points are provided on the Existing File Management Software  menus and tool bars.","For example, standard items not applicable to the data protection system domain are not removed from the File Management Software Tool Bar , but instead are grayed out as appropriate, as represented by Standard Item . When the Data Vault Folder Item  is highlighted in Existing File Management Software , items not applicable in the Existing File Management Software  menu system are grayed out as appropriate. Items are added to the Existing File Management Software  menu system as appropriate to provide duplicate access points for right click and\/or drag and drop functionality. These items are added by creating a data protection system entry as necessary in applicable pull down menus, and creating a submenu of data protection choices in each case.","In addition to Data Vault Folder Item , there is a desktop icon link to the Existing File Management Software  entry, and an entry in the CD drive program group which links to the Existing File Management Software  item. Starting the data protection system from either the desktop or the CD drive program group will pop open Existing File Management Software  providing access to the data protection system.",{"@attributes":{"id":"P-00073","num":"00073"},"figref":["FIG. 5","FIG. 4","FIG. 1","FIG. 1"],"b":["114","114","410","404","120","108","410","404","120","114","410"]},"In the preferred embodiment of the invention, Data Protection Software  is written in C++ using the standard Win32 Software Development Kit (SDK) Application Programming Interface (API) calls, and some Microsoft Foundation Classes (MFC). During the install process, several COM interfaces used for different components of Data Protection Software , and their class IDs and interface IDs are entered into the Windows registry. After installation, a data protection system icon appears on the desktop that is linked to Data Vault Folder Item  within Existing File Management Software .","Some of the interfaces are standard interfaces defined by the Existing Operating System . These are necessarily implemented by the Name Space Extension , Shell Extension , and Find Component  () in order to \u201cplug\u201d into the Existing File Management Software  shell. That is, Existing File Management Software  expects these interfaces to be present, although not all of the methods need to be implemented in the server component.","Other interfaces are custom COM interfaces for the purposes of inter-component interaction. The custom COM interfaces register marshaling proxy DLLs under their component's interface ID so that client processes may load these DLL's to handle packaging up input\/output parameters to the interface methods, since these methods are not standard COM interfaces. The custom interfaces include a Protect EXE COM Interface, a Retrieve EXE COM Interface, and a Database Server EXE COM Interface.","Referring now to , in step  the data protection system is first accessed by the user browsing in Existing File Management Software . When click input is received on Data Vault Folder Item , the data returned by Database Server  () to expand the Existing File Management Software  tree is the highest level of data, which is data regarding the individual off-line Removable Storage Medium  containing files that have been protected with the data protection system.","In step , due to the click input received in step , Existing File Management Software  calls Name Space Extension  (FIG. ). In step  Name Space Extension  requests data from Database Server  (FIG. ).","In step , Database Server  gathers the data requested from Views  and Database  () and returns the data to Name Space Extension . In step , Name Space Extension  returns the data to Existing File Management Software . In step , Existing File Management Software  uses the data returned to populate and display the off-line Removable Storage Media  data in the Existing File Management Software  hierarchical tree in Left Pane  as media icons and media names, such as media source folder items  named CD , CD , and CD  as shown in FIG. . Name Space Extension , which controls Right Pane  (FIG. ), displays in Right Pane  data about the files protected on offline Removable Storage Media  shown in Left Pane , such as media name, type, date, and time.","Step  determines if click input is received on a next media icon or name displayed in Left Pane , or displayed in Right Pane , within the data protection system domain. If no click input is received on any of the media icons or names within the data protection system domain in step , control returns to Existing Operating System  () to await user input within Existing File Management Software  or some other application. If, however, click input is received on a next media icon or name within the data protection system domain in step , control returns to step , where the new click input is processed. For example, in Left Pane , the hierarchical structure of the media icon or name that click input was received on is displayed under the media icon and name, showing drive, folder icon, and folder name information. In Right Pane , the folder name and type is displayed. If subsequent click input is received on a folder icon or name in either Left Pane  or Right Pane , the folder icon is shown open in Left Pane , and all the files in the folder are enumerated in Right Pane , displaying Contents  (FIG. ), such as file name, type, size, date last modified, and date last protected in the data protection system. One skilled in the art will recognize that click input may be received on higher or lower level icons or names within the data protection system domain in any order, causing the data displayed in Screen Display  to change accordingly.",{"@attributes":{"id":"P-00081","num":"00081"},"figref":["FIGS. 6A and 6B","FIG. 6","FIG. 1","FIG. 6B","FIG. 4"],"b":["600","114","114","204","2","602","108","618","604","204","402"]},"Step  determines if mouse over input is received on the Data Vault Option. If mouse over input is received on the Data Vault Option, then in step  Shell Extension  displays a context submenu in Screen Display . The context submenu contains \u2018Protect\u2019 and \u2018Add to Protection List\u2019 Options. If mouse over input is not received on the Data Vault Option in step , then control returns to Existing File Management Software .","Step  determines if click input is received on the \u2018Protect\u2019 or \u2018Add to Protection List\u2019 option. If click input is received on the \u2018Protect\u2019 Option in step , then in step  Shell Extension  invokes Protect File Component  () and calls . After returning from , control passes to step .","If click input is received on the \u2018Add to Protection List\u2019 Option in step , then in step  Shell Extension  adds the file name and full path of each of the selected files to the Protection List Text File and stores the updated Protection List Text File on Primary Storage Device  (FIG. ). Then step  determines if a next right click input is received on a folder, or on a selected group of folders, that are not within the data protection system domain. If the answer is yes, then control passes to step . If no further right click input on non Data Protection System Domain  items is received, then control returns to Existing File Management Software .","If right click input was received on a file or group of files in step , then in step  Shell Extension  displays a context menu in Screen Display  () that has been extended to include a Data Vault Option among the normally appearing context menu options.","Step  determines if mouse over input is received on the Data Vault Option. If mouse over input is received on the Data Vault Option, then in step  Shell Extension  displays a context submenu in Screen Display . The context submenu contains \u2018Protect\u2019, \u2018Add to Protection List\u2019, and \u2018View Versions\u2019 Options. If mouse over input is not received on the Data Vault Option in step , then control returns to Existing File Management Software .","Step  determines if click input is received on the \u2018Protect\u2019, \u2018Add to Protection List\u2019, or \u2018View Versions\u2019 option. If click input is received on the \u2018Protect\u2019 Option in step , then control returns to step  where Shell Extension  invokes Protect File Component  () and calls . After returning from , control passes to step .","If click input is received on the \u2018Add to Protection List\u2019 Option in step , then control returns to step where  Shell Extension  adds the file name and full path of each of the selected files to the Protection List Text File and stores the updated Protection List Text File on Primary Storage Device  (FIG. ).","If click input is received on the \u2018View Versions\u2019 Option in step , then in step  Shell Extension  invokes and displays the Data Protection System Version Display Dialog Box in Screen Display . Then step  determines if click input is received on a file and then on a Retrieve Button, or on the Close Button. If click input is received on a file and then on the Retrieve Button, control transfers to , step . If the click input in step  is on the Close Button, then control returns to step .",{"@attributes":{"id":"P-00090","num":"00090"},"figref":["FIG. 7","FIG. 7","FIG. 2","FIG. 2"],"b":["700","226","110","1","702","704","226","234","710","702","706","708","226","234","710"]},"In step  Scheduler Runner  retrieves the Protection List Text File from Primary Storage Device  (FIG. ). Then in step  Scheduler Runner  invokes Protect File Component  (FIG. ), passing it the Protection List Text File, and calls . Upon returning from , Protection List Editor Scheduler  ends.",{"@attributes":{"id":"P-00092","num":"00092"},"figref":["FIG. 8","FIG. 8"],"b":["800","114","114","204","2","802","410","4"]},"In step , after receiving the drop input or paste input in step , Shell Extension  invokes Protect File Component  (FIG. ), passing the file names and paths from the data object dropped or pasted on Data Vault Folder Item , and calls . Upon returning from , step  determines if a next drag and drop input or copy and paste input on Data Vault Folder Item  is received and if so, control passes to step . If no further drag and drop input or copy and paste input is received on Data Vault Folder Item , control returns to Existing File Management Software .",{"@attributes":{"id":"P-00094","num":"00094"},"figref":["FIGS. 9A and 9B","FIGS. 9A and 9B","FIG. 2","FIG. 2"],"b":["900","240","612","712","804","902","240","226","904","240","258","2","906","258","240"]},"In step  Protect File Component  checks to see if a Removable Storage Medium  properly named has been inserted into Secondary Storage Device  () before the protection operation begins. If not, Protect File Component  prompts the user to insert a Removable Storage Medium . If the Removable Storage Medium  inserted has not been named, Protect File Component  prompts the user to name Removable Storage Medium .","As an alternative, the present invention generates a unique identifier for the removable storage medium through the process of FIG. C. Referring to , after entry, step  calls a routine to generate a globally unique identifier, called a GUID. This routine is available from several sources, including a macro available in the Microsoft\u00ae Visual Studio Development System, available from Microsoft Corporation. A GUID is a 128 bit number (16 bytes) created on a computer using the current date and time, a clock sequence and related persistent state to deal with retrograde motion of clocks, a forcibly incremented counter to deal with high-frequency allocations, and a unique IEEE machine identifier obtained from one or more circuits present in the computer. GUIDs are used to identify modules used throughout the world by Microsoft and all other software manufacturers that create Component Object Modules for use in Microsoft Operating systems.","Once the GUID is obtained, step  converts the GUID into an ASCII sequence of characters by converting each hexadecimal digit of the 16 byte GUID into an ASCII character, thus generating a 32 character name. Those skilled in the art will recognize that many other methods could be used to convert the 16 byte GUID into an ascii string of characters. Step  then returns this ASCII string to be used as the Removable Storage Medium name.","In step , Protect File Component  gets the first file name and path from the protection list received from Database Server  in step . Protect File Component  in step  queries Database Server  to see if the file has already been protected on the named Removable Storage Medium  currently in Secondary Storage Device . If in step  it is determined that the file does not exist on the named Removable Storage Medium , then control passes to step . If in step  it is determined that the file does exist on named Removable Storage Medium , then in step  Protect File Component  moves the existing copy of the file into a version folder with a similar name, and will place the newer copy of the file in its place. This insures that the most recent copy of the file is where the user expects it.","In step  Protect File Component  reads the file from Primary Storage Device  (FIG. ). In step  Protect File Component  copies the file to named Removable Storage Medium , prompting the user for another disk if necessary (disk is full). Step  determines if there are more files in the list. If there are more files, then control returns to step . If there are no more files to process in step , then in step  Protect File Component  notifies Database Server  of the final location of the files and the protection status of the files to be added to Database .",{"@attributes":{"id":"P-00100","num":"00100"},"figref":["FIG. 10","FIG. 10","FIG. 1","FIG. 12"],"b":["118","1000","114","1","1002","114","208","2","1004","208","1006","1200","114"]},{"@attributes":{"id":"P-00101","num":"00101"},"figref":["FIGS. 11A and 11B","FIGS. 11A and 11B","FIG. 1","FIG. 5"],"b":["114","1100","118","114","1","1102","114","204","206","208","2","1104","410","4","206","114","420","4"]},"Step  determines if click input is received selecting the Tools Option from the Frame Menu, the Find Option from the Tools Context Menu, and the In Data Vault Option from the Find Context Submenu, or, if double click input is received on an item within Data Protection System Domain . If input is received on Tools\/Find\/In Data Vault, then control transfers to , step . If double click input is received on an item within Data Protection System Domain , then step  determines if right click input is received on source media, such as C Drive or D Drive, or on a folder, or, on a file. If right click input is received on source media or a folder, then in step  Name Space Extension  displays a context menu in Left Pane  (FIG. ). Step  then determines if input is received on the Retrieve Option in the context menu, or some other option. If input is received on the Retrieve Option, control transfers to , step . In step , control returns to Existing File Management Software  if any another context submenu item is selected.","If in step  right click input is received on a file, then in step  Name Space Extension  displays a context menu in Right Pane  (FIG. ). Step  determines if input is received on the Retrieve Option, the View Versions Option, or some other option. If the input is received on the Retrieve Option in step , then control transfers to , step . If in step  input is received on the View Versions Option, then in step  Name Space Extension  invokes and displays a Data Protection System Version Display Dialog Box. Step  then determines if click input is received on a file and then on a Retrieve Button, or on the Close Button. If click input is received on a file and then on the Retrieve Button, control transfers to , step . If the click input in step  is on the Close Button, then control returns to Existing File Management Software . In step , control returns to Existing File Management Software  if any other option is selected.",{"@attributes":{"id":"P-00104","num":"00104"},"figref":["FIG. 12","FIG. 12","FIG. 12","FIG. 10","FIG. 4"],"b":["1006","1106","11","1200","208","212","2","402","420","1202","124"]},"In step  click input is received on the Find Now Button causing Find Utility  to begin the search. Find Utility  in step  passes the find criteria along with the currently highlighted folder ID from the tree view control to Database Server  (FIG. ). In step  Database Server  queries Database  () for records that match the criteria passed, and in step  returns a list of matches to Find Utility . In step  the results of the search are displayed in the Find Dialog Box. Step  determines if click input is received on a Retrieve Option or a View Versions Option, made available from a pull down frame menu or a context menu made available by clicking on a file displayed in the Find Dialog Box, or input to close the Find Dialog Box. If click input is received on a View Versions Option, control transfers to , step . If click input is received on a Retrieve Option, control transfers to , step . If click input is received to close the Find Dialog Box, the Find Dialog Box is closed and control returns to Existing File Management Software .",{"@attributes":{"id":"P-00106","num":"00106"},"figref":["FIGS. 13A and 13B","FIGS. 13A and 13B","FIG. 11A","FIG. 12","FIG. 11B","FIG. 2"],"b":["1300","1302","1300","1114","1116","1208","206","248","2","1302","1120","204","248"]},"In step , a list of the file name or names selected for retrieval, and their path or paths, are received from the figure that called . In step  input in the Retrieve File Options Dialog Box are received by Retrieve File Component . The options include \u2018Ask Before Overwriting Files\u2019, \u2018Include Subdirectories\u2019, and \u2018Copy File to an Alternate Location\u2019.","Step  determines if the file or files selected for retrieval are to be copied to the original location from where they were protected, or to an alternate location, based on the input in step . If the file or files are to be copied to their original location(s), then control passes to step  where input is received on an OK Button to begin the copying process. In step , Retrieve File Component  gets the first file name and path and reads the file from the proper Removable Storage Medium  that has been loaded into Secondary Storage Device  (FIG. ). If the proper Removable Storage Medium  is not in Secondary Storage Device , Retrieve File Component  will display an Insert Disk Dialog Box in Screen Display  (FIG. ), prompting the user to insert the proper Removable Storage Medium  into Secondary Storage Device . If the Ask Before Overwriting File Option was selected in step , Retrieve File Component  will display a Confirm Replace File Dialog Box in Screen Display , prompting the user for input to authorize replacement or to cancel replacement. The file is then written to Primary Storage Device  () at the location specified by the path. While copying of the file is in progress, Retrieve File Component  displays a Copying Files Dialog Box in Screen Display  which shows the progress of the copying process. Step  determines if there are more files in the list to be retrieved. If yes, control returns to step . If there are no more files in the list, control passes to step .","If step  determines that the file or files selected for retrieval are to be copied to an alternate location, based on the input in step , then in step  the alternate location path input is received by Retrieve File Component . Step  determines if drag and drop input, or copy and paste input, of a file or group of files is received. If the answer is no, indicating that the retrieved files are to be removed from their original folders and subfolders and placed in the alternate location, then in step  Retrieve File Component  gets the first file name and path and reads the file from the proper Removable Storage Medium  that has been loaded into Secondary Storage Device . If the proper Removable Storage Medium  is not in Secondary Storage Device , Retrieve File Component  will display an Insert Disk Dialog Box in Screen Display , prompting the user to insert the proper Removable Storage Medium  into Secondary Storage Device . If the Ask Before Overwriting File Option was selected in step , Retrieve File Component  will display a Confirm Replace File Dialog Box in Screen Display , prompting the user for input to authorize replacement or to cancel replacement. The file is then written to Primary Storage Device  () according to the alternate location path specified. While copying of the file is in progress, Retrieve File Component  displays a Copying Files Dialog Box in Screen Display  which shows the progress of the copying process. Step  determines if there are more files in the list to be retrieved. If yes, control returns to step . If not, control passes to step .","If step  determines that drag and drop input, or copy and paste input, of a file or group of files has been received, indicating that the original directory information is to be retained, then in step  Retrieve File Component  gets the first file name and path and reads the file from the proper Removable Storage Medium  that has been loaded into Secondary Storage Device . If the proper Removable Storage Medium  is not in Secondary Storage Device , Retrieve File Component  will display an Insert Disk Dialog Box in Screen Display , prompting the user to insert the proper Removable Storage Medium  into Secondary Storage Device . If the Ask Before Overwriting File Option was selected in step , Retrieve File Component  will display a Confirm Replace File Dialog Box in Screen Display , prompting the user for input to authorize replacement or cancel. The file is then written to Primary Storage Device  at the location selected by the drop or paste input. While copying of the file is in progress, Retrieve File Component  displays a Copying Files Dialog Box in Screen Display  which shows the progress of the copying process. Step  determines if there are more files in the group of files selected via the drag and drop or copy and paste input. If yes, control returns to step . If not, control passes to step .","In step  Retrieve File Component  determines if one or more errors occurred in the copying process. If yes, then in step , Retrieve File Component  displays an Errors Dialog Box in Screen Display . Errors are kept in a log which may be accessed from the Errors Dialog Box. After closing the Errors Dialog Box, control returns to Existing File Management Software . If there were no errors detected in step , Retrieve File Component  displays an Operation Successful Dialog Box in Screen Display . After closing the Operation Successful Dialog Box, control returns to Existing File Management Software .","Having thus described a presently preferred embodiment of the present invention, it will be understood by those skilled in the art that many changes in construction and circuitry and widely differing embodiments and applications of the invention will suggest themselves without departing from the scope of the present invention as defined in the claims. The disclosures and the description herein are intended to be illustrative and are not in any sense limiting of the invention, defined in scope by the following claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"DESCRIPTION OF THE DRAWINGS","p":["The above and other aspects, features, and advantages of the invention will be better understood by reading the following more particular description of the invention, presented in conjunction with the following drawings, wherein:",{"@attributes":{"id":"P-00027","num":"00027"},"figref":"FIG. 1"},{"@attributes":{"id":"P-00028","num":"00028"},"figref":"FIG. 2"},{"@attributes":{"id":"P-00029","num":"00029"},"figref":"FIG. 3"},{"@attributes":{"id":"P-00030","num":"00030"},"figref":"FIG. 4"},{"@attributes":{"id":"P-00031","num":"00031"},"figref":"FIG. 5"},{"@attributes":{"id":"P-00032","num":"00032"},"figref":"FIGS. 6A and 6B"},{"@attributes":{"id":"P-00033","num":"00033"},"figref":"FIG. 7"},{"@attributes":{"id":"P-00034","num":"00034"},"figref":"FIG. 8"},{"@attributes":{"id":"P-00035","num":"00035"},"figref":"FIGS. 9A and 9B"},{"@attributes":{"id":"P-00036","num":"00036"},"figref":"FIG. 9C"},{"@attributes":{"id":"P-00037","num":"00037"},"figref":"FIG. 10"},{"@attributes":{"id":"P-00038","num":"00038"},"figref":"FIGS. 11A and 11B"},{"@attributes":{"id":"P-00039","num":"00039"},"figref":"FIG. 12"},{"@attributes":{"id":"P-00040","num":"00040"},"figref":"FIGS. 13A and 13B"}]},"DETDESC":[{},{}]}
