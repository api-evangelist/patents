---
title: Element manager common gateway architecture system and method
abstract: A common gateway architecture designed to be generic across different types of network elements and different network protocols, permitting network elements to be added incrementally without recompilation of the entire network element manager, thus reducing overall software maintenance overhead.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06968553&OS=06968553&RS=06968553
owner: Alcatel
number: 06968553
owner_city: Paris
owner_country: FR
publication_date: 20010301
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["CROSS REFERENCE TO RELATED APPLICATIONS","PARTIAL WAIVER OF COPYRIGHT","STATEMENT REGARDING FEDERALLY SPONSORED RESEARCH OR DEVELOPMENT","REFERENCE TO A MICROFICHE APPENDIX","FIELD OF THE INVENTION","ABBREVIATIONS AND DEFINITIONS","LIST OF ABBREVIATIONS","DEFINITIONS","BACKGROUND OF THE INVENTION","OVERVIEW","EMS SOFTWARE DEVELOPMENT","DESCRIPTION OF THE PRIOR ART","OBJECTS OF THE INVENTION","BRIEF SUMMARY OF THE INVENTION","Overview","GENERIC ELEMENT MANAGER SYSTEM (GEM\/EMS)","DESCRIPTION OF THE PRESENTLY PREFERRED EXEMPLARY EMBODIMENTS","DEFINITIONS","OVERVIEW","EMS Application Server Architecture ()","Gateway\/Proxy Layer Overview ()","Gateway\/Proxy Architecture Components ()","Common Domain Server Architecture ()","Client Architecture ()","Exemplary System Deployment ()","Naming Service Registration\/Naming Policy ()","NE Management","NE Connection Management","Exemplary CGA Interface Components ()","PREFERRED SYSTEM CONTEXT OF THE PRESENT INVENTION","CONCLUSION"],"p":["This application incorporates by reference U.S. Pat. No. 6,792,608 entitled \u201cNETWORK NAVIGATOR INTERFACE SYSTEM AND METHOD\u201d filed Mar. 1, 2001 by applicant Bart. A. Theeten.","All of the material in this patent application is subject to copyright protection under the copyright laws of the United States and of other countries. As of the first effective filing date of the present application, this material is protected as unpublished material.","However, permission to copy this material is hereby granted to the extent that the copyright owner has no objection to the facsimile reproduction by anyone of the patent documentation or patent disclosure, as it appears in the United States Patent and Trademark Office patent file or records, but otherwise reserves all copyright rights whatsoever.","Not Applicable","Not Applicable","The present invention is related in the general area of network Element Management Systems (EMS) and software techniques which may be used to minimize the maintenance overhead of EMS when responding to changes in network protocols and\/or incorporation of new\/modified network elements (NE).","As illustrated in , the present invention may have application in situations where there are one or more telecommunications networks (, ) that may or may not contain equipment from different vendors. The network equipment elements (NE) used within these networks (, , , ) may take many forms, including but not limited to switch gear, multiplexers, and the like. These network elements (, , , ) are generally under control of one or more computer systems (, ) that are controlled by computer software (, ) that may be stored on a variety of storage media. This computer software generally takes the form of one or more network element managers (, , , ) that control and monitor the network elements (, , , ) that comprise constituent components of the telecommunication networks (, ).","The present invention deals specifically with implementations of the network element manager (, , , ) as they relate to the overall control and monitoring of the various network elements (, , , ) within the context of one or more telecommunications networks (, ).","To minimize the verbosity of this document, a variety of abbreviations and definitions will be provided to aid the reader. This information may be applicable to the prior art, the present invention, or some combination of the two. No assumption should be made regarding the applicability of this information except as referenced within the applicable preferred embodiment description of the present invention as given later in this document.","The following acronyms will be used throughout this document:\n\n","These acronyms must be interpreted within their context as describing either the prior art (in some contexts) or the present invention and its embodiments. Some terms will apply to both the prior art and the present invention while others may apply to one or neither of these.","The following definitions will be used throughout this document in describing the prior art as well as the present invention and its embodiments:\n\n","Network elements (NE) (, , , ) as illustrated in  generally make use of many different communication protocols. This diversity in communications protocols increases the difficulty and time to customize a common network element manager system (EMS) (, , , ) for every network element using a different protocol in the system. For example, incorporating the individual protocols within the EMS generally increases the overall subsystem complexity, increases code size, probability of software error\/failure, and compilation time. Thus, as illustrated in , the current state of the art is to incorporate each network element protocol (TL1, SNMP, Q3, etc.) within each EMS (, , ). These protocols (, , ) are then used to communicate with the various protocol-specific network elements (, , , , , ).","Prior to the present invention, as illustrated in  the code of the network manager system (EMS) (, , ) had to be revised and recompiled for each different protocol (, , ) used by a network element (, , , , , ). Software developers maintaining EMS had to be very knowledgeable of the network element manager code and the structure of this system in order to make any necessary revisions to the software code. Thus, the level of software developer expertise in the prior art is significant and nontrivial, and the amount of time required to implement changes to the EMS is significant.","As illustrated in , a common software configuration implementing a network management function may include numerous Element Management System (EMS) components (, , ) each of which implements a different protocol (TL1, SNMP, Q3, etc.) (, , ). These protocols (, , ) are integrated into each EMS component (, , ) and constitute a combined Application Logic and Protocol Layer ().","The rationale for various EMS embodiments (, , ) is that the protocols they implement (TL1, SNMP, Q3, etc.) (, , ) are necessary to support a variety of network switching and multiplexing equipment (, , , , , ) that by necessity or implementation requires a specific communication protocol. This Network Element (NE) layer () may incur significant changes as new equipment is added and\/or removed and new protocols or protocol extensions are incorporated in the various network elements (, , , , , ).","As each of these network changes is incurred, the EMS software must be recompiled with each new protocol change to incorporate this new network management functionality into the overall system. This creates a significant burden on software management personnel, as the tight integration of the application logic and the network element protocol layer within the EMS makes this system difficult to maintain and prone to errors in software development and maintenance.","Accordingly, the objects of the present invention are (among others) to circumvent the deficiencies in the prior art and affect the following objectives:\n\n","(2) To enable Element Management Systems to be augmented with additional Network Elements without the need for recompilation.","(3) To minimize the complexity of Element Management Systems so as to increase their reliability and ease of software maintenance.","(4) To reduce the time needed to implement changes to an EMS.","(5) To permit changes to be made to the EMS by software developers with a reduced skill set.","(6) To permit implementation of network elements from a variety of vendors into a single EMS.","While these objectives should not be understood to limit the teachings of the present invention, in general these objectives are achieved in part or in whole by the disclosed invention that is discussed in the following sections. One skilled in the art will no doubt be able to select aspects of the present invention as disclosed to affect any combination of the objectives described above.","Referencing , the present invention can best be illustrated in terms of an exemplary network management application in which a wide variety of applications, such as Alarm Surveillance Manager (AS, a NML-layer application that allows one to monitor, acknowledge, and resynchronize alarms sent by a collection of NEs) (), Physical Network Managers (PNM, a NML-layer application that allows a network administrator to add\/delete and supervise\/unsupervised NEs) (), and the like along with their possible interface adapters (). In this scenario one or more Generic Element Manager Systems (GEM\/EMS) (, ) communicates with a Generic Element Manager Application Server subsystem () via a standard software interface such as CORBA (). The GEM Application Server () then communicates over an internal API (). This API is then interfaced to one or more generic protocol proxies (, ) that then communicate with the network elements (, ) via a network element protocol specific interface (, ).","The architecture of the system illustrated in  differs significantly as compared to the prior art in that the GEM\/EMS Application Server () along with the associated internal API interface () and generic proxies (, ) represent a new paradigm in the implement of network element management to control, supervise, and monitor the various network elements (, ) via a wide variety of network element specific protocols (, ).","Briefly, the invention is a system permitting a network Element Management System (EMS) to be maintained and modified without the huge software overhead of supporting a plethora of network protocols that are targeted towards a variety of network elements (NE).","As illustrated in , the present invention solves the problem present in the prior art by using a common gateway architecture (CGA) () driven by an EMS () designed to be generic across different types of network elements and different network element protocols. The architecture is best described as client\/server based with a gateway\/proxy (GP) layer () that contains the protocol specific generic gateways. The GP layer () is not required to have any specific network element knowledge but instead just needs to know the protocol used to communicate with the network elements (, , , , , ). The GP layer () formats requests from the server layer () into protocol specific requests and translates the protocol-specific responses into server objects\/attributes. The GP layer () is the only component directly interfacing with the network elements (, , , , , ) to setup or close connections, send commands and receive responses and monitor for events\/alarms.","While this invention is susceptible of embodiment in many different forms, there is shown in the drawings and will herein be described in detailed preferred embodiment of the invention with the understanding that the present disclosure is to be considered as an exemplification of the principles of the invention and is not intended to limit the broad aspect of the invention to the embodiment illustrated.","The numerous innovative teachings of the present application will be described with particular reference to the presently preferred embodiment, wherein these innovative teachings are advantageously applied to the particular problems of an ELEMENT MANAGER COMMON GATEWAY ARCHITECTURE SYSTEM AND METHOD. However, it should be understood that this embodiment is only one example of the many advantageous uses of the innovative teachings herein. In general, statements made in the specification of the present application do not necessarily limit any of the various claimed inventions. Moreover, some statements may apply to some inventive features but not to others.","Throughout the discussion in this document the following definitions will be utilized:","System Blocks\/Procedural Steps Not Limitive","The present invention may be aptly described in terms of exemplary system block diagrams and procedural flowcharts. While these items are sufficient to instruct one of ordinary skill in the art the teachings of the present invention, they should not be strictly construed as limiting the scope of the present invention. One skilled in the art will be aware that system block diagrams may be combined and rearranged with no loss of generality, and procedural steps may be added or subtracted, and rearranged in order to achieve the same effect with no loss of teaching generality. Thus, it should be understood that the present invention as depicted in the attached exemplary system block diagrams and procedural flowcharts is for teaching purposes only and may be reworked by one skilled in the art depending on the intended target application.","Personal Computer Not Limitive","Throughout the discussion herein there will be examples provided that utilize personal computer (PC) technologies to illustrate the teachings of the present invention. The term \u2018personal computer\u2019 should be given a broad meaning in this regard, as in general any computing device may be utilized to implement the teachings of the present invention, and the scope of the invention is not limited just to personal computer applications.","Internet\/Intranet Not Limitive","Throughout the discussion herein the terms Internet and Intranet will be used generally to denote any network communication system or environment. Generally the term Intranet will denote communications that are local to a given system or user, and Internet will describe communications in a more distant local. One skilled in the art will recognize that these terms are arbitrary within the contexts of modern communication networks and in no way limitive of the scope of the present invention.","The present invention specifically anticipates that in some implementations the GUI development framework (and\/or its runtime component) will communicate with the data used to drive the GUI over the Internet. Thus, the application driving the user interface may reside on one computer system and the data used for presentation and control may be contained somewhere else on another computer system and be accessed via any number of networking protocols.","Application Programming Interface (API) Not Limitive","While the present invention may be in part implemented using standard Application Programming Interfaces (APIs) such as Software Development Kits (SDKs) and the like, there is no requirement that the present invention be implemented using these tools.","Operating System Not Limitive","Additionally, while the present invention may be implemented to advantage using a variety of Microsoft\u00ae operating systems (including a variety of Windows\u2122 variants), nothing should be construed to limit the scope of the invention to these particular software components. In particular, the system and method as taught herein may be widely implemented in a variety of systems, some of which may incorporate a graphical user interface. Some examples of these include HP-UX\u2122, LINUX\u2122, SOLARIS, and UNIX\u2122 (and its variants), among others.","Data Structures Not Limitive","The present invention may be embodied in a variety of data structures in some preferred embodiments. However, the form of such data structures as described herein is only exemplary. One skilled in the art would quickly realize that a wide variety of other data structures could be used equivalently in this application. Therefore, no data structure contained herein should be interpreted as limiting the scope of the present invention.","As illustrated in , the present invention utilizes a Generic Element Management System (GEM\/EMS) () that interfaces with a Common Gateway Architecture (CGA) () that communicates with a variety of generic proxies (, , , etc.). These proxies (, , ) then communicate in a protocol-specific manner (, , ) with a variety of network elements (, , , , , ) that may be from a variety of equipment vendors. The strength of this architecture lies in the ability to communicate with equipment of a variety of vendors without having to specifically code (and maintain) this support in the EMS ().","Referencing , the Common Gateway Architecture (CGA) () is a client\/server architecture in which the Element Management System (EMS) () takes the role of \u201cclient\u201d and the protocol gateways\/proxies (, , ) take the role of \u201cserver\u201d. The EMS () defines all protocol-independent application logic while the gateways\/proxies (, , ) deal exclusively with protocol-specific knowledge.","Generally, the present invention uses one protocol gateway\/proxy per Network Element protocol (, , ). The CGA () defines a generic protocol-independent interface between client (EMS) () and server (gateway\/proxy) (, , ), the CGA Interface (). In other words, each protocol gateway\/proxy (, , ) needs to implement this generic interface.","From , it is clear that the present invention can be thought of as incorporating an Application Layer (), a Gateway\/Proxy Layer (), and a Network Element Layer (). Since the Application Layer () in the present invention is represented as a Server, with corresponding Client functionality being incorporated in the Gateway\/Proxy Layer (), the following discussion will detail these elements and how they interact.",{"@attributes":{"id":"p-0073","num":"0141"},"figref":"FIG. 5","b":["0500","0500","0510","0520","0530"]},"Server Plug-in Framework ()","The Server Plug-in Framework () allows for sub-components (i.e. functional domain managers) to be plugged into the system.","The components that are available in the system are read from a Supported Domains configuration file (SupportedDomains.properties) (). As different types of Network Elements possibly support different subsets of Network Management functions, the Supported Domains configuration file is indexed by NE type and release and is consulted each time a new NE instance is added to the system.","When a request to perform a certain NM function comes in, the responsible domain server is looked up and when no such server is available for the given NE instance, an OperationNotSupportedexception is thrown by the system.","Domain Managers (Plug-ins) ()","Domain Managers (plug-ins) () provide specific NM functionality for their domain. Each domain manager has its own name space and possibly shares (or provides access to) parts of his name space with other domain managers. Domain managers are also referred to as domain servers or domain servants.","Illustrated in  are exemplary domain servers () including Equipment (), Facility (), Cross-Connection (), Test Access (), PM (), System Maintenance (), Alarm (), and NE Directory () Managers. One skilled in the art will recognize that a wide variety of other plug-ins () are also possible and supported by this architecture.","Standard Generic Services ()","Standard Generic Services () generally includes a collection of services available to all domain managers.","The Persistency Service () provides a repository for persistent data, like the list of NEs to be managed by the server with all the necessary address information to contact each NE.","The Event Handler () listens for autonomous messages coming from the different NEs, and dispatches those messages internally towards the relevant domain manager (alarm manager, database change handler.","The Command Dispatcher () interacts with the protocol specific gateway\/proxy for sending commands to and receiving responses from the target Network Element.","The Session Manager () maintains information (operator profile) about each client connected to the server. It builds Session CORBA objects for each client. Clients then use their dedicated Session object to obtain a reference to their dedicated domain managers.","The Security Manager () limits the actions available to a particular client on an individual object or group of objects. The security manager interfaces with the security database (). This database contains Object Access Domains (OAD) and Functional Access Domains (FAD) associated with operator profiles.","The Management Information Base (MIB) () is a collection of objects used in the request routing process, i.e. the process of forwarding incoming requests to the right domain manager for domain specific processing. The MIB acts as a cache for subsequent requests to those domain managers that keep (parts of) their name space in memory (e.g., the equipment domain manager). The MIB provides convenient object retrieval\/storage functionality.","Referencing the Gateway\/Proxy Layer High Level Overview in , the gateway\/proxy layer () consists of proxies () that format requests () from the EMS () application logic layer () into protocol-specific requests () and translates the protocol-specific responses () into application logic layer () objects\/attributes for use by the EMS. The gateway\/proxy layer () is the only component directly interacting with the network elements (at the network element layer ()) to setup or close connections, to send commands and receive responses and to monitor for autonomous messages (alarms and events).","The architecture depicted in , , and  contrasts with the PRIOR ART architecture illustrated in  in that in the PRIOR ART architecture the application logic is network element protocol dependent. This means that all application logic needs to be revised (or event completely rewritten) when a new protocol is added to the network.","The Common Gateway Architecture (CGA) illustrated in  allows the application logic (, ) to be shared among protocols, using a protocol independent data model, also called a Management Information Base (MIB). It is the responsibility of the protocol gateways\/proxies (, , , ) to translate the data structures the MIB is built up with, into protocol-specific data structures () and vice versa.",{"@attributes":{"id":"p-0089","num":"0157"},"figref":"FIG. 6","b":["0700","0610","0610"],"ul":{"@attributes":{"id":"ul0006","list-style":"none"},"li":{"@attributes":{"id":"ul0006-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0007","list-style":"none"},"li":["Manage the connections to the network elements, including automatically re-establishing connections when they get lost ().","Match network element responses with EMS requests, including correlation of linked replies ().","Parse () and report autonomous messages ().","Be network element independent ().","Support multiple network element connections at the same time ().","Be multi-threaded to handle multiple commands at the same time.","Implement the CGA interface ()."]}}}},"The protocol parser\/translator () merely defines the syntax of the commands, the responses and the autonomous messages. Each network element however defines the semantics of the commands, their input arguments and their result (output). These differences between network elements are handled in NE type and release dependent configuration files, stored in the protocol dictionary ().","For each network element type\/release, the protocol dictionary () stores all command templates and the rules to parse individual object attributes out of command responses and autonomous messages. Command templates are the actual commands in the right syntax with placeholders for the command-input arguments. The rules to parse individual object attributes out of command responses and autonomous messages are regular expressions in case of the TL1 protocol. In case of the Q3 protocol, the dictionary implements the Q3 GDMO model and the attributes are immediately available as attributes on the managed objects defined in the GDMO model, with ASN.1 syntax. One skilled in the art will quickly realize that a wide variety of protocols exist and that for each of these supported by the CGA, there must exist corresponding translation tables within the protocol dictionary ().","CGA Interface Description","The generic interface between EMS and protocol gateways\/proxies can be defined in the programming language of choice, or even in IDL, depending on the overall system requirements. An exemplary embodiment of this interface may be defined in Java as illustrated in .","The definition of Address and all exceptions is left unspecified. A NameAndStringValue structure is the representation of a name-value pair in which both the name and the value are of type String. An AttributeValue structure is the representation of a name-value pair in which the name is of type String and the value is of type org.omg.CORBA.Any. An object of type org.omg.CORBA.Any can represent any type defined in IDL. The reason for using CORBA structures at this level is to avoid structure translation from EMS MIB to clients.","The Response object is the protocol independent object used for passing information from gateway\/proxy to the EMS. An example Response data structure could be as simple as the exemplary listing illustrated in .","The above data structure resembles the definition of an SQL database table. The fields are Any structures and can therefore contain any pre-defined IDL data structure. The unique identification of each object in the response is included as one of the columns in this table. In case of the TL1 protocol, this unique identifier will be an AID; in case of the Q3 protocol, the unique identifier is an FDN. The EMS MIB has a mapping function to translate these unique identifiers into internal unique object identifiers. Typically, this mapping function is NE dependent.","The commandId argument in the sendCommand( ) function is the unique identification for the action to be executed in the network element. The protocol gateway\/proxy searches for this commandId in the protocol dictionary for the given network element type and release and finds the command template associated with this identifier.","Ideally, command identifiers are logical identifiers corresponding to high-level actions available in all network elements, no matter what their protocol is. Examples of such logical identifiers are: get, set, delete, create, login and logout. However, in order to provide 100% manageability, most of the command identifiers will be network element specific.","The entityId argument in the sendCommand( ) function is the unique identification of the target object in the network element for the action. In order to support hierarchical network element models, the entityId takes the form of a Fully Distinguished Name (FDN) structure. An FDN is a sequence of Relative Distinguished Names (RDNs). An RDN is a name-value pair in which the name is commonly referred to as the Distinguishing Name (DN). Each child of the same parent has a unique RDN, in other words: each RDN is unique within its parent's context.","The in Args argument in the sendCommand( ) function corresponds to the list of arguments of the command. The protocol gateway\/proxy replaces each placeholder in the command template, with the value of the corresponding argument in the argument list.","The outArgs argument in the sendCommand( ) function corresponds to the list of attributes to be returned by the command. Only the given attributes will appear in the Response structure.","Protocol Independent Data Model","The Element Management System's internal object model needs to be protocol independent. More specifically, this requirement means the model needs to be able to store any number of attributes of any possible type. One way this can be achieved is by storing attribute-value pair lists, in which the value is of type org.omg.CORBA.Any, in a generic object class from which all other MIB object classes inherit. Specialization can be applied to better organize object functionality, hence facilitating the implementation of the application logic.","An example base object class definition is illustrated in . All member functions have intentionally been left out.","This section describes a design pattern (as illustrated in ) that may be used to broadly exemplify embodiments of the present invention (as opposed to providing an exemplary actual implementation). Each domain server uses this design pattern () as a guideline for implementation, the details of which are described separately in this document.",{"@attributes":{"id":"p-0104","num":"0179"},"figref":"FIG. 12","ul":{"@attributes":{"id":"ul0008","list-style":"none"},"li":{"@attributes":{"id":"ul0008-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0009","list-style":"none"},"li":["Add\/remove NEs from the system","Starting\/stopping the supervision of an NE"]}}}},"Generally each domain server publishes the following open CORBA interfaces:\n\n","The following layers can be distinguished within the domain server ():\n\n","Concept","In the present invention, clients are lightweight: they handle nothing but presentation data and should therefore per definition be NE\/protocol independent. They are of course function dependent, which could in fact be seen as NE dependence if a particular function is only available in one particular NE. This is however not part of the definition of NE independence as used throughout this document. Only handling presentation data means that no interpretation may be done of any attribute values returned by the server other than translate those values into user friendly, language dependent strings.","NE dependence however occurs when 100% manageability needs to be provided over a strongly typed IDL interface. A strongly typed interface is an interface where all functionality is available as specific functions with a specific set of typed arguments (hard-coded function signature). A weakly typed IDL interface provides a generic execute( ) function that takes an action ID and a name-value-pair sequence as arguments. In case of a weakly typed interface, 100% manageability can still be achieved without becoming NE dependent in two ways:\n\n","GEM uses both types of interfaces: each domain server (optionally) publishes its own strongly typed interface and all domain servers share the navigation interface which is weakly typed.","Architecture","The Client Architecture () as illustrated in  looks very similar to the EMS Application Server Architecture () illustrated in . At the client side, the plug-in concept is also applied but here the plug-in components are commonly referred to as \u201csnap-in\u201d components.","The Client Snap-In Framework () allows for sub-components (views) () to be plugged into the system. This component takes care of initializing the browser (Navigation Tree View) through the dynamic loading of the snap-ins listed in a configuration file (). Each snap-in initializes its root node, which corresponds to the root node of the corresponding server-side plug-in. This is sufficient for the framework to be able to discover the rest of the name space including the functionality supported by each entity in the name space.","Domain Views (Snap-Ins) () provide specific NM functionality for their domain. Each Domain View (, , , , , , , ) has its own name space that is nothing more than a restricted view on the overall Object Model. Multiple different views can share objects. Each Domain View has a corresponding server-side Domain Manager ().","Standard Generic Services () are a collection of services available to all domain views ().","The Persistency Service () provides a repository for persistent data like common configuration files and storage of user preferences ().","The Event Manager () listens for autonomous messages coming from the event service and updates the model accordingly. The Model uses the event manager's services to register for object creation, object deletion and attribute value change notifications.","The Controller () makes sure all views on the model are kept up to date by applying the model-view-controller design pattern. It supports multiple views on the same data. Each modeled object maintains a reference count so that information can be garbage collected in the model as soon as nobody is still visualizing that data.","The Commander () provides the views with the interface towards the server. It makes the IDL layer invisible to view implementers. This object provides an API which is basically a 1-to-1 mapping from the functionality defined on the IDL interface with the difference that for each available function a synchronous and an asynchronous version is available. The Commander object intercepts the responses to each request in order to keep the MIB up-to-date without client-side development effort and to act as a cache for subsequent requests. The Commander object only needs to be extended for the optional specific interface supported by some domain servant.","The Garbage Collector () is a configurable component that removes objects from the MIB, based on their reference count. The garbage collector can be configured to run automatically at certain intervals, manually or when the number of garbage collectable objects reaches some predefined (configurable) value.","The Caching Service () is a configurable component that artificially keeps the reference count above 0 for objects that are not currently being displayed, but are good candidates for becoming visible again in the near future. The caching service has a configurable View stack size. Whenever a view becomes invisible (replaced by some other view), it is pushed onto the View stack. When a view drops off the stack, all of its objects are being invalidated (reference count set to 0) so that they become food for the garbage collector.","The Common Object Model () is a transient collection of objects organized in a tree structure. The collection of all objects in this Model is the overall name space. The model is built up without any programming effort required from the view implementers. The model acts as a cache for subsequent requests for the same information. A view implementer doesn't know when a request for information was satisfied locally or remotely. The model also doesn't require any user intervention for keeping its information up-to-date. Event registration is done dynamically based on what is currently being stored in the model and therefore what is currently being displayed somewhere. The actual objects stored in the model are fully customizable through user-supplied object factories.","While there are many possible deployment scenarios utilizing the present invention, several are preferred. An exemplary embodiment of one such deployment () is illustrated in . This example may in many circumstances represent the \u201cnormal\u201d deployment situation. This means that the setups described here are not the only \u201cworking\u201d ones, but that they are the \u201cdesired\u201d ones in terms of expected performance and added value in many practical systems implementing the present invention.","The optimal implementation of the present invention permits one GEM server per host to have an unlimited number of clients. These clients are either GEM GUI instances, protocol adapters towards external applications or higher level NML applications. Each client typically talks to just one server. The interface between client and server is CORBA based and a client knows how to contact the server by means of the Naming Service. The IOR of the Naming Service is set in a client-side (and server-side) configuration file (ORB.properties). The Naming Service can be running on the same machine or on a remote machine in the same network.","Multiple instances of GEM servers can co-exist on the same machine (, ) and each server typically manages multiple NEs (). Each NE should however be managed by at most one GEM server (), while at the same time, another type of manager is allowed to operate on the same NE (e.g., TL1 terminal) (). One GEM server consists of multiple domain servers (plug-in components) which are all registered with the Naming Service and therefore can be distributed across multiple machines () in the same network.","The following section explains how the Naming Service is being used in the context of the present invention.",{"@attributes":{"id":"p-0125","num":"0211"},"figref":"FIG. 15","b":["1500","0302"],"sub":["\u2014","\u2014"]},"The object references associated with \u201cNetworkAdmin\u201d, \u201cNetworkSurveillance\u201d and \u201cAlarmSynchronizer\u201d are required by the ALMAP components AS and PNM. Their exact names are typically defined in an IDL definition file.","AS also requires the name of the channel on which alarms are being sent, to be \u201cX733EventChannel\u201d. PNM requires the name of the channel on which state changes are being sent, to be \u201cX721EventChannel\u201d. Similarly, these two identifiers are typically defined in an IDL definition file.","NE Management is the process of adding NEs to the network, removing NEs from the network and making the NEs available or unavailable for management operations. All of these operations are initiated from the Physical Network Management (PNM) () application user interface.","NE States","There are a number of states an NE can be in:\n\n","As mentioned previously, at system startup the list of managed NEs is read from persistent storage. Once the system is running, NEs can be added via the PNM user interface. The information entered is:\n\n","PNM generates an internal identification for the NE. This identification cannot be modified, as opposed to the logical NE name. Clients work with the logical NE name, while the server works with the internal identification.","The following steps are performed:\n\n","The NE's type is used to lookup the NE's protocol and supported domains.\n\n","These Ne<Domain>objects are added to the Ne object's plug-in map (key=domain identifier, value=object pointer).\n\n","NEs are removed from the system via the PNM-USM interface. The following steps are performed:\n\n","The NE's information is removed from persistent storage.","Note: as JAVA is the programming language of choice in the GEM project, the finalize( ) method needs to be implemented by all NE objects in order to perform the necessary cleanup, i.e. reverse the steps done in the addNE step.","Start Supervision","This is the process of making the given NE available for management. This operation is started through the PNM-USM interface. The following steps are performed:\n\n","This is the process of making the given NE unavailable for management. This operation is started through the PNM-USM interface. The following steps are performed:\n\n","All domain servers are notified of this event by calling their stopSupervision( ) function.","NE Connection Management includes the process of establishing connections with the NE and tearing down those connections. It also includes the detection of broken connections and automatically reconnecting. Login and logout are also categorized under this header.","Connect to NE","From GEM's point of view, the connection to an NE is a TCP\/IP connection (socket). The actual connection protocol used by the NE itself can be different, e.g. X.25, ACSE, RS232), the complexities of which are hidden by the communications server. The following steps are performed during the connection process:\n\n","The following steps are performed:\n\n","The logout procedure is started.","The socket is destroyed.","The operational state is set to DISABLED and the MIB alignment state is set to MISALIGNED.\n\n","Once the physical connection is established with an NE, the user still needs to login before operations can be done on it. All domain servers use the same connection and user account. The following steps are performed:\n\n","Before closing a physical connection, the user needs to be logged out from the system first. Disconnecting without logging out first will work but is not clean. The following steps are performed:\n\n","The command is sent to the NE.","If the command failed, a ProxyErrorexception is thrown.","Connection Lost\/Reconnect","As with every distributed client\/server architecture, the connection between client and server can break down or temporarily become unavailable. This situation is detected by means of 2 threads:\n\n","The re-alignment thread starts the re-connect process when the communications state is not ENABLED and starts the alignment process when the MIB alignment state is MISALIGNED. The general procedure for this re-connection is as follows:\n\n","While one skilled in the art will quickly recognize that there are a plethora of methods available to implement embodiments of the present invention, it is instructive to view one exemplary embodiment of the CGA architecture and a sample of some of the interfaces that it might permit. To this end,  illustrates an exemplary complement of CGA interface modules () that are described in detail in the following sections.","Add NE to EMS ()","A generalized flowchart for adding a network element to the element management system is illustrated in  (). The method generally follows the following steps as detailed in :\n\n","One skilled in the art will recognize that these steps may be changed in order or function with no loss of generality.","Remove NE from EMS ()","A generalized flowchart for removing a network element from the element management system is illustrated in  (). The method generally follows the following steps as detailed in :\n\n","One skilled in the art will recognize that these steps may be changed in order or function with no loss of generality.","Configure Gateway ()","The protocol gateway doesn't have any NE specific knowledge built in. The gateway however needs to be configured for each network element type. This method instructs the gateway to process the protocol dictionary for the given network element type and release. Internally, the gateway will build up a map of command identifier to protocol template strings and a map of command identifier to rules to parse attribute values out of the command response.","A generalized flowchart for configuring a gateway is illustrated in  (). The method generally follows the following steps as detailed in :\n\n","One skilled in the art will recognize that these steps may be changed in order or function with no loss of generality.","Set NE Address ()","There is one gateway instance per network element. The NE address is set by this function.","A generalized flowchart for setting the network element address is illustrated in  (). The method generally follows the following steps as detailed in :\n\n","One skilled in the art will recognize that these steps may be changed in order or function with no loss of generality.","Connect to NE ()","This method establishes a socket connection with the network element on the address set by the previous function. The function starts by setting the network element's communications state to \u201cconnecting\u201d. Then, the function tries to open a socket connection with the NE. If this fails, the communications state is set to \u201cdisconnected\u201d and an exception is thrown. If the socket connection was successfully established, the communications state is set to \u201cconnected\u201d.","A generalized flowchart for connection to a network element is illustrated in  (). The method generally follows the following steps as detailed in :\n\n","One skilled in the art will recognize that these steps may be changed in order or function with no loss of generality.","Disconnect from NE","This method closes the socket connection with the network element associated with this gateway. The function start by setting the network element's communications state to \u201cdisconnecting\u201d. Then, the function closes the socket connection and sets the communications state to \u201cdisconnected\u201d.","A generalized flowchart for disconnecting from a network element is illustrated in  (). The method generally follows the following steps as detailed in :\n\n","One skilled in the art will recognize that these steps may be changed in order or function with no loss of generality.","Check Connectivity\/Ping Cycle ()","Once the server is logged in to the network element, a polling cycle continuously monitoring the responsiveness of the network element, is started. (The server logs in to the network element by sending the LOGIN command using the \u201csend command to NE\u201d function). This function uses a timer to periodically send a command with limited overhead (e.g. RTRV-HDR in case of TL1 NEs) to the network element. When the command comes back within a certain configurable time interval, the timer is reset. If the command doesn't come back within this time interval, a communications problem was detected and flagged.","A generalized flowchart for performing this connectivity check\/ping cycle is illustrated in  (). The method generally follows the following steps as detailed in :\n\n","One skilled in the art will recognize that these steps may be changed in order or function with no loss of generality.","Register Autonomous Message Callback ()","Alarms, database change messages, threshold crossing alerts, etc. are all examples of autonomous messages. These messages are spontaneously sent by the NE to the server. As this happens asynchronously, the server needs to register a callback with the gateway. Each time an autonomous message is received by the proxy, the proxy calls the handleMessage( ) method defined in callback object for all registered callbacks.","A generalized flowchart for registering autonomous message callbacks is illustrated in  (). The method generally follows the following steps as detailed in :\n\n","One skilled in the art will recognize that these steps may be changed in order or function with no loss of generality.","Send Command to NE ()","This function sends the command associated with the given command identifier and the given command-input arguments to the object identified by the given FDN. The command also takes the list of expected output arguments as input. The function first checks if the communications state is currently \u201cconnected\u201d. If not, an exception is thrown. The function searches for the given command identifier in the protocol dictionary. If the command identifier was not found, the CommandNotFound exception is thrown. Else, the command template associated with the command identifier is retrieved from the protocol dictionary. The function then replaces the placeholders in the command template with the given values for the corresponding attributes. The function then generates a unique (sequential) number that will act as the unique identification for the command execution. The placeholder for the CTAG attribute is replaced by this unique number. The command response sends this unique number back, so that the system can correlate the response with a command in a multi-threaded environment with asynchronous command executions. The function sends the command over the socket connection and stores the command in a correlation map. The current thread is put to sleep.","In the meantime, another thread is continuously monitoring the socket for incoming messages (autonomous messages and command responses). When a message comes in, a sequence of characters is read from the socket until a pre-defined termination character is read (\u2018;\u2019 in case of TL1). The termination character defines the end of a message. The message type is extracted. This type identifies the message as an autonomous message or as a command response. If the message is an autonomous message, the registered callback's handleMessage( ) method is called (see registercallback( ) function) for processing. If the message corresponds to a command response, the correlation tag is extracted from it and the correlation map is searched for the presence of this tag. If the tag is not present, this message is discarded. If the tag was found, the corresponding command object is retrieved from the map. The command's response is added to the command object and all sleeping threads are notified. This wakes up a randomly selected send-thread. The awoken thread checks whether his command object now has the response set. If so, the function returns the response. Otherwise, the thread is put back to sleep and the next randomly selected send-thread is awoken until no more send-threads are available.","A generalized flowchart for sending commands to a network element is illustrated in  (). The method generally follows the following steps as detailed in :\n\n","One skilled in the art will recognize that these steps may be changed in order or function with no loss of generality.","Retrieve Command Response From NE ()","A generalized flowchart for retrieving command responses from a network element is illustrated in  (). The method generally follows the following steps as detailed in :\n\n","One skilled in the art will recognize that these steps may be changed in order or function with no loss of generality.","Processing Sleep Request Threads ()","Processing of sleep request threads associated with sending and retrieving network element commands is illustrated in  ().","While the present invention may be best applied to situations in which telecommunications networks are to be managed and maintained either locally or remotely using graphical user interface (GUI) based operator consoles, the present invention also has wide applicability in situations in which any type of hardware and\/or software component in a computer network is to be managed in a uniform way with minimal software design complexity and maintenance costs.","The functional elements of the present invention are widely applicable to situations involving multiple types of remote equipment sourced from a variety of hardware and software manufacturers. Since the present invention breaks the compile-time link between network element management and the tool used to perform the management function, this permits a wide variety of applications in situations where networks must be grown dynamically by adding hardware and software, but which must remain up and functional during this upgrade process.","An Element Manager Common Gateway Architecture (CGA) system and method incorporating a client\/server architecture in which a network Element Management System (EMS) takes the role of \u201cclient\u201d and the protocol gateways\/proxies take the role of \u201cserver\u201d has been disclosed. The EMS defines all protocol-independent application logic while the gateways\/proxies deal exclusively with protocol-specific knowledge. The Common Gateway Architecture (CGA) allows the application logic to be shared among protocols, using a protocol independent data model. A significant aspect of the software maintenance in EMS systems is that since network elements (NEs) use many different protocols, there exists a difficulty and time lag associated with customizing a common network element manager for every network element using a different protocol in a given system. Modifications to the system typically require incorporation of new code into the network element manager with associated recompilation of the entire network element manager subsystem. The present invention solves this problem by using a common gateway architecture designed to be generic across different types of NEs and different network protocols. This permits NEs to be added incrementally without recompilation of the entire network element manager, thus reducing overall software maintenance overhead.","Although a preferred embodiment of the present invention has been illustrated in the accompanying Drawings and described in the foregoing Detailed Description, it will be understood that the invention is not limited to the embodiments disclosed, but is capable of numerous rearrangements, modifications, and substitutions without departing from the spirit of the invention as set forth and defined by the following claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["For a fuller understanding of the advantages provided by the invention, reference should be made to the following detailed description together with the accompanying drawings wherein:",{"@attributes":{"id":"p-0031","num":"0099"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0032","num":"0100"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0033","num":"0101"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0034","num":"0102"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0035","num":"0103"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0036","num":"0104"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0037","num":"0105"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0038","num":"0106"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0039","num":"0107"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0040","num":"0108"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0041","num":"0109"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0042","num":"0110"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0043","num":"0111"},"figref":"FIG. 13"},{"@attributes":{"id":"p-0044","num":"0112"},"figref":"FIG. 14"},{"@attributes":{"id":"p-0045","num":"0113"},"figref":"FIG. 15"},{"@attributes":{"id":"p-0046","num":"0114"},"figref":"FIG. 16"},{"@attributes":{"id":"p-0047","num":"0115"},"figref":"FIG. 17"},{"@attributes":{"id":"p-0048","num":"0116"},"figref":"FIG. 18"},{"@attributes":{"id":"p-0049","num":"0117"},"figref":"FIG. 19"},{"@attributes":{"id":"p-0050","num":"0118"},"figref":"FIG. 20"},{"@attributes":{"id":"p-0051","num":"0119"},"figref":"FIG. 21"},{"@attributes":{"id":"p-0052","num":"0120"},"figref":"FIG. 22"},{"@attributes":{"id":"p-0053","num":"0121"},"figref":"FIG. 23"},{"@attributes":{"id":"p-0054","num":"0122"},"figref":"FIG. 24"},{"@attributes":{"id":"p-0055","num":"0123"},"figref":"FIG. 25"},{"@attributes":{"id":"p-0056","num":"0124"},"figref":"FIGS. 26\u201327"},{"@attributes":{"id":"p-0057","num":"0125"},"figref":"FIGS. 28\u201329"},{"@attributes":{"id":"p-0058","num":"0126"},"figref":"FIG. 30"}]},"DETDESC":[{},{}]}
