---
title: Electronic content search and delivery based on cursor location
abstract: An electronic search is automatically initiated when a cursor hovers in one location for a predetermined time. A target process associated with a target window is forced to re-render data to the target window in an update region that includes the detected cursor location. From the re-rendered data, a primary word and context words near the cursor location are determined. One or more local or remote electronic data stores are searched for substantive content related to the words. The content is prioritized according to user preference and displayed in a semitransparent window that is persistently visible to a user, yet does not obscure other content in an underlying window and does not shift the focus from an active window. Re-rendering is accomplished by invalidating an update region of the target window, and forcing the operating system to issue a paint message, causing the target process to redraw the update region.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07100123&OS=07100123&RS=07100123
owner: Microsoft Corporation
number: 07100123
owner_city: Redmond
owner_country: US
publication_date: 20020125
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DESCRIPTION OF THE PREFERRED EMBODIMENT","EXEMPLARY EMBODIMENT"],"p":["The present invention generally relates to providing substantive information about a word or words designated by a user, and more specifically, to automatically providing the substantive information in response to a user hovering a cursor controlled by a pointing device over the text word or words.","Electronic content search and delivery typically involves accessing one or more data stores to obtain content about a requested subject, and providing the content in a manageable form to a user. There are a number of electronic content search and delivery models currently in use. For example, a common Web search model accesses a number of servers and provides a list of links related to keywords entered by a user. Commercial products implementing the Web search model, such as YAHOO!\u2122 and GOOGLE\u2122, are well known. A localized reference model accesses one or more local data stores of content and provides definitions, synonyms, language translations, summaries, or other substantive content related to keywords identified by a user. Commercial products implementing the local reference model include Microsoft Corporation's BOOKSHEL\u2122 2000. A third model accesses offline or online help information and provides a pop-up box to explain software features, evaluate spelling of text, or provide other brief information. Commercial products implementing the help model include Microsoft Corporation's OFFICE ASSISTANT\u2122, HELP VIEWER\u2122 and TOOLTIPS\u2122.","Combinations of the above models are also available. Some resemble the Web search model, but include aspects of the help model. For example, a product called QUICKCLICK\u2122 (formerly FLYSWAT\u2122\u2014no longer available) evaluated the text of a downloaded Web page and automatically provided links to other Web pages for terms and phrases recognized on the downloaded Web page. Each recognized term and phrase on the Web page was changed to a different color text and associated with a link. A user could then click on one of the colored terms or phrases to be linked to another Web page.","Another commercial product, which is provided by ATOMICA Corporation and called ATOMICA\u2122, extends the Web search model to provide an online version of the localized reference model. This product provides substantive information, rather than links to substantive information, although one option enables a user to search the Web for related information. Although originally owned and commercialized under a different name, details of the product are disclosed in International patent application, publication number WO 01\/13245 A1. The ATOMICA software requires software to be downloaded and installed on a user's computer (i.e., on a client computer). When running, the ATOMICA software enables the user to designate a text item displayed in an active window of another software program, such as a word processor, an email program, a browser, a spreadsheet program, etc. ATOMICA retrieves substantive information about the designated text item from an online database and then provides the substantive information through a customized browser window.","As indicated above, the ATOMICA software must be downloaded from a specific Web site and installed by the user on a client computer, based upon an affirmative decision by the user to install the product. A user will likely not know that the software is available, unless informed by another user or by reading a publication that describes the software and indicates where it can be downloaded. Thus, the very existence of this software is somewhat difficult for a user to determine. Even if the ATOMICA software is preinstalled and set to automatically load upon startup of the user's computer, it may not be readily apparent to the user how to activate the software. The ATOMICA software may be set to automatically display a semi-persistent \u201canswer bar.\u201d The answer bar is a small window with a drop-down text box. When the answer bar initially appears, the drop-down box is empty, so the user cannot make any selection. The answer bar also does not provide any substantive content. Instead, by trial and error, the user may determine that text can be entered into the drop-down box. It is the user's entries that are then listed in the drop-down box.","However, there is no indication that a user may designate a word in another window. The answer bar may attract the user to type in a word, but the answer bar does not indicate that the ATOMICA software enables a user to initiate a search with a key-click combination. By default, the ATOMICA software requires a user to activate the software by designating a word in a window and then actuating a mouse button while holding down one or more specific keys on the user's keyboard that the user must remember. To determine how to designate a word and activate the software, the user must read instructions, or learn from another user. Because the ATOMICA software does not make it apparent to a novice user how to activate or use the software, its use is also somewhat difficult to discover.","Once the user is aware of the software and determines how to activate the software, the user may find it difficult to remember how to use the software. Specifically, the user may find it difficult to remember the specific key(s) that must be held down and the mouse button that must be pressed at the same time to activate the ATOMICA software to obtain information on a word or phrase. The user may manually simplify word designation by choosing an option to press only the right mouse button without having to hold down a key at the same time. However, the user must first determine how to find and select this option, and be willing to forgo using the selected mouse button for all other purposes. For example, the right mouse button is often used by many software programs to provide a pop-up menu of frequently used functions, such as cut, copy, and paste commands. If the user selects the right mouse button to designate a word for the ATOMICA software, the user loses the pop-up menu of functions.","Although not currently implemented in the publicly available ATOMICA software, International patent application, publication number WO 01\/13245 A1, which is assigned to Atomica Corporation, indicates that a user may place a cursor on a word and wait a specified amount of time to indicate that further information is desired about the designated word. However, the publication provides no enabling detail regarding this point-and-wait indication to obtain information.","In the context of clicking on a text item with a mouse, the above international publication indicates that the ATOMICA software determines a word or words from the designated text item by utilizing a text-grabbing algorithm, such as that described in U.S. patent application Ser. No. 09\/127,981 and\/or an optical character recognition (OCR) algorithm. Knowing the position indicated by the pointing device, the software installed on the user's computer requests information from the application program that has displayed the text item. According to the international publication, the software receives the word from the application program, \u201cperhaps using an application programming interface (API).\u201d No further detail is provided. Alternatively, if the text is transmitted in a separate data stream, such as a data stream associated with a video stream, the international publication indicates that the program may retrieve the text directly from the separate data stream, rather than determining the word or words from display. The publication provides no further detail on the above word determination techniques. As described in this reference, the program also draws context-indicating words from the body of text, typically from the same sentence as that including the designated word, and\/or from a title of the body of the text. The International patent application publication number WO 01\/13245 A1 indicates that the user's computer sends a list of words from the body of the text, including the designated word, to a server. For example, if a user clicked on the word \u201cstock,\u201d which was followed in the sentence by the word \u201cbroker,\u201d the user's computer would send a list of words including \u201cstock\u201d and \u201cbroker.\u201d The international publication does not provide any further detail on how the software on the user's computer extracts or determines the context-indicating words to send to the server.","Once the user's computer sends the list of words to the server, the server runs a context-determination algorithm to determine a context of the designated word. Once the proper context is determined, a program running on the server searches online data stored on the server or other machines comprising a network. The server appears to first search for data regarding multiple words. If no matches are found for the multiple words, the server then searches for the single designated word. There does not appear to be any way to modify or override this search order. The user also does not have any control over the data resources that are searched by the server, or any way to prioritize the type of data that are more relevant to the user. For example, the user cannot choose to receive medical data before business data, if a designated word, acronym, or other text, has multiple different meanings in each of these two fields of interest.","The results of the search are then passed by the server back to the user's computer. Although the online database perhaps provides updated information, because of the product's complete dependence on Internet communication and remote processing of selected text, the server is relatively slow to respond compared to the response time for a localized reference model that does not need to communicate over the Internet.","When the information arrives from the server, it is displayed in a customized browser window. Specifically, the ATOMICA product requires that Microsoft Corporation's INTERNET EXPLORER\u2122 (IE) version 4 or higher be installed on the user's system, because the ATOMICA product uses IE's ActiveX Hypertext Markup Language (HTML) control to display lookup results. The customized browser window overlays any content that is displayed under the area encompassed by the customized browser window. Although the customized browser window can be moved about after it is opened on a display, there is no option that enables a user to selectively position the customized browser window to always appear at a specified position relative to a selected word, or at a desired fixed location on the display. The customized browser window includes a toolbar with standard navigation buttons, such as \u201cback\u201d and \u201cforward\u201d buttons. A menu also enables the user to set some limited options, as described herein. The toolbar also includes a data entry box that enables the user to enter a word or words on which a search for information should be done.","Below the toolbar, the customized browser window is divided into two frames, which the user cannot change. A primary frame displays the substantive search results (or error message, if no results were found). If a word is misspelled, the server will perform a spell check and send a list of alternatives for display in the primary frame. The listed suggestions are hyperlinks to substantive information from the ATOMICA database. If substantive information is provided, but the information is not of a desired type, the user may a select an option in a second frame of the customized browser window to view a list of links to possible alternative meanings. Similarly, one or more other options may be provided in the second frame that provide different types of information for the designated word(s). For example, a medical meaning may be available for the designated word(s) as an alternative to a business meaning that is displayed in the primary frame. The user may select yet another option in the second frame to perform a standard Web search for a list of hyperlinks on the Internet. The resulting hyperlinks are displayed in the primary frame.","To remove the customized browser window from display, the user may manually close the window, or click in another window. Manually closing the customized browser window causes the previously active window underlying the customized browser window to become active again (sometimes referred to as \u201cshifting the focus\u201d to the window). The ATOMICA software assumes that the window containing the designated word was the active window. Thus, the ATOMICA software shifts the focus to that window, even if another window was previously active before the word was designated in a different window. Consequently, the user must click the cursor in the previously active window to shift the focus back to that window. This characteristic of continually shifting the focus makes it difficult for a user to designate words in a secondary window and utilize the resulting substantive information for work in the previously active window. For example, a user may be editing a research report in an active window using a word processor and may wish to obtain substantive information about multiple words found in a secondary window that is displayed by a database program. Using the ATOMICA software, the user must continually shift the focus back and forth between the word processor window and the database window.","Closing the customized browser window optionally (by default) also causes the semi-persistent answer bar to appear on the user's display. As discussed above, the answer bar does not provide any substantive information, but instead, simply provides an input text box in which user can enter a word or words on which to conduct a search for information. The answer bar may be minimized to a small tab, but either the tab or the answer bar then remains on top of other displayed items, and obscures anything underneath it in the display.","A somewhat similar commercial product\/service provided by Babylon.Com Ltd., called BABYLON\u2122, combines the localized reference model with the help model and optionally utilizes network access and standard Web searching. When a user clicks on a text item with a mouse, the BABYLON program recognizes a word or words comprising the selection and searches local and\/or online glossaries for information related to the selected word(s). If found, a small pop-up window includes a definition, a language translation, and\/or other content drawn from glossaries selected by the user.","The BABYLON software must be downloaded and installed on the user's computer. Also as is true of the ATOMICA program, if the user is not aware of the existence of the BABYLON program, then the user will not know to download it from the source Web site. Because there is no apparent indication to a novice user that the software is available, the existence of the BABYLON software is thus also somewhat difficult to discover. In addition, as was true of the ATOMICA software, even if the BABYLON software is preinstalled for the user and set to automatically load upon startup of the user's computer, its use will not be readily apparent, since the user will not know how to designate a word to activate the software without receiving instruction, or learning from another person. Accordingly, the manner in which the BABYLON software is employed will also be somewhat difficult for a user to discover.","Like the ATOMICA software, the user presses one or more mouse buttons while holding down one or more keys on the user's keyboard to activate the software, but the BABYLON software default setting enables a user to press a single mouse button to activate the software. To avoid deactivating functions and quick menus that are already associated with the left and right mouse buttons, if one of these is selected to activate the search for information, the BABYLON software alternatively enables a user to select a word with a center mouse button, e.g., by pressing a scroll wheel if the user's mouse is so equipped. For a user having a mouse with a center button, it is a little easier to remember how to activate the program, if the center mouse button is chosen for this purpose. Nevertheless, the user must still perform some affirmative action to activate the software, and will lose any other functions normally associated with the center mouse button or wheel.","As indicated, the software recognizes a mouse click on a single word or on a set of words, such as \u201cprime rate\u201d or \u201cmother-in-law.\u201d If the user clicks on a single word in a consecutive set of words (e.g. mother-in-law), the software will first resolve the single word by itself. If the user clicks on the same word again, the software generally resolves the set of words with the surrounding context words.","Whether the single selected word, or the set of words are resolved at all also depends on where the selected word falls in relation to certain punctuation marks. For example, in the above quoted phrases, the BABYLON program fails to recognize a word that is directly bounded by a quotation mark, such as the word \u201cmother\u201d in the quoted phrase of \u201cmother-in-law.\u201d However, the BABYLON program recognizes the word \u201claw\u201d in the quoted phrase of \u201cmother-inlaw,\u201d apparently because there is a comma or period before the closing quotation mark. A user may also manually enter single or multiple words in a search field of the pop-up window.","Determination of the word or words depends on the glossaries that are preselected by the user. Each glossary contains a collection of information on a related topic, such as a specific language, a field of science, a unique definition for a company, or other reference material. The glossaries may be downloaded and accessed at a client's local computer, may be accessed via a network or over the Internet, or may be accessed as a combination of local and online glossaries. The BABYLON program searches offline glossaries before searching online glossaries. Within that framework, the BABYLON program appears to determine results in the order of the preselected glossaries. The user may modify the order of the user's individual list of preselected glossaries by dragging and dropping a glossary name into the list.","If the selected word is not included in the glossaries that were preselected by the user, the BABYLON program will attempt to identify one or more non-selected glossaries that include the selected word, and enable the user to add those one or more non-selected glossaries to the user's list of glossaries. However, if the selected word is misspelled, or otherwise unrecognized, the BABYLON software will simply issue an error message in the pop-up window, without any further suggestion. Although not automatically suggested by the BABYLON program, the software enables the user to perform a Web search of the selected word(s) or refer to other online sources, such as an online encyclopedia. However, these additional searches are done and displayed through a separate browser window.","A result of a search by the BABYLON program that is returned from a glossary is displayed in a small pop-up window near the location of the selected word(s). The pop-up window overlays any display content disposed under the area of the pop-up window. The user may split the pop-up window into two sides with one side showing the results and the other side showing other preselected glossaries that include information on the selected word(s) and can select one of the other preselected glossaries in the other half of the window to see the information from that preselected glossary.","The pop-up window can be set to automatically close or minimize when the user moves the mouse again. However, even if the pop-up window automatically closes, the user must re-click in the text area to reactivate the window containing the text (bringing the text window back into focus). Once the pop-up window is closed, there is no other persistent supply of information that can be again accessed, without repeating the search for the information.","Although the products discussed above provide some substantive information in response to a user selecting text and activating a search, they share the following inadequacies. First, the products are difficult for a user to initially discover, and even if preinstalled, a user will not necessarily understand how to use the products. Secondly, they require a user to perform some affirmative action to designate a word, rather than providing a persistent flow of information. Third, the required affirmative action can be somewhat difficult for a user to remember. Fourth, the products employ a character recognition of the bitmap portion of the display screen selected by a user to identify a word or words. And fifth, when their display is active, they obscure underlying content.","A product from a Japanese company, Justsystem Corporation, called DR. MOUSE\u2122, attempts to address the second and third of these inadequacies. Rather than requiring an affirmative action by the user to access information about a designated word or phrase, the DR. MOUSE program implements a hover method for designating a word. The user simply positions the cursor over a word, and the DR. MOUSE software provides a Japanese definition or an English\/Japanese translation in a pop-up window. However, the DR. MOUSE program appears to combine the local reference model and the local help model. The only aspect of the Web search model appears to be that DR. MOUSE enables a user to invoke a browser to perform a Web search for links related to the designated word. Software is installed on the user's computer and all substantive definitions and translations are provided from the local software. There do not appear to be any other sources of offline or online substantive information available, such as an encyclopedia.","To determine the word over which the cursor is hovering, the DR. MOUSE program uses character recognition. Specifically, DR. MOUSE appears to use the OKREADER\u2122 OCR engine from Sumitomo Electric Systems Co. As is well known in the art, OCR requires scanning a graphical representation and identifying text characters in the graphical representation. These steps require rather sophisticated recognition that takes time to process, especially if multiple fonts or multiple character sets are supported. Such character recognition is also less reliable than processing text characters directly. Character recognition also can have difficulty recognizing words or phrases that wrap to another line.","The DR. MOUSE program displays the definition or translation in the pop-up window near the designated word. As with the other products discussed above, the DR. MOUSE pop-up window obscures any information in the underlying window. When the user moves the mouse over a different word, the pop-up window appears in a new location near the different word. Thus, there is always a pop-up window obscuring some portion of the underlying content.","Although the DR. MOUSE software does not require a user to perform some affirmative action with mouse buttons or a keyboard to designate a word, and does not require the user to remember any keys that must be activated, the program provides only limited information and does not address the remaining inadequacies discussed above. In light of these shortcomings of the prior art programs, it would clearly be desirable to provide an electronic content search and delivery system that is at least easily discoverable by users; doesn't require any affirmative action by the user to designate a word or words in any active or inactive window and obtain substantive information from multiple offline and online sources in an order that can be prioritized by the user; is easy to remember how to use, or doesn't require remembering keys and buttons, being persistently available with continuously updating information; has faster and more reliable word recognition than can readily be achieved with character recognition-based systems; and doesn't obscure information underlying the dialog produced by the program or otherwise take the focus away from the active window in which the text was entered.","The present invention is directed to a method for electronic content search and delivery by causing a target process associated with a displayed window (whether in focus on not in focus) to re-render data to the window in an update region within which a cursor is detected. The invention then determines a primary word that occurs at the cursor location from the re-rendered data. With this primary word, the invention searches an electronic data store for substantive content related to the primary word and displays the substantive content in a semitransparent window that is persistently visible to the user, yet still enables content underlying the results to be visible.","Alternatively, the user may select a primary word under the cursor by clicking a button on a pointing device while holding down a predetermined key on a user input device, such as a keyboard. However, the cursor location and primary word are preferably automatically detected when the cursor hovers over one location for a user-selectable period of time. Further, the resulting search information is automatically displayed in the semitransparent window. Thus, the invention enables a user to discover that the service is available, without any affirmative action by the user. Also, the search result is displayed in a manner that does not obscure information in an underlying window, and does not take the focus away from a window within which the user is actively working. By intercepting re-rendered data, the invention further provides faster and more reliable word recognition than prior art character recognition-based systems.","The data are re-rendered in accord with machine instructions inserted into the memory space of the target process. The inserted instructions cause the user's processor to hook into an output module provided by the operating system, so that the invention can intercept output to the target window, regardless of whether the target window is currently active. The inserted instructions cause the processor to invalidate an update region around the cursor and force the output module to re-render the data to the update region. While the output module is re-rendering the data to the update region, the data are intercepted and copied.","After obtaining the data proximate to the cursor, a text character closest to the cursor location, and the corresponding primary word that includes that closest character are determined. By detecting termination points that separate words, the invention further determines nearby context words. The primary and context words are used to search a data store for substantive content most directly related to the primary and context words. Preferably, the data store is first searched for a combination of the primary and context words. If no results are found, alternate combinations of the primary and context words are used, until finally the data store is searched for only the primary word. If a result is still not found, an alternate word that is spelled similarly to the primary word is displayed.","One or more local or remote data stores may be searched. The user may also prioritize the data from the data stores, so that data most relevant to the user is displayed first in the semitransparent window. The user may selectively obtain additional data from the other data stores by selecting an appropriate control in the semitransparent window. Further, the additional data will be available through a set of source links in a Full view window, which is displayed if the user selects the additional data, or if the user selects the primary word with a user input key-pointer button combination. The user may also set options through the Full view window.","Another aspect of the invention is directed to a machine-readable medium having machine instructions that carry out the steps described above. A further aspect of the invention is directed to a system that search for electronic content based on text that is adjacent to a cursor location in a display. The system includes a pointing device that produces a signal for controlling the cursor location and a display device that displays the cursor location in a window. The system further comprises a processor in communication with the pointing device and display device, and with a memory for storing machine instructions that cause the processor to perform steps generally consistent with the method described above.","Exemplary Operating Environment",{"@attributes":{"id":"p-0055","num":"0054"},"figref":["FIG. 1","FIG. 1"]},"With reference to , an exemplary system for implementing the present invention includes a general purpose computing device in the form of a conventional PC , provided with a processing unit , a system memory , and a system bus . The system bus couples various system components including the system memory to processing unit  and may be any of several types of bus structures, including a memory bus or memory controller, a peripheral bus, and a local bus using any of a variety of bus architectures. The system memory includes read only memory (ROM)  and random access memory (RAM) . A basic input\/output system  (BIOS), containing the basic routines that helps to transfer information between elements within the PC , such as during start up, is stored in ROM . The PC  further includes a hard disk drive  for reading from and writing to a hard disk (not shown), a magnetic disk drive  for reading from or writing to a removable magnetic disk , and an optical disk drive  for reading from or writing to a removable optical disk , such as a CD-ROM or other optical media. Hard disk drive , magnetic disk drive , and optical disk drive  are connected to system bus  by a hard disk drive interface , a magnetic disk drive interface , and an optical disk drive interface , respectively. The drives and their associated computer readable media provide nonvolatile storage of computer readable machine instructions, data structures, program modules, and other data for PC . Although the exemplary environment described herein employs a hard disk, removable magnetic disk , and removable optical disk , it will be appreciated by those skilled in the art that other types of computer readable media, which can store data that are accessible by a computer, such as magnetic cassettes, flash memory cards, digital video disks (DVDs), Bernoulli cartridges, RAMs, ROMs, and the like, may also be used in the exemplary operating environment.","A number of program modules may be stored on the hard disk, magnetic disk , optical disk , ROM  or RAM , including an operating system , one or more application programs , other program modules , and program data . A user may enter commands and information into PC  through input devices such as a keyboard  and a pointing device . Pointing device  may include a mouse, stylus, wireless remote control, or other pointer. As used hereinafter, the term \u201cmouse\u201d is intended to encompass virtually any pointing device that is useful for controlling the position of a cursor on the screen. Other input devices (not shown) may include a microphone, joystick, game pad, satellite dish, scanner, or the like. These and other input\/output (I\/O) devices are often connected to processing unit  through an I\/O interface  that is coupled to the system bus . The term I\/O interface is intended to encompass each interface specifically used for a serial port, a parallel port, a game port, a keyboard port, and\/or a universal serial bus (USB). A monitor  or other type of display device is also connected to system bus  via an appropriate interface, such as a video adapter , and is usable to display application programs, Web pages, and\/or other information. In addition to the monitor, PCs are often coupled to other peripheral output devices (not shown), such as speakers (through a sound card or other audio interface\u2014not shown) and printers.","As indicated above, the invention may be practiced on a single machine, however, PC  can also operate in a networked environment using logical connections to one or more remote computers, such as a remote computer . Remote computer  may be another PC, a server (which is typically generally configured much like PC ), a router, a network PC, a peer device, or a satellite or other common network node, and typically includes many or all of the elements described above in connection with PC , although only an external memory storage device  has been illustrated in . The logical connections depicted in  include a local area network (LAN)  and a wide area network (WAN) . Such networking environments are common in offices, enterprise wide computer networks, intranets, and the Internet.","When used in a LAN networking environment, PC  is connected to LAN  through a network interface or adapter . When used in a WAN networking environment, PC  typically includes a modem , or other means such as a cable modem, Digital Subscriber Line (DSL) interface, or an Integrated Service Digital Network (ISDN) interface, for establishing communications over WAN , such as the Internet. Modem , which may be internal or external, is connected to the system bus  or coupled to the bus via I\/O device interface ; i.e., through a serial port. In a networked environment, program modules depicted relative to PC , or portions thereof, may be stored in the remote memory storage device. It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used, such as wireless communication and wide band network links.",{"@attributes":{"id":"p-0060","num":"0059"},"figref":"FIG. 2","b":"100"},"Initialization also includes checking whether an offline dictionary is present. Preferably, the offline dictionary is an abridged dictionary that stores definitions sufficiently concise to fit into the Mini view. If the dictionary is locally present, e.g., stored on the user's hard drive, many word searches can be done locally to reduce communication over the network. However, if the dictionary is not locally present, a remote dictionary will have to be used instead. Initialization may similarly include checking for other local resources.","Initialization further includes setting a global mouse hook into the operating system. A SetWindowsHookEx API can be used to gain access to messages being sent from a mouse to the operating system. Such access enables the service to monitor the mouse messages.","If the service was initiated manually by the user, the service displays a home page to the user with a list of options and information. The user can review the information, change optional settings, or manually enter a term to search on. If the service was initiated automatically when the operating system boots up, the service checks for a startup option that is discussed in more detail below, with regard to .","Once the service is initialized, the service waits for an event that triggers a search for substantive information. As indicated, the user may manually enter a search term through the home page. However, if the Mini view window is displayed or no window is displayed, the user may trigger a search, at a step , by clicking on a word while holding down a preselected key as defined by a user-selected key combination . Using such a key-click combination will open a Full view window, similar to that displaying the home page, and invoke a search related to the word indicated by the mouse click.","Alternatively, if the Mini view window is already displayed, the user may trigger a search, at a step , by simply keeping the mouse stationary over a word for a predetermined time . Keeping the mouse stationary over a word is referred to as hovering. The result of a search triggered by hovering will be displayed in the Mini view window. Hovering does not require the user to remember and perform an affirmative action (such as depressing one or more specific keyboard keys in conjunction with a pointing device button) to trigger a search and display a result. Thus, the service is easily discoverable, and no instruction is required to enable a user to use the service. Processing mouse hovers and key-click combinations is performed at a step , which is described in further detail below with regard to .","At a step  of , the service captures a word or words that are proximate to the display cursor controlled by the mouse or other pointing device. Unlike current products, the present invention does not require a character recognition engine to determine the word(s) indicated by the cursor. As described below with regard to , the present invention captures the text directly. Once the text is captured, the service determines one or more search words from the text, at a step  of .","At a decision step , the service determines whether a dictionary has been selectively ranked by the user as the first source of substantive information in which to search. Through the optional settings discussed above, the user may define the order or ranking of multiple sources in which the service will search. Since a dictionary is often a preferred source of information, the dictionary is set as the first source to search as a default. Preferably, an abridged dictionary is stored on the hard drive (or on optical memory medium) of a user's PC to eliminate the need for and possible delay associated with network communications. Thus, if the dictionary is still ranked as the first source, the service performs a local search of the abridged dictionary, at a step . Those skilled in the art will recognize that other sources may also be stored and searched on the user's local PC. If a search result is found in the abridged dictionary, at a decision step , the service displays the result at a step . As indicated above, whether the result is displayed in the Mini view window or the Full view window depends on the startup settings and how the user initiated the search.","If no search result was found in the abridged dictionary, or if the dictionary (or other locally stored reference source) is not ranked as the first resource in which to search, the service transmits the search word(s) over a network (such as a LAN, WAN, or the Internet) to a remote device, at a step , for searching a full dictionary and\/or the other remotely stored sources. The service also transmits a prioritized order of the sources in which the user wishes the search to be done. By knowing the order in which the source(s) are to be searched, the remote device can return substantive information that is most valuable to the individual user, in accord with the needs and desires of the user. Also, if the Mini view window is selectively displayed, only a relatively small amount of information needs to be displayed in the Mini view window. Thus, only the first search result may be transmitted back to the user's computer for display in the Mini view window, thereby minimizing network traffic.","A remote search is performed at a step , and the service receives the results of the search at a step . The results are then ranked and displayed at step . Both the Mini view window and the Full view window provide at least one link and a search box that enable the user to obtain additional information regarding the results or information about a different search term. Thus, at a decision step , the service determines whether the user selected a link or provided input to the search box. If the user does request additional information, the service obtains the information based on the user input, at a step . Any new information obtained that is based on the user input will be displayed in the Full view window. However, if the user does not request additional information, the service simply waits for the predetermined key-click combination or the predefined hover time to lapse if only the Mini view window is present.",{"@attributes":{"id":"p-0070","num":"0069"},"figref":"FIG. 3","b":["140","142","144","140","146","140","148"]},"As discussed above, an alternate method of selecting a word is to position the cursor so that it hovers over the word. If the service receives a mouse move message, the service starts a hover timer, at a step . If the service receives a subsequent mouse move message, the service restarts the hover time at step . At a decision step , the service determines whether a the hover time has exceeded a predefined threshold. The user may predefine the hover time threshold through an options page. If the hover time threshold has not been exceeded, and the service has not received a new mouse message, the hover timer simply iterates in a timing loop.","If the mouse remains stationary (within a predefined tolerance), so that the hover time exceeds the predefined threshold, or if the key-click combination is activated, the service captures the cursor coordinates, at a step . The coordinates are preferably obtained from a mouse data structure (e.g., MOUSEHOOKSTRUCT) by calling a mouse hook dynamic link library (DLL). At a step , the service invokes a screen capture module, as described below, and passes the cursor coordinates to the screen capture module.",{"@attributes":{"id":"p-0073","num":"0072"},"figref":["FIG. 4","FIGS. 5","FIG. 4","FIG. 5","FIG. 4"],"b":["6","7","160","162"]},"Once the screen capture code is inserted, the screen capture module causes the inserted screen capture code to execute, at a step . Part of the execution includes hooking APIs, such as a text output API (TEXTOUT) and a bit block transfer API (BITBLT), that provide output to a device context (DC) of the target window. At a step , the inserted screen capture code forces the target process to redraw a predefined region of the window near the cursor. While the redraw is occurring, the inserted screen capture code interprets the output from the hooked APIs to the device context, at a step . At a step , the inserted screen capture code reconciles the output that was redrawn to the device context over to screen coordinates. Reconciliation includes such tasks as converting device coordinates to logical coordinates, compensating for zoom factors, compensating for font context, etc. At a step , the inserted screen capture code compares the screen coordinates of the redrawn output to the cursor location to determine the character to which the cursor is closest. Preferably, a font context API is utilized to determine an offset from the left side of the window to determine the character closest to the cursor. Depending on the target application, additional text reordering and coordinate data formatting is performed, if necessary, at a step .",{"@attributes":{"id":"p-0075","num":"0074"},"figref":"FIG. 5","b":["180","182","184","186"]},"Once the above preliminary checks are complete, the screen capture module sets a number of window message hooks, at a step , preferably via a SetWindowsHookEx API. Preferably, the screen capture module first sets a WH_MOUSE hook, which is a system-wide hook for mouse messages. The screen capture module then preferably sets a WH_GETMESSAGE hook and a WH_CALLWNDPROCRET hook, which are hooks specific to the thread running the target window.","To insert the screen capture code into the target process's memory space, the screen capture module sends a benign message to the target process, at a step . For example, a WM_NULL message is sent to the target process. The benign message is intercepted by the WH_GETMESSAGE hook, which causes the operating system to load and execute a hook DLL containing the screen capture code in the target process's memory space. Typically, all processes are protected from each other. However, the hooking mechanism allows the service to run its code in the target process based on messages received by the target process.","As the inserted screen capture code begins to execute, the screen capture module monitors the progress. At a decision step , the screen capture module runs a timer that waits for a screen capture ready event to be set by the inserted screen capture code. If the screen capture ready timer times out before the screen capture ready event is set by the inserted screen capture code, the screen capture module processes a timeout error at a step , and aborts the screen capture. If the inserted screen capture code sets the screen capture ready event before the timeout period, the screen capture module runs another timer that waits for a WM_PAINT event to be set by the inserted screen capture code, at a decision step . The WM_PAINT event indicates that the inserted screen capture code caused a WM_PAINT message to be sent, which forces the target process to redraw the predefined region near the cursor. If the WM_PAINT timer times out before the WM_PAINT event is set by the inserted screen capture code, the screen capture module processes a timeout error at step , and aborts the screen capture. Conversely, if the inserted screen capture code successfully sets the WM_PAINT event, the screen capture module runs a third timer that waits for completion of the inserted screen capture code, at a decision step . If the completion timer times out before a screen capture complete event is set by the inserted screen capture code, the screen capture module processes a timeout error at step  and aborts the screen capture. However, if the inserted screen capture code successfully completes the screen capture and sets the screen capture complete event, in this embodiment, the screen capture module creates extensible markup language (XML) code of the captured text and cursor data, at a step . The inserted screen capture code returns the XML code to the service to determine the search terms.",{"@attributes":{"id":"p-0079","num":"0078"},"figref":"FIG. 6","b":["200","202","204","206","208"]},"In order to force the target process to redraw the region near the cursor, the inserted screen capture code first invalidates the region near the cursor, at a step . Preferably, the inserted screen capture code includes a call to a graphics device interface (GDI) function, such as InvalidateRgn, to invalidate the region near the cursor. The region is preferably defined as an area approximately fifty pixels above the cursor location, approximately fifty pixels below the cursor location, and spanning the width of the target window client area. Invalidating the region near the cursor completes the setup tasks for the inserted screen capture code. Thus, once the region is invalidated, the inserted screen capture code sets the screen capture ready event, at a step , to notify the screen capture module of the progress.","Because a multitasking operating system can support multiple processes at the same time, the operating system manages the updating of the actual screen display that is shared by the multiple processes. Since the operating system is managing multiple processes at once, invalidating a region of one target window does not mean that the operating system will immediately update the invalidated region of that target window. Instead, invalidating a region of a target window only sets an update region that corresponds to the invalidated region. The operating system normally causes the update region to be redrawn when the operating system is not busy handling other tasks. To cause the update region to be redrawn, the operating system sends the WM_PAINT message to a window procedure of the target window. However, many updates to the screen may be needed from multiple processes, or from multiple activities within the same window. Rather than try to update the display after each activity, the operating system queues requests to update the display. Compared to some tasks, updating the screen is not the operating system's highest priority. Thus, the operating system normally sends the WM_PAINT message only if there are no other messages remaining in the message queue of the target process. However, to improve response time for getting substantive information to the user, it is preferable to force the operating system to immediately redraw the update region (corresponding to the invalidated region near the cursor). To force the operating system to immediately redraw the update region, the inserted screen capture code preferably utilizes a SendMessage API to directly send the WM_PAINT message, at a step . Those skilled in the art will recognize that the inserted screen capture code could force the operating system to send the WM_PAINT message by calling another GDI function, such as a RedrawWindow function. Once the WM_PAINT message is forced, the inserted screen capture code sets the WM_PAINT event, at a step , to notify the screen capture module of successful progress.","The window procedure of the target process will then begin to redraw the update region, and the inserted screen capture code begins to intercept certain API calls, at a step . For each intercepted API call, the inserted screen capture code process the API call, at a step . Further detail of this processing is provided below with regard to . At a decision step  of , the inserted screen capture code determines whether redraw is complete, by determining whether the WM_PAINT message has left the window procedure (e.g., whether the window procedure returned execution control back to the operating system. If the WM_PAINT message has not left the windows procedure, control returns to step  to intercept another API call.","Once the redraw is complete and the WM_PAINT message has left the window procedure, the inserted screen capture code performs the following cleanup steps and prepares the captured text data for further evaluation. At a step , the inserted screen capture code suspends all threads of the target process, so that the threads will not interfere with subsequent unhooking of certain APIs. Specifically, the text output API (TEXTOUT) and the bit block transfer API (BITBLT) are unhooked by the inserted screen capture code, at a step . At a step , the inserted screen capture code resumes all threads of the target process. Similarly, during its execution, the inserted screen capture code sets the execution priority to high, so that screen capture will occur quickly. The inserted screen capture code resets the execution priority, at a step . The inserted screen capture code then removes any remaining window hooks, at a step .","At a step , the inserted screen capture code retrieves data from the forced redraw of the predefined region near the cursor, and reorders the data if necessary. For example, some target applications may write out text to the window in an order different than left-to-right. To ensure further processing is done properly, the text data are reordered into a left-to-right format, preferably by either an API call sequence or by screen coordinates. When the data are properly formatted, the inserted screen capture code sets an event, at a step , indicating that screen capture is complete.",{"@attributes":{"id":"p-0085","num":"0084"},"figref":"FIG. 7","b":["240","242","244"]},"Once the font glyphs are mapped, or if the TEXTOUT API was not called with font glyphs, the inserted screen capture code determines, at a decision step , whether the TEXTOUT API was called with window device context (DC). If the TEXTOUT API was not called with window device context, the TEXTOUT API was instead called with memory device context. In that case, the inserted screen capture code saves the data parameter of the API call, at a step , until a BITBLT API is called. However, if the TEXTOUT API was called with a window device context, the inserted screen capture code maps the coordinates of the text to the screen coordinates, at a step .","On the other hand, if the inserted screen capture code determines that an intercepted API call was not a TEXTOUT call, the inserted screen capture code determines whether the intercepted API call is a BITBLT API call, at a decision step . If the intercepted API call was not a BITBLT call, control returns to intercept another API call. However, if the intercepted API call was a BITBLT call, the inserted screen capture code determines, at a decision step , whether the previously saved TEXTOUT APIs were called with a memory device context that is resolvable with the parameters of the BITBLT call. If the APIs were not called with a resolvable memory device context, control again returns to intercept another API call. Otherwise, the inserted screen capture code maps the saved text coordinates to screen coordinates at a step . Control again returns to intercept another API call.",{"@attributes":{"id":"p-0088","num":"0087"},"figref":"FIG. 8","b":"260"},{"@attributes":{"id":"p-0089","num":"0088"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 1"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Character Evaluation Rules"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"105pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Characters (Not Alphanumeric or"]},{"entry":["Character Type","White Space)"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Termination Point","! \u201c\u201d( )\/\\:;{|}<=>? []\u2032\u2033\u2212\u00a9\u00ae\u2122"]},{"entry":[{},"Shift-ENTER character"]},{"entry":[{},"ENTER character"]},{"entry":[{},"Bullet character"]},{"entry":["Termination Point (when",". , \u2018\u2019"]},{"entry":"immediately followed by a character"},{"entry":"of white space)"},{"entry":["Remove","#* +~"]},{"entry":["Treat like a space","_"]},{"entry":[{},"Bang character"]},{"entry":["Treat like a space, additionally","\u2212"]},{"entry":"continue looking in this direction if"},{"entry":"the other direction does not contain a"},{"entry":"character of this type."},{"entry":["Keep","$ % & @{circumflex over (\u2009)}'"]},{"entry":[{},"Any other characters"]},{"entry":["Keep (when not immediately",". , \u2018\u2019"]},{"entry":"followed by a character of"},{"entry":"white space)"},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"The character evaluation rules are also applied, at a step , to determined one or more context words that surround the token. Preferably, two context words are determined according to termination point rules, samples of which are illustrated in TABLE 2. In addition, or alternatively, context words may be taken from other data, such as a title of a file being displayed in the target window.",{"@attributes":{"id":"p-0091","num":"0090"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 2"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Example Effects of Termination Point Rules"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"105pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Source Text (Token Is In Bold Font)","Token and Context Word(s) to Use"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["I like apples, , and pickles.",{"b":"dogs"}]},{"entry":["I apples, dogs, and pickles.","I apples"]},{"entry":["I like apples, dogs, and : I hate","and "]},{"entry":"cats."},{"entry":["I like , dogs, and pickles.","I like "]},{"entry":["I like apples, dogs, and pickles: hate",{"b":"I "}]},{"entry":"cats."},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},{"@attributes":{"id":"p-0092","num":"0091"},"figref":["FIG. 9","FIG. 9"],"b":["270","272","274","276","276"]},"If no matching result is found based on the first combination of the token and context words, the search system determines, at a decision step , whether an alternate arrangement of the token and context words is possible. If a context word can be eliminated, or exchanged for another context word, the search system determines an alternate arrangement of the token and context words, at a step . TABLE 3 illustrates rules for determining alternate arrangements.",{"@attributes":{"id":"p-0094","num":"0093"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 3"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Example Alternate Arrangements"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"91pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Token Order (Primary in Bold Font)","Searches To Try (In Order)"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},{"b":"Apple "},{"b":"Apple "}]},{"entry":[{},{},{"b":"Apple "}]},{"entry":[{},{},{"b":"Apple"}]},{"entry":[{},"Apple Cat","Apple Cat"]},{"entry":[{},{},{"b":"Dog "}]},{"entry":[{},{},"Apple "]},{"entry":[{},{},{"b":"Dog"}]},{"entry":[{},"Apple Dog ","Apple Dog "]},{"entry":[{},{},"Dog "]},{"entry":[{},{},{"b":"Cat"}]},{"entry":[{},{"b":"Apple "},{"b":"Apple "}]},{"entry":[{},{},{"b":"Apple"}]},{"entry":[{},"Apple ","Apple "]},{"entry":[{},{},{"b":"Dog"}]},{"entry":[{},{"b":"Apple"},{"b":"Apple"}]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}]}}},"If no further alternate arrangements are possible and no matching result was found, the search system performs a spell check on at least the token word, at a step . If a spell check result is found, at a decision step , the search system may transmit an alternate spelling suggestion, at a step . However, if a spell check result is not found, the search system transmits an error indicator for display to the user, at a step .",{"@attributes":{"id":"p-0096","num":"0095"},"figref":"FIG. 10","b":["290","290","290","290","290"]},"Mini view window  includes an information display area , which preferably displays approximately fifty (50) characters of information. Notably, the display of Mini view window  and its active update as the cursor is moved to hover over other text, does not require focus to be taken away from the active window (i.e., the window currently with focus). Focus is not transferred to Mini view window , and is not transferred to the current target window over which the cursor is hovering. Substantive information appears in display area  for the one or more words that are currently selected in the target window with the cursor. Mini view window  does not require focus, because the Mini view window is set to only display information and does not expect any user input. Of course, Mini view window  will accept user input, and thereby take focus, if the user clicks in the Mini view window.","If the user desires additional information regarding the current selected term(s), the user may select a \u201cmore\u201d link . Selecting more link  causes Mini view window  to close and a Full view window to be displayed. Selecting more link  also causes another search to be performed. As discussed above, only the first found result is preferably transmitted, or otherwise provided, to Mini view window , to reduce communication traffic. However, if the user desires additional information, a subsequent search is performed to make search results from all sources available to the Full view window. As an alternative to more link , the user may select a maximize button  to display the Full view window. Again, another search is performed to make search results from all sources available to the Full view window.","If the user desires information about a different search term, the user may enter the different search term into an input box  and press a search button . Entering a different search term also causes a Full view window to be displayed.",{"@attributes":{"id":"p-0100","num":"0099"},"figref":"FIG. 11","b":["300","300","302","304","306","306","302","308"],"i":["a ","a "]},"Full view window also includes a number of function buttons  for navigating between display pages, returning to a home page, printing the current information, copying the current information, obtaining help information, and other typical functions. The user can return to the Mini view window by selecting a minimize button .",{"@attributes":{"id":"p-0102","num":"0101"},"figref":["FIG. 12","FIG. 13"],"b":["300","300","314","314","316"],"i":["b ","c "]},{"@attributes":{"id":"p-0103","num":"0102"},"figref":["FIG. 14","FIG. 15"],"b":["300","318","300","320","322"],"i":["d ","e "]},{"@attributes":{"id":"p-0104","num":"0103"},"figref":"FIG. 16","b":["300","324"],"i":"f "},{"@attributes":{"id":"p-0105","num":"0104"},"figref":"FIG. 17","b":["300","326","328","330"],"i":"g "},"Although the present invention has been described in connection with the preferred form of practicing it and modifications thereto, those of ordinary skill in the art will understand that many other modifications can be made to the present invention within the scope of the claims that follow. For example, the invention can be adapted to detect a location of a wireless pointing device and provide spoken information rather than displaying a window of information on a display screen. The invention could also be adapted to provide a continuous stream of information in a semitransparent window from prioritized sources, such as financial sources, news sources, etc. Accordingly, it is not intended that the scope of the invention in any way be limited by the above description, but instead be determined entirely by reference to the claims that follow."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWING FIGURES","p":["The foregoing aspects and many of the attendant advantages of this invention will become more readily appreciated as the same becomes better understood by reference to the following detailed description, when taken in conjunction with the accompanying drawings, wherein:",{"@attributes":{"id":"p-0038","num":"0037"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0039","num":"0038"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0040","num":"0039"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0041","num":"0040"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0042","num":"0041"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0043","num":"0042"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0044","num":"0043"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0045","num":"0044"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0046","num":"0045"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0047","num":"0046"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0048","num":"0047"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0049","num":"0048"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0050","num":"0049"},"figref":"FIG. 13"},{"@attributes":{"id":"p-0051","num":"0050"},"figref":"FIG. 14"},{"@attributes":{"id":"p-0052","num":"0051"},"figref":"FIG. 15"},{"@attributes":{"id":"p-0053","num":"0052"},"figref":"FIG. 16"},{"@attributes":{"id":"p-0054","num":"0053"},"figref":"FIG. 17"}]},"DETDESC":[{},{}]}
