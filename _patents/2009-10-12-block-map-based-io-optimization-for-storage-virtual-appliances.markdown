---
title: Block map based I/O optimization for storage virtual appliances
abstract: A method of performing disk operations on a physical storage that is being managed by a storage virtual appliance (SVA), from a virtual machine (VM), is disclosed. The method includes intercepting a data read/write request form the VM. The data read/write request is intercepted in the hypervisor prior to the read/write request reaches the SVA. The VM and the SVA are hosted in the hypervisor. The read/write request includes virtual block numbers which are translated into physical block numbers before performing the read/write operation on the physical storage. The method further includes probing a copy of virtual Logical Unit Number (LUN) block numbers to physical disk block numbers mapping table (bock map table) in the hypervisor to identify physical block numbers that corresponds to the virtual block numbers in the read/write request. If a mapping of the virtual block numbers in the read/write request is available in the hypervisor cache, the virtual block numbers are translated into the physical block numbers and the read/write request is performed directly to the physical storage totally bypassing the SVA.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08578083&OS=08578083&RS=08578083
owner: VMware, Inc.
number: 08578083
owner_city: Palo Alto
owner_country: US
publication_date: 20091012
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["RELATED APPLICATIONS AND CLAIMS OF PRIORITY","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["This application is a continuation in part of U.S. application Ser. No. 12\/397,117 filed on Mar. 3, 2009, which is being incorporated herein by reference.","A Storage Virtual Appliance (SVA) is a special purpose virtual machine to manage shared storage in virtualized systems. A data transfer between a virtual machine and a SVA is performed through standard protocols as for example Network File System (NFS), Common Internet File System (CIFS), Internet Small Computer System Interface (iSCSI), etc.","There is a significant performance overhead, in terms of additional CPU cycles and latency, when compared to the traditional approach in which the storage virtualization service is provided directly by the hypervisor. Data copy to and from network buffers consumes a lot of CPU cycles when the hypervisor redirects the storage I\/O (input-output) from a VM to a SVA using iSCSI or a similar TCP\/IP based protocol. When writing data to storage, the VM sends the data to the hypervisor, which then copies it from the VM's memory onto the hypervisor network buffers and delivers the data over the virtual network to the SVA. The SVA network driver copies the data from the hypervisor buffers into the SVA's private buffers. The SVA again sends the same data to the hypervisor to be written to the physical disk. This involves one more level of copy. This makes sense if the SVA and VM were in two different physical hosts. However, if the SVA and the VM are co-resident, this adds unnecessary copies and delays in terms of context-switching (between the VM-hypervisor, hypervisor-SVA, SVA-hypervisor).","In one embodiment, a method of performing disk operations on a physical storage that is being managed by a storage virtual appliance (SVA), from a virtual machine (VM), is disclosed. The method includes intercepting a data read\/write request form the VM, the data read\/write request is intercepted in the hypervisor prior to the read\/write request reaches the SVA. The VM and the SVA are hosted in the hypervisor. The VM performs read\/write operations on a virtual disk that is hosted by the SVA. The read\/write request includes virtual block numbers which are translated into physical block numbers by the SVA before performing the read\/write operation on the physical storage. The method further includes maintaining copy of virtual Logical Unit Number (LUN) block numbers to physical disk block numbers mapping\/translation table (block map table) in the hypervisor to help identify physical block numbers that corresponds to the virtual block numbers in the read\/write request totally bypassing the SVA. If a mapping of the virtual block numbers in the read\/write request is available in the hypervisor cache, the virtual block numbers are translated into the physical block numbers and the read\/write request is performed directly to the physical storage. Without the block map table, all operations would have to be routed through the SVA which will cause additional overhead.","In another embodiment, a system for transferring data from a virtual machine (VM) to a physical storage is disclosed. The system includes a virtual block device (VBD) coupled to the VM having a module to receive a copy of a virtual Logical Unit Number (LUN) block numbers to physical disk block numbers mapping table (block map table) and a storage virtual appliance (SVA) having a module to maintain the block map table. The SVA manages the physical storage and provide a transparent storage functionality to the VM in which the VM is unaware of actual physical disk in the physical storage being used for storage of data of the VM. The system also includes an interface between the VBD and the SVA to enable the SVA to transfer a copy of the block map table to the VBD.","In yet another embodiment, a computer readable media for storing programming instructions for performing disk operations on a physical storage that is being managed by a storage virtual appliance (SVA), from a virtual machine (VM) is disclosed. The computer readable media includes programming instructions for intercepting a data read\/write request form the VM. The data read\/write request is intercepted in the hypervisor prior to the data read\/write request reaches the SVA. The VM and the SVA being hosted in the hypervisor in the same node. The data read\/write request includes virtual block numbers which are translated into physical block numbers by the SVA before performing the read\/write operation on the physical storage. The computer readable media further includes programming instructions for probing a copy of virtual Logical Unit Number (LUN) block numbers to physical disk block numbers mapping table (block map table) in the hypervisor to directly identify physical block numbers that corresponds to the virtual block numbers (issued by the VM) in the read\/write request and programming instructions to determine if a mapping of the virtual block numbers in the read\/write request are available in the hypervisor cache, programming instructions for translating the virtual block numbers into the physical block numbers and performing the data read\/write request directly to the physical storage bypassing the SVA.",{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 1","b":["54","54","50","52","56"]},"A virtual appliance is a minimalist virtual machine image designed to run under a virtualization technology. Virtual appliances are a subset of the broader class of software appliances. A software appliance is a software application combined with a just enough operating system (JeOS) for it to run optimally on industry standard hardware (typically a server) or in a virtual machine. Like software appliances, virtual appliances are aimed to eliminate the installation, configuration and maintenance costs associated with running complex stacks of software. A key concept that differentiates a virtual appliance from a virtual machine is that a virtual appliance is a fully pre-installed and pre-configured application and operating system environment whereas a virtual machine is, by itself, without application software. A virtual appliance is usually built to host a single application.","Storage Virtual Appliances (SVAs) are special-purpose Virtual Machines (VMs) that enable shared-highly-available-storage functionality across hypervisor hosts. To provide a shared-highly-available-storage, SVAs enable transformation of DAS  into an iSCSI Storage Area Network (SAN) . SVAs across different hypervisor hosts work together in a clustered manner to provide shared and highly available storage without a need for commercially available SAN systems. Hence, the storage layer that is made up of DASs, in a virtualized system, is transformed into a shared storage layer. This shared storage layer can provide the data mirroring to enable fail proof operations of the virtual machines in the virtualized system. This shared storage layer also enables moving virtual machines from one hypervisor to another if a need arises due to, for example, hardware failure. A SVA, in one or more embodiment, allow access to this shared storage through block access protocols as for example iSCSI.",{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 2","b":["110","112","114","114","116","110","116","126","110","126","110","116","116","118","126","120","122","124"]},{"@attributes":{"id":"p-0015","num":"0014"},"figref":["FIG. 3","FIG. 2"],"b":["126","126"]},"In one or more embodiments, physical storage  is a collection of one or more physical disks. One or more such physical disks may be local to a virtual machine because these disks may be local to a hypervisor host that hosts the virtual machine. In this case, data storage can be made more efficient by connecting VBD  directly to physical storage , as illustrated by a direct link .","In one or more embodiments, SVA bypass can be implemented by maintaining a full or a partial copy of the virtual LUN to physical disk mappings in VBD . In one embodiment, to enable a SVA to provide VBD  with this mapping information, VBD  exposes an application programming interface (API). In one embodiment, the API includes the following functions:","sva_map_block (UUID vlun, INTEGER vblock, UUID plun, INTEGER pblock, INTEGER extent_size, BOOLEAN readonly)","sva_unmap_block (UUID vlun, INTEGER vblock)","A SVA invokes sva_map_block to provide a mapping for an extent of size \u201cextent_size\u201d blocks starting at block \u201cvblock\u201d inside a virtual LUN with an UUID \u201cvlun\u201d to a physical block \u201cpblock\u201d inside a physical LUN with UUID \u201cplun\u201d. The read only flag indicates whether the translation is valid for only read requests or for both read as well as write requests. Similarly, sva_unmap_block function is invoked by a SVA to remove or invalidate the block mapping starting at block number \u201cvblock\u201d from the virtual LUN with UUID \u201cvlun.\u201d In one embodiment, the vmkernel provides implementation of this API. The vmkernel is a well known component of a hypervisor system, hence details of vmkernel are being omitted. It should be noted that this function calls are provided as an example. A person skilled in the art would realize that these functions may be shaped differently without diverting from the broader underlying functionality being provided by the API.","It is a joint responsibility of a SVA and a hypervisor (which provides VBD module, in one embodiment) to maintain coherency of the block mapping cache. However, in one or more embodiments, VBD  may decide not to use the mapping information provided by the SVA and send all read\/write requests to the SVA. Alternatively, if VBD  does not find the mapping information for a particular vlun block in the local cache, the read\/write request is sent to the SVA and when the mapping information is available, the SVA is bypassed. In some cases, the mapping information in the local cache of VBD  may be outdated and the read\/write operation performed using this outdated cache may fail. In such cases, the failed request is sent to the SVA after failure occurs. In one embodiment, when a failure occurs, VBD  flushes the local mapping cache and requests the SVA to refresh the mapping information.","The various embodiments described herein may employ various computer-implemented operations involving data stored in computer systems. For example, these operations may require physical manipulation of physical quantities usually, though not necessarily, these quantities may take the form of electrical or magnetic signals where they, or representations of them, are capable of being stored, transferred, combined, compared, or otherwise manipulated. Further, such manipulations are often referred to in terms, such as producing, identifying, determining, or comparing. Any operations described herein that form part of one or more embodiments of the invention may be useful machine operations. In addition, one or more embodiments of the invention also relate to a device or an apparatus for performing these operations. The apparatus may be specially constructed for specific required purposes, or it may be a general purpose computer selectively activated or configured by a computer program stored in the computer. In particular, various general purpose machines may be used with computer programs written in accordance with the teachings herein, or it may be more convenient to construct a more specialized apparatus to perform the required operations.","The various embodiments described herein may be practiced with other computer system configurations including hand-held devices, microprocessor systems, microprocessor-based or programmable consumer electronics, minicomputers, mainframe computers, and the like.","One or more embodiments of the present invention may be implemented as one or more computer programs or as one or more computer program modules embodied in one or more computer readable media. The term computer readable medium refers to any data storage device that can store data which can thereafter be input to a computer system computer readable media may be based on any existing or subsequently developed technology for embodying computer programs in a manner that enables them to be read by a computer. Examples of a computer readable medium include a hard drive, network attached storage (NAS), read-only memory, random-access memory (e.g., a flash memory device), a CD (Compact Discs) CD-ROM, a CD-R, or a CD-RW, a DVD (Digital Versatile Disc), a magnetic tape, and other optical and non-optical data storage devices. The computer readable medium can also be distributed over a network coupled computer system so that the computer readable code is stored and executed in a distributed fashion.","Although one or more embodiments of the present invention have been described in some detail for clarity of understanding, it will be apparent that certain changes and modifications may be made within the scope of the claims. Accordingly, the described embodiments are to be considered as illustrative and not restrictive, and the scope of the claims is not to be limited to details given herein, but may be modified within the scope and equivalents of the claims. In the claims, elements and\/or steps do not imply any particular order of operation, unless explicitly stated in the claims.","In addition, while described virtualization methods have generally assumed that virtual machines present interfaces consistent with a particular hardware system, persons of ordinary skill in the art will recognize that the methods described may be used in conjunction with virtualizations that do not correspond directly to any particular hardware system. Virtualization systems in accordance with the various embodiments, implemented as hosted embodiments, non-hosted embodiments, or as embodiments that tend to blur distinctions between the two, are all envisioned. Furthermore, various virtualization operations may be wholly or partially implemented in hardware. For example, a hardware implementation may employ a look-up table for modification of storage access requests to secure non-disk data.","Many variations, modifications, additions, and improvements are possible, regardless the degree of virtualization. The virtualization software can therefore include components of a host, console, or guest operating system that performs virtualization functions. Plural instances may be provided for components, operations or structures described herein as a single instance. Finally, boundaries between various components, operations and data stores are somewhat arbitrary, and particular operations are illustrated in the context of specific illustrative configurations. Other allocations of functionality are envisioned and may fall within the scope of the invention(s). In general, structures and functionality presented as separate components in exemplary configurations may be implemented as a combined structure or component. Similarly, structures and functionality presented as a single component may be implemented as separate components. These and other variations, modifications, additions, and improvements may fall within the scope of the appended claims(s)."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 3"}]},"DETDESC":[{},{}]}
