---
title: Method, system, and article for incremental virtual copy of a data block
abstract: Disclosed is a technique for reducing an amount of data transferred. A first indicator is maintained for each source block of data to indicate whether the source block of data has been updated in source storage since the source block of data was last transferred to target storage. A second indicator is maintained for each target block of data in target storage to indicate whether the target block of data has been updated in target storage since the target block of data was overwritten by a corresponding source block of data. When transferring data from the source storage to the target storage, each source block of data for which a first indicator has been set to indicate that the source block of data has been updated is transferred and each source block of data that corresponds to a target block of data for which a second indicator has been set to indicate that the target block of data has been updated is transferred.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06996586&OS=06996586&RS=06996586
owner: International Business Machines Corporation
number: 06996586
owner_city: Armonk
owner_country: US
publication_date: 20030618
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION","ADDITIONAL IMPLEMENTATION DETAILS"],"p":["This application is related to the following commonly assigned and co-pending United States Patent Applications:","U.S. patent application Ser. No. 10\/46,4918 entitled \u201cMETHOD, SYSTEM, AND PROGRAM FOR REVERSE RESTORE OF AN INCREMENTAL VIRTUAL COPY,\u201d by S. Werner, et al., and","U.S. patent application Ser. No. 10\/465,069 entitled \u201cMEThOD, SYSTEM, AND PROGRAM FOR RECOVERY OF A REVERSE RESTORE OPERATION,\u201d by M. Sanchez, et al.,","each of which is filed on the same date herewith, and which is incorporated by reference herein in its entirety.","1. Field of the Invention","The present invention is directed to incremental virtual copy.","2. Description of the Related Art","Computing systems often include one or more host computers (\u201chosts\u201d) for processing data and running application programs, direct access storage devices (DASDs) for storing data, and a storage controller for controlling the transfer of data between the hosts and the DASD. Storage controllers, also referred to as control units or storage directors, manage access to a storage space comprised of numerous hard disk drives connected in a loop architecture, otherwise referred to as a Direct Access Storage Device (DASD). Hosts may communicate Input\/Output (I\/O) requests to the storage space through the storage controller.","In many systems, data on one storage device, such as a DASD, may be copied to the same or another storage device so that access to data volumes can be provided from two different devices. A point-in-time copy involves physically copying all the data from source volumes to target volumes so that the target volume has a copy of the data as of a point-in-time. A point-in-time copy can also be made by logically making a copy of the data and then only copying data over when necessary, in effect deferring the physical copying. This logical copy operation is performed to minimize the time during which the target and source volumes are inaccessible.","A number of direct access storage device (DASD) subsystems are capable of performing \u201cinstant virtual copy\u201d operations, also referred to as \u201cfast replicate functions.\u201d Instant virtual copy operations work by modifying metadata such as relationship tables or pointers to treat a source data object as both the original and copy. In response to a host's copy request, the storage subsystem immediately reports creation of the copy without having made any physical copy of the data. Only a \u201cvirtual\u201d copy has been created, and the absence of an additional physical copy is completely unknown to the host.","Later, when the storage system receives updates to the original or copy, the updates are stored separately and cross-referenced to the updated data object only. At this point, the original and copy data objects begin to diverge. The initial benefit is that the instant virtual copy occurs almost instantaneously, completing much faster than a normal physical copy operation. This frees the host and storage subsystem to perform other tasks. The host or storage subsystem may even proceed to create an actual, physical copy of the original data object during background processing, or at another time.","One such instant virtual copy operation is known as a FlashCopy\u00ae operation. A FlashCopy\u00ae operation involves establishing a logical point-in-time relationship between source and target volumes on the same or different devices. The FlashCopy\u00ae operation guarantees that until a track in a FlashCopy\u00ae relationship has been hardened to its location on the target disk, the track resides on the source disk. A relationship table is used to maintain information on all existing FlashCopy\u00ae relationships in the subsystem. During the establish phase of a FlashCopy\u00ae relationship, one entry is recorded in the source and target relationship tables for the source and target that participate in the FlashCopy\u00ae being established. Each added entry maintains all the required information concerning the FlashCopy\u00ae relationship. Both entries for the relationship are removed from the relationship tables when all FlashCopy\u00ae tracks from the source extent have been physically copied to the target extents or when a withdraw command is received. In certain cases, even though all tracks have been copied from the source extent to the target extent, the relationship persists.","The target relationship table further includes a bitmap that identifies which tracks involved in the FlashCopy\u00ae relationship have not yet been copied over and are thus protected tracks. Each track in the target device is represented by one bit in the bitmap. The target bit is set when the corresponding track is established as a target track of a FlashCopy\u00ae relationship. The target bit is reset when the corresponding track has been copied from the source location and destaged to the target device due to writes on the source or the target device, or a background copy task.","In the prior art, as part of the establishment of the logical point-in-time relationship during the FlashCopy\u00ae operation, all tracks in the source cache that are included in the FlashCopy\u00ae relationship must be destaged to the physical source volume, e.g., source DASD, and all tracks in the target cache included in the FlashCopy\u00ae must be discarded. Further details of the FlashCopy\u00ae operations are described in U.S. Pat. No. 6,611,901, which issued on Aug. 26, 2003, having U.S. patent application Ser. No. 09\/347,344, filed on Jul. 2, 1999, entitled \u201cMethod, System, and Program for Maintaining Electronic Data as of a Point-in-Time\u201d, which patent application is incorporated herein by reference in its entirety.","Once the logical relationship is established, hosts may then have immediate access to data on the source and target volumes, and the data may be copied as part of a background operation. A read to a track that is a target in a FlashCopy\u00ae relationship and not in cache triggers a stage intercept, which causes the source track corresponding to the requested target track to be staged to the target cache when the source track has not yet been copied over and before access is provided to the track from the target cache. This ensures that the target has the copy from the source that existed at the point-in-time of the FlashCopy\u00ae operation. Further, any destages to tracks on the source device that have not been copied over triggers a destage intercept, which causes the tracks on the source device to be copied to the target device.","Instant virtual copy techniques have been developed, at least in part, to quickly create a duplicate copy of data without interrupting or slowing foreground processes. Instant virtual copy techniques, such as a FlashCopy\u00ae operation, provide a point-in-time copy tool. Instant virtual copy techniques may be used for a variety of applications, including, for example, data backup, data migration, data mining, testing, etc. For example, an instant virtual copy technique may be used for the creation of a physical \u201cbackup\u201d copy of the source data, to aid in disaster recovery.","Although the instant virtual copy techniques are useful for copying large amounts of data, conventional instant virtual copy techniques may be improved. In particular, there is a need in the art for improved instant virtual copy techniques that avoid physically copying large amounts of data.","Provided are a method, system, and program for reducing an amount of data transferred. A first indicator is maintained for each source block of data to indicate whether the source block of data has been updated in source storage since the source block of data was last transferred to target storage. A second indicator is maintained for each target block of data in target storage to indicate whether the target block of data has been updated in target storage since the target block of data was overwritten by a corresponding source block of data. When transferring data from the source storage to the target storage, each source block of data for which a first indicator has been set to indicate that the source block of data has been updated is transferred and each source block of data that corresponds to a target block of data for which a second indicator has been set to indicate that the target block of data has been updated is transferred.","The described implementations of the invention provide a method, system, and program for creating an incremental virtual copy.","In the following description, reference is made to the accompanying drawings which form a part hereof and which illustrate several implementations of the present invention. It is understood that other implementations may be utilized and structural and operational changes may be made without departing from the scope of the present invention:","Implementations of the invention provide an incremental virtual copy operation that is an enhancement to an instant virtual copy operation. With the incremental virtual copy operation, only the blocks of data that were updated on source and target volumes since the last instant virtual copy operation from the source volume to the target volume are copied. An incremental virtual copy operation reduces the duration of creating a physical copy of a source volume and minimizes the impact to other applications (e.g., minimizes the usage of bandwidth to physical storage for destaging data, thus allowing more bandwidth for reads from physical storage).",{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIGS. 1A and 1B","b":["100","140","190","120","130","122","132","130","120"],"i":["a,b, . . . l ","a,b . . . n ","a,b . . . m"]},"The source storage  includes one or more volumes , which may be divided into blocks of storage  containing blocks of data, and the blocks of storage  are further divided into sub-blocks of storage (\u2013, where a and p maybe any integer value) that contain sub-blocks of data. A volume may be any logical or physical element of storage. In certain implementations, the blocks of data are contents of tracks, while the sub-blocks of data are contents of sectors of tracks.","Target storage  maintains copies of all or a subset of the volumes of the source storage . Additionally, target storage  may be modified by, for example, host . Target storage  includes one or more volumes , which may be divided into blocks of storage  containing blocks of data, and the blocks of storage  are further divided into sub-blocks of storage (\u2013, where a and p may be any integer value) that contain sub-blocks of data. A volume may be any logical or physical element of storage. In certain implementations, the blocks of data are tracks, while the sub-blocks of data are sectors of tracks.","For ease of reference, the terms tracks and sectors will be used herein as examples of blocks of data and sub-blocks of data, but use of these terms is not meant to limit implementations of the invention to tracks and sectors. The implementations of the invention are applicable to any type of storage, block of storage or block of data divided in any manner. Moreover, although implementations of the invention refer to blocks of data, alternate implementations of the invention are applicable to sub-blocks of data.","The storage controller  includes a source cache  in which updates to tracks in the source storage  are maintained until written to source storage  (i.e., the tracks are destaged to physical storage). The storage controller  includes a target cache  in which updates to tracks in the target storage  are maintained until written to target storage  (i.e., the tracks are destaged to physical storage). The source cache  and target cache  may comprise separate memory devices or different sections of a same memory device. The source cache  and target cache  are used to buffer read and write data being transmitted between the hosts , source storage , and target storage . Further, although caches  and  are referred to as source and target caches, respectively, for holding source or target blocks of data in a point-in-time copy relationship, the caches  and  may store at the same time source and target blocks of data in different point-in-copy relationships.","Additionally, the storage controller  includes a nonvolatile cache . The non-volatile cache  may be, for example, a battery-backed up volatile memory, to maintain a non-volatile copy of data updates.","The storage controller  further includes system memory , which may be implemented in volatile and\/or non-volatile devices. The system memory  includes a read process  for reading data, a write process  for writing data, and an incremental virtual copy process . The read process  executes in system memory  to read data from storages  and  to caches  and , respectively. The write process  executes in system memory  to write data from caches  and  to storages  and , respectively. The incremental virtual copy process  executes in system memory  to perform an incremental virtual copy operation that transfers data from source storage  to target storage . In certain implementations of the invention, there may be multiple incremental virtual copy processes. In certain implementations of the invention, the incremental virtual copy process may be executed at another storage controller connected to storage controller  instead of, or in addition to, execution at the storage controller . The system memory  may be in a separate memory devices from caches  and  or may share a memory device with one or both caches  and .","Implementations of the invention are applicable to the transfer of data between any two storage mediums, which for ease of reference will be referred to herein as source storage and target storage. For example, certain implementations of the invention may be used with two storage mediums located at a single storage controller, as illustrated in . Moreover, certain alternative implementations of the invention may be used with two storage mediums located at different storage controllers, different physical sites, etc. Also, for ease of reference, a block of data in source storage will be referred to as a \u201csource block of data,\u201d and a block of data in target storage will be referred to as a \u201ctarget block of data.\u201d","In certain implementations, removable storage (instead of or in addition to target storage ) may be used to maintain copies of all or a subset of the source storage , and the implementations of the invention transfer data to the removable storage rather than to the target storage. The removable storage may reside at the storage controller .","The storage controller  may further include a processor complex (not shown) and may comprise any storage controller or server known in the art, such as an Enterprise Storage Server\u00ae (ESS), 3990\u00ae Storage Controller, etc. The hosts may comprise any computing device known in the art, such as a server, mainframe, workstatation, personal computer, hand held computer, laptop telephony device, network appliance, etc. The storage controller  and host system(s) communicate via a network , which may comprise a Storage Area Network (SAN), a Local Area Network (LAN), Wide Area Network (WAN), the Internet, an Intranet, etc. The source storage  and target storage  may each comprise an array of storage devices, such as Direct Access Storage Devices (DASDs), Just a Bunch of Disks (JBOD), Redundant Array of Independent Disks (RAID), virtualization device, etc.","Additionally, although  illustrates a single storage controller, one skilled in the art would know that multiple storage controllers may be connected via a network (e.g., a Local Area Network (LAN), Wide Area Network (WAN), the Internet, etc.), and one or more of the multiple storage controllers may implement the invention.","When host  wishes to update a block of data in source storage , host  writes data to a block of storage in source cache . Write operations modify the block of storage in source cache  synchronously (i.e., writing host  waits for the operation to complete), and then, in a background process, source cache  content is written to source storage . A write operation may update data, write new data, or write the same data again. Writing data in source cache  to source storage  is called a destage operation. Copying all or a portion of a block of data from source storage  to source cache  is a staging operation. Likewise, data may be staged and destaged between target storage  and target cache . Moreover, data may be staged from source storage  to target cache .",{"@attributes":{"id":"p-0044","num":"0043"},"figref":"FIG. 2","b":["200","210","220","118","200","200","120","130","124","134","200","120","130","200","120","130","130","120","130"]},"A source change recording structure  is used to monitor updates to blocks of data within portions of data in the source storage  for which an incremental virtual copy relationship has been established. The source change recording structure  includes an indicator (e.g., a bit) for each block of data in the source storage  that is part of the incremental virtual copy relationship. When an indicator is set to a first value (e.g., one), the setting indicates that the block of data has been updated since the last incremental virtual copy operation. When an indicator is set to a second value (e.g., zero), the setting indicates that the block of data has not been updated since the last incremental virtual copy operation.","A target change recording structure  is used to monitor updates to blocks of data in the target storage  after an incremental virtual copy relationship has been established. The target change recording structure  includes an indicator (e.g., a bit) for each block of data in the target storage  that is part of the incremental virtual copy relationship. When an indicator is set to a first value (e.g., one), the setting indicates that the block of data has been updated since the last incremental virtual copy operation. When an indicator is set to a second value (e.g., zero), the setting indicates that the block of data has not been updated since the last incremental virtual copy operation.","In certain implementations of the invention, each structure , , and  comprises a bitmap, and each indicator comprises a bit. In each structure , , and , the nth indicator corresponds to the nth block of data (e.g., the first indicator in each structure , , and  corresponds to the first data block). Although the structures , , and  have been illustrated as three separate structures, the structures may be combined in any form without departing from the scope of the invention. In certain implementations of the invention, there is a copy of each structure for each volume. In certain alternative implementations of the invention, there is a single copy of each structure for all volumes.",{"@attributes":{"id":"p-0048","num":"0047"},"figref":"FIG. 3","b":["116","300","120","130"]},"In block , the incremental virtual copy process  updates indicators in the target copy structure  to indicate that all of the blocks of data corresponding to the indicators are to be retrieved from source storage for a staging operation and to indicate that all blocks of data are to be copied from source storage to target storage for an incremental virtual copy operation or a physical copy operation. In certain implementations of the invention, the indicators in the target copy structure  are set to one.","In block , the incremental virtual copy process  updates the indicators in the source change recording structure  to indicate that the source blocks of data corresponding to the indicators have not been updated since the last incremental virtual copy operation. In certain implementations of the invention, all of the indicators in the source change recording structure  are set to zero. In block , the incremental virtual copy process  updates the indicators in the target change recording structure  to indicate that the target blocks of data corresponding to the indicators have not been updated since the last incremental virtual copy operation. In certain implementations of the invention, all of the indicators in the target change recording structure  are set to zero.",{"@attributes":{"id":"p-0051","num":"0050"},"figref":["FIG. 4","FIG. 4"],"b":["116","400","116","140","120","130","140"]},"In block , the incremental virtual copy process  updates indicators in the target copy structure  with indicators in the source and target change recording structures  and . In certain implementations of the invention, the source change recording structure  is merged with the target change recording structure  using an \u201cOR\u201d operation, and the result of the \u201cOR\u201d operation is \u201cOR'd\u201d to the target copy structure .","In block , after the target copy structure  has been updated, the incremental virtual copy process  updates indicators in the source change recording structure  to indicate that the source blocks of data have not been updated since the last incremental virtual copy operation. In certain implementations of the invention, all of the indicators in the source change recording structure  are set to zero. In block , the incremental virtual copy process  updates the indicators in the target change recording structure  to indicate that the target blocks of data have not been updated since the last incremental virtual copy operation. In certain implementations of the invention, all of the indicators in the target change recording structure  are set to zero.",{"@attributes":{"id":"p-0054","num":"0053"},"figref":"FIG. 5","b":["114","500","114","520","114","530","560","530","114","130","540","550"]},"In block , the indicator for the block of data in the target change recording structure  is updated to indicate that the target block of data has changed since the last incremental virtual copy operation. In certain implementations of the invention, the indicator in the target change recording structure  is set to one. In block , the indicator for the block of data in the source change recording structure  is updated to indicate that the source block of data has changed since the last incremental virtual copy operation. In certain implementations of the invention, the indicator in the source change recording structure  is set to one. In block , the write operation is performed by the write process .",{"@attributes":{"id":"p-0056","num":"0055"},"figref":"FIG. 6","b":["112","600","620","112","630","660","630","120","640","650"]},"In block , the read process  reads (i.e., stages) the block of data from source storage . In block , the read process  reads (i.e., stages) the block of data from target storage . In block , the read process  performs a normal read of the block of data.",{"@attributes":{"id":"p-0058","num":"0057"},"figref":"FIG. 7","b":["700","710","200","730","720","720"]},"In block , the block of data is read in accordance with the logic of . In block , the block of data is destaged to target storage . In block , an indicator in the target copy structure  is updated for the block of data to indicate that the block of data has been copied. In certain implementations of the invention, the indicator in the target copy structure  is set to zero.","Thus, in certain implementations of the invention, the incremental virtual copy operation is achieved by monitoring writes (i.e., updates) and recording changes to tracks for volumes participating in an instant virtual copy relation. After an initial instant virtual copy operation, tracks that have been updated on either a source or a target volume can be copied from the source volume to the target volume, without copying the entire source volume.","Enterprise Storage Server, FlashCopy, and 3990 are registered trademarks or common law marks of International Business Machines Corporation in the United States and\/or other countries.","The described techniques for incremental virtual copy may be implemented as a method, apparatus or article of manufacture using standard programming and\/or engineering techniques to produce software, firmware, hardware, or any combination thereof. The term \u201carticle of manufacture\u201d as used herein refers to code or logic implemented in hardware logic (e.g., an integrated circuit chip, Programmable Gate Array (PGA), Application Specific Integrated Circuit (ASIC), etc.) or a computer readable medium, such as magnetic storage medium (e.g., hard disk drives, floppy disks, tape, etc.), optical storage (CD-ROMs, optical disks, etc.), volatile and non-volatile memory devices (e.g., EEPROMs, ROMs, PROMs, RAMs, DRAMs, SRAMs, firmware, programmable logic, etc.). Code in the computer readable medium is accessed and executed by a processor. The code in which preferred embodiments are implemented may further be accessible through a transmission media or from a file server over a network. In such cases, the article of manufacture in which the code is implemented may comprise a transmission media, such as a network transmission line, wireless transmission media, signals propagating through space, radio waves, infrared signals, etc. Thus, the \u201carticle of manufacture\u201d may comprise the medium in which the code is embodied. Additionally, the \u201carticle of manufacture\u201d may comprise a combination of hardware and software components in which the code is embodied, processed, and executed. Of course, those skilled in the art will recognize that many modifications may be made to this configuration without departing from the scope of the present invention, and that the article of manufacture may comprise any information bearing medium known in the art.","The logic of  describes specific operations occurring in a particular order. In alternative implementations, certain of the logic operations may be performed in a different order, modified or removed. Moreover, operations may be added to the above described logic and still conform to the described implementations. Further, operations described herein may occur sequentially or certain operations may be processed in parallel, or operations described as performed by a single process may be performed by distributed processes.","The illustrated logic of  may be implemented in software, hardware, programmable and non-programmable gate array logic or in some combination of hardware, software, or gate array logic.",{"@attributes":{"id":"p-0065","num":"0064"},"figref":"FIG. 8","b":["100","140","800","800","802","804","810","805","804","810","806","810","804","802","808","812","802","814","802","800"]},"The computer architecture  may comprise any computing device known in the art, such as a mainframe, server, personal computer, workstation, laptop, handheld computer, telephony device, network appliance, virtualization device, storage controller, etc. Any processor  and operating system  known in the art may be used.","The foregoing description of implementations of the invention has been presented for the purposes of illustration and description. It is not intended to be exhaustive or to limit the invention to the precise form disclosed. Many modifications and variations are possible in light of the above teaching. It is intended that the scope of the invention be limited not by this detailed description, but rather by the claims appended hereto. The above specification, examples and data provide a complete description of the manufacture and use of the composition of the invention. Since many implementations of the invention can be made without departing from the spirit and scope of the invention, the invention resides in the claims hereinafter appended."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["Referring now to the drawings in which like reference numbers represent corresponding parts throughout:",{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIGS. 1A and 1B"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 8"}]},"DETDESC":[{},{}]}
