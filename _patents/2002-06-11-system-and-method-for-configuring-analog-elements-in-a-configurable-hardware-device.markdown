---
title: System and method for configuring analog elements in a configurable hardware device
abstract: A system is provided for programming a configurable semiconductor device. The system includes a programmable controlling device, a programmable computing device, a communication link, a configurable hardware device, a design tool with first computer program code, and second computer program code. The configurable hardware device has memory with a plurality of memory locations and coupled with the programmable controlling device via the communication link. The design tool includes first computer program code embodied in a programmable computing device. The second computer program code is generated at least in part by the first computer program code and is embodied in the programmable controlling device for: a) applying configuration data to selected memory locations within the configurable hardware device to configure the configurable hardware device; b) determining a location of a subset of at least one of (i) the programmable memory locations in the configurable hardware device and (ii) the configuration data to be modified; and c) determining a new data value to be applied to the subset of at least one of (i) the memory locations in the configurable hardware device and (ii) the configuration data. The design tool provides at least one of configuration data, address data, and a data value algorithm usable in performing at least one of a), b), and c). A method is also provided.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07024654&OS=07024654&RS=07024654
owner: Anadigm, Inc.
number: 07024654
owner_city: Tempe
owner_country: US
publication_date: 20020611
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","CROSS-REFERENCE TO COMPUTER PROGRAM LISTING APPENDIX","COPYRIGHT NOTICE","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS"],"p":["This invention pertains to configurable devices. More particularly, this invention relates to programmable, configurable devices such as reconfigurable devices wherein software is developed for programming a first configurable device using a second configurable device.","CD-ROM Appendix A, which is part of the present disclosure, is a CD-ROM appendix consisting of 13 files. CD-ROM Appendix A is a computer program listing appendix that includes a software program. Appendix A is incorporated herein by reference. The total number of CD-ROMs including duplicates is two, each of which includes 13 files, as follows:",{"@attributes":{"id":"p-0004","num":"0003"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"91pt","align":"center"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]},{"entry":[{},"Name","Size","Created"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"char","char":"."}},{"@attributes":{"colname":"3","colwidth":"91pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"916Y3.H","42,479","Mar. 12, 2002"]},{"entry":[{},"AN20E30.C","7,159","Mar. 12, 2002"]},{"entry":[{},"AN20E30.H","232","Mar. 12, 2002"]},{"entry":[{},"APICODE.C","37,721","Mar. 12, 2002"]},{"entry":[{},"APICODE.H","31,170","Mar. 12, 2002"]},{"entry":[{},"GEDEMO.C","24,051","Mar. 12, 2002"]},{"entry":[{},"GENTYPES.H","342","Mar. 12, 2002"]},{"entry":[{},"IPMODU~1.C","5,677","Mar. 12, 2002"]},{"entry":[{},"IPMODU~1.H","5,272","Mar. 12, 2002"]},{"entry":[{},"LCDDISP.C","15,755","Mar. 12, 2002"]},{"entry":[{},"LCDDISP.H","373","Mar. 12, 2002"]},{"entry":[{},"QSPI.C","3,608","Mar. 12, 2002"]},{"entry":[{},"QSPI.H","202","Mar. 12, 2002"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]}}]}}},"A portion of the disclosure of this patent document contains material that is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure, as it appears in the Patent and Trademark Office patent file or records, but otherwise reserves all copyright rights whatsoever.","Configurable devices have grown in use and popularity. One example of a configurable device is a programmable device. Programmable devices have evolved to the point where it is now practical and desirable to configure one programmable device with another programmable device. For example, a micro-controller can be used to program a configurable hardware device such as a programmable logic device (PLD). Alternatively, a microprocessor, a field programmable gate array (FPGA), or a digital signal processor (DSP) chip may be used to program a field programmable analog array (FPAA), an FPGA, or a DSP chip.","In one case, configuration is accomplished by programming a first device to write configuration data to some or all of the configuration data registers within a second device. After configuring the second device, it is often desirable for the first device to be able to adjust any or all of the performance parameters of the second device. Additionally or optionally, it is desirable to change the overall circuit implemented in the second device. In both cases, the adjustment or change is carried out by either (a) modifying all or part of the configuration data, and then applying the configuration data to the registers within the second device or (b) by directly modifying all or part of the configuration data contained within the registers of the second device. However, current design tools have a difficult time carrying out this modification.","Present-day computer-aided design (CAD) tools for integrated circuits have been used to program configurable devices, but are designed to provide the ability to program a target device. However, such CAD tools have no provision for configuration of the device by or from another device. More particularly, circuit design flow typically uses internal algorithms in order to combine together the user's design, information about architecture of the device, and potentially one or more pre-defined elements. The design flow then delivers a configuration data set that is suitable for configuring the target device. This technique works relatively well when the configurable device is to be loaded in its entirety, such as when the device is being loaded from a read-only memory (ROM). However, use of this technique relegates a sophisticated controller to the task of merely loading one or more complete configurations into the configurable device (or chip) because the only portion of the original design information that is available when the controller code is compiled is the resulting raw configuration data.",{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 1","b":["10","12","14","16","18","20","22","24","26","10","26","16"]},"With respect to controller flow , a user program , libraries , CPU device description , and a compiler  interact such that compiler  generates a CPU program . Compiler  receives configuration data  from configurable hardware flow  and\/or indirectly via user program . CPU program  is delivered to controlling device , after which controlling device  uses internal algorithms to combine a user's design, information about the device architecture, and pre-defined elements. Controlling device  then delivers a configuration data set, or a program, to configurable device  that is suitable for configuring such device.","Device description  includes information about device topology , as well as information about resource availability . Function library  includes information about resource requirements , simulation models , and functional timing . User functional description  includes information about a functional description, as well as information about a \u201cschematic\u201d or \u201cVHDL\u201d (VHSIC Hardware Description Language). CAD tool  includes information about resource allocation , place & route information , netlist conversion information , and configuration generation information .","User program  can be provided in any of a number of programming languages including, but not limited to, \u201cC\u201d language, assembly language, and PASCAL. Libraries  include a floating point library , a peripheral library , and an algorithm library . CPU device description  includes information about device topology  and resource availability .","Existing CAD tools are provided with configuration data alone, and are not provided with details about device architecture and sub-circuit placement. Accordingly, any external program on a controlling device, such as controlling device , can do little more than blindly load the configurable hardware onto configurable device . In order for CPU program  to be rendered with the ability to make useful changes to circuitry or parameters within configurable device , additional information is required about where components are to be placed and the criteria for setting values for such components. However, presently known techniques are incapable of providing such information.","For example, conventional practice with some field programmable gate array (FPGA) designs allows a user to update only selected portions of an array within the FPGA. This activity is the functional equivalent of putting several smaller FPGAs within a single package. However, the associated configuration software still does not provide a user with information about the underlying configuration data, nor the effects of changing the data. Furthermore, the configuration software is incapable of mapping user-described parameter changes onto the configuration data.","As a second example, application notes have been published by vendors of micro-controllers and micro-controller peripherals for products that include sample source code listings. However, these source code listings are only capable of addressing configuration of hardwired options within a specific device, such as defining a port as either an input port or an outport port, or in order to set one of several pre-defined baud rates. Furthermore, such application notes are only applicable to fixed hardware and fixed functionality applications.","The present invention is a method and apparatus for providing information about where components are to be placed and to provide criteria for setting values of such components in a programmable device. The information and criteria are provided in a form that can be readily used in a design process flow of a programming device in order to allow local modification of configuration data for configurable components, or hardware, of the programmable, configurable device.","According to one aspect, a system is provided for programming a configurable semiconductor device. The system includes a programmable controlling device, a programmable computing device, a communication link, a configurable hardware device, a design tool with first computer program code, and second computer program code. The configurable hardware device has memory with a plurality of memory locations and coupled with the programmable controlling device via the communication link. The design tool includes first computer program code embodied in a programmable computing device. The second computer program code is generated at least in part by the first computer program code and is embodied in the programmable controlling device for: a) applying configuration data to selected memory locations within the configurable hardware device to configure the configurable hardware device; b) determining a location of a subset of at least one of (i) the programmable memory locations in the configurable hardware device and (ii) the configuration data to be modified; and c) determining a new data value to be applied to the subset of at least one of (i) the memory locations in the configurable hardware device and (ii) the configuration data. The design tool provides at least one of configuration data, address data, and a data value algorithm usable in performing at least one of a), b), and c).","According to another aspect, a system is provided for configuring a programmable device. The system includes a first programmable device, a second programmable device, a programmable computing device having a design tool with first computer program code, and a second computer program code. The second programmable device has configurable hardware and configuration data registers for configuring the configurable hardware. The second programmable device communicates with the first programmable device. The programmable computing device has a design tool with first computer program code for generating at least one of configuration data, address data, and algorithms. The second computer program code is generated at least in part by the first computer program code. The second computer program code incorporates at least one of the generated configuration data, address data, and algorithms for determining data values. The second computer program code is embodied in the first programmable device for: a) applying configuration data to selected memory locations within the configurable hardware device; b) determining a location of a subset of at least one of (i) the programmable memory locations in the configurable hardware device and (ii) the configuration data to be modified; and c) determining a new data value to be applied to the subset of at least one of (i) the memory locations and (ii) the configuration data.","According to yet another aspect, a method is provided for implementing configuration or reconfiguration of analog elements provided in a configurable hardware device. The method includes: providing a configurable hardware device communicating with a programmable controlling device; generating a hardware design including analog elements; generating computer program code that provides at least one of data and an algorithm usable in carrying out at least one of: configuring the analog elements by applying configuration data to selected memory locations within the configurable hardware device; determining a location of a subset of at least one of (i) the programmable memory locations and (ii) the configuration data to be modified; and determining a new data value to be applied to the subset of at least one of (i) the memory locations and (ii) the configuration data; incorporating the computer program code into an application for updating configuration of the configurable hardware device; and delivering the application to the programmable controlling device for reconfiguring the configurable hardware device.","According to even another aspect, a method is provided for configuring a field programmable analog array. The field programmable analog array is connected to a programmable controlling device. The method includes: providing a hardware design for at least one analog element within the field programmable analog array; generating computer program code including at least one of a data set and a process usable to: configure the analog elements by applying configuration data to selected programmable memory locations within the field programmable analog array; determine a location of a subset of at least one of (i) the memory locations and (ii) the configuration data to be modified; and determine a new data value to be applied to the subset of at least one of (i) the memory locations and (ii) the configuration data; generating an application program incorporating at least in part the computer program code operative to update configuration of the field programmable analog array; receiving the application program at the programmable controlling device; with the application program, programming the programmable controlling device with instructions to write configuration data to at least one configuration data register within the field programmable analog array; writing the configuration data to the at least one configuration data register of the field programmable analog array; and configuring hardware within the field programmable analog array in response to writing the configuration data to the at least one configuration data register.","One advantage according to the present invention is the provision of additional features to design and configuration software so that information required for close-coupled control is available for use in developing a controller program for a programmable controlling device used to reconfigure a configurable hardware device.","This disclosure of the invention is submitted in furtherance of the constitutional purposes of the U.S. Patent Laws \u201cto promote the progress of science and useful arts\u201d (Article 1, Section 8).","Reference will now be made to a preferred embodiment of Applicants' invention. One exemplary implementation is described below and depicted with reference to the drawings comprising a system and method for programming a configurable semiconductor device. While the invention is described by way of a preferred embodiment, it is understood that the description is not intended to limit the invention to such embodiment, but is intended to cover alternatives, equivalents, and modifications which may be broader than the embodiment, but which are included within the scope of the appended claims.","In an effort to prevent obscuring the invention at hand, only details germane to implementing the invention will be described in great detail, with presently understood peripheral details being incorporated by reference, as needed, as being presently understood in the art.","For purposes of this disclosure, the term \u201cfield programmable analog array (FPAA)\u201d is understood to refer to an integrated circuit capable of being programmed and configured to implement analog circuits using programmable interconnections and an array of configurable analog blocks. More particularly, an FPAA includes a collection of analog circuit components and switches. The switches may be used to connect the components together in order to realize a particular circuit design. Switches are also used in order to set values of individual analog circuit components. By downloading a binary bitstream to the FPAA (or chip), the FPAA switches can be set, which in turn defines a particular circuit. Even relatively simple FPAAs have thousands of switches that are required to be set in order to realize a particular circuit design. Accordingly, improvements presented herein are employed in order to simplify the circuit design and switch setting problem. Furthermore, provision is made for simulating particular analog circuit designs.","For purposes of this disclosure, the term \u201cC\u201d code as used herein refers to a specific example of program code. It is understood that other specific program codes could also be used including PASCAL, Visual Basic, Fortran, as well as other known program codes.","According to previously known techniques, full custom integrated circuit design was relatively time-consuming and required extensive analog design expertise. Programmable devices and FPAAs, in particular, provide the ability to quickly produce and change circuits when given the proper data to program the array. According to such techniques, the generation of programming data is greatly simplified using computer aided design tools which represent the design in a manner familiar to the circuit designer, and which automatically generate the corresponding data to program the FPAA. The ability to modify or generate this programming in the absence of such computer aided design tools is limited, almost prohibitive. In a situation where, for example, a microprocessor adjacent to the FPAA was required to change aspects of the circuit function implemented by the FPAA, the circuit designer would require an intimate knowledge of array architecture, the design of circuits using the technology on which the FPAA has been built, and the construction of the specific data sequences to cause the FPAA to realize such circuits.","However, the above-described technique is very labor-intensive and so complex as to be difficult to implement. The improvements presented herein address this problem.",{"@attributes":{"id":"p-0043","num":"0042"},"figref":"FIG. 2","b":["61","61","63","53","65","67","69"]},"As shown in , system  is implemented in a combination of software and hardware in a manner that enables programming of configurable hardware device  using programmable controlling device . More particularly, software is provided in the form of exported device information  for programming configurable hardware device  so that information that is required for close coupled control is made available for use in developing a controller program via central processing unit (CPU) program . Programmable controlling device  then makes modified configuration data  available to configurable hardware device  either by (a) modifying all or part of the configuration data, and then applying the configuration data to the registers within the configurable hardware device , or (b) directly modifying all or part of the configuration data contained within the registers of the configurable hardware device . Using configuration data , configurable hardware device  is programmed as a consequence of the software. Software aspects of the system generate, in addition to usual configuration data of prior art systems, code which may be used by a second configurable device in order to modify, in whole or in part, functionality of configurable hardware device .","Programmable computing device  includes a micro-controller unit (MCU) , memory , a design tool , and a configurable analog module (CAM) library . MCU  includes a central processing unit (CPU)  comprising processing circuitry .","Design tool  comprises AnadigmDesigner2. An earlier version, AnadigmDesigner, is presently publicly available for download and use at http:\/\/www.anadigm.com from Anadigm Ltd., United Kingdom, and is herein incorporated by reference. A future release version will include aspects of the present invention which are added to the above-referenced earlier version of AnadigmDesigner, details of which are described below.","As shown in , design tool  includes a configuration computer-aided design (CAD) tool . Configuration CAD tool  includes computer program code  including configuration data , address data , and one or more data value algorithms .","PC  includes a central processing unit (CPU) , memory , a user interface , a user program , a compiler , libraries , and a CPU device description . CPU  includes processing circuitry .","Programmable controlling device  includes a user application program , memory , and a user interface . According to one embodiment, programmable controlling device  includes a central processing unit (CPU) . Application program  includes computer program code  for implementing software monitoring and control functions within the application system.","As shown in , configurable hardware device  comprises a field programmable analog array (FPAA) , according to such one embodiment. FPAA  includes memory , and hardware , such as microminiaturized, electronic circuits placed on a semiconductor device. Memory  includes memory locations  for receiving and storing configuration data for electrically configuring the hardware . Hardware  is constructed to be at least in part configurable such that its function can be dependent upon electrical states determined by configuration data held in memory . Hardware  includes analog circuit elements  for the processing of analog signals.","In operation, an initial set of configuration data  is generated by design tool . Configuration data  is provided via exported device information  to compiler . Additionally, or optionally, configuration data  is provided via user program  to compiler . Further details of methods for configuring a programmable semiconductor device are disclosed in U.S. Pat. No. 6,272,669 B1, entitled \u201cMethod for Configuring a Programmable Semiconductor Device\u201d, herein incorporated by reference.","According to one system configuration, configurable hardware device  includes a plurality of memory locations  in memory . Configurable hardware device  is coupled with programmable controlling device  via a communication link , such as a Serial Peripheral Interface (SPI) bus . In one case, computer program code  comprises first computer program code and computer program code  comprises second computer program code. The first computer program code is embodied in programmable computing device . The second computer program code is generated at least in part by the first computer program code. In one case, the second computer program code is generated completely by the first computer program code. However, this case is very unlikely. In another case, the second computer program code is generated partly by the first computer program code and partly by user input via user interface . For example, additional code can be provided to generate optional user interface  (of ).","In operation, the second computer program code is embodied in the programmable controlling device  for configuring the configurable hardware device  by applying configuration data  to selected memory locations within the configurable hardware device . The second computer program code is also embodied in the programmable controlling device  for determining a location of a subset of programmable memory locations, such as memory locations , that are to be modified to contain new information relating to configuration. Even further, the second computer program code is embodied in programmable controlling device  for determining a new data value to be applied to the subset of the memory locations .","Instead of requiring hand programming, design tool  provides at least one of the configuration data, the address data, and a data value algorithm that is usable in performing at least one of the configuring, the determining of a location, and the determining of a new data value. In one case, design tool  automatically provides at least one of the configuration data, the address data, and the data value algorithm(s).","As will be discussed below with reference to , programmable controlling device  provides a controlling device that is not limited to simply loading pre-compiled configurations into configurable hardware  of configurable hardware device . Instead, programmable controlling device  is imparted with information that is necessary to create modified configuration data in a dynamic operation, thereby not requiring hand coding by a programmer. For example, to change the gain parameter on a specific instance of a gain function the user is provided with the facility to simply call a software routine to set the gain for that gain function, whereas traditionally the user would have to (i) determine the new component values necessary to effect the new gain, (ii) deduce, by low-level analysis, the location of programming data, either in the device itself or in the configuration data, that is responsible for setting such component values and (iii) construct a mechanism in software whereby such replacement of data values can be effected. Furthermore, this result makes it possible to not only modify the performance parameters for a given base configuration of device , but to create configuration data for entirely new functionality for device . Alternatively, it also becomes possible to reallocate device resources in order to accomplish the same functionality, but in a different manner or layout. All of the preceding can be accomplished in real time and independently of the original configuration CAD tool .","In one case, programmable computing device , PC , and programmable controlling device  are provided by a single, common personal computer having a design tool . Alternatively, programmable computing device  and PC  are provided by a stand-alone computer-aided design computer and programmable controlling device  is provided by a micro-controller resident on an application board. Further alternatively, programmable computing device , PC , and programmable controlling device  are all provided as separate devices. Additionally, programmable controlling device  is close-coupled with configurable hardware device , according to one implementation.","According to various embodiments, programmable controlling device  comprises a microprocessor, a micro-controller, a field programmable gate array (FPGA), or a digital signal processor (DSP), to name a few. Also according to various embodiments, configurable hardware device  comprises a programmable logic device (PLD), a field programmable analog array (FPAA), a field programmable gate array (FPGA), or a digital signal processor (DSP), to name a few.",{"@attributes":{"id":"p-0058","num":"0057"},"figref":["FIG. 3","FIG. 3"],"b":["122","122","123","124","125"]},{"@attributes":{"id":"p-0059","num":"0058"},"figref":"FIG. 4"},"As shown in , configurable hardware development flow  is illustrated in relationship with CPU program development flow . A CAD  tool receives input in the form of a device description , a function library , and a user functional description . CAD tool  outputs configuration data  comprising a binary bitstream. Configuration data  is provided either to a user program  or a packet of exported device information .","Device description  includes information pertaining to device topology , information pertaining to resource availability , and device control algorithms .","Function library  includes information on resource requirements , simulation models , information on functional timing , and parameter calculation algorithms .","User functional description  includes a functional description  and a \u201cschematic\u201d or \u201cVHDL\u201d hardware representation .","CAD tool  includes information on resource allocation , place & route information , netlist conversion information , configuration generation information , and design\/device information export details . Implementation of configurable hardware development flow  results in the generation of exported device information  which is delivered to user program  within CPU program development flow .","CPU program development flow  includes a user program , a compiler , libraries , CPU device description , CPU program , and a CPU .","User program  can be rendered in various programming languages, including \u201cC\u201d language, assembly language, PASCAL, or any other comparable programming language. Libraries  include a floating point library , a peripheral library , and an algorithm library . CPU device description  includes information on device topology  and information on resource availability .","In operation, user program  includes exported device information , and compiler  receives user program , libraries , and CPU device description  in order to compile, or translate, the resulting programs from a relatively high-level programming language (such as \u201cC\u201d language) into machine language. Compiler  first generates assembly language, then translates the assembly language into machine language. Accordingly, compiler  generates CPU program , comprising a bitstream output.","CPU program  is delivered to a programmable controlling device . In one form, programmable controlling device  is provided in the form of a CPU . In this case, programmable controlling device  processes the CPU program  in order to generate configuration data . Such configuration data  is then forwarded to configurable hardware device  in order to configure or reconfigure analog elements within configurable hardware device . As shown previously in , programmable controlling device  communicates with configurable hardware device  via a communication link , such as an SPI bus .","Exported device information  includes device specific mapping information and algorithms , as well as design specific mapping information and algorithms . Device specific mapping information and algorithms  includes device specific algorithms , design-to-device mapping information , hardware configuration data , design-to-device memory map data , and design modification algorithms . Design specific mapping information and algorithms  includes function parameter calculation algorithms  and relationship mapping information between the placement of function parameters and placed components . Further details are provided below with reference to .","Function library  includes information on resource requirements , simulation models information , functional timing information , and parameter calculation algorithms .","CAD tool  includes a user functional description  and a device description . User functional description  includes schematic capture information . Device description  includes information on device topology , resource availability information , and device control algorithms .","As shown in , function library  provides input in the form of configurable analog modules (CAMs) within a CAM library to CAD tool , all within the configurable hardware development flow . CAD tool  generates a configurable device data set  which is initially provided to configurable hardware device  or is provided directly to compiler  within CPU program development flow . Configurable device data set  provides a subset of exported device information  (of ). Configurable device data set  includes a device library , a design library , and configuration data .","Device library  includes information about a device type , check sum calculation information , data formatting information , device configuration routines information , and device specific algorithms .","Design library  includes initial configuration data , sub-circuit and component placement data , and data formatting information .","Details of user program , compiler , libraries , CPU device description , and CPU program  are similar to those depicted with reference to .","Software enhancement of  is implemented by way of algorithms that are provided within the CAMs within function library , as well as within program code routines and CAD software provided within CAD tool . More particularly, algorithms within the CAMs are operative to describe algorithms necessary to translate user specified parameters into component values and topologies. According to one implementation, such algorithms are implemented as \u201cC\u201d language routines. However, they could equally well be presented in any high-level language, or even compiled as object code. These code routines are generated specifically in order to implement modification of circuits generated by a user during the design phase of a circuit design.","A set of code routines implement basic functions such as configuration data assembly, check sum recreation, relocation of functions within the device, and calculation routines that are often used.","CAD software within CAD tool  combines place & route information with the previously mentioned set of code routines in order to generate a set of codes specific to the circuit implemented by the configuration data. The generated set of codes may be directly imported by a user's \u201cC\u201d compiler (such as compiler ) in order to create a CPU program  that can create modified configuration data for use in reconfiguring configurable hardware device  via programmable controlling device .","According to the above techniques, a method is provided for designing a circuit by assembling a group of sub-assembly circuits (or subcircuits) within a CAD tool, such as CAD tool  (of ). Once designed, the circuit can be realized in a programmable device, such as an FPAA. CAD tool  (of ) provides a mechanism for translating the circuit design into properly formatted data that is needed in order to program the device. Sub-assembly circuits that can be assembled in the CAD tool are compatible with the CAD tool, but are not an integral part of the CAD tool. The sub-assembly circuit definitions are portable individually, or in groups. Accordingly, sub-assembly circuit definitions can easily be created or modified in order to change their functionality, while maintaining compatability with the CAD tool.","The sub-assembly circuit definitions contain information about the sub-assembly circuits needed in order to perform several things. The sub-assembly circuit definitions contain information needed to define multiple configurations, topologies and parameters of the sub-assembly circuit.","Additionally, information in the form of algorithms may be realized in a manner that, when combined with data stored in the CAD tool and data taken from user interfaces run by the CAD tool, returns the desired information to the CAD tool. For example, the information about modifying configurations of a sub-assembly circuit in response to user selections is handled in this manner.","Accordingly, CAD tool  of  has the ability to read data contained in the sub-assembly circuit definition; provide a user interface wherein the user can assemble the sub-assembly circuits into larger circuits; provide a user interface for each sub-assembly circuit so that the user can change the configuration and\/or behavior of that sub-assembly circuit; run interpreter code contained in the sub-assembly circuit definition; provide a user interface with functionality that is specific to a particular programmable device; set up and run a simulation using the circuit design and information contained in the sub-assembly circuit definitions; view the results of a simulation; transform the circuit design into properly formatted data in order to download the data to a programmable device; and facilitate download of the properly formatted data to a programmable device.","The above-described technique allows significant design expertise to be contained within the sub-assembly circuit definitions, including sub-assembly circuit topology, the relationship of sub-assembly circuit topology and component values to higher level parameters displayed by the user interface, and sub-assembly circuit performance as shown through simulation. The sub-assembly circuit definitions, together with the CAD tool, contain specific details of the programmable device architecture. Accordingly, a person utilizing this technique is not required to be an expert in circuit design or the programmable device, but can work in a higher level of abstraction represented by the user interfaces of the sub-assembly circuits and the CAD tool. This makes the design of circuits and translation of those circuits to a proper format for programming an FPAA chip both quick and easy.","As shown in , algorithms within the CAMs of function library  are operative to describe algorithms necessary to translate user specified parameters into component values and topologies. Essentially, inside each CAM there exists a small segment of programming code which provides the core of the algorithm. When generating application programming interface (API) source code, all the small segments of programming code relating to specific CAMs are collected and integrated into the resulting design. Essentially, the small segments of source code are assembled such that AnadigmDesigner2 creates a group of API source code files comprising a collection of all the source code segments derived from those which exist inside the respective CAMs of the circuit design. It also includes other useful system-level function definitions and memory map information, as described below. Such programming code segments are collected together into a set of API source code files that are assembled together and put into a form that is ready to be compiled into a resulting application program, represented by CPU program  (of ).","Each of the programming code segments is absolutely specific to the respective CAM that is being utilized in a circuit design, as well as to the overall circuit construction that is associated with such a CAM and to the architecture of the FPAA that will implement the circuit. If a user builds a circuit that includes three unique sub-assembly circuit components (or CAMs), each of such three functional devices would have their own function specific programming code segments which are extracted. All of such three functions will then exist as function definitions inside the CAM programming code file.","Specifically, AnadigmDesigner2 takes a particular circuit design that a user draws into schematic view (as represented in ) and it composes the functions provided by a user from resources available within a silicon layout for the field programmable analog array. AnadigmDesigner2 actually chooses the topology using real resources, and determines which physical components will be used in order to realize the resulting circuit structure. Once AnadigmDesigner2 has determined which physical components are going to be used, AnadigmDesigner2 knows where they physically reside inside the FPAA (or chip). Accordingly, the addresses of memory locations which need to be updated are known.","As a user constructs a circuit, AnadigmDesigner2 assigns known low-level resources in the FPAA to implement it, and hence can describe the address of memory locations which program those resources. When the design is complete, it can generate both configuration data unique to that design and a collection of compilable \u201cC\u201d code files unique to that design which incorporates a hierarchy of function definitions containing algorithm information about how to reassign values to memory locations within the FPAA, and address information about where those corresponding memory locations are. The \u201cC\u201d code provides a very convenient means of invoking the algorithm and address information by using a simple high-level function call. When a user includes such a high-level function call in his own code, his software (when running) will automatically construct and issue a programming instruction to the FPAA to create the desired change to the circuit design.","Accordingly, the \u201cC\u201d code function combines the algorithm, calculates a new value, and contains other function calls which are prescriptive in terms of the memory address that needs to be updated and that is absolutely unique depending on the application.","For example, as AnadigmDesigner2 allocates for a particular sub-assembly circuit, for example, a capacitor that is present in a low-pass filter block, the capacitor will end up being somewhere in the device and its programming will have a particular address. However, AnadigmDesigner2 will not know that address until the circuit has been constructed. Once the address is known, that address location is physically reported and included into the \u201cC\u201d code as a number. When that \u201cC\u201d code is compiled and used for that particular design, that unique address is known and all the user has to do is call the function which says \u201cChange the Gain\u201d, and the microprocessor which is running the compiled \u201cC\u201d code will construct the dynamic update data segment (which includes the target address for the new data and the data itself) and will convey that data to the FPAA, which will then modify its behavior accordingly.","1. Design Example",{"@attributes":{"id":"p-0090","num":"0089"},"figref":"FIGS. 6\u201311"},"The term \u201cIPmodule\u201d in Appendix A refers to a configurable analog module (CAM). A CAM is a software embodiment of a circuit function, such as an inverting gain function, to be realized in a configurable device (such as an FPAA).","By way of introduction, , in combination with the following specification and Appendix A, describe the process for implementing partial update for a field programmable analog array in an embedded application. The purpose of this design example is to illustrate the relative ease with which CAMs can be updated using \u201cC\u201d code generated from AnadigmDesigner2, when configuring an Anadigm AN220E04 FPAA.","Pursuant to this design example, a process will be disclosed for first creating a design using AnadigmDesigner2. Secondly, a process will be disclosed for using AnadigmDesigner2 in order to generate \u201cC\u201d code. Finally, the process will disclose the incorporation of generated \u201cC\u201d code into an exemplary application.","For purposes of this design example, an application environment is provided for running a user application in the form of Anadigm AN20PDS30 development system  as depicted in . Development system  includes a digital board  for running a user application program  and an analog board  for running analog circuitry (or analog circuit elements) .","As shown in , programmable computing device  and PC  are provided together in a common device \/ communicating with programmable controlling device . Programmable controlling device  communicates directly within configurable hardware device  via a communication link. Device \/ includes a design tool , such as a CAD design tool. Design tool  includes configurable hardware development flow  and CPU program development flow , as previously discussed with reference to .","Digital board  includes user application program  and RS-232 port  for communicating with device \/, power connector  for supplying power to digital board , a microcontroller unit (MCU) , an LCD display , application switches , configuration switches , and a reset switch . MCU  includes a central processing unit (CPU) , including processing circuitry.","Analog board  includes analog circuit elements , a daughterboard connector , AN220E04 FPAA , breadboard area , serial EEPROM sockets , a daisy-chain connector , a series of single-ended inputs , and a series of single-ended outputs .","When the user application program  runs on the MCU , the software sends configuration information to FPAA , thus allowing updates as needed.",{"@attributes":{"id":"p-0099","num":"0098"},"figref":["FIG. 7","FIG. 7"],"b":["59","198","59"]},"As shown in , resistor network circuit  includes resistors \u2013 arranged in relationship with FPAA .","More particularly, input cell  of AN220E04 FPAA  is shown provided with multiple inputs. These multiple inputs can be selected either using AnadigmDesigner2, or through use of \u201cC\u201d code capabilities. More particularly, primary configuration is implemented from AnadigmDesigner2 which is illustrated as design tool  (of ). Additional configuration can be implemented through Dynamic Update by way of user application program  (of ). The ability to select multiple inputs allows the user application program to decide which resistors to measure at any particular time. By using a breadboard (breadboard area  of ), a user can change resistors at any time in order to see the resulting effect on the design under consideration.",{"@attributes":{"id":"p-0102","num":"0101"},"figref":["FIG. 8","FIG. 7","FIG. 8"],"b":["206","206"]},{"@attributes":{"id":"p-0103","num":"0102"},"figref":["FIGS. 9\u201311","FIG. 8","FIG. 9"],"b":["206","210","208","220","212"]},"Screen display  includes a header , a menu bar  in which a plurality of menu items  are displayed for selection by a user, and a tool bar  in which a plurality of selectable tool bar buttons  are provided.","With the exception of the specific menu items  and  depicted in , the remaining menu items of menu bar  are presently available in AnadigmDesigner, an earlier version of AnadigmDesigner2. Accordingly, the functional details of such other menu items are not discussed herein in great detail in order to prevent obscuring the invention at hand. Instead, the added functionality and details provided by the \u201cC\u201d code menu item  and the \u201cTarget\u201d menu item  will be discussed in greater detail below. Chip design  provides an initial template in which a specific chip design is generated using AnadigmDesigner2. More particularly, chip design  includes a plurality of input cells , ,  and  as well as a plurality of output cells  and .","In order to arrive at the circuit of , the following steps are undertaken from the perspective of . First, a user double-clicks on input cell  and turns off a chopper amplifier and an anti-aliasing filter. This action sets input cell  into a bypass mode so that a user can connect the resulting inputs directly to a desired CAM corresponding with inverting gain stage  (of ).","Subsequently, a user double-clicks on output cell  and sets the cell to a bypass mode. Furthermore, the user double-clicks on output cell  and also sets it to a bypass mode. Next, a user places an inverting gain CAM, corresponding with inverting gain stage  (of ) onto chip . The user then sets the gain of the module to ten. Subsequently, using appropriate tool bar buttons  in tool bar , a user wires the output of input cell  to the input of the inverting gain CAM  (see ). Subsequently, the user wires the output of the inverting gain CAM  to both output cells  and , as shown in . As shown in , the end result of such steps illustrates a wired inverting gain CAM realized by chip .","The specific improvements added to AnadigmDesigner2 over those presently available in publicly usable and commercially available AnadigmDesigner includes the ability to generate \u201cC\u201d code from the construction of a CAM, such as inverting gain CAM  of . Once specific layout of analog circuitry has been designed, a user can now generate \u201cC\u201d code for a desired application. By default, all CAMs and I\/O cells that have \u201cC\u201d code capabilities are configured to generate corresponding \u201cC\u201d code. Such result is suitable for the purposes disclosed herein and implemented according to the present invention. By selecting the \u201cC\u201d code menu item  of , a pull-down menu display is generated to a plurality of options for writing configuration to various locations (not shown). For example, selection of the \u201cC\u201d code menu item  generates a pull-down menu that includes a selection item to \u201cGenerate\u201d \u201cC\u201d code. Additionally, the pull-down menu includes a selection item for viewing \u201cGeneration Options\u201d. Even furthermore, the configuration pull-down menu includes a selection item for viewing \u201cCAM Functions\u201d.","The \u201cGeneration Options\u201d selection item (not shown) includes tailoring of generation options including general information, reconfiguration information, primary configuration information, and clock information. For example, in order to avoid possible naming collisions with existing code, every type, constant, variable, and function name may be prepended with a string. For example, all generated \u201cC\u201d code can be prepended with a prefix \u201can_\u201d in order to avoid possible naming collisions. Furthermore, there exists an ability to tailor the truncation of names to a limited number of characters, such as by limiting names to the first 31 characters of an internal name to comply with an ANSI C standard.","Upon selecting the \u201cGenerate\u201d selection item, a pop-up \u201cC\u201d code generation dialog window  is displayed, as shown in . Dialog window  of  results from selecting the \u201cGenerate\u201d selection item from the corresponding pull-down menu of the \u201cC\u201d code menu item . Optionally, the \u201cC\u201d code menu item  can directly launch the dialog box  of , but such implementation is limited to writing configuration data in only one manner.","As shown in , a \u201cTarget\u201d menu item  is provided for displaying board information and\/or downloading an application to a selected flash memory location. Selection of \u201cTarget\u201d menu item  generates a pull-down menu that displays a selection item to \u201cdisplay board information\u201d. Additionally, a selection item is displayed to \u201cdownload application to flash 1\u201d. Even furthermore, a selection item is displayed to \u201cdownload application of flash 2\u201d. Accordingly, a user can select one of the items from the pull-down menu in order to generate the corresponding result.","By default, the resulting \u201cC\u201d code is saved into a directory in which a user has previously saved the circuit file. If the user desires, the user can select another location in order to save the resulting \u201cC\u201d code, such as by selecting the other items within the resulting pull-down menu. Furthermore, a user can change the file names, although for purposes of this example illustration, default values will be used. Upon generation of dialog window , a user then clicks on generate button . The user is then informed when the resulting \u201cC\u201d code has been written to the specific directory. Code resulting from such an action is illustrated by way of example in Appendix A of the present application.","As shown in , pop-up dialog window  includes a header , generate button , API \u201cC\u201d code files field , CAM \u201cC\u201d code files field , and destination directory field . API \u201cC\u201d code files field  includes a pair of API file entry fields  and . CAM \u201cC\u201d code files field  includes a pair of CAM file entry fields  and . Destination directory  includes a pair of selectable radio buttons  and . Radio button  includes an associated directory file entry field , whereas radio button  includes an associated directory file entry field .","Additionally, pop-up dialog window  includes a close button , a help button , a generate options button , and a CAM functions button .","As discussed in this design example, the \u201cC\u201d code that is generated by AnadigmDesigner2 is not necessarily useful by itself. The \u201cC\u201d code is typically required to be incorporated into a larger software project that will call various other code routines, as needed. For example, device information  is exported from design tool  into PC , as shown in . Within PC , user program , libraries , and user interface  enable the incorporation of other inputs into a larger project that generates CPU program  (of ).","The above-described example design application also incorporates additional code into a larger project, as detailed in Appendix A. The example design application takes advantages of a design in order to switch between various inputs of input cell  (see ). The example design application will also have an independent setting for the gain module for each channel. As the user switches through the channels, the gain module will be updated to respective appropriate settings. Accordingly, such example design application allows a user to control which channel is presently in use. Secondly, the application allows a user to control the gain of each channel as it is used. Thirdly, the application allows a user to have the application continually rotate through the four channels (depicted in ). Finally, the application allows the user to calibrate the four channels to a desired output setting. The resulting example design application is disclosed in attached Appendix A, which is incorporated into the present disclosure comprising respective source code.","During the operation of the software, the example design application will need to call several functions in order to initialize the \u201cC\u201d code libraries, to adjust the CAMs as desired, and to generate a data stream in order to update the AN220E04 FPAA. More particularly, the example design application needs to call API and CAM \u201cC\u201d code functions.","First of all, the \u201cC\u201d code API libraries need to be initialized. This is done with a call to the lnitializeReconfigData routine:\n\n","This call is made on a per-chip basis, depending on which chips have reconfigurable CAMs.","Unless the chip has been configured some other way, it will probably need to be configured for the first time when the application starts up. A user can retrieve the data stream for the primary configuration with a call to the GetPrimaryConfigData routine:\n\n","This retrieves a pointer to the buffer, and the size of the configuration. How the data gets to the chip depends upon the particular application. In this case, one can use the QSPI port of the HC to stream the data to the chip.","During software operation, if a CAM characteristic needs to be changed through \u201cC\u201d code, the application must call the \u201cC\u201d code function for that module. For the Analog MUX, one can call the setPadSelect function:","an_setPadSelect(an_chip1_InputCell4, MuxBit(ChannelLoop));","For the gain module, one can call the setGain function:","an_setGain(an_chip1_GainInv, GainMid);","To see details of these functions, a user can click on the \u201cC\u201d code button of the CAM characteristics in AnadigmDesigner2.","Note that the CAM functions do not change any characteristics of the chip. They only set up the configuration stream. When that stream is downloaded to the chip, then the characteristics will change.","When the application is ready to update the AN220E04 FPAA, it calls the GetReconfigData routine:","ConfigPtr=(unsigned short int *)an_GetReconfigData(an_chip1, &ConfigSize);","A user then streams the data, in this case through the QSPI port, to the chip. When the data has been transferred, a user can reset the configuration buffer by calling the ClearReconfigData routine:\n\n","In one particular case, it doesn't apply, but if a user needs to close out the configuration buffers (to save memory, for example), a user can call the ShutdownReconfigData routine for each chip.","After the \u201cC\u201d code has been incorporated into the application, a user can compile and link using whatever compiler is being used. For the HC, one possible suitable compiler is the Cosmic C Compiler suite.","After the application has been compiled and linked, a user can download the S application file to the HC (flash memory). This is done by using the \u201cTarget->Download application to flash1\u201d menu command in AnadigmDesigner2. A user can select the S file to use, and AnadigmDesigner2 then sends it down to the HC. AnadigmDesigner2 will signal a bell tone when download is complete, and the ABK on the HC will show \u201cDownload App\u201d on the LCD display.","A user now needs to hook up the resistor network to the AN220E04 FPAA, and also to test equipment in order to view the output. If a user wishes to calibrate the gain, they will need to hook up the A\/D converter of the HC to the AN220E04 FPAA.","Next, a voltmeter should be hooked up across the output cell  pins, taking note of the polarity of the output. Differential outputs will be used, and differential-to-single-ended conversion circuitry will be ignored. Remove the single-ended to differential converter circuitry from the input cells by removing the J and J jumpers on the analog board.","Hook up the resistor network as shown in . Connect the ground of the network to the ground of the AN220E04 FPAA, and Vcc of the network to AVDD of the AN220E04 FPAA. This will provide the voltage needed for this circuit. Be sure to note the polarity of each of the inputs of input cell 4, put the negative side (i.e., I4NA) to the side of the resistor going to ground, and the positive side (i.e., I4PA) to the side of the resistor going to Vcc.","For calibrating the gain of the Analog circuitry, connect output cell  to the A\/D circuitry of the HC. Connect pin P- of the analog board (O2P of the AN220E04 FPAA) to P- of the digital board (AN of the HC). Connect pin P- of the analog board (O2N of the AN220E04 FPAA) to P- of the digital board (AN of the HC).","A user can now start the application by pressing switch S on the digital board. The application starts up, and proceeds to configure the AN220E04 FPAA for the presently desired design.","After configuration has been completed, the circuit operates normally, and the software now can accept user input. For our purposes, the keys of the digital board have been defined in this case. More particularly, two application switches  (see ) have been redefined such that one application switch calibrates the channels and a second application switch rotates through channels (turns off other switches). Additionally, configuration switches have been defined. More particularly, a first configuration switch is defined to increment gain plus 0.5. A second configuration switch has been defined to decrement gain minus 0.5. A third configuration switch has been defined to \u201cchannel up\u201d. A fourth configuration switch has been defined to \u201cchannel down\u201d.","An LCD display  (see ) is also used in order to show to a user the current status of the user application program  (see ). More particularly, the LCD display shows the channel that the multiplexing unit (MUX of the FPAA) is currently set to, as well as the gain assigned for that channel.","By using the Channel Up\/Down buttons (switches S & S) a user can switch between the Analog MUX channels. By pressing the Gain Up\/Down buttons (switches S & S), a user can control the level of the gain in the module.","Pressing S again starts a rotation algorithm. Every second or two, the application automatically switches the Analog MUX (of the FPAA) to the next channel (or wraps around to the beginning). It also sets the gain CAM to whatever gain was last used on that channel. Press S again to stop the rotation. All other buttons (except Reset) are ignored while Rotation is running.","Press S to start a calibration sequence. The application will ask what voltage to calibrate to. Since an inverting gain CAM is being used, the output is a negative voltage. Buttons S through S control the voltage.","When a desired calibration point is achieved, press S again to start the calibration algorithm. As the algorithm proceeds, a user can see the work of the algorithm on the LCD display and on the voltmeter. After the calibration is complete, the LCD display will show a \u201cCal done!\u201d message. A user can then return to the normal operation by pressing any button.","After calibrating, a user can go through the individual channels to see that the output is fairly consistent for each channel. If desired, a user can move the resistors around to show the voltage changes, and recalibrate to return to the desired output.","The \u201cC\u201d code feature of the present disclosure provides a powerful way to dynamically control CAMs within the AN220E04 FPAA. Coupled with a user's embedded software, it makes for a truly flexible analog solution.",{"@attributes":{"id":"p-0146","num":"0149"},"figref":"FIG. 12"},"As shown in , a logic flow diagram illustrates the steps of implementing a configuration or reconfiguration process for analog elements within a configurable hardware device. In Step \u201cS\u201d, a configurable hardware device is provided communicating with a programmable controlling device. After performing Step \u201cS\u201d, the process proceeds to Step \u201cS\u201d.","In Step \u201cS\u201d, the system generates a hardware design including analog elements. After performing Step \u201cS\u201d, the process proceeds to Step \u201cS\u201d.","In Step \u201cS\u201d, the system generates computer program code that provides at least one of data and an algorithm usable in carrying out at least one of: configuring the analog elements by applying configuration data to selected memory locations within the configurable hardware device; determining a location of a subset of at least one of (i) the programmable memory locations and (ii) the configuration data to be modified; and determining a new data value to be applied to the subset of at least one of (i) the memory locations and (ii) the configuration data. After performing Step \u201cS\u201d, the process proceeds to Step \u201cS\u201d.","In Step \u201cS\u201d, the system exports the computer program code, including exported device information, from a programmable computing device to a compiler. After performing Step \u201cS\u201d, the process proceeds to Step \u201cS\u201d.","In Step \u201cS\u201d, the system maps parameter changes onto configuration data in order to enable reconfiguration of the hardware. After performing Step \u201cS\u201d, the process proceeds to Step \u201cS\u201d.","In Step \u201cS\u201d, the system compiles the computer program code for use by the programmable controlling device in order to enable selective modification of the configuration data for the hardware of the configurable hardware device, using the compiled program code. After performing Step \u201cS\u201d, the process proceeds to Step \u201cS\u201d.","In Step \u201cS\u201d, the system incorporates the computer program code into an application program for updating configuration of the configurable hardware device. After performing Step \u201cS\u201d, the process proceeds to Step \u201cS\u201d.","In Step \u201cS\u201d, the system delivers the application program to the programmable controlling device for reconfiguring the configurable hardware device by transferring the generated computer program code from the programmable controlling device to the configurable hardware device in order to reconfigure the hardware within the configurable hardware device. After performing Step \u201cS\u201d, the process proceeds to Step \u201cS\u201d.","In Step \u201cS\u201d, the system updates the configuration data of the configurable hardware device using the programmable controlling device to reconfigure the hardware of the configurable hardware device. After performing Step \u201cS\u201d, the process is terminated.",{"@attributes":{"id":"p-0156","num":"0159"},"figref":"FIG. 13"},"As shown in , a logic flow diagram illustrates the steps of configuring a field programmable analog array. In Step \u201cS\u201d, a hardware design is provided for at least one analog element within a field programmable analog array (FPAA) that is connected with a programmable controlling device. After performing Step \u201cS\u201d, the process proceeds to Step \u201cS\u201d.","In Step \u201cS\u201d, the system generates computer program code including at least one of a data set and a process usable to: configure the analog elements by applying configuration data to selected programmable memory locations within the FPAA; determine a location of a subset of at least one of (i) the memory locations and (ii) the configuration data to be modified; and determine a new data value to be applied to the subset of at least one of (i) the memory locations and (ii) the configuration data. After performing Step \u201cS\u201d, the process proceeds to Step \u201cS\u201d.","In Step \u201cS\u201d, the system generates an application program that incorporates at least in part the computer program code. The application program is operative to update configuration of the field programmable analog array. After performing Step \u201cS\u201d, the process proceeds to Step \u201cS\u201d.","In Step \u201cS\u201d, the system receives the application program at the programmable controlling device. After performing Step \u201cS\u201d, the process proceeds to Step \u201cS\u201d.","In Step \u201cS\u201d, the system embodies the computer program embodies the computer program code and algorithms that are stored in memory of the programmable controlling device. The algorithms are provided for mapping the field programmable analog array (FPAA) into a desired device configuration and\/or for implementing function parameter calculations. After performing Step \u201cS\u201d, the process proceeds to Step \u201cS\u201d.","In Step \u201cS\u201d, with the application program, the system programs the programmable controlling device with instructions to write configuration data to at least one configuration data register within the field programmable analog array (FPAA). After performing Step \u201cS\u201d, the process proceeds to Step \u201cS\u201d.","In Step \u201cS\u201d, the system exports the configuration data to the field programmable analog array (FPAA) from the programmable controlling device. After performing Step \u201cS\u201d, the process proceeds to Step \u201cS\u201d.","In Step \u201cS\u201d, the system writes the configuration data to the at least one configuration data register of the field programmable analog array (FPAA). After performing Step \u201cS\u201d, the process proceeds to Step \u201cS\u201d.","In Step \u201cS\u201d, the system configures hardware within the field programmable analog array (FPAA) in response to writing the configuration data to the at least one configuration data register. After performing Step \u201cS\u201d, the process is terminated.","In compliance with the statute, the invention has been described in language more or less specific as to structural and methodical features. It is to be understood, however, that the invention is not limited to the specific features shown and described, since the means herein disclosed comprise preferred forms of putting the invention into effect. The invention is, therefore, claimed in any of its forms or modifications within the proper scope of the appended claims appropriately interpreted in accordance with the doctrine of equivalents."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["Preferred embodiments of the invention are described below with reference to the following accompanying drawings.",{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIGS. 1A\u20131B"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIGS. 2A\u20132B"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":["FIGS. 4A\u20134B","FIG. 2"]},{"@attributes":{"id":"p-0027","num":"0026"},"figref":["FIGS. 5A\u20135B","FIG. 4"]},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":["FIG. 7","FIG. 6"]},{"@attributes":{"id":"p-0030","num":"0029"},"figref":["FIG. 8","FIG. 7"]},{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0032","num":"0031"},"figref":["FIG. 10","FIG. 9","FIG. 8"]},{"@attributes":{"id":"p-0033","num":"0032"},"figref":["FIG. 11","FIG. 11"]},{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 12","b":["2","4","5"]},{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIGS. 13A\u201313B"}]},"DETDESC":[{},{}]}
