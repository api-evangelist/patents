---
title: Systems and methods for virtual host name roaming
abstract: Systems and methods for providing a uniform network addressing scheme for a user accessing a network that is independent from the computer from which the user accesses the network. A virtual IP address is assigned to a user, a user session or a program run by user, where the IP address is different from the IP address of the computer of the user, and different from other users. A virtual host name is assigned to and associated with the virtual IP address of the user, user session or the program the user is running. As the user accesses the network from different computers, the user can be assigned the same virtual host name and in some cases the same virtual IP address. Furthermore, as the user accesses the network from multiple user sessions, the user can be assigned a virtual host name that uniquely identifies the user and the user session.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07756984&OS=07756984&RS=07756984
owner: Citrix Systems, Inc.
number: 07756984
owner_city: Fort Lauderdale
owner_country: US
publication_date: 20040927
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS REFERENCE TO RELATED APPLICATIONS","TECHNICAL FIELD","BACKGROUND INFORMATION","SUMMARY OF THE INVENTION","DESCRIPTION"],"p":["This present application is a divisional of and claims priority to U.S. Pat. No. 10\/711,583, entitled \u201cSYSTEM AND METHOD FOR MANAGING VIRTUAL IP ADDRESSES\u201d and filed Sep. 27, 2004, which is incorporated herein by reference.","The invention generally relates to network communications. More particularly, the invention relates to systems and methods for providing a uniform network addressing scheme to assign virtual host names to a user accessing a network.","A typical computer system uses a single internet protocol (IP) address and corresponding host name assigned to the computer system. Any user session or program on the computer will use the host name of the computer for network communications, such as on a TCP\/IP network. Communications over the network to and from the computer, for example between a client and a server, use the computers host name and IP address as part of the network communications of the computer. Even in a multi-user environment such as a server using Microsoft Terminal Server, all users or programs running on the multi-user server will share the same host name and IP address assigned to that server. The IP address and host name is computer or machine dependent and are associated with network communications originating from the computer. Even in the case where a computer has multiple network cards and multiple IP addresses, these IP addresses and their host names are associated with the computer and not specifically with users or programs of the computer. All users and programs on the computer will communicate over a network with the host name of the computer. As such, the host name is associated with the computer and not the user of the computer.","In performing host name resolution on a network or to look up host names used on a network, only the host names and IP addresses of computers in the network will be found. From these host names, the user or user session on the computer may not be easily identified. Furthermore, a user may be accessing the network from different computers each with a different host name or from multiple user sessions on the same computer with the same host name. As such, the typical network addressing scheme does not allow for efficient lookup of a user by host name to determine what users may be accessing the network and from how many sessions or from what computers.","Additionally, some applications assume that each user or program will use a unique host name. For example, some network monitoring and mainframe systems use the host name to identify users. However, if two users are on the same computer they will share the same host name assigned to the computer. In another case, the user may roam within a server farm and therefore does not always access the network from the same computer. For example, some multi-user systems use a set of load balancing servers to support a large number of concurrent users. When a user connects, the user is automatically and dynamically directed to the least loaded server to balance the load. Unfortunately, this means the IP address and host name of the computer the user is assigned to is not known until the user is connected to the dynamically determined server. This makes it more difficult to associate a host name or IP address with a user.","Thus, it is desirable to provide a uniform network addressing scheme for a user roaming on a network, accessing a multi-user system, or starting multiple user sessions. Systems and methods are needed for assigning virtual host names to virtual IP addresses for users that are independent from the IP address and host name of the computer system from which the user accesses a network.","The present invention relates to systems and methods for providing a uniform network addressing scheme to assign a virtual host name to a user or user session as the user roams a network or starts up multiple sessions. The present invention provides a program, user or user session with a unique virtual internet protocol (IP) address different than the one assigned to the computer for communicating over a network. As such, multiple users on the same computer can perform network communications with unique IP addresses different from each other and the computer. Furthermore, a virtual host name or set of virtual host names can be associated with a particular user, and can be associated with the user regardless of the virtual IP address that may be assigned to the user or program of the user. The present invention then associates the virtual host name with the virtual IP address of the user so that the virtual host name identifies the user in a uniform fashion. In summary, the present invention provides for a virtual host name to be associated with a user that is independent from the host name of the computer and that roams with the user through the network.","In one aspect, the invention relates to a method for providing a uniform network addressing scheme for a user accessing a computer on a network independent from the computer the user is accessing. The method comprises the step of obtaining a plurality of virtual host names, and the step of assigning, from the plurality of virtual host names, a first virtual host name to a first user accessing a first computer via the network and obtaining a second virtual host name, different from the first virtual host name, to a second user accessing the first computer via the network. The method further comprises associating the first virtual host name of the first user with an internet protocol address of the first user associated with the first computer and associating the second virtual host name of the second user with an internet protocol address of the second user associated with the first computer.","In one embodiment, the method further comprises the step of obtaining a plurality of internet protocol addresses for assigning unique internet protocol addresses to each of the users. In another embodiment, the method further comprises obtaining at least one of the plurality of internet protocol addresses from a Dynamic Host Configuration Protocol server. The method may also include reserving at least one of the plurality of internet protocol addresses for at least one of the first user and the second user. In a further embodiment, the method comprises associating the least one reserved internet protocol address with the first virtual host name or the second virtual host name.","In one embodiment, the method further comprises assigning, from the plurality of internet protocol addresses, a first internet protocol address to the first user, and a second internet protocol address, different from the first internet protocol address, to the second user. In another embodiment, the method further comprises registering, with a name resolution service, at least one of the plurality of virtual host names to at least one of the first user and the second user. In one embodiment, the name resolution service comprises a Domain Name Service, and in another embodiment, it may comprise a Windows Internet Naming Service.","In an embodiment of the method, the method further comprises assigning the first virtual host name to the first user accessing a second computer and associating the first virtual host name with an internet protocol address of the second computer associated with the first user.","In another embodiment, the method further comprises assigning the second virtual host name to the second user accessing a second computer and associating the second virtual host name with an internet protocol address of the second computer associated with the second user. The method may also includes assigning, while the first user accesses the first computer, a third virtual host name to the first user accessing a second computer and associating the third virtual host name with an internet protocol address of the second computer associated with the first user.","In another embodiment, the method assigns, while the second user accesses the first computer, a fourth virtual host name to the second user accessing a second computer and associates the fourth virtual host name with an internet protocol address of the second computer associated with the second user.","In one embodiment, the method may include naming one or more of the virtual host names with a portion of the characters representing the user's identity on the network. In another embodiment, the method may name at least one of the virtual host names with a suffix identifying the session of the user when the user is concurrently accessing multiple computers on the network.","In another aspect, the present invention relates to a system for providing a uniform network addressing scheme for a user accessing a computer on a network independent from the computer the user is accessing. The system comprises a server on a network providing a one or more virtual host names and a first computer having a network interface. The first computer on the network obtains a first virtual host name from the one or more virtual host names for a first user of the first computer and a second virtual host name, different from the first virtual host name, for a second user of the first computer. The network interface of the first computer associates the first virtual host name of the first user with an internet protocol address of the first computer associated with the first user, and associates the second virtual host name of the second user with an internet protocol address of the first computer associated with the second user.","In one embodiment of the system, the server obtains a plurality of internet protocol addresses for assigning a unique internet protocol address to each of the users. The server may obtain at least one of the internet protocol addresses from a Dynamic Host Configuration Protocol server. In a further embodiment, the server reserves at least one of the internet protocol addresses for at least one of the users.","In another embodiment, the server assigns, from the internet protocol addresses, a first internet protocol address for the first user, and a second internet protocol address, different from the first internet protocol address, for the second user. In one embodiment, the network interface associates the least one reserved internet protocol address with at least one of the first virtual host name and the second virtual host name. In one embodiment, the system further comprises a name resolution service to register at least one of the plurality of virtual host names to at least one of the users. The name resolution service may comprise a Domain Name Service or a Windows Internet Naming Service.","In another system embodiment, the network interface assigns the first virtual host name to the first user accessing a second computer and associates the first virtual host name with an internet protocol address of the second computer associated with the first user. In a further embodiment, the network interface assigns the second virtual host name to the second user accessing a second computer and associates the second virtual host name with an internet protocol address of the second computer associated with the second user. In yet another embodiment, a network interface of a second computer assigns, while the first user accesses the first computer, a third virtual host name to the first user accessing the second computer and associates the third virtual host name with an internet protocol address of the second computer associated with the first user. Also the system may include the network interface of the second computer assigns, while the second user accesses the first computer, a fourth virtual host name to the second user accessing the second computer and associates the fourth virtual host name with an internet protocol address of the second computer associated with the second user.","In one embodiment of the system, the name of at least one of the virtual host names comprises a portion of the characters representing the user's identity on the network. In another system embodiment, the name of the least one of the virtual host names comprises a suffix identifying the session of the user when the user is concurrently accessing multiple computers on the network.","Certain illustrative embodiments of the present invention are described below. It is, however, expressly noted that the present invention is not limited to these embodiments, but rather the intention is that additions and modifications to what is expressly described herein also are included within the scope of the invention. Moreover, it is to be understood that the features of the various embodiments described herein are not mutually exclusive and can exist in various combinations and permutations, even if such combinations or permutations are not made expressly herein, without departing from the spirit and scope of the invention.","The illustrative embodiments of the present invention provide for assigning unique network identifiers for network communications of one or more programs, users or user sessions running on a computer. The present invention also provides for assigning unique loopback addresses to one or more programs, users or user sessions for inter-process communications using the loopback interface of a computer. Furthermore, certain embodiments of the present invention provide for a uniform addressing scheme to provide one or more programs, users or users sessions a host name and\/or internet protocol address that is associated with a user as the user moves from one computer to the next on the network or starts up multiple user session.",{"@attributes":{"id":"p-0034","num":"0033"},"figref":["FIGS. 1A and 1B","FIGS. 1A and 1B","FIG. 1A"],"b":["100","100","102","104","124","126","127","100","130","130","130","140","102"],"i":["a","b "]},"The central processing unit  is any logic circuitry that responds to and processes instructions fetched from the main memory unit . In many embodiments, the central processing unit is provided by a microprocessor unit, such as: the 8088, the 80286, the 80386, the 80486, the Pentium, Pentium Pro, the Pentium II, the Celeron, or the Xeon processor, all of which are manufactured by Intel Corporation of Mountain View, Calif.; the 68000, the 68010, the 68020, the 68030, the 68040, the PowerPC 601, the PowerPC604, the PowerPC604e, the MPC603e, the MPC603ei, the MPC603ev, the MPC603r, the MPC603p, the MPC740, the MPC745, the MPC750, the MPC755, the MPC7400, the MPC7410, the MPC7441, the MPC7445, the MPC7447, the MPC7450, the MPC7451, the MPC7455, or the MPC7457 processor, all of which are manufactured by Motorola Corporation of Schaumburg, Ill.; the Crusoe TM5800, the Crusoe TM5600, the Crusoe TM5500, the Crusoe TM5400, the Efficeon TM8600, the Efficeon TM8300, or the Efficeon TM8620 processor, manufactured by Transmeta Corporation of Santa Clara, Calif.; the RS\/6000 processor, the RS64, the RS 64 II, the P2SC, the POWER3, the RS64 III, the POWER3-II, the RS 64 IV, the POWER4, the POWER4+, the POWER5, or the POWER6 processor, all of which are manufactured by International Business Machines of White Plains, N.Y.; or the AMD Opteron, the AMD Athlon 64 FX, the AMD Athlon, or the AMD Duron processor, manufactured by Advanced Micro Devices of Sunnyvale, Calif. The computer  may be based on any of the above described processors, or any other available processors capable of operating as described herein.","Main memory unit  may be one or more memory chips capable of storing data and allowing any storage location to be directly accessed by the microprocessor , such as Static random access memory (SRAM), Burst SRAM or SynchBurst SRAM (BSRAM), Dynamic random access memory (DRAM), Fast Page Mode DRAM (FPM DRAM), Enhanced DRAM (EDRAM), Extended Data Output RAM (EDO RAM), Extended Data Output DRAM (EDO DRAM), Burst Extended Data Output DRAM (BEDO DRAM), Enhanced DRAM (EDRAM), synchronous DRAM (SDRAM), JEDEC SRAM, PC100 SDRAM, Double Data Rate SDRAM (DDR SDRAM), Enhanced SDRAM (ESDRAM), SyncLink DRAM (SLDRAM), Direct Rambus DRAM (DRDRAM), or Ferroelectric RAM (FRAM). The main memory  may be based on any of the above described memory chips, or any other available memory chips capable of operating as described herein. In the embodiment shown in , the processor  communicates with main memory  via a system bus  (described in more detail below).  depicts an embodiment of a computer  in which the processor communicates directly with main memory  via a memory port . For example, in  the main memory  may be DRDRAM.",{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIGS. 1A and 1B","b":["102","140","102","140","150","140","104"]},"In the embodiment shown in , the processor  communicates with various I\/O devices  via a local system bus . Various busses may be used to connect the central processing unit  to any of the I\/O devices , including a VESA VL bus, an ISA bus, an EISA bus, a MicroChannel Architecture (MCA) bus, a PCI bus, a PCI-X bus, a PCI-Express bus, or a NuBus. For embodiments in which the I\/O device is a video display , the processor  may use an Advanced Graphics Port (AGP) to communicate with the display .  depicts an embodiment of a computer  in which the main processor  communicates directly with I\/O device via HyperTransport, Rapid I\/O, or InfiniBand.  also depicts an embodiment in which local busses and direct communication are mixed: the processor  communicates with I\/O device using a local interconnect bus while communicating with I\/O device directly.","The computing device  may support any suitable installation device , such as a floppy disk drive for receiving floppy disks such as 3.5-inch, 5.25-inch disks or ZIP disks, a CD-ROM drive, a CD-R\/RW drive, a DVD-ROM drive, tape drives of various formats, USB device, hard-drive or any other device suitable for installing software and programs such as software related to the present invention .","The computing device  may further comprise a storage device , such as one or more hard disk drives or redundant arrays of independent disks, for storing an operating system and other related software, and for storing application software programs such as any program  related to the present invention. Optionally, any of the installation devices  could also be used as the storage device . Additionally, the operating system and software programs  of the present invention can be run from a bootable medium, for example, a bootable CD, such as KNOPPIX\u00ae, a bootable CD for GNU\/Linux that is available as a GNU\/Linux distribution from knoppix.net.","Furthermore, the computing device  may include a network interface  to interface to a Local Area Network (LAN), Wide Area Network (WAN) or the Internet through a variety of connections including, but not limited to, standard telephone lines, LAN or WAN links (e.g., 802.11, T1, T3, 56 kb, X.25), broadband connections (e.g., ISDN, Frame Relay, ATM), wireless connections, or some combination of any or all of the above. The network interface  may comprise a built-in network adapter, network interface card, PCMCIA network card, card bus network adapter, wireless network adapter, USB network adapter, modem or any other device suitable for interfacing the computing device  to any type of network capable of communication and performing the operations described herein.","A wide variety of I\/O devices -may be present in the computing device . Input devices include keyboards, mice, trackpads, trackballs, microphones, and drawing tablets. Output devices include video displays, speakers, inkjet printers, laser printers, and dye-sublimation printers. The I\/O devices may be controlled by a an I\/O controller  as shown in . The I\/O controller may control one or more I\/O devices such as a keyboard  and a pointing device , e.g., a mouse or optical pen. Furthermore, an I\/O device may also provide storage  and\/or an installation medium  for the computing device . In still other embodiments, the computing device  may provide USB connections to receive handheld USB storage devices such as the USB Flash Drive line of devices manufactured by Twintech Industry, Inc. of Los Alamitos, Calif.","In further embodiments, an I\/O device  may be a bridge  between the system bus  and an external communication bus, such as a USB bus, an Apple Desktop Bus, an RS-232 serial connection, a SCSI bus, a FireWire bus, a FireWire 800 bus, an Ethernet bus, an AppleTalk bus, a Gigabit Ethernet bus, an Asynchronous Transfer Mode bus, a HIPPI bus, a Super HIPPI bus, a SerialPlus bus, a SCI\/LAMP bus, a FibreChannel bus, or a Serial Attached small computer system interface bus.","A computing device  of the sort depicted in  typically operate under the control of operating systems, which control scheduling of tasks and access to system resources. The computing device  can be running any operating system such as any of the versions of the Microsoft\u00ae Windows operating systems, the different releases of the Unix and Linux operating systems, any version of the MacOS\u00ae for Macintosh computers, any embedded operating system, any real-time operating system, any open source operating system, any proprietary operating system, any operating systems for mobile computing devices, or any other operating system capable of running on the computing device and performing the operations described herein. Typical operating systems include: WINDOWS 3.x, WINDOWS 95, WINDOWS 98, WINDOWS 2000, WINDOWS NT 3.51, WINDOWS NT 4.0, WINDOWS CE, and WINDOWS XP, all of which are manufactured by Microsoft Corporation of Redmond, Wash.; MacOS, manufactured by Apple Computer of Cupertino, Calif.; OS\/2, manufactured by International Business Machines of Armonk, N.Y.; and Linux, a freely-available operating system distributed by Caldera Corp. of Salt Lake City, Utah, Java or Unix, among others.","In other embodiments, the computing device  may have different processors, operating systems, and input devices consistent with the device. For example, in one embodiment the computer  is a Zire 71 personal digital assistant manufactured by Palm, Inc. In this embodiment, the Zire 71 operated under the control of the PalmOS operating system and includes a stylus input device as well as a five-way navigator device. Moreover, the computing device  can be any computer, workstation, desktop computer, laptop or notebook computer, server, handheld computer, mobile telephone, or other form of computing or telecommunications device that is capable of communication and that has sufficient processor power and memory capacity to perform the operations described herein.","Referring to , in general, the present invention pertains to client-server systems and network communications. In brief overview, one embodiment of a client-server system  in which the present invention may be used is depicted. A client node communicates with a server node over a communications network . The system  may have one or more client nodes -, each communicating to one or more server nodes -over the network . The topology of the network  over which the client nodes -communicate with one or more server nodes, -may be a bus, star, or ring network topology. The network  can be a local area network (LAN), a metropolitan area network (MAN), or a wide area network (WAN) such as the Internet. The network  and network topology may be of any such network or network topology capable of supporting the operations of the present invention described herein.","The client and server nodes -, -can connect to the network  through a variety of connections including standard telephone lines, LAN or WAN links (e.g., T1, T3, 56 kb, X.25, SNA, DECNET), broadband connections (ISDN, Frame Relay, ATM, Gigabit Ethernet, Ethernet-over-SONET), and wireless connections. Connections can be established using a variety of communication protocols (e.g., TCP\/IP, IPX, SPX, NetBIOS, Ethernet, ARCNET, Fiber Distributed Data Interface (FDDI), RS232, IEEE 802.11, IEEE 802.11a, IEEE 802.11b, IEEE 802.11g, and direct asynchronous connections).","In one embodiment (now shown), the network  is separated into networks  and \u2032. The networks  and \u2032 can be the same type of network or different types of networks. In one embodiment, the network  and\/or the network \u2032 is, for example, a local-area network (LAN), such as a company Intranet, or a wide area network (WAN), such as the Internet or the World Wide Web. The clients -and the server -can be connected to the networks  and\/or \u2032 through a variety of connections including, but not limited to, standard telephone lines, LAN or WAN links (e.g., 802.11, T1, T3, 56 kb, X.25), broadband connections (e.g., ISDN, Frame Relay, ATM), wireless connections, or some combination of any or all of the above.","The client nodes, or clients, -may be any workstation, desktop computer, laptop, handheld computer, mobile telephone, or other computing device  capable of communication and that has sufficient processor power and memory capacity to perform the operations described herein. Additionally, the client -can be a local desktop client on a local network  or can be a remote display client of a separate network \u2032. The client -can include, for example, a visual display device (e.g., a computer monitor), a data entry device (e.g., a keyboard), persistent and\/or volatile storage (e.g., computer memory), a processor, and a pointing device, such as a mouse. In a similar manner, the server nodes, or servers, -may be any type of computing device  capable of operating as described herein. Furthermore, the server nodes -may be provided as a group of server systems logically acting as a single server system, referred to herein as a server farm. In one embodiment, the server node -is a multi-user server system supporting multiple concurrently active client connections or user sessions.","In some embodiments, as shown in , a client agent -is included within the client -. The client agent -can be, for example, implemented as a software program and\/or as a hardware device, such as, for example, an ASIC or an FPGA. An example of a client agent -with a user interface is a Web Browser (e.g. a Microsoft\u00ae Internet Explorer browser and\/or Netscape\u2122 browser). The client agent -can use any type of protocol and it can be, for example, an HTTP client agent, an FTP client agent, an Oscar client agent, a Telnet client agent, an Independent Computing Architecture (ICA) client agent from Citrix Systems, Inc. of Fort Lauderdale, Fla., or a Remote Desktop Protocol (RDP) client agent from Microsoft Corporation of Redmond, Wash. In some embodiments (not shown), the client -includes a plurality of client agents -, each of which may communicate with a server -, respectively.","In any of the clients -and servers -, the computers (, \u2032, etc) typically run a single copy of the operating system for operating the computer . The operating system provides software and resources such as those necessary for the computer  to communicate on a network  over a network interface . A most widely used standard for network communications is the Transmission Control Protocol\/Internet Protocol (TCP\/IP), which is a combined set of protocols that performs the transfer of data between computers  on a network . The TCP protocol monitors and ensures correct transfer of data. The IP protocol uses an internet protocol address or IP address, which is a numerical address to uniquely identify computers  on a network  to route network traffic and establish connections among computers  on the network . A more user-friendly domain name, or computer host name, comprising a string of characters can be associated with the IP address to uniquely identify the computer. A computer  may have more than one domain name or IP address but a given domain name or IP address points to only one computer  on a network .","With many operating systems capable of running on the computer , such as Microsoft WINDOWS, Linux or a UNIX operating system, there is a single network and TCP\/IP protocol layer, or TCP stack, for performing network communications. The IP address and domain name assignment to a computer is device dependent. That is, the network identifier, such as an IP address and\/or domain name, is assigned to the computer  to associate and identify any network communications from the computer . Any user, application, user session or any other program that may run on the computer  that causes network communications uses the computer assigned network identifier. As such, a user of a computer or a program running on a computer communicates over the network using a network identifier assigned to the computer. For example, a computer  is assigned an IP address of 192.168.1.100. A first user logs into the computer and runs a program that generates network traffic over the network . The IP address of 192.168.1.100 will be used as part of the TCP\/IP protocol related network communications to uniquely identify the network to and from the computer . A second user logs into the computer  and runs another program that also generates network traffic over the network . The same IP address of 192.168.1.100 will be used in the network communications of the second user. As such, the user who generates the network traffic can not be distinguished by the IP address of their respective network communications.","In the case of a multi-user computer, such as a server running Microsoft Terminal Server, multiple users can log into the server and run programs concurrently or simultaneously. Since the server is running a single operating system and has an IP address assigned to the server, the multiple users and the multiple programs run by the users all share the same IP address. Each user session hosted by the server share the same IP address. Even in the case where a computer has multiple network interface cards (, \u2032, etc.), such as a server  running multiple ftp or web-sites, and having one or more IP addresses assigned to each network interface card , the IP address is still machine dependent. The one or more IP addresses identify the server and not the user or programs communicating on the server .","Many applications require each user or program to have separate IP addresses in order to work. Yet other applications use the IP address or host name to identify the user. Additionally, network monitoring applications and systems can monitor network activity such as internet activity and other application activity. However, if each user or application is using the same IP address, the monitoring application cannot identify the user associated with the activity. The present invention provides the advantage of assigning unique network identifiers to each of multiple programs or users communicating on the network  from the same computer .",{"@attributes":{"id":"p-0055","num":"0054"},"figref":"FIGS. 3A-3C","b":"100"},"Referring now to , the system  is a client-server system comprising a client  and server  communicating over a network . The client  has a network communication interface , an interface mechanism , a plurality of network identifiers  and one or more programs -. The network communication interface  includes any and all of the network related hardware and software required for the client  to communicate over the network . For example, the network communication interface  includes any network adapter  of the computer  and any other software and\/or hardware, such as operating system provided software and interfaces, necessary for the computer  to communicate over the network .","The interface mechanism  comprises a socket library  and a TCP stack  in order to provide a unique network identifier from the plurality of network identifiers  that may be available to each of the programs -running on the client . The socket library  is a general purpose networking application programming interface or API to access network services provided by the operating system. Briefly stated, a socket is an end point for interprocess communication, either locally or over a network running TCP\/IP. Sockets can simultaneously transmit and receive data from another process, using semantics that depend on the type of socket. The socket interface can support a number of underlying transport mechanisms. Ideally, a program written with socket calls can be used with different network architectures and different local interprocess communication facilities with little or no changes. The socket library  can be the Winsock API from Microsoft, the Berkeley Software Distribution (BSD) socket library for Unix or any other supported architecture, other socket libraries based on the socket interface from University of California at Berkeley, or any other available socket library providing a socket based network programming API to communicate using TCP\/IP over a network , which may or may not be based on the Winsock or the BSD API, and capable of operating on the computing device  as described herein.","The TCP stack  provides an implementation of the TCP\/IP communications protocol engine in order for the client  to communicate using TCP\/IP over the network . The TCP stack  includes TCP\/IP software and hardware driver software, sometimes referred to as packet drivers, that allows a computer  to communicate via TCP\/IP. Applications that use TCP\/IP, such as an application making API calls to a socket library , require a TCP stack to operate on the computer where the application runs. The TCP stack , in one embodiment, may include the socket library  software, and in another embodiment, the socket library  software may be not be included with the TCP stack . In a typical computer , the operating system provides a single TCP stack  for applications to use for network communications via TCP\/IP. For example, operating systems such as Microsoft Windows, versions of UNIX and Linux only support a single instance of the TCP stack . Additional TCP\/IP software, socket library software and\/or hardware driver software may be installed on the computer in addition to or instead of the similar software provided by the operating system. In an exemplary embodiment of the present invention, a single TCP stack  is used as provided by default by the operating system. In an alternative embodiment, the interface mechanism  may comprise a second TCP stack \u2032 in addition to the TCP stack  provided by the operating system. Each TCP stack , \u2032 may handle multiple users and\/or programs communicating over the network .","Additionally, the interface mechanism  may be any type of software component and\/or a special purpose hardware device, such as, for example, an ASIC or an FPGA. The one or more software components of the interface mechanism may each be embodied in a library, module, program, executable, application, service, process or task. Furthermore, the interface mechanism  may be made of several software components either running locally or distributed across multiple clients , \u2032 or servers , \u2032. The interface mechanism  may include the socket library and a portion of or all of the TCP stack . One ordinarily skilled in the art will appreciate the various permutation of the possible alternative embodiments of the interface mechanism .","The client  may provide for or obtain a plurality of network identifiers  for the interface mechanism  to use in assigning unique network identifiers to one or more programs -on the client . The network identifiers  may comprise IP addresses, domain or host names, or both IP addresses and host names. In a preferred embodiment, the network identifiers  comprise a unique list of IP addresses with each IP address having at least one unique host name associated with it. The network identifiers  may be statically defined in one embodiment, or dynamically determined in another embodiment. In some cases, some of the network identifiers  will be statically defined while other network identifiers  will be dynamically obtained from the client , server , or another client \u2032 or server \u2032 on the network .","The client  may obtain the network identifiers  many different ways and may receive a portion of the network identifiers  one way and other portions of the network identifiers  other ways. In one embodiment, the network identifiers  may be statically defined in a storage  location, such as a file, either remotely on the server  or on the client . For example, the local hosts file of the client  referenced by the operating system and TCP stack  in performing network operations using IP addresses and host names may contain a list of multiple network identifiers. In another embodiment, one or more of the network identifiers  are allocated or dedicated to a specific user.","In another embodiment, the client  obtains a one or more of the network identifiers from a server  accessible by the client  on the network . The server  may be a Dynamic Host Configuration Protocol server, also known as a DHCP server. DHCP is a standard for computers on a TCP\/IP network to request from one or more central servers information such as the IP number, the netmask, the gateway, etc. that the computer should be using. The DHCP protocol provides for assigning dynamic IP addresses to devices on a network and supports a mix of static and dynamic IP addresses. DHCP consists of two components: a protocol for delivering host-specific configuration parameters from a DHCP server  to a client  and a mechanism for allocation of network addresses to clients , \u2032.","In another embodiment, the client  obtains one or more of the network identifiers  from a network identifier generator , which can run on the server , or on the client , or on another client \u2032 or server \u2032 which is accessible by the client  on the network . The network identifier generator  may have an algorithm engine, business rule or logic engine for generating one or more of the network identifiers  for the client  or the server . The network identifier generator  may generate a sequential series of IP addresses and\/or host names. In another embodiment, the network identifier generator  may generate a random set of numbers with the numbers corresponding accordingly to the appropriate IP dot numbering scheme for the network . In another case, the network identifier generator  may use any combination of a user name, computer name, domain name or other descriptive strings of text in generating a host name for any of the IP addresses of the network identifiers . Furthermore, the network identifier generator  may have business rule logic that applies different addressing and generation schemes depending on the client  or server  requesting or obtaining the network identifiers  from the network identifier generator . One ordinarily skilled in the art will recognize that the network identifier generator  can apply a wide range of algorithms for generating network identifiers and apply a wide range of business rule logic for providing network identifiers to one or more computers on a network .","The client  may obtain, provide or be assigned a maximum number of unique network identifiers  as the client  or server  may be able to host. In other embodiments, the client may obtain, provide or be assigned less than a maximum number of unique network identifiers  as may be determined based on the number of users, number of programs or other factors impacting the need for assigning unique network identifiers  to programs -or users on the client . In one embodiment, the number of network identifiers  is a configurable parameter.","The client  may obtain a portion of the network identifiers  from the server , such as a storage location , another portion from a DHCP server , another portion from the network identifier generator  and yet another portion locally on the client . Furthermore, the client , the server , or any programs -on the client , the interface mechanism  of the client , or any program on the server  may obtain one or more network identifiers programmatically by making any API calls, such as operating system level API calls, or by using any configuration tool provided by the operating system or other application to obtain network identifiers . One ordinarily skilled in the art will appreciate the various permutations and alternative embodiments for the client  to obtain or provide for a plurality of network identifiers  for the present invention.","The client may provide for one or more programs -to execute on the client . The programs -can be any application, software or computer program capable of being invoked, executed on or processed by the computing device  of the client . For example, the program -can be any general purpose desktop application such as Microsoft Windows Explorer. The program -could also be any type of web interface accessing services provided over the network  via one or more servers , \u2032. The program -can be an enterprise application client accessing the server  over the network . In another case, the program -can be a custom application written in any programming language and compiled to execute on the client . In one embodiment, the program -is any program that is causing network communications over the network  to which a network identifier would be provided in the network communications. For example, the program -may make socket related API call through the socket library  using the TCP stack  to communicate to the network  through the network communication interface .","In one embodiment, the program -comprises an application isolation environment, which provides an execution context within a computing device  to separate, or isolate, a group of processes from another set of processes running in a separate instance of an application isolation environment. The isolation of processes in separate contexts protects one set of processes from issues generated from another set of processes. Typically, application isolation occurs at the process level where processes running in one execution context do not directly use the address space in memory used by other processes running in another execution context. However, an application isolation environment can provide any level of virtualization of operating system resources so as to separate or isolate the use of those resources by any program running -in each application isolation environment -. By way of example, on the client , program can provide an application isolation environment for one or more programs -to run in while program provides a second application isolation environment for another set of one or more programs -to run in.","In another embodiment, the programs -can comprise a thin-client program for accessing applications, programs and services on a server  using a remote display protocol. For example, any of the programs -may be an Independent Computing Architecture (ICA) client from Citrix Systems, Inc. of Fort Lauderdale, Fla., or a Remote Desktop Protocol (RDP) client from Microsoft Corporation of Redmond. These thin-client programs -provide access to user sessions running on the server , or one or more other servers \u2032, \u2032, such as multiple servers in a server farm or server cluster. As such, the program -can be a user session hosted by the client  or the server .","In one embodiment, each of the programs -can be running different types of applications, application isolation environments, or user sessions. For example, program may be an enterprise application client providing web access to enterprise application servers on the network. Program may be an application isolation environment providing an execution context for a user to run one or more programs. Program may be a thin-client program running a user session on the server . In another embodiments, the programs -may be any type of service running in the operating system. Additionally, a program -can also be referred to as any service, task, process, or thread running on the client -, or any combination thereof. One of ordinary skill in the art will recognize that the programs -may be any type of program capable of executing on the computing device  of the client  or server  and that multiple types of programs may run subsequently or concurrently on the client  or the server  by one or more of the same user or different users.","In operation, the interface mechanism  of the client  provides for the association of unique network identifiers from the plurality of network identifiers  to the programs -running on the computer or to users of the programs -. Although there may be a single operating system, TCP stack  and socket library  supporting the network communications of the programs -, the interface mechanism  locks, or binds, each user or program -to a unique network identifier so that network communications from that user or program from the same client  has a unique network identifier. Without the interface mechanism of the present invention, each user or program -of the client  would generate network communications with the same network identifier assigned to the client .","The interface mechanism  obtains and\/or selects a network identifier from the plurality of network identifiers  to associate and assign to a program -or user of the programs -. The interface mechanism  may obtain a network identifier from the plurality of network identifiers  programmatically through an API call, such as an API call to a DHCP server. The interface mechanism  may obtain a network identifier for a program -through any other form of interfacing by which it could obtain a network identifier, such as for example, reading a row of data from a file, such as a local hosts file, or by querying a row of data from a database. The interface mechanism  may have one or more network identifiers stored in memory upon start up of the client . One ordinarily skill in the art will recognize the interface mechanism  may obtain a network identifier for a program -in many different ways allowed by various known interfacing techniques.","The client , programs -and\/or interface mechanism  may obtain, select and\/or assign a unique network identifier for a program -or user at various times. In one embodiment, the client  may obtain one or more network identifiers upon booting or starting of the client . In another embodiment, the network identifier for a user may be obtained when the user logs into the client  or otherwise starts a user session. In one embodiment, the program -and interface mechanism obtains, selects, and assigns a network identifier to the program -upon establishment of or starting of the program -. In another embodiment, the network identifier for the program -is not obtained, selected or assigned until the program makes a call to the socket library . In other cases, the network identifier assigned to a program -or a user of the client  may be released or returned at any point after is no longer needed by the interface mechanism  or the program -. One ordinarily skilled in the art will recognize the many variations upon which a network identifier may be obtained, selected and\/or assigned to a program -or a user of the client  and in other cases returned to or released from the pool of network identifiers .","In an exemplary embodiment, the interface mechanism  locks in, or binds, a user or program -to one of the network identifiers  by intercepting and modifying calls made to the socket library . Since there is typically a single TCP stack  with one IP address assigned to the client , applications usually do not specify an IP address of the client  in API calls to the socket library . The IP address of the client  is a well-known IP address identified in one global name space of the TCP stack . By intercepting and modifying socket library  API calls, the interface mechanism  can apply a specific network identifier to the API call instead of the socket library  using the IP address and\/or host name assigned to the client  and already known by the TCP stack . After intercepting a socket library  API call, the interface mechanism  can apply a unique network identifier to the socket library  API call so that a network identifier is applied in making the API call. The interface mechanism  will apply the unique network identifier associated with the program -or associated with the user of the program -making the socket library  API call.","For socket based network communications, a program calling the socket library  API may perform a variety of API calls on a socket, the endpoint of communications between a source and destination process. An endpoint in TCP\/IP networking is determined by a unique combination of an IP address and a port address, or port number. Multiple applications on the same client  can use the same IP address concurrently with different port addresses as each IP and port address combination defines a unique endpoint. However, the present invention allows multiple programs -on the same client  to use the same port address concurrently. Since each program -may obtain a different IP address, each endpoint, i.e., IP and port address, will be uniquely defined via the unique IP address assigned to the program -. As such, a program with a first IP address may be bound to the same port address as another program with a second IP address on the same client .","The API of the socket library  defines function calls to create, close, read and write to\/from a socket, among other socket related functions as described by the specific API implementation of the socket library , such as the WinSock API. In establishing socket communication, the IP address and the port of the source and destination processes must be provided to the socket library  API. Then send and receive API calls can be made on the socket. A socket can be bound to a specific network address by calling the bind function of the socket library . The interface mechanism  would bind the socket to the unique network identifier determined by the interface mechanism  as associated with or assigned to the program -making the socket communications, or for the user accessing the program -. This network identifier would be provided as the source address for the program -on the client  and once the socket was mapped to this network identifier, all other socket based communications, such as a send API call, would use this network identifier as the source network address. The interface mechanism  will also make a program -listen on a particular network identifier assigned to the program -by replacing a generic listen socket API call with a listen API call for the specific network address. As such, the interface mechanism  would ensure that connections and packets would originate from the unique network identifier associated with the program -. The socket library  may provide for API calls to determine the network identifier of the local process sending and\/or receiving socket based communications. The interface mechanism  would intercept and modify these types of API calls to return the specified network identifier of the program -","The approach of having unique network identifiers assigned to a particular program -or user on the client  can also be referred to as virtual IP addresses. The IP addresses are virtual in that although the client  is assigned an IP address, each of the programs -and\/or users running on the client  have an IP address unique from and different than the IP address already and typically assigned to the client . Furthermore, these virtual IP addresses can be used dynamically, with a virtual IP address being assigned and then unassigned on an as needed basis for a user or program -","The technique of intercepting and modifying socket library  calls can be applied to many operating systems such as the various types of Linux and UNIX operating systems that use a similar socket communications based approach and have socket libraries for such communications. Furthermore, it is advantageous to use an interface mechanism  with a single TCP stack  as many of these operating systems already use a single TCP stack  for network communications. In this case, the interface mechanism  would work with these standard available operating systems and be less intrusive on the operating system of the client , or other computing device  hosting the present invention.","In certain embodiments, the interface mechanism  can intercept and modify socket library  API calls by using the technology of a Layered Service Provider (LSP), a Namespace Service Provider (NSP) or other technology that will enable the interface mechanism  to hook, overwrite, overload, extend or otherwise intercept and modify socket library  API calls. For example, an LSP is a software component that can be inserted into a Windows TCP\/IP handler like a link in a chain. The Winsock implementation from Microsoft provides a service provider interface between the API and the protocol stacks. The service provider interface would enable one to create their own service provider or extend an existing transport service provider by implementing a custom LSP.","Alternatively, instead of intercepting and modifying socket library  API calls, the interface mechanism  may comprise a custom or modified socket library  which provides the programming logic to use, provide or apply the unique network identifiers assigned to any of the programs -or users. In another alternative embodiment, the interface mechanism  may use multiple TCP stacks , \u2032 and\/or socket libraries , \u2032 for providing unique network identifiers to a portion of or all of the programs -or the users of the client . For example, in one embodiment, a TCP stack  and socket library is assigned to each program -or each user on the client . In yet another alternative embodiment, the interface mechanism  may comprise a network manipulation filter by which it filters packets of network traffic via the network communication interface . In this case, the interface mechanism  is intercepting and modifying network traffic sent to and from a program -beyond or below the layer of the socket library . As such, the API calls to the socket library  would not be intercepted and modified but the network traffic generated from such calls would be intercepted and modified.","Referring now to , system  depicts a client-server network system where the present invention of providing virtual IP addresses resides on the server . In an exemplary embodiment, the server  may be a multi-user server running remote display protocol servers such as Microsoft Terminal Server or Citrix Presentation Server, which allow users to connect to the server  to run applications from the server  and have output from the running of the application display on the clients -. In broad overview, any one or all of the clients -may connect to the server  over the network . The server  may have a network communication interface , an interface mechanism , a network identifier generator , network identifiers , and one or more programs -","The clients -may have a client agent -to provide additional application functionality to the client or allow the client to access services on another system such as the server . For example, a client agent -may be a remote display client, such as any of the remote display clients from Microsoft or Citrix that work in conjunction with Microsoft Terminal Server or Citrix Presentation Server that may be running on the server . In these cases, the client -would connect to the server  and establish a user session on the server . The server  may concurrently and\/or subsequently host multiple user sessions. For example, the server  may concurrently host a user session for a first user from client and a user session from a second user from client . In another embodiment, the user session of the first user from client may be hosted by the server  after the server terminates hosting of the user session of the second user from client ","Without the present invention, each of the user sessions hosted on the server  would use the IP address assigned to the server . So although different users are using the server , the network traffic generated from each user would share the same IP address of the server . With the present invention, each user session hosted on the server  via the programs -may be assigned a unique network identifier different than the servers  network identifier. If the user is running more than one program -, each user program -may be assigned a network identifier associated with the user. In a similar fashion as described with , the interface mechanism  on the server  would obtain, select and assign a unique network identifier from the plurality of network identifiers  and apply accordingly the network identifier to network communications of the programs -using the intercept and modify technique with regards to the socket library .","Referring now to , system  depicts an alternative embodiment of the present invention for providing virtual IP addresses where the interface mechanism  is deployed on a proxy server . In brief overview, one or more of the clients -may connect to the server I via a proxy server . The clients -may communicate via the proxy server  to the server \u2032 by a VPN protocol or some other tunneling or encapsulation protocol. Furthermore, any of the clients -may be a server, server farm, or other multi-user server. The server \u2032 may be on the same network  as the proxy server  or on a different network \u2032.","The proxy server  may comprise the plurality of network identifiers  to be assigned to any of the programs -residing on any of the clients -or the server \u2032. The interface mechanism  on the proxy server  would manage the assignment of network identifiers to network traffic passing through the proxy server  between the client -and the server \u2032 that is associated with a specific program -or user of the client -or the server \u2032. Since the clients -or the server \u2032 would not bind the network identifier to the specific program -or user prior to communicating network traffic, the proxy server  and the interface mechanism  would need to manage the context of network traffic from the user or program -to appropriately apply the unique network identifier.","In one aspect, the present invention relates to methods for assigning unique network identifiers to one or more programs -and\/or users of a computer , such as the client  or the server .  depicts a flow diagram of the steps of a method  for practicing the present invention as shown in . The method  comprises the steps of obtaining a plurality of network identifiers (step ), selecting a network identifier for a program (step ), associating a network identifier with network communication of the program (step ) and transmitting the network identifier with network communication of the program (step ). This method  can be repeated for each of the programs -, or optionally, at any of the steps of method , the step can be performed for multiple programs -, or users. In another embodiment, the method  can applied to each user of the client  or server .","At step , the computer , such as the client , the server , or the proxy server , obtains a plurality of network identifiers . One or more of the network identifiers  may be obtained from a server  separate from the computer obtaining the network identifiers. Optionally, one or more of the network identifiers  may be obtained from a DHCP server. In another embodiment, one or more of the network identifiers  may be obtained from a storage location  such as a file system or database locally on the computer  or remotely on a server  or client . In another embodiment, one or more the network identifiers  may be obtained from a network identifier generator . For step , a plurality of network identifiers  may be obtained by all or a portion of the above alternative embodiments of the step. Furthermore, one or more of the network identifiers  may be allocated specifically to a user or on a user basis. In one embodiment, the network identifier is obtained for a user when a user starts a user session on the client . As described in relation to , one ordinarily skilled in the art will appreciate the various permutations of step  in obtaining a plurality of network identifiers .","At step , the interface mechanism  selects a network identifier from the plurality of network identifiers  for a program invoked, executing or otherwise running on the computer , such as the client  or the server . The network identifier may be selected on booting up or starting of the computer . In another embodiment, the network identifier may be selected when the program -is invoked on the computer or in yet another embodiment, when the program -makes its first call to the socket library . In further embodiments, the network identifier  selected for a program -may be released or returned once the program -is terminated or otherwise complete socket communications.","At step , the interface mechanism  associates the selected network identifier with the network communications of the program -. In an exemplary embodiment, step  includes the intercepting and modifying technique discussed in relation to . In other embodiments, the step  may include using multiple TCP stacks  or a network manipulation filter. At step , the method  provides for the transmitting of the selected and associated, or assigned, network identifier of a program -with network communication of the program -. The interface mechanism  interfaces with the network communication interface  to transmit the assigned network identifier with the network communications of the program -","In another aspect, the techniques of the present invention for assigning unique network identifiers for programs -can also be applied to local inter-process communications using the loopback interface of a computer . The IP protocol specifies a loopback network and most IP implementation support a loopback interface. A loopback is a communications channel with only one endpoint so that any traffic that a computer program sends on the loopback network is addressed to the same computer. The most commonly used loopback IP address is 127.0.0.1 with a host name or domain name of localhost. Any of the loopback addresses in the 127.X.X.X range are considered loopback addresses by the TCP stack . On a UNIX like system, the loopback interface is commonly referred to as device lo or lo0. A loopback interface may have several uses. Some applications use the loopback address to establish an inter-process communication between programs running locally. In other cases, pinging the loopback address can be used to test if the TCP stack is working. Additionally, the loopback interface may be used to test software without needing to actually access the network .",{"@attributes":{"id":"p-0090","num":"0089"},"figref":"FIG. 5","b":["500","510","108","108","510","310","530","340","340","108","104","108","110","110","336","532"],"i":["a","n"]},"The client  may provide for or obtain a plurality of loopback addresses  for the interface mechanism  to use in assigning unique loopback addresses to one or more programs -or one or more users on the client . The loopback addresses  may comprise IP addresses, domain or host names or both IP addresses and host names, which would be intended for use as a loopback address for the loopback interface .","In an exemplary embodiment, the loopback addresses  comprises a unique list of IP addresses with each IP address having at least one unique host name associated with it. The loopback addresses  may be statically defined in one embodiment, or dynamically determined in another embodiment. In some cases, some of the loopback addresses  will be statically defined while other loopback addresses  will be dynamically obtained from the client , server , or another client  or server \u2032 on the network . Similar to the network identifiers in , the client  may obtain the loopback addresses  many different ways and may receive a portion of the loopback addresses  one way and other portions of the loopback addresses  other ways. In one embodiment, the loopback addresses  may be statically defined in a storage  location, such as a file, either remotely on the server  or alternatively, on the client  or another client \u2032 or server \u2032 on the network . For example, the local hosts file of the client  referenced by the operating system and TCP stack  in performing the loopback interface  may contain a list of multiple loopback addresses. In another embodiment, one or more of the loopback addresses  are allocated or dedicated to a specific user. In another embodiment, the client  obtains one or more of the loopback addresses  from a server  accessible by the client  on the network . In yet another embodiment, one or more of the loopback addresses may be obtained from a loopback address generator running on either the server  as shown, or optionally on the client  (not shown). The loopback address generator  may run any of the similar address generating schemes and business rule logic as with the network identifier generator . As with the network identifiers  of , one ordinarily skilled in the art will recognize the client  may provide or obtain a plurality of loopback addresses  in many different ways.","Furthermore, the client  may obtain, provide or be assigned a maximum number of unique loopback addresses  as the client  may be able to have, or host or otherwise supported by the loopback interface . For example, there may be one loopback address for each of the users of the client  up to the maximum numbers of specific users the client  can host, either concurrently or subsequently. In other embodiments, the client may obtain, provide or be assigned less than a maximum number of unique loopback addresses  as may be determined based on the number of users, number of programs or other factors impacting the need for assigning unique loopback addresses to programs -or users on the client . In one embodiment, the number of loopback addresses  is a configurable parameter.","The loopback interface  includes any and all of the network related hardware and software required for the client  to communicate with the loopback interface . For example, the loopback interface  includes any software and\/or hardware, such as operating system provided software and interfaces, that implements the loopback network of the client .","The interface mechanism  comprises a socket library  and a TCP stack , and as described in conjunction with  may have other embodiments. Also, as further described in conjunction with , the interface mechanism  in  performs a similar intercepting and binding technique for applying unique loopback addresses to programs -or users on the client . Any of the programs -communicating to the loopback interface  would make API calls to the socket library  as they would when performing socket based communications over the network . However, a local host address or loopback address would be specified as the source and\/or destination communication endpoint so that all communications stay local to the client  but exercise a portion of the TCP stack  as implemented by the loopback interface .","By way of example, program on client  may be a web client establishing local inter-process communications with a local web server . The programs and may establish the inter-process communications by make API calls using the default localhost address of 127.0.0.1. Instead of using the typical localhost address of 127.0.0.1 assigned to the client , the interface mechanism  would apply a unique loopback address, from the unique loopback addresses , for example 127.0.0.101, to the inter-process communications between program and program . In an exemplary example, the programs and continue to make API calls using the 127.0.0.1 address. However, the interface mechanism  substitutes the default address with a unique loopback address from the loopback addresses  in the 127.X.X.X range recognized as a loopback address by the TCP stack . In this case, the programs -are not aware of the substitution and continue to perform as if the programs -were using the 127.0.0.1 address.","This loopback address may be program -specific or may be assigned to or dedicated to the user running the program -. The web server of program may point the web client of program to the local URL address of 127.0.0.101 to access the web site provide by the web server locally to the client . While program and use the unique loopback address that may be different than the one assigned to the client , a second set of programs, and , may also establish local inter-process communication with a unique loopback address such as 127.0.0.102, different from the loopback address of the programs and , and different than the default loopback address of 127.0.0.1 of the client . Like programs and in the above example, the second set of programs and also make API calls using the 127.0.0.1 address but the interface mechanism  automatically substitutes a unique loopback address in the 127.X.X.X range.","By applying unique loopback addresses  to one or more of the programs -or users of the client , the present invention allows multiple loopback interface inter-process communications to occur concurrently or simultaneously. Without the present invention, the first set of programs and and the second set of programs and would have had to use the same local loopback address, such as the typical default of 127.0.0.1, causing one of the set of programs not to work properly. Additionally, the present invention as it applies to loopback addresses allows monitoring systems and applications to associate inter-process loopback communications with a particular program or user.","In another aspect, the present invention relates to methods for assigning unique loopback addresses to one or more programs -and\/or users of a computer , such as the client  or the server .  depicts a flow diagram of the steps of a method  for practicing the present invention as shown in . The method  comprises the steps of obtaining a plurality of loopback addresses (step ), selecting a loopback addresses from the plurality of loopback addresses for a program (step ), associating a loopback address with loopback interface communication of the program (step ) and transmitting the loopback address with loopback interface communication of the program (step ). This method  can be repeated for each of the programs -, or optionally, at any of the steps of method , the step can be performed for multiple programs -. In another embodiment, the method  can be applied to each user of the client ","At step , the client  obtains a plurality of loopback addresses . One or more of the loopback addresses  may be obtained from a server  separate from the client . In one embodiment, one or more of the loopback addresses  may be obtained from a storage location  such as a file system or database remotely on a server  or optionally, locally, on the client . In another embodiment, one or more the loopback addresses  may be obtained from a loopback address generator . For step , a plurality of loopback addresses  may be obtained by all or a portion of the above alternative embodiments of the step. Furthermore, one or more of the loopback addresses  may be allocated specifically to a user. As described in relation to , one ordinarily skilled in the art will appreciate the various permutations of step  in obtaining a plurality of loopback addresses .","At step , the interface mechanism  selects a loopback address from the plurality of loopback addresses  for a program invoked, executing or otherwise running on the computer , such as the client  or the server . The loopback address may be selected on booting up or starting of the client . In another embodiment, the loopback address may be selected when the program -is invoked on the client  or in yet another embodiment, when the program -makes its first call to the socket library . In another embodiment, the loopback address is selected on a user basis. In one embodiment, the loopback address is obtained and\/or selected for a user when a user starts a user session on the client . In further embodiments, the loopback address selected for a program -may be released or returned once the program -is terminated or otherwise complete socket communications.","At step , the interface mechanism  associates the selected loopback address with the loopback interface communications of the program -. In an exemplary embodiment, step  includes the intercepting and modifying technique discussed in relation to  and . In other embodiments, the step  may include using multiple TCP stacks  or a network manipulation filter. At step , the method  provides for the transmitting of the selected and associated, or assigned loopback address of a program -with loopback interface communication of the program -. The interface mechanism  interfaces with the loopback interface  to transmit the assigned loopback address with the loopback interface communications of the program -","In another aspect, the present inventions relates to providing a uniform addressing scheme for associating virtual host names with users as they roam in a network . As discussed above, the present invention allows unique network identifiers to be assigned dynamically to either programs or users upon start of the program or upon start of the user session. As such, a user can be dynamically \u201cbound\u201d to a virtual host name so that the user will always use the same host name, and in some cases the same IP address, regardless of the computer the user may be using to access the network. A virtual host name and\/or virtual IP address can be allocated to a specific user and follow the user as the user roams the network from one computer to another or from one sub-network to another.","Referring now to  is a block diagram depicting a client-server system for practicing an embodiment of the present invention. In brief overview, one or more clients -connect to a network  and access a server . The network  may comprise one or more sub-networks \u2032 or may be multiple networks , \u2032, etc. The server  comprises a name resolution service , a set of virtual host names  and IP addresses  and optionally, a DHCP server . The server  could be a server farm, server cluster, or other multiple server system, including servers , \u2032, \u2032, etc. Each of the client -and the server  may be able to invoke, run or otherwise execute programs -. In certain embodiments, a program -on a client may be used for establishing a user session on a multi-user server  or server farm \u2032, with the user session on the server  comprising a program running on the server . Each client -includes a network interface -for performing network interfacing of the present invention. In an exemplary embodiment, one or more of the network interfaces -includes the interface mechanism  as described with  and  for assigning unique network identifiers to programs -and\/or users.","The server  may have a DHCP server  for dynamically assigning IP addresses to clients -and\/or the interface mechanism  of the network interface -of a client -. For example, when a user session starts, a new IP address can be obtained from the DHCP server  and when the user session ends, the IP address can be released and returned back to the pool of IP addresses of the DHCP server . Optionally, the DHCP server  could be on another server \u2032 on the network . DHCP  can be configured to reserve IP addresses, and one or more IP addresses can be reserved for a particular name, such as a user or host name. In addition to providing a client -the information of the IP address, subnet mask and default gateway of the client -, the DHCP server  can provide other information such as the address of a name resolution service or any other information configured to be provided by DHCP . Furthermore, the DHCP server  is able to receive information about a particular name with a reservation, such as a user name or host name, when receiving a request for an IP address assignment from a client -. In this manner, the DHCP server  can return a reserved IP address associated with a name in the request. In certain embodiments, the clients -may obtain one or more IP addresses from the DHCP server . In other embodiments, the clients -may obtain one or more IP addresses separate from the DHCP server , for example, from a file on the client  or from a storage on the server . The client  of  can obtain IP addresses in any of the ways discussed in relation to .","The server  may comprise a name resolution service , such as a Domain Name Server (DNS). Alternatively, the name resolution service  may run on another server \u2032 on the network , or one or more servers \u2032, \u2032 on the network . A name resolution service such as a DNS server maintains centralized lists of domain names, or host names, to IP addresses and maps requests specified by domain name to the respective IP address. Host names can be registered with the name resolution services  or can be updated dynamically. In one embodiment, the name resolution service comprises WINS, the Microsoft Windows Internet Naming Service that translates a host name into an IP address using the NETBIOS API over TCP\/IP. Although the name resolution service , such as DNS, may dynamically update records as a clients -IP address changes, e.g. dynamically assigned by a DHCP server , the name resolution service  is only tracking the IP address of the client -","In operation of the client-server system , a program -is invoked on a client -. The client -, program -or the network interface -can dynamically request an IP address, for example, from the DHCP server  and can \u201cbind\u201d the IP address with the user name of the user invoking the program or the user currently logged into the client -. When the client -, program -or network interface -requests an IP address from the DHCP server , it can report the name of the user with the request. In an exemplary embodiment, the DHCP server  may be configured to reserve an IP address for the user reported to it via the IP address request. The DHCP server  can then return the reserved IP address to the client and therefore effectively binding the user to the reserved IP address.","In another embodiment, the client -may retrieve an IP address from the plurality of network identifiers  as described in conjunction with . The client -can then make system API calls to update the DHCP server  with the IP address obtained for the virtual host name. In another embodiment, the client may register the virtual host name with the name resolution service  and provide the IP address it obtained from making the system call. In yet another embodiment, the client -may obtain an IP address from a DHCP server  and register the virtual host name for the IP address obtained from the DHCP server  with the name resolution service .","The virtual host name for a user or a program -can be dynamically created and can be based on the user name associated with the user session or the user who invoked the program -. In another embodiment, the virtual host name can be statically defined in DHCP server  or the name resolution service . Optionally, it could be defined in another storage  location on the client -or the server .","For example, a user named user on the network domain of mycompany may have a virtual host name of user1.mycompany.com. This virtual host name for user can be registered in DHCP server  and\/or the name resolution service . In another embodiment, the virtual host name can be created when the user invokes a program -such as a user session. Then the client -, or the program -or the network interface -can dynamically update the name resolution service with the virtual host name for the user and provide the IP address assigned to the virtual host name, which also be reserved or allocated to the user.","Any of the client -, the programs -or the network interface -may include a virtual host name generator  that dynamically creates a virtual host name for a user based on a variety of attributes and factors. The virtual host name may simply be the user name. In other cases, the virtual host name can be the user name combined with the host name of the client -. In other cases, the virtual host name may be the user name combined with the domain name of the network . In other embodiments, the virtual host name may depend on the number of user sessions the user is concurrently running. In yet another embodiment, the virtual host name may depend on a logical name of the sub-network the client -is connected to. One ordinarily skilled in the art will appreciate that the virtual host name can be formed from a portion of any type of characters or descriptive text that may be combined, concatenated, stripped or otherwise formed to make a virtual host name that may uniquely identify the user or login entity to which it is assigned.","The dynamic nature of assigning unique IP addresses to users rather than the client enables the present invention to provide a uniform addressing scheme for roaming users. For example, a first user named user logs into the client , which may have already been assigned a default IP address, such as 192.168.1.100. Upon invoking a user session or starting another program -, the client may request an IP address from the DHCP server . In the request to the DHCP server , the virtual host name of user may be provided. In one embodiment, the DHCP server  has reserved an IP address of 192.168.1.200 for user and provides this reserved IP address in responding to the request. As a result, user on client has a virtual host name of user assigned to the reserved IP address of 192.168.1.200. This user virtual host name mapping to the IP address of 192.168.1.200 would be available in the name resolution service . As such, any lookups of the name resolution service  would show the virtual host name of user associated with the IP address of 192.168.1.200. Since the virtual host name is descriptive of the user, any lookups of the name resolution service would quickly identify users and their IP addresses and associate it with other information provided with the lookup.","The same user may terminate the user session on client and move into another part of the network  and log into client to invoke another user session. In a similar manner, an IP address for user's user session on client may be requested from the DHCP server . The request would include the virtual host name of user and the DHCP server  would provide the reserved IP address of 192.168.1.200. As such, user now has the same virtual host name and same IP address as the user session it had on client . The virtual host name and IP address effectively roamed with the user as the user moved from client -to client -in the network . In this manner, the IP address and virtual host name assigned process has been decoupled from the physical computer to which a user session is running, which would already have an assigned IP address and host name to connect to the network .","If the same user has multiple sessions on different clients -, separate IP addresses and virtual host names are required for each session. The virtual host naming scheme would need to account for these cases. For example, the client -, the program -, the network interface -or optionally, a virtual host name generator  may create a virtual host name for each user session that identifies both the session and the user. For example, the first session of user may have a virtual host name of user session and the second session of user may have a virtual host name of user .session. A unique IP address may be assigned to each virtual host name from the DHCP server  or by the interface mechanism  of the network interface -. While user has multiple user sessions with a uniform addressing scheme, other users can also have multiple users sessions each identified by a virtual host name following the uniform addressing scheme.","Uniform network addressing can be particularly useful in the cases of a user connecting through a proxy server as depicted in the illustrative embodiment of . A proxy server , using VPN for example, can provide virtual IP addresses not limited by the topology of the network. In contrast, a DHCP server  is limited to providing IP addresses that work with the network topology. For example, the virtual IP addresses provided by a DHCP server may all be in the same range, e.g., 192.X.X.X, of IP addresses assigned to clients -on the network . In the case of a user connecting to a network  and being assigned a virtual IP address provided by a DHCP server , the user will have a unique IP address in the same range as IP addresses assigned to clients -on the network. Although the user still obtains a unique IP address, the IP address assigned to the user will be dependent on the network  the client -is on. If a user connects to the network via a proxy server  as in , the user can be provided a unique IP address that is not tied to the network topology of the network  of the proxy server, or the network  the user may access through the proxy server . By using the proxy server, a virtual IP address not associated with a network topology can be assigned to a user regardless of the client -the user connects to the network  with.","This uniform addressing scheme with virtual host names can be applied to non multi-user computing environments such as a desktop as well as a multi-user system such as server or server farm hosting multiple user sessions concurrently with Microsoft Terminal Server or Citrix Meta Presentation Server. When a user logs into a desktop computer, an IP address for the user can be obtained and associated with a virtual host name for the user. For a multi-user system, the present invention allows the system to provide each user and user session, concurrent or otherwise, with an execution environment similar to a desktop computer environment where each user has a separate and unique IP address.","Additionally, the IP address assignment process can be decoupled from the virtual host name registration process. For example, the IP address can be obtained via a DHCP server  without reserving an IP address for a user or by any other means, such as the interface mechanism  of the network interface -. Although the IP address has not been reserved or otherwise allocated to the user, the virtual host name may be registered with the name resolution service  based on the user name. This allows the virtual host name for a user to roam with the user across networks that may have different subnet addresses. The virtual host name remains the same for the user through the network  accessible name resolution service  while the IP address assigned to the virtual host name and therefore the user changes to account for the different IP address subnet addressing schemes. In another aspect, the uniform addressing scheme with virtual host names can also be used to provide location services of users on the network since the virtual host name will follow the user as the user roams the network. A lookup service can be provided to locate the user by the virtual host name and\/or IP address assigned to the user.","In another aspect, the present invention relates to methods for providing a uniform addressing scheme for a user independent from the client -from which the user connects to the network .  depicts a flow diagram of the steps of a method  for practicing the present invention as shown in . The method  comprises the steps of obtaining a plurality of virtual host names (step ), obtaining a plurality of internet protocol addresses (step ), assigning a virtual host name to a user (step ), associating a virtual host name with an IP address (step ) and providing a virtual host name as the user roams the network (step ). This method  can be repeated for each user or optionally, at any of the steps of method , the step can be performed for multiple users.","At step , a plurality of virtual host names  is obtained to be assigned to one or more users on the network . One or more of these virtual host names  may be registered in a DHCP server  or a name resolution service . In other embodiments, one or more of these virtual host names are defined in a storage location, on a client -or a server , such a file or a database. In another embodiment, one or more of the virtual host names  are dynamically created by a virtual host name generator . A virtual host name may be obtained one at a time on an as needed basis per user or may be obtained in batches in a frequency as desired or needed to provide a virtual host name to each user or user session. At step , the method  provides for also obtaining a plurality of IP addresses. The IP addresses may be obtained via a DHCP server  or by the interface mechanism  of the network interface -or by any other means discussed in relation to  and . The method  will assign IP addresses to virtual host names and associate the virtual host name with a user or a user session.","At step , the method  assigns a virtual host name or virtual host names to each user accessing the network via one or more of the clients -. A first user accesses the network  via client and establishes a user session on server . The method assigns the user a virtual host name from the plurality of virtual host names  for the users session on the server . The virtual host name assigned may be dedicated to the user and may include the name of the user. The same user may also access the network  and the server  concurrently from a second client while the user is accessing the network  and the server  from the client . A virtual host name will be assigned to the user for this second session from client . This second virtual host name may be similar but will need to be different from the virtual host name assigned for the first user session via client . For example, the virtual host name for these two sessions of the user may comprise the users login name with a suffix identifying the session, such as a session number.","A second user may access the network  via client and establish a user session on server . Method  allows this second user or any other subsequent or concurrent user on the network  or the server  to be assigned a virtual host name to uniquely identify the user and\/or the user session. The virtual host name will distinguish this user and\/or user session from any other user or user session that may be concurrently executing or had previously executed. Step  assigns the second user a virtual host name different from the virtual host name of the first user, such as a virtual host name based from the users unique network user id. Step  may also the second user a virtual host name uniquely identifying the user and the user's session. In another embodiment, the virtual host name may be descriptive of the user, the client -or the server  the user is accessing or the sub network of the network  from which the user is communicating.","At step , the method  associates the virtual host name of each user or user session with an IP address assigned to each user or each user session. Not only can the virtual host names be dynamically assigned to each user or user session as discussed above but also each IP address for each user or user session can also be dynamically assigned as discussed in regards to . Each virtual host name assigned to a user or a user session will need to be associated with an IP address in order to resolve the virtual host name into an IP address for network communications such as socket based communications as described in . The virtual host name can be resolved to an IP address via a name resolution service  on the network . After obtaining each of the IP address and virtual host name for a particular user or user session, the IP address to virtual host name mapping may need to be updated in the records of the DHCP server  and\/or the name resolution service . In other cases, the virtual host name and\/or IP address may have been previously registered with the DHCP server  and\/or name resolution service.","At step , the virtual host name addressing scheme of steps , ,  and  are performed as a user roams from one client -to another client -in a network , or a user starts up multiple users session on a client -or a server , such as multi-user server \u2032. Each time a user starts a program -, such as a user session, on any client -or server , the user may obtain an IP address as described in conjunction with  and corresponding methods of , and a virtual host name as described in conjunction with  and the steps of method  described above. As such, the virtual host name roaming feature of the present invention allows efficient use of the virtual host name and\/or virtual IP address to easily identify users, which can be used as a means for providing security or monitoring user activity or to provide location services to find users, and to satisfy application and systems that use the host name or IP address to identify a user.","Although the illustrative systems and methods of the present invention are generally discussed in terms of a TCP\/IP network, the systems and methods can also be applied to other types of networks, such as IPX or DECNET. One ordinarily skilled in the art will appreciate the application of the systems and methods of the present invention to networks other than a TCP\/IP based network. As such, the present invention can provide unique network identifiers for programs, users or user sessions running on any type of network applying the techniques and mechanisms described herein. Additionally, the present invention can also provide unique loopback identifiers for inter-process communications using any similar loopback type interfaces supported by the particular network. Furthermore, the present invention can provide for a uniform network addressing schemes for users on these other network types.","Many alterations and modifications may be made by those having ordinary skill in the art without departing from the spirit and scope of the invention. Therefore, it must be expressly understood that the illustrated embodiments have been shown only for the purposes of example and should not be taken as limiting the invention, which is defined by the following claims. These claims are to be read as including what they set forth literally and also those equivalent elements which are insubstantially different, even though not identical in other respects to what is shown and described in the above illustrations."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The foregoing and other objects, aspects, features, and advantages of the invention will become more apparent and may be better understood by referring to the following description taken in conjunction with the accompanying drawings, in which:",{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIGS. 1A and 1B"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 3A"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 3B"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 3C"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":["FIG. 4","FIGS. 3A-3C"]},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":["FIG. 6","FIG. 5"]},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0031","num":"0030"},"figref":["FIG. 8","FIG. 7"]}]},"DETDESC":[{},{}]}
