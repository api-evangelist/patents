---
title: Framework to facilitate Java testing in a security constrained environment
abstract: A method for testing an implementation of a specification is provided. The method includes providing a security manager capable of being configured to test compliance of an implementation of a specification, and installing the security manager. The method further includes constructing a security policy corresponding to a desired security environment that a test requires. The method also includes executing the test with the security manager using the security policy.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07389495&OS=07389495&RS=07389495
owner: Sun Microsystems, Inc.
number: 07389495
owner_city: Santa Clara
owner_country: US
publication_date: 20030530
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS"],"p":["1. Field of the Invention","The present invention relates to data transmission, and more particularly, to the testing of a JAVA\u2122(Java) technology implementation to determine compliance with the Java specification.","2. Description of the Related Art","Currently, Java environments can be categorized into various Java technologies. A Java technology is defined as a Java specification and its reference implementation. Examples of Java technologies are Java 2 Standard Edition (J2SE), Java 2 Enterprise Edition (J2EE), Java 2 Micro Edition (J2ME), and Mobile Information Device Profile (MIDP). As with most other types of Java software, a new Java technology should be tested to assure consistency across multiple platforms. This testing is generally performed using compatibility testing.","Compatibility testing refers to the methods used to test an implementation of a Java technology specification in order to assure consistency across multiple hardware platforms, operating systems, and other implementations of the same Java technology specification. When this assurance is accomplished by means of a formal process, application developers can then be confident that an application will run in a consistent manner across all tested implementations of the same Java technology specification. This consistent specification-based behavior is a primary function of compatibility testing.","Compatibility testing differs from traditional product testing in a number of ways. Unlike product testing, compatibility testing is not primarily concerned with robustness, performance, or ease of use. The primary purpose of Java compatibility testing is to determine whether an implementation of a technology is compliant with the specification of that technology.","Compatibility test development for a given feature relies on a complete specification and reference implementation for that feature. Compatibility testing is a means of ensuring correctness, completeness, and consistency across all implementations of a technology specification that are developed. The primary goal of compatibility testing is to provide the assurance that an application will run in a consistent manner across all tested implementations of a technology.","To determine if the implementation of a particular Java technology is compliant with the specification for the particular Java technology, technology compatibility kits (TCK) may be used. A TCK is a suite of tests, tools, and documentation that allows an implementor of a Java technology specification to determine if the implementation is compliant with the specification.","A TCK typically includes a Test Harness, defined as the applications and tools that are used for test execution and test suite management, and a TCK Test Suite, which is the composite of the actual test cases in a TCK that are executed to test an implementation. A TCK can also include documentation that includes the specific TCK usage procedures, and the compatibility testing requirements that apply to the related technology release (usually in the form of a TCK user's guide). Also, a description of the TCK appeals process can be included, as well as an audit process, which is used to better ensure the integrity of a consistent self-testing compatibility program.","As mentioned above, a TCK usually includes a TCK test suite, which is a set of tests designed to verify that an implementation of a Java technology complies with the appropriate specification. Each test in a TCK test suite is composed of one or more test cases that are designated by a test description. A test case is the source code and accompanying information designed to exercise one aspect of a specified assertion. Accompanying information may include test documentation, auxiliary data files and other resources used by the source code. Some tests in the TCK test whether proper security checking is done before an operation is conducted according to the Java specification. Those tests insure that an operation can be successfully completed given enough permissions and some operations will fail by throwing security exceptions if not enough permissions are granted.","Unfortunately, the prior art handles security constraints in inconsistent ways in TCK tests. In a first prior art approach, a test lets the implementation throw security exceptions without catching them. This typically leads to test failures and generally forces the security constraints to be removed in order to pass the tests.","In second prior art approach, a test tries to install a security manager that grants the required permissions. If that fails, the test simply returns as if it is passed. Unfortunately, this approach does not take into account the possibility that the existing security manager may actually grant the required permissions, even if the desired security manager cannot be installed. Removal of a test-installed security manager may be easily forgotten thereby leading to a changed executing environment for other remaining tests. Also, different tests may install different security managers. If multiple tests are executed currently, one test may run with the security manager installed by another test. Code redundancy and duplication can arise if each test tries to install and remove a security manager and execute the security managers in a synchronized manner.","In a third prior art approach, a test catches the security exceptions as thrown in the first prior art example and checks whether the installed security manager actually grants the required permissions. If it does not, then the security exception is expected. Otherwise the security exception should not be thrown and the test returns as failed. This approach does not take into account that a security manager that grants the required permissions may be installed by the test as in the second prior art approach.","In view of the foregoing, there is a need for a more efficient and intelligent method of testing whether a Java technology implementation is compliant with the Java technology specification.","A method for utilizing a testing library to assess Java specification compliance is provided. The method includes using multiple tests for a variety of circumstances to provide an accurate assessment of Java specification compliance without the problems of the prior art.","In one embodiment, a method for testing an implementation of a programming language is provided. The method includes providing a security manager capable of being configured to test compliance of an implementation of a programming language specification, and installing the security manager. The method further includes constructing a security policy corresponding to a desired security environment that a test requires. The method also includes executing the test with the security manager using the security policy.","In another embodiment, a method for testing an implementation of a specification is provided. The method includes providing a class capable of being configured to vary an environment of an implementation of a specification, and installing the class. The method further includes configuring the class corresponding to the environment that a test requires. The method also includes executing the test with the class, and restoring an original environment after execution of the test.","In yet another embodiment, a method for testing an implementation of a programming language is provided. The method includes providing a test to a framework where the test being capable of determining whether an implementation complies with a programming language specification. The method further includes running the test positively and negatively by changing a test environment without modifying the test.","The advantages of the present invention are numerous. Most notably by using a library of tests including a positive test and a negative test as described herein to assess a Java technology implementation's compliance with the Java specification, tests may be run in an accurate and dependable manner without the problems of the prior art. Therefore, by using the library of tests described herein, the Java application being tested can be certified as being Java compliant in an intelligent, coherent, and accurate fashion. As a result, Java technology implementation test results may be more reliable and therefore can enable greater dependability as to Java compliance.","Other aspects and advantages of the invention will become apparent from the following detailed description, taken in conjunction with the accompanying drawings, illustrating by way of example the principles of the invention.","An invention is disclosed for using a library of tests for determining an implementation's compliance with the Java specification. In the following description, numerous specific details are set forth in order to provide a thorough understanding of the present invention. It will be apparent, however, to one skilled in the art that the present invention may be practiced without some or all of these specific details. In other instances, well known process steps have not been described in detail in order not to unnecessarily obscure the present invention.","In general terms, the library of tests may be parts of a test suite such as, in one embodiment, a framework called a security test runner from Sun Microsystems in Santa Clara, Calif. In one exemplary embodiment, a framework may be a library that provides utilities to be used by other programs. In one embodiment, a security manager consults a security policy for both positive and negative tests. The security manager is a class that has methods to cope with problems where protection of the environment of the host may be compromised during execution of instantiated classes in runtime. In one embodiment, the security manager can consult the security policy and may utilize API provided by the default security manager. In this way, the new security manager can handle different ProtectionDomains in different ways according to the security policy. Additionally, the methodology described herein can also handle privileged code block.","The framework includes a security manager that is needed to provide a more precise testing. The framework also uses existing security managers in cases where a specialized security manager cannot be installed. The framework further synchronizes security tests so that only one test is using the framework at any one time. In one embodiment, the security test runner is utilized which overcomes challenges in writing security related tests by providing a utility to install a security manager and remove it after test runs. If the security manager cannot be installed, an existing security manager is used if it satisfies the requirements of a particular test as described herein. The security test runner can also provide synchronization of installed security managers and testing runs.","With respect to the relationship between the security manager and the Java API, the application makes a request of the Java API to perform an operation. The Java API asks the security manager if such an operation is allowable. If the security manager does not want to permit the operation, it throws an exception. Otherwise, the Java API completes the operation and returns normally.","In one example, two types of test may be used such a positive test and a negative test. A positive test as used herein tests the normal behavior of the API under the condition that all the required permissions are granted. A negative test as used herein expects security exceptions to be thrown under the condition that at least one of the required permissions is not granted.","In one embodiment, a security manager is installed that consults a security policy. Then a new security policy may be used to replace any one that may have been installed. For a positive test, the new security policy grants only required permissions to tests code source and grants the default permissions to other code sources.","Default permissions here means permissions granted by the original Policy that has been replaced. For a negative test, this policy grants permissions other than the required permissions to the tests code source, and default permissions to other code sources. If the new security manager cannot be installed due to security reasons, the current security manager is checked to see if it fit the needs and requirements of the test and runs the test under the current (or pre-existing) security manager if the requirements are met.","Once invoked, the security runner may install a security manager that grants\/denies certain security permissions as required by the test(s) utilized. If the installation is successful, the test will be normally executed. If the installation of the security manager fails, it indicates that there is already a security manager installed. In this case, the framework will check whether the current security manager can satisfy the test's security needs. This may be done, in one embodiment, by using the checkPermission or JDK 1.1 style check methods of the current security manager. If the security manager satisfies the needs, the test can be normally executed with it. Otherwise the test will not be able to be normally executed.","The security test runner can be accessed via public methods that are all synchronized, which means that no more than one test can use the framework at the same time. This prevents the problems associated with race conditions which can occur when more than one test is being run at the same time.","Using this type of framework, tests do not need to deal with the security constraints itself. All it needs to do is to invoke the framework with necessary parameters. This ensures a consistent handling of security constraints and eliminates a lot of code duplication and redundancy. It should be appreciated that the framework may be easily adapted to any Java testing involved with the executing of one or more tests, possibly in a concurrent fashion, in a security constrained environment.",{"@attributes":{"id":"p-0041","num":"0040"},"figref":"FIG. 1","b":["106","104","108"]},"In one embodiment, a positive test and a negative test are utilized in the security test runner framework to determine if a certain operation is allowable. It should be appreciated that any suitable type of test may be utilized as the positive test and the negative test that are consistent with the methodology described herein. In one embodiment, the API for the positive test implements an interface such as, for example, SecurityTestRunner.RT( ). The SecurityTestRunner.RT( ) puts the test code in the method such as, for example, public Status run( ). An exemplary Java API for the positive test is shown in Table 1:",{"@attributes":{"id":"p-0043","num":"0042"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":[{"entry":"TABLE 1"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2003public synchronized static Status runTestwithPermissions(RT method,"},{"entry":"\u2003\u2003\u2003\u2003\u2003Permissions perms,"},{"entry":"\u2003\u2003\u2003\u2003\u2003PrintWriter ref,"},{"entry":"\u2003\u2003\u2003\u2003\u2003Boolean useOldSModel)"},{"entry":"Parameters:"},{"entry":"\u2003method - test code (should implement RT.run( ))."},{"entry":"\u2003perms - actual permissions that are required to run the test."},{"entry":"\u2003ref - log of diagnostic messages."},{"entry":"\u2003useOldSModel - true if tested API invokes security manager's"},{"entry":"\u2003JDK 1.1 style"},{"entry":"method, e.g. checkConnect( ), checkListen( )."},{"entry":"Returns:"},{"entry":"\u2003result of the execution of the specified test code."},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"To run a positive test or a negative test, the security manager consults with a security policy. In one embodiment, for a positive test, the security policy grants only required permissions to tests and grants the default permissions to other code source. In one embodiment, for a negative test, the security policy grants permissions other than the required permissions to the test, and default permissions to other code sources.","In one embodiment, the API for the negative test implements the interface SecurityTestRunner.RT( ). The SecurityTestRunner.RT( ) puts the test code in the method public Status run( ). The negative test assumes that related permissions are not granted and returned \u201cpassed\u201d status on catching Security Exception. The negative test also constructs a permissions object that contains permissions not to be granted. The negative test calls runTestWithoutPermissions( ) method in SecurityTestRunner. An exemplary Java API for negative test is shown in Table 2:",{"@attributes":{"id":"p-0046","num":"0045"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":[{"entry":[{},"TABLE 2"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2003public synchronized static Status"]},{"entry":[{},"\u2003runTestwithWithoutPermissions(SecurityTestRunner.RT method,"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003java.security.Permissions perms,"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003java.io.PrintWriter ref,"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003Boolean useOldSModel)"]},{"entry":[{},"Parameters:"]},{"entry":[{},"\u2003method - test code (should implement RT.run( ))."]},{"entry":[{},"\u2003perms - actual permissions that are required to run the test."]},{"entry":[{},"\u2003ref -log of diagnostic messages."]},{"entry":[{},"\u2003useOldSModel - true if tested API invokes security manager's"]},{"entry":[{},"\u2003JDK 1.1 style"]},{"entry":[{},"method, e.g. checkConnect( ), checkListen( )."]},{"entry":[{},"Returns:"]},{"entry":[{},"\u2003result of the execution of the specified test code."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"Another API may be added for the convenience of test writers. This API takes a test implementing RT and runs the test twice, first positively and then negatively. This API may be added because in most cases, the test itself is essentially the same for both positive and negative tests. Therefore, instead of writing two tests, only one test need be written. Such an exemplary API is shown below in Table 3:",{"@attributes":{"id":"p-0048","num":"0047"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"thead":{"row":[{"entry":[{},"TABLE 3"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"public synchronized static Status runTest(RT method,"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003Permissions perms,"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003PrintWriter ref,"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003Boolean useOldSModel)"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{}},{"@attributes":{"id":"p-0049","num":"0048"},"figref":"FIG. 2","b":"200"},{"@attributes":{"id":"p-0050","num":"0049"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":[{"entry":[{},"TABLE 4"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"SecurityTestRunner.RT method = new SecurityTestRunner.RT( ) {"]},{"entry":[{},"\u2003\u2003public Status run( ) {"]},{"entry":[{},"\u2003\u2003\u2003\u2003. . ."]},{"entry":[{},"\u2003\u2003\u2003\u2003\/\/ put here your test code"]},{"entry":[{},"\u2003\u2003\u2003\u2003. . ."]},{"entry":[{},"\u2003\u2003}"]},{"entry":[{},"};"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{}},"In one embodiment, a test such as, for example, a positive test , a negative test , a negative test requiring certain permissions , and a test designed to run both positively\/negatively  may utilize a security test runner framework  to determine if an implementation of a Java API is Java specification compliant. In one embodiment, the framework  may be a security test runner that can run any suitable numbers and types of tests. In one embodiment, the security test runner framework  includes the security manager capable of being configured using a particular security policy to run the positive test , the negative test , the negative test requiring certain permissions , and the test designed to run both positively\/negatively .","In one embodiment, the positive test  invokes a positive test API  within the security test runner framework . The positive test API  in turn installs a security manager and the positive API  also constructs and installs a security policy object corresponding to that test. For a positive test, the new security policy grants only required permissions to tests code source and grants the default permissions to other code sources. The installed security manager may then consults the security policy. A complete operation flow of the positive test is described in further detail in reference to .","In one exemplary embodiment, the negative test  invokes a negative test API  within the security test runner framework . The negative test API  in turn installs a security manager and the negative API  also constructs and installs a security policy object corresponding to that test. For a negative test, this policy grants permissions other than the required permissions to the tests code source and default permissions to other code sources. The installed security manager may then consult the security policy. A complete operation flow of the negative test is described in further detail in reference to .","In another exemplary embodiment, the negative test requiring certain permissions  invokes a negative test requiring permission API  within the security test runner framework . The negative test requiring certain permissions API  in turn installs a security manager and the negative test requiring certain permissions API  also constructs and installs the same security policy object as a negative test does. The installed security manager may then consult the security policy. A complete operation flow of the negative test requiring certain permissions is described in further detail in reference to .","In yet another exemplary embodiment, the test designed to run both positively and negatively  invokes a positive and negative test API  within the security test runner framework . The positive and negative test API  invokes the positive test API  and the negative test API  one by one.","In one embodiment, the security test runner framework  is generated using the Java language and executed on a Java virtual machine. A Java virtual machine is used as an interpreter to provide portability to Java applications. In general, developers design Java applications as hardware independent software modules, which are executed Java virtual machines. The Java virtual machine layer is developed to operate in conjunction with the native operating system of the particular hardware on which the mobile multimedia framework system is to run. In this manner, Java applications can be ported from one hardware device to another without requiring updating of the application code.","Unlike most programming languages, in which a program is compiled into machine-dependent, executable program code, Java classes are compiled into machine independent byte-code class files which are executed by a machine-dependent virtual machine. The virtual machine provides a level of abstraction between the machine independence of the byte-code classes and the machine-dependent instruction set of the underlying computer hardware. A class loader is responsible for loading the byte-code class files as needed, and an interpreter or just-in-time compiler provides for the transformation of byte-codes into machine code.","More specifically, Java is a programming language designed to generate applications that can run on all hardware platforms, small, medium and large, without modification. Developed by Sun, Java has been promoted and geared heavily for the Web, both for public Web sites and intranets. Generally, Java programs can be called from within HTML documents or launched standalone. When a Java program runs from a Web page, it is called a \u201cJava applet,\u201d and when run on a Web server, the application is called a \u201cservlet.\u201d","Java is an interpreted language. The source code of a Java program is compiled into an intermediate language called \u201cbytecode\u201d. The bytecode is then converted (interpreted) into machine code at runtime. Upon finding a Java applet, the Web browser invokes a Java interpreter (Java Virtual Machine), which translates the bytecode into machine code and runs it. Thus, Java programs are not dependent on any specific hardware and will run in any computer with the Java Virtual Machine software. On the server side, Java programs can also be compiled into machine language for faster performance. However a compiled Java program loses hardware independence as a result. Although the present invention is described based on the Java programming language, other programming languages may be used to implement the embodiments of the present invention, such as other object oriented programming languages.","In an exemplary embodiment, the positive test  for a security constrained method may be what is shown in Table 5:",{"@attributes":{"id":"p-0061","num":"0060"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":[{"entry":[{},"TABLE 5"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Permissions permission = new Permissions ( );"]},{"entry":[{},"permissions.add( . . . \/\/ permission requested by an API tested);"]},{"entry":[{},"SecurityTestRunner.RT method = new SecurityTestRunner.RT( ) {"]},{"entry":[{},"\u2003\u2003public status run ( ) {"]},{"entry":[{},"\u2003\u2003\u2003\u2003. . ."]},{"entry":[{},"\u2003\u2003\u2003\u2003\/\/ your test code"]},{"entry":[{},"\u2003\u2003\u2003\u2003. . ."]},{"entry":[{},"\u2003\u2003}"]},{"entry":[{},"};"]},{"entry":[{},"return SecurityTestRunner.runTestWithPermissions(method,"]},{"entry":[{},"permissions, ref, true);"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{}},"In an exemplary embodiment, a negative test for a security constrained method is shown in Table 6:",{"@attributes":{"id":"p-0063","num":"0062"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":[{"entry":[{},"TABLE 6"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Permissions permissions = new Permissions ( );"]},{"entry":[{},"permissions add( . . . \/\/ permission requested by an API tested);"]},{"entry":[{},"SecurityTestRunner.RT method = new SecurityTestRunner.RT( ) {"]},{"entry":[{},"\u2003\u2003public status run( ) {"]},{"entry":[{},"\u2003\u2003\u2003\u2003try {"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003. . ."]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\/\/ call you security constrained API here"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003. . ."]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003return Status.failed (\u201cSecurityException expected\u201d);"]},{"entry":[{},"\u2003\u2003\u2003\u2003} catch (SecurityException e) {"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003return Status.passed (\u201cOKAY\u201d);"]},{"entry":[{},"\u2003\u2003\u2003\u2003}"]},{"entry":[{},"\u2003\u2003}"]},{"entry":[{},"};"]},{"entry":[{},"return SecurityTestRunner.runTestWithoutPermissions (method,"]},{"entry":[{},"permissions, ref, true);"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"This makes an attempt to execute the outlined testing code in the constrained security environment where the specified permissions are denied. In one embodiment, the boolean flag (useOldModel) may be set depending on which security model the method behavior is based.",{"@attributes":{"id":"p-0065","num":"0064"},"figref":["FIG. 3","FIG. 3"],"b":["250","250"]},"In one embodiment, the method begins with operation  which runs a positive test. Operation  is discussed in further detail in reference to . After operation , the method moves to operation  which runs a negative test. Operation  is described in further detail in reference to . After operation , the method moves to operation  which returns combined status of positive test and negative test, i.e., the worst status of the two. In this operation, the method examines the results of the positive test and the negative test and determines if either test failed.",{"@attributes":{"id":"p-0067","num":"0066"},"figref":"FIG. 4","b":["300","300","302"]},"After operation , the method moves to operation  which determines if the installation of the security manager was successful. If operation  determines that the installation was successful, the method moves to operation  where a security policy that grants only required permissions to the test is installed. After operation , the method moves to  which runs the test without catching security exception. In one embodiment, the security manager that has been installed runs the tests with the security policy that was installed in operation . The test does not catch security exception. Any security exception thrown will be caught by a test harness. The test harness will fail the whole test as the security exception is unexpected to it.","After operation , the method advances to operation  which returns status accordingly. Then the method proceeds to operation  where the original security manager and policy, if any is restored.","If operation  determines that the security manager was not installed, the method moves to operation  where existing security manager is checked for required permissions. After operation , the method advances to operation  which determines if the existing security manager has enough permissions. If operation  determines that there are enough permissions, the method moves to operation  which runs a test under the existing security manager and catches a security exception. After operation , the method proceeds to operation  which determines if a security exception is to be thrown. If operation  determines that the security exception has been thrown from the test, the method moves to operation  which returns status failed. If operation  determines that the security exception has not been thrown, the method advances to operation  where status is returned accordingly. If operation  determines that there are not enough permissions granted by the existing security manager, the method moves to operation  where status passed is returned.",{"@attributes":{"id":"p-0071","num":"0070"},"figref":["FIG. 5","FIG. 7","FIG. 6"],"b":["380","380","390","400","410"]},{"@attributes":{"id":"p-0072","num":"0071"},"figref":"FIG. 6","b":["410","412","412","414","416","420","421","421","422","424"]},"If the security exception not thrown was determined by operation , the method advances to operation  which determines if the test, as opposed to the framework, is expected to catch the security exception. If the security exception is expected to be caught as determined by operation , the method moves to operation  which returns status accordingly. If the security exception is not expected to be caught as determined by operation , the method advances to operation  which returns status failed. If operation  determines that any permission is not to be denied, the method advances to operation  which returns passed status. It is noted that the option of determining that the security exception is not expected to be caught by the test is available only internally to other APIs in the framework as illustrated by \u201cNo*\u201d in .",{"@attributes":{"id":"p-0074","num":"0073"},"figref":"FIG. 7","b":["400","440","440","442","442","444","446","448","450","452","442","456","452","456"]},"If the test was not passed as determined by operation , the method moves to operation  which returns status. After operation , the method moves to operation . If operation  determines that the test is not expected to catch the security exception, the method advances to operation  which returns failed status. After operation , the method moves to operation .","If operation  determines that a security exception is thrown, the method advances to operation  which determines if the test is expected to catch the security exception. If operation.  determines that the test is expected to catch the security exception, the method moves to operation . If operation  determines that the test is not expected to catch the security exception, the method proceeds to operation  which determines if more permissions are to be denied. If more permissions are to be denied as determined by operation , the method returns to operation . If operation  determines that more permissions are not to be denied, the method advances to operation  which returns passed status. After operation , the method moves to operation . It is noted that the option of determining that the test is not expected to catch the security exception is available only internally to other APIs in the framework as illustrated by \u201cNo*\u201d in .",{"@attributes":{"id":"p-0077","num":"0076"},"figref":["FIG. 8","FIG. 7"],"b":["500","500","501","400","502","502","504","504","506","510","512","512","516","516","518","516","520"]},"If operation  determines that any permissions are not denied, the method moves to operation  returns a passed status due to the inability to run the test. If operation  determines that permissions are not granted, the test is unable to be run and the method advances to operation  wherein a passed status is returned.","It should be appreciated that the framework and the different tests described herein may be embodied or written in any suitable type of code that can perform the operations as described herein.","It should be appreciated that the exemplary code described in the Tables herein use object oriented programming. An object is a generic term that is used in the object-oriented programming environment to refer to a module that contains related code and variables. A software application can be written using an object-oriented programming language whereby the program's functionality is implemented using objects. Examples of object-oriented programming languages include C++ as well as Java.","Object-oriented programming is a method of creating computer programs by combining certain fundamental building blocks, and creating relationships among and between the building blocks. The building blocks in object-oriented programming systems are called \u201cobjects.\u201d An object is a programming unit that groups together a data structure (instance variables) and the operations (methods) that can use or affect that data. Thus, an object consists of data and one or more operations or procedures that can be performed on that data. The joining of data and operations into a unitary building block is called \u201cencapsulation.\u201d","An object can be instructed to perform one of its methods when it receives a \u201cmessage.\u201d A message is a command or instruction to the object to execute a certain method. It consists of a method selection (name) and a plurality of arguments that are sent to an object. A message tells the receiving object what operations to perform.","One advantage of object-oriented programming is the way in which methods are invoked. When a message is sent to an object, it is not necessary for the message to instruct the object how to perform a certain method. It is only necessary to request that the object execute the method. This greatly simplifies program development.","Object-oriented programming languages are predominantly based on a \u201cclass\u201d scheme. A class defines a type of object that typically includes both instance variables and methods for the class. An object class is used to create a particular instance of an object. An instance of an object class includes the variables and methods defined for the class. Multiple instances of the same class can be created from an object class. Each instance that is created from the object class is said to be of the same type or class.","A hierarchy of classes can be defined such that an object class definition has one or more subclasses. A subclass inherits its parent's (and grandparent's etc.) definition. Each subclass in the hierarchy may add to or modify the behavior specified by its parent class.","To illustrate, an employee object class can include \u201cname\u201d and \u201csalary\u201d instance variables and a \u201cset_salary\u201d method. Instances of the employee object class can be created, or instantiated for each employee in an organization. Each object instance is said to be of type \u201cemployee.\u201d Each employee object instance includes the \u201cname\u201d and \u201csalary\u201d instance variables and the \u201cset_salary\u201d method. The values associated with the \u201cname\u201d and \u201csalary\u201d variables in each employee object instance contain the name and salary of an employee in the organization. A message can be sent to an employee's employee object instance to invoke the \u201cset_salary\u201d method to modify the employee's salary (i.e., the value associated with the \u201csalary\u201d variable in the employee's employee object).","The invention may employ various computer-implemented operations involving data stored in computer systems. These operations are those requiring physical manipulation of physical quantities. Usually, though not necessarily, these quantities take the form of electrical or magnetic signals capable of being stored, transferred, combined, compared, and otherwise manipulated. Further, the manipulations performed are often referred to in terms, such as producing, identifying, determining, or comparing.","Any of the operations described herein that form part of the invention are useful machine operations. The invention also relates to a device or an apparatus for performing these operations. The apparatus may be specially constructed for the required purposes, or it may be a general purpose computer selectively activated or configured by a computer program stored in the computer. In particular, various general purpose machines may be used with computer programs written in accordance with the teachings herein, or it may be more convenient to construct a more specialized apparatus to perform the required operations.","The invention can also be embodied as computer readable code on a computer readable medium. The computer readable medium is any data storage device that can store data which can be thereafter be read by a computer system. Examples of the computer readable medium include read-only memory, random-access memory, CD-ROMs, CD-Rs, CD-RWs, magnetic tapes, and other optical data storage devices. The computer readable medium can also be distributed over a network coupled computer systems so that the computer readable code is stored and executed in a distributed fashion.","Although the foregoing invention has been described in some detail for purposes of clarity of understanding, it will be apparent that certain changes and modifications may be practiced within the scope of the appended claims. Accordingly, the present embodiments are to be considered as illustrative and not restrictive, and the invention is not to be limited to the details given herein, but may be modified within the scope and equivalents of the appended claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The invention, together with further advantages thereof, may best be understood by reference to the following description taken in conjunction with the accompanying drawings.",{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 8"}]},"DETDESC":[{},{}]}
