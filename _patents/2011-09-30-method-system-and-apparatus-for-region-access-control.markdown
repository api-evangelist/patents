---
title: Method, system and apparatus for region access control
abstract: Techniques and mechanisms for providing access to a storage device of a computer platform. In an embodiment, an agent executing on the platform may be registered for access to the storage device, the agent being allocated a memory space by a host operating system of the platform. Registration of the agent may result in a location in the allocated memory space being mapped to a location in the storage device. In another embodiment, the agent may write to the location in the allocated memory space to request access to the storage device, wherein the request is independent of any system call to the host OS which describes the requested access.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09268712&OS=09268712&RS=09268712
owner: Intel Corporation
number: 09268712
owner_city: Santa Clara
owner_country: US
publication_date: 20110930
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["CLAIM OF PRIORITY","BACKGROUND","DETAILED DESCRIPTION "],"p":["This application is a U.S. National Phase application under 35 U.S.C. \u00a7371 of International Application No. PCT\/US2011\/054409, filed Sep. 30, 2011, entitled \u201cMETHOD, SYSTEM AND APPARATUS FOR REGION ACCESS CONTROL,\u201d the entire contents of which are incorporated herein by reference.","1. Technical Field","Embodiments discussed herein generally relate to techniques for accessing a storage device of a computer platform. More particularly, certain embodiments relate to accessing a storage device of a platform independent of a call to a host operating system of the platform to request such access.","2. Background Art","In a conventional computer platform, access control mechanisms are enforced by native file management of a host operating system (OS) on the platform. In a typical example, the host OS may receive a request from an agent of the platform to access some storage medium of the platform. In response to such a request, the host OS will refer to its file management system to determine, for example, whether an access permission indicates that the requested access is to be allowed (or denied). If an access permission is identified as allowing the requested access, the host OS will implement a driver process to access the storage device on behalf of the requesting application.","With continued advancement in various computer technologies (e.g. system management, virtualization, cloud networking, etc.) comes increasingly varied and\/or complex relationships between a host OS of a computer platform and one or more agents on (or communicating with) that platform. For example, as computer platforms are asked to support increasingly complex security management operations, basic input\/output system (BIOS) provisioning, cloud computing, virtualization and\/or the like, such platforms face increasing performance overhead under increasingly time-sensitive performance constraints. For certain types of access to a platform storage device, the need to enforce access control mechanisms via the host OS has, to date, been considered an inherent part of such performance overhead.","Embodiments discussed herein variously provide access control mechanisms for an agent of a computer platform to access a storage device in the platform. Certain embodiments, for example, include techniques for an application or other agent to perform an access which is independent of a system call to the host operating system's native file management system. Such access control techniques may be used, for example, to access a type of Object-based Storage Device (OSD) of the platform. Storage media of the OSD may, for example, be represented in the platform as one or more regions (objects) which, for example, may be identified and accessed using respective region identifiers. To avoid obscuring features of various embodiments, the terms \u201capplication optimized\u201d and \u201capplication adaptive\u201d are used as a shorthand herein to refer to mechanisms which exhibit, implement and\/or exploit the feature of an application (or other agent) of a platform accessing a storage media independent a call to a native file management system of a host OS to request such access.","Certain embodiments enforce access control for application optimized operations at an application and\/or region level of granularity. Certain embodiments additionally or alternatively provide access control for storage regions which are invisible to the host OS\u2014e.g. where a region of an OSD is only visible to a management agent of the computer platform which operates independent of the host OS. For example, certain embodiments provide access control for out-of-band provisioning of information, for reduced virtual machine monitor (VMM) overhead communication and\/or the like. Such access control may, for example, be implemented for access by an out-of-band management agent managing a targeted virtualized and\/or cloud (\u201csoft\u201d) server system. Alternatively or in addition, trusted in-band storage may be provided\u2014e.g. if a BIOS system management mode (SMM) handler of the platform needs to store or read secure information (e.g. code and\/or data), certain embodiments provide an access control mechanism specific to such types of access.","In an embodiment, access control functionality may be implemented at least in part by mechanisms which are variously distributed through the platform\u2014e.g. by respective components in the host OS kernel space, in a memory space allocated to an application and\/or in the OSD storage device itself.",{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 1","b":["100","100"]},"In an embodiment, computer system  includes hardware comprising a processing unit  and an object-based storage device  (or OSD) which are directly or indirectly coupled to one another via some hardware interface . Processing unit  may include any of a variety of combinations of one or more single core and\/or multi-core processors to execute a host operating system (OS) of computer system .","Interface  may include any of a variety of combinations of one or more component circuit elements to directly or indirectly connect processing unit  and OSD  to one another. By way of illustration and not limitation, interface  may include one or more busses such as an address bus, data bus and\/or control bus. Alternatively or in addition, interface  may include one or more control signal lines\u2014e.g. to provide for control by an out-of-band management agent (not shown), where \u201cout-of-band\u201d refers to an agent's operating independent of (for example, in parallel with or in respective alternating processor modes with) a host OS of computer system . Alternatively of in addition, interface  may include one or more chipset components including, but not limited to, an I\/O controller hub, a memory controller hub, and\/or the like. Certain embodiments are not limited with respect to the particular interface elements coupling processing unit  and OSD .","By way of illustration and not limitation, access to OSD  by processing unit  may include interface  implementing data and\/or command communications in accordance with, for example, one or more of a Small Computer Systems Interface (SCSI) protocol, a SCSI over Internet Protocol (iSCSI), a Serial Attached SCSI (SAS) protocol, a Universal Serial Bus (USB) protocol, a Serial Advanced Technology Attachment (S-ATA) protocol and\/or the like.","In accordance with an embodiment, where interface  implements such communications in accordance with SCSI protocol, the SCSI protocol may comply and\/or be compatible with the protocol described in American National Standards Institute (ANSI) Small Computer Systems Interface-2 (SCSI-2) ANSI\/InterNational Committee for Information Technology Standards (INCITS) 131-1994 Specification. Where interface  implements such communications in accordance with iSCSI protocol, the iSCSI protocol may comply and\/or be compatible with the protocol described in \u201cInternet Small Computer Systems Interface (iSCSI)\u201d Network Working Group, Request for Comments: 3720, RFC-Proposed Standard (IETF Stream) published April 2004 by the Internet Engineering Task Force, Internet Engineering Task Force Secretariat c\/o Corporation for National Research Initiatives, 1895 Preston White Drive, Suite 100, Reston, Va. 20191, United States of America. Where interface  implements such communications in accordance with SAS protocol, the SAS protocol may comply and\/or be compatible with the protocol described in ANSI Standard \u201cInformation Technology\u2014Serial Attached SCSI (SAS-2), ANSI\/INCITS 457-2010 Specification. Where interface  implements such communications in accordance with the Universal Serial Bus (USB) Attached SCSI (UAS) protocol, the UAS protocol may comply and\/or be compatible with the protocol described in Information Technology\u2014USB Attached SCSI (UAS) T10 Working document T10\/2095-D Revision 4 Mar. 9, 2010. Where interface  implements such communications in accordance with S-ATA protocol, the S-ATA protocol may comply and\/or be compatible with the protocol described in Serial ATA Revision 3.0 Specification, published on Jun. 29, 2009. Of course, alternatively or additionally, interface  may implement such communications via one or more other and\/or additional protocols without departing from this embodiment.","OSD  may include a storage medium (not shown) and logic to determine an access permission for an agent of computer system  which requests access to such a storage medium. As used herein, \u201cstorage\u201d may mean one or more apparatus and\/or one or more portions thereof into, and\/or from which, data may be stored and\/or retrieved, respectively. Also as used in herein, the terms \u201cmass storage\u201d and \u201cmass storage device\u201d may be used interchangeably to mean storage capable of non-volatile storage of data. Storage may comprise respective mass storage that may comprise respective semiconductor, electromechanical, magnetic, and\/or optical storage and\/or mass storage, such as, for example, respective flash, magnetic disk, and\/or optical disk storage and\/or mass storage. Storage may be, for example, a hard disk drive, solid state drive, hybrid disk drive, Digital Video Disk (DVD) drive, Compact Disk (CD) drive, Redundant Array of Independent Disks (RAID), tape drive or other storage device. As discussed herein, one or more regions of the storage medium in OSD  may be variously represented in computer system  as regions (objects)\u2014e.g. which are of definable (variable) length. Some functionality of OSD  may be according to conventional object-based storage techniques. By way of illustration and not limitation, OSD  may provide or otherwise support certain storage mechanisms such as those set forth in the \u201cObject-based Storage Device Commands-2 (OSD-2)\u201d standard from the T10 committee of the International Committee for Information Technology Standards (INCITS), January, 2009. Certain embodiments variously provide additional mechanisms which extend or otherwise modify conventional object-based storage techniques to provide an agent with access to OSD  which is independent of a system call to the host OS of computer system  to request or otherwise describe such access.","In an embodiment, processing unit  may execute a host OS which, in turn, supports one or more applications also executing with processing unit . To illustrate certain features of various embodiments, such execution by processing unit  is supported in computer system  by an illustrative kernel space  (for the host OS) in main memory and by an illustrative user space  in main memory. OSD  may be distinguished, for example, from the main memory (not shown) which underlies user space . Accordingly, interface  may be distinguished, for example, from a memory bus (not shown) by which processing unit  accesses from main memory state information representing state for application . User space  may include at least one component space allocated for an application , which may request access to OSD . Application  may, for example, execute in a limited privilege (e.g. Ring ) protection domain established by the host OS. In an embodiment, application  is a process of a virtual machine running on computer system \u2014e.g. where kernel  is for an execution environment of a virtual machine monitor (VMM) supporting the virtual machine. It is understood that any of a variety of additional or alternative applications or other agents may be supported by the host OS represented by kernel space .","Application  may make one or more calls to kernel space \u2014e.g. to variously access one or more resources of computer system . In an embodiment, application  may signal a system call interface  of kernel space  that it wants to avail of a some conventional file management functionality of the host OS\u2014e.g. for the host OS to perform on behalf of application  a read, write, delete, etc. access to some storage device of computer system . In response to such a request, a host OS process may access a file system  of kernel space  to determine whether and\/or how the access is to take place. For example, the host OS may identify a given storage device (e.g a particular hard disk drive, solid state drive and\/or the like), file, folder, etc. from a file system  of kernel space  to determine whether application  is associated with an access permission for the requested access to such drive, file, folder, etc. If such access permission is determined to be associated with application , a device driver  of kernel space  may access a storage device of computer system  (e.g. some device other than OSD ) on behalf of application .","In certain embodiments, kernel space  may include, or otherwise have access to, additional application optimized access control functionality which, compared to the access discussed above, supports relatively more direct access by application  to OSD . Some of such application optimized access control functionality is represented in kernel space  by an illustrative application access naming layer  and an illustrative OSD Driver . OSD  may be considered application adaptive non-volatile (AAN) memory in certain embodiments, at least to the extent that application adaptive access control functionality provides for access to OSD  which is independent of a call to the host OS of computer system .","Application access naming layer  (alternately referred to herein as an AAN naming layer, or \u201cANL\u201d) may include a file system which provides a file-like abstraction for one or more regions of OSD . Application access naming layer  may, for example, give a local user, a system administrator, an operating system, an application or other agent an ability to provide or otherwise determine user-friendly names for storage regions in OSD . Application access naming layer  may be mounted into the host OS's virtual file system  from any of a variety of types of storage media of computer system .","As discussed herein, application access naming layer  may support application-specific and\/or region-specific access control\u2014e.g. providing mechanisms to associate one or more of applications, users, regions etc. with Portable Operating System Interface for Unix (POSIX) style access permissions (e.g. read, write, execute, etc.) and to maintain those associations in a non-volatile directory structure. In an embodiment, one or more regions of the OSD  are represented in the application access naming layer  as respective storage devices (e.g one or more hard disk drives and\/or solid state drives), folder names, file names and\/or the like, each associated with respective access permissions (e.g. Read, Write, Delete, Execute and\/or the like). The application access naming layer  may implement a POSIX-style access control scheme that specifies distinct permissions for regions\u2014e.g. on a per-application and\/or other per-agent basis\u2014using conventional (e.g. Owner, Group or other) categories. Application  may, in an embodiment, query application access naming layer  to determine which regions are contained on OSD , to view permissions to access such regions, to modify a permission for a region over which it has control, and\/or the like.","In an embodiment, the one or more regions of OSD  represented in application access naming layer  are only a subset of all regions in OSD . Other regions of OSD  may, for example, be undetectable (referred to herein as invisible) to the host OS due to some configuration in computer system .","By way of illustration and not limitation, computer system  may include one or more out-of-band (OOB) system management agents capable of managing which information regarding regions of OSD  is to be provided to kernel space . Such a management agent may configure OSD \u2014and\/or other elements of computer system \u2014to prevent information describing a particular region or regions of OSD  from being mounted into application access naming layer .","One such management agent may, for example, execute on a dedicated processor (not shown) separate from the processor of processing unit  which executes processes of the host OS. Alternatively or in addition, such a management agent may execute during a system management mode of processing unit \u2014e.g. where processing unit  alternates between the system management mode and a mode for executing processes of the host OS.","Application access naming layer  may also be responsible for communicating access policies with OSD \u2014e.g. via OSD driver \u2014in order for OSD  to associate application  with an access permission. Such association may later be referenced by OSD  for granting a subsequent access request of application . With access control mechanisms provided by application access naming layer , application  may bypass file system  and access OSD  independent of having to specify such access in a request to system call interface . Different applications of the computer system  may thus access the OSD  in a safe manner\u2014e.g. each application access according to a respective application-specific permission which is agreed between or otherwise determined by kernel space  and access control logic of OSD  during a registration phase prior to such access.",{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 2","b":["200","200","100"]},"Computer platform  may be a platform of a desktop computer, a laptop computer, a handheld computer, a tablet computer, a PDA, a server, an Internet appliance, and\/or any other type of computing device. In an embodiment, computer platform  includes a chipset  having, for example, a memory controller  and an input\/output (I\/O) controller . Chipset  may provide memory and I\/O management functions, as well as a plurality of general purpose and\/or special purpose registers, timers, etc. that are accessible or used by a processor  of computer platform . Processor  may be implemented using one or more single chip and\/or multi-chip processing components. For example, processor  may be implemented using one or more of the Intel Pentium\u00ae technology, the Intel Itanium\u00ae technology, the Intel Centrino\u00ae technology, the Intel Xeon\u00ae technology, and\/or the Intel XScale\u00ae technology. Additionally or alternatively, other processing technology may be used to implement processor .","Memory controller  may perform functions that enable processor  to access and communicate via an interconnect  with a main memory  having, for example, a volatile memory  and a non-volatile memory . Volatile memory  may include any of a variety of combinations of one or more random access memory devices including, but not limited to, Synchronous Dynamic Random Access Memory (SDRAM), Dynamic Random Access Memory (DRAM), RAMBUS Dynamic Random Access Memory (RDRAM), and\/or the like. Non-volatile memory  may include, for example, an array of non-volatile memory devices (e.g., chips) comprising non-volatile memory cells. In an embodiment, non-volatile memory  includes, for example, one or more of NAND flash memory, NOR flash memory, magneto-resistive random access memory, nanowire, phase-change memory and\/or the like. Non-volatile memory  may comprise single-level or multi-level memory cells, or a combination thereof. For embodiments in which non-volatile memory  comprise phase-change memory, the phase-change memory cells may comprise vertically integrated memory cells in which a phase-change memory element is layered with an Ovonic Threshold Switch (OTS) in a cross-point. Though not illustrated, non-volatile memory  may be arranged in accordance with conventional memory devices by including, for example, a plurality of addressable memory banks, each including a plurality of memory cells arranged in rows and columns, forming wordlines and bitlines, respectively. The memory banks may contain addressable blocks (or sectors) of memory cells.","Interconnect  may include any of a variety of combinations of one or more component signal lines to variously interconnect components of computer platform  with one another. By way of illustration and not limitation, interconnect  may include one or more busses such as an address bus, data bus and\/or control bus. Alternatively or in addition, interconnect  may include one or more control signal lines\u2014e.g. to provide out-of-band control\u2014e.g. by a security processor, a system management mode of a host processor, a remote boot agent and\/or the like\u2014which is independent of (for example, in parallel with) a host OS running on processor . Alternatively or in addition, interconnect  may include one or more of a universal serial bus (USB) interface, a third generation input\/output interface (3GIO) interface, a PCI or PCI Express bus and\/or any other suitable type of component interconnect circuitry.","One or more input devices  of computer platform  may be connected to interconnect \u2014e.g. via I\/O controller . Input device(s)  may permit a user to enter data and commands into processor . For example, input device(s)  may include one or more of a keyboard, a mouse, a touch-sensitive display, a track pad, a track ball, a voice recognition system and\/or the like. Alternatively or in addition, one or more output devices  of computer platform  may be connected to interconnect \u2014e.g. via I\/O controller . For example, output device(s)  may include one or more of a light emitting display (LED), a liquid crystal display (LCD), a cathode ray tube (CRT) display, a printer, a speaker and\/or the like.","In an embodiment, computer platform  includes a network interface \u2014e.g. a modem and\/or network interface card\u2014to facilitate wired and\/or wireless data exchanges with one or more networks (not shown). By way of illustration and not limitation, network interface  may include an antennae and\/or circuit logic to communicate via any of a variety of types of network connections including, but not limited to, an Ethernet connection, a digital subscriber line (DSL), a telephone line, a cellular telephone system, a coaxial cable, a wireless router, etc.","I\/O controller  may, for example, perform functions that enable processor  to communicate with input device(s) , output device(s) , network interface  and\/or the like. Although certain embodiments are not limited in this regard, I\/O controller  may additionally or alternatively provide processor  with access to an AAN storage  of computer platform . AAN storage  may, for example, include some or all of the features of OSD . AAN storage  may include storage medium (not shown) for storing data to be read and\/or written by one or more agents of computer platform . In an embodiment, AAN storage  includes an access engine \u2014e.g. a state machine or other hardware logic\u2014to determine an access permission for an application or other agent requesting application optimized access to the storage medium. Based on determining such access permission, access engine  may, for example, generate one or more signals which directly or indirectly determine whether or how data is to be read from and\/or written to a storage media of AAN storage device . By way of illustration and not limitation, access engine  may generate one or more signals to selectively permit and\/or prohibit the gating of a data bus and\/or an address bus of AAN storage device . Any of a variety of additional or alternative mechanisms may be implemented by access engine  to selectively allow and\/or prohibit such reads and\/or writes.","Computer platform  may include a system management agent capable of managing which information regarding regions of AAN storage  is to be provided to a host OS running on processor . One such management agent may, for example, execute on a dedicated processor (not shown) which is separate from processor . Alternatively or in addition, such a management agent may execute on processor  during a system management mode\u2014e.g. where processor  alternates between the system management mode and a mode for executing processes of the host OS.","In an embodiment, such a management agent may store in AAN storage  configuration information to describe which regions are to be made visible (or invisible) to the host OS. Based on such configuration, AAN storage  may selectively prevent information describing one or more invisible regions from being loaded into an AAN naming layer of a kernel space for the host OS.","Access to invisible regions of AAN storage  may be limited according to, or otherwise predicated upon, AAN storage  detecting an indication that such access is not for the host OS. For example, AAN storage  may exchange information describing such invisible regions on a dedicated management communication channel which is isolated from the host OS. Alternatively or in addition, AAN storage  may exchange information describing such invisible regions in response to detecting that processor  is not currently operating in a mode for executing processes of the host OS. For example, AAN storage  may detect some signal\u2014e.g. a provided via a system management interrupt virtual legacy wire (SMI-VLW)\u2014which indicates that processor  is operating in a system management mode. Based on detecting such a signal, AAN storage  may accept an associated request to access information corresponding to a region which is invisible to the host OS.","Computer platform  is illustrative of one architecture for implementing application optimized access according to an embodiment. One or ordinary skill in the computing arts would understand from the discussion herein that such architecture may include any of a variety of additional or alternative components\u2014and\/or any of a variety of additional or alternative configurations thereof\u2014to implement techniques described herein.",{"@attributes":{"id":"p-0045","num":"0044"},"figref":"FIG. 3","b":["300","300","200"]},"In an embodiment, communication exchange  includes various messages exchanged among a host OS  of a computer platform, an application  of the platform which is supported by host OS  and an AAN storage device  of the platform. Application  and AAN storage device  may, for example, include some or all of the features of application  and OSD , respectively. Access control functionality for application optimized accesses to AAN storage device  may be implemented at least in part by a combination of mechanisms which are distributed throughout the platform\u2014e.g. by an AAN Naming Layer (ANL)  and an AAN Driver  of host OS , by information and\/or locations in the memory space for application  and\/or by other access control mechanisms of the AAN storage device .","Certain embodiments include a mechanism to identify and authenticate a user and\/or application making an access request to AAN storage device . Such mechanisms may include, for example, a protection domain identifier (PDID) to specify which application is making a particular access request. A PDID, or information corresponding thereto, may be included in, or otherwise available to, a controller residing on AAN storage device \u2014e.g. wherein the PDID is later accessed as reference information for identifying the requesting application.","In an embodiment, the PDID of application  may not be easily spoofed by another application, malicious agent, etc. since ANL  binds the PDID to the memory space of application  and guards the PDID with memory protections of host OS . Therefore, spoofing such an application's PDID may require breaking the native memory protections afforded by the host OS . In the illustrative case of computer system , such memory protections may, for example, be afforded by a VMM (not shown) running in user space  of computer system \u2014e.g. where application  is running in a virtual machine (not shown) which is managed by such a VMM.","An application which is to perform application optimized access of AAN storage device  may first go thru a memory registration process with host OS . The registration process may include application , host OS  and AAN storage device  variously agreeing or otherwise determining one or more locations, identifiers or other information for later use in implementing an application optimized access of AAN storage device  by application .","For example, host OS  and application  may agree or otherwise determine a first location (e.g. data buffer, I\/O page, queue and\/or the like) in the memory space allocated to application , where host OS  is to perform a configuration\u2014e.g. a memory mapping\u2014to correspond such first location to a second location (e.g. data buffer, I\/O page, queue and\/or the like) in AAN storage device . Based on such configuration, a subsequent write to the first location by application  may cause an automatic write to the second location in AAN storage device . As a shorthand, this causal relation of a write to one location and a write to another location is referred to herein as a doorbell feature. The term \u201cdoorbell\u201d refers to the fact that, for example, AAN storage device  may detect from the resulting write to the second location, that a causal write has been performed to the corresponding first location by application . AAN storage device  may thereby identify\u2014e.g. independent of a system call to host OS \u2014that application  is seeking some access.","Alternatively or in addition, the registration process may include host OS  and application  agreeing or otherwise determining one or more of an identifier of a region of AAN storage device  which application  may later seek to access, a PDID or other identifier with which application  may identify itself, a permission which has been given (or is to be given) to application  for a particular access to the particular region of memory in AAN storage device , and\/or the like.","The registration process may further include host OS  and AAN storage device  agreeing on one or more of the second location which host OS  is to configure for correspondence with the first location of application , the PDID or other identifier of application, , the identifier of the region of AAN storage device  which application  may later seek to access, the access permission which has been given (or is to be given) to application  for such region, and\/or the like.","By way of illustration and not limitation, a set of one or more locations of the memory space allocated for application \u2014e.g. one or more I\/O pages\u2014may be registered for association with (e.g. mapping to) a PDID which AAN device  later uses for the purpose of identifying application  and a corresponding access permission. The PDID may be used by AAN storage device  to perform an access permission check when application  makes an I\/O request for an application optimized access\u2014e.g. to read and\/or write to a specified region of AAN storage device .","Prior to application  accessing a region of AAN device , host OS  may register one or more I\/O locations of application  and may determine a PDID for such access\u2014e.g. in response to a request from application . In an embodiment, ANL  may check whether application  is to be provided rights to access the region of the AAN device. If ANL  determines that application  is to be allowed an access permission, ANL  may propagate access information\u2014e.g. a PDID (identifying application ), a region ID for a region of AAN device  and\/or an identifier of the allowed access type (Read or Write)\u2014to AAN device  via AAN driver . AAN storage device  may maintain such access control information in a region permission structure in AAN device . Such region permission information may, for example, be kept in a table or other data structure that is populated with a new entry each time a request to create or access an object of AAN storage device  is made by the AAN driver .","Application  may send to host OS  a message  which explicitly or implicitly requests a region handle (RTag) for a region of AAN storage device . Alternatively, registration of application  may be initiated by some other agent of the platform. In response to the message , the host OS  may determine, at , an access permission for controlling application-optimized access of the region by application . If, for example, message  is for application  to request creation of the region for the first time, ANL  may register the region and one or more access permissions for the region within the virtual file system of host OS \u2014e.g. in an AAN directory  which describes regions of AAN storage device . AAN directory  may be included in or otherwise accessible to ANL , in an embodiment. If message  is for application  to request access to a previously created region of AAN storage device , ANL  may query native policy management functionality (not shown) of host OS  for an access permission for the region. The policy manager may respond with a permission that is configured for the region.","Having determined access permissions at , ANL  may signal AAN driver  to register a region access control policy with AAN device . By way of illustration and not limitation, AAN driver  may register the application, at \u2014e.g. including communicating to, or otherwise agreeing with, AAN storage device  a PDID and\/or a location to associate with application . Alternatively or in addition, AAN device  may allocate, and provide via AAN driver , a region handle (RTag) for application  to use in application-optimized accesses to the region. ANL  may, at , return to application  the RTag which was determined with AAN storage device .","With the region identifier RTag, application  may, at some later point in time, place a work request  into a registered location of its memory space to perform application-optimized I\/O with the desired region of AAN device . A controller in the AAN device \u2014e.g. having some or all of the features of access engine \u2014may validate access to the region by comparing the access type in work request  with the pre-registered information for that PDID\u2014e.g. allowing or denying access based on the check.",{"@attributes":{"id":"p-0058","num":"0057"},"figref":"FIG. 7","b":"700"},"Solid state disk  includes a solid state disk controller  to control nonvolatile memory array . Solid state disk  communicates with a host controller via a host interface . The solid state disk controller  controls reading, writing and erasing of the nonvolatile memory array . Solid state disk  may includes some or all of the features of AAN storage \u2014e.g. where access engine  is incorporated into, or otherwise coupled to control, solid state disk controller .",{"@attributes":{"id":"p-0060","num":"0059"},"figref":"FIG. 4","b":["400","400","200"]},"Computer platform  may include a host OS  executing on a processing unit (not shown) and including various structures in main memory\u2014e.g. represented by an illustrative device driver , data buffer pages  and queues . Device driver  may provide functionality for host OS  to control one or more components of computer platform , and data buffer pages  and queues  may store various state information of host OS . By way of illustration and not limitation, device driver  may include some or all of the functionality of AAN driver , whereas data buffer pages  and queues  may variously store current and\/or pending process state, reference data, etc. of an ANL.","Furthermore, computer platform  may include an AAN storage device  such as a hard disk drive, solid state drive, etc., the AAN storage device  having a storage medium \u2014e.g. including NAND flash memory media, NOR flash memory media, magneto-resistive random access memory media, nanowire media, or phase-change memory media and\/or the like\u2014which is available for application-optimized access. In an embodiment, AAN storage device  includes an access engine \u2014i.e. any of a variety of combinations of hardware, firmware and\/or executing software\u2014to detect a request for an application-optimized access and to evaluate whether to allow or deny such application-optimized access. AAN storage device  may further include various registration information to be referenced by access engine  in determining whether to allow a requested application-optimized access.","Computer platform  may further include an application  executing on the processing unit and including various structures in main memory\u2014e.g. represented by illustrative data buffer pages , user send queue , user complete queue  and\/or the like. To communicate with AAN storage device , application  may allocate and register one or more of its locations (e.g. a user doorbell location , one or more data buffer pages , user SQ  and\/or the like) in main memory, thru an AAN driver of host OS  (e.g. device driver ), with AAN device . Registration may include AAN device  and the AAN driver of host OS  agreeing to a PDID which both the kernel of host OS  and AAN device  associate with the addresses of the application memory space which were registered as part of the registration process. The AAN device , or the AAN driver of host OS , may assign a doorbell address and map that address into the application's memory map. In an embodiment, the PDID of application  is the index of the doorbell address.","In an embodiment, the host OS  may perform a memory map to map a location  of a doorbell repository  in AAN device  directly to user doorbell location  of application . Such a memory map will may provide means for the application to perform a memory map I\/O write to the location  to interrupt AAN storage device .","For example, application  may indirectly write to location  an access request message which includes or otherwise indicates a PDID for application , an RTag for the region to be accessed, and\/or the like.","In response to detecting the write to location , access engine  may use information in the request message to access doorbell context information , previously generated for registration of application  with AAN storage device .","Doorbell context information  may, for example, confirm or otherwise describe an association of location  with the PDID or other identifier of application , the location one or more regions (e.g. user SQ , data buffer pages  and\/or the like) of the memory space of application  which are a target or source of a requested data exchange, and\/or the like. Based on doorbell context information , access engine  may authenticate the application making the request and\/or identify to where and\/or from where data is to be exchanged.","In an embodiment, access engine  may further access region permission information  which describes whether application  is associated with an access permission which allows the requested access. Based on information in doorbell context information  and\/or region permission information , access engine  may perform the requested access for application .","Registration of application  by host OS  may enable application  to avail of application optimized access to one or more regions of AAN storage device . The mapping of user doorbell location  in the memory space of application  to location  of AAN storage device  is provided in an OS kernel bypass application programming interface (API) for reading from and\/or writing to region  of AAN storage device . Certain embodiments leverage the native access control mechanisms of host OS  to represent and maintain permissions on regions of storage medium . However, due to registration of application , access control information may be distributed for later use by AAN storage device \u2014the use independent of an OS system call from application  to host OS  itself\u2014at the time access to the region  is actually requested by application .",{"@attributes":{"id":"p-0070","num":"0069"},"figref":"FIG. 5","b":["500","110","500","470"]},"Method  may include, at , detecting a write to a first location of an OSD of a computer platform\u2014e.g. the first location serving as a doorbell address for signaling an OSD. The write to the first location may be caused by an application of the computer platform performing a write to a second location in a memory space allocated to the application. The application may perform the write to the second location in order to request a first information exchange\u2014e.g. an application optimized exchange between the memory space allocated to the application and the OSD.","In an embodiment, the application has been registered for access to a region of the OSD, the registration prior to the OSD detecting of the write to the first location. Such registration may include, for example, the OSD storing information associating the first location with the second location and\/or with a PDID of the application. For example, an ANL of a host OS of the platform may have participated in an exchange of registration information with the application and the OSD, the exchange to allow access to the OSD by the application which does not require the application to make a system call to the native file system of the host OS.","The registration may include, or otherwise result in, a memory mapping of the first location to the second location. In an embodiment, such memory mapping is a basis for the write to the first location being caused by the write to the second location. The write to the first location may store an identifier of a memory region of the OSD which, the host OS previously provided to the application during the registration process. The OSD may evaluate the memory region identifier as part of a determination of whether to perform the access requested by the application.","Method  may further include, at , performing the first information exchange with the memory space, wherein the first information exchange is independent of the application sending to a host operating system of the computer platform any system call which describes the first information exchange. In an embodiment, the OSD determines an identifier of the application in response to detecting the writing to the first location. An access permission for the application may then be identified based on the determined identifier, wherein the first information exchange is granted (or denied) based on the identified access permission.","In certain embodiments, the OSD may detect one or more other requests for access which are independent of the host OS. For example, the OSD may detect a write to some third location of the OSD by a management agent of the computer platform. The write to the third location may, for example, be based on the management agent requesting a second information exchange. In response to detecting the write to the third location, the OSD may perform the second information exchange to access a memory region of the OSD which is invisible to the host OS. Such an exchange may, for example, be to access BIOS instructions from the OSD.",{"@attributes":{"id":"p-0076","num":"0075"},"figref":"FIG. 6","b":["600","600","420","600","500"]},"Method  may include, at , performing a write to a first location in a memory space allocated to the application. The writing to the first location may, for example, be performed to request a first information exchange\u2014e.g. an exchange between the allocated memory space and the OSD. In an embodiment, the write to the first location causes a write to a second location of an OSD. In an embodiment, the first memory location and second location of method  correspond, respectively, to the second location and first location of method .","In an embodiment, the application further registers for access to a region of the OSD, the registration\u2014e.g. prior to the application performing the write to the first location. Such registration may include, or otherwise result in, a memory mapping of the first location to the second location. In an embodiment, such memory mapping is a basis for the write to the first location resulting in the write to the second location.","Method  may further include, at , performing the first information exchange with the OSD based on the write to the second location. In an embodiment, the first information exchange is independent of the application sending to the host OS any system call describing the first information exchange.","Techniques and architectures for accessing a storage medium are described herein. In the above description, for purposes of explanation, numerous specific details are set forth in order to provide a thorough understanding of certain embodiments. It will be apparent, however, to one skilled in the art that certain embodiments can be practiced without these specific details. In other instances, structures and devices are shown in block diagram form in order to avoid obscuring the description.","Reference in the specification to \u201cone embodiment\u201d or \u201can embodiment\u201d means that a particular feature, structure, or characteristic described in connection with the embodiment is included in at least one embodiment of the invention. The appearances of the phrase \u201cin one embodiment\u201d in various places in the specification are not necessarily all referring to the same embodiment.","Some portions of the detailed description herein are presented in terms of algorithms and symbolic representations of operations on data bits within a computer memory. These algorithmic descriptions and representations are the means used by those skilled in the computing arts to most effectively convey the substance of their work to others skilled in the art. An algorithm is here, and generally, conceived to be a self-consistent sequence of steps leading to a desired result. The steps are those requiring physical manipulations of physical quantities. Usually, though not necessarily, these quantities take the form of electrical or magnetic signals capable of being stored, transferred, combined, compared, and otherwise manipulated. It has proven convenient at times, principally for reasons of common usage, to refer to these signals as bits, values, elements, symbols, characters, terms, numbers, or the like.","It should be borne in mind, however, that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise as apparent from the discussion herein, it is appreciated that throughout the description, discussions utilizing terms such as \u201cprocessing\u201d or \u201ccomputing\u201d or \u201ccalculating\u201d or \u201cdetermining\u201d or \u201cdisplaying\u201d or the like, refer to the action and processes of a computer system, or similar electronic computing device, that manipulates and transforms data represented as physical (electronic) quantities within the computer system's registers and memories into other data similarly represented as physical quantities within the computer system memories or registers or other such information storage, transmission or display devices.","Certain embodiments also relate to apparatus for performing the operations herein. This apparatus may be specially constructed for the required purposes, or it may comprise a general purpose computer selectively activated or reconfigured by a computer program stored in the computer. Such a computer program may be stored in a computer readable storage medium, such as, but is not limited to, any type of disk including floppy disks, optical disks, CD-ROMs, and magnetic-optical disks, read-only memories (ROMs), random access memories (RAMs) such as dynamic RAM (DRAM), EPROMs, EEPROMs, magnetic or optical cards, or any type of media suitable for storing electronic instructions, and coupled to a computer system bus.","The algorithms and displays presented herein are not inherently related to any particular computer or other apparatus. Various general purpose systems may be used with programs in accordance with the teachings herein, or it may prove convenient to construct more specialized apparatus to perform the required method steps. The required structure for a variety of these systems will appear from the description herein. In addition, certain embodiments are not described with reference to any particular programming language. It will be appreciated that a variety of programming languages may be used to implement the teachings of such embodiments as described herein.","Besides what is described herein, various modifications may be made to the disclosed embodiments and implementations thereof without departing from their scope. Therefore, the illustrations and examples herein should be construed in an illustrative, and not a restrictive sense. The scope of the invention should be measured solely by reference to the claims that follow."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The various embodiments of the present invention are illustrated by way of example, and not by way of limitation, in the figures of the accompanying drawings and in which:",{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 7"}]},"DETDESC":[{},{}]}
