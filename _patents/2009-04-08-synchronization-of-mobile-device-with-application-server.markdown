---
title: Synchronization of mobile device with application server
abstract: Embodiments related to synchronizing a state of a mobile device with a state stored of a mobile device application server are disclosed. One embodiment provides a method of synchronizing a state on a mobile device and a state on a mobile device application server comprising receiving a state change at the application server that changes a state relative to a state stored on one or more mobile devices, and storing the state change. Next, the method comprises receiving a request from a mobile device for information regarding any state changes that have occurred, sending a response notifying the mobile device of the state change, receiving from the mobile device an application manifest that gives a current state of the mobile device, updating the application manifest to form an updated application manifest that reflects the state change, and sending the updated application manifest to the mobile device.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08463884&OS=08463884&RS=08463884
owner: Microsoft Corporation
number: 08463884
owner_city: Redmond
owner_country: US
publication_date: 20090408
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["Various mobile devices, including but not limited to smart phones, netbooks, other notebook computers, personal media players, and the like, may be configured to allow a user to install and run various applications such as games, utilities, etc. Such applications may be provided by a mobile service provider, mobile device manufacturer, mobile device software manufacturer, and\/or third party, via an application server that acts as an \u201capplication store\u201d from which users can download applications, sometimes for a fee.","In some environments, the provision of applications for mobile device may be restricted by a mobile device manufacturer or mobile operator. In such environments, users may be able to obtain applications from a single source, such as an application server managed by a mobile device manufacturer, via a single channel, such as a desktop client running on a computer to which the mobile device is connected, for example, via a tether, wireless connection, etc. In such use environments, synchronization of a state of the mobile device with a state of the application server may be relatively straightforward due to the narrowness and constraints of the mobile application use environment and distribution channel.","Accordingly, various embodiments are disclosed herein that are related to synchronizing a state of a mobile device stored on a mobile device application server with a state stored on the mobile device. For example, one disclosed embodiment provides, in a mobile device application server, a method of synchronizing a state on a mobile device and the mobile device application server. The method comprises receiving a state change at the mobile device application server that changes a state relative to a state stored on one or more mobile devices, and in response, storing the state change. The method further comprises receiving a request from a mobile device for information regarding any state changes that have occurred, sending a response to the mobile device notifying the mobile device of the state change, and then receiving from the mobile device an application manifest that comprises a current state of the mobile device. Upon receiving the application manifest, the method comprises updating the application manifest to form an updated application manifest that reflects the state change, and sending the updated application manifest to the mobile device.","This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter, nor is it intended to be used to limit the scope of the claimed subject matter. Furthermore, the claimed subject matter is not limited to implementations that solve any or all disadvantages noted in any part of this disclosure.","Embodiments are disclosed herein that relate to synchronizing a state of a mobile device with a state of a mobile device application server that enable such synchronization even where state changes may be made via multiple channels and\/or by multiple parties. It will be understood that the term \u201cmobile device\u201d as used herein may include any suitable mobile device, including but not limited to, smart phones and other cellular phones, notebook computers such as so-called \u201cnetbooks\u201d, portable media players, personal digital assistants, etc. Further, the term \u201cmobile device application server\u201d may include any server configured to provide applications to mobile devices over any suitable communications channel.","Before discussing the synchronization of a state of a mobile device stored on the mobile device with a state of the device stored on a mobile device application server, an example embodiment of a mobile device use environment  is described with reference to . Mobile device use environment  comprises a plurality n of mobile devices (depicted as three mobile device  (mobile device ),  (mobile device ), and  (mobile device n)) that are in communication with a plurality m of mobile networks, depicted as two example mobile networks  (network ) and  (network m). Via mobile networks,  and , mobile devices , ,  may communicate with each other in various ways, including but not limited to via voice data, instant messaging, email, etc. In the depicted embodiment, three mobile devices communicating with two mobile networks are shown for the purpose of example, but it will be understood that any suitable number of mobile devices may be in communication with any suitable number of mobile networks. Generally, each mobile device will communicate preferentially with a primary mobile network associated with a mobile operator with whom a user has a billing account associated with the device, but may connect to other mobile networks if the primary mobile network is not connectable (e.g. out-of-range), as indicated by the dashed-line connection of mobile device  to mobile network .","Each mobile device comprises memory  configured to store computer-readable instructions such as applications and other programs, and a processor  configured to execute the applications and other programs stored in memory . Generally, programs include routines, objects, components, data structures, and the like that perform particular tasks or implement particular abstract data types. The term \u201cprogram\u201d as used herein may connote a single program or multiple programs acting in concert, and may be used to denote applications, services, or any other type or class of program.","Mobile devices , ,  also may be in communication with a TCP\/IP data network, such as a WAN , as another channel of communication. For example, as depicted in , mobile device n  may be configured to connect to a WAN such as the Internet via a wireless protocol such as 802.11a, 802.11b, 802.11g, 802.11n, or any other suitable protocol.","Mobile devices ,  and  may communicate with a mobile device application server  via the mobile networks  and  and\/or WAN . Application server  further may be in communication with one or more databases, represented by database  in , that store mobile device applications and various items of data related to the provision of applications to mobile devices. For example, as depicted in , the database  may comprise application data . Such application data  may include binary (or other type) application files that are downloadable by mobile devices , , and , and metadata related to the application files that allow users of mobile devices ,  and  to use search queries to locate desired applications that are compatible with the users' mobile devices. It will be understood that the application data  may contain applications provided by multiple developers for multiple different types and brands of mobile devices, each of which may run different operating systems and\/or different versions of like operating systems. As such, the metadata that is stored as application data  may comprise information regarding the device type, operating system, operating system version, and mobile operator identity for which a particular application is intended for use. The application metadata also may include information regarding the cost of the application, any promotional pricing changes or the like to be applied to the application, information regarding the geographic markets and end-user language for which the application is intended, editorial content such as media and consumer reviews of an application, any mobile operator-specific business policies that are to be applied to the purchase and\/or use of an application, and\/or any other suitable type of metadata related to applications stored in the database .","Database  also may store user data . The user data  may include data related to individual users, including but not limited to a user's identity, account number, credit card\/debit card\/other preferred payment mechanism, type of mobile device used by each user, geographic location of each user, language preferences of each user, etc. This data may allow applications that are incompatible with a user's mobile device, geographic location, language, etc. to be filtered from a database query for applications.","Continuing with , the mobile device application server  comprises memory  configured to store computer readable instructions executable by a processor  and\/or other logic components to perform the various tasks in the course of managing the provision of applications to mobile devices. For example, such instructions may be executable to communicate with mobile devices , , and  over the mobile network  and WAN , to communicate with the database  to execute search queries and communicate search results to the mobile devices ,  and , and to perform various other functions and operations, including but not limited to those described herein.","The mobile device application server  also may be configured to provide applications to mobile devices via other communication channels. For example, as depicted in , a mobile device  may be configured to be connected (via a tether, wireless connection, etc.) to a computing device , such as a laptop or desktop computer, to allow communication with the application server  via the computing device . Such communication may take place via a desktop client  installed on the computing device , via a network-based client  (\u201cweb-based client) on mobile device application server  and accessible via an Internet browser application , or in any other suitable manner. Where a mobile device  communicates with the mobile device application server  via a desktop client , a state of the mobile device may be stored and updated on the desktop client . Likewise, where the mobile device  communicates with the mobile device application server  via a web-based client  accessed by browser , the state of the mobile device may be updated on the mobile device application server . It will be understood that such a browser also may be run directly on mobile devices , , .","End-users of the mobile devices ,  and  also may be able to load applications onto a mobile device in ways other than during a communication session with the application server . For example, a removable media storage device, such as a flash memory drive or the like, may be used to side load an application onto a mobile device. In , example side load scenarios are depicted as a removable storage medium  coupled to mobile device , and also a removable storage media receptacle\/connector  provided on computing device .","Continuing with , mobile operators may be able to interact with the mobile device application server  via a mobile operator management console. A plurality x of mobile operator management consoles are shown as two example consoles , , but it will be understood that any suitable number of mobile operators may be in communication with the mobile device application server  via any suitable number of management consoles. The mobile operator management console may allow a mobile operator to submit new applications for inclusion in the database , to submit updates and new versions to existing applications, to submit promotions for applications, to modify pricing, business rules, and other information related to specific applications, to revoke applications, and to take any other suitable action related to programs submitted by a mobile operator and\/or configured to be operated on devices that access the mobile operator's network.","Various other parties besides a mobile operator also may be able to submit applications, and control various aspects of previously-submitted programs, on the mobile device application server . For example, some programs may be provided by third-party software developers, either affiliated with or not affiliated with a specific mobile operator. Such developers may submit applications, updates, revocations, for inclusion on the mobile device application server  via a developer console  that may be provided, for example, as a part of a software development kit provided by the operator of the mobile device application server , by a mobile operator, etc. Likewise, applications, updates, revocations, etc. from a third-party developer may be submitted either through a mobile operator, or directly to the application server , via WAN  or other suitable communication channel. A single developer console is shown for the purpose of example, but it will be understood that any suitable number of developers may communicate with the application server  via development consoles.","It will be understood that mobile device use environment embodiment  depicted in  is shown for the purpose of example, and is not intended to be limiting in any manner.","Unlike mobile device use environments in which applications for a single type of device operated on a single mobile operator's mobile network are obtained through a single channel (e.g. a desktop client), the depicted mobile device use environment  allows a mobile device user to obtain applications from many different sources, for many different devices operated by many different mobile operators, via many different channels. For example, a user may obtain applications over the air (OTA) via a mobile network operated; via a WAN such as the Internet accessed by a desktop client or a web browser; via side loads, either by connecting a removable media directly to a mobile device or by a removable media connected to a computing device to which the mobile device is connected; and\/or via any other suitable channel.","Due to the many different ways a user may obtain applications from the mobile device application server , maintaining a current state of each of mobile device , ,  at the mobile device application server  may pose various challenges. Further, this also may lead to challenges in communicating state changes that occur at mobile device application server  to a mobile device, given the number of different ways that a mobile device , ,  may access the mobile device server.","Accordingly,  shows an embodiment of a method  of synchronizing a state of a mobile device application server with a state of a mobile device that facilitates propagating state changes within a use environment such as that depicted in the embodiment of . Method  comprises, at , receiving a state change at a mobile device application server. The state change may be received from any suitable entity. For example, as shown in , the state change may be received from an application provider  such as a developer, from a mobile operator , from a system administrator  of the application server, etc.","Upon receipt, the state change is stored, as indicated at . The state change may comprise any suitable state change for which synchronization may be performed. For example, a state change may comprise a new application  added to the mobile device application server that is available to mobile devices, a revocation  of an existing application, a new version of an existing application , etc. Further, a state change also may represent a change of a state that is server\u2014specific, e.g. related to a control parameter of a mobile device, rather than to a specific application stored on the mobile device. For example, as indicated at , the state change may represent a new mobile device setting, such as a setting that controls a frequency at which the mobile device checks for changes of state at the mobile device application server (\u201csynchronization frequency\u201d).","Continuing with , method  next comprises, at , receiving a request from a mobile device regarding whether any state changes have occurred, and then, at , sending a response to the mobile device regarding the state change that has occurred. Processes  and  may occur over a mobile voice network, over a WAN such as the Internet, or via any other suitable communications channel.","Next, method  comprises, at , receiving from the mobile device an application manifest that contains information regarding the applications currently stored on the mobile device. For example, the application manifest may contain a user and\/or device identification, an identification of each application stored on the mobile device (currently, as well as formerly in some embodiments), as well as various items of information regarding each application, such as a status of the application (i.e. version number, revocation status, etc.), dates on which each application were installed\/uninstalled\/modified, etc. It will be understood that these types of information are set forth for the purpose of example, and are not intended to be limiting in any manner.","The application manifest received at  from the mobile device may have any suitable format. In one specific embodiment, the manifest comprises an XML (eXtensible Markup Language) document in which the above-described information is contained. An example of an embodiment of an XML application manifest is described in more detail below.","Continuing with , method  next comprises, at , fetching state change information from a database. The state change information may be fetched, for example, by querying the database with information regarding the mobile device type, mobile device ID, application information obtained from the application manifest, etc. to locate state change information relevant to the particular mobile device. Then, an updated application manifest is formed at  with the state change information, and is sent to the mobile device at . The mobile device may then use the updated application manifest to take any appropriate actions based upon the information in the updated application manifest, such as revoking an application, installing an updated version of an application, etc.","The updated application manifest may have any suitable form. For example, in one embodiment, the updated application manifest comprises an XML document that contains the information in the application manifest received from the mobile device, with modifications to reflect any state change information relevant to those applications. Further, the updated application manifest also may include information regarding new applications that have been made available to the mobile device, and\/or server-specific state changes, such as control settings. An example of an updated XML manifest is shown below, where the updated manifest contains three application elements, two of which illustrate the inclusion of state change information included as values of attributes of the application elements.",{"@attributes":{"id":"p-0031","num":"0030"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<?xml version=\u201c1.0\u201d encoding=\u201cutf-8\u201d?>"]},{"entry":[{},"<appManifest dateTime=\u201c\u201d>"]},{"entry":[{},"\u2003\u2003<Device id=\u201c\u201d type=\u201c\u201d lastConnect=\u201c\u201d>"]},{"entry":[{},"\u2003<application id=\u201c\u201d hash=\u201c\u201d state=\u201c\u201d path=\u201c\u201d"]},{"entry":[{},"installDate=\u201c\u201d uninstallDate=\u201c\u201d action=\u201crevoke\u201d>"]},{"entry":[{},"<Description> Description>"]},{"entry":[{},"<Error><\/Error>"]},{"entry":[{},"\u2003<\/application>"]},{"entry":[{},"\u2003<application id=\u201c\u201d hash=\u201c\u201d state=\u201c\u201d path=\u201c\u201d"]},{"entry":[{},"installDate=\u201c\u201d uninstallDate=\u201c\u201d action=\u201cupdate\u201d>"]},{"entry":[{},"<Description> Description>"]},{"entry":[{},"\u2003<\/application>"]},{"entry":[{},"\u2003<application id=\u201c\u201d hash=\u201c\u201d state=\u201c\u201d path=\u201c\u201d"]},{"entry":[{},"installDate=\u201c\u201d uninstallDate=\u201c\u201d action=\u201c\u201d><\/application>"]},{"entry":[{},"\u2003<Notification>"]},{"entry":[{},"\u2003\u2003<ServerError>"]},{"entry":[{},"\u2003\u2003\u2003<Error>0x65400987<\/Error>"]},{"entry":[{},"\u2003\u2003\u2003<Description>Server is busy<\/Description>"]},{"entry":[{},"\u2003\u2003<\/ServerError>"]},{"entry":[{},"\u2003\u2003<SetSyncInterval inhours=\u201c24\u201d \/>"]},{"entry":[{},"\u2003<\/Notification>"]},{"entry":[{},"\u2003\u2002<\/Device>"]},{"entry":[{},"<\/appManifest>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"In the depicted updated manifest embodiment, the \u201caction\u201d attribute in the first application element has a value of \u201crevoke\u201d, indicating to the mobile device that the identified application is to be revoked. Likewise, the second application element has an \u201caction\u201d attribute with a value of \u201cupdate\u201d, indicating to the mobile device that an update is available to the identified application.","The mobile device may be configured to read the updated application manifest and take appropriate actions based upon the state changes contained in the updated manifest, such as revoking an application or prompting a user to agree to the installation of a new version of an application. It can also be seen that the updated manifest comprises an element for setting a synchronization frequency (\u201c<SetSyncInterval inhours=\u201c24\u201d\/>), which may be updated by the mobile application server by changing the value of the \u201cinhours\u201d attribute. It will be understood that the depicted updated application manifest is shown for the purpose of example, and is not intended to be limiting in any manner.",{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 3","b":["300","300","302","304","300"]},"If it is determined at  that the response shows that no state changes have occurred, then method  may end until a next synchronization takes place. On the other hand, if it is determined that  that one or more state changes have occurred, then method  comprises building an application manifest at , and then sending the application manifest to the mobile device application server at . As described above, the application manifest may comprise identities of all of the applications that are stored on the mobile device. The application manifest also may store other information, such a list of applications that have previously been installed but have been removed from the mobile device due to revocation, as well as various items of information about saved and\/or revoked applications, such as a date of installation, date of revocation, version, etc. In some embodiments, the application manifest may comprise an XML document, while in other embodiments, the application manifest may take any other suitable form.","After sending the application manifest to the mobile device application server, method  next comprises receiving an updated application manifest from the server. As described above in the context of , the updated application manifest contains the information in the application manifest sent from the mobile device, with modifications made to that information to reflect any state change information relevant to those applications. Further, the updated application manifest also may include information regarding new applications that have been made available to the mobile device, as well as changes to a server state (i.e. changes to synchronization frequency and the like).","Upon receipt of the updated application manifest from the mobile device server, method  next comprises, at , updating a current state of the mobile device according to the information contained in the updated application manifest, which may comprise taking actions. For example, if the updated application manifest comprises a \u201crevoke\u201d action for an application, the mobile device may revoke the application, either by marking it as revoked in memory or by removing it from memory altogether. Likewise, if the updated application manifest comprises an \u201cupdate\u201d instruction, the mobile device may either automatically obtain the update from the mobile device application server (if the update is mandatory), or may prompt a user to alert the user of the availability of the update and then present the user the option of installing the updated version of the application. Further, the updated application manifest also may comprise information regarding any new applications that are available for the mobile device, based upon the device's identity, mobile operator, geographic location, language preferences, operating system, etc. In this case, the user may be presented with the option of installing a newly available application. The updated manifest also may comprise a new server setting to be applied, such as a new synchronization frequency. It will be understood that the above-described changes of state are presented for the purpose of example, and are not intended to be limiting in any manner.",{"@attributes":{"id":"p-0038","num":"0037"},"figref":["FIG. 4","FIG. 4","FIG. 4"],"b":["400","402","404","405","406","408","402"]},{"@attributes":{"id":"p-0039","num":"0038"},"figref":"FIG. 4","b":["409","410","402","410","406","406","410","406","412","408","402","408","414","402","416"]},"Upon receiving the response from the mobile device application server  confirming that a state change has occurred, the mobile device  builds an application manifest , and then sends the application manifest to the mobile device application server at  as a message requesting a synchronization of state.","Upon receipt of the application manifest from the mobile device, the mobile device application server fetches, at , the state changes from the database , where the state change may include various actions to be performed by the mobile device. The state changes are then returned at  to the mobile device server , which builds an updated manifest at  and sends, at , the updated manifest to the mobile device . The mobile device then may update states at , which may include presenting the user with actions (such as selecting to install new applications or application versions, etc.).","Continuing with , a user may install new content on the mobile device  via a side load, such as from a memory device, from a computing device, etc. This is shown at  in . To inform the server of the new state of the mobile device, the mobile device  may be configured to build another application manifest, at , upon the subsequent state change caused by the installation of new application content via a side load, and then to send, at , the updated manifest to the mobile device application server . Information included in this request may include, for example, a user ID in addition to the application manifest. This information may then be used by the mobile device application server  to update the database, as shown at .",{"@attributes":{"id":"p-0043","num":"0042"},"figref":"FIG. 4","b":["404","438","440","406","442","406","444"]},"In this manner, state changes made by various parties (mobile device user, mobile device operator, server administrator, third-party developers, etc.) via various channels (mobile device client, desktop client, web-based client, side load, management consoles, etc.) may propagate through the use environment, irrespective of where the state originated. Further, in this manner, a user may be ensured the user has an accurate representation of content available to that particular user, and that available actions are presented and are appropriate. Additionally, the disclosed methods may work with third-party supplied applications without any specific development hooks or API usage.","It will be understood that the configurations and\/or approaches described herein for synchronizing states in a mobile device use environment are presented for the purpose of example and not intended to be limiting, because numerous variations are possible. The specific routines or methods described herein may represent one or more of any number of processing strategies. As such, various acts illustrated may be performed in the sequence illustrated, in other sequences, in parallel, or in some cases omitted. Likewise, the order of the above-described processes may be changed.","The subject matter of the present disclosure includes all novel and non-obvious combinations and subcombinations of the various processes, systems and configurations, and other features, functions, acts, and\/or properties disclosed herein, as well as any and all equivalents thereof."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0006","num":"0005"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 4"}]},"DETDESC":[{},{}]}
