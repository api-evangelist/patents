---
title: Method and apparatus for testing embedded examples in GUI documentation
abstract: A method of testing an embedded example in a graphical user interface documentation includes creating an extractable embedded example by tagging the embedded example, extracting the extractable embedded example from the graphical user interface documentation to generate an extracted example, selecting a tagged entity from the extracted example, interpreting the tagged entity to generate an interpreted tagged entity, creating a test suite using the interpreted tagged entity, selecting a graphical tool against which to execute the test suite, executing the test suite against the graphical tool to generate an output response, and verifying the output response.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07100150&OS=07100150&RS=07100150
owner: Sun Microsystems, Inc.
number: 07100150
owner_city: Santa Clara
owner_country: US
publication_date: 20020611
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF INVENTION","DETAILED DESCRIPTION"],"p":["Extended Markup Language (XML) is a markup language by which a definition may be assigned to one or more words in a document by using tags. In order to assign a definition to a phrase in a document, a tag pair, which includes a start tag, placed at the beginning of the phrase, and a closing tag, placed at the end of the phrase.  shows a front view of a document () in which text items are delineated by XML tag pairs. The document () may be, for example, part of documentation that explains the operation of a tool. An outer tag pair is represented by a start tag () and a closing tag (), which define a CUSTOMER. A first nested tag pair defines an ID NUMBER for the CUSTOMER, with a start tag (), a closing tag (), with an ID NUMBER of  (). A second nested tag pair defines a NAME, with a start tag (), a closing tag (), and a NAME of \u201cJohn Doe.\u201d","Documentation associated with a tool (e.g., a command line tool, such as a Bash shell), a graphical user interface tool (a GUI tool), an operating system, a debugging tool, web applications, applets, custom software applications, etc.) can take multiple forms. Common forms of documentation include electronic reference texts, on-line help files, man pages, reference manuals, comments within source code, etc. Documentation may come in a variety of forms, such as computer files, which may be accessible through a web browser, editor, etc., or documentation may be in hard copy form, such as a book or technical manual.","Documentation may help explain a particular source code statement, explain a particular tool command or functionality, or instruct a user as to the function of the tool. For example, documentation for a GUI tool may explain to a user how to manipulate or use various widgets of the GUI tool, such as buttons, text boxes, dialog windows, etc. For example, a sentence in GUI tool documentation may display instructions telling the user to, \u201ccopy the contents of text box A into text box B, and hit \u2018Enter\u2019.\u201d The GUI tool documentation may then display a result of the user performing the instructions, such as showing a picture of a window with the copied text. Likewise, command line tool documentation may display instructions telling the user to type a word or words. For example, the command line tool documentation may instruct the user to type \u201cgrep it file1\u201d into the command line tool. The command line tool documentation may then show a result of the instruction, such as displaying a line or lines of text containing \u201cit.\u201d","Several standard testing tools are used in testing of command line tools and GUI tools. One testing tool is a test suite, a collection of files of one or more tests used to determine whether a tool, e.g., GUI tool or a command line tool is functioning as specified. A test used within the test suite typically contains one or more inputs, as commands, to the tool being tested, designed to exercise one or more of the tool's features. A related testing tool is a test harness, which uses a test suite to test the operation of a tool being testing by accessing the test suite and applying the tests to the tool being tested. The test harness evaluates the response of the tool being tested to determine whether the tool being tested is working properly. Another component used in testing is a golden file. The golden file typically contains a pre-determined proper response of the tool being tested.","Examples embedded within tool (either command line tool or GUI tool) documentation may contain errors. The errors in such embedded examples may exist for a variety of reasons. One possible reason for the errors is improperly written code statements shown in command line tool documentation. Also, an image shown in GUI tool documentation as a result of a user action may not be the same as the image that actually is displayed when the user performs the user action. Changes in a system or a network configuration, etc., may also cause errors. Another source of errors is when a developer, software engineer, etc., changes the tool (either intentionally or unintentionally) in a way that is inconsistent with the tool's specification. Thus, the user may take some user action, and expects the particular response as documented in the tool documentation, but gets a different response from the tool. Such errors often result in frustrating the user of tool documentation.",{"@attributes":{"id":"p-0007","num":"0006"},"figref":["FIG. 2","FIG. 2"]},"A tag set is created (Step ). The tag set includes tag pairs, such as, <test-example>, <\/test-example>, <test-step>, <\/test-step>, <test-name>, <test-name>, <test-source>, <\/test-source>, etc. Embedded examples in the command line tool documentation are tagged by delineating pertinent words or phrases in the command line tool documentation using tag pairs from the tag set (Step ). Tagging the embedded examples creates extractable embedded examples. For example, for a command line tool whose main function is to accept a word typed via a keyboard, reverse the word, and print a reversed word to a display device, the command line tool documentation includes an embedded example that instructs the user, as follows:\n\n","The embedded example above is tagged using tags pairs from the tag set to delineate pertinent words and phrases, as follows:\n\n","The <test-step> tag pair shown above delineates the pertinent phrase \u201creverse backwards,\u201d which represents a command given by the user to the command line tool. After tagging, example 3.2.1 above is an extractable embedded example. The <test-golden-file> tag pair above gives a location for a correct result of the test, i.e., what the user expects to see when executing the instruction (Alternately, instead of using the <test-golden-file> tag pair, \u201csdrawkcab\u201d could be tagged a using a <test-output> tag pair). Additional tags may be used as needed. For example, <test-source> and <\/test-source> tags may be used to locate additional files, as needed.","Once embedded examples in the command line tool documentation are tagged, and extractable embedded examples are created, as described above, the extractable embedded examples are extracted from the command line tool documentation (Step ). A test suite is created using extracted examples (Step ). The test suite includes a number of inputs that test functionality of the command line tool. For example, referring to the previous example, an input to the command line tool, and thus a part of the test suite, is a string \u201creverse backwards,\u201d extracted as an extractable embedded example from the command line tool documentation, where the command line tool is expecting a command (\u201creverse\u201d) and an argument (\u201cbackwards\u201d). With the test suite created, a command line tool is selected against which to execute the test suite (Step ). The test suite is executed against the command line tool (Step ). For example, operating system calls may be used (along with other mechanisms\/techniques) to execute the test suite.","A result of executing the test suite against the command line tool is compared to a stored result in a golden file (Step ). For example, a correct command line tool output in response to the test from the previous example is \u201csdrawkcab.\u201d The result of the test is output to, for example, a computer file for storage (Step ). If output resulting from the test does not match the golden file, a determination is made as to whether a correction to the command line tool documentation is necessary and\/or appropriate (Step ). For example, a specifications guide, which includes criteria for proper operation and expected performance of the command line tool, and is linked to the command line tool documentation, may be used in Step . If a correction to the command line tool documentation is necessary and\/or appropriate, then extractable embedded examples within the command line tool documentation are corrected (Step ). For example, a test harness, using the specifications guide, may use text substitution to correct extractable embedded examples in the command line tool documentation. Otherwise, if corrections to the command line tool documentation are not determined to be appropriate, corrections are not made programmatically, but are made by a documentation writer, a test engineer, etc.","In general, in one aspect, the invention relates to a method of testing an embedded example in a graphical user interface documentation. The method comprises creating an extractable embedded example by tagging the embedded example, extracting the extractable embedded example from the graphical user interface documentation to generate an extracted example, selecting a tagged entity from the extracted example, interpreting the tagged entity to generate an interpreted tagged entity, creating a test suite using the interpreted tagged entity, selecting a graphical tool against which to execute the test suite, executing the test suite against the graphical tool to generate an output response, and verifying the output response.","In general, in one aspect, the invention relates to a method of testing an embedded example in a graphical user interface documentation. The method comprises creating an extractable embedded example by tagging the embedded example, extracting the extractable embedded example from the graphical user interface documentation to generate an extracted example, selecting a tagged entity from the extracted example, interpreting the tagged entity to generate an interpreted tagged entity, creating a test suite using the interpreted tagged entity, selecting a graphical tool against which to execute the test suite, executing the test suite against the graphical tool to generate an output response, creating a golden file using at least one tag from a tag set, comparing the output response to the golden file, creating the tagged entity using at least one tag chosen from the tag set, locating a source of error if the output response varies from the golden file, correcting the extractable embedded example if the output response varies from the golden file, and generating a comparison result after comparing the output response to the golden file.","In general, in one aspect, the invention relates to a computer system for testing an embedded example in a graphical user interface documentation. The computer system comprises a processor, a memory, a storage device, a computer display, and software instructions stored in the memory for enabling the computer system under control of the processor, to perform creating an extractable embedded example by tagging the embedded example, extracting the extractable embedded example from the graphical user interface documentation to generate an extracted example, selecting a tagged entity from the extracted example, interpreting the tagged entity to generate an interpreted tagged entity, creating a test suite using the interpreted tagged entity, selecting a graphical tool against which to execute the test suite, executing the test suite against the graphical tool to generate an output response, and verifying the output response.","In general, in one aspect, the invention relates to an apparatus for testing an embedded example in a graphical user interface documentation. The apparatus comprises means for creating an extractable embedded example by tagging the embedded example, means for extracting the extractable embedded example from the graphical user interface documentation to generate an extracted example, means for selecting a tagged entity from the extracted example, means for interpreting the tagged entity to generate an interpreted tagged entity, means for creating a test suite using the interpreted tagged entity, means for selecting a graphical tool against which to execute the test suite, means for executing the test suite against the graphical tool to generate an output response, and means for verifying the output response.","Other aspects and advantages of the invention will be apparent from the following description and the appended claims.","Exemplary embodiments of the invention will be described with reference to the accompanying drawings. Like items in the drawings are shown with the same reference numbers.","In the following detailed description of the invention, numerous specific details are set forth in order to provide a more thorough understanding of the invention. However, it will be apparent to one of ordinary skill in the art that the invention may be practiced without these specific details. In other instances, well-known features have not been described in detail to avoid obscuring the invention.","The invention may be implemented on virtually any type computer regardless of the platform being used. For example, as shown in , a typical computer () includes a processor (), associated memory (), a storage device (), and numerous other elements and functionalities typical of today's computers (not shown). The computer () may also include input means, such as a keyboard () and a mouse (), and an output device, such as a monitor (). Those skilled in the art will appreciate that these input and output means may take other forms in an accessible environment. The computer () may be connected via a network connection () to a Wide Area Network (WAN) (), such as the Internet.","In accordance with one or more embodiments, a collection of testing components as shown in  are used to test embedded examples in GUI tool documentation. An Embedded Example Extraction and Testing Module (EEETM) () accesses documentation () that provides an explanation about the operation of a GUI tool () for a user. Embedded example 1 (A) through embedded example N (N) within the documentation () use images and text to explain how the GUI tool () operates.","Included within embedded example 1 (A) through embedded example N (N) are one or more entities. Although only embedded example 1 (A) shows entities, each embedded example may have one or more entities. An entity is a pertinent word or words, a pertinent phrase, or a pertinent section of text or image included in the documentation (), which is pertinent to testing the embedded examples. An embedded example may have one or more test steps, where a test step is one of a series of related user actions. For example, an embedded example (e.g., embedded example 1 (A)) may include a test step that shows a user how to copy text from a first textbox, and paste the text into a second textbox. The test step, and each test step within embedded example 1 (A), is an entity.","Each of entity 1 (A) through entity N (N) may have one more nested entities. For example, for the test step that shows a user how to copy text from a first textbox, and paste the text into a second textbox, \u201ccopy,\u201d \u201cfirst textbox,\u201d \u201cpaste,\u201d and \u201csecond textbox\u201d are each an entity. Furthermore, a result of a user action may be shown as part of the embedded example, e.g., the example may show an image of the appearance of the GUI tool () after the user action. In one or more embodiments of the invention, the EEETM () may work in conjunction with an external GUI testing tool, such as a commercial GUI testing tool.","A tag set () includes pairs of start and closing tags (tag pairs) used to tag embedded example 1 (A) through embedded example N (N) and entities within each embedded example (e.g., entity 1 (A) through entity N (N)). Tagging an embedded example and entities within the embedded example (e.g., example 1 (A) and entity 1 (A) through entity N (N)) involves delineating embedded example 1 (A) and entity 1 (A) through entity N (N) with appropriate tag pairs. The tag set () includes a tag pair sufficient to delineate (and thus define) each of embedded example 1 (A) through embedded example N (N) (e.g., a test example tag pair, <test-example> and <\/test-example>). The tag set () includes tag pairs sufficient to delineate (and thus define) each entity (e.g., entity 1 (A) through entity N (N)) in embedded example 1 (A) through embedded example N (N). For example, a test step tag pair (<test-step> and <\/test-step>) is used to tag a test step that occurs within an embedded example, where a test step is a series of related user actions. An entity that has been delineated with a tag pair is a tagged entity. The tag set () is described in more detail later.","Still referring to , additional files () include files needed to conduct a test of embedded example 1 (A) through embedded example N (N) by the EEETM () executed against the GUI tool (). For example, the additional files () may include function or method prototypes for sending messages to the GUI tool (). A golden file () may include, for example, a text representation of a widget hierarchy of the GUI tool () to represent a status of the GUI tool () after a user action, such as clicking on a button.","A Tagging Assistant () is a software component that provides functionality for automated initial tagging of embedded example 1 (A) through embedded example N (N). With respect to tagging embedded examples, the Tagging Assistant () is guided by a Set of Tagging Assistant Rules (). The Set of Tagging Assistant Rules () is based on conventions of the documentation () being parsed (man pages, online help, etc.). For example, indentation, fonts, or how an embedded example begins or ends may differ for different documentation ().","A Set of Rules () may, in accordance with one or more embodiments of the invention, establish expectations for what tagged entities are required and\/or expected as part of an extractable embedded example. The Set of Rules is used by the EEETM () to determine what tagged entities (e.g., entity 1 (A) through entity N (N)) are required or expected in an extractable embedded example.","As a first example, if an extractable embedded example includes an instruction to the user to click a mouse, then, by necessity, the extractable embedded example includes a tagged entity representing where the user clicks the mouse (e.g., the user clicks the mouse on an \u201cEnter\u201d button). Therefore, for the first example, a rule of the Set of Rules () indicates that if a first tagged entity in the extractable embedded example (or in a test step) represents a mouse click, then a second, related, tagged entity in the embedded example (or in the test step) is expected, and, therefore, is delineated to represent the location that the mouse is clicked. Those skilled in the art will appreciate that the use of \u201cfirst\u201d and \u201csecond\u201d above to describe related entities does not necessarily imply a particular order with respect to the related entities, but may instead be used to differentiate between distinct entities.","As a second example, a rule of the Set of Rules may stipulate that if a test action is an instruction for the user to \u201ccopy,\u201d then of necessity there exists test data (which is copied by the user), and a test operand (a source of the data, e.g., a first textbox) and a test target (a destination of data that is copied, e.g., a second textbox). Each of \u201ccopy,\u201d the test data, the test operand, and the test target is represented in a particular embedded example by a tagged entity.","The Set of Rules () may be constructed, in accordance with one or more embodiments of the invention, using a form of a context-free grammar. Use of context-free grammars in the invention is in the same manner as is well known in the art. In the Set of Rules () using a form of context-free grammar, a left-hand side of a rule represents a non-terminal tagged entity, and a right-hand side of the rule represents a regular expression including one or more non-terminal and\/or terminal tagged entities. In one or more embodiments of the invention, a first rule of the Set of Rules (), however, has a left-hand side that represents an embedded example (which is not defined as a tagged entity). For example, the Set of Rules () may be similar to that which is shown in part below (where \u201c+\u201d represents logical AND, and \u201c||\u201d represents logical OR, and \u201c*\u201d represents one or more occurrences):\n\n","Application of the Set of Rules () is dependent upon recognition of tagged entities parsed from documentation (). Thus, sufficient tag pairs are needed in order to define each entity by tagging (delineation with a tag pair). In order to define by delineation a user action, the tag set () includes a test action tag pair (<test-action> and <\/test-action>) to delineate an entity (e.g., entity 1 (A) through entity N (N)) that is a test action, such as would occur within a test step. For example, the documentation may instruct the user to click a mouse on a button of the GUI tool (). Clicking the mouse is an example of a test action. The text in the documentation () that instructs the user to click the mouse is an entity (e.g., entity 1 (A) through entity N (N)) to be delineated with a test action tag pair.","Other tag pairs may be used to tag entities (e.g., entity 1 (A) through entity N (N)) within a particular test step, such as data (e.g., a section of text), operands, and targets (e.g., a second textbox). Using the example, a data tag pair (<test-data> and <\/test-data>) is used to delineate the section of text; an operand tag pair (<test-operand> and <\/test-operand>) is used to delineate the first textbox; a target tag pair (<test-target> and <\/test-target>) is used to delineate the second textbox.","The tag set () may include other tags, such as tags used to indicate a location of an image that is a proper result of a user action. For example, a test-result tag (<test-result> and <\/test-result>) may be combined with an attribute element to indicate a location of a file where the result (such as an image) may be located, such as:\n\n","In one or more embodiments of the invention, tags may be used with attributes, where an attribute is a value assigned to a variable and placed within a tag. For example, an attribute may be used to place the result of a user action in context with the user action that caused the result, as in the tagged documentation shown below:\n\n","An attribute may also be used with a tag in order to disambiguate context with respect to which window of the GUI tool () a user action is directed. For example, as shown in the tagged documentation below, a \u201cwindow\u201d attribute has a value of \u201cFile Dialog,\u201d thus notifying the EEETM () that the \u201cOpen Button\u201d is on the File Dialog window:\n\n","An attribute may be used with a tag in order to include example context with respect to steps and\/or user actions described in a prior embedded example that are used by a later embedded example. For example, a test-start tag with an exampleContext attribute may be used to notify the EEETM () that the later embedded example uses test steps described earlier in the prior embedded example, as shown below:\n\n","A test check tag may be used with an attribute in order to facilitate testing of the GUI tool (). For example, during a test of the GUI tool (), inputs are sent to the GUI tool (). However, the input sent to the GUI tool () requires that the GUI tool () be ready to accept the input, or else the test may fail. For example, an input sent to a debugger window may require that the debugger window has a \u201cfocus\u201d (i.e., accepts keyboard and mouse input). In order to ensure that the debugger window has the \u201cfocus,\u201d a test check tag with an attribute of \u201cwindow=Debugger\u201d may be placed into the extractable example so that the EEETM () generates the input(s) to the GUI tool () to ensure that the debugger window has the \u201cfocus.\u201d",{"@attributes":{"id":"p-0047","num":"0067"},"figref":"FIG. 5","b":"150"},"The Set of Rules is created sufficient to describe patterns of entities in the embedded examples (Step ). For example, a rule of the Set of Rules holds that for each embedded example, one or more test steps is possible; another rule holds that for each test step, one or more test-actions is possible within the test-step, etc. The Set of Rules, in accordance with one or more embodiments of the invention, is a context-free grammar that is input into the EEETM. The Set of Rules can be designed to be used independently of any particular GUI tool being tested. A Set of Tagging Assistant Rules is created (Step ). The Set of Tagging Assistant Rules is specific to the particular type of documentation being parsed; several different Sets of Tagging Assistant Rules may be used to cover different types of documentation for a particular tool.","Once the tag set, the Set of Rules, and the Set of Tagging Assistant Rules exist, a determination is made as to whether the optional Tagging Assistant is advisable and\/or is to be used to accomplish initial automated tagging of the embedded examples in the documentation (Step ). The distinction of whether or not the Tagging Assistant is used depends, in accordance with one or more embodiments of the invention, on how consistent documentation is with the particular format of embedded examples in the documentation. If the Tagging Assistant is used, the Tagging Assistant uses the Set of Tagging Assistant Rules to tag the embedded examples by delineating entities of the embedded examples and embedding control tags where needed (Step ).","The correctness and completeness of resulting initial automated tagging generated by the Tagging Assistant is dependent upon completeness and correctness of the Set of Tagging Assistant Rules. The purpose of the Tagging Assistant is to perform bulk tagging with minimal effort in order to free up personnel, such as technical writers and test engineers. The Tagging Assistant, in accordance with one or more embodiments of the invention, may make multiple passes over the documentation to generate a more correct and comprehensive initial automated tagging.","When the Tagging Assistant has completed initial automated tagging, a Tagger, such as a technical writer or a test engineer, corrects and\/or supplements the initial automated tagging (Step ). Upon examining the initial automated tagging, the Tagger may adjust the Set of Tagging Assistant Rules for accuracy. When the Tagger is satisfied that each embedded example, and each entity within each embedded example, has been properly and completely tagged (i.e., delineated with a tag pair), and control tags have been embedded into the documentation as needed, tagging is deemed complete by the Tagger.","If the Tagging Assistant is not used, the Tagger tags the embedded examples of the documentation manually (Step ). Manual tagging may occur in multiple iterations, in accordance with one or more embodiments of the invention. In order to facilitate manual tagging, the Tagger may use a Translator to periodically check that results of tagging a portion of the documentation are as expected. The Translator, based on the Set of Rules, provides functionality for producing a check of one or more embedded examples or test steps that have been tagged from a portion of the documentation, without having to parse the entirety of the documentation. Thus, the Tagger may tag an embedded example, and use the Translator to determine whether the embedded example has been tagged properly, or which tag pairs are missing.","Once the documentation has been properly tagged, thus creating extractable embedded examples, the EEETM extracts the extractable embedded examples from the documentation (Step ), creates a test suite from extracted extractable embedded examples (Step ), and executes the test suite against the GUI tool (Step ). Because of possible incorrect tagging, in one or more implementations of the invention, test failures produced during the initial execution of the test suite are debugged for incorrect or incomplete tagging. Steps , , and  are covered in detail later in this document.",{"@attributes":{"id":"p-0054","num":"0074"},"figref":"FIG. 6","b":["180","182","184"]},"Once the embedded example has been delineated, a determination is made as to whether an untagged entity exists within the embedded example (Step ). If an untagged entity exists, the entity is selected (Step ), and the entity is tagged using a tag from the tag set (Step ). After the entity is tagged, Step  is performed. Steps  through  are performed until each entity in the embedded example has been tagged. In accordance with one or more embodiments of the invention, the Set of Rules is used in tagging entities in the embedded example. For example, recursive parsing techniques and recognizing techniques commonly known in the art may be used in conjunction with the Set of Rules to tag each entity in the embedded example.","Once each entity in the embedded example has been tagged, and an extractable embedded example has thus been created, a determination is made as to whether the extractable embedded example is correct (Step ). For example, a particular rule of the Set of Rules may require a particular entity be found in the extractable embedded example, and if the entity is not found in the extractable embedded example, the extractable embedded example is not correctly tagged. If the extractable embedded example is not correct, an error condition action is performed (Step ). For manual tagging by the Tagger, performing an error condition action may involve correcting the tagging of the extractable embedded example. If the Tagging Assistant is tagging, an error message is displayed. Steps  and  are performed until the extractable embedded example is correct.","Once the extractable embedded example is correct, a determination is made as to whether control tags are required (Step ). For example, a control tag may be needed to give a location of a needed file. If control tags are required, control tags are embedded appropriately (Step ). Otherwise, if control tags are not required, Step  is performed, and Steps  through  are performed until each example in the documentation is complete.","Once the embedded examples in the documentation are tagged, a test suite may be created and executed against the GUI. A sequence of operations to parse and extract extractable embedded examples from the documentation, create a test suite, and execute the test suite against the GUI tool is shown in , , and .","Referring to , an extractable embedded example is extracted from the documentation (Step ). Because the extractable embedded example is delineated by a start tag and a closing tag, e.g., \u201c<test-example>\u201d and \u201c<\/test-example>,\u201d a parsing tool, such as a recursive descent parser, can detect and extract the extractable embedded example. Within the extractable embedded example are one or more test steps. After the extractable embedded example is extracted, a test step is selected (Step ). Within the test step are one or more tagged entities, one of which is selected (Step ). A selected tagged entity is interpreted (Step ). Interpreting the selected tagged entity involves determining a relationship of the selected tagged entity with respect to other tagged entities in the test step and with respect to the GUI tool.","In accordance with one or more embodiments of the invention, lookup tables from the additional files ( in ) are used to relate the selected tagged entity to other tagged entities in the test step and to the GUI tool. For example, tagged entities in the extractable embedded example may be mapped to arguments of a method using the lookup tables. The method is used to send input to the GUI.","A determination is made as to whether more tagged entities exist in the test step (Step ). If another tagged entity exists in the test step, the sequence of operations continues to Step . Otherwise, a determination is made as to whether more test steps exist in the extractable embedded example (Step ).","If another test step exists in the extractable embedded example, the sequence of operations continues to Step , and Steps  through  are performed until each entity in each test step of the extractable embedded example has been interpreted. Otherwise, if no more steps remain, a determination is made as to whether control tags exist in the extractable embedded example (Step ). For example, control tags may exist in the extractable embedded example in order to set window or example context, or indicate a location of a needed file, etc. If a control tag exists, the control tag is selected (Step ) and interpreted (Step ). Steps , , and  are performed until no further control tags require interpretation. In accordance with one or more embodiments of the invention, controls tags are selected and interpreted before, or concurrent with, selection and interpretation of tagged entities.","Next, a test suite is created (Step ). To create the test suite, interpreted tagged entities are examined and assembled into a form suitable for executing against the GUI tool. Rules included in the Set of Rules and\/or additional files ( in ) are consulted in order to create the test suite. For example, a lookup table included as part of the additional files ( in ) may be consulted in order select an appropriate method and\/or system call with which to send a message to the GUI, thus generating a test statement to test the GUI.","The sequence of operations is continued in . Once the test suite is created, a GUI tool is selected (Step ). The GUI tool may be selected using a variety of different techniques. For example, the name and location of a GUI tool may be included in an embedded example with the documentation.","Next, the test suite is executed (Step ). In accordance with one or more embodiments of the invention, the EEETM executes the test suite by sending inputs to the GUI tool via messages using methods, system calls, GUI test tools, and\/or operating system Application Programming Interfaces (API's).","A particular sequence of operations for execution of a particular test suite may vary according to the needs of a particular test and\/or a particular GUI tool. However, a possible sequence of operations for execution of a particular test suite is shown in . A current context of the GUI tool is set (Step ). Depending upon how the test suite is constructed, the current context may be set by a window context tag. Alternatively, the current context may be set by selecting a current context from a data structure stored in memory and available for use in a test of the GUI tool. The data structure may be a list of contexts, or if a modal window (i.e., a window that has the \u201cfocus\u201d as long as the window exists) is involved, a stack of lists of contexts. Creation of the data structure involves maintaining a set of available contexts used (i.e., windows that are currently open at that particular point in the test). The current context is used to focus the test upon a particular portion of the GUI tool under test, e.g., to test a particular widget (e.g., a button, a textbox, an icon, a window, or other feature of the GUI tool) on a particular window, when multiple windows are open.","Continuing the sequence of operations in , a single widget or multiple widgets are selected (Step ). The widget is selected from the test. If a context has been set explicitly with a context tag or attribute, then the widget is found in the context or an error condition occurs. For example, if an editor window is the current context, and the widget is an \u201cOpen File Dialog\u201d button, then the editor window should have an \u201cOpen File Dialog\u201d button. Otherwise, if the editor window does not have an \u201cOpen File Dialog\u201d button, an error may occur, or the test of the GUI tool may indicate that the GUI tool is not functioning properly.","However, if the context has not been set explicitly, the widget is assumed to occur in the current context. Next, a determination is made as to whether the widget is found in the current context (Step ). If the widget is not found in the current context, a determination is made as to whether another context is available (Step ). For example, a data structure, such as a list, may be accessed in order to determine if another context is available. If another context is not available, a testing error statement is generated (Step ). Otherwise, if another context is available, then an available context is selected (Step ), and the sequence continues to Step . If the widget is found in the current context in Step , a test statement is generated (Step ). The test statement is an input to the GUI tool, and elicits a response from the GUI tool. For example, if the test statement represents a button click that creates a new window, the GUI tool, if working properly, responds by creating a new window. In accordance with one or more embodiments of the invention, test statements are input into a GUI test tool, which then acts upon the GUI tool to elicit a response.","Referring to , a response of the GUI tool to the test statement is compared to a proper response in a golden file (Step ).). If the documentation includes an image of a window or a portion of a window (representing change(s) in response to a user action), an image file may also be stored as a golden file of the extractable embedded example. Alternately, the widget hierarchy (i.e., a text-based tree of the GUI tool's widgets and the widgets' state) may be stored in the golden file as the proper response, where relevant items may be tagged. For example, a test statement may cause a file named \u201cmain.c\u201d to be selected in a file dialog. In order to indicate that selection of \u201cmain.c\u201d is a proper response, the phrase \u201cmain.c\u201d of the widget hierarchy may be delineated in the golden file with appropriate start and closing tags.","Output concerning a result of the test is generated (Step ). Data is sent to an output and\/or storage device, such as a monitor, a printer, a file, etc. A determination is made as to whether correction of the extractable embedded example is necessary and\/or appropriate (Step ). In limited circumstances, portions of the documentation may be corrected by the EEETM. For example, the EEETM may update images, widget hierarchies, and tagged (non-displaying) results in the documentation. In accordance with one or more implementations of the invention, results of a test may be tagged and embedded in the documentation, and not be seen by the user of the documentation because the tags that delineate such embedded results are detected by a documentation processor, and thus the embedded results are not displayed to the user.","Correction of extractable embedded examples may be facilitated by use of a reference document, such as a specifications guide, which is linked to the documentation. The specifications guide is one or more documents created during development of a tool, e.g., a GUI tool. The specifications guide is typically used by a team of software engineers to build the GUI tool. The specifications guide includes criteria for the proper operation of the GUI tool and contains information relating to what the GUI tool is expected to be able to do when development of the GUI tool is finished and ready to ship to the end user. If the specifications guide is prepared so that the EEETM can access and link to the specifications guide, then the specifications guide may be accessed and used to correct the extractable embedded example in some circumstances. Next, if appropriate, extractable embedded examples within the documentation and\/or a defective GUI tool are corrected (Step ). Steps  and  are performed until the extractable embedded example is correct.","Those skilled in the art will appreciate that the number of steps described in  through  discussed in this document may be greater or fewer in number, or the steps may occur in a different sequence than as discussed in this document. For example, the execution of the test suite may occur in a different time frame from the creation of the test suite. Often, a test suite is executed whenever a GUI tool or its operational environment changes. A new test suite is often created whenever the documentation is changed.","Advantages of the invention include one or more of the following. Automating testing of documentation examples enhances GUI tool quality, documentation quality, and software production efficiency. The construction of functionality is provided that detects differences between documented GUI tool behavior and actual GUI tool behavior, which leads to a reconciliation between documented GUI tool behavior and actual GUI tool behavior, thereby enhancing GUI tool and\/or documentation quality. The construction of functionality is provided that may automatically correct errors in extractable embedded examples in documentation, thereby enhancing GUI tool quality and documentation quality. The construction of functionality is provided that may automatically detect and locate the source of some errors in a GUI tool associated with extractable embedded examples in documentation, thereby enhancing GUI tool quality.","A framework is provided for the coordination of groups working on quality control for documentation, thereby enhancing software quality and enhancing GUI tool production efficiency, customer satisfaction, and reducing error reports related to the potential mismatches between documentation and actual GUI tool behavior. A framework is provided for the automatic correction of errors in documentation and the embedding of tags in documentation, thereby improving documentation production efficiency.","Infrastructure used for the invention (e.g., the tag set) may be integrated into existing documentation that supports extensible markup language tagging, or the infrastructure may be used in any documentation that is parse-able, with the use of an additional documentation processor. The test suite used to test a GUI tool may be regenerated whenever embedded examples change, and executed whenever the GUI tool changes or is revised. Thus, the GUI tool and the documentation remain synchronized. Those skilled in the art will appreciate that the invention may include other advantages and features.","While the invention has been described with respect to a limited number of embodiments, those skilled in the art, having benefit of this disclosure, will appreciate that other embodiments can be devised which do not depart from the scope of the invention as disclosed herein. Accordingly, the scope of the invention should be limited only by the attached claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF DRAWINGS","p":[{"@attributes":{"id":"p-0018","num":"0023"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0019","num":"0024"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0020","num":"0025"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0021","num":"0026"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0022","num":"0027"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0023","num":"0028"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0024","num":"0029"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0025","num":"0030"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0026","num":"0031"},"figref":"FIG. 9"}]},"DETDESC":[{},{}]}
