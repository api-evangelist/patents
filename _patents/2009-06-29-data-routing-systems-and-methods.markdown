---
title: Data routing systems and methods
abstract: A motion control system collects data from a plurality of types of motion control devices and distributing data to a plurality of types of data destinations. A data input module comprises a plurality of data source components. Each of the data source components is configured to collect data from one of the plurality of motion control device types. At least one of the data source components is operatively connected to collect data from at least one of the motion control devices. The data output module comprises a plurality of data transport components. Each of the data transport components is configured to transport data to one of the plurality of data destination types. At least one of the plurality of data transport components is operatively connected to distribute data to at least one of the plurality of data destinations. The data cache module stores data collected by the plurality of data input modules; data stored by the data cache module is accessible by the plurality of data output modules. The data output module distributes data collected by the data input module and stored in the data cache module to at least one of the plurality of data destinations.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08102869&OS=08102869&RS=08102869
owner: Roy-G-Biv Corporation
number: 08102869
owner_city: Bingen
owner_country: US
publication_date: 20090629
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["RELATED APPLICATIONS","FIELD OF INVENTION","BACKGROUND OF INVENTION","SUMMARY OF INVENTION","DETAILED DESCRIPTION OF THE INVENTION"],"p":["This application Ser. No. 12\/494,163 is a continuation of U.S. patent application Ser. No. 10\/844,025, filed May 12, 2004, which claims priority of U.S. Provisional Patent Application Ser. No. 60\/506,104, filed Sep. 25, 2003. The contents of all related applications listed above are incorporated herein by reference.","The present invention relates to computer systems for collecting data from one or more disparate data sources and distributing the collected data to one or more disparate data destinations.","The present invention is used in the context of collecting and distributing data. The present application uses the term \u201crouting\u201d to refer to the process of both collecting data from data origins and distributing data to data destinations. The terms \u201cdata\u201d and \u201cdata items\u201d are used herein to refer to numeric, binary, or string data generated in an analog or digital format. Data is typically generated by machines, devices, or the like forming part of a larger working environment. The term \u201cmachine\u201d as used herein refers to a physical asset used to perform a predetermined task. The term \u201cdevice\u201d is typically applied to a machine with a relatively small footprint.","The data origin or origins thus may be formed by any machine or device (mobile or not) that stores data and which is either directly controlled by humans through a user interface or automatically controlled via a computer based system. However, the present invention is of particular significance in the context of a working environment defined by a motion control system, and that application of the present invention will be described in detail below. The present invention may have broader application to other working environments, however, and the scope of the present invention should be determined by the claims appended hereto and not the following detailed description.","A motion control system typically comprises a plurality of motion control machines or devices each programmed to perform an individual task. The motion control system is configured to coordinate the individual tasks so that the motion control system itself performs a combined task.","Each motion control machine or device comprises a controller that generates and\/or stores data indicative of the state of the machine or device at a particular point in time. Typically, some or all of this data changes because the state of the machine changes as the machine performs its individual task.","The data generated and\/or stored by the motion control machines and\/or devices of a motion control system can be used to optimize the performance of one or more of the individual machines as well as the entire motion control system. The data destinations where the data is sent can thus take any one or more of a number of forms, including a database system, a plant floor process management system, software used to optimize overall production flow, other software systems, and\/or another data routing system as described herein.","The collection and distribution of the data associated with individual motion control machines is, however, complicated by several factors. The sheer volume of data can overwhelm the ability of the data destination to store and\/or process the data collected. In addition, the data origins and data destination may employ different, unique, or proprietary hardware and software systems that utilize different data acquisition commands, data formats, and data transmission protocols.","The need thus exists for data routing systems and methods that simplify the collection of data from diverse data origins and the subsequent distribution of data to diverse data destinations.","The present invention may be embodied as a motion control system for collecting data from a plurality of motion control devices and distributing data to a plurality of data destinations, where the plurality of motion control devices are of a plurality of motion control device types and the plurality of data destinations are of a plurality of data destination types. A data input module comprises a plurality of data source components. Each of the data source components is configured to collect data from one of the plurality of motion control device types. At least one of the data source components is operatively connected to collect data from at least one of the motion control devices. A data output module comprises a plurality of data transport components. Each of the data transport components is configured to transport data to one of the plurality of data destination types. At least one of the plurality of data transport components is operatively connected to distribute data to at least one of the plurality of data destinations. A data cache module stores data collected by the plurality of data input modules, where data stored by the data cache module is accessible by the plurality of data output modules. The data output module distributes data collected by the data input module and stored in the data cache module to at least one of the plurality of data destinations.","Referring initially to  of the drawing, depicted therein is a data routing system  constructed in accordance with, and embodying, the principles of the present invention. The data routing system  is used to route data or data items collected from data origins  to one or more data destinations .","As described above, the terms \u201cdata\u201d and \u201cdata items\u201d will be used herein to refer to numeric, binary, or string data values collected in an analog or digital format from a data origin . Examples of data types that represent data or data items as defined herein include ADDRESS, ARRAY, BIT, BYTE, WORD, DWORD, LONG, REAL, DOUBLE, FLOAT, BINARY BLOB, STRUCTURE, STRING, and ASCII STRING.","The data origins  are machines, devices, or the like forming part of a larger working environment. The working environment is not a part of the present invention and thus will not be described herein beyond what is necessary for a complete understanding of the invention. The terms \u201cmachine\u201d as used herein refers to a physical asset used to perform a predetermined task. The term \u201cdevice\u201d is typically applied to a machine with a relatively small footprint.","Examples of machines as defined herein include a CNC mill used to shape metal, a pick-n-place machine used to position parts on a circuit board, a robotic machine used to perform surgery, a medical data input device (i.e. blood glucose meter, asthma meter, etc), a gaming device, a robotic toy, an animatronics figure, a robotic machine used to deliver goods to a warehouse or to people, an automobile, a truck or farm vehicle, a boat or ship, an airplane, a jet, a helicopter, a spacecraft, and\/or a hardware or software-based control system within a personal computer or even just a personal computer or hand-held computer itself. The data origin or origins thus may be formed by any machine or device (mobile or not) that stores data and which is either directly controlled by humans through a user interface or automatically controlled via a computer based system.","As shown in , the data collected by the data routing system  is delivered to one or more data destinations . The data destinations  can take on many forms and serve many functions, but a primary function of the data destinations  is to use the data collected from the machines in the working environment to optimize operation of the individual machines and the overall working environment.","The example data routing system  is a software system that comprises a data input module group , an optional data cache module group , and a data output module group . The term \u201cmodule\u201d as used herein refers to a binary block of computer logic that contains functions, objects, components, ActiveX components, .NET source, HTML, XML and\/or other computer code that can be executed in real-time or in script form. Several examples of a module include an executable EXE, a dynamic link library DLL, an OLE component or set of components housed within a DLL or EXE, an ActiveX Control, an HTML or XML based Control, a VB script source file, a Java Serverlet, Java Control, Java Object, .NET Package, etc.","The data input module group , data cache module group , and data output module group  typically run on a processor forming part of a computer system, but may be configured to operate across several discrete processors forming part of one or more computer systems.","The data routing system  operates basically as follows. The data input module group  communicates with one or more data origins  to obtain data indicative of a state or condition of the machine or device forming each of the data origins . If used, the data cache module group  temporarily or persistently stores the data collected by the data input module group . The data output module group  determines the conditions under which data collected by the data input module group  stored in the data cache module group  is sent to one or more of the data destinations . The data output module group  optionally also determines the format in which data is sent to the data destination  and\/or the method of transporting the data to the data destination .","The example data input module group  comprises a data collection component  and one or more data source components . The term \u201ccomponent\u201d as used herein refers to a logical organization of computer commands designed to perform an operation or set of operations. Examples of components include OLE components, ActiveX controls, HTML or XML based controls, HTML or XML based objects, .NET objects, C++ objects, C function set, Visual Basic objects, and the like. A component may operate on a single processor or may be distributed across a plurality of processors.","The data collection component  associates all of the data collected with the data origins  from which the data was collected. The data collection component  may be connected directly to one or more of the data origins  or may be connected to one or more of the data origins  through the data source components  as shown. If the data collection component  is connected directly to a data origin , the data collection component  and the data origin  must be pre-configured to work with each other, and the data collection component  is considered data origin independent, whereas the data source component  is considered data origin dependent. However, if the data collection component  communicates directly with a data origin , it then becomes data origin dependent.","Preferably, however, one or more data source components  are provided to allow the data collection component  to operate in a data origin independent manner. In this case, the example data source components  are each associated with one or more of the data origins . The data source components  collect data from a particular data origin  or class of data origins  and pass this data to the data collection component  in a predetermined format. The data source components  may run entirely on the same processor or processors as the data routing system , entirely on a processor or processors associated with the data origin , or on processors associated with both the data routing system  and the data origin . Although optional, the use of the data source components  is preferred to isolate the data collection component  from the operational details of each of the data origins .","The data input module group  may collect data from the data origins  by one or more of a number of methods. For example, the data source components  and\/or data collection component  may read register values on the machine or device, read shared memory provided by the machine or device, send commands to the machine or device for which a data response is given containing the data requested, read variables provided by the machine or device, read and write to variables in a sequence necessary to produce data values, query data using a proprietary or standard data protocol, call a function provided by the machine or device, build and send a command based on a protocol used to communicate with the machine or device for which a data response is provided by the machine or device from which the data is extracted, and\/or the like.","The optional data cache module group  comprises a data store component  and at least one data cache . The data collection component  passes data to the data store component ; the data store component  stores this data in one or more of the data caches . The data caches  may be temporary or volatile memory devices such as RAM or may be permanent or persistent memory such as a hard drive or database system. The data store component  further retrieves data from the appropriate data cache  as necessary. If the data cache module  is not used, data collected by the data collection component  is passed directly to the data output module group  in real time.","The data output module  comprises a data output component . As mentioned, the data output component  may receive data directly from the data collection component . However, if the data cache module  is used, the data output component  may direct the data store component  to read data stored in one or more of the data caches  and transfer the stored data to the data output component .","The data output module group  further comprises one or more data transport components . Each of the data transport components  defines or is associated with a method or system of transporting data from the data output component  to one or more of the data destinations . The data output component  selects an appropriate one of the data transport components  for each data element based on the data destination  to which the data element is to be sent.","Optionally, the data output module group  further comprises a data formatter component . The data formatter component  contains logic, templates, or the like for arranging data elements in a format appropriate for one or more of the data destinations . The data formatter component  allows the data destinations  to be implemented in a machine or device independent manner by obviating the need for the data destinations  to process data elements in the format generated by the data origins .","The data output module group  further optionally comprises an inference engine component . If used, the inference engine component  helps the data output component  to determine the data destination or destinations  where each data element is set. The inference engine component  may further assist the data output component  to make the determination of which data is to be output (if any) and\/or which data transport component  to use and\/or whether the data formatter component  is to be used.","The data routing system  of the present invention thus collects data from one or more data origins  and routes this data to one or more data destinations . The use of the data routing system  allows the data destination or destinations  to operate independent of the implementation details of the data origin or origins . In addition, the data routing system  can be configured to be independent of the data destination through the use of the data transport components , and data formatter components .","Turning now to  of the drawing, depicted therein is a data routing system  of the present invention. The example data routing system  operates in the same basic manner as the data routing system  described above but is optimized to operate in a working environment defined by a motion control system.",{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIG. 2","b":["120","122","124","124"]},"The example motion system  as defined in U.S. Pat. No. 5,691,897, but other motion systems may be used instead or in addition. As will be described in further detail below, the motion system  defines or is associated with one or more application programming interfaces. The motion system  is not per se part of the present invention and will not be described herein beyond what is necessary for a complete understanding of the present invention.","The data destinations  may use the data delivered by the data routing system  for a variety of purposes. A primary function of the data destinations  is to optimize and\/or monitor the operation of the machines and\/or devices forming the motion control system that the motion services  or other software used by the data sources  communicate with. The data destinations  can thus take any one or more of a number of forms, including a database system, a plant floor process management system, software used to optimize overall production flow, or other software systems, and\/or another data routing system as described herein.","The example data routing system  is connected to the data destination  through a network . The network  is a combination of hardware and software architectures that forms a link between two or more computer systems. Examples of network architectures include a packet based network, a streaming based network, broadcast based network, or peer-to-peer based network. Examples of networks that may be used as the network  include a TCP\/IP network, the Internet, an Intranet, a wireless network using WiFi, a wireless network using radio waves and\/or other light based signals, and the like.","The software components making up the example data routing system  may be organized into three module groups: a data input module group , a data cache module group , and a data output module group . The data input module group , data cache module group , and data output module group  typically run on a processor forming part of a computer system, but may be configured to operate across several discrete processors forming part of one or more computer systems connected by a computer network.","The data input module group  comprises a data collection component  and a plurality of data source components and . The data cache module group  comprises a data store component  and one or more data cache components . The data output module group  comprises a data output component , one or more data transport components , a data formatter component , and an inference engine component .","The data collection component  is responsible for collecting data from the machine asset and routing all data collected to the data cache module group . The data collection component  is responsible for managing one or more data source components  for which data is collected and route the data collected to the data cache module group .","The data source components and communicate with the motion system . Each data source communicates with the motion system using whatever means are available including to the use of application programming interfaces (API) , , and associated with the motion system , using (API) provided by a motion system vendor, or using network or other communication protocols. The example data source component is configured to receive data from the API's and , while the example data source component is configured to receive data from the API ","The example data collection component  manages one or more data source components  and is responsible for routing the data collected to the data store component  of the data cache module . Optionally, each data collection component  may communicate directly to the motion system  without the need for an intermediary data source component . However, the use of the data source component  allows for code reuse as the data collection component  may then implement all common functionality, thus making each data source component  extremely thin and easy to build and maintain. In addition, the use of each data source components  allows the data collection component  itself to be independent of each data origin with which each data source component  communicates to collect data.","Each data source component  is responsible for mapping the data collected from the data source (i.e. XMC API, XMC CNC API, OPC Server, or proprietary data source) into the format expected by the data collection component  and ultimately the data store component . The main goal of the data source components  is to provide a consistent interface to the data origin , thereby freeing the client from the details of the data origin  and allowing all data source components  to act and operate in the same manner from the perspective of the data collection component .","The data cache module group  caches the data received so that it may later be analyzed or otherwise processed. In particular, the data store component  manages one or more data caches  and is responsible for storing all data received and giving access to all data stored. Optionally, each data store component  could cache all data received directly without the need for an intermediary data cache . However, the use of the data cache or caches  allows for code reuse and also allows the data store component  to remain independent of any caching technologies used by each data cache component . The data store component  may then implement all common functionality, thus making each data cache module  also extremely thin and easy to build and maintain.","The terms \u201cprimary data cache\u201d and \u201csecondary data cache\u201d may be used to refer to one or more of the data caches  depending upon whether certain features of the data cache module  are implemented and\/or used as will be discussed in detail below. The suffix \u201ca\u201d is used in  to designate a primary data cache, and the suffix \u201cb\u201d is used to designate a secondary data cache.","Each data cache  stores data in a data target  such as a database on a hard drive, RAM memory, or another persistent or volatile storage medium. The main purpose of the data caches  is to provide a consistent interface to the data storage medium used so that the caches  appear to be the same to the user, thus freeing the client of any details handling various caching mechanisms.","The data output module group  is responsible for sending the data collected by the data input module group  and\/or stored by the data cache module group  to the data destination . The data output component  manages the other components forming the data output module , namely, the data transport components , the data formatter component , and the inference engine component .","More specifically, the data output component  is responsible for sending data to one or more data destinations . As generally described above, the data destination may be an enterprise data management system, an artificial intelligence system, a plant floor process management system, software used to optimize overall production flow, another data routing system such as the systems  and  described herein, and\/or other software systems used to optimize and\/or monitor how the overall factory operates based on how each machine making up the factory runs.","The inference engine component  is responsible for mapping the data elements received from the data input module group  or data cache module group  through the data output component  to the data destinations  to which the data elements are to be sent. The data transport component  defines which data elements are to be sent to which data destination . When performing this mapping, the inference engine component  also optionally provides a set of rules and\/or other criteria that are used to determine whether or not each output defined by the data transport component  should \u2018fire\u2019. For example, the inference engine component  may use one or more of the following logic systems: artificial intelligence systems, fuzzy logic algorithms, neural network pattern matching, genetic algorithms, expert system logic, and\/or other computer based decision-making and\/or pattern matching based systems, to determine when a given set of one or more data elements should be sent out. In the simplest case, an identity transform may be used which causes all data inputs received to be sent out as matching data outputs.","The data formatter component  is used to format all or portions of the data set to be transported to the data destinations . For example the data formatter component  may be used to format data output by the inference engine component  into a certain XML schema or other proprietary data format.","The data transport component  is responsible for sending the data to the ultimate data destination , including an enterprise database, an enterprise software system, or even another data routing system such as the data routing system .","Referring still to , also depicted therein is a data manager  that allows the user to manage operation of the data routing system . The data manager  controls access to property pages exposed or generated by user-interface components associated with the components , , , , , and . Property pages may also be exposed or generated by user interface components associated with the components  and . In particular, the example data routing system  comprises data collector property pages , data store property pages , data output property pages , data transport property pages , data formatter property pages , and inference engine property pages . As will be described in further detail below, the property pages , , , , , and  allow the user to initialize, configure, and control the components , , , , , and , respectively.","In the following discussion and in the drawings, the property pages , , , , , and  also refer to the user-interface components associated with these property pages. The property pages , , , , , and  and other interface elements are separated from the components , , , , , and  in the system  to optimize the overall system flexibility and facilitate evolution toward new and future user interface technologies such as HTML based web user interface, SOAP\/XML based interfaces, Microsoft .NET based interfaces, etc. Optionally, however, the components , , , , , and  could directly expose property pages and other user-interface elements.","Referring now to , the interactions of the components and property pages forming the data input module group , data cache module group , and data output module group  will now be described in further detail in the various scenarios required to implement the functions of the example data routing system .","Before using the data routing system , the system must first be initialized. During initialization, all components are started and configured with their initial settings. Initializing the system involves configuring the data routing system  so that it knows what data to collect, where to collect it from, how to process the data collected and where to send the processed data. Once initialized, the system is ready to begin collecting, storing and processing machine and\/or device data.","The initialization process includes to levels. First, the overall data routing system  must be configured by connecting one or more data collection components  data and one or more data output components  to the data store component . Once connected, the components making up each of the data input module , data output module , and data cache module  groups must next be configured.","The process of initializing the data routing system  will now be described with reference to ","Initially, the data manager  is run to configure the overall system .","The data manager  of the data routing system  next uses the data store property pages  paired with the data store component . The data store property pages  query the data store component  for all entries in the data output module group  category (or optionally queries for each entry directly using the OLE Component Categories) and displays each entry visually in the property page .","Next, after the user selects which data output module or systems  to activate, the list of active data output components  associated with the selected data output module or systems  is sent back to the data store component  so that it may use the active components. The data store component  could optionally query a separate \u2018configuration\u2019 component used to select the active data output modules  to use later when processing data to be output. Additionally, the activation of each active component  may optionally be activated programmatically instead of by the user.","During its initialization, the data store component  creates an instance of each activated data output component  so that the data store component  can send data update events to each upon receiving new cache data.","Similar to the configuration of the data output module group , the data store property pages  query the data input module group  for a list of supported data collection components . Optionally, the data store component  may query the data collection components  of the data input module group  and display each these data collection components  visually so that the user can activate all components  that are appropriate for collecting data.","Once selected visually by the user, the active list of one or more data collection components  is sent to the data store component . Optionally, the data store component  could query a separate \u2018configuration\u2019 component used to select the active data output modules  to use later when processing data to be output. Additionally, the activation of each component may optionally be activated programmatically instead of by the user.","During initialization, the data store component  creates an instance of each active data collection component .","Once the main components data store component , data collection component , and data output component  of the data output module  are configured, the user (or configuration program) must configure the components used by each of the systems , , and . The main configuration task for the data collection component  is that of selecting the data source components  (and the data items supplied by each) from which data is to be collected. The process of configuring the components used by the systems , , and  will now be described with reference to .","The following steps take place when configuring the data collection component  and related components.","First, the data manager  is used to configure the data collection component .","Second, the data collector property pages  are used to configure the data collection component . Optionally, all configuration may be done programmatically by another software module.","Each of the data collector property pages  queries the Data Source OLE Category of components to see what data source components  are available. Optionally, the data collection component  may be queried for the list of all data source components  available.","A visual list of available data source components  is next constructed, thus allowing the user to select which data source component or components  to use when collecting data. Optionally, the data collection component  could directly talk to the data source components ; however such direct communication would reduce code reuse as the data collection component  allows each data source component  to be very thin, making these components  easy to build and maintain.","Finally, after the user selects the data source components  to use, a list of active data source components  is passed to the data collection component , which then creates an instance of each selected component.","Optionally, each data source component  may use an associated property page (not shown) that allows the user to visually (or software to programmatically) configure and select the data inputs from which data is to be collected by each data source component . Each data collector component  may also define a set of data inputs that the user may configure and select; however this it not optimal as the data source components  allow each data collector component  to remain independent of how each data origin actually works; i.e. the data items they provide and how the data for each data item is actually collected.","Referring now to , the following steps take place when configuring the data cache module group , which includes the data store component  thereof. Configuring the data store component  requires the selecting of the data cache  to use. When caching data there are three main methods that may be employed: (1) cache all data to memory only; (2) cache all data to a persistent storage such as a database, or (3) a mixture where data is initially cached to memory and then \u2018rolled-over\u2019 into the persistent store at certain intervals or after a specified amount of data has been collected. All three models are utilized by the data cache module group  of the data routing system , where only one method is necessary to build a picture of the overall state of the data origin at a given moment in time.","In a first step shown in , the data manager  of the data routing system  is used to configure the data store component  and associated components using the embedded data store property page . As described above, the data store component  can be configured to implement all user aspects that it needed to edit and otherwise allow the user interact with the data and configuration managed by the component. However, separating the user interface from the component in a parallel component has several advantages that allow for easily adopting future user-interface based technologies such as HTML, Windows .NET, and thin client. For these reasons the user interface has optionally been separated from the main logic making up the data store component . As generally described above, this same design organization is used throughout the entire system  by all components having an associated property page.","The data store property page  component queries the data store component  for the list of data cache components  that are available and displays the list visually. The list of available components  may optionally be provided programmatically by a separate component used for configuration. As an additional option, the data store property page  may directly query the Cache Category of components in the OLE Component Category.","From the data store property page , the user visually selects the specific data cache components  to use and the specific caching strategy to employ (single caching or roll-over where data from one cache is rolled over to another cache based on certain criteria such as an interval of time, or a data cache data threshold being met). The selected data cache components  and strategy selected by the user are transferred to the data store component  which then stores the settings.","Each data output component  and associated components act as a data output \u2018pipeline\u2019 where data follows a set of steps that determines what data will be output, what format that data will be output in, and where the data will be sent. Referring now to  of the drawing, depicted therein are the steps that take place when configuring the data output component  and its related components.","First, the data manager  is used to configure the various aspects of the data output component  and its associated components.","When configuring the data output component , the data output property page  parallel component acquires the list of inference engine components , data formatter components , and data transport components  that are available. Once the list of data transport, data formatter, and inference engine components , , and  is acquired, a visual display of the list is created on the data output property page  so that the user can select one or more of the components , , and  from the list as appropriate for their application.","To obtain this list of components, the data output property page  may either query the data output component  or directly query the OLE Category for each of the data transport component , data formatter component , and inference engine component . If the data output component  is queried for the list of available components in each category, the data output component  in turn may then internally query a pre-configured list or the OLE components falling into each respective OLE Category for the data transport component , data formatter component , and inference engine component .","After the user selects one or more data transport components , one or more data formatter components , and one or more inference engine components , the list of components to activate is sent to the data output component , which stores the component information as its active components and then creates an instance of each component.","Next, each data transport component  is queried for its list of supported outputs. The list of supported data outputs is then passed to the inference engine component or components  selected.","Next, the data output component  queries the data store component  for its list of supported data items, usually stored in the data cache components  and previously selected when configuring the data collection component . The list of supported input data items is then passed to the inference engine component or components  selected.","When the inference engine component or components  have both the inputs and outputs available, the user may optionally configure rules or other criteria used to determine when each output is \u2018fired\u2019 based on the input data received. As examples, one or more of a set of Fuzzy Logic rules, a previously trained Neural Network pattern, a Genetic Algorithm fitness, Expert System logic, or other custom logic may be used to determine when certain outputs are sent through the data output pipeline to the data destination.","In addition, the data formatter component or components  may also be configured to output data in data formats supported by each data destination . For example, a data formatter component  may be used to output data items received in a certain proprietary schema. However, the data formatter component  would need to be configured so that it would know how to match the data items received to the proprietary schema. This step in the configuration process would allow the user, or another software program, to make this configuration.","And finally, the data transport component or components  would need to be configured so that they could properly send data received to the end data targets that it supported. For example, a data transport component  configured to use TCP\/IP may need to have target TCP\/IP addresses configured or TCP\/IP ports configured telling the component  where to send the data.","Once initialized, the data routing system  is ready to start collecting data and storing all data collected as previously configured.  depict the interactions that take place when collecting data.","First each data source component  either polls for data or receives previously configured events from its data origination. For example, when using the motion system  or an OPC server as the data origin, events may be received telling the data source component  that new data is available.","Upon receiving a data update event, the data source component  fires an event to its respective parent data collection component .","Upon receiving its event, the data collection component  then fires an event to the data store component .","Upon receiving each data update event, the data store component  uses the active caching component or components  to store the data. Optionally, the data cache module  may employ a roll-over strategy in which data received is passed to one or more data cache modules  after a certain criteria is met such as in interval of time passing or a data caching threshold being met.","After caching the data, the data store component  fires a data update event to any data output component or components  connected to the data store system .","Upon receiving the data update event, the data output component  may optionally query the data store component  for more data if needed to gain a full description of the current state of the machines forming the motion system .","All data input information is then passed to the inference engine component  for processing. Upon receiving the data, the inference engine component  runs its preconfigured rule set against the data set received and produces the output (if any) that is eligible to be sent to the data destinations . If the inference engine component  employs a dynamic model of the data, its internal model may alter itself based on the input data received. For example, an inference engine component  that uses a neural network may \u2018learn\u2019 from the data by changing the neural network's weights based on the data input values received.","If data is eligible to be output, and a data formatter component  is used, the output data received from the inference engine component  is then sent to the data formatter component . Upon receiving the data, the data formatter component  transforms the data received into the supported output data format and passes the new output data back to the data output component .","The formatted data is then passed to the data transport component or components  to be transported or sent to the data destinations . If a data formatter component  is not used, the raw data format output from the inference engine component  is used and passed directly to any active data transport component . Upon receiving the output data, the active data transport component or components  send the data to their respective data destinations . For example, a TCP\/IP transport would packetize the data into TCP\/IP packets and send the data stream to a preconfigured TCP\/IP address\/port. Alternatively, a wireless transport may broadcast the data out on a pre-configured frequency.","Referring now to  of the drawing, depicted therein is a relationship among the interface windows and dialogs that form the property pages used to configure the example data routing system . The data manager  presents to the user a main window  () that is used to access the data property pages , , , , , and  used to configure all settings of the data collection component , data store component , and data output component  forming up the system .","The example main window  presented by the data manager  to configure each of the main components , , and  is shown in . In particular, the main page  of the data manager  acts as a control panel that allows the user to configure and monitor how data flows from each data source  to the eventual data destination .","Each of the user interface elements of the main page  on the data manager  will now be described with reference to .","A \u201cConfigure\u201d button  allows the user to configure the overall system  by building up the overall data transfer pipeline. This option is only available when running the application as an Administrator on the system.","A \u201cStart\u201d button  starts monitoring the data source components  and feeds the data received through the system .","A \u201cStop\u201d button  stops monitoring the data source components  and shuts down the entire monitoring process.","A \u201cMonitoring\u201d icon  visually displays whether or not monitoring is currently enabled.","A \u201cClose\u201d button  closes the monitoring application window but does not close the application. Since the application runs as a system tray application, you must exit the application by right clicking on the system tray icon.","A \u201cStatus\u201d window  visually shows the overall configuration and status of the system including all nodes making up the data input module , data store system , and data output module .","The following sections describe how to build and configure the overall system  using examples of the various property pages , , , , , and .","Referring initially to , depicted therein is a configuration dialog window  that is associated with the data manager . The configuration dialog window allows a user to build the overall data routing system . The user interface elements making up the configuration dialog window  are as follows.","An \u201cAdd Data Collector . . . \u201d button  displays a dialog containing a list of all data collection components  available to the system. Once selected, the selected data collection components  are added to the system . The data collection components  are connected to the data store component  so that data events are sent to the data store component  each time data items are received by each of the data collection components  from their respective various data source components .","An \u201cAdd Data Output . . . \u201d button  displays a dialog containing a list of all data output modules  available to the system. Once selected, the data output modules  are added to the system. Each data output module  manages a data pipeline that may involve inference rules or other decision-making technology that tell when to fire each data output.","A \u201cDelete\u201d button  removes a module from the list of components making up the overall data routing system .","A \u201cLoad\u201d button  loads the components of a previously saved data routing system  from a persistent storage medium such as a file or database.","A \u201cSave\u201d button  saves the current data routing system  to a persistent storage medium such as a file or database.","A \u201cClose\u201d button  closes the configuration dialog.","A \u201cNode\u201d control  contains the current modules making up the data routing system , including data collection components , data store components , and data output components .","An \u201cAbout\u201d property page  displays information about the currently selected module in the node list.","A \u201cSettings\u201d property page  displays a property page corresponding to the currently selected node in the node list. The property page allows the user to configure the settings specific to the node selected.","Examples of interface elements that may be used to implement the property pages , , , , , and , as well as other related property pages, will now be described with reference to . The \u201cDelete\u201d, \u201cLoad\u201d, \u201cSave\u201d, and \u201cClose\u201d interface elements depicted in  apply to the \u201cNode\u201d Control on the left part of each figure (not shown) and will not be described in detail below.","An example of the data collector property page  is depicted in  of the drawing. The data collector property page  allows a user to configure the components, such as the data collection components  and\/or data source components , of the data input module group .","A \u201cData Sources\u201d list box  contains a list of all data source components  available to the system. The list of available data source components  is acquired by either directly enumerating the Data Source OLE Category of components or by querying the data collection component  for all data source components  that it \u2018knows\u2019 about.","A \u201cSelect\u201d button  adds the currently selected item in the list of data source components  to the currently selected data output module  in the main node list.","A \u201cTarget Scan Rate\u201d edit field  allows the user to input a global scan rate that applies to all data source components  that may be controlled using a global scan rate.","A data source property page  is depicted in . The data source property page  allows the user to select the data items made available by each data source component . The selected data items are then fed into the data store component  and eventually on into the selected inference engine component . The following user-interface elements make up the data source property page .","A \u201cData Items\u201d list box  contains a list of all data items made available by each data source component . The user must enable the data items that they want to monitor in their system. The list of available data items is acquired by browsing a particular data source component .","A \u201cScan Rate\u201d edit box  allows the user to enter the scan rate to use for this specific data source (which may be different from the global scan rate). If no scan rate is entered, the default global scan rate is used when appropriate.","A data store property page  depicted in  is used to configure the data store component  by selecting and configuring the data cache or caches  used and the specific caching strategies for each. The following user-interface elements make up the data store property page .","A \u201cData Caches\u201d list box  contains a list of all data caches  available to the system . The list of available data caches  may be acquired either by directly enumerating the data cache OLE Category of components or by querying the data store component  for a list of active data caches .","A \u201cSelect\u201d button  adds the currently selected item in the \u201cData Caches\u201d list box  to the currently selected data store component  in the master node list.","Referring now to , depicted therein is a data cache property page  that allows the user to configure the specific caching strategy to be used by each data cache . The following user interface elements make up the data cache property page .","An \u201cEnable data roll-over\u201d check-box  allows the user to enable\/disable data roll-over. When enabled, data placed in a particular data cache  can roll-over into another, or secondary, data cache  upon meeting certain criteria specified by other of the user-interface elements forming the data cache property page .","An \u201cAfter reaching cache data threshold of\u201d radio button , if selected, determines that roll-over occurs when a certain number of bytes are cached in the primary data cache, assuming that data cache roll-over is also enabled by check box . A caching threshold data field allows the user to specify the data cache threshold. After reaching the roll-over threshold level, all data currently in the primary data cache is copied to the secondary data cache ","An \u201cAfter time interval of\u201d radio button , when selected determines that roll-over occurs at specifically set time intervals, again assuming that data cache roll-over is enabled by check box . A time interval data field allows the user to specify the duration of the time interval. Upon the expiration of each time interval all data in the primary data cache is automatically copied over to the secondary data cache and then removed from the primary cache ","A \u201cRoll-over to\u201d list-box  contains a list of data caches that can be used as secondary caches . The primary cache rolls data over to the secondary cache selected by pressing a \u201cSelect\u201d button ","Referring now to , the data output property page  is depicted therein in further detail. The data output property page  is used to configure the data output module  by selecting the data transport components , data formatter component , and inference engine component  that are to make up the data output pipeline. The following user-interface elements make up the data output property page .","An \u201cInterface Engines\u201d list-box  contains a list of all inference engine component or components  that are available to the system . A first \u201cSelect\u201d button allows one or more of the inference engine components  to be selected. As generally described above, each inference engine component  is responsible for mapping input values to output values and determining when each data element should actually be sent to the data destination .","A \u201cData Formatters\u201d list-box  contains a list of all data formatter components  that are available to the system . A second \u201cSelect\u201d button allows one or more of the data formatter components  to be selected. Each data formatter component  is responsible for transforming data input into another data format that is output as output data.","A \u201cData Transports\u201d list-box  contains a list of all data transport components  that are available to the system . A third \u201cSelect\u201d button allows one or more of the data transport components  to be selected. Each data transport component  is responsible for sending the data received to the ultimate data destination , such as an enterprise database, analysis system, another data routing system, or the like.","The inference engine property page  will now be described in further detail with reference to . The inference engine property page  is used to configure the settings defining how the inference engine component  actually works. The inference engine component  maps inputs received to expected outputs defined by the data transport component . When mapping inputs to outputs, the inference engine component  optionally uses decision logic to determine whether or not each output should fire (i.e. be sent on to one or more data transport component ) based on the inputs received. The user interface elements making up the inference engine property page  are as follows.","An \u201cInput Data Items\u201d list-box  contains a list of all data inputs received from the data input module  via the data store component . An \u201cOutput Data Items\u201d list-box  contains a list of all data outputs received from the data output module  via the data transport component . A \u201cRule Map\u201d list-box  contains a list of rules that define how to map the received data inputs to the outputs.","In this sample inference engine component , the user drags items from the Input Data Items list box  into the inputs making up the rule-map as listed in the Rule Map list box . The rule-map associated with each of the items in the Input Data Items list box  defines when to fire output to each defined output.","An example data formatter property page  is depicted in . The data formatter property page  allows the user to configure how the final data output is actually formatted. For example, the example property page  depicted in  illustrate how to map data outputs into an XML schema. The following user interface elements make up the data formatter property page .","An \u201cXML Schema Map\u201d  control contains an editable XML Schema that allows a user to drag an output data item into different portions of the schema essentially \u2018linking\u2019 the data item to that portion of the XML schema. When linked, the final XML data file is built by using the XML schema and then placing data from each output data item into the slots where they are linked into the XML schema.","An \u201cOutput Data Items List\u201d list-box  contains a list of all data outputs available as defined by the data output module  via the data transport component or components .","Depicted in  is an example of a data transport property page . The data transport property page  allows the user to configure the specific settings of each data transport component  used to communicate with the data destination or destinations . The example property page  depicted in  is an example property page for a data transport component  that communicates across a TCP\/IP based (wire-based or wireless) network. The data transport property page employs the following user interface elements.","A \u201cTarget TCP\/IP Address\u201d  edit field allows the user to enter the target TCP\/IP address of the machine or machines forming destinations where data is to be sent.","A \u201cTarget TCP\/IP Port\u201d edit field  allows the user to specify a set of one or more TCP\/IP ports to use on the target TCP\/IP address.","A \u201cUse UDB Broadcasting\u201d radio button  directs the transport to broadcast the output data using the UDP broadcasting protocol and ignore the target TCP\/IP address as data will be sent to all machines forming data destinations  on the network .","A \u201cUse Peer-to-Peer Messaging\u201d radio button  directs the transport to use a peer-to-peer messaging protocol such as the one used with Windows Instant Messenger, where data is sent immediately to the target machine forming the data destination  and may optionally be displayed in an Instant Messenger viewing application such as Windows Messenger.","A \u201cUse Data Streaming\u201d radio button  directs the transport to use a data streaming technology where the data outputs are streamed to the target(s) in a manner similar to that of a streaming music or video source. Optionally, the data outputs may also be interleaved into an existing music, video, or other data streaming data source.","A \u201cUse Virtual Private Networking Tunneling\u201d radio button  directs the transport to use a tunneling technology, where the data packets making up the output data are embedded within another packet type, optionally encrypted and secured, and then sent to the target over another protocol such as HTTP, or in this case the PPTP or L2TP protocol. SOAP or XML messaging is another manner of tunneling where the data is placed within a SOAP or XML \u2018envelope\u2019 and then sent over to the output target using the SOAP or other XML messaging protocol.","A \u201cUse SMTP E-Mail Format\u201d radio button  directs the transport to package the output data sets into an e-mail format and sends it to the target. Further configuration may be required to actually setup a specific e-mail address for the recipient.","A \u201cUse SNMP Format\u201d radio button  directs the transport to use the SNMP transport to communicate with the output target.","An \u201cEnable Data Encryption\u201d check-box  enables data encryption such that the data is encrypted before transmission. A \u201cUse Kerberos Security\u201d check-box  enables Kerberos security. A \u201cUse 128bit Encryption\u201d check-box  enables 128-bit encryption for the output data packets.","An \u201cEnable Transmission Timeout\u201d check-box  enables transmission time-out on each communication with the target. When enabled, the sender only waits for an amount of time specified in a data field for a response from the data destination , after which response data received from the target is ignored.","The example data routing system  is a modular system made up of a set of components as generally described above. In this case, each component is based on a component technology, such as OLE\/COM technology defined by Microsoft Corporation.","Optionally, each component uses a separate \u2018parallel\u2019 ActiveX component to implement all user interface aspects of the main component, also as generally described above. Each ActiveX component may be implemented either within the main component module or separately in its own module. Bundling each object within one module is not required as they may be located at any location (i.e. across a network, and so forth), but doing so may optimize all communication between modules. How and where components are implemented is more of a logistical decision because, once components are built and deployed to the field, it is difficult to update a single component if all components are implemented within a single DLL or EXE module.",{"@attributes":{"id":"p-0158","num":"0157"},"figref":"FIG. 19","b":"120","ul":{"@attributes":{"id":"ul0001","list-style":"none"},"li":{"@attributes":{"id":"ul0001-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0002","list-style":"none"},"li":["Data Input Components\u2014Typically, this category includes a single data collector component, but multiple data input components may be used in a large distributed environment.","Data Source Components\u2014Many data source components are often used at the same time.","Data Output Components\u2014Many data output components are often used at the same time, with each data output component defining at least part of a data output pipeline.","Inference Components\u2014One or more inference engine components are used by each data output component.","Data Formatter Components\u2014One or more data formatter component components are typically used by each data output module.","Data Transport Components\u2014One or more data transport components are typically used by each data output module."]}}}},"The IXMCDirect interface depicted in  is used for most communications between components of the data routing system . The IXMCDirect interface is made up of the following functions, which are specified in standard OLE\/COM IDL format.\n\n","More detailed descriptions of each of the methods implemented by objects implementing the example IXMCDirect interface are described below.","The IXMCDirect::GetProperty method is used to query the property corresponding to the property name \u2018pszPropName\u2019. Each component defines the properties that it supports. The following table summarizes the GetProperty method implemented by the example IXMCDirect interface:",{"@attributes":{"id":"p-0162","num":"0170"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"210pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Syntax","HRESULT GetProperty( LPCTSTR pszPropName,"]},{"entry":[{},"\u2003\u2003\u2003\u2003LPXMC_PARAM_DATA rgData,"]},{"entry":[{},"\u2003\u2003\u2003\u2003DWORD dwCount );"]},{"entry":["Parameters","LPCTSTR pszPropName - string name of the property to query."]},{"entry":[{},"LPXMC_PARAM_DATA rgData - array of XMC_PARAM_DATA"]},{"entry":[{},"types that specify each parameter corresponding to the property."]},{"entry":[{},"For example, a certain property may be made up of a number of"]},{"entry":[{},"elements - in this case an array of XMC_PARAM_DATA items is"]},{"entry":[{},"returned, one for each element making up the property. In most"]},{"entry":[{},"cases a property is made up of a single element, thus a single"]},{"entry":[{},"element array is passed to this method. For more information on"]},{"entry":[{},"the XMC_PARAM_DATA type, see below."]},{"entry":[{},"DWORD dwCount - number of XMC_PARAM_DATA elements in"]},{"entry":[{},"the rgData array."]},{"entry":["Return Value","HRESULT - NOERROR on success, or error code on failure."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"The IXMCDirect::SetProperty method is used to set a property in the component corresponding to the \u2018pszPropName\u2019 property. For the set of properties supported by the component, see the specific component description. The following table summarizes the SetProperty method implemented by the example IXMCDirect interface:",{"@attributes":{"id":"p-0164","num":"0172"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"210pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Syntax","HRESULT SetProperty( LPCTSTR pszPropName,"]},{"entry":[{},"\u2003\u2003\u2003\u2003LPXMC_PARAM_DATA rgData,"]},{"entry":[{},"\u2003\u2003\u2003\u2003DWORD dwCount );"]},{"entry":["Parameters","LPCTSTR pszPropName - string name of the property to set."]},{"entry":[{},"LPXMC_PARAM_DATA rgData - array of XMC_PARAM_DATA"]},{"entry":[{},"types that specify each parameter corresponding to the"]},{"entry":[{},"property. For example, a certain property may be made up of a"]},{"entry":[{},"number of elements - in this case an array of"]},{"entry":[{},"XMC_PARAM_DATA items is returned, one for each element"]},{"entry":[{},"making up the property. In most cases a property is made up"]},{"entry":[{},"of a single element, thus a single element array is passed to"]},{"entry":[{},"this method. For more information on the"]},{"entry":[{},"XMC_PARAM_DATA type, see below."]},{"entry":[{},"DWORD dwCount - number of XMC_PARAM_DATA elements in"]},{"entry":[{},"the rgData array."]},{"entry":["Return Value","HRESULT - NOERROR on success, or error code on failure."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"The IXMCDirect::InvokeMethod method is used to call a specific method implemented by the component. For more information on the methods supported, see the description of the specific component. The following table summarizes the InvokeMethod method implemented by the example IXMCDirect interface:",{"@attributes":{"id":"p-0166","num":"0174"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"210pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Syntax","HRESULT InvokeMethod( DWORD dwMethodIdx,"]},{"entry":[{},"LPXMC_PARAM_DATA rgData,"]},{"entry":[{},"DWORD dwCount );"]},{"entry":["Parameters","DWORD dwMethodIdx - number corresponding to the specific"]},{"entry":[{},"method to invoke. For more information on the method indexes"]},{"entry":[{},"available, see the set of namespaces defined for the component."]},{"entry":[{},"LPXMC_PARAM_DATA rgData [optional] - array of"]},{"entry":[{},"XMC_PARAM_DATA types that specify each parameter for the"]},{"entry":[{},"method called. For more information on the XMC_PARAM_DATA"]},{"entry":[{},"type, see below."]},{"entry":[{},"NOTE: if no parameters exist for the method called, a value of"]},{"entry":[{},"NULL must be passed in."]},{"entry":[{},"DWORD dwCount [optional] - number of XMC_PARAM_DATA"]},{"entry":[{},"elements in the rgData array."]},{"entry":[{},"NOTE: if no parameters exist for the method called, a value of 0"]},{"entry":[{},"(zero) must be passed in for this parameter."]},{"entry":[{},"LPXMC_PARAM_DATA rgData [optional] - namespace associated"]},{"entry":[{},"with the instance of the custom extension module added."]},{"entry":["Return Value","HRESULT - NOERROR on success, or error code on failure."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"This methods supported by each component making up the system  will now be described. Initially, the general methods supported by the majority of the components forming the system  will be first be described; the methods supported by each individual component will then be discussed.","The XMC_DE_BROWSE_GET_COUNT general method returns the number of data items in the browse set supported by the component and is described in the following table.",{"@attributes":{"id":"p-0169","num":"0177"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"182pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Index","8020"]},{"entry":["Data In","None"]},{"entry":["Data Out","rgData[0] - (number) DWORD, number of browse elements."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"The XMC_DE_BROWSE_GET_ITEMS general method returns the number of data items in the browse set supported by the component and is described in the following table:",{"@attributes":{"id":"p-0171","num":"0179"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"182pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Index","8021"]},{"entry":["Data In","rgData[0] - (number) DWORD, maximum number of"]},{"entry":[{},"elements to collect."]},{"entry":["Data Out","rgData[0] - (number) number of elements collected, total"]},{"entry":[{},"number of elements will equal (rgData[0] * 2 + 1)."]},{"entry":[{},"rgData[1] - (string) name of the first browse element."]},{"entry":[{},"rgData[2] - (number) adt of the first browse element."]},{"entry":[{},"rgData[1 + n * 2] - (string) name of the n'th browse element."]},{"entry":[{},"rgData[2 + n * 2] - (number) adt of the n'th browse element."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"The XMC_DE_SYSTEM_CONNECT_CMPNT general method is used to connect one server to another so that they may interact with one another and is described in the following table:",{"@attributes":{"id":"p-0173","num":"0181"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Index","8000"]},{"entry":["Data In","rgData[0] - (number) DWORD, type of component. The type of"]},{"entry":[{},"component is a value that is server specific. For component type"]},{"entry":[{},"information, see the description for this method under each"]},{"entry":[{},"server's description."]},{"entry":[{},"rgData[1] - (string) LPTSTR, component class id as an"]},{"entry":[{},"ASCII string."]},{"entry":["Data","None."]},{"entry":"Out"},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"The XMC_DE_SYSTEM_DISCONNECT_CMPNT general method is used to disconnect one server from another so that they stop interacting with one another and is described in the following table:",{"@attributes":{"id":"p-0175","num":"0183"},"tables":{"@attributes":{"id":"TABLE-US-00007","num":"00007"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Index","8001"]},{"entry":["Data In","rgData[0] - (number) DWORD, type of component."]},{"entry":[{},"The type of component is a value that is server specific."]},{"entry":[{},"For component type information, see the description for this"]},{"entry":[{},"method under each server's description."]},{"entry":[{},"rgData[1] - (string) LPTSTR, component class id as an"]},{"entry":[{},"ASCII string."]},{"entry":["Data Out","None."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"The XMC_DE_DATA_PROCESS general method is called by a client to process data where a data set is input, processed in some way by the server, and then the resulting data is returned as output. The XMC_DE_DATA_PROCESS method is described in the following table:",{"@attributes":{"id":"p-0177","num":"0185"},"tables":{"@attributes":{"id":"TABLE-US-00008","num":"00008"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"182pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Index","8063"]},{"entry":["Data In","rgData[0] - (number) DWORD, number of data items input."]},{"entry":[{},"rgData[1 + n * 2] - (string) LPCTSTR, name of the data"]},{"entry":[{},"item input."]},{"entry":[{},"rgData[2 + n * 2] - (number or string), value of the data item."]},{"entry":["Data Out","rgData[0] - (number) DWORD, number of data items output."]},{"entry":[{},"rgData[1 + n * 2] - (string) LPCTSTR, name of the data"]},{"entry":[{},"item output."]},{"entry":[{},"rgData[2 + n * 2] - (number) value of the data item."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"The XMC_DE_DATA_PROCESS_CONFIGURE general method is used to configure what type of data is returned when processing a given data item. For example in the server may be configured to return the minimal amount of data on each read (i.e. just the data item value), or the server may be requested to return more substantial data. The XMC_DE_DATA_PROCESS_CONFIGURE method is described in the following table:",{"@attributes":{"id":"p-0179","num":"0187"},"tables":{"@attributes":{"id":"TABLE-US-00009","num":"00009"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"182pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Index","8062"]},{"entry":["Data In","rgData[0] - (number) DWORD, flag describing the type of"]},{"entry":[{},"data to be returned when processing data. The following flags"]},{"entry":[{},"are supported:"]},{"entry":[{},"XMC_DE_READ_DATA_FLAG_TIMESTAMP -"]},{"entry":[{},"requests that the time stamp recorded when processing the"]},{"entry":[{},"data is returned."]},{"entry":[{},"NOTE: by default, the data item value is always returned."]},{"entry":["Data Out","None."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"The XMC_DE_DATA_READ general method is called by a client application to poll for data from the server and is defined in the following table:",{"@attributes":{"id":"p-0181","num":"0189"},"tables":{"@attributes":{"id":"TABLE-US-00010","num":"00010"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"182pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Index","8061"]},{"entry":["Data In","rgData[0] - (string) LPCTSTR, name of the data item to read."]},{"entry":["Data Out","rgData[0] - (number or string), data item value."]},{"entry":[{},"rgData[1] - (OPTIONAL number) DWORD, data item"]},{"entry":[{},"time-stamp as a system time value."]},{"entry":[{},"NOTE: Since the last items are optional, only those items"]},{"entry":[{},"specified when configuring the data to receive are actually"]},{"entry":[{},"sent."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"The XMC_DE_DATA_READ_CONFIGURE general method is used to configure what type of data is returned when reading a given data item. For example, the server may be configured to return the minimal amount of data on each read (i.e. just the data item value) or the server may be requested to return more substantial data. The following table defines the XMC_DE_DATA_READ_CONFIGURE method:",{"@attributes":{"id":"p-0183","num":"0191"},"tables":{"@attributes":{"id":"TABLE-US-00011","num":"00011"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"182pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Index","8060"]},{"entry":["Data In","rgData[0] - (number) DWORD, flag describing the type of"]},{"entry":[{},"data to be returned on each read. The following flags are"]},{"entry":[{},"supported:"]},{"entry":[{},"XMC_DE_READ_DATA_FLAG_TIMESTAMP -"]},{"entry":[{},"requests that the time stamp recorded when reading the data is"]},{"entry":[{},"returned."]},{"entry":[{},"NOTE: by default, the data item value is always returned."]},{"entry":["Data Out","None."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"The XMC_DE_DATA_WRITE general method is used to write data to a server and is described in the following table:",{"@attributes":{"id":"p-0185","num":"0193"},"tables":{"@attributes":{"id":"TABLE-US-00012","num":"00012"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"182pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Index","8064"]},{"entry":["Data In","rgData[0] - (number) DWORD, number of data items."]},{"entry":[{},"rgData[1 + n * 2] - (string) LPCTSTR, name of the data item."]},{"entry":[{},"rgData[2 + n * 2] - (number or string), value of the data item."]},{"entry":["Data Out","None."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"The XMC_DE_EVENT_ENABLE general method enables\/disables a previously subscribed data item in the subscription list maintained by the server. Only enabled subscriptions actually fire. The XMC_DE_EVENT_ENABLE method is defined in the following table:",{"@attributes":{"id":"p-0187","num":"0195"},"tables":{"@attributes":{"id":"TABLE-US-00013","num":"00013"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"182pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Index","2892"]},{"entry":["Data In","rgData[0] - (number) DWORD, cookie (unique identifier)"]},{"entry":[{},"associated with the subscription. This value is returned to the"]},{"entry":[{},"client when calling the subscription XMCAPI above."]},{"entry":[{},"NOTE: using a cookie value of zero (0) will enable\/disable"]},{"entry":[{},"ALL items subscribed to the server."]},{"entry":[{},"rgData[1] - (number) BOOL, TRUE to enable the"]},{"entry":[{},"subscription(s), FALSE to disable the subscription(s)."]},{"entry":[{},"Only enabled subscriptions actually fire events."]},{"entry":["Data Out","None."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"This XMC_DE_EVENT_RECEIVE_DATA general method is called by the server (and implemented by the client) when each subscribed event fires and is described in the following table:",{"@attributes":{"id":"p-0189","num":"0197"},"tables":{"@attributes":{"id":"TABLE-US-00014","num":"00014"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Index","8045"]},{"entry":["Data","rgData[0] - (number) DWORD, subscription cookie corresponding"]},{"entry":["In","to the subscribed data item."]},{"entry":[{},"rgData[1] - (number or string), data item value."]},{"entry":[{},"rgData[2] - (OPTIONAL number) DWORD, data item time-stamp"]},{"entry":[{},"as a system time value."]},{"entry":[{},"rgData[3] - (OPTIONAL string) LPSTR, data item ASCII"]},{"entry":[{},"text name."]},{"entry":[{},"rgData[4] - (OPTIONAL number) DWORD, data item unique"]},{"entry":[{},"cookie."]},{"entry":[{},"NOTE: Since the last three items are optional, only those items"]},{"entry":[{},"specified when configuring the data to receive are actually sent. If,"]},{"entry":[{},"for example, one or more data items are NOT requested, then the"]},{"entry":[{},"items are returned in slots shifted up toward rgData[1]. For"]},{"entry":[{},"example if only the data item name is requested in addition to the"]},{"entry":[{},"default data items, the data returned would look like the following:"]},{"entry":[{},"rgData[0] - (number) DWORD, subscription cookie."]},{"entry":[{},"rgData[1] - (number or string), data item value."]},{"entry":[{},"rgData[2] - (string) LPSTR, data item name."]},{"entry":["Data","None."]},{"entry":"Out"},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"The XMC_DE_EVENT_RECEIVE_DATA_CONFIGURE general method is used to configure what type of data is returned on each event that is fired. For example in the server may be configured to send the minimal amount of data on each event (i.e. subscription cookie and data item value), or the server may be requested to return more substantial data. The XMC_DE_EVENT_RECEIVE_DATA_CONFIGURE method is defined in the following table:",{"@attributes":{"id":"p-0191","num":"0199"},"tables":{"@attributes":{"id":"TABLE-US-00015","num":"00015"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"182pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Index","8044"]},{"entry":["Data In","rgData[0] - (number) DWORD, flag describing the type of"]},{"entry":[{},"data to be returned on each event. The following flags are"]},{"entry":[{},"supported:"]},{"entry":[{},"XMC_DE_EVENT_DATA_FLAG_TIMESTAMP -"]},{"entry":[{},"requests that the time stamp recorded when reading the data is"]},{"entry":[{},"returned."]},{"entry":[{},"XMC_DE_EVENT_DATA_FLAG_NAME - requests"]},{"entry":[{},"that the data items ASCII text name be returned."]},{"entry":[{},"XMC_DE_EVENT_DATA_FLAG_DATA_COOKIE -"]},{"entry":[{},"requests that the unique data item cookie corresponding"]},{"entry":[{},"to the read made for the data item be returned."]},{"entry":[{},"NOTE: by default, the subscription cookie and data item"]},{"entry":[{},"value are always returned."]},{"entry":["Data Out","None."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"The XMC_DE_EVENT_SUBSCRIBE general method subscribes to a given data item activating the event interface when the subscription criteria are met for the data item. All subscribing components use the IXMCDirect interface to receive events received from the server for which they are subscribed. The XMC_DE_EVENT_SUBSCRIBE method is described in the following table:",{"@attributes":{"id":"p-0193","num":"0201"},"tables":{"@attributes":{"id":"TABLE-US-00016","num":"00016"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Index","2890"]},{"entry":["Data","rgData[0] - (number) DWORD, flags describing the initial state of"]},{"entry":["In","the subscription. The following flags are supported:"]},{"entry":[{},"XMC_DE_EVENT_FLAG_ENABLED - subscription is"]},{"entry":[{},"immediately enabled upon subscription."]},{"entry":[{},"XMC_DE_EVENT_FLAG_DISABLED - subscription is"]},{"entry":[{},"disabled upon making the subscription. The Enable function must"]},{"entry":[{},"be called to enable the subscription."]},{"entry":[{},"rgData[1] \u2014(number) DWORD, number of subscription criteria"]},{"entry":[{},"rules."]},{"entry":[{},"rgData[2 + (2 * n)] - (number) DWORD, event condition type"]},{"entry":[{},"where the following types are supported:"]},{"entry":[{},"XMC_CNC_EVENTCONDITION_DATA_CHANGE - any"]},{"entry":[{},"data changes in the data type above will trigger the event."]},{"entry":[{},"XMC_CNC_EVENTCONDITION_DATA_EQUAL"]},{"entry":[{},"XMC_CNC_EVENTCONDITION_DATA_LESSTHAN"]},{"entry":[{},"XMC_CNC_EVENTCONDITION_DATA_GREATERTHAN"]},{"entry":[{},"XMC_CNC_EVENTCONDITION_DATA_AND"]},{"entry":[{},"XMC_CNC_EVENTCONDITION_DATA_OR"]},{"entry":[{},"Each of the conditions above are used in a combined manner."]},{"entry":[{},"Where the logical condition (=, <, >) are applied for each type"]},{"entry":[{},"respectively."]},{"entry":[{},"For example, in an array that contains the following items:"]},{"entry":[{},"rgData[2] = 4 (4 condition values)"]},{"entry":[{},"rgData[3] = XMC_CNC_EVENTCONDITION_EQUAL"]},{"entry":[{},"rgData[4] = 3.0"]},{"entry":[{},"rgData[5] = XMC_CNC_EVENTCONDITION_LESSTHAN"]},{"entry":[{},"rgData[6] = 3.0"]},{"entry":[{},"rgData[7] = XMC_CNC_EVENTCONDITION_OR"]},{"entry":[{},"rgData[8] = 1.0"]},{"entry":[{},"rgData[9] ="]},{"entry":[{},"XMC_CNC_EVENTCONDITION_GREATHERTHAN"]},{"entry":[{},"rgData[10] = 5.0"]},{"entry":[{},"the array would be evaluated using the following logic:"]},{"entry":[{},"If (DATA <= 3.0 OR DATA >5.0) then Trigger Event"]},{"entry":[{},"rgData[3 + (2 * n)] - (number) double, the value for the condition."]},{"entry":[{},"See above."]},{"entry":["Data","rgData[0] - (number) DWORD, cookie (unique identifier)"]},{"entry":["Out","representing the subscription."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"The XMC_DE_EVENT_UNSUBSCRIBE general method removes a previously subscribed data item from the subscription list maintained by the server and is defined in the following table:",{"@attributes":{"id":"p-0195","num":"0203"},"tables":{"@attributes":{"id":"TABLE-US-00017","num":"00017"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"182pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Index","2891"]},{"entry":["Data In","rgData[0] - (number) DWORD, cookie (unique identifier)"]},{"entry":[{},"associated with the subscription. This value is returned to the"]},{"entry":[{},"client when calling the subscription XMCAPI above."]},{"entry":[{},"NOTE: using a cookie value of zero (0) will unsubscribe"]},{"entry":[{},"ALL items subscribed to the server."]},{"entry":["Data Out","None."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"The XMC_DE_SYSTEM_INITIALIZEHW general method is used to initialize any hardware systems associated with the component and is defined in the following table:",{"@attributes":{"id":"p-0197","num":"0205"},"tables":{"@attributes":{"id":"TABLE-US-00018","num":"00018"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"84pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Index","500"]},{"entry":[{},"Data In","None."]},{"entry":[{},"Data Out","None."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"The XMC_DE_SYSTEM_SHUTDOWNHW general method is used to shutdown any hardware systems associated with the component and is defined by the following table:",{"@attributes":{"id":"p-0199","num":"0207"},"tables":{"@attributes":{"id":"TABLE-US-00019","num":"00019"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"84pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Index","501"]},{"entry":[{},"Data","None."]},{"entry":[{},"In"]},{"entry":[{},"Data","None."]},{"entry":[{},"Out"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"The following discussion will define which of the general methods implemented are implemented by particular components of the system .","The data collection component  implements the general methods described above as indicated in the following table:",{"@attributes":{"id":"p-0202","num":"0210"},"tables":{"@attributes":{"id":"TABLE-US-00020","num":"00020"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"42pt","align":"center"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":[{},{},"Not"]},{"entry":["Method","Implemented","Implemented"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["XMC_DE_BROWSE_GET_COUNT","x",{}]},{"entry":["XMC_DE_BROWSE_GET_ITEMS","x"]},{"entry":["XMC_DE_DATA_PROCESS",{},"x"]},{"entry":["XMC_DE_DATA_PROCESS_CONFIGURE",{},"x"]},{"entry":["XMC_DE_DATA_READ","x"]},{"entry":["XMC_DE_DATA_READ_CONFIGURE","x"]},{"entry":["XMC_DE_DATA_WRITE",{},"x"]},{"entry":["XMC_DE_EVENT_ENABLE","x"]},{"entry":["XMC_DE_EVENT_RECEIVE_DATA","x"]},{"entry":["XMC_DE_EVENT_RECEIVE_DATA_CONFIGURE","x"]},{"entry":["XMC_DE_EVENT_SUBSCRIBE","x"]},{"entry":["XMC_DE_EVENT_UNSUBSCRIBE","x"]},{"entry":["XMC_DE_SYSTEM_CONNECT_CMPNT","x"]},{"entry":["XMC_DE_SYSTEM_DISCONNECT_CMPNT","x"]},{"entry":["XMC_DE_SYSTEM_INITIALIZEHW",{},"x"]},{"entry":["XMC_DE_SYSTEM_SHUTDOWNHW",{},"x"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}}},"The following special notes apply to some of the general methods implemented by the data collection component .","The following component types are valid for the XMC_DE_SYSTEM_CONNECT_CMPNT method as implemented by the data collection component : the XMC_DE_CMPNT_TYPE_XMCDSRC, which specifies a data source component .","The following component types are valid for the XMC_DE_SYSTEM_DISCONNECT_CMPNT method as implemented by the data collection component : XMC_DE_CMPNT_TYPE_XMCDSRC, which specifies an data source component .","The data source component  implements the general methods described above as indicated in the following table:",{"@attributes":{"id":"p-0207","num":"0215"},"tables":{"@attributes":{"id":"TABLE-US-00021","num":"00021"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"42pt","align":"center"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":[{},{},"Not"]},{"entry":["Method","Implemented","Implemented"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["XMC_DE_BROWSE_GET_COUNT","x",{}]},{"entry":["XMC_DE_BROWSE_GET_ITEMS","x"]},{"entry":["XMC_DE_DATA_PROCESS",{},"x"]},{"entry":["XMC_DE_DATA_PROCESS_CONFIGURE",{},"x"]},{"entry":["XMC_DE_DATA_READ","x"]},{"entry":["XMC_DE_DATA_READ_CONFIGURE","x"]},{"entry":["XMC_DE_DATA_WRITE",{},"x"]},{"entry":["XMC_DE_EVENT_ENABLE","x"]},{"entry":["XMC_DE_EVENT_RECEIVE_DATA","x"]},{"entry":["XMC_DE_EVENT_RECEIVE_DATA_CONFIGURE","x"]},{"entry":["XMC_DE_EVENT_SUBSCRIBE","x"]},{"entry":["XMC_DE_EVENT_UNSUBSCRIBE","x"]},{"entry":["XMC_DE_SYSTEM_CONNECT_CMPNT",{},"x"]},{"entry":["XMC_DE_SYSTEM_DISCONNECT_CMPNT",{},"x"]},{"entry":["XMC_DE_SYSTEM_INITIALIZEHW","x"]},{"entry":["XMC_DE_SYSTEM_SHUTDOWNHW","x"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}}},"There are no special notes for the methods implemented by the data source components .","The data store component  implements the general methods described above as indicated in the following table:",{"@attributes":{"id":"p-0210","num":"0218"},"tables":{"@attributes":{"id":"TABLE-US-00022","num":"00022"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"42pt","align":"center"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":[{},{},"Not"]},{"entry":["Method","Implemented","Implemented"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["XMC_DE_BROWSE_GET_COUNT","x",{}]},{"entry":["XMC_DE_BROWSE_GET_ITEMS","x"]},{"entry":["XMC_DE_DATA_PROCESS",{},"x"]},{"entry":["XMC_DE_DATA_PROCESS_CONFIGURE",{},"x"]},{"entry":["XMC_DE_DATA_READ","x"]},{"entry":["XMC_DE_DATA_READ_CONFIGURE","x"]},{"entry":["XMC_DE_DATA_WRITE",{},"x"]},{"entry":["XMC_DE_EVENT_ENABLE","x"]},{"entry":["XMC_DE_EVENT_RECEIVE_DATA","x"]},{"entry":["XMC_DE_EVENT_RECEIVE_DATA_CONFIGURE","x"]},{"entry":["XMC_DE_EVENT_SUBSCRIBE","x"]},{"entry":["XMC_DE_EVENT_UNSUBSCRIBE","x"]},{"entry":["XMC_DE_SYSTEM_CONNECT_CMPNT","x"]},{"entry":["XMC_DE_SYSTEM_DISCONNECT_CMPNT","x"]},{"entry":["XMC_DE_SYSTEM_INITIALIZEHW",{},"x"]},{"entry":["XMC_DE_SYSTEM_SHUTDOWNHW",{},"x"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}}},"The following special notes apply to each of the general methods implemented by the data store component .","The following component types are valid for the XMC_DE_SYSTEM_CONNECT_CMPNT method on the data store component :\n\n","The following component types are valid for the XMC_DE_SYSTEM_DISCONNECT_CMPNT method as implemented by the data store component :\n\n","The data store component  implements the general methods described above as indicated in the following table:",{"@attributes":{"id":"p-0215","num":"0229"},"tables":{"@attributes":{"id":"TABLE-US-00023","num":"00023"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"42pt","align":"center"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":[{},{},"Not"]},{"entry":["Method","Implemented","Implemented"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["XMC_DE_BROWSE_GET_COUNT","x",{}]},{"entry":["XMC_DE_BROWSE_GET_ITEMS","x"]},{"entry":["XMC_DE_DATA_PROCESS",{},"x"]},{"entry":["XMC_DE_DATA_PROCESS_CONFIGURE",{},"x"]},{"entry":["XMC_DE_DATA_READ","x"]},{"entry":["XMC_DE_DATA_READ_CONFIGURE","x"]},{"entry":["XMC_DE_DATA_WRITE","x"]},{"entry":["XMC_DE_EVENT_ENABLE","x"]},{"entry":["XMC_DE_EVENT_RECEIVE_DATA","x"]},{"entry":["XMC_DE_EVENT_RECEIVE_DATA_CONFIGURE","x"]},{"entry":["XMC_DE_EVENT_SUBSCRIBE","x"]},{"entry":["XMC_DE_EVENT_UNSUBSCRIBE","x"]},{"entry":["XMC_DE_SYSTEM_CONNECT_CMPNT",{},"x"]},{"entry":["XMC_DE_SYSTEM_DISCONNECT_CMPNT",{},"x"]},{"entry":["XMC_DE_SYSTEM_INITIALIZEHW",{},"x"]},{"entry":["XMC_DE_SYSTEM_SHUTDOWNHW",{},"x"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}}},"There are no special notes for the methods implemented by the data store component .","The data output component  implements the general methods described above as indicated in the following table:",{"@attributes":{"id":"p-0218","num":"0232"},"tables":{"@attributes":{"id":"TABLE-US-00024","num":"00024"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"42pt","align":"center"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":[{},{},"Not"]},{"entry":["Method","Implemented","Implemented"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["XMC_DE_BROWSE_GET_COUNT","x",{}]},{"entry":["XMC_DE_BROWSE_GET_ITEMS","x"]},{"entry":["XMC_DE_DATA_PROCESS",{},"x"]},{"entry":["XMC_DE_DATA_PROCESS_CONFIGURE",{},"x"]},{"entry":["XMC_DE_DATA_READ","x"]},{"entry":["XMC_DE_DATA_READ_CONFIGURE","x"]},{"entry":["XMC_DE_DATA_WRITE",{},"x"]},{"entry":["XMC_DE_EVENT_ENABLE","x"]},{"entry":["XMC_DE_EVENT_RECEIVE_DATA","x"]},{"entry":["XMC_DE_EVENT_RECEIVE_DATA_CONFIGURE","x"]},{"entry":["XMC_DE_EVENT_SUBSCRIBE","x"]},{"entry":["XMC_DE_EVENT_UNSUBSCRIBE","x"]},{"entry":["XMC_DE_SYSTEM_CONNECT_CMPNT","x"]},{"entry":["XMC_DE_SYSTEM_DISCONNECT_CMPNT","x"]},{"entry":["XMC_DE_SYSTEM_INITIALIZEHW",{},"x"]},{"entry":["XMC_DE_SYSTEM_SHUTDOWNHW",{},"x"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}}},"The following special notes methods apply to the general methods as implemented by the data output component .","The following component types are valid for the XMC_DE_SYSTEM_CONNECT_CMPNT as implemented by the data output component :\n\n","The following component types are valid for the XMC_DE_SYSTEM_DISCONNECT_CMPNT as implemented by the data output component :\n\n","The inference engine component  implements the general methods described above as indicated in the following table:",{"@attributes":{"id":"p-0223","num":"0243"},"tables":{"@attributes":{"id":"TABLE-US-00025","num":"00025"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"42pt","align":"center"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":[{},{},"Not"]},{"entry":["Method","Implemented","Implemented"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["XMC_DE_BROWSE_GET_COUNT","x",{}]},{"entry":["XMC_DE_BROWSE_GET_ITEMS","x"]},{"entry":["XMC_DE_DATA_PROCESS","x"]},{"entry":["XMC_DE_DATA_PROCESS_CONFIGURE","x"]},{"entry":["XMC_DE_DATA_READ",{},"x"]},{"entry":["XMC_DE_DATA_READ_CONFIGURE",{},"x"]},{"entry":["XMC_DE_DATA_WRITE","x"]},{"entry":["XMC_DE_EVENT_ENABLE",{},"x"]},{"entry":["XMC_DE_EVENT_RECEIVE_DATA",{},"x"]},{"entry":["XMC_DE_EVENT_RECEIVE_DATA_CONFIGURE",{},"x"]},{"entry":["XMC_DE_EVENT_SUBSCRIBE",{},"x"]},{"entry":["XMC_DE_EVENT_UNSUBSCRIBE",{},"x"]},{"entry":["XMC_DE_SYSTEM_CONNECT_CMPNT",{},"x"]},{"entry":["XMC_DE_SYSTEM_DISCONNECT_CMPNT",{},"x"]},{"entry":["XMC_DE_SYSTEM_INITIALIZEHW",{},"x"]},{"entry":["XMC_DE_SYSTEM_SHUTDOWNHW",{},"x"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}}},"There are no special notes for the methods implemented by the inference engine component .","The data formatter component  implements the general methods described above as indicated in the following table:",{"@attributes":{"id":"p-0226","num":"0246"},"tables":{"@attributes":{"id":"TABLE-US-00026","num":"00026"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"42pt","align":"center"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":[{},{},"Not"]},{"entry":["Method","Implemented","Implemented"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["XMC_DE_BROWSE_GET_COUNT","x",{}]},{"entry":["XMC_DE_BROWSE_GET_ITEMS","x"]},{"entry":["XMC_DE_DATA_PROCESS","x"]},{"entry":["XMC_DE_DATA_PROCESS_CONFIGURE","x"]},{"entry":["XMC_DE_DATA_READ",{},"x"]},{"entry":["XMC_DE_DATA_READ_CONFIGURE",{},"x"]},{"entry":["XMC_DE_DATA_WRITE","x"]},{"entry":["XMC_DE_EVENT_ENABLE",{},"x"]},{"entry":["XMC_DE_EVENT_RECEIVE_DATA",{},"x"]},{"entry":["XMC_DE_EVENT_RECEIVE_DATA_CONFIGURE",{},"x"]},{"entry":["XMC_DE_EVENT_SUBSCRIBE",{},"x"]},{"entry":["XMC_DE_EVENT_UNSUBSCRIBE",{},"x"]},{"entry":["XMC_DE_SYSTEM_CONNECT_CMPNT",{},"x"]},{"entry":["XMC_DE_SYSTEM_DISCONNECT_CMPNT",{},"x"]},{"entry":["XMC_DE_SYSTEM_INITIALIZEHW",{},"x"]},{"entry":["XMC_DE_SYSTEM_SHUTDOWNHW",{},"x"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}}},"There are no special notes for the methods implemented by the data formatter component .","The data transport component  implements the general methods described above as indicated in the following table:",{"@attributes":{"id":"p-0229","num":"0249"},"tables":{"@attributes":{"id":"TABLE-US-00027","num":"00027"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"42pt","align":"center"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":[{},{},"Not"]},{"entry":["Method","Implemented","Implemented"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["XMC_DE_BROWSE_GET_COUNT","x",{}]},{"entry":["XMC_DE_BROWSE_GET_ITEMS","x"]},{"entry":["XMC_DE_DATA_PROCESS",{},"x"]},{"entry":["XMC_DE_DATA_PROCESS_CONFIGURE",{},"x"]},{"entry":["XMC_DE_DATA_READ",{},"x"]},{"entry":["XMC_DE_DATA_READ_CONFIGURE",{},"x"]},{"entry":["XMC_DE_DATA_WRITE","x"]},{"entry":["XMC_DE_EVENT_ENABLE",{},"x"]},{"entry":["XMC_DE_EVENT_RECEIVE_DATA",{},"x"]},{"entry":["XMC_DE_EVENT_RECEIVE_DATA_CONFIGURE",{},"x"]},{"entry":["XMC_DE_EVENT_SUBSCRIBE",{},"x"]},{"entry":["XMC_DE_EVENT_UNSUBSCRIBE",{},"x"]},{"entry":["XMC_DE_SYSTEM_CONNECT_CMPNT",{},"x"]},{"entry":["XMC_DE_SYSTEM_DISCONNECT_CMPNT",{},"x"]},{"entry":["XMC_DE_SYSTEM_INITIALIZEHW",{},"x"]},{"entry":["XMC_DE_SYSTEM_SHUTDOWNHW",{},"x"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}}},"There are no special notes for the methods implemented by the data transport component .","All methods exposed by each component in the example data routing system  use a standard parameter set to describe data used to set and query properties as well as to invoke methods. The standard parameters are in the following format:","pObj->InvokeMethod(LPXMC_PARAM_DATA rgData, DWORD dwCount);","Each element in the rgData array corresponds to a parameter, with the first element in the array corresponding to the first parameter.","The XMC_PARAM_DATA structure can contain either a numerical or a string value and is defined as follows:",{"@attributes":{"id":"p-0235","num":"0255"},"tables":{"@attributes":{"id":"TABLE-US-00028","num":"00028"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"typedef struct tagXMC_PARAM_DATA"]},{"entry":[{},"{"]},{"entry":[{},"\u2003LNG_PARAM_DATATYPE adt;"]},{"entry":[{},"\u2003union"]},{"entry":[{},"\u2003{"]},{"entry":[{},"\u2003\u2003double df;"]},{"entry":[{},"\u2003\u2003LPTSTR psz;"]},{"entry":[{},"\u2003};"]},{"entry":[{},"}XMC_PARAM_DATA;"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"The \u2018adt\u2019 member of the XMC_PARAM_DATA structure describes the data contained within the XMC_PARAM_DATA structure. The values are described below:",{"@attributes":{"id":"p-0237","num":"0257"},"tables":{"@attributes":{"id":"TABLE-US-00029","num":"00029"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["LNG_PARAM_DATATYPE","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["LNG_ADT_NUMBER","Use this value when passing a numerical value via"]},{"entry":[{},"the \u2018adt\u2019 member of the XMC_PARAM_DATA"]},{"entry":[{},"structure."]},{"entry":["LNG_ADT_STAT_STRING","Use this value when passing a static string value via"]},{"entry":[{},"the \u2018psz\u2019 member of the XMC_PARAM_DATA"]},{"entry":[{},"structure. Static strings do not need to be freed from"]},{"entry":[{},"memory."]},{"entry":["LNG_ADT_MEM_STRING","Use this value when passing a string value via the"]},{"entry":[{},"\u2018psz\u2019 member of the XMC_PARAM_DATA structure."]},{"entry":[{},"LNG_ADT_MEM_STRING denotes that the string"]},{"entry":[{},"must be freed from memory during cleanup."]},{"entry":["LNG_ADT_NOP","This value is used to ignore items within the"]},{"entry":[{},"XMC_PARAM_DATA array. When specifies, this"]},{"entry":[{},"parameter is not used."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"When querying and setting boolean TRUE\/FALSE values, any non-zero value is considered TRUE, whereas a zero value is considered FALSE.","As described herein, the data routing system  is designed to collect data from one or more data origins , perform some decision logic on the data collected, and then send the data to one or more data destinations  based on the outcome of the decision logic run on the data inputs.","For example, data inputs may be data items describing the current state of a machine tool, automobile or other machine as shown in . The decision logic would then use these data inputs to determine the overall health or efficiency of the machine. Data outputs would be used to describe the machine's health or efficiency. This model thus operates as a data \u2018router\u2019, where data is routed from one or more input to one or more output based on the decision logic run on the inputs. Typically this model is used to \u2018cook-down\u2019 a wide array of data inputs that are very detailed in nature, to a more general set of data outputs that describe the overall performance, state or behavior of the machine.","However, this overall model can easily run in the reverse where the data input and output roles are reversed. In such an example, as generally shown in  the inputs are general in nature and then decision logic is used to determine the specific detailed outputs necessary to carry out a given behavior or action or to enter a given state.","For example using the latter model, a general input to a machine tool may be something like \u2018mill a pocket\u2019 at a certain point. The decision logic in turn would then figure out all of the necessary tools, feedrate, spindlerate and moves necessary to create the pocket on the part. Once determined, the decision logic would \u2018output\u2019 the values as a set of detailed output values such as the specific feedrate, the specific spindlerate and the move profile to use. Each output would then be sent directly to the machine controller hardware that actually ran the servo algorithms to move the tool and cut the part.","In another example, general inputs may be used to direct the path for which a car, airplane, ship or other mobile machine moved to a given destination. For example, a general set of instructions would make up the inputs such as follow road \u2018x\u2019 to intersection \u2018y\u2019, turn left at intersection \u2018y\u2019, drive to house \u2018b\u2019. The decision logic in this example would then be used to determine how to drive along road \u2018x\u2019 (making sure to track the right hand side of the road by following the yellow or white lines painted on the road), decision logic would determine when the intersection sought had been reached, how to negotiate the turn and drive to house \u2018b\u2019. When making each of these decisions the decision logic system would more than likely require additional, more detailed input from sensor systems. Each output could then take a more detailed form such as the speed that the car or other mobile should drive, and the steering adjustments needed to track and follow the desired path on the selected road.","One of ordinary skill in the art will recognize that the present invention may be embodied in forms other than those described above. The scope of the invention should be determined by the following claims and not the foregoing detailed description of the example embodiments."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"DETAILED DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":["FIGS. 3-8","FIG. 2"]},{"@attributes":{"id":"p-0015","num":"0014"},"figref":["FIGS. 9-19","FIG. 2"]},{"@attributes":{"id":"p-0016","num":"0015"},"figref":["FIGS. 20 and 21","FIGS. 1 and 2"]}]},"DETDESC":[{},{}]}
