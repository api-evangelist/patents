---
title: Restricting class inheritance relationships
abstract: In an embodiment, a system may include a processor having memory storing processor-executable instructions for a programming environment. The processor may perform the following instructions. A first, second, and third class may be defined. The second class may be defined as being compatible with the first class. The third class may be defined as being incompatible with the first class. A fourth class may be defined as a subclass of both the first class and the second class. A fifth class may be prevented from being a subclass of both the first class and the third class.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09015661&OS=09015661&RS=09015661
owner: The MathWorks, Inc.
number: 09015661
owner_city: Natick
owner_country: US
publication_date: 20110623
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BRIEF DESCRIPTION OF THE DRAWINGS","DETAILED DESCRIPTION","Overview","Embodiments","Alternative Embodiments","CONCLUSION"],"p":["The accompanying drawings, which are incorporated in and constitute a part of this specification, illustrate one or more embodiments of the invention and, together with the description, explain the invention. In the drawings,",{"@attributes":{"id":"p-0003","num":"0002"},"figref":"FIG. 1","b":"100"},{"@attributes":{"id":"p-0004","num":"0003"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0005","num":"0004"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0006","num":"0005"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 13"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 14"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 15"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 16"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 17"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 18"},"In a programming environment a class may be a collection of related attributes and behaviors. A superclass may be a class from which other classes are derived. A subclass may be a class that inherits attributes and\/or behaviors from another class. Subclassing may be the action of classes inhering from another class. Thus, class inheritance may be a way to relate two or more classes to each other.","Through the use of class inheritance, programming environments may support the ability to define a set of zero or more superclasses from which a given class is derived. With multiple inheritance, for example, there may be no limit on the number of superclasses for a given class.","Software developers may desire a programming environment to provide robust and expressive techniques for placing restrictions on class relationships and for explicitly expressing compatibility with other class types.","Example Programming Environment",{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 1","b":["100","100","110","120","130","140"]},"Classes  may include one or more classes. A class may be defined by a class definition. The class definition may specify data members (e.g., properties) and member functions (e.g., behaviors) that may belong to the class. An object is an instance of a class. The object contains the data members (as data) and the member functions (as code).","A superclass, base class, or parent class may be a class  from which other classes  are derived. The classes  that are derived from a superclass may be known as child classes, derived classes, or subclasses. A subclass may inherit aspects of its definition from its superclass. Subclasses and superclasses are sometimes referred to as derived and base classes, respectively.","A superclass may allow for a generic interface to include specialized functionality through the use of virtual functions. Subclasses that wish to implement special behavior may do so via virtual methods, without having to reimplement the superclass' behavior.","A subclass may be envisioned as \u201ca kind of\u201d its superclass, as in \u201ca square is a kind of rectangle.\u201d For example, a rectangle has four sides with lengths w and h. A square has all of the characteristics of a rectangle and in addition, w=h.","In this way, a subclass may be a more specific version of the superclass. For example, all rectangles have four sides, while the square has the more restricted feature that all of the square's sides have the same length.","An object may be created which may be an instance of a class. For example a dog class may be a base class for a labrador_retriever class. Creating an object which is an instance of the class labrador_retriever may refer to one particular labrador_retriever. There may be many instances of labrador_retrievers.","Class lists  may include one or more collections of classes .","Class relationships  may include information about one or more relationships between two or more classes  and\/or one or more class lists . The relationships in class relationships  may include, for example, compatibility (e.g., whether one or more classes  and\/or class lists  are compatible), non-compatibility (e.g., whether one or more classes  and\/or class lists  are explicitly not compatible), inclusion (e.g., whether one or more classes  and\/or class lists  are included together), exclusion (e.g., one or more classes  and\/or class lists  cannot be included together), or other relationships between the one or more classes  and\/or class lists .","Class relationship monitor  may monitor the class relationships  of the classes  and class lists . Class relationship monitor  may prohibit subclassing of a class, when, for example, an object, that is an instance of the class, is created.",{"@attributes":{"id":"p-0034","num":"0033"},"figref":["FIG. 2","FIG. 2"],"b":["130","110","200","210","220","230","240"]},"As illustrated, the class of positive numbers  and the class of integers  exist within the class of real numbers . The intersection of the class of positive numbers  and the class of integers  may be represented by the class of positive integers . Thus, specifying multiple superclasses (e.g., the class of positive numbers  and the class of integers ) may be an intersection operation, where the set of instances of the resulting subclass (e.g., the class of positive integers ) may be the intersection of the sets of all instances of the specified superclasses.","Some programming environments may not provide the ability for a class to control whether or not it is subclassed. For example, a programming environment may not allow a class to be declared as sealed. Thus, control over whether the class may be subclassed may not be provided by the programming environment. Likewise, for example, a programming environment may require that all superclasses of a given class be, for example, either handle classes or non-handle classes (e.g., a value class). A value class may be defined such that when an instance of a value class is assigned to a variable or passed as a function parameter, a copy of the instance is actually assigned to the variable or passed as the function parameter, respectively. The copy of the instance may include a copy of each property value from the original instance.","A handle class may be defined such that when an instance of a handle class is assigned to a variable or passed as a function parameter, a copy of a handle for the instance (e.g., a pointer to the instance) is actually assigned to the variable or passed as the function parameter, respectively. Thus, in a handle class, a copy of the underlying properties is not made when assigning a handle class instance to a variable or passing a handle class instance as a function parameter. Multiple variables and parameters may reference the same handle class instance and thus may reference the same data values stored in properties of the handle class instance.","In some situations, class authors may wish to limit the number of and types of classes available for superclasses of a given class. In other situations, class authors may want to indicate whether a class is compatible with two or more different class types. For example, whether a utility class may be used with both a handle class and with a non-handle class.","An embodiment may include one or more of the following class inheritance controls: (1) Identifying non-handle classes as combinable with handle classes; (2) Identifying a set of allowable subclasses; (3) Disallowing a specific class from being subclassed by a given class (e.g., set exclusion); (4) Selecting a specified number of classes from a fixed class list (e.g., partition); (5) Selecting at least a specified number of classes from a fixed class list (e.g., intersection); (6) Selecting at most a specified number of classes from a fixed class list; (7) Combining rules to form compound expressions. These inheritance controls may be part of the class relationships  of the programming environment . These inheritance controls are discussed below.","(1) Identifying Non-Handle Classes as Combinable with Handle Classes","Some programming environments  may require that a superclass be of a specific type. Here, mixing superclasses that are of one type with superclasses that are of another type may not be allowed.","For example, programming environment  may require that all superclasses be either handle classes or non-handle classes. Thus, mixing handle superclasses with non-handle superclasses may not be permitted.","In an embodiment of the invention, a handle-compatible (HC) attribute may be associated with a class to allow class authors to identify non-handle classes that may be combined with handle classes. A class with its HCattribute set to true may be combined with a handle class. The HCattribute may identify a non-handle class that may be compatible with handle classes. This may allow a class author to specify that a base class may be designed for use with both handle and non-handle classes, while also preventing non-intentional combinations from occurring.","A class with a true value for its HCattribute may be referred to as a handle-compatible class. A handle-compatible class may be a class that is compatible with a handle class but is not necessarily a handle class. For example, suppose a non-handle class is associated with a HCattribute. Setting the HCattribute to true may make the class handle compatible. Note, however, that even though this class is handle-compatible, this class still remains a non-handle class. A handle class may be considered handle-compatible whether or not it explicitly specifies true for the HCattribute.","A handle-compatible class may be allowed to be combined with handle classes when forming sets of superclasses. Thus, a single base class may be used with both handle and non-handle subclasses without making all base classes support both handle and non-handle subclasses. This may allow a single implementation in place of two almost identical ones (which, e.g., may reduce code and application programming interface (API) duplication). Additionally, based on the implications of handle subclasses, a class author may define a base class that is not explicitly compatible with handle subclasses (e.g., the handle compatible HCattribute is set to false).","A handle-compatible class may be restricted such that it may not define a superclass that is not a handle-compatible class. Further, defining a class as handle-compatible may be done by, for example, deriving the class from a handle class or explicitly setting the HCattribute to true. Allowing a handle-compatible class to be derived from another handle-compatible class may enable class authors to combine collections of behaviors into single named constructs. However, allowing a handle-compatible class to be derived from a non-handle-compatible class may provide a means of circumventing the explicit decision by the superclass developer not to be handle-compatible. Furthermore, handle-compatible class methods may be implemented with an awareness of the handle nature of inputted objects. If an object is passed with different handle nature than intended an error condition may be reported (e.g., an error message to be displayed, an exception condition to occur)","A programming environment may require that a class, whose HCattribute is set to false, not be allowed to be derived from a superclass that is also a handle class. Violations of this rule may cause an error condition to be reported.","A class that does not have its HCattribute set to true, may be a handle class if any of its superclasses are handle classes, and may be a value class if all superclasses are not handle classes. Here, an error condition may be reported if a developer attempts to combine handle classes with classes that are not handle-compatible.",{"@attributes":{"id":"p-0048","num":"0047"},"figref":["FIG. 3","FIG. 3"],"b":["300","140","310","110"]},"In block , a first relationship may be defined between the A class and the S superclass. The first relationship may be part of class relationships .","In block , a second relationship may be defined between the B class and the S superclass. The second relationship may be part of class relationships .","In block , a subclass of S may be prevented from being defined based on the first relationship and the second relationship (block ). Class relationship monitor  may prevent a subclass of S from being defined based on the defined relationships.","An example where a subclass of S may be prevented from being defined based on a first relationship and a second relationship may occur when A is a subclass of S and B is not compatible with S. Then C, an indirect subclass of S, may not be defined as a subclass of both A and B.","In block , class A may be defined as a subclass of superclass S.","In block , class B may be defined as a non-handle class.","In block , a subclass of A and B may be prevented from being defined. This block may be based on, for example, superclass S being a handle class and class B being defined as a non-handle class. Class relationship monitor  may prevent a subclass of A and B from being defined based on the defined relationships.","In block , class C may be defined as a non-handle class (block ). Class C may be part of classes . Class C may subclass non-handle classes and may, therefore, be defined as a non-handle class.","In block , class C may have, for example, the HCattribute set to true. Setting the HCattribute set to true for class C may define class C as a handle-compatible class.","In block , a subclass of both A and C may be defined. This block may be based on class A being a handle or handle-compatible and class C having the HCattribute set to true. Class relationship monitor  may allow a subclass of class A and class C to be defined based on the defined relationships.",{"@attributes":{"id":"p-0059","num":"0058"},"figref":"FIG. 4","b":["400","140"]},"Referring to , an object may begin to be created which is an instance of class A (block ). Class A may have one or more parent classes. Class A and the parent classes may be part of classes . Additionally, one or more parent classes may be part of class lists .","At block , a parent class of class A may be examined.","At block , a check may be performed to determine whether the parent class is a handle class.","At block , if the parent is not a handle class, a check may be performed to determine whether the parent class has a HCattribute set to true. At block , a check may be performed to determine whether all of the parent classes have been examined. If all the parent classes have not been examined, control may return to block  to examine a parent class that has not yet been examined.","At block , a check may be performed to determine whether a parent class is a handle class and whether class A has the HCattribute set to false. If a parent class is a handle class and class A has the HCattribute set to false, then an error may be produced and flow may end.","At block , a check may be performed to determine whether a parent class is not handle-compatible and whether class A has the HCattribute set to true. If a parent class is not handle-compatible and class A has the HCattribute set to true, then an error may be produced and flow may end.","At block , a check may be performed to determine whether a parent class is a handle class and whether another parent class is not handle-compatible. If a parent class is a handle class and another parent class is not handle-compatible, then an error may be produced and flow may end.","In block , if no error has occurred, then continue with creating the object which is an instance of class A.","In an example embodiment of the invention, the following utility class may be combined with handle classes when implemented by subclasses. As the below utility class does not explicitly subclass handle it may be considered a value class. The following code sample may be used in implementing , block  and\/or , block .","classdef (HandleCompatible) Utility","% Utility A handle-compatible utility class\n\n","end","In the following example, a non-handle utility class may be combined with handle classes. Here, class UtilConsumer may be a subclass of handle classes (e.g., dynamicprops and hgsetget as defined in MATLAB software, for example) and may also subclass the previously mentioned, handle-compatible Utility class. The following code sample may be used in implementing , blocks  and  and\/or , block .\n\n","In another example, a non-handle subclass of a handle-compatible class may be created. In the following example, class ValueConsumer may subclass non-handle classes (e.g., Utility and MException as defined in MATLAB software, for example) and, therefore, ValueConsumer may be a non-handle class. The following code sample may be used in implementing , block  and  and\/or , block .","classdef ValueConsumer <MException & Utility","% ValueConsumer is not a handle class\n\n","end","In the above code example, although Utility is designated handle-compatible, MException is not explicitly designated handle-compatible and is not a subclass of a handle class. Therefore, an error may be produced if a handle class is included in the list of superclasses as in , block  and\/or , block .","In another example, an error may be produced when superclasses are combined incorrectly. In the following example, three superclasses are specified, one of which is explicitly defined as handle-compatible (i.e., Utility), one of which is derived from handle (e.g., hgsetget), and the third is not handle-compatible (e.g., MException, a value class not explicitly designated as handle-compatible). In the following example, attempting to create an object which is an instance of class Z may produce an error as in , block .\n\n","A class with its HCattribute explicitly set to true may make the class a handle-compatible class. While, a class with its HCattribute explicitly set to false may signal that the class is not compatible with handle classes and therefore must not have any handle classes among its superclasses. The following examples demonstrate both correct and incorrect uses of the HCattribute and the result.","The following example demonstrates setting the HCattribute to true for two classes.\n\n","In the above example, the Utility and SpecializedUtility classes are identified as handle-compatible utility classes.","The following example demonstrates explicitly setting the HCattribute to false for two classes.\n\n","Invalid combinations may produce an error. The following two code examples illustrate potentially invalid combinations. Here, class BadClass has been designated as not compatible with handles but has also defined handle as a superclass. Attempting to create an object which is an instance of BadClass may produce an error as in , block .","classdef (\u02dcHandleCompatible) BadClass < handle","% BadClass A non-handle-compatible class that is","% attempting to subclass handle.\n\n","end","In another example, an error may be produced when a class has its HCattribute is set to true but not all superclasses of the class are handle-compatible. Here, AnotherBadClass has its HCattribute is set to true but its parent class MException is not handle-compatible. Attempting to create an object which is an instance of AnotherBadClass may produce an error as in, , block .\n\n","In another type of class inheritance control, an allowed subclasses (AS) attribute may be associated with a class to allow class authors to identify classes  that may be permitted to subclass a particular class. The ASattribute may accept a class list  to identify the allowed subclasses.","The ASattribute may allow a class author to control how the class may be re-used and may prevent undesirable subclassing. This may lead to a simpler design as the class author may not need to choose between encapsulation and the benefits of separating code into, for example, a helper class or function.","In an example embodiment, a class without the ASattribute may place no restrictions on the ability of other classes to subclass it. A class with its ASlist explicitly set to empty may be declaring itself to be a sealed class and no class may be permitted to subclass it. A class with a list of classes in its ASlist does not place a requirement on the included subclasses that they must be derived from the given class.","An example syntax may be:","classdef(AllowedSubclasses=List) mySuperClass","end","Where List may be a list of allowed subclasses and mySuperClass is the class being defined.","The ASattribute may have the following features. A class with the ASattribute not set may be freely subclassed. A class with ASset to { } may allow no subclasses. For example, inclusion of a class into the list of allowed subclasses of a parent class may grant permission to subclass the parent class (e.g., mySuperClass), but does not indicate that the listed classes are actual subclasses or require them to be defined as subclasses of the parent class (e.g., mySuperClass). Any class not in the list of allowed subclasses may not declare the parent class (e.g., mySuperClass) as a superclass. Whether an allowed subclass can be further subclassed may be determined by that subclass and may not be controlled by the list in the parent class (e.g., mySuperClass). If a class in the list cannot be found at the time the parent class (e.g., mySuperClass) is parsed, for example, then that class may be dropped from the list of allowed subclasses.","A class with an ASattribute may allow the class to make a declaration governing classes that may or may not be installed because they may be contained in products that have not, for example, been licensed.","An example usage may be:","classdef(AllowedSubclasses={?mySubA, ?mySubB, ?mySubC})","mySuperClass","end","In the above example, class mySuperClass may allow only classes mySubA, mySubB and mySubC to subclass mySuperClass. If mySubA, mySubB and mySubC are sealed, then this may create a sealed hierarchy.","Thus, using an ASattribute a class author may specify how a class may be re-used and undesirable subclassing of classes may be prevented and a sealed class hierarchy may be created.",{"@attributes":{"id":"p-0104","num":"0133"},"figref":"FIG. 5","b":["500","140"]},"Referring to , in block , class A may be defined. Class A may be part of classes .","In block , a permitted subclass list for class A may be defined. The permitted subclass list may include class SC as a permitted subclass. The permitted subclass list may be part of class lists .","In block , class SC may be defined as a subclass of class A.","In block , class NSC may be prevented from being defined as a subclass of A. Class NSC was not listed in the permitted subclass list of class A.",{"@attributes":{"id":"p-0109","num":"0138"},"figref":"FIG. 6","b":["600","140"]},"Referring to , in block , class A may be defined. Class A may be part of classes .","In block , a permitted subclass list may be defined for class A. The permitted subclass list may be part of class lists .","In block , the permitted subclass list for class A may be set to empty.","In block , subclasses of class A may be prevented from being defined based on the empty permitted subclass list for class A.","(3) Disallowing a Specific Class from being Subclassed by a Given Class","In programming environment , the use of a negation operator (e.g., \u201c\u02dc\u201d) may be used in a class definition as an inheritance control to establish a class relationship . For example the negation operator may indicate that the class being defined is not combinable (e.g., mutually exclusive) with the negated class. Both the class being defined and the negated class may be part of classes . Where specifying a superclass may establish an is-a relationship, the use of exclusion may specify a not-a relationship. The ability to explicitly exclude a given class from being derived from the negated class may enable a class author to, for example, opt out of certain behaviors.","As with the is-a relationship, the not-a relationship may extend to subclasses of the given class. Any class that subclasses the given class will be excluded from also subclassing the negated class.",{"@attributes":{"id":"p-0116","num":"0145"},"figref":["FIG. 7","FIG. 7"],"b":["130","110","110","200","710","720","730","710","720","200","730","730","720","730","710","730","730","710"]},{"@attributes":{"id":"p-0117","num":"0146"},"figref":"FIG. 8","b":["800","140"]},"Referring to , in block , classes A and B may be defined. Classes A and B may be part of classes .","In block , class A may be defined as being incompatible with class B. Where, class A being defined as being incompatible may be part of class relationships .","In block , class B may be prevented from being a subclass of class A. Class relationship monitor  may prevent class B from being a subclass of class A.","In block , class C may be defined as a subclass of class A. Class C may be part of classes .","In block , class C may be prevented from being a subclass of class B. As class C is a subclass from class A, the restriction placed on class A may be inherited by class C. Class C may be incompatible with class B. Class relationship monitor  may prevent class C from being a subclass of class B.","(4) Selecting a Specified Number of Classes from a Fixed Class List","In an example embodiment of the invention, a specific number of superclasses may be specified as being drawn from a fixed set of classes. Using this class inheritance control may enable a class author to associate groups of behaviors with a given class. This may represent, for example, partitioning an existing class set into non-empty and non-overlapping class subsets.",{"@attributes":{"id":"p-0124","num":"0153"},"figref":["FIG. 9","FIG. 9"],"b":["130","110","900","910","920","910","920","900"]},"In an embodiment of the invention, a class that subclasses the Sindow class  must also subclass either Repositionable  or Resizeable . Here, the author of the Window class  may wish to constrain its subclasses to be one of Repositionable  or Resizeable , but not both. This may be expanded to include, for example, a set of classes  or class lists  to choose from.","The ASattribute and exclusion feature, both described above, may be leveraged as in the following example.\n\n",{"@attributes":{"id":"p-0127","num":"0159"},"figref":"FIG. 10","b":["1000","120","140"]},"Referring to , in block , class A may be defined. Class A may be part of classes .","In block , multiple class lists  for class A may be defined. The class lists of class A may include at least one class.","In block , a class list from the multiple class lists  may be selected.","In block , the non-selected class lists as the excluded class lists may be defined.","In block , class B as a subclass of class A and as a subclass of the class or classes listed in the selected class list may be defined. The relationship of class B to class A and the selected class list may be part of class relationships .","In block , class B may be prevented from being a subclass of the class or classes listed in the excluded class lists. Class relationship monitor  may prevent class B from being a subclass of classes listed in the excluded class lists.","(5) Selecting at Least a Specified Number of Classes from a Fixed Class List","In an example embodiment, a minimum number of specified classes may be drawn from a fixed set of classes. This class inheritance control may enable a class author to associate behaviors that are not exclusive of one another but at least one of which is necessary. This may represent a union relationship, where from a specified set of superclasses, some minimum number of superclasses is selected.",{"@attributes":{"id":"p-0135","num":"0167"},"figref":["FIG. 11","FIG. 11"],"b":["1100","130"]},"Referring to , the example classes  may include a yellow class , a blue class , and a red class . Here, a valid paint color can fall anywhere within the diagram . Additionally, the combination of the yellow class  and the blue class  may the yield green class , the combination of the yellow class  and the red class  may yield the orange class , the combination of the red class  and the blue class  may yield the purple class . Finally, the combination of the red class , the yellow class , and the blue class  may yield class . Here, a class author may wish to specify that at least one of the yellow class , the blue class , or the red class  is required. A class list  that includes the yellow class , the blue class , and the red class , may also implicitly include the orange class , the green class , the purple class  and class .","The pipe operator (\u201c|\u201d), used in many programming environments  to represent the OR operation, may be used to specify at least a number of classes from a fixed set. For example,","classdef PaintColor<(Red|Blue|Yellow)",{"@attributes":{"id":"p-0139","num":"0171"},"figref":["FIG. 12","FIG. 12"],"b":["130","110","120","1200","1110","1120","1130","1140","1110","1120","1130","1140"]},{"@attributes":{"id":"p-0140","num":"0172"},"figref":"FIG. 13","b":["1300","120","140","1310","110"]},"In block , a first class list for class A may be defined. The first class list may include at least two classes. The first class list may be part of class lists .","In block , a second class list may be defined. The second class list may include a subset of the classes from the first class list. The second class list may be part of class lists .","In block , class B may be defined as a subclass from class A and as a subclass of the classes from the second class list. Class B may be part of classes . The definition of class B as a subclass from class A and as a subclass of the classes from the second class list may be part of class relationships .","In block , a check of the second class list may be performed to determine whether there is at least a minimum number of classes in the second class list. If the minimum number of classes has been met, class relationship monitor  may allow the creating of an object which is an instance of class B and the function may end.","In block , an additional class may be inserted into the second class list from the first class list. Here, if the second class list does not contain the required minimum number of classes, then additional classes may be added to the second class list from the first class list.","(6) Selecting at Most a Specified Number of Classes from a Fixed Class List","In another example embodiment, a maximum number of selected elements may be drawn from a fixed class list. This class inheritance control may enable a class author to associate optional behaviors.",{"@attributes":{"id":"p-0147","num":"0179"},"figref":["FIG. 14","FIG. 14"],"b":["1400","1400","1410","1420","1430","1430","1420","1410","1420","1430"]},{"@attributes":{"id":"p-0148","num":"0180"},"figref":"FIG. 15","b":["1500","140"]},"Referring to , in step , class A may be defined. Class A may be part of classes .","In step , a first class list for class A may be defined. The first class list may include at least two classes. The first class list may be part of class lists .","In step , a second class list may be defined. The second class list may include a subset of the classes from the first class list. The second class list may be part of class lists .","In step , a check of the second class list may be performed to determine whether there is a maximum number of classes in the second class list. If the maximum number of classes has not been met, then additional classes may be added to the second class list and flow may end.","In step , additional classes may be prevented from being added to the second class list. In other words, if the second class list contains the maximum number of classes, no additional classes may be added. Class relationship monitor  may prevent additional classes from being added to the second class list.","(7) Combining Rules to Form Compound Expressions","Many languages may support multiple inheritance where a class has more than one parent class. Identifying a list of two or more superclasses may be considered as imposing multiple constraints. For example, the intersection of the instance space of all superclasses may define the subclass (e.g., ).","With the introduction of additional types of class inheritance controls a logical extension of multiple inheritance may support compound expressions. Using the same syntax as may be already used for multiple inheritance, for example \u201c&,\u201d a series of constraints may be applied to a given class.","In an example embodiment, referring back to , a class author may wish to indicate that a given class must be either Resizeable  or Repositionable , and cannot be combined with FixedPosition items.",{"@attributes":{"id":"p-0157","num":"0189"},"figref":"FIG. 16","b":["1600","140"]},"Referring to , in step , class A may be defined. Class A may be part of classes .","In step , a first and second plurality of class lists for class A may be defined. The class lists in the first and second plurality of class lists may be part of class lists  and may include at least one class . The class lists for class A may be part of class relationships .","In step , a first class list may be selected from the first plurality of class lists. Selection of the remaining lists in the first plurality of class lists may be prevented. Class relationship monitor  may prevent selection of the remaining lists from the first plurality of class lists.","In step , a second class list may be selected from the second plurality of class lists.","In step , class B may be defined as a subclass of class A and a subclass of the classes in the first class list. The definition of class B may be part of class relationships .","In step , class B may be prevented from being a subclass of the classes in the second class list. Class relationship monitor  may prevent class B from being a subclass of the classes in the second class list.","Example Embodiment Summary","In an embodiment of the invention, a system of constraints on inheritance relationships may provide class authors with the ability to dictate class behavior at a tight level of granularity. These types of controls may be useful in the development of highly configurable applications and those that require a high degree of robustness.","For example, software such as MATLAB\u00ae Code Analyzer\u00ae, can make use of the constraint information to provide more guidance to subclass authors by pointing out where constraints are violated. Additionally, software development tools such as tab completion may leverage this information to provide information to subclass authors.","Further, text-based programming environments and graphic-based programming environments may utilize the constraint information to provide structure and guidance to class authors.","Example Distributed System",{"@attributes":{"id":"p-0167","num":"0199"},"figref":["FIG. 17","FIG. 17","FIG. 17"],"b":["1700","1700","1710","1740","1750","1760","1770","1700","1700"]},"Client , service provider , and\/or target environment  may implement programming environment .","Client  may include a device capable of sending and\/or receiving information (e.g., data) to and\/or from another device, such as target environment . Information may include any type of machine-readable information having substantially any format that may be adapted for use, e.g., in one or more networks and\/or with one or more devices. The information may include digital information and\/or analog information. The information may further be packetized and\/or non-packetized. In an embodiment, client  may download data and\/or code via network . For example, client  can download code for suggesting correct identifiers consistent with aspects of the invention.","Client  may be, for example, a desktop computer, a laptop computer, a client computer, a server computer, a mainframe computer, a personal digital assistant (PDA), a web-enabled cellular telephone, a smart phone, a digital notepad, smart sensor\/actuator, or another computation or communication device that executes instructions that enable the device to perform one or more activities and\/or generate one or more results.","In an embodiment, client  may include a technical computing environment (TCE) , graphical modeling software  and analysis software . TCE  may include a graphical block diagram environment that may be used to execute models and manipulate the models in accordance with techniques described herein. In other embodiments, client  may include other components, applications, etc. Embodiments of TCE  may contain computer-executable instructions (e.g., code) and data that are configured to implement the TCE. The instructions may include instructions configured to implement modeling software  and\/or graphical analysis software . An example embodiment of one or more of the class inheritance controls provided by programming environment  may be implemented in a TCE .","Modeling software  and the analysis software  may be graphical, textual or a hybrid that includes both textual and graphical capabilities\/features. Modeling software  may include computer-executable instructions that allow, e.g., a user to build and\/or execute a model. For example, modeling software  may allow a user to build and execute a time-based model, a state-based model, an event-based model, a dataflow-based model, etc. An example embodiment of the invention may be implemented as part of modeling software .","Analysis software  may include computer-executable instructions that allow information in a model to be evaluated. Evaluating a model may include generating tests for the model that satisfy model coverage objectives, user-defined objectives, etc. In addition, evaluating a model may include proving various model properties and generating examples of violations of these properties. Moreover, evaluating a model may include analyzing the model, in accordance with techniques described herein. In an embodiment of the invention, analysis software  may include the Simulink\u00ae Design Verifier software which is available from The MathWorks, Inc. An example embodiment of the invention may be implemented as part of analysis software .","Network  may include any network capable of exchanging information between entities associated with the network, including, for example, client , service provider , target environment  and cluster . Exchanged information may include, for example, packet data and\/or non-packet data. Implementations of network  may include local area networks (LANs), metropolitan area networks (MANs), wide-area networks (WANs), etc. Information may be exchanged between entities using any network protocol, such as, but not limited to, the Internet Protocol (IP), Asynchronous Transfer Mode (ATM), Synchronous Optical Network (SONET), the User Datagram Protocol (UDP), Institute of Electrical and Electronics Engineers (IEEE) 802.11, etc.","Network  may include various network devices, such as, for example, routers, switches, firewalls, servers, etc. Portions of network  may be wired (e.g., using wired conductors, optical fibers, etc.) and\/or wireless (e.g., free-space optical (FSO), radio frequency (RF), acoustic transmission paths, etc.). Portions of network  may include a substantially open public network, such as the Internet. Portions of network  may include a more restricted network, such as a virtual private network (VPN). It should be noted that implementations of networks and\/or devices operating on networks described herein are not limited with regards to information carried by the networks, protocols used in the networks, the architecture\/configuration of the networks, etc.","Service provider  may include code (e.g., software), logic (e.g., hardware or a combination of hardware and software), etc., that makes a service available to another device in distributed environment . Service provider  may include a server operated by an entity (e.g., an individual, a corporation, an educational institution, a government agency, etc.) that provides one or more services to a destination, such as client . The services may include software containing computer-executable instructions that may be executed, in whole or in part, by a destination, by service provider  on behalf of the destination, or some combination thereof. An example embodiment of the invention may be implemented as part of service provider .","For example, in an embodiment, service provider  may provide one or more subscription-based services to various customers via network . These services may be accessed by the customer (e.g., via client ). Service provider  may limit access to certain services based on, e.g., a customer service agreement between the customer and service provider . The service agreement may allow the customer to access services that allow the customer to build and\/or execute a model. In addition, the service agreement may allow the customer to further analyze models, generate code from the models, generate various reports, access audit services that allow a customer's code to be audited, etc. The service agreement may include other types of arrangements, such as certain fee-based arrangements or restricted access arrangements. For example, a customer may pay a fee which provides the customer unlimited access to a given package of services for a given time period (e.g., hourly, daily, monthly, yearly, etc.). For services not included in the package, the customer may have to pay an additional fee in order to access the services. Still other arrangements may be resource-usage based. For example, the customer may be assessed a fee based on an amount of computing resources used, network bandwidth used, etc.","Target environment  may include a device that receives information from client , service provider , or cluster . For example, target environment  may receive executable code from client , where the executable code allows target environment to perform an operation when the code is executed. Client  may have generated the executable code using TCE , graphical modeling software , and\/or a code generator (not shown in ).","Cluster  may include a number of processing resources that perform processing on behalf of another device, such as client , service provider  and\/or target environment . Cluster  may include logic that manages and\/or coordinates the operation of multiple processing resources. For example, cluster  may send data to and\/or receive results from these processing resources. In an embodiment, cluster  may include units of execution (UEs) , and d (collectively UEs ) that may perform processing on behalf of client  and\/or another device, such as service provider . An example embodiment may be implemented on one or more UEs .","UEs  may include hardware, software, or hybrid logic that performs processing operations on behalf of TCE . For example, in an embodiment UEs  may parallel process portions of a graphical model created by user of client . This parallel processing may include performing analysis on the model, parsing the model into portions, and\/or aggregating results from respective UEs  into a single result for display to a user at client . UEs  may reside on a single device or chip or on multiple devices or chips. For example, UEs  may be implemented in a single application specific integrated circuit (ASIC) or in multiple ASICs. Likewise, UEs  can be implemented in a single computer system using virtualization techniques. Other examples of UEs  may include field programmable gate arrays (FPGAs), complex programmable logic devices (CPLDs), application specific instruction-set processors (ASIPs), microprocessors, etc.","Example Computing Architecture Example System",{"@attributes":{"id":"p-0181","num":"0213"},"figref":"FIG. 18","b":["1800","1800","1710","1750","1760","100","1800","1820","1870","1840","1810","1860","1880","1820","1870","1720"]},"Memory  may be a computer-readable medium that may be configured to store instructions configured to implement embodiments of the invention. Memory  may be a primary storage accessible to processor  and can include a random-access memory (RAM) that may include RAM devices, such as, for example, Dynamic RAM (DRAM) devices, flash memory devices, Static RAM (SRAM) devices, etc. Storage device  may include a magnetic disk and\/or optical disk and its corresponding drive for storing information and\/or instructions.","Interconnect  may include logic that operatively couples components of computer system  together. For example, interconnect  may allow components to communicate with each other, may provide power to components of computer system , etc. In an embodiment of computer system , interconnect  may be implemented as a bus.","Input device  may include logic configured to receive information for computer system  from, e.g., a user. Embodiments of input device  may include keyboards, touch sensitive displays, biometric sensing devices, computer mice, trackballs, pen-based point devices, etc. Output device  may include logic configured to output information from computer system . Embodiments of output device  may include cathode ray tubes (CRTs), plasma displays, light-emitting diode (LED) displays, liquid crystal displays (LCDs), printers, vacuum florescent displays (VFDs), surface-conduction electron-emitter displays (SEDs), field emission displays (FEDs), etc.","Network interface  may include logic configured to interface computer system  with a network, e.g., network , and may enable computer system  to exchange information with other entities connected to the network, such as, for example, service provider , target environment  and cluster . Network interface  may be implemented as a built-in network adapter, network interface card (NIC), Personal Computer Memory Card International Association (PCMCIA) network card, card bus network adapter, wireless network adapter, Universal Serial Bus (USB) network adapter, modem or any other device suitable for interfacing computer system  to any type of network.","It should be noted that embodiments may be implemented using some combination of hardware and\/or software. It should be further noted that a computer-readable medium that includes computer-executable instructions for execution in a processor may be configured to store embodiments of the invention. The computer-readable medium may include volatile memories, non-volatile memories, flash memories, removable discs, non-removable discs and so on. In addition, it should be noted that various electromagnetic signals such as wireless signals, electrical signals carried over a wire, optical signals carried over optical fiber and the like may be encoded to carry computer-executable instructions and\/or computer data on e.g., a communication network for an embodiment of the invention.","A hardware unit of execution may include a device (e.g., a hardware resource) that performs and\/or participates in parallel programming activities. For example, a hardware unit of execution may perform and\/or participate in parallel programming activities in response to a request and\/or a task it has received (e.g., received directly or via a proxy). A hardware unit of execution may perform and\/or participate in substantially any type of parallel programming (e.g., task, data, stream processing, etc.) using one or more devices. For example, in one implementation, a hardware unit of execution may include a single processing device that includes multiple cores, and in another implementation, the hardware unit of execution may include a number of processors . A hardware unit of execution may also be a processor or programmable device, such as a micro processor, a central processing unit (CPU), a field programmable gate array (FPGA), an application specific integrated circuit (ASIC), a digital signal processor (DSP), an embedded processing device, etc. Devices used in a hardware unit of execution may be arranged in substantially any configuration (or topology), such as a grid, ring, star, etc. A hardware unit of execution may support one or more threads (or processes) when performing processing operations.","A software unit of execution may include a software resource (e.g., a technical computing environment [e.g., MATLAB\u00ae software], a worker, a lab, etc.) that performs and\/or participates in parallel programming activities. For example, a software unit of execution may perform and\/or participate in parallel programming activities in response to receipt of a program and\/or one or more portions of the program. In an embodiment, a software unit of execution may perform and\/or participate in substantially any type of parallel programming using one or more hardware units of execution. Embodiments of a software unit of execution may support one or more threads and\/or processes when performing processing operations.","A TCE  may include hardware and\/or software based logic that provides a computing environment that allows users to perform tasks related to disciplines, such as, but not limited to, mathematics, science, engineering, medicine, business, etc., more efficiently than if the tasks were performed in another type of computing environment, such as an environment that required the user to develop code in a conventional programming language, such as C++, C, Fortran, Pascal, etc.","In one implementation, the TCE  may include a dynamically typed language that can be used to express problems and\/or solutions in mathematical notations familiar to those of skill in the relevant arts. For example, the TCE  may use an array as a basic element, where the array may not require dimensioning. These arrays may be used to support array programming in that operations can apply to an entire set of values, such as values in an array. Array programming may allow array based operations to be treated as a high-level programming technique or model that lets a programmer think and operate on whole aggregations of data without having to resort to explicit loops of individual non-array, i.e., scalar operations.","A TCE  may further be adapted to perform matrix and\/or vector formulations that can be used for data analysis, data visualization, application development, simulation, modeling, algorithm development, etc. These matrix and\/or vector formulations may be used in many areas, such as statistics, finance, image processing, signal processing, control design, life sciences, education, discrete event analysis and\/or design, state based analysis and\/or design, etc.","A TCE  may further provide mathematical functions and\/or graphical tools (e.g., for creating plots, surfaces, images, volumetric representations, etc.). In one implementation, the TCE  may provide these functions and\/or tools using toolboxes (e.g., toolboxes for signal processing, image processing, data plotting, parallel processing, optimization, etc.). In another implementation, the TCE  may provide these functions as block sets (e.g., an optimization block set). In still another implementation, the TCE  may provide these functions in another way, such as via a library, etc. The TCE  may be implemented as a text based environment, a graphically based environment, or another type of environment, such as a hybrid environment that is both text and graphically based.","An alternative embodiment may implement a TCE  using one or more text-based products. For example, a text-based TCE , may be implemented using products such as, but not limited to, MATLAB\u00ae by The MathWorks, Inc.; Octave; Python; Comsol Script; MATRIXx from National Instruments; Mathematica from Wolfram Research, Inc.; Mathcad from Mathsoft Engineering & Education Inc.; Maple from Maplesoft; Extend from Imagine That Inc.; Scilab from The French Institution for Research in Computer Science and Control (INRIA); Virtuoso from Cadence; R created by Ross Ihaka and Robert Gentleman; or Modelica or Dymola from Dynasim.","Other embodiments may implement a TCE  in a graphically-based TCE  using products such as, but not limited to, Simulink\u00ae, Stateflow\u00ae, SimEvents\u2122, etc., by The MathWorks, Inc.; VisSim by Visual Solutions; LabView\u00ae by National Instruments; Dymola by Dynasim; SoftWIRE by Measurement Computing; WiT by DALSA Coreco; VEE Pro or SystemVue by Agilent; Vision Program Manager from PPT Vision; Khoros from Khoral Research; Gedae by Gedae, Inc.; Scicos from (INRIA); Virtuoso from Cadence; Rational Rose from IBM; Rhopsody or Tau from Telelogic; Ptolemy from the University of California at Berkeley; or aspects of a Unified Modeling Language (UML) or SysML environment.","Another alternative embodiment may be implemented in a language that is compatible with a product that includes a TCE , such as one or more of the above identified text-based or graphically-based TCE's . For example, MATLAB\u00ae (a text-based TCE ) may use a first command to represent an array of data and a second command to transpose the array. Another product, that may or may not include a TCE , may be MATLAB\u00ae-compatible and may be able to use the array command, the array transpose command, or other MATLAB\u00ae commands. For example, the other product may use the MATLAB\u00ae commands to suggest proper identifiers when an unknown identifier is presented.","Yet another alternative embodiment may be implemented in a hybrid TCE  that combines features of a text-based and graphically-based TCE . In one implementation, one TCE  may operate on top of the other TCE . For example, a text-based TCE  (e.g., MATLAB\u00ae) may operate as a foundation and a graphically-based TCE  (e.g., Simulink) may operate on top of MATLAB\u00ae and may take advantage of text-based features (e.g., commands) to provide a user with a graphical user interface and graphical outputs (e.g., graphical displays for data, dashboards, etc.).","Implementations may provide devices and techniques that implement constrains on the ability to subclass classes. Various algorithms may exist to assist in identifying compatible class types (e.g., non-handle classes as combinable with handle classes); identifying allowable subclass sets; disallowing specific class or classes from being subclassed by a given class; restricting subclasses by selecting subclasses of exactly a specified number, at least a specified number, or at most a specified number of classes from a fixed set; or a combination of the above.","The foregoing description of example embodiments of the invention provides illustration and description, but is not intended to be exhaustive or to limit the invention to the precise form disclosed. Modifications and variations are possible in light of the above teachings or may be acquired from practice of the invention. For example, while a series of acts has been described with regard to , , , , and -, the order of the acts may be modified in other implementations consistent with the principles of the invention. Further, non-dependent acts may be performed in parallel.","In addition, implementations consistent with principles of the invention can be implemented using devices and configurations other than those illustrated in the figures and described in the specification without departing from the spirit of the invention. Devices and\/or components may be added and\/or removed from the implementations of . depending on specific deployments and\/or applications. Further, disclosed implementations may not be limited to any specific combination of hardware.","Further, certain portions of the invention may be implemented as \u201clogic\u201d that performs one or more functions. This logic may include hardware, such as hardwired logic, an application-specific integrated circuit, a field programmable gate array, a microprocessor, software, wetware, or a combination of hardware and software.","No element, act, or instruction used in the description of the invention should be construed as critical or essential to the invention unless explicitly described as such. Also, as used herein, the article \u201ca\u201d is intended to include one or more items. Where only one item is intended, the term \u201cone\u201d or similar language is used. Further, the phrase \u201cbased on,\u201d as used herein is intended to mean \u201cbased, at least in part, on\u201d unless explicitly stated otherwise.","Headings and\/or subheadings used herein are used to segment this patent application into portions to facilitate the readability of the application. These headings and\/or subheadings are not intended to define or limit the scope of the invention disclosed and\/or claimed in this patent application.","The terms class and classes as used in the claims and specification may refer to the actual class itself or to a class identifier which is representative of the class. A class identifier may include, but is not limited to, a name, a serial number, an object that identifies the class, or by some other means of referencing a class.","Code examples used throughout this application may have been written in the MATLAB\u00ae by The MathWorks, Inc. language, but similar implementations may be written in other types of programming languages such as, but not limited to, C\/C++, Fortran, Forth, ADA, Pascal, JavaScript, Python, C#, Java, Visual Basic, etc.","The scope of the invention is defined by the claims and their equivalents."],"DETDESC":[{},{}]}
