---
title: Launching and managing unattended application programs
abstract: Provided are techniques for launching and managing an unattended application program. The application program is launched in background mode. In response to determining that an exit command has been received, an exit command indicator is set to indicate that the exit command has been received and a notification is sent to wake up a blocked main thread of the launched application program.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09424108&OS=09424108&RS=09424108
owner: International Business Machines Corporation
number: 09424108
owner_city: Armonk
owner_country: US
publication_date: 20140625
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION","Additional Embodiment Details"],"p":["Embodiments of the invention relate to launching and managing unattended application programs, such as content management application programs.","Custom content management application programs may be described as storing and managing various types of digitized content, such as document images, electronic office documents, eXtensible Markup Language (XML) documents, audio, and video that are related to a business processes of a commercial organization or an institution. The content management application programs may be short-running application programs or long-running application programs. Conventional systems implement custom content management application programs as a Windows\u00ae service or a UNIX\u00ae daemon. (Windows is a registered trademark of Microsoft Corporation in the United States and\/or other countries. UNIX is a registered trademark of The Open Group in the United States and\/or other countries.) However, with such implementations, on-demand execution in background mode is required, and execution at boot time is not suitable. Also, with such implementations, additional C programming may be needed for writing a Windows\u00ae service or a UNIX\u00ae daemon.","Furthermore, typical background mode processing in UNIX\u00ae commands (e.g., \u201c&\u201d and \u201cnohup\u201d) terminate the background process after the user logs off from the foreground console session.","Provided is a method for launching and managing an unattended application program. The application program is launched in background mode. In response to determining that an exit command has been received, an exit command indicator is set to indicate that the exit command has been received and a notification is sent to wake up a blocked main thread of the launched application program.","Provided is a computer program product for launching and managing an unattended application program. The computer program product comprises a computer readable storage medium having program code embodied therewith, the program code executable by at least one processor to perform: launching an application program in background mode; and, in response to determining that an exit command has been received, setting an exit command indicator to indicate that the exit command has been received; and sending a notification to wake up a blocked main thread of the launched application program.","Provided is a computer system for launching and managing an unattended application program. The computer system comprises one or more processors, one or more computer-readable memories and one or more computer-readable, tangible storage devices; and program instructions, stored on at least one of the one or more computer-readable, tangible storage devices for execution by at least one of the one or more processors via at least one of the one or more memories, to perform operations, the operations comprising: launching an application program in background mode; and, in response to determining that an exit command has been received, setting an exit command indicator to indicate that the exit command has been received; and sending a notification to wake up a blocked main thread of the launched application program.","The descriptions of the various embodiments of the present invention have been presented for purposes of illustration, but are not intended to be exhaustive or limited to the embodiments disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the described embodiments. The terminology used herein was chosen to best explain the principles of the embodiments, the practical application or technical improvement over technologies found in the marketplace, or to enable others of ordinary skill in the art to understand the embodiments disclosed herein.",{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 1","b":["100","110","120","130","140","100","150","150","160","140","162","140"]},"In certain embodiments, the exit command indicator  (e.g., a flag or a bit) is set to true to indicate that the exit command has been received and that the launched application program is to be terminated or set to false to indicate that the exit command has not been received and that the launched application program is not to be terminated. In certain embodiments, in response to a user issuing an exit command to terminate a launched application program, the exit controller  sets the exit command indicator  for the launched application program to true to indicate that the exit command has been received.","In certain embodiments, the one or more application programs  include at least one custom content management application program. In certain embodiments, the one or more application programs  include at least one Java\u00ae application program. (Java is a registered trademark of Oracle Corporation in the United States and\/or other countries). In certain embodiments, the data store  is a persistent data store. A persistent data store may be described as a storage that saves the data in persistence. In certain embodiments, Java\u00ae Preferences Application Programming Interface (API) is utilized as the persistent data store. The Java\u00ae Preferences API saves the data in a Windows\u00ae registry on Windows\u00ae platforms and saves the data in the user directory on UNIX\u00ae platforms.","Embodiments provide a way to run application programs (e.g., custom content management application programs) in the background mode (unattended mode). Running the application programs in the background mode may be described as running without human attention. Furthermore, the application program continues to run in background mode even when the login user is logged off from a terminal session on a UNIX\u00ae platform or the user exits from a command console on a Windows\u00ae platform. On the contrary, in foreground mode, the application program will be terminated after the login user is logged off from a terminal session on a UNIX\u00ae platform or the user exits from a command console on a Windows\u00ae platform.","Embodiments provide a technique for managing unattended application programs. Embodiments allow unattended application programs to be launched and managed in background mode. Embodiments provide:\n\n",{"@attributes":{"id":"p-0022","num":"0023"},"figref":"FIG. 2","b":["140","140","200","200","210","230","200"]},"To enable the unattended mode, the application program  incorporates the checking mechanism  before the original application program logic  and incorporates the blocking mechanism  after the original application program logic . This avoids the need for additional C programming and shell scripting. In certain embodiments, this is a Java\u00ae implementation that also enhances the portability with various platforms and maintainability of the application program. In certain embodiments, even though blocks , , and  may be invoked sequentially in the application program, they will run as separate execution threads after they are started.","The enablement kit includes an implementation (e.g., a Java\u00ae implementation) of the following elements:\n\n","In certain embodiments, the launched application program is a main thread, the checking mechanism  is a sub-thread of the main thread, the original application program logic  is another sub-thread of the main thread, and the blocking mechanism  is a routine of the main thread of the original application program logic .","The following utility tools support the launch, termination, and status checking of the application programs running in background mode:\n\n",{"@attributes":{"id":"p-0027","num":"0034"},"figref":["FIG. 3","FIG. 3"],"b":["110","120","130","140"]},"In , from the launch controller , a user may launch application programs A, B, and C , which run in background mode. In various embodiments, a user may be a human user, a computer program, a device, etc. Application programs A, B, and C  store the process ID and additional status in the data store . Application programs A, B, and C  may also retrieve the process ID and additional status from the data store . Even when the user logs off from the current console session, the application programs A, B, and C  continue to run in background mode.","From the exit controller , the user may terminate a specific application program  that is running in background mode. The exit controller  updates the exit command indicator  for the terminated application program  in the data store . In this manner, an exit command is sent to the data store  for the terminated application program. When the application program detects the arrival of an exit command in the data store  (via the checking mechanism ), the application program will exit from the execution (i.e., terminate). In addition, the launch monitor  may be used to update and retrieve the status of launched application programs.",{"@attributes":{"id":"p-0030","num":"0037"},"figref":"FIG. 4","b":["400","110","402","120","404","130"]},{"@attributes":{"id":"p-0031","num":"0038"},"figref":["FIGS. 5A and 5B","FIG. 5B"],"b":["500","130","140","162","162","502","210","162","150","504","210","508","506"]},"In block , the checking mechanism  sleeps for a period of time (e.g., set by the user launching the application program or set by a system administrator). When the checking mechanism  wakes up, processing continues to block .","In block , the checking mechanism  sets the terminate indicator  in the launched application program to indicate that the exit command has been received for the launched application program (e.g., sets the terminate indicator  to true). In block , the checking mechanism  sends a notification to the blocking mechanism  to wake up a blocked main thread of the launched application program.",{"@attributes":{"id":"p-0034","num":"0041"},"figref":"FIG. 6","b":["230","600","230","210","602","230","200","200","604","606"]},"Thus, with embodiments, long-running application programs may be launched in background mode and will run until actively terminated. Also, on-demand execution is available as the application program may be launched in background mode and terminated at any time by a user.","In order to address the requirement for unattended content management application programs, embodiments enable the launch and management of unattended content management application programs in background mode.","Thus, embodiments provide a new type of background processing to be addressed which is different from the traditional ways of handling background processing in Unix\u00ae platforms and Windows\u00ae platforms.","Embodiments provide a new approach supporting on-demand execution of an application program in the background (i.e., an unattended mode) without the complexity and overhead of additional programming or shell scripting.","As will be appreciated by one skilled in the art, aspects of the present invention may be embodied as a system, method or computer program product. Accordingly, aspects of the present invention may take the form of an entirely hardware embodiment, an entirely software embodiment (including firmware, resident software, micro-code, etc.) or an embodiment combining software and hardware aspects that may all generally be referred to herein as a \u201ccircuit,\u201d \u201cmodule\u201d or \u201csystem.\u201d Furthermore, aspects of the present invention may take the form of a computer program product embodied in one or more computer readable medium(s) having computer readable program code embodied thereon.","Any combination of one or more computer readable medium(s) may be utilized. The computer readable medium may be a computer readable signal medium or a computer readable storage medium. A computer readable storage medium may be, for example, but not limited to, an electronic, magnetic, optical, electromagnetic, infrared, or semiconductor system, apparatus, or device, or any suitable combination of the foregoing. More specific examples (a non-exhaustive list) of the computer readable storage medium would include the following: an electrical connection having one or more wires, a portable computer diskette, a hard disk, a random access memory (RAM), a read-only memory (ROM), an erasable programmable read-only memory (EPROM or Flash memory), an optical fiber, a portable compact disc read-only memory (CD-ROM), an optical storage device, a magnetic storage device, or any suitable combination of the foregoing. In the context of this document, a computer readable storage medium may be any tangible medium that can contain, or store a program for use by or in connection with an instruction execution system, apparatus, or device.","A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein, for example, in baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms, including, but not limited to, electro-magnetic, optical, or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate, propagate, or transport a program for use by or in connection with an instruction execution system, apparatus, or device.","Program code embodied on a computer readable medium may be transmitted using any appropriate medium, including but not limited to wireless, wireline, optical fiber cable, RF, etc., or any suitable combination of the foregoing.","Computer program code for carrying out operations for aspects of the present invention may be written in any combination of one or more programming languages, including an object oriented programming language such as Java, Smalltalk, C++ or the like and conventional procedural programming languages, such as the \u201cC\u201d programming language or similar programming languages. The program code may execute entirely on the user's computer, partly on the user's computer, as a stand-alone software package, partly on the user's computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario, the remote computer may be connected to the user's computer through any type of network, including a local area network (LAN) or a wide area network (WAN), or the connection may be made to an external computer (for example, through the Internet using an Internet Service Provider).","Aspects of the present invention are described below with reference to flow diagram (e.g., flowchart) illustrations and\/or block diagrams of methods, apparatus (systems) and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and\/or block diagrams, and combinations of blocks in the flowchart illustrations and\/or block diagrams, can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer, special purpose computer, or other programmable data processing apparatus to produce a machine, such that the instructions, which execute via the processor of the computer or other programmable data processing apparatus, create means for implementing the functions\/acts specified in the flowchart and\/or block diagram block or blocks.","These computer program instructions may also be stored in a computer readable medium that can direct a computer, other programmable data processing apparatus, or other devices to function in a particular manner, such that the instructions stored in the computer readable medium produce an article of manufacture including instructions which implement the function\/act specified in the flowchart and\/or block diagram block or blocks.","The computer program instructions may also be loaded onto a computer, other programmable data processing apparatus, or other devices to cause a series of operational steps to be performed on the computer, other programmable apparatus or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions\/acts specified in the flowchart and\/or block diagram block or blocks.","The flowcharts and block diagrams in the Figures illustrate the architecture, functionality, and operation of possible implementations of systems, methods and computer program products according to various embodiments of the present invention. In this regard, each block in the flowcharts or block diagrams may represent a module, segment, or portion of code, which comprises one or more executable instructions for implementing the specified logical function(s). It should also be noted that, in some alternative implementations, the functions noted in the block may occur out of the order noted in the figures. For example, two blocks shown in succession may, in fact, be executed substantially concurrently, or the blocks may sometimes be executed in the reverse order, depending upon the functionality involved. It will also be noted that each block of the block diagrams and\/or flowcharts illustration, and combinations of blocks in the block diagrams and\/or flowcharts illustration, can be implemented by special purpose hardware-based systems that perform the specified functions or acts, or combinations of special purpose hardware and computer instructions.","In addition, the illustrated operations of the flow diagrams and block diagrams show certain events occurring in a certain order. In alternative embodiments, certain operations may be performed in a different order, modified or removed. Moreover, operations may be added to the above described logic and still conform to the described embodiments. Further, operations described herein may occur sequentially or certain operations may be processed in parallel. Yet further, operations may be performed by a single processing unit or by distributed processing units.","The code implementing the described operations may further be implemented in hardware logic or circuitry (e.g., an integrated circuit chip, Programmable Gate Array (PGA), Application Specific Integrated Circuit (ASIC), etc. The hardware logic may be coupled to a processor to perform operations.","Devices that are in communication with each other need not be in continuous communication with each other, unless expressly specified otherwise. In addition, devices that are in communication with each other may communicate directly or indirectly through one or more intermediaries.","A description of an embodiment with several components in communication with each other does not imply that all such components are required. On the contrary a variety of optional components are described to illustrate the wide variety of possible embodiments of the present invention.","Further, although process steps, method steps, algorithms or the like may be described in a sequential order, such processes, methods and algorithms may be configured to work in alternate orders. In other words, any sequence or order of steps that may be described does not necessarily indicate a requirement that the steps be performed in that order. The steps of processes described herein may be performed in any order practical. Further, some steps may be performed simultaneously.","When a single device or article is described herein, it will be readily apparent that more than one device\/article (whether or not they cooperate) may be used in place of a single device\/article. Similarly, where more than one device or article is described herein (whether or not they cooperate), it will be readily apparent that a single device\/article may be used in place of the more than one device or article or a different number of devices\/articles may be used instead of the shown number of devices or programs. The functionality and\/or the features of a device may be alternatively embodied by one or more other devices which are not explicitly described as having such functionality\/features. Thus, other embodiments of the present invention need not include the device itself.","The terminology used herein is for the purpose of describing particular embodiments only and is not intended to be limiting of the invention. As used herein, the singular forms \u201ca\u201d, \u201can\u201d and \u201cthe\u201d are intended to include the plural forms as well, unless the context clearly indicates otherwise. It will be further understood that the terms \u201ccomprises\u201d and\/or \u201ccomprising,\u201d when used in this specification, specify the presence of stated features, integers, steps, operations, elements, and\/or components, but do not preclude the presence or addition of one or more other features, integers, steps, operations, elements, components, and\/or groups thereof.","The terms \u201can embodiment\u201d, \u201cembodiment\u201d, \u201cembodiments\u201d, \u201cthe embodiment\u201d, \u201cthe embodiments\u201d, \u201cone or more embodiments\u201d, \u201csome embodiments\u201d, and \u201cone embodiment\u201d mean \u201cone or more (but not all) embodiments of the present invention(s)\u201d unless expressly specified otherwise.","The terms \u201cincluding\u201d, \u201ccomprising\u201d, \u201chaving\u201d and variations thereof mean \u201cincluding but not limited to\u201d, unless expressly specified otherwise.","The enumerated listing of items does not imply that any or all of the items are mutually exclusive, unless expressly specified otherwise.","The corresponding structures, materials, acts, and equivalents of all means or step plus function elements in the claims below are intended to include any structure, material, or act for performing the function in combination with other claimed elements as specifically claimed. The description of embodiments of the present invention has been presented for purposes of illustration and description, but is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the invention. The embodiments were chosen and described in order to best explain the principles of the invention and the practical application, and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated.",{"@attributes":{"id":"p-0059","num":"0066"},"figref":"FIG. 7","b":["700","100","700","700","702","704","720","704","704","705","706"]},"Input\/Output (I\/O) devices ,  (including but not limited to keyboards, displays, pointing devices, etc.) may be coupled to the system either directly or through intervening I\/O controllers .","Network adapters  may also be coupled to the system to enable the data processing system to become coupled to other data processing systems or remote printers or storage devices through intervening private or public networks. Modems, cable modem and Ethernet cards are just a few of the currently available types of network adapters .","The computer architecture  may be coupled to storage  (e.g., any type of storage device; a non-volatile storage area, such as magnetic disk drives, optical disk drives, a tape drive, etc.). The storage  may comprise an internal storage device or an attached or network accessible storage. Computer programs  in storage  may be loaded into the memory elements  and executed by a processor  in a manner known in the art.","The computer architecture  may include fewer components than illustrated, additional components not illustrated herein, or some combination of the components illustrated and additional components. The computer architecture  may comprise any computing device known in the art, such as a mainframe, server, personal computer, workstation, laptop, handheld computer, telephony device, network appliance, virtualization device, storage controller, etc.","The foregoing description of embodiments of the invention has been presented for the purposes of illustration and description. It is not intended to be exhaustive or to limit the embodiments to the precise form disclosed. Many modifications and variations are possible in light of the above teaching. It is intended that the scope of the embodiments be limited not by this detailed description, but rather by the claims appended hereto. The above specification, examples and data provide a complete description of the manufacture and use of the composition of the embodiments. Since many embodiments may be made without departing from the spirit and scope of the invention, the embodiments reside in the claims hereinafter appended or any subsequently-filed claims, and their equivalents."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE SEVERAL VIEWS OF THE DRAWINGS","p":["In the drawings, like reference numbers represent corresponding parts throughout.",{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIGS. 5A and 5B"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 7"}]},"DETDESC":[{},{}]}
