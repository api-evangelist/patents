---
title: Rest interface interaction with expectation management
abstract: Various embodiments of systems and methods for REST interface interaction with expectation management are described herein. A message request is received for accessing content of a resource. Further, a check is made to determine whether the message request includes a structure-expected in a header of the message request. Also, a check is made to determine whether the structure-expected matches with a structure of the resource if the message request includes the structure-expected. Furthermore, the message request is executed if the structure-expected matches with the resource structure. Then, a message response is returned with a structure-resulted in a header of the message response based on the execution of the message request. If the message request does not include the structure-expected, the message request is executed and the message response is returned with the structure-resulted based on the execution of the message request.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08775555&OS=08775555&RS=08775555
owner: SAP AG
number: 08775555
owner_city: Walldorf
owner_country: DE
publication_date: 20110513
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["Embodiments generally relate to computer systems and more particularly to methods and systems for providing representational state transfer (REST) interface interaction with expectation management.","Typically, representational state transfer (REST) interface is more widely used than other well defined interfaces such as Simple Object Access Protocol (SOAP), Remote Procedure Call (RPC), and the like, because of its simplicity. The REST interface includes just few instructions such as POST, PUT, DELETE and GET to perform different operations on contents of a resource, also known as a server system. Resource can be defined as a structured representation of data. However, the REST interface instructions (e.g., POST, PUT, DELETE and GET) do not clearly address an expected structure of the resource.","In existing methods, accessing the resource using a GET request has to be evaluated item by item in the resource to determine whether the request corresponds to the requested resource structure. Further, if the resource is handled as an Extensible Markup Language (XML) document, no instruction defines the permitted structure of the resource. Therefore, resource structure verification is an issue in the REST interface interaction as it would be required to obtain the entire resource in question to verify a successful execution of the request.","Various embodiments of systems and methods for representational state transfer (REST) interface interaction with expectation management are described herein. In one aspect, a message request is received for accessing content of a resource. Further, a check is made to determine whether the message request includes a structure-expected in a header of the message request. Also, a check is made to determine whether the structure-expected matches with a structure of the resource if the message request includes the structure-expected. In a further aspect, the message request is executed if the structure-expected matches with the resource structure. In another aspect, a message response is returned with a structure-resulted in a header of the message response based on the execution of the message request. In yet another aspect, if the message request does not include the structure-expected, the message request is executed and the message response is returned with the structure-resulted based on the execution of the message request. In another aspect, if the structure-expected in the message request does not match with the structure of the resource, execution failure response is returned with the structure-resulted.","These and other benefits and features of embodiments of the invention will be apparent upon consideration of the following detailed description of preferred embodiments thereof, presented in connection with the following drawings.","Embodiments of techniques for providing representational state transfer (REST) interface interaction with expectation management are described herein. The REST interface provides interaction with a resource including simple instructions and is most commonly used in the Web system. According to one embodiment, the resource is a structured representation of data that may be addressed with a resource structure, commonly called as a server system. When a client system initiates requests to the server system, the server system processes the requests and returns appropriate responses. Requests and responses are built around the transfer of representations of resources. The client system can be desktop computers, work stations, laptop computers, hand held computers, smart phone, console devices or similar portable computing systems.","According to one embodiment, an additional field is introduced in headers of both message requests and message responses during the interaction between the client system and the server system to quickly identify structural mismatches between a structure-expected and an available resource structure. The structure-expected is used as a pre-requisite and the message request is executed when the pre-condition is met. Therefore, introduction of the additional field in the headers of the message request and the message response increases development speed, detects and handles exceptional behavior in REST interface interactions between the client system and the server system.","In the following description, numerous specific details are set forth to provide a thorough understanding of embodiments of the invention. One skilled in the relevant art will recognize, however, that the invention can be practiced without one or more of the specific details, or with other methods, components, materials, etc. In other instances, well-known structures, materials, or operations are not shown or described in detail to avoid obscuring aspects of the invention.","Reference throughout this specification to \u201cone embodiment\u201d, \u201cthis embodiment\u201d and similar phrases, means that a particular feature, structure, or characteristic described in connection with the embodiment is included in at least one embodiment of the present invention. Thus, the appearances of these phrases in various places throughout this specification are not necessarily all referring to the same embodiment. Furthermore, the particular features, structures, or characteristics may be combined in any suitable manner in one or more embodiments.",{"@attributes":{"id":"p-0019","num":"0018"},"figref":["FIG. 1","FIG. 2"],"b":["100","110"]},"At step , a check is made to determine whether the message request includes the structure-expected in a header of the message request. In one embodiment, the received message request may or may not include the structure-expected in the header of the message request. For example, the message request can include at least a request line such as \u2018GET\/images\/logo.pngHTTP\/1.1 which requests a resource called \u2018\/images\/logo.png\u2019, and a header such as \u2018accept-encoding:gzip, deflate\u2019, \u2018accept-charset:ISO-8859-1,utf-8;q=0.7,*;q=0.7\u2019 which describe additional information about the message request. Further, the header can include the structure-expected (e.g., the message request \u2018http:\/\/mathematics.com\/resources\/\u2019 does not include the structure-expected in the header. The message request \u2018http:\/\/mathematics.com\/resources\/ed076287532e86365e841e92bfc50d8c;MD5\u2019 includes the structure-expected, wherein \u2018ed076287532e86365e841e92bfc50d8c;MD5\u2019 is a hash value of the structure-expected, which is explained in detail in ). Considering that the message request includes the structure-expected, step  is performed.","At step , a check is made to determine whether the structure-expected matches with a structure of the resource if the message request includes the structure-expected. The structure of the resource is represented by a hash value. Both the hash values of the structure-expected and the structure of the resource are compared. For example, if the structure-expected in the message request indicates five vacation days are available for the employee, a check is made to determine whether the available number of days matches with the number of days as indicated in the resource. Considering that the structure-expected and the resource structure matches step  is performed.","At step , the message request is executed if the structure-expected matches with the resource structure. In general, the message request is executed only if a hash value of the structure-expected matches with the hash value of the structure of the resource. At step , a message response is returned with a structure-resulted in a header of the message response based on the execution of the message request. The message response comprises a hypertext transfer protocol (HTTP) message including the header and a body.","In one embodiment, the header of the message response can include a response code and a structure-resulted. The response code contains a status code of the execution of the message request. For example, the status code such as \u2018200-OK\u2019 indicates that the message request is successful, \u2018201-CREATED\u2019 indicates that the message request is fulfilled and has resulted in a new resource content being created, \u2018202 ACCEPTED\u2019 indicates that the message request is accepted for processing, \u2018412-PRECONDITION FAILED\u2019 indicates that one or more of the request header fields evaluated to false when it was tested on the resource, and the like indicating the status of the execution of the message request. In one exemplary embodiment, the choice of the response code largely depends on the individual use cases (i.e., application). The structure-resulted comprises a hash value computed using a hash function based on the message response. For example, if a request for creating two days leave of absence is processed, the structure-resulted includes the hash value representing remaining available number of vacation days. The structure-resulted can be of a format \u2018ed076287532e86365e841e92bfc50e7d;MD5\u2019. The protocol structure of the message request is described in greater detail in .","In one embodiment, if the message request does not include the structure-expected, the message request is executed and the message response is returned with the structure-resulted based on the execution of the message request, in steps  and . For example, the message request \u2018http:\/\/mathematics.com\/resources\/\u2019 does not include the structure-expected. In such a situation, the message request is executed and the message response is returned with the structure-resulted, thereby ensuring interoperability with existing HTTP message requests. The process is explained in detail with an example in .","In one embodiment, if the structure-expected in the message request does not match with the structure of the resource, execution failure response is returned with the structure-resulted, in step . For example, if the structure-expected in the message request indicates the number of available vacation days as five days, but the structure of the resource indicates the number of available vacation days as one day, then the request is not processed. Further, the available vacation days as indicated by the structure of the resource is returned along with the execution failure response. In general, the response header returns information on the current structure of the resource to the client system. Therefore, the execution of the message request can be easily verified on the client system using the structure-resulted. For example, the client system can verify the execution of the message request using a list of pre-calculated hash values, allowed for each stage of the interaction.",{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 2","b":["200","200","205","210","205","215","220","215"]},"In one embodiment, the structure-expected  includes a hash value computed using a hash function based on the message request. The client system is configured to provide an input to the hash function to calculate the hash value depending on the application (i.e., type of the message request), and may or may not be directly linked to a resource for which the message request is sent. The basic pattern of the structure-expected  is \u2018#hash;#name of hash algorithm\u2019. The #hash can be computed using the hash algorithm indicated by #name of hash algorithm. The hash algorithm can be a MD5 (Message-Digest) Algorithm, SHA-2 (Secure Hash Algorithm), and the like. For example, the structure-expected  for \u201cthe quick brown fox jumps over the lazy dog\u201d is \u20189e107d9d372bb6826bd81d3542a419d6;MD5\u2019, wherein \u20189e107d9d372bb6826bd81d3542a419d6\u2019 is the hash value and \u2018MD5\u2019 is the name of the hash algorithm. In one exemplary embodiment, the structure-expected  is computed based on the message request and sent along with the message request for accessing the resource. In another embodiment, a client system is configured to include the structure-expected . In other words, the structure-expected corresponding to the message request is known to the client system depending on a response message of a prior message request.",{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 3","b":["300","300","305","310","305","315","320","315"]},"In one embodiment, the structure-resulted  includes a hash value computed using a hash function based on the message response. The basic pattern of the structure-expected  is \u2018#hash;#name of hash algorithm\u2019. The #hash can be computed using the hash algorithm indicated by #name of hash algorithm. The hash algorithm can be a MD5 (Message-Digest) Algorithm, SHA-2 (Secure Hash Algorithm), and the like. For example, when a message request for retrieving the number of available vacation days for a calendar year is executed, the corresponding response such as number of available vacation days for the calendar year being five is obtained. The structure-resulted is computed for \u201cthe number of available vacation days for the calendar year is five\u201d (for which the hash value is 9e108d8e372vv6827be92v3542b419z9;MD5, where \u20189e108d8e372vv6827be92v3542b419z9\u2019 is the hash value and \u2018MD5\u2019 is the name of the hash algorithm).",{"@attributes":{"id":"p-0030","num":"0029"},"figref":["FIG. 4","FIG. 4"],"b":["400","400","405","415","410","405","410","415","405","410","415","420","430","440","450","405","410","415"]},"At step , the client system  sends a message request to get total number of vacation days. The message request includes a GET REST interface instruction and does not include a structure-expected. In response to the received request at the interface engine  (the interface engine  acts as an interface between the client system  and the server system ), a check is made to determine whether the message request includes the structure-expected, in activation box . In the current example, the message request to get total number of vacation days does not include the structure-expected. At step , a request is made by the interface engine  to execute the message request (e.g., to obtain the total number of vacation days) to the server system . Further, the server system  executes the message request, in activation box  and sends the total number of vacation days to the interface engine , in step  (e.g., total number of vacation days as five days).","Further in process, the interface engine  computes a structure-resulted depending on the received total number of vacation days, in activation box . In one exemplary embodiment, the interface engine  is configured to calculate the structure-resulted based on the number of vacation days. The structure-resulted includes a hash value for the \u2018five total number of vacation days\u2019. At step , a message response along with the structure-resulted is returned to the client system  (i.e., \u2018the total number of vacation days as five days and the corresponding hash value are returned to the client system ).",{"@attributes":{"id":"p-0033","num":"0032"},"figref":["FIG. 5","FIG. 5"],"b":["500","500","505","515","510","505","510","515","505","510","515","520","530","540","550","505","510","515"]},"At step , the client system  sends a message request to create two days leave of absence. The message request includes a POST REST interface instruction and includes a structure-expected of five days available vacation days. In response to the received request at the interface engine  (the interface engine  acts as an interface between the client system  and the server system ), a check is made to determine whether the message request includes the structure-expected, in activation box . In the current example, the message request to create two days leave of absence includes the structure-expected (e.g., five days available vacation days). At step , to check the validity of the structure-expected, a structure of the resource is retrieved, i.e., the total number of available vacation days is obtained from the server system  (e.g., the structure of the resource results in the number of available vacation days as five days). Further, a check is made to determine whether the structure-expected matches with the structure of the resource, in activation box . In the current example, both the structure-expected and the structure of the resource match. Thereby, the message request to create two days leave of absence is executed, in step .","Further in process, the interface engine  computes a structure-resulted depending on the execution of the message request, in activation box . For example, of the total number of vacation days (e.g., five days), two days leave of absence is created. Therefore, the remaining number of vacation days is three days. At step , a message response along with a structure-resulted is returned to the client system  stating creation of the two days leave of absence. The message response includes a response code \u2018201-CREATED\u2019. The structure-resulted includes a hash value for the \u2018total number of vacation days as three days\u2019.",{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIG. 6","b":["600","605","610","615","605","615","610","605","605"]},"In one embodiment, the interface engine  is configured to determine whether the message request includes a structure-expected in a header of the message request and determine whether the structure-expected matches with a structure of the resource if the message request includes the structure-expected. Further, the interface engine  is also configured to execute the message request if the structure-expected matches with the resource structure by communicating to the server system . In one exemplary embodiment, the server system  includes the resource. Furthermore, the interface engine  can return a message response with a structure-resulted in a header of the message response based on the execution of the message request. In other words, the interface engine  is configured to compute the structure-resulted.","Further, if the message request does not include the structure-expected, the interface engine  is configured to execute the message request and return the message response with the structure-resulted based on the execution of the message request. Furthermore, if the structure-expected in the message request does not match with the structure of the resource, the interface engine  is further configured to return execution failure response with the structure-resulted.","Some embodiments of the invention may include the above-described methods being written as one or more software components. These components, and the functionality associated with each, may be used by client, server, distributed, or peer computer systems. These components may be written in a computer language corresponding to one or more programming languages such as, functional, declarative, procedural, object-oriented, lower level languages and the like. They may be linked to other components via various application programming interfaces and then compiled into one complete application for a server or a client. Alternatively, the components maybe implemented in server and client applications. Further, these components may be linked together via various distributed programming protocols. Some example embodiments of the invention may include remote procedure calls being used to implement one or more of these components across a distributed programming environment. For example, a logic level may reside on a first computer system that is remotely located from a second computer system containing an interface level (e.g., a graphical user interface). These first and second computer systems can be configured in a server-client, peer-to-peer, or some other configuration. The clients can vary in complexity from mobile and handheld devices, to thin clients and on to thick clients or even other servers.","The above-illustrated software components are tangibly stored on a computer readable storage medium as instructions. The term \u201ccomputer readable storage medium\u201d should be taken to include a single medium or multiple media that stores one or more sets of instructions. The term \u201ccomputer readable storage medium\u201d should be taken to include any physical article that is capable of undergoing a set of physical changes to physically store, encode, or otherwise carry a set of instructions for execution by a computer system which causes the computer system to perform any of the methods or process steps described, represented, or illustrated herein. Examples of computer readable storage media include, but are not limited to: magnetic media, such as hard disks, floppy disks, and magnetic tape; optical media such as CD-ROMs, DVDs and holographic devices; magneto-optical media; and hardware devices that are specially configured to store and execute, such as application-specific integrated circuits (\u201cASICs\u201d), programmable logic devices (\u201cPLDs\u201d) and ROM and RAM devices. Examples of computer readable instructions include machine code, such as produced by a compiler, and files containing higher-level code that are executed by a computer using an interpreter. For example, an embodiment of the invention may be implemented using Java, C++, or other object-oriented programming language and development tools. Another embodiment of the invention may be implemented in hard-wired circuitry in place of, or in combination with machine readable software instructions.",{"@attributes":{"id":"p-0041","num":"0040"},"figref":"FIG. 7","b":["700","700","705","755","700","740","755","710","715","710","715","705","715","700","725","730","700","725","730","700","735","700","750","750","700","745","700","720","760","760","760","750","760"]},"A data source is an information resource. Data sources include sources of data that enable data storage and retrieval. Data sources may include databases, such as, relational, transactional, hierarchical, multi-dimensional (e.g., OLAP), object oriented databases, and the like. Further data sources include tabular data (e.g., spreadsheets, delimited text files), data tagged with a markup language (e.g., XML data), transactional data, unstructured data (e.g., text files, screen scrapings), hierarchical data (e.g., data in a file system, XML data), files, a plurality of reports, and any other data source accessible through an established protocol, such as, Open DataBase Connectivity (ODBC), produced by an underlying software system (e.g., ERP system), and the like. Data sources may also include a data source where the data is not tangibly stored or otherwise ephemeral such as data streams, broadcast data, and the like. These data sources can include associated data foundations, semantic layers, management systems, security systems and so on.","In the above description, numerous specific details are set forth to provide a thorough understanding of embodiments of the invention. One skilled in the relevant art will recognize, however that the invention can be practiced without one or more of the specific details or with other methods, components, techniques, etc. In other instances, well-known operations or structures are not shown or described in details to avoid obscuring aspects of the invention.","Although the processes illustrated and described herein include series of steps, it will be appreciated that the different embodiments of the present invention are not limited by the illustrated ordering of steps, as some steps may occur in different orders, some concurrently with other steps apart from that shown and described herein. In addition, not all illustrated steps may be required to implement a methodology in accordance with the present invention. Moreover, it will be appreciated that the processes may be implemented in association with the apparatus and systems illustrated and described herein as well as in association with other systems not illustrated.","The above descriptions and illustrations of embodiments of the invention, including what is described in the Abstract, is not intended to be exhaustive or to limit the invention to the precise forms disclosed. While specific embodiments of, and examples for, the invention are described herein for illustrative purposes, various equivalent modifications are possible within the scope of the invention, as those skilled in the relevant art will recognize. These modifications can be made to the invention in light of the above detailed description. Rather, the scope of the invention is to be determined by the following claims, which are to be interpreted in accordance with established doctrines of claim construction."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The claims set forth the embodiments of the invention with particularity. The invention is illustrated by way of example and not by way of limitation in the figures of the accompanying drawings in which like references indicate similar elements. The embodiments of the invention, together with its advantages, may be best understood from the following detailed description taken in conjunction with the accompanying drawings.",{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 7"}]},"DETDESC":[{},{}]}
