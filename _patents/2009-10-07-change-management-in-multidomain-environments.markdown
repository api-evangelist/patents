---
title: Change management in multi-domain environments
abstract: Method, server, and computer product are provided to implement change management across domains. Memory is included for storing a program. A processor is functionally coupled to the memory and is responsive to computer-executable instructions contained in the program. The processor is operative to announce planned changes for a configuration item to interested outside domains, and the configuration item is in an inside domain. Open subscription is provided to the interested outside domains such that the interested outside domains can subscribe to the subscription as participants. A change instance is created or the configuration item in the inside domain. Change progress of the change instance is reported for the configuration item to the participants of the interested outside domains. State progress notifications are distributed to the participants of the change. The change instance is executed to make planned changes to the configuration item.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07975031&OS=07975031&RS=07975031
owner: International Business Machines Corporation
number: 07975031
owner_city: Armonk
owner_country: US
publication_date: 20091007
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","BRIEF SUMMARY","DETAILED DESCRIPTION"],"p":["Exemplary embodiments relate to change management in multi-domain environments, and more specifically, to managing change across organizational boundaries.","Distributed systems increasingly span organizational boundaries, and with this, system and service management domains. Examples are Web service-based integration of electronic commerce solutions, the integration of Software-as-a-Service (SaaS) with customer managed applications and mashups, and the use of Cloud based resources on an infrastructure level or on a platform level. Maturing cross-domain relationships and an increase in loose coupling and ad-hocness make managing configuration changes, e.g., changes in interfaces or endpoints, increasingly relevant. Traditional service management processes, in particular change management, rely on a central configuration management database (CMDB) to assess the impact of a change to other components of the system. However, this approach does not work in a cross-domain environment without central CMDB, without centralized management processes, and often without understanding of the party providing a service and the clients who depend on it.","Also, in an environment of software as a service, cloud computing, Web 2.0 and the like, organizations are increasingly dependent on information technology (IT) and communication infrastructure they do not own and manage. There are often complex dependency relationships between services hosted by a service provider and internal systems such as an SaaS provider hosting a sales application while authorizing users with a lightweight directory access protocol (LDAP) system that its customer organization manages. In current IT practice, changes to a system infrastructure, which are inevitable, will be managed using a change management process. This process will assess the impact on all systems concerned in an organization, develop a change plan, schedule the change, test it and then roll it out. The crucial impact assessment is typically based on a central configuration management database (CMDB) from which dependencies can be derived. However, in an environment in which services of different service providers and their customers are meshed together, this traditional change management approach cannot consider impact on infrastructure outside one organization's management domain since it is not represented in a CMDB. A cloud provider does not know what runs on its hypervisors, and hence, which business processes will be affected in the operations of its clients. Hence, the affected systems in other organizations are not known. Furthermore, separate organizations run different change processes and change management systems.","According to one exemplary embodiment, a server is configured to implement change management across domains. Memory is included for storing a program. A processor is functionally coupled to the memory and is responsive to computer-executable instructions contained in the program. The processor is operative to announce planned changes for a configuration item to interested outside domains, and the configuration item is in an inside domain. Open subscription is provided to the interested outside domains such that the interested outside domains can subscribe to the subscription as participants. A change instance is created for the configuration item in the inside domain. Change progress of the change instance is reported for the configuration item to the participants of the interested outside domains. State progress notifications are distributed to the participants of the change. The change instance is executed to make planned changes to the configuration item.","Additional features are realized through the techniques of the present disclosure. Other systems, methods, apparatus, and\/or computer program products according to other embodiments are described in detail herein and are considered a part of the claimed invention. For a better understanding of exemplary embodiments and features, refer to the description and to the drawings.","Mechanisms of exemplary embodiments enable management of change across organizational boundaries. Mechanisms may be based on managing dependencies across domain boundaries without centralized CMDB and integrating the change management processes of external parties in a lightweight manner.","In accordance with exemplary embodiments, the distribution of management responsibility for cross-domain applications is a decentralized approach to change management that can address (1) how to assess the impact of a change if the configuration items subject to change are being used by other management domains, and (2) how to involve other organizations in a change process.","Now turning to ,  illustrates a block diagram  in accordance with exemplary embodiments. In , there are only three domains illustrated for conciseness but it is understood by one skilled in the art that numerous domains may be represented in the block diagram . The rounded boxes represent different management domains, and  illustrates domain , domain , and domain .","In , domain  represents a service provider who provides various services and assets to domain  which is client , to domain  which is client , and to other domains (not shown). In the block diagram , each domain may include various assets such as computing devices, storage devices, network devices, etc., and the various types assets of domains are understood by one skilled in the art. For explanation purposes, the various assets are represented as servers. For example, each domain is shown as having various servers, e.g., domain  includes servers , domain  includes servers , domain  includes servers , and each domain may include additional assets as known in the art. The domains , , and  may communicate with one another over a network . For clarity, the network  is not illustrated in , but is understood.","Exemplary embodiments provide change management across domain boundaries of domains , , and . Exemplary embodiments may be based on an inversion of responsibility for dealing with change impact. For example, the service provider of domain  publishes planned changes to its public configuration items (shown in ), to which service consumers in domains  and  can subscribe and then join a change coordination protocol, which integrates the change processes of the management domains  and  involved.","In a single management domain, such as a single company, service management today is mostly conducted along the lines of various sources of best practices, e.g., the IT Infrastructure Library (ITIL) and the Control Objectives for Information and related Technologies (COBIT). Assets and configuration items (CIs) (such as the CIs shown in ) are the information on which service management processes are based. Assets represent the business and accounting view on hardware components such as servers and networking components as well as any licenses. CIs represent entities that can be configured and their properties. For examples, CIs may include hard disks, application servers, web application archive (WAR) or Enterprise ARchive (EAR)-type web applications and the like. Properties of interest may be IP addresses of virtual machines, web service endpoint URLs, WSDLs associated with an endpoint, etc. What kinds of CIs and their properties depend on the intended use of the CI and the CMDB. The Distributed Management Task Force (DMTF) publishes a Common Information Model that proposes a standard set of CI types to which many vendors adhere. An important aspect of CIs in a CMDB is the notion of dependency of one CI on another CI. ITIL identifies a number of service processes such as incident management (tickets), problem management, change management, release management, SLA management, asset management and more. Service processes can trigger each other, e.g., a problem process can trigger a change process if fixing the problem requires a configuration change. Asset and configuration information are updated regularly in a discovery process that identifies new assets and CIs and changes in its configuration by searching for and analyzing systems on the network of a service infrastructure. CI and asset changes can also be driven by service management processes.","In a single management domain, it is assumed that all assets and CIs relevant for the service management processes can be found in the asset database (DB) and CMDB; it is assumed that these CIs can be discovered and read by accessing the service infrastructure and used in the change process, in particular the change design and the impact assessment. While this assumption may hold for change management internal to a single domain, for the widely distributed application environments, exemplary embodiments are designed to cater to more demanding issues. For example, there are applications needing change management which are comprised of software and infrastructure services from various administrative domains across the Internet. This leads to a distributed application infrastructure in which different elements of this infrastructure are owned and managed by different organizations. Such dependencies (e.g., by domains  and ) on infrastructure outside of a single organization's domain (e.g., dependent on domain ) has implications for change management. The distribution of management responsibility of web-based applications requires a decentralized approach as provided in exemplary embodiments to service management that takes into account the distribution of management information and the execution of management processes across organizational boundaries.","For clarity and ease of understanding, many examples are discussed herein for a change that may refer to a particular configuration item in a particular domain. It is understood that a change is not limited to a single configuration item in a single domain but may apply to multiple configuration items (e.g., one or more configuration items) in multiple domains. In exemplary embodiments, a change actually lists all (numerous) configuration items that are affected by the change even though for explanation purposes, only one or two configuration items may be referred to at times.",{"@attributes":{"id":"p-0023","num":"0022"},"figref":["FIGS. 2-5","FIG. 2","FIG. 2"],"b":["100","1","2","3","1","2","1","2","1","3","2","3"],"sub":["11 ","4 ","15 ","5 "]},"Although domains  and  are illustrated as having assets such as the servers  and , it is understood that the domains  and  (and\/or any other domains) may be a lean startup that does not have assets of its own, but instead realizes its service offering by relying on a number of services from other management domains, such as the domain . The domains  and  may depend on a cloud service for executing some intensive computations. For example, the relevant properties of the compute service provider (such as the domain ) are things such as the type and version of hypervisor, the end point where to access the service, and\/or the interface detailing operation signatures. For example, the domains  and  may utilize a credit card processing service provided by an enterprise (such as domain ) and\/or may utilize a service of a storage service provider (e.g., domain ). The relevant properties for these dependencies may include the operation signatures, service version, storage size limit, authentication mechanism, endpoint addresses, schema changes, and so on.","At some point, the service provider of domain  may need to modify some of the CIs under its control, such as CIand CI. This can potentially negatively impact their users such as clients  and . For example, as a compute service provider, the domain  may decide to adopt another type of hypervisor that may only support a subset of the previously supported guest operating systems of domain  and domain . This change may potentially disrupt the service of a web startup which may be domain  and\/or . Similarly, a change in the signature of operations accessing the web service of the storage service provider of domain  may disrupt the credit process and thereby via a chain of dependencies of other domains such as domains  and . As such, the effect on the startup may be its inability to process payments made by its clients.","If the service provider of domain  were to conduct these changes independently of its clients  and  in domains  and  respectively, the clients' services may be disrupted when the new release goes into effect. For cross-domain dependencies, exemplary embodiments do not require a CMDB and remove the burden of identifying which clients  and  to contact by the server provider of domain .","For example, a domain configuration manger , a publication\/subscription feed manager , and a change coordinator  are operative to revert the responsibilities to the clients in domains  and . Although for explanation purposes the domain configuration manger , the publication\/subscription feed manager , the change coordinator , and\/or agents  may be illustrated as separate software modules implemented by the servers  in , , , and , it is understood that software modules may be integrated into a single software module and\/or software program in accordance with exemplary embodiments.","The domain configuration manger , the publication\/subscription feed manager , and the change coordinator  provide the discovery of configuration information and notifications about changes to the configuration items CIand CIfor the domain . In the absence of a centralized CMDB and given that service providers such as domain  cannot take over this role, each client  and  is responsible for discovering and maintaining all those CIs (e.g., CIand CI) it depends on in accordance with exemplary embodiments.","With reference to , the domain configuration manager  provides a decentralized configuration discovery mechanism for the domains  and , in which each resource such as CIand\/or CIcarries out a local discovery, e.g., via its respective agent . The domain  may include a change client , and the domain  may include a change client . The change clients  and change client  are operative to work with the domain configuration manager , the publication\/subscription fee manager , and\/or the change coordinator . The change clients  and  may be, e.g., downloaded from a web site of the service provider of domain .","Furthermore, since the domain configuration manager  may provide knowledge of the configuration items CIand CIon which the clients in domains  and  depend, the clients in domains  and  are able to subscribe to changes on the particular CIs relevant to their operation as shown in . In response to receiving the discovery of configuration items CIand CIfrom the domain configuration manager, client  in domain  may subscribe to receive notification about planned changes for CI, and client  in domain  may subscribe to receive notification about planned changes for CI. For example, the client  in domain  may subscribe to the publish\/subscription feed manager  for changes about CIvia the change client  of the servers . The client  in domain  may subscribe to the publish\/subscription feed manager  for changes related to CIvia the change client  of the servers . In , the change coordinator  is operative to receive a request for a subscription to the planned changes for CIand CI. The publish\/subscription feed manager  of the service provider in domain  is then responsible to publish notifications to the domains  and  about planned changes to the CIs such as the CIand CIunder the control of service provider of domain . These notifications are configured to describe changes in sufficient detail for subscribers in domains  and  to carry out an impact analysis.","The publish\/subscription feed manager , which is the delivery mechanism for notifications, is operative to scale to a large number of subscribers such as clients  and  in domains  and  respectively, along with other clients, and work across the Internet, e.g., the network . Exemplary embodiments reduce the complexity of cross domain issues, as each client  and  maintains its own set of dependencies and the service provider in domain  can remain unaware of the clients  and  for the purpose of change management.","Instead, of a global change process, a decentralized coordination protocol is implemented by the change coordinator . The coordination protocols of the change coordinator  are applied in situations where a dynamic number of participants are being coordinated, e.g., for the client  in domain , client  in domain , and other clients in various domains. Coordination in this case refers to the distribution of state updates to the participants (such as clients  and ) involved and advancing the state of the coordination according to a state model, such as an example state model  illustrated in . In accordance with exemplary embodiments, planned changes for CIwould have its own state model , while planned changes for CIwould have its own different state model .","In exemplary embodiments, this coordination by the change coordinator  may be based on a state model representing the least common denominator of states a distributed change processes assumes, corresponding to the phases or steps of a change process. Participants such as client  in domain  and client  in domain  are free to implement the various phases of the change process as required at their end for their respective configuration items CIand CI.","With reference to ,  illustrates an example of a shared state model  in accordance with exemplary embodiments. In exemplary embodiments, there is a shared state model  that corresponds to planned changes for the CI, and there is a separate (distinct) state model  that corresponds to planned changes for the CI. It is understood that there may be numerous individual state models  that correspond to any particular configuration item undergoing a planned changed.","The publish\/subscription feed manager  is operative to publish the particular shared state model  (that corresponds to planned changes for CI) to the change client  of the client  for domain . Likewise, the publish\/subscription feed manager  is operative to publish the particular shared state model  (that corresponds to planned changes for CI) to the client change  of the client  for domain .","In , the initial state is authorization  during which participants (such as clients  and ) join the coordination process and have an opportunity to vote whether or not to go ahead with the planned change provided to the participants. For example, the change coordinator  may invite client  (e.g., a large client such as America Express\u2122) to participate in the coordination process. There may be numerous other clients in their respective domains that are also receiving the state model , but some of these other clients (e.g., smaller clients) may not be authorized by the change coordinator  to vote whether to proceed or not to proceed with the planned changes to, e.g., CIand CI, while certain clients (e.g., larger clients) are authorized to vote whether or not to proceed.","If a participant such as client  and  votes to reject the change, the state of the change process will reflect this rejection  and all the other participants (e.g., client X in domain X, client Y in domain Y, client Z in domain Z, and so forth) whether voting or not are notified of the decision. The change coordinator  is operative to receive the votes, store the votes for example in memory of the servers , and provide votes of each client to all of the clients via their respective change client, such as the change clients  and .","The service provider of domain  may wait  to receive all votes at the change coordinator  and feedback from the participants.","The change coordinator  of the service provider in domain  may take into account any votes to reject by the clients in other domains (such as clients  and ), and\/or if no one rejects the change by the planned start time of the change, the change coordinator  of the service provider in domain  (change owner which owns the configuration items undergoing the change such as CIand\/or CI) is free to indicate when it has started the implementation  and the common state model  will reflect the start, which in turns prompts all participants (such as clients  and  and other clients) to carry out the necessary changes at their end (e.g., in their respective domains). For example, the change coordinator  may release a test version and\/or inform the participants that a text version will be released of the planned changes to the configuration items (e.g., CIand\/or CI), such that the participants may adjust accordingly.","Once change coordinator  of the service provider in domain  has completed its implementation of the change in the test version and all participants have adapted accordingly, the common state model transitions to the verification phase  by the change coordinator . During the verification phase , the change coordinator invites clients in other domains, such as clients  and , to test the changes in the test version of the respective configuration items as the service provider itself in domain  tests the test version.","After testing, the change coordinator  can release  the changes for everyone (not just the participants) to see and utilize.","The service provider in domain  may decide to undo (some or all) the changes and revert  back to the previous version of the configuration items (CIor CI).","The examples of the states illustrated in  may loosely follow the ITIL service management process and may represent the common states necessary to allow participants (client  and , and others) to synchronize on implementation and testing of changes. The change coordinator  is operative to provide updates to (and receive responses from) the clients  and  for each step in the state process  in accordance with exemplary embodiments. Please note that participants represent clients in various domains who are dependent upon the resources (configuration items) of, e.g., the service provider in domain .","As discussed above with respect to the state model , exemplary embodiments provide various modes of collaboration about the planned changes and more detail is provided below. Given the cross-domain and even cross-organizational nature of change processes, it is important to ensure that service providers can maintain control over their configuration items (resources) and still cooperate with those clients  and  affected by the changes of configuration items in domain . Accordingly, exemplary embodiments describe collaboration modes of the change coordinator . These collaboration modes represent different levels of influence that various participants may be granted by the change coordinator  of domain  over the outcome of the change process for particular configuration items, such as CIand CI. The change coordinator  is operative to provide the following example collaboration modes for the clients  and , along with other clients in various domains.","1) Informative participants: The change coordinator  is operative to notify informative participants of progress made as the change process runs (i.e., authorizing  and\/or implementing ), but the change coordinator  does not allow the informative participants to have any influence over the change process, and the informative participants do not supply any feedback. An informative participant is enabled to follow the change process continuously provided by the change coordinator  and adapt to the states of the change process, but no further cooperation can take place by the informative participant.","2) Consultative participants: In addition to the privileges of the informative participants, the change coordinator  is operative to ask a consultative participant to provide feedback about the change process, such as whether the consultative participant could verify the change, how long it took to implement the necessary changes at the consultative participant's end, and\/or whether the change to the configuration item is a good idea. This affords collection of information about how clients adapted to a change, and it may be useful to aggregate such information over time by the change coordinator .","3) Co-Authorizing participants: In addition to the privileges of the informative and consultative participants above, in this case, the change coordinator  is operative to provide a co-authorizing participant the ability to influence the change process through its authorization vote. A co-authorizing participant can vote to reject (or accept) the change during the authorization phase .","4) Co-Verifying participants: In addition to the privileges of the informative, consultative, and co-authorizing participants above, the change coordinator  is operative to allow the co-verifying participant's vote during the verification phase  to be taken into account by the change coordinator . A co-verifying participant whose adaptation to a change failed can thus cause the service provider in domain  and all other participants to revert  their changes.","The following is an example in accordance with exemplary embodiments. The domain configuration manager , publish\/subscription feed manager , and change coordinator  are operative to carry out change notifications in a scalable manner, to allow clients such as clients  and  to easily integrate with the change coordination protocol, and to respect the autonomy of the various domains involved in the change.","In response to the service provider of domain  submitting a new planned change for the configuration items CIand CIto change coordinator , the change coordinator  is operative create a new change instance, such as the change instances for CIand CI, respectively. The change instance for CImay be linked to a URL for this change instance CI, and likewise for CI. Furthermore, this URL for the corresponding change instance may be transmitted from the change coordinator  to the change clients  and .","The domain configuration manager  is operative to provide the discovery of configuration items that are about to undergo changes, such as configuration items CIand CI. Instead of relying on a centralized approach and CMDBs, each resource performs discovery of its CIs through its own locally installed agent . This information may, e.g., be made available to clients  and  respectively in an XML format, referred to herein as Smart Configuration Items (SCI). Each SCI contains the properties of the configuration item (e.g., CIand CI) it represents and a set of dependencies on other SCIs. As such, an SCI for CIcontains any hardware and\/or software related to CI, along with the other CIs that CIis dependent upon, such as CIand CI. Likewise, an SCI for CIcontains any hardware and\/or software related to CI, along with the other CIs that CIis dependent upon, such as CIand CI. The dependencies of CIand CIcan either be in the same domain (e.g., domain ) and\/or in some remote domain. The domain configuration manger  is operative to maintain a registry of all SCIs that are discovered in its domain  and expose the SCIs to interested clients  and  in domains  and  respectively. The domain configuration manger  may utilize, e.g., a RESTful interface to expose the properties of configuration items CIand CI. to configuration items CI(change client ) and CI(change client ), respectively. Each resource, such as CIand CI, may thus be responsible to maintain its own set of dependencies.","The publish\/subscription feed manager  (and\/or change coordinator ) is operative to provide subscription to and receive subscriptions from client  for CIand client  for CI. The publish\/subscription feed manager  is to operative provide notifications of planned changes to CIand CIrespectively for client  and client . The client  in domain  and the client  in domain  may download their respective change clients  and , subscribe to receive (from the domain configuration manger , the publish\/subscription feed manager , and\/or the change coordinator ) their respective change clients  and , and\/or interface with the change client  and change client , respectively.","The change clients  and  may, e.g., be a web-based user interface that allows end users representing a service provider (such as the server provider in domain ) to supply information to their clients about planned changes for CIand CI. Through this user interface of clients  and , clients  and  can (first) retrieve from the domain configuration manager  a list of SCIs (e.g., all SCIs that belong to their respective application and\/or all SCIs that represent databases under control of domain ) for CIand CI. Next, the publish\/subscription feed manager  and\/or the change coordinator  is operative to provide (to the change clients  and ) the planned changes to the selected SCIs and supply information such as the planned start time and a natural-language description of the changes to be made for each configuration item CIand CI. For example, the publish\/subscription feed manager  and\/or the change coordinator  is operative to provide the change properties to the configuration items CIand CIand their respective state model .","The domain configuration manger  is operative to be a central domain service for domain  and is operative to act as the entry point to change management functionality involving domain . The domain configuration manger  is operative to add the newly submitted change notifications to the publish\/subscription feed manager  (such as, e.g., a set of RSS feeds). The publish\/subscription feed manager  is operative to describe the latest changes to SCIs for CIand CIin its domain and to provide these change notifications to the change clients  and . The change clients  and  may comprise a subscription client. Via the user interface of the change clients  and , the clients  and  can view the SCIs on which they respectively depend upon in response to the clients  and  requesting the change clients  and  to subscribe to the planned change feeds of its dependencies. Knowledge of these dependencies results from the local discovery of resources (CIand CI) by the agent . The change clients  and  are operative to poll the domain configuration manager  for relevant change instances for CIand change instances for CIfor new changes to these dependencies, and the change clients  and  displays them. The domain configuration manger  is operative to also notify the clients  and  via email and short message service (SMS). The clients  and  can view the details of any new changes and carry out an impact analysis in their own respective domains  and .","As discussed herein, the change coordinator  is operative to provide various levels of collaboration modes to the clients  and , such as informative, consultative, co-authorizing, and\/or co-verifying. Should it be necessary to adapt to this change in a coordinated manner, the change coordinator  is operative to receive votes and\/or feedback from the change clients  and . The change coordinator  is configured to allow the change clients  and  to register, submit votes, and inquire about the current status of an ongoing change process.","The change coordinator  may include features of a REST interface. The change coordinator  is operative to include a state machine implementing the common state model . The change coordinator  is operative to inspect all incoming requests and determine whether or not to transition to the next state in the state model . For example, change coordinator  may be free to transition to verifying , once the service provider in domain  and all clients (such as clients  and ) indicate that they have completed the implementation and\/or adaptation to the change of the respective configuration items (CIand CI). Upon a state transition by the change coordinator , the change coordinator  is operative to provide the status update for the configuration item to the change clients  and  (e.g., http:\/\/cp.acme.com\/status\/update) to update clients  and  of the transition. The change coordinator  may then await reaction of the clients  and .","For example, the change coordinator  may inform everyone that the verifying phase  has been reached and indicate that it now awaits votes from the service provider in domain  and participants (clients  and ) indicating whether or not they verify the change. As mentioned herein, all participants do not have the voting privileges throughout the change process. Similarly, once the change coordinator  informs everyone that the change coordinator  is about to release the change, the change coordinator  waits for confirmation that the clients in domain  and  have made their respective changes in order for the change process to enter the final change released state .","As understood by one skilled in the art, representational state transfer (REST) is a style of software architecture for distributed hypermedia systems such as the World Wide Web. A specific REST-style architecture such as the web consists of clients and servers.","Further regarding the network , the network  may include circuit-switched and\/or packet-switched technologies and devices, such as routers, switches, hubs, gateways, etc., for facilitating communications. The network  may include wireline and\/or wireless components utilizing, e.g., IEEE 802.11 standards for providing over-the-air transmissions of communications. The network  can include IP-based networks for communication between a customer service center and clients\/users. Also, the network  may include wireline and\/or wireless components utilizing standards, e.g., multimedia messaging services (MMS) and short messaging services (SMS). The network  can include a managed IP and\/or wireless network administered by a service provider, which can control bandwidth and quality of service for the communications discussed herein. The network  may be implemented in a wireless fashion, e.g., using wireless protocols and technologies, such as such as Wi-Fi\u00ae, WiMAX\u2122, Bluetooth\u00ae, etc. The network  can also be a packet-switched network, such as a local area network, a wide area network, a metropolitan area network, an Internet network, or other similar types of networks. The network  may be a cellular communications network, a fixed wireless network, a wireless local area network (LAN), a wireless wide area network (WAN), a personal area network (PAN), a virtual private network (VPN), an intranet or any other suitable network, and the network  may include equipment for receiving and transmitting signals, such as a cell tower, a mobile switching center, a base station, and a wireless access point.","Exemplary embodiments are not limited to but are capable of being implemented in the diagrams illustrated in . Additionally, the servers , , and  may be representative of numerous servers. Also, the configuration items may be representative of numerous the configuration items (resources). Therefore, the diagrams illustrated in  are neither limited numerically to the elements depicted therein nor limited to the exact configuration and operative connections of elements. Further, it is understood by those skilled in the art that elements may be added to, subtracted from, or substituted for the elements described in the diagrams. Also, elements such as the servers , , and  and other elements may be implemented in processor-based computer systems as discussed in  and may be programmed to operate and function in accordance with exemplary embodiments.",{"@attributes":{"id":"p-0061","num":"0060"},"figref":"FIG. 6","b":["600","600","600","11","12","50","60","70","80","1","2","3"]},"Generally, in terms of hardware architecture, the computer  may include one or more processors , computer readable memory , and one or more input and\/or output (I\/O) devices  that are communicatively coupled via a local interface (not shown). The local interface can be, for example but not limited to, one or more buses or other wired or wireless connections, as is known in the art. The local interface may have additional elements, such as controllers, buffers (caches), drivers, repeaters, and receivers, to enable communications. Further, the local interface may include address, control, and\/or data connections to enable appropriate communications among the aforementioned components.","The processor  is a hardware device for executing software that can be stored in the memory . The processor  can be virtually any custom made or commercially available processor, a central processing unit (CPU), a data signal processor (DSP), or an auxiliary processor among several processors associated with the computer , and the processor  may be a semiconductor based microprocessor (in the form of a microchip) or a macroprocessor.","The computer readable storage memory  can include any one or combination of volatile memory elements (e.g., random access memory (RAM), such as dynamic random access memory (DRAM), static random access memory (SRAM), etc.) and nonvolatile memory elements (e.g., ROM, erasable programmable read only memory (EPROM), electronically erasable programmable read only memory (EEPROM), programmable read only memory (PROM), tape, compact disc read only memory (CD-ROM), disk, diskette, cartridge, cassette or the like, etc.). Moreover, the memory  may incorporate electronic, magnetic, optical, and\/or other types of storage media. Note that the memory  can have a distributed architecture, where various components are situated remote from one another, but can be accessed by the processor .","The software in the computer readable storage memory  may include one or more separate programs, each of which comprises an ordered listing of executable instructions for implementing logical functions. The software in the memory  includes a suitable operating system (O\/S) , compiler , source code , and one or more applications  of the exemplary embodiments. As illustrated, the application  comprises numerous functional components for implementing the features, processes, methods, functions, and operations of the exemplary embodiments. The application  of the computer  may represent numerous applications, agents, software components, modules, interfaces, etc., as discussed herein but the application  is not meant to be a limitation.","The operating system  may control the execution of other computer programs, and provides scheduling, input-output control, file and data management, memory management, and communication control and related services.","The application(s)  may employ a service-oriented architecture, which may be a collection of services that communicate with each. Also, the service-oriented architecture allows two or more services to coordinate and\/or perform activities (e.g., on behalf of one another). Each interaction between services can be self-contained and loosely coupled, so that each interaction is independent of any other interaction.","Further, the application  may be a source program, executable program (object code), script, or any other entity comprising a set of instructions to be performed. When a source program, then the program is usually translated via a compiler (such as the compiler ), assembler, interpreter, or the like, which may or may not be included within the memory , so as to operate properly in connection with the O\/S . Furthermore, the application  can be written as (a) an object oriented programming language, which has classes of data and methods, or (b) a procedure programming language, which has routines, subroutines, and\/or functions.","The I\/O devices  may include input devices (or peripherals) such as, for example but not limited to, a mouse, keyboard, scanner, microphone, camera, etc. Furthermore, the I\/O devices  may also include output devices (or peripherals), for example but not limited to, a printer, display, etc. Finally, the I\/O devices  may further include devices that communicate both inputs and outputs, for instance but not limited to, a NIC or modulator\/demodulator (for accessing remote devices, other files, devices, systems, or a network), a radio frequency (RF) or other transceiver, a telephonic interface, a bridge, a router, etc. The I\/O devices  also include components for communicating over various networks, such as the Internet or an intranet. The I\/O devices  may be connected to and\/or communicate with the processor  utilizing Bluetooth connections and cables (via, e.g., Universal Serial Bus (USB) ports, serial ports, parallel ports, firewire, HDMI (High-Definition Multimedia Interface), etc.).","When the computer  is in operation, the processor  is configured to execute software stored within the memory , to communicate data to and from the memory , and to generally control operations of the computer  pursuant to the software. The application  and the O\/S  are read, in whole or in part, by the processor , perhaps buffered within the processor , and then executed.","When the application  is implemented in software it should be noted that the application  can be stored on virtually any computer readable medium for use by or in connection with any computer related system or method. In the context of this document, a computer readable medium may be an electronic, magnetic, optical, or other physical device or means that can contain or store a computer program for use by or in connection with a computer related system or method.","The application  can be embodied in any computer-readable storage medium  for use by or in connection with an instruction execution system, apparatus, server, or device, such as a computer-based system, processor-containing system, or other system that can fetch the instructions from the instruction execution system, apparatus, or device and execute the instructions. In the context of this document, a \u201ccomputer-readable storage medium\u201d can be any statutory means that can store, read, write, communicate, or transport the program for use by or in connection with the instruction execution system, apparatus, or device. The computer readable storage medium can be, for example but not limited to, an electronic, magnetic, optical, or semiconductor system, apparatus, or device.","More specific examples (a nonexhaustive list) of the computer-readable storage medium  would include the following: a portable computer diskette (magnetic or optical), a random access memory (RAM) (electronic), a read-only memory (ROM) (electronic), an erasable programmable read-only memory (EPROM, EEPROM, or Flash memory) (electronic), and a portable compact disc memory (CDROM, CD R\/W) (optical).","In exemplary embodiments, where the application  is implemented in hardware, the application  can be implemented with any one or a combination of the following technologies, which are each well known in the art: a discrete logic circuit(s) having logic gates for implementing logic functions upon data signals, an application specific integrated circuit (ASIC) having appropriate combinational logic gates, a programmable gate array(s) (PGA), a field programmable gate array (FPGA), etc.","It is understood that the computer  includes non-limiting examples of software and hardware components that may be included in various devices, servers, and systems discussed herein, and it is understood that additional software and hardware components may be included in the various devices and systems discussed in exemplary embodiments.",{"@attributes":{"id":"p-0076","num":"0075"},"figref":"FIG. 7","b":["700","700","620","50","60","70","80","110"]},"The server  is operative to announce planned changes for a configuration item to interested outside domains (such as domains  and ), and the configuration item is in an inside domain (such as domain ) at .","The server  is operative to provide open subscription to the interested outside domains such that the interested outside domains can subscribe to the subscription as participants at .","The server  is operative to create a change instance for the configuration item in the inside domain at .","The server  is operative to report change progress of the change instance for the configuration item to the participants of the interested outside domains at .","The server  is operative to distribute state progress notifications to the participants of the change at .","The server  is operative to execute the change instance to make planned changes to configuration item at .","The terminology used herein is for the purpose of describing particular embodiments only and is not intended to be limiting of the invention. As used herein, the singular forms \u201ca\u201d, \u201can\u201d and \u201cthe\u201d are intended to include the plural forms as well, unless the context clearly indicates otherwise. It will be further understood that the terms \u201ccomprises\u201d and\/or \u201ccomprising,\u201d when used in this specification, specify the presence of stated features, integers, steps, operations, elements, and\/or components, but do not preclude the presence or addition of one ore more other features, integers, steps, operations, element components, and\/or groups thereof.","The corresponding structures, materials, acts, and equivalents of all means or step plus function elements in the claims below are intended to include any structure, material, or act for performing the function in combination with other claimed elements as specifically claimed. The description of the present invention has been presented for purposes of illustration and description, but is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the invention. The embodiment was chosen and described in order to best explain the principles of the invention and the practical application, and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated","The flow diagrams depicted herein are just one example. There may be many variations to this diagram or the steps (or operations) described therein without departing from the spirit of the invention. For instance, the steps may be performed in a differing order or steps may be added, deleted or modified. All of these variations are considered a part of the claimed invention.","While the exemplary embodiments of the invention have been described, it will be understood that those skilled in the art, both now and in the future, may make various improvements and enhancements which fall within the scope of the claims which follow. These claims should be construed to maintain the proper protection for the invention first described."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE SEVERAL VIEWS OF THE DRAWINGS","p":["The subject matter which is regarded as the invention is particularly pointed out and distinctly claimed in the claims at the conclusion of the specification. The forgoing and other features of the present disclosure are apparent from the following detailed description taken in conjunction with the accompanying drawings in which:",{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 7"}]},"DETDESC":[{},{}]}
