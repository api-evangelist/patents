---
title: Method and framework for using XML files to modify network resource configurations
abstract: A method and system are provided for a script driven framework that produces and uses a transactional document. The transactional document provides an interface for modifying configuration information associated with a network resource. In one example, a framework for creating the transactional document includes a transformation file for converting between file formats, multiple responders, a responders file, a mapping configuration file, and a service manager. The responders file assigns at least one responder to create a specified portion of the transactional document based on the configuration information. The mapping configuration file maps between the transactional document and a user interface, which enables the configuration information to be modified through the transactional document via the user interface. The service manager shuts down and restarts services in a predefined order so that the network resource will be configured as defined by the modified configuration information.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07546313&OS=07546313&RS=07546313
owner: Novell, Inc.
number: 07546313
owner_city: Provo
owner_country: US
publication_date: 20030617
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["This disclosure relates generally to computer software and, more specifically, to a system and method for script driven, web-based management of computer network resources.","A computer network connects devices that provide a variety of services to each other and to users. Each device is generally controlled by an operating system (which may be different on different devices) and associated with one or more of the services. In order for these services to be delivered, the devices and their services need to be configured. In networks that include a large number of devices or are spread over a large geographical area, the configuration of services is ideally accomplished remotely.","However, remotely configuring services presents a number of difficulties, particularly with respect to legacy services (e.g., services that are already in use). For example, on most operating systems, the services are configured through an ad hoc collection of utilities, registration settings, and files scattered throughout the associated operating system. This makes it difficult to modify a service's configuration. Furthermore, services may be interdependent. For instance, if an address (e.g., an internet protocol (IP) address) associated with a device is changed, each service that references that address may need to have its configuration files modified to reflect the change. Once the configuration files are modified, the services generally must be stopped and restarted in a specific order for the modifications to take effect.","Because of these and other difficulties, a relatively large amount of programming is generally needed to manage services in a uniform manner. Such programming increases the time and expense associated with configuring services and decreases the efficiency of remotely configuring services.","Therefore, what is needed is an improved method and system for remotely managing the configuration of network resources, including services.","Provided is a method and system for web-management of resources. In one embodiment, a method for using a script driven framework to produce and use a transactional document is provided, where the transactional document provides an interface for modifying configuration information associated with a network resource. The method comprises registering the configuration information with the framework and creating the transactional document based on the configuration information. At least a portion of the configuration information is transformed from a native format into a framework format for use by the transactional document using a first predefined transformation file, and the portion is modified using the transactional document.","In another embodiment, a framework for use in configuring a network resource is provided. The framework comprises a first transformation file, a plurality of responders, a responders file, and a mapping configuration file. The first transformation file is for transforming configuration information associated with the network resource from a native format into a format compatible with the framework. The responders file is for assigning at least one of the plurality of responders to create a specified portion of the transactional document based on the configuration information. The mapping configuration file is for mapping between the transactional document and a user interface, where the configuration information can be modified through the transactional document via the user interface.","This disclosure relates generally to computer software and, more specifically, to a system and method for script driven, web-based management of computer network resources. It is understood, however, that the following disclosure provides many different embodiments or examples. Specific examples of components and arrangements are described below to simplify the present disclosure. These are, of course, merely examples and are not intended to be limiting. In addition, the present disclosure may repeat reference numerals and\/or letters in the various examples. This repetition is for the purpose of simplicity and clarity and does not in itself dictate a relationship between the various embodiments and\/or configurations discussed.","Referring to , in one embodiment, a method  enables a script driven approach for remotely managing and configuring network resources without requiring excessive programming. As will be described with specific examples in , the method  begins in step  by registering configuration information with a framework (). The registration information is associated with a network resource and may include various configuration files, registry settings, and similar information. In step , a transactional document is created using the registered information. In step , configuration information may be transformed into the framework's format to enable the transactional document to read the information. The transformation is accomplished using a predefined transformation file that defines how the configuration information is to be converted from the configuration information's native format to the framework's format.","In step , modifications may be made to the configuration information via the transactional document. In step , services that are associated with the modified configuration information are automatically shut down. In step , the modifications may be transformed into the configuration information's native format. As with the transformation of step , the transformation is accomplished using another predefined transformation file that defines how the modifications are to be converted from the framework's format to the configuration information's native format. In step , the transformed modifications are written to the appropriate configuration files, registry settings, etc., and, in step , the services that were shut down in step  are automatically restarted.","Referring now to , in another embodiment, a framework  provides various classes and class relationships that enable a script driven approach for remotely managing and configuring network resources, such as that used in the method  of . In the present example, the resource is part of an appliance, which is a set of well defined services on a single network device that can be web managed. As will be described later in greater detail, the framework's classes create an appliance document (not shown) that provides a model interface to the appliance. The appliance document is a transactional extensible markup language (XML) document that is created by the classes based on a regular expression file, an extensible stylesheet language (XSL) file, and various configuration files that may be converted into XML format for use during the creation of the appliance document.","The classes in the framework  include an ApplianceGadget class , a nash class , an ApplianceDocument class , an IElementResponder class , a MultiRegExElementResponder class , a CmdElementResponder class , and a ServiceManager class . Various XML files may be used to control the behavior of the classes -, such as an XML configuration file  (e.g., a mapping configuration file), a responders registry file , and a services registry file . The XML configuration file  is used by both the ApplianceGadget class  and the nash class . The responders registry file is used by the IElementResponder class  and the services registry file is used by the ServiceManager class . As described previously, a regular expression file and an XSL style sheet are also defined.","The ApplianceDocument class  uses the services of the IElementResponders class  to locate and modify resource settings from an adhoc collection of configuration files, utility commands, and direct application programming interface (API) calls. As it is understood that data output by the ApplianceDocument class  may be used in real time, stored as a document, stored as data components of a transactional document, etc., the output is referred to hereinafter as an \u201cappliance document\u201d for purposes of clarity. The appliance document is composed using element responders as defined by the responders registry file . More specifically, the responders registry file  defines which element responders (e.g., the MultiRegExElementResponder class , the CmdElementResponder class , and other responder classes not shown in ) will \u201cservice\u201d (e.g., provide and modify data) a particular element in the ApplianceDocument class .","The standard element responders transform data to and from configuration files as defined in the responder registry file . The responder registry file  specifies which configuration file a responder will transform and may designate different files for different operations. For example, the regular expression file may be specified for use by the responders when transforming a configuration file into XML format on read operations, while the XSL style sheet may be specified for use by the responders when transforming from XML back into the configuration file format for write operations.","The following four types of classes act as responders to help construct the appliance document. An ElementResponder (not shown) is a placeholder. It does not generate data except for creating a new element that corresponds to its registered xpath (e.g., an XSL component that is used to identify tagged XML elements and may serve a similar purpose as a file path in a file system).","The MultiRegExElementResponder  handles transformations. For a reading operation, this responder uses a regular expression file () to transform a configuration file into an XML file. For a writing operation, it uses XSL style sheets () to transform an XML file into a configuration file. The XSL style sheets, the regular expression file, and the XML configuration file  may be registered within the framework  to facilitate these transformations. In addition, a service xpath may be configured by this responder to indicate a context from which a services hierarchy of parent\/child services may operate.","The CmdResponder  translates data from the appliance document into CLI commands. Parameters for the CmdResponder  that are registered in the responders registry file  are the same as for the MultRegExElementResponder , except that, rather than a configuration file, a command to execute is registered.","A Responder (not shown) or any inherited class transforms an XML file into a configuration file based on XSL style sheets. An XSL file and a regular expression file may be registered in the framework  through the responders registry file  to facilitate the transformation.","Through the responders registry file , concrete IElementResponders are registered to the framework . Also through this file, a link is created to the ServiceManager class . That is, when a particular element is changed, an xpath is provided by the responders registry file  into the services registry file  to tell the ServiceManager class  where to begin shutdown and restart of services. Services that are associated with configuration files or registry settings that are to be modified may need to be shut down in a predefined order and restarted for the modifications to take effect. The ServiceManager class  looks in the services registry file  to determine shutdown and restart order. Services are shut down beginning at the lowest level child service in the XML hierarchy and working up to the highest level parent, and are restarted in the opposite order.","The ApplianceGadget class  and the nash class  provide management interfaces for the appliance. More specifically, the ApplianceGadget class  consumes the ApplianceDocument class  to enable web management of the appliance, while the nash class  consumes the ApplianceDocument class  in order to provide command line interface (CLI) management.","Referring now to , an exemplary computer , such as may be used to implement the framework  of , is illustrated. The computer  may include a central processing unit (\u201cCPU\u201d) , a memory unit , an input\/output (\u201cI\/O\u201d) device , and a network interface . The network interface may be, for example, one or more network interface cards. The components , , , and  are interconnected by a bus system . It is understood that the computer may be differently configured and that each of the listed components may actually represent several different components. For example, the CPU  may actually represent a multi-processor or a distributed processing system; the memory unit  may include different levels of cache memory, main memory, hard disks, and remote storage locations; and the I\/O device  may include monitors, keyboards, and the like.","The computer  may be connected to a network . The network  may be, for example, a subnet of a local area network, a company wide intranet, and\/or the Internet. The computer  may be identified on the network  by an address or a combination of addresses, such as a media control access (MAC) address associated with the network interface  and an internet protocol (IP) address. Because the computer  may be connected to the network , certain components may, at times, be shared with other network devices , . Therefore, a wide range of flexibility is anticipated in the configuration of the computer. Furthermore, it is understood that, in some implementations, the computer  may act as a server to other devices , . In the present example, at least a portion of the device  forms an appliance  that can be managed from the computer .","Referring again to  and with additional reference to , in another embodiment, a more detailed description of various components of the framework  is provided with specific examples.","Referring specifically to , an exemplary appliance document , such as may be produced by the ApplianceDocument class  of , is illustrated. In the present example, the appliance document  includes multiple elements, such as a NetworkAdapters element , a first DateAndTime element , a second DateAndTime element , and a Files element . Each element may contain one more sub-elements. For example, the NetworkAdaptors element  includes a Subnets element , which in turn includes a Gateway element , a Type element , a Device element , an IpAddress element , a Netmask element .","Referring now specifically to , an exemplary regular expression file  is illustrated. As stated previously, the regular expression file  defines how configuration files are to be transformed from a configuration file format to XML. The regular expression file  (named \u201cipaddress.rex\u201d) is in XML format. Each \u201cexpression\u201d element is used to search a particular configuration file for a match (e.g., TYPE , DEVICE , IPADDR , NETMASK , GATEWAY ). When a match is located, the matching value may be substituted (elements -) or the value may be removed (element ). This results in the elements - in the appliance document  (). For example, a configuration file may contain the following:\n\n","The regular expression file  will pull the value 137.65.203.166, which is symbolized in the file by $2, from the configuration file. Subsequently, in the appliance document  created using the regular expression file , the following IpAddress element  () will be created under the NetworkAdapters element :\n\n","Referring now specifically to , an exemplary XSL stylesheet  is illustrated. As stated previously, the XSL stylesheet  (named \u201cipaddress.xsl\u201d) defines how a configuration file is to be transformed from the XML used by the framework  back into the file format used by the configuration file on the appliance .","Referring now specifically to , the exemplary XML configuration file  of , under the ApplianceShell element , maps between CLI commands and xpaths in the appliance document  of . By specifying an xpath into the appliance document , the CLI implementation can locate and retrieve a specific value out at the xpath point in the appliance document . For example, the command \u201cget address\u201d  goes into the appliance document  and retrieves an IP address (e.g., the element ) from the appliance document . This makes it possible to add CLI commands without recompiling by simply adding the command to the XML configuration file .","Referring now specifically to , the exemplary responders registry file  defines how the ApplianceDocument class  will use the services of the IElementResponder  to construct the appliance document  from an adhoc collection of configuration files, utility commands, or API calls. The element names in the responders registry file  correlate to the output of the ApplianceDocument class . For example, the responders registry file  includes a NetworkAdapters element , a first DateAndTime element , a second DateAndTime element , and a Files element , which correspond to the elements of the appliance document , such as the NetworkAdapters element , the first DateAndTime element , the second DateAndTime element , and the Files element .","As stated previously, the responders registry file  directs the creation of the appliance document  of  by defining which responders (e.g., the MultiRegExElementResponder, the CmdResponder, etc.) handle a specific element of the appliance document and which regular expression files they will use. For example, lines denoted by reference numbers ,  of the responders registry file  specify that the regular expression file  of  (e.g., ipaddress.rex) and the XSL style sheet  of  (e.g., ipaddress.xsl), will be used for transforming files for the Subnets element  of the appliance document . As defined on the line denoted by the reference number , an XResponder will provide the services.","Similarly, lines denoted by reference numbers ,  of the responders registry file  specify that a regular expression file named files.rex and an XSL style sheet named files.xsl will be used for transforming files for the Files element  of the appliance document . The services will be provided by the CmdResponder, as defined by the line denoted by the reference number . In the present example, an \u201cls\/\u201d command is provided, which is represented in the appliance document  by various commands in the Files element  of .","Referring now to , the services registry file  is used by the ServiceManager  to determine the shutdown and startup order of services. When an \u201capply\u201d command is imposed on the ApplianceDocument class , all services relating to any configuration file changes are stopped in the order determined by the services registry file , starting from the lowest-level service and continuing to the highest-level service (e.g., child services get shutdown before parent services). Then, configuration changes are written into the corresponding configuration files. Finally, all stopped services are restarted in the order determined by the services registry file , starting from the highest-level service and continuing to the lowest-level service (e.g., parents are all started first and then children are started).","It is noted that the service registry file  enables more efficient \u201ccycling\u201d of services by enabling the service cycling hierarchy to be seen and modified by examining and changing the service registry file . Previously, modifications to cycling code frequently required program modifications, which increased the complexity of modifying the cycling hierarchy when appliance changes were made.","Referring now to , in another embodiment, a sequence  illustrates how configuration settings may be read from a configuration file or other data source using the framework of  and the operations associated with each class. The read operation uses classes described previously with respect to , including the nash class  (which provides a CLI management interface to the ApplianceDocument class ), the ApplianceDocument class , the IElementResponder class , and a data source  which, for purposes of example, is a configuration file.","The sequence  begins in step  when the nash class  calls a selectSingleNode (String xpath) operation from the ApplianceDocument class . In response, the ApplianceDocument class  executes a traverseAndReadNodes(Element context, Element parent) operation in step , and then calls a readNode(Element) operation associated with the IElementResponder class  in step . In step , the IElementResponder class  reads a file from the data source  using API or CLI commands.","In step , the IElementResponder class  utilizes a transformToXML(BufferedReader file, Element parent) operation to transform the read source  into an XML file. As discussed previously, a regular expression file and an XSL style sheet may be used to direct the transformations to and from XML. In step , the IElementResponder class  returns the transformed XML file to the ApplianceDocument class  and, in step , the ApplianceDocument class  returns the XML file containing the configuration information specified by the original selectSingleNode call.","Referring now to , in yet another embodiment, a sequence  illustrates how configuration settings may be written to a configuration file or other data source using the framework of  and the operations associated with each class. The write operation uses classes described previously with respect to , including the ApplianceGadget class  (which provides a web-based management interface to the ApplianceDocument class ), the ApplianceDocument class , the IElementResponder class , the ServiceManager class , and a data source , which, for purposes of example, is a configuration file.","The sequence  begins in step  when the ApplianceGadget class  calls a setValue(String xpath, String value) from the ApplianceDocument class . In step , in response, the ApplianceDocument class  retrieves a responder by executing a getResponder(String xpath) operation, and then, in step , sends a setValue(String, String) to the IElementResponder class . In step , the ApplianceGadget class  executes an apply( ) operation of the ApplianceDocument class , which results in the ApplianceDocument class  calling a stopServices(Object[ ] servicePaths, Element changeDoc) function and sending a stopServices(String[ ] finalPaths, Element changes) to the ServiceManager class  in steps , , respectively.","In step , the ApplianceDocument class  executes an applyChanges( ) operation associated with the IElementResponder class . In response, the IElementResponder class  converts modifications from XML format to a configuration file format and applies the modifications to the data source  in step .","In step , the ApplianceDocument class  executes a startServices(Object[ ] xpaths, Element changeDoc) operation and, in step , sends a startServices(Object[ ] xpaths, Element changes( )) message to the ServiceManager class  to restart the newly modified services.","Referring now to , in still another embodiment, a sequence  illustrates how a conversion to and from an XML file may be achieved using a MultiRegExResponder class  within the framework  of . The transformations use classes described previously with respect to , including the ApplianceDocument class , the MultiRegExResponder class , and a data source , which, for purposes of example, is a configuration file.","In step , during the reading portion of the sequence , the MultiRegExResponder class  receives an instruction from the ApplianceDocument class  to execute a readNode(element) operation. In step , the MultiRegExResponder class  executes a transformToXML (BufferedReader file, Element parent) operation, which uses a regular expression file registered in the responders registry file  to convert a configuration file into an XML file. In step , the MultiRegExResponder class  locates a configuration file value searched by regular expression (e.g., the IPADDR element  of the regular expression file  of ) and, in step , adds the located value and element name to the element identified in the readNode operation of step . The element is then returned to the ApplianceDocument class  in step .","A modified value for the returned element is supplied to the MultiRegExResponder class  using a setValue(String, String) operation in step  and the modification is applied by the MultiRegExResponder class  in step . In response to an applyChanges( ) instruction issued by the ApplianceDocument class  in step , the MultiRegExResponder class  uses XSL style sheets registered in the responders registry file  to convert the modified XML file into the format of the original configuration file in step  and then store the configuration file.","While the invention has been particularly shown and described with reference to a few exemplary embodiments thereof, it will be understood by those skilled in the art that various changes in form and detail may be made therein without departing from the spirit and scope of the invention. For example, while the framework  is illustrated using primarily XML files and XSL style sheets, it is understood that other formats may be substituted. Furthermore, while the examples focus on the configuration of services, it is understood that the present disclosure may be used when configuring devices. In addition, steps may be performed in a different order than described, some steps may be incorporated into other steps, and some steps may be omitted entirely. Also, while terms such as \u201cpredefined\u201d may be used with respect to certain files or actions for purposes of example, it is understood that files and actions may be created, configured, or manipulated dynamically. Therefore, the claims should be interpreted in a broad manner, consistent with the present invention."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 1A"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":["FIG. 1B","FIG. 1A"]},{"@attributes":{"id":"p-0011","num":"0010"},"figref":["FIG. 2","FIG. 1B"]},{"@attributes":{"id":"p-0012","num":"0011"},"figref":["FIG. 3","FIG. 1B"]},{"@attributes":{"id":"p-0013","num":"0012"},"figref":["FIG. 4","FIG. 1B","FIG. 3"]},{"@attributes":{"id":"p-0014","num":"0013"},"figref":["FIG. 5","FIG. 1B","FIG. 3"]},{"@attributes":{"id":"p-0015","num":"0014"},"figref":["FIG. 6","FIG. 1B"]},{"@attributes":{"id":"p-0016","num":"0015"},"figref":["FIG. 7","FIG. 1B","FIG. 3"]},{"@attributes":{"id":"p-0017","num":"0016"},"figref":["FIG. 8","FIG. 1B","FIG. 3","FIG. 2"]},{"@attributes":{"id":"p-0018","num":"0017"},"figref":["FIG. 9","FIG. 1B"]},{"@attributes":{"id":"p-0019","num":"0018"},"figref":["FIG. 10","FIG. 1B"]},{"@attributes":{"id":"p-0020","num":"0019"},"figref":["FIG. 11","FIG. 1B"]}]},"DETDESC":[{},{}]}
