---
title: Network system extensible by users
abstract: In one aspect, a network system includes a user interface which allows a user to interact with the network system. An agent server is coupled to the user interface. The agent server manages the operation of the network system. Furthermore, the agent server in conjunction with the user interface is operable to create or modify an agent in response to interaction by the user. In another aspect, a network system includes an agent server which manages the operation of the network system. An agent is operable to utilize a service within the network system. A service wrapper, associated with the service, cooperates with the agent server to mediate interaction between the service and the agent.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06839733&OS=06839733&RS=06839733
owner: Ben Franklin Patent Holding L.L.C.
number: 06839733
owner_city: Los Altos
owner_country: US
publication_date: 20001114
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS REFERENCE TO RELATED APPLICATIONS","TECHNICAL FIELD OF THE INVENTION","CROSS-REFERENCE TO MICROFICHE APPENDICES","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS"],"p":["The present application is a continuation of Ser. No. 09\/178,366, filed Oct. 23, 1998, now U.S. Pat. No. 6,163,794, entitled \u201cNetwork System Extensible By Users\u201d which application was allowed on Jul. 3, 2000.","This Application relates to the subject matter disclosed in the following United States Patent and co-pending United States Applications:","U.S. Pat. No. 5,603,031 to White et al., entitled \u201cSystem and Method, For Distributed Computation Based Upon the Movement, Execution, and Interaction of Processes In a Network;\u201d","U.S. application Ser. No. 08\/609,699, filed Mar. 1, 1996, entitled \u201cMethod and Apparatus For Telephonically Accessing and Navigating the Internet;\u201d","U.S. application Ser. No. 08\/798,675, filed Feb. 10, 1997, entitled \u201cSystem and Method For Distributed Computation Based Upon the Movement, Execution, and Interaction of Processes In a Network;\u201d and","U.S. application Ser. No. 09\/071,717, filed May 1, 1998, entitled \u201cVoice User Interface With Personality.\u201d","The above patent and co-pending applications are assigned to the present Assignee and are incorporated herein by reference.","The present invention relates generally to the field of computer software systems and, more particularly, to a network system extensible by users.","A portion of the disclosure of this patent document contains material that is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent disclosure as it appears in the Patent and Trademark Office patent files or records, but otherwise reserves all copyright rights whatsoever.","Advances in computer and telephony systems have led to the development of numerous technology-driven services, such as electronic mail (e-mail), voice mail, electronic organizers (for appointments and addresses), on-line databases (e.g., for periodicals and stock quotes), and the like. An increasing popularity for these technological services in recent years has spawned an entire industry devoted to the provision and integration of the same. For example, numerous companies now offer e-mail service over the interconnection of computers widely known as the Internet. Other companies offer systems for voice mail services in both private branch exchange (PBX) and public telephone environments. Entities which offer, supply, or otherwise provide services are referred to as \u201cservice providers.\u201d Entities which purchase, consume, or otherwise use services are referred to as \u201csubscribers.\u201d","Many technological services are supported by one or more software applications. These software applications are often developed with a broad spectrum of subscribers in mind. As such, the respective technological services may address the generalized needs of many subscribers, but not the specialized needs of any one particular subscriber or group of subscribers.","With previous techniques, when a subscriber desires to alter, change, modify, or otherwise customize a service to suit his or her own specialized needs, that subscriber must contact the appropriate service provider. If the service provider deems that there is sufficient demand for such customization, the provider will initiate a modification of the supporting software application for the relevant service. Software programmers or developers must then modify the existing software application to address the specialized needs of the requesting subscriber(s), and afterwards, test the modified software to ensure that it is functioning properly. Many iterations of modification and testing may be performed before the finished, customized service is available to the subscriber.","In light of the above, it is clear that previous techniques are problematic for numerous reasons. For example, a service provider is required to maintain or otherwise employ a staff of human software developers for making modifications to supporting software applications. This can be expensive. Furthermore, a substantial amount of time may be required to develop, modify, and test supporting software applications in response to the request of a particular subscriber or group of subscribers. This can lead to subscriber dissatisfaction, and ultimately, defection to another service provider.","The disadvantages and problems associated with previous techniques for providing technological services have been substantially reduced or eliminated using the present invention.","The present invention provides a network system extensible (e.g., programmable) by \u201cend-users,\u201d and a method of operation for the same. In general, an end-user (or simply \u201cuser\u201d) is any individual, party, or entity which somehow interacts with the network system. A user can thus be an entity known to the network system (i.e., an entity having a log-in ID), such as, for example, a subscriber and or an individual affiliated with the service provider. A user can also be an arbitrary third-party which somehow interacts with the network system.","With the present invention, users may extend or customize the network system according to their own particular needs. To accomplish this, a network system is augmented with an agent system. Capabilities of the network system are programmatically exposed by means of one or more services, service resources, and service wrappers. Each service individually, or the network system as a whole, can be extended by adding agents (created by users). Furthermore, the consumption of computational and service resources are monitored within the network system, thus protecting the subscribers and the service provider from harm or misuse, whether intentional or inadvertent. Accordingly, the network system can admit agents programmed by users.","In addition, the present invention contemplates that a third party may modify existing agents and create new agents in the case where subscribers lack the desire or sophistication to do so themselves. The third party can then make such customized agents commercially available to subscribers.","According to an embodiment of the present invention, a network system includes a service. An agent uses the service on behalf of a principal. An agent server mediates the use of the service by the agent.","According to another embodiment of the present invention, a network system includes a user interface which allows a user to interact with the network system. An agent server is coupled to the user interface. The agent server manages agent use of the network system. Furthermore, the agent server in conjunction with the user interface is operable to create or modify an agent in response to interaction by the user.","According to yet another embodiment of the present invention, a method includes the following: admitting a user to a network system wherein at least one agent is operable to utilize a service to perform a task for the user; and allowing the user to create or modify the agent within the network system.","According to still another embodiment of the present invention, a network system includes an agent server which manages agent use of the network system. An agent is operable to utilize a service within the network system. A service wrapper, associated with the service, cooperates with the agent server to mediate interaction between the service and the agent.","According to yet another embodiment of the present invention, a method includes the following: allowing an agent to utilize a service; and mediating interaction between the service and the agent.","A technical advantage of the present invention includes providing a network system (and a method of operation therefor) which is programmable by users (including subscribers) according to their own particular needs. From the standpoint of subscribers, this facilitates the process of adding or deleting new services or extending existing services and, from the standpoint of a service provider, this is beneficial in that human software developers and testers can be reduced or eliminated altogether with the automated system of the present invention.","Other aspects and advantages of the present invention will become apparent from the following descriptions and accompanying drawings.","The preferred embodiments of the present invention and their advantages are best understood by referring to  of the drawings. Like numerals are used for like and corresponding parts of the various drawings.","Turning first to the nomenclature of the specification, the detailed description which follows is represented largely in terms of processes and symbolic representations of operations performed by conventional computer components, such as a central processing unit (CPU) or processor associated with a general purpose computer system, memory storage devices for the processor, and connected pixel-oriented display devices. These operations include the manipulation of data bits by the processor and the maintenance of these bits within data structures resident in one or more of the memory storage devices. Such data structures impose a physical organization upon the collection of data bits stored within computer memory and represent specific electrical or magnetic elements. These symbolic representations are the means used by those skilled in the art of computer programming and computer construction to most effectively convey teachings and discoveries to others skilled in the art.","For purposes of this discussion, a process, method, routine, or sub-routine is generally considered to be a sequence of computer-executed steps leading to a desired result. These steps generally require manipulations of physical quantities. Usually, although not necessarily, these quantities take the form of electrical, magnetic, or optical signals capable of being stored, transferred, combined, compared, or otherwise manipulated. It is conventional for those skilled in the art to refer to these signals as bits, values, elements, symbols, characters, text, terms, numbers, records, files, or the like. It should be kept in mind, however, that these and some other terms should be associated with appropriate physical quantities for computer operations, and that these terms are merely conventional labels applied to physical quantities that exist within and during operation of the computer.","It should also be understood that manipulations within the computer are often referred to in terms such as adding, comparing, moving, or the like, which are often associated with manual operations performed by a human operator. It must be understood that no involvement of the humnan operator may be necessary, or even desirable, in the present invention. The operations described herein are machine operations performed in conjunction with the human operator or user that interacts with the computer or computers.","In addition, it should be understood that the programs, processes, methods, and the like, described herein are but an exemplary implementation of the present invention and are not related, or limited, to any particular computer, apparatus, or computer language. Rather, various types of general purpose computing machines or devices may be used with programs constructed in accordance with the teachings described herein. Similarly, it may prove advantageous to construct a specialized apparatus to perform the method steps described herein by way of dedicated computer systems with hard-wired logic or programs stored in non-volatile memory, such as read-only memory (ROM).","Network System Overview","Referring now to the drawings,  illustrates a network system  extensible by users, according to an embodiment of the present invention. To achieve this, network system  may incorporate an agent system comprising an agent server and one or more agents, as described below in more detail. An exemplary construction for an agent system is taught by U.S. Pat. No. 5,603,031, issued to the Assignee of the present invention, the text of which is incorporated herein by reference.","It is contemplated that network system  may be maintained, managed, and\/or operated by any provider of technological services, such as electronic mail (e-mail), voice mail, electronic organizer (for appointments and\/or addresses), on-line data retrieval (for, e.g., periodicals and stock quotes), and the like. These services are offered and\/or provided to one or more users who may be considered to be \u201csubscribers.\u201d Each of the provider and the subscribers can be an individual, a business, a governmental department or agency, an academic institution, an organization, or the like, which provides or receives, respectively, any form of technological service.","The following primarily describes how network system  and its associated methods of operation can be used to provide information technology services over a telephony system. Furthermore, a model of a network system providing telephony services is discussed in detail in microfiche Appendix A, in accordance with one embodiment of the present invention. It should be understood, however, that the present invention is not so limited. That is, the teachings of the present invention generally encompass the provision of services by agents to one or more users in an environment which can be extended by the users, for example, by programming additional agents.","Network system  includes a programmable functionality component  and a hard-wired functionality component . In general, programmable functionality component  and hard-wired functionality component  each functions to provide and\/or support the provision of technological services. Hard-wired functionality component  is implemented substantially with a number of \u201chard-wired\u201d elements, and thus, its functionality is modified or changed primarily by connecting or re-connecting the same or additional elements. Programmable functionality component  is implemented with an agent system and, as such, its functionality can be programmed (for example, by subscribers or third parties), as described below in more detail. Computer code for an exemplary agent system implementing a programmable functionality component  is provided in microfiche Appendix B, in accordance with an embodiment of the present invention.","Graphical User Interface","Network system  includes a graphical user interface (GUI) . Graphical user interface  may be implemented and\/or supported by a web browser\u2014i.e., a client application that resides on (or is downloaded to) an electronic user device, such as a desktop computer. Any of a variety of browsers are available, such as NETSCAPE NAVIGATOR, MICROSOFT INTERNET EXPLORER, and others. The web browser can be a forms-capable browser which is able to interpret Hyper Text Markup Language (HTML) code which provides forms including fill-in text boxes, option buttons, drop-down list boxes, radio buttons, and the like.","Graphical user interface  allows a user to interact with network system  via a communication line, which may be any type of communication link capable of supporting data transfer. For example, the communication line may include any combination of an Integrated Services Digital Network (\u201cISDN\u201d) communication line, a hard-wired line or a telephone line. This enables communication via the interconnection of computers popularly known as the \u201cInternet,\u201d using any suitable protocol, such as, Transmission Control Protocol\/Internet Protocol (TCP\/IP), Internetwork Packet eXchange\/Sequence Packet eXchange (IPX\/SPX), or AppleTalk.","Graphical user interface \u2014comprising a web browser and a web server\u2014manages the connection between the user device and network system , supports the transfer of data therebetween, and interprets and displays the data. For example, graphical user interface  enables the downloading of one or more web pages (serving as graphical interfaces into network system ) to the user device. The user device may include one or more suitable input devices, such as a keyboard, key pad, touch screen, input port, pointing device (e.g. mouse), and\/or other device that can accept information, and one or more suitable output devices, such as a computer display, output port, speaker, or other device for conveying information including digital data, visual information, or audio information.","Graphical user interface  may comprise an agent area  which is dedicated to the activities of creating new agents and manipulating existing agents, as described herein. For example, in one embodiment, an \u201cagent\u201d icon is added to a screen menu; the interface screen which is accessed by \u201cclicking\u201d on the agent icon constitutes the agent area.","Voice User Interface","A voice user interface (VUI)  allows a user to interact with network system  via a telephone line, which can be an analog telephone line, a digital T1 line, a digital T3 line, or an OC3 telephony feed. In contrast to graphical user interface , voice user interface  does not require that a user have access to an electronic interface, such as a computer. Rather, voice user interface  interprets the vocalized expressions of a user so that the user may issue commands and other input into network system . Voice user interface  may also issue audible output in the form of speech that is understandable by a user. Such speech can be synthesized or previously recorded, as described below in more detail.","Voice user interface  may comprise speech recognition and speech synthesis software and\/or hardware stored in or implemented as a suitable memory device and run on a suitable processor. Such speech recognition software allows network system  to recognize vocalized speech and may include grammar software that creates or selects a speech recognition grammar for determining which speech should be recognized. Commercially available speech recognition systems with recognition grammars are provided by ASR (Automatic Speech Recognition) technology vendors such as the following: Nuance Corporation of Menlo Park, Calif.; Dragon Systems of Newton, Mass.; IBM of Austin, Tex.; Kurzweil Applied Intelligence of Waltham, Mass.; Lernout Hauspie Speech Products of Burlington, Mass.; and PureSpeech, Inc. of Cambridge, Mass. Recognition grammars are written specifying what sentences and phrases are to be recognized by the voice user interface . For example, a recognition grammar can be generated by a computer scientist or a computational linguist or a linguist. The speech synthesis software synthesizes human speech and may include speech markup software for determining the speech to be synthesized.","In addition to speech synthesis software and\/or hardware, voice user interface  may include speech play-back capabilities for playing back previously recorded human speech. Exemplary play-back devices include a tape player, a laser disc player, etc. Here, an actual person (preferably an actor) recites various statements which may desirably be issued during an interactive session with a user of network system . The person's voice is recorded as the recitations are made. The recordings are separated into discrete messages, each message comprising one or more statements that would desirably be issued in a particular context (e.g., greeting, farewell, requesting instructions, receiving instructions, etc.). Afterwards, when a user interacts with network system , the recorded messages are played back to the user when the proper context arises. In one embodiment, such speech play-back capabilities can be used to implement a voice user interface with personality, as taught by U.S. patent application Ser. No. 09\/071,717, entitled \u201cVoice User Interface With Personality,\u201d the text of which is incorporated herein by reference.","Voice user interface  may also comprise hardware and\/or software supporting the interpretation and issuance of dual tone multiple frequency (DTMF) commands so that a user may alternatively interact with network system  using a telephone key pad.","Voice user interface  may comprise an agent area  which, like agent area  of graphical user interface , is dedicated to the activities of creating new agents and manipulating existing agents. In one embodiment, agent area  of voice user interface  can be implemented by translating the agent area  of graphical user interface  into voice.","Agent Server","Programmable functionality component  includes an agent server . Agent server  is in communication with graphical user interface  and voice user interface , and accordingly, may exchange (receive and transmit) information therewith. In general, agent server  controls, coordinates, and otherwise manages the overall operation of programmable functionality component . Among other things, agent server  may invoke, initiate, or execute various routines, processes, objects, and the like. For example, when a user wishes to interact with network system  via graphical user interface , agent server  may cause web pages to be downloaded to an electronic user device. As another example, agent server  may prompt voice user interface  to issue various statements at appropriate moments during an interactive session with a user via telephone. Additional functionality of agent server  includes, but is not limited to, executing agent objects, identifying computational and service permissions, and controlling the consumption of computational and service resources, as described below in more detail.","Agent server  is responsive to various commands which it may receive from a user, for example, via graphical user interface  or voice user interface . These commands can be of three types: agent commands, agent template commands, and selection commands for selecting agents and agent templates. Each of these types of commands is explained below in more detail. Agent server  executes these commands during its operation.","The functionality of agent server  can be performed by any suitable processor such as a main-frame, file server, workstation, or other suitable data processing facility running appropriate software. Agent server  may operate under the control of any suitable operating system such as MS-DOS, MacINTOSH OS, WINDOWS NT, WINDOWS 95, OS\/2, UNIX, XENIX, GEOS, MAGIC CAP, and the like.","Computational Resources","A number of computational resources  are available to agent server . In general, computational resources  are resources provided or supported by a computer-based system () having one or more processors, data-storage devices, interfaces, suitable connections, etc. Computational resources  include processing time, memory storage space, and the like. As described herein, computational resources  may be \u201cconsumed\u201d or \u201cused up\u201d during the operation of network system .","Agents","A number of agents  are in communication with agent server . Each agent  is associated with a particular user (e.g., a subscriber or an individual affiliated with the service provider), which may be deemed to be the \u201cprincipal\u201d for the respective agent. Generally speaking, agents  can be considered to be personal software assistants with authority delegated by the respective principals. That is, each agent  may be implemented as a software application, program, or process which autonomously, and possibly continuously, runs on behalf of its principal. As such, an agent  may be viewed by its principal as an electronic extension thereof. A particular principal may employ a plurality of agents , each of which serves only that principal.","The software applications for implementing agents  may each comprise a text file or document in, for example, a format prescribed by extensible Markup Language (XML). XML is a subset of Standard Generalized Markup Language (SGML) and, like SGML, is a meta-language\u2014i.e., a language for specifying markup languages. One such markup language is Agent Definition Format (ADF) developed by General Magic, Inc. Various specifications for ADF are discussed in detail in microfiche Appendix C, in accordance with an embodiment of the present invention. A markup language such as ADF uses tags to provide programming language constructs to text. These tags, which may comprise instructions enclosed in angled brackets, are inserted before and after the text affected. Agent server  can interpret the tags and text of an ADF document to cause a respective agent  to act. Exemplary code for a number of agents  is provided in microfiche Appendix D, in accordance with an embodiment of the present invention.","Agents  are task-based. That is, each agent  is responsible for performing a particular task or set of tasks on behalf of the respective principal. These tasks may include, for example, answering telephone calls, taking voice mail messages, placing telephone calls, notifying the user of recently received messages (voice mail and\/or e-mail), delivering messages, setting up meetings\/appointments, gathering information, negotiating deals, transacting electronic commerce, etc.","Agents  can be \u201cstandard\u201d or \u201ccustomized.\u201d A standard agent is one which may be written and\/or set-up by the service provider. In general, standard agents perform tasks that many users (e.g., subscribers) each would desirably have performed on his or her behalf. Such tasks may include organizing meetings and delivering messages. A separate copy of a standard agent may be engaged or selected by each user who wishes to have the respective tasks performed. Thus, many standard agents, each performing the same sort of tasks but for different users, may exist in network system .","In contrast, a customized agent is one which is written and\/or set up by a particular subscriber or group of subscribers to perform certain tasks which are unique to that subscriber or group. For example, a particular subscriber or group may work in the real estate industry and thus desire to have certain tasks related to real estate transactions performed for him\/her or them. In this case, such subscriber or group of subscribers may customize or create one or more agents that address the specialized needs of the subscriber or group. Furthermore, a third party may customize or create agents for subscribers or groups which are unable, unwilling, or lack the sophistication to do so for themselves. Such agents customized by a third party can be made commercially available to subscribers and other users. Accordingly, network system  is extensible in the sense that subscribers and\/or third parties may program customized agents  according to particular needs.","The customization of agents  can be accomplished using an electronic user device (e.g., desktop computer) communicating with network system  via graphical user interface . In one embodiment, the service provider may maintain a website which users can access for customizing agents .","While performing the respective tasks, agents  may use or consume various computational resources  (e.g., memory storage space, processing time, and the like). Furthermore, agents  may also use or consume various service resources (described below in more detail) during the performance of their respective tasks. The consumption of computational and service resources by various agents  can be monitored, and the respective principals charged for the same.","In one embodiment, each agent  is given permission to consume up to a pre-authorized amount of each computational resource and each service resource that the agent may use when performing its respective task(s). For each computational resource, the relevant permission constitutes a \u201ccomputational permission.\u201d For each service resource, the relevant permission constitutes a \u201cservice permission.\u201d With respect to a particular agent , the computational and service permissions ensure that other agents  (acting on behalf of the same or other principals\/users) have adequate computational and service resources, even in the case of a maliciously or incorrectly programmed customized agent.","Alternatively, a computational or a service permission may be associated with a particular principal and specifies a predetermined amount of a respective resource which is allowed to be consumed on behalf of that principal. That is, multiple agents  having the same principal may each use the same resource. By authorizing a predetermined amount of resource for the principal, the associated agents  are given a \u201cpool\u201d of that resource from which to draw.","In one embodiment, each agent  may direct its own movement (i.e., transportation) through a computer-based system () by executing an instruction which identifies a destination computer within the computer-based system and directs that the particular agent  be transported there. While executing within the destination computer, the agent may have access to information which is not available elsewhere in the computer-based system. The particular agent can access and use that information to determine another destination computer to which the agent should travel.","Agents  are created from agent templates. An agent template can be a \u201cblueprint\u201d for one or more agents . In object-oriented terminology, each agent  is an object and each template is an agent class from which agents  can be created by instantiating the class\/template. In one embodiment, an agent template is essentially an agent object in its initial state. After the agent has been created, it may be executed. During execution, the agent object begins to receive events, handle these events, and so change its state.","In accordance with an embodiment of the present invention, network system  allows users (e.g., subscribers) to create, copy, modify, edit, or delete agents  and the associated templates as desired, thereby affording extensibility.","Services","A number of services  may each comprise one or more software applications providing various capabilities that are available to a principal. Each service  may be utilized by one or more agents  in order to perform their respective tasks. For example, one service  may support call processing, including a voice mail system. With this service , an agent  may place an outgoing telephone call for its principal, answer an incoming telephone call for the principal, and record a voice message from a caller. Another exemplary service  may support an electronic mail (e-mail) system. With an e-mail service, an agent  may collect, forward, and store e-mail messages addressed to the respective principal, generate e-mail messages for the principal, and notify the principal when new e-mail messages have been received. Yet another exemplary service  may support an electronic appointment book. With this service, an agent  can plan a schedule, check conflicts therewith, and organize various meetings, interviews, etc. for its respective principal. Still another exemplary service  can support an electronic address book which maintains information about one or more contacts with whom a principal may interact. The information maintained for each of these contacts may include the contact's name, title, employer, business address, home address, e-mail address, work phone number, home phone number, and the like. Still yet another service  can support on-line data retrieval for various information. With this service, an agent  can retrieve electronic copies of periodicals (e.g., newspapers, magazines, etc.) and the latest quotes for stocks, bonds, mutual funds, etc. In order to use a particular service , an agent  must first be authorized to do so. This authority may be given by the service provider and\/or the respective principal.","In one embodiment, a plurality of services  may be used by a particular agent , which acts as a \u201cvirtual assistant\u201d for its respective principal. This virtual assistant may, for example, answer, an incoming telephone call, identify the caller, schedule a meeting between the caller and the principal, and generate an e-mail message notifying the principal of such meeting. Additional services  can be used (by this agent ) by extending or customizing the agent, as described herein.","Service Resources","One or more service resources  can support each service . In one embodiment, at least a portion of service resources  can be integral to the respective services . In general, a service resource  is a resource which enables a service to be performed. For example, for a call processing service, service resources  may include a telephone, an answering machine, a telephone line, a local telephone provider service, a long-distance telephone provider service, etc. As another example, for an on-line data retrieval service, service resources  may include a telephony connection, a modem for on-line communication, an on-line database provider service, etc. As yet another example, for an e-mail service, service resources  may include an Internet connection and disk space for storing e-mail messages.","At least some of service resources  may comprise discrete units which are \u201cconsumed\u201d during utilization of the respective resource by an agent . For example, a service resource  related to telephony services (e.g., voice mail and call placement) may comprise units of long-distance calling time which are consumed as an agent  places one or more calls utilizing such services . Likewise, a service resource  related to on-line data retrieval may comprise units of data-access time or inquiry which are consumed as an agent retrieves data (e.g., stock quotes, newspaper articles, etc.) utilizing the respective service .","Service Wrappers","A number of service wrappers  link services  and respective service resources  to agent server . In the depicted embodiment, a separate service wrapper  is provided for each service . Each service wrapper  can mediate the interaction between a service  (and its respective resources ) and the remainder of programmable functionality component . In one embodiment, at least a portion of service wrappers  can be integral to the respective services  and\/or service resources . Service wrappers , in conjunction with agent server , may act as \u201cgatekeepers\u201d to the respective services . That is, a service wrapper  grants access, to a respective service , only to agents  which have been authorized to utilize such service. For example, a voice message held by a service  supporting voice mail is accessible only by an agent  which has authority from the user for whom the message was left. Similarly, for a service  supporting call answering, the respective service wrapper  only allows agents  having authority from a particular user to answer telephone calls placed to a number associated with such a user.","Service wrappers  enable communication between services  and agent server , for example, by converting between a computer language (or instruction set) used within agent server  and the computer language (or instruction set) of the respective service . For this purpose, in one embodiment, each service wrapper  may be implemented, at least in part, with an application programming interface (API). An API allows access to the respective service , thereby pragmatically exposing the capabilities of the service  to one or more agents . That is, each service wrapper  lets any agent (having the proper authorization) use the respective service . A service wrapper  may also allow agent server  to replace one service  with another service  of the same type, but located on a different computer, without any interruption to principals. This operation of a service wrapper  is hidden or invisible to users, and thus, service wrappers  provide a point of abstraction between the respective service  and agent server .","Furthermore, at least some of service wrappers  may monitor the amount of service resources  expended or otherwise consumed by one or more authorized agents  when utilizing the respective service . For example, a service wrapper  may identify the respective service resource  to agent server , allow agent server  to impose a predetermined limit on each authorized agent's use of such service resource  (i.e., allocate a predetermined amount of service resource  for each agent), and debit\/credit the amount consumed from the predetermined amount previously allocated for the agent . Thus, each service wrapper , in conjunction with agent server , controls an agent's consumption of service resources , thereby ensuring that an agent  does not use more than a predetermined amount of resource when performing its respective task or tasks. In this way, service wrappers  protect against the over-consumption, whether intentional or inadvertent, of the respective service resources . A service wrapper  thus serves to ensure that sufficient units of a service resource  are available for each agent  authorized to utilize the respective service . In addition, a service wrapper  may maintain a record of the amount of service resource  consumed by various agents  so that the appropriate users\/principals can be billed accordingly.","Operational Overview","In operation, one or more agents  may be set up for each user who is a subscriber to the services offered by the operator\/provider of network system . These agents  can be standard (i.e., set up by the service provider) or customized (i.e., set up by the respective user). Each agent for a particular user performs one or more tasks on behalf of that user. These tasks may include answering calls, taking voice mail messages, placing calls, notifying the user of recently received e-mail, setting up appointments, negotiating deals, transacting electronic commerce, etc. To perform these tasks, each agent  utilizes one or more services , during which it may consume various respective service resources . Access to each service  is granted by the respective service wrapper , which may also monitor the amount of each respective service resource  consumed to ensure that no particular agent  uses more than an amount authorized for that agent when performing its specific task(s). This protects both the authorizing user\/subscriber and the service provider against undue consumption of service resources . Via a suitable interface (e.g., graphical user interface  or voice user interface ), a user may direct, command, instruct, or otherwise communicate with each of his or her respective agents . At any time, a user can extend the services provided thereto by customizing existing agents , or alternatively, employing (and possibly customizing additional) agents .","In this manner, the present invention enables subscribers of a network service provided by network system  to create and employ personal agents  utilizing services  in a manner that is safe and secure for the subscribers and the service provider.","Computer-Based System Implementation",{"@attributes":{"id":"P-00098","num":"00098"},"figref":["FIG. 2","FIG. 2"],"b":["30","2","1","30","1000","1002","30","1000","1002","30","1000","1002","30","12","1"]},"A switch  enables communication with computer-based system  via a telephone instrument. Switch  allows users to interact with computer-based system , for example, via a voice user interface  (FIG. ). A call detail records data base  is coupled to switch . This data base  stores information relating to calls received by or initiated out of computer-based system . For each call, such call-related information may specify calling party, called party, telephone number of outside party, date of call, time of call, duration of call, cost of call, and the like.","A plurality of fast Ethernet hubs  are coupled to firewall  and switch . Fast Ethernet hubs  support a local area network (LAN) for computer-based system  and enable the routing of information signals therein. These Ethernet hubs  may implement the Fast Ethernet technique in which information is transferred at a rate of 100 Mbps.","One or more application server clusters  are coupled to fast Ethernet hubs . Each application server cluster  may comprise a plurality of servers which provide processing capability to support various functions, such as, for example, speech recognition, speech synthesis, pronunciation generation, speech playback, etc. As such, application server clusters  may support a voice user interface  (FIG. ).","A number of sub-systems , , , , , ,  are also coupled to fast Ethernet hubs . Each of these sub-systems may comprise one or more servers, data storage devices, and other hardware components. The servers provide processing capability, and the data storage devices provide data storage capability.","At least a portion of the sub-systems in computer-based system  may support one or more services , and the respective service wrappers  and service resources  (FIG. ). For example, as shown in , sub-systems , , , , and  support an e-mail service, a voice mail service, a paging\/facsimile service, an address book and calendar service, and a business news and stocks information service, respectively.","The remaining sub-systems support other operational aspects of computer-based system . In particular, as shown, sub-system  maintains profiles for one or more subscribers to a network system . For each subscriber, a profile may include the name of the subscriber, the home address of the subscriber, the billing address of the subscriber, an e-mail address, a telephone number, a listing of all agents operating for the subscriber, the computational and service permissions granted to the subscriber's agents, and the like. Sub-system  maintains various rules for the operation of network system . For example, such rules may govern how network system  processes incoming e-mail messages for particular subscribers (e.g., a subscriber may be paged upon the delivery of messages satisfying certain criteria).","Each of the servers within application server clusters  and sub-systems - can be implemented using any of a number of server hardware configurations running a suitable server operating system, such as SUN SOLARIS, WINDOWS NT, OS\/2 WARP, and NETWARE. Each data storage device within application server clusters  and sub-systems - can be a mass storage subsystem of tapes or disk drives, which is electronically coupled to the respective servers. Information or data supporting each of graphical user interface , voice user interface , agent server , agents , services , service resources , and service wrappers  (shown in ) can be contained in the data storage devices. The servers may retrieve, process, and store this information into the data storage devices.","In one embodiment, as shown, application server clusters  and sub-systems - are linked by the same LAN. In another embodiment, at least a portion of application server clusters  and\/or sub-systems - can be remote from the remainder and linked as a wide area network (WAN); consequently, computer-based system  may provide a distributed network.","Any one or a combination of interested parties (e.g., subscribers, third parties, or service providers) can use computer-based system  to collect, maintain, generate, or process the information supporting graphical user interface , voice user interface , agent server , computational resources , agents , services , service resources , and service wrappers . Any of the servers or other computers in application server clusters  and subsystems -, either individually or in combination, can perform the functionality of agent server  shown in FIG. . Furthermore, because these servers and other computers are linked together, each can directly access (e.g., store and retrieve) any of the information described above, if necessary.","In one embodiment, agents  may travel throughout the environment of computer-based system . That is, each agent  may move to the servers and other computers in application server clusters  and sub-systems -, and afterward, execute thereon. As an agent  moves and executes, it may perform its respective tasks on behalf of its principal.","The elements of computer-based system , and the functions provided thereby, constitute computational resources  which may be expended, consumed, or used during the operation of network system  (FIG. ). In one embodiment, the consumption of these computational resources  by different agents  is monitored so that no particular agent  utilizes more than a proportionate, predetermined, or allotted share thereof, as such agent executes.","Graphical User Interface (Details)",{"@attributes":{"id":"P-00111","num":"00111"},"figref":"FIG. 3","b":["12","12","64","66","68"]},"Web browser  is a client application that may reside on (or is downloaded to) a client device such as a desktop computer. Such desktop computer preferably has at least a \u201c\u201d processor or an operational equivalent and runs a suitable desktop operating system, such as, for example, MS-DOS, MacINTOSH OS, WINDOWS NT, WINDOWS 95, OS\/2, UNIX, XENIX, GEOS, or MAGIC CAP.","Web server  is a server application that resides on a service provider device, such as a server. Such server can be any of the servers in application server clusters  or sub-systems - of computer-based system  shown in FIG. . Web server  may support a number of web pages  which can be downloaded from web server  to web browser  as appropriate during operation. At least one of these web pages  may constitute an agent area  which is dedicated to the activities of creating new agents and manipulating existing agents.","Communication line  can be any link capable of supporting data transfer between a client device and a service provider device. For example, communication line  may include any combination of an Integrated Services Digital Network (\u201cISDN\u201d) communication line, a hard-wired line, or a telephone line. This enables communication via the Internet, using any suitable protocol, such as, Transmission Control Protocol\/Internet Protocol (TCP\/IP), Internetwork Packet eXchange\/Sequence Packet eXchange (IPX\/SPX), or AppleTalk.","Voice User Interface (Details)",{"@attributes":{"id":"P-00116","num":"00116"},"figref":"FIG. 4","b":["16","16","72","74","76"]},"Telephone instrument  is a user (e.g., subscriber) device which may comprise a conventional telephone. Telephone instrument  may include a key pad for entering dual tone multiple frequency (DTMF) commands.","Telephone server  is a service provider device. Such device may comprise any of the servers in application server clusters  or sub-systems - of computer-based system  shown in FIG. . Telephone server  may support a number of grammars, prompts, and other speech functionalities  for enabling communication with a user. At least one of these speech functionalities  may constitute an agent area  which is dedicated to the activities of creating new agents and manipulating existing agents .","Telephone line  can be an analog telephone line, a digital T1 line, a digital T3 line, or an OC3 telephony feed.","Agent Server (Details)",{"@attributes":{"id":"P-00121","num":"00121"},"figref":"FIG. 5","b":["20","20","4","2","22","20","42","44","46"]},"Scheduler  maintains an internal clock, which can keep track of real time or elapsed time. In one embodiment, scheduler  may be supported with a piezo-electric crystal or oscillating circuit implemented with transistors. Scheduler  generally functions to trigger the further execution of particular agents  by engine  upon the occurrence of certain events. Such events may include the lapse of a predetermined amount of time (e.g., 24 hours) or the occurrence of a specified time (e.g., 6:00 a.m.). Scheduler  may maintain a record or schedule with a separate entry for each triggering event. Scheduler  may also receive information from engine . This received information may be used to create new entries within scheduler .","Agent objects  each correspond to a particular agent  of network system  (FIG. ). Each agent object  can be an internal representation within agent server  for the corresponding agent . Agent objects  comprise software objects, each of which, in general, has (i) an internal state defined by a number of properties, (ii) an internal behavior defined by a number of methods, and (iii) an external behavior defined by a number of features.","More simply, each agent object  is an organization of data and instructions which are executable within agent server . In one embodiment, the data represents a \u201cstate\u201d of the agent object and the instructions are grouped into tasks that are to be performed. The data may specify the corresponding agent , the services  which may be utilized by the agent, and the computational and service permissions which have been granted to the agent . The instructions may comprise one or more event handlers which direct the corresponding agent  upon the occurrence of predefined events. Each agent object  may also comprise a pending event queue which queues events to which the agent  should, but has not yet, responded.","Engine  is in communication with scheduler  and agent objects . In addition, engine  is in bi-directional communication with graphical user interface , voice user interface , and service wrappers . Engine  generally controls and\/or manages the operation of agent server . Engine  may be implemented as a computer process, executing within a computer system, which invokes or manages other processes or routines, and executes instructions. For example, engine  can execute each agent object  which, in turn, may provide instructions to engine . Engine  may function to identify each of the computational permissions and service permissions specified within an agent object  and to control the consumption, by the corresponding agent , of the relevant computational resources  and service resources . Also, engine  may invoke routines in each of interfaces  and  and service wrappers . Furthermore, engine  may receive and be responsive to information from the same.","In one embodiment, scheduler  may be considered to \u201ccreate\u201d pending events to which engine  responds by executing an agent's handler for such event. This is described below in more detail.","In an exemplary operation for agent server , one agent object  may correspond to an agent  which is responsible for waking up its principal at a certain time each weekday morning. This time constitutes an event for which scheduler  may contain an entry. Each weekday, at the appointed time or shortly before, scheduler  invokes engine . In response engine  executes the particular agent object . When this agent object  is executed, the corresponding agent  (using the appropriate services ) performs the task of waking up the principal, for example, by calling the principal over a telephone or, alternatively, generating an audible alarm on an electronic user device (e.g., a desktop computer).","Service Wrapper (Details)",{"@attributes":{"id":"P-00129","num":"00129"},"figref":"FIG. 6","b":["26","26","24","4","26","24","26","48","50"]},"Converter  generally functions to convert between a computer language (or instruction set) used within agent server  and a computer language (or instruction set) used within the respective service . In one embodiment, the computer language of agent server  can be a high-level language, whereas the computer language of service  may be a low-level language. An agent  may comprise instructions of the set used in agent server ; a service  may comprise or issue instructions of the set used therein.","As depicted, converter  comprises an agent-server-to-service converter  and a service-to-agent-server converter . Agent-server-to-service converter  operates unidirectionally to convert from the language (e.g., a high-level language) used by agent server  to the language (e.g., a low-level language) used by the corresponding service . Service-to-agent-server converter  also operates unidirectionally, but in contrast to converter , converts from the language (e.g., low-level language) used by service  into the language (e.g., high-level language) used by agent server .","Monitor  is coupled by bi-directional lines to each of agent server  and the respective service . Monitor  generally functions to monitor the amount of respective service resources  expended, used, or otherwise consumed by one or more agents  which have been authorized to access the service . Monitor  identifies respective service resources  to agent server , allows agent server  to impose a predetermined limit on each authorized agent's use of the respective service resources , and informs agent server  of the amount consumed against the predetermined limit. The predetermined limit may be derived from a service permission for the respective agent .","Exemplary Service Wrappers, Services, and Service Resources (Details)",{"@attributes":{"id":"P-00134","num":"00134"},"figref":["FIG. 7","FIG. 7"],"b":["81","86","91","81","86","91","81","86","91","22"]},"Web server service  provides a web server from network system  () and can be used, for example, to notify a user about recently received e-mail messages. Web server service  (and its respective service resources) resides in network system  and includes one or more web pages . A web server service wrapper  controls access from the remainder of programmable functionality component  into web server service  and its associated service resources. A web browser  is connected to web server service  via an Internet line . Web browser  may reside in a client device. Web pages  can be downloaded from web server service  to web browser . Collectively, web server service , web pages , web browser , and Internet line  can implement a graphical user interface with which an agent  can interact with its principal or another party.","Web browser service  provides a web browser from network system  and can be used, for example, for on-line data access to stock quotes, news, etc. Web browser service  and its respective service resources are resident on network system . A web browser service wrapper  provides access from the remainder of programmable functionality component  into web browser service  and its service resources. A web server  is connected to web browser service  via an Internet line . Web server  resides in a website server device and may comprise one or more web pages  which can be downloaded to web browser service . Collectively, web browser service , web server , web pages , and Internet line  can implement a graphical user interface with which an agent  can interact with an arbitrary website on behalf of its principal.","Call processing service  provides call processing from network system  and can be used, for example, to take voice mail messages for one or more subscribers. Call processing service  and its respective service resources reside in network system . Call processing service  may include grammars, prompts, and other speech functionality . A call processing service wrapper  controls access from the remainder of programmable functionality component  to call processing service  and its service resources. A telephone instrument , which resides outside of network system , is connected to call processing service  via a telephone line . Collectively, call processing service , speech functionality , telephone instrument , and telephone line  can implement a voice user interface with which an agent  can interact with its principal or another party, for example, by placing a call to, or answering a call from, the principal or other party.","Agent Object (Details)",{"@attributes":{"id":"P-00139","num":"00139"},"figref":"FIG. 8","b":["46","46","20","22","46","20","46","56","58","60","62","46"]},"Permissions component  generally comprises data and instructions related to permissions that have been granted to the agent  represented by agent object . These permissions include computational permissions and service permissions. A computational permission can specify that a respective agent  is authorized to consume a particular computational resource  (e.g., memory storage space, processing time, elapsed time, and the like which may be provided by the elements and functions of computer-based system ) when performing its particular task(s). Furthermore, in some instances, a computational permission can specify a pre-authorized amount of computational resource  which may be allowably consumed by the respective agent . A service permission can specify that the respective agent is authorized to consume a particular service resource  (e.g., long-distance time, on-line data access time) when the agent utilizes a respective service  (e.g., e-mail, phone mail, electronic appointment book, electronic contact book, etc.) in performing its task(s). In some instances, a service permission can specify a pre-authorized amount of service resource  which is allowably consumed by the respective agent .","Event handlers component  includes data and instructions for directing agent server  and\/or engine  upon the occurrence of various events which may arise during the operation of network system . In particular, an event handler comprises a routine for handling an event of a specified type. For example, these events can be the lapse of a previously specified amount of time or the delivery of an e-mail message.","In one embodiment, an event is identified by a uniform resource locator (URL) which expresses or provides an address for a web page. The URL specifies both the event's type and the agent  which is event's intended recipient. The URL may be chosen by agent server  and the particular agent  in combination. This allows a web server providing a graphical user interface to network system  to receive HyperText Transfer Protocol (HTTP) requests for the web page at the URL so that agent server  can relay the event to the particular agent . A standard web browser can send an event to an agent  by fetching the web page identified by the URL for the event. The web page returned to the browser is supplied by the agent's event handler and relayed by agent server . One of the instructions in an agent instruction set allows an agent  to send an event (for example, to another agent  as a means of inter-agent communication).","Datastore component  may contain various information related to agent object . This may include information specifying the corresponding agent , the principal or user for whom that agent  performs tasks, the tasks which the agent  may perform, etc. Datastore component  may also include information used by agent object  for guiding its interaction with various service wrappers . For example, datastore component  may contain the parameters of a request the agent intends to make of a particular service wrapper  or the wrapper's response to such a request.","Pending event queue component  comprises information for events to which the corresponding agent  should, but has not yet, responded. Pending event queue component  queues these events so that the agent  may respond, for example, using the event handlers specified in event handlers component .","User Session",{"@attributes":{"id":"P-00146","num":"00146"},"figref":"FIG. 9","b":["100","100","2"]},"Method  begins at step  where network system  admits a user at a user interface (UI), which can be either graphical user interface  or voice user interface . Essentially, at this step, a user logs on to network system .","At step , network system  admits the user to the agent area of the relevant user interface. For voice user interface , this is agent area . For graphical user interface , this is agent area . With graphical user interface , a user is admitted to the agent area when the user \u201cclicks\u201d on an agent icon which is displayed on a menu screen. In the agent area, the user can create new agents and manipulate existing agents. Specifically, the user can enter various commands, depending on his or her intentions.","Each command can be one of three types: an agent command, a template command, or a selection command. Agent commands are directed to the running of agents. These agents include ones which are currently executing and which the user now would like to manipulate. Template commands are directed to the manipulation of agent templates. An agent template can be a \u201cblueprint\u201d for agents. In object-oriented terminology, each agent is an object and each template is an agent class from which agents can be created by instantiating the class\/template. Selection commands select agents or templates. A selection command allows network system  to focus on a particular template or a particular agent in order to provide a context for any subsequent template command or agent command.","At step , network system  accepts a command which has been entered by the user via the user interface. The command is forwarded from the user interface to agent server .","If the command is a selection command, agent server  executes such command at step . If the command is a template command, agent server  executes the command at step . Otherwise, if the command is an agent command, agent server  executes the command at step . The executions of a selection command, a template command, and an agent command are described below in more detail.","At step , network system  prompts a user for more commands. If the user enters additional commands, method  returns to step  where the next command is accepted. Method  repeats steps - until no additional commands are entered.","At step , network system  excuses the user from the agent area of the user interface. At step , the user is excused from the user interface itself. That is, the user logs off network system . Afterwards, method  ends.","Selection Command Execution",{"@attributes":{"id":"P-00155","num":"00155"},"figref":"FIG. 10","b":["200","200","2"]},"A select agent command is one which selects a particular agent. Specifically, when a user enters the agent area, a list of executing agents may be visible. The user enters a select agent command to select a particular agent from the list in order to manipulate the same; afterwards, the user can enter an agent command to perform the manipulation.","Similarly, a select template command is one which selects a particular template. In particular, a list of agent templates may be provided from which a user may select. The user enters a select template command to select a particular template from the list; afterwards, the user can enter a template command to manipulate the template.","Method  begins at step  where agent server  determines whether the selection command is a select template command. If the selection command is a select template command, method  moves to step  where agent server  notes the particular template which has been selected. Afterwards, method  ends.","Otherwise, if at step  it is determined that the selection command is not a select template command, then at step  agent server  determines whether the selection command is a select agent command. If the command is a select agent command, method  moves to step  where agent server  notes the agent which has been selected, after which method  ends.","Otherwise, if the selection command is not a select agent command, method  ends.","Template Command Execution",{"@attributes":{"id":"P-00162","num":"00162"},"figref":"FIG. 11","b":["300","300","2"]},"Method  begins at step  where agent server  determines whether the template command which has been entered is a create template command. A create template command is one which creates a new template. Each new template can be based on a generic blank template which can be modified as desired by a user.","Accordingly, if the template command is a create template command, then at step  agent server  stores a blank template into memory (a computational resource ) where the template can be modified. In the context of a graphical user interface, an entry for the new template is added to the list of templates appearing on a screen. At step , agent server  selects the blank template as the current template, after which method  ends.","Referring again to step , if it is determined that the template command is not a create template command, than method  moves to step  where agent server  determines whether the command is a copy template command. A copy template command is one which copies an existing template. A user may enter this command when it is desirable to create a new template from a previously created template rather than the generic blank template.","If it is determined that the command is a copy template command, then at step  agent server  loads the previously created template. \u201cLoading\u201d a template means that the template is stored into memory, such as random access memory (RAM). At step , agent server  creates and stores a copy of the template into persistent memory, such as a hard drive. At step , agent server  selects the copy of the template as the current template, after which method  ends.","Referring again to step , if it is determined that the template command is not a copy template command, then method  moves to step  where agent server  determines whether the command is an edit template command. An edit template command is one which edits an existing template. A user may enter this command when it is desirable to edit either a newly created or previously created template.","If it is determined that the command is an edit template command, agent server  loads the template at step  and allows changes to be made to the template at step . At step , the edited template is stored back into persistent memory and then is made the current (selected) template, after which method  ends.","Otherwise, if it is determined at step  that the template command is not an edit template command, then method  moves to step  where agent server  determines whether the command is a delete template command. A delete template command is one which deletes an existing template. A user may enter this command to remove from permanent memory any template which is obsolete, incorrect, or otherwise undesirable.","If it is determined that the command is a delete template command, agent server  deselects the current template at step . Deselection is performed because a deleted template cannot be subsequently selected. Next, at step , agent server  deletes the template from persistent memory. In the context of a graphical user interface, this step would also remove an icon for such template from the screen. Method  then ends.","Referring again to step , if it is determined that the command is not a delete template command, method  ends because the command was not any of the types of commands for a template.","For each of steps , , and  above, if no template is currently selected, agent server  will generate an error message.","Method , as described, thus provides user extensibility for network system  by allowing a user to create, copy, edit, and delete agent templates as desired.","Agent Command Execution",{"@attributes":{"id":"P-00175","num":"00175"},"figref":"FIG. 12","b":["400","400","2","22"]},"Method  begins at step  where agent server  determines whether the command is a create agent command. A create agent command is one which creates a new agent from an agent template. After an agent  has been created, it is generally allowed to execute, thereby performing tasks for the user who created the agent.","If it is determined that the command is a create agent command, then at step  agent server  loads the respective agent template. If no template is currently selected, agent server  will generate an error message. Otherwise, at step , agent server  stores the newly created agent  and at step  selects that agent  as the current agent. Afterwards, method  ends.","With reference again to step , if it is determined that the command is not a create agent command, then at step  agent server  determines whether the command is an edit agent command. An edit agent command is one which allows the user to edit an executing or running agent. If no agent  is currently selected, however, agent server  generates an error message.","If it is determined that the command is an edit agent command, then agent server  loads the executing agent  at step . Agent server  suspends the execution of such agent  at step  and allows changes to be made to the agent by a user at step . At step , agent server  resumes the execution of the agent  and, at step , stores the edited agent. Afterwards, method  ends.","Referring again to step , if it is determined that the agent command is not an edit agent command, then at step  agent server  determines whether the command is a delete agent command. In general, a delete agent command is one which ends the execution of an agent  and removes it from persistent memory. If no agent  is currently selected, however, agent server  generates an error message.","If it is determined at step  that the command is a delete agent command, then at step  agent server  deselects the agent , because an agent cannot be selected once it has been deleted. At step , agent server  deletes the agent . Method  then ends.","Referring again to step , if it is determined that the command is not a delete agent command, method  ends because the command was not any of the types of commands for an agent.","Consumption of Service and Computational Resources",{"@attributes":{"id":"P-00184","num":"00184"},"figref":"FIG. 13","b":["25","21","22"]},"As previously described, an agent  may consume various service resources  (e.g., long-distance calling time, on-line data access time, etc.) and computational resources  (e.g., memory space, processing time, etc.) in the performance of its tasks.","The amount of the resources consumed by a particular agent  is limited by permissions which are specified in permissions component  of an agent object  corresponding to the agent . More specifically, for a particular agent , permissions component  includes one set of service permissions  for each service  utilized by that agent. The service permissions  bound the service resources  expended on behalf of the agent  by that service . That is, each service permission  specifies whether the agent  is authorized to consume a particular service resource  and, in some instances, the amount of such service resource  that is allowably consumed by that agent .","Agent server  and service wrappers  cooperate in order to ensure that an agent  does not consume more than its allotted amount of any particular service resource  as specified by a respective service permission .","Permissions component  also includes a set of computational permissions  for the agent . These computational permissions  bound the computational resources  expended on the agent's behalf by agent server . In other words, each computational permission  specifies whether the agent  is authorized to consume a particular computational resource  and, in some instances, the amount of the computational resource  which is allowably consumed by that agent.","Agent server , together with service wrappers , monitors and ensures that the agent  does not consume more than its allotted amount of any computational resource  as specified by a respective computational permission .","Agent Population Execution",{"@attributes":{"id":"P-00191","num":"00191"},"figref":"FIG. 14","b":["500","500","20","22"]},"In general, the processing capability of agent server  cannot be dedicated solely to any particular agent , but rather must be allocated among all executing agents. Processing time by agent server  is thus divided into time slices. The time slices can be of predetermined duration. During each time slice, the processing capability of agent server  is directed to a particular agent .","With reference to , method  begins at step  where agent server  selects an agent , which is responsible for performing one or more tasks for a respective user. At step , agent server  executes a time slice for the selected agent . During this time slice, the processing capability of server  is directed to or used for the selected agent .","At step , agent server  determines whether there are any other agents  for which a time slice should be executed. If there are more agents, method  returns to step  where the next agent is selected. Agent server  repeats steps - until a time slice has been executed for each agent . Afterwards, method  ends.","Agent Execution",{"@attributes":{"id":"P-00196","num":"00196"},"figref":"FIG. 15","b":["600","22","600","20","22"]},"Method  begins at step  where an agent object  corresponding to the particular agent  is loaded into agent server . This agent object  comprises a permissions component , an event handlers component , a datastore component , and a pending event queue .","At step , agent server  determines whether execution of the agent  has been suspended (e.g., because the user is editing the agent). If execution has been suspended, it is unnecessary to provide any processing for the agent, and accordingly, method  ends.","Otherwise, if execution of the agent  has not been suspended, method  proceeds to step  where agent server  determines whether an event is currently being handled by agent . An event is something that triggers or causes an agent  to take action, or something to which agent  must respond. If it is determined that there is an event currently being handled, method  moves to step .","Alternatively, if it is determined at step  that there is not an event currently being handled, method  proceeds to step  where agent server  determines whether there is an event pending for the agent\u2014i.e., an event for which handling has not yet begun. This can be accomplished by examining pending event queue component  of the corresponding agent object . If there is no event pending for agent , method  ends.","Otherwise, if it is determined that there is an event pending for agent , then at step  agent server  removes or dequeues the event from the pending event queue of the corresponding agent object .","At step , agent server  determines whether agent  has a handler for responding to the event. Generally, an event handler comprises a routine for responding to an event of a particular type. An event handler can be divided into a plurality of portions, each of which is separately executable during different time slices. Event handlers are specified in the event handlers component  of agent object . If it is determined that agent  does not have a handler for the relevant event, method  moves to step . Otherwise, if it is determined that agent  does have a handler for responding to the event, method  moves to .","At step , agent server  executes a portion of the event handler for agent . Method  then proceeds to step .","At step , agent server  stores the agent , after which method  ends.","Event Handler Execution",{"@attributes":{"id":"P-00206","num":"00206"},"figref":"FIG. 16","b":["700","700","20","20","26"]},"Method  begins its step  where agent server  receives an instruction to execute in a patroller time slice. At step , agent server  determines whether the instruction is a service instruction. A service instruction is an instruction relating to and utilizing a particular service . Accordingly, a service instruction can only be executed via a respective service wrapper . All other instructions do not require the cooperation of a respective service wrapper , but rather, can be executed by agent server  itself.","If it is determined at step  that the instruction is a service instruction, method  proceeds to step  where agent server  asks the respective service wrapper  to execute the instruction for agent . Method  then moves to step .","Referring again to step , if it is determined that the instruction is not a service instruction, then agent server  itself executes the instruction at step . Method  then proceeds to step .","At step , agent server  determines whether there are any more instructions in the event handler. If so, method  returns to step  where agent server  fetches the next instruction. Agent server  repeats steps - until all instructions of the event handler to be executed as part of the current time slice have been executed, either by agent server  or respective service wrappers . Afterwards, method  ends.","Service Instruction Execution",{"@attributes":{"id":"P-00212","num":"00212"},"figref":"FIG. 17","b":["800","800","26","20","24"]},"Method  begins at step  where service wrapper  identifies the service permissions required by the service instruction. In other words, the execution of the service instruction may cause particular service resources  (e.g., long-distance calling time, on-line data access time, or memory storage space) to be consumed. Thus, an assessment is made as to the service permissions needed in order to carry out the service instruction.","At step , service wrapper  asks agent server  for the permissions held by the agent  for which the instruction is being executed. The permissions held by an agent  are not necessarily the same as the permissions which are required in order to execute an instruction. For example, agent  may have permissions only for long-distance calling time and memory storage space, but execution of the instruction requires permission for on-line data access time.","Thus, at step , service wrapper  determines whether the permissions held by agent  include the permissions required in order to execute the instruction. If it is determined that the permissions held do not include the permissions required, service wrapper  executes an error routine at step , after which method  ends.","Otherwise, if it is determined at step  that the permissions held do include the permissions required, method  precedes to step  where, for each service permission, service wrapper  identifies the amount of a service resource  which is allotted to agent  and the amount of that service resource  which must be consumed in order to execute the instruction. As with the permissions, the amount of a service resource  allotted to an agent  is not necessarily the same as the amount of that service resource  which is required to execute the instruction. For example, an agent  may have permission to utilize up to a predefined amount of memory storage space to store a voice mail message, but the actual amount required for a particular message is greater than the predefined amount.","At step , service wrapper  determines whether the amount allotted to agent  is at least as great as the amount required to execute the instruction. If it is determined that the amount allotted is not at least as great as the amount required, service wrapper  executes an error routine at step , after which method  ends.","Referring again to step , if it is determined that the amount of the service resource  allotted to agent  is at least as great as the amount which is required to execute the instruction, then method  moves to step  where service wrapper  asks the respective service  to execute the instruction, thereby enabling agent  to perform one or more tasks for its user\/principal.","At step , service wrapper  identifies the amount of each service resource  actually consumed or used to execute the instruction. At step , for each service resource , service wrapper  asks agent server  to decrement the amount allotted to agent  by the amount actually used. Method  then ends.","In method  described above, it is assumed that service wrapper  can determine in advance what amount of service resource  will be consumed in the execution of an instruction. This, however, is not always the case. For example, while a predefined maximum amount of memory space may be set aside to store any given voice mail message, the amount of storage space actually consumed depends on how long the caller speaks. Other service resources  can be consumed on an on-going basis even after an instruction has executed. For example, if a long-distance call is made on behalf of a subscriber, connect time for a long-distance service continues until the call has been completed. In both cases, service wrapper  actively monitors service resource consumption and halts further consumption whenever the amount held by an agent  is exhausted.","Accordingly, the present invention provides a system and method which allow subscribers or third parties to create and customize personalized agents  which utilize services  (e.g., e-mail, voice mail, electronic address book, electronic contact book, etc.) in order to perform respective tasks for the subscribers. Thus, the present invention affords user extensibility of the services .","Furthermore, the present invention monitors and controls the consumption of service resources  and computational resources  by agents  during execution. Thus, the present invention protects the subscribers and a service provider from misuse or overuse, whether intentional or inadvertent, of such resources.","While particular embodiments of the present invention and their advantages have been shown and described, it should be understood that various changes, substitutions, and alterations can be made therein without departing from the spirit and scope of the invention as defined by the appended claims."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["For a more complete understanding of the present invention and for further features and advantages, reference is now made to the following description taken in conjunction with the accompanying drawings, in which:",{"@attributes":{"id":"P-00027","num":"00027"},"figref":"FIG. 1"},{"@attributes":{"id":"P-00028","num":"00028"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"P-00029","num":"00029"},"figref":"FIG. 3"},{"@attributes":{"id":"P-00030","num":"00030"},"figref":"FIG. 4"},{"@attributes":{"id":"P-00031","num":"00031"},"figref":"FIG. 5"},{"@attributes":{"id":"P-00032","num":"00032"},"figref":"FIG. 6"},{"@attributes":{"id":"P-00033","num":"00033"},"figref":"FIG. 7"},{"@attributes":{"id":"P-00034","num":"00034"},"figref":"FIG. 8"},{"@attributes":{"id":"P-00035","num":"00035"},"figref":"FIG. 9"},{"@attributes":{"id":"P-00036","num":"00036"},"figref":"FIG. 10"},{"@attributes":{"id":"P-00037","num":"00037"},"figref":"FIG. 11"},{"@attributes":{"id":"P-00038","num":"00038"},"figref":"FIG. 12"},{"@attributes":{"id":"P-00039","num":"00039"},"figref":"FIG. 13"},{"@attributes":{"id":"P-00040","num":"00040"},"figref":"FIG. 14"},{"@attributes":{"id":"P-00041","num":"00041"},"figref":"FIG. 15"},{"@attributes":{"id":"P-00042","num":"00042"},"figref":"FIG. 16"},{"@attributes":{"id":"P-00043","num":"00043"},"figref":"FIG. 17"}]},"DETDESC":[{},{}]}
