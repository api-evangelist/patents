---
title: Auto-scheduling of tests
abstract: System and method for performing a multiple tests on each of one or more units, where each of the tests requires a respective resource of a plurality of resources. A first test is performed on a unit using a first resource. During performance of the first test, a search is made for a second test, requiring a second resource, where the second resource is not currently being used. If the second test is found, the second test is performed on the unit, or a second unit, using the second resource, substantially concurrently with at least a portion of the first test being performed on the unit. Performing a test includes locking the respective resource to exclude use by other tests, including acquiring the resource, and unlocking the resource upon completion of the test, including releasing the resource for use in performing the respective test on another of the units.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08234089&OS=08234089&RS=08234089
owner: National Instruments Corporation
number: 08234089
owner_city: Austin
owner_country: US
publication_date: 20021107
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","DESCRIPTION OF THE RELATED ART","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS"],"p":["The present invention relates to the field of test executive software for organizing and executing test executive sequences. In particular, the invention relates to a system and method for efficient execution of multiple tests on one or more units.","Test executive software is specialized software that allows a user to organize and execute sequences of reusable test modules to test units under test (UUTs). For example, the test modules may interact with one or more hardware instruments to test the UUT(s). The test modules often have a standard interface and typically can be created in a variety of programming environments. The test executive software operates as a control center for the automated test system. More specifically, the test executive software allows the user to create, configure, and\/or control test sequence execution for various test applications, such as production and manufacturing test applications. Text executive software typically includes various features, such as test sequencing based on pass\/fail results, logging of test results, and report generation, among others.","Test executives include various general concepts. The following comprises a glossary of test executive nomenclature, as used herein:","Code Module\u2014A program module, such as a Windows Dynamic Link Library (.dll), LabVIEW VI (.vi), ActiveX component, or other type of program module or component, that implements one or more functions that perform a specific test or other action.","Test Module\u2014A code module that performs a test of a UUT.","Step\u2014An action that the user can include within a sequence of other actions. A step may call a test module to perform a specific test.","Step Module\u2014The code module that a step calls.","Sequence\u2014A series of steps that the user specifies for execution in a particular order. Whether and when a step is executed can depend on the results of previous steps.","Sequence File\u2014A file that contains the definition of one or more sequences.","Sequence Editor\u2014A program that provides a graphical user interface for creating, editing, and debugging sequences.","Run-time Operator Interface\u2014A program that provides a graphical user interface for executing sequences on a production station. A sequence editor and run-time operator interface can be separate application programs or different aspects of the same program.","Test Executive Engine\u2014A module or set of modules that provide an API for creating, editing, executing, and debugging sequences. A sequence editor or run-time execution operator interface uses the services of a test executive engine.","Application Development Environment (ADE)\u2014A programming environment such as LabVIEW, LabWindows\/CVI, Microsoft Visual C++, Microsoft Visual Basic, etc., in which the user can create test modules and run-time operator interfaces.","Unit Under Test (UUT)\u2014The device or component that is being tested.","Thus, the user may use the sequence editor to construct a test executive sequence comprising a plurality of steps. The test executive sequence may then be executed to perform tests of a system or UUT.","In some systems, multiple UUTs may be tested in parallel. This approach generally increases the testing system performance since it allows multiple units to be tested at the same time. For example, a plurality of tests may be performed on each of a plurality of UUTs, where each test may require exclusive use of one or more resources, e.g., oscilloscope, sensor, digital multi-meter (DMM), etc., during execution of the test, e.g., by using respective execution threads to test respective units in parallel. However, when performing parallel testing, inefficiencies may result when executing threads must wait for a specific resource or resources to be released.",{"@attributes":{"id":"p-0018","num":"0017"},"figref":["FIGS. 1A and 1B","FIG. 1A","FIG. 1A","FIG. 1A"]},{"@attributes":{"id":"p-0019","num":"0018"},"figref":["FIG. 1B","FIG. 1A","FIG. 1B","FIG. 1B"],"b":["1","2","3","4"]},"Thus, it would be desirable to provide improved systems and methods for performing parallel testing on one or more units under test.","Various embodiments of a system and method for performing a plurality of tests on each of one or more units under test (UUT) are presented, where each of the plurality of tests requires or is associated with a respective resource of a plurality of resources. The plurality of tests may be specified in a test sequence, also referred to as an auto-scheduled test sequence, described below. A plurality of execution threads may be used to perform at least a portion of two or more of the tests substantially in parallel. In an embodiment where the plurality of tests are to be performed on each of a plurality of units, a thread may be associated with each unit. In an embodiment where the plurality of tests is to be performed on a single unit, each thread may be associated with one or more of the tests, or may simply perform any of the tests as each is able. The threads may in effect compete for use of the resources to perform respective tests on the unit or units by each performing an embodiment of the method described below.","It is noted that a test may be a single operation, or may be two or more operations or subtests. In other words, a \u201ctest\u201d may actually refer to multiple tests. Similarly, a resource may be a single device or component (or program), or may include multiple devices or components (or programs). Thus, when a test is performed on a unit using a resource, it may be that multiple subtests (i.e., tests) are performed on the unit (or a component of the unit) using a plurality of devices. It should be noted that in other embodiments, described below, the method may be performed by a plurality of threads to perform a plurality of tests on a single unit.","In one embodiment, the plurality of tests may be searched for a next test to perform on the unit, where 1) the test has not been performed on the unit, and 2) the respective resource of the test is available for use. In other words, an attempt may be made to determine a test whose associated resource is not currently being used to perform another test, or to perform the same test on another unit. If the test is not found, the method may check against a time-out condition, and if a time-out has occurred, the method may exit. If no time-out has occurred, then the method may continue searching. In other words, if the respective test for the respective unit is not found, the method may continue the searching until the respective test is found, or an ending condition, e.g., a time-out condition, is met. If the respective test is found, then the respective resource of the respective test may be locked, where locking includes acquiring the respective resource. In other words, once a free resource for a desired test is determined, the method may lock the resource, thereby excluding use of the resource by execution threads for other tests. The respective test may then be performed on the unit, e.g., the locked resource may be used to perform the associated test on the UUT.","Once the test has been performed, the respective resource may be unlocked, thereby releasing the resource for use by other tests\/threads. As noted above, in one embodiment, multiple execution threads may operate substantially in parallel, performing respective tests, e.g., on associated UUTs, as the respective resources become available. In other words, two or more of the respective tests on the respective units may be performed substantially concurrently, e.g., by respective execution threads. In another embodiment, at least portions of the searching, locking, performing, and unlocking for a plurality of the respective tests may be performed substantially concurrently.","After the respective resource has been unlocked, an ending condition may be checked, and if the ending condition is met the method may exit, otherwise, the method may proceed searching for another test to perform on the unit, as described above. In one embodiment, searching for the next test may be performed iteratively. For example, the searching, locking, performing, and unlocking may be performed by the execution thread until 1) each of the plurality of tests has been performed on the unit, and\/or 2) an ending condition is met. Considering all of the execution threads together, the searching, locking, performing, and unlocking may be performed (by the various execution threads) until 1) each of the plurality of tests has been performed, e.g., on each of the plurality of units, and\/or 2) the ending condition is met. The ending condition may include time-outs, equipment failure, manual or automatic termination of the test process, and\/or any other type of ending condition.","Once the resource associated with the test has been unlocked, the method may further include searching for another, i.e., a different, test of the plurality of tests to be performed on the respective unit, where 1) the different test requires another, i.e., a different, resource of the plurality of resources, and 2) the different resource is not currently being used. If the different test is found, then the method may perform the different test on the respective unit using the different resource, where performing the different test on the respective unit is performed substantially concurrently with performing the respective test on the different one of the plurality of units. In other words, once the respective test has been performed on the respective unit, e.g., by a first thread, not only may the method find and perform another test on the respective unit, but the method may also find and perform the respective test on another unit, assuming that the respective test has not yet been performed on the other unit.","The general concepts presented above may also be applied to performing multiple tests on a single unit. In other words, the method may perform multiple tests on a single unit, where at least a portion of two or more of the tests are performed substantially concurrently. In this embodiment, multiple execution threads may be launched, where each thread may perform an embodiment of the above method in order to perform a particular test on the UUT. Thus, in one embodiment, if there are three tests to be performed on the unit, three threads may be launched, where each thread is capable of performing any of the three tests on the unit. In other embodiments, the number of threads may not equal the number of tests, but rather two or more threads may operate to perform three or more tests between them.","Thus, similar to the method described above, in one embodiment, the method may include searching the plurality of tests to determine a respective test, where the respective test has not been performed on the unit, and where the respective resource of the respective test is available for use. If the respective test is found, the respective resource of the respective test may be locked (acquired), and the respective test performed on the unit. The respective resource of the respective test may then be unlocked (released). In a preferred embodiment, at least portions of the searching, locking, performing, and unlocking for a plurality of the respective tests may be performed substantially concurrently. The searching, locking, performing, and unlocking may be performed iteratively until each of the plurality of tests has been performed on the unit, or until a stopping condition is met, e.g., due to hardware problems, manual termination, etc. Thus, various embodiments of the method may be used to perform a plurality of tests on a single unit.","It should be noted that in other embodiments, the two approaches described above may be combined. In other words, multiple threads may be used to perform a plurality of tests on each of a plurality of units, where at least a portion of the tests are performed in substantially parallel fashion, and in doing so, multiple tests may be performed (by multiple threads) on a respective unit in a substantially concurrent manner.","In some situations, the above described methods may result in thread \u201cstarvation\u201d, where various factors such as processing bias and\/or circumstance may prevent or exclude a thread from acquiring a resource to perform a test. In other words, because each of the threads are effectively competing for test resources, in some cases a particular thread may be prevented from ever (or at least for a relatively long time, e.g., before a time-out condition occurs) acquiring a resource. Thus, in an embodiment of the method where the searching, locking, performing, and unlocking are performed by a respective execution thread, each of the plurality of resources may be associated with it a respective queue structure or its equivalent, e.g., a FIFO (first in, first out), for storing threads waiting for the respective resource. In this case, searching the plurality of tests to determine a respective test may include each thread examining the plurality of resources to determine a free resource (i.e., unlocked), and if a free resource is found, determining the respective test associated with the free resource. If no free resource is found, the method may determine a resource of the plurality of resources with fewest threads in the FIFO for that resource, and add the thread to the FIFO for that resource. In one embodiment, when the respective resource is acquired, i.e., when the execution thread locks the resource, the thread may be removed from any other FIFOs storing the thread. In other words, once the thread successfully finds a free resource, the thread may be removed from any FIFOs in which the thread is still waiting.","While in many embodiments, the auto-scheduled test sequences described above may be generated manually by a user, it may be desirable to provide means for more easily generating auto-scheduled test sequences. Thus, in one embodiment, program instructions implementing a tool or interface for generating auto-schedule test sequences may be provided in the form of a stand-alone application, a dynamic linked library, and\/or a plug-in program module for an existing application, such as, for example, National Instruments TestStand product. In another embodiment, the program instructions may simply be integrated into an existing program, thereby extending the functionality of the program to include the desired features.","In a preferred embodiment, for a test sequence to be performed in auto-scheduled mode, at least one auto-scheduled block plus one or more auto-scheduled sections may be included. Thus, in one embodiment, a graphical user interface (GUI) may present menu options to the user for creating, modifying, and otherwise specifying the auto-scheduled block and the one or more auto-scheduled sections. In other words, in one embodiment, a test sequence may be created in response to user input, where creating the test sequence includes receiving user input requesting an automatic scheduling feature, and programmatically creating one or more steps in the test sequence to enable the automatic scheduling feature. The one or more steps may include at least one auto-schedule block, including a plurality of auto-scheduled sections, each specifying a respective test of the plurality of tests and a respective resource of the plurality of resources for use in performing the respective test.","In one embodiment, when creating a sequence, the user may simply insert a \u201cBegin Auto-Schedule\u201d step. This step may include configuration menus that allow the user to add auto-scheduled sections and\/or a timeout, e.g., by right clicking on the \u201cBegin Auto-Schedule\u201d step and selecting an \u201cAdd Auto-Scheduled Section\u201d option. Thus, in one embodiment, for ease of use, the GUI may automatically insert additional steps that are needed.","In one embodiment, a \u201cBegin Auto-Schedule\u201d step and a corresponding \u201cEND\u201d step may be generated, e.g., in response to user input received by the GUI. Once the begin\/end steps of the auto-schedule block have been added to the test sequence file, the user may select another menu option indicating the addition of an auto-scheduled section, resulting in insertion of an auto-scheduled section (possibly including a \u201cLock Resource\u201d and an \u201cUnlock Resource\u201d step) as well as an \u201cEnd Auto-Schedule\u201d step. In one embodiment, a label may also be added that shows where the user-defined or specified test steps must be added for each auto-scheduled section. Thus, in response to receiving user input indicating the addition of an auto-schedule section, the GUI may programmatically insert one or more steps in the test sequence for specifying a respective test to be performed. This operation may be repeated as many times as needed for each application. For example, if an application requires locking three sets of instruments, then three auto-scheduled sections may be inserted.","Once an auto-scheduled section has been inserted, the resource (or group of resources) that section will utilize may be configured, e.g., by right clicking on the corresponding \u201cLock Resource\u201d step and selecting a \u201cConfigure Lock Resource . . . \u201d option or its equivalent. A pop-up dialog may be displayed and the user may provide input, e.g., a string, indicating the name of the resource to lock, or a selection from a list of available resources. If the section utilizes more than one resource, an array of strings may be entered, where each string contains the name of the resource to lock. The \u201cLock Resource\u201d step may automatically create a Lock for each of the names indicated, i.e., manual creation of the locks may not be required. In one embodiment, if a Lock for an indicated resource (name) already exists, the \u201cLock Resource\u201d step type may connect to the existing Lock. Thus, in a preferred embodiment, further user input may be received by the GUI specifying the resource and the desired steps needed to perform the respective test using that resource, e.g., by an \u201cInsert Step\u201d menu option. The user may thus add and specify successive auto-schedule sections for the auto-schedule block, where each section indicates or performs a respective test using a respective resource.","As mentioned above, in one embodiment, the auto-scheduled step types may include a timeout feature, thus, in addition to specifying the auto-schedule sections, an option may be presented to the user for specifying a time-out condition for the auto-schedule block. In one embodiment, the specified timeout may be applied to all of the auto-scheduled sections. In other words, the auto-scheduled steps may be viewed as a group or block that performs a particular function, e.g., a test suite, and thus, in this embodiment, the timeout may be defined at the top level and may be applied to every auto-scheduled section inside the auto-schedule block. If an auto-scheduled block times-out, it indicates that one of the auto-scheduled sections was not able to acquire its resources within the specified time. In one embodiment of the GUI, a timeout may be set by right clicking on the \u201cBegin Auto-Scheduled\u201d step and selecting the option \u201cSet Auto-Schedule Timeout . . . \u201d. A pop-up dialog may be displayed presenting the option to enable or disable the timeout for the current block. In one embodiment, the GUI may also allow the user to specify whether a timeout causes a runtime error or simply terminates.","It should be noted that the above approach may be used to generate additional auto-schedule blocks, with respective auto-schedule sections, time-out specifications, etc.","Although the above described embodiment is implemented as a set of steps organized into an auto-schedule block, other approaches are also contemplated. For example, the plurality of tests may be included in a selection structure, such as a case statement, as is well-known in the art. This type of selection structure may be implemented in a variety of ways, including, but not limited to, graphical programming languages such as National Instruments \u201cG\u201d language, used in the LabVIEW graphical program development environment, and text-based programming languages, such as C, C++, etc.","In an embodiment where the selection structure is a case statement, each of the plurality of auto-scheduled sections may comprise or may be included as a respective case in the case statement. In one embodiment, each respective case may be selectable based on a label indicating the respective resource, where the respective resource is not currently in use. In another embodiment, the label for each case may indicate the test instead of the resource, where the associated resource is implied by the test. The locking and\/or unlocking functionality for resource management may be performed by case-specific code inside each respective case section, or alternatively, by implicit program instructions connected or associated with the case. Additionally, other functionality required by the testing process may also be provided by explicit or implicit code.","For example, in one embodiment of the auto-schedule case statement, there may be no explicit selection variable used to select the case, i.e., to match with the case label. Rather, an \u201cauto-schedule\u201d block indicator at the beginning of the case statement may have associated code that manages an iterative process whereby each case is considered based on resource availability and whether the case, i.e., the test, has already been performed on the unit. In one embodiment, each \u201ccase\u201d, e.g., case \u201cCamera\u201d, may have associated code that determines the availability of the respective resource and\/or keeps track of whether the test has already been performed on the unit.","Alternatively, explicit code may be provided for the above described functionality. For example, the case statement may be embedded in a loop for iterative consideration of each case\/test. As another example, an explicit function may be provided that determines the next test to be performed.","Thus, in various embodiments, auto-schedule test sequences may be created that substantially improve efficiencies of test procedures by reducing testing resource idle time. Additionally, the auto-schedule test sequences may be generated via a GUI, where the GUI programmatically inserts steps and\/or structures into the test sequence in response to user input.","While the invention is susceptible to various modifications and alternative forms, specific embodiments thereof are shown by way of example in the drawings and are herein described in detail. It should be understood, however, that the drawings and detailed description thereto are not intended to limit the invention to the particular form disclosed, but on the contrary, the intention is to cover all modifications, equivalents and alternatives falling within the spirit and scope of the present invention as defined by the appended claims.","Incorporation by Reference","The following references are hereby incorporated by reference in their entirety as though fully and completely set forth herein.","U.S. patent application Ser. No. 09\/259,162 titled \u201cTest Executive System and Method Including Step Types for Improved Configurability,\u201d filed Feb. 26, 1999.","The LabVIEW and BridgeVIEW graphical programming manuals, including the \u201cG Programming Reference Manual\u201d, available from National Instruments Corporation, are hereby incorporated by reference in their entirety.","The TestStand user manual, available from National Instruments Corporation, is also hereby incorporated by reference in its entirety.","FIG. \u2014Instrumentation System",{"@attributes":{"id":"p-0058","num":"0057"},"figref":["FIG. 2","FIG. 2"],"b":["100","100","102","102","102","150","150","150"]},"In one embodiment, the UUT may be a system comprising a plurality of sub-components, where respective tests are to be performed on each component. The computer  may execute a test executive sequence to perform automated tests of the system or portions of the system. As described below, the computer  may launch multiple execution threads to perform a plurality of tests, some of which may be performed substantially in parallel.","The one or more instruments may include a GPIB instrument  and associated GPIB interface card , a data acquisition board  and associated signal conditioning circuitry , a VXI instrument , a PXI instrument , a video device  and associated image acquisition card , a motion control device  and associated motion control interface card , and\/or one or more computer based instrument cards , among other types of devices.","The GPIB instrument  may be coupled to the computer  via a GPIB interface card  provided by the computer . In a similar manner, the video device  may be coupled to the computer  via the image acquisition card , and the motion control device  may be coupled to the computer  through the motion control interface card . The data acquisition board  may be coupled to the computer , and optionally interfaces through signal conditioning circuitry  to the UUT. The signal conditioning circuitry  preferably comprises an SCXI (Signal Conditioning eXtensions for Instrumentation) chassis comprising one or more SCXI modules .","The GPIB card , the image acquisition card , the motion control interface card , and the DAQ card  are typically plugged in to an I\/O slot in the computer , such as a PCI bus slot, a PC Card slot, or an ISA, EISA or MicroChannel bus slot provided by the computer . However, these cards , ,  and  are shown external to computer  for illustrative purposes. The cards , ,  and  may also be implemented as external devices coupled to the computer , such as through a serial bus.","The VXI chassis or instrument  may be coupled to the computer  via a serial bus, MXI bus, or other serial or parallel bus provided by the computer . The computer  preferably includes VXI interface logic, such as a VXI, MXI or GPIB interface card (not shown), which interfaces to the VXI chassis . The PXI chassis or instrument is preferably coupled to the computer  through the computer's PCI bus.","A serial instrument (not shown) may also be coupled to the computer  through a serial port, such as an RS-232 port, USB (Universal Serial bus) or IEEE 1394 or 1394.2 bus, provided by the computer . In typical systems an instrument will not be present of each interface type, and in fact many systems may only have one or more instruments of a single interface type, such as only GPIB instruments.","The instruments are coupled to the unit under test (UUT) or process , or are coupled to receive field signals, typically generated by transducers. Other types of instruments or devices may be connected to the system, as desired.","The computer system  may include a memory medium on which test executive software according to one embodiment of the present invention is stored. The test executive software may allow a user to create, configure, and\/or control test executive sequence execution for various test applications, such as production and manufacturing test applications. As described below, the test executive software may include functionality for performing multiple tests in a test executive sequence. The test executive software, possibly in the form of additional programs, may also provide means for generating the test executive sequence, e.g., in response to user input.","The term \u201cmemory medium\u201d is intended to include an installation medium, e.g., a CD-ROM, floppy disks , or tape device; a computer system memory or random access memory such as DRAM, SRAM, EDO RAM, Rambus RAM, etc.; or a non-volatile memory such as a magnetic media, e.g., a hard drive, or optical storage. The memory medium may comprise other types of memory as well, or combinations thereof. In addition, the memory medium may be located in a first computer in which the programs are executed, or may be located in a second different computer that connects to the first computer over a network, such as the Internet. In the latter instance, the second computer may provide program instructions to the first computer for execution. The host computer CPU executing code and data from the memory medium may comprise a means for implementing the methods described below.","FIG. \u2014Computer System Block Diagram",{"@attributes":{"id":"p-0068","num":"0067"},"figref":["FIG. 3","FIG. 2","FIG. 3","FIG. 2"]},"The computer  includes at least one central processing unit or CPU  that is coupled to a processor or host bus . The CPU  may be any of various types, including an x86 processor, e.g., a Pentium class, a PowerPC processor, a CPU from the SPARC family of RISC processors, as well as others. Main memory  is coupled to the host bus  by means of memory controller .","The main memory  may store software according to one embodiment of the present invention, such as test executive software with functionality as described above with reference to , and as described in detail below with reference to . The main memory  may also store operating system software as well as other software for operation of the computer system, as well known to those skilled in the art.","The host bus  is coupled to an expansion or input\/output bus  by means of a bus controller  or bus bridge logic. The expansion bus  is preferably the PCI (Peripheral Component Interconnect) expansion bus, although other bus types can be used. The expansion bus  includes slots for various devices such as the data acquisition board  (of ) and a GPIB interface card  that provides a GPIB bus interface to the GPIB instrument  (of ). The computer  further comprises a video display subsystem  and hard drive  coupled to the expansion bus .","As shown, a reconfigurable instrument  may also be connected to the computer . The reconfigurable instrument  may include a functional unit, also referred to as configurable logic, such as a programmable logic device (PLD), e.g., an FPGA, or a processor and memory, which may execute a real time operating system. Program instructions may be downloaded and executed on the reconfigurable instrument . In one embodiment, at least a portion of the test executive software described herein may execute on the reconfigurable instrument . In various embodiments, the functional unit may be comprised on an instrument or device connected to the computer through means other than an expansion slot, e.g., the instrument or device may be connected via an IEEE 1394 bus, USB, or other type of port. Also, the functional unit may be comprised on a device such as the data acquisition board  or another device shown in .","Test Executive Software Components",{"@attributes":{"id":"p-0073","num":"0072"},"figref":["FIG. 4","FIG. 4","FIG. 4","FIG. 4","FIG. 4"],"b":["202","202","202"]},"The test executive software of  also includes a sequence editor  for creating and editing test executive sequences. The sequence editor  and the operator interface programs  interface to the test executive engine . One or more process models  couple to the test executive engine . The test executive engine  interfaces through an adapter interface  to one or more adapters . The adapters shown in  include the LabVIEW standard prototype adapter, the C\/CVI prototype adapter, the DLL flexible prototype adapter, and the sequence adapter. The LabVIEW standard prototype adapter interfaces to program modules having a .VI extension, i.e., LabVIEW graphical programs. The C\/CVI prototype adapter interfaces to program modules having a .dll, .lib, .obj, or .c extension. The DLL flexible prototype adapter interfaces to program modules having a .dll extension. The sequence adapter interfaces to sequence files.","The test executive engine  manages the execution of test executive sequences. Sequences comprise steps that may call external code modules. By using module adapters  that have the standard adapter interface , the test executive engine  can load and execute different types of code modules. Thus, the test executive may be independent from particular application development environments (ADEs) used to create the code modules. In one embodiment, the test executive may use a special type of sequence called a process model to direct the high-level sequence flow. The test executive engine  may implement an API used by the sequence editor  and run-time operator interfaces .","Test Executive Sequence Editor","The sequence editor  may be an application program in which the user creates, modifies, and\/or debugs test executive sequences. The sequence editor  may have a graphical user interface (GUI) enabling a user to efficiently create a test executive sequence for testing a system or unit under test. For example, the sequence editor  may provide the user with easy access to test executive features, such as step types, step properties, sequence parameters, step result collection, etc.",{"@attributes":{"id":"p-0077","num":"0076"},"figref":["FIG. 5","FIG. 5","FIG. 6","FIG. 6"],"b":"212"},"In one embodiment, the sequence editor  may also include an execution window that provides debugging tools, e.g., those found in application development environments such as LabVIEW, LabWindows\/CVI, Microsoft Visual C\/C++, Microsoft Visual Basic, etc. These may include features such as breakpoints, single stepping, tracing, a variable display, and a watch window.","In one embodiment, in the sequence editor , the user may start multiple concurrent executions. Multiple instances of the same sequence can be executed, and different sequences can be executed at the same time, e.g., as separate threads in a multi-threaded system. Executing multiple instances of the same sequence on different execution threads enables parallel testing of multiple UUTs, as described herein. In one embodiment, each execution instance may have its own execution window. In trace mode, the execution window may display the steps in the currently executing sequence. When execution is suspended, the execution window may display the next step to execute and provide single-stepping options.","Additional functionality of the sequence editor  according to embodiments of the present invention are described below with reference to .","Test Executive Engine","The test executive engine  may be used when creating, editing, executing, and debugging test executive sequences. The test executive engine  may also provide a test executive engine application programming interface (API) that enables another program to interface with the test executive engine  in order to perform these actions. In one embodiment, the test executive engine  may export an object-based or component-based API, which in one embodiment may be an ActiveX Automation API. The sequence editor  and run-time operator interfaces  may use the test executive engine API. The engine API may be called from any programming environment able to use the API. For example, where the API comprises an ActiveX Automation API, the engine API may be called from any programming environment that supports access to ActiveX Automation servers. Thus, in various embodiments, the engine API may be called from test modules written in various programming environments, including test modules that are written in LabVIEW, LabWindows\/CVI, Microsoft Visual C++, Microsoft Visual Basic, Java, etc.","One task performed by the test executive engine  is to manage the execution of test executive sequences. Executing a sequence may comprise executing steps included in the sequence. Not all steps in the sequence are necessarily executed. For example, the user may configure some steps to be skipped, e.g., depending on execution results of previous steps. For a step that references a user-supplied code module, executing the step may comprise executing the respective code module. In addition to these user-supplied code modules being executed, for each step, additional program instructions may be executed, wherein these additional program instructions implement additional functionality specified for the step. These additional program instructions may be specified by the test executive software, rather than being defined by the respective user-supplied code module for the step. As one example, when including a step in a sequence, the user may configure execution results of the step to be collected. In this example, when the step is executed, program instructions to store the step results accordingly may be executed in addition to the program instructions of a user-supplied code module that the step references. It is noted that not all steps may reference a user-supplied code module. For example, the test executive may provide some step types that primarily affect various aspects of sequence execution and are not designed to reference user-supplied code modules.","FIGS. A and B\u2014Auto-Scheduling of a Test Executive Sequence",{"@attributes":{"id":"p-0083","num":"0082"},"figref":["FIGS. 7A and 7B","FIGS. 7A and 7B","FIGS. 1A and 1B"]},"As illustrated in , in one embodiment, the plurality of tests may be included in a test executive sequence. The test executive sequence may include at least one auto-schedule block, which may include a plurality of auto-scheduled sections. Each auto-scheduled section may specify a respective test of the plurality of tests, and a respective resource of the plurality of resources for use in performing the respective test.","As  shows, in this embodiment, the test sequence includes an auto-schedule block or group. In one embodiment, the auto-schedule block may include a begin step, indicating initiation of the auto-schedule block, the plurality of auto-scheduled sections, and an end step, indicating termination of the auto-schedule block. The begin step may include (possibly implicit) code or instructions to manage processing and execution of the auto-scheduled sections, for example, iteratively searching through the sections, as described in detail below with reference to . Similarly, the end step may have associated code that performs various functions or operations related to the termination of the testing sequence of the auto-schedule block, e.g., clean-up operations, etc.","In the embodiment shown, each of the plurality of auto-scheduled sections (in this case, three) includes a lock resource step indicating locking and acquiring a respective resource, a respective test of the plurality of tests which uses the locked and acquired resource, and an unlock resource step indicating unlocking and releasing the resource.","More particularly,  illustrates an example test sequence, e.g., a test executive sequence, where a first test, Test 1, requires use of a DMM, a second test, Test 2, requires use of an oscilloscope, and a third test, Test 3, requires use of a camera. The sequence of tests is to be performed on each of the four UUTs. As mentioned above, when a resource is used exclusively for a test, the resource is typically locked prior to the test execution, then released after the test execution. Thus, in the test sequence shown in , each test step is protected with resource locks to avoid collisions, i.e., simultaneous requests for resources, since there is only one instance of each resource (e.g., DMM, oscilloscope, camera) and the resources may be shared (sequentially) by all the UUTs being tested in parallel (at least substantially).","Thus, as  shows, for each UUT, the DMM is to be locked, then Test 1 performed. Once Test 1 is complete, the DMM is to be unlocked. The test sequence also specifies that the oscilloscope (\u201cscope\u201d) is to be locked, Test 2 performed on the UUT, and upon completion of Test 2 the oscilloscope unlocked, as shown. Finally, the test sequence specifies that the camera is to be locked, Test 3 performed on the UUT, and the camera unlocked. Once all three of these tests are performed on the UUT, the test sequence for that UUT is terminated, as indicated by the END test step.","It should be noted that in the test sequence shown, although the three tests are specified in a particular order, actual performance of the tests for each UUT may occur in different orders, depending on resource availability, as illustrated in  and described below. Thus, using the approach described herein the various tests may preferably be performed on the UUTs in various orders as needed to improve the efficiency of the testing procedure. It should be further noted that in a preferred embodiment, the test executive sequence shown is performed or implemented by each of a plurality of execution threads, where each thread corresponds to a respective UUT. Further details of using multiple execution threads to perform multiple tests in (substantially) parallel fashion are presented below with reference to .","Although the embodiment shown in  is implemented as a set of steps organized into an auto-schedule block, other approaches are also contemplated. For example, in an alternative embodiment, the plurality of tests may be included in a selection structure, such as a case statement, as is well-known in the art. Most programming languages include a case or select\/switch statement where each case is labeled with a data item or variable value that is matched against an input value. This type of selection structure may be implemented in a variety of ways, including, but not limited to, graphical programming languages such as National Instruments \u201cG\u201d language, used in the LabVIEW graphical program development environment, and text-based programming languages, such as C, C++, etc.","For example, a typical textual language case statement may have the following form:",{"@attributes":{"id":"p-0092","num":"0091"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"switch (k)"]},{"entry":[{},"{"]},{"entry":[{},"case kValueOne:"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ case-specific code here"]},{"entry":[{},"break;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"case kValueTwo:"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ other case-specific code here"]},{"entry":[{},"break;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"case kValueThree:"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ further case-specific code here"]},{"entry":[{},"break;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}},"br":{}},"A textual Auto-schedule case statement corresponding to the test executive sequence of  may thus look like:",{"@attributes":{"id":"p-0094","num":"0093"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"autoschedule"]},{"entry":[{},"{"]},{"entry":[{},"case \u201cDMM1\u201d:"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ Use DMM 1 to perform test 1"]},{"entry":[{},"break;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"case \u201cScope\u201d:"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ Use Oscilloscope to perform test 2"]},{"entry":[{},"break;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"case \u201cCamera\u201d:"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ Use Camera to perform test 3"]},{"entry":[{},"break;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}},"br":{}},"Thus, in an embodiment where the selection structure is a case statement, each of the plurality of auto-scheduled sections may comprise or may be included as a respective case in the case statement. In one embodiment, each respective case may be selectable based on a label indicating the respective resource, where the respective resource is not currently in use. In another embodiment, the label for each case may indicate the test instead of the resource, where the associated resource is implied by the test. The locking and\/or unlocking functionality for resource management may be performed by case-specific code inside each respective case section, or alternatively, by implicit program instructions connected or associated with the case. Additionally, other functionality required by the testing process may also be provided by explicit or implicit code.","For example, note that in the auto-schedule case statement shown, there is no explicit \u201ck value\u201d used to select the case, i.e., to match with the case label. Rather, the \u201cauto-schedule\u201d block indicator at the beginning of the case statement may have associated code that manages an iterative process whereby each case is considered based on resource availability and whether the case, i.e., the test, has already been performed on the unit. In one embodiment, each \u201ccase\u201d, e.g., case \u201cCamera\u201d, may have associated code that determines the availability of the respective resource and\/or keeps track of whether the test has already been performed on the unit.","Alternatively, explicit code may be provided for the above described functionality. For example, the case statement may be embedded in a loop for iterative consideration of each case\/test. As another example, an explicit function may be provided that determines the next test to be performed.","The following pseudo-code, based loosely on C\/C++, illustrates one embodiment of a text-based implementation of the above test sequence:",{"@attributes":{"id":"p-0099","num":"0098"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\/\/ AutoSchedule"},{"entry":"{"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"119pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["char *","resourceNames[3] =","{\u201cDMM1\u201d, \u201cScope\u201d, \u201cCamera\u201d};"]},{"entry":["void *","sectionAddress[3] =","{&Section1, &Section2, &Section3};"]},{"entry":["int","sectionExecuted[3] =","{FALSE, FALSE, FALSE};"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"double timeOut = 10.0;"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["void *","newInstructionPointer;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"DetermineNextSection;"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"newInstructionPointer ="]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"_AcquireLockAndGetCodeAddressForNextAutoScheduleSection(3,"},{"entry":"resourceNames,"},{"entry":"sectionAddresses, sectionExecuted, &EndAutoSchedule, timeOut);"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"asm"]},{"entry":[{},"{"]},{"entry":[{},"mov eip, newInstructionPointer"]},{"entry":[{},"}"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"Section1:"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"UseDMM1(); \/\/ user supplied code for section1 compiled to here"]},{"entry":[{},"_ReleaseLock(resourcesNames[0]);"]},{"entry":[{},"goto DetermineNextSection;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"Section2:"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"UseScope(); \/\/ user supplied code for section2 compiled to here"]},{"entry":[{},"_ReleaseLock(resourcesNames[1]);"]},{"entry":[{},"goto DetermineNextSection;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"Section3:"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"UseCamera(); \/\/ user supplied code for section3 compiled to here"]},{"entry":[{},"_ReleaseLock(resourcesNames[2]);"]},{"entry":[{},"goto DetermineNextSection;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":"EndAutoSchedule:"},{"entry":"\/\/ user supplied code immediately following the autoschedule block."},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"In this embodiment, the compiler implicitly supplies the _AcquireLockAndGetCodeAddressForNextAutoScheduleSection and _ReleaseLock functions. It is noted that the implementation code (or at least analogous code) for this approach could be compiled code generated for any language-specific autoschedule construct.","Thus, any of a variety of approaches may be used to implement various embodiments of the present invention, including graphical and text-based programming languages. Additionally, both explicit and implicit constructs may be employed to implement the auto-schedule functionality described herein. Further details regarding the performance of multiple tests on one or more UUTs are presented below with reference to .",{"@attributes":{"id":"p-0102","num":"0101"},"figref":["FIG. 7B","FIG. 7A","FIG. 7B","FIG. 7B","FIG. 7B"]},"In the example shown, while Test 1 is performed on UUT  (the first unit under test), during which the respective resource for Test 1 is locked, Test 2 is performed on UUT , and Test 3 is performed on UUT . Thus, in contrast with the prior art approach in which UUT , UUT , and the resources associated with Test 2 and Test 3, are idle while Test 1 is performed on UUT , in this embodiment, all of the tests are performed (on the respective UUTs) in parallel.","As  also shows, once the initial tests, i.e., the first column of tests in the table, are complete, the tests and their associated resources may be re-allocated to different UUTs. In other words, the respective resources used by each test for the respective UUTs may be unlocked and released, then used to perform the test on another UUT. For example, in the embodiment shown, in the second column of tests, Test 2 is performed on UUT , Test 3 is performed on UUT , and Test 1 is performed on UUT .","It is noted that when there are more units to be tested than tests, there may be slots in the schedule where a UUT is idle, as indicated by the blank slots in the table of . However, it is further noted that in this case no testing resources are idle for any of the schedule slots. Conversely, when there are more tests to be performed than units to be tested, there may be schedule slots where testing resources, but no UUTs, will be idle.","In the third column of the table, the tests and their associated resources are again respectively re-allocated to different UUTs, with Test 3 performed on UUT , Test 1 on UUT , and Test 2 on UUT , as shown. Once this third test battery is complete, then in the fourth column of the table, Test 1, Test 2, and Test 3 are performed on UUT , UUT , and UUT , respectively, after which the test executive sequence is complete, i.e., terminated.","A visual comparison of the execution flows of  may be made to determine an approximate difference in the efficiencies of the two approaches. For example, simply counting the number of blank slots in the two execution flows shows that in the prior art approach there are 12 schedule slots where UUTs are idle, i.e., where no test is being performed on a UUT. In contrast, in the schedule of , there are four blank schedule slots where a UUT is not being tested. Thus, according to this measure, the approach illustrated in  is one third as inefficient as the prior art approach. It is further noted that the total time required to perform the entire testing procedure is similarly reduced by a third, in that there are six columns in the prior art table, and only four columns in the table of . It is noted that the above description is an idealized case, in that each of the tests requires the same amount of time to be performed, and that in real world applications the various tests may require substantially different times to be performed.","Further details of the performance of multiple tests on one or more UUTs are presented below with reference to .","FIG. \u2014Method for Performing Multiple Tests on One or more Units",{"@attributes":{"id":"p-0109","num":"0108"},"figref":["FIG. 8","FIG. 8"]},"In an embodiment where a plurality of tests are to be performed on each of a plurality of units, each of the plurality of units may have an associated execution thread for performing an embodiment of the method of , where at least a subset of the threads execute in (substantially) parallel fashion. Thus, the method of  may be considered to be performed by each of the plurality of threads for a respective unit, where the threads cooperate and\/or compete for resources to perform specific tests. As was noted above, a test may be a single operation, or may be two or more operations or subtests. Similarly, a resource may be a single device or component (or program), or may include multiple devices or components (or programs). Thus, when a test is performed on a unit using a resource, it may be that multiple subtests (i.e., tests) are performed on the unit using a plurality of devices. It should be noted that in other embodiments, described below, the method of  may be performed by a plurality of threads to perform a plurality of tests on a single unit.","As  shows, in , the plurality of tests may be searched for a next test to perform on the unit. In one embodiment, the plurality of tests may be searched to determine a respective test to perform on the unit where 1) the respective test has not been performed on the unit, and 2) the respective resource of the respective test is available for use. In other words, an attempt may be made to determine a test whose associated resource is not currently being used to perform another test, or to perform the same test on another unit.","As indicated in , if in  the test is not found, e.g., a test that has not yet been performed on the unit and that has an available resource, then in , the method may check against a time-out condition, and if a time-out has occurred, the method may exit, as shown. If no time-out has occurred, then the method may continue searching, as indicated in . In other words, in the embodiment shown, if the respective test for the respective unit is not found, the method may continue the searching until the respective test is found, or an ending condition, e.g., a time-out condition, is met.","If in , the respective test is found, then in  the respective resource of the respective test may be locked, where locking includes acquiring the respective resource. In other words, once a free resource for a desired test is determined, the method may lock the resource, thereby excluding use of the resource by execution threads for other tests. The respective test may then be performed on the unit, as indicated in . In other words, the locked resource may be used to perform the associated test on the UUT.","One the test has been performed, then in , the respective resource of the respective test may be unlocked, where unlocking includes releasing the respective resource. Said another way, when the test has been performed, the resource may be freed for use by other tests\/threads. As noted above, in one embodiment, multiple execution threads may operate substantially in parallel, performing respective tests on associated UUTs as the respective resources become available. In other words, two or more of the respective tests on the respective units may be performed substantially concurrently, e.g., by respective execution threads. In another embodiment, at least portions of the searching, locking, performing, and unlocking for a plurality of the respective tests may be performed substantially concurrently.","As  also shows, after the respective resource has been unlocked in , then in , a determination may be made as to whether an ending condition is met, and if so, the method may exit or terminate, as shown. If the ending condition is not met, then the method may proceed searching for another test to perform on the unit, as shown in  and described above. In one embodiment, searching for the next test may include iteratively searching. For example, in one embodiment, the searching, locking, performing, and unlocking may be performed by the execution thread until 1) each of the plurality of tests has been performed on the unit, and\/or 2) an ending condition is met. Considering all of the execution threads together, the searching, locking, performing, and unlocking may be performed (by the various execution threads) until 1) each of the plurality of tests has been performed, e.g., on each of the plurality of units, and\/or 2) the ending condition is met. The ending condition may include time-outs, equipment failure, manual or automatic termination of the test process, and\/or any other type of ending condition.","In other embodiments, additional constraints may be imposed on the search conditions, e.g., on the selection criteria. For example, in one embodiment, certain of the tests to be performed on a unit may need to be performed in a particular order, e.g., a test A may need to be performed before a test B is performed on that unit. As another example, in embodiments where multiple tests may be performed on a single unit (substantially) concurrently, there may be certain combinations of resources which are not allowed, thus, a selection which might otherwise be acceptable may be rejected (at least for a time) if the resource combination constraint would be violated. Thus, although in some embodiments, the order of the tests to be performed on each unit may not matter, in other embodiments, at least some ordering constraints may be imposed on the process.","In a further elaboration of the above embodiment, where multiple tests are to be performed on multiple units, the method may include performing a first test of the plurality of tests on a first unit using a first resource of the plurality of resources. During the performing of the first test, the method may search for a second test of the plurality of tests, where, as noted above, 1) the second test requires a second resource of the plurality of resources, and 2) the second resource is not currently being used. If the second test is found, then the second test is performed on a second unit using the second resource, where performing the second test on the second unit is performed substantially concurrently with at least a portion of said performing the first test on the first unit.","As described above, performing the first test of the plurality of tests on a first unit using a first resource of the plurality of resources may include locking the first resource to exclude use of the first resource by others of the plurality of tests, where locking includes acquiring the first resource for performing the first test. Upon completion of the first test, the method may unlock the first resource, where unlocking includes releasing the first resource for use in performing the first test on another of the plurality of units.","Similarly, the method may further include searching for a third test of the plurality of tests, where 1) the third test requires a third resource of the plurality of resources, and 2) the third resource is not currently being used. If the third test is found, then the third test may be performed on a third unit using the third resource, where performing the third test on the third unit is performed substantially concurrently with performing the first test on the first unit and\/or performing the second test on the second unit.","Additionally, the method may also include completing the performance of the first test on the first unit using the first resource, where completing includes unlocking and releasing the first resource for use by others of the plurality of tests, and performing the first test on a different one of the plurality of units using the first resource. In other words, once the first test on the first unit is done, another thread, e.g., associated with a different unit, may operate to perform the first test on the (different) unit.","In one embodiment, the method may further include searching for another, i.e., a different, test of the plurality of tests to be performed on the first unit, wherein 1) the different test requires another, i.e., a different, resource of the plurality of resources, and 2) the different resource is not currently being used. If the different test is found, then the method may perform the different test on the first unit using the different resource, where performing the different test on the first unit is performed substantially concurrently with performing the first test on the different one of the plurality of units. In other words, once the first test has been performed on the first unit, e.g., by a first thread, not only may the method find and perform another test on the first unit, but the method may also find and perform the first test on another unit, assuming that the first test has not yet been performed on the other unit.","The general concepts presented with reference to  may also be applied to performing multiple tests on a single unit. In other words, the method may perform multiple tests on a single unit, where at least a portion of two or more of the tests are performed substantially concurrently. In this embodiment, multiple execution threads may be launched, where each thread may perform an embodiment of the method of  in order to perform a particular test on the UUT. Thus, in one embodiment, if there are three tests to be performed on the unit, three threads may be launched, where each thread is capable of performing any of the three tests on the unit. In other embodiments, the number of threads may not equal the number of tests, but rather two or more threads may operate to perform three or more tests between them.","Thus, similar to the method described above, in one embodiment, the method may include searching the plurality of tests to determine a respective test, where the respective test has not been performed on the unit, and wherein the respective resource of the respective test is available for use. If the respective test is found, the respective resource of the respective test may be locked (acquired), and the respective test performed on the unit. The respective resource of the respective test may then be unlocked (released). In a preferred embodiment, at least portions of the searching, locking, performing, and unlocking for a plurality of the respective tests may be performed substantially concurrently. The searching, locking, performing, and unlocking may be performed iteratively until each of the plurality of tests has been performed on the unit, or until a stopping condition is met, e.g., due to hardware problems, manual termination, etc. Thus, various embodiments of the method of  may be used to perform a plurality of tests on a single unit.","It should be noted that in other embodiments, the two approaches described above may be combined. In other words, multiple threads may be used to perform a plurality of tests on each of a plurality of units, where at least a portion of the tests are performed in substantially parallel fashion, and in doing so, multiple tests may be performed (by multiple threads) on a respective unit in a substantially concurrent manner. Thus, efficiencies resulting from parallel execution of multiple threads may be two-fold, in that not only may different tests be performed on respective different units (in parallel), but different tests may be performed on single units (in parallel), as well.","In some situations, the above described methods may result in thread \u201cstarvation\u201d, where various factors such as processing bias and\/or circumstance may prevent or exclude a thread from acquiring a resource to perform a test. In other words, because each of the threads are effectively competing for test resources, in some cases a particular thread may be prevented from ever (or at least for a relatively long time, e.g., until a time-out condition occurs) acquiring a resource. Thus, in an embodiment of the method where the searching, locking, performing, and unlocking are performed by a respective execution thread, each of the plurality of resources may be associated with it a respective queue structure or its equivalent, e.g., a FIFO (first in, first out), for storing threads waiting for the respective resource. In this case, searching the plurality of tests to determine a respective test may include each thread examining the plurality of resources to determine a free resource (i.e., unlocked), and if a free resource is found, determining the respective test associated with the free resource. If no free resource is found, the method may determine a resource of the plurality of resources with fewest threads in the FIFO for that resource, and add the thread to the FIFO for that resource.","In other words, each resource may have associated with it a queue that allows threads to wait for a particular resource to become available. By selecting the FIFO with the least number of queued threads (if no free resources for needed tests are found), the thread is added to the waiting list for the resource with the least current demand.","In one embodiment, when the respective resource is acquired, i.e., when the execution thread locks the resource, the thread may be removed from any other FIFOs storing the thread. In other words, once the thread successfully finds a free resource, the thread may be removed from any FIFOs in which the thread is still waiting.","FIGS. A and B\u2014Creating an Auto-Schedule Test Sequence","While in many embodiments, the auto-scheduled test sequences described above may be generated manually by a user, e.g., using various development environments such as National Instruments LabVIEW and LabWindows\/CVI, the Visual Basic application development environments, and various text-based development environments, it may be desirable to provide means for more easily generating auto-scheduled test sequences. Thus, in one embodiment, program instructions implementing a tool or interface for generating auto-schedule test sequences may be provided in the form of a stand-alone application, a dynamic linked library, and\/or a plug-in program module for an existing application, such as, for example, National Instruments TestStand. In another embodiment, the program instructions may simply be integrated into an existing program, thereby extending the functionality of the program to include the desired features.",{"@attributes":{"id":"p-0129","num":"0128"},"figref":["FIG. 9A","FIG. 9B","FIG. 9A","FIGS. 9A and 9B"]},"As mentioned above, in a preferred embodiment, for a test sequence to be performed in auto-scheduled mode, at least one auto-scheduled block plus one or more auto-scheduled sections may be included. Thus, in the GUI shown in , menu options may be presented to the user for creating, modifying, and otherwise specifying the auto-scheduled block and the one or more auto-scheduled sections. In other words, in one embodiment, a test sequence may be created in response to user input, where creating the test sequence includes receiving user input requesting an automatic scheduling feature, and programmatically creating one or more steps in the test sequence to enable the automatic scheduling feature. In one embodiment, the one or more steps may include at least one auto-schedule block, including a plurality of auto-scheduled sections, where each auto-scheduled section specifies a respective test of the plurality of tests, and a respective resource of the plurality of resources for use in performing the respective test, as was described in detail above.","In other words, when creating a sequence, the user may simply insert a \u201cBegin Auto-Schedule\u201d step. This step may include configuration menus that allow the user to add auto-scheduled sections and\/or a timeout, e.g., by right clicking on the \u201cBegin Auto-Schedule\u201d step and selecting the option \u201cAdd Auto-Scheduled Section\u201d, as shown in . Thus, in one embodiment, for ease of use, the GUI may automatically insert additional steps that are needed.","In the embodiment shown in , a \u201cBegin Auto-Schedule\u201d step and a corresponding \u201cEND\u201d step have been generated, e.g., in response to user input received by the GUI. As  also shows, once the begin\/end steps of the auto-schedule block have been added to the test sequence file, the user may select another menu option indicating the addition of an auto-scheduled section, resulting in insertion of an auto-scheduled section (including a \u201cLock Resource\u201d and an \u201cUnlock Resource\u201d step) as well as an \u201cEnd Auto-Schedule\u201d step. In the example shown, a label is also added that shows where the user test steps must be added for each auto-scheduled section. Note that in the embodiment shown, prior to receiving user input specifying the particular resource to be used by these additional steps, the GUI describes the \u201cLockResource\u201d step as \u201cNot Configured\u201d. Thus, in response to receiving user input indicating the addition of an auto-schedule section, the GUI may programmatically insert one or more steps in the test sequence for specifying a respective test to be performed. This operation may be repeated as many times as needed for each application. For example, if an application requires locking three sets of instruments, then three auto-scheduled sections may be inserted.","Once an auto-scheduled section has been inserted, the resource (or group of resources) that section will utilize may be configured. For example, in one embodiment, the resource may be configured by right clicking on the corresponding \u201cLock Resource\u201d step and selecting the option \u201cConfigure Lock Resource . . . \u201d. A pop-up dialog may be displayed and the user may provide input, e.g., a string, indicating the name of the resource to lock, or a selection from a list of available resources. If the section utilizes more than one resource, an array of strings may be entered, where each string contains the name of the resource to lock. The \u201cLock Resource\u201d step may automatically create a Lock for each of the names indicated, i.e., manual creation of the locks may not be required. In one embodiment, if a Lock for an indicated resource (name) already exists, the \u201cLock Resource\u201d step type may connect to the existing Lock.","Thus, in a preferred embodiment, further user input may be received by the GUI specifying the resource and the desired steps needed to perform the respective test using that resource, as indicated by the \u201cInsert Step\u201d menu option shown in . The user may thus add and specify successive auto-schedule sections for the auto-schedule block, where each section indicates or performs a respective test using a respective resource.","As mentioned above, in one embodiment, the auto-scheduled step types may include a timeout feature, thus, in addition to specifying the auto-schedule sections, an option may be presented to the user for specifying a time-out condition for the auto-schedule block, as also shown in the GUI of . In one embodiment, the specified timeout may be applied to all of the auto-scheduled sections. In other words, the auto-scheduled steps may be viewed as a group or block that performs a particular function, e.g., a test suite, and thus, in this embodiment, the timeout may be defined at the top level and may be applied to every auto-scheduled section inside the auto-schedule block. If an auto-scheduled block times-out, it indicates that one of the auto-scheduled sections was not able to acquire its resources within the specified time. In one embodiment of the GUI of , a timeout may be set by right clicking on the \u201cBegin Auto-Scheduled\u201d step and selecting the option \u201cSet Auto-Schedule Timeout . . . \u201d. A pop-up dialog may be displayed presenting the option to enable or disable the timeout for the current block. In one embodiment, the GUI may also allow the user to specify whether a timeout causes a runtime error or simply terminates.","It should be noted that the above approach may be used to generate additional auto-schedule blocks, with respective auto-schedule sections, time-out specifications, etc. It should be further noted that although the above embodiments are described in terms of menus and dialogs, any other types of interface elements may be used as desired, including, for example, drag-and-drop techniques, e.g., where a user drags and drops icons representing the various test steps onto the test sequence, text-based scripting or natural-language parsing, wizard-based approaches, where a sequence of panels or dialogs leads the user through the test sequence generation process, and so on.","Thus, in various embodiments, auto-schedule test sequences may be created that substantially improve efficiencies of test procedures by reducing testing resource idle time. Additionally, the auto-schedule test sequences may be generated via a GUI, where the GUI programmatically inserts steps and\/or structures into the test sequence in response to user input.","Various embodiments further include receiving or storing instructions and\/or data implemented in accordance with the foregoing descriptions upon a carrier medium. Suitable carrier media include a memory medium as described above, as well as signals such as electrical, electromagnetic, or digital signals, conveyed via a communication medium such as networks and\/or a wireless link.","Although the embodiments above have been described in considerable detail, numerous variations and modifications will become apparent to those skilled in the art once the above disclosure is fully appreciated. It is intended that the following claims be interpreted to embrace all such variations and modifications."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["A better understanding of the present invention can be obtained when the following detailed description of the preferred embodiment is considered in conjunction with the following drawings, in which:",{"@attributes":{"id":"p-0044","num":"0043"},"figref":"FIGS. 1A and 1B"},{"@attributes":{"id":"p-0045","num":"0044"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0046","num":"0045"},"figref":["FIG. 3","FIG. 2"]},{"@attributes":{"id":"p-0047","num":"0046"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0048","num":"0047"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0049","num":"0048"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0050","num":"0049"},"figref":"FIGS. 7A and 7B"},{"@attributes":{"id":"p-0051","num":"0050"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0052","num":"0051"},"figref":"FIGS. 9A and 9B"}]},"DETDESC":[{},{}]}
