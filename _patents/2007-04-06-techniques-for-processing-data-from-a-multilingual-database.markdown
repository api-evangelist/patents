---
title: Techniques for processing data from a multilingual database
abstract: A method, system and article of manufacture for providing natural language support for users running queries against a multilingual database. One embodiment comprises identifying one or more physical values defined by physical data in the multilingual database for a query result associated with an executed query. At least one translation function configured to transform at least a portion of the identified physical values defined in one or more different natural languages into alternative values defined in a selected language is executed. From each executed translation function, a data structure mapping at least a portion of the identified physical values to translated values defined in the selected language is identified and the translated values defining the alternative values defined in the selected language are retrieved from each identified data structure. The query result associated with the executed query including the alternative values defined in the selected language is output.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07680780&OS=07680780&RS=07680780
owner: International Business Machines Corporation
number: 07680780
owner_city: Armonk
owner_country: US
publication_date: 20070406
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS","Preferred Embodiments","An Exemplary Computing Environment","An Exemplary Database and Query Environment","Logical\/Runtime View of Environment","Transforming an Abstract Query into a Concrete Query","Natural Language Support in Creation of Abstract Queries","Natural Language Support with Respect to Foreign Languages","Natural Language Support for Multilingual Databases","Natural Language Support in Query Execution"],"p":["1. Field of the Invention","The present invention generally relates to data processing in databases and, more particularly, to providing natural language support for users running queries against a multilingual database.","2. Description of the Related Art","Databases are computerized information storage and retrieval systems. A relational database management system is a computer database management system (DBMS) that uses relational techniques for storing and retrieving data. The most prevalent type of database is the relational database, a tabular database in which data is defined so that it can be reorganized and accessed in a number of different ways. A distributed database is one that can be dispersed or replicated among different points in a network. An object-oriented programming database is one that is congruent with the data defined in object classes and subclasses.","Regardless of the particular architecture, a DBMS can be structured to support a variety of different types of operations for a requesting entity (e.g., an application, the operating system or an end user). Such operations can be configured to retrieve, add, modify and delete information being stored and managed by the DBMS. Standard database access methods support these operations using high-level database query languages, such as the Structured Query Language (SQL).","One type of functionality that a DBMS must support for end users is natural language support. By way of example, one framework provides natural language support for users running queries in an abstract database environment. The abstract database environment provides a requesting entity (i.e., an end-user or front-end application) with a data abstraction model that defines an abstract representation of data stored in an underlying physical storage mechanism, such as a relational database. The data abstraction model facilitates the process of query composition by allowing a user to compose abstract queries without needing to understand the schema of the physical data. The framework provides a natural language resource component that defines translation information for a given data abstraction model using one or more natural language expressions. The natural language expression(s) can be used to translate expressions occurring in a default language in an abstract query (that is composed using the given data abstraction model) into another language defined by the natural language resource component. Furthermore, query results obtained in the default language can be translated into the other language using user-defined functions that contain suitable translation information.","The foregoing framework is satisfactory to provide natural language support for single-language databases (i.e., databases having physical data that is provided in a single default language). However, databases may contain physical data provided in one or more different languages that is originated from one or more different geographic locations. In this case (i.e., when dealing with a multi-language or multilingual database), the foregoing framework is unsatisfactory.","Therefore, there is a need for an improved and more flexible technique for providing natural language support for users running queries against a multilingual database.","The present invention is generally directed to a method, system and article of manufacture for providing natural language support in a database environment and, more particularly, for providing natural language support for users running queries against a multilingual database.","One embodiment provides a computer-implemented method of providing language transformation support for a query result obtained in response to execution of a query against a multilingual database containing physical data provided in a plurality of different natural languages. The method comprises identifying one or more physical values defined by the physical data in the multilingual database for the query result associated with the executed query. At least one translation function configured to transform at least a portion of the identified physical values defined in at least one language of the plurality of different natural languages into alternative values defined in a selected language is executed, comprising: (i) identifying, from each executed translation function, a data structure mapping at least a portion of the identified physical values to translated values defined in the selected language, and (ii) retrieving the translated values in the selected language from each identified data structure, the retrieved translated values of all identified data structures defining the alternative values defined in the selected language. The method further comprises outputting the query result associated with the executed query including the alternative values defined in the selected language.","Another embodiment provides a computer-readable medium containing a program which, when executed by a processor, performs a process of providing language transformation support for a query result obtained in response to execution of a query against a multilingual database containing physical data provided in a plurality of different natural languages. The process comprises identifying one or more physical values defined by the physical data in the multilingual database for the query result associated with the executed query. At least one translation function configured to transform at least a portion of the identified physical values defined in at least one language of the plurality of different natural languages into alternative values defined in a selected language is executed, comprising: (i) identifying, from each executed translation function, a data structure mapping at least a portion of the identified physical values to translated values defined in the selected language, and (ii) retrieving the translated values in the selected language from each identified data structure, the retrieved translated values of all identified data structures defining the alternative values defined in the selected language. The process further comprises outputting the query result associated with the executed query including the alternative values defined in the selected language.","Introduction","The present invention is generally directed to a method, system and article of manufacture for providing natural language support in a database environment and, more particularly, for providing natural language support for users running abstract queries against a multilingual database. A multilingual database is a database having physical data that is provided in one or more different languages and originated from one or more different geographic locations.","In one embodiment, an abstract query is issued from a user against an underlying multilingual database. The abstract query is specified using one or more logical fields defined by a data abstraction model abstractly describing physical data in the multilingual database. At least one logical field used for creation of the abstract query is associated with physical values defined by the physical data of the multilingual database that are defined in a plurality of different natural languages.","For execution, the abstract query is transformed into an executable query capable of being executed against the multilingual database on the basis of the data abstraction model. Thereby, a query contribution is generated in the executable query for the at least one logical field. The generated query contribution includes a function call for a translation function that is configured to transform the physical values that are associated with the at least one logical field into alternative values defined in a selected natural language (i.e., a language written by, and readable by, human-beings). The executable query is then executed against the multilingual database to obtain a corresponding result set.","As a result of executing the executable query against the multilingual database, at least a portion of the physical values that are associated with the at least one logical field are retrieved and the translation function is executed. In order to determine corresponding alternative values in the selected language for the at least one portion of the physical values, the translation function accesses associated translation information. In one embodiment, the associated translation information includes an alternative value defined in the selected natural language for each physical value that is associated with the at least one logical field. Accordingly, the alternative values for the at least one portion of the physical values can be retrieved from the translation information and included with the corresponding result set for the executable query. The result set can, thus, be output in the selected natural language to the user.","In the following, reference is made to embodiments of the invention. However, it should be understood that the invention is not limited to specific described embodiments. Instead, any combination of the following features and elements, whether related to different embodiments or not, is contemplated to implement and practice the invention. Furthermore, in various embodiments the invention provides numerous advantages over the prior art. However, although embodiments of the invention may achieve advantages over other possible solutions and\/or over the prior art, whether or not a particular advantage is achieved by a given embodiment is not limiting of the invention. Thus, the following aspects, features, embodiments and advantages are merely illustrative and, unless explicitly present, are not considered elements or limitations of the appended claims.","One embodiment of the invention is implemented as a program product for use with a computer system such as, for example, computer system  shown in  and described below. The program(s) of the program product defines functions of the embodiments (including the methods described herein) and can be contained on a variety of computer-readable media. Illustrative computer-readable media include, but are not limited to: (i) information permanently stored on non-writable storage media (e.g., read-only memory devices within a computer such as CD- or DVD-ROM disks readable by a CD- or DVD-ROM drive); (ii) alterable information stored on writable storage media (e.g., floppy disks within a diskette drive or hard-disk drive); or (iii) information conveyed to a computer by a communications medium, such as through a computer or telephone network, including wireless communications. The latter embodiment specifically includes information to\/from the Internet and other networks. Such computer-readable media, when carrying computer-readable instructions that direct the functions of the present invention, represent embodiments of the present invention.","In general, the routines executed to implement the embodiments of the invention, may be part of an operating system or a specific application, component, program, module, object, or sequence of instructions. The software of the present invention typically is comprised of a multitude of instructions that will be translated by the native computer into a machine-readable format and hence executable instructions. Also, programs are comprised of variables and data structures that either reside locally to the program or are found in memory or on storage devices. In addition, various programs described hereinafter may be identified based upon the application for which they are implemented in a specific embodiment of the invention. However, it should be appreciated that any particular nomenclature that follows is used merely for convenience, and thus the invention should not be limited to use solely in any specific application identified and\/or implied by such nomenclature.",{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 1","b":["100","110","100"]},"Illustratively, the computer  is part of a networked system . In this regard, the invention may be practiced in a distributed computing environment in which tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment, program modules may be located in both local and remote memory storage devices. In another embodiment, the computer  is a standalone device. For purposes of construing the claims, the term \u201ccomputer\u201d shall mean any computerized device having at least one processor. The computer may be a standalone device or part of a network in which case the computer may be coupled by communication means (e.g., a local area network or a wide area network) to another device (i.e., another computer).","In any case, it is understood that  is merely one configuration for a computer system. Embodiments of the invention can apply to any comparable configuration, regardless of whether the computer  is a complicated multi-user apparatus, a single-user workstation, or a network appliance that does not have non-volatile storage of its own.","The computer  could include a number of operators and peripheral systems as shown, for example, by a mass storage interface  operably connected to a storage device , by a video interface  operably connected to a display , and by a network interface  operably connected to the plurality of networked devices  (which may be representative of the Internet) via a suitable network. Although storage  is shown as a single unit, it could be any combination of fixed and\/or removable storage devices, such as fixed disc drives, floppy disc drives, tape drives, removable memory cards, or optical storage. The display  may be any video output device for outputting viewable information.","Computer  is shown comprising at least one processor , which obtains instructions and data via a bus  from a main memory . The processor  could be any processor adapted to support the methods of the invention. In particular, the computer processor  is selected to support the features of the present invention. Illustratively, the processor is a PowerPC\u00ae processor available from International Business Machines Corporation of Armonk, N.Y.","The main memory  is any memory sufficiently large to hold the necessary programs and data structures. Main memory  could be one or a combination of memory devices, including Random Access Memory, nonvolatile or backup memory, (e.g., programmable or Flash memories, read-only memories, etc.). In addition, memory  may be considered to include memory physically located elsewhere in the computer system , for example, any storage capacity used as virtual memory or stored on a mass storage device (e.g., direct access storage device ) or on another computer coupled to the computer  via bus . Thus, main memory  and storage device  could be part of one virtual address space spanning multiple primary and secondary storage devices.",{"@attributes":{"id":"p-0039","num":"0038"},"figref":"FIG. 2","b":["130","122","160","180","190"]},"According to one aspect, the application  (and more generally, any requesting entity including, at the highest level, users) issues queries, such as abstract query , against data  in the database . The queries issued by the application  are defined according to an application query specification  and may be predefined (i.e., hard coded as part of the application ) or generated in response to input (e.g., user input). The application query specification(s)  and the abstract model interface  are further described below with reference to .","In one embodiment, the queries issued by the application  are created by users using the user interface , which can be any suitable user interface configured to create\/submit queries. According to one aspect, the user interface  is a graphical user interface. However, it should be noted that the user interface  is only shown by way of example; any suitable requesting entity may create and submit queries against the database  (e.g., the application , an operating system or an end user). Accordingly, all such implementations are broadly contemplated.","In one embodiment, the requesting entity accesses a suitable database connectivity tool such as a Web application, an Open DataBase Connectivity (ODBC) driver, a Java\u00ae DataBase Connectivity (JDBC) driver or a Java\u00ae Application Programming Interface (Java\u00ae API) for creation of a query. A Web application is an application that is accessible by a Web browser and that provides some function beyond static display of information, for instance by allowing the requesting entity to query the database . An ODBC driver is a driver that provides a set of standard application programming interfaces to perform database functions such as connecting to the database , performing dynamic SQL functions, and committing or rolling back database transactions. A JDBC driver is a program included with a database management system to support JDBC standard access between the database  and Java\u00ae applications. A Java\u00ae API is a Java\u00ae-based interface that allows an application program (e.g., the requesting entity, the ODBC or the JDBC) that is written in a high-level language to use specific data or functions of an operating system or another program (e.g., the application ).","Accordingly, the queries issued by the application  can be in physical form, such as SQL and\/or XML queries, which are consistent with the physical representation of the data  in the database . Alternatively, the queries issued by the application  are composed using the abstract model interface . Such queries are referred to herein as \u201cabstract queries\u201d. More specifically, abstract queries are created on the basis of logical fields defined by an underlying data abstraction model.","In the illustrated example, the abstract query  is created on the basis of logical fields defined by a data abstraction model . In one embodiment, the abstract query  is created by creating a results specification and, if required, selection criteria, as explained in more detail below with reference to . The results specification is defined by one or more result fields specifying what data elements should be returned from the database . The selection criteria is defined using one or more condition fields in corresponding query conditions that are configured to evaluate whether a given element of the data  should be returned. The result field(s) and the condition field(s) are defined using the logical fields of the data abstraction model .","The abstract queries are transformed into a form consistent with the physical representation of the data  for execution. For instance, the abstract queries are transformed by a runtime component  into concrete (i.e., executable) queries which are executed by the query execution unit  against the data  of the database .","The database  is representative of any collection of data regardless of the particular physical representation. By way of illustration, the database  may be organized according to a relational schema (accessible by SQL queries) or according to an XML schema (accessible by XML queries). However, the invention is not limited to a particular schema and contemplates extensions to schemas presently unknown. As used herein, the term \u201cschema\u201d generically refers to a particular arrangement of data.","In one embodiment, the database  is a multilingual database. In other words, the database  contains physical data that is provided in one or more different languages and originated from one or more different geographic locations. For instance, the database  is a medical database used to collect data about patients from medical institutions that are located in different countries, such as the United States of America, Mexico and Germany. Accordingly, data coming from the American medical institution(s) can be defined in English, data from the Mexican medical institution(s) in Spanish and data from the German medical institution(s) in German.","In one embodiment, the query execution unit  includes a natural language support (NLS) manager . The NLS manager  provides natural language support for users running queries against the multilingual database . Interaction and operation of the NLS manager , the application  and the abstract model interface  to provide natural language support in query execution is explained in more detail below with reference to .","It should be noted that the query execution unit  illustratively only includes the NLS manager , for simplicity. However, the query execution unit  may include other components, such as a query engine, a query parser and a query optimizer. A query parser is generally configured to accept a received executable query input from a requesting entity, such as the application(s) , and then parse the received executable query. The query parser may then forward the parsed executable query to the query optimizer for optimization. A query optimizer is an application program which is configured to construct a near optimal search strategy (known as an \u201caccess plan\u201d) for a given set of search parameters, according to known characteristics of an underlying database (e.g., the database ), an underlying system on which the search strategy will be executed (e.g., computer system  of ), and\/or optional user specified optimization goals. But not all strategies are equal and various factors may affect the choice of an optimum search strategy. However, in general such search strategies merely determine an optimized use of available hardware\/software components to execute respective queries. Once an access plan is selected, the query engine may then execute the executable query according to the selected access plan.","Illustratively, the NLS manager  includes a natural language resource component  (hereinafter referred to as language resource component ). The language resource component  defines a natural language expression for user-viewable elements defined by logical fields of the data abstraction model . In one embodiment, the language resource component  defines a natural language expression for each attribute (e.g., name) and\/or corresponding value in a logical field. These natural language expressions can be different from expressions defined by the data abstraction model  (hereinafter referred to as \u201cdefault language expressions\u201d). Accordingly, the language resource component  is considered to provide translation information for the data abstraction model .","More generally, the language resource component  includes translations for one or more of the elements (e.g., logical field names, values, etc.) defined by the data abstraction model  from a first natural language expression (e.g., the default language expressions) to a second natural language expression (e.g., expressions in a selected foreign language or a selected terminology). For a given data abstraction model , the language resource component  can further be configured to describe translations from the first natural language expression into two or more other natural language expressions. Thus, in one embodiment, which instance of the data abstraction model  a user \u201csees\u201d will depend upon which natural language expression files are loaded to define the language resource component . In any case, the various natural language expressions can be different languages or different variations (i.e., terminologies) on the same language.","It is noted that particular embodiments described herein can refer to translation of selected elements of the data abstraction model . For example, embodiments may be described with reference to field name translations (e.g., \u201cgender\u201d translated to \u201csex\u201d). However, references to translations of specific data abstraction model elements are done merely for purposes of illustration and not limiting of the invention. Thus, it is broadly contemplated that any element of the data abstraction model  can be translated.","In one embodiment, the language resource component  is used for natural language support of users running an abstract query, such as the abstract query , against the data  of the database . To this end, the language resource component  defines one or more natural language expressions for each of a plurality of logical fields of the data abstraction model  which provides definitions (also referred to herein as \u201cspecifications\u201d) for the plurality of logical fields. More specifically, the language resource component  can be used to determine natural language expression(s) for elements of logical fields displayed to the user for creation of the abstract query . Thus, the elements of the logical fields that are available for specification of the abstract query  can be displayed to the user in the determined natural language expression(s). Accordingly, the user can compose the abstract query  using the one or more elements of the logical fields in the displayed natural language expression(s). Query creation using natural language expressions is illustrated in  which show exemplary screenshots illustrating display of elements of logical fields using exemplary Spanish expressions.","Illustratively, the NLS manager  further includes the application query specification , one or more translation functions  and one or more translation mapping tables . In one embodiment, each of the translation mapping tables  is created for one or more logical fields of the data abstraction model . According to one aspect, the translation mapping tables  can be created on the basis of the language resource component .","Each of the translation mapping tables  includes one or more translated values defined in one or more natural languages for each physical value of the data  that is associated with the one or more logical fields for which the translation mapping table  is created. Accordingly, the translation mapping tables  are considered to provide translation information for physical values defining at least a portion of the data  of the multilingual database . Each translation function  is configured to identify one or more of the translation mapping tables  for a given logical field and to retrieve required alternative values for an underlying result set from translated values included therewith, as described in more detail below.","When executing the executable query against the database , the query execution unit  determines physical values from the data  of the multilingual database  for a corresponding result set. In the illustrated example, the query execution unit  determines the physical values for one or more logical fields specified by the abstract query . As noted above, the determined physical values can be defined in one or more different natural languages, thereby resulting in a multilingual query result. However, in order to return a natural language result set  in a selected language to the application , the query execution unit  executes the translation function(s)  on the determined physical values.","The executed translation function(s)  accesses the translation mapping table(s)  to determine alternative values in the selected language for the determined physical values. In one embodiment, the selected language uses natural language expressions which are considered to be more meaningful to users and, thus, more user-friendly. More specifically, the alternative values can be adapted to a role of a given user or a preferred language used by the user. The retrieved alternative values are included with the natural language result set . Accordingly, in one embodiment the natural language result set  only includes data that is defined in the selected language. The natural language result set  is then output to the application . Query execution and generation of the natural language result set  in a selected language is described in more detail below with reference to .","Referring now to , a relational view illustrating operation and interaction of the application(s)  and the data abstract model interface  of  is shown. The abstract model interface  illustratively provides an interface to the data abstraction model  and the runtime component  of .","The data abstraction model  defines logical fields corresponding to physical entities of data in the database , thereby providing a logical representation of the data. In a relational database environment having a multiplicity of database tables, a specific logical representation having specific logical fields can be provided for each database table. In this case, all specific logical representations together constitute the data abstraction model . The physical entities of the data are arranged in the database  according to a physical representation of the data. By way of illustration, two physical representations are shown, an XML data representation and a relational data representation . However, the physical representation indicates that any other physical representation, known or unknown, is contemplated.","In one embodiment, a different single data abstraction model is provided for each separate physical representation , as explained above for the case of a relational database environment. In an alternative embodiment, a single data abstraction model  contains field specifications (with associated access methods) for two or more physical representations .","Using a logical representation of the data, the application query specification  of  specifies one or more logical fields to compose the abstract query  of . A requesting entity (e.g., the application ) issues the abstract query  as defined by the application query specification . In one embodiment, the abstract query  may include both criteria used for data selection and an explicit specification of result fields to be returned based on the data selection criteria. An example of the selection criteria and the result field specification of the abstract query  is shown in . Accordingly, the abstract query  illustratively includes selection criteria  and a results specification .","The abstract query  is generally referred to herein as an \u201cabstract query\u201d because the query is composed according to abstract (i.e., logical) fields rather than by direct reference to the underlying physical data entities in the database . As a result, abstract queries may be defined that are independent of the particular underlying physical data representation used. For execution, the abstract query  is transformed into a concrete query consistent with the underlying physical representation of the data using the data abstraction model .","In general, the data abstraction model  exposes information as a set of logical fields that may be used within an abstract query to specify criteria for data selection and specify the form of result data returned from a query operation. The logical fields are defined independently of the underlying physical representation being used in the database , thereby allowing abstract queries to be formed that are loosely coupled to the underlying physical representation.","Referring now to , a relational view illustrating interaction of the abstract query  and the data abstraction model  is shown. In one embodiment, the data abstraction model  comprises a plurality of field specifications , , , , , and (seven shown by way of example), collectively referred to as the field specifications  (also referred to hereinafter as \u201cfield definitions\u201d). Specifically, a field specification is provided for each logical field available for composition of an abstract query. Each field specification may contain one or more attributes. Illustratively, the field specifications  include a logical field name attribute , , , , , and (collectively, field name ) and an associated access method attribute , , , , , and (collectively, access methods ). Each attribute may have a value. For example, logical field name attribute has the value \u201cFirstName\u201d and access method attribute has the value \u201cSimple\u201d. Furthermore, each attribute may include one or more associated abstract properties. Each abstract property describes a characteristic of a data structure and has an associated value. In the context of the invention, a data structure refers to a part of the underlying physical representation that is defined by one or more physical entities of the data corresponding to the logical fields. In particular, an abstract property may represent data location metadata abstractly describing a location of a physical data entity corresponding to the data structure, like a name of a database table or a name of a column in a database table. Illustratively, the access method attribute includes data location metadata \u201cTable\u201d and \u201cColumn\u201d. Furthermore, data location metadata \u201cTable\u201d has the value \u201ccontact\u201d and data location metadata \u201cColumn\u201d has the value \u201cf_name\u201d. Accordingly, assuming an underlying relational database schema in the present example, the values of data location metadata \u201cTable\u201d and \u201cColumn\u201d point to a table \u201ccontact\u201d having a column \u201cf_name\u201d.","In one embodiment, each field specification  may contain a definition of one or more value constraints that define allowable values for the respective logical field. By way of example, the field specifications and include exemplary list definitions.","Illustratively, the field specification includes a list definition  that enumerates allowable values for associated marital status data. By way of example, the list definition  defines \u201cSingle\u201d, \u201cMarried\u201d, \u201cDivorced\u201d, \u201cWidowed\u201d and \u201cUnknown\u201d as allowable values for data that is associated with the \u201cMaritalStatus\u201d field . The field specification illustratively includes a list definition  that enumerates allowable values for associated gender data. By way of example, the list definition  defines \u201cMale\u201d, \u201cFemale\u201d and \u201cUnknown\u201d as allowable values for data that is associated with the \u201cGender\u201d field .","It should be noted that the illustrated list definitions are merely illustrative for value constraint definitions and not limiting of the invention. For instance, in one embodiment a given field specification may include a limitation definition that defines an allowable range of values for associated data. By way of example, assume a logical field having associated Hemoglobin values and a limitation definition that defines \u201c0\u201d as minimum allowable value and \u201c100\u201d as maximum allowable value for data that is associated with the field. In another embodiment, a given field specification may include a classification definition that defines value classes for values of associated data. For instance, assume a logical field having associated age values and a classification definition that defines four different value classes \u201cClass 1\u201d to \u201cClass 4\u201d. By way of example, age values from \u201c0\u201d to \u201c12\u201d can be associated with \u201cClass 1\u201d that can be referred to as the \u201cChild\u201d class. Age values from \u201c13\u201d to \u201c17\u201d are can be associated with \u201cClass 2\u201d that can be referred to as the \u201cAdolescent\u201d class, age values from \u201c18\u201d to \u201c64\u201d with \u201cClass 3\u201d that can be referred to as the \u201cAdult\u201d class, and age values from \u201c65\u201d to \u201c120\u201d with \u201cClass 4\u201d that can be referred to as the \u201cSenior\u201d class. Accordingly, any possible value constraint definitions are broadly contemplated.","Furthermore, the illustrated value constraint definitions can be adapted to user- and\/or application-specific requirements. By way of example, for execution of a given query a user may define an upper and a lower limit of normal for the limitation definition of the Hemoglobin values. More specifically, the user may input corresponding upper and\/or lower limits of normal lying within the defined minimum and maximum allowable values prior to query execution to customize the limitation definition. For instance, assume that the user defines for the Hemoglobin values a lower limit of normal as \u201c15\u201d and an upper limit as \u201c25\u201d. Thus, all Hemoglobin values of a corresponding query result returned in execution of the given query lying inside the lower and upper limits of normal could be considered as \u201cnormal\u201d values. Values below the lower limit of normal could be considered as \u201clow\u201d and values above the upper limit of normal could be considered as \u201chigh\u201d. Accordingly, all such possible implementations are broadly contemplated.","In one embodiment, the field specification  of each logical field may contain an attribute indicating whether data in the database  that is associated with the logical field can be defined in one or more different natural languages. By way of example, the field specification includes an exemplary \u201cField Language\u201d attribute . Illustratively, the \u201cField Language\u201d attribute  has the value \u201cMultilingual\u201d in order to indicate that different physical values defining data in the \u201cgender\u201d column of the \u201ccontact\u201d table (cp. access method ) in the database  can be defined in different natural languages.","However, it should be noted that provision of an attribute indicating whether data associated with a given logical field can be defined in one or more different natural languages in the database  is merely optional. For instance, assume that in the given example physical values in the \u201cm_status\u201d column of the \u201ccontact\u201d table (cp. access method ) in the database  that are associated with the \u201cMaritalStatus\u201d field may also be defined in more than one natural language. However, the field specification does not include a \u201cField Language\u201d attribute. Accordingly, all such different implementations are broadly contemplated.","In one embodiment, groups (i.e. two or more) of logical fields may be part of categories. Accordingly, the data abstraction model  includes a plurality of category specifications and (two shown by way of example), collectively referred to as the category specifications. In one embodiment, a category specification is provided for each logical grouping of two or more logical fields. For example, logical fields and are part of the category specifications and , respectively. A category specification is also referred to herein simply as a \u201ccategory\u201d. The categories are distinguished according to a category name, e.g., category names and (collectively, category name(s) ). In the present illustration, the logical fields are part of the \u201cName and Address\u201d category and logical fields are part of the \u201cBirth, Age and Gender\u201d category.","The access methods  generally associate (i.e., map) the logical field names to data in the database (e.g., database ). Any number of access methods is contemplated depending upon the number of different types of logical fields to be supported. In one embodiment, access methods for simple fields, filtered fields and composed fields are provided. The field specifications , and exemplify simple field access methods , , and , respectively. Simple fields are mapped directly to a particular entity in the underlying physical representation (e.g., a field mapped to a given database table and column). By way of illustration, as described above, the simple field access method shown in  maps the logical field name (\u201cFirstName\u201d) to a column named \u201cf_name\u201d in a table named \u201ccontact\u201d. The field specification exemplifies a filtered field access method . Filtered fields identify an associated physical entity and provide filters used to define a particular subset of items within the physical representation. An example is provided in  in which the filtered field access method maps the logical field name (\u201cAnyTownLastName\u201d) to a physical entity in a column named \u201cI_name\u201d in a table named \u201ccontact\u201d and defines a filter for individuals in the city of \u201cAnytown\u201d. Another example of a filtered field is a New York ZIP code field that maps to the physical representation of ZIP codes and restricts the data only to those ZIP codes defined for the state of New York. The field specification exemplifies a composed field access method . Composed access methods compute a logical field from one or more physical fields using an expression supplied as part of the access method definition. In this way, information which does not exist in the underlying physical data representation may be computed. In the example illustrated in  the composed field access method maps the logical field name \u201cAgeInDecades\u201d to \u201cAgeInYears\/10\u201d. Another example is a sales tax field that is composed by multiplying a sales price field by a sales tax rate.","It is contemplated that the formats for any given data type (e.g., dates, decimal numbers, etc.) of the underlying data may vary. Accordingly, in one embodiment, the field specifications  include a type attribute which reflects the format of the underlying data. However, in another embodiment, the data format of the field specifications  is different from the associated underlying physical data, in which case a conversion of the underlying physical data into the format of the logical field is required.","By way of example, the field specifications  of the data abstraction model  shown in  are representative of logical fields mapped to data represented in the relational data representation shown in . However, other instances of the data abstraction model  map logical fields to other physical representations, such as XML.","An illustrative abstract query corresponding to the abstract query  shown in  is shown in Table I below. By way of illustration, the illustrative abstract query is defined using XML. However, any other language may be used to advantage.",{"@attributes":{"id":"p-0076","num":"0075"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":"TABLE I"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"ABSTRACT QUERY EXAMPLE"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"001 \u2003<?xml version=\u201c1.0\u201d?>"]},{"entry":[{},"002 \u2003<!--Query string representation: (AgeInYears > \u201c55\u201d-->"]},{"entry":[{},"003 \u2003<QueryAbstraction>"]},{"entry":[{},"004 \u2003\u2002<Selection>"]},{"entry":[{},"005 \u2003\u2003<Condition field=\u201cAgeInYears\u201d operator=\u201cGT\u201d value=\u201c55\u201d"]},{"entry":[{},"006 \u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003internalID=\u201c1\u201d\/>"]},{"entry":[{},"007 \u2003\u2002<\/Selection>"]},{"entry":[{},"008 \u2003\u2002<Results>"]},{"entry":[{},"009 \u2003\u2003\u2002<Field name=\u201cFirstName\u201d\/>"]},{"entry":[{},"010 \u2003\u2003\u2002<Field name=\u201cAnyTownLastName\u201d\/>"]},{"entry":[{},"011 \u2003\u2003\u2002<Field name=\u201cStreet\u201d\/>"]},{"entry":[{},"012 \u2003\u2002<\/Results>"]},{"entry":[{},"013 \u2003<\/QueryAbstraction>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"Illustratively, the abstract query shown in Table I includes a selection specification (lines 004-007) containing selection criteria and a results specification (lines 008-012). In one embodiment, a selection criterion consists of a field name (for a logical field), a comparison operator (=, >, <, etc) and a value expression (what is the field being compared to). In one embodiment, the results specification is a list of abstract fields that are to be returned as a result of query execution. A results specification in the abstract query may consist of a field name and sort criteria.","In one embodiment, the abstract query shown in Table I is constructed by an application (e.g., application  of ). Furthermore, a language resource component (e.g., language resource component  of ) is provided which is associated with the data abstraction model . The language resource component can be adapted, for instance, to translate elements (e.g., logical field names, values, etc.) of the data abstraction model  into the Russian language. Thus, the application may construct the abstract query using the translation of each element in the Russian language. An associated NLS manager (e. g., NLS manager  of ) can generate an internal representation of the abstract query in a default or untranslated form, i.e., without using the Russian language translations. Thus, the internal representation can be used and accessed by the runtime component  for processing.","In one embodiment, the language resource component associated with the data abstraction model  (or at least a file defining a portion of the language resource component) is specified within the data abstraction model  itself. Accordingly, the data abstraction model  shown in  includes a language resource specification . The language resource specification includes a reference to a particular language resource component (e.g., language resource component  of , or a portion thereof) which is associated with the data abstraction model . Illustratively, the language resource specification includes a language resource file definition having an abstract attribute \u201cFile\u201d. By way of example, the language resource file definition indicates a corresponding language resource file name \u201cABC-XLIFF\u201d. Additional aspects of an illustrative \u201cABC-XLIFF\u201d language resource file are described below.","An illustrative Data Abstraction Model (DAM) corresponding to the data abstraction model  shown in  is shown in Table II below. By way of illustration, the illustrative data abstraction model is defined using XML. However, any other language may be used to advantage.",{"@attributes":{"id":"p-0081","num":"0080"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":"TABLE II"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"DATA ABSTRACTION MODEL EXAMPLE"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"001 \u2003<?xml version=\u201c1.0\u201d?>"},{"entry":"002 \u2003<DataAbstraction>"},{"entry":"003 \u2003<Category name=\u201cName and Address\u201d>"},{"entry":"004 \u2003\u2003<Field queryable=\u201cYes\u201d name=\u201cFirstName\u201d displayable=\u201cYes\u201d>"},{"entry":"005 \u2003\u2003\u2003\u2002<AccessMethod>"},{"entry":"006 \u2003\u2003\u2003\u2003\u2002<Simple columnName=\u201cf_name\u201d"},{"entry":"\u2003\u2002\u2003\u2003\u2003\u2003\u2002 tableName=\u201ccontact\u201d><\/Simple>"},{"entry":"007 \u2003\u2003\u2003\u2002\u2009<\/AccessMethod>"},{"entry":"008 \u2003\u2003<\/Field>"},{"entry":"009 \u2003\u2003<Field queryable=\u201cYes\u201d name=\u201cLastName\u201d displayable=\u201cYes\u201d>"},{"entry":"010 \u2003\u2003\u2003<AccessMethod>"},{"entry":"011 \u2003\u2003\u2003\u2003\u2002<Simple columnName=\u201cl_name\u201d"},{"entry":"\u2003\u2002 \u2003\u2003\u2003\u2003\u2002tableName=\u201ccontact\u201d><\/Simple>"},{"entry":"012 \u2003\u2003\u2003<\/AccessMethod>"},{"entry":"013 \u2003\u2003<\/Field>"},{"entry":"014 \u2003\u2003<Field queryable=\u201cYes\u201d name=\u201cAnyTownLastName\u201d"},{"entry":"\u2003\u2002 \u2003\u2003displayable=\u201cYes\u201d>"},{"entry":"015 \u2003\u2003\u2003<AccessMethod>"},{"entry":"016 \u2003\u2003\u2003\u2003\u2002<Filter columnName=\u201cl_name\u201d tableName=\u201ccontact\u201d"},{"entry":"017 \u2003\u2003\u2003\u2003\u2003Filter=\u201dcontact.city=Anytown\u201d> <\/Filter>"},{"entry":"018 \u2003\u2003\u2003<\/AccessMethod>"},{"entry":"019 \u2003\u2003<\/Field>"},{"entry":"020 \u2003<\/Category>"},{"entry":"021 \u2003<Category name=\u201cBirth, Age and Gender\u201d>"},{"entry":"022 \u2003\u2003<Field queryable=\u201cYes\u201d name=\u201cAgeInDecades\u201d"},{"entry":"\u2003\u2002 \u2003\u2003displayable=\u201cYes\u201d>"},{"entry":"023 \u2003\u2003\u2003<AccessMethod>"},{"entry":"024 \u2003\u2003\u2003\u2003\u2003<Composed"},{"entry":"025 \u2003\u2003\u2003\u2003\u2003\u2003\u2002Expression=\u201dfield:AgeInYears\/10\u201d> <\/Composed>"},{"entry":"026 \u2003\u2003\u2003\u2002<\/AccessMethod>"},{"entry":"027 \u2003\u2003<\/Field>"},{"entry":"028 \u2003\u2003<Field queryable=\u201cYes\u201d name=\u201cAgeInYears\u201d"},{"entry":"\u2003\u2002 \u2003\u2003displayable=\u201cYes\u201d>"},{"entry":"029 \u2003\u2003\u2003\u2002<AccessMethod>"},{"entry":"030 \u2003\u2003\u2003\u2003\u2003<Simple columnName=\u201cage\u201d"},{"entry":"\u2003\u2002 \u2003\u2003\u2003\u2003\u2003tableName=\u201ccontact\u201d><\/Simple>"},{"entry":"031 \u2003\u2003\u2003\u2002<\/AccessMethod>"},{"entry":"032 \u2003\u2003<\/Field>"},{"entry":"033 \u2003\u2003<Field queryable=\u201cYes\u201d name=\u201cMaritalStatus\u201d"},{"entry":"\u2003\u2002 \u2003\u2003displayable=\u201cYes\u201d>"},{"entry":"034 \u2003\u2003\u2003\u2002<AccessMethod>"},{"entry":"035 \u2003\u2003\u2003\u2003\u2003<Simple columnName=\u201cm_status\u201d"},{"entry":"\u2003\u2002 \u2003\u2003\u2003\u2003\u2003tableName=\u201ccontact\u201d><\/Simple>"},{"entry":"036 \u2003\u2003\u2003\u2002<\/AccessMethod>"},{"entry":"037 \u2003\u2003\u2003\u2003\u2003\u2003<List>"},{"entry":"038 \u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2002<Value val=\u201cSingle\u201d \/>"},{"entry":"039 \u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2002<Value val=\u201cMarried\u201d \/>"},{"entry":"040 \u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2002<Value val=\u201cDivorced\u201d \/>"},{"entry":"041 \u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2002<Value val=\u201cWidowed\u201d \/>"},{"entry":"042 \u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2002<Value val=\u201cUnknown\u201d \/>"},{"entry":"043 \u2003\u2003\u2003\u2003\u2003\u2003<\/List>"},{"entry":"044 \u2003\u2003<\/Field>"},{"entry":"045 \u2003\u2003<Field queryable=\u201cYes\u201d name=\u201cGender\u201d displayable=\u201cYes\u201d"},{"entry":"046 \u2003\u2003\u2003\u2003\u2002\u2009multilingual = \u201cYes\u201d>"},{"entry":"047 \u2003\u2003\u2003\u2002<AccessMethod>"},{"entry":"048 \u2003\u2003\u2003\u2003\u2003<Simple columnName=\u201cgender\u201d"},{"entry":"\u2003\u2002 \u2003\u2003\u2003\u2003\u2003tableName=\u201ccontact\u201d><\/Simple>"},{"entry":"049 \u2003\u2003\u2003\u2002<\/AccessMethod>"},{"entry":"050 \u2003\u2003\u2003\u2003\u2003\u2003<List>"},{"entry":"051 \u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2002<Value val=\u201cFemale\u201d \/>"},{"entry":"052 \u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2002<Value val=\u201cMale\u201d \/>"},{"entry":"053 \u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2002<Value val=\u201cUnknown\u201d \/>"},{"entry":"054 \u2003\u2003\u2003\u2003\u2003\u2003<\/List>"},{"entry":"055 \u2003\u2003<\/Field>"},{"entry":"056 \u2003\u2002<\/Category>"},{"entry":"057 \u2003\u2002<LanguageResource file=\u201cABC-XLIFF.xml\u201d>"},{"entry":"058 \u2003<\/DataAbstraction>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"By way of example, note that lines 004-008 correspond to the first field specification of the DAM  shown in  and lines 009-013 correspond to the second field specification . The other field specifications of  are shown in headlines 014-019, 022-027, 028-032, 033-044 and 045-055. Note that line 046 defines a \u201cmultilingual\u201d attribute (\u201cmultilingual=\u201cYes\u201d) that corresponds to the \u201cMultilingual\u201d attribute  shown in . Furthermore, note that line 057 corresponds to the language resource file definition of the DAM shown in . More specifically, line  includes a reference to an exemplary \u201cABC-XLIFF.xml\u201d language resource file. In one embodiment, the ABC-XLIFF.xml file defines a default file containing default natural language expressions for a plurality of elements of the data abstraction model . One or more additional language resource files may then be loaded and applied to the default file to define a particular view of the data abstraction model . Determination of an appropriate language resource file and loading of one or more language resource files associated with a data abstraction model can be performed using conventional techniques applied to the data abstraction model. Examples of determination and loading are explained in more detail below with reference to .","As was noted above, the abstract query of Table I can be transformed into a concrete query for query execution. An exemplary method for transforming an abstract query into a concrete query is described below with reference to .","Referring now to , an illustrative runtime method  exemplifying one embodiment of the operation of the runtime component  of  in conjunction with the data abstraction model  of  is shown. The method  is entered at step  when the runtime component  receives as input an abstract query (such as the abstract query shown in Table I). At step , the runtime component  reads and parses the abstract query and locates individual selection criteria and desired result fields. At step , the runtime component  enters a loop (comprising steps , ,  and ) for processing each query selection criteria statement present in the abstract query, thereby building a data selection portion of a concrete query. In one embodiment, a selection criterion consists of a field name (for a logical field), a comparison operator (=, >, <, etc) and a value expression (what is the field being compared to). At step , the runtime component  uses the field name from a selection criterion of the abstract query to look up the definition of the field in the data abstraction model . As noted above, the field definition includes a definition of the access method used to access the physical data associated with the field. The runtime component  then builds (step ) a concrete query contribution for the logical field being processed. As defined herein, a concrete query contribution is a portion of a concrete query that is used to perform data selection based on the current logical field. A concrete query is a query represented in languages like SQL and XML Query and is consistent with the data of a given physical data repository (e.g., a relational database or XML repository). Accordingly, the concrete query is used to locate and retrieve data from the physical data repository, represented by the database  shown in . The concrete query contribution generated for the current field is then added to a concrete query statement. The method  then returns to step  to begin processing for the next field of the abstract query. Accordingly, the process entered at step  is iterated for each data selection field in the abstract query, thereby contributing additional content to the eventual query to be performed.","After building the data selection portion of the concrete query, the runtime component  identifies the information to be returned as a result of query execution. As described above, in one embodiment, the abstract query defines a list of abstract fields that are to be returned as a result of query execution, referred to herein as a results specification. A results specification in the abstract query may consist of a field name and sort criteria. Accordingly, the method  enters a loop at step  (defined by steps , ,  and ) to add result field definitions to the concrete query being generated. At step , the runtime component  looks up a result field name (from the results specification of the abstract query) in the data abstraction model  and then retrieves a result field definition from the data abstraction model  to identify the physical location of data to be returned for the current logical result field. The runtime component  then builds (at step ) a concrete query contribution (of the concrete query that identifies physical location of data to be returned) for the logical result field. At step , the concrete query contribution is then added to the concrete query statement. Once each of the result specifications in the abstract query has been processed, the concrete query is executed at step .","One embodiment of a method  for building a concrete query contribution for a logical field according to steps  and  of  is described with reference to . At step , the method  queries whether the access method associated with the current logical field is a simple access method. If so, the concrete query contribution is built (step ) based on physical data location information and processing then continues according to method  described above. Otherwise, processing continues to step  to query whether the access method associated with the current logical field is a filtered access method. If so, the concrete query contribution is built (step ) based on physical data location information for some physical data entity. At step , the concrete query contribution is extended with additional logic (filter selection) used to subset data associated with the physical data entity. Processing then continues according to method  described above.","If the access method is not a filtered access method, processing proceeds from step  to step  where the method  queries whether the access method is a composed access method. If the access method is a composed access method, the physical data location for each sub-field reference in the composed field expression is located and retrieved at step . At step , the physical field location information of the composed field expression is substituted for the logical field references of the composed field expression, whereby the concrete query contribution is generated. Processing then continues according to method  described above.","If the access method is not a composed access method, processing proceeds from step  to step . Step  is representative of any other access methods types contemplated as embodiments of the present invention. However, it should be understood that embodiments are contemplated in which less than all the available access methods are implemented. For example, in a particular embodiment only simple access methods are used. In another embodiment, only simple access methods and filtered access methods are used.","Referring now to , a relational view illustrating natural language support for a data abstraction model in accordance with an associated language resource component in one embodiment is shown. More specifically,  shows a data abstraction model \u201cABC-DAM\u201d  (e.g., data abstraction model  of ) and two different views of the data abstraction model . In general, a view of the data abstraction model  defines how the data abstraction model  is presented to a user. For example, the view may reflect group security settings for a specific group of users. Accordingly, using different views of the data abstraction model  according to group security settings, users can be authorized to access information in the data abstraction model  based on a corresponding security level assigned to their respective user group. For simplicity, only two views are shown, i.e., a \u201cRESEARCH-VIEW\u201d  and a \u201cSOCIAL-VIEW\u201d . By way of example, the \u201cRESEARCH-VIEW\u201d  defines a view of the data abstraction model  for users in a research group and the \u201cSOCIAL-VIEW\u201d  defines a view for users in a social service group.","Illustratively, the data abstraction model  is associated with a language resource component \u201cABC-XLIFF\u201d . The views  and  are associated with language resource components \u201cRESEARCH-XLIFF\u201d  and \u201cSOCIAL-XLIFF\u201d , respectively. In one embodiment, the language resource components ,  and  are XLIFF resources. XLIFF (XML Localization Interchange File Format) is an XML based open format designed to capture localizable information (i.e., resources) and to operate with translation tools. Accordingly, the language resource components ,  and  can be implemented by XLIFF language resource files (referred to herein as language resource files).","In one embodiment, the language resource file  is a default language resource file that includes default natural language expressions for each logical field defined by the data abstraction model . In other words, the default language resource file includes all natural language expressions as defined in the data abstraction model . However, it should be noted that provision of the default language resource file is optional. Instead of using the default language resource file, all default natural language expressions can be determined directly from the data abstraction model . Accordingly, in one embodiment, the language resource file  includes natural language expressions which describe translations of each logical field of the data abstraction model  into another language or a variation on the same language.","The language resource files  and  include translations of increasing specificity to replace relatively less specific translations of the language resource file . Each of the language resource files  and  can be used in combination with the language resource file  to translate natural language expressions in the data abstraction model  according to the views  and , respectively. Thus, by applying the view  and the language resource file  (in combination with the language resource file ) to the data abstraction model , an effective data abstraction model \u201cRESEARCH GROUP EFFECTIVE DAM\u201d  can be created for a research group user using the \u201cRESEARCH-VIEW\u201d . An effective data abstraction model is an in-memory representation of a default data abstraction model (e. g., \u201cABC-DAM\u201d ) as modified by applying a view thereto and\/or by aggregating multiple data abstraction models into a single larger data abstraction model. The effective data abstraction model  can be displayed in a user interface . Thus, the user interface  is displayed in accordance with the natural language expressions defined by the language resource files  and . Accordingly, for a social service group user using the \u201cSOCIAL-VIEW\u201d , an effective data abstraction model \u201cSOCIAL SERVICE GROUP EFFECTIVE DAM\u201d  can be created and displayed in a user interface . Thus, the user interface  is displayed in accordance with the natural language expressions defined by the language resource files  and . The data abstraction model , the views  and , the associated language resource files ,  and , the effective data abstraction models  and  and the user interfaces  and  are explained in more detail below with respect to Tables III-X.","As an example of the data abstraction model \u201cABC-DAM\u201d , the exemplary data abstraction model \u201cABC-DAM.xml\u201d shown in Table III below is illustrated. For simplicity, elements of the \u201cABC-DAM.xml\u201d data abstraction model are represented in a shorthand format. Persons skilled in the art will readily recognize corresponding XML representations. Further, for brevity, only parts that are relevant for the following explanations are shown. It is noted that this manner of presentation applies to other tables described below as well.",{"@attributes":{"id":"p-0094","num":"0093"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":"TABLE III"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"DATA ABSTRACTION MODEL EXAMPLE"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"001 \u2003ABC-DAM.xml"]},{"entry":[{},"002 \u2003\u2002+---> Demographic: Patient demographic information"]},{"entry":[{},"003 \u2003\u2003\u2003+--> Gender"]},{"entry":[{},"004 \u2003\u2003\u2003\u2003\u2003\u2003+-->Value: = \u201dFemale\u201d"]},{"entry":[{},"005 \u2003\u2003\u2003\u2003\u2003\u2003+-->Value: = \u201dMale\u201d"]},{"entry":[{},"006 \u2003\u2003\u2003\u2003\u2003\u2003+-->Value: = \u201cUnknown\u201d"]},{"entry":[{},"007 \u2003\u2003\u2003\u2003+--> Name"]},{"entry":[{},"008 \u2003\u2003\u2003\u2003+--> SSN: This is the patient's social security number"]},{"entry":[{},"009 \u2003\u2002+---> Diagnosis: Patient diagnostic information"]},{"entry":[{},"010 \u2003\u2003\u2003+--> Disease"]},{"entry":[{},"011 \u2003\u2003\u2003\u2003\u2003\u2003+--> Name"]},{"entry":[{},"012 \u2003+--->Language Resource"]},{"entry":[{},"013 \u2003\u2003\u2003+--> ABC-XLIFF.xml"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"As can be seen from lines 002 and 009, the exemplary data abstraction model includes two categories, i.e., \u201cDemographic\u201d and \u201cDiagnosis\u201d. By way of example, the \u201cDemographic\u201d category includes definitions for a \u201cGender\u201d (lines 003-006), \u201cName\u201d (line 007) and \u201cSSN\u201d (line 008) logical field. Assume now that the \u201cGender\u201d field refers to a \u201cgender\u201d column in a table of an underlying database (e.g., database  of ). Furthermore, as can be seen from lines 004-006 of Table III, the definition of the \u201cGender\u201d field includes a list of allowed physical values in a default language, here English. More specifically, the allowed physical values for the \u201cGender\u201d field are defined by default language expressions \u201cFemale\u201d, \u201cMale\u201d and \u201cUnknown\u201d. It should further be noted that the \u201cDiagnosis\u201d category also includes a \u201cName\u201d field (line 011). Furthermore, as can be seen from line 013, the exemplary data abstraction model of Table III is associated with the language resource file \u201cABC-XLIFF.xml\u201d. An exemplary language resource file exemplifying the language resource file \u201cABC-XLIFF\u201d  is shown in Table IV below.",{"@attributes":{"id":"p-0096","num":"0095"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":"TABLE IV"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"ABC-XLIFF FILE EXAMPLE"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"001 \u2003ABC-XLIFF.xml"},{"entry":"002 \u2003\u2003\u201cDemographic.Gender:name\u201d = \u201cGender\u201d"},{"entry":"003 \u2003\u2003\u201cDemographic.Gender:val-Female\u201d = \u201cFemale\u201d"},{"entry":"004 \u2003\u2003\u201cDemographic.Gender:val-Male\u201d = \u201cMale\u201d"},{"entry":"005 \u2003\u2003\u201cDemographic.Gender:val-Unknown\u201d = \u201cUnknown\u201d"},{"entry":"006 \u2003\u2003\u201cDemographic.Name:name\u201d = \u201cName\u201d"},{"entry":"007 \u2003\u2003\u201cDemographic.SSN:description\u201d = \u201cThis is the patient's social"},{"entry":"\u2003\u2002 \u2003\u2003security number\u201d"},{"entry":"008 \u2003\u2003\u201cDemographic.SSN:name\u201d = \u201cSSN\u201d"},{"entry":"009 \u2003\u2003\u201cDemographic:description\u201d = \u201cPatient demographic information\u201d"},{"entry":"010 \u2003\u2003\u201cDemographic:name\u201d = \u201cDemographic\u201d"},{"entry":"011 \u2003\u2003\u201cDiagnosis.Disease.Name:name\u201d = \u201cName\u201d"},{"entry":"012 \u2003\u2003\u201cDiagnosis.Disease:name\u201d = \u201cDisease\u201d"},{"entry":"013 \u2003\u2003\u201cDiagnosis:description\u201d = \u201cPatient diagnostic information\u201d"},{"entry":"014 \u2003\u2003\u201cDiagnosis:name\u201d = \u201cDiagnosis\u201d"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"The exemplary XLIFF language resource file of Table IV illustratively includes default natural language expressions for each attribute included in a logical field of the exemplary data abstraction model of Table Ill. More specifically, the exemplary XLIFF language resource file includes, on the left hand side of each line, a definition for an element (e.g., a logical field name or value) of the data abstraction model and, on the right hand side of each line, an associated value. In other words, the XLIFF language resource file of Table IV includes definition\/value mappings for the data abstraction model of Table III. However, as already mentioned above, it should be noted that all information included in the exemplary default language resource file of Table IV is included in and can, thus, be retrieved from, the exemplary data abstraction model of Table III.","As an example of the \u201cRESEARCH-VIEW\u201d , an exemplary view of the data abstraction model of Table III for users of a research group is shown in Table V below. Further, for brevity, only parts that are relevant for the following explanations are shown.",{"@attributes":{"id":"p-0099","num":"0098"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":"TABLE V"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"RESEARCH-VIEW EXAMPLE"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"001 \u2003RESEARCH-VIEW.xml"]},{"entry":[{},"002 \u2003\u2002+---> Exclude"]},{"entry":[{},"003 \u2003\u2003\u2003\u2003\u2003\u2003\u2002+--> Field: SSN"]},{"entry":[{},"004 \u2003+---> Language Resource"]},{"entry":[{},"005 \u2003\u2003\u2003+--> RESEARCH-XLIFF.xml"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"By way of example, it is assumed that researchers should be prevented from seeing Social Security numbers (SSN) for security reasons. Accordingly, as can be seen from line 002, the view of Table V includes an \u201cExclude\u201d attribute to exclude the logical field \u201cSSN\u201d (line 003) from the presentation of the data abstraction model  for display. In other words, the exemplary RESEARCH-VIEW is configured to implement group security settings for users of the RESEARCH group. Furthermore, as can be seen from line 005, the exemplary view of Table V is associated with the language resource file \u201cRESEARCH-XLIFF.xml\u201d. An exemplary language resource file exemplifying the language resource file \u201cRESEARCH-XLIFF\u201d  is shown in Table VI below.",{"@attributes":{"id":"p-0101","num":"0100"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":"TABLE VI"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"RESEARCH-XLIFF FILE EXAMPLE"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"001 \u2003RESEARCH-XLIFF.xml"]},{"entry":[{},"002 \u2003\u2003\u201cDemographic.Name:name\u201d = \u201cSubject name\u201d"]},{"entry":[{},"003 \u2003\u2003\u201cDemographic:description\u201d = \u201cDemographic\u201d"]},{"entry":[{},"004 \u2003\u2003\u201cDiagnosis.Disease.Name:name\u201d = \u201cSyndrome name\u201d"]},{"entry":[{},"005 \u2003\u2003\u201cDiagnosis:description\u201d = \u201cDiagnostic information\u201d"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"As can be seen from lines 002-005, natural language expressions for different definitions of the data abstraction model of Table III are provided, which replace corresponding natural language expressions of the language resource file of Table IV. In other words, it is assumed that researchers would prefer to view the data abstraction model of Table III according to a more technical terminology. Therefore, the natural language expressions shown in Table VI are intended to change the corresponding natural language expressions of Table IV according to a more technical terminology.","By applying the view of Table V and the language resource file of Table VI (in combination with the language resource file of Table IV) to the data abstraction model of Table III, an effective data abstraction model as illustrated in Table VII below can be generated for users of the research group and displayed in the user interface . The exemplary effective data abstraction model illustrated in Table VII is an example for the effective data abstraction model . For simplicity, only relevant displayed information is illustrated in Table VII.",{"@attributes":{"id":"p-0104","num":"0103"},"tables":{"@attributes":{"id":"TABLE-US-00007","num":"00007"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":"TABLE VII"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"RESEARCH GROUP EFFECTIVE DAM EXAMPLE"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"001 \u2003+---> Demographic: Demographic"]},{"entry":[{},"002 \u2003\u2003+--> Gender"]},{"entry":[{},"003 \u2003\u2003\u2003\u2003\u2003+-->Value: = \u201dFemale\u201d"]},{"entry":[{},"004 \u2003\u2003\u2003\u2003\u2003+-->Value: = \u201dMale\u201d"]},{"entry":[{},"005 \u2003\u2003\u2003\u2003\u2003+-->Value: = \u201dUnknown\u201d"]},{"entry":[{},"006 \u2003\u2003\u2003+--> Subject name"]},{"entry":[{},"007 \u2003+---> Diagnosis: Diagnostic information"]},{"entry":[{},"008 \u2003\u2003+--> Disease"]},{"entry":[{},"009 \u2003\u2003\u2003\u2003\u2003+--> Syndrome name"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"As can be seen from Table VII, the SSN information of the data abstraction model of Table III has been excluded from display. Furthermore, lines 001, 006, 007 and 009 are displayed according to the natural language expressions of the language resource file of Table VI.","As an example of the \u201cSOCIAL-VIEW\u201d , an exemplary view of the data abstraction model of Table III for users of a social service group is shown in Table VIII below. Further, for brevity, only parts that are relevant for the following explanations are shown.",{"@attributes":{"id":"p-0107","num":"0106"},"tables":{"@attributes":{"id":"TABLE-US-00008","num":"00008"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":"TABLE VIII"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"SOCIAL-VIEW EXAMPLE"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"001 \u2003SOCIAL-VIEW.xml"]},{"entry":[{},"002 \u2003\u2002+---> IncludeAll"]},{"entry":[{},"003 \u2003\u2002+---> Language Resource"]},{"entry":[{},"004 \u2003\u2003\u2003+--> SOCIAL-XLIFF.xml"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"By way of example, it is assumed that social service group users would need to access all information included in the \u201cABC-DAM\u201d . Accordingly, as can be seen from line 002, the view of Table VIII includes an \u201cIncludeAll\u201d attribute to include all logical fields of the data abstraction model  for display. Furthermore, as can be seen from line 004, the exemplary view of Table VIII is associated with the language resource file \u201cSOCIAL-XLIFF.xml\u201d. An exemplary language resource file exemplifying the language resource file \u201cSOCIAL-XLIFF\u201d  is shown in Table IX below.",{"@attributes":{"id":"p-0109","num":"0108"},"tables":{"@attributes":{"id":"TABLE-US-00009","num":"00009"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":"TABLE IX"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"SOCIAL-XLIFF FILE EXAMPLE"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"001 \u2003SOCIAL-XLIFF.xml"]},{"entry":[{},"002 \u2003\u2003\u201cDemographic.Gender:val-Female\u201d = \u201cGirl\u201d"]},{"entry":[{},"003 \u2003\u2003\u201cDemographic.Gender:val-Male\u201d = \u201cBoy\u201d"]},{"entry":[{},"004 \u2003\u2003\u201cDemographic.Gender:val-Unknown\u201d = \u201cUnlisted\u201d"]},{"entry":[{},"005 \u2003\u2003\u201cDemographic.Name:name\u201d = \u201cPatient name\u201d"]},{"entry":[{},"006 \u2003\u2003\u201cDiagnosis.Disease.Name:name\u201d = \u201cSickness name\u201d"]},{"entry":[{},"007 \u2003\u2003\u201cDiagnosis:name\u201d = \u201cLikely Illness\u201d"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"As can be seen from lines 002-007, natural language expressions for different definitions of the data abstraction model of Table III are provided, which replace corresponding natural language expressions of the language resource file of Table IV. More specifically, it is assumed that social service group users would need to view the data abstraction model of Table III according to a less technical terminology. Therefore, the natural language expressions shown in Table IX are intended to change the corresponding natural language expressions of Table IV accordingly.","According to the view of Table VIII and the language resource file of Table IX (in combination with the language resource file of Table IV), the effective data abstraction model of Table X below can be generated for users of the social service group and displayed in the user interface . The exemplary data abstraction model of Table X is an example for the effective data abstraction model . For simplicity, only relevant displayed information is illustrated in Table X.",{"@attributes":{"id":"p-0112","num":"0111"},"tables":{"@attributes":{"id":"TABLE-US-00010","num":"00010"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":"TABLE X"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"SOCIAL SERVICE GROUP EFFECTIVE DAM EXAMPLE"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"001 \u2003+---> Demographic: Patient demographic information"]},{"entry":[{},"002 \u2003\u2003+--> Gender"]},{"entry":[{},"003 \u2003\u2003\u2003\u2003\u2003+-->Value: = \u201dGirl\u201d"]},{"entry":[{},"004 \u2003\u2003\u2003\u2003\u2003+-->Value: = \u201dBoy\u201d"]},{"entry":[{},"005 \u2003\u2003\u2003\u2003\u2003+-->Value: = \u201dUnlisted\u201d"]},{"entry":[{},"006 \u2003\u2003\u2003+--> Patient name"]},{"entry":[{},"007 \u2003\u2003\u2003+--> SSN: This is the patient's social security number"]},{"entry":[{},"008 \u2003+---> Likely illness: Patient diagnostic information"]},{"entry":[{},"009 \u2003\u2003+--> Disease"]},{"entry":[{},"010 \u2003\u2003\u2003\u2003\u2003+--> Sickness name"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"As can be seen from Table X, all information of the data abstraction model of Table III has been included for display. Furthermore, lines 003-006, 008 and 010 are displayed according to the natural language expressions of the language resource file of Table IX.","Referring now to , a method  for providing natural language support for users running queries (e.g., abstract query  of ) against a database (e.g., database  of ) is illustrated. In one embodiment, the method  is performed by the NLS manager  of . Method  starts at step .","At step , a data abstraction model (e. g., data abstraction model  of ) including a plurality of logical fields abstractly describing physical data residing in the database is retrieved. Each logical field includes one or more attributes. For each attribute, a corresponding definition that uniquely identifies the attribute can be determined from the data abstraction model. At step , each definition in the data abstraction model is determined and, at step , a corresponding definition\/value mapping is generated in a language resource component (e.g., natural language resource component  of ).","By way of example, for the attribute \u201cName\u201d in line 007 of the exemplary \u201cABC-DAM\u201d of Table III, a definition \u201cDemographic.Name:name\u201d is determined. For the attribute \u201cName\u201d in line 011, a definition \u201cDiagnosis.Disease.Name:name\u201d is determined. Both definitions are mapped to the natural language expression or value \u201cName\u201d according to lines 007 and 011 of the exemplary \u201cABC-DAM\u201d of Table III. Furthermore, both definition\/value mappings are generated in the exemplary \u201cABC-XLIFF\u201d language resource file of Table IV (lines 006 and 011, respectively).","The method  performs a loop consisting of steps  and  until a corresponding definition\/value mapping has been generated in the language resource component for each definition in the data abstraction model. Thus, the language resource component defines a natural language expression for each of the plurality of logical fields. Subsequently, method  proceeds with step .","At step , the data abstraction model is associated with the generated language resource component. For instance, a language resource file definition is included in the data abstraction model, e. g., language resource file definition \u201cABC-XLIFF.xml\u201d in line 013 of the exemplary \u201cABC-DAM\u201d of Table III. Method  then exits at step .","Referring now to , a method  illustrating determination of a language mapping table having suitable natural language expressions to be used for a given user is shown. The mapping table is determined from corresponding language resource components (e. g., language resource components ,  and  of ). By way of example, the method  is explained with reference to language resource files. In one embodiment, the method  is performed by the NLS manager  of . Method  starts at step .","At step , an ordered list of the language resource files for a given data abstraction model is determined. Determination of the ordered list is described in more detail below with reference to .","At step , a determination is made as to whether a corresponding language mapping table for the user already exists. If the corresponding language mapping table already exists, it is assigned to the user in step . Method  then exits at step . If the corresponding language mapping table does not exist, processing continues at step .","At step , a user locale is determined. The user locale defines settings concerning, for example, country, language and a language variant used by the user. For instance, the locale may define the user as a researcher of a research group who uses the English language in the United States. In one embodiment, the locale is determined according to user input including suitable parameters for determination of all required language resource files using a user interface. In another embodiment, the locale is determined according to local user settings on his\/her workstation.","At step , all required language resource files are determined for the user based on the determined user locale. For purposes of illustration, it will be assumed that the language resource files of Tables IV and VI are determined for the researcher.","At step , using the determined language resource files, a language mapping table is generated for the user. To this end, in one embodiment all definition\/value mappings of the least specific language resource file are included in the language mapping table. For instance, all definition\/value mappings of the language resource file of Table IV are initially included in the language mapping table. Subsequently, definition\/value mappings of more specific language resource files are used to replace the less specific definition\/value mappings of less specific language resource files. This process is performed until all definition\/value mappings in the most specific language resource file have been processed. For instance, in the given example, the less specific definition\/value mappings from the language resource file of Table IV are replaced by more specific definition\/value mappings of the language resource file of Table VI. Accordingly, for the researcher of the research group, the exemplary language mapping table according to Table XI below can be generated.",{"@attributes":{"id":"p-0125","num":"0124"},"tables":{"@attributes":{"id":"TABLE-US-00011","num":"00011"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":"TABLE XI"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"MAPPING TABLE EXAMPLE"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"001 \u2003RESEARCH-MAPPING.xml"]},{"entry":[{},"002 \u2003\u2003\u201cDemographic.Gender:name\u201d = \u201cGender\u201d"]},{"entry":[{},"003 \u2003\u2003\u201cDemographic.Gender:val-Female\u201d = \u201cFemale\u201d"]},{"entry":[{},"004 \u2003\u2003\u201cDemographic.Gender:val-Male\u201d = \u201cMale\u201d"]},{"entry":[{},"005 \u2003\u2003\u201cDemographic.Gender:val-Unknown\u201d = \u201cUnknown\u201d"]},{"entry":[{},"006 \u2003\u2003\u201cDemographic.Name:name\u201d = \u201cSubject name\u201d"]},{"entry":[{},"007 \u2003\u2003\u201cDemographic.SSN:description\u201d = \u201cThis is the"]},{"entry":[{},"\u2003\u2002 \u2003\u2003patient's social security number\u201d"]},{"entry":[{},"008 \u2003\u2003\u201cDemographic.SSN:name\u201d = \u201cSSN\u201d"]},{"entry":[{},"009 \u2003\u2003\u201cDemographic:description\u201d = \u201cDemographic\u201d"]},{"entry":[{},"010 \u2003\u2003\u201cDemographic:name\u201d = \u201cDemographic\u201d"]},{"entry":[{},"011 \u2003\u2003\u201cDiagnosis.Disease.Name:name\u201d = \u201cSyndrome name\u201d"]},{"entry":[{},"012 \u2003\u2003\u201cDiagnosis.Disease:name\u201d = \u201cDisease\u201d"]},{"entry":[{},"013 \u2003\u2003\u201cDiagnosis:description\u201d = \u201cDiagnostic information\u201d"]},{"entry":[{},"014 \u2003\u2003\u201cDiagnosis:name\u201d = \u201cDiagnosis\u201d"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"As can be seen from Table XI, the exemplary language mapping table represents a combination of the language resource files of Tables IV and VI. The loading and processing of language resource files using locales for file or resource names for generation of a language mapping table is well-known in the art (e.g., by a Java\u00ae language runtime implementation of resource bundles) and will, therefore, not be described in more detail.","At step , the generated language mapping table is persistently stored in memory for use by all users having the same user locale. For instance, the language mapping table of Table XI is persistently stored for all users of the research group. Thus, each time a research group user loads the effective data abstraction model of the research group, the language mapping table can be used for translation purposes. Processing then continues at step  as described above.","Referring now to , a method  illustrating the determination of the ordered list of the language resource files for a given data abstraction model (e. g., data abstraction model  of ) according to step  of  is shown. In one embodiment, the ordered list is determined for all users of a given group having common group security settings. Method  starts at step .","At step , a language resource file definition is determined from the data abstraction model. For instance, the language resource file definition \u201cABC-XLIFF.xml\u201d can be determined from the exemplary data abstraction model of Table III (line 013). At step , the determined language resource file definition is added on top of the ordered list of language resource files. At step , it is determined whether other data abstraction models exist. If one or more other data abstraction models exist, a next data abstraction model is selected and processing returns to step . Accordingly, steps  to  form a loop which is executed until all data abstraction models have been processed. By way of example, assume that another data abstraction model \u201cDEF-DAM\u201d having a language resource file definition \u201cDEF-XLIFF.xml\u201d exists. Accordingly, the language resource file definition \u201cDEF-XLIFF.xml\u201d is placed on top of the ordered list before the language resource file definition \u201cABC-XLIFF.xml\u201d. When it is determined, at step , that no more data abstraction models exist, processing continues at step .","At step , it is determined whether one or more views on one or more data abstraction models, which have been processed in the loop formed of steps  to , exist. If no view exists, processing continues at step  of . If, however, one or more views exist, a language resource file definition from a first view is determined at step . For instance, the language resource file definition \u201cRESEARCH-XLIFF.xml\u201d can be determined from the exemplary view of Table V (line 005). At step , the determined language resource file definition is added at the end of the ordered list. At step , it is determined whether other views exist. If one or more other views exist, a next view is selected and processing returns to step . Accordingly, steps  to  form a loop which is executed until all views have been processed.","In one embodiment, step  includes determining whether other views exist for a given group of users. For instance, it is determined whether other views exist for the research group users. In the given example no additional views for research group users can be determined, but a view for social service group users can be determined. By way of example, the \u201cSOCIAL-VIEW\u201d of Table VIII includes the language resource file definition \u201cSOCIAL-XLIFF.xml\u201d (line 004). However, in the given example it is assumed that the views of the research group and the social service group have different group security settings and are mutually exclusive. Therefore, the language resource file definition \u201cSOCIAL-XLIFF.xml\u201d is not processed. However, if the views of the research group and the social service group had been construed with common group security settings, the language resource file definition \u201cSOCIAL-XLIFF.xml\u201d would have been placed at the end of the ordered list behind the language resource file definition \u201cRESEARCH-XLIFF.xml\u201d. When it is determined, at step , that no more views exist, processing continues at step  of .","In one embodiment, the loop formed of steps  to  is performed for views of different specificity levels. In other words, after processing a first view at a lowest specificity level, views of higher specificity levels up to views having the highest specificity level can be processed before a next view at the lowest specificity level is processed. It should be noted that identical processing can be performed for the data abstraction models by the loop formed of steps  to .","For instance, assume that a view for a Russian research group having a language resource file definition \u201cRESEARCH-XLIFF_RU.xml\u201d exists. Assume further that a view for a Russian research group of a region BB exists, which requires a more specific terminology and which has a language resource file definition \u201cRESEARCH-XLIFF_RU_BB.xml\u201d. Accordingly, the language resource file definition \u201cRESEARCH-XLIFF_RU.xml\u201d would be processed after the language resource file definition \u201cRESEARCH-XLIFF.xml\u201d, and the language resource file definition \u201cRESEARCH-XLIFF_RU_BB.xml\u201d would be processed at the end. Accordingly, the language resource file definition \u201cRESEARCH-XLIFF_RU_BB.xml\u201d would be placed at the end of the ordered list. The following Table XII exemplifies an ordered list according to the above example.",{"@attributes":{"id":"p-0134","num":"0133"},"tables":{"@attributes":{"id":"TABLE-US-00012","num":"00012"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":"TABLE XII"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"ORDERED LIST EXAMPLE"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"001 \u2003DEF-XLIFF.xml"]},{"entry":[{},"002 \u2003DEF-XLIFF_RU.xml"]},{"entry":[{},"003 \u2003DEF-XLIFF_RU_BB.xml"]},{"entry":[{},"004 \u2003\u2003\u2003ABC-XLIFF.xml"]},{"entry":[{},"005 \u2003\u2003\u2003ABC-XLIFF_RU.xml"]},{"entry":[{},"006 \u2003\u2003\u2003ABC-XLIFF_RU_BB.xml"]},{"entry":[{},"007 \u2003\u2003\u2003RESEARCH-XLIFF.xml"]},{"entry":[{},"008 \u2003\u2003\u2003RESEARCH-XLIFF_RU.xml"]},{"entry":[{},"009 \u2003\u2003\u2003RESEARCH-XLIFF_RU_BB.xml"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"It should be noted that Table XII includes language resource file definitions for the data abstraction models \u201cDEF-DAM\u201d (lines 001-003) and \u201cABC-DAM\u201d (lines 004-006) with specificity levels that correspond to the specificity levels of the \u201cRESEARCH-VIEW\u201d of Table V as explained above. In other words, it is assumed that a general Russian translation (lines 002 and 005) and a more specific Russian translation for a region BB (lines 003 and 006) are also provided for each of the data abstraction models \u201cDEF-DAM\u201d and \u201cABC-DAM\u201d.","Referring now to , one embodiment of a method  of providing natural language support for users running queries (e.g., abstract query  of ) against a database (e.g., database  of ) is illustrated. At least a portion of the steps of method  can be performed by the NLS manager  of . Method  starts at step .","At step , an abstract query (e. g., abstract query  of ) including one or more logical fields, each corresponding to a logical field specification of a data abstraction model (e. g., data abstraction model  of  or data abstraction model  of ) abstractly describing physical data residing in a database (e. g., database  of ) is retrieved. At step , the data abstraction model is determined. This determination can be performed by a database application (e. g., application  of ) that is configured to access the data abstraction model and has corresponding knowledge of which data abstraction model(s) to use. Furthermore, based on security settings for users and user and group information for a corresponding user, applicable views can be determined by the application. At step , it is determined, from the data abstraction model, whether an associated language resource component (e. g., language resource file  of ) exists. If no associated language resource component exists, the method  exits at step . If, however, an associated language resource component exists, processing continues at step .","At step , a corresponding language mapping table is determined for the user. Determination of the language mapping table is performed, in one embodiment, according to the method  of . The method  then enters a loop consisting of steps  and . The loop is performed for each attribute of each logical field of the abstract query to determine a natural language expression for the logical field(s) of the abstract query. More specifically, for each attribute of each logical field, a corresponding definition is determined at step . Then, at step , a corresponding definition\/value mapping is looked up in the language mapping table. When all attributes have been processed, processing continues at step .","At step , the abstract query is displayed in the determined natural language expression. More specifically, each attribute in the abstract query is replaced by a determined value from a corresponding definition\/value mapping from the language mapping table for display. Method  then exits at step .","Referring now to , an exemplary screenshot  illustrating a graphical user interface (GUI) screen  displayed by a suitable user interface (e.g., user interface  of ) for query creation is shown. Illustratively, the GUI screen  displays a panel  for creation of an abstract query (e.g., abstract query  of ) against an underlying database (e.g., database  of ).","As was noted above, in one embodiment a language resource component (e.g., language resource component  of ) for a given data abstraction model (e.g., data abstraction model  of ) can be defined by a language resource file. The language resource file may include default natural language expressions for use in representing attributes of the data abstraction model to the user. In one embodiment, the default natural language expressions can be translated into any foreign languages or variants on a same language such as alternative terminology required by users or groups of users that access the data abstraction model. Furthermore, in one embodiment a given language resource component can be used to translate basic constructs of the underlying database and corresponding user interfaces that are suitable for query creation into a given foreign language, not just user application data. For example, field names used for comparison, comparison operators or database attributes can be automatically translated into the foreign language.","In one embodiment, a suitable language resource file(s) that is used to translate the data abstraction model or a given view is retrieved at startup\/load time. At user login time, user-specific settings for the user are retrieved, such as from a user locale, and which translated resources are used for representing the data abstraction model is determined.","For instance, assume that an underlying user locale defines that a given user of the underlying database uses the Spanish language in the United States. Assume further that a given language resource component is configured to translate all basic constructs of the underlying database and corresponding user interfaces for query creation into the Spanish language. Furthermore, a suitable language resource file translates all attributes of an underlying data abstraction model into the Spanish language. By way of example, assume that the underlying data abstraction model is the exemplary data abstraction model of Table III above. Accordingly, all information shown in the panel  is displayed in the Spanish language.","It should be noted that the panel  illustratively includes a display area  that is configured for specification of a query condition for the abstract query. By way of example, the display area  is used to specify a query condition on the \u201cGender\u201d field of the underlying data abstraction model. Assume now that a translation in the Spanish language is retrieved for all attributes of all logical fields of the exemplary data abstraction model of Table III above in the exemplary language resource file \u201cSPANISH-XLIFF.xml\u201d shown in Table XII below. For simplicity, elements of the \u201cSPANISH-XLIFF.xml\u201d language resource file are represented in a shorthand format. Persons skilled in the art will readily recognize corresponding XML representations. Further, for brevity, only parts that are relevant for the following explanations are shown, i.e., parts relating to the \u201cGender\u201d field of the exemplary data abstraction model of Table III above.",{"@attributes":{"id":"p-0145","num":"0144"},"tables":{"@attributes":{"id":"TABLE-US-00013","num":"00013"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":"TABLE XIII"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"SPANISH-XLIFF FILE EXAMPLE"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"001 \u2003SPANISH-XLIFF.xml"]},{"entry":[{},"002 \u2003\u2003\u201cDemographic.Gender:name\u201d = \u201cG\u00e9nero\u201d"]},{"entry":[{},"003 \u2003\u2003\u201cDemographic.Gender:val-Female\u201d = \u201cHembra\u201d"]},{"entry":[{},"004 \u2003\u2003\u201cDemographic.Gender:val-Male\u201d = \u201cVar\u00f3n\u201d"]},{"entry":[{},"005 \u2003\u2003\u201cDemographic.Gender:val-Unknown\u201d = \u201cDesconocido\u201d"]},{"entry":[{},"006 \u2003\u2003\u201cDemographic.Name:name\u201d = \u201cApellido\u201d"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"The exemplary XLIFF language resource file of Table XIII illustratively includes Spanish expressions for each attribute included in the \u201cGender\u201d field and the \u201cName\u201d field of the exemplary data abstraction model of Table III. More specifically, the exemplary XLIFF language resource file includes in lines 002-005, on the left hand side of each line, a definition for an element (e.g., a logical field name or value) of the \u201cGender\u201d field and, on the right hand side of each line, an associated Spanish expression. Similarly, in line 006 a definition for the logical field name of the \u201cName\u201d field is associated with a corresponding Spanish expression.","In the given example, using the exemplary \u201cSPANISH-XLIFF.xml\u201d file of Table XIII, the display area  displays an indication  of the logical field name \u201cGender\u201d (line 003 of Table III) using the Spanish expression \u201cG\u00e9nero\u201d (line 002 of Table XIII). Furthermore, indications of all alternative values associated with allowed physical values for the \u201cGender\u201d field according to lines 004-006 of Table III are displayed in the display area . Accordingly, an indication  of the value \u201cFemale\u201d (line 004 of Table III) using the Spanish expression \u201cHembra\u201d (line 003 of Table XIII), an indication  of the value \u201cMale\u201d (line 005 of Table III) using the Spanish expression \u201cVar\u00f3n\u201d (line 004 of Table XIII) and an indication  of the value \u201cUnknown\u201d (line 006 of Table III) using the Spanish expression \u201cDesconocido\u201d (line 005of Table XIII) are displayed.","In the display area , the indications ,  and  are each associated with a corresponding user-selectable checkbox ,  and . Illustratively, the checkbox  associated with the indication  \u201cVar\u00f3n\u201d is selected. Furthermore, a comparison operator \u201c=iguales\u201d is selected from a list  of user-selectable operators for definition of the query condition. By activating a pushbutton  \u201cActualizaci\u00f3n\u201d, the user requests creation of the query condition.","Referring now to , the GUI screen  of  is shown after user-activation of the pushbutton  \u201cActualizaci\u00f3n\u201d. Accordingly, the query condition is created and a summary  thereof is shown in a display area  of the panel .","After specification of all query conditions and selection of required result fields, creation of the abstract query is completed. Assume now that the illustrative abstract query shown in Table XIV below is created using the GUI screen  of . By way of illustration, the illustrative abstract query is defined using XML. However, any other language may be used to advantage.",{"@attributes":{"id":"p-0151","num":"0150"},"tables":{"@attributes":{"id":"TABLE-US-00014","num":"00014"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":"TABLE XIV"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"ABSTRACT QUERY EXAMPLE"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"001 \u2003\u2003<?xml version=\u201c1.0\u201d?>"]},{"entry":[{},"002 \u2003\u2003<QueryAbstraction>"]},{"entry":[{},"003 \u2003\u2003\u2003<Selection>"]},{"entry":[{},"004 \u2003\u2003\u2003\u2003<Condition relOperator=\u201cAND\u201d fieldType=\u201cchar\u201d"]},{"entry":[{},"005 \u2003\u2003\u2003\u2003\u2003\u2003\u2003field=\u201cGender\u201d operator=\u201cEQ\u201d> <Value"]},{"entry":[{},"\u2003\u2002 \u2003\u2003\u2003\u2003\u2003\u2003\u2003val=\u201cMale\u201d\/>"]},{"entry":[{},"006 \u2003\u2003\u2003\u2003\u2003\u2003<\/Condition>"]},{"entry":[{},"007 \u2003\u2003\u2003<\/Selection>"]},{"entry":[{},"008 \u2003\u2003\u2003<Results>"]},{"entry":[{},"009 \u2003\u2003\u2003\u2003\u2002<Field name=\u201cName\u201d\/>"]},{"entry":[{},"010 \u2003\u2003\u2003\u2003\u2002<Field name=\u201cGender\u201d\/>"]},{"entry":[{},"011 \u2003\u2003\u2003<\/Results>"]},{"entry":[{},"012 \u2003\u2003<\/QueryAbstraction>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"Illustratively, the abstract query shown in Table XIV includes in lines 003-007 a selection specification containing the query condition that was created using the exemplary GUI screen  of  and in lines 00-011a results specification. By way of example, the results specification in lines 00-011requests name and gender information for patients in a hospital and refers to the \u201cName\u201d field (line 007of Table III) and the \u201cGender\u201d field (line 003of Table III) of the exemplary data abstraction model of Table III above.","It should be noted that all attributes in the exemplary abstract query of Table XIV are defined in the English language, i.e., the default language of the data abstraction model, although the abstract query shown in Table XIV was created using the GUI screen  of  that uses the Spanish language. In fact, in one embodiment abstract queries are only generated in the default language that is defined by the underlying data abstraction model to allow transformation of the abstract query into an executable query using the data abstraction model. As the default language of the exemplary data abstraction model of Table III is English, the exemplary abstract query of Table XIV is generated in English. This allows normalization of generated abstract queries and further allows database administrators, security officers and suitable security monitoring equipment to monitor the generated abstract queries regarding data security.","If the exemplary abstract query of Table XIV is transformed into an executable query that is executed against an underlying database (e.g., database  of ), corresponding physical values are retrieved from the database. In one embodiment, where the underlying database is a multilingual database, the retrieved physical values are defined in different natural languages (e.g., English, Spanish and\/or German). In order to output a corresponding result set on the basis of the retrieved physical values in a selected language (e.g., natural language result set  of ) such as the language of the user (i.e., in the given example Spanish), further processing is required as described by way of example below with reference to .","Referring now to , one embodiment of a method  for generating translation mapping tables (e.g., translation mapping tables  of ) and translation functions (e.g., translation functions  of ) for natural language support in multilingual databases is illustrated. The translation mapping tables and translation functions are generated for logical fields (e.g., logical fields  of ) of one or more underlying data abstraction models (e.g., data abstraction model  of ). The underlying data abstraction model(s) abstractly describes physical data (e.g., data  of ) stored in one or more associated multilingual databases (e.g., database  of ). In one embodiment, the method  is performed by the NLS manager  of .","Method  starts at step . At step , the underlying data abstraction model(s) which provides definitions for a plurality of logical fields is retrieved. For instance, assume that the exemplary data abstraction model of Table II is retrieved. As was noted above, the exemplary data abstraction model of Table II includes a plurality of logical fields including, besides others, a \u201cMaritalStatus\u201d (lines 033-044 of Table II) and a \u201cGender\u201d (lines 045-055 of Table II) field.","At step , at least one logical field having associated translation information is identified from the underlying data abstraction model(s). In one embodiment, the at least one logical field is identified on the basis of an attribute included with the definition of the logical field that is configured to indicate that the logical field has associated translation information. For instance, as noted above the at least one logical field may include a \u201cmultilingual\u201d attribute that is set to \u201cYes\u201d. However, it should be noted that other implementations are possible. By way of example, metadata that is associated with the underlying data abstraction model(s) may indicate logical fields having associated translation information. In this case, the at least one logical field can be identified on the basis of the associated metadata. Accordingly, all such implementations are broadly contemplated.","In the given example, the \u201cGender\u201d (lines 045-055 of Table II) field of the exemplary data abstraction model of Table II is identified at step . As noted above, the \u201cGender\u201d field includes a \u201cmultilingual\u201d attribute (\u201cmultilingual=\u201cYes\u201d) according to line 046 of Table II.","At step , the associated translation information is retrieved. In one embodiment, retrieving the associated translation information includes retrieving one or more natural language resource components (e.g., language resource component  of ) having the associated translation information. For instance, the associated translation information can be included with corresponding XLIFF language resource files as described above. In one embodiment, the associated translation information of the at least one logical field is identified on the basis of an attribute included with the definition of the logical field. For instance, the at least one logical field may include an attribute indicating a location of the associated translation information in an underlying computer system (e.g., computer system  of ). However, it should be noted that other implementations are possible. By way of example, metadata that is associated with the underlying data abstraction model(s) may indicate the location of the associated translation information. In this case, the associated translation information of at least one logical field can be identified on the basis of the associated metadata. Accordingly, all such implementations are broadly contemplated. Processing then proceeds with step .","In one embodiment, a separate XLIFF language resource file is provided with respect to each natural language that is used to define physical values in the underlying multilingual database. Furthermore, a given XLIFF language resource file may include translation information for a plurality of logical fields. The translation information that is associated with a given logical field can be identified from a corresponding XLIFF language resource file using one or more suitable attributes of the given field, such as the field name. In one embodiment, each XLIFF language resource file includes a translated value for each allowable value defined for each of the plurality of logical fields by the underlying data abstraction model(s) and\/or each physical value included with the underlying multilingual database that is associated with one of the plurality of logical fields. All such implementations are broadly contemplated.","Assume that in the given example three XLIFF language resource files each having translation information for the \u201cGender\u201d field are retrieved. Assume further that the retrieved XLIFF language resource files respectively include English, Spanish and German translations for allowable values of the \u201cGender\u201d field. An exemplary XLIFF language resource file for the \u201cGender\u201d field is illustrated by way of example in Table XV below. Assume now that the exemplary language resource file \u201cLanguageConfiguration_es.xml\u201d shown in Table XV below includes the Spanish translation information. For simplicity, elements of the exemplary \u201cLanguageConfiguration_es.xml\u201d language resource file are represented in a shorthand format. Persons skilled in the art will readily recognize corresponding XML representations. Further, for brevity, only parts that are relevant for the following explanations are shown, as explained in more detail below. It is noted that this manner of presentation applies to other tables described below as well.",{"@attributes":{"id":"p-0162","num":"0161"},"tables":{"@attributes":{"id":"TABLE-US-00015","num":"00015"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":"TABLE XV"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"SPANISH XLIFF FILE EXAMPLE"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"001 \u2003LanguageConfiguration_es.xml"},{"entry":"002 \u2003\u2003\u201cBirth, Age and Gender.Gender:val-Female\u201d = \u201cHembra\u201d"},{"entry":"003 \u2003\u2003\u201cBirth, Age and Gender.Gender:val-Male\u201d = \u201cVar\u00f3n\u201d"},{"entry":"004 \u2003\u2003\u201cBirth, Age and Gender.Gender:val-Unknown\u201d = \u201cDesconocido\u201d"},{"entry":"005 \u2003\u2003\u201cBirth, Age and Gender.MaritalStatus:val-Single\u201d = \u201cSolo\u201d"},{"entry":"006 \u2003\u2003\u201cBirth, Age and Gender.MaritalStatus:val-Married\u201d = \u201cCasado\u201d"},{"entry":"007 \u2003\u2003\u201cBirth, Age and Gender.MaritalStatus:val-Divorced\u201d ="},{"entry":"\u2003\u2002 \u2003\u2003\u201cDivorciado\u201d"},{"entry":"008 \u2003\u2003\u201cBirth, Age and Gender.MaritalStatus:val-Widowed\u201d = \u201cViuda\u201d"},{"entry":"009 \u2003\u2003\u201cBirth, Age and Gender.MaritalStatus:Unknown\u201d ="},{"entry":"\u2003\u2002 \u2003\u2003\u201cDesconocido\u201d"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"The exemplary XLIFF language resource file of Table XV illustratively includes Spanish expressions for allowable values defined in the \u201cGender\u201d field of the exemplary data abstraction model of Table II. The exemplary XLIFF language resource file of Table XV further includes Spanish expressions for allowable values defined in the \u201cMaritalStatus\u201d field of the exemplary data abstraction model of Table II. However, in one embodiment the exemplary XLIFF language resource file may include translation information for multiple different logical fields. For instance, translation information for an \u201cAge\u201d field of the underlying data abstraction model(s) that is suitable to translate age classes such as \u201cChild\u201d, \u201cAdolescent\u201d, \u201cAdult\u201d and \u201cSenior\u201d into the Spanish language could be included with the exemplary XLIFF language resource file. All such implementations are broadly contemplated.","It should be noted that the Spanish translations included with the exemplary XLIFF language resource file of Table XV are provided with respect to default language expressions represented in the English language, such as \u201cMale\u201d, \u201cFemale\u201d etc. In one embodiment, these default language expressions are derived from the underlying data abstraction model(s). In other words, as in the given example the default language expressions shown in the exemplary data abstraction model of Table II above are provided in English, the default language expressions in the exemplary XLIFF language resource file are also defined in English. However, the default language expressions used in the underlying data abstraction model(s) may depend on various factors such as the geographic location of a user of the underlying data abstraction model(s). In other words, for a German user residing in Germany, the default language expressions in the underlying data abstraction model(s) can be provided in the German language. Furthermore, the default language expressions used in the XLIFF language resource file may differ from the default language expressions used in the underlying data abstraction model(s). For instance, while the default language expressions can be provided in English as illustrated in the exemplary data abstraction model of Table II above, the default language expressions used in the XLIFF language resource file can be provided in German for a German user residing in Germany. All such implementations are broadly contemplated.","In the given example, English translation information is included with the exemplary language resource file \u201cLanguageConfiguration_en.xml\u201d shown in Table XVI below. For brevity, the English translation information is also provided with respect to the default language expressions shown in Table XV above which are defined in English.",{"@attributes":{"id":"p-0166","num":"0165"},"tables":{"@attributes":{"id":"TABLE-US-00016","num":"00016"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":"TABLE XVI"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"ENGLISH XLIFF FILE EXAMPLE"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"001 \u2003LanguageConfiguration_en.xml"},{"entry":"002 \u2003\u2003\u201cBirth, Age and Gender.Gender:val-Female\u201d = \u201cFemale\u201d"},{"entry":"003 \u2003\u2003\u201cBirth, Age and Gender.Gender:val-Male\u201d = \u201cMale\u201d"},{"entry":"004 \u2003\u2003\u201cBirth, Age and Gender.Gender:val-Unknown\u201d = \u201cUnknown\u201d"},{"entry":"005 \u2003\u2003\u201cBirth, Age and Gender.MaritalStatus:val-Single\u201d = \u201cSingle\u201d"},{"entry":"006 \u2003\u2003\u201cBirth, Age and Gender.MaritalStatus:val-Married\u201d = \u201cMarried\u201d"},{"entry":"007 \u2003\u2003\u201cBirth, Age and Gender.MaritalStatus:val-Divorced\u201d ="},{"entry":"\u2003\u2002 \u2003\u2003\u201cDivorced\u201d"},{"entry":"008 \u2003\u2003\u201cBirth, Age and Gender.MaritalStatus:val-Widowed\u201d ="},{"entry":"\u2003\u2002 \u2003\u2003\u201cWidowed\u201d"},{"entry":"009 \u2003\u2003\u201cBirth, Age and Gender.MaritalStatus:Unknown\u201d =\u201c Unknown\u201d"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"Finally, the German translation information mentioned above is included in the given example with the exemplary language resource file \u201cLanguageConfiguration_de.xml\u201d shown in Table XVII below. For brevity, the German translation information is also provided for the default language expressions defined in the English language as shown in Table XV above.",{"@attributes":{"id":"p-0168","num":"0167"},"tables":{"@attributes":{"id":"TABLE-US-00017","num":"00017"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":"TABLE XVII"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"GERMAN XLIFF FILE EXAMPLE"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"0pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["001 \u2003LanguageConfiguration_de.xml",{}]},{"entry":"002 \u2003\u2003\u201cBirth, Age and Gender.Gender:val-Female\u201d = \u201cWeiblich\u201d"},{"entry":"003 \u2003\u2003\u201cBirth, Age and Gender.Gender:val-Male\u201d = \u201cM\u00e4nnlich\u201d"},{"entry":"004 \u2003\u2003\u201cBirth, Age and Gender.Gender:val-Unknown\u201d = \u201cUnbekannt\u201d"},{"entry":"005 \u2003\u2003\u201cBirth, Age and Gender.MaritalStatus:val-Single\u201d = \u201cLedig\u201d"},{"entry":"006 \u2003\u2003\u201cBirth, Age and Gender.MaritalStatus:val-Married\u201d ="},{"entry":"\u2003\u2002 \u2003\u2003\u201cVerheiratet\u201d"},{"entry":"007 \u2003\u2003\u201cBirth, Age and Gender.MaritalStatus:val-Divorced\u201d ="},{"entry":"\u2003\u2002 \u2003\u2003\u201cGeschieden\u201d"},{"entry":"008 \u2003\u2003\u201cBirth, Age and Gender.MaritalStatus:val-Widowed\u201d ="},{"entry":"\u2003\u2002 \u2003\u2003\u201cVerwitwet\u201d"},{"entry":"009 \u2003\u2003\u201cBirth, Age and Gender.MaritalStatus:Unknown\u201d =\u201c Unbekannt\u201d"},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"In one embodiment, step  is performed instead of steps  and . At step , one or more natural language resource components (e.g., natural language resource component  of ) having translation information for one or more identified logical fields of the underlying data abstraction model(s) are retrieved. For instance, all XLIFF language resource files associated with the underlying data abstraction model(s) are retrieved. On the basis of the retrieved natural language resource component(s), the logical fields having associated translation information can be identified. Processing then proceeds with step .","For instance, assume that in the given example the exemplary XLIFF files of Tables XV-XVII are retrieved. On the basis of the exemplary XLIFF files of Tables XV-XVII, it can be determined that the \u201cGender\u201d field (lines 045-055 of Table II) has associated translation information included with lines 002-004 of Tables XV-XVII. Furthermore, the \u201cMaritalStatus\u201d field (lines 033-044 of Table II) has associated translation information included with lines 005-009 of Tables XV-XVII.","As noted above, in one embodiment step  is performed instead of steps  and . In this case, step  is performed to retrieve translation information for all logical fields of the underlying data abstraction model(s) which have associated translation information. However, step  can alternatively be performed asynchronously, i.e., in parallel to steps  and . In this case, step  is performed to retrieve translation information for all logical fields that do not include suitable attributes indicating that the fields have associated translation information. Steps  and  are in this embodiment performed to retrieve the logical fields having such attributes, as described above. For instance, as noted above the \u201cMaritalStatus\u201d field (lines 033-044 of the exemplary data abstraction model of Table II) illustratively does not include a \u201cMultilingual\u201d attribute while the \u201cGender\u201d field does include such an attribute. Accordingly, the \u201cGender\u201d field is identified using steps  and  and the \u201cMaritalStatus\u201d field using step , as described above. Still alternatively, step  can be performed after execution of steps  and . In this case, step  can be used to confirm whether all logical fields of the underlying data abstraction model(s) that have associated translation information were correctly identified. All such different implementations are broadly contemplated.","In one embodiment, the XLIFF language resource files are retrieved from storage (e.g., storage  of ). However, at least a portion of the retrieved XLIFF language resource files can be generated when required, e.g., at startup time of a corresponding database session. For instance, when the user initially opens the GUI screen  of  for query creation, a database session is initiated and the at least one portion of the XLIFF language resource files is generated. To this end, the underlying multilingual database is parsed to identify all natural language expressions of physical values included with the multilingual database. For instance, assume that in the given example the underlying multilingual database includes a \u201ccontact\u201d table that is abstractly described by the exemplary data abstraction model of Table II. Assume further that the \u201ccontact\u201d table has information about patients of hospitals in the United States, Mexico and Germany. An exemplary \u201ccontact\u201d table is illustrated in Table XVIII below.",{"@attributes":{"id":"p-0173","num":"0172"},"tables":{"@attributes":{"id":"TABLE-US-00018","num":"00018"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE XVIII"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"CONTACT TABLE EXAMPLE"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"49pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"I_name","encoding","gender","m_status"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"49pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["001",{},{},{},{}]},{"entry":["002","Miller","en","Male","Married"]},{"entry":["003","P\u00e9ron","es","Hembra","Casado"]},{"entry":["004","Schneider","de","M\u00e4nnlich","Verwitwet"]},{"entry":["005","Gonzalez","es","Varon","Solo"]},{"entry":["006","Meier","de","Weiblich","Ledig"]},{"entry":["007","Sanchez","es","Desconocido","Desconocido"]},{"entry":["008","Stewart","en","Male","Single"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}}]}}},"As can be seen from line 001 of Table XVIII, the exemplary \u201ccontact\u201d table includes last names (\u201cI_name\u201d), gender (\u201cgender\u201d) and marital status (\u201cm_status\u201d) information of the patients. In lines 002-008 data records related to different patients are illustrated. The exemplary \u201ccontact\u201d table further includes an \u201cencoding\u201d column (line 001) that is suitable to identify the hospital where a given patient is treated. Illustratively, the \u201cencoding\u201d column includes the value \u201cen\u201d (lines 002 and 008) for patients of the American hospital, \u201ces\u201d (lines 003, 005 and 007) for patients of the Mexican hospital and \u201cde\u201d (lines 004 and 006) for patients of the German hospital. However, note that the \u201cencoding\u201d column is merely provided for purposes of illustration and not limiting of the invention. Instead, other information such as a source system identifier, a clinic or hospital number and\/or a geographic location could be used in real life applications instead of the \u201cencoding\u201d information to indicate where a given data record is coming from. All such different implementations are broadly contemplated.","Note that the \u201cgender\u201d and \u201cm_status\u201d columns of the exemplary \u201ccontact\u201d table of Table XVIII include physical values that are defined in different natural languages. Accordingly, in one embodiment these physical values can be retrieved and included as translated values with corresponding default language expressions into a corresponding XLIFF language resource file. By way of example, the corresponding default language expressions can be retrieved from a list definition of allowable values for an associated logical field in the underlying data abstraction model. For instance, using suitable machine translation services or other translation facilities, it can be determined that the \u201cgender\u201d value \u201cHembra\u201d in line 003 of Table XVIII is the Spanish translation of the allowable value \u201cFemale\u201d of the \u201cGender\u201d field in line  of Table II. Thus, the data record in line 002 of Table XV can be created. However, other implementations for creation of the XLIFF language resource files are also possible. For instance, only suitable machine translation services can be used to provide a translation for the \u201cHembra\u201d value in the exemplary XLIFF language resource file. All such different implementations are broadly contemplated.","At step , a loop consisting of steps  to  is entered for each identified logical field of the underlying data abstraction model(s) that has associated translation information. As in the given example only the \u201cGender\u201d and \u201cMaritalStatus\u201d fields have associated translation information, assume now that the loop consisting of steps  to  is initially entered for the \u201cGender\u201d field.","At step , an empty translation mapping table is created for the identified logical field. Then, at step  mapping table contributions are created for the logical field in the empty translation mapping table using the retrieved translation information. More specifically, translated values for allowable values of the logical field and\/or physical values that are retrieved from the underlying multilingual database for the logical field are included with the empty translation mapping table, whereby a translation mapping table is created for the logical field.","In the given example, assume that an empty \u201cGender-Info\u201d table is created at step  for the \u201cGender\u201d field (lines 045-055 of Table II). Then, at step  all translated values related to the \u201cGender\u201d field are retrieved from the exemplary XLIFF files of Tables XV-XVII. The retrieved translated values are included with the empty \u201cGender-Info\u201d table. Thus, a translation mapping table having translated values for physical values of the \u201cgender\u201d column in the exemplary \u201ccontact\u201d table of Table XVIII above is created. An exemplary \u201cGender-Info\u201d table is illustrated in Table XIX below.",{"@attributes":{"id":"p-0179","num":"0178"},"tables":{"@attributes":{"id":"TABLE-US-00019","num":"00019"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE XIX"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"GENDER-INFO TABLE EXAMPLE"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"77pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"77pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"ID","encoding","alternative_value"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"77pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"77pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["001",{},{},{}]},{"entry":["002","0","en","Unknown"]},{"entry":["003","1","en","Male"]},{"entry":["004","2","en","Female"]},{"entry":["005","0","es","Desconocido"]},{"entry":["006","1","es","Var\u00f3n"]},{"entry":["007","2","es","Hembra"]},{"entry":["008","0","de","Unbekannt"]},{"entry":["009","1","de","M\u00e4nnlich"]},{"entry":["010","2","de","Weiblich"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}}]}}},"As can be seen from of Table XIX, an \u201calternative_value\u201d column (line 001) includes for the \u201cGender\u201d field in lines 002-004 translated values in the English language, in lines 005-007 in the Spanish language and in lines 008-010 in the German language. Note by way of example that the translated values in the Spanish language in lines 005-007 correspond to the translated values in lines 002-004 of the exemplary Spanish XLIFF language resource file of Table XV.","At step , a translation function is created for the logical field. In the given example, a translation function is created at step  for the \u201cGender\u201d field (lines 045-055 of Table II). An exemplary illustrative translation function associated with the \u201cGender\u201d field is shown in Table XX below.",{"@attributes":{"id":"p-0182","num":"0181"},"tables":{"@attributes":{"id":"TABLE-US-00020","num":"00020"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":"TABLE XX"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"TRANSLATION FUNCTION EXAMPLE"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"001 \u2003translateGender (input desiredUserLocale, input EncodingValue,"},{"entry":"002 \u2003\u2003\u2003\u2003\u2003input ColumnValue) {"},{"entry":"003 \u2003\u2003\u2003select target_language.alternative_value"},{"entry":"004 \u2003\u2003\u2003from Gender-Info source_language"},{"entry":"005 \u2003\u2003\u2003\u2003left join Gender-Info target_language"},{"entry":"006 \u2003\u2003\u2003\u2003on source_language.id=target_language.id"},{"entry":"007 \u2003\u2003\u2003where"},{"entry":"008 \u2003\u2003\u2003\u2003source_language.encoding=EncodingValue and"},{"entry":"009 \u2003\u2003\u2003\u2003source_language.value=ColumnValue and"},{"entry":"010 \u2003\u2003\u2003\u2003target_language.encoding=desiredUserLocale"},{"entry":"011 \u2003\u2003\u2003return results.alternative_value"},{"entry":"012 \u2003}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"Illustratively, the exemplary translation function shown in Table XX is invoked using the function name \u201ctranslateGender\u201d in line 001. However, the exemplary translation function shown in Table XX itself does not include translation information. Instead, the exemplary translation function shown in Table XX retrieves required translation information from an associated translation mapping table. More specifically, the exemplary translation function of Table XX illustratively defines a SQL query in lines 003-010 that queries the exemplary \u201cGender-Info\u201d table of Table XIX (lines 004-005 of Table XX). The exemplary \u201cGender-Info\u201d table of Table XIX is queried for a given physical value (\u201csource_language.value=ColumnValue\u201d in lines 001 and 009) defined in a given natural language (\u201csource_language.encoding=EncodingValue\u201d in lines 001 and 008) to retrieve from the translated values a required alternative_value (\u201ctarget_language.alternative_value\u201d in line 003) in a selected language (\u201ctarget_language.encoding=desiredUserLocale\u201d in lines 001 and 010). The retrieved alternative_value is returned as output (\u201creturn results.alternative_value\u201d in line 011).","Processing then returns to step , where the loop consisting of steps - is performed for a next identified logical field. Assume now that in the given example the loop is subsequently performed for the \u201cMaritalStatus\u201d field. Thus, a translation mapping table having translated values for physical values of the \u201cm_status\u201d column in the exemplary \u201ccontact\u201d table of Table XVIII above is created at steps  and . An exemplary \u201cMaritalStatus-Info\u201d table is illustrated in Table XXI below.",{"@attributes":{"id":"p-0185","num":"0184"},"tables":{"@attributes":{"id":"TABLE-US-00021","num":"00021"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE XXI"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"MARITALSTATUS-INFO TABLE EXAMPLE"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"77pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"63pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"ID","encoding","value"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"77pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"63pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["001",{},{},{}]},{"entry":["002","0","en","Unknown"]},{"entry":["003","1","en","Single"]},{"entry":["004","2","en","Married"]},{"entry":["005","3","en","Divorced"]},{"entry":["006","4","en","Widowed"]},{"entry":["007","0","es","Desconocido"]},{"entry":["008","1","es","Solo"]},{"entry":["009","2","es","Casado"]},{"entry":["010","3","es","Divorciado"]},{"entry":["011","4","es","Viuda"]},{"entry":["012","0","de","Unbekannt"]},{"entry":["013","1","de","Ledig"]},{"entry":["014","2","de","Verheiratet"]},{"entry":["015","3","de","Geschieden"]},{"entry":["016","4","de","Verwitwet"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}}]}}},"As can be seen from Table XXI, lines 002-006 include translated values in the English language, lines 007-011 in the Spanish language and lines 012-016 in the German language. Note by way of example that the translated values in the Spanish language in lines 007-011 correspond to the translated values in lines 005-009 of the exemplary Spanish XLIFF language resource file of Table XV.","Assume further that an associated translation function is then created for the \u201cMaritalStatus\u201d field at step . An exemplary illustrative translation function associated with the \u201cMaritalStatus\u201d field is shown in Table XXII below.",{"@attributes":{"id":"p-0188","num":"0187"},"tables":{"@attributes":{"id":"TABLE-US-00022","num":"00022"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":"TABLE XXII"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"TRANSLATION FUNCTION EXAMPLE"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"001 \u2003translateMaritalStatus (input desiredUserLocale,"]},{"entry":[{},"\u2003\u2002\u2003input EncodingValue,"]},{"entry":[{},"002 \u2003\u2003\u2003\u2003\u2003input ColumnValue) {"]},{"entry":[{},"003 \u2003\u2003\u2003select target_language.alternative_value"]},{"entry":[{},"004 \u2003\u2003\u2003from MaritalStatus-Info source_language"]},{"entry":[{},"005 \u2003\u2003\u2003\u2003left join MaritalStatus-Info target_language"]},{"entry":[{},"006 \u2003\u2003\u2003\u2003on source_language.id=target_language.id"]},{"entry":[{},"007 \u2003\u2003\u2003where"]},{"entry":[{},"008 \u2003\u2003\u2003\u2003source_language.encoding=EncodingValue and"]},{"entry":[{},"009 \u2003\u2003\u2003\u2003source_language.value=ColumnValue and"]},{"entry":[{},"010 \u2003\u2003\u2003\u2003target_language.encoding=desiredUserLocale"]},{"entry":[{},"011 \u2003\u2003\u2003return results.alternative_value"]},{"entry":[{},"012 \u2003}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"Note that the exemplary translation function shown in Table XXII accesses the exemplary \u201cMaritalStatus-Info\u201d table of Table XXI (lines 004-005). However, the exemplary translation function shown in Table XXII is otherwise similar to the exemplary translation function shown in Table XX above and, thus, not explained in more detail for brevity.","When the loop consisting of steps - was performed for each identified logical field, processing exits at step . In the given example, as only the \u201cGender\u201d and \u201cMaritalStatus\u201d fields were identified, processing exits at step  after creation of the exemplary translation function of Table XXII above.","It should be noted that in the illustrated example two separate translation mapping tables (i.e., the \u201cGender-Info\u201d table of Table XX and the \u201cMaritalStatus-Info\u201d table of Table XXII) were created. However, in one embodiment only a single translation mapping table is created for all identified logical fields. For instance, in the given example the \u201cGender-Info\u201d and \u201cMaritalStatus-Info\u201d tables can be combined into a single \u201cTranslation-Info\u201d table. In this case, a single translation function accessing the single \u201cTranslation-Info\u201d table can be provided for all identified logical fields. However, if a single translation mapping table is used, each mapping table contribution having a translated value in a given language needs to be identified with a unique identifier. By way of example, in the given example the identifier \u201c1\u201d of the translated value \u201cSingle\u201d in line 003 of Table XXI needs to be modified to another value such as, e.g., \u201c11\u201d to avoid confusion with the translated value \u201cMale\u201d in line 003 of Table XIX having also the identifier \u201c1\u201d.","Referring now to , one embodiment of a method  of providing natural language support for users running queries against a multilingual database (e.g., database  of ) is illustrated. At least a portion of the steps of method  can be performed by the runtime component  and\/or the NLS manager  of . Method  starts at step .","At step , an abstract query (e.g., abstract query  of ) including one or more result and\/or query condition fields, each corresponding to a logical field of an underlying data abstraction model (e.g., data abstraction model  of ), is received. In one embodiment, at least one result field included with the abstract query has associated translation information. By way of example, assume that the exemplary abstract query of Table XXIII below is received at step . For simplicity, the exemplary abstract query shown in Table XXIII is defined in natural language.",{"@attributes":{"id":"p-0194","num":"0193"},"tables":{"@attributes":{"id":"TABLE-US-00023","num":"00023"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":"TABLE XXIII"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"ABSTRACT QUERY EXAMPLE"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"001 \u2003\u2003FIND"]},{"entry":[{},"002 \u2003\u2003\u2003LastName, Gender, MaritalStatus"]},{"entry":[{},"003 \u2003\u2003WHERE"]},{"entry":[{},"004 \u2003\u2003\u2003MaritalStatus = \u2019Single\u2019"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"The exemplary abstract query of Table XXIII includes three result fields (line 002) and is configured to retrieve last names (\u201cLastName\u201d in line 002), gender information (\u201cGender\u201d in line 002) and marital status information (\u201cMaritalStatus\u201d in line 002) for patients from the multilingual database. The exemplary abstract query of Table XXIII further includes a query condition (line 004) that restricts returned data to data of patients having the marital status \u201cSingle\u201d. It should be noted that the exemplary abstract query shown in Table XXIII includes the result and query condition fields \u201cMarital Status\u201d (lines 002-004) and the result field \u201cGender\u201d (line 002) which refer to the \u201cMarital Status\u201d and \u201cGender\u201d fields of the exemplary data abstraction model of Table II (lines 033-044 and 045-055 of Table II, respectively) and have associated translation information, as described above with reference to Tables XIX and XXI.","Assume now that the exemplary abstract query of Table XXIII is issued by a user using the user interface  of . Assume further that the user is an English speaking user, i.e., a user having a user locale that defines as encoding value \u201cen\u201d. Accordingly, a corresponding query result (e.g., natural language result set  of ) should be presented to the user in the English language.","At step , an executable query is generated on the basis of the received abstract query. One embodiment of generating an executable query on the basis of an abstract query including at least one result field having associated translation information is described in more detail below with reference to .","Assume now that in the given example the exemplary executable query of Table XXIV below is generated on the basis of the exemplary abstract query of Table XXIII. By way of illustration, the illustrative executable query is defined using SQL. However, any other language such as XML may be used to advantage.",{"@attributes":{"id":"p-0199","num":"0198"},"tables":{"@attributes":{"id":"TABLE-US-00024","num":"00024"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":"TABLE XXIV"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"EXECUTABLE QUERY EXAMPLE"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"001 \u2003SELECT DISTINCT"},{"entry":"002 \u2003\u2003\u2003\u201ct1\u201d.\u201cI_name\u201d AS \u201cLastName\u201d,"},{"entry":"003 \u2003\u2003\u2003\u201cfunctions\u201d.\u201ctranslateGender\u201d(\u2018en\u2019, \u201ct1\u201d.\u201cencoding\u201d,"},{"entry":"\u2003\u2003\u2003\u2003\u2002\u201ct1\u201d.\u201cgender\u201d)"},{"entry":"004 \u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003AS \u201cGender\u201d,"},{"entry":"005 \u2003\u2003\u2003\u201cfunctions\u201d.\u201ctranslateMaritalStatus\u201d(\u2018en\u2019, \u201ct1\u201d.\u201cencoding\u201d,"},{"entry":"\u2002\u2003\u2003\u2003\u2003\u201ct1\u201d.\u201cm_status\u201d)"},{"entry":"006 \u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003AS \u201cMaritalStatus\u201d"},{"entry":"007 \u2003FROM"},{"entry":"008 \u2003\u2003\u2003\u201ccontact\u201d \u201ct1\u201d"},{"entry":"009 \u2003WHERE"},{"entry":"010 \u2003\u2003\u2003\u201cfunctions\u201d.\u201ctranslateMaritalStatus\u201d(\u2018en\u2019, \u201ct1\u201d.\u201cencoding\u201d,"},{"entry":"\u2002\u2003\u2003\u2003\u2003\u201ct1\u201d.\u201cm_status\u201d)"},{"entry":"011 \u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003= \u2018Single\u2019"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"Illustratively, the exemplary executable query of Table XXIV includes a results specification in lines 001-006 requesting data from a \u201cI_name\u201d column (line 002), a \u201cgender\u201d column (lines 003-004) and a \u201cm_status\u201d column (lines 005-006) of the exemplary database table \u201ccontact\u201d of Table XVIII (line 008). Furthermore, according to the query condition in lines 010-011 of Table XXIV, only data for patients having a marital status of \u201cSingle\u201d should be returned for the query.","It should be noted that in the exemplary executable query of Table XXIV the \u201cGender\u201d result field (lines 003-004 of Table XXIV) includes a function call (\u201cfunctions\u201d.\u201ctranslateGender\u201d) for the exemplary translation function \u201cTranslateGender\u201d of Table XX above. Furthermore, the \u201cMaritalStatus\u201d result and condition fields (lines 005-006 and 010-011 of Table XXIV) include a function call for the exemplary translation function \u201cTranslateMaritalStatus\u201d of Table XXII above.","At step , the executable query is executed against the underlying multilingual database to retrieve data for a corresponding result set. To this end, the executable query is executed to retrieve physical values defined in one or more different natural languages from the multilingual database. In the given example, the exemplary executable query of Table XXIV is executed against the exemplary \u201ccontact\u201d table of Table XVIII.","In one embodiment, user-specific settings associated with the user issuing the query are identified when executing the executable query or prior to query execution. From the identified user-specific settings, the selected language of the user can be identified. For instance, the user-specific settings may define a role of the user; a language setting of the user, a view of the multilingual database defined for the user and\/or other user-specific parameters. In the given example, the language setting can be configured to allow identification of the selected language of the user.","At step , each translation function is executed on data retrieved for result and\/or condition fields having corresponding function calls. In other words, in the given example the exemplary translation function \u201cTranslateGender\u201d of Table XX above is executed for all gender information retrieved from the \u201cgender\u201d column of the exemplary \u201ccontact\u201d table of Table XVIII. Furthermore, the exemplary translation function \u201cTranslateMaritalStatus\u201d of Table XXII above is executed for all marital status information retrieved from the \u201cm_status\u201d column of the exemplary \u201ccontact\u201d table of Table XVIII.","At step , at least one data structure mapping at least a portion of the identified physical values to translated values defined in a selected language is identified from the executed translation function(s). In the given example, the exemplary \u201cGender-Info\u201d table of Table XIX is identified from the exemplary translation function \u201cTranslateGender\u201d of Table XX. Furthermore, the exemplary \u201cMaritalStatus-Info\u201d table of Table XXI is identified from the exemplary translation function \u201cTranslateMaritalStatus\u201d of Table XXII.","The identified data structure(s) is (are) accessed to retrieve the translated values related to the identified physical values in the selected language. The retrieved translated values of all identified data structures define the alternative values defined in the selected language. More specifically, in the given example all physical values retrieved from the \u201cgender\u201d column of the exemplary \u201ccontact\u201d table of Table XVIII for patients having the marital status \u201cSingle\u201d are translated into alternative values in the English language using the exemplary \u201cGender-Info\u201d table of Table XIX, as explained in more detail below with reference to Table XXV. Furthermore, all physical values retrieved from the \u201cm_status\u201d column of the exemplary \u201ccontact\u201d table of Table XVIII are translated into alternative values in the English language using the exemplary \u201cMaritalStatus-Info\u201d table of Table XXI.","At step , a corresponding result set (e. g., natural language result set  of ) having the retrieved alternative values in the selected language is returned. Assume that in the given example the exemplary result set of Table XXV below, which is defined in the English language according to the user locale \u201cen\u201d of the user, is returned to the user.",{"@attributes":{"id":"p-0208","num":"0207"},"tables":{"@attributes":{"id":"TABLE-US-00025","num":"00025"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE XXV"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"RESULT SET EXAMPLE"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"63pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["001","LastName","Gender","MaritalStatus"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}},{"entry":["002","Gonzalez","Male","Single"]},{"entry":["003","Meier","Female","Single"]},{"entry":["004","Stewart","Male","Single"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}}]}}},"As can be seen from Table XXV, the exemplary result set includes three data records in lines 002-004 having last names (\u201cLastName\u201d), gender (\u201cGender\u201d) and marital status (\u201cMaritalStatus\u201d) information. The data records in lines 002-004 correspond to the data records in lines 00, 006and 008of the exemplary \u201ccontact\u201d table of Table XVIII above.","Note that the gender and marital status information is only presented in the English language. For instance, when the data record in lines 005of the exemplary \u201ccontact\u201d table of Table XVIII is accessed at query execution runtime to determine whether this data record should be included with the exemplary result set of Table XXV, it is initially determined whether this data record satisfies the query condition in lines 01-011of Table XXIV. To this end, the marital status value \u201cSolo\u201d and the encoding value \u201ces\u201d are retrieved from line 005of the exemplary \u201ccontact\u201d table of Table XVIII and input together with the user locale \u201cen\u201d to the exemplary translation function \u201cTranslateMaritalStatus\u201d of Table XXII. As noted above, the exemplary translation function \u201cTranslateMaritalStatus\u201d of Table XXII accesses the exemplary \u201cMaritalStatus-Info\u201d table of Table XXI and then retrieves the identifier \u201c1\u201d from line 008of Table XXI using the marital status value \u201cSolo\u201d and the encoding value \u201ces\u201d. Then, using the identifier \u201c1\u201d and the user locale \u201cen\u201d, the exemplary translation function \u201cTranslateMaritalStatus\u201d of Table XXII identifies as alternative value the translated value \u201cSingle\u201d from line 003of Table XXI. Similarly, each alternative value presented in the exemplary result set of Table XXV is retrieved.","At step , the corresponding result set having at least a portion of the physical values retrieved from the multilingual database translated into the selected language is output. In the given example, the exemplary result set of Table XXV is output to the user. Processing then exits at step .","Referring now to , one embodiment of a method  for generating an executable query from an abstract query (e.g., abstract query  of ) according to step  of  is illustrated. At least a portion of the steps of method  can be performed by the runtime component  and\/or the NLS manager  of .","Method  starts at step , where the abstract query is transformed into an executable query. In one embodiment, the abstract query is transformed into the executable query according to method  of  and method  of  as described above.","At step , each result and\/or query condition field in the abstract query that has associated translation information is identified as described above with reference to . In the given example, the fields \u201cGender\u201d and \u201cMaritalStatus\u201d are identified. Furthermore, each query contribution of an identified field is retrieved from the executable query.","At step , each retrieved query contribution from the executable query is associated with a function call for a corresponding translation function. For instance, in the given example the \u201cGender\u201d field contribution in the executable query is associated with a function call for the exemplary \u201cTranslateGender\u201d translation function of Table XX and the \u201cMaritalStatus\u201d field contribution in the executable query is associated with a function call for the exemplary translation function \u201cTranslateMaritalStatus\u201d of Table XXII. In one embodiment, each required translation function can be identified on the basis of corresponding logical field names of the identified fields.","At step , input parameters required for each associated function call are determined. For instance, in the given example the input parameters \u2018en\u2019, \u201ct1\u201d.\u201cencoding\u201d and \u201ct1\u201d.\u201cgender\u201d are determined for the function call for the exemplary \u201cTranslateGender\u201d translation function of Table XX. The input parameters \u2018en\u2019, \u201ct1\u201d.\u201cencoding\u201d and \u201ct1\u201d.\u201cm_status\u201d are determined for the function call for the exemplary \u201cTranslateMaritalStatus\u201d translation function of Table XXII.","At step , the determined parameters are included with the associated function calls in the executable query. Thereby, the exemplary executable query of Table XXIV above is generated in the given example. Processing then continues at step  of .","Note that the method  of  is merely described by way of example to illustrate one embodiment of a method for generating an executable query from an abstract query according to step  of . However, other implementations are possible. For instance, in one embodiment steps  to  can be implemented as integral part of the method  of  or the method  of . Accordingly, all such different implementations are broadly contemplated.","It should be noted that any reference herein to particular values, definitions, programming languages and examples is merely for purposes of illustration. Accordingly, the invention is not limited by any particular illustrations and examples. Furthermore, while the foregoing is directed to embodiments of the present invention, other and further embodiments of the invention may be devised without departing from the basic scope thereof, and the scope thereof is determined by the claims that follow."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["So that the manner in which the above recited features, advantages and objects of the present invention are attained and can be understood in detail, a more particular description of the invention, briefly summarized above, may be had by reference to the embodiments thereof which are illustrated in the appended drawings.","It is to be noted, however, that the appended drawings illustrate only typical embodiments of this invention and are therefore not to be considered limiting of its scope, for the invention may admit to other equally effective embodiments.",{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIGS. 3A-C"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIGS. 4-5"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIGS. 7-9"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIGS. 11-12"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 13"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 14"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 15"}]},"DETDESC":[{},{}]}
