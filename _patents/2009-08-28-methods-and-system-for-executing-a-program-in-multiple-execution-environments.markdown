---
title: Methods and system for executing a program in multiple execution environments
abstract: A system and methods are disclosed for executing a technical computing program in parallel in multiple execution environments. A program is invoked for execution in a first execution environment and from the invocation the program is executed in the first execution environment and one or more additional execution environments to provide for parallel execution of the program. New constructs in a technical computing programming language are disclosed for parallel programming of a technical computing program for execution in multiple execution environments. It is also further disclosed a system and method for changing the mode of operation of an execution environment from a sequential mode to a parallel mode of operation and vice-versa.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08924929&OS=08924929&RS=08924929
owner: The MathWorks, Inc.
number: 08924929
owner_city: Natick
owner_country: US
publication_date: 20090828
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["RELATED APPLICATIONS","TECHNICAL FIELD","BACKGROUND INFORMATION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION"],"p":["This application is a divisional application of U.S. application Ser. No. 10\/940,152 filed Sep. 13, 2004. The content of the aforementioned application is hereby incorporated by reference.","A portion of the disclosure of this patent document contains material which is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure, as it appears in the Patent and Trademark Office patent file or records, but otherwise reserves all copyright rights whatsoever.","The present invention generally relates to technical computing, and, more particularly, the execution of a computer program in parallel in multiple execution environments.","MATLAB\u00ae is a product of The MathWorks, Inc. of Natick, Mass., which provides engineers, scientists, mathematicians, and educators across a diverse range of industries with an environment for technical computing applications. MATLAB\u00ae is an intuitive high performance language and technical computing environment that provides mathematical and graphical tools for mathematical computation, data analysis, visualization and algorithm development. As a desktop application, MATLAB\u00ae typically runs on a single computer and serially executes technical computer programs. However, a single computer executing a program sequentially can be limiting as to the size and the type of the problem that can be solved. For example, some complex and data intensive problems are too large to fit in the memory space of a single computer. In another example, a complex and data intensive problem may take an unreasonable amount of time to run on a single computer.","With the availability of more cost effective parallel computers, such as Beowolf clusters, researchers and scientists are interested in parallel computing in a technical computing environment such as MATLAB\u00ae. However, the use of low level parallel programming paradigms is difficult even for the more advanced users. Such parallel programming paradigms require extensive message passing between computing environments to coordinate and control parallel computing activities. Less advanced users who are well versed in the user friendly technical computing programming language of MATLAB\u00ae may find it challenging to design and develop technical computing programs for parallel processing.","With many engineering and scientific problems requiring larger and more complex modeling that would benefit from parallel computing, it is desirable to provide a technique to execute in parallel a technical computing program in a user-friendly manner. Systems and methods are needed to execute a technical computing program in parallel in multiple execution environments.","The present invention provides a system and methods for executing a computer program in parallel in multiple execution environments. A program, such as a technical computing program, is invoked for execution in a first execution environment, such as a technical computing environment. From the invocation, the program is executed in the first execution environment and one or more additional execution environments to provide for parallel execution of the program. This provides an easy method for the same program to be invoked and executed on multiple computers and\/or multiple processors to leverage the computing power of multiple computing resources. This is done without requiring the user of the technical computing environment to understand how to program parallel programming paradigms. A program written to be run sequentially in the execution environment is run in parallel in multiple environments with little or no changes to the program. Additionally, the system and methods of the present invention enable a user to easily switch the execution environment from operating in a sequential mode of operation to a parallel mode of operation, and vice-versa.","For more advanced users, the present invention provides technical computing programming language constructs to program parallel programming paradigms for a technical computing program that may execute in parallel in multiple execution environments. The technical computing programming language constructs provide for the distribution of processing of a portion of program instructions and related data in one of the multiple execution environments. This provides the more advanced users programming flexibility to handle more complex parallel programming needs.","In one aspect, the present invention is related to a method to invoke an execution of a computer program in multiple execution environments. The method comprises the step of invoking a request to initiate an execution of a computer program in a first execution environment. The method further includes initiating, from the request, a first execution of the computer program in the first execution environment, and communicating, in response to the request, a message from the first execution environment to a second execution environment to initiate a second execution of the computer program in the second execution environment. The message communicated from the first execution environment to the second execution environment may comprise the computer program. In a further aspect, the first execution environment sends a message to the second execution environment via a message passing interface.","The computer program of the second execution environment comprises at least a portion of computer instructions from the computer program of the first execution environment, or the computer program of the second execution environment may comprise each computer instruction from the computer program of the first execution environment. In another aspect, the method further comprises the first execution environment executing the computer program and the second execution environment executing the computer program. The computer program may comprise one or more computer instructions of a technical computing programming language, and the first execution environment and the second execution environment may each comprise a technical computing environment.","In another aspect, the first execution environment and the second execution environment may execute on separate processors and\/or separate computers. Additionally, the first execution environment may execute on an operating system different than the operation system the second execution environment executes on. Furthermore, the first execution environment may execute on a processor different than a processor the second execution environment executes on.","In another aspect, the present invention relates to a device readable medium holding device readable instructions to execute the steps of the method, as described above, to invoke an execution of a computer program in multiple execution environments.","In one aspect, the present invention relates to a method of initiating a parallel execution operation mode in an execution environment. The method comprises the steps of providing a first execution environment having a first mode of operation to execute a computer program sequentially and a second mode of operation to execute the computer program on multiple execution environments. The method further includes invoking a request to initiate the first execution environment to operate in the second mode of operation, and sending, in response to the request, a message from the first execution environment to at least one or more of the execution environments to initiate to listen for a request from the first execution environment to perform execution of the computer program. The method further comprises the step of invoking a request to initiate the first execution environment to operate in the first mode. The method may comprise providing an indicator representing the execution environment is operating in one of the first mode and the second mode.","In another aspect, the present invention relates to a device readable medium holding device readable instructions to execute the steps of the method, as described above, related to initiating a parallel execution operation mode in an execution environment.","In one aspect, the present invention relates to a method for programmatically distributing an array to multiple technical computing environments for parallel technical computing processing. The method comprises the steps of providing a technical programming language statement to form a program instruction in a technical computing program. The technical programming language statement represents an array to distribute for parallel processing by multiple technical computing environments. The technical programming language statement may comprise a built-in keyword of the technical programming language. The method further includes invoking the execution of the program instruction to store a first portion of the array in a first technical computing environment and to store a second portion of the array in a second technical computing environment. The first portion may comprise a first column of the array and the second portion, a second column of the array. The first technical computing environment can take an action to perform an operation on the first portion of the array and the second technical computing environment can take an action to perform an operation on the second portion of the array. Furthermore, the first technical computing environment and the second technical computing environment may obtain cached data of other portions of the array.","In another aspect, the present invention relates to a device readable medium holding device readable instructions to execute the steps of the method, as described above, related to programmatically distributing an array to multiple technical computing environments for parallel technical computing processing.","In one aspect, the invention is related to a method for programmatically providing a parallel loop control structure for parallel technical computing with multiple technical computing environments. The method comprises the steps of providing a technical programming language control structure to form a program instruction in a technical computing program. The technical programming language control structure represents a parallel loop with a loop body comprising one or more program instructions to be executed by multiple technical computing environments. The technical programming language construct may comprise a built-in keyword of the technical programming language. The method further includes invoking execution of the program instruction to perform a first iteration of the loop body by a first technical computing environment and to perform a second iteration of the loop body by a second technical computing environment. The first iteration of the parallel loop is executed independently from the second iteration of the parallel loop. Additionally, the loop body may comprise one or more program instructions to be performed only by one of the first technical computing environment and the second technical computing environment.","In another aspect, the present invention relates to a device readable medium holding device readable instructions to execute the steps of the method, as described above, related to programmatically providing a parallel loop control structure for parallel technical computing with multiple technical computing environments.","In yet another aspect, the present invention relates to a method for programmatically providing a conditional control structure for determining the process identification of a technical computing environment for parallel technical computing processing with a plurality of technical computing environments. The method comprises the steps of providing a technical programming language control structure to form a program instruction in a technical computing program, the technical programming language control structure representing a conditional statement comprising a Boolean expression that if evaluates to true indicates that a technical computing environment of a plurality of technical computing environments is the technical computing environment to execute a selection of one or more program instructions associated with the conditional statement. The technical programming language control structure may comprise a built-in keyword of the technical programming language. The method further includes invoking the execution of the program instruction to determine if the technical computing environment of the plurality of technical computing environments executing the program instruction should execute the selection of one or more program instructions associated with the conditional statement. The conditional statement may comprise an expression to evaluate the process identifier of the technical computing environment executing the conditional statement. Furthermore, the process identifier may be determined from a function call in the technical computing environment.","In another aspect, the present invention relates to a device readable medium holding device readable instructions to execute the steps of the method, as described above, related to programmatically providing a conditional control structure for determining the process identification of a technical computing environment for parallel technical computing processing with a plurality of technical computing environments.","In one aspect, the present invention relates to a system to operate multiple technical computing environments in parallel. The system comprises a first technical computing environment, a second technical computing environment and a job manager. The first technical computing environment invokes a command to initiate multiple technical computing environments to operate in a parallel technical computing mode. The job manager, in communication with the first technical computing environment, receives a job from the first technical computing environment. The job manager communicates a task associated with the job to one or more of the multiple technical computing environments to initiate listening for communications from one or more technical computing environments. The job manager may communicate to one of the first technical computing environment and the second technical computing environment information identifying one or more of the technical computing environments. The second technical computing environment, in communication with the job manager, receives the task and initiates listening for communications from one or more technical computing environments.","In one aspect, one of the first technical computing environment and the second technical computing environment wait on a message passing interface to receive a message from the plurality of technical computing environments. In another aspect, one of the first technical computing environment and the second technical computing environment listens on a TCP\/IP port for network communications from the plurality of technical computing environments. In a further aspect, the first technical computing environment invokes execution of a command and communicates a message to the second technical computing environment to invoke execution of the command.","The details of various embodiments of the invention are set forth in the accompanying drawings and the description below.","Certain embodiments of the present invention are described below. It is, however, expressly noted that the present invention is not limited to these embodiments, but rather the intention is that additions and modifications to what is expressly described herein also are included within the scope of the invention. Moreover, it is to be understood that the features of the various embodiments described herein are not mutually exclusive and can exist in various combinations and permutations, even if such combinations or permutations are not made express herein, without departing from the spirit and scope of the invention.","The illustrative embodiment of the present invention provides for execution of a computer program in parallel in multiple execution environments. A computer program, such as a technical computing program, can be invoked once in a first execution environment, such as a technical computing environment, and from the invocation be executed in multiple execution environments. Additionally, the system and methods of the present invention enable a user to switch the execution environment from operating in a sequential mode of operation to a parallel mode of operation, and vice-versa, to either execute a technical computing program in parallel in multiple execution environments or sequentially in a single execution environment.","Furthermore, the illustrative embodiment provides for technical programming language constructs to develop program instructions of the computer programs to be executed in parallel in multiple technical computing environments. These technical programming language constructs have built-in keywords of the programming language reserved for their functionality. One of these constructs is a parallel for loop to provide parallel execution of iterations of the loop body across multiple execution environments. Another construct is a distributed array element for technical computing operations executing across multiple execution environments. A further construct is an if statement to check if the current execution environment is the one executing the current set of program instructions.","The illustrative embodiment will be described solely for illustrative purposes relative to a MATLAB\u00ae technical computing environment. Although the illustrative embodiment will be described relative to a MATLAB\u00ae-based application, one of ordinary skill in the art will appreciate that the present invention may be applied to parallel execution of a computer program, such as a technical computing program, in multiple execution environments, such as an execution environment provided by a technical computing environment using software products of LabVIEW\u00ae or MATRIXx from National Instruments, Inc., or Mathematica\u00ae from Wolfram Research, Inc., or Mathcad of Mathsoft Engineering & Education Inc., or Maple\u2122 from Maplesoft, a division of Waterloo Maple Inc.",{"@attributes":{"id":"p-0042","num":"0041"},"figref":"FIG. 1A","b":["102","106","104","106","106","106","102","114","102","110","112","110","112","114","102","102","116","120","102","108","120","120"]},"Additionally, the computing device  may include a network interface  to interface to a Local Area Network (LAN), Wide Area Network (WAN) or the Internet through a variety of connections including, but not limited to, standard telephone lines, LAN or WAN links (e.g., 802.11, T1, T3, 56 kb, X.25), broadband connections (e.g., ISDN, Frame Relay, ATM), wireless connections, or some combination of any or all of the above. The network interface  may comprise a built-in network adapter, network interface card, PCMCIA network card, card bus network adapter, wireless network adapter, USB network adapter, modem or any other device suitable for interfacing the computing device  to any type of network capable of communication and performing the operations described herein. Moreover, the computing device  may be any computer system such as a workstation, desktop computer, server, laptop, handheld computer or other form of computing or telecommunications device that is capable of communication and that has sufficient processor power and memory capacity to perform the operations described herein.","The present invention provides a parallel technical computing environment  for executing technical computing programs, such as computer programs created in the technical computing programming language of MATLAB\u00ae. The parallel technical computing environment  can be an application, module, service, software component or any other type of computer program which is designed to and capable of executing a program supported by the parallel technical computing environment , for example such as a computer program written in the programming language of MATLAB\u00ae executed in the command window of a MATLAB\u00ae session. Furthermore, the parallel technical computing environment  of MATLAB\u00ae may be configured to and capable of running any of the modules, libraries or software components of the MATLAB\u00ae product family. As such, the parallel technical computing environment  may have all or a portion of the software components of MATLAB\u00ae installed on the computing device , or alternatively, accessible from another computing device \u2032 on a network.","A session is an instance of a MATLAB\u00ae parallel technical computing environment  by which a user, which may be another computer program, can access the services and functionality provided by the parallel technical computing environment . For example, a running instance of MATLAB\u00ae, such as a command window, may be a session. The session may be available for a certain time period or to a certain user, or it may used over and over again by different users. A user may start up one session on one computing device  and another session on the same computing device , or another computing device . One ordinarily skilled in the art will appreciate the use of the term session to generally mean accessing in a variety of ways the functionality provided by a parallel technical computing environment  such as MATLAB\u00ae. A session of MATLAB\u00ae may just include those software components the parallel technical computing environment  may need to execute the computer programs it receives. Another session of MATLAB\u00ae may include a set of software components different from the set of software components of a first session on the same computing device .","In one aspect, the parallel technical computing environment  provides an execution environment from which a computer program can be invoked and executed. The computer program can have program instructions that access the services and functionality provided by the parallel technical computing environment . For example the computer program may perform a calculation on variables available in a calculation workspace of the parallel technical computing environment . In an exemplary embodiment, access to the execution environment of the parallel technical computing environment  is provided by a command window. The command window may be provided within a graphical user environment, such as the desktop environment of MATLAB\u00ae. A command line interface for the parallel technical computing environment  may also be provided from the command line interface, or shell environment, provided by the operating system which the technical computing environment  is running on. For example, at a Windows command line prompt or UNIX shell prompt, a command may be issued to invoke a command line interface or shell for the technical computing environment . From the command line interface of the parallel technical computing environment , commands can be typed in at the command line for execution by the parallel technical computing environment . The command window or the command line interface of a parallel technical computing environment  of MATLAB\u00ae can accept commands to run programs, functions, scripts, enter data and any other command MATLAB\u00ae may be configured to execute.","The execution environment may provide for execution of programs by a variety of other means. For example, a computer program may be invoked via a menu item on a graphical user interface. In another example, a computer program may be invoked by a shortcut in the desktop environment of MATLAB\u00ae or the desktop environment of the operating system. In yet another example, another computer program can be written to interface with the execution environment to invoke a program. For example, an execution environment may provide an application programming interface that can be called to invoke a program in the execution environment. One ordinarily skilled in the art will appreciate the variety of ways a program, function or script may be invoked in an execution environment, such as the execution environment provided by the parallel technical computing environment  of the present invention.",{"@attributes":{"id":"p-0048","num":"0047"},"figref":"FIG. 1B","b":["120","100","140","180","180","100","170","170","140","100","170","170","140","170","170","140","170","170","140","140","140","140","140","140","140","140","140","140"],"i":["a","n","a","n ","a","n","a","b","a","n "]},"The workstation nodes -can connect to the network  through a variety of connections including standard telephone lines, LAN or WAN links (e.g., T1, T3, 56 kb, X.25, SNA, DECNET), broadband connections (ISDN, Frame Relay, ATM, Gigabit Ethernet, Ethernet-over-SONET), cluster interconnections (Myrinet), peripheral component interconnections (PCI, PCI-X), and wireless connections, or some combination of any or all of the above. Connections can be established using a variety of communication protocols (e.g., TCP\/IP, IPX, SPX, NetBIOS, Ethernet, ARCNET, Fiber Distributed Data Interface (FDDI), RS232, IEEE 802.11, IEEE 802.11a, IEEE 802.11b, IEEE 802.11g, and direct asynchronous connections).","Each of the workstations -can be any type of computing device (, \u2033 and \u2032\u2033) as described above and respectively configured to be capable of computing and communicating the operations described herein. For example, any and each of the workstations -may be a server, a multi-user server, server farm or multi-processor server. It could also be a parallel processing super computer or a cluster of computers such as a Beowulf cluster. A Beowolf cluster is a parallel computer built from commodity off-the-shelf processors connected by commodity network connections. In another example, any of the workstations -may be a mobile computing device such as a notebook or PDA. One ordinarily skilled in the art will recognize the wide range of possible combinations of types of computing devices capable of communicating over a network.","Each of the workstations -are configured to and capable of running an execution environment -of the present invention of a parallel technical computing environment . As discussed above, the execution environment -provides an interface such as a command window for executing a program within the technical computing environment. Furthermore, each execution environment -can be capable of and configured to operate on the operating system that may be running on any of the computing device (e.g., , \u2032, and \u2033). Each workstation -can be running the same or different operating system. For example, the workstation can running Microsoft\u00ae Windows, workstation can be running a version of Unix, and the workstation a version of Linux. Or each workstation -can be running the same operating system, such as Microsoft\u00ae Windows. Additionally, the execution environments -can be capable of and configured to operate on and take advantage of different processors of any of the computing devices (e.g., , \u2032, and \u2033). For example, the execution environment -can run on a 32 bit processor of one computing device  and a 64 bit processor of another computing device \u2032.","In a network client server system, such as the system depicted in , The parallel technical computing environment can operate on computing devices (, \u2032, and \u2033) that can be running on different processor architectures in addition to different operating systems. One ordinarily skilled in the art will recognize the various combinations of operating systems and processors that can be running on any of the computing devices (, \u2032, and \u2033). In summary, the execution environment -and the parallel technical computing environment  may be deployed across a wide range of different computing devices, different operating systems and different processors in various network topologies and configurations.",{"@attributes":{"id":"p-0053","num":"0052"},"figref":"FIG. 2A","b":["120","102","200","120","102","170","180","180","180","180","210","210","170","102","180","180","170","180","180","120","210","210","180","180","180","180","180","180","180","120","180","180"],"i":["a ","b","a ","b ","a ","a ","n ","a","a ","b ","a ","b ","a ","b ","a","b","a ","b "]},"The first execution environment and second execution environment are capable of communicating to each other via an interface . In an exemplary embodiment, the first execution environment and second execution environment can communicate to each other by sending messages via a message passing interface . One such example is MPI, which is a de facto standard, created by the group of vendors, computer scientists and users making up the MPI Forum. MPI is a message-passing library specification defining a collection of subroutines and arguments used for communication among nodes running a parallel program on a distributed memory system. Implementation of the MPI specification permits programs with separate address spaces to synchronize with one another and move data from the address space of one process to that of another by sending and receiving messages. In other embodiments, the first execution environment and second execution environment can interface via socket based communications over TCP\/IP implementing a custom message specification. In further embodiments, the execution environments -may communicate using any available messaging communications products and\/or custom solutions that allow the execution environments to send and receive messages. In certain embodiments, the interface  comprises a file interfacing mechanism such as reading and writing to files on a network accessible directory or common file system. Furthermore, the first execution environment and second execution environment can each be waiting or listening for messages from any execution environment -on the network . For example, in an exemplary embodiment, the second execution environment can make an MPI function call to wait for a request from a first execution environment that may send the request via an MPI function call. In another embodiment, the second execution environment can be initialized to wait on a certain TCP\/IP port to receive messages from first execution environment . One ordinarily skilled in the art will recognize the various types of interfaces to communicate messages between execution environments -","Each of the first executing environment and second execution environment are capable of executing a computer program . The computer program  may comprise one or more program instructions to be executed in the execution environments -. In an exemplary embodiment, the computer program  is written in the technical computing programming language of MATLAB\u00ae and the execution environments -are the parallel technical computing environments  of MATLAB\u00ae. In alternative embodiments, the computer programs  can be written in any programming language capable of being executed or otherwise support by the execution environments -. Furthermore, the computer program  may be a function, script or other set of program instructions that can be invoked and executed within the execution environment -","The programming language of the parallel technical computing environment  of MATLAB\u00ae provides a variety of ways to invoke a program  in an execution environment -. Any of the MATLAB\u00ae programming language statements can be executed on the command line. Additionally, the programming language includes procedural function calls such as eval( ) and feval( ) that provide a quick and powerful procedure to execute functions. Also, the MATLAB\u00ae programming language enables you to write a series of MATLAB\u00ae statements into a file, referred to as an M-File, and then execute the statements in the file with a single command. M-files can be scripts that simply execute a series of MATLAB\u00ae statements, or they can be functions that also accept input arguments and produce output.","Furthermore, the MATLAB\u00ae programming language supports anonymous functions and function handles. Function handles are useful when you want to pass your function in a call to some other function when that function call will execute in a different workspace context than when it was created. Anonymous functions, denoted with an @ sign, give you a quick means of creating simple functions without having to create M-files each time and can be viewed as a special subset of function handles. An anonymous function can be created either at the MATLAB\u00ae command line or in any M-file function or script. Anonymous functions also provide access to any MATLAB\u00ae function. By way of example of the programming language of MATLAB\u00ae, one ordinary skilled in the art will recognize the various permutations and combinations of program instructions that can make up a program  to be invoked and executed in an execution environment -","In operation, the computer program  is invoked from the first execution environment so that it is executed on the first execution environment and also executed on the second execution environment . For example, in a command window of the first execution environment , a user may type in the name of a computer program  to invoke. The first execution environment receives the request to invoke the program . In response to the request, the first execution environment sends a message via the interface  to the second execution environment to invoke the program . The first execution environment then executes the program . In an alternative embodiment, the first execution environment starts to first execute the program  and then sends the message to the second execution environment . After receiving the request from the first execution environment , the second execution environment executes the program . In an exemplary embodiment, the request is sent immediately or as soon as possible after the program is invoked in the first execution environment . The message sent from the first execution environment to the second execution environment may comprise, in an exemplary embodiment, the program . In other embodiments, the message may contain the program  with other portions of the message, such as another command or request. In further embodiments, the message may contain a reference to the program  that the second execution environment may be able to reference or infer the actual name of the program . In still another embodiment, the message may contain a portion of or all of the program instructions of the program , or optionally the name of a file with the contents of the program instructions. Although the program invocation request on the first and second execution environments -are generally discussed with regards to a single request, the program invocation request may comprise multiple requests. One ordinarily skilled in the art will recognize the various forms that message may have to request an execution environment to execute a program.","In an exemplary embodiment, the program  invoked from the first execution environment is the same program \u2032 executed on the second execution environment . In another embodiment, the program \u2032 to be executed on the second execution environment comprises a portion of all or part of the program  invoked and executed in the first execution environment . For example, the program \u2032 may be altered, changed, modified, added to or otherwise pre-processed prior to executing on the second execution environment . These changes may be required to adapt the program \u2032 to the specific execution environment , such as one running an operating system different than the first computing environment . Or it may to add some additional functionality to the program  before executing the program \u2032. In other cases, the execution environments -may each point to their own reference to or copy of the program . Each program , \u2032 may comprise the same functionality but adapted to the specifics of either the operating system or execution environment the program  is targeted to be executed on. However, even if the programs , \u2032 are different, they may be referenced by the same name so that the when the program  is invoked from the first execution environment , the programs  and \u2032 get executed on both the first execution environment and second execution environment ","This technique of executing the same, or nearly the same program, in multiple execution environments -from one command request allows the user to perform parallel processing in a very simplified manner. The user types in the name of the program at one command window and had the program runs in multiple execution environments -. This is particularly useful in that existing programs  designed for the technical computing environment of MATLAB\u00ae can be run in the parallel technical computing environment  of MATLAB\u00ae with little or no changes. Also, a user can write a program  to run in a parallel fashion using the technical computing programming language of MATLAB\u00ae without learning any details of parallel programming such as the low level details of an MPI programming interface. This technique also reduces the number of messages and related performance factors with sending messages that is typical in parallel programming paradigms where the user is responsible for managing and coordinating portions of the program being processed by multiple execution environments. This approach favors simplicity over any redundancy that may occur in executing the same program instructions unnecessarily multiple times.","Referring now to , the present invention of a parallel technical computing environment  can be distributed to multiple execution environments -running in multiple nodes of a network . As shown in , the present invention as shown in  can be practiced in a two-node networked computer system . In brief overview, the system  has a workstation and a workstation each a computing device , \u2032 as described above. The workstations and are connected to and communicating over a network , and each have and can run an execution environment and . Each of the execution environments -can interface  to each other over the network  to send and receive a message or messages for executing a program , and in further embodiments for sharing data and other information related to executing the program . In operation of the system  in , a program  is invoked in the execution environment , which in response to and upon the execution request, sends a message via the interface  to the execution environment on workstation to execute the program . The execution environments and execute the program  respectively on each workstation and ","Referring now to , the present invention of the parallel technical computing environment  can be deployed in a variety of nodes and processors across the network . In overview of the multi-node networked system  of , there are multiple workstations -connected and communicating over a network . Each workstation -can have multiple execution environments -, with each execution environment -able to communicate with the other execution environments via an interface  locally or over the network . In certain embodiments, the interface  of an execution environment, for example execution environment of workstation , may be different than the interface  of another execution environment, for example execution environment of workstation . There may be a different interface  for interfacing execution environments -\u2032 on the same workstation versus interfacing between execution environments -over the network . Each execution environment -may be able to communicate via multiple different interfaces , \u2032 or may be configured to use a different interface  for communicating to certain execution environments -. With any of the different and various interfaces , \u2032, the execution environment -can receive and\/or send a message with respect to invoking a program on another execution environment -","In certain embodiments, a workstation -may be a multi-processor computing device . In another embodiment, a workstation -may be a server or server cluster, such as a Beowulf cluster. In yet another embodiment, a workstation can be a desktop computer with a single processor running multiple instances of the execution environment , \u2032. One ordinarily skilled in the art will recognize the plenary of deployment scenarios for having multiple execution environments across various computing devices in a network.","In operation of the system , a program  is invoked on one of the execution environments, for example . Through the interface , all of the execution environments, such as \u2032 and -\u2032, are sent a message from the first execution environment to execute the program . All of the execution environments -execute the program . With one invoking of a program  in one execution environment , the processing and computing capabilities of all the nodes in the network are utilized.","In another aspect, the present inventions relates to a method of executing a program in multiple execution environments with a program invocation request. Referring now to , the flow diagram of method  describes the method of practicing the embodiments of the present invention as shown in . The method  comprises the step  of invoking an execution of a program in a first execution environment and step  initiating execution of the program in the first execution environment. The method further includes step  of communicating from the first execution environment a request to a second communication environment to execute the computer program, and then the second execution environment executing the computer program at step .","At step , in an exemplary embodiment, the program  is invoked on the first execution environment A by entering a command to invoke the program in a command window of the execution environment . In one embodiment, this step may include invoking the program  by selecting a menu item in a graphical user interface. In another embodiment, the step  may include invoking the program by selecting a graphical icon representing a shortcut in the desktop environment of the execution environment or the workstation A. One ordinarily skilled in the art will recognize the variety embodiments of this step of the method to invoke a program in an execution environment.","At step , the program  is executed in the execution environment as it would normally be in response to the invoke request in the first execution environment. In addition to executing the program  in response to invoking the program , the first execution environment communicates a request to a second execution environment to execute the program . In an exemplary embodiment, the first execution environment communicates the request upon or immediately following the program invocation. The first execution environment may communicate to the second execution environment by sending a message comprising the program via an interface , such as a message passing interface. In another embodiment of this step, the first execution environment may communicate to the second execution environment by writing to a file.","Step  further includes the second execution environment receiving the request from the first execution environment to execute the program . In one embodiment, the second execution environment was waiting for or listening for a request message via a message passing interface and performs an MPI function to read the sent message. In another embodiment, for example, when the first execution environment writes to a file, the second execution environment reads the file to obtain the message sent by the first execution environment . In reading the request, the second execution environment determines the program  to execute. In response to receiving the request from the first execution environment , the second execution environment executes the program  determined from the message. In this manner, the first execution environment and the second execution environment execute the same or similar program , from one program invocation in the first execution environment ","In another aspect, this present invention relates to systems and methods that provide for switching between a sequential mode of operation and a parallel mode of operation in an execution environment.  depicts embodiments of the present invention illustrating the modes of operation. In system  of , the execution environments -are each running in a sequential mode of operation. In system  of , the execution environments -have been initiated to operate in a parallel mode of operation.","In system , execution environments -running on workstations -are connected to a network . Each of the execution environments -may be running a session or instance of a parallel technical computing environment  in a stand-alone mode or sequential mode of operation. That is, none of the execution environments -have established an interface  to any of the other execution environments -. At the command interface, such as the command window, of any of these execution environments -, any program that is invoked only runs in the execution environment -to which it was invoked. This is, for example, the typical execution scenario of a technical computing environment such as MATLAB\u00ae. Each execution environment -may startup and terminate multiple times or open and close sessions without the other execution environments having knowledge of such activities. In this mode, in order to execute the program  on each of the execution environments -would require the invocation command for the program to be entered, for example, typed in, at each of the command windows of each execution environment -","In system , execution environments -running on workstations -are connected to a network . Additionally, the system  comprises a server , e.g., computing device , that has a job manager . Each of the execution environments -can communicate over the network  with each other and the job manager . The execution environments -may be running a session or an instance of a parallel technical computing environment  that is currently configured to be running in a sequential mode of operation.","The job manager  is a service available on the network  that manages a group of tasks collectively as a single unit called a job, and on behalf of an execution environment -, submits one or more tasks of a job to other execution environments -registered with the job manager  or otherwise made known to the job manager . The task may comprise any operation, command or function that the execution environment -receiving the task may perform. The job manager  may comprise an object-oriented interface, or any other type of interface, such as a message passing interface, to provide control of submitting jobs and\/or tasks and obtaining results of the jobs and\/or task. The job manager  can be made up of one or more applications, software components, libraries and\/or interfaces. The job manager  may run on any of the same workstation -as the execution environments -or any other server \u2032 or workstation \u2032 on the network . Furthermore, the job manager  may be distributed across any workstation -or server  accessible on the network . One ordinarily skilled in the art will recognize the various components and interfaces that may be included in the job manager .","There can be one or more job managers , \u2032 available on the network  each known by or listed with a name, such as jobmanager or mycluster. Each job manager  may have one or more execution environments -associated with it to form a cluster of execution environments -for a job manager  to send tasks to. In one embodiment, the execution environments -register with a specific instance of a job manager . For example, an execution environment -may be configured with the name of a job manager  to register with when the execution environment -is started. In another embodiment, the job manager  may be able to determine the execution environments -available on the network  by running a discovery process such as a broadcasting a message on the network  for available execution environments -. In another embodiment, the execution environments -available to receive tasks from the job manager  register themselves with a registration service on the network . For example, each time the execution environment -starts up, it registers with the registration service, and when it shuts down it removes or otherwise inactivates its registration with the registration service. The job manager  can make API calls, issue commands or otherwise send requests to the registration service to determine the available execution environments -. One ordinarily skilled in the art will appreciate the various ways an execution environment -may be registered with or become known to a job manager . The execution environments -and job manager  may communicate and interface with each other using any known interface techniques, such as the service oriented and extensible remote invocation approach of Jini network technology from Sun Microsystems, Inc.","Referring still to system  of , the execution environments -have been initiated into a parallel mode of operation as indicated by the establishment of interfaces  between the execution environments -. In an exemplary embodiment, the initiation into a parallel mode of operation can be invoked by a command. For example, at one of the command interfaces of an execution environment -, a command was invoked to change the execution environment -to a parallel mode of operation. For example, execution environment may have been running in a sequential mode of operation, or another mode besides a parallel mode of operation. The command window of execution environment would show a command line prompt that the execution environment was operating in a sequential mode of operation, or alternatively, a prompt associated with another mode of operation. At this command line prompt, a user may enter a command to initiate the execution environment to switch to a parallel mode of operation. For example, at the command line prompt such as the standard MATLAB\u00ae prompt of \u201c>>\u201d a command may be invoked to turn on the parallel mode of operation such as \u201c>>pmatlab on.\u201d Other alternative commands are:",{"@attributes":{"id":"p-0075","num":"0074"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"105pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["\u2003\u2003\u2002\u2009>> pmatlab on <MyCluster>","% MyCluster refers to the name of"]},{"entry":"the job manager"},{"entry":[{},"which has the nodes to perform"]},{"entry":"parallel execution"},{"entry":["\u2003\u2003\u2002\u2009>> pmatlab(N)","% Use N nodes in the first"]},{"entry":[{},"available cluster"]},{"entry":["\u2003\u2003\u2002\u2009>> pmatlab(N, <MyCluster>)","% Use N nodes in cluster"]},{"entry":"named <MyCluster>"},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}},"br":{},"b":["120","180","180","180","180","210","180","180","120","180","180","180","180"],"i":["a","n ","a","n ","a","n","a","n","a","n "]},"An execution environment -may provide an indicator of what mode the execution environment -is currently operating. In an exemplary embodiment, the MATLAB\u00ae command line prompt will change from a \u201c>>\u201d to \u201cP>>\u201d to indicate that the execution environment -is running in a parallel mode of operation. In another embodiment, the command window of the execution environment -may have in a text display, such as a title bar, characters indicating the mode of operation. In yet another embodiment, a help, information or other command either issued at a command line or from a graphical menu item may indicate the current operation mode. For example, selecting the about menu selection from a help file menu may show the current version of the execution environment -along with its current operation mode. In further embodiments, the execution environment -may indicate the current operation mode in a combination of the above ways. One ordinarily skilled in the art will recognize the various permutations of providing an indicator of what mode of operation the execution environment is currently operating in.","In response to receiving a command to initiate the parallel mode of operation, the execution environment sends a job to the job manager . The execution environment may use the job manager specified in the \u201cpmatlab on\u201d command issued at the command prompt, or the name of a job manager configured in a variable or parameter setting of the execution environment -, or a job manager  discovered on the network  by the execution environment -. The job comprises one or more tasks. Each task comprises a request to an execution environment to initiate listening for requests from other execution environments. The job manager , in response to receiving the job from the execution environment , processes the job and sends a task to one or more execution environments -available to the job manager . The job manager  may send the task directly to the execution environments -registered with the job manager  or known by the job manager  via the registration service. In another embodiment, the job manager  submits the one or more tasks to a repository. The repository provides a mechanism for submitting and receiving tasks. One or more execution environments -may be registered with the repository and are notified to take the task after the task is submitted to the repository.","In one embodiment, the job manager  may send a task to all the execution environments -. The definition or properties of the job may indicate the number of execution environments -to which to submit the task. For example, in another embodiment, the job manager  sends a task to each of the number of execution environments -specified in the \u201cpmatlab on\u201d command issued in the execution environment . Furthermore, the task of the job or the job may identify the specific instances of the execution environments -to which to submit a task. For example, each execution environment -may be identified by a process id or pid, and a job may be submitted for a series of pids such as a range of pids -, or for a specific pid number.","Additionally, each of the execution environments -may be aware of any of the other execution environments -available in the network , associated with a job manager , or registered with a registration service or repository. As such, each execution environment -may know the pid of the other execution environments -. In one embodiment, an execution environment determines the other execution environments -by querying the registration service. Alternatively, an execution environment may query the job manager  to determine the other execution environments -associated or known by the job manager . In another embodiment, an execution environment can query a repository to determine the other execution environments -. In yet another embodiment, the job manager  provides information about each of the execution environments -as part of the task submitted to an execution environment -","In operation, the execution environment -receives the task to establish an interface  for the execution environment -. The interface is established in order to cooperate in the parallel mode of operation to receive requests from other execution environments -. The request may include performing a task, such as for example, invoking the execution of a computer program . In an exemplary embodiment, the execution environment -may establish an interface  via MPI function calls to establish an MPI based communication connection. In another embodiment, the execution environment -may establish the interface  by listening on a port via a socket based TCP\/IP connection. In another embodiment, the execution environment -may establish a file or directory based interface  and wait for data to be written to a file in a directory or for a new file to be created in the directory. As discussed in conjunction with , there are variety of types of interfaces the execution environments -may establish to send and receive requests to each other. The job manager  may wait for a result of the task submitted to the execution environments -to determine the success or failure of the task. In other embodiments, the job manager  may return a result of the job, based on the results of the tasks, to the execution environment that submitted the job.","While running in parallel mode of operation, the execution environment may receive a command to switch from the parallel mode of operation to a sequential mode of operation. For example, the command \u201cpmatlab off\u201d may be issued in the command window of execution environment . In response to this command, execution environment may submit a job to the job manager  to send a task to the execution environments -cooperating in the parallel mode of operation to stop listening for requests and to disconnect or otherwise shutdown the established interface .","In another aspect, the present invention relates to a method for initiating an execution environment -into a parallel mode of operation and from a parallel mode of operation to a sequential mode of operation.  depicts a flow diagram of method  for initiating an execution environment into a parallel mode of operation. Method  includes the steps of having an execution environment -in a sequential mode of operation (step ), requesting to initiate the execution environment -to operate in a parallel mode of operation (step ), sending a request to one or more execution environments -to initialize to receive requests to execute a program (step ), the one or more execution environments -listening for requests from other execution environments (step ) and providing an indicator that the execution environment -is in a parallel mode of operation (step ).",{"@attributes":{"id":"p-0083","num":"0082"},"figref":"FIG. 4C","b":["440","180","180","440","180","180","442","180","180","444","180","180","446","180","180","448"],"i":["a","n ","a","n ","a","n ","a","n ","a","n "]},"In another aspect, the present invention relates to programming in a technical computing programming language for the parallel execution of a program in multiple execution environments -. The present invention discussed in conjunction with  and , enables a user to run a computer program in multiple execution environments with little or no changes to the program instructions of the program. However, there may be times when a more advanced approach is required to take advantage of the parallel execution of the program in multiple environments. The present invention of a parallel technical computing environment  provides additional programming language statements and control constructs to provide parallel programming functionality supported by embodiments of the present invention. In brief overview, the technical programming language of the parallel technical computing environment  of MATLAB\u00ae provides reserved key words and built-in language statements to support distributed arrays, parallel for loops and an if conditional statement to check the current process id of the execution environment -","In order to provide distributed arrays and parallel for loops in a technical computing programming language, an iterator is decomposed into separate iterators for each node, or execution environment -that will be processing the distributed array or the parallel for loop. Each execution environment -is identified by a process id or pid between 1 and the total number of pids, or nproc. For each pid of an execution environment -out of a total numbers of pids, a portion of the distributed array and parallel for loop may be processed separately and independently. For example, take the following iterators:",{"@attributes":{"id":"p-0086","num":"0085"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2003\u2003\u2003\u2003var = start:fin"},{"entry":"\u2003\u2003\u2003\u2003or"},{"entry":"\u2003\u2003\u2003\u2003var = start:delta:fin\u2009;\u2003where start is the first iteration, fin is the"},{"entry":"last iteration and delta is"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2009the step increments between the first"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2009iteration and the last iteration."},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}},"br":{}},{"@attributes":{"id":"p-0087","num":"0086"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"var = start(pid):delta:fin(pid); where start is the first iteration for the pid,"},{"entry":"fin is the last"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003iteration for the pid, and delta is"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003the step increments between the"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003first iteration and last iteration for"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003the pid."},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}},"br":{}},{"@attributes":{"id":"p-0088","num":"0087"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"function [startp,finp] = djays(start,delta,fin,pid,nprocs)"]},{"entry":[{},"ratio = floor((fin-start)\/delta+1)\/nprocs;"]},{"entry":[{},"startp = start+ceil((pid\u22121)*ratio)*delta;"]},{"entry":[{},"finp = start+(ceil(pid*ratio)\u22121)*delta;"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{}},"j=1:3 on pid=1","j=4:5 on pid=2","j=6:8 on pid=3","j=9:10 on pid=4","In alternative embodiments, other algorithms can be used to determine the decomposition of iterators and the length of iterators to be applied per pid for processing distributed arrays and parallel for loops across multiple execution environments -. For example, the decomposition of the iterator may be determined by estimated processing times for each of the pids for its respective portion of the iterator. Or it may be determined by which execution environments -are not currently executing a program or which execution environments -are idle or have not previously executed a program . In another example, only two pids may be used for the iteration although several pids may be available. In yet another example, each iterator may be assigned to a specific execution environment -, e.g. iterator  is always executed on execution environment . In other cases, the decomposition of the iterator can be based on one or more operational characteristics of the execution environment -, or of the computing device  running the execution environment -. One ordinarily skilled in the art will appreciate the various permutations and combinations that can occur in decomposing an iterator to process portions of a distributed array and parallel for loop in multiple execution environments.","In the parallel technical computing environment  of MATLAB\u00ae, distributed arrays are denoted with the new keyword darray and in case of distributed random arrays, the new keyword drand. Various alternative names for these keywords, or reserved words could be applied. As keywords or reserved words of the programming language of the parallel technical computing environment , they have special meaning as determined by the execution environment -and therefore are built into the language. As such, these keywords are not available as variable or function names.","Distributed arrays are distributed by applying the decomposition algorithm to the last dimension of the array. For example, a 1000-by-1000 array is distributed across 10 processors, or execution environments -, by storing the first 100 columns on the first execution environment , the second 100 columns on the second execution environment and so forth. The contents of a distributed array on a particular execution environment -is the local portion of the array. For example, if A is a distributed array, then A.loc refers to the portion of A on each execution environment -. For example, with nproc=16, the statement",{"@attributes":{"id":"p-0096","num":"0095"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2003\u2003\u2003A = drand(1024,1024)\u2003\u2003\u2009%\u2003\u2002\u2009create a distributed random array"},{"entry":"becomes"},{"entry":"\u2003\u2003\u2003A = darray(1024,1024)"},{"entry":"\u2003\u2003\u2003A.loc = rand(1000,64)"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}},"br":{},"b":["180","180","180","180","180","180","180","180","180","180"],"i":["a","n","a","n ","a","n","a","n","a","n. "]},"In another aspect, a distributed array may be cached. That is, an execution environment -may store its portion of the distributed array, e.g., A.loc, but prior to performing operations on the local portion, the execution environment -may still have read access to the other portions of the distributed array. For example, execution environment may be assigned column  of a three column distributed array with execution environments and assigned columns  and  respectively. Execution environment may have read access to columns  and  prior to performing operations on column  of the array, i.e., read and write access. However, once the execution environment -performs an operation on its local portion of the distributed array, it may no longer have any access to the other portions of the distributed array. For example, once execution environment performs an operation on column , it no longer will have read access to columns  and  of the distributed array.","For basic element-wise operations like array addition, each execution environment -may perform the operation on its local portion, e.g., A.loc. No communication between the execution environments -is necessary for the processing of the local portion of the distributed array. More complicated operations, such as matrix transpose, matrix multiplication, and various matrix decompositions, may require communications between the execution environments -. These communications can follow a paradigm that iterates over the execution environments -:",{"@attributes":{"id":"p-0099","num":"0098"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"for p = 1:nprocs"]},{"entry":[{},"\u2003if p == pid"]},{"entry":[{},"\u2003\u2003processor p is in charge of this step"]},{"entry":[{},"\u2003\u2003send data to other processors"]},{"entry":[{},"\u2003\u2003\u2003\u2003do local computation"]},{"entry":[{},"\u2003\u2003maybe receive data from other processors"]},{"entry":[{},"\u2003else"]},{"entry":[{},"\u2003\u2003receive data from p"]},{"entry":[{},"\u2003\u2003\u2003do local computation"]},{"entry":[{},"\u2003\u2003\u2003maybe send data back to p"]},{"entry":[{},"\u2003\u2003end"]},{"entry":[{},"\u2003end"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{},"b":["180","180","180","180","180","180"],"i":["a","n ","a","n","a","n. "]},"In one aspect, the present invention relates to methods for programmatically providing for distributed array processing as depicted in . In the flow diagram of , method  depicts the processing of a distributed array in execution in multiple execution environments -. At step , an execution environment -is executing a program flow of a program  invoked for execution. At some point during the program flow, the execution environment -at step  interprets a distributed array construct in a program statement, such as a program statement comprising the keyword darray. At step , the execution environment -evaluates the distributed array construct to determine the portion of the distributed array to store locally. As discussed above, the distributed array may be decomposed in a variety of ways. For example, the execution environment -may store a specific column of the array to perform local processing. After determining and storing the portion of the distributed array, the execution environment -may perform an operation on this portion of the array. For example, it may perform basic array operations such as addition. After handling the distributed array statement, the program flow continues to other program statements of the program . In another embodiment, prior to performing an operation on the local portion of the array, the execution environment -may access or obtain data values of other portions of the array that have been cached. Although method  is discussed with regards to one execution environment, the same flow diagram will apply to multiple execution environments -running the same program  so that at steps ,  and  the execution environment interpreting the distributed array determines what portion of the array to store and process locally.","In the programming language of the parallel technical computing environment  of MATLAB\u00ae, parallel for loops are denoted by the new keywords parfor and parend. In interpreting the parallel for loop keyword of parfor, a preprocessing step is performed that translates:",{"@attributes":{"id":"p-0102","num":"0101"},"tables":{"@attributes":{"id":"TABLE-US-00007","num":"00007"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2003\u2003\u2003\u2002parfor x = start:delta:fin"]},{"entry":[{},"\u2003\u2003\u2003\u2002parend"]},{"entry":[{},"into"]},{"entry":[{},"\u2003\u2003\u2003\u2002x = parforstart(start,delta,fin):delta:parforfin(start,1,fin)"]},{"entry":[{},"\u2003\u2003\u2003\u2002end"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{},"b":["180","180"],"i":["a","n"]},{"@attributes":{"id":"p-0103","num":"0102"},"tables":{"@attributes":{"id":"TABLE-US-00008","num":"00008"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"function pfstart = parforstart(start,delta,fin)"]},{"entry":[{},"set(0,\u2018parforstate\u2019,1)"]},{"entry":[{},"ratio = floor((fin\u2212start)\/delta*(1+4*eps)+1)\/nprocs;"]},{"entry":[{},"pfstart = start+ceil((pid\u22121)*ratio)*delta;"]},{"entry":[{},"function pffin = parforfin(start,delta,fin)"]},{"entry":[{},"ratio = floor((fin\u2212start)\/delta*(1+4*eps)+1)\/nprocs;"]},{"entry":[{},"pffin = start+(ceil(pid*ratio)\u22121)*delta;"]},{"entry":[{},"function parforend"]},{"entry":[{},"set(0,\u2018parforstate\u2019,0)"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{}},{"@attributes":{"id":"p-0104","num":"0103"},"tables":{"@attributes":{"id":"TABLE-US-00009","num":"00009"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"A = darray(m,n)"]},{"entry":[{},"parfor j=1:n"]},{"entry":[{},"\u2003\u2003\u2003\u2003A(: f(j)))"]},{"entry":[{},"parend"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{},"b":["180","180","180","180"],"i":["a","n ","a","n "]},"The use of a parallel for loop stipulates that each iteration of the loop body can be evaluated independently of the other iterations. By way of example, the following are two variations of an example use of the parallel for loop:",{"@attributes":{"id":"p-0106","num":"0105"},"tables":{"@attributes":{"id":"TABLE-US-00010","num":"00010"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"98pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"S = darray(1,n);","% Example 1"]},{"entry":[{},"parfor k = 1:n"]},{"entry":[{},"\u2003S(k) = F(k)"]},{"entry":[{},"parend"]},{"entry":[{},"total = sum(S)"]},{"entry":[{},"s = 0;","% Example 2"]},{"entry":[{},"parfor k = 1:n"]},{"entry":[{},"\u2003s = s + F(k)"]},{"entry":[{},"parend"]},{"entry":[{},"total = gop(@plus,s)"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}},"br":{},"b":["180","180","180","180","180","180","180","180"],"i":["a","n","a","n ","a","n ","a","n"]},{"@attributes":{"id":"p-0107","num":"0106"},"tables":{"@attributes":{"id":"TABLE-US-00011","num":"00011"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"function y = gop(F,x)"]},{"entry":[{},"%\u2003GOP Global operation"]},{"entry":[{},"%\u2003gop(@F,x) is the \u201caccumulation\u201d via the function F"]},{"entry":[{},"%\u2003of the quantities x from each processor."]},{"entry":[{},"%\u2003gop(@plus,x) is the sum of the x's from each processor."]},{"entry":[{},"%\u2003gop(@max,x) is the max of the x's from each processor."]},{"entry":[{},"%\u2003gop(@horzcat,x) is the horizontal concatenation of the x's."]},{"entry":[{},"%\u2003gop(@(x,y)norm([x y]),x) is the 2-norm of all the x's."]},{"entry":[{},"%\u2003Note: @ sign denotes anonymous function"]},{"entry":[{},"for p = 1:nprocs"]},{"entry":[{},"\u2003if p == pid"]},{"entry":[{},"\u2003\u2003dsend(\u2018all\u2019,x);"]},{"entry":[{},"\u2003\u2003z = x;"]},{"entry":[{},"\u2003else"]},{"entry":[{},"\u2003\u2003z = drecv(p);"]},{"entry":[{},"\u2003end"]},{"entry":[{},"\u2003if p == 1"]},{"entry":[{},"\u2003\u2003y = z;"]},{"entry":[{},"\u2003else"]},{"entry":[{},"\u2003\u2003y = F(y,z);"]},{"entry":[{},"\u2003end"]},{"entry":[{},"end"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{},"b":["180","180","120","180","180","180","180"],"i":["a","n","a","n","a","n"]},"In one aspect, the present invention relates to methods for programmatically providing for parallel for loop processing. Referring now to , the method  depicts a flow diagram for interpreting and executing a parallel for loop in a program  being executed by an execution environment -. At step , an execution environment -is executing a program  and at step  interprets a program statement comprising a parallel for loop construct, such as one using the keyword parfor. The execution environment -in evaluating the parallel for loop expression determines what iterations of the loop that the current execution environment -will execute. At step , the execution environment -then processes and evaluates the determined loop expression. For example, if the parfor expression at step  defines loop iterations  to  in 1 step increments in a two pid environment, e.g., pids  and , the execution environment -of pid  may determine the local loop expression for processing at step  are loop elements  to . Then at step , the execution environment -determines if the local loop iteration is the last iteration. If not, the execution environment -executes the loop body at step  and flows back to the step  to determine if it is the last loop iteration for local processing of the parfor. If it is yes, then the execution environment -continues with the next set of program statements of the program . Method  applies to any of the multiple execution environments -that may be running the same program  and executing the same parfor program statement. Each execution environment -will perform steps  through  to process the iterations of the parfor loop expression determined to be for that execution environment -","The parallel technical computing environment  of MATLAB\u00ae also provides for a new keyword of ifpid that is programming language keyword used to conduct a conditional test and execute a block, or body, of statements if the test evaluates to true. The ifpid statement allows the program to execute some statement if the pid of the execution environment is equal to the value of the expression, or the conditional test. The ifpid keyword will determine the pid of the execution environment executing the ifpid program instruction and evaluate the value against the expression to determine if the conditional is true or false. For example, the following statements may be executed on multiple execution environments -, such as pid  and pid :",{"@attributes":{"id":"p-0110","num":"0109"},"tables":{"@attributes":{"id":"TABLE-US-00012","num":"00012"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"ifpid <expression>"]},{"entry":[{},"\u2003% Block A statements"]},{"entry":[{},"else"]},{"entry":[{},"\u2003% Block B statements"]},{"entry":[{},"end"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{},"b":["180","180","1","180","180","180","180","180","180","2","180","180","180","180","180","180","180","180","180","180"],"i":["a","n ","a","n ","a","n ","a","n ","a","n ","a","n ","a","n ","a","n","a","n "]},"In another aspect, the present invention relates to methods for programmatically providing for the ifpid statement processing. Referring now to , the method  depicts a flow diagram for interpreting and executing an ifpid statement in a program  being executed by an execution environment -. At step , an execution environment -is executing a program  and at step  interprets a program statement comprising an ifpid construct. The execution environment -determines its pid to evaluate the conditional expression of the ifpid statement. At step  if the expression of the ifpid evaluates to the value of the pid of the execution environment -, the execution environment -will execute the if statement block at step  and then continue with program flow ate step . Otherwise if the pid is not equal to the value of the expression at step , the execution environment -skips executing the if block statements at step  and continues with program flow at step . In parallel operation mode of execution, multiple execution environments -may be executing the same program  and evaluating the same ifpid construct in accordance with method .","The programming language of the parallel technical computing environment  of MATLAB\u00ae also supports message passing to send and receive messages between execution environments -. Message passing provides for coordination of data and activities between execution environments when executing a program  in parallel. The following is a set of example embodiments of send and receive functions for message passing, for example via a message passing interface :",{"@attributes":{"id":"p-0113","num":"0112"},"tables":{"@attributes":{"id":"TABLE-US-00013","num":"00013"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"function dsend(varargin)"]},{"entry":[{},"%\u2003DSEND Send message"]},{"entry":[{},"%\u2003dsend(to,msg1,msg2,...)"]},{"entry":[{},"%\u2003dsend(\u2018all\u2019,msg1,msg2,...)"]},{"entry":[{},"function [varargout] = drecv(from)"]},{"entry":[{},"%\u2003DRECV Receive message"]},{"entry":[{},"%\u2003[msg1,msg2,...] = drecv(from)"]},{"entry":[{},"%\u2003[msg1,msg2,...,from] = drecv(que)"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{},"b":["180","180","180","180","180","180","180","180"],"i":["a","n","a","n","a","n ","a","n "]},"Many alterations and modifications may be made by those having ordinary skill in the art without departing from the spirit and scope of the invention. Therefore, it must be expressly understood that the illustrated embodiments have been shown only for the purposes of example and should not be taken as limiting the invention, which is defined by the following claims. These claims are to be read as including what they set forth literally and also those equivalent elements which are insubstantially different, even though not identical in other respects to what is shown and described in the above illustrations."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The foregoing and other objects, aspects, features, and advantages of the invention will become more apparent and may be better understood by referring to the following description taken in conjunction with the accompanying drawings, in which:",{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 1A"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 1B"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 2A"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 2B"},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 2C"},{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 4A"},{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 4B"},{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 4C"},{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 5A"},{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIG. 5B"},{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIG. 5C"}]},"DETDESC":[{},{}]}
