---
title: Massively distributed processing system with modular client agent and associated method
abstract: A massively distributed processing system and associated methods are disclosed that provide a processing architecture for utilizing a multitude of widely distributed devices to process distributed project workloads. To provide the processing infrastructure, a modular client agent program, which may include a system component and a separate project component, operates on the distributed devices to process workloads. For different projects, different project components may be provided to run on the base system component. In addition, a device capabilities database and an incentive database can be used by the server system to facilitate operations and encourage participation by client systems. Other databases may also be utilized to enhance system operations and functionality. And a wide variety of applications are possible, including network site testing, network site indexing, distributed data back-up, file sharing, data caching, data conversion, and scientific research, as well as many other distributed projects.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07039670&OS=07039670&RS=07039670
owner: United Devices, Inc.
number: 07039670
owner_city: Austin
owner_country: US
publication_date: 20020612
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"p":["This application is a continuation of application number 09\/648,832, filed Aug. 25, 2000 now U.S. Pat. No. 6,847,995, which is a continuation-in-part application of the following co-pending applications: application Ser. No. 09\/538,543 entitled \u201cDISTRIBUTED PARALLEL PROCESSING SYSTEM HAVING CAPABILITY-BASED INCENTIVES AND ASSOCIATED METHOD,\u201d application Ser. No. 09\/539,023 now abandoned entitled \u201cSWEEPSTAKES INCENTIME MODEL AND ASSOCIATED SYSTEM,\u201d application Ser. No. 09\/539,448 now abandoned entitled \u201cCAPABILITY-BASED DISTRIBUTED PARALLEL PROCESSING SYSTEM AND ASSOCIATED METHOD,\u201d application Ser. No. 09\/539,428 entitled \u201cMETHOD OF MANAGING DISTRIBUTED WORKLOADS AND ASSOCIATED SYSTEM,\u201d application Ser. No. 09\/539,106 now U.S. Pat. No. 6,891,802, entitled \u201cNETWORK SITE TESTING METHOD AND ASSOCIATED SYSTEM,\u201d application Ser. No. 09\/538,542 now U.S. Pat. No. 6,654,783 entitled \u201cNETWORK SITE CONTENT INDEXING METHOD AND ASSOCIATED SYSTEM,\u201d and application Ser. No. 09\/539,107 now abandoned entitled \u201cDISTRIBUTED BACK-UP SYSTEM AND ASSOCIATED METHOD,\u201d each of which was filed on Mar. 30, 2000, and each of which is hereby incorporated by reference in its entirety, and co-pending application Ser. No. 09\/648,832 is also a continuation-in-part application of the following co-pending applications: application Ser. No. 09\/602,740 entitled \u201cMETHOD OF MANAGING WORKLOADS AND ASSOCIATED DISTRIBUTED PROCESSiNG SYSTEM,\u201d application Ser. No. 09\/602,789 entitled \u201cMACHINE GENERATED SWEEPSTAKES ENTRY MODEL AND ASSOCIATED DISTRIBUTED PROCESSING SYSTEM,\u201d application Ser. No. 09\/602,803 entitled \u201cDATA SHARING AND FILE DISTRIBUTION METHOD AND ASSOCIATED DISTRIBUTED PROCESSING SYSTEM,\u201d application Ser. No. 09\/602,844 now abandoned entitled \u201cDATA CONVERSION SERVICES AND ASSOCIATED DISTRIBUTED PROCESSING SYSTEM,\u201d and application Ser. No. 09\/602,983 entitled \u201cCUSTOMER SERVICES AND ADVERTISING BASED UPON DEVICE AITRIBUTES AND ASSOCIATED DISTRIBUTED PROCESSING SYSTEM,\u201d each of which was filed on Jun. 23, 2000, and each of which is hereby incorporated by reference in its entirety.","This invention relates to distributing project workloads among a distributed devices and more particularly to techniques and related methods for managing, facilitating and implementing distributed processing in a network environment.","Prior processing systems have included the technique of multiple users within a company sharing processing time available on a mainframe or central processing system. Using small segments of mainframe processing time, departments within the company would often incur costs associated with using the processing time, which in turn was billed back to each department from the central information technology (IT) organization for the company. In other instances, a company could pay for and utilize processing time made available by third-party companies who possessed an over-capacity of mainframe processing power. These third-party companies would, in effect, create a market for the mainframe processing time that went unused by the internal organizations of that third-party company.","Prior processing techniques have also included distributed processing projects that have utilized the Internet or World Wide Web. These distributed processing research projects have used personal computers (PCs) connected to the Internet to provide processing power to accomplish research project goals. Research project goals have been, for example, identifying large prime numbers, analyzing radio telescope data, and analyzing code keys in an encryption deciphering contest.","One example of a distributed processing project on the Internet is a research project housed at the University of California at Berkeley to analyze sky recording data gathered by SETI (the Search for Extraterrestrial Intelligence). This sky recording data has been gathered for some time from the large Arecibo Radio Telescope in Puerto Rico. The processing power needed to analyze these data recordings was very large. At the peak of SETI's capture activities, SETI had accumulated over 100,000 years of signals to process, as measured by the compute power necessary to process all the signals. To analyze this data, software was developed that could be downloaded to Internet connected PCs so that these PCs could process small slices of these sky recordings. In under a year, this project, called SETI@home (URL in Mar. 2000\u2014www.setiathome.ssl.berkeley.edu) has completely processed this backlog of data and is now returning to the sky recording dataset for further processing tasks. This massively parallel distributed system has a processing throughput of over 10 TFLOPs (terraFLOPS or 10floating point operations per second) running on about 1.8 million Internet connected machines.","Another example of a distributed processing technique was developed and implemented by Distributed.net (URL in Mar. 2000\u2014www.distributed.net) to compete in encryption breaking contests. Distributed.net created and distributed a client software program which may be downloaded by client systems connected to the Internet. This client software then acts as part of a large distributed processing system specifically designed to break encrypted messages on the Internet. Using this processing technique, Distributed.net has won encryption breaking contests sponsored by RSA Labs, which is an Internet security company. In these contests, RSA Labs has offered a monetary prize to the winner of the encryption contest. In organizing its efforts, Distributed.net has offered a share of this monetary prize to the client system that actually breaks the encryption code. In addition, Distributed.net keeps track of overall project statistics, as well as statistics concerning the efforts of its client systems through individual and team rankings by amount of processing completed.","Entropia.com (URL in Mar. 2000\u2014www.entropia.com) has utilized an Internet distributed processing system to compete in contests directed to identifying the largest prime number. Entropia.com also offers its computing power to other research projects. Users may sign on to be part of the distributed processing for free. For the largest prime number contest, Entropia.com, like Distributed.net, offers a monetary prize to the Internet connected PC that comes up with the first prime number achieved in a new order of magnitude. For other research projects, the incentive is simply to be a part of the research project.","Another distributing processing web site is provided by Process Tree Network (URL in Mar. 2000\u2014www.processtree.com). This web site is attempting to sign-up Internet connected computer systems to provide processing power for paying projects. For a project, each partner system, when connected to the Internet, will have client software that downloads a job unit and processes that job unit. The incentive offered by the Process Tree Network are \u201cmicro-payments\u201d for the amount of work completed by any given system. These micro-payments are apparently small amounts of some total project value based upon the amount of the project completed by the given system through the jobs it has processed. In addition, each partner is given a bonus percentage of payments made to persons they sign-up as new partners.","In completely unrelated Internet activities outside the distributed processing arena, there have been a number of sites that have utilized a sweepstakes model as an incentive for consumer behavior. One of the most popular (as of Mar. 2000) sweepstakes sites is IWON.COM (URL as of Mar. 2000\u2014www.iwon.com). IWON.COM is a standard Internet search and content portal that provides an incentive to users by giving them entries to a sweepstakes when the users use the portal. The more the users use the portal, the more entries the user generates, up to a limit, for example, up to 100\/day. At the end of each day, IWON.COM chooses a $10,000 winner from among the entries. At the end of each month, IWON.COM chooses a $1,000,000 winner. And, at the end of an overall sweeps period, IWON.COM plans to draw a single winner for a $10,000,000 grand prize. IWON.COM has created this sweepstakes model to introduce an Internet portal in late 1999 and make it a web site that has as a comparable number of people using it as does Internet portals that have existed for many years, such as, for example, Yahoo.com (URL in Mar. 2000\u2014www.yahoo.com).","The present invention provides a massively distributed processing system and associated methods that utilize an advantageous processing architecture for a multitude of widely distributed devices to process distributed workloads for a plurality distributed processing projects. To provide the infrastructure processing power for the distributed processing system, a modular client agent program, including a system component with a core agent module and a separate project component with at least one task module, is configured to operate on the distributed devices and to process a variety of project workloads. For each different distributed project, different project components or task modules may be provided by a server system to the distributed devices to run on the core agent module or system component. In addition, a capabilities database can be used by a server system to schedule workloads based upon the capabilities of the distributed devices. And an incentive database can be used by a server system to store incentive values representing potential prizes or compensation to the distributed devices for participating in the distributed processing system. Other databases can also be utilized to enhance or further add to system operations and functionality. Furthermore, a wide variety of applications are possible utilizing the distributed processing system of the present invention, including network site testing, network site indexing, distributed data back-up, file sharing, data caching, data conversion, and scientific research, as well as many other distributed projects.","The present invention contemplates the identification of the capabilities of distributed devices connected together through a wide variety of communication systems and networks and the aggregation of these capabilities to accomplish processing, storage, broadcasting or any other desired project objective. For example, distributed devices connected to each other through the Internet, an intranet network, a wireless network, home networks, or any other network may provide any of a number of useful capabilities to third parties once their respective capabilities are identified, organized, and managed for a desired task. These distributed devices may be connected personal computer systems (PCs), internet appliances, notebook computers, servers, storage devices, network attached storage (NAS) devices, wireless devices, hand-held devices, or any other computing device that has useful capabilities and is connected to a network in any manner. The present invention further contemplates providing an incentive, which may be based in part upon capabilities of the distributed devices, to encourage users and owners of the distributed devices to allow the capabilities of the distributed devices to be utilized in the distributed parallel processing system of the present invention.","The number of usable distributed devices contemplated by the present invention is preferably very large. Unlike a small local network environment, for example, as may be used by an Internet Service Provider (ISP), which may include less than 100 interconnected computers systems to perform the tasks required by the ISP, the present invention preferably utilizes a multitude of widely distributed devices to provide a massively distributed processing system. With respect to the present invention, a multitude of distributed devices refers to greater than 1,000 different distributed devices. With respect to the present invention, widely distributed devices refers to a group of interconnected devices of which at least two are physically located at least 100 miles apart. With respect to the present invention, a massively distributed processing system is one that utilizes a multitude of widely distributed devices. The Internet is an example of a interconnected system that includes a multitude of widely distributed devices. An intranet system at a large corporation is an example of an interconnected system that includes a multitude of distributed devices, and if multiple corporate sites are involved, may include a multitude of widely distributed devices. A distributed processing system according to the present invention that utilizes such a multitude of widely distributed devices, as are available on the Internet or in a large corporate intranet, is a massively distributed processing system according to the present invention.",{"@attributes":{"id":"p-0049","num":"0048"},"figref":"FIG. 1A","b":["100","102","102","102"]},{"@attributes":{"id":"p-0050","num":"0049"},"figref":"FIG. 1A","b":["108","110","112","102","118","120","122","104","106","152","102","114","116","119","124","104","108","110","112","126","104","108","110","112","108","110","112","100","108","110","112","104","104"]},"The incentives provided by the incentives block  may be any desired incentive. For example, the incentive may be a sweepstakes in which entries are given to client systems ,  . . .  that are signed up to be utilized by the distributed processing system . Other example incentives are reward systems, such as airline frequent-flyer miles, purchase credits and vouchers, payments of money, monetary prizes, property prizes, free trips, time-share rentals, cruises, connectivity services, free or reduced cost Internet access, domain name hosting, mail accounts, participation in significant research projects, achievement of personal goals, or any other desired incentive or reward.","As indicated above, any number of other systems may also be connected to the network . The element , therefore, represents any number of a variety of other systems that may be connected to the network . The other systems  may include ISPs, web servers, university computer systems, and any other distributed device connected to the network , for example, personal computer systems (PCs), internet appliances, notebook computers, servers, storage devices, network attached storage (NAS) devices, wireless devices, hand-held devices, or any other connected computing device that has useful capabilities and is connected to a network in any manner. The customer systems  represents customers that have projects for the distributed processing system, as further described with respect to FIG. B. The customer systems  connect to the network  through the communication link .","It is noted that the communication links , , , ,  and  may allow for communication to occur, if desired, between any of the systems connected to the network . For example, client systems ,  . . .  may communicate directly with each other in peer-to-peer type communications. It is further noted that the communication links , , , ,  and  may be any desired technique for connecting into any portion of the network , such as, Ethernet connections, wireless connections, ISDN connections, DSL connections, modem dial-up connections, cable modem connections, fiber optic connections, direct T or T connections, routers, portal computers, as well as any other network or communication connection. It is also noted that there are any number of possible configurations for the connections for network , according to the present invention. The client system  may be, for example, an individual personal computer located in someone's home and may be connected to the Internet through an Internet Service Provider (ISP). Client system  may also be a personal computer located on an employee's desk at a company that is connected to an intranet through a network router and then connected to the Internet through a second router or portal computer. Client system  may further be personal computers connected to a company's intranet, and the server systems  may also be connected to that same intranet. In short, a wide variety of network environments are contemplated by the present invention on which a large number of potential client systems are connected.",{"@attributes":{"id":"p-0054","num":"0053"},"figref":"FIG. 1B","b":["150","152","104","134","104","124","126","104","130","134","134"]},"Client systems , as discussed above, may be any number of different systems that are connected to the server systems  through a network , such as client systems ,  . . .  in FIG. A. The client systems  send results  back to the server systems  after the client systems  complete processing any given workload. Depending upon the workload project, the server systems  may then provide results  to customer systems . The customer systems  may be, for example, an entity that desires a given project to be undertaken, and if so, provides the project details and data  to the server systems .",{"@attributes":{"id":"p-0056","num":"0055"},"figref":"FIG. 2A","b":["108","204","208","206","204","104","204","104","102","108","118","108","204","212","202","210","206","206","104","118","102"]},"It is noted that the workload received by client system  and the processing or activity performed may depend up a variety of factors, as discussed further below. In part, this workload allocated by the server system  to each client system ,  and  may depend upon the capabilities of the client system, such as the processing power, disk storage capacity, communications types, and other capabilities available from the various components of the systems within the client system .","The server systems  can select the workloads for the client system  and may control when these workloads are performed, through operational code (i.e., an agent) residing and installed on the client system . Alternatively, the owner or user of the client system  may determine when workloads are procured or obtained from the server systems , as well as when these workloads are performed, for example, by accessing the server systems  through the network . For example, the server systems  may download to the client system  upon request one or more workloads. At the same time, an agent residing on the client system  may operate to process the workload or multiple workloads downloaded to the client system . It is noted, therefore, that the agent may be simultaneously managing more than one workload for any number of projects. When the workload is complete, the agent may inform the owner or user of the client system  the results are ready to be communicated back. The client system  may then upload results to the server system  and download new workloads, if desired. Alternatively, these logistical and operational interactions may take place automatically through control of the agent and\/or the server systems ",{"@attributes":{"id":"p-0059","num":"0058"},"figref":"FIG. 2B","b":["108","108","260","250","260","252","254","256","258","264","262"]},"It is noted, therefore, that the capabilities for client systems ,  . . .  may span the entire range of possible computing, processing, storage and other subsystems or devices that are connected to a system connected to the network . For example, these subsystems or devices may include: central processing units (CPUs), digital signal processors (DSPs), graphics processing engines (GPEs), hard drives (HDs), memory (MEM), audio subsystems (ASs), communications subsystems (CSs), removable media types (RMs), and other accessories with potentially useful unused capabilities (OAs). In short, for any given computer system connected to a network , there exists a variety of capabilities that may be utilized by that system to accomplish its direct tasks. At any given time, however, only a fraction of these capabilities are typically used on the client systems ,  . . . . The present invention can take advantage of these unused capabilities.","It is also noted that along with receiving the workload, the client system  will also receive an agent that manages the completion of the workload. This agent may be software that is customized for the particular computer system and processing capabilities of the client system . For example, if the client system is a personal computer as shown in , the agent may be a program that operates in the background of the computer's operating system. When the agent determines that there is unused processing or other capabilities, the agent may take advantage of it. For example, if the user is using a word processing application to create a document, little processing power is being utilized by the word processing program, leaving the computer's CPU and video processor underutilized. Thus, the agent could execute commands to these processors during dead cycles. In this way, the agent may facilitate the completion of workload processing in a reduced time. In addition, this agent may be self-updating upon connecting to the server systems , so that the agent may be kept up to date with current software revisions and workload activities. It is also noted that the agent may manage work on multiple workloads at the same time, so that any given distributed device connected to the network  may be working on a plurality of workloads at any given time.",{"@attributes":{"id":"p-0062","num":"0061"},"figref":"FIG. 2C","b":["270","270","272","108","270","272","108","272","108","108","272","130","132"]},"The clients system agent  may also include a workload engine , a statistics\/user interface\/incentive advertising block , and a workload package and update processing block . In the example shown in , workloads  pass through the security subsystem  and along line  to the workload package and update processing block . In this block , the agent  may be updated by the server systems . Alternatively, the agent  may determine, when connected to the server systems , whether it needs to be updated and then accomplish that updating automatically. Once the workload package is processed, the workload engine  may receive the workload following line . The workload engine  works on the workload, ultimately completing the workload. The results or status of the workload may then be sent through the security subsystem  following line . The results  may then be provided back to the server systems .","The statistics\/user interface\/incentive advertising block  may provide workload, incentive and other statistics, as well as any other desired interface features, to the user of the client system. For example, the block  may show a user the expected amount of processing time it will take for the client system to complete a workload task based upon the capabilities of the system. As also shown, the block  may receive information following lines  and  from the workload package and update processing block  and from the workload engine . If desired, security information from the security subsystem  could also be displayed to the user of the client system. It is noted that the information displayed to the user of the client system may be modified and selected as desired without departing from the present invention.","With respect to incentive advertising, the block  may also show the user of the client system how this processing time might change depending upon various' possible upgrades to the capabilities of the client system, such as a faster microprocessor, more memory, more disk storage space, etc. Furthermore, the client system capabilities may be shown correlated to the incentives provided to the client system for participation. Thus, the user may be provided information as to how the user's incentives would increase or change depending upon other computer systems or upgraded capabilities the user could acquire. This incentive value increase may also be tied to upgrades to particular vendor's devices. For example, if the user's device is a computer system having an ABC microprocessor, the block  may provide the user information as to increased incentive values based upon an upgrade to a more powerful ABC microprocessor. Similarly, if the user's device is a computer system obtained from ABC, the block  may provide the user information as to increased incentive values based upon an upgrade to a more powerful ABC computer system.",{"@attributes":{"id":"p-0066","num":"0065"},"figref":["FIG. 2D","FIG. 2D"],"b":["276","276","230","230","104","276","221","222","224","226","228","244","246","248","230","221","222","224","226","228","244","246","248","276"]},"In , the processor values interface tab  is the one currently selected by the user. This tab  (Processor Values) includes example information that may be displayed to the user. Assuming that a workload is being processed by the agent client manager, the user may select the button  (Show My Incentive Values) to show the user's current incentive values associated with the workload being performed. The personal incentive values chart  (My Personal Incentive Values) may then be displayed to the user. As shown, the incentive values are provided in a relative scale from 1 to 10. The key designation  represents the incentives associated with the users current central processing unit (CPU) or microprocessor.","As indicated above, this incentive information may also be tied to the specific vendor of the user's CPU, for example, ABC Company's CPU. Thus, as shown, the key designation  (My current processor) and the corresponding bar graph portion  represent incentives for the user's current CPU (e.g., a 166 MHz processor). The key designation  represents the incentives that the user is projected to have if the user were to upgrade the CPU. Again, this upgrade incentive information may be tied to the specific vendor of the user's CPU or to any other vendor, if desired. Thus, as shown, the key designation  (NEW ABC 1 GHz processor!) and the corresponding bar graph portion  represent incentives for an upgrade to a new ABC CPU (e.g., a new ABC 1 GHz processor). In this manner, a user may be provided an incentive to increase the capabilities of the distributed device, and a vendor may be provided advertising so that the user is also directed to a particular upgrade.","Looking further to , other similar incentive related information tabs may be provided for any desired capability of the distributed device. For example, tab  (Memory Values) represents information that may be provided for the memory capabilities of the distributed device. Tab  (Graphics Values) represents information that may be provided for the graphics capabilities of the distributed device. Tab  (Communications Values) represents information that may be provided for the communication capabilities of the distributed device. Tab  (Storage Values) represents information that may be provided for the storage capabilities of the distributed device. Tab  (System Values) represents information that may be provided for the system capabilities as a whole for the distributed device.","In addition to these incentive related information tabs, other tabs may be included to provide information and control for any desired features of the agent client manager. For example, the tab  (Current: Prime Search) represents information that may be displayed to the user about the current workload being performed by the agent client manager, for example, a search for large prime numbers. The tab  (Settings) represents information that may be displayed to the user about various settings for the client agent manager. In particular, the tab  may provide the user the ability to control any desired aspect of the operation of the agent client manager. For example, the user may be able to select a portion of the capabilities that may be utilized (e.g., a maximum of 20% of the system memory), the types of workloads that may be performed (e.g., only scientific research projects), the times when the agent may utilize system resources (e.g., only between 12 to 6 am, or only when the system is idle), or any other desired operational feature. It is noted that in addition to upgrade incentive information indicated above, the user may also be provided information as to how incentives would increase if the user allocated or changed the settings for the agent client manager.","This user selection of operational features allows for workloads to be scheduled or balanced based upon user input and desires. These user vectors, as indicated above, would allow users to dedicate their device capabilities to specific research projects (cancer, Parkinson's disease, Internet, genetics, space science, etc.), to specific non-profit or for profit organizations (Greenpeace, Celera, etc.), educational institutions (University of Texas), a specific group of like minded users, or any other entity or endeavor. This affiliation selection allows the distributed processing system to automatically include a user's device capabilities in a pool dedicated to the chosen affiliation. Additionally, a user could choose to mix various percentages and allocations of device capabilities among multiple affiliations. It is noted that the user need not make any affiliation selection and need not allocate 100 percent of device capabilities. Rather, only a portion of the device capabilities may be allocated to a particular affiliation, leaving the remainder non-allocated and not affiliated. The capability allocation may also be a system-wide (i.e., course) allocation, such as some desired percent of overall device capabilities. The capabilities allocation may also be subsystem specific (i.e., fine) allocation, such as allocation of particular subsystem capabilities to particular affiliations.","Now looking to , the server systems  may be one or more computer systems that operate to identify client system capabilities, organize workloads, and utilize client systems to accomplish a desired task. The server systems  includes a control system  a workload database , and a sweepstakes system , as discussed more below. The workload database  stores any desired project task, which may be broken up into discrete workload tasks WL, WL . . . WLN, as represented by elements ,  . . . . The workload database may also store one or more benchmark workloads (BWL)  that may be utilized to determine client system capabilities in response to a standard workload. Through line , the workload database  communicates with control system . Control system , for example, receives original workload  and transfers it to the interface  through line . The interface  then transfers the workload  to the network  through line . This workload  is ultimately received as workload  by client system ,  or , as shown in FIG. A. The result  is ultimately received by the control system  through interface  and line","In allocating workloads, the control system  may consider the capabilities of the client systems ,  and  to which the control system  is sending workloads. For example, if client  has more processing power than client , the control system  may allocate and send more difficult or larger workloads. Thus, client  may receive WL and WL, while client  would only receive WL3. Alternatively, the workload database  could be organized with differing levels of processing power or capability requirements for each workload. In this way, WL may represent a greater processing or system capability requirement than WL. It should be noted that workload may be a processing task, a data storage task, or tied to any other of a variety of capabilities that may be utilized on the client systems ,  . . . .","As indicated above, to encourage owners or users of client systems to allow their system capabilities to be utilized by control system , an incentive system may be utilized. This incentive system may be designed as desired. Incentives may be provided to the user or owner of the clients systems when the client system is signed-up to participate in the distributed processing system, when the client system completes a workload for the distributed processing system, or any other time during the process. In addition, incentives may be based upon the capabilities of the client systems, based upon a benchmark workload that provides a standardized assessment of the capabilities of the client systems, or based upon any other desired criteria.","One example use of a benchmark workload is to use the benchmark workload to determine incentive values. For example, the server systems  may be designed to send out a standard benchmark workload once an hour to each client system ,  . . . . If a client system is not available at that time for any reason, the workload would not be completed by the client system, and there would be no incentive value generated for that client system. In this example, the benchmark workload may be a timed work-set that would exercise each subsystem with capabilities within the client system that was desired to be measured. A more capable client system would then generate greater incentive values from executing the benchmark workload, as compared to a less capable client system. These incentive values may be utilized as desired to determine what the client system should get in return for its efforts. For example, if the incentive were a sweepstakes as discussed further below, the number of entries in the sweepstakes may be tied to the system's performance of the benchmark workload. Thus, the faster or better the client system performs the benchmark workload, the more entries the client system would receive.","In the embodiment shown in , the server systems  includes a sweepstakes system  that functions with control system  to provide incentives for the users or owners of client systems ,  and  to allow their system capabilities to be used by the server systems . The control system  may determine a sweepstakes entry value  that is sent along line  to the sweepstakes system . The sweepstakes system  may then receive sweepstakes entry  and provide it to the sweepstakes engine  through line . The sweepstakes engine  may process the entries and determine a winner, when desired. In the embodiment shown, therefore, entries to the sweepstakes may be generated each time a unit of work is accomplished by one or more of the subsystems within a client system ,  or  via an agent installed on the device for the purposes of managing and completing units of work. The total entries for any period of time would, therefore, be dynamic depending on how many are received. Odds of winning would then be determined by the total number of entries received and the total number of entries contributable to any given entrant.",{"@attributes":{"id":"p-0077","num":"0076"},"figref":"FIG. 3B","b":["300","104","152","134","340","104","346","344","342","343","345","345","2","343","134","104","134"]},"The customer systems , which represent customers that have projects that they desired to be processed by the distributed processing system, may be connected to the project pre-processing subsystem  to provide projects to the server systems . These projects are processed by the project pre-processing subsystem  and passed to the results\/workloads production subsystem , which produces and sends out workloads  and receives back results . The analytic subsystem  then takes the results and processes them as desired. Completed project information may then be provided from the analytic system  to the customer systems . In this manner, the projects of the customer systems  may be processed and project results reported by the distributed processing system of the present invention.","Also, as shown, the workloads  and the results , or other tasks of the server systems , may be processed and handled by out-sourced host systems , if desired. Thus, some or all of the workloads  may be sent first to out-sourced host systems . Out-sourced host systems  then send workloads A to the client systems  and receive back results A. The out-sourced host systems  then send the results  back to the server systems . It is noted that this out-sourcing of server system tasks may be implemented as desired for any given task that the server systems  may have. It is further noted that, if desired, the server systems  may perform all of the desired functions of the server systems  so that no out-sourced host systems  would be used.",{"@attributes":{"id":"p-0080","num":"0079"},"figref":"FIG. 3C","b":["350","360","130","132","354","360","352","356","356","352","358","350"]},{"@attributes":{"id":"p-0081","num":"0080"},"figref":"FIG. 3D","b":["350","356","360","352","358","354"]},{"@attributes":{"id":"p-0082","num":"0081"},"figref":"FIG. 4","b":["400","104","402","104","402","418","104","404","420","406","104","108","110","112","406","104","108","110","112","423","104","408"]},"At this point, control passes along line  to the \u201cdetermine sweepstakes entries\u201d block . In this block , the server system  determines the entry value for the workload completed or for a standard benchmark or entry workload completed. This entry value may be weighted upon a variety of factors including factors such as the amount of work completed, the difficulty level of the processing required, and the accuracy of the results. It is noted that any desired weighting may be utilized. Thus, it is understood that a wide variety of considerations may be utilized to determine the entry value weighting for the sweepstakes.","Although the weighting determination is shown in block  in , the entry value may also be determined, in whole or in part, when a client system signs on to the distributed processing distributed system of the present invention. For example, if a client system has state-of-the-art CPU, video processor, DSP engine, memory, and large amounts of free disk storage space, a high entry value may be allocated to this client system up-front. In contrast, a client system that has a slow CPU, a weak video processor, no DSP engine, little memory, and little free disk storage space may be allocated a small entry value. In this way, the owners or users of the client systems may be provided immediate feedback as to the potential sweepstakes entry value of their computer systems, devices and system capabilities.","It is further noted that the entry value may take any desired form and may be, for example, a multiplier that will be used for each unit of workload completed. In this way, the owner or user will readily be cognizant that a state-of-the-art system will yield a high multiplier, where as an older system, system capability or device will yield a low multiplier. Such feedback, whether communicated to the owner or user immediately upon signing up or upon completion of each workload, will create an incentive for owners and\/or users to acquire state-of-the-art systems, thereby further increasing the potential processing power of the distributed processing system of the present invention.","In addition, different workload projects may be designated with different entry values, as well. For example, some workload projects may require particular hardware or software processing systems within a client system or device. Thus, the number of client systems that are capable of performing the task would be limited. To further encourage participation by those owners or users with capable systems, the entry value for taking on particular workloads and\/or systems with the desired features may be allocated higher entry values.","Referring back to , control passes along line  to the \u201cprocess entries\u201d block . In this block , the sweepstakes entries are processed and stored as desired. Following line , \u201cend of entry period\u201d decision block  represents a determination of whether the time for getting entries into the sweepstakes has ended. If not, the control continues to line  and back to blocks ,  and\/or , depending upon what is desired. Once the entry period has ended, control flows along line  to \u201cdetermine winners\u201d block . The server system  then identifies from among the entries, who the winning client system or systems will be.","The entry period may be any desired time frame and may include multiple overlapping time frames, as desired. For example, winners may be determined daily for entries each day, monthly for entries within a month, and\/or yearly for entries within one year. In addition, special entry periods may be generated, if desired, for example where a particularly important workload project had a short time frame in which it needed to be completed.",{"@attributes":{"id":"p-0089","num":"0088"},"figref":"FIGS. 1","b":["2","3","4","3","4"]},{"@attributes":{"id":"p-0090","num":"0089"},"figref":["FIGS. 6A and 6B","FIGS. 5A and 5B","FIGS. 7A and 7B","FIG. 8"],"b":"104"},{"@attributes":{"id":"p-0091","num":"0090"},"figref":["FIG. 9","FIG. 10","FIGS. 11A and 11B","FIGS. 12A and 12B","FIGS. 13A and 13B","FIG. 14A","FIG. 14B","FIG. 15"]},"Looking now to , block diagram is depicted of a distributed processing system  for a network site indexing application, according to the present invention. As stated above with respect to , the network  may be a wide variety of networks. For this network site indexing application, the network  may preferably be the Internet having a multitude of network sites  . . . . Each network site  . . .  may have a variety of different content types that may be indexed, ranging from complex sites to relatively simple sites. For example, network site  includes text A, images B, audio streams C, video streams D, files E and other content F. Network site  is less complex and includes text A, images B, and other content C. Both network sites  and  are connected to the network  through communication lines  and , respectively.","As discussed above, the server systems  manage workloads for the client systems ,  . . . . The client systems ,  . . .  process these workloads and produce indexing results. The resulting index may be stored at a centrally managed site, such as central index storage block , or may itself be distributed over the possibly millions of indexing clients ,  . . . , as shown by remote index storage blocks ,  . . . . If remote index storage is utilized, a master database content index may be stored locally, for example, in the central index storage block . This content index may then direct relevant searches to the distributed massively parallel engine for search queries.","Referring now to , a functional block diagram is shown for a network site indexing operation  according to the present invention. As described in  with respect to other systems , there may be any number of computer and processing systems connected to the network . Any one of these others systems  may publish information on the network  for access by any other system connected to the network . This information to be indexed may take a wide variety of forms, including, for example, text, images, audio streams, video streams, databases, spreadsheets, PDF files, Shockwave data, Flash data, applications, data files, chat streams, or any other information, data or data streams that may be accessible on a network site. The distributed processing system of the present invention may have as a workload the task of indexing this potentially massive amount of information.","For example, where the network  is the Internet or a large intranet, a large amount of processing power and time is needed to create an accurate, complete and up-to-date index of the information. The Internet uses an IP (Internet Protocol) address protocol to direct traffic around the Internet. The IP address is the address of a computer attached to a TCP\/IP (Transmission Control Protocol\/Internet Protocol) network. Every system on the network must have a unique IP address. IP addresses are typically written as four sets of numbers separated by periods. The TCP\/IP packet uses 32 bits to contain the IP address, which is made up of a network and host address (NETID and HOSTID). The more bits used for network address, the fewer remain for hosts. Web pages within a particular web site with a unique address may be addressed through URLs (Uniform Resource Locator) associated with that web site. In short, there is a limited, but very large, number of possible IP addresses for uniquely identifiable Internet sites that may be accessed and analyzed to generate an index of Internet sites and web pages via URLs.","The operation diagram of  starts with the \u201cclients receive indexing workloads\u201d block . In this block, the system server  provides the clients systems ,  . . .  with a workload task to index a portion of the information accessible on the network . For example, with the Internet, each workload may be single IP address or groups of URLs or, in some cases, large data types contained on single sites or pages. Following line , the \u201cclients interact with other systems\u201d block  represents the operation of the agent installed on the client systems ,  . . .  to access the network sites, according to the assigned workload, and index the information accessible on that site. This indexing may include all types of information accessible on that site, including text, audio, image, video, etc.","Next, following lines  and , the client systems ,  and  complete the workload tasks, get the results ready for transmission, and sends those results back to the system server  in \u201cclients complete workload\u201d block  and \u201cindexing results sent to server system\u201d block . Control passes along line  to \u201cindex compiled for use\u201d block  where the server system formats and\/or compiles the results for use. For example, the index results may be utilized for accurate, complete and up-to-date search information for the network . As indicated with respect to , the resulting index may be stored remotely or locally following line . Thus, element  represents remote storage of the index, and element  represents central storage of the index. It is noted that the index may also be stored with a mixture of central and remote storage, as desired. In addition, as indicated above, a directory or summary index for the resulting index may be generated and stored centrally, if desired. It is further noted that the summary index may be stored in any other desired fashion, for example, it may be distributed and stored on a number of client systems.",{"@attributes":{"id":"p-0098","num":"0097"},"figref":"FIG. 6A","b":["104","304","308","620","308","1","2","1","11","12","1","640","642","644","2","21","22","2","646","648","650","1","2","652","654","656"]},"It may be expected that different workload projects WL, WL . . . WLN within the workload database  may require widely varying processing requirements. Thus, in order to better direct resources to workload projects, the server system may access various system vectors when a client system signs up to provide processing time and other system or device capabilities to the server system. This capability scheduling helps facilitate project operation and completion. In this respect, the capability vector database  keeps track of any desired feature of client systems or devices in capability vectors CBV1, CBV2 . . . CBVN, represented by elements ,  . . . , respectively. These capability vectors may then be utilized by the control system  through line  to capability balance workloads.","This capability scheduling according to the present invention, therefore, allows for the efficient management of the distributed processing system of the present invention. This capability scheduling and distribution will help maximize throughput, deliver timely responses for sensitive workloads, calculate redundancy factors when necessary, and in general, help optimize the distributed processing computing system of the present invention. The following TABLE 1 provides lists of capability vectors or factors that may be utilized. It is noted that this list is an example list, and any number of vectors or factors may be identified and utilized, as desired.",{"@attributes":{"id":"p-0101","num":"0100"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"294pt","align":"center"}},"thead":{"row":[{"entry":"                      TABLE 1"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Example Client Capability Vectors or Factors"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"112pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["1. BIOS Support:","a.","BIOS Type (brand)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"112pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"b.","ACPI","c.","S1, S2, S3, and S4 sleep\/wake"]},{"entry":[{},{},{},{},"states"]},{"entry":[{},"d.","D1, D2 and D3 ACPI device states","e.","Remote Wake Up Via Modem"]},{"entry":[{},"f.","Remote Wake Up Via Network","g.","CPU Clock control"]},{"entry":[{},"h.","Thermal Management control","i.","Docked\/Undocked state control"]},{"entry":[{},"j.","APM 1.2 support","k.","Hotkey support"]},{"entry":[{},"l.","Resume on Alarm, Modem Ring","m.","Password Protected Resume from"]},{"entry":[{},{},"and LAN",{},"Suspend"]},{"entry":[{},"n.","Full-On power mode","o.","APM\/Hardware Doze mode"]},{"entry":[{},"p.","Stand-by mode","q.","Suspend to DRAM mode"]},{"entry":[{},"r.","Video Logic Power Down","s.","HDD, FDD and FDC Power Down"]},{"entry":[{},"t.","Sound Chip Power Down","u.","Super I\/O Chip Power Down"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"112pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["2. CPU Support:","a.","CPU Type (brand)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"112pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"b.","MMX instruction set","c.","SIMD instruction set"]},{"entry":[{},"d.","WNI instruction set","e.","3DNow instruction set"]},{"entry":[{},"f.","Other processor dependent","g.","Raw integer performance"]},{"entry":[{},{},"instruction set(s)"]},{"entry":[{},"h.","Raw FPU performance","i.","CPU L1 data cache size"]},{"entry":[{},"j.","CPU L1 instruction cache size","k.","CPU L2 cache size"]},{"entry":[{},"l.","CPU speed (MHz\/GHz . . . )","m.","System bus (MHz\/GHz . . . ) speed"]},{"entry":[{},{},{},{},"supported"]},{"entry":[{},"n.","Processor Serial Number","o.","CPUID"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"112pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["3. Graphic Support","a.","Graphics type (brand)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"112pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"b.","# of graphics engines","c.","Memory capacity"]},{"entry":[{},"d.","OpenGL support","e.","Direct3D\/DirectX support"]},{"entry":[{},"f.","Color depth supported","g.","MPEG 1\/II decode assist"]},{"entry":[{},"h.","MPEG1\/II encode assist","i.","OS support"]},{"entry":[{},"j.","Rendering type(s) supported","k.","Single-Pass Multitexturing support"]},{"entry":[{},"l.","True Color Rendering","m.","Triangle Setup Engine"]},{"entry":[{},"n.","Texture Cache","o.","Bilinear\/Trilinear Filtering"]},{"entry":[{},"p.","Anti-aliasing support","q.","Texture Compositing"]},{"entry":[{},"r.","Texture Decompression","s.","Perspectively Correct Texture"]},{"entry":[{},{},{},{},"Mapping"]},{"entry":[{},"t.","Mip-Mapping","u.","Z-buffering and Double-buffering"]},{"entry":[{},{},{},{},"support"]},{"entry":[{},"v.","Bump mapping","w.","Fog effects"]},{"entry":[{},"x.","Texture lighting","y.","Video texture support"]},{"entry":[{},"z.","Reflection support","aa.","Shadows support"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"112pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["4. Storage Support","a.","Storage Type (brand)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"112pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"b.","Storage Type (fixed, removable,","c.","Total storage capacity"]},{"entry":[{},{},"etc.)"]},{"entry":[{},"d.","Free space","e.","Throughput speed"]},{"entry":[{},"f.","Seek time","g.","User dedicated space for current"]},{"entry":[{},{},{},{},"workload"]},{"entry":[{},"h.","SMART capable"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"112pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["5. System","a.","System Type (brand)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"112pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"b.","System form factor (desktop,",{},{}]},{"entry":[{},{},"portable, workstation, server, etc.)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"112pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["6. Communications Support","a.","Type of Connection (brand of ISP)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"112pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"b.","Type of Connection Device (brand","c.","Hardware device capabilities"]},{"entry":[{},{},"of hardware)"]},{"entry":[{},"d.","Speed of connection","e.","Latency of connection"]},{"entry":[{},"f.","Round trip packet time of","g.","Number of hops on connection type"]},{"entry":[{},{},"connection"]},{"entry":[{},"h.","Automatic connection support","i.","Dial-up only (yes\/no)"]},{"entry":[{},{},"(yes\/no)"]},{"entry":[{},"j.","Broadband type (brand)","k.","Broadband connection type"]},{"entry":[{},{},{},{},"(DSL\/Sat.\/Cable\/T1\/Intranet\/etc.)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"112pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["7. Memory","a.","Type of memory error correction"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"112pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},{},{},{},"(none, ECC, etc.)"]},{"entry":[{},"b.","Type of memory supported (EDO,","c.","Amount of total memory"]},{"entry":[{},{},"SDRAM, RDRAM, etc.)"]},{"entry":[{},"d.","Amount of free memory","e.","Current virtual memory size"]},{"entry":[{},"f.","Total available virtual memory size"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"112pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["8. Operating System","a.","Type of operating system (brand)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"112pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"b.","Version of operating system","c.","Health of operating system"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"112pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["9. System application software","a.","Type of software loaded and\/or"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"112pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},{},{},{},"operating on system"]},{"entry":[{},"b.","Version of software","c.","Software features enabled\/disabled"]},{"entry":[{},"d.","Health of software operation"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]}]}}]}}},{"@attributes":{"id":"p-0102","num":"0101"},"figref":"FIG. 6B","b":["600","602","612","104","108","110","112","604","606"]},"This capability scheduling and management based upon system related vectors allows for efficient use of resources. For example, utilizing the operating system or software vectors, workloads may be scheduled or managed so that desired hardware and software configurations are utilized. This scheduling based upon software vectors may be helpful because different software versions often have different capabilities. For example, various additional features and services are included in MICROSOFT WINDOWS '98 as compared with MICROSOFT WINDOWS '95. Any one of these additional functions or services may be desired for a particular workload that is to be hosted on a particular client system device. Software and operating system vectors also allow for customers to select a wide variety of software configurations on which the customers may desire a particular workload to be run. These varied software configurations may be helpful, for example, where software testing is desired. Thus, the distributed processing system of the present invention may be utilized to test new software, data files, Java programs or other software on a wide variety of hardware platforms, software platforms and software versions. For example, a Java program may be tested on a wide proliferation of JREs (Java Runtime Engines) associated with a wide variety of operating systems and machine types, such as personal computers, handheld devices, etc.","From the customer system perspective, the capability management and the capability database, as well as information concerning users of the distributed devices, provide a vehicle through which a customer may select particular hardware, software, user or other configurations, in which the customer is interested. In other words, utilizing the massively parallel distributed processing system of the present invention, a wide variety of selectable distributed device attributes, including information concerning users of the distributed devices, may be provided to a customer with respect to any project, advertising, or other information or activity a customer may have to be processed or distributed.","For example, a customer may desire to advertise certain goods or services to distributed devices that have certain attributes, such as particular device capabilities or particular characteristics for users of those distributed devices. Based upon selected attributes, a set of distributed devices may be identified for receipt of advertising messages. These messages may be displayed to a user of the distributed device through a browser, the client agent, or any other software that is executing either directly or remotely on the distributed device. Thus, a customer may target particular machine specific device or user attributes for particular advertising messages. For example, users with particular demographic information may be targeted for particular advertisements. As another example, the client agent running on client systems that are personal computers may determine systems that are suffering from numerous page faults (i.e., through tracking operating system health features such as the number of page faults). High numbers of page faults are an indication of low memory. Thus, memory manufacturers could target such systems for memory upgrade banners or advertisements.","Still further, if a customer desires to run a workload on specific device types, specific hardware platforms, specific operating systems, etc., the customer may then select these features and thereby select a subset of the distributed client systems on which to send a project workload. Such a project would be, for example, if a customer wanted to run a first set of simulations on personal computers with AMD ATHLON microprocessors and a second set of simulations on personal computers with INTEL PENTIUM III microprocessors. Alternatively, if a customer is not interested in particular configurations for the project, the customer may simply request any random number of distributed devices to process its project workloads.","Customer pricing levels for distributed processing may then be tied, if desired, to the level of specificity desired by a particular customer. For example, a customer may contract for a block of 10,000 random distributed devices for a base amount. The customer may later decide for an additional or different price to utilize one or more capability vectors in selecting a number of devices for processing its project. Further, a customer may request that a number of distributed devices be dedicated solely to processing its project workloads. In short, once device attributes, including device capabilities and user information, are identified, according to the present invention, any number of customer offerings may be made based upon the device attributes for the connected distributed devices. It is noted that to facilitate use of the device capabilities and user information, capability vectors and user information may be stored and organized in a database, as discussed above.","Referring now to , a block diagram depicts a distributed processing system  that allows customers to select client system attributes, such as device capabilities and user characteristics, according to the present invention. In this embodiment, the network  is depicted as the Internet to which server systems , customer A, customer B, and client systems A, B . . . C are connected. These systems are connected through communication links , A, B, A, B . . . C, respectively. As noted above, these communication links may include any of a wide variety of devices and\/or communication techniques for allowing a system to interface with other connected systems.","As shown in , and as discussed above, the customers A and B may desire to send information or projects, such as advertisements (ADV) A and B and\/or projects (PROJ) A and B, to groups of client systems that have particular or selected capabilities. The number of different groups of client systems is as varied as the capability and user data available for those client systems. The client systems A represent client systems that include a first set (Set 1) of desired attributes. The client systems B represent client systems that include a second set (Set 2) of desired attributes. And the client systems C represent client systems that include a Nth set (Set N) of desired attributes. Once attributes are selected, the client systems with those attributes may be accessed as desired by customers A and B. For example, customer A may send its advertisement to client systems B. Customer B may send its advertisement to client systems A. The project A from customer A may be processed by client systems C. And the project B from customer B may be processed by client systems B. It is noted, therefore, that any combination of desired attributes, such as device capabilities and user characteristics, may be identified and utilized to satisfy customer objectives, whether those objectives be advertising, project processing, or some other desired objective.",{"@attributes":{"id":"p-0110","num":"0109"},"figref":"FIG. 12B","b":["1250","1252","1254","1256","1250","104","104","104","104"]},{"@attributes":{"id":"p-0111","num":"0110"},"figref":["FIG. 7A","FIG. 7A","FIG. 1A","FIG. 1A","FIG. 7A"],"b":["100","106","106","106","106","106","116","102","106","108","110","112","116","116","116","108","110","112"]},"Site testing is typically desired to determine how a site or connected service performs under any desired set of test circumstances. With the distributed processing system of the present invention, site performance testing may be conducted using any number of real client systems ,  and , rather than simulated activity that is currently available. Several tests that are commonly desired are site load tests and quality of service (QoS) tests. Quality of service (QoS) testing refers to testing a user's experience accessing a network site under normal usability situations. Load testing refers to testing what a particular network site's infrastructure can handle in user interactions. An extreme version of load testing is a denial-of-service attack, where a system or group of systems intentionally attempt to overload and shut-down a network site. Advantageously, the current invention will have actual systems testing network web sites, as opposed to simulated tests for which others in the industry are capable.","Network site B and the multiple interactions represented by communication lines B, C and D are intended to represent a load testing environment. Network site A and the single interaction A is indicative of a user interaction or QoS testing environment. It is noted that load testing, QoS testing and any other site testing may be conducted with any number of interactions from client systems desired, and the timing of those interactions may be manipulated and controlled to achieve any desired testing parameters. It is further noted ,that periodically new load and breakdown statistics will be provided for capacity planning.",{"@attributes":{"id":"p-0114","num":"0113"},"figref":"FIG. 7B","b":["700","108","110","112","702","714","108","110","112","704","716","718","108","110","112","104","706","708","720","710"]},{"@attributes":{"id":"p-0115","num":"0114"},"figref":["FIG. 8","FIG. 1A"],"b":["800","102"]},"Referring back to , client systems ,  . . .  are shown each having a back-up data blocks ,  . . . . Customer systems  is shown as having data , which is desired to be backed-up with the distributed back-up system . The server systems  manage the flow of data from the data  and the client systems that have extra storage space represented by back-up data blocks ,  . . . . In operation, the server systems  identifies client system storage capabilities. With this information, the server systems  can receive data for back-up from any system on the network . It is noted, and as indicated with respect to , the client systems ,  . . .  and the customer systems  may communicate directly with each other in peer-to-peer type communications.","The server systems  may also manage the storage and transfer of data so that the data will be readily retrievable once backed-up and stored on the client systems ,  . . . . If desired, an summary index or directory of the backed-up data may be stored centrally on the server systems , or may be stored remotely on the client systems ,  . . . . It is also noted that the server systems  may also distribute data back-up workloads so that each portion of the data  is stored redundantly on at least two of the client systems , . This redundancy provides added security should any one or more client systems suddenly cease to be operational.","Looking now to , a block diagram is depicted of an alternative representation of an interconnection fabric for a distributed processing system environment , according to the present invention. In this diagram and as described above, the network environment may be the Internet, an internal company intranet, a local area network (LAN), a wide area network (WAN), a wireless network, a home network, or any other system that connects together multiple systems and devices. In addition, the server systems and clients systems may be interconnected by a variety of possible connection interfaces, for example, Ethernet connections, wireless connections, ISDN connections, DSL connections, modem dial-up connections, cable modem connections, direct T or T connections, fiber optic connections, routers, portal computers, as well as any other network or communication connection. It is noted, therefore, as discussed with respect to other embodiments such as the embodiment of , that systems may be coupled into an interconnected fabric in any of a variety of ways and communications can potentially occur directly or indirectly between any of the systems coupled into the fabric, as would be understood by those of skill in the art.","Within this environment, as depicted in , server systems  are interconnected with any number of client systems, for example, client systems A, B, C, D, E, F, G, H, I, J, K and L. In addition, these client systems may also include idle client systems A, B, and C, as discussed further below. Furthermore, these client systems may include client system A with a component A, client system B with a component B, and client system C with a component C. It is also noted that the interconnection fabric may include any number of devices that are not client systems, in that they themselves are not providing components or processing capabilities for the distributed processing system of the present invention. Nevertheless, these devices may be considered part of the system because they may relay, interpret, process or otherwise transmit or receive information from or to client systems that are part of the distributed processing system.","Aggregation of component level resources, according to the present invention, will now be discussed. As described above, the capabilities of client systems are determined for purposes of allocating, scheduling and managing distributed processing workloads. In other words, each of the client systems may be made up of many individual subsystems with various capabilities. In some cases, it may occur that particular components on different machines may provide added value if combined or aggregated. Thus, utilizing subsystem or component level resources from a heterogeneous group of devices may be the most efficient or otherwise advantageous way of taking advantage of these resources to complete various desired tasks.","Referring now more particularly to , the client systems A, B and C may have component A, component B and component C, respectively, that are better utilized in combination. For example, client system A may have a fast processor, a high-speed network connection, but little available storage space. Client system B may have large amounts of available free storage space but little processing power. Client system C may also have a fast processor, but relatively little available storage space. In this example, a workload that requires both a large storage capacity and a fast processor may be efficiently completed by dedicating component level resources to various parts of the workload from different machines. Thus, the workload may be managed by having client systems A and C processing data stored on and transmitted from client system B. Once clients systems A and C process data, this resulting data may then be transmitted back to client system B for aggregation and eventual transmission back to the server systems . The client system B, therefore, essentially acts as a server for a workload subset, sending out portions of a subset workload, receiving back the processed data, and aggregating the data to build a completed workload subset.","It is noted that any number of different components from different client systems may be aggregated, as desired. For example, for wireless devices, DSP processing and storage components could be aggregated with components from other client systems. For display devices, graphics rendering power could be aggregated. For relatively dumb machines, such as connected household appliances, vending machines, etc., slow-speed processing components could be aggregated. In short, an appropriate workload may include instructions to numerous client systems that will enable collaboration and aggregation of component level resources. Such instructions may include things, such as, where to receive input, where to send output, and ultimately which client systems return final results.","It is further noted that the control instructions may be de-centralized as well. In other words, as indicated above, client systems may communicate directly with each other, for example, in a peer-to-peer fashion. In this way, workload communications may occur directly between client systems, and workload control and management may occur through the client system agents located on client systems.","Still referring to , idle system determination will now be discussed. As stated above, client system capabilities are determined and utilized within the distributed processing system of the present invention. The more idle any particular client system, the more processing it is arguably able to accomplish, and the more incentives it is likely to receive. In other words, the client system capabilities may be utilized more often and more intensely if the client system is more idle. As such, it is advantageous to identify idle client systems and allocate them to more processor and time sensitive tasks. By identifying these idle client systems, resources available on the network at any given time may be more fully utilized, and otherwise idle resources may be utilized for highly intensive, real-time activities that would otherwise require dedicated devices. Examples of such real-time activities include data caching, indexing, etc. In , idle client systems are designated as A, B and C.","Identifying idle resources may be determined in any of a variety of ways. It is possible, for example, to simply look at whether a machine is not being used or has low processor utilization at any given time. This simple determination, however, may not yield an accurate picture of how idle a client system may or may not be over a given time period. More particularly, discovery methods may be implemented to identify the activity of a variety of client system components and subsystems. For example, subsystems may be monitored, such as network activity, device output activity, user input, processing activity, executing task monitoring, or mode of operation parameters (e.g., mobile or power management modes, stationary or powered mode). In addition, any number of other device vectors may be monitored or analyzed to determine the true usage and idleness of a client system.","The following TABLE 2 provides a list of idleness vectors or factors that may be utilized in determining the level of device usage or idleness. In particular, TABLE 2 provides two primary categories of activities to monitor or analyze for determination of how idle a client system may or may not be. These activities are user activity and device activity. By monitoring, analyzing and tracking these client system elements and activities over time, a better determination of device usage and idleness may be made. It is noted that the list provided in TABLE 2 is an example list, and any number of categories, vectors or factors may be identified and utilized, as desired, according to the present invention.",{"@attributes":{"id":"p-0127","num":"0126"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"301pt","align":"center"}},"thead":{"row":[{"entry":"                    TABLE 2"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Example Client Idleness Vectors or Factors"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"112pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["1. User Activity (e.g., monitor input","a.","keyboard input"]},{"entry":"activities, monitor output activities,"},{"entry":"monitor time elapsed since last input"},{"entry":"event and between input events, etc.)"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"119pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"112pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"b.","mouse input","c.","microphone\/voice input"]},{"entry":[{},"d.","tablet input","e.","pen input"]},{"entry":[{},"f.","touch screen input","g.","joystick input"]},{"entry":[{},"h.","gamepad input","i.","video output"]},{"entry":[{},"j.","printer output","k.","any other user activity that could be"]},{"entry":[{},{},{},{},"utilized to classify if a device is idle"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"112pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["2. Device Activity (e.g., monitor","a.","power state (e.g., time since last"]},{"entry":["utilization levels, monitor time elapsed",{},"power state change event)"]},{"entry":"since last device activity, monitor time"},{"entry":"between changes in device utilization"},{"entry":"levels, etc.)"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"119pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"112pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"b.","mobility state (e.g., time since","c.","screen saver activity or trigger (e.g.,"]},{"entry":[{},{},"device last in mobile state)",{},"time elapsed since screensaver"]},{"entry":[{},{},{},{},"activity or trigger)"]},{"entry":[{},"d.","screen output (e.g., time elapsed","e.","network or communication packets"]},{"entry":[{},{},"since last screen output, paint event",{},"sent or received (e.g., time elapsed"]},{"entry":[{},{},"or pixel change)",{},"since last network or"]},{"entry":[{},{},{},{},"communications activity)"]},{"entry":[{},"f.","storage device activity (e.g., time","g.","processor, DSP, microcontroller,"]},{"entry":[{},{},"elapsed since last storage device",{},"embedded device, or other"]},{"entry":[{},{},"activity, such as hard drives, flash",{},"processor activity (e.g., time"]},{"entry":[{},{},"memory cards, removable drives,",{},"elapsed since last processor"]},{"entry":[{},{},"CD drives, DVD drives, etc.)",{},"activity)"]},{"entry":[{},"h.","processor, DSP, microcontroller,","i.","tasks or processes executing (e.g.,"]},{"entry":[{},{},"embedded device, or other",{},"time elapsed since change in"]},{"entry":[{},{},"processing device utilization (e.g.,",{},"number of tasks or processes"]},{"entry":[{},{},"change in utilization levels)",{},"executing)"]},{"entry":[{},"j.","task or process device utilization","k.","any other device activity that could"]},{"entry":[{},{},"(e.g., time since change in task or",{},"be used to classify if a device is idle"]},{"entry":[{},{},"process device utilization)"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]}]}}]}}},"As a further example of the usefulness of this determination, reference is made back to FIG. . Server systems  may have, for example, a large, intensive task that it would like to place on these idle devices. After using a number of the vectors in TABLE 2 to determine the utilization level for client systems, the server systems  determines that client systems A, B and C are idle and capable of handling significant time sensitive processing tasks. For example, idle client systems A, B and C may be personal computers that can act as a local internet cache for other connected devices, such as some of the other client systems depicted in , that are interested in a data type that benefits from a local network cache. Thus, data or content may be transmitted from a remote network site to the idle machines A, B and C. These idle devices A, B and C may then re-transmit this same data or content to other connected devices also interested in the data or content.","One example for such network caching is Internet video or multimedia broadcast events that are desired to be viewed or received by a very large number of geographically close connected devices at about the same time. In order to meet the demand of these connected devices, web sites broadcasting an event have to be able to handle a huge increase in network traffic over a short period of time. By locally caching the transmission to idle client systems, a web site can reduce the direct demand on its own resources. This is so because other connected devices may receive a re-transmitted broadcast, although delayed, from the idle client system. It is noted that according to the present invention idle client systems A, B and C may work independently or in combination. Even though idle client systems are suited for providing the caching function, it is also noted that that network caching may be accomplished using one or more client systems regardless of their respective levels of idleness.",{"@attributes":{"id":"p-0130","num":"0129"},"figref":"FIG. 10","b":["270","1010","1006","1004","1002","1008","1012","1014","1016","1018","1020","270","1010"]},"As depicted, the capabilities subsystem  includes an idle system monitor , as described above, that monitors and analyzes user and device activities associated with the client system to determine the level of activity or idleness for the client system. The information determined by this idle system monitor  may then be communicated externally, for example, through the security subsystem  to the server systems . The server systems  may then store and analyze system idleness data from across the distributed processing system. This idleness data may become part of the capabilities database that is utilized to allocate and manage workloads and processing system resources.","Still referring to , the workload processor  includes a machine entry generation subsystem . As described above, the workload processor  may send completed workloads back to server systems  to generate sweepstakes entries for the host client system. In this way, when the incentive is a sweepstakes, the client system may generate entries by completing workloads. The machine entry generation subsystem  refers to this entry generation through workload completion. As discussed above, the workload processed to generate entries may be a project workload, an entry workload, or any other workload, as desired.",{"@attributes":{"id":"p-0133","num":"0132"},"figref":"FIGS. 11A and 11B"},"Looking first to , an entry workload process flow  is depicted that provides machine generated sweepstakes entries. Process moves from start block  to block  in which entry workloads are loaded on client systems. Next, process flows to block  which represents a periodic timer or other timing control for entry workload processing. After this timing control, the client system executes or processes the entry workload in block . In block , a sweepstakes entry is thereby generated and returned to the server system  based upon the completion of this entry workload. Process control then may proceed back to the periodic timing block , where timing control determines when the entry workload is next processed. The completed workload represents the machine generated sweepstakes entry.",{"@attributes":{"id":"p-0135","num":"0134"},"figref":["FIG. 11B","FIG. 11A"],"b":["1150","1150","1100","1102","1106","104","1104","1108","104","1110","1106","1150","1100","1150"]},"One example utilizing the process  or the process  is for server systems  to query the client systems for entry workload processing at regular time intervals. If a distributed device returns a completed entry workload back within a selected period of time from the distribution of the entry workload, the server system may conclude that the distributed device should receive an entry because the distributed device is providing resources to the distributed processing system. In this way, the server systems  may determine at regular intervals whether a given client system is working on project workloads for the distributed processing system. Alternatively, the client system agent may locally control the workload processing and may, for example, cause the client system to process and generate entries at regular time intervals. It is noted that non-regular and varying time intervals may also be utilized and that combinations of remote and local control may also be utilized, as desired.","The timing of when a client system processes the entry workload, therefore, may be determined locally by the client system agent or remotely, for example, through commands sent by the server systems . In addition, periodic timing control may also be accomplished through various combinations of control routines residing locally and remotely. It is further noted that any number of different variations may be utilized to provide machine generated entries to a sweepstakes, according to the present invention. Thus, a client system may generate sweepstakes entries in any of a variety of ways and still have machine generated sweepstakes entries, according to the present invention.",{"@attributes":{"id":"p-0138","num":"0137"},"figref":["FIGS. 13A and 13B","FIG. 13A","FIG. 13B"],"b":"1300"},"Converting file types, web pages, graphics images, etc., between device types can be a highly intensive processing task. Example devices that often need converted data are wireless devices, such as pagers and cell phones, that request Internet web page information from their respective device servers. The device server, instead of incurring the overhead of reformatting the requested data for the wireless devices, may instead distribute the requested page or data address, the device type information of the requesting device, and return address for the reformatted data. According to the present invention, the data conversion, translation or processing may be performed by a client system of the distributed processing system of the present invention. The resulting data may then be returned or provided to the original requesting device. In addition to data formatting for cell phones, language conversion, text translation and media translation services, or any other desired data conversion can also be hosted for a customer through the distributed processing system of the present invention.","It is noted that the data conversion operation contemplated by the present invention is not limited to any particular requesting device, any particular service provider, any particular type of data to be processed, any particular type of resulting processed data, or any particular data source. Thus, the data processed may include voice, text, application, image, source code, or any other data type or combination of data types, and the resulting processed data may also include voice, text, application, image, or any other data type or combination of data types. According to the present invention, the distributed processing system is utilized to process any data that is desired by a requesting device and that must be converted or processed before being provided to the requesting device. For example, end-user devices connected to the Internet, such as personal computers, may sign up for data conversion services through the server system so that the end-user device may request data conversion of any desired data, file, web site content, etc. Language translations and data formatting for connected wireless are just two examples of such applications for the present invention.","Looking now to the embodiment of , the network  is depicted as the Internet, and the requesting device is one or more wireless devices  connected to the Internet  through communication links  and to the wireless device server systems  through communication link . The data to be converted, translated or otherwise processed is represented by block  and may be, for example, content from an Internet web site that is connected to the Internet through communication link . Also, as shown in , a massively parallel distributed network (MPDN) server  is connected to the Internet  through communication link . The wireless device server systems , or any other connected system that desires to off-load data conversion processing requirements (e.g., web site content servers), are connected to the Internet  through communication links  and to the MPDN server  through communication links . Any number of client systems ,  . . .  may also be connected to the Internet , through communications links ,  . . . , respectively. As also stated above, any of the connected devices may communicate with each other in any of a wide variety of communication techniques (e.g., wireless, electrical, digital, analog, light-based, etc.) and protocols (e.g., static or dynamic IP addresses), and through any number of other devices, as would be understood by one of skill in the art.","In the application contemplated by , the wireless devices  at times request data, for example, images or text from a web site, that must be converted, translated or otherwise processed by wireless device server systems  before it can be transmitted to, and displayed on, a requesting wireless device. Instead of converting the information, the wireless device servers systems  may request that the MPDN server  accomplish the data conversion or translation. The device server systems  may then provide to the MPDN server  any pertinent information, such as information concerning the requesting device, the nature of the data requested, and the processing needed for the data. The MPDN server  may then utilize one or more of the client systems ,  . . .  to process the data from block  for transmission to the requesting device. In this way, the wireless device server systems  may off-load burdensome and process-intensive conversion tasks to the distributed processing system of the present invention.","It is noted the transmission of processed data to the requesting wireless device  may occur in a variety of ways. For example, the processed data may be transmitted from a client system  to the server , then to the wireless device server  and finally to the wireless devices . Alternatively, the processed data may be transmitted from a client system to the wireless device server , and then to the wireless devices . Still further, the processed data may be transmitted directly from a client system to the wireless devices.",{"@attributes":{"id":"p-0144","num":"0143"},"figref":"FIG. 13B","b":["1350","1352","1306","1354","1304","104","104","1304","104","104","108","110","112","1356","1358","1360"]},"As shown in , the device server or the content server  may communicate data and other pertinent information for a conversion directly to the client systems. For example, the MPDN server  may provide access to a group of client systems for data conversion purposes for given periods time (e.g., monthly client group allocations), or may provide identities of groups of client systems that may be used at the time a conversion is needed. Once the identity and allocation of client systems to a particular device server or content server is made, the device server or content server may communicate directly with the client systems. In addition, the device server or content server may provide directly to a requesting device the identity of the one or more client systems accomplishing the data conversion. As shown in , the requesting device, therefore, may communicate directly with the client system or systems to provide pertinent information concerning the data conversion requested. The client system may then, for example, directly download the desired content and perform the desired data conversion. It is further noted that in addition to the embodiments described above with respect to , other methods for requesting, processing and providing data to and from the requesting device may be implemented with distributed processing system of the present invention, such as caching processed data for later transmission.",{"@attributes":{"id":"p-0146","num":"0145"},"figref":["FIGS. 14A and 14B","FIG. 14A","FIG. 14B"],"b":["1400","1450"]},"Looking now to , a block diagram is depicted of a distributed processing system  that provides data transmission caching or other local distribution, according to the present invention. In the embodiment of , server systems  are connected through communication link  to the Internet backbone . The Internet backbone  represents the very high speed connections that carry data long distances, for example, T or fiber optic lines that carry Internet data across the United States. A web site  is connected to the Internet backbone  through communication link , which represents a geographically local connection. The connection block  represents a geographically remote communications link, such as a POP server, head-end machine, telephone line central office, cell site, etc. This communications block  is connected to the Internet backbone  with a communications link , which also represents a geographically local connection. A variety of client devices and non-client devices A, B, C, D, E and F may be connected below the connection block . It is noted that interface  represents, for example, a secondary network on which client devices D, E and F are connected, such as a home network.","In the embodiment shown in , web site  may be desiring to provide content that is in high demand, over a short period of time. An example of such an event is a live Internet multimedia broadcast. For such an event, there may be a huge influx of devices trying to download the content from the web site  over a short period of time. The web site  may be unable to meet this extremely large demand, requiring the web site  to shut down.","According to the present invention, the web site  may off-load some or all of its data handling requirements by using the distributed processing system of the present invention for data caching. The web site  may contact server systems  and request data caching services. The server systems  may then identify a local machine, such as client device E, to act as a local distributor of the content for web site . For example, one or more idle client devices that have been identified, as discussed above, may be utilized as local distributor client device E. The local distributor client device E may first download the content and pass it on to other client and non-client devices B, C and D through communication links A, B and C. It is noted that this caching will be aided if the client and non-client devices receiving the cached data are relatively short communication hops from local distributor client device E.","This data or network caching allows data to be streamed to an end user level device, which may then pass the data on to other end user devices. Thus, the downstream communications may be limited, thereby taking the distribution burden off of the web site. For example, web site  may have a large streaming video or multimedia file that is experiencing a heavy load from a given set of network devices. This data file may be cached by a machine, such as client device E, that is below from a communication link . Then, other devices that are also below this communication link  may download the streaming video data from the client device E. This caching eliminates the need to repeatedly send the same data through the same communication links to requesting devices that are located below common communication links. It is noted that the file and data distribution possibilities for this peer file access, caching and data transmission, according to the present invention, are wide and varied and should not be seen as limited to the embodiment shown in FIG. A.",{"@attributes":{"id":"p-0151","num":"0150"},"figref":["FIG. 14B","FIG. 9","FIG. 14B","FIG. 14B"],"b":["1450","104","108","108","108","108","108","108","108","108","108","108","108","108","108","108","108","108","1452"]},"A client agent, as discussed above, installed on the client systems A, B, C, D, E, F, G and H includes functionality that facilitates a number of services with respect to data transmission and sharing. First, the client agent provides a protected data storage area accessible to outside devices, which is represented by the SD block within each client system in FIG. B. This special storage space protects the device from outside devices accessing other storage areas on the device while allowing data to be shared and accessed by other devices and simultaneously used by the local client agent.","These shared data (SD) blocks provide mechanisms that enable a wide variety of possible interactions among the client systems A, B, C, D, E, F, G and H. For example, the data sharing mechanism may provide a space for a cache of other device addresses attached to the network for both communication purposes as well as security purposes. The mechanism may also provide a simple indexing system that is automatically re-indexed when content is added or removed from the storage area. This indexing system may provide a mechanism for other client agents to perform discovery on the local client information and visa versa. Through information stored within this shared data, the distributed processing system of the present invention facilitates many distributed file system applications such as distributed resume posting, distributed caching, distributed advertisement serving, etc. In addition to the above, the storage block (SD) within each client system may include an interface for displaying or playing data types (such as images, audio files, video files, etc.) stored both locally and\/or remotely on other client devices. This would enable simple picture sharing, for example, between remote families connected via the internet, as part of being a client system within the distributed processing system of the present invention.","In the embodiment shown in , data or project  is injected into the fabric through a connection to client system C and server systems . These connections represent that the information may pass first to server systems , or may pass first to a client system, such as client system C. It is noted that there are other ways that the data may be injected into the fabric. Once injected, the data  may be transmitted throughout the fabric through any of a wide variety of communications, including client-to-client, server-to-client, client-to-server, client-to-non-client, non-client-to-client communications, and\/or non-client-to-non-client communications. These communications may be based upon a variety of mechanisms, such as polling mechanisms and pre-assigned firewall ports. This technique provides a vehicle that fayilitates the distribution of information to a large number of devices in a short period of timer.","Applications for this data distribution are widely varied. For example, any important file that is time sensitive may be propagated to a large number of client devices, non-client devices, servers, or other connected devices, in a short amount of time. This transmission may occur quickly and efficiently once the information is injected into the distributed processing system of the present invention. Example time sensitive data files are anti-virus signature files, which when distributed through the distributed processing system of the present invention, may be transmitted through the network fabric faster than a new virus may normally proliferate.","Another application for rapid propagation of files is utilizing this technique for propagation of workloads. One example is distributed resume or job searching. In such a system, participating job seekers and participating employers may rapidly search for one another. A job seeker may inject a job request or search into the fabric that is then routed by each successive device to other devices without the need for control from the server systems . Similarly, an employer may inject candidate criteria into the fabric that is then routed to successive devices. The result is an extremely fast search and identification of employers and candidates.",{"@attributes":{"id":"p-0157","num":"0156"},"figref":["FIG. 15","FIG. 15"],"b":["100","104","1546","1554","1540","1542","1544","1554","1548","1550","1552","1546","308","620","1532","1536","1530","1534","1538","1528","1524","1526","1522","100","104","1546","1554"]},"As discussed above, each client system includes a client agent that operates on the client system and manages the workloads and processes of the distributed processing system. As shown in , each of the client agents A, B . . . C communicates with the server systems  through communication links ,  . . . , respectively. As discussed above, any number of different techniques and architectures may be utilized to provide these communication links. In the embodiment as shown in  with respect to client agent A, each client agent includes a base distributed processing system component  and a separate project or workload component . As depicted, a communication interface , a core agent module , and a user interface  make up the base distributed processing system component . The task module  and the work unit  make up the separate project or workload component . The task module  operates on top of the core agent module  to provide processing of each project work unit . It is noted that different or additional modules, subsystems or components may be included within the client agent, as desired. For example, a personal computer screen saver component may be part of the base distributed processing system component  or the separate project or workload component .","Also as discussed above, security subsystems and interfaces may be included to provide for secure interactions between the various devices and systems of the distributed processing system . As depicted in , a security subsystem and interface  is interconnected with the server systems , the database systems , the web interface , and the client agents A, B . . . C. These interconnections are represented by lines , , , and , respectively. The security subsystem and interface  operates to secure the communications and operations of the distributed processing system. This security subsystem and interface  also represents a variety of potential security architectures, techniques and features that may be utilized. This security may provide, for example, authentication of devices when they send and receive transmissions, so that a sending device verifies the authenticity of the receiving device and\/or the receiving device verifies the authenticity of the sending device. In addition, this security may provide for encryption of transmissions between the devices and systems of the distributed processing system. The security subsystem and interface  may also be implemented in a variety of ways, including utilizing security subsystems within each device or security measures shared among multiple devices, so that security is provided for all interactions of the devices within the distributed processing system. In this way, for example, security measures may be set in place to make sure that no unauthorized entry is made into the programming or operations of any portion of the distributed processing system including the client agents A, B . . . C.","In operation, client systems or end-users may utilize the clients subsystem  within the web interface  to register, set user preferences, check statistics, check sweepstakes entries, or accomplish any other user interface option made available, as desired. Advertising customers may utilize the advertisers subsystem  within the web interface  to register, add or modify banner or other advertisements, set up rules for serving advertisements, check advertising statistics (e.g., click statistics), or accomplish any other advertiser interface option made available, as desired. Customers and their respective task or project developers may utilize the task developer subsystem  to access information within database systems  and modules within the server systems , such as the version\/phase control subsystem , the task module and work unit manager , and the workload information . Customers may also check project results, add new work units, check defect reports, or accomplish any other customer or developer interface option made available, as desired.","Advantageously, the customer or developer may provide the details of the project to be processed, including specific program code and algorithms that will process the data, in addition to any data to be processed. In the embodiment shown in , this program code takes the form of a task module  within the workload, while the data takes the form of work unit . These two portions make up the project or workload component  of each client agent . For a given project, the task module  will likely remain relatively constant, except for version updates, patches or phase modifications, while the work unit  will likely change each time processing of the data that it represents is completed. The project or workload component  runs in conjunction with the base distributed processing system component . When a different customer or project is started on a given client system, the project or workload component  will typically be replaced, while the base distributed processing system component  will likely remain relatively constant, except for version updates, patches or other modifications made for the distributed processing system.","Information sent from the server systems  to the client agents A, B . . . C may include task modules, data for work units, and advertising information. Information sent from the client agents A, B . . . C to the server systems  may include user information, system information and capabilities, current task module version and phase information, and results. The database systems  may hold any relevant information desired, such as workload information (WL)  and client capability vectors (CV) . Examples of information that may be stored include user information, client system information, client platform information, task modules, phase control information, version information, work units, data, results, advertiser information, advertisement content, advertisement purchase information, advertisement rules, or any other pertinent.","Now looking to , A, B, A and B, an embodiment for security features for the distributed processing of the present invention will be described.  provides a representation of the distributed processing environment including security subsystems.  provide block diagrams of the communication interface between client systems and the server systems. And  provide detailed block diagrams of an embodiment of security measures for the server systems and the client systems.","Referring to , an embodiment  of a distributed processing system is depicted. Server systems  include a security subsystem  through which communications to and from the server systems  may be made secure. Client systems A, B . . . C and client systems D, E . . . F represent any number of client systems that may communicate with server systems  or with each other. Each of the client systems A, B, C, D, E and F include a security subsystem A, B, C, D, E and F, respectively. The electronic information  represents information that the server systems  is to communicate to client systems A, B, C, D, E and F in a secure manner, so that no unintended or intercepting recipient may understand or tamper with the electronic information , and so that no third party may insert non-authorized information into the distributed processing system . Although not shown, it is understood that any one of the client systems A, B, C, D, E and F may have electronic information that is to be securely sent to the server systems  or to any other of the client systems A, B, C, D, E and F.","Electronic information  represents information that is communicated to facilitate the operations of the distributed processing system . Such information includes the client agents that are downloaded to each client system, the workload applications for any given workload, and any work unit that will be processed by a client system. Electronic information  may also be any type of information to be sent or received within the distributed processing system, such as text, images, audio streams, video streams, databases, spreadsheets, PDF files, Shockwave data, Flash data, applications, data files, chat streams, or any other information, data or data streams. In addition, electronic information may be sent by client systems A, B, C, D, E and F to the server systems  and\/or any of the other client systems.","The Certificate Authority (CA) block  within the server systems  represents an entity that helps to ensure validity of encryption and decryption codes. For example, within a public\/private key encryption environment, a Certificate Authority may help ensure that a public key alleged to be from a particular entity is in fact legitimately from that entity. One third-party entity that performs this CA function on the Internet is Verisign, Inc. Having a third-party perform the CA function can be advantageous in a transaction or communication between non-trusted entities. For example, the sending entity provides its public key information to the third-party CA, which verifies the information and creates a certificate that includes the sending entity's public key information. This certificate may then be encrypted and signed by the third-party CA. The receiving entity may then obtain the certificate from the third-party CA and decrypt it with the third-party CA's public key. The receiving party will then have the sending party's public key and be fairly secure that it is a legitimate public key from the sending party.","As shown in , the CA functionality may be part of the server systems , such that the server systems  act as their own Certificate Authority with respect to client systems A, B, C, D, E and F and any other devices that are part of the distributed processing system. A third-party CA is not as needed in this distributed processing environment because the server systems  primarily direct the operations of the distributed processing system. Thus, there is less of a need for a third-party entity to provide a CA function. It is noted that CA functionality may be provided only by the server systems , only by third-party CAs, or any combination of server systems  and third party CAs, as desired for a particular embodiment. In addition, if desired, no CA functionality could be provided so that secure communications between the server systems  and the devices within the distributed processing system were conducted without the use of a Certificate Authority.",{"@attributes":{"id":"p-0168","num":"0167"},"figref":"FIG. 17A","b":["1700","108","104","1700","108","270","1702","104","1710","108","270","1704","104","1712","104","1706","108","1712","108","104","104","108","1714","1708","1546","1710","1712","1714","104","1716","1718","1720","1546","308","620"]},{"@attributes":{"id":"p-0169","num":"0168"},"figref":["FIG. 17B","FIG. 17B"],"b":["1750","1704","1706","1708","108","104","1756","1754","1752","108","104"]},"In operation, the server systems  may secure the download of the client agent  to the client system  by requiring that the client system  download the client agent  from the client agent download site . As part of the server authentication sequence, the download site  will send back an identifier to assure users that they are indeed connected to the proper server systems . This identifier may be, for example, a CA certificate, but may be any other identifier, as desired. Because it is desirable to have the client agent running on as many distributed devices as possible for the distributed processing system of the present invention, user authentication may not be required to download the client agent  from the download site .","Once a client system  has downloaded and installed the client agent , the client system  will communicate with the application server  to begin working within the distributed processing system. For these communications, server and client authentication may be required to help ensure security. To accomplish this authentication, for example, two-way authentication may be utilized. To provide a public\/private key combination for the client agent , each client agent  that is downloaded by a client system  may have embedded within its code a default identifier and a default public\/private key pair. Thus, the server systems  may use secure network protocols (such as SSL or similar schemes) to authenticate each client system , and each client system  may use compatible protocols to authenticate each server application with which it communicates. These applications, for example, may include the functionality provided by blocks  and , and, therefore, the communications  and  would utilize authentication.","As an alternative to embedding a public\/private key combination and associated identifiers or certificates into the client agent , the public\/private key pairs may be dynamically generated in block . For example, at start-up, at reboot or at some desired time or event, the client system  may generate a new public\/private key pair. When the client system  next communicates with the server systems , the client system  request a certificate from the server systems . The server systems  may then act as a Certificate Authority (CA) and provide a CA certificate to the client system . This dynamic certificate generation, therefore, allows for added security by allowing each client system  to have its own public\/private key pair for secure network protocol communications and by having this key pair change at some desired recurring event for the client system , such as reboot.","The client system  may initiate its communication with the server systems  by logging on to the authentication server, which may be part of block . The user may be prompted to enter a valid e-mail address and\/or password, if already registered, or may be asked to register if the e-mail address and\/or password are not recognized. Once registration is completed, a password may be e-mailed back to the user to provide validation of the user. If authentication is successful when a user logs into the server systems , the server systems  may provide a host-ID, and user-ID and a session key for any given communication session.","It is also desirable that once a user has successfully registered, the user may install the client agent  on any number of other host or user systems without needing to interact with that systems network browser, other than to set host-specific preferences. For example, when downloaded, the client agent  may take the form of a self-extracting program that installs the appropriate files to the client system , including the proper host and user identifications. In addition, to help ensure proper identification, the session keys may be exchanged each time the client system  communicates with the server systems . For example, the client system  may communicate its current session key to the server systems  each time it communicates with the server systems . The server systems  will then send a new session key for the client system  to utilize for the next session. In this way, stale identification information may be reduced. In addition to this security feature, communications may also be encrypted and decrypted with various encryption techniques, as desired.","Referring now to , one embodiment will be discussed for a security model utilizing public\/private key encryption. This security model utilizes a third-party CA to provide a CA certificate for the server systems .",{"@attributes":{"id":"p-0176","num":"0175"},"figref":"FIG. 18A","b":["1800","104","1602","108","1602"]},"One path begins with the electronic information  being encrypted with the server private key in block . Then, in block , the encrypted information is sent to client systems. This encrypted information is represented by arrow .","A second path flows from block  to block  where a hash value is generated for the encrypted electronic information. It is noted that a hash value is a unique value that may be generated for any given electronic file based upon the contents of that file and the algorithm used to calculate the unique value. There are any number of algorithms that may be used to calculate a hash value, as would be understood by one of skill in the art. Proceeding down the second path to block , the hash value generated on the server side for the encrypted electronic information (i.e., the information sent to the client system from block  via ) is compared with a hash value  from the client system . This hash value  represents the client system's calculation of the hash value for the encrypted electronic information that the client system  received from the server system . If no tampering has occurred and the data was transmitted accurately, the client system hash value should match the server hash value. In block , the server systems  provide an indication of the result of the hash check evaluation back to the client system . This pass\/fail determination is indicated by arrow .","A third path begins with block  where a hash value is calculated for non-encrypted electronic information . This hash value is then encrypted in block  with the server private key. Next, this encrypted hash value is sent to the client system  in block . The arrow  represents the encrypted hash value for the non-encrypted electronic information.","A fourth path, and the last depicted in the embodiment  of , flows from block  to block , where the hash value is partitioned into N different portions. These N different portions are preferably designated for N different client systems , as well as any client systems  receiving a redundant distribution of any one of the N different portions. In block , the N different hash value portions are encrypted with the server private key. Next, the N different encrypted hash value portions are sent in block  to N different client systems , as well as being sent to client systems  receiving redundant distributions of the hash value portions. The arrows  represent the distribution of the N different hash value portions. It is noted that redundant distribution of the N hash value portions is desirable because, as discussed below with respect to , when the hash value is reconstructed by a client system , it is desirable to have multiple sources for each portion in case one of the receiving client systems is not available at any given time.","Looking now to , the corresponding security procedures implemented by a client system  are discussed with respect to embodiment . Initially, in block , the client system  receives CA certificate  containing the server public key and the server identity. It is again noted that other unique identifiers may be utilized instead of CA certificates, as described above. If a CA certificate is utilized, this CA certificate may be provided from a third-party Certificate Authority (CA) or from the server systems  or any other desired source. In block , the client system  verifies the accuracy of the CA certificate using the CA's public key. If this verification is not successful, the client system  may wait some period of time before retiying. In addition, the time period may be a random period of time. In addition, as discussed with respect to , the client system  will login to the server systems . If this authentication is not successful in this login, the client system will notify the user of the system and the server systems , and then wait for some period of time or a random amount of time before attempting to re-verify.","In block , the client system  receives the encrypted information . Next, the client system  creates a hash value for the encrypted information in block . This hash value is preferably calculated using the same algorithm utilized by the server systems  in generating the hash value for the encrypted information in block  of FIG. A. Once the client system  has calculated the hash value for the encrypted information, this hash value  is sent to the server systems from block . As discussed above, a pass\/fail response  is sent back by the server systems . This hash check evaluation is received in block . If the check was a FAIL, flow passes to block  where the client system  sends out a notice to the server systems  and any other client system to which it is attached that a problem has been encountered. The client system  then ends the current connection with the server systems . It is noted that the client system  may retry several times before moving onto block , and that the reporting scheme may be modified, altered or developed as desired.","If the hash check evaluation was a PASS, flow passes to block  where the electronic information is decrypted with the server public key, which was verified in block . A hash value is then calculated for the electronic information . Again, the hash generation algorithm is preferably the same as that used by the server systems  in creating the hash value in block  of FIG. A. Next, the hash value is sent from block  to block , where it is compared with two other hash value calculations.","One of the other hash values comes from a path that begins with block , in which the client system  receives the encrypted hash value  for the non-encrypted information. In block , the encrypted hash value is decrypted with the server public key. The hash value is then sent to block .","The third hash value for block  comes from a path that utilizes the N different hash portions sent out by the server systems in block  of FIG. A. In block , the client system receives a portion A of the partitioned hash value . In addition to one of the partitioned hash values, it is noted that the server systems  will also send information providing the identity and source for the N- other hash value portions. In block , the client system  decrypts the portion A with the server public key. Next, in block , the client system  resolves the identity of the source for the N- other portions, which may be N-1 other client systems. In block , the client system  obtains the N- other portions, and assembles the N partitions into a hash value for the non-encrypted electronic information in block . The resulting hash value is then sent to block . It is noted, as indicated above, that redundant distribution of the N portions of the partitioned hash value is desirable so that unavailability of one client system will not cause another client system to be unable to re-assemble the N different portions.","Once the three hash values are received in block  from three different sources, they are compared to see if they match. If this check is a FAIL, flow moves to block , where the client system  sends out a notice to the server systems  and any other client system to which it is attached that a problem has been encountered. The client system  may also inform the client systems from which it received the N- other portions, and the client system  may retry the procedures, if desired. In addition, once a client system  is notified of a potential problem, the client system  may download a special check file from the server systems  to make sure that the server systems have not been compromised. If still a FAIL, the client system  then ends the current connection with the server systems . If the check is a PASS, the electronic information is utilized, as represented by block .","Further modifications and alternative embodiments of this invention will be apparent to those skilled in the art in view of this description. It will be recognized, therefore, that the present invention is not limited by these example arrangements. Accordingly, this description is to be construed as illustrative only and is for the purpose of teaching those skilled in the art the manner of carrying out the invention. It is to be understood that the forms of the invention herein shown and described are to be taken as the presently preferred embodiments. Various changes may be made in the shape, size and arrangement of parts. For example, equivalent elements may be substituted for those illustrated and described herein, and certain features of the invention may be utilized independently of the use of other features, all as would be apparent to one skilled in the art after having the benefit of this description of the invention."],"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD OF THE INVENTION","BACKGROUND","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION"],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"DESCRIPTION OF THE DRAWINGS","p":["It is noted that the appended drawings illustrate only exemplary embodiments of the invention and are, therefore, not to be considered limiting of its scope, for the invention may admit to other equally effective embodiments.",{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 1A"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 1B"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 2A"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 2B"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 2C"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 2D"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 3A"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 3B"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 3C"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 3D"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 5A"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 5B"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 6A"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 6B"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 7A"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 7B"},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 11A"},{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 11B"},{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 12A"},{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIG. 12B"},{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIG. 13A"},{"@attributes":{"id":"p-0038","num":"0037"},"figref":"FIG. 13B"},{"@attributes":{"id":"p-0039","num":"0038"},"figref":"FIG. 14A"},{"@attributes":{"id":"p-0040","num":"0039"},"figref":"FIG. 14B"},{"@attributes":{"id":"p-0041","num":"0040"},"figref":"FIG. 15"},{"@attributes":{"id":"p-0042","num":"0041"},"figref":"FIG. 16"},{"@attributes":{"id":"p-0043","num":"0042"},"figref":"FIG. 17A"},{"@attributes":{"id":"p-0044","num":"0043"},"figref":"FIG. 17B"},{"@attributes":{"id":"p-0045","num":"0044"},"figref":"FIG. 18A"},{"@attributes":{"id":"p-0046","num":"0045"},"figref":"FIG. 18B"}]},"DETDESC":[{},{}]}
