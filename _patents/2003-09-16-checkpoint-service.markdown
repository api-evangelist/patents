---
title: Checkpoint service
abstract: A computer accessible medium may be encoded with instructions which, when executed: replicate a checkpoint segment from a first local storage of a first node to at least one other node; and load a copy of the checkpoint segment from the other node to a second local storage of a second node. The checkpoint segment is stored into the first local storage by an application, and comprises a state of the application. The copy of the checkpoint segment is loaded into a second local storage responsive to a request from the second node to load the copy. The second node is to execute the application. In some embodiments, the copy of the checkpoint segment may also be loaded into a global storage.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07743381&OS=07743381&RS=07743381
owner: Symantec Operating Corporation
number: 07743381
owner_city: Mountain View
owner_country: US
publication_date: 20030916
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF EMBODIMENTS"],"p":["1. Field of the Invention","This invention is related to providing checkpoint services for applications in a cluster of servers.","2. Description of the Related Art","Clusters of computer systems (\u201cnodes\u201d) are often used to provide scalability and high availability for various applications. For high availability, an application may be \u201cfailed over\u201d from a first node on which it was executing to a second node. The failover may occur due to a hardware or software problem on the first node, for example. The first node may \u201ccrash\u201d, or the application may crash on the first node. Additionally, similar mechanisms to the failover may be used to move an executing application from a first node to a second node for performance reasons. For example, the second node may have more resources than the first node, may have resources that may execute the application with higher performance, or may simply be less loaded than the first node.","In either a failover or load-balancing scenario, the state of the application is typically checkpointed. The checkpointed state can be reloaded into the application (e.g. on the second node, when a failover or load balance move occurs) to resume execution with the checkpointed state. In this manner, the state of the application is resilient up to the most recent checkpoint.","Typically, one of two mechanisms are used to checkpoint applications executing on a cluster. In one mechanism (frequently used in cluster server software used to manage the cluster), shared storage that all the nodes can access is provided in the cluster. Checkpoints are written to and read from the shared storage.","Other clusters do not include shared storage (often referred to as \u201cshared nothing\u201d architectures). Such clusters typically implement a second mechanism for checkpointing, in which the applications themselves write checkpoints to another node in the cluster. Thus, the application must be aware of the topology of the cluster (e.g. how many nodes are in the cluster, which nodes have the resources needed to execute the application, etc.). Typically, the application statically selects a node to store the checkpoint data, and thus there is a lack of flexibility in storing the checkpoints. The application must execute on the node that stores the checkpoints as well. The application may be more susceptible to cascading fail-over, when more than one node in the cluster crashes during a short period of time. If both the node executing the application crashes and the node statically selected by the application for the checkpoint storage crashes, then the application becomes unavailable. Additionally, since the application typically executes at the user level, heavy-weight TCP communication is used to communicate the checkpoint data to the statically selected node.","In one embodiment, a computer accessible medium is encoded with instructions which, when executed: replicate a checkpoint segment from a first local storage of a first node to at least one other node; and load a copy of the checkpoint segment from the other node to a second local storage of a second node. The checkpoint segment is stored into the first local storage by an application, and comprises a state of the application. The copy of the checkpoint segment is loaded into a second local storage responsive to a request from the second node to load the copy. The second node is to execute the application. In some embodiments, the application need not be aware of the replication, when the replication occurs, the nodes to which the checkpoint segment is replicated, etc. A corresponding method is also contemplated.","In some embodiments, a cluster comprises a plurality of nodes. A first node of the plurality of nodes is configured to replicate a checkpoint segment from a first local storage of the first node to at least one other node of the plurality of nodes. The checkpoint segment is stored into the first local storage by an application executing on the first node, and comprises a state of the application. A second node of the plurality of nodes is configured to load a copy of the checkpoint segment from the other node into a second local storage of the second node responsive to a request to load the copy. The second node is to execute the application.","While the invention is susceptible to various modifications and alternative forms, specific embodiments thereof are shown by way of example in the drawings and will herein be described in detail. It should be understood, however, that the drawings and detailed description thereto are not intended to limit the invention to the particular form disclosed, but on the contrary, the intention is to cover all modifications, equivalents and alternatives falling within the spirit and scope of the present invention as defined by the appended claims.","Turning now to , a block diagram is shown illustrating a logical view of one embodiment of a cluster of nodes A-D.  illustrates exemplary operation for the failover of an application from the node A to the node D. In the illustrated embodiment, the node A includes an application A, a checkpoint segment A, and a checkpoint service A. The node B includes a checkpoint service B and a replicated checkpoint segment B. The node C optionally includes a checkpoint service C and a replicated checkpoint segment C. The node D includes an application D, a checkpoint segment D, and a checkpoint service D. An optional global storage  is also illustrated.","Applications may be configured to create checkpoint segments in the local storage of the node on which they are executing. As used herein, the \u201ccheckpoint segment\u201d for a given application may comprise the given application's state at a point in time. Enough state is stored such that the application may be restarted, and the state may be reloaded into the program to permit the program to continue execution from the point represented by the checkpoint. For example, if the application is failed over to another node, the checkpoint segment may be used on the other node to recover the application to the point represented by the checkpoint. The application may update the checkpoint segment from time to time as execution continues. For example, the application may update the checkpoint segment after a predetermined period of time has elapsed, or at certain points in execution where checkpointing is deemed desirable (e.g. after completing certain tasks that the application is designed to perform).","The checkpoint services A-D may each comprise a copy of checkpoint service software executed on the corresponding node A-D. The checkpoint services A-D, when executing on a node on which an application is also executing, may provide replication of application checkpoint segments to at least one other node in the cluster. The node(s) storing a replicated checkpoint segment may be referred to as replica node(s) for that checkpoint segment, although the node may be used for many other purposes as well, including executing applications, and may not be a replica node for checkpoint segments of other applications. For example, in , the application A is executing on the node A, and creates the checkpoint segment A. The checkpoint service A may replicate the checkpoint segment to the node B (replicated checkpoint segment B). Optionally, in some embodiments, checkpoint segments may be replicated to more than one node. For example, the checkpoint service A may replicate the checkpoint segment A to node C (replicated checkpoint segment C) in addition to the node B. Embodiments which replicate the checkpoint segment to more than one node may provide increased resiliency of the application, since a failure in one of the replica nodes may not make the replicated checkpoint segment unavailable if another replica node may provide the replicated checkpoint segment.","The checkpoint services A-D may replicate a checkpoint segment by reading the checkpoint from the local storage of the node A-D on which the corresponding application is executing, and transmitting the checkpoint segment to at least one other node A-D. For example, in , the checkpoint service A may read the checkpoint segment A from the local storage of the node A and may transmit a copy of the checkpoint segment A to the node B (arrow ). The checkpoint service B in the node B receives the copy, and stores the copy in the local storage of the node B as the replicated checkpoint segment B. Similarly, if replication to the node C is also performed, the checkpoint service A may transmit the copy of the checkpoint segment A to the node C (dotted arrow ). The checkpoint service C receives the copy, and stores the copy in the local storage of the node C as the replicated checkpoint segment C. Still further, in some embodiments, the copy of the checkpoint segment may be written by one or both of the nodes B or C to the global storage  (arrows  and , respectively) to provide persistency of the checkpoint segment.","As mentioned above, the application A may update the checkpoint segment A from time to time as the application A continues execution on the node A. The checkpoint service A may replicate the updated checkpoint segments to the other node(s) as well. In some embodiments, the checkpoint service A may detect each update to the checkpoint segment A, and may replicate the updated checkpoint. For example, the checkpoint service A may provide an application programming interface (API) to the application A, and the application A may inform the checkpoint service A of the update using the API. The application A may also, in some embodiments, use the API to register the checkpoint segment A with the checkpoint service A (so that the checkpoint service A may locate the checkpoint segment A in the local storage A). For example, the application A may register the checkpoint segment using a checkpoint segment name that is globally unique within the cluster. A globally unique name may not require, e.g., file system support or user intervention. The checkpoint segment name may be used by the application in the APIs, as well as by the checkpoint service A-D. Thus, in such embodiments, the checkpoint segments A-D may each have the same name (the globally unique checkpoint segment name) even though the checkpoint segments have different reference numerals A-D assigned thereto. In other embodiments, the checkpoint service A may periodically replicate the checkpoint segment A (whether or not an intervening change has occurred).","In some embodiments, the replica nodes (e.g. the nodes B and\/or C, in the embodiment of ) may store only a copy of the most recent checkpoint segment. When an updated copy of the checkpoint segment is recited, the replica nodes overwrite the replicated checkpoint segments with the updated copy. In other embodiments, previous copies of the checkpoint segment may also be retained, as desired.","At some point, the application may failover to another node. For example, in , the application A may failover to the application D on the node D (arrow ). In some embodiments, the application itself may handle the failover. For example, the application A and the application D may be executing on the respective nodes, with one copy of the application (e.g. the application A) actively executing and the other copy of the application (e.g. the application D) waiting for a failover request from the active node. The arrow  may represent the application A transmitting the failover request to the application D. In other embodiments, cluster server software may be executing on the nodes A-D (not shown in ). The cluster server software may monitor the execution of the application on a given node (e.g. the node A), and may failover the application to another node (e.g. the node D). In such embodiments, the arrow  may represent the cluster server failing over the application. If cluster server software is used, in some embodiments, the cluster server may start the application D executing on the node D as part of the failover operation. Thus, in such embodiments, the application may not always be running on multiple nodes. In still other embodiments, the checkpoint services A-D may provide primitives for failover (e.g. via the above mentioned API), and the application may use the primitives to accomplish failover. In each case, the application software may be installed on each node (e.g. the nodes A and D in ) so that the application may be executed on that node as desired.","In response to the failover, the application D may request a copy of the application's checkpoint segment from the checkpoint service D (e.g. using the above described API). The checkpoint service D, in response to the request, may load the checkpoint segment into the local storage of the node D (e.g. the checkpoint segment D in ). That checkpoint service D may transmit a checkpoint retrieval request to one of the replica nodes for that checkpoint segment (e.g. one of the nodes B-C, in the embodiment of ). For example, in , the checkpoint service D may transmit the retrieval request to the checkpoint service B on the node B. The checkpoint service B may read the replicated checkpoint segment B from the local storage of the node B and may transmit the replicated checkpoint segment to the checkpoint service D. The checkpoint retrieval request and the corresponding transfer of the checkpoint segment is represented in  by the arrow . The checkpoint service D loads the replicated checkpoint segment into the local storage of the node D as the checkpoint segment D. The application D may recover to the checkpoint using the checkpoint segment D.","As the embodiment of  illustrates, the application may be failed over without requiring shared storage in the cluster. Additionally, in some embodiments, the application may rapidly update the checkpoint segment or restore state from the checkpoint segment because the checkpoint segment is stored in local storage. Thus, application performance may be less impacted by checkpointing, in some cases, that if the application handled checkpointing to shared storage or to another node. After updating the local storage with the checkpoint state, the application may continue execution while the checkpoint service handles replicating the checkpoint segment. Additionally, the checkpoint service may insulate the application from details of the checkpoint segment replication (e.g. which nodes are used to store replicated checkpoint segments, when replication occurs, etc.). The application need not be aware, for example, of the topology of the cluster (e.g. the number of nodes, the resources available on each node, etc.). The checkpoint service may retain flexibility to select which nodes serve as replica nodes for the application's checkpoint segment, how many nodes serve as the replica nodes, etc. If the nodes in the cluster are changed (e.g. nodes are added to the cluster or deleted from the cluster), the checkpoint service may modify the selection of replica nodes. The application need not handle the replication. Instead, the application may simply create a checkpoint segment in the local storage of the node on which it executes and update the checkpoint segment with the application state as desired.","In some embodiments, one or more of the replica nodes may not be capable of executing the application. For example, the replica nodes may not include one or more hardware or software resources required by the application for the application to execute. However, with the checkpoint service handling the replication, the replica nodes may serve to store the replicated checkpoint segments (e.g. as long as the replica nodes are capable of executing the checkpoint service software).","It is noted that, while four nodes A-D are illustrated in , any number of nodes may be included in various embodiments. It is further noted that various nodes may execute any number of applications, as desired. Additionally, while the checkpoint service is described as being implemented in software, other embodiments may implement the checkpoint service in hardware, or in a combination of hardware and software, as desired.","Turning now to , a block diagram is shown illustrating a physical view of one embodiment of the cluster of nodes A-D. Each \u201cnode\u201d may comprise a computer system. In the embodiment of , the nodes A-D are coupled to a network  for communication between the nodes A-D. Each of the nodes A-D may include respective execution hardware A-D, which may be used to execute the software in that node. For example, the execution hardware A-D may execute the checkpoint service A-D on each node, respectively. The execution hardware A may also execute the application A, and the execution hardware D may similarly also execute the application D. The execution hardware A-D may be coupled to the local storage A-D, respectively, of each node A-D. The local storage A-D may store various checkpoint segments A-D as shown in . In some embodiments, the optional global storage  may be coupled to the nodes B-C.","As mentioned above, the execution hardware A-D may generally comprise hardware used to execute various software on the nodes A-D. For example, the execution hardware may include one or more processors designed to execute the instructions that comprise the software (e.g. the applications A and D and the checkpoint services A-D, as well as operating system software (not shown in )). The execution hardware may further include various circuitry for interfacing with the local storage in the same node and for interfacing to the network .","As used herein, \u201clocal storage\u201d refers to any storage which may be included in a node or attached to a node, to which only that node has direct access. Other nodes may communicate with that node to request data from the node, in some cases (e.g. via the network ), but may not directly access the local storage to access the data. Local storage may include volatile storage and\/or nonvolatile storage. Volatile storage may include, for example, random access memory (RAM) such as static RAM (SRAM) or dynamic RAM (DRAM). DRAM may include various types such as asynchronous DRAM, synchronous DRAM (SDRAM), double data rate SDRAM (DDR SDRAM), RAMBUS DRAM (RDRAM), etc. Nonvolatile storage may include various types of peripheral devices such as disk drives (e.g. fixed or removable disks) or solid state storage such as battery-backed SRAM or FLASH memory.","The execution hardware A-D may be coupled to the local storage A-D in the same node A-D in various fashions. For example, if the local storage includes the main memory system of the node (populated with RAM), the execution hardware may be coupled to a memory controller (or may include a memory controller) that controls access to the main memory system. If the local storage includes peripheral devices, the execution hardware may be coupled to the local storage using various peripheral connections such a peripheral component interconnect (PCI), Fibre Channel, small computer systems interface (SCSI), universal serial bus (USB), firewire, etc.","In one embodiment, the checkpoint segments A-D may be stored in high speed volatile storage within the local storage A-D (e.g. in the main memory system) to permit high speed access to the checkpoint segments by the corresponding applications. In other embodiments, the checkpoint segments A-D may be stored in nonvolatile storage (e.g. disk storage).","The network  may comprise any network technology in various embodiments. The network  may be a local area network, wide area network, intranet network, Internet network, wireless network, or any other type of network or combinations of the above networks. The network  may be designed to be continuously available (although network outages may occur), or may be intermittent (e.g. a modem connection made between a computer system in a user's home and a computer system in a user's workplace). Any network media may be used. For example, the network  may be an Ethernet network. Alternatively, the network may be a token ring network, etc. Generally, the checkpoint services A-D may communicate using the network  (e.g. copies of checkpoint segments may be transmitted over the network , retrieval requests may be transmitted over the network , etc.). In other embodiments, the network  may comprise a cache-coherent, non-uniform memory access (CC-NUMA) memory bus.","In some embodiments, the nodes A-D may be blades in a blade server. Generally, a blade server comprises an enclosure into which multiple blades may be inserted to form the server. Each blade may comprise a computer system. In some such embodiments, the network  may comprise the back plane into which the blades are inserted.","The global storage  may be any type of non-volatile storage that may be accessible to one or more of the nodes A-D. The global storage  may be accessible to each of the nodes A-D, or a subset of the nodes A-D, as desired. The global storage  may be coupled to the nodes separate from the network , or through the network , as desired in various embodiments.","Turning next to , flowcharts are shown illustrating operation of one embodiment of the checkpoint service in response to various events. The checkpoint service may comprise instructions which, when executed, implement the functionality shown in each of the flowcharts.",{"@attributes":{"id":"p-0043","num":"0042"},"figref":["FIG. 3","FIG. 1"],"b":["20","22","24"]},"The checkpoint service may record the checkpoint name, or some other indication of the checkpoint segment, so that that checkpoint service may locate the checkpoint segment in the local storage (block ). For example, if the checkpoint segment is stored in the main memory system of the node, the address of the checkpoint segment may be recorded. Alternatively, a symbolic name that corresponds to the address may be recorded. If the checkpoint segment is stored on disk, the checkpoint name may be the file name of the checkpoint segment file. Additionally, the checkpoint service may select the replica node or nodes to store the replicated checkpoint segment (block ). Alternatively, replica node selection may be performed at other times. The checkpoint service may also replicate the checkpoint segment (block ).","Turning now to , a flowchart is shown illustrating operation of one embodiment of the checkpoint service for replicating the checkpoint segment. For example, in , the checkpoint service A may perform the flowchart of  to replicate the checkpoint segment A to the replicated checkpoint segments B-C. The flowchart of  may be illustrative of block  in . Additionally, the flowchart of  may illustrate operation at various other points in time (e.g. after each update of the checkpoint segment by the corresponding application, or a periodic replication, in various embodiments). The checkpoint service may read the checkpoint segment from the local storage (block ), and may transmit the checkpoint segment contents to the replica node or nodes (block ).",{"@attributes":{"id":"p-0046","num":"0045"},"figref":["FIG. 5","FIG. 1","FIG. 5"],"b":["24","20","10","24","60","62"]},"It is noted that, in some embodiments, a cluster server may be used to failover an application. In such embodiments, a part of the cluster server software may make the request for the checkpoint segment. For example, the embodiment of  will be discussed in more detail below. In that embodiment, an agent corresponding to the application is part of the cluster server software. The agent may request the checkpoint segment as part of restart the application on a node.",{"@attributes":{"id":"p-0048","num":"0047"},"figref":["FIG. 6","FIG. 1","FIG. 6"],"b":["24","24","10","64","34","65"]},{"@attributes":{"id":"p-0049","num":"0048"},"figref":["FIG. 7","FIG. 1","FIG. 7"],"b":["24","24","10","34","66","68"]},"Turning next to , a flowchart is shown illustrating high level operation of one embodiment of an exemplary application during initialization (e.g. when the application is beginning execution). The exemplary application may comprise instructions which, when executed, implement the functionality shown in .","The application may request a checkpoint segment from the checkpoint service (e.g. using the checkpoint segment name through the API) (block ). The application may then determine if the checkpoint segment has been supplied by the checkpoint service (decision block ). There may be various reasons why the checkpoint segment is not supplied by the checkpoint service. For example, there may not be a checkpoint segment (e.g. if the application is executing for the first time, or if the application exited execution normally in a previous execution and the checkpoint segments were deleted). Alternatively, each of the replica nodes may be down at the time of the request, and thus the application's checkpoint segment may not be available to be transferred to the node that is executing the application.","If the checkpoint segment is not supplied (decision block \u2014\u201cno\u201d leg), the application may initialize its state to a default to begin execution (block ). If the checkpoint segment is supplied (decision block \u2014\u201cyes\u201d leg), the application restores its state to the checkpoint state (block ). In either case, the application may then begin normal execution (block ). Normal execution may include creating the checkpoint segment (if necessary) and updating the checkpoint segment.","Turning now to , a block diagram illustrating another embodiment of the node A is shown. Other nodes B-D may be similar. In the embodiment of , the node A includes the application A, the checkpoint segment A, and the checkpoint service A. Additionally, the node A includes an agent , a cluster server engine , and a cluster server transport service . The agent , the cluster server engine , and the cluster server transport service  may together form a cluster server.","The cluster server transport service  may be generally responsible for communications between the cluster server engine  and cluster server engines on other nodes B-D (using, e.g., the network  to communicate). The cluster server transport service  may be a lighter-weight transport protocol than TCP, for example (i.e. requiring less overhead to communicate, and thus permitting communication at higher performance). In this embodiment, the checkpoint service A may also use the cluster server transport service  to communicate with other checkpoint services B-D on other nodes B-D. In other embodiments in which the network  comprises a CC-NUMA interconnect, CC-NUMA memory references may be the transport mechanism used to communicate between the nodes A-D.","The cluster server engine  may provide the application failover service (in conjunction with the agent ) as well as provide other cluster management functions. The agent , which may be designed specifically for the application A, monitors the operation of application A and also brings the application online and offline. In some embodiments, the agent  may also request that the checkpoint segment be copied to the node as part of bringing the application online. In one implementation, the cluster server may be the VERITAS Cluster Server\u2122 product available from VERITAS Software Corporation (Mountain View, Calif.).","The cluster server software may monitor a given application and various resources (a \u201cservice group\u201d) for the given application. In other cases, multiple applications and corresponding resources may be grouped together as a service group. The cluster server software may fail over an application if one of the resources are detected as failing. Resources may include software (e.g. applications, operating system software components, operating system services, etc.) and\/or hardware (e.g. disk drives, network interface circuitry, etc.).","Turning now to , a block diagram of a computer accessible medium  is shown. Generally speaking, a computer accessible medium may include any media accessible by a computer during use to provide instructions and\/or data to the computer. For example, a computer accessible medium may include storage media such as magnetic or optical media, e.g., disk (fixed or removable), CD-ROM, or DVD-ROM, volatile or non-volatile memory media such as RAM (e.g. SDRAM, RDRAM, SRAM, etc.), ROM, etc., as well as media accessible via transmission media or signals such as electrical, electromagnetic, or digital signals, conveyed via a communication medium such as a network and\/or a wireless link. The computer accessible medium  in  may be encoded with one or more of the application A, the checkpoint service A, the checkpoints A-D, the agent , the cluster server engine , and the cluster server transport service . Generally, the computer accessible medium  may store any set of instructions which, when executed, implement a portion or all of the flowcharts shown in one or more of . In some embodiments, the computer accessible medium  may comprise one or more of global storage accessible to the nodes A-D, storage included in the nodes A-D, storage on removable media accessible to the nodes A-D (at least temporarily), or any combination thereof.","It is noted that, while various aspects of the above embodiment have been described as being implemented in software (e.g. the checkpoint services A-D), other embodiments may implement the aspects partially in software and partially in hardware in the nodes, or wholly in hardware in the nodes, as desired.","Numerous variations and modifications will become apparent to those skilled in the art once the above disclosure is fully appreciated. It is intended that the following claims be interpreted to embrace all such variations and modifications."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The following detailed description makes reference to the accompanying drawings, which are now briefly described.",{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 10"}]},"DETDESC":[{},{}]}
