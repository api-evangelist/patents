---
title: Method and apparatus for presenting a window in a system having two operating system environments
abstract: A device () and method () for providing windows in a multi-environment operating system is provided. A first operating system environment (first OSE) () is executed in a native mode on a mobile device (). The mobile device comprises a first graphical user interface (GUI) . The first OSE generates graphical data for a first OSE window (). The first OSE window can be used on the first GUI for interfacing with the first OSE. A second operating system environment (second OSE) () is executed in a native mode on the mobile device, wherein the second OSE generates a GUI desktop () that is displayed on a second GUI (). A second window () is rendered on the GUI desktop that comprises the first OSE window. The second OSE communicates relevant events to the first OSE, which are used by the first OSE to update the information used to render the first OSE window within the second OSE window.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09354900&OS=09354900&RS=09354900
owner: Google Technology Holdings LLC
number: 09354900
owner_city: Mountain View
owner_country: US
publication_date: 20110428
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["RELATED APPLICATION","FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","DETAILED DESCRIPTION OF THE DRAWINGS"],"p":["This application is related to U.S. application Ser. No. 13\/013,341, filed on Jan. 25, 2011, which is entitled \u201cMETHOD AND APPARATUS FOR LOCKING AND UNLOCKING MULTIPLE OPERATING SYSTEM ENVIRONMENTS WITH A SINGLE GESTURE INPUT,\u201d and assigned to the assignee hereof.","The present invention relates generally to multi-environment operating systems and in particular, to a method and apparatus for presenting windows of the multiple operating system environments.","Some mobile devices have the capability to utilize multiple run-time environments simultaneously on a single processor. A user of such a device may operate a first operating environment (e.g., Android) and a second operating environment (e.g., GNU Linux) simultaneously. When operating such a device, at least two co-existing independent middleware operating environments coupled to a core kernel are provided where the middleware operating environments each have a corresponding application component.","When a single display device is utilized as a user interface to a mobile device running multiple operating system environments (e.g., Android and GNU Linux), there may exist two windows on the display device. A first window may exist on a first portion of the display (e.g., an Android window that shows the Android environment). A second window, or background window, may also exist on the display (e.g., a background window showing a GNU Linux desktop environment). The user interaction can be confusing or cumbersome when the user attempts to interact with each of the operating system environments.","Skilled artisans will appreciate that elements in the figures are illustrated for simplicity and clarity and have not necessarily been drawn to scale. For example, the dimensions and\/or relative positioning of some of the elements in the figures may be exaggerated relative to other elements to help to improve understanding of various embodiments that include the present invention. Also, common but well-understood elements that are useful or necessary in a commercially feasible embodiment are often not depicted in order to facilitate a less obstructed view of these various embodiments, which include the present invention. It will further be appreciated that certain actions and\/or steps may be described or depicted in a particular order of occurrence while those skilled in the art will understand that such specificity with respect to sequence is not actually required in all instances. Those skilled in the art will further recognize that references to specific implementation embodiments such as \u201ccircuitry\u201d may equally be accomplished via replacement with software instruction executions either on general purpose computing apparatus (e.g., CPU) or specialized processing apparatus (e.g., DSP). It will also be understood that the terms and expressions used herein have the ordinary technical meaning as is accorded to such terms and expressions by persons skilled in the technical field as set forth above except where different specific meanings have otherwise been set forth herein.","In order to provide for efficient rendering of a window of a first operating system within a desktop of a second operating system, some embodiments are described.","The present invention encompasses a method comprising the following steps. Firstly, executing a first operating system environment (first OSE) in a native mode on a central processing unit (CPU) of a mobile device. The mobile device comprises a first graphical user interface (GUI). The first OSE generates graphical data for a first OSE window, wherein the first OSE window can be used on the first GUI for interfacing with the first OSE.","Secondly, executing a second operating system environment (second OSE) in a native mode on the CPU of the mobile device. The second OSE generates a GUI desktop that is displayed on a second GUI. In some embodiments the second GUI is external to the mobile device. In other embodiments, the second GUI may be the first GUI (i.e., the display for the first and second GUI's is the same mobile display). In yet other embodiments, each of the first and second GUI's may comprise a different display on one mobile device.","Thirdly, rendering on the GUI desktop a window that comprises the first OSE window (this first OSE window within a window on the GUI desktop is hereafter referred to as the WIW), using commands of the second OSE.","The present invention further encompasses an apparatus comprising a central processing unit (CPU) existing on a device. The CPU performs the steps of executing a first operating system environment and executing a second operating system environment that provide the features described in the above method.","Turning now to the drawings, where like numerals designate like components,  shows a diagram of a mobile device  that is a mobile telephone, in accordance with some embodiments. The mobile device  includes a graphical user interface GUI  that comprises a display screen  (alternatively, display or screen) that may be touch sensitive and a plurality of physical buttons . The physical buttons may be of the type called soft buttons, for which their functions are defined by text or graphics on the display . The GUI  provides input and outputs for human interfacing to software that operates the mobile device . The mobile device  is selected from the group including, but not limited to, a mobile personal computer (PC), a netbook, a mobile telephone, a laptop computer, a handheld computer and a smart phone. Although the device  is mobile, it is intended to have significant computing power, with a processor speed in excess of 500 MHz, although slower processors are not excluded. Considering the computing power, a user can connect the mobile device  to a variety of peripheral devices (not shown in ). The peripheral devices are selected from a group including, but not limited to, computer monitor, a laptop computer, a desktop computer, a tablet PC, and a screen projector.  illustrates some graphical icons. In some embodiments the display  is a touch screen display. The display can display one of a plurality of windows generated by an OSE executing an application. The display  shown in  is displaying a full screen window . By full screen window is meant a window that determines the color and intensity of light for all the pixels on the screen . In some embodiments, all windows generated for the mobile device are all full screen windows. Shown on the display  and window  are some graphical icons , a virtual button , and some text .","Referring to , a software\/hardware architectural block diagram of the mobile device  shows an exemplary software environment  in communication with a Linux kernel , in accordance with some embodiments. The software environment  comprises applications that each run within one of multiple operating system environments, and shows an example of two operating system environments. Certain portions  of the hardware of the mobile device  are also in communication with the Linux kernel . The software environment  includes a first operating system environment (OSE)  and a second operating system environment (OSE)  in communication with the Linux kernel , which is a single kernel. These operating system environments are also described herein as middleware, because they operate using the Linux kernel  to interact with the memory and hardware elements of the mobile device . The first OSE  and the second OSE  each execute in their own native mode. By example, the second operating system environment  is a standard Linux distribution and the first operating system environment  is an embedded operating system environment intended for use in mobile devices, such as an Android\u2122 (Open Handset Alliance, www.openhandsetalliance.com) operating system. The software environment  is in communication with the Linux kernel , which is in communication with the device hardware .","An exemplary software environment  includes Ubuntu\u00ae (Canonical Ltd., www.ubuntu.com) for the Linux-based operating system environment . The multiple middleware operating system environments co-exist independent of the other(s). Exemplary environments that can be included in software environment  include Android\u2122 (Google, Inc., www.google.com), Ubuntu\u00ae (Canonical Ltd., www.ubuntu.com), standard Linux-based environments, Symbian (Symbian Foundation Ltd., www.symbian.com), and Windows-based environments. In an alternative embodiment, it is envisioned that greater than two operating system environments are configured to co-exist independently on the same core kernel .","Referring to , a diagram shows an external device  that comprises a second GUI  having a touch sensitive display  and may comprise some physical buttons , in accordance with some embodiments. The display  may be a touch screen display. The physical buttons may be of the type called soft buttons, for which their functions are defined by text or graphics on the display . A physical keyboard (not shown in ) may be a part of the second GUI . The second GUI  provides input and outputs for human interfacing to software that operates the mobile device  and the external device . The external device  can be coupled to the mobile device  either by wired (for example, High Definition Multimedia Interface [HDMI]) or wireless (for example, Bluetooth) means. A docking station (not shown in ) may be provided for the mobile device  to plug into. The docking station may then provide a wired or wireless connection to the external display , which may be a TV monitor or a digital display monitor such as used for laptops. The docking station may incorporate or couple to a physical keyboard. The external device  may comprise only sufficient electronics to accept display information over the coupling means and drive the display  of the second GUI with the information, and to accept user touch inputs from the display and physical buttons on the second GUI.","In one embodiment the external display comprises an external monitor attached to device  via a HDMI cable. As shown, external display  renders a desktop  this is a full screen desktop and therefore has the same boundary as the display . The desktop includes a system status bar  that shows the statuses of windows that are open, each window being generated by an application that is being executed by the second OSE. In , windows , ,  are open. In this particular embodiment, window  is a window generated by an application being executed by the second OSE that duplicates the window  and may add additional graphics, such as tabs  and a title . As discussed above, the first OSE  and the second OSE  operate independently from each other, and co-exist with respect to the other. Each OS ,  is a fully functioning operating system environment, and does not need the other operating system environment to function. The two operating system environments exist on the same mobile device  with independence with respect to the other.","It should be noted that although not shown clearly in windows  and , each window ,  would contain icons and graphics that represent standard applications that are being executed by the second OSE.","Referring to , a software\/hardware architectural block diagram of the mobile device  is shown, detailing a runtime co-existence schema of a software environment, in accordance with some embodiments. In the present exemplary embodiment, the first OSE  is an Android\u2122 based operating environment and the second OS environment  is Ubuntu\u00ae The first operating system environment  includes a portal service module , a portal activity module , an OS services module  and a set of first OS applications . The second operating system environment  includes a resource manager , an Android in a window (AIW) module , a set of second OS applications  and a second OS services module . In embodiments in which the first OSE  is something other than Android, AIW can be referred to as a window in a window WIW.","In some embodiments, the AIW module  is configured to display a first OSE window  within a window  that is rendered on the desktop portion of the GUI display  of the external device  (). The second OSE  drives the second GUI  of the external device .","The portal service module  directs all communication with the resource manager . Additionally, the portal service module  is connected to activity associated with the portal activity module , as well as first OSE  broadcast events.","The second OSE  provides a desktop presentation  that may be presented on the display  of the second GUI . The desktop  is similar to desktops presented on laptop and desktop computers, having a background (wallpaper) area, and a system and an application status area (a Taskbar in Microsoft Windows terminology). One application or a plurality of applications that are being executed on the second OSE  may be presented simultaneously on the desktop . One of the applications is deemed to have \u201cfocus\u201d at any given time, meaning that user interaction with that application is primarily by means of the window of that application. (That is to say, very few user interactions can be made by means other than the window that is in focus. An example is that the window may be maximized, minimized or closed by a user action in the region of the status bar). The application can also respond to system events. Each application window is controlled by the second OSE  to have a particular position. The second OSE application (e.g., one of , ,  that is in focus is controlled by the second OSE  to be identifiable as being in focus by being given unique visual characteristics (such as a different border color, for example). Application windows may or may not overlap on the display of the second GUI, but when they do, each is controlled to appear in some layer order behind the second OSE window that is in focus. (e.g., if window  of  is in focus, then if window  or  were moved to overlap window , they would appear to be behind window ).","Certain ones of the applications that execute on the first OSE  can present differing windows that are each usable on the first GUI display , one at a time. The window that is being rendered at a given time for the first GUI  is herein termed the first OSE window . In some embodiments, every first OSE window  is a full screen window. The first OSE window  presents graphical information from a first OSE application, that is to say, an application that is being executed on the first OSE . Examples are the home screen, a phone book application, a game application, and a web browser application. For some of the first OSE applications the first OSE  may also present graphical information relevant to certain system states (e.g., call indicator, signal strength, time, battery status, etc.). This combined presentation is rendered on the first GUI display  by commands of the first OSE  that use the graphical information from one of the first OSE applications. This first OSE window  can be used for the purpose of user interface with the first OSE , including interaction with the first OSE application that is generating graphical information for the first OSE window . For simplicity, and in more general terms, this document describes such a user interaction as being \u201cwith the OSE\u201d that includes the OSE application that is providing much of the graphics for the window, it being understood that the user inputs are passed through the OSE to the OSE application.","The kernel  includes a set of drivers  and an AEV module . Included with the drivers  are input device drivers for hardware components . The AEV  is a kernel module that takes absolute coordinate and keyboard events from AIW  when it has focus and passes them to an event hub.","The co-existing operating system environments within operating system  communicate with each other. The resource manager , which is part of the second OSE , communicates directly with the portal service module , which is part of the first OSE . Furthermore, the portal service module , which is part of the first OSE , communicates directly with the resource manager . The resource manager  is a set of instructions configured to manage resources shared by the first OSE  and second OSE . The shared resources may include display devices, input devices, power management services and system state information. Furthermore, the resource manager  is configured to control OSE  and OSE  access to the hardware . Additionally, the resource manager  identifies and controls which OSE user interface is displayed through each of the first GUI  and second GUI ","According to the present embodiment, the portal service  is the source of all communications from the first OSE  to the resource manager . Additionally, the portal service  is a sink for all callbacks from the resource manager  to the first OSE . The resource manager  provides a status discoverable application programming interface (API) to the portal service . This API is configured to be called by the resource manager  at any time. The resource manager  is configured to obtain and process runtime status, which allows for the resource manager to maintain a state machine. For the first OSE , the portal service  provides runtime status to processes that require them. Similarly, the portal service  requests and receives status updates from processes which provide status information. A similar communication for the second OSE  is controlled by the resource manager , which provides runtime status to the processes that require them. Resource manager  requests and receives status updates from various processes that provide status information. Device drivers  logically associated with the kernel  communicate directly with the resource manager  as well as the processes that provide runtime status information. By example, the API arbitrates access to user interface devices, such as displays, touch screens or the GUIs. Yet another example, the API arbitrates access to power input devices, such as batteries and\/or AC\/DC wall plugs.","The first OSE  and the second OSE  are independent from the other, and co-exist with respect to the other. Each OSE ,  is a fully functioning operating system environment, and does not need the other operating system environment to function. The two operating system environments exist on the same device  with independence with respect to the other. As identified above, the first and second OSE ,  do not co-exist in a virtualization or emulation scheme, but in fact each operates in its native mode on a single kernel . There is runtime co-existence in which both OSE ,  run in their respective native environments and neither OSE ,  is recompiled, as there is no need to leverage a common C runtime environment. Applications can be accessed by a user which are coded purely for one or the other OSE ,  without an interruption to a user's computing experience.","Referring to , a block diagram shows a co-existence scheme for an Android\u00ae OSE  and an Ubuntu OSE , in accordance with some embodiments. Each OSE ,  operates on a separate runtime environment, which provides software services for programs and\/or processes while the device  is operating. Android processes  and Android libraries  access a Bionic C Library , which is optimized and modified specifically for the Android environment. Ubuntu processes  and Ubuntu libraries  access a Glibc C Library , which is a GNU C library used in many standard desktop Linux-based systems. Each OSE runs on its respective C libraries without conflicting with another operating environment. These attributes are also true in embodiments using other types of OSE's.","Referring to , a more detailed communication path between the first OSE  and the second OSE  described in  is provided, in accordance with some embodiments. An inter-process communication (IPC) system is configured to manage the inter-environment communication flow between the first OSE  and the second OSE . The portal service  communicates with a DBUS Binding , which is a software package containing programming language and executable instructions configured to communicate with a DBUS library . The resource manager  communicates with a Glib DBUS binding , which also is a software package containing programming language and executable instructions configured to communicate with a DBUS library  configured for the second OSE . Both the first OSE  DBUS library  and the second OSE  DBUS library  communicate through a DBUS Daemon , which is logically part of the second OS , and acts as the communication link between the two operating environments.","Referring to , a flow chart  shows some steps of a method of rendering an OSE window in a window of a desktop of a second OSE, in accordance with some embodiments. At step , a first operating system environment (first OSE)  executes in a native mode on a central processing unit (CPU) of a mobile device . The mobile device  comprises a first graphical user interface (GUI) . The first OSE  generates graphical data for a first OSE window . That is to say, the first OSE  (including, but not limited to, the application in focus) generates graphical data from which the pixel values are derived that are stored in a frame buffer. The pixel values in the frame buffer are used to drive one of the displays  and . The first OSE window  can be used on the first GUI  for interfacing with the first OSE .","At step , the second operating system environment (second OSE)  executes in a native mode on the CPU of the mobile device . The second OSE  generates the desktop  that is displayed on a second GUI . The second GUI provides for user interface to the second OSE . In some embodiments the second GUI  is a portion of a device  that is external to and coupled to the mobile device . In other embodiments, the second GUI  may be the first GUI  (i.e., the display for the first and second GUI's is the mobile display ). In yet other embodiments, each of the first and second GUI's may comprise two different displays on one mobile device (not shown in ).","At step  a window  is rendered on the desktop  that comprises the first OSE window  using commands of the second OSE . The window  is hereafter referred to as the WIW . The rendering is responsive to user inputs within the region of the first OSE window  within the window  that are sensed by the second OSE .","It will be appreciated that the steps - of this unique method described above provide significant benefits because the desktop  within which the first OSE window  is shown provides for such graphical objects as titles and status indicators that relate to the first OSE window , but are actually formed outside the image of the first OSE window  by the second OSE  and which provide information that relates directly to the first OSE window .","At step , the second OSE  communicates relevant events to the first OSE . The relevant events comprise user inputs that occur within a region of the WIW  when the WIW  is in focus and global input events relevant to one of the first OSE and first OSE applications. The first OSE passes these inputs to the application of the first OSE that is in focus on the second GUI , or to the first OSE if the inputs are system inputs. As an example of a user input, if the user input is a name selection in a telephone book application that is presenting a directory on the WIW , then the input is passed to the telephone book application. As an example of a global event, an indication may issue from the hardware of the external device that a level setting of an audio volume control has been changed. That event may be passed to a sound application of the first OSE , in response to which the sound application of the first OSE  modifies a signal level of audio being coupled to the external device, and may modify a system indicator of the first OSE window.","At step , in response to events that are relevant to the application that is in focus on WIW , the first OSE will, in many cases, alter the graphical data for the OSE window . This may occur when the relevant event is one that affects the information shown on the first OSE window . The step  of rendering the WIW  includes rendering these changes as they occur, using steps  and . The application in focus generates and modifies the graphical data of the first OSE window  in response to events, and the modification may be substantial. Other software in the first OSE (some of which is described herein above in conjunction with ) may alter the graphical data of the first OSE window  to a lesser extent (such as changing the number of bars in a battery icon). The second OSE , however, typically does not modify the first OSE graphical data very much. For example, the second OSE  may only scale the first OSE graphical data. In some embodiments, the second OSE does not modify the graphical data of the first OSE window  at all.","Referring to , a flow chart  shows some steps of a method for modifying the graphical data generated by the first OSE , in accordance with some embodiments. At step , the first OSE  generates all the graphical data needed to render the first OSE window . This step may comprise modifying graphical data that has been previously generated for the first OSE window , using steps  and  described above. At step , the second OSE  scales the graphical data for presentation in the WIW  of the desktop  of the external device . At step , the second OSE renders the desktop  of the second device, including a WIW  that comprises a scaled version of the first window .","It will be appreciated that step  provides the benefit of updating the first OSE window  by means of the second OSE  from the second GUI  or from relevant events of the second OSE , making it appear to the user that there exists direct interface with the first OSE window .","In other embodiments, other minor aspects, such as border colors of the first window , may be altered by the second OSE .","Referring to , a flow chart  shows some steps of a method of initializing the WIW , in accordance some embodiments. In these embodiments, the mobile device  includes a graphics processing unit, such as an NVIDIA AP20 graphics processing unit (GPU) chipset, and the first OSE  is an Android OSE. At step , the second OSE creates a pixmap corresponding to the first OSE window  in the WIW . At step , the second OSE  gets the memory handle for this pixmap. At step , the second OSE  creates and initializes a surface using this memory handle. At step , the second OSE creates an EGL (Khronos Native Platform Graphics Interface) image from the pixmap. At step , the second OSE  binds a texture to the EGL image.","Referring to , a flow chart  shows some steps of a method of rendering the WIW , in accordance with the embodiments described with reference to FIG. . At step  the second OSE  determines by a communication from the first OSE  that a frame buffer of the first OSE window  has been updated, which may occur, for example, as a result of steps , , and\/or steps  and  described herein above. At step  the second OSE  copies the frame buffer into a surface of the WIW  that is within the GPU. At step  the second OSE  draws the texture corresponding to the surface. In some embodiments, this is the only frame buffer used by the first OSE . It will be appreciated that this technique is an efficient method for updating the first OSE window  as presented on the second GUI .","Referring to  a flow chart  shows some steps of a method for initializing the WIW  in accordance with some embodiments. At step , the second OSE  initializes the desktop  of the second GUI . The desktop (the desktop image) is written from a frame buffer, which is a dedicated storage portion of the CPU that is reserved for storing the pixel values for a display, which in this embodiment is the display . At step , the second OSE  defines a buffer area in memory to receive graphical data of the first OSE window. The buffer is bound to the WIW  located on the desktop . At step , the second OSE  provides address information to the first OSE that allows graphical data to be written into the buffer by the first OSE.","Referring to , a flow chart  shows some steps of a method of rendering the WIW , in accordance with the embodiments described with reference to . At step , the first OSE  writes the graphical data into the buffer or modifies the graphical data in the buffer. Modification may occur, for example, as a result of steps , , and\/or steps  and  described herein above. At step , the second OSE  determines by a communication from the first OSE to update the frame buffer of the desktop  using the graphical data in the buffer. The second OSE  then updates the frame buffer of the desktop from the graphical data in the buffer, which completes the rendering process. It will be appreciated that this technique is an efficient method for updating the first OSE window  as presented on the second GUI .","Referring to , a block diagram shows some hardware blocks of the mobile device , in accordance with some embodiments. Mobile device  preferably comprises device electronic hardware  that includes a central processing unit (CPU)  comprising memory  coupled to a processor . Memory  may comprise random access memory, flash memory, read only memory, disk memory, or any combination thereof. The mobile device also comprises physical hardware, such as a housing, which is not shown in . The memory  stores computer executable instructions which are configured to perform various functions and operations, as described herein. In some embodiments the electronic hardware  may include a GPU  that .is a specialized chipset for rapidly rendering images. The GPU  is typically given direct access to a portion of the memory  that is reserved for a frame buffer , which is used for storing a current image of the GUI desktop  in the form of pixel values. In certain embodiments of the hardware , there will be a second frame buffer in memory  (not shown in ). This may occur when there are two displays. This could occur in a situation in which a mobile device has two displays (e.g., a large tablet display one side that shows a desktop WIW similar to WIW  and a small display facing another direction that displays the first OSE window  or a second WIW). This could also occur when the WIW  is presented on external device  and the first OSE window  or a second WIW is presented on the mobile device  simultaneously. In certain embodiments, such as those in which the GUI  of the mobile device presents a WIW managed by the second OSE  to render the first OSE window , the WIW image boundary may be identical to the first OSE window  image boundary (i.e., titles and tabs may not be rendered when the WIW is rendered on the display  of the mobile device ), such that WIW is not visibly distinguishable in the form generally described as a desktop.","The software environment  () executed by central processing unit  includes first operating system environment  and second operating system environment  that are each in communication with the single Linux kernel , which is also executed by the CPU . The single Linux kernel  is also in communication with many items of the electronic hardware , which are coupled to the CPU , of which a few examples are a transceiver , a display , and an input output port . The electronic hardware  includes input-output ports, of which one is a port  that can be used to couple the mobile device  to the external device . This port  can be an HDMI cable port or other type of cable (wired) port that is compatible with the video requirements of the external device . In some embodiments, it can be a wireless port that can couple an analog or digital video signal to the external device . Both a wired and a wireless port may be provided. In some embodiments, a docking station connector may be included in the electronic hardware . The processor  may be a processor having multiple cores, or may be a reduced instruction set processor, or other type of processor.","While the invention has been particularly shown and described with reference to a particular embodiment, it will be understood by those skilled in the art that various changes in form and details may be made therein without departing from the spirit and scope of the invention. For example, the WIW  may be rendered on display  by the second OSE , when the external device  is not coupled to the mobile device  or is coupled to the mobile device  and is also rendering the WIW, or when the external device  is coupled to the mobile device  but is inactive. It is specifically intended that the present invention not be limited to the embodiments and illustrations contained herein, but include modified forms of those embodiments including portions of the embodiments and combinations of elements of different embodiments as come within the scope of the following claims.","The processes illustrated in this document, for example (but not limited to) the method steps described in , may be performed using programmed instructions contained on a computer readable medium which may be read by processor of a CPU such as processor  of CPU . A computer readable medium may be any tangible medium capable of storing instructions to be performed by a microprocessor. The memory  includes such a medium. The medium may be one of or include one or more of a CD disc, DVD disc, magnetic or optical disc, tape, and silicon based removable or non-removable memory. The programming instructions may also be carried in the form of packetized or non-packetized wireline or wireless transmission signals."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0006","num":"0005"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":["FIG. 10","FIG. 9"]},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":["FIG. 12","FIG. 11"]},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 13"}]},"DETDESC":[{},{}]}
