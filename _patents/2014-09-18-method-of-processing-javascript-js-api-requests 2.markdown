---
title: Method of processing javascript (JS) API requests
abstract: Some embodiments of the invention provide a novel server for processing application programming interface (API) requests. In some embodiments, the API server is written in JavaScript. For example, in some embodiments, the API-accessible objects of this server are each defined in terms of a JavaScript file and a JSON (JavaScript Object Notation) file. At runtime, a runtime processor instantiates each JavaScript object from its associated JavaScript and JSON files. Once instantiated, the JavaScript object can be used to process API requests that refer to the JavaScript object. Some embodiments use novel JSON file structures that allow these embodiments to define rich JavaScript models.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09558020&OS=09558020&RS=09558020
owner: INTERNATIONAL BUSINESS MACHINES CORPORATION
number: 09558020
owner_city: Armonk
owner_country: US
publication_date: 20140918
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CLAIM OF BENEFIT TO PRIOR APPLICATION","REFERENCE TO COMPUTER PROGRAM LISTINGS","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["This application claims benefit to U.S. Provisional Patent Application 62\/051,924, filed Sep. 17, 2014, which is incorporated herein by reference.","This application incorporates by reference a computer program listing appendix in an ASCII text file having a title \u201c2014_09_17_SLOO_P0001P_Appendices.txt\u201d, which includes an Appendix A portion, an Appendix B portion, and an Appendix C portion. The text file \u201c2014_09_17_SLOO_P0001P_Appendices.txt\u201d has a size of 56347 bytes and was created on Sep. 17, 2014.","With the proliferation of mobile devices, the need for servers that can process application programming interface (API) requests from the mobile devices has never been greater. There is also a need for robust frameworks that allow developers create programs for processing such API requests on clients and on the server. Ideally, this framework would make the processing of such requests on a client or on a server seamless.","Some embodiments of the invention provide a novel server for processing application programming interface (API) requests. In some embodiments, the API server is written in JavaScript. For example, in some embodiments, the API-accessible objects of this server are each defined in terms of a JavaScript file and a JSON (JavaScript Object Notation) file. At runtime, a runtime processor instantiates each JavaScript object from its associated JavaScript and JSON files. Once instantiated, the JavaScript object can be used to process API requests that refer to the JavaScript object. Some embodiments use novel JSON file structures that allow these embodiments to define rich JavaScript models, as further described below.","To process API calls to JavaScript objects, the API server of some embodiments needs to exchange data with (e.g., to read from or to write to) a variety of different backend data storages (e.g., relational databases, REST accessible data storages, SOAP accessible data storages, memory, etc.) through a variety of different interfaces. To allow for this, the server of some embodiments includes a data storage abstractor and a data storage connector. The data storage abstractor provides a layer of data abstraction between the JavaScript (JS) objects and the underlying data in the backend data storages. For instance, in some embodiments, the abstractor translates the JavaScript object definitions to the object definitions of the underlying data storages. In other embodiments, the abstractor simply provides a set of functions that allows the JS objects to exchange data with the backend data storages. For instance, in some embodiments, the abstractor provides create, retrieve, update, and delete (CRUD) functions to connect the JavaScript objects to the backend data storages. In these or other embodiments, the abstractor can also connect to the backend data storages through REST APIs, SOAP web services, and other storage services.","In some embodiments, the data storage abstractor is backed by the data storage connector, which implements the data exchange logic using data storage drivers or other client APIs. In some embodiments, the JavaScript objects also connect to the backend data storages through a replication manager that connects the JavaScript objects to the data storage connectors and synchronizes the data between the JS object and the backend data storage. Instead of using the replication manager to synchronize the data between a JS object and a backend data storage, or in conjunction with this usage, some embodiments use the replication manager to synchronize the data between two API servers or between an API server and a client.","The JavaScript API server in some embodiments can handle a large number of concurrent sessions with a large number of devices (e.g., computers, mobile devices, etc.). For instance, in some embodiments, this API server has a non-blocking input\/output (I\/O) interface that can concurrently maintain a large number of concurrent sessions. The I\/O interface of some embodiments is a single-threaded process that does not consume too much of the system resources, which, in turn allows the server to be able to handle a large number of concurrent sessions. The JavaScript API server in some embodiments can maintain a session with a connecting device (e.g., a connecting mobile device) for a long duration of time and without interruption. In some embodiments, this API server can maintain a session for a long duration because it uses a web socket manager to manage the connection session.","In some embodiments, the JavaScript API server exposes its APIs (i.e., exposes its accessible objects through APIs) to other devices (e.g., other servers, computers, mobile devices) through non-proprietary web services. For instance, the server of some embodiments exposes its APIs through REST (Representational State Transfer) web services. Other embodiments expose the APIs through other services.","The API server of some embodiments processes API requests from client devices (e.g., mobile devices) that have the capability to process some or all of their API requests locally. In these embodiments, the client devices may process an API locally by accessing the local data stores through an object (called a proxy object below) that resides on the client, or by directing the server to process this API request remotely. The proxy object in some embodiments is a JS object that is constructed from a class description that is specified by a JavaScript file and a JSON file on the client. For instance, in some embodiments, the proxy objects on the client device are JS objects when the proxy objects are part of an application that executes on top of a JS engine of a browser on the client device. In such cases, the JS and JSON files on the client device are identical or similar to the two corresponding files that are used to define the object on the API server in some embodiments.","In other embodiments, the proxy object on a client device can be a non-JS object (e.g., a Java object or an objective C object). For instance, in some embodiments, the proxy objects on the client device are non-JS objects when the proxy objects are part of an application that executes natively on top of the operating system (e.g., on top of iOS or Android operating system) of the client device. For applications that run natively on a device's operating system, some embodiments do not distribute models that are defined by reference to JS and JSON files. In some of these embodiments, the client device includes an adapter that has the capability to query the server dynamically for models and then instantiates them as native object equivalent (e.g., as objective C objects in iOS and as Java objects in Android) at runtime.","In some embodiments, the API calls on the client and server are identical and hence are referred to as isomorphic API calls. In some of these embodiments, the format of the API calls is exactly the same. In other embodiments, the format is somewhat different (e.g., when JavaScript objects are being executed on the server, while Java or Objective C objects are being executed on the clients). However, even in these embodiments, the APIs on the server and client can be isomorphic as the same set of parameters are passed along with the API and the same set of parameters are returned from the API on the client and the server. In other words, when applications run natively on the client device operating system, the proxy object that is instantiated in the native environment represents and is an isomorphic equivalent of what is specified on the server.","As mentioned above, some embodiments use novel JSON file structures that allow these embodiments to define rich JavaScript models, each of which can be instantiated at runtime to be an object that can process an API request (e.g., on the client or on the server). Also, as mentioned above, each model includes (1) a JSON file that describes the properties of the object, and (2) a JavaScript file that describes the behaviors of the object.","In some embodiments, the JSON file structure includes (1) a rich description of properties that relate to data tuples stored on data storages, (2) control logic for restricting access to the data tuples, and (3) relationship attributes that define the relationship between the JSON file's model and other models. The rich property attributes of the JSON file allows a data storage to be specifically identified in terms of its location, name, and attributes, and also allows one JSON file to pull values for one or more properties from two or more data storages.","The relationship attributes of a particular object's JSON file allows one or more links to other objects to be specified when the particular object is being instantiated. In some embodiments, the control logic of a JSON file includes validation rules and access control list (ACL) rules. The validation rules in some embodiments ensure that the data tuples that are gathered from one or more data storages meet a required constraint that is specified for them in the rules. For instance, a validation rule might require that \u201cCar\u201d object have an associated VIN attribute. When a retrieved Car data tuple does not have a VIN attribute, the data tuple is not accepted as a Car because it does not meet the specified constraint for a Car.","ACL rules in some embodiments ensure that the portion of a retrieved data tuple that is presented on a device satisfies certain access control criteria. For instance, an API to a bank account object might retrieve one set of values on both a computer and a mobile device. However, while the object's ACL rule might allow all of the values to be presented on the computer, the object's ACL rule might prevent some of the data values (e.g., bank account number) from being presented on the mobile device, because mobile devices might be as being inherently less secure than computers. In some embodiments, the ACLs and validation rules are implemented as hooks (i.e., function calls) that are called before or after calling of the API. In other embodiments, the ACLs and validation rules are processed by the runtime processor before or after processing the API request.","Some embodiments of the invention provide a framework for defining models by defining JS files and\/or JSON files. As mentioned above, a model can be defined by an associated pair of JS file and JSON file in some embodiments. In some embodiments, the framework pre-defines one set of functions for each object that is instantiated from each model. For instance, in some embodiments, each JS object can perform the CRUD functions.","The framework of some embodiments allows additional functions to be written in the JS file in order to augment and override the set of functions of an object that is instantiated from the JS file. These additional functions can be written as hooks (e.g., function calls that are processed before or after a baseline function) that can be processed locally (e.g., on a client device) or remotely (e.g., on the server). The processing of these function calls is quite simple given the isomorphic nature of the API calls in some embodiments. The call can be made similarly on the client device or on the server. Also, on the client device, the call can be made without consideration of whether the call is going to be processed locally or remotely. In some embodiments, the framework can determine whether to process this call locally or remotely based on pre-defined conditions for processing the call or dynamically assessed conditions for processing the call.","The preceding Summary is intended to serve as a brief introduction to some embodiments of the invention. It is not meant to be an introduction or overview of all-inventive subject matter disclosed in this document. The Detailed Description that follows and the Drawings that are referred to in the Detailed Description will further describe the embodiments described in the Summary as well as other embodiments. Accordingly, to understand all the embodiments described by this document, a full review of the Summary, Detailed Description and the Drawings is needed. Moreover, the claimed subject matters are not to be limited by the illustrative details in the Summary, Detailed Description and the Drawings, but rather are to be defined by the appended claims, because the claimed subject matters can be embodied in other specific forms without departing from the spirit of the subject matters.","In the following detailed description of the invention, numerous details, examples, and embodiments of the invention are set forth and described. However, it will be clear and apparent to one skilled in the art that the invention is not limited to the embodiments set forth and that the invention may be practiced without some of the specific details and examples discussed.","Some embodiments of the invention provide a novel server for processing application programming interface (API) requests. In some embodiments, the API server is written in JavaScript. For examples, in some embodiments, the API-accessible objects of this server are each defined in terms of a JavaScript (JS) file and a JSON file. At runtime, a runtime processor instantiates each JavaScript object from its associated JS and JSON files. In some embodiments, a JS file and a JSON file are associated with each other through their common names.",{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 1","b":["100","190","192","194","196","105","110","115","120","125","135","140","145"]},"The runtime processor  in some embodiments instantiates a JavaScript object  for each model based on the object's description that is contained in its associated JavaScript model (i.e., that is contained in the JS object's associated JS file and JSON file). The Appendix A portion of the incorporated ASCII text file computer program listing appendix provides the source code within a JS framework of some embodiments that can be used to instantiate a JS object from the description of the object in a JS file and a JSON file. Once instantiated, the JavaScript object can be used to process API requests from other devices (such as mobile devices, client computers, and other server computers). These other devices will be referred to below as client devices of the API server.","To process API calls, the JS objects of some embodiments needs to exchange data with (e.g., to read from or to write to) a variety of different backend data storages - that have a variety of different interfaces. The data storage abstractor  and the data storage connector  allow these JS objects to exchange data with the backend data storages. The data storage abstractor  provides a layer of data abstraction between the JavaScript objects and the underlying data in the backend data storages. For instance, in some embodiments, the abstractor  translates the JavaScript object definitions to the object definitions of the underlying data storages. In other embodiments, the abstractor  simply provides a set of functions that allows the JS objects to exchange data with the backend data storages. For instance, in some embodiments, the abstractor  provides create, retrieve, update, and delete (CRUD) functions to connect the JS objects to the backend data storages. In these or other embodiments, the abstractor  can also connect to backend data storages through REST APIs, SOAP web services, and other data storage services.","The data storage abstractor , in some embodiments, is backed by the data storage connector , which implements the data exchange logic using data storage drivers or other client APIs. The JS objects also connect to backend data storages in some embodiments through a replication manager (not shown) that connects the JavaScript object to the data storage connectors and synchronizes the data between the JS object and the backend data storage. Such a replication manager is also used in some embodiments to synchronize the data between two API servers or between an API server and a client. In some embodiments, the replication manager synchronizes the data between the API server and another device (e.g., a server computer or a client device, such as a mobile device or a client computer) by synchronizing a persisted version of the JS objects that are stored on the API server and the other device.","Through the I\/O manager , the API server in some embodiments can handle a large number of concurrent sessions with a large number of devices (e.g., computers, mobile devices, etc.). For instance, in some embodiments, this manager has a non-blocking input\/output (I\/O) interface that can concurrently maintain a large number of concurrent sessions. The I\/O interface of some embodiments is a single-threaded process that does not consume too much of the system resources, which in turn, allows the server to be able to handle a large number of concurrent sessions. This I\/O manager  in some embodiments can also maintain a session with a connecting device (e.g., a connecting mobile device) for a long duration of time and without interruption. In some embodiments, the I\/O manager  can maintain a session for a long duration because it uses a web socket manager to manage the connection session.","The API handler  exposes the API server's JS objects  to the other devices (e.g., other servers , computers , and mobile devices  and ). In some embodiments, the handler  uses non-proprietary web services to expose the APIs. For instance, the handler  of some embodiments exposes the JS object APIs through REST web services. Other embodiments expose the APIs through other services.","The API server of some embodiments processes API requests from client devices (e.g., mobile devices) that have the capability to process some or all of their API requests locally.  presents a conceptual illustration of the API processing modules of one such client device. As shown, this client device  has a runtime processor  that instantiates several proxy objects  that are proxies on the client device for several JS objects that operate on the API server .","Once instantiated, a proxy object  on the client can be used to process an API request from local data storages  that reside on the client device , or by calling a corresponding JS object  that resides on the API server  so that this object  can process this request (e.g., by using backend data storages -). As described in the U.S. patent application Ser. No. 14\/490,633, entitled \u201cDynamic Determination of Local and Remote API Calls,\u201d which is incorporated herein by reference, the determination of whether the API request should be processed locally on the client or remotely on the server is made dynamically on the client in some embodiments. This dynamic decision is based on conditions that are dynamically assessed on the client in some embodiments.","As shown, the proxy objects  access the local data storages  through a data abstractor  and a data connector , which provide the same operations on the client device  as the data abstractor  and the data connector  provide on the server . In some embodiments, the data abstractor  and the data connector  are not used in some of the client-side environments as the objects  can pull data directly from the client's local storages without going through the data abstraction and connection layers. Also, the proxy object  accesses its corresponding JS object  on the API server through one or more modules that form a server interface . Several examples of these modules will be further described below.","In the discussion below, an object  on the client is referred to as a proxy object, as it can act on the client as a proxy of the object  on the server. As further described below, the proxy object on a client device can be a different type of object (e.g., a JS object, a Java object, or an objective C object) in some embodiments. For instance, in some embodiments, some mobile applications execute on top of a JS engine of a browser on a client device, while other mobile applications execute natively on top of the operating system of the client device. In some of these embodiments, the applications that execute on top of the browser's JS engine instantiate JS proxy objects, while the applications that run natively instantiate other types of proxy objects (e.g., Java objects or objective C objects).","In some embodiments where the proxy object is a JS object (e.g., when the proxy objects are part of an application that executes on top of a JS engine of a browser on the client device), the proxy object is constructed from a class description that is specified by a JavaScript file and a JSON file on the client. In some of these embodiments, the JS and JSON files on the client device are identical or similar to the two corresponding files that are used to define the object on the API server in some embodiments.","When the proxy object on a client device is not a JS object (e.g., it is a Java object or an objective C object that is defined to run natively on the client device's OS), some embodiments do not distribute models that are defined by reference to JS and JSON files. In some of these embodiments, the client device includes an adapter that has the capability to query the server dynamically for an object description, and then, based on the received object description, instantiate a native object (e.g., as objective C objects in iOS and as Java objects in Android) at runtime.","In some embodiments, the API calls on the client and server are identical and hence are referred to as isomorphic API calls. In some of these embodiments, the format of the API calls is exactly the same. In other embodiments, the format is somewhat different (e.g., when JavaScript objects are being executed on the server, while Java or Objective C objects are being executed on the clients). However, even in these embodiments, the APIs on the server and client can be isomorphic as the same set of parameters are passed along with the API and the same set of parameters are returned from the API on the client and the server. In other words, when applications run natively on the client device operating system, the proxy object that is instantiated in the native environment represents and is an isomorphic equivalent of what is specified on the server.","Some embodiments of the invention provide a framework for defining models by defining JS files and\/or JSON files. As mentioned above, a model can be defined by an associated pair of JS file and JSON file in some embodiments. In some embodiments, the framework pre-defines one set of functions for each object that is instantiated from each model. For instance, in some embodiments, each JS object can perform the CRUD functions.","The framework of some embodiments allows additional functions to be written in the JS file in order to augment and override the set of functions of an object that is instantiated from the JS file. These additional functions can be written as hooks (e.g., function calls that are processed before or after a baseline function) that can be processed locally (e.g., on a client device) or remotely (e.g., on the server). The processing of these function calls is quite simple given the isomorphic nature of the API calls in some embodiments. The call can be made identically on a client device irrespective of whether it is going to be processed locally or remotely. The framework can determine whether to process this call locally or remotely based on pre-defined conditions for processing the call or dynamically assessed conditions for processing the call.",{"@attributes":{"id":"p-0046","num":"0045"},"figref":"FIG. 3","b":["300","305","310","315"]},"As shown, besides a name key , the JSON file  of some embodiments includes (1) a rich description of properties  and  that relate to data tuples stored on data storages, (2) properties  that have fix values and do not relate to any data tuples stored on data storages, (3) control logics  and  for restricting access to the data tuples, and (4) relationship attributes  that define the relationship between the JSON file's model and other models. In some embodiments, the rich property attributes  and  of the JSON file allow a data storage to be specifically identified in terms of its location, name, and attributes, and also allows one JSON file to pull values for one or more properties from two or more data storages.","In some embodiments, the control logic  and  of a JSON file include validation rules and access control list (ACL) rules. The validation rules  in some embodiments ensure that the data tuples that are gathered from one or more data storages meet a required constraint that is specified for them in the rules. For instance, a validation rule might require that \u201cCar\u201d object have an associated VIN attribute. When a retrieved Car data tuple does not have a VIN attribute, the data tuple is not accepted as a Car because it does not meet the specified constraint for a Car.","ACL rules  in some embodiments ensure that the portion of a retrieved data tuple that is presented on a device satisfies certain access control criteria. For instance, an API to a bank account object might retrieve one set of values on both a computer and a mobile device. However, while the object's ACL rule might allow all of the values to be presented on the computer, the object's ACL rule might prevent some of the data values (e.g., bank account number) from being presented on the mobile device, because mobile devices might be as being inherently less secure than computers. In some embodiments, the ACLs and validation rules are implemented as hooks (i.e., function calls) that are called before or after processing the API.","The relations attribute  of a particular object's JSON file allows one or more links to other objects to be specified when the particular object is being instantiated.","Several examples of JSON files will now be described to further elaborate on the JSON file format of some embodiments. In some embodiments, a model is named as model-name.json, where model-name is the name of the model. For example customer.json for a customer model. The customer model's JSON file may specify the following attributes,",{"@attributes":{"id":"p-0052","num":"0051"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"{"]},{"entry":[{},"\u2002\u201cname\u201d: \u201cCustomer\u201d,"]},{"entry":[{},"\u2002\u201cbase\u201d: \u201cUser\u201d,"]},{"entry":[{},"\u2002\u201cidInjection\u201d: false,"]},{"entry":[{},"\u2002\u201cstrict\u201d: true,"]},{"entry":[{},"\u2002\u201coptions\u201d: { ... },"]},{"entry":[{},"\u2002\u201cproperties\u201d: { ... },"]},{"entry":[{},"\u2002\u201cvalidations\u201d: [...],"]},{"entry":[{},"\u2002\u201crelations\u201d: {...},"]},{"entry":[{},"\u2002\u201cacls\u201d: [...],"]},{"entry":[{},"\u2002\u201cscopes\u201d: {...},"]},{"entry":[{},"\u2002\u201cindexes\u201d : { ...},"]},{"entry":[{},"\u2002\u201cmethods\u201d: [...]"]},{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{}},{"@attributes":{"id":"p-0053","num":"0052"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"147pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Attribute","Type","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["name","String","Name of the model."]},{"entry":[{},{},"Required"]},{"entry":["plural","String","Plural form of the model name."]},{"entry":[{},{},"Optional: Defaults to plural of name property"]},{"entry":[{},{},"using standard English conventions."]},{"entry":["base","String","Name of another model that this model extends."]},{"entry":[{},{},"The model will \u201cinherit\u201d properties"]},{"entry":[{},{},"and methods of the base model."]},{"entry":[{},{},"Required"]},{"entry":["idInjection","Boolean","Whether to automatically add an id property"]},{"entry":[{},{},"to the model:"]},{"entry":[{},{},"true: id property is added to the model"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"automatically. This is the default."]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},{},"false: id property is not added to the model"]},{"entry":[{},{},"Not required"]},{"entry":["strict","Boolean","Specifies whether the model accepts only"]},{"entry":[{},{},"predefined properties or not."]},{"entry":[{},{},"One of:"]},{"entry":[{},{},"true: Only properties defined in the model"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"are accepted. Use this mode if developer"]},{"entry":[{},"wants to make sure only predefined"]},{"entry":[{},"properties are accepted."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"false: The model will be an open model."]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"All properties are accepted, including the"]},{"entry":[{},"ones that not predefined with the model."]},{"entry":[{},"This mode is useful if the mobile"]},{"entry":[{},"application just wants to store free form"]},{"entry":[{},"JSON data to a schema-less database such"]},{"entry":[{},"as MongoDB,"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Undefined: Default to false unless the data"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"source is backed by a relational database"]},{"entry":[{},"such as Oracle or MySQL."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["options","Object","JSON object that specifies model options."]},{"entry":["properties","Object","JSON object that specifies the properties"]},{"entry":[{},{},"in the model."]},{"entry":["validation","Object","JSON object that specifies validation"]},{"entry":[{},{},"constrains in the model"]},{"entry":["relations","Object","Object containing relation names and"]},{"entry":[{},{},"relation definitions."]},{"entry":["Acls","Array","Set of ACL specifications that describes"]},{"entry":[{},{},"access control for the model."]},{"entry":["scopes","Object","Object that allows developer to specify"]},{"entry":[{},{},"commonly-used queries that the developer"]},{"entry":[{},{},"can reference as method calls on a model."]},{"entry":["indexes","Object","Object for declaring method"]},{"entry":["methods",{},"Methods of object"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"In this set of attributes, the options key specifies data source-specific options. When a model is attached to a data source of a certain type (e.g., Oracle or MySQL), a developer can specify the name of the database schema and the table as properties under the key with the name of the connector type such as below:",{"@attributes":{"id":"p-0055","num":"0054"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"..."]},{"entry":[{},"\u201coptions\u201d: {"]},{"entry":[{},"\u2002\u201cmysql\u201d: {"]},{"entry":[{},"\u2003\u201ctable\u201d: \u201clocation\u201d"]},{"entry":[{},"\u2002},"]},{"entry":[{},"\u2002\u201cmongodb\u201d: {"]},{"entry":[{},"\u2003\u201ccollection\u201d: \u201clocation\u201d"]},{"entry":[{},"\u2002},"]},{"entry":[{},"\u2002\u201coracle\u201d: {"]},{"entry":[{},"\u2003\u201cschema\u201d: \u201cBLACKPOOL\u201d,"]},{"entry":[{},"\u2003\u201ctable\u201d: \u201cLOCATION\u201d"]},{"entry":[{},"\u2002}"]},{"entry":[{},"},"]},{"entry":[{},"..."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"Properties key defines one or more properties. One example of a basic property definition is as follows:",{"@attributes":{"id":"p-0057","num":"0056"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u201cproperties\u201d: {"]},{"entry":[{},"\u2002\u201cfirstName\u201d: {"]},{"entry":[{},"\u2003\u201ctype\u201d: \u201cString\u201d,"]},{"entry":[{},"\u2003\u201crequired\u201d: \u201ctrue\u201d"]},{"entry":[{},"\u2002},"]},{"entry":[{},"\u2002\u201cid\u201d: {"]},{"entry":[{},"\u2003\u201ctype\u201d: \u201cNumber\u201d,"]},{"entry":[{},"\u2003\u201cid\u201d: true,"]},{"entry":[{},"\u2003\u201cdoc\u201d: \u201cUser ID\u201d"]},{"entry":[{},"},"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{}},{"@attributes":{"id":"p-0058","num":"0057"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"126pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}},{"entry":["Key","Required?","Type","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["doc","No","String","Documentation for the property."]},{"entry":["id","No","Boolean","Whether the property is a unique"]},{"entry":[{},{},{},"identifier. Default is false."]},{"entry":["required","No","Boolean","Whether a value for the property is"]},{"entry":[{},{},{},"required."]},{"entry":[{},{},{},"Default is false."]},{"entry":["type","Yes","String","Property type. In some embodiments,"]},{"entry":[{},{},{},"can be null, Boolean, number, string,"]},{"entry":[{},{},{},"object, array, date, buffer, and GeoPoint."]},{"entry":["*","No","Various"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}}}},"br":{}},"To explicitly specify a property as ID, the id property of the option should be set to true in some embodiments. The ID property value must be one of:\n\n","In database terms, key column(s) are ID properties. Such properties are defined with the \u201cid\u201d attribute set to true or a number as the position for a composite key. For example,",{"@attributes":{"id":"p-0061","num":"0063"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"{"]},{"entry":[{},"\u2002\u201cmyId\u201d: {"]},{"entry":[{},"\u2003\u201ctype\u201d: \u201cstring\u201d,"]},{"entry":[{},"\u2003\u201cid\u201d: true"]},{"entry":[{},"\u2002}"]},{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{}},"Some embodiments allow the definition of a composite ID that has more than one property. For example, an inventory object can be defined as:",{"@attributes":{"id":"p-0063","num":"0065"},"tables":{"@attributes":{"id":"TABLE-US-00007","num":"00007"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"var InventoryDefinition = {"]},{"entry":[{},"\u2002productId: {type: String, id: 1},"]},{"entry":[{},"\u2002locationId: {type: String, id: 2},"]},{"entry":[{},"\u2002qty: Number"]},{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{}},"When using an RDB data source, some embodiments allow a developer to specify the following properties that describe the columns in the database.",{"@attributes":{"id":"p-0065","num":"0067"},"tables":{"@attributes":{"id":"TABLE-US-00008","num":"00008"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"119pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}},{"entry":[{},"Property","Type","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"columnName","String","Column name"]},{"entry":[{},"dataType","String","Data type as defined in the database"]},{"entry":[{},"dataLength","Number","Data length"]},{"entry":[{},"dataPrecision","Number","Numeric data precision"]},{"entry":[{},"dataScale","Number","Numeric data scale"]},{"entry":[{},"nullable","Boolean","If true, data can be null"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}}}}},"For example, a property can be mapped to a column in an Oracle database table, by stating the following in the JSON file:",{"@attributes":{"id":"p-0067","num":"0069"},"tables":{"@attributes":{"id":"TABLE-US-00009","num":"00009"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"..."]},{"entry":[{},"\u201cname\u201d: {"]},{"entry":[{},"\u2003\u201ctype\u201d: \u201cString\u201d,"]},{"entry":[{},"\u2003\u201crequired\u201d: false,"]},{"entry":[{},"\u2003\u201clength\u201d: 40,"]},{"entry":[{},"\u2003\u201coracle\u201d: {"]},{"entry":[{},"\u2003\u2002\u201ccolumnName\u201d: \u201cNAME\u201d,"]},{"entry":[{},"\u2003\u2002\u201cdataType\u201d: \u201cVARCHAR2\u201d,"]},{"entry":[{},"\u2003\u2002\u201cdataLength\u201d: 40,"]},{"entry":[{},"\u2003\u2002\u201cnullable\u201d: \u201cY\u201d"]},{"entry":[{},"\u2003}"]},{"entry":[{},"\u2002}"]},{"entry":[{},"..."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"This is a rich description of a backend data storage and a particular data tuple field (i.e., columnName, dataType, dataLength, etc.) in this storage. Providing such a rich description in a JSON file of a model is quite novel, as other prior approaches do not provide such rich attribute descriptions in JSON files.","In some embodiments, format conversions are declared in properties, per the keys in the following table:",{"@attributes":{"id":"p-0070","num":"0072"},"tables":{"@attributes":{"id":"TABLE-US-00010","num":"00010"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"126pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Key","Type","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["trim","Boolean","Whether to trim the string"]},{"entry":["lowercase","Boolean","Whether to convert a string to lowercase"]},{"entry":["uppercase","Boolean","Whether to convert a string to uppercase"]},{"entry":["format","Regular","Format for a date property."]},{"entry":[{},"expression"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}}},"As mentioned above, the validation key specifies constraints on data with validations properties. The table below provides an example of keys that can be used to define validation constraints in the JSON file in some embodiments.",{"@attributes":{"id":"p-0072","num":"0074"},"tables":{"@attributes":{"id":"TABLE-US-00011","num":"00011"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"147pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Key","Type","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["default","Any","Default value of the property."]},{"entry":["required","Boolean","Whether the property is required."]},{"entry":["pattern","String","Regular expression pattern that a string should"]},{"entry":[{},{},"match"]},{"entry":["max","Number","Maximum length for string types."]},{"entry":["min","Number","Minimum length for string types."]},{"entry":["length","Number","Maximum size of a specific type, for example"]},{"entry":[{},{},"for CHAR types."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}}},"One example of setting a validation constraint with such keys is provided below.",{"@attributes":{"id":"p-0074","num":"0076"},"tables":{"@attributes":{"id":"TABLE-US-00012","num":"00012"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"154pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u201cusername\u201d: {"]},{"entry":[{},"\u2003\u201ctype\u201d: \u201cstring\u201d,"]},{"entry":[{},"\u2003\u201cdoc\u201d: \u2033User account name,"]},{"entry":[{},"\u2003\u201cmin\u201d: 6,"]},{"entry":[{},"\u2003\u201cmax\u201d: 24"]},{"entry":[{},"}"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"This validation constraint states that the username has to be string, its documentation has to contain \u201cUser account name\u201d, and it has to be between 6-24 characters long. The validation class of the framework of some embodiments will be further described below.","As mentioned above, the relations key defines relationships between models through a JSON object. Each key in this object is the name of a related model, and the value is a JSON object as described in the table below. For example, the JSON file snippet below specifies that a JSON model belongs to an account model, and has a \u201chasMany\u201d relationship to transaction and accessToken models.",{"@attributes":{"id":"p-0077","num":"0079"},"tables":{"@attributes":{"id":"TABLE-US-00013","num":"00013"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"161pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2003\u2003\u201crelations\u201d: {"]},{"entry":[{},"\u2003\u2003\u2002\u201caccessTokens\u201d: {"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u201cmodel\u201d: \u201caccessToken\u201d,"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u201ctype\u201d: \u201chasMany\u201d,"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u201cforeignKey\u201d: \u201cuserId\u201d"]},{"entry":[{},"\u2003\u2003\u2002},"]},{"entry":[{},"\u2003\u2003\u2002\u201caccount\u201d: {"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u201cmodel\u201d: \u201caccount\u201d,"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u201ctype\u201d: \u201cbelongsTo\u201d"]},{"entry":[{},"\u2003\u2003\u2002},"]},{"entry":[{},"\u2003\u2003\u2002\u201ctransactions\u201d: {"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u201cmodel\u201d: \u201ctransaction\u201d,"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u201ctype\u201d: \u201chasMany\u201d"]},{"entry":[{},"\u2003\u2003\u2002}"]},{"entry":[{},"\u2003\u2003},"]},{"entry":[{},"..."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"The table below provides an example of keys that can be used to define relations in the JSON file in some embodiments.",{"@attributes":{"id":"p-0079","num":"0081"},"tables":{"@attributes":{"id":"TABLE-US-00014","num":"00014"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"140pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Key","Type","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["model","String","Name of the related model. Required."]},{"entry":["type","String","Relation type. Required."]},{"entry":[{},{},"One of:"]},{"entry":[{},{},"hasMany"]},{"entry":[{},{},"belongsTo"]},{"entry":[{},{},"hasAndBelongsToMany"]},{"entry":[{},{},"For hasMany, developer can also specify a"]},{"entry":[{},{},"hasManyThrough relation by adding a"]},{"entry":[{},{},"\u201cthrough\u201d key: {through: \u2018modelName\u2019}"]},{"entry":["foreignKey","String","Optional foreign key used to find related model"]},{"entry":[{},{},"instances."]},{"entry":["through","String","Name of model creating hasManyThrough"]},{"entry":[{},{},"relation. See example below."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}}},"Example of hasManyThrough:",{"@attributes":{"id":"p-0081","num":"0083"},"tables":{"@attributes":{"id":"TABLE-US-00015","num":"00015"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"154pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u201cpatient\u201d: {"]},{"entry":[{},"\u2003\u2003\u201cmodel\u201d: \u201cphysician\u201d,"]},{"entry":[{},"\u2003\u2003\u201ctype\u201d: \u201chasMany\u201d,"]},{"entry":[{},"\u2003\u2003\u201cthrough\u201d : \u201cappointment\u201d"]},{"entry":[{},"}"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"In this example, a patient model can have many relationships with appointments through one Or more physician models.","The value of an ACL key is an array of objects that describes the access controls for the model. Each object has the keys described in the table below.",{"@attributes":{"id":"p-0084","num":"0086"},"tables":{"@attributes":{"id":"TABLE-US-00016","num":"00016"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"161pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u201cacls\u201d: ["]},{"entry":[{},"\u2003\u2003{"]},{"entry":[{},"\u2003\u2003\u2002\u201cpermission\u201d: \u201cALLOW\u201d,"]},{"entry":[{},"\u2003\u2003\u2002\u201cprincipalType\u201d: \u201cROLE\u201d,"]},{"entry":[{},"\u2003\u2003\u2002\u201cprincipalId\u201d: \u201c$everyone\u201d,"]},{"entry":[{},"\u2003\u2003\u2002\u201cproperty\u201d: \u201cmyMethod\u201d"]},{"entry":[{},"\u2003\u2003},"]},{"entry":[{},"\u2003\u2003..."]},{"entry":[{},"]"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"The table below provides a list of keys by which an ACL key can be defined in some embodiments.",{"@attributes":{"id":"p-0086","num":"0088"},"tables":{"@attributes":{"id":"TABLE-US-00017","num":"00017"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"133pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Key","Type","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["accessType","String","The type of access to apply. One of:"]},{"entry":[{},{},"READ"]},{"entry":[{},{},"WRITE"]},{"entry":[{},{},"EXECUTE"]},{"entry":[{},{},"ALL (default)"]},{"entry":["permission","String","Type of permission granted. Required."]},{"entry":[{},{},"One of:"]},{"entry":[{},{},"ALARM - Generate an alarm, in a system"]},{"entry":[{},{},"\u2003dependent way, the access specified in"]},{"entry":[{},{},"\u2003the permissions component of the ACL"]},{"entry":[{},{},"\u2003entry."]},{"entry":[{},{},"ALLOW - Explicitly grants access to the"]},{"entry":[{},{},"resource."]},{"entry":[{},{},"AUDIT - Log, in a system dependent way,"]},{"entry":[{},{},"\u2003the access specified in the permissions"]},{"entry":[{},{},"\u2003component of the ACL entry."]},{"entry":[{},{},"DENY - Explicitly denies access to the"]},{"entry":[{},{},"\u2003resource."]},{"entry":["principalId","String","Principal identifier. Required."]},{"entry":[{},{},"The value must be one of:"]},{"entry":[{},{},"A user ID (String|number|any)"]},{"entry":[{},{},"One of the following predefined dynamic"]},{"entry":[{},{},"roles:"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"119pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"$everyone - Everyone"]},{"entry":[{},"$owner - Owner of the object"]},{"entry":[{},"$related - Any user with a relationship"]},{"entry":[{},"to the object"]},{"entry":[{},"$authenticated - Authenticated user"]},{"entry":[{},"$unauthenticated - Unauthenticated user"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},{},"A static role name"]},{"entry":["principalType","String","Type of the principal. Required."]},{"entry":[{},{},"One of:"]},{"entry":[{},{},"Application"]},{"entry":[{},{},"User"]},{"entry":[{},{},"Role"]},{"entry":["property",{},"Specifies a property\/method\/relation on a"]},{"entry":[{},{},"given model. It further constrains where the"]},{"entry":[{},{},"ACL applies."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"A scopes key enables a developer to specify commonly-used queries that the developer can reference as method calls on a model. The scopes key defines one or more scopes (named queries) for models. A scope key maps a name to a predefined filter object to be used by the model's find( ) method, for example:",{"@attributes":{"id":"p-0088","num":"0090"},"tables":{"@attributes":{"id":"TABLE-US-00018","num":"00018"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u201cscopes\u201d: {"]},{"entry":[{},"\u2003\u2003\u201cvips\u201d: {\u201cwhere\u201d: {\u201cvip\u201d: true}},"]},{"entry":[{},"\u2003\u2003\u201ctop5\u201d: {\u201climit\u201d: 5, \u201corder\u201d: \u201cage\u201d}"]},{"entry":[{},"}"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"The snippet above defines two named queries for the model:\n\n","Within the scopes object, the keys are the names, and each value defines a filter object. In some embodiments, a developer can also define a scope programmatically using a model's scope( ) method, for example:",{"@attributes":{"id":"p-0091","num":"0095"},"tables":{"@attributes":{"id":"TABLE-US-00019","num":"00019"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"User.scope(\u2018vips\u2019, {where: {vip: true});"]},{"entry":[{},"User.scope(\u2018top5\u2019: {limit: 5, order: \u2018age\u2019});"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"A developer can call the methods defined by the scopes in some embodiments. For example:",{"@attributes":{"id":"p-0093","num":"0097"},"tables":{"@attributes":{"id":"TABLE-US-00020","num":"00020"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"154pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"User.vips(function(err, vips) {"]},{"entry":[{},"..."]},{"entry":[{},"});"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"Methods key in the JSON file allows a developer to declare remote methods in the JSON file. Also, indexes can be declared for a model with the \u201cindexes\u201d option. One example of declaring indexes is as follows:",{"@attributes":{"id":"p-0095","num":"0099"},"tables":{"@attributes":{"id":"TABLE-US-00021","num":"00021"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"161pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u201cindexes\u201d: {"]},{"entry":[{},"\u2003\u201cname_age_index\u201d: {"]},{"entry":[{},"\u2003\u2003\u201ckeys\u201d: {\u201cname\u201d: 1, \u201cage\u201d: \u22121}"]},{"entry":[{},"\u2003},"]},{"entry":[{},"\u2003\u201cage_index\u201d: {\u201cage\u201d: \u22121}"]},{"entry":[{},"}"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"The snippet above creates two indexes for the declaring model: (1) a composite index named \u2018name_age_index\u2019 with two keys: \u2018name\u2019 in ascending order and \u2018age\u2019 in descending order and (2) a simple index named \u2018age_index\u2019 with one key: \u2018age\u2019 in descending order. The full syntax for an index within the \u2018indexes\u2019 is:",{"@attributes":{"id":"p-0097","num":"0101"},"tables":{"@attributes":{"id":"TABLE-US-00022","num":"00022"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"140pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u201c<indexName>\u201d: {"]},{"entry":[{},"\u2003\u201ckeys\u201d: {"]},{"entry":[{},"\u2003\u2003\u201c<key1>\u201d: 1,"]},{"entry":[{},"\u2003\u2003\u201c<key2>\u201d: \u22121"]},{"entry":[{},"\u2003},"]},{"entry":[{},"\u2003\u201coptions\u201d: {"]},{"entry":[{},"\u2003\u2003\u201cunique\u201d: true"]},{"entry":[{},"\u2003}"]},{"entry":[{},"}"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"In this syntax, \u20181\u2019 specifies \u2018ascending\u2019 while \u2018\u22121\u2019 specifies \u2018descending\u2019. If no \u2018options\u2019 are needed, developer can use a shortened form:",{"@attributes":{"id":"p-0099","num":"0103"},"tables":{"@attributes":{"id":"TABLE-US-00023","num":"00023"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"140pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u201c<indexName>\u201d: {"]},{"entry":[{},"\u2003\u201c<key1>\u201d: 1,"]},{"entry":[{},"\u2003\u201c<key2>\u201d: \u22121"]},{"entry":[{},"}"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"Indexes can be marked at model property level too, for example:",{"@attributes":{"id":"p-0101","num":"0105"},"tables":{"@attributes":{"id":"TABLE-US-00024","num":"00024"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"182pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"{"]},{"entry":[{},"\u2003\u201cname\u201d: { \u201ctype\u201d: \u201cString\u201d, \u201cindex\u201d: true },"]},{"entry":[{},"\u2003\u201cemail\u201d: { \u201ctype\u201d: \u201cString\u201d, \u201cindex\u201d: {\u201cunique\u201d:"]},{"entry":[{},"true} },"]},{"entry":[{},"\u2003\u201cage\u201d: \u201cNumber\u201d"]},{"entry":[{},"}"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"Two indexes will be created, one for the \u2018name\u2019 key and another one for the \u2018email\u2019 key. The \u2018email\u2019 index is unique.","As mentioned above, one model can be defined by extending another model. The model that extends from another model will \u201cinherit\u201d properties and methods of the other \u201cbase\u201d model. The following snippet provides an example of a model being extended from another.",{"@attributes":{"id":"p-0104","num":"0108"},"tables":{"@attributes":{"id":"TABLE-US-00025","num":"00025"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"182pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"var properties = {"]},{"entry":[{},"\u2003firstName: {type: String, required: true}"]},{"entry":[{},"\u2002};"]},{"entry":[{},"var options = {"]},{"entry":[{},"\u2003relations: {"]},{"entry":[{},"\u2003\u2003accessTokens: {"]},{"entry":[{},"\u2003\u2003\u2003model: accessToken,"]},{"entry":[{},"\u2003\u2003\u2003type: hasMany,"]},{"entry":[{},"\u2003\u2003\u2003foreignKey: userId"]},{"entry":[{},"\u2003\u2003},"]},{"entry":[{},"\u2003\u2003account: {"]},{"entry":[{},"\u2003\u2003\u2003model: account,"]},{"entry":[{},"\u2003\u2003\u2003type: belongsTo"]},{"entry":[{},"\u2003\u2003},"]},{"entry":[{},"\u2003\u2003transactions: {"]},{"entry":[{},"\u2003\u2003\u2003model: transaction,"]},{"entry":[{},"\u2003\u2003\u2003type: hasMany"]},{"entry":[{},"\u2003\u2003}"]},{"entry":[{},"\u2003},"]},{"entry":[{},"\u2003acls: ["]},{"entry":[{},"\u2003\u2003{"]},{"entry":[{},"\u2003\u2003\u2003permission: ALLOW,"]},{"entry":[{},"\u2003\u2003\u2003principalType: ROLE,"]},{"entry":[{},"\u2003\u2003\u2003principalId: $everyone,"]},{"entry":[{},"\u2003\u2003\u2003property: myMethod"]},{"entry":[{},"\u2003\u2003}"]},{"entry":[{},"\u2003]"]},{"entry":[{},"};"]},{"entry":[{},"var user = loopback.Model.extend(\u2018user\u2019, properties,"]},{"entry":[{},"options);"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"The validation class Validatable, of the framework of some embodiments will now be described. This class provides methods that add validation capabilities to models. Each of this validations run when an obj.isValid( ) method is called. Each configurator can accept n parameters (n\u22121 field names and one config). \u201cConfig is {Object}\u201d depends on specific validation, but all of them have a message member property. It can be just string, when only one situation is possible, e.g., Post.validatesPresenceOf(\u2018title\u2019, {message: \u2018can not be blank\u2019}). In more complicated cases it can be {Hash} of messages (for each case): User.validatesLengthOf(\u2018password\u2019, {min: 6, max: 20, message: {min: \u2018too short\u2019, max: \u2018too long\u2019}}).","The validation class methods in some embodiments include:\n\n","The Validatable.validatesPresenceOf method validates the presence of one or more specified properties. This method requires a model to include a property to be considered valid. The method fails when validated field is blank. For example,\n\n","The Validatable.validatesPresenceOf method of some embodiments has arguments and error messages as illustrated in the following tables:",{"@attributes":{"id":"p-0109","num":"0128"},"tables":{"@attributes":{"id":"TABLE-US-00026","num":"00026"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Arguments"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Name","Type","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["propertyName","String","One or more property names."]},{"entry":["errMsg","Object","Optional custom error message. Default is"]},{"entry":[{},{},"\u201ccan't be blank\u201d"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},{"@attributes":{"id":"p-0110","num":"0129"},"tables":{"@attributes":{"id":"TABLE-US-00027","num":"00027"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"errMsg"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Name","Type","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}},{"entry":[{},"message","String","Error message to use instead of default."]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}}]}}},"Validatable.validatesAbsenceOf method validates absence of one or more specified properties. This method specifies that a model should not include a property to be considered valid. The Validatable.validatesAbsenceOf method fails when validated field is not blank. For example, Post.validatesAbsenceOf(\u2018reserved\u2019, {unless: \u2018special\u2019}), validates absence of reserved.","The Validatable.validatesAbsenceOf method of some embodiments has arguments and error messages as illustrated in the following tables:",{"@attributes":{"id":"p-0113","num":"0132"},"tables":{"@attributes":{"id":"TABLE-US-00028","num":"00028"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Arguments"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Name","Type","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["propertyName","String","One or more property names."]},{"entry":["errMsg","Object","Optional custom error message. Default is"]},{"entry":[{},{},"\u201ccan't be set\u201d"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},{"@attributes":{"id":"p-0114","num":"0133"},"tables":{"@attributes":{"id":"TABLE-US-00029","num":"00029"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"errMsg"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Name","Type","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}},{"entry":[{},"message","String","Error message to use instead of default."]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}}]}}},"Validatable.validatesLengthOf method validates the length of a property. This method requires a property length to be within a specified range. In some embodiments, the Validatable.validatesLengthOf method receives the minimum range of a property (min), the maximum range of the property (max), or the precise length of the property (is). This method returns the following default error messages:\n\n","Below are a few examples of how a developer can use the Validatable.validatesLengthOf method for a class (model) named \u201cUser.\u201d In the following example the method returns one of the above default error messages if an error occur:\n\n","A couple of more examples, for which the length validation method returns custom error messages, are as follows:\n\n","The Validatable.validatesLengthOf method of some embodiments has arguments and options as illustrated in the following tables:",{"@attributes":{"id":"p-0119","num":"0147"},"tables":{"@attributes":{"id":"TABLE-US-00030","num":"00030"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Arguments"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"98pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Name","Type","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}},{"entry":[{},"propertyName","String","Property name to validate."]},{"entry":[{},"Options","Object"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}}]}}},{"@attributes":{"id":"p-0120","num":"0148"},"tables":{"@attributes":{"id":"TABLE-US-00031","num":"00031"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Options"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Name","Type","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}},{"entry":[{},"is","Number","Value that property must equal to validate."]},{"entry":[{},"min","Number","Value that property must be less than to be"]},{"entry":[{},{},{},"valid."]},{"entry":[{},"max","Number","Value that property must be less than to be"]},{"entry":[{},{},{},"valid."]},{"entry":[{},"message","Object","Optional Object with string properties for"]},{"entry":[{},{},{},"custom error message for each validation:"]},{"entry":[{},{},{},"is, min, or max"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}}]}}},"Validatable.validatesNumericalityOf method validates numericality of a property (i.e., whether the property is numerical or not). The method requires a value for property to be either an integer or number. The examples for this method are as follows:\n\n","The Validatable.validatesNumericalityOf method of some embodiments includes the following arguments and options:",{"@attributes":{"id":"p-0123","num":"0153"},"tables":{"@attributes":{"id":"TABLE-US-00032","num":"00032"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Arguments"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"98pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Name","Type","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}},{"entry":[{},"propertyName","String","Property name to validate."]},{"entry":[{},"Options","Object"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}}]}}},{"@attributes":{"id":"p-0124","num":"0154"},"tables":{"@attributes":{"id":"TABLE-US-00033","num":"00033"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Options"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Name","Type","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["int","Boolean","If true, then property must be an integer to be valid."]},{"entry":["message","Object","Optional object with string properties for \u2018int\u2019"]},{"entry":[{},{},"for integer validation. Default error messages: -"]},{"entry":[{},{},"number: is not a number"]},{"entry":[{},{},"int: is not an integer"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"Validatable.validatesInclusionOf method validates the inclusion of a property in a set of values. The method requires a value for property to be in a specified array. For example:\n\n","The Validatable.validatesInclusionOf method of some embodiments includes the following arguments and options:",{"@attributes":{"id":"p-0127","num":"0159"},"tables":{"@attributes":{"id":"TABLE-US-00034","num":"00034"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Arguments"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"98pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Name","Type","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}},{"entry":[{},"propertyName","String","Property name to validate."]},{"entry":[{},"Options","Object"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}}]}}},{"@attributes":{"id":"p-0128","num":"0160"},"tables":{"@attributes":{"id":"TABLE-US-00035","num":"00035"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Options"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Name","Type","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["in","Array","Array Property must match one of the values in the"]},{"entry":[{},{},"array to be valid."]},{"entry":["message","String","Optional error message if property is not valid."]},{"entry":[{},{},"Default error message: \u201cis not included in the list\u201d."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"Validatable.validatesExclusionOf method validates the exclusion of a property. The method requires a property value not to be in a specified array. For example, Company.validatesExclusionOf(\u2018domain\u2019, {in: [\u2018www\u2019, \u2018admin\u2019]}), validates that domain should not be an admin domain.","The Validatable.validatesExclusionOf method of some embodiments includes the following arguments and options:",{"@attributes":{"id":"p-0131","num":"0163"},"tables":{"@attributes":{"id":"TABLE-US-00036","num":"00036"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Arguments"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"98pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Name","Type","Description"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]},{"entry":[{},"propertyName","String","Property name to validate."]},{"entry":[{},"Options","Object"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]}}]}}},{"@attributes":{"id":"p-0132","num":"0164"},"tables":{"@attributes":{"id":"TABLE-US-00037","num":"00037"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Options"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Name","Type","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["in","Array","Array Property must match one of the values in"]},{"entry":[{},{},"the array to be valid."]},{"entry":["message","String","Optional error message if property is not valid."]},{"entry":[{},{},"Default error message: \u201cis reserved\u201d."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"Validatable.validatesFormatOf method validates the format of a property. The method requires a model to include a property that matches the given format. An example for this method is: User.validatesFormat(\u2018name\u2019, {with: \/\\w+\/}).","The Validatable.validatesFormatOf method of some embodiments includes the following arguments and options:",{"@attributes":{"id":"p-0135","num":"0167"},"tables":{"@attributes":{"id":"TABLE-US-00038","num":"00038"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Arguments"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"98pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Name","Type","Description"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]},{"entry":[{},"propertyName","String","Property name to validate."]},{"entry":[{},"Options","Object"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]}}]}}},{"@attributes":{"id":"p-0136","num":"0168"},"tables":{"@attributes":{"id":"TABLE-US-00039","num":"00039"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Options"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Name","Type","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["with","RegExp","Regular expression to validate format."]},{"entry":["message","String","Optional error message if property is not valid."]},{"entry":[{},{},"Default error message: \u201c is invalid\u201d."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"Validatable.validate method validates properties using a custom validator. The default error message that this method returns in some embodiments is \u201cis invalid.\u201d Below is an example of using this validation method:",{"@attributes":{"id":"p-0138","num":"0170"},"tables":{"@attributes":{"id":"TABLE-US-00040","num":"00040"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"User.validate(\u2018name\u2019, customValidator, {message: \u2018Bad name\u2019});"]},{"entry":[{},"function customValidator(err) {"]},{"entry":[{},"\u2003if (this.name === \u2018bad\u2019) err( );"]},{"entry":[{},"});"]},{"entry":[{},"var user = new User({name: \u2018Peter\u2019});"]},{"entry":[{},"user.isValid( ); \/\/ true"]},{"entry":[{},"user.name = \u2018bad\u2019;"]},{"entry":[{},"user.isValid( ); \/\/ false"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"Validatable.validateAsync method validates properties using a custom async validator. The default error message that this method returns in some embodiments is \u201cis invalid.\u201d Below is an example of using this validation method:",{"@attributes":{"id":"p-0140","num":"0172"},"tables":{"@attributes":{"id":"TABLE-US-00041","num":"00041"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"User.validateAsync(\u2018name\u2019, customValidator, {message: \u2018Bad name\u2019});"},{"entry":"\u2003function customValidator(err, done) {"},{"entry":"\u2003\u2003process.nextTick(function ( ) {"},{"entry":"\u2003\u2003\u2003if (this.name === \u2018bad\u2019) err( );"},{"entry":"\u2003\u2003\u2003done( );"},{"entry":"\u2003\u2003});"},{"entry":"\u2003});"},{"entry":"\u2003var user = new User({name: \u2018Peter\u2019});"},{"entry":"\u2003user.isValid( ); \/\/ false (because async validation setup)"},{"entry":"\u2003user.isValid(function (isValid) {"},{"entry":"\u2003\u2003isValid; \/\/ true"},{"entry":"\u2003})"},{"entry":"\u2003user.name = \u2018bad\u2019;"},{"entry":"\u2003user.isValid( ); \/\/ false"},{"entry":"\u2003user.isValid(function (isValid) {"},{"entry":"\u2003\u2003isValid; \/\/ false"},{"entry":"})"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"Validatable.validatesUniquenessOf method validates uniqueness. In other words, this method ensures that the value of the property is unique in a collection of models. Below is an example of using this validation method:","\/\/The login must be unique across all User instances.","User.validatesUniquenessOf(\u2018login\u2019);","\/\/Assuming SiteUser.belongsTo(Site)","\/\/The login must be unique within each Site.","SiteUser.validateUniquenessOf(\u2018login\u2019, {scopedTo: [\u2018siteId\u2019]});","The Validatable.validatesUniquenessOf method of some embodiments includes the following arguments and options:",{"@attributes":{"id":"p-0148","num":"0180"},"tables":{"@attributes":{"id":"TABLE-US-00042","num":"00042"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Arguments"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"98pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Name","Type","Description"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]},{"entry":[{},"propertyName","String","Property name to validate."]},{"entry":[{},"Options","Object"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]}}]}}},{"@attributes":{"id":"p-0149","num":"0181"},"tables":{"@attributes":{"id":"TABLE-US-00043","num":"00043"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Options"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Name","Type","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["with","RegExp","Regular expression to validate format."]},{"entry":["scopedTo","Array.<String>","List of properties defining the scope."]},{"entry":["message","String","Optional error message if property is"]},{"entry":[{},{},"not valid."]},{"entry":[{},{},"Default error message: \u201cis not unique\u201d."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"Validatable.isValid(callback) method performs validation and triggers validation hooks in some embodiments. In some embodiments, before validation, the obj.errors collection is cleaned. Each validation then can add new errors to obj.errors collection. If collection is not blank, validation has failed. In some embodiments, this method can be called as synchronous only when no asynchronous validation is configured. Below is an example of using this validation method:",{"@attributes":{"id":"p-0151","num":"0183"},"tables":{"@attributes":{"id":"TABLE-US-00044","num":"00044"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"ExpressJS controller: render user if valid, show flash otherwise"},{"entry":"user.isValid(function (valid) {"},{"entry":"\u2003if (valid) res.render({user: user});"},{"entry":"\u2003else res.flash(\u2018error\u2019, \u2018User is not valid\u2019), console.log(user.errors),"},{"entry":"\u2003res.redirect(\u2018\/users\u2019);"},{"entry":"});"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"Another example:",{"@attributes":{"id":"p-0153","num":"0185"},"tables":{"@attributes":{"id":"TABLE-US-00045","num":"00045"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"user.isValid(function (valid) {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"if (!valid) {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"console.log(user.errors);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ => hash of errors"]},{"entry":[{},"\/\/ => {"]},{"entry":[{},"\/\/ => username: [errmessage, errmessage, ...],"]},{"entry":[{},"\/\/ => email: ..."]},{"entry":[{},"\/\/ => }"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"});"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"The validatable.isValid(callback) method of some embodiments includes the following arguments and returns:",{"@attributes":{"id":"p-0155","num":"0187"},"tables":{"@attributes":{"id":"TABLE-US-00046","num":"00046"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Arguments"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"84pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Name","Type","Description"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]},{"entry":[{},"callback","Function","called with (valid)"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]}}]}}},{"@attributes":{"id":"p-0156","num":"0188"},"tables":{"@attributes":{"id":"TABLE-US-00047","num":"00047"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Returns"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Name","Type","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["result","Boolean","True if no asynchronouse validation is configured"]},{"entry":[{},{},"and all properties pass validation."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"ValidationError( ) method is raised when the application attempts to save an invalid model instance. Below is an example of using this validation method:",{"@attributes":{"id":"p-0158","num":"0190"},"tables":{"@attributes":{"id":"TABLE-US-00048","num":"00048"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"{"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u201cname\u201d: \u201cValidationError\u201d,"]},{"entry":[{},"\u201cstatus\u201d: 422,"]},{"entry":[{},"\u201cmessage\u201d: \u201cThe Model instance is not valid. \\"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\u2003See {grave over (\u2009)}details{grave over (\u2009)} property of the error object for more info.\u201d,"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u201cstatusCode\u201d: 422,"]},{"entry":[{},"\u201cdetails\u201d: {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\u201ccontext\u201d: \u201cuser\u201d,"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\u201ccodes\u201d: {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\u201cpassword\u201d: ["]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"112pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\u201cpresence\u201d"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"],"]},{"entry":[{},"\u201cemail\u201d: ["]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"112pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\u201cuniqueness\u201d"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"]"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"},"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\u201cmessages\u201d: {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\u201cpassword\u201d: ["]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\u201ccan\u2019t be blank\u201d"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"],"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\u201cemail\u201d: ["]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"112pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\u201cEmail already exists\u201d"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"]"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"},"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"A developer might run into situations the developer needs to raise a validation error and not rely on the system to raise the ValidationError( ). An example of such a situation is in a \u201cbefore\u201d hook or a custom model method. Below is an example of rasing this method manually:",{"@attributes":{"id":"p-0160","num":"0192"},"tables":{"@attributes":{"id":"TABLE-US-00049","num":"00049"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"MyModel.prototype.preflight = function(changes, callback) {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ Update properties, do not save to db"]},{"entry":[{},"for (var key in changes) {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"model[key] = changes[key];"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"if (model.isValid( )) {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"return callback(null, { success: true });"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"\/\/ This line shows how to create a ValidationError"]},{"entry":[{},"err = new ValidationError(model);"]},{"entry":[{},"callback(err);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},{"@attributes":{"id":"p-0161","num":"0193"},"figref":"FIG. 4","b":"400"},"As shown, the process  initially receives (at ) a declaration of the model. In some embodiments, the model is declared when a developer first names the model. Next, at , the process constructs the model by defining a JSON file and a JS file for the model. In some embodiments, the process only defines a JSON file (at ) when the model is initially constructed. After the core model is constructed, the model in some embodiments can be designated as \u201ccommon\u201d or \u201cabstract,\u201d and then further sub-classed to client versus server, in order to achieve isomorphic capabilities from the beginning","After , the process determines (at ) whether the user has requested the addition of a property to the JS model. If so, the process transitions to  to receive the property definition, and then transitions back to  to update the model's JSON file and\/or JS file based on the received property definition. Several examples of adding properties to a model will be provided below. When the process determines (at ) that the user has not requested that a property be added to the JS model, the process transitions to .","At , the process determines whether the user has requested the addition of a validation rule(s) to the JS model. If so, the process transitions to  to receive the validation rule(s) definition, and then transitions back to  to update the model's JSON file and\/or JS file based on the received validation definition. Several examples of adding validation rules to a model were provided above, and will be further described below. When the process determines (at ) that the user has not requested the addition of a validation rule to the JS model, the process transitions to .","At , the process determines whether the user has requested the addition of the ACL rule(s) to the JS model. If so, the process transitions to  to receive the ACL rule(s) definition, and then transitions back to  to update the model's JSON file and\/or JS file based on the received ACL definition. Several examples of adding ACL rules to a model were provided above, and will be further described below. When the process determines (at ) that the user has not requested the addition of an ACL rule to the JS model, the process transitions to .","At , the process determines whether the user has requested the addition of a relations key to the JS model. If so, the process transitions to  to receive the relations key, and then transitions back to  to update the model's JSON file and\/or JS file based on the received relations key. Several examples of adding relations rules to a model were provided above, and will be further described below. When the process determines (at ) that the user has not requested the addition of a relations rule to the JS model, the process transitions to .","At , the process determines whether the user has requested that the model be attached to a data source abstractor. As mentioned above, the data source abstractor in some embodiments enables a model to access and modify data in backend storages, such as a relational database. The data source abstractor encapsulates business logic to exchange data between models and various backend systems such as relational databases, REST APIs, SOAP web services, storage services, etc. Data source abstractors, in some embodiments, provide CRUD functions for backend data storages. As mentioned above, the data source abstractors connect the models to the data storages by using data storage connectors that are extensible and customizable. In some of these embodiments, the application code does not use a connector directly. Instead, the data source abstractor class provides an API to configure the underlying connector.","When the process determines (at ) that the user wishes to attach the model to a data source abstractor, the process transitions to  to receive the data source abstractor information, and then transitions back to  to update the model's JSON file and\/or JS file based on the received data. Several examples of attaching a model to a data source abstractor will be described below. When the process determines (at ) that the user has not requested the attachment of the model to a data source abstractor, the process transitions to .","At , the process determines whether the user has requested the addition or modification of any other JS model attribute. Examples of such attributes include options, scopes, and indexes keys, which were described above. When the process determines (at ) that the user has requested the addition or modification of a JS model attribute, it transitions to  to receive the attribute description, and then transitions back to  to update the model's JSON file and\/or JS file based on the received attribute description. Otherwise, the process transitions to  to determine whether the user has finished defining the model.","When the user has not finished defining the model, the process returns to  to process additional user input. Otherwise, the process designates (at ) the constructed JS model as a remotely-accessible model that can be accessed on the server by one or more other devices (e.g., client devices or severs), e.g., through a set of API requests. The process then ends. It should be noted that not all models that are created through a process like the process , are designated for remote access in some embodiments. Such models can be created so that they can just be accessed locally on the server or locally on a client.","As mentioned above, a developer can order the operations illustrated in  in any number of arbitrary sequences, after performing operations  and  initially. Also, none of the operations following  are mandatory. As further described below, these operations can be done through a model generator of a framework, or they can be performed programmatically through the framework's API dynamically and on demand. The Appendix B portion of the incorporated ASCII text file computer program listing appendix provides the source code of a portion of the framework of some embodiments for defining JSON-based models.",{"@attributes":{"id":"p-0172","num":"0204"},"figref":["FIG. 5","FIG. 1","FIG. 5"],"b":["500","100","100","500","105","110","115","120","125","100","500","135","120","505","510","125","550","555","105","515","500","520","525","530","535"]},"The runtime processor  in some embodiments instantiates a JavaScript object  for each model based on the object's description that is contained in its associated JavaScript model (i.e., its associated JavaScript file and JSON file). Once instantiated, the JavaScript object can be used to process API requests from client devices of the API server. To process API requests, the JS object might have to exchange data with one or more backend data storages . As before, JS objects exchange data with backend data storages through the data source abstractor  and connector , which, as mentioned above, allow the JS objects to exchange data with a variety of data storages, such as relational databases from different vendors, REST accessible data storages, SOAP accessible data storages, server memory, etc. JS objects also connect to the replication manager , which connects with replication managers on other servers and client devices. Through these replication managers the data that is stored in the JS objects or stored in storages for these objects can be synchronized between different servers and devices.","While instantiating the objects, the runtime processor  also processes the validation, ACL, and relationship attributes that are defined in the JSON files associated with the objects. This processing is different in different embodiments. In some embodiments, this processing simply entails storing the ACL, validation, and relations attributes in data storages (e.g., data storage ), so that the rule processing engine  and object linker  can use these attributes to perform their operations. Each time that an object with validation and\/or ACL rules receives an API request, the rule processing engine  of some embodiments performs the validation and ACL rule check for the object before or after the object processes data in response to this request. Each time an object that has relations key is instantiated, the object linker  creates a link between the object and other objects related to it based on relations key values.","In other embodiments, to process the validation, ACL and\/or relationship attributes during a particular object's instantiation, the runtime processor instantiates a validator, ACL-rule processor, and\/or an object linker for the particular object. The object linker then defines the relationships between the particular object and other objects based on the particular object's relations key values. Each time that the particular object receives an API request, the object uses its validator and\/or ACL rule processor to process the validation rule(s) and\/or ACL rule(s) for the particular object before or after the object processes data in response to this request. In this manner, the validator and ACL rule processor are modules that are hooked into the particular object.","The I\/O handler  in some embodiments allows the API server to handle a large number of concurrent sessions with a large number of devices (e.g., computers, mobile devices, etc.). For instance, in some embodiments, this handler  uses a non-blocking input\/output (I\/O) process that can concurrently maintain a large number of concurrent sessions. The I\/O process of some embodiments is a single-threaded process that does not consume too much of the system resources, which, in turn allows it to be able to handle a large number of concurrent sessions. In some embodiments, the socket handler  can also maintain a session with a connecting device (e.g., a connecting mobile device) for a long duration of time. For example, in some embodiments, the I\/O manager  can maintain a session for a long duration because it uses a web socket manager to manage the connection session.","The API handler  exposes the API server's JS objects  to the other devices (e.g., other servers, computers, mobile devices, etc.). As shown, the handler  uses REST adapter to expose the APIs to the JS objects. The REST adapter handles the task of processing API requests that are received through REST web services, converting received requests to a format for the API handler  to process, and converting the API responses that it receives from the API handler  to REST web service format for transmission back to the client devices. Other embodiments expose the APIs through other services, and hence use other API protocol processors. Accordingly, in these embodiments, the REST processor is replaced with a protocol processor. This protocol processor in some embodiments can switch protocols dynamically between REST and other formats like websockets, SOAP, webrtc, etc.","As mentioned above, client devices in some embodiments instantiate objects and use these objects to process API requests locally or to direct these API requests to JS objects on an API server. In some embodiments, the client devices store the models and instantiate the objects from these models. The objects on the client devices are referred to as proxy objects, as they act on the client as proxies of the objects on the server. In some embodiments, the proxy objects are JS objects, while in other embodiments, the proxy objects are other types of objects (e.g., a Java object or an objective C object). For instance, in some embodiments, a mobile application executes within a browser on a client device, while another mobile application executes natively on top of the operating system (OS) of the client device. In some of these embodiments, the applications that execute within the browser, execute on top of the browser's JS engine. Hence, in these embodiments, the proxy objects can be JS objects. On the other hand, the application that runs natively on the device's OS, instantiates other types of proxy objects (e.g., Java objects or objective C objects) in some embodiments.","The asynchronous nature of the JavaScript poses unique challenges for traceability and debugging when programming APIs. In some embodiments the API server introduces a new construct called a zone. A zone is a special function that allows parallel execution of statements within function. The parallel execution allows for scope to be controlled and spawned independently. The function will not return a result until all statements have completed in its operation. The statement execution can be traced across the asynchronous callback boundaries within JavaScript so that each asynchronous function can be traced back to its calling parent. In addition, each functional call can carry context in the form of global data. The global data for each statement can be aggregated to the parent zone function and returned as part of the result set.","The API server uses a zone as a means to service API requests and responses across the entire lifecycle of the API invocation. This means that the zone can carry contextual information passed by the caller and have it propagated throughout all functional boundaries invoked within the API. The same zone can carry contextual information from a responding source back to the API requester as well accordingly.",{"@attributes":{"id":"p-0181","num":"0213"},"figref":["FIGS. 6 and 7","FIG. 6","FIG. 2","FIG. 6"],"b":["600","200","600","205","210","215","275","275","605","610","205","615","250","600","620","625","630","635","640"]},"The runtime processor  instantiates several proxy objects  that correspond to JS objects running on the API server. In some embodiments, the proxy objects are objects that can be processed in the native OS environment. Examples of such proxy objects include objective C object (e.g., for Apple iOS environment) and Java objects (e.g., for Android environment). To instantiate these proxy objects, the client device includes an adapter that can query the API server dynamically at runtime for an object description, and then, based on the received object description, instantiate a native object (e.g., as objective C objects in iOS and as Java objects in Android). In some embodiments, this adapter is part of the REST adapter , which acts as a bridge between client and the server. The Appendix C portion of the incorporated ASCII text file computer program listing appendix provides the source code for an adapter of some embodiments that can be used in a native client environment to pull an object's description from a server.","In some embodiments, the client device dynamically queries the API server (through the above-described adapter) for an object description when it receives an API request that it does not know how to handle. The API server in these embodiments then notes the type of client device that is making the query (i.e., notes the operating system of the client device) and then provides the object description to the client device. Once the native object is instantiated on the client, the native client can then process the API request locally, or it can direct the API request to be processed remotely by the server. In some embodiments, the API server can provide the response to the API request with the provided object description or before providing this object description.","As mentioned above, once instantiated, a proxy object  on the client can be used to process an API request from local data storages  that reside on the client device , or by calling a corresponding JS object that resides on the API server  so that this object  can process this request (e.g., by using backend data storages). As shown, the proxy objects  access the local data storages  through the data abstractor  and the data connector , which were described above. In some embodiments, the data abstractor  and the data connector  are not used in the native client-side environment as the proxy objects can pull data directly from the client's local data storages without going through the data abstraction and connection layers.","The proxy object  accesses its corresponding JS object  on the API server through the remote API handler , the REST adapter , and socket handler . The API handler  is part of the client-side framework that allows the proxy objects to send out API requests to the API server and to receive responses to the API requests from the API server. In some embodiments, this handler dynamically determines whether the object's API request should be processed remotely or locally. This dynamic determination is based on conditions that the handler  assesses dynamically in some embodiments. The dynamic decision making of the handler  is further described in the U.S. patent application Ser. No. 14\/490,633, entitled \u201cDynamic Determination of Local and Remote API Calls\u201d.","The REST adapter  establishes REST web services between the client  and server , in order to allow these two devices to exchange API requests and responses by using the REST defined protocols. In other words, the REST adapter reformats the API requests of the proxy objects  to a REST-compliant format for transmission to the API server, and reformats the server's API responses from the REST-compliant format to a JS format that the JS objects can process. As mentioned above, other embodiments use other API protocol processors. The socket handler  maintains the communication socket(s) between the client device  and the API server . In some embodiments, the socket handler  establishes web sockets with the socket handler  of the API server .","While instantiating an object, the runtime processor  also processes the validation, ACL, and relationship attributes that are defined in the object's JSON files via the hooks that are inserted in the JS file. This processing is different in different embodiments. In some embodiments, this processing simply entails storing the ACL, validation, and relations attributes in data storages (e.g., data storage ), so that rule processing engine  and object linker  can use these attributes to perform their operations. Each time that an object with validation and\/or ACL rules receives an API request, the rule processing engine  in some embodiments performs the validation and ACL rule checks for the object before or after the object processes data in response to this request. Each time an object that has relations key is instantiated, the object linker  creates a link between the object and other objects related to it based on relations key values.","To process the validation, ACL and\/or relationship attributes during a particular object's instantiation, the runtime processor of some embodiments instantiates a validator, ACL-rule processor, and\/or an object linker for the particular object. The object linker  then defines the relationships between the particular object and other objects based on the particular object's relations key values. Each time that the particular object receives an API request, the object uses its validator and\/or ACL rule processor  to process the validation rule(s) and\/or ACL rule(s) for the particular object before or after the object processes data in response to this request. In this manner, the validator and ACL rule processor are modules that are hooked into the particular object. In some embodiments, the validator, rule processor and object linker are modules within the runtime processor. In still other embodiments, the validator and rule processor are simply functions performed by the runtime processor, while the object linker is a separate module with the runtime processor.","As shown in , the JS objects also connect to the replication manager , which connects with replication manager on the API server. Through these replication managers, the data that is stored in the JS objects or stored in storages for these objects can be synchronized between different servers and devices.",{"@attributes":{"id":"p-0190","num":"0222"},"figref":["FIG. 7","FIG. 6"],"b":["790","700","790","715"]},"As shown in , the client  stores the description of multiple JavaScript models , with each model defined in terms of a JavaScript file and a JSON file. In some embodiments, the client-side JS and JSON files are identical or similar to the JS and JSON files that are used to define the object on the API server. The object instantiator  instantiates each JS, proxy object based on the object description contained in an associated pair of JS file and JSON file. In some embodiments, a JS file and a JSON file are associated through their common name.","In , the proxy objects  are shown to directly access the local storage of the browser without having to using the data abstractor  or the data connector , which were illustrated in  for the native client environment. However, as mentioned above, the native client environment also does not utilize the data abstractor  and the data connector  in some embodiments.","The framework of some embodiments provides a Zone library that provides a way to represent the dynamic extent of asynchronous calls in JS framework of some embodiments. The zone library dynamically modifies framework's asynchronous APIs at runtime. Similar to how a scope of a function defines where it may be used, the extent of a call represents the lifetime that it is active. The Zone library of some embodiments also provides execution context that can persist across the lifecycle of one or more asynchronous calls. This concept is similar to the concept of thread-local data in Java. In some embodiments, the Zones library provides a way to group and track resources and errors across asynchronous operations. In addition zones (1) enable more effective debugging by providing better stack traces for asynchronous functions, (2) make it easier to write and understand asynchronous functions for the applications, (3) make it easier to handle errors raised asynchronously and avoid resulting resource leaks, and (4) enable the developers to associate user data with asynchronous control flow","In some embodiments, in order to use the zones that are provided in the Zone library, the developer should add the \u201crequire(\u2018zone\u2019).enable( )\u201d as the very first line of the developer's program. By doing so, the zone library exports a global variable, zone. The zone global variable always refers to the currently active zone. In some embodiments, the methods that can always be found on the \u2018zone\u2019 object are actually static methods of the Zone class, so they don't do anything with the currently active zone. After loading the zone library, the developer's program has entered the \u2018root\u2019 zone.","Different embodiments provide different ways to create a zone. The canonical way to create a one-off zone is as follows:",{"@attributes":{"id":"p-0196","num":"0228"},"tables":{"@attributes":{"id":"TABLE-US-00050","num":"00050"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ Load the library"]},{"entry":[{},"require(\u2018zone\u2019).enable( );"]},{"entry":[{},"\/\/ MyZone is the name of this zone which shows up in stack traces."]},{"entry":[{},"zone.create(function MyZone( ) {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ At this point the \u2018zone\u2019 global points at the zone instance"]},{"entry":[{},"(\u201cMyZone\u201d)"]},{"entry":[{},"\/\/ that we just created."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"});"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}},"br":{}},{"@attributes":{"id":"p-0197","num":"0229"},"tables":{"@attributes":{"id":"TABLE-US-00051","num":"00051"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"A simple way to create a function that is always wrapped within a zone is"},{"entry":"as follows:"},{"entry":"function renderTemplate(fileName, cb) {"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"zone.create(function( ) {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ Actual work here"]},{"entry":[{},"..."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}).setCallback(cb);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}},"br":{}},{"@attributes":{"id":"p-0198","num":"0230"},"tables":{"@attributes":{"id":"TABLE-US-00052","num":"00052"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"var renderTemplate = zone.define(function(fileName, cb) {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"zone.setCallback(cb);"]},{"entry":[{},"\/\/ Actual work here"]},{"entry":[{},"..."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"});"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}},"br":{}},{"@attributes":{"id":"p-0199","num":"0231"},"tables":{"@attributes":{"id":"TABLE-US-00053","num":"00053"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"renderTemplate(\u2018bar\u2019, function(err, result) {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"if (err)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"throw err;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ Do something with the result"]},{"entry":[{},"..."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"});"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"Zones of some embodiments are like asynchronous functions. From the outside perspective, they can return a single value or \u201cthrow\u201d a single error. Some embodiments provide a couple of ways for the outside zone to obtain the result of a zone. When a zone reports its outcome, in some embodiments, no more callbacks will run inside the zone. Additionally all non-garbage-collectable resources are cleaned up when a zone reports its outcome. Zones of some embodiments, also automatically exit when no explicit value is returned. One way to obtain the outcome of a zone, in some embodiments, is:",{"@attributes":{"id":"p-0201","num":"0233"},"tables":{"@attributes":{"id":"TABLE-US-00054","num":"00054"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"require(\u2018zone\u2019).enable( );"},{"entry":"var net = require(\u2018net\u2019);"},{"entry":"zone.create(function MyZone( ) {"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ This runs in the context of MyZone"]},{"entry":[{},"net.createConnection(...);"]},{"entry":[{},"fs.stat(...)"]},{"entry":[{},"if (Math.random( ) < 0.5)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"throw new Error(\u2018Chaos monkey!\u2019);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"else if (Math.random( ) < 0.5)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"zone.return(\u2018Chaos monkey in disguise!\u2019);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"else"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"; \/\/ Wait for the zone to auto-exit."]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"}).setCallback(function(err, result) {"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ Here we\u2019re back in the root zone."]},{"entry":[{},"\/\/ Asynchronicity is guaranteed, even if the zone returns or throws"]},{"entry":[{}," immediately."]},{"entry":[{},"\/\/ By the time we get here we are sure:"]},{"entry":[{},"\/\/ * the connection has been closed one way or another"]},{"entry":[{},"\/\/ * fs.stat has completed"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"});"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"The developer can also use the then and catch methods, as if it were a promise:",{"@attributes":{"id":"p-0203","num":"0235"},"tables":{"@attributes":{"id":"TABLE-US-00055","num":"00055"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"zone.create(function MyZone( ) {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\/\/ Do whatever"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}).then(function(result) {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\/\/ Runs when succesful"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}).catch(function(err) {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\/\/ Handle error"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"});"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"Within a zone, a developer may use resources that are \u201cowned\u201d by ancestor zones. Therefor in some embodiment the following is proper:",{"@attributes":{"id":"p-0205","num":"0237"},"tables":{"@attributes":{"id":"TABLE-US-00056","num":"00056"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"var server = http.createServer( ).listen(1234);"]},{"entry":[{},"server.listen(1234);"]},{"entry":[{},"zone.create(function ServerZone( ) {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ Yes, allowed."]},{"entry":[{},"server.on(\u2018connection\u2019, function(req, res) { ... });"]},{"entry":[{},"\/\/ Totally okay"]},{"entry":[{},"process.stdout.write(\u2018hello!\u2019);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"});"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"However, using resources owned by child zones is not allowed:","var server;",{"@attributes":{"id":"p-0208","num":"0240"},"tables":{"@attributes":{"id":"TABLE-US-00057","num":"00057"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"zone.create(function SomeZone( ) {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"server = http.createServer( ).listen(1234);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"});"]},{"entry":[{},"\/\/ NOT OKAY!"]},{"entry":[{},"server.on(\u2018connection\u2019, function( ) { ... });"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"Some embodiments allow for a zone to temporarily enter an ancestor zone. Some such embodiments, however, do not allow for the zone to enter child zones, siblings, etc. The rationale behind this is that when a zone is alive its parent must also be alive. Other zones may exit unless they are aware that code will run inside them. An example is illustrated below:",{"@attributes":{"id":"p-0210","num":"0242"},"tables":{"@attributes":{"id":"TABLE-US-00058","num":"00058"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"zone.create(function OuterZone( ) {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"var childZone = zone.create(function ChildZone( ) {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"..."]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"});"]},{"entry":[{},"\/\/ Fine."]},{"entry":[{},"zone.parent.run(function( ) {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"console.log(\u2018Hello from the root zone!\u2019);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"});"]},{"entry":[{},"\/\/ NOT ALLOWED"]},{"entry":[{},"childZone.run(function( ) {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"console.log(\u2018Weird. This isn\u2019t supposed to work!\u2019);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"});"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"});"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"Some embodiments provide the following ways to explicitly exit a zone:\n\n",{"@attributes":{"id":"p-0212","num":"0248"},"tables":{"@attributes":{"id":"TABLE-US-00059","num":"00059"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"zone.create(function StatZone( ) {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"fs.stat(\u2018\/some\/file\u2019, function(err, result) {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"if (err)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"throw err;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"else"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"zone.return(result);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"});"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"});"]},{"entry":[{},"is equivalent to:"]},{"entry":[{},"zone.create(function StatZone( ) {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"fs.stat(\u2018\/some\/file\u2019, zone.complete);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"});"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"In some embodiments, in order to run code in a child zone, a developer can use zone.bindCallback and zone.bindAsyncCallback functions to create a callback object which can be invoked from a parent zone. A developer can also, within a zone, use resources that are \u201cowned\u201d by ancestor zones of that zone. Therefore, the following example is proper:",{"@attributes":{"id":"p-0214","num":"0250"},"tables":{"@attributes":{"id":"TABLE-US-00060","num":"00060"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"var server = http.createServer( ).listen(1234);"]},{"entry":[{},"server.listen(1234);"]},{"entry":[{},"zone.create(function ServerZone( ) {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ Yes, allowed."]},{"entry":[{},"server.on(\u2018connection\u2019, function(req, res) { ... });"]},{"entry":[{},"\/\/ Totally okay"]},{"entry":[{},"process.stdout.write(\u2018hello!\u2019);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"});"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"However, using resources owned by child zones is not allowed, therefore the following example is not proper:",{"@attributes":{"id":"p-0216","num":"0252"},"tables":{"@attributes":{"id":"TABLE-US-00061","num":"00061"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"var server;"]},{"entry":[{},"zone.create(function SomeZone( ) {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"server = http.createServer( ).listen(1234);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"});"]},{"entry":[{},"\/\/ NOT OKAY!"]},{"entry":[{},"server.on(\u2018connection\u2019, function( ) { ... });"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"The framework of some embodiments provide a very useful property \u201cprozone.data\u201d which is a property that associates arbitrary data with a zone. This property can be thought as the \u2018scope\u2019 of a zone. Properties that are not explicitly defined within the scope of a zone are inherited from the parent zone. In some embodiments, zone.data equals the global object in the root zone. In these embodiments, zone.data starts off as an empty object with the parent zone's data property as it's prototype in any other zone.","The example provided below shows a very simple case where zones can (1) store user provided data with different lifetimes, (2) capture unexpected Exceptions in asynchronous callbacks, and (3) provide a long stack-trace of exceptions:",{"@attributes":{"id":"p-0219","num":"0255"},"tables":{"@attributes":{"id":"TABLE-US-00062","num":"00062"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"js require(\u2018zone\u2019).enable( ); express = require(\u2018express\u2019); var Zone ="},{"entry":"zone.Zone;"},{"entry":"var app = express( ); var router = express.Router( );"},{"entry":"Zone.longStackSupport = true;"},{"entry":"\/\/Initialize the Request id in the root zone. \/\/This value will be available to"},{"entry":"all child zones."},{"entry":"zone.data.requestId = 0;"},{"entry":"app.use(function(req, res, next) { \/\/Increment the request ID for every new"},{"entry":"request"},{"entry":"++zone.data.requestId;"},{"entry":"\/\/Create a new Zone for this request zone.create( function RequestZone( )"},{"entry":"{ \/\/Store the request URL in the Request zone \/\/This value will be only to"},{"entry":"this zone and its children"},{"entry":"zone.data.requestURL = req.url;"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/Continue to run other express middleware within this"]},{"entry":[{},"child zone"]},{"entry":[{},"next( );"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"})"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},".then("]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/The call was succesful"]},{"entry":[{},"function successCallback(err) {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"res.write(\u2018Transaction succesful\\n\u2019);"]},{"entry":[{},"res.end( );"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"},"]},{"entry":[{},"\/\/An error was thrown while processing this request"]},{"entry":[{},"function errorCallback(err) {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"res.write(\u2018Transaction failed\\n\u2019);"]},{"entry":[{},"res.write(\u2018x\u2019 + err.zoneStack + \u2018\\n\u2019);"]},{"entry":[{},"res.end( );"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"});"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"});"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"router.get(\u2018\/\u2019, function(req, res) { if (Math.random( ) > 0.5) {"]},{"entry":[{},"\/\/Simulate some async I\/O call that throws an exception"]},{"entry":[{},"process.nextTick(function( ) { throw new Error(\u201cmonkey wrench\u201d);"]},{"entry":[{},"}); }"]},{"entry":[{},"res.write(\u2018Running request #\u2019 + zone.data.requestId + \u2018 within"]},{"entry":[{},"zone: \u2019 + zone.name + \u2018(URL:\u2019 + zone.data.requestURL + \u2018)\\n\u2019); });"]},{"entry":[{},"app.use(\u2018\/\u2019, router); app.listen(3001);"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"Some embodiments of the invention provide a JS framework (e.g., like a node.js framework or a node.js like framework) that provides robust and simple tools for specifying class descriptions of objects for processing API requests. In some embodiments, this framework can be used as a server-side framework to define an API server and\/or as a framework to define client side applications (e.g., mobile applications). In some embodiments, the framework employs a JavaScript Definition Language (JSDL) that allows a developer to specify JS data models. As mentioned above, a JS data model of some embodiments can be defined in terms of a JS file that specifies the model's behavior and a JSON file that specifies the model's properties. JSDL of some embodiments provides a set of extensions to standard JSON file format that allows a developer to specify a rich set of properties for a JS object that needs to process an API request.","In some embodiments, JSDL allows a developer (e.g., a mobile application developer) to develop an entire set of objects with corresponding APIs by writing the objects entirely in JSON form. Specifically, the framework of some embodiments allows a developer to define a model in a variety of ways, including (1) using a model generator of the framework, (2) a JSON instance introspection capability of the framework, and (3) a database discovery API of the framework.","A simple method of creating a model in some embodiments is through a command line API command that invokes the model generator. When the model generator is invoked, a simple model can be defined by specifying a property definition in a JSON model. Such a property definition can include a set of one or more property key-value pairs, in the form of \u201cpropertyName: type element.\u201d In this type of definition, the property name is the key and the type of property is the value. An example of a property definition in JSON of some embodiments is as follows:",{"@attributes":{"id":"p-0223","num":"0259"},"tables":{"@attributes":{"id":"TABLE-US-00063","num":"00063"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"154pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"{"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u201cid\u201d: \u201cnumber\u201d,"]},{"entry":[{},"\u201cfirstName\u201d: \u201cstring\u201d,"]},{"entry":[{},"\u201clastName\u201d: \u201cstring\u201d"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}},"br":{}},"Another method of describing the above-described model in some embodiments is by specifying the following JS code:",{"@attributes":{"id":"p-0225","num":"0261"},"tables":{"@attributes":{"id":"TABLE-US-00064","num":"00064"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"147pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"var UserDefinition = {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"id: Number,"]},{"entry":[{},"firstName: String,"]},{"entry":[{},"lastName: String"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"In some embodiments, a new model can also be created by extending a current model. For instance, a developer can extend a model named User to create a new model called Customer. As illustrated in the example below, the model Customer will inherit properties and methods of the model User.",{"@attributes":{"id":"p-0227","num":"0263"},"tables":{"@attributes":{"id":"TABLE-US-00065","num":"00065"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"var Customer = User.extend(\u2018customer\u2019,"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"accountId: String,"]},{"entry":[{},"vip: Boolean"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"});"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}},"br":{}},"Some embodiments allow a developer to define a model by mixing its definition with the definition of one or more other models, as illustrated in the following example:",{"@attributes":{"id":"p-0229","num":"0265"},"tables":{"@attributes":{"id":"TABLE-US-00066","num":"00066"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"var TimeStamp = modelBuilder.define(\u2018TimeStamp\u2019, {created: Date,"},{"entry":"modified: Date});"},{"entry":"var Group = modelBuilder.define(\u2018Group\u2019, {groups: [String]});"},{"entry":"User.mixin(Group, TimeStamp);"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}},"br":{}},"To create a model, the model generator of some embodiments allows a developer to add properties, control logic rules, relationships, and data sources to the model, and to expose the model to APIs from remote locations (e.g., from client devices and other servers). These operations will be briefly described below. These operations will also be further elaborated below after discussing model creation through database schema discovery and through instance introspection.","The following example illustrates a framework's command line controls for defining a model and adding properties to the model. In this and other examples below, the framework is called loopback. Also, in this example, the model being created is called book. This model represents a book database. To create this model, the developer can enter the following command: $ slc loopback:model book. The developer is then prompted to choose the data source to which the model will connect. By default, the model generator of some embodiments will only list the in-memory data source (named \u201cdb\u201d in this example), as follows:\n\n","If the developer presses RETURN after being presented with the in-memory data source db, the model will be connected to this data source. Next, the generator will ask:\n\n","Next, the developer can add properties to a model through the command $ slc loopback:property. The invocation of this command will then prompt developer (1) to select from models in the application, to which it will add new property, (2) to enter the name of the property to add, (3) to select the data type of the property, and (4) to specify whether the property is required. The command-line interface during this sequence of operations is as follows in some embodiments:",{"@attributes":{"id":"p-0234","num":"0273"},"tables":{"@attributes":{"id":"TABLE-US-00067","num":"00067"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"161pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"$ slc loopback:property"]},{"entry":[{},"[?] Select the model: inventory"]},{"entry":[{},"[?] Enter the property name: price"]},{"entry":[{},"[?] Property type: (Use arrow keys)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"string"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"number"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"boolean"]},{"entry":[{},"object"]},{"entry":[{},"array"]},{"entry":[{},"date"]},{"entry":[{},"buffer"]},{"entry":[{},"geopoint"]},{"entry":[{},"(other)"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"After each property is added to the book model, pressing RETURN will accept the default type (which is string in some embodiments) for each property. If another type should be specified, the developer has to chose the desired type. Once the developer is done entering the model properties, the model generator presents a list of properties and their types, and prompts the developer to specify request the construction of this model, as follows:",{"@attributes":{"id":"p-0236","num":"0275"},"tables":{"@attributes":{"id":"TABLE-US-00068","num":"00068"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Done defining model book (books)."]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"title (string)"]},{"entry":[{},"author (string)"]},{"entry":[{},"description (string)"]},{"entry":[{},"totalPages (number)"]},{"entry":[{},"genre (string)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Create this model? (yes):"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"One example of a developer using the model generator to create a new model in an existing application is as follows. This process starts through a command line input:",{"@attributes":{"id":"p-0238","num":"0277"},"tables":{"@attributes":{"id":"TABLE-US-00069","num":"00069"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"$ cd <loopback-app-dir>"]},{"entry":[{},"$ slc loopback:model [model-name]"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}},"br":{}},"The developer, however, can add additional data sources by using the framework's data source generator. This data source generator can be invoked by a command $ slc loopback:datasource [name]. In response, the data source generator will prompt the developer (1) to enter the name of the new data source (when the developer supplied a name on the command-line, the developer can just press Enter to use it), and (2) to select the connector to use for the data source. One example of this invocation is as follows:",{"@attributes":{"id":"p-0240","num":"0279"},"tables":{"@attributes":{"id":"TABLE-US-00070","num":"00070"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"$ slc loopback:datasource"]},{"entry":[{},"[?] Enter the data-source name: corp2"]},{"entry":[{},"[?] Select the connector for corp2: (Use arrow keys)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"other"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"In-memory db"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"MySQL"]},{"entry":[{},"PostgreSQL"]},{"entry":[{},"Oracle"]},{"entry":[{},"Microsoft SQL"]},{"entry":[{},"MongoDB"]},{"entry":[{},"SOAP webservices"]},{"entry":[{},"REST services"]},{"entry":[{},"Neo4j"]},{"entry":[{},"Kafka"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"If the created model is exposed over REST, then all the standard create, read, update, and delete (CRUD) operations are available via REST endpoints. The developer, in some embodiments, can also add developer's own custom remote methods that can be called via REST operations.","As mentioned above, some embodiments provide various ways for creating a model. In some embodiments, these various ways depend on the kind of data source on which the model is based. For instance, in addition to the above-described model generator, the framework of some embodiments allows a developer to build (1) a dynamic model for free-form data by using instance introspection of JSON data (e.g., from NoSQL databases or REST APIs), and (2) a static, schema-driven model by using a database discovery API (e.g., for discovering the schema of an RDB).","An example of creating a dynamic model by using instance introspection when the data does not have a schema is as follows:",{"@attributes":{"id":"p-0244","num":"0283"},"tables":{"@attributes":{"id":"TABLE-US-00071","num":"00071"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"var ds = require(\u2018..\/data-sources\/db.js\u2019)(\u2018memory\u2019);"},{"entry":"\/\/ Instance JSON document"},{"entry":"var user = {"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"name: \u2018Joe\u2019,"]},{"entry":[{},"age: 30,"]},{"entry":[{},"birthday: new Date( ),"]},{"entry":[{},"vip: true,"]},{"entry":[{},"address: {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"street: \u20181 Main St\u2019,"]},{"entry":[{},"city: \u2018San Jose\u2019,"]},{"entry":[{},"state: \u2018CA\u2019,"]},{"entry":[{},"zipcode: \u201895131\u2019,"]},{"entry":[{},"country: \u2018US\u2019"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"},"]},{"entry":[{},"friends: [\u2018John\u2019, \u2018Mary\u2019],"]},{"entry":[{},"emails: ["]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"{label: \u2018work\u2019, id: \u2018x@sample.com\u2019},"]},{"entry":[{},"{label: \u2018home\u2019, id: \u2018x@home.com\u2019}"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"],"]},{"entry":[{},"tags: [ ]"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"};"},{"entry":"\/\/ Create a model from the user instance"},{"entry":"var User = ds.buildModelFromInstance(\u2018User\u2019, user, {idInjection: true});"},{"entry":"\/\/ Use the model for CRUD"},{"entry":"var obj = new User(user);"},{"entry":"console.log(obj.toObject( ));"},{"entry":"User.create(user, function (err, u1) {"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"console.log(\u2018Created: \u2019, u1.toObject( ));"]},{"entry":[{},"User.findById(u1.id, function (err, u2) {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"console.log(\u2018Found: \u2019, u2.toObject( ));"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"});"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"});"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"Unlike dynamic models, a developer can define static models for models with schema definitions (e.g., RDB). The developer can create static models using framework's discovery API by consuming existing data from a relational database. The developer then can keep the static model synchronized with the database using framework's schema\/model synchronization API.","The following example illustrates how a developer can create a model that is associated with an Oracle RDB.",{"@attributes":{"id":"p-0247","num":"0286"},"tables":{"@attributes":{"id":"TABLE-US-00072","num":"00072"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"var loopback = require(\u2018loopback\u2019);"},{"entry":"var ds = loopback.createDataSource(\u2018oracle\u2019, {"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u201chost\u201d: \u201cdemo.strongloop.com\u201d,"]},{"entry":[{},"\u201cport\u201d: 1521,"]},{"entry":[{},"\u201cdatabase\u201d: \u201cXE\u201d,"]},{"entry":[{},"\u201cusername\u201d: \u201cdemo\u201d,"]},{"entry":[{},"\u201cpassword\u201d: \u201cL00pBack\u201d"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"});"},{"entry":"\/\/ Discover and build models from INVENTORY table"},{"entry":"ds.discoverAndBuildModels(\u2018INVENTORY\u2019, {visited: { }, associations:"},{"entry":"true}, function (err, models) {"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ Now we have a list of models keyed by the model name"]},{"entry":[{},"\/\/ Find the first record from the inventory"]},{"entry":[{},"models.Inventory.findOne({ }, function (err, inv) {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"if(err) {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"console.error(err);"]},{"entry":[{},"return;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"console.log(\u201c\\nInventory: \u201d, inv);"]},{"entry":[{},"\/\/ Navigate to the product model"]},{"entry":[{},"inv.product(function (err, prod) {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"console.log(\u201c\\nProduct: \u201d, prod);"]},{"entry":[{},"console.log(\u201c\\n ------------- \u201d);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"});"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"});"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"});"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"This example shows that for an Oracle database, a developer can first, write a code that sets up the Oracle data source. The developer can then call to a discoverAndBuildModels( ) function (in the framework's discovery API set) to create models from the database tables. Calling it with the \u201cassociations: true\u201d option makes the discovery follow primary\/foreign key relations. The codeless creation of APIs by using the RDB schema discovery methodology of some embodiments of the invention is further described in the U.S. patent application Ser. No. 14\/490,651, entitled \u201cCodeless Generation of APIs,\u201d which is incorporated herein by reference.","The data source connectors of some embodiments provide discovery capability so that the developer can use DataSource to discover model definitions from existing database schema. The following exemplary APIs enable UI or code to discover database schema definitions that can be used to build models in some embodiments.",{"@attributes":{"id":"p-0250","num":"0289"},"tables":{"@attributes":{"id":"TABLE-US-00073","num":"00073"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\/\/ List database tables and\/or views"},{"entry":"ds.discoverModelDefinitions({views: true, limit: 20}, cb);"},{"entry":"\/\/ List database columns for a given table\/view"},{"entry":"ds.discoverModelProperties(\u2018PRODUCT\u2019, cb);"},{"entry":"ds.discoverModelProperties(\u2018INVENTORY_VIEW\u2019, {owner:"},{"entry":"\u2018STRONGLOOP\u2019}, cb);"},{"entry":"\/\/ List primary keys for a given table"},{"entry":"ds.discoverPrimaryKeys(\u2018INVENTORY\u2019, cb);"},{"entry":"\/\/ List foreign keys for a given table"},{"entry":"ds.discoverForeignKeys(\u2018INVENTORY\u2019, cb);"},{"entry":"\/\/ List foreign keys that reference the primary key of the given table"},{"entry":"ds.discoverExportedForeignKeys (\u2018PRODUCT\u2019, cb);"},{"entry":"\/\/ Create a model definition by discovering the given table"},{"entry":"ds.discoverSchema(table, {owner: \u2018STRONGLOOP\u2019}, cb);"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"In addition to discoverAndBuildModels which discovers and builds models from the specified owner\/modelName, the other functions for discovering other properties or elements of a data source include: (1) discoverModelDefinitions( ) to discover model definitions (table or collection names), based on tables or collections in a data source; (2) discoverModelProperties( ) to discover metadata on columns (properties) of a DB table; (3) discoverPrimaryKeys( ) to discover primary key definitions in a database; (4) discoverForeignKeys( ) to discover foreign key definitions from a database; (5) discoverExportedForeignKeys( ) to discover foreign key definitions that are exported from a database; and (6) discoverSchema( ) to discover JSDL models from a database.","As mentioned before, a developer can make a model extend or \u201cinherit from\u201d an existing model that is either one of the built-in models (such as User), or a custom model that the developer has defined in his\/her application. For instance, to extend a model with JSON, a developer can first use the model generator to create a new model in the application. In some embodiments, this will create a JSON file in the \/common\/models directory (e.g., for a customer model, customer.json). The developer can edit this file and set the \u201cbase\u201d property in the JSON file to the name of the model the developer wishes to extend, which is either one of the built-in models, or one of the custom models that the developer defined in the application. For example, here is an excerpt from the customer.json file that extends the built-in User model to define a new Customer model: customer.json",{"@attributes":{"id":"p-0253","num":"0292"},"tables":{"@attributes":{"id":"TABLE-US-00074","num":"00074"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"154pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"{"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u201cname\u201d: \u201cCustomer\u201d,"]},{"entry":[{},"\u201cbase\u201d: \u201cUser\u201d,"]},{"entry":[{},"\u201cidInjection\u201d: false,"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"..."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"A developer can also create custom models that extend from a single base custom model. For example, to define a model called MyModel that extends from a custom model that the developer has previously defined and called MyBaseModel, the developer can first create MyModel using slc loopback:model. The developer can then edit the JSON file common\/models\/MyModel.json as follows:",{"@attributes":{"id":"p-0255","num":"0294"},"tables":{"@attributes":{"id":"TABLE-US-00075","num":"00075"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"154pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"{"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u201cname\u201d: \u201cMyModel\u201d,"]},{"entry":[{},"\u201cbase\u201d: \u201cMyBaseModel\u201d,"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}},"br":{}},{"@attributes":{"id":"p-0256","num":"0295"},"tables":{"@attributes":{"id":"TABLE-US-00076","num":"00076"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"154pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"{"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u201cname\u201d: \u201cCustomer\u201d,"]},{"entry":[{},"\u201cbase\u201d:\u2033 \u201cUser\u201d,"]},{"entry":[{},"\u201cproperties\u201d: {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\u201cfavoriteMovie\u201d: {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"112pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\u201ctype\u201d: \u201cstring\u201d"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"To extend a model programmatically, the developer, in some embodiments, can create a JS file with exactly the same base name as the model JSON file. As described before, JS and JSON files that are commonly named are associated together to define a model in some embodiments. For example, if the customer model is defined in customer.json, then the developer can create customer.js. Both of these files must be in the \/common\/models directory. After creating the JSON file, the developer can extend a model programmatically with the extend( ) method. The method's signature is: newModel=modeName.extend(\u2018modelName\u2019, properties [, settings]), where:\n\n","To attach a model to a data source, some embodiments of the invention use data source abstractors and connectors. As mentioned above, a data source abstractor enables a model to access and modify data in backend systems. The abstractor encapsulates business logic to exchange data between models and various backend systems (such as relational databases, REST APIs, SOAP web services, storage services, etc.). Data source abstractors generally provide create, retrieve, update, and delete (CRUD) functions in some embodiments.","In some embodiments, models access data sources not only through the abstractors but also through data source connectors, which are extensible and customizable. In general, application code does not use a connector directly. Rather, the data source abstractor provides an API to configure the underlying connector. By default, slc (i.e., the command line API) creates and uses the memory connector, which is suitable for development. To use a different data source, the developer can use slc loopaback:datasource to create the new data source and add it to the application's datasources.json. The developer then can edit datasources.json to add the appropriate credentials for the data source. Next, the developer can create a model to connect to the data source or modify an existing model definition to use the connector.","For example, to add a new data source, in some embodiments, the developer can use the data source generator: $ slc loopback:datasource. The system will prompt the developer for the name of the new data source and the connector to use; for example, MySQL, Oracle, REST, and so on. The tool will then add an entry such as the following to datasources.json:",{"@attributes":{"id":"p-0261","num":"0304"},"tables":{"@attributes":{"id":"TABLE-US-00077","num":"00077"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"161pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"..."]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\u201ccorp1\u201d: {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u201cname\u201d: \u201ccorp1\u201d,"]},{"entry":[{},"\u201cconnector\u201d: \u201cmysql\u201d"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"..."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}},"br":{}},{"@attributes":{"id":"p-0262","num":"0305"},"tables":{"@attributes":{"id":"TABLE-US-00078","num":"00078"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\u201ccorp1\u201d: {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u201cname\u201d: \u201ccorp1\u201d,"]},{"entry":[{},"\u201cconnector\u201d: \u201cmysql\u201d,"]},{"entry":[{},"\u201chost\u201d: \u201cthe userr-mysql-server.foo.com\u201d,"]},{"entry":[{},"\u201cuser\u201d: \u201cdb-username\u201d,"]},{"entry":[{},"\u201cpassword\u201d: \u201cdb-password\u201d,"]},{"entry":[{},"\u201cdatabase\u201d: \u201cthe userr-db-name\u201d"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"To make the model use the data source, the developer can edit the JSON file to set the data source used by a model:",{"@attributes":{"id":"p-0264","num":"0307"},"tables":{"@attributes":{"id":"TABLE-US-00079","num":"00079"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\u201cmodel-name\u201d: {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u201cproperties\u201d : {"]},{"entry":[{},"..."]},{"entry":[{},"}"]},{"entry":[{},"\u201cdataSource\u201d: \u201cdatasource-name\u201d,"]},{"entry":[{},"..."]},{"entry":[{},"}"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}},"br":{}},{"@attributes":{"id":"p-0265","num":"0308"},"tables":{"@attributes":{"id":"TABLE-US-00080","num":"00080"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"161pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\u201cbook\u201d: {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\u201cproperties\u201d: {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"..."]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"},"]},{"entry":[{},"\u201cpublic\u201d: true,"]},{"entry":[{},"\u201cdataSource\u201d: \u201ccorp1\u201d,"]},{"entry":[{},"\u201cplural\u201d: \u201cbooks\u201d"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}},"br":{}},"In some embodiments the following connectors are available for a developer:",{"@attributes":{"id":"p-0267","num":"0310"},"tables":{"@attributes":{"id":"TABLE-US-00081","num":"00081"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"98pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Connector","Module","Installation"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Memory","Built in to LoopBack","Not required"]},{"entry":"connector"},{"entry":["Email","Built in to LoopBack","Not required"]},{"entry":["MongoDB","loopback-connector-","npm install --save loopback-"]},{"entry":[{},"mongodb","connector-mongodb"]},{"entry":["MySQL","loopback-connector-","npm install --save loopback-"]},{"entry":[{},"mysql","connector-mysql"]},{"entry":["Oracle","loopback-connector-","npm install --save loopback-"]},{"entry":[{},"oracle","connector-oracle"]},{"entry":["PostgreSQL","loopback-connector-","npm install --save loopback-"]},{"entry":[{},"postgresql","connector-postgresql"]},{"entry":["REST","loopback-connector-","npm install --save loopback-"]},{"entry":[{},"rest","connector-rest"]},{"entry":["SOAP","loopback-connector-","npm install --save loopback-"]},{"entry":[{},"soap","connector-soap"]},{"entry":["SQL Server","loopback-connector-","npm install --save loopback-"]},{"entry":[{},"mssql","connector-mssql"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}}},"To install a connector, the developer can run JS package install and then save, for the connector module to add the dependency to package.json; for example:",{"@attributes":{"id":"p-0269","num":"0312"},"tables":{"@attributes":{"id":"TABLE-US-00082","num":"00082"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"182pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"..."]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\u201cdependencies\u201d: {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\u201cloopback-connector-oracle\u201d: \u201clatest\u201d"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"..."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"In order to create a data source in some embodiments, the developer can use the data source generator to create a new data source or create a data source programmatically. The data source properties of some embodiments depend on the specific data source being used. However, data sources for database connectors (e.g., Oracle, MySQL, PostgreSQL, MongoDB, etc.) in some embodiments share a common set of properties, as described in the following table:",{"@attributes":{"id":"p-0271","num":"0314"},"tables":{"@attributes":{"id":"TABLE-US-00083","num":"00083"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"147pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Property","Type","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["connector","String","Connector name; one of:"]},{"entry":[{},{},"\u201cmemory\u201d"]},{"entry":[{},{},"\u201cloopback-connector-mongodb\u201d or \u201cmongodb\u201d"]},{"entry":[{},{},"\u201cloopback-connector-mysql\u201d or \u201cmysql\u201d"]},{"entry":[{},{},"\u201cloopback-connector-oracle\u201d or \u201coracle\u201d"]},{"entry":[{},{},"\u201cloopback-connector-postgresql\u201d or \u201cpostgresql\u201d"]},{"entry":[{},{},"\u201cloopback-connector-rest\u201d or \u201crest\u201d"]},{"entry":[{},{},"\u201cloopback-connector-mssql\u201d or \u201cmssql\u201d"]},{"entry":["database","String","Database name"]},{"entry":["debug","Boolean","If true, turn on verbose mode to debug"]},{"entry":[{},{},"database queries and lifecycle."]},{"entry":["host","String","Database host name"]},{"entry":["password","String","Password to connect to database"]},{"entry":["port","Number","Database TCP port"]},{"entry":["username","String","Username to connect to database"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}}},"As discussed before, some embodiments expose models over a REST API. In some embodiments, the framework automatically binds a model to a list of HTTP endpoints that provide REST APIs for model instance data manipulations (e.g., through CRUD operations) and other remote operations. By default, the REST APIs are mounted to the plural of the model name. For example, if the developer has a location model, it is mounted to \/locations. By default, scaffolded applications expose models over REST using the loopback.rest router:",{"@attributes":{"id":"p-0273","num":"0316"},"tables":{"@attributes":{"id":"TABLE-US-00084","num":"00084"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"154pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"var app = loopback( );"]},{"entry":[{},"app.use(loopback.rest( ));"]},{"entry":[{},"\/\/ Expose the {grave over (\u2009)}Product{grave over (\u2009)} model"]},{"entry":[{},"app.model(Product);"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}},"br":{}},"As an example, consider a simple model called Location (that provides business locations), the framework automatically creates the following endpoints to illustrate the exposed REST APIs:",{"@attributes":{"id":"p-0275","num":"0318"},"tables":{"@attributes":{"id":"TABLE-US-00085","num":"00085"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"70pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Model API","HTTP Method","Example Path"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["create( )","POST","\/locations"]},{"entry":["upsert( )","PUT","\/locations"]},{"entry":["exists( )","GET","\/locations\/:id\/exists"]},{"entry":["findById( )","GET","\/locations\/:id"]},{"entry":["find( )","GET","\/locations"]},{"entry":["findOne( )","GET","\/locations\/findOne"]},{"entry":["deleteById( )","DELETE","\/locations\/:id"]},{"entry":["count( )","GET","\/locations\/count"]},{"entry":["prototype.updateAttributes( )","PUT","\/locations\/:id"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}}},"The above API follows the standard model REST API that most built-in models extend. To expose a model over REST, the developer must set the public property to true in \/server\/model-config.json:",{"@attributes":{"id":"p-0277","num":"0320"},"tables":{"@attributes":{"id":"TABLE-US-00086","num":"00086"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"154pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"..."]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\u201cRole\u201d: {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u201cdataSource\u201d: \u201cdb\u201d,"]},{"entry":[{},"\u201cpublic\u201d: false"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"},"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"..."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"If the developer does not wish to expose certain CRUD operations, the developer can easily hide them by setting the model's shared property to false. For example, following the previous example, by convention custom model code would go in the file server\/location.js. The developer would add the following lines to \u201chide\u201d one of the predefined remote methods:",{"@attributes":{"id":"p-0279","num":"0322"},"tables":{"@attributes":{"id":"TABLE-US-00087","num":"00087"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"var isStatic = true;"]},{"entry":[{},"MyModel.sharedClass.find(\u2018deleteById\u2019, isStatic).shared = false;"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"After adding these lines, the deleteById( ) operation and the corresponding REST endpoint will not be publicly available. In addition to the standard set of REST API endpoints that a model exposes, the developer can expose a model's static methods to clients over REST. These static methods are called, in some embodiments, remote methods. Additionally, the developer can define remote hooks that are functions called when a remote method is executed (typically, before or after the remote method).","In defining a remote method of some embodiments, the remote method must accept a callback with the conventional fn(err, result, . . . ) signature. A developer can expose a remote method in a model's custom script\/common\/models\/modelName.js file by (1) exporting a function that takes the model as an argument (e.g., module.exports=function(modelName)), (2) in this function, defining the function as a static method of the model (e.g., modelName.functionName=function(args)), and (3) also in the function, calling remoteMethod( ) as described below to expose the function as a remote method. The first argument to remoteMethod( ) must be a string that exactly matches the static method defined in the second step.","A complete example of exposing a remote model, using a Person model, is illustrated below. The developer would add the following code in \/common\/models\/person.js:",{"@attributes":{"id":"p-0283","num":"0326"},"tables":{"@attributes":{"id":"TABLE-US-00088","num":"00088"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"module.exports = function(Person){"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Person.greet = function(msg, cb) {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"cb(null, \u2018Greetings... \u2019 + msg);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"Person.remoteMethod("]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2018greet\u2019,"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"accepts: [{arg: \u2018msg\u2019, type: \u2018string\u2019}],"]},{"entry":[{},"returns: {arg: \u2018greeting\u2019, type: \u2018string\u2019}"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},");"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}},"br":{}},{"@attributes":{"id":"p-0284","num":"0327"},"tables":{"@attributes":{"id":"TABLE-US-00089","num":"00089"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"{"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\u201cgreeting\u201d: \u201cGreetings... LoopBack Developer\u201d"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"As summarized above, to expose a function as a remote method on a model, a developer may call the model's remote.Method( ) function. The function's signature, in some embodiments, is modelName.remoteMethod(function, [options]), where (i) modelName is the name of the model, (ii) function is the remote method being defined, and (iii) options is the optional JSON object with metadata about the function as described in the following table:",{"@attributes":{"id":"p-0286","num":"0329"},"tables":{"@attributes":{"id":"TABLE-US-00090","num":"00090"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"133pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Option","Required?","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["accepts","No","Describes the remote method's arguments."]},{"entry":[{},{},"The callback argument is assumed; do not"]},{"entry":[{},{},"specify."]},{"entry":["returns","No","Describes the remote method's callback"]},{"entry":[{},{},"arguments."]},{"entry":[{},{},"The err argument is assumed; do not"]},{"entry":[{},{},"specify."]},{"entry":["http.path","No","HTTP path (relative to the model) at"]},{"entry":[{},{},"which the method is exposed."]},{"entry":["http.verb","No","HTTP method (verb) at which the method"]},{"entry":[{},{},"is available. One of:"]},{"entry":[{},{},"get"]},{"entry":[{},{},"post (default)"]},{"entry":[{},{},"put"]},{"entry":[{},{},"del"]},{"entry":[{},{},"all"]},{"entry":["description","No","A text description of the method. This"]},{"entry":[{},{},"is used by API documentation generators"]},{"entry":[{},{},"like Swagger."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}},"br":{}},{"@attributes":{"id":"p-0287","num":"0330"},"tables":{"@attributes":{"id":"TABLE-US-00091","num":"00091"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"147pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Property",{},{}]},{"entry":["(key)","Type","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["arg","String","Argument name"]},{"entry":["type","String","Argument datatype; must be an accepted type."]},{"entry":["required","Boolean","True if argument is required; false otherwise."]},{"entry":["root","Boolean","For callback arguments: set this property to"]},{"entry":[{},{},"true if the user function has a single"]},{"entry":[{},{},"callback argument to use as the root object"]},{"entry":[{},{},"returned to remote caller. Otherwise the root"]},{"entry":[{},{},"object returned is a map (argument-name to"]},{"entry":[{},{},"argument-value)."]},{"entry":["http","String","For input arguments: a function or an object"]},{"entry":[{},{},"describing mapping from HTTP request to the"]},{"entry":[{},{},"argument value."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}}},"An example of a single argument, specified as an object can be shown as: {arg: \u2018myArg\u2019, type: \u2018number\u2019}, while an example of multiple arguments, specified as an array can be shown as:",{"@attributes":{"id":"p-0289","num":"0332"},"tables":{"@attributes":{"id":"TABLE-US-00092","num":"00092"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"182pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"["]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"{arg: \u2018arg1\u2019, type: \u2018number\u2019, required: true},"]},{"entry":[{},"{arg: \u2018arg2\u2019, type: \u2018array\u2019}"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"]"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"In some embodiments, there are two ways to specify HTTP mapping for input parameters (i.e., what the method accepts): (1) provide an object with a source property, and (2) specify a custom mapping function. To provide an object with a source property to specify HTTP mapping for input parameters, a developer can provide an object with a source property that has one of the values shown in the following table:",{"@attributes":{"id":"p-0291","num":"0334"},"tables":{"@attributes":{"id":"TABLE-US-00093","num":"00093"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Value of source",{}]},{"entry":["property","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["body","The whole request body is used as the value."]},{"entry":["form","The value is looked up using req.param, which searches"]},{"entry":["query","route arguments, the request body and the query string."]},{"entry":["path","Note that query and path are aliases for form."]},{"entry":["req","The whole HTTP request object is used as the value."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"For example, an argument can get the whole request body as the value: {arg: \u2018data\u2019, type: \u2018object\u2019, http: {source: \u2018body\u2019}}. As described above, to specify HTTP mapping for input parameters, a developer can also specify a custom mapping function. For example, the developer can specify:",{"@attributes":{"id":"p-0293","num":"0336"},"tables":{"@attributes":{"id":"TABLE-US-00094","num":"00094"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"{"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"arg: \u2018custom\u2019,"]},{"entry":[{},"type: \u2018number\u2019,"]},{"entry":[{},"http: function(ctx) {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ ctx is LoopBack Context object"]},{"entry":[{},"\/\/ 1. Get the HTTP request object as provided by Express"]},{"entry":[{},"var req = ctx.req;"]},{"entry":[{},"\/\/ 2. Get \u2018a\u2019 and \u2018b\u2019 from query string or form data"]},{"entry":[{},"\/\/ and return their sum as the value"]},{"entry":[{},"return +req.param(\u2018a\u2019) + req.param(\u2018b\u2019);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"On the other hand, if the developer does not specify a mapping, the framework will determine the value by determining whether the HTTP request parameter args with a JSON content exists (assuming name as the name of the input parameter to resolve). If there is a HTTP request parameter args with a JSON content, then the value of args[\u2018name\u2019] is used as the value if it is defined. Otherwise, req.param(\u2018name\u2019) is returned as the value.","As mentioned above, a remote hook enables the developer to execute a function before or after a remote method is called by a client. The beforeRemote( ) function runs before the remote method and afterRemote( ) function runs after the remote method. For example:",{"@attributes":{"id":"p-0296","num":"0339"},"tables":{"@attributes":{"id":"TABLE-US-00095","num":"00095"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"var request = require(\u2018request\u2019);"]},{"entry":[{},"Users.afterRemote(\u2018count\u2019, function(ctx, unused, next)"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"request.post({"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"url: \u2018http:\/\/another.server.com\/\u2019,"]},{"entry":[{},"method: \u2018POST\u2019,"]},{"entry":[{},"json: ctx.result"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}, function(err, response) {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"if (err) console.error(err);"]},{"entry":[{},"next( );"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"});"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"});"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"Below is another example that uses wildcards in the remote function name:",{"@attributes":{"id":"p-0298","num":"0341"},"tables":{"@attributes":{"id":"TABLE-US-00096","num":"00096"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"User.beforeRemote(\u2018*.save\u2019, function(ctx, user, next) {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"if(ctx.req.accessToken) {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"next( );"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"} else {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"next(new Error(\u2018must be logged in to update\u2019))"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"});"]},{"entry":[{},"User.afterRemote(\u2018*.save\u2019, function(ctx, user, next) {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"console.log(\u2018user has been saved\u2019, user);"]},{"entry":[{},"next( );"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"});"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}},"br":{}},{"@attributes":{"id":"p-0299","num":"0342"},"tables":{"@attributes":{"id":"TABLE-US-00097","num":"00097"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ ** will match both prototype.* and *.*"]},{"entry":[{},"User.beforeRemote(\u2018**\u2019, function(ctx, user, next) {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"console.log(ctx.methodString, \u2018was invoked remotely\u2019); \/\/"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"users.prototype.save was invoked remotely"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"next( );"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"});"]},{"entry":[{},"Other wildcard examples"]},{"entry":[{},"\/\/ run before any static method eg. User.find"]},{"entry":[{},"User.beforeRemote(\u2018*\u2019, ...);"]},{"entry":[{},"\/\/ run before any instance method eg. User.prototype.save"]},{"entry":[{},"User.beforeRemote(\u2018prototype.*\u2019, ...);"]},{"entry":[{},"\/\/ prevent password hashes from being sent to clients"]},{"entry":[{},"User.afterRemote(\u2018**\u2019, function (ctx, user, next) {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"if(ctx.result) {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"if(Array.isArray(ctx.result)) {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"ctx.result.forEach(function (result) {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"result.password = undefined;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"});"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"} else {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"ctx.result.password = undefined;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"next( );"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"});"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"In some embodiment, remote hooks are provided with a Context ctx object that contains transport-specific data (for HTTP: req and res). The ctx object also has a set of consistent APIs across transports. In some embodiments, applications that use loopback.rest( ) middleware, provide additional ctx properties such as ctx.req for expressing Request object; ctx.res for expressing Response object; ctx.req.accessToken for accessing token of the user calling the remote method (ctx.req.accessToken is undefined if the remote method is not invoked by a logged in user (or other principal)); and ctx.result (during afterRemote hooks) which will contain the data that is about to be sent to a client (a user can modify this object to transform data before it is sent). In addition to the hooks mentioned above, the user of some embodiments can define the following other hooks:\n\n","As described before, a schema defines a static model that is backed by a database. A model can validate data before passing it on to a data store (such as a database) to ensure that it conforms to the backend schema. For example, the following code defines a schema and assigns it to the product model. The schema defines two fields (columns): name, a string, and price, a number. The field name is a required value.",{"@attributes":{"id":"p-0302","num":"0351"},"tables":{"@attributes":{"id":"TABLE-US-00098","num":"00098"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"var productSchema = {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u201cname\u201d: { \u201ctype\u201d: \u201cstring\u201d, \u201crequired\u201d: true },"]},{"entry":[{},"\u201cprice\u201d: \u201cnumber\u201d"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"};"]},{"entry":[{},"var Product = Model.extend(\u2018product\u2019,"]},{"entry":[{},"productSchema);"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"A schema imposes restrictions on the model. If a remote client tries to save a product with extra properties (e.g., description), those properties are removed before the application saves the data in the model. Also, since name is a required value, the model will only be saved if the product contains a value for the name property. Rather than modifying the error responses returned by the server, the developer of some embodiments can localize the error message on the client. The validation error response contains error codes in error.details.codes, which enables clients to map errors to localized messages. Below is an example error response:",{"@attributes":{"id":"p-0304","num":"0353"},"tables":{"@attributes":{"id":"TABLE-US-00099","num":"00099"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"{"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u201cname\u201d: \u201cValidationError\u201d,"]},{"entry":[{},"\u201cstatus\u201d: 422,"]},{"entry":[{},"\u201cmessage\u201d: \u201cThe Model instance is not valid. \\"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"See {grave over (\u2009)}details{grave over (\u2009)} property of the error object for more info.\u201d,"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u201cstatusCode\u201d: 422,"]},{"entry":[{},"\u201cdetails\u201d: {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u201ccontext\u201d: \u201cuser\u201d,"]},{"entry":[{},"\u201ccodes\u201d: {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\u201cpassword\u201d: ["]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\u201cpresence\u201d"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"],"]},{"entry":[{},"\u201cemail\u201d: ["]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\u201cuniqueness\u201d"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"]"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"},"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\u201cmessages\u201d: {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u201cpassword\u201d: ["]},{"entry":[{},"\u2003\u201ccan\u2019t be blank\u201d"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"],"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\u201cemail\u201d: ["]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\u201cEmail already exists\u201d"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"]"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"As stated before, most applications need to implement authentication and authorization on the users who access the data (i.e., control who (or what) can access data). Typically, this involves requiring users to login to access protected data, or requiring authorization tokens for other applications to access protected data.","Applications of some embodiments access data through models, hence controlling access to data means putting restrictions on models. That is, specifying who or what can read, write, or change the data in the models. In some embodiments, the general process to implement access control for an application is first to define the user roles that the application requires. For example, the developer might create roles for anonymous users, authorized users, and administrators.","Next, the developer can define access for each role and model method. For example, the developer might enable anonymous users to read a list of banks, but not allow them to do anything else. In some embodiments, the models have a set of built-in methods, and each method maps to either the READ or WRITE access type. In essence, this step amounts to specifying whether access is allowed for each role and each model in addition to the access type. Lastly, the developer implements the authentication, i.e., in the application, by adding code to create (register) new users, login users (get and use authentication tokens), and logout users.","In order to control data access, the application developer specifies the application's users' roles. The first step in specifying user roles is to determine what roles the application needs. Most applications will have un-authenticated or anonymous users (those who have not logged in) and authenticated users (those who have logged in). Additionally, many applications will have an administrative role that provides broad access rights. Applications of some embodiments can have any number of additional user roles as appropriate.","The next step is specifying the user access types. The framework in some embodiments provides a built-in User model with a corresponding REST API that inherits all the \u201cCRUD\u201d (create, read, update, and delete) methods of the data access object. Each data access method on the User model maps to either the \u201cREAD\u201d or \u201cWRITE\u201d access type, as follows:\n\n","For other methods, the default access type of some embodiments is \u201cEXECUTE\u201d. For example, a custom method maps to the \u201cEXECUTE\u201d access type. The table below is an example of the access control specification for an access control application of some embodiments. It specifies \u201cALLOW\u201d or \u201cDENY\u201d for any combination of role and access types (READ or WRITE for a specific model).",{"@attributes":{"id":"p-0311","num":"0370"},"tables":{"@attributes":{"id":"TABLE-US-00100","num":"00100"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"42pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}},{"entry":["Model and","Anonymous","Authenticated","Teller"]},{"entry":["access type","user role","user role","(admin) role"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["READ Bank","ALLOW","ALLOW","ALLOW"]},{"entry":["WRITE Bank","DENY","DENY","ALLOW"]},{"entry":["READ Account","DENY","ALLOW","ALLOW"]},{"entry":["WRITE Account","DENY","DENY","ALLOW"]},{"entry":["READ Transaction","DENY","ALLOW","ALLOW"]},{"entry":["WRITE Transaction","DENY","DENY","DENY"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}}}}},"Some embodiments use the Yeoman ACL generator to define access controls as the simplest way to define access control for an application. This enables the developer to create a static definition for the application before runtime. The Yeoman generator prompts the developer for all the necessary information as explained below. In some embodiments, the basic process for an application to create and authenticate users is first to register a new user with the User.create( ) method, inherited from the generic model object. The next step is to call User.login( ) to request an access token from the client application on behalf of the user. The developer can create his own access tokens to customize authentication. User.login( ) is a good example of doing that. The developer needs to do verification on the server though to prevent someone from creating tokens even though they don't belong to them. The last step is then to invoke an API using the access token. The developer can provide the access token in the HTTP header or as a query parameter to the REST API call.","In order to create users, an application developer can create (register) a new user with the User.create method as follows (on a client side with calling a REST API and on the server side writing in JS):",{"@attributes":{"id":"p-0314","num":"0373"},"tables":{"@attributes":{"id":"TABLE-US-00101","num":"00101"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"REST"},{"entry":"curl -X POST -H \u201cContent-Type:application\/json\u201d \\"},{"entry":"-d \u2018{\u201cemail\u201d: \u201cme@domain.com\u201d, \u201cpassword\u201d: \u201csecret\u201d}\u2019 \\"},{"entry":"http:\/\/localhost:3000\/api\/users"},{"entry":"Node.js"},{"entry":"User.create({"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"email: \u2018me@domain.com\u2019, \/\/ required by default"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"password: \u2018secret\u2019","\/\/ required by default"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"}, function (err, user) {"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"console.log(user.id); \/\/ => the user id (default type: db specific |"]},{"entry":[{},"number)"]},{"entry":[{},"console.log(user.email); \/\/ => the user\u2019s email"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"});"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"Typically, the developer might want to add methods to use as a part of the registration process to determine whether a given username is available or if an email address is already registered. One way to do this is to add these methods as beforeRemote hooks on the User object. The developer then can authenticate a user by calling the User.login( ) method and providing a credentials object. By default, each user must provide a password and either a username or email. The developer may also specify how long the access token should be valid by providing a ttl (time to live) in a temporal scale (e.g., in seconds). The following example illustrates this on a client side with calling a REST API and on the server side in JS:",{"@attributes":{"id":"p-0316","num":"0375"},"tables":{"@attributes":{"id":"TABLE-US-00102","num":"00102"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"259pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"REST"]},{"entry":[{},"curl -X POST -H \u201cContent-Type:application\/json\u201d \\"]},{"entry":[{},"-d \u2018{\u201cemail\u201d: \u201cme@domain.com\u201d, \u201cpassword\u201d: \u201csecret\u201d, \u201cttl\u201d: 1209600000}\u2019 \\"]},{"entry":[{},"http:\/\/localhost:3000\/api\/users\/login"]},{"entry":[{},"This example returns:"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\u201cid\u201d:"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"273pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"\u201cGOkZRwgZ61q0XXVxvxlB8TS1D6lrG7Vb9V8YwRDfy3YGAN7TM7EnxWHqdbIZfheZ\u201d,"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u201cttl\u201d: 1209600,"]},{"entry":[{},"\u201ccreated\u201d: \u201c2013-12-20T21:10:20.377Z\u201d,"]},{"entry":[{},"\u201cuserId\u201d: 1"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"259pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"The id property in this example is the user's access token.",{"@attributes":{"id":"p-0318","num":"0377"},"tables":{"@attributes":{"id":"TABLE-US-00103","num":"00103"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"Node.js"},{"entry":"var TWO_WEEKS = 1000 * 60 * 60 * 24 * 7 * 2;"},{"entry":"User.login({"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"105pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"email: \u2018me@domain.com\u2019,","\/\/ must provide email or"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"105pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\u201cusername\u201d"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"password: \u2018secret\u2019,","\/\/ required by default"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"112pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"ttl: TWO_WEEKS","\/\/ keep the AccessToken alive for at"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"112pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"least two weeks"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"}, function (err, accessToken) {"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"console.log(accessToken.id);\u2003\/\/ => GOkZRwg... the access token"]},{"entry":[{},"console.log(accessToken.ttl);\u2003\/\/ => 1209600 time to live"]},{"entry":[{},"console.log(accessToken.created); \/\/ => 2013-12-20T21:10:20.377Z"]},{"entry":[{},"console.log(accessToken.userId); \/\/ => 1"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"});"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"If a login attempt is successful, a new AccessToken is created that points to the user. This token is required when making subsequent REST requests for the access control system to validate that the user can invoke methods on a given Model.",{"@attributes":{"id":"p-0320","num":"0379"},"tables":{"@attributes":{"id":"TABLE-US-00104","num":"00104"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"294pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"REST"},{"entry":"ACCESS_TOKEN=6Nb2ti5QEXIoDBS5FQGWIz4poRFiBCMMYJbYXSGHWuulOuy0GTEuGx2-"},{"entry":"VCEVvbpBK"},{"entry":"# Authorization Header"},{"entry":"curl -X GET -H \u201cAuthorization: $ACCESS_TOKEN\u201d \\"},{"entry":"http:\/\/localhost:3000\/api\/widgets"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"280pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"# Query Parameter"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"294pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"curl -X GET http:\/\/localhost:3000\/api\/widgets?access_token=$ACCESS_TOKEN"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"A user will be effectively logged out by deleting the access token they were issued at login. This affects only the specified access token; other tokens attached to the user will still be valid. To destroy access tokens over REST API, the following \/logout endpoint can be used:",{"@attributes":{"id":"p-0322","num":"0381"},"tables":{"@attributes":{"id":"TABLE-US-00105","num":"00105"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"294pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"REST"]},{"entry":[{},"ACCESS_TOKEN=6Nb2ti5QEXIoDBS5FQGWIz4poRFiBCMMYJbYXSGHWuulOuy0GTEuGx-"]},{"entry":[{},"2VCEVvbpBK"]},{"entry":[{},"VERB=POST # any verb is allowed"]},{"entry":[{},"# Authorization Header"]},{"entry":[{},"curl -X VERB -H \u201cAuthorization: $ACCESS_TOKEN\u201d \\"]},{"entry":[{},"http:\/\/localhost:3000\/api\/users\/logout"]},{"entry":[{},"# Query Parameter"]},{"entry":[{},"curl -X VERB http:\/\/localhost:3000\/api\/users\/logout?access_token=$ACCESS_TOKEN"]},{"entry":[{},"Node.js"]},{"entry":[{},"var USER_ID = l;"]},{"entry":[{},"var ACCESS_TOKEN = \u20186Nb2ti5QEXIoDBS5FQGWIz4poRFiBCMMYJbYXSGHWuulOuy0GT-"]},{"entry":[{},"EuGx2VCEVvbpBK\u2019;"]},{"entry":[{},"\/\/ remove just the token"]},{"entry":[{},"var token = new AccessToken({id: ACCESS_TOKEN});"]},{"entry":[{},"token.destroy( );"]},{"entry":[{},"\/\/ remove all user tokens"]},{"entry":[{},"AccessToken.destroyAll({"]},{"entry":[{},"where: {userId: USER_ID}"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"308pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"});"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"As described before, in order to control data access, the first step is to specify the application users' roles. The framework of some embodiments enables the developer to define both static and dynamic roles. Static roles are stored in a data source and are mapped to users. In contrast, dynamic roles are not assigned to users and are determined during access. Below is an example of defining a new static role and assigning a user to that role:",{"@attributes":{"id":"p-0324","num":"0383"},"tables":{"@attributes":{"id":"TABLE-US-00106","num":"00106"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\/\/ Create a new user"},{"entry":"User.create({name: \u2018John\u2019, email: \u2018x@y.com\u2019, password: \u2018foobar\u2019},"},{"entry":"function (err, user) {"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ Create the static admin Role"]},{"entry":[{},"Role.create({name: \u2018admin\u2019}, function (err, role) {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ Make John an admin"]},{"entry":[{},"role.principals.create({principalType: RoleMapping.USER,"]},{"entry":[{},"principalId: user.id});"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"});"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"});"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"After defining the new static role, the developer can use the role in the access controls. For example, the developer can add the following lines to the file models.json to enable users in the \u201cadmin\u201d role to call all REST APIs:",{"@attributes":{"id":"p-0326","num":"0385"},"tables":{"@attributes":{"id":"TABLE-US-00107","num":"00107"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"161pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"{"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u201caccessType\u201d: \u201c*\u201d,"]},{"entry":[{},"\u201cpermission\u201d: \u201cALLOW\u201d,"]},{"entry":[{},"\u201cprincipalType\u201d: \u201cROLE\u201d,"]},{"entry":[{},"\u201cprincipalId\u201d: \u201cadmin\u201d"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"Sometimes static roles of some embodiments are not flexible enough and therefore dynamic roles are needed. Below is an example of defining a user defined dynamic role:",{"@attributes":{"id":"p-0328","num":"0387"},"tables":{"@attributes":{"id":"TABLE-US-00108","num":"00108"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Role.registerResolver(\u2018$friend\u2019, function(role, ctx, callback) {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"var targetUserId = ctx.modelId;"]},{"entry":[{},"\/\/ Below has a callback signature: callback(err, isFriend)"]},{"entry":[{},"MyUser.isFriend(targetUserId, ctx.getUserId( ), callback);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"});"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}},"br":{}},{"@attributes":{"id":"p-0329","num":"0388"},"tables":{"@attributes":{"id":"TABLE-US-00109","num":"00109"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"161pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"{"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u201caccessType\u201d: \u201cREAD\u201d,"]},{"entry":[{},"\u201cpermission\u201d: \u201cALLOW\u201d,"]},{"entry":[{},"\u201cprincipalType\u201d: \u201cROLE\u201d,"]},{"entry":[{},"\u201cprincipalId\u201d: \u201c$friend\u201d"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"Some embodiments allow to manually enable the access controls. However, in these embodiments, if the application is created with slc loopback, then there is no need to do anything to enable the access control. Otherwise, to add access control manually, the developer must call the LoopBack enableAuth( ) method. The following example shows how a user can manually add an access control:",{"@attributes":{"id":"p-0331","num":"0390"},"tables":{"@attributes":{"id":"TABLE-US-00110","num":"00110"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"var loopback = require(\u2018loopback\u2019);"]},{"entry":[{},"var app = loopback( );"]},{"entry":[{},"app.enableAuth( );"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"In some applications, the developer may need to make changes to ACL definitions at runtime. There are two different ways to change ACL definitions at runtime: (1) call the data source method createModel( ) and provide an ACL specification (in JSDL) as an argument, and (2) call the ACL.create( ) method. A user can also control access to a model by passing a JSDL specification when creating the model with the data source createModel( ) method:",{"@attributes":{"id":"p-0333","num":"0392"},"tables":{"@attributes":{"id":"TABLE-US-00111","num":"00111"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"var Customer = loopback.createModel(\u2018Customer\u2019, {"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"name: {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"type: String,"]},{"entry":[{},"\/\/ Property level ACLs"]},{"entry":[{},"acls: ["]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"{principalType: ACL.USER, principalId: \u2018u001\u2019,"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"accessType: ACL.WRITE, permission: ACL.DENY},"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"{principalType: ACL.USER, principalId: \u2018u001\u2019,"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"accessType: ACL.ALL, permission: ACL.ALLOW}"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"]"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}, {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ By default, access will be denied if no matching ACL entry"]},{"entry":[{},"is found"]},{"entry":[{},"defaultPermission: ACL.DENY,"]},{"entry":[{},"\/\/ Model level ACLs"]},{"entry":[{},"acls: ["]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"{principalType: ACL.USER, principalId: \u2018u001\u2019,"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"accessType: ACL.ALL, permission: ACL.ALLOW}"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"]"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"});"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"ACLs defined as part of the model creation are hard-coded into the application. The framework of some embodiments also allows the user to dynamically define ACLs through code or a dashboard. The ACLs can also be saved to and loaded from a database in some embodiments.","In general, some client applications (e.g., mobile applications) need to be able to operate without constant network connectivity. This means the client application must synchronize data with the server application after a disconnection period. In order to achieve synchronization, (1) the client (browser) application should replicate changes made in the server application, and (2) the server application should replicate the changes made in the client (browser) application. The synchronization (sync) process replicates data from the source to the target, and the target calls a replication API. The replication API of some embodiments is a JavaScript API, and thus works with a JavaScript client. The replication API of other embodiments can be other non-JS APIs that can run on non-JS clients.","Replication means intelligently copying data from one location to another. The framework copies data that has changed from source to target, but does not overwrite data that was modified on the target since the last replication. So, the sync process of some embodiments is a bi-directional replication. In general, there may be conflicts when performing replication. For example, while disconnected, a user may make changes on the client that conflict with changes made on the server. When an object or field is modified both locally and remotely and there is a risk of generating conflicts, the framework of some embodiments handles the conflict resolution for the users, and enables the developers to easily present a user interface in the application to allow the end user to make informed decisions to resolve conflicts when they occur.","The framework of some embodiments implements synchronization using the browser API that provides the same client JS API as for the server. Thus, the framework in the browser is sometimes referred to as isomorphic, because a user can call exactly the same APIs on the client and server. The framework in the browser of some embodiments uses Browserify to handle dependencies and gulp to generate the client API based on the backend models and REST API.","In addition to basic client-server replication, the framework of some embodiments also supports replicating data (1) from a server application to another server application and (2) from one database to another database. Synchronization as described above to handle offline operation is called offline sync in some embodiments. The framework also provides the ability to consolidate (or \u201cbatch\u201d) data changes the user makes on the device and send them to the server in a single HTTP request. This type of synchronization is called online sync in some embodiments.","A conflict occurs when a change to a model is not based on the previous revision of the model. The callback of Model.replicate( ) takes err and conflict[ ]. Each conflict represents a change that was not replicated and must be manually resolved. The developer can fetch the current versions of the local and remote models by calling conflict.models( ). The developer can also manually merge the conflict by modifying both models. Calling conflict.resolve( ) will set the source change's previous revision to the current revision of the (conflicting) target change. Since the changes are no longer conflicting and appear as if the source change was based on the target, they will be replicated normally as part of the next replicate( ) call.","The model object provides a number of methods to support sync, mixed in via the DataModel object. Some of these sync methods are as follows:\n\n","In some embodiments, the change list and replication can be used against existing data sources with large sets of data. This is made possible by using the revision semantics described above. The changes made without the framework API, however, will be treated as \u201ccreated\u201d or \u201cdeleted\u201d change list entries. The Changes made to a data source that supports replication will be tracked as revisions in that data source's change list. A data source's change list is stored like any other model data. Each model has its own \u201cChange\u201d model. The \u201cChange\u201d model may be attached to any data source. This allows the user to store the change lists in any data source.","During replication a user may supply a filter in some embodiments. The less data the user tries to replicate, the faster and more memory efficient the replication will be. If the user is manually implementing the replication algorithm, the user should run as many steps in the replication process in parallel as possible. This is usually called the \u201cbulk update\u201d step(s).","As discussed above, the framework in the client machine is sometimes referred to as isomorphic framework, because it provides the exact same API as the server framework. A user can create models and use the memory adapter and have his application fully running in the browser machine. The user can seamlessly connect models using the Remote Connector to connect different devices (e.g., browser to server or server to server). Some embodiments accomplish this by enhancing remoting to be able to accept and return ModelTypes in addition to the JSON and its JSON primitives. Because the models do not need to know where they are being run, the developer can share the same API regardless of where developer's code is running, thus making the API isomorphic. Models are referenced through one way\u2014\u201clocal\u201d versus \u201cremote\u201d. This is a foundation for how the replication API for data synchronization between browser and server is built in some embodiments.","In the browser, the main application file calls the function exported by the boot module to setup the application by executing the instructions contained in the browser bundle:",{"@attributes":{"id":"p-0345","num":"0419"},"tables":{"@attributes":{"id":"TABLE-US-00112","num":"00112"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"browser-app.js"]},{"entry":[{},"var loopback = require(\u2018loopback\u2019);"]},{"entry":[{},"var boot = require(\u2018loopback-boot\u2019);"]},{"entry":[{},"var app = module.exports = loopback( );"]},{"entry":[{},"boot(app);"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}},"br":{}},{"@attributes":{"id":"p-0346","num":"0420"},"tables":{"@attributes":{"id":"TABLE-US-00113","num":"00113"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"182pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"index.html"]},{"entry":[{},"<script src=\u201capp.bundle.js\u201d> <\/script>"]},{"entry":[{},"<script>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"var app = require(\u2018loopback-app\u2019);"]},{"entry":[{},"var User = app.models.User;"]},{"entry":[{},"User.login({"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"email: \u2018test@example.com\u2019,"]},{"entry":[{},"password: \u201812345\u2019"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}, function(err, res) {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"if (err) {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"console.error(\u2018Login failed: \u2019, err);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"} else {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"console.log(\u2018Logged in.\u2019);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"});"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/script>"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"Many of the above-described features and applications are implemented as software processes that are specified as a set of instructions recorded on a computer readable storage medium (also referred to as computer readable medium). When these instructions are executed by one or more processing unit(s) (e.g., one or more processors, cores of processors, or other processing units), they cause the processing unit(s) to perform the actions indicated in the instructions. Examples of computer readable media include, but are not limited to, CD-ROMs, flash drives, RAM chips, hard drives, EPROMs, etc. The computer readable media does not include carrier waves and electronic signals passing wirelessly or over wired connections.","In this specification, the term \u201csoftware\u201d is meant to include firmware residing in read-only memory or applications stored in magnetic storage, which can be read into memory for processing by a processor. Also, in some embodiments, multiple software inventions can be implemented as sub-parts of a larger program while remaining distinct software inventions. In some embodiments, multiple software inventions can also be implemented as separate programs. Finally, any combination of separate programs that together implement a software invention described here is within the scope of the invention. In some embodiments, the software programs, when installed to operate on one or more electronic systems, define one or more specific machine implementations that execute and perform the operations of the software programs.",{"@attributes":{"id":"p-0349","num":"0423"},"figref":"FIG. 8","b":["800","800","800","805","810","825","830","835","840","845"]},"The bus  collectively represents all system, peripheral, and chipset buses that communicatively connect the numerous internal devices of the electronic system . For instance, the bus  communicatively connects the processing unit(s)  with the read-only memory , the system memory , and the permanent storage device .","From these various memory units, the processing unit(s)  retrieve instructions to execute and data to process in order to execute the processes of the invention. The processing unit(s) may be a single processor or a multi-core processor in different embodiments.","The read-only-memory (ROM)  stores static data and instructions that are needed by the processing unit(s)  and other modules of the electronic system. The permanent storage device , on the other hand, is a read-and-write memory device. This device is a non-volatile memory unit that stores instructions and data even when the electronic system  is off. Some embodiments of the invention use a mass-storage device (such as a magnetic or optical disk and its corresponding disk drive) as the permanent storage device .","Other embodiments use a removable storage device (such as a floppy disk, flash drive, etc.) as the permanent storage device. Like the permanent storage device , the system memory  is a read-and-write memory device. However, unlike storage device , the system memory is a volatile read-and-write memory, such a random access memory. The system memory stores some of the instructions and data that the processor needs at runtime. In some embodiments, the invention's processes are stored in the system memory , the permanent storage device , and\/or the read-only memory . From these various memory units, the processing unit(s)  retrieve instructions to execute and data to process in order to execute the processes of some embodiments.","The bus  also connects to the input and output devices  and . The input devices enable the user to communicate information and select commands to the electronic system. The input devices  include alphanumeric keyboards and pointing devices (also called \u201ccursor control devices\u201d). The output devices  display images generated by the electronic system. The output devices include printers and display devices, such as cathode ray tubes (CRT) or liquid crystal displays (LCD). Some embodiments include devices such as a touchscreen that function as both input and output devices.","Finally, as shown in , bus  also couples electronic system  to a network  through a network adapter (not shown). In this manner, the computer can be a part of a network of computers (such as a local area network (\u201cLAN\u201d), a wide area network (\u201cWAN\u201d), or an Intranet, or a network of networks, such as the Internet. Any or all components of electronic system  may be used in conjunction with the invention.","Some embodiments include electronic components, such as microprocessors, storage and memory that store computer program instructions in a machine-readable or computer-readable medium (alternatively referred to as computer-readable storage media, machine-readable media, or machine-readable storage media). Some examples of such computer-readable media include RAM, ROM, read-only compact discs (CD-ROM), recordable compact discs (CD-R), rewritable compact discs (CD-RW), read-only digital versatile discs (e.g., DVD-ROM, dual-layer DVD-ROM), a variety of recordable\/rewritable DVDs (e.g., DVD-RAM, DVD-RW, DVD+RW, etc.), flash memory (e.g., SD cards, mini-SD cards, micro-SD cards, etc.), magnetic and\/or solid state hard drives, read-only and recordable Blu-Ray\u00ae discs, ultra density optical discs, any other optical or magnetic media, and floppy disks. The computer-readable media may store a computer program that is executable by at least one processing unit and includes sets of instructions for performing various operations. Examples of computer programs or computer code include machine code, such as is produced by a compiler, and files including higher-level code that are executed by a computer, an electronic component, or a microprocessor using an interpreter.","While the above discussion primarily refers to microprocessor or multi-core processors that execute software, some embodiments are performed by one or more integrated circuits, such as application specific integrated circuits (ASICs) or field programmable gate arrays (FPGAs). In some embodiments, such integrated circuits execute instructions that are stored on the circuit itself.","As used in this specification, the terms \u201ccomputer\u201d, \u201cserver\u201d, \u201cprocessor\u201d, and \u201cmemory\u201d all refer to electronic or other technological devices. These terms exclude people or groups of people. For the purposes of the specification, the terms display or displaying means displaying on an electronic device. As used in this specification, the terms \u201ccomputer readable medium,\u201d \u201ccomputer readable media,\u201d and \u201cmachine readable medium\u201d are entirely restricted to tangible, physical objects that store information in a form that is readable by a computer. These terms exclude any wireless signals, wired download signals, and any other ephemeral or transitory signals.","While the invention has been described with reference to numerous specific details, one of ordinary skill in the art will recognize that the invention can be embodied in other specific forms without departing from the spirit of the invention. For instance, a number of the figures conceptually illustrate processes. The specific operations of these processes may not be performed in the exact order shown and described. The specific operations may not be performed in one continuous series of operations, and different specific operations may be performed in different embodiments. Furthermore, the process could be implemented using several sub-processes, or as part of a larger macro process. Therefore, one of ordinary skill in the art would understand that the invention is not to be limited by the foregoing illustrative details, but rather is to be defined by the appended claims."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF DRAWINGS","p":["The novel features of the invention are set forth in the appended claims. However, for purposes of explanation, several embodiments of the invention are set forth in the following figures.",{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 8"}]},"DETDESC":[{},{}]}
