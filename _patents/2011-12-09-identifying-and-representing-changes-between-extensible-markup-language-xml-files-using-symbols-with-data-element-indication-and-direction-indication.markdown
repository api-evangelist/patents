---
title: Identifying and representing changes between extensible markup language (XML) files using symbols with data element indication and direction indication
abstract: This disclosure is directed to techniques for providing comparing first and second XML files to one another. According to these techniques, a computing device (e.g., a version control service executing on the computing device), may be configured generate at least two edit transcripts that each include one or more operational changes that may be applied to data elements of the first XML file to arrive at data elements of the second XML file (or vice versa). The computing device may select at least one optimal edit transcript based on which of the number of operational changes of the at least two edit transcripts.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08984396&OS=08984396&RS=08984396
owner: Architecture Technology Corporation
number: 08984396
owner_city: Minneapolis
owner_country: US
publication_date: 20111209
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"p":["This application is a continuation-in part of U.S. patent application Ser. No. 12\/917,356, filed Nov. 1, 2010, the entire contents of which are incorporated herein by reference.","This invention was made with Government support under Contract FA8750-09-C-0164, awarded by Air Force. The Government has certain rights in this invention.","The disclosure relates generally to software management. More specifically, this disclosure is directed to comparing and representing changes made to electronic files, such as Web Service Description language (WSDL) files for management of executable web services within a Service Oriented Architecture (SOA) system.","The relatively recent advent of large scale computing networks, such as the Internet, have lead to a variety of new mechanisms for providing network-based services. One mechanism is a web service. A web service refers to software executing on one or more servers that is used specifically to provide a network-accessible interface to data, functions or other form of network resource. That is the web service uses standards-compliant interfaces to expose network resources which may be utilized by other software applications. The web service is referred to as a \u201cweb\u201d service since it typically provides an application programming interface (API) that may be invoked by the messaging protocols executing over the hypertext transfer protocol (HTTP), which is typically associated with the \u201cWorld Wide Web.\u201d However, instead of being accessed by a user via a web browser, other software applications invoke the web service so as to make use of the functionality provided by the web services. For example, software applications may issue extensible markup language (XML)-based messages using the Simple Object Access Protocol (SOAP) using hypertext transfer protocol (HTTP) or hypertext transfer protocol secure (HTTPS) to invoke a web service.","As one example, an enterprise may utilize web services to provide access to internal systems and to allow the systems to exchange information. For example, an enterprise may deploy a web service to provide access functions to an inventory management system. Similarly, the enterprise may deploy web services to expose access to an accounting system that maintains accounts receivable information and a sales force management system that maintains customer account information. The various enterprise software systems may utilize the web services so as to directly access and exchange data with each other. In many cases, an intermediate web service may invoke one or more other web services, which may in turn utilize other web services. In this way, complex networking environments may utilize numerous web services configured to communicate with one another to exchange information, either on the same domain, or different domains.","Recently, software frameworks have been developed so as to standardize mechanisms by which web services communicate with each other and exchange data. One type of framework, referred to as a system oriented architecture (SOA) system provides an architecture for creating and using business processes packaged as interoperable web services. Utilizing the SOA framework, the independent web services exchange information via a defined enterprise services bus (ESB), which provides an abstraction layer on top of an enterprise messaging system. Moreover, the SOA system defines a context in which web services of the SOA system may be invoked. For example, services of the SOA system typically include an associated XML format file or files that web service developers may use to specify how a particular web service is invoked, e.g., available inputs and outputs, their format, and\/or how to use them. An XML file that defines an interface for a web service may be referred to as a web services descriptive language (WSDL) file, where WSDL is an XML-based language that defines a model for describing the web service. Rather than defining an application programming interface for web application itself (as with a distributed or modular computing architecture as described above), an SOA system may, via a WSDL file, define the interface in terms of protocols and functionality. Additional details regarding SOA and WSDL may be found in Josuttis, N. SOA in Practice: The Art of Distributed System Design. O'Reilly. 2007, J. Farrell, H. Lausen, \u201cSemantic Annotations for WSDL and XML Schema\u201d W3C Recommendation, August 2007; http:\/\/www.w3.org\/TR\/sawsdl\/, and Haas, Hugo. WSDL 2.0: What's new? XML 2004 Proceedings, each of which is hereby incorporated by reference.","Web services have become ubiquitous in nature in large-scale private and public networks due to the ease in which they may be interconnected so as to expose and utilize functionality of underlying network resources. However, the cost associated with maintaining and supporting web services by an enterprise or other entity can be significant, especially as the web services become increasingly interconnected.","This disclosure is directed to improvements in SOA systems to provide both administrators of SOA systems and developers of web services with mechanisms to manage and control version updates for deployed web services. For example, according to the techniques of this disclosure, a Web Services Interface Revision Environment (WIRE) is described that provides a standard framework for maintaining web service version and dependency information across a complex web service deployment. The WIRE may include a dependency management module that may have access to a dependency database that is organized to store dependency information for a plurality of deployed web services. Information in the dependency database may be entered by a web service developer, or by an administrator or other user of the web service, or another user.","The dependency management module is communicatively coupled to an enterprise services bus (ESB) that provides a communication backbone for the plurality of web services of the SOA system. The dependency management module may receive an indication of a version update for a web service of the SOA, e.g., from a developer of the web service. In response to the indication, the dependency management module may access the dependency database and determine if the version update will modify an operation of another web service of the SOA system. If the dependency management module determines that an operation of one or more web services of the SOA system will be affected by the version update, at least one indication of the one or more affected web services may be communicated to a user. The dependency management module may further provide a user with other information such as usage statistics and domain information.","According to one example, a method of reporting dependency information for a service oriented architecture (SOA) system is described herein. The method includes receiving an indication of a version update for a first web service executable within an SOA system. The method further includes accessing, by a version control service, a database that stores dependency information for at least one second web service executable within an SOA system, wherein the dependency information indicates that the second web service depends at least in part on operation of the first web service executable within the SOA system. The method further includes determining, by the version control service based on the dependency information stored in the database, whether the version update for the first web service will cause a change to operation of the second web service if the version update is executed within the SOA system. The method further includes providing a user with at least one indication representative of the determination.","As another example, an article of manufacture comprising a computer-readable medium that stores instructions is described herein. The instructions are configured to cause a computing device to receive an indication of a version update for a first web service executable within an SOA system. The instructions are further configured to cause the computing device to access, by a version control service, a database that stores dependency information for at least one second web service executable within an SOA system, wherein the dependency information indicates that the second web service depends at least in part on operation of the first web service executable within the SOA system. The instructions are further configured to cause the computing device to determine, by the version control service based on the dependency information stored in the database, whether the version update for the first web service will cause a change to operation of the second web service if the version update is executed within the SOA system. The instructions are further configured to cause the computing device to provide a user with at least one indication representative of the determination.","As another example, a computing device is described herein. The computing device includes means for accessing a dependency control database that stores dependency information for at least one first web service executable within an SOA system, wherein the dependency information indicates that the first web service depends at least in part on operation of a second web service executable within the SOA system. The computing device further includes means for receiving an indication of a version update for the second web service executable within an SOA system. The computing device further includes means for determining whether the version update for the second web service will cause a change to operation of the first web service if the version update for the second web service is executed within the SOA system. The computing device further includes means for providing a user with at least one indication representative of the determination.","According to another example, a system for dependency information for a service oriented architecture system is described herein. The system includes a dependency control database that stores dependency information for at least one first web service executable within an SOA system, wherein the dependency information indicates that the first web service depends at least in part on operation of a second web service executable within the SOA system. The system further includes a version control service that receives an indication of a version update for the second web service executable within an SOA system and determines whether the version update for the second web service will cause a change to operation of the first web service when the version update is executed within the SOA system, and provides a user with at least one indication of the determination.","The techniques described herein may provide one or more advantages. For example, use of the Web Services Interface Revision Environment (WIRE) described herein may decrease the expense and time required to maintain web services and ensure that the web service work reliably in spite of changes to other services with which they interact, regardless of whether the changed web services are local or external to the environment. That is, the techniques described herein allow web services within even the most complex, interconnected systems to be upgraded in a maintainable and efficient manner while providing the least system impact.","The WIRE described herein may benefit both service developers and service administrators. Service developers, i.e., programmers, may benefit because the techniques described herein allow them to smoothly maintain web service version control. Service administrators may benefit because WIRE may help them to assess any impact of launching a new version of a web service within their computing environment. In some cases, the WIRE described herein may provide a visual dependency graph to show how web services depend on each other and also provide helpful data, such as usage statistics, potential violations and domain information, to assist the administrator in determining the impact of deploying the new, executable version of a currently deployed and operational web service. Thus, service administrators may be able to make better informed decisions when deprecating or revising existing web services currently within their computing environment.","Further, by allowing administrators to identify and resolve potential violations and conflicts that may otherwise arise when upgrading a particular web service, the techniques may allow an enterprise to avoid the need to support legacy web services. For example, the techniques may allow the enterprise to avoid maintaining many backward compatible web services which may be costly as well as confusing for both existing clients and software developers.","Techniques are also described for providing a visual representation of changes made to WSDL files for management of the web services executable within the SOA system. For example, techniques are described that utilize dynamic programming to calculate any differences with the least number of the following edit operations: insertions, deletions, and substitutions. Each of the computed sets of differences represents a candidate optimal edit transcript for changing between versions of a WSDL file. One or more of the computed edit transcripts is selected for visually representing to a user the differences between the versions of the WSDL file.","As another example, a method of identifying one or more differences between a first extensible markup language (XML) file and a second XML file is described herein. The method includes determining a first plurality of symbols associated with the first XML file. The method further includes determining a second plurality of symbols associated with the second XML file. The method further includes determining a first edit transcript that comprises a first plurality of operational changes that may be applied to at least one of the first plurality of symbols or the second plurality of symbols to arrive at the other of the first plurality of symbols or the second plurality of symbols. The method further includes determining a second edit transcript that comprises a second plurality of operational changes that may be applied to at least one of the first plurality of symbols or the second plurality of symbols to arrive at the other of the first plurality of symbols or the second plurality of symbols. The method further includes selecting one of the first edit transcript or the second edit transcript as an optimal edit transcript based on whether the first number of operational changes is less than the second number of operational changes.","As another example, a computer-readable storage medium that stores instructions is described herein. The instructions are configured to cause a computing device to determine a first plurality of symbols associated with a first XML file. The instructions are further configured to cause the computing device to determine a second plurality symbols associated with a second XML document. The instructions are further configured to cause the computing device to determine a first edit transcript that comprises a first plurality of operational changes that may be applied to at least one of the first plurality of symbols or the second plurality of symbols to arrive at the other of the first plurality of symbols or the second plurality of symbols. The instructions are further configured to cause the computing device to determine a second edit transcript that comprises a second plurality of operational changes that may be applied to at least one of the first plurality of symbols or the second plurality of v to arrive at the other of the first plurality of symbols or the second plurality of symbols. The instructions are further configured to cause the computing device to select one of the first edit transcript or the second edit transcript as an optimal edit transcript based on whether the first number of operational changes is less than the second number of operational changes.","According to another example, a device configured to identify one or more differences between a first extensible markup language (XML) file and a second XML file is described herein. The device includes means for determining a first plurality of symbols associated with the first XML file. The device further includes means for determining a second plurality of symbols associated with the second XML document. The device further includes means for determining a first edit transcript that comprises a first plurality of operational changes that may be applied to at least one of the first plurality of symbols or the second plurality of symbols to arrive at the other of the first plurality of symbols or the second plurality of symbols. The device further includes means for determining a second edit transcript that comprises a second plurality of operational changes that may be applied to at least one of the first plurality of symbols or the second plurality of symbols to arrive at the other of the first plurality of symbols or the second plurality of symbols. The device further includes means for selecting one of the first edit transcript or the second edit transcript as an optimal edit transcript based on whether the first number of operational changes is less than the second number of operational changes.","According to another example, a system is described herein. The system includes at least one database configured to store a first XML file and a second XML file. The system further includes a version control service (VCS). The VCS is configured to determine a first plurality of symbols associated with the first XML file. The VCS is further configured to determine a second plurality symbols associated with the second XML document. The VCS is further configured to determine a first edit transcript that comprises a first plurality of operational changes that may be applied to at least one of the first plurality of symbols or the second plurality of symbols to arrive at the other of the first plurality of symbols or the second plurality of symbols. The VCS is further configured to determine a second edit transcript that comprises a second plurality of operational changes that may be applied to at least one of the first plurality of symbols or the second plurality of symbols to arrive at the other of the first plurality of symbols or the second plurality of symbols. The VCS is further configured to select one of the first edit transcript or the second edit transcript as an optimal edit transcript based on whether the first number of operational changes is less than the second number of operational changes.","The techniques of this disclosure may be advantageous, because an administrator or other user of web services of the SOA system may assess system impact of a new web service version without launching the new version. The techniques of this disclosure may be specifically advantageous for more critical SOA systems for which trial and error testing of web service version updates is undesirable.","The details of one or more embodiments of the invention are set forth in the accompanying drawings and the description below. Other features, objects, and advantages of the invention will be apparent from the description and drawings, and from the claims.","In general, this disclosure is directed to techniques for the management of web services in a service oriented architecture (SOA) system. Although an SOA architecture-based system may provide for platform-independent use of network accessible services as discussed above, such a system may be difficult to manage and\/or implement, especially where a plurality of web services rely on one another for operation.","In some examples, it may be desirable for a developer of a web service to update a web service to a new version. In some examples, a new version of a web service may execute the same as a previous version, e.g., the new web service may continue to accept the same inputs, of the same format, and provide the same output in response to the same input as the previous version of the web service. However, in other examples, a new version of a web service may operate differently than another, previous version of the web service. For example, a new version of a web service may utilize different operations, accept different inputs or provide different outputs, modify the format, content, and\/or protocol (e.g., data type) of inputs and outputs, or may otherwise operate differently than a previous version. Other examples of differences between web service versions include security updates, new mission requirements, different available data sets, bug fixes, application programming interface (API) improvements, policy changes, and the like.","Since an SOA system is developed with loose coupling between web services, e.g., the web services exchange information based on functionality and protocols, it may be difficult for a user of web services, or an administrator responsible for implementing web services, to determine what changes will occur if a new version of a web service is implemented. For example, where a new version of a web service causes a change in inputs accepted or output provided, the update may cause other web services of the SOA system to operate differently than originally intended, or to cease operation completely. According to known SOA systems, to determine what effect a new web service version will have on other services of the SOA system, a user may not determine whether a version update will cause a change in operation of other web services, unless the version update is executed within the SOA system. This approach may be undesirable in more critical government, military, commercial, and or industrial applications where non-operational web services can cause significant problems.","Upgrading a web service of an SOA system as described above may be costly and or inefficient, especially as an SOA system evolves and increases in complexity. For example, for some web services multiple versions of a service are maintained using a single, evolving interface. According to this example, service developers may preserve old operations and append new operations, and as a result of new operations data types (e.g., format of inputs and\/or outputs) operation may change. Accordingly, web service developers may need to support old operation data types and new ones. Having multiple versions of a web service that represent the same abstract entity (e.g., a weather forecast web service) may be confusing for clients of the web service that may need to map between different versions depending on how the web service is used. A cost of maintaining and supporting older versions of web application data types may grow with each new version of the web service, and may become prohibitive.","Many SOA systems include web services that depend on information from other services to operate. For example, web service developer tools have recently become popular that create \u201cmashups\u201d of data sources and services, where functionality provided by a plurality of web services are presented to a user via the same user interface (e.g., accessible by the same uniform resource locator (URL)). Examples of such developer tools are Yahoo! Developer Network\u00ae and Yahoo! Pipes\u00ae. These composite services create exciting new functionality for end-users, however such composite services may be easily rendered inoperable because they depend on so many other web services. As services evolve, the complexity of dependencies between web services may increase, especially when translation services that translate web service output to a format for a specific other web service are used.","One approach to reduce an impact of version updates to web services on other, dependent web services is to keep all original operations of web services of an SOA system, e.g., do not allow version updates that will change in operation of other web services of the system. This approach may not be feasible in large distributed systems, because the number of operations and data types may grow out of hand and a service developer must continue supporting old versions of web services. Another approach to reduce an impact of version updates is to create an intermediary web service that acts as a translator between web services. According to this approach, requests made of an older web service version may be translated such that the requests may be understood by a newer version of the web service. For example, \u201colder\u201d requests may be identified by using XML namespaces to represent versions of a WSDL description or other SOA interface document. An intermediary service may act as a translation component that translates older requests\/responses to current web service version requests responses.","Each of the approaches described above involve increased complexity and therefore costs to implement and maintain. The Web Services Interface Revision Environment (WIRE) described herein integrates with a SOA system and may reduce the costs associated with maintaining a complex set of interconnected web services and as well as any impact of a version updates may have on other web services of the SOA system.",{"@attributes":{"id":"p-0050","num":"0049"},"figref":["FIG. 1","FIG. 1","FIG. 1"],"b":["101","102","101","110","110","110","110","110","120","110","110","110","110","120","110"]},"In some examples, at least one of web services  may depend on another web service of SOA system  for operation. For example, as indicated by dashed line A in , second web service B may, via ESB , communicate a request for information from first web service A. In response to the request for information, as indicated by dashed line B in , web service B may, via ESB , communicate the requested information. In this manner, web service B may be considered to depend upon web service A for operation, e.g., web service B may utilize information from web service A via ESB  for operation.","WIRE system  as illustrated in  provides for version control functionality related to web services  of SOA system . That is, WIRE system  provides a standard framework for maintaining web service version and dependency information for web services . As depicted in , WIRE  includes a version control service (VCS)  that maintains versioning information and dependency data within a backend database , referred to as dependency control database (DCD). In addition, WIRE  includes a front-end WIRE toolset that provides various environments to assist both developers and administrators. The framework of WIRE  is designed to be extensible and scalable to many SOA enterprise environments. For example, VCS C may be built as a standard SOAP-based web service that will store version information and dependencies in database . As such, VCS C can be plugged into and existing ESB, and immediately be used via WIRE toolset . WIRE  is platform and ESB independent to work in many different enterprises.","After developers edit existing or create new version information, the data will be sent to the VCS C. When administrators request a list of dependencies for some particular operation of a particular service, VCS C will respond with the corresponding results. In general, there may be two classes of potential users of WIRE system , web service administrators, and web service developers. The phrase web service administrator refers to one or more users responsible for administration of an SOA system . The one or more administrators may be responsible for ensuring that web services  of SOA system  function as expected. For example, a web service administrator may be responsible for ensuring that one or more web services  of an SOA system  continue to function as expected when a version update for a web service is installed.","In general, WIRE toolset  includes software functions that provide two environments for assisting users: a developer environment A for assisting service developers and an administrator environment B for service administrators. In most enterprise environments, the developer roles will be different than the administrator role, but in smaller deployments they could be the same person or persons. Developer environment A allows developers to maintain version information as they make programmatic changes in deployed web services  currently identified to WIRE system . This includes SOAP-based web services that utilize WSDL interfaces as well as other SOA services. Developer environment A also allows developers to add historical version information to existing services which have not been previously used with WIRE system .","Administrator environment B allows service administrators to efficiently assess any system impact before removing any of web services  in a system-of-systems context. The administrator can assess the impact by visually examining the dependencies for a particular operation in a dynamic graph drawn by WIRE . The graph may contain other beneficial data, such as usage statistics for each dependency, as gathered by the ESB, and user-supplied system impact ratings to help the administrator determine the appropriate action to take when deprecating services.","The phrase web service developer refers to one or more users responsible for development and\/or management of one or more web services A, B. For example, a web service developer may write software code to define web service functionality. A web service developer may further implement new versions of a web service A, B, and\/or maintain older versions of a web service.","In some examples, the various functionality and components of WIRE system  are described herein as directed to specific web service developer and administrator users. However, in some circumstances, a web service developer may be the same user or group of users as a web service administrator. For example, a user or group of users responsible for management of a SOA system  may also develop and\/or manage one or more web services  of SOA system . In other examples, a web service developer may desire to utilize functionality described herein as directed towards an administrator. Description of the various aspects of WIRE system  as directed towards web service developers and\/or web service administrators is provided for exemplary purposes only, and is intended to be non-limiting. Any user may utilize any functionality of WIRE system  as described herein.","WIRE toolset  includes a dependency control user interface , which provides an interface by which one or more users, such as web service developers and administrators, access functionality provided by version control service  and DCD . According to one example, dependency control user interface (DCUI)  enables a user, such as a web service developer, to submit to WIRE  dependency information for at least one web service and\/or one or more version of a web service. According to one example, DCUI  may communicate received information to VCS C for storage in DCD .","DCUI  and\/or VCS C may also or instead be operative to provide dependency information to one or more users. For example, DCUI  may, in response to a request for information from a user, communicate with VCS C to access information stored in DCD  to determine and\/or provide requested dependency information to one or more users. As one example, DCUI  may receive an indication of a version update for a first web service A executable within an SOA system. DCUI  may communicate an indication of the version update to VCS C. In response to the received version update, VCS C may access DCD . DCD  stores dependency information for at least one second web service B executable within the SOA system . For example the dependency information may indicate that second web service B depends at least in part on operation of first web A service.","VCS C may further determine, based on the dependency information stored in DCD , if a version update for first web service A will cause a change to operation of second web service B when the version update is executed within SOA system . If the version update will cause a change to operation of second web service B when the version update for first web service A is executed within the SOA system , VCS C provides a user with at least one indication that the version update to the second web service B will cause a change to operation of the at least one first web service A.","According to one example, if the version update to the first web service A will cause a change, at least one message (e.g., an RSS feed, email, text, tweet, telephone call, page, alarm, or the like) may be communicated to one or more users, such as developers of one or more web services executable within the SOA system  and\/or administrators of one or more SOA systems .","According to another example, DCUI  may receive from a user a request to receive dependency information for a specific one or more of web services  of SOA system . For example, a user may request, via DCUI , dependency information for a web service, or a particular version of a web service. In response to the request, DCUI  may issue SOAP calls to VCS C to access information stored in DCD . VCS C may determine, based on the stored information, what web services depend on the requested web service. Also in response to the request, VCS C may provide a user with at least one indication of forward and\/or backward dependencies for the at least one requested web service or web service version. In one example, the at least one indication of forward and\/or backward dependencies is a graph depicting what web services the request web service depends on for operation, and\/or what web services depend on the requested web service. In another example, the indication includes a textual description of forward and\/or backward dependencies of a web service or web service version.","According to another example, DCUI  may receive from a user a request to receive dependency information for the entire SOA system . In response to the request, DCUI  may communicate with VCS C to access information stored in DCD . VCS C may determine, based on the stored information, which web services of the SOA system  depend on one another. Also in response to the request, VCS C may provide a user with at least one indication of forward and\/or backward dependencies for a plurality of web services of SOA system . In one example, the at least one indication is a graph or chart that depicts inter-dependencies between web services of the SOA system . In another example, the at least one indication is a textual description of dependencies of the SOA system .",{"@attributes":{"id":"p-0064","num":"0063"},"figref":["FIG. 2","FIG. 2","FIG. 1","FIG. 1","FIG. 2"],"b":["201","202","201","101","110","101","212","202","216","212","214","220","226","212","226","220","201","216"]},{"@attributes":{"id":"p-0065","num":"0064"},"figref":["FIG. 3","FIGS. 1 and 2","FIG. 3"],"b":["326","126","101","201","326"]},"According to other examples not depicted, separate user interfaces may be provided for the different forms of functionality described with respect to the various user interfaces , , , ,  depicted in . Furthermore, the various user interfaces described herein may be provided to a user via one or more WIRE toolset , via one or more desktop applications, or any other mechanisms for providing a user interface configured to communicate via a network.","As shown in , DCUI  includes a service selection UI . Service selection UI  may enable a user to select one or more services  of an SOA system , . For example, service selection UI  may include one or more file browsers, drop down menus, or like mechanisms to enable a user to select one or more services  of an SOA system . User selection of one or more services  may cause other UI of DCUI  described herein to display information related to one or more selected web services  for viewing or editing. As discussed in further detail below,  illustrates one example of a service selection UI  as service selection UI . As shown in , service selection UI  includes a user-selectable directory structure tree  that may allow a user to select one or more web services  of an SOA system , . In the example of , directory structure tree  enables user selection from among a plurality of web services and corresponding versions for that may be accessible by a user named \u201cRScenarioUser.\u201d User selection of one or more web services via directory structure tree  may cause information regarding the selected one or more services to be displayed to a user, e.g. as described with respect to the various examples of user interfaces of this disclosure.","As depicted in , DCUI  includes a service UI . Service UI  may provide a user with a user interface to submit information, such as dependency information, to a WIRE system, or view information provided by a WIRE system. For example, service UI  may enable a user to submit, select or view a name of one of the services  of an SOA system and a version for that service. Service UI  may further enable a user to submit or select a categorization for a service or service version, e.g., whether a service or version is currently deployed (e.g., executed within an SOA system), deprecated (e.g., an outdated version that still functions, but for which a more recent version should possibly be used), broken (e.g., not operating at all, such as not providing any output), or deactivated (not useable).","Service UI  may further enable a user to submit a location, or endpoint, where a service may be accessed, such as a uniform resource locator (URL) where the service may be accessed via a network such as the Internet. Service UI  may further enable a user to enter release notes for a web service, or a version of a web service. Submitted release notes may indicate a difference, such as an operational, functional, or other difference, between a web service version and other version of the web service. Service UI  may further allow for other forms of information relating to a web service or version of a web service, such as ancestry of a web service (e.g., a project upon which a web service or version is based) and\/or contact information for one or more developers and\/or administers responsible for developing and\/or maintaining a web service or web service version. Service UI  may further enable a user to define custom metadata for a web service or web service version.","The various information described above that may be submitted by a user according to service UI  may be communicated to a version control service (e.g., VCS C, ) and stored in a dependency control database (e.g., DCD , ) as described above with respect to . Such stored dependency information may be accessed and provided to a user. For example, such dependency information may later be accessed to determine forward\/backward compatibility for a new version of a web service. If a new version of a web service will cause a change in operation of another web service of an SOA system when executed, an indication of the change may be provided to a user.","A described above, service UI  may enable a user, such as a web service developer, to submit various information regarding a web service to WIRE system , . A service UI , or any other UI described herein, may also or instead enable a user to view information previously entered regarding a particular web service or web service version. According to one such example, a service UI  may be provided to web service developers in an editable format, where a user may freely modify one or more fields or select from among options according to pull-menus, selectable buttons, and the like that representing the various types of information described above.","According to a related example, the same or substantially the same service UI  may be provided to web service administrators, however much of the above-described information may be presented in a read-only format. In another example, a service UI , or any other UI described herein, may be editable by both administrators and developers. In other examples, different service user interfaces may be provided to administrators and\/or developers. For example, an administrator may be provided with a subset of information available to developers, or vice versa.",{"@attributes":{"id":"p-0073","num":"0072"},"figref":["FIG. 4","FIG. 3","FIG. 3","FIG. 4","FIG. 4","FIG. 4"],"b":["470","370","470","370","470","431","431","470","432","432"]},"Service UI  further includes categorization fields , including deployed field  and deprecated field . Deployed field  is selectable by a user to indicate whether a version of a web service indicated in version field  is currently deployed in SOA system , . Deprecated field  is selectable by a user to indicate whether a web service version is deprecated (e.g., an outdated version that is still functional, but for which a more recent version should possibly be used). In other examples not depicted in , categorizations fields  include other categories for one or more web services, such as whether a service or version is currently deployed (e.g., executed within an SOA system), or broken (e.g., not operating at all, such as not providing any output), or deactivated (e.g., not useable).","UI  further includes an endpoint field . Endpoint field  enables a user to submit or view a network location where a web service, and\/or version of a web service, may be found. According to the example of , the \u201cInventorySupplyStatus\u201d web service may be accessed via the URL http:\/\/afrlDemo.wire.com\/SupplyStatus. UI  further includes a description field . Description field  enables a user to submit or view a description of functionality provided by a web service. According to the example of , description field  indicates that the InventorySupplyStatus web service is \u201coperable to gather different supply data.\u201d UI  further includes a release notes field . Release notes field  enables a user to submit or view what has changed with a version of a web service indicated by version field , such as a textual description of a change. For example, release notes field  in the example of  indicates that version 1 of the InventorySupplyStatus web service is changed in light of one or more previous versions to \u201cchange the return type.\u201d","Service UI  further includes an ancestor field . Ancestor field  may enable a user to indicate or view a prior project, such as another web service, that may have provided a basis for the web service indicated by field  and\/or a particular version of a web service indicated by version field . Service UI  further includes custom metadata fields . Custom metadata fields  enable a user to submit or view custom data that may be assigned to a web service or web service version. For example, using a custom metadata field, a web service developer or administrator may label a web service or version according to an internal company or government department identification. For example, as shown in , custom metadata fields indicate that a user has assigned the InventorySupplyStatus web service, version 1, with a project number \u201c#0003345.\u201d Custom metadata entered using custom metadata field  may be used to, for example, interface with other software systems inside or outside an SOA system to provide company and\/or department specific reports regarding the SOA system, web service, group of web services, or versions. Service UI  further includes a contact information field . Contact information field  may be used to submit or view contact information for one or more users associated with a web service or version, such as web service developers and\/or SOA system administrators. As shown in the example of , contact information has been submitted for developer \u201cChris Smith\u201d, and Administrator \u201cStephanie Merkin.\u201d","Referring back to , a DCUI may further include operations UI . Operations UI  may be used to view or submit information regarding operations performed by a web service or version. For example, operations UI  may allow a user to select from among a group of operations supported by a selected web service or version. Operations UI  may further allow a user to select from among inputs or outputs (e.g., data types) of a particular operation of a web service or version. Operations UI may further enable a user to select one or more categorizations of a particular operation of a web service. For example, operations UI  may enable a user to submit selection of whether an operation is deprecated. Operations UI  may further enable a user to submit a description of a particular operation of a web service, such as a description of what value and\/or in what format values are communicated.","Operations UI  may further enable a user to submit or view one or more other operations and\/or inputs\/outputs, e.g., of the same service or version, or of a different service or version of a service, upon which a particular operation depends. For example, operations UI  may include a textual list or graphical indication of depending operations and\/or inputs\/outputs, and their associated web service or web service version.",{"@attributes":{"id":"p-0079","num":"0078"},"figref":["FIG. 5","FIG. 5","FIG. 5","FIG. 5","FIG. 5"],"b":["372","572","572","543","543","544","370","545","545","544","542","572"]},"Operations UI  further includes an operation categorization field . Operation categorization field  enables a user to select one or more categorizations of a particular operation of a web service. According to the example of , a \u201cdeprecated\u201d selectable check-box  is presented to a user for selection. The \u201cdeprecate\u201d check-box  may indicate that a particular operation is not functioning as intended, for example to indicate that an operation selected in operation selection field  only works under certain circumstances, or provides some output but not others. According to other examples not shown in , operations UI  may enable a user to submit selection of whether an operation is deprecated (e.g., an outdated operation that is still functional, such as one for which a more recent version of the operation should possibly be used).","UI  further includes a description field . Description field  indicates a description of functionality provided by an operation or input\/output of a web service, such as a return value for the operation. According to the example of , description field  indicates that the operation or input\/output selected at operation selection field  is \u201cReturns a list of supply statuses based on various supply inventory services.","Operations UI  further includes custom metadata fields . Custom metadata fields  enable a user to select custom data that may be assigned to an operation of a web service or web service version. For example, using custom metadata field , a web service developer or administrator may label an operation according to an internal company or government department identification. Operations UI  further includes dependencies field . Dependencies field  provides a user with a textual description of one or more web service operations upon which an operation selected at operation selection field  depend. According to the example of , operation getSupplyStatus version 1.0 depends on one operation of web service FirstAidInventory, three operations of web service VehicleInventory, and three operations of web service WeaponInventory. In other examples not depicted in , operations UI  may further include one or more indications of what other operations, either of the same web service or different web service, depend on an operation at operation selection field .","Referring back to , DCUI  may further include a service dependency graph UI . Service dependency graph UI  may provide a user with a graphical representation one or more of backward and forward dependencies for a particular web service, web service version, operation, or input\/output of a web service. For example service dependency graph may provide, for a particular web service, version, operation, or input\/output, a graphical backwards dependency graph that indicates what web services and\/or versions of a web service depend on a selected web service (e.g., that invoke the selected web service). The graphical backwards dependency graph may further indicate, for example via color, shape, text, or line\/arrow formatting or other graphical indication, whether a web service or version will not operate as expected if a selected web service is executed For example, the graphical backwards dependency graph may indicate whether one or more web services or version that depend on a selected web service will not operate as expected, e.g., because the web service or version that depends on the selected web service is not configured to receive one or more outputs or output formats (e.g., data types) of the selected web service. As an example, the graphical backwards dependency graph may indicate that a selected or other web service is deprecated, or possibly should be updated.","Service dependency graph UI  may further provide a user a graphical forward dependency graph that indicates what web services\/version a selected web service depends on (e.g., that the selected web service invokes). The graphical forward dependency graph may indicate, for example via color, shape, text, or line\/arrow formatting or other graphical indication, whether a selected web service will not operate as expected if another web service is executed, for example whether a selected web service is deprecated, or possibly should be updated.","In some examples a service dependency graph UI may include one or more indications in addition to those described above. For example, a service dependency graph may indicate, in addition to whether operation of forward or backward dependent services will change due if a selected web service version is executed in an SOA system, a categorization of a change that would be caused in the selected web service were executed. For example service dependency graph  may indicate whether a change to the selected web service would render the selected web service version, or one or more web service dependent on the selected web service version, whether operation of the web service will change, whether the web service will be deprecated, or whether the web service will cease operation entirely. In addition, service dependency graph may further graphically indicate what operations or inputs\/outputs of web services will cease to operate as intended, or altogether, if a selected web service is executed within an SOA system.",{"@attributes":{"id":"p-0086","num":"0085"},"figref":["FIG. 6","FIG. 6","FIG. 6"],"b":["674","674","659","651","659","652","652","653","653","652","652","653","653","652","659","652"]},"Forward dependency graph  includes a graphical indication of one or more web services , , and  that selected service , Inventory Supply, depends on (e.g., invokes). In the example of , service  depends on services , , and . As shown in , web services  and  are represented by a triangle shape, while web services  and  are represented by a circle. The circle may indicate that web services  and  will continue executing as expected or desired if web service  is executed, while the triangle may indicate that web service  may not operate as expected or desired (e.g., web service  is deprecated, meaning SOA system should possibly use a different version of web service ) if web service  is executed. According to this example, a user may quickly verify that, if web service  were to be executed, web service  may be broken and\/or should possibly be updated.","Referring back to , DCUI  may further include a SOA system dependency graph UI . SOA system dependency graph UI  provides a user with a graphical indication of dependencies, such as forward and backward dependencies, between various services of an SOA system. For example, SOA system dependency graph UI may include one or more icons that represent a plurality of services of an SOA system. SOA system dependency graph UI  may indicate what services are dependent on other services, and\/or what services are currently operating as expected or desired, or not. SOA system dependency graph UI  may further indicate a categorization of one or more web services, such as whether they are operating as expected or desired, partially operating, or not operating as expected or desired.",{"@attributes":{"id":"p-0089","num":"0088"},"figref":["FIG. 7","FIG. 7"],"b":["376","776","776","761","767","764","767","761","763","765","767","764","767","761","763","765","767","776"]},"Referring back to , DCUI  may further include a comparison UI . Comparison UI  may provide a user with a mechanism to compare dependency and\/or other information regarding at least two web services or versions of a web service. For example, comparison UI  may enable a user to select at least two web services or versions to compare. In response to the user selection, comparison UI  may present one or more operations and\/or inputs\/outputs shared between the selected web services, and whether the shared operations and\/or inputs\/outputs operate the same or not. For example, comparison UI  may indicate one or more data inputs or outputs of operations of each web service operation, and or whether those inputs\/outputs are different between the two selected web services or version.",{"@attributes":{"id":"p-0091","num":"0090"},"figref":["FIG. 8","FIG. 8"],"b":["378","878","878","880","881","880","881","880","881"]},"As also shown in , comparison UI  further includes an operation change field  and a change date field . Operation change field  may indicate to a user what operations have changed between first and second web services selected at fields  and . According to the example of , operation change field indicates that differences between the respective versions of \u201cVehicleInventory\u201d include the deletion of an operation titled \u201cGetCarrierInventory of version 1, and the addition of an operation titled \u201cGetPersonellCarrierInventory\u201d in version 2. Change date field  may indicate a date at which a change indicated by operation change field  occurred, for example when an indication of a new web service, e.g., version 2 of the web service \u201cVehicleInventory\u201d as show in  was submitted.","As also shown in , comparison UI  may also include input\/output (e.g., data type) review fields  and . Fields  and  allow a user to browse a hierarchy chart depicting operations and\/or inputs\/outputs of the web services selected at WSDL fields  and . The hierarchy chart of fields ,  allow users to select and view differences between operations and\/or inputs\/outputs. For example, UI  shows a user has selected the data type \u201csxd:ComplexType:PlatoonIDWrap\u201d in one or more of fields  and . UI  indicates to a user that the selected data types are the same in both version 1 and version 2 of the VehicleInventory web service. In other examples, UI  may provide an indication that the data types are not the same between web services selected for comparison. For example, UI  may present dissimilar data types in a different color, or font, than the same or similar data types.","As discussed above, in addition to providing one or more users with one or more user interfaces, such as UI  depicted in , WIRE system ,  may be configured to provide users with one or more message alerts, if a change occurs for a web service and\/or an SOA system. For example, WIRE system may, upon receipt of an indication of a new web service version, VCS C,  may access DCD ,  determine if a change to any other web services of the SOA system will be caused if the new version is executed within the SOA system. In one example, such a message may merely indicate to a user that a change has occurred. In other examples, such a message may provide a user with details regarding the change (e.g., for what web service was the indication received, who submitted the change), what web services\/versions operation will be effected if the new version is executed within the SOA system, and\/or what operations, inputs\/outputs, and\/or data types have changed with the new version. In one example, such a message may be communicated to a user via a Really Simple Syndication (RSS) message. According to other examples, such a message may be communicated according to email, text message, pager, telephone or computer based alarm, or any other technique for communicating a message to a user.",{"@attributes":{"id":"p-0095","num":"0094"},"figref":"FIG. 9","b":["110","212","101","202","110","212","101","201","110","212"]},"Message  includes service update information  and operations information . Service update information  indicates to a user various information regarding a service update. For example, message  include an indication of a description of an updated service, release notes for the updated service, whether the service is categorized as deployed and\/or deprecated, contact information, and custom metadata. Service update information  as depicted in  shows these values as they may have been entered using the various user interfaces described above with respect to , and therefore their description is not repeated here.","Message operations information  provides a user with information regarding specific operations of a web service. For example, according to message  of , a change to three operations of the VehicleInventory update from version 1 to version 2 will be caused if version 2 is executed. For each of these depicted operations, operation information  includes a name, version number, description, and status of the operation.","The techniques described above as directed to providing SOA service dependency management for a single SOA system , . In other examples, the techniques of this disclosure may be provided for multiple, independent SOA systems that communicate with one another, for example SOA systems operating on multiple domains.",{"@attributes":{"id":"p-0099","num":"0098"},"figref":["FIG. 10","FIG. 10","FIG. 10","FIG. 10"],"b":["1011","1012","1013","1011","1001","1012","1002","1013","1003","1001","1002","1003","1001","1002","1003","8","1011","2","6","7","1","3","4","5","1012","1013"]},{"@attributes":{"id":"p-0100","num":"0099"},"figref":["FIG. 11","FIG. 11","FIG. 10","FIG. 11","FIG. 11"],"b":["101","101","101","101","1","1001","2","1002","118","118","110","110","111","111","101","101","120","120","120","120","101","101"]},"As also shown in , a WIRE system A, B, has been integrated into each of SOA systems A, B, respectively. Each WIRE system A, B may provide for version control as described herein for the respective SOA system A, B. WIRE systems A, B may also communicate with one another to exchange information, such that the above-described functionality may be provided to users for inter-SOA system dependency. In other examples not depicted in , a single WIRE system may be employed that provides for the above-described functionality for multiple SOA systems that are to exchange information with one another. According to this example, the single WIRE system may be coupled to both enterprise service busses A, B, to facilitate the functionality described above.",{"@attributes":{"id":"p-0102","num":"0101"},"figref":["FIG. 12","FIG. 12","FIG. 1","FIG. 9","FIGS. 3-9"],"b":["110","101","1201","110","114","112","1202","110","110","101","112","114","110","110","101","1203","1204","990","326"]},{"@attributes":{"id":"p-0103","num":"0102"},"figref":["FIG. 13","FIG. 12","FIGS. 3 and 4","FIGS. 3 and 5"],"b":["1312","1311","1313","1311","370","470","372","572","370","470","372","572"]},"As depicted in , WIRE system  may receive the indication of a version update (). For example, VCS C may receive, from DCUI , the indication of the version update. In one example, in response to the received indication, VCS C stores the indication of a version update for later use (). In another example, VCS C instead or in addition determines, based on the indication and\/or other information stored in DCD , whether the version update will cause a change in operation of another web service (e.g., second web service B) of the SOA system ().","As also shown in , VCS C and\/or DCUI  may communicate, to a user, an indication of the change in operation to the second web service B caused by the version update for the first web service A (). For example, VCS C may communicate, to a user responsible for the second web service, a message indicating that a change will be caused, what is changed, and or what other web services may be affected by the new version, if it is executed within the SOA system (). As another example, where VCS C has stored received information in DCD , a user, such as an administrator , may request from WIRE  (e.g., via DCUI ), dependency information (). In response to the request, WIRE  may provide a user with an indication of the change in operation to the second web service that will be caused by the new version of the first web service (). For example, WIRE  may provide a user with a graph, chart, or other information indicating the change in operation to the second web service, as shown with respect to dependency UI , , and SOA system dependency graph UI ,  in , , and , respectively.",{"@attributes":{"id":"p-0106","num":"0105"},"figref":["FIG. 14","FIG. 14","FIG. 14"],"b":["114","214","112","212","114","214","110","212"]},"For example, VCS C,  may access data stored according to the database schema illustrated in  to determine whether or not a version update for a web application of an SOA system will cause a change in operation for another web application of the SOA system. Furthermore, at least some of the data depicted in  may be edited and or viewed by a user via a VCS  as illustrated in . In addition, at least some of the data depicted in  may be communicated to one or more users in the form of a message, one example of which is depicted in .","As described above, VCS C of a WIRE system  may be configured to compare web services and\/or respective versions of a web service to one another, to determine dependency information for the web services\/versions. For example, VCS C may compare a first web service version to a second web service version to determine whether a version update for a first web service will likely effect the operation of other web services within the SOA system. Based on such a comparison, VCS C outputs at least one indication representative of the determination (e.g., via dependency control user interface ). For example, VCS C may provide a user with a graphical depiction of dependency information or a message\/alert regarding web service dependencies based on such a comparison.","As described above, in some examples, web service dependency information (e.g., stored in dependency database ) may comprise one or more XML files (e.g., WSDL files) that define interface information for one or more web services A, B. In some examples, in order to compare web services and\/or versions to one another as described above, VCS C may compare the WSDL files for the web services and\/or versions to one another and provide a visual representation of any changes between the versions. For example, VCS C may implement dynamic programming to calculate one or more sets of edit operations, each set representing a candidate edit transcript of edit operations (e.g., insertions, deletions, and substitutions) defining possible changes between the first version of the WSDL file and the second version. VCS C may select one or more of the computed edit transcripts for visually representing to a user the differences between the versions of the WSDL file.","For example, VCS C may compare the WSDL files and present to a user a graphical depiction of first and second compared versions of a web service, as described above with respect to the web service VehicleInventory displayed via WSDL comparison tool UI  depicted in . In other examples, VCS C may perform such a comparison to determine whether an update to a web service (i.e., an update to a second version of a web service), will effect the operation of at least one second web service of an SOA system. For example, VCS C may perform such a comparison to present a user with an alert message, e.g., version update message  depicted in . VCS C may perform such a comparison in order to provide a user with a graphical depiction of a backward dependency graph  as depicted in , a backward dependency graph as also depicted in , and\/or a full enterprise graph  as depicted in .",{"@attributes":{"id":"p-0111","num":"0110"},"figref":["FIG. 16","FIG. 16","FIG. 16"],"b":["1610","1620","1610","1620","1610","1620","1610","1620"]},"VCS C of a WIRE system  as depicted in  may compare first XML file  and second XML file  to one another. For example, if a web service includes an updated version, VCS C may compare the WSDL file for the prior version of the web service to a current WSDL file for the active (or soon to be active) version of the web service. According to other examples, if a web service may be replaced by a different web service, VCS C may compare the WSDL file of the replacement web service to the WSDL file of the current web service.","In some examples, an XML file (e.g., a WSDL file) as described herein may include one or more data elements that indicate interface information for a web service. For example, where an XML file comprises a WSDL file, such data elements may define one or more interfaces for communicating with a web service. As such, the interface information of the WSDL files may be used to identify dependencies between the web services, and comparison of the WSDL files may be used to identify and\/or visually depict changes to one web service that may impact the operation of other web services.","Data elements of an XML file are typically hierarchically arranged, such as in a tree structure, and WSDLs files are one example of XML files that may be compared using the techniques described herein. In some examples, where an XML file comprises a WSDL file, the hierarchical arrangement of the data elements may correspond to a hierarchical definition of one or more interfaces for the web service and\/or version. For example, a data element (tag) that represents a first operation or interface of a web service may have higher hierarchical level, than a data element that represents a second operation or interface of the web service (or a different web service) upon which the first operation or interface depends (i.e. the first operation calls the second web service).","For example, referring back to the example of , a version 1.0 of a web service operation getSupplyStatus may depend on (i.e., call) an operation GetInventory of a FirstAidInventory web service, the operations getTankInventory, getCarInventory, and getCarrierInventory of a VehicleInventory web service, and getGunInventory, getMortarInventory, and getGrenadeInventory operations of a WeaponInventory web service. In other examples, a hierarchical structure of data elements of a WSDL file may also indicate other information, such as inputs, outputs, and data types associated with a web service operation.",{"@attributes":{"id":"p-0116","num":"0115"},"figref":["FIG. 16","FIG. 16"],"b":["1610","1620","110","1610","1612","1620","1614","1610","1620","1610","1620","1612"]},{"@attributes":{"id":"p-0117","num":"0116"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<ELEMENT A>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"..."]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"< ELEMENT B>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"112pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"..."]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"< ELEMENT C>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"112pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"..."]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/ ELEMENT C>"]},{"entry":[{},"<\/ELEMENT B>"]},{"entry":[{},"<\/ELEMENT A>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}},"br":{},"b":"1614"},{"@attributes":{"id":"p-0118","num":"0117"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<ELEMENT A>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"..."]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<ELEMENT B>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"112pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"..."]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/ELEMENT B>"]},{"entry":[{},"<ELEMENT M>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"112pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"..."]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/ELEMENT M>"]},{"entry":[{},"<\/ELEMENT A>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"In some examples, VCS C may process the first XML document  and the second XML document  to generate first and second vectors (sets) of symbols that represent the first and second plurality of data elements , . Such first and second vectors may also comprise one or more symbols that represent the hierarchical structure of the first and second XML documents , , respectively, as described in further detail below with respect to .","According to some aspects of this disclosure, to compare XML documents ,  to one another, VCS C may determine a least number of changes between the first plurality of data elements  and the second plurality of data elements , to represent differences between the first plurality of data elements  and the second plurality of data elements . The first and second pluralities of data elements ,  are provided for purposes of explaining the techniques of this disclosure only. In other examples not specifically depicted in , an XML file as described herein may include more, or fewer data elements than depicted in the example of . Also according to other examples not specifically depicted in , data elements ,  may have other differences than those depicted herein.","As described above, in order to compare the first and second XML documents , , according to the techniques described herein, VCS C may compute one or more edit transcripts that each define a number of operations that may be performed on the first plurality of data elements  to arrive at the second plurality of data elements . For example, VCS C may determine a plurality of candidate edit transcripts, each of the different transcripts representing a sequence of edit operations such as insertion, deletion, and\/or substitution, that may be applied to the first plurality of data elements  to arrive at the second plurality of data elements  (and\/or applied to the second plurality of data elements  to arrive at the first plurality of data elements ). According to the example of , VCS C may determine the plurality of edit transcripts that a sequence of operations that may be applied to the first plurality of data elements A-B-C  to arrive at the second plurality of data elements A-B-M , as described in further detail below with respect to .","VCS C may further select from the plurality of candidate edit transcripts, one or more optimal edit transcripts. In comparison to plurality of candidate edit transcripts, each of the optimal edit transcripts may specify a least number of edit operations that would need to be applied to the first plurality of data elements  in order to arrive at the second plurality of data element. According to the example of , the one or more optimal edit transcripts may indicate a minimum number of operations that may be applied to the first plurality of data elements A-B-C, to arrive at the second plurality of data elements A-B-M, as described in further detail below with respect to .","According to examples where VCS C determines a plurality of optimal edit transcripts as described above, VCS C may select an optimal edit transcript from a plurality of optimal edit transcripts, for use in providing a user with an indication of a difference between the first and second XML documents , . Otherwise, if VCS C only identifies one optimal edit transcript (e.g., one edit transcript that includes less operations than any other edit transcript), VCS C may use such a single optimal edit transcript, to provide a user with an indication of a difference as described above.",{"@attributes":{"id":"p-0124","num":"0123"},"figref":["FIG. 17","FIG. 17"],"b":["110","1722","1712","1724","1714"]},"VCS C may then, as described above, compare the first vector  to the second vector , in order to compare web service information of first and second web services or versions associated with the first and second XML documents, as described herein. For example, VCS C may provide a user with an indication of such a comparison, in the form of a message, alert, graphical depiction of dependency information, and\/or other indication.","As shown with respect to the first plurality of data elements  in , the data element represented by the letter A has a highest level of hierarchy (i.e., a leaf node). As shown in , data element B is within the scope of data element A. That is, data element B may be described as a child of data element A. Similarly, data element C is within the scope of data element B. That is, data element C may be described as a child of data element B. Accordingly, data element C could be thought of as a child of data element B, which in turn could be thought of as a child of data element A. According to the example of , VCS C may process the first plurality of data elements  to generate a first one-dimensional vector of symbols . To do so, VCS C may assign the data elements A, B, and C, as well as one or more symbols that provide indications of the hierarchical relationship of the data elements, to the symbols of first vector . For example, such a symbol may indicate both a value of the data element, and a direction taken to get to the data element. In some examples, a direction taken to get to a root element, such as element A in the example of , is always assigned a down direction.","For example, VCS C may assign data element A to a first symbol within first vector . Data element A may be, for example, the ROOT data element in an XML file. Because data element A is a ROOT data element, the symbol associated with data element A is assigned a down direction. As shown in , data element B is within the scope of data element A. VCS C may assign a down direction to a next symbol of first vector  associated with data element B, thereby indicating a transition to a next lower level of hierarchy to arrive at data element B. As shown in , data element C is within the scope of data element B. VCS C may assign a down direction to a next symbol of first vector  associated with data element C, thereby indicating a transition to a next lower level of hierarchy to arrive at data element C. As also shown in , no other data elements are within the scope of data element C. VCS C may assign an up direction to a next symbol of first vector  associated with data element B, thereby indicating a transition to a next higher level of hierarchy to arrive at data element B. In addition, VCS C may then assign an up direction to a next symbol of first vector  associated with data element A, thereby indicating a transition to a next higher level of hierarchy to arrive at data element A.","As shown with respect to the second plurality of data elements  in , the data element represented by the letter A has a highest level of hierarchy (i.e., a ROOT data element), and data elements B and C are both within the scope of data element A, at a same level of hierarchy lower than a hierarchy level of data element A. According to the example of , VCS C may process the second plurality of data elements  to generate a second one-dimensional vector of symbols . To do so, VCS C may assign the data elements A, B, and C, as well as one or more indications of hierarchy of the data elements, to symbols of second vector .","According to the example of , VCS C may assign data element A to a first symbol position within second vector . Data element A may be, for example, the ROOT data element in an XML file. Because, data element A is a ROOT data element, VCS C may assign data element A a down direction. As shown in , data element B is within the scope of data element A. VCS C may assign a down direction to a next symbol of second vector  associated with data element B, thereby indicating a transition to a next lower level of hierarchy to arrive at data element B. As shown in the example of , no other data elements are within the scope of data element B. VCS C may assign an up direction to a next symbol of second vector  associated with data element A, thereby indicating a transition to a next higher level of hierarchy to arrive at data element A.","As also shown in , data element M is within the scope of data element A. VCS C may assign a down direction to a next symbol of second vector  associated with data element M, thereby indicating a transition to a next lower level of hierarchy to arrive at data element M. As shown in the example of , no other data elements are within the scope of data element M. VCS C may assign an up direction to a next symbol of second vector  associated with data element A, thereby indicating a transition to a next higher level of hierarchy to arrive at data element A.","In this manner, VCS C may be configured to generate first and second vectors , , that each include symbols that respectively correspond to the first and second plurality of data elements ,  depicted in , as well as a hierarchical arrangement of the first and second plurality of data elements , . In some examples, VCS C may use such generated first and second vectors ,  to compare at least two web services to one another, in order to compare dependency information for at least two web services and\/or versions of a web service.","In some examples, once VCS C has generated first and second vectors ,  as described above, VCS C may compare the first and second vectors ,  to one another to determine one or more edit transcripts that represent changes that may be applied to one of first vector , to arrive at second vector , or vice versa. For example, VCS C may use a recurrence relation to determine one or more edit transcripts. Further details of determining a plurality of edit transcripts are described in Algorithms on Strings, Trees, and Sequences: Computer Science and Computational Biology by Dan Gusfield pages 215-223 published May 28, 1997 by the Cambridge University Press, which is incorporated herein by reference in its entirety.","Example 1 below is one example of pseudo code that represents such a recurrence relation that may be used to determine a plurality of edit transcripts as described herein. According to this example, the variable i indicates a row index, and the variable j represents a column index.","a=table[i\u22121][j]+1","b=table[i][j\u22121]+1","c=table [i\u22121][j\u22121]+(0 if string1[j\u22121] equals string2[i\u22121], 1 otherwise)","minCost=min(a, b, c)","table[i][j]=minCost","if (minCost equals a) add north direction","if (minCost equals b) add west direction","if (minCost equals c) add northwest direction","Referring back to the example of first and second symbol vectors ,  depicted in , VCS C may use the above relation to generate a table that represents one or more edit transcripts, which each represent changes that may be applied to the first vector  to arrive at the second vector , or vice versa. VCS C may use to determine one or more optimal edit transcripts. Table 1 illustrates one example of such a table:",{"@attributes":{"id":"p-0143","num":"0142"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"6"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"49pt","align":"left"}}],"thead":{"row":[{"entry":[{},"TABLE 1"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"5","align":"center","rowsep":"1"}}]},{"entry":[{},"A\u2193","B\u2193","C\u2193","B\u2191","A\u2191"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"5","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"7"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"6","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"7","colwidth":"49pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"0","1 (W)","2 (W)","3 (W)","4 (W)","5 (W)"]},{"entry":["A\u2193","1 (N)","0 (NW)","1 (W)","2 (W)","3 (W)","4 (NW, W)"]},{"entry":["B\u2193","2 (N)","1 (N)","0 (NW)","1 (W)","2 (NW, W)","3 (W)"]},{"entry":["A\u2191","3 (N)","2 (NW, N)","1 (N)","1 (NW)","2 (NW, W)","2 (NW)"]},{"entry":["M\u2193","4 (N)","3 (N)","2 (N)","2 (NW, N)","2 (NW)","3 (NW, W, N)"]},{"entry":["A\u2191","5 (N)","4 (NW, W)","3 (N)","3 (NW, N)","3 (NW, N)","2 (NW)"]},{"entry":{"@attributes":{"namest":"1","nameend":"7","align":"center","rowsep":"1"}}}]}}]}}},"In some examples, once a table such as Table 1 has been generated, VCS C may use the table to determine one or more optimal edit transcripts of a plurality of edit transcripts represented by the table. For example, VCS C may apply a recursive traceback function to such a table to determined one or more optimal edit transcripts. Example 2 below is one example of pseudo code that may be used to implement such a recursive traceback function. According to the pseudo code of Example 2, the recursive traceback function may begin at a bottom-right most entry of the example of Table 1 above.",{"@attributes":{"id":"p-0145","num":"0144"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"tracebackFunction(int x, int y){"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"if (x equals 0 and y equals 0){"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/we now have chosen edit transcript"]},{"entry":[{},"return"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"\/\/Select one of the directions from the table cell [x,y]"]},{"entry":[{},"\/\/editOps.add( ) adds the specified edit operation to the *beginning*"]},{"entry":[{},"of the list"]},{"entry":[{},"if (goNorthwest){"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\/\/Northwest is either MATCH or REPLACE"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"\/\/if symbol1[x] equals symbol2[y] then MATCH else REPLACE"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"editOps.add(match or replace)"]},{"entry":[{},"tracebackFunction(x\u22121, y\u22121)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"if (go West){"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/WEST is DELETE"]},{"entry":[{},"editOps.add(delete)"]},{"entry":[{},"tracebackFunction(x\u22121, y)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"if (goNorth){"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/NORTH is INSERT"]},{"entry":[{},"editOps.add(insert)"]},{"entry":[{},"tracebackFunction(x, y\u22121)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"According to the example of , VCS C may apply the pseudo code of Example 2 and determine one or more optimal edit transcripts. For example, Table 2 below depicts one example of such an optimal edit transcript, that includes the edit operations M M R R M.",{"@attributes":{"id":"p-0147","num":"0146"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"6"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"35pt","align":"left"}}],"thead":{"row":[{"entry":[{},"TABLE 2"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"5","align":"center","rowsep":"1"}}]},{"entry":[{},"M","M","R","R","M"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"5","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"A\u2193","B\u2193","C\u2193","B\u2191","A\u2191"]},{"entry":[{},"A\u2193","B\u2193","A\u2191","M\u2193","A\u2191"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"5","align":"center","rowsep":"1"}}]}]}}}}},"According to some examples, VCS C may further process one or more determined optimal edit transcripts as described above to determine a plurality of edit operations that VCS C may use to provide a user with an indication of dependency information for at least one web service of an SOA system. For example, VCS C may apply one or more rules to one or more determined edit transcripts, to determine the plurality of edit operations used to provide a user with such an indication of dependency information.","Example 3 below is one example of pseudo code that may be used to determine a plurality of edit operations that may be used to provide a user with an indication of dependency information as described herein. For example, VCS C may use such pseudo code to determine one or more edit operations that may be used to graphically depict to a user one or more differences between two XML files, such as two WSDL files associated with one or more web services of an SOA system. Using the pseudo code of Example 3, VCS C may determine one or more edit operations comprising a MATCH, where symbol is common between compared first and second XML files, a REPLACEMENT when a symbol of the first XML file is replaced by a symbol in the second XML file (or vice versa), an insertion when a symbol of the first XML file is inserted between symbols of the second XML file (or vice versa) and a deletion, where a symbol of the first XML file is removed in the second XML file (or vice versa). According to the pseudo code of Example 3 below, edit operations are described as M=match, R=replaced, I=inserted, and D=deleted.",{"@attributes":{"id":"p-0150","num":"0149"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"Symbol1Index = 0"},{"entry":"Symbol2Index = 0"},{"entry":"for each edit operation op in the transcript (from tracebackFunction)"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"if (op equals R){"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"s1 = symbols1[Symbol1Index]"]},{"entry":[{},"s2 = symbols2[symbol2Index]"]},{"entry":[{},"if (s1.isUp and s2.isDown)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"s2.setOpResult(INSERTED)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"else if (s1.isDown and s2.isUp)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"s1.setOpResult(DELETED)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"else if (s1.isDown and s2.isDown)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"s1.setOpResult(REPLACED)"]},{"entry":[{},"s2.setOpResult(REPLACED)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"else if (s1.isUp and s2.isUp)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\/\/ignore ups"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"}else if (op equals I){"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"s2 = symbols2[symbol2Index]"]},{"entry":[{},"if (s2.isDown)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"s2.setOpResult(INSERTED)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"else"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\/\/ignore ups"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"}else if (op equals D){"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"s1 = symbols1[symbol1Index]"]},{"entry":[{},"if (s1.isDown)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"s1.setOpResult(DELETED)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"else"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\/\/ignore ups"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"}else if (op equals M){"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"s1 = symbols1[symbol1Index]"]},{"entry":[{},"s2 = symbols2[symbol2Index]"]},{"entry":[{},"s1.setOpResult(MATCHED)"]},{"entry":[{},"s2.setOpResult(MATCHED)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"According to the pseudo code of Example 3 above, one or more edit operations may be selected by VCS C based on one or more preferences specific to comparing XML files, such as WSDL files. For example, according to the pseudo code of Example 3, one or more edit operations associated with a symbol with a down direction may be ignored as potential edit operations that may be used to provide a user with dependency information.","Referring back to the example of comparing first and second vectors , , which describe respective first and second XML files ,  described with reference to , as well as Tables 1 and 2 above, VCS C may apply the pseudo code of Example 3 to determine a plurality of edit operations associated with the first and second plurality of data elements ,  of the respective first and second XML files. For example, according to the example of , VCS C may apply the pseudo code of Example 3 to determine a plurality of edit operations A=(MATCH), B=(MATCH), C=(DELETED) for a first plurality of data elements  associated with XML file , and a plurality of edit operations A=(MATCH), B=(MATCH), M=(INSERTED) for second plurality of data elements  associated with second XML file .","In some examples, VSC C may apply the above pseudo code to determine generate one or more edit transcripts that represent a plurality of edit operations that represent changes (or no changes in the case of a MATCH) that may be applied to a first XML document (e.g., a WSDL file that represents a version of a web service of an SOA system) to arrive at a second XML document (e.g., that represents another version of the web service represented by the first XML document).","In some examples, VCS C may use such determined edit operations to provide a use with a graphical indication of dependency information as described herein. For example, VCS C may use the first and second plurality of nodes to indicate that data elements A and B have not changed between the first and second XML files , , that data element C of the first XML file  is not included in the second XML file , and that data element M, which was not included in first XML file  has been included in the second XML file . For example, VCS C may modify a color of a graphical depiction of one or more of data elements A, B, C, and M, to represent the respective difference between the first and second XML files , . For example, VCS C may graphically present data elements A and B with the color green, indicating that data elements A and B have not changed. VCS C may also graphically depict data element C with the color red, indicating that the data element C of the first XML file  is not present in the second XML file  (data element C has been deleted). VCS C may also graphically depict data element M with the color blue, indicating that data element M was not present in the first XML file , and has been added in the second XML file  (data element M has been inserted).",{"@attributes":{"id":"p-0155","num":"0154"},"figref":["FIG. 18","FIG. 18","FIG. 1","FIG. 18"],"b":["1610","1610","110"]},"As depicted in , VCS A may determine a first plurality of symbols (e.g., a first vector of symbols  depicted in ) (). The first plurality of symbols may represent one or more data elements of a first XML file and\/or a hierarchical data structure of the data elements of the first XML file. For example, the first plurality of symbols may include up and\/or down symbols that represent different levels of hierarchy of the data elements of the first XML file, as well as the one or more data elements.","As also depicted in , VCS A may determine a second plurality of symbols (e.g., a second vector of symbols  depicted in ) (). The second plurality of symbols may represent one or more data elements of a second XML file and\/or a hierarchical data structure of the data elements. For example, the second plurality of symbols may include up and\/or down symbols that represent different levels of hierarchy of the data elements of the first XML file, as well as the one or more data elements.","As also depicted in , VCS A may determine a first edit transcript that includes a first plurality of operational changes (). The first plurality of operational changes of the first edit transcript may be applied to the first plurality of symbols, to arrive at the second plurality of symbols (or vice versa). For example, the first edit transcript may indicate one or more of an insertion, deletion, and\/or substitution that may be applied to the first plurality of symbols to arrive at the second plurality of symbols.","As also depicted in , VCS A may determine a second edit transcript that includes a second plurality of operational changes (). The first plurality of operational changes of the second edit transcript may be applied to the first plurality of symbols, to arrive at the second plurality of symbols (or vice versa). For example, the second edit transcript may indicate one or more of an insertion, deletion, and\/or substitution that may be applied to the first plurality of symbols to arrive at the second plurality of symbols. In this manner, VCS A may determine a plurality of edit transcripts. In some examples, VCS A may also determine a plurality of edit transcripts that includes more than two edit transcripts, as depicted with respect to the example of .","As also depicted in , VCS A may also select at least one of the first edit transcript or the second edit transcript as an optimal edit transcript, based on whether the number of operational changes (e.g., edit distance) of the first edit transcript is less than number of operational changes the second edit transcript (). In some examples, VCS A may use the selected at least one edit transcript to provide at least one indication of the selected at least one edit transcript to a user. For example, where the selected at least one edit transcript represents differences between first and second WSDL files that represent different versions of a web service, or different web services, VCS A may use the selected at least one edit transcript to provide the user with an indication of the differences between the first and second versions of the web service, or the different web services.","In one or more examples, the functions described may be implemented in hardware, software, firmware, or any combination thereof. If implemented in software, the functions may be stored on or transmitted over as one or more instructions or code on a computer-readable medium and executed by a hardware-based processing unit. Computer-readable media may include computer-readable storage media, which corresponds to a tangible medium such as data storage media, or communication media including any medium that facilitates transfer of a computer program from one place to another, e.g., according to a communication protocol. In this manner, computer-readable media generally may correspond to (1) tangible computer-readable storage media which is non-transitory or (2) a communication medium such as a signal or carrier wave. Data storage media may be any available media that can be accessed by one or more computers or one or more processors to retrieve instructions, code and\/or data structures for implementation of the techniques described in this disclosure. A computer program product may include a computer-readable medium.","By way of example, and not limitation, such computer-readable storage media can comprise RAM, ROM, EEPROM, CD-ROM or other optical disk storage, magnetic disk storage, or other magnetic storage devices, flash memory, or any other medium that can be used to store desired program code in the form of instructions or data structures and that can be accessed by a computer. Also, any connection is properly termed a computer-readable medium. For example, if instructions are transmitted from a website, server, or other remote source using a coaxial cable, fiber optic cable, twisted pair, digital subscriber line (DSL), or wireless technologies such as infrared, radio, and microwave, then the coaxial cable, fiber optic cable, twisted pair, DSL, or wireless technologies such as infrared, radio, and microwave are included in the definition of medium. It should be understood, however, that computer-readable storage media and data storage media do not include connections, carrier waves, signals, or other transient media, but are instead directed to non-transient, tangible storage media. Disk and disc, as used herein, includes compact disc (CD), laser disc, optical disc, digital versatile disc (DVD), floppy disk and blu-ray disc where disks usually reproduce data magnetically, while discs reproduce data optically with lasers. Combinations of the above should also be included within the scope of computer-readable media.","Instructions may be executed by one or more processors, such as one or more central processing units (CPU), digital signal processors (DSPs), general purpose microprocessors, application specific integrated circuits (ASICs), field programmable logic arrays (FPGAs), or other equivalent integrated or discrete logic circuitry. Accordingly, the term \u201cprocessor,\u201d as used herein may refer to any of the foregoing structure or any other structure suitable for implementation of the techniques described herein. In addition, in some aspects, the functionality described herein may be provided within dedicated hardware and\/or software modules configured for encoding and decoding, or incorporated in a combined codec. Also, the techniques could be fully implemented in one or more circuits or logic elements.","The techniques of this disclosure may be implemented in a wide variety of devices or apparatuses, including a wireless handset, an integrated circuit (IC) or a set of ICs (e.g., a chip set). Various components, modules, or units are described in this disclosure to emphasize functional aspects of devices configured to perform the disclosed techniques, but do not necessarily require realization by different hardware units. Rather, as described above, various units may be combined in a codec hardware unit or provided by a collection of interoperative hardware units, including one or more processors as described above, in conjunction with suitable software and\/or firmware.","Various embodiments of the invention have been described. These and other embodiments are within the scope of the following claims."],"GOVINT":[{},{}],"heading":["STATEMENT REGARDING FEDERALLY SPONSORED RESEARCH OR DEVELOPMENT","TECHNICAL FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION","Example 1","Example 2","Example 3"],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF DRAWINGS","p":[{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIG. 13"},{"@attributes":{"id":"p-0038","num":"0037"},"figref":"FIG. 14"},{"@attributes":{"id":"p-0039","num":"0038"},"figref":"FIG. 15"},{"@attributes":{"id":"p-0040","num":"0039"},"figref":"FIG. 16"},{"@attributes":{"id":"p-0041","num":"0040"},"figref":"FIG. 17"},{"@attributes":{"id":"p-0042","num":"0041"},"figref":"FIG. 18"}]},"DETDESC":[{},{}]}
