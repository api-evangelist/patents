---
title: Key derivation techniques
abstract: Systems and methods for authentication generate keys from secret credentials shared between authenticating parties and authenticators. Generation of the keys may involve utilizing specialized information that, as a result of being used to generate the keys, renders the generated keys usable for a smaller scope of uses than the secret credential. Further, key generation may involve multiple invocations of a function where each of at least a subset of the invocations of the function results in a key that has a smaller scope of permissible use than a key produced from a previous invocation of the function. Generated keys may be used as signing keys to sign messages. One or more actions may be taken depending on whether a message and/or the manner in which the message was submitted complies with restrictions of the a key's use.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09197409&OS=09197409&RS=09197409
owner: Amazon Technologies, Inc.
number: 09197409
owner_city: Seattle
owner_country: US
publication_date: 20110929
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","BACKGROUND","DETAILED DESCRIPTION"],"p":["This application incorporates by reference for all purposes the full disclosure of co-pending U.S. patent application Ser. No. 13\/278,953, filed concurrently herewith, entitled \u201cTECHNIQUES FOR CLIENT CONSTRUCTED SESSIONS\u201d and co-pending U.S. patent application Ser. No. 13\/248,962, filed concurrently herewith, entitled \u201cPARAMETER BASED KEY DERIVATION\u201d.","Computing environments take many forms. As an example, organizations often utilize networks of computing devices to provide a robust set of services to their users. Networks often span multiple geographic boundaries and often connect with other networks. An organization, for example, may support its operations using both internal networks of computing resources and computing resources managed by others. Computers of the organization, for instance, may communicate with computers of other organizations to access and\/or provide data while using services of another organization. In many instances, organizations configure and operate remote networks using hardware managed by other organizations, thereby reducing infrastructure costs and achieving other advantages.","While diverse computing environments have proven useful for a wide variety of applications, such environments present many challenges. For example, configuring computer resources in furtherance of one organizational goal can adversely affect furtherance of another organizational goal. For example, effective management of computing resource security can often come at the cost of efficient access to data and services. Balancing the goals of security and efficiency can be quite challenging, often requiring significant effort and resources.","In the following description, various embodiments will be described. For purposes of explanation, specific configurations and details are set forth in order to provide a thorough understanding of the embodiments. However, it will also be apparent to one skilled in the art that the embodiments may be practiced without the specific details. Furthermore, well-known features may be omitted or simplified in order not to obscure the embodiment being described.","Techniques described and suggested herein include systems and methods for key generation, in accordance with various embodiments. The keys may be used for various purposes, such as authentication and participation in message signing schemes. In an embodiment, a computing resource provider provides computing services to customers based at least in part on electronic requests received from user devices of the services. The services may be any suitable service that may be offered including, but not limited to, access to data, access to computing resources to perform operations, access to data storage services, and the like.","To ensure that services are provided in a secure manner, various embodiments of the present disclosure utilize techniques to authenticate requests (also referred to as \u201cmessages\u201d) to ensure that the requests are legitimate. In an embodiment, requests are authenticated using a Hash Message Authentication Code (HMAC) algorithm or other suitable algorithm, as discussed in more detail below.","In an embodiment, both the authenticating party (e.g., user of services or party acting on behalf of the user) and the authenticator (e.g., provider of services or party acting on behalf of the provider) share a secret credential, which may be referred to as a key. An authenticator may store shared secret credentials for multiple users. As part of a transaction, the authenticating party may sign requests using the shared secret credential, thereby forming a signature. The signature may be provided to the authenticator with the requests. The authenticator may use its own copy of the shared secret credential to generate a signature for the received requests and, by comparing if the generated signature matches the received signature (for example by being identical to the received signature), determine whether the requests were signed using the shared secret credential. If determined that the requests were signed using the shared secret credential, the requests may be considered authentic and, therefore, it may be determined that the requests should be fulfilled.","Because the interaction above is symmetric (i.e., both utilize common information when performing their roles), the shared secret credentials that an authenticator keeps can be used to both authenticate authenticating parties or to act on their behalf. As a result, a high degree of security is desirable to protect these credentials. Maintaining high degrees of security may have negative performance and availability consequences. For example, maintaining a high degree of security may include maintaining a centralized system for key storage. Such centralized systems, however, may cause a scaling bottleneck since the addition of users and\/or services causes a greater burden to the centralized system. If such a centralized system fails, it may be difficult or impossible to authenticate requests. Thus, centralization provides both advantages for security and disadvantages for scaling and availability of services.","In an embodiment, negative impacts of such systems (and other systems) are reduced by utilizing a signing protocol that derives from shared secret credentials artifacts that may be used to prove that an authenticating party has a shared secret credential and, therefore, is likely authorized to obtain access specified in requests signed with the artifacts. In an embodiment, such artifacts are obtained by configuring authenticator computer systems to accept as a signature a value that is based at least in part on a derivation of a shared credential, instead of the shared credential itself. The derivation of the shared credential may be such that, as described more fully below, the derivation does not allow for practical determination of the shared credential.","For example, in an embodiment, authenticating parties are able to sign signatures with\n\nHMAC(,HMAC(,credential)),\n\nwhere M is a message, and HMAC(X, credential) is an artifact derived from a shared secret credential. The value for X may be some value that is known both by the authenticating party and the authenticator, and may be publicly available. For example, X may be a current date, encoded in a predetermined manner to ensure that HMAC(X, credential) is computed consistently by the authenticating party and the authenticator. As another example, X may be an identifier of a service with which the artifact is usable. As yet another example, X may encode multiple semantic meanings and be provided in a manner such that both the authenticating party and the authenticator consistently compute the artifact. The semantic meaning may be a restriction on use of the key, including meaning that indicates that no further derivations form the key should be used. Combining previous examples of the present paragraph, X may be encoded as \u201c20110825\/DDS\u201d where the string left of the slash represents a date and the string right of the slash represents the name of a service with which an artifact computed with X is usable. Generally, X may be any value or set of values encoded consistently for both the authenticating party and the authenticator. It should be noted that other suitable functions other than HMAC functions may be used, as discussed below.\n","Returning to the example utilizing HMACs, in an embodiment, values for X are chosen to provide additional advantages. As noted, X may (but does not necessarily) correspond to one or more semantic meanings Semantic meanings such as time stamps, service names, regional names, and the like are used, in an embodiment, to provide a system where artifacts created in accordance with techniques of the present disclosure provide corresponding restrictions on use of keys derived from X. In this manner, even though compromise of keys generated may allow authentication by undesired parties, restrictions used to encode keys allow for the adverse effects to be minimized when keys are compromised. As an example, time restrictions used to derive keys provide an efficient way for a system to check if a submitted signature was signed with a key that was valid at the time of signature submission. As a concrete example, if a current date is used to derive a key and an authenticator system only accepts signatures submitted on the current date, the authenticator system will determine that signatures generated using keys derived with different dates are invalid. Similarly, a key derived with an identifier of a particular service would be invalid for use with another service. Other examples are provided below.","As noted, various techniques of the present disclosure allow for multiple parameters to be used to derive keys. In an embodiment, keys are derived from multiple parameters through multiple use of an HMAC function. For example, a key may be computed as follows:\n\n=HMAC( . . . HMAC(HMAC(HMAC(),),) . . . ,),\n\nwhere K is a shared secret credential and the Pare parameters. The key, K, may be used to generate a signature, such as:\n\n=HMAC(),\n\nwhere M is a message, which may be canonicalized. In this manner, the key is derived in a layered manner, allowing for partial derivations of the key to be passed to various components of a distributed system. For example, K=HMAC(K, P) may be computed and passed on to one or more components of a distributed system. The components that receive Kmay compute K=HMAC(K, P), where Pmay be the same for each component or different for some or all components. The values for Kcalculated by the various components may pass the calculations to other components of the distributed systems which may compute K=HMAC(K, P). Each component may cache the results it calculates, and possible results computed and calculated by other components. In this manner, more security may be provided around a data store that stores shared secret keys because computations of derived keys may be performed by other components of the distributed system.\n","Techniques of the present disclosure also provide for the initiation of sessions. For example, as discussed, a shared secret credential and one or more parameters may be used to derive a key. Accordingly, parameters for a session may be used to generate a credential that may be used during the session. The credential may be used by the user that requested or, in some embodiments, by a user to whom the credential was passed and to whom access to one or more computing resources has been delegated. In such instances, because a delagatee of such access uses a key derived from a shared secret credential, but not the shared secret credential itself, a higher level of security is maintained and there is no need to rotate the shared secret credential to prevent future use by the delegatee. As discussed in more detail below, delegatees may also become delegators using techniques of the present disclosure, many of which are described in more detail below.",{"@attributes":{"id":"p-0039","num":"0038"},"figref":"FIG. 1","b":["100","102","104","106"]},"The illustrative environment includes at least one application server  and a data store . It should be understood that there can be several application servers, layers, or other elements, processes, or components, which may be chained or otherwise configured, which can interact to perform tasks such as obtaining data from an appropriate data store. As used herein the term \u201cdata store\u201d refers to any device or combination of devices capable of storing, accessing, and retrieving data, which may include any combination and number of data servers, databases, data storage devices, and data storage media, in any standard, distributed, or clustered environment. The application server can include any appropriate hardware and software for integrating with the data store as needed to execute aspects of one or more applications for the client device, handling a majority of the data access and business logic for an application. The application server provides access control services in cooperation with the data store, and is able to generate content such as text, graphics, audio, and\/or video to be transferred to the user, which may be served to the user by the Web server in the form of HTML, XML, or another appropriate structured language in this example. The handling of all requests and responses, as well as the delivery of content between the client device  and the application server , can be handled by the Web server. It should be understood that the Web and application servers are not required and are merely example components, as structured code discussed herein can be executed on any appropriate device or host machine as discussed elsewhere herein.","The data store  can include several separate data tables, databases, or other data storage mechanisms and media for storing data relating to a particular aspect. For example, the data store illustrated includes mechanisms for storing production data  and user information , which can be used to serve content for the production side. The data store also is shown to include a mechanism for storing log data , which can be used for reporting, analysis, or other such purposes. It should be understood that there can be many other aspects that may need to be stored in the data store, such as for page image information and to access right information, which can be stored in any of the above listed mechanisms as appropriate or in additional mechanisms in the data store . The data store  is operable, through logic associated therewith, to receive instructions from the application server  and obtain, update, or otherwise process data in response thereto. In one example, a user might submit a search request for a certain type of item. In this case, the data store might access the user information to verify the identity of the user, and can access the catalog detail information to obtain information about items of that type. The information then can be returned to the user, such as in a results listing on a Web page that the user is able to view via a browser on the user device . Information for a particular item of interest can be viewed in a dedicated page or window of the browser.","Each server typically will include an operating system that provides executable program instructions for the general administration and operation of that server, and typically will include a computer-readable storage medium (e.g., a hard disk, random access memory, read only memory, etc.) storing instructions that, when executed by a processor of the server, allow the server to perform its intended functions. Suitable implementations for the operating system and general functionality of the servers are known or commercially available, and are readily implemented by persons having ordinary skill in the art, particularly in light of the disclosure herein.","The environment in one embodiment is a distributed computing environment utilizing several computer systems and components that are interconnected via communication links, using one or more computer networks or direct connections. However, it will be appreciated by those of ordinary skill in the art that such a system could operate equally well in a system having fewer or a greater number of components than are illustrated in . Thus, the depiction of the system  in  should be taken as being illustrative in nature, and not limiting to the scope of the disclosure.",{"@attributes":{"id":"p-0044","num":"0043"},"figref":"FIG. 2","b":["200","202","204","206","202","206","202","206","202"]},"A fault zone, in an embodiment, is a collection of computing resources that are separated by one or more fault boundaries such that each fault zone is tolerant to a fault of another fault zone. As an example, each fault zone  may be a separate data center. Thus, if one data center ceases being operational, perhaps due to a power outage or other disruptive event, other data centers may continue to operate. The fault zones may be each located in different geographic locations and some or all of the fault zones may be separated by geopolitical boundaries. For example, two or more of the fault zones may be in different countries. It should be noted that, for the purpose of illustration, the present disclosure provides numerous examples where fault zones are data centers. However, fault zones can be defined in numerous other ways. For example, separate rooms in the same data center may be considered separate fault zones in accordance with various embodiments. As another example, computing resources in the same location, but supported by different backup power generators and\/or supported by different network resources, may be considered different fault zones. As yet another example, data centers may be clustered such that each cluster of data centers may be considered a fault zone. Further, there may be many reasons a fault zone may fail, including reasons relating to power grid operation, public network operation, political assertions of power, and other reasons.","In an embodiment, customers  communicate with the computing resource provider  over a network , such as the Internet. The customers  may have resources configured in one or more of the fault zones  and may communicate with the resources by sending electronic messages, such as messages invoking a web-service application programming interface (API) of the computing resource provider in order to configure and operate the resources. Customers may utilize resources in multiple fault zones in order to decrease the effects of potential failures that impact the customers' resources. A customer who utilizes resources of the computing resource provider  to operate a publicly accessible website may, for example, maintain web and other servers in separate fault zones so that, if servers in one fault zone fail, the public may still access the web site by accessing servers in another fault zone.",{"@attributes":{"id":"p-0047","num":"0046"},"figref":["FIG. 3","FIG. 2","FIG. 3","FIG. 3","FIG. 2"],"b":["300","302","302","302","302","306","308","308","308","302","310","208"]},"It should be noted that the various embodiments illustrated in , as with all illustrative embodiments shown in the Figures and described herein, are illustrative in nature and that variations are considered as being within the scope of the present disclosure. For example, other services different from those illustrated may be provided in the fault zone  in addition to or instead of the services illustrated. As illustrated by the ellipses in , for instance, additional services may be operated in the fault zone . In addition, some services may utilize other services. For example, multiple services (such as a block-level data storage service  and a virtual computer system service ) may be utilized together to provide other services, such as a relational database service, an electronic mail service, and, generally, any type of computing service that can be provided using resources of a computing resource provider.","As illustrated in , each of the services of the computing resource provider may include a separate verifier . The verifier may be a computing device, collection of computing devices, application module, or other resource that verifies various attestations made by customers and possibly by other computer systems. In an embodiment, each of the verifiers  verifies message signatures that are produced in accordance with the various embodiments herein and then provided by customers in connection with requests to access computing resources, as described in more detail below. Keys and other relevant information may be propagated to the verifiers from a central key authority to enable the verifiers to verify information. It should be noted that each service having a verifier is an illustrative example of a particular embodiment, but that other arrangements are within the scope of the present disclosure. For example, a single verifier may support multiple services, even all services and may even support multiple fault zones.",{"@attributes":{"id":"p-0050","num":"0049"},"figref":["FIG. 4","FIG. 3","FIG. 4","FIG. 3","FIG. 4","FIG. 4","FIG. 4"],"b":["402","404","406","402","404","406","402","404","406","408","414","416","422","404","406","408","422","408","422"]},"In , each server rack - is depicted as including a rack switch -. The rack switches  and  may be responsible for switching packets of digital data to and from their respective sets of server computers - and -. The rack switches - may be communicatively linked to a data center switching fabric  and then to a set of edge routers  that connects the data center  to one or more other computer networks including the Internet. The switching fabric may include any suitable set of networking components including multiple interconnected switches - (for clarity, only four are shown in ) of one or more switch types arranged in one or more switching layers, as well as routers, gateways, bridges, hubs, repeaters, firewalls, computers, and suitable combinations thereof. In at least one embodiment, the rack switches - and the edge routers  are considered part of the switching fabric . The rack switches -, the edge routers , and the components of the switching fabric  are examples of the network hardware  of .","As noted above, various embodiments of the present disclosure allow for various levels of authority to be given for different reasons.  is a diagram that illustrates an example way of a manner in which various elements participating in a computing environment may be allocated different scopes of authority in accordance with at least one embodiment. In , a computing resource provider  is illustrated. In an embodiment, the computing resource provider  has authority over its resources and, as illustrated in , is able to apportion that authority among various participants in the resources' use. It should be noted that, for the purpose of illustration consistent with other illustrations and descriptions therein,  shows a computing resource provider  having authority over a domain. However, embodiments of the present disclosure are also applicable to other masters of authority domains. For instance, a master of authority may be a government or governmental organization, a sub-organization of another organization or, generally, any entity with authority over some domain.","Returning to the illustrative example of , the computing resource provider  manages its authority by allowing different sub-entities to have authority over different sub-domains. For example, as shown in the Figure, each of a number of fault zones  of the computing resource provider are provided a corresponding sub-domain of the computing resource provider's  domain. Thus, each fault zone may have authority over its own resources, but not resources of another fault zone (although, in some instances authority over some sub-domains may be shared). Thus, in accordance with an embodiment, a fault zone may provide user access to computing resources in the fault zone, but not access to computing resources of another fault zone.","As noted above, each fault zone may include one or more services . Accordingly, as illustrated in , each service may be responsible for a sub-domain of the domain of the corresponding fault zone . Thus, a service, in an embodiment, can provide access to resources accessible by the service, but not to other services. Each service may serve one or more customers  and, therefore, each customer may be responsible for a sub-domain of authority of a corresponding service of the one or more services . Thus, in an embodiment, a customer may provide access to its own resources involved with a corresponding service, but not to another customer's service. As a concrete illustrative example, if the service is a virtual computing resource service, a customer may provide access (such as public access) to its own virtual computer systems, but not, without permission, to virtual computer systems of other customers.","As noted, the particular allocation of authority as illustrated in  is for the purpose of illustration and numerous variations are considered as being within the scope of the present disclosure. As noted, embodiments of the present disclosure are applicable to domains of authority outside of domains managed by computing resource providers and sub-domains may be determined according to particular needs and circumstances. Further,  shows customers of a virtual resource provider having the smallest sub-domains of authority. However, techniques of the present disclosure may allow customer domains to be divided into one or more sub-domains.","Various embodiments of the present disclosure relate to message signatures.  is a diagram  illustrating an example manner in which information may be communicated among participants in a message signature verification process in accordance with at least one embodiment. In an embodiment, a key source  provides a key to both a message submitter  and a signature verifier . The key source may be a computer system configured to provide keys to at least the message submitter  and the signature verifier . The key source may also generate the keys using various techniques, including various embodiments described herein or may obtain generated keys from another source. The message submitter  may be a computer system configured to submit a message and a signature to the signature verifier  or other component that operates in connection with the signature verifier . The computer system of the message submitter  may be a computer system of a customer of a computing resource provider, for example. The signature verifier  may be a computer system configured to receive messages and signatures and analyze the signature to verify that the message is authentic, as discussed below. Briefly, the signature verifier  may analyze a received signature and message to determine if the signature was generated using the correct key K. It should be noted that, while  shows a key source  separate from the message submitter  and signature verifier , either of the message submitter or signature verifier could also be a key source. For example, customers of a computing resource provider may provide their own keys. Customer keys may then be provided to the signature verifier for verification of signatures. In addition, the message submitter  and signature verifier  may each receive different keys from the key source . For example, the message submitter  may receive a key and the signature verifier  may receive a key that is derived, using the various embodiments of the present disclosure, from the key received by the message submitter .","As illustrated in , the signature verifier  receives messages and corresponding signatures from the message submitter . The messages may be, for example, electronic requests for access to a computing service . The messages may, for instance, encode API calls to a web service. If analysis of the signature and message indicates that the messages are authentic, then the signature verifier notifies the service (or a component controlling access to the service) that the message submitter can have the requested access. For example, the signature verifier may pass the received message to the service to enable the service to fulfill the request. Accordingly, the service may be a computer system operable to fulfill requests, such as the various services described above. It should be noted that, while various descriptions of various components of  and other components describe the components as possibly being implemented as computer systems configured to perform certain actions, components may also comprise multiple computing devices, such as networks of computing devices, that are collectively configured to perform the actions.",{"@attributes":{"id":"p-0058","num":"0057"},"figref":"FIG. 7","b":["700","700"]},"In an embodiment, the process  includes obtaining  a key K. The key can be obtained in any suitable manner. For example, the key may be generated by a computer system performing the process . The key may be electronically received by a computer system performing the process . Generally, obtaining the key may be performed in any suitable manner. The key may be any suitable key for a particular signature algorithm being utilized. For example, if a hash-based message authentication code (HMAC) scheme is being used with a secure hash algorithm (SHA)-256 cryptographic hash function, the key may be a sequence of bytes, such as a sequence of 64 or fewer bytes. Different cryptographic hash functions, such as SHA-224, SHA-384, and SHA-512 may also be used.","In an embodiment, the process also includes canonicalizing a message M to form a canonicalized message M. Canonicalizing a message may include arranging information in the message in a format that allows a verifier to verify whether a signature of the message is valid. Generally, many information communication protocols transform the bits that comprise a message while leaving the message semantically identical. As a result, two semantically identical messages may comprise different sets of bits and, therefore, may result in different signatures. Accordingly, canonicalization allows for a straightforward way of ensuring that a signature can be verified. It should be noted, however, that some embodiments of the present disclosure do not require message canonicalization. For example, if various protocols being utilized do not result in semantically identical messages comprising different sets of bits, canonicalization may not be necessary and may be omitted. Generally, canonicalization may be omitted in any instance where signature verification is able to proceed successfully without manipulation of a signed message.","In an embodiment, a signature is generated by computing HMAC(K, M), where HMAC( ) is an HMAC function, such as described above. HMAC functions have several properties that make them particularly useful for various embodiments of the present disclosure. For example, HMAC functions can be computed efficiently by a computer system, thereby leaving computing resources available for other tasks. In addition, HMAC functions are preimage resistant (non-invertable). For instance, given a signature S=HMAC(K, M) with K a key and M a message, essentially no information is gained about the key K. For example, from S it would be computationally impossible or at least impractical to determine K from S. HMAC functions are also second preimage resistant. In other words, given S=HMAC(K, M) and M, it is impossible or at least computationally impractical to determine a message M\u2032 different from M such that S=HMAC(K,M\u2032). In addition, HMAC functions are forgery-resistant. For instance, given an oracle for S=HMAC(K, M), querying the oracle N times (N a positive integer) allows for the production of at most N signature-message pairs. In other words, given a set of signature-message pairs, it is impossible or computationally impractical to determine the key or determine a function that will produce a correct signature for a message not in the set.","While HMAC functions are particularly useful for various embodiments, other functions can be used. For example, any function with the above properties of HMAC functions may be used. In addition, other functions that do not necessarily have all (or any) of the above properties can be used, such as in circumstances where security is not of primary concern and\/or where security is a concern, but is maintained through other mechanisms. It should be noted that various illustrations of various embodiments show specific inputs into HMAC functions, but that variations are possible. For example, the inputs to an HMAC function (or other function) may be different. As described above, for instance, one input is a key. However, this input may be derived from a key or otherwise based at least in part on a key. As an illustrative example, input may comprise a key with information, such as a signature scheme identifier (perhaps a version identifier), that is added to the key as a suffix, prefix, or otherwise. As another example, input may be information that is obtained by use of a mapping of the key to the information, which may be another key. Similarly an input shown as a message may be derived from a message. As another example variation considered as being within the scope of the present disclosure, the signature may not be the output of an HMAC function, but one or more values that are derived from the output of a HMAC function (or other suitable function). In some embodiments, the key and the message may be passed into the function in the reverse order.","Returning to the description of , once the signature is generated by computing HMAC(K,Mc), the signature and message M are provided  to a receiver, which may be a computing device that verifies signatures or another computing device involved in a signature verification process, such as a computing device providing an interface for communication of messages and signatures. As with all embodiments explicitly described herein, variations are considered as being within the scope of the present disclosure. For example, the canonicalized message Mmay be provided to the receiver instead of or in addition to the message M. In addition, providing the message M and the signature to the receiver may also include providing other information, such as a key identifier that may be used to identify, in a data store that associates keys with key identifiers. Further, other information, such as parameters that encode policy, as discussed below, may be provided with the message M and signature.",{"@attributes":{"id":"p-0064","num":"0063"},"figref":["FIG. 8","FIG. 8","FIG. 2","FIG. 7"],"b":["800","800","800","700","800","802","800"]},"In an embodiment, a signature S and message M are received . The signature S and message M may be received electronically from a submitter, such as a computing device that performed the process  of . The message M is then canonicalized  to determine M, in accordance with an embodiment. Canonicalization of the message M, in various embodiments, ensures that the signature S can be verified. Accordingly, in an embodiment, the process  includes generating 808 a signature S\u2032 by computing HMAC(K, M). In an embodiment, S\u2032 is equal to HMAC(K, M), although S\u2032 can be derived from HMAC(K, Mc), in various embodiments. For the purpose of illustration, the remainder of the process  will be described with the assumption that S\u2032=HMAC(K, M), but that numerous variations are within the scope of the present disclosure.","Accordingly, in an embodiment, a determination is made  whether S\u2032 is equal to the received signature S. In other words, a determination is made whether the received signature is sufficient, for example, because it is a signature that was generated using the key K. Thus, in an embodiment, if it is determined  that S\u2032 and S are not equal, then the signature is  unverified. However, if the S\u2032 is equal to S, then the signature is  verified. Depending on whether the signature is verified, appropriate action may be taken. For instance, if the message was a request for access to a computing resource, the requested access may be denied (at least temporarily). Similarly, if the message was a request for access to the computing resource and the signature was verified, the requested access may be granted. It should be noted, however, that the appropriate action to be taken can vary widely in various embodiments depending on the reason(s) signatures are received and verified.","As noted above, various embodiments of the present disclosure apply to numerous environments. In many environments, it is useful to have centralized management of various aspects of security maintenance. , for example, is a diagram  illustrating an example manner of distributing keys in accordance with at least one embodiment. In , a central key authority maintains one or more data stores (collectively referred to as a \u201cdata store\u201d) that contain various keys utilized by an organization. The keys may correspond, for example, to users of computing devices of the organization. Each user of a set of users may, for instance, be assigned one or more keys. In an embodiment, at least some keys correspond to customers (and\/or users of the customers) of the organization. For instance, in an embodiment, the organization is a computing resource provider and each customer of the computing resource provider corresponds to one or more keys that allow the customers' users to access computing resources maintained by the computing resource provider. Other adaptations of the process  of  in accordance with the variations described above with  are also within the scope of the present disclosure.","As illustrated in , the key authority  propagates keys to a plurality of key zones . A key zone may be a domain of the organization in which a received key is valid. For example, referring to , each key zone  may correspond to a fault zone, such as a data center. Key zones may be, but are not necessarily, geographically defined. For example, each key zone may correspond to a country, region, or other geographically defined region. Key zones may also be defined in other ways. For example, each key zone may correspond to a service provided by a computing resource provider, to a customer of an organization, and the like. While not illustrated as such, key zones may have sub-zones. For example, a key zone may correspond to a country. Inside the country may be multiple regions, each corresponding to sub-zones of the key zone. Keys may be propagated to sub-zones in such embodiments.","As illustrated in , key zones  may propagate keys to one or more verifiers  for the key zone. For instance, if a key zone corresponds to a data center, a computing device of the data center may propagate keys to verifiers for each of a plurality of services supported by computing resources in the data center. In this manner, the verifiers can be used to verify signatures submitted in connection with various requests. This relieves the computing resources of the key authority themselves from verifying signatures and also reduces latency and bandwidth requirements, especially in instances where the key authority  is geographically distant from services to which requests are made.","Key propagation may be made in various ways. In an embodiment, keys are distributed over secure channels to various recipients. In some embodiments, the key authority propagates the same keys to each key zone. Also, some keys may be usable in multiple key zones. The key authority  may propagate keys usable in multiple key zones to those multiple key zones while refraining from propagating those keys to key zones where the keys cannot be used. Thus, in the example of a computing resource provider, the key authority  may propagate a key for a customer only to those key zones where the customer is able to use the key, such as data centers used to maintain computing resources of the customer.","Various embodiments of the present disclosure also provide for key propagation in manners providing for numerous advantages.  is a diagram  illustrating an example manner of distributing keys in a manner that provides various scopes of authority in accordance with at least one embodiment. As with , the diagram  includes a key authority  with a key K that propagates keys, directly or indirectly, to various key zones  and verifiers , such as in accordance with the above description in connection with . While, for the purpose of illustration, the diagram  is described in connection with a single key K, and keys derived from K, the embodiments described herein apply when the key authority performs such actions for numerous keys.","As illustrated in , the key K is used as a basis for other keys derived from K. For example, from K, a key Kis derived and propagated to a first key zone (Key Zone). As such, the key K(or keys derived from the key K) is usable in the first key zone, but not in other key zones that do not have K(or a key derived from the key K). Similarly, each of a number of other key zones receive corresponding different keys derived from the key K. It should be noted that, while  shows keys derived from the key K being propagated from the key authority  to corresponding key zones, variations are possible. For example, the key K may be propagated to the key zones and each key zone that receives the key K may use the key K to derive one or more corresponding keys. For example, the key zone  labeled \u201cKey Zone\u201d may receive the key K and derive K. Generally, various tasks involved in key derivation and propagation may be performed differently than illustrated in various embodiments.","As shown in the illustrative example of , the keys received by the key zones  are used to derive keys that are propagated further. For example, referring to the key zone  labeled \u201cKey Zone,\u201d a key Kthat is derived from the key K is used to derive additional keys K\u2032 and K\u2033. The keys K\u2032 and K\u2033 are propagated to corresponding verifiers  for use by the verifiers  in verifying signatures. Thus, a verifier that receives K\u2032 would, in an embodiment, be able to verify a signature generated using K\u2032, whereas a verifier that did not receive K\u2032 would not be able to verify the signature. By propagating the keys in the manner illustrated in  (or variations thereof) advantages are achieved. For instance, by propagating the keys to numerous verifiers in multiple locations instead of one or more centralized verifiers, lower latency is achieved. In addition, referring to , by propagating derived keys to other devices that, in turn, derive additional keys, it is possible to spread computations over multiple devices over multiple locations, thereby allowing for faster key derivation and increasing fault tolerance.","Derivations of keys may be performed in numerous ways.  is a flowchart showing an illustrative example of a process  of key derivation in accordance with at least one embodiment. In an embodiment, the process  includes obtaining  a key K, such as in a manner described above. The key Kmay be any suitable key, such as described above. In addition, the key Kmay be, but is not necessarily, derived from another key, such as by performance of the process  or another process. Upon obtaining the key a new key is derived from K. In the illustrative example of , a new key K Kis computed as (or based at least in part on) HMAC(K, R), where Ris information identifying one or more restrictions on the key K. Rmay be, for instance, a sequence of bits that encodes information indicating where the key Kis usable. For example, Rmay encode a key zone where the key Kmay be used. Restrictions may be based at least in part on geography, time, user identity, service, and the like. Example restrictions are provided in the description below.","Further, as discussed more below, the process  may be used multiple times to derive a key. For example, a key generated using the process  (or a variation thereof) may be used to generate another key, using the same or another restriction. Using the terminology in the figure, Rmay be, for instance, a sequence of bits that encodes information indicating where the key Kcould be used. Kwould become the key Kfor a next iteration of the process. For example, if the process  was used to generate a key based on a geographic restriction, the key generated may be used to generate a key with a date-based restriction. Such a process may be utilized multiple times to use multiple restrictions to derive a key. As discussed more fully below, by using multiple restrictions to derive a key, one or more verifiers can enforce policy while verifying signatures. As a brief illustrative example, as part of a signature verification process, a verifier may determine an expected signature using a restriction, such as an encoding of a current date. If a signature was provided that was generated on a different date, then verification of the signature would fail, in accordance with an embodiment. Generally, if use of a signature does not comply with a restriction used to derive a key, signature verification may fail in accordance with various embodiments.",{"@attributes":{"id":"p-0076","num":"0075"},"figref":["FIG. 12","FIG. 12"],"b":"1200"},"As illustrated in , the request may be canonicalized to form a message, M, which is as input into an HMAC function to generate the signature. Of course, variations, including variations where canonicalization is not necessary and where functions other than HMAC functions are used, may be utilized in accordance with various embodiments. In addition,  shows a particular example derivation of a signature in accordance with an embodiment. However, more or fewer restrictions may be used in deriving the signature and restrictions may be used in a different order than illustrated. In addition, while  shows derivation of a signature, the techniques may be applied to derive other objects that may not be considered signatures in all applications. For example, the techniques illustrated in  (and elsewhere) may be used generally to derive keys.",{"@attributes":{"id":"p-0078","num":"0077"},"figref":["FIG. 13","FIG. 13","FIG. 13"],"b":"1300","br":[{},{},{},{}],"in-line-formulae":[{},{},{},{}],"i":["K","Mc","K"],"sub":"c "},"In the example of , the various restrictions each define a domain and the intersection of the defined domains defines the manner in which the signature generated with the signing key would be valid. In this specific example, a signature generated with the signing key illustrated in  would be valid on the date specified, in the region specified, and for the service specified using the protocol specified. Thus, if a request is signed using the signing key, but on a different date than specified by the input to the signing key, the signature to the request may be considered unverified, even if the request was made for the specified service and in the specified region.","As with other embodiments described herein, variations are considered as being within the scope of the present disclosure. For instance,  shows repeated use of an HMAC function. Multiple functions may be used to derive a signature and, in some embodiments, HMAC functions are not used in every part of the derivation. Also, as noted, different restrictions and different numbers of restrictions may also be used in various embodiments.","Key derivation may be performed in numerous ways in accordance with various embodiments. For instance, a single computing device could compute a signing key, in accordance with some embodiments. In accordance with other embodiments, multiple computing devices may collectively compute a signing key. As a specific illustrative example, referring to , one computer may compute\n\nregion=HMAC(HMAC(,date),region)\n\nand another computer may compute\n\nSigning Key=HMAC(region,Service).\n","As another example, a separate computer system may perform a different layer in the computation of the signing key. Referring to the example in the previous paragraph, instead of a single computer computing Kregion, one computer may compute\n\ndate=HMAC(,date)\n\nand another computer may compute\n\nregion=HMAC(date,region).\n\n is an illustrative example of how multiple key derivation may be performed and used in accordance with at least one embodiment. In particular,  shows an example diagram  illustrating members of a distributed set of computer systems collectively computing a signing key (or other key, in various other embodiments). As shown in , each member of the set is a key provider computer system  that generates a key and provides the generated key to another computer system. For example, a key provider labeled Key Providerobtains a key K (from another source, or by generating the key itself), and uses the key and a restriction, labeled Rto generate a key K. Key Providerpasses the key Kto Key Provider, which uses Kand another restriction, R, to generate another key K. Key Providerpasses the key Kto Key Provider, which uses Kand another restriction, R, to generate another key K. Depending on how many key providers there are in a particular embodiment, this process may continue until Key Providerpasses a key Kto Key Provider, which uses Kand another restriction, R, to generate another a signing Key, K. The key Kis then passed to a verifier computer system . The key K or any key(s) derived from K (generally referred to as Kin the figure) may also be passed to a signer computer system , such as through a secure key-exchange algorithm.\n","The signer computer system  may also, in various embodiments, generate Kon its own if, for example, the restrictions R-Rare made available to the signer and\/or made publicly available. In addition, the signer computer system  may perform only part of the process for deriving Kon its own in various embodiments. For instance, the signer may obtain (perhaps from an appropriate key provider computer system) K, for some integer i that is less than N and restrictions Rthrough R. The signer may then use Kand restrictions Rthrough Rto generate the signing key, K. Other variations are also considered as being within the scope of the present disclosure.","The signer computer system  may use the key Kto sign messages to be verified by the verifier . For instance, as illustrated, the signer  computes the signature S=HMAC(K, M), where Mis a canonicalized version of a message M, also sent to the verifier. Because the verifier has K, the verifier can independently canonicalize the message M and compute HMAC(K, M) to determine if the result of the computation matches the received signature S.","It should be noted that variations of the process illustrated in , and other processes described herein, while shown as involving multiple use of HMAC functions, multiple different functions may be used to derive keys. For instance, different types of message authentication code (MAC) functions may be used at different times in deriving a key. For example, the output of one type of MAC function may be used as the basis for input into another type of MAC function. Generally, other types of functions may be used instead of and\/or in addition to HMAC functions in a key derivation process and, in various embodiments, it is not necessary to use the same type of function multiple times to derive a key, but different functions may be used each time a function is required.",{"@attributes":{"id":"p-0086","num":"0085"},"figref":["FIG. 15","FIG. 15","FIG. 15"],"b":"1500"},"As shown, a customer key, K, is part of a set of customer long term keys, each of which may be keys used by a customer for a period of time, such as until the customer updates the key, is assigned a new key, or otherwise changes the key. The keys may also be used indefinitely by one or more customers. The customer key, K, is used to derive one or more region keys, such as in a manner illustrated above. For example, as illustrated in , two region keys may be generated, such as by computing HMAC(K, USA-E-1) and HMAC(K, USA-N-1), where USA-E-1 and USA-N-1 are identifiers of respective regions. Similarly, the region keys may be used to derive date keys whose validity may be restricted by the date used to encode the date keys. Each of the date keys may be used to derive service keys, such as in a manner described above.","In this manner, in various embodiments, the service keys may be used with respective services only on the date and in the regions used to encode the keys. New date keys may be generated for each day, whereas region keys and customer long term keys may be generated less often. Multiple restriction key derivation such as illustrated in  and elsewhere in the present disclosure provides numerous advantages. For example, by deriving the key in the manner described in connection with  if a signing key is compromised (e.g. maliciously obtained by a third party), the security breach is limited to a particular region, on a particular day, and in connection with a particular service. Other services would remain unaffected. Similar advantages are applicable in other ways that keys may be derived.",{"@attributes":{"id":"p-0089","num":"0088"},"figref":["FIG. 16","FIG. 16","FIG. 16","FIG. 16"],"b":"1600"},{"@attributes":{"id":"p-0090","num":"0089"},"figref":["FIG. 17","FIG. 17"],"b":"1700"},"As discussed, various techniques of the present disclosure allow for a novel way of generating sessions. A session may be a period of time for which a set of one or more actions are allowed, where expiration (or other termination) of the session causes the set of one or more actions to be disallowed.  is a flowchart showing an illustrative example of a process  for initiating a session, in accordance with at least one embodiment. The process  may be performed by any suitable computing device or collectively by any suitable collection of computing devices. For example, the process  may be performed by a client device of a customer of a computing resources provider. As another example, in another embodiment, referring to , one of the services of a fault zone may be a session service and one or more computing devices participating in providing the service may perform the process .","Returning to , in an embodiment, the process  includes obtaining  a key, K. The key K may be any suitable key, such as a key derived using other keys, such as in a manner described above. For example, the key K may have been propagated to a computing device participating in performance of the process . At some point (such as upon obtaining the key K, as illustrated in the Figure), in an embodiment, a request to initiate a session may be received . The request may be an electronic request, such as described above. In addition, the request, in an embodiment, is signed and verified using various techniques of the present disclosure. Also, the request may be a different request depending on a particular environment used to implement the process . For example, if the process  is performed by a client device (such as a customer device of a customer of a computing resources provider) to generate a session, the request to initiate the session may be received by a module of the client device.","In an embodiment, session parameters for the session are determined . The session parameters may be information that indicates one or more restrictions on the session being generated. Example parameters include, but are not limited to, duration, identifiers of acceptable users of a session key to be generated, one or more services with which the session key to be generated is usable, restrictions on actions that may be performed using the session key, any of the restrictions described above, and others. The parameters may be encoded electronically according to predefined formatting requirements to ensure that computations involving a session key to be generated are consistent. For example, dates may be required to be encoded in the format YYYYMMDD. Other parameters may have their own formatting requirements. In addition, determining the session parameters may be performed in various ways. For example, the parameters may be default parameters for a session, such that a session key is only usable for a range of actions permitted to the requestor of the session initiation and for a predefined period of time (such as a twenty-four hour period). As another example, parameters may be provided as part of or otherwise in connection with the received request. For example, the parameters may be generated according to user input from the requestor and encoded according to a predefined schema.","In an embodiment, once the parameters are determined, the parameters are used to compute  a session key, K. Computing the session key Kmay be performed in numerous ways. For example, in one embodiment, the session key Kmay be computed as (or otherwise based at least in part on)\n\nHMAC(,Session_Parameters)\n\nwhere Session_Parameters is an encoding of the parameters that were determined . Session_Parameters may be encoded in a predefined manner that ensures for computational consistency. The session key Kmay also be computed in other ways, such as in a manner described below in connection with .\n","Once the session key Kis computed , in an embodiment, the session key Kis provided for use. Providing the session key may be performed in numerous ways in various embodiments. For example, the session key may be provided to a module of the requestor to enable the requestor to sign messages with the session key. The session key may also be provided over a network to another device to enable the other device to sign messages with the session key. For example, the session key may also be provided to a delagatee for which the session is initiated. For instance, the requestor may have specified a delegatee in or otherwise in connection with the request to initiate the session. The session key may be provided electronically according to information provided by the requestor (i.e. delegator), such as an electronic mail or other electronic address.","As noted,  shows an illustrative example of a process  that may be used to generate a signature, in accordance with an embodiment. The process  may be performed by one or more computing devices, such as one or more computing devices performing the process  described above in connection with . The process , as illustrated in , includes receiving session parameters, such as described above. With the session parameters having been obtained, in an embodiment, an intermediate key, Kis computed  as:\n\n=HMAC(),\n\nwhere Kmay be the key K in the description of  for the first computation of K, and Pis the iparameter of the session parameters. The session parameters may be ordered according to a predetermined ordering to ensure computational consistency of the key signature.\n","In an embodiment, a determination is made  whether there are additional parameters to be used in generating the session key. If there are additional parameters, in an embodiment, the index i is increased  by one and Kis again computed . If, however, it is determined that there are no additional parameters, then Kis set  to the value of K",{"@attributes":{"id":"p-0098","num":"0097"},"figref":["FIG. 20","FIG. 20","FIG. 1"],"b":["2000","2000","2000","2000","2000"],"sub":["S","S"]},"In an embodiment, a request R is generated . The request R may be a message, such as described above. The request R is then canonicalized , in an embodiment, and a signature is computed  from the canonicalized message, such as by computing the signature as (or otherwise based at least in part on) HMAC(K, R). Upon generation of the signature, the signature S and the request R are provided . For example, as discussed above, the signature S and request R may be provided electronically to an interface of a computer system that participates in managing requests and verifying signatures. The signature S and request R, as with signatures and messages in general, may be provided together in a single communication, in separate communications, or collectively by multiple communications. Other information may also be provided in connection with the signature S and request R. For instance, identification information may be provided to enable a verifier to select a proper key for generating a signature with which to verify the received signature. The identification may be, for instance, an identifier of a key that should be used in generating a signature for comparison. Other information may also be provided and used, as appropriate in the various embodiments.",{"@attributes":{"id":"p-0100","num":"0099"},"figref":["FIG. 21","FIG. 12"],"b":["2100","2100","2102"],"sub":"S"},"In an embodiment, the received request R is canonicalized to form R, such as in a manner described above. It should be noted that, as with other processes described herein, variations are possible. For example, a computer system performing a variation of the process  (or another process) may simply receive the canonicalized message and canonicalization may be performed by another computing device. Returning to the description of , a signature S\u2032 is computed as (or otherwise based at least in part on) HMAC(K, R). The computed signing key S\u2032 is compared  with the received signature S to determine whether the two signatures are equivalent. If the two signatures are determined to not be equivalent, the session is determined  to be unvalidated and appropriate action, such as denial of the request, may be taken. If the two signatures are determined to be equivalent, the session is validated  and appropriate action, such as granting access to one or more computing resources, may be taken.","Techniques of the present disclosure, as mentioned, may be used to allow delegation of authority.  is a flowchart showing an illustrative example of a process  for delegating authority in accordance with at least one embodiment. The process  may be performed by a computing device, such as a computing device of a user attempting to delegate access to one or more computing resources, or a computing device of a computing resource provider, or any suitable computing device. As illustrated in the figure, the process  includes obtaining  a session key K. The obtained session key Kmay be obtained in any suitable way, such as a manner in which keys described above are described as being obtained. Further, the session key may be a key that was generated as part of a process to delegate access to one or more computing resources. For example, the session key may have been generated by performing the process , or a variation thereof.","In an embodiment, session parameters are determined . The session parameters may be determined in any suitable way, such as described above in connection with . With the session parameters determined , a new session key Kmay be generated, such as described above, including as described above in connection with . Once generated, the new session key may be provided to a delegatee. For example, the session key may be sent in an electronic message to the delegatee. The session key may be provided directly or indirectly to the delegatee. For example, the session key may be given to the delegator and the delegator may be responsible for providing the session key to one or more delegatees. Other information may also be provided to the delegatee. For instance, the session parameters may be provided to the delegatee to enable the delegatee to provide the session parameters with signatures, thereby enabling a recipient (e.g. verifier) of the session parameters to generate expected signatures to verify if the provided signatures are valid. For instance, the recipient may use the parameters to generate a session key from a secret credential or a key derived therefrom and use that session key to generate a signature for a canonicalized version of a corresponding signed message. Generally, the parameters may be made available to the recipient of a signature in any suitable manner to enable the recipient to verify message signatures and the delegatee does not necessarily need access to the parameters if the recipient has access to the parameters independent of the delegatee.",{"@attributes":{"id":"p-0104","num":"0103"},"figref":"FIG. 23","b":["2300","2302","2304","2304","2306","2304","2306","2308"]},"Thus, in this example, the original delegator  submits a delegation request to a session-based authentication service  which may be a service of a fault zone, as described above. In response, in an embodiment, the session-based authentication service generates and provides a session key to the delegator , such as described above in connection with . The delegator  then, in an embodiment, provides the session key that it received from the session-based authentication service  to the delegatee . The delegatee  may provide the session key to another delegatee . In this manner the delegatee  would receive the scope of privileges received by the delegatee  that would be the same as the scope of the privileges provided to the delegatee .","However, also illustrated in , the delegatee  may submit a delegation request to the session-based authentication service  and receive a different session key that had been generated by the session-based authentication service  in response to the delegation request. The delegatee  may provide this new session key to the next delegatee . The next delegatee  may provide the session key to yet another delegatee, or as described above may also submit a delegation request to the session-based authentication service  which would then generate a session key and provide the session key to the delegatee  that submitted the delegation request. As indicated in , this may continue and one or more of the delegatees may attempt to use a session key that he or she has received.","In this particular example, a delegatee  provides the session key to a computing resource  in connection with a request. As above, the request may include the session key although the session key may be provided separately from the request. The computing resource  may be any of the computing resources described above or, generally, any computing resource. A policy management service  may include a verifier, such as described above, and may, upon request of the computing resource, validate requests. The computing resource  and policy management service  may also be a single component, although illustrated separately in . Further, while  shows a single session-based authentication service  being used to generate session keys, various embodiments may utilize different session-based authentication services.","As noted above, numerous variations in addition to the illustrative examples provided herein are considered as being within the scope of the present disclosure.  shows a diagram  representing an illustrative example of a manner in which keys may be derived using keys from multiple authorities, in accordance with an embodiment. In , a customer key, K, is from a set of customer keys maintained by a computing resource provider. As with embodiments described above, while  discussed an illustrative example in connection with a computing resource provider, other variations are considered as being within the scope of the present disclosure.","In , a set of authority keys are maintained, where each authority key corresponds to a different domain of authority. Each authority key derived from the customer key Kmay be, for example, propagated to different fault zones, such as described above. The fault zones may be, for instance, data centers in different political jurisdictions. It should be noted, however, that while  shows each divided authority key having been derived from a single customer key, K, variations are possible. For example, the divided authority keys may be independently derived. As another example, one or more divided authority keys may be derived from a common key, one or more others may be derived from another common key, and the like.","In an embodiment, multiple authorities are able to combine authority to allow access to one or more computing resources. For example, as illustrated in , subsets of divided authority keys may be used to derive other keys. For example, as illustrated in , two authority keys, labeled Auth and Auth, are used to derive a merged authority key. To derive the merged authority key, in an embodiment, a value of HMAC(f(Auth, Auth), R) is computed, where R is some restriction, such as described above. In this example, f is a function of divided authority keys, and may be more than two-dimensional. For instance, the three divided authority keys, Auth, Auth, and Auth are used, as illustrated in , in a function f(Auth, Auth, Auth) to compute the merged authority key as (or otherwise based at least in part on) HMAC(f(Auth, Auth, Auth), R).","Numerous variations of constructing keys from different authorities are considered as being within the scope of the present disclosure. For example, an authority may generate (or have generated) a key (K) using various embodiments of the present disclosure. Each authority Kmay correspond to a partial key seed, which may be a publicly available encoding (or encoding otherwise available to a message signor and signature verifier) of restrictions used to generate its K. For example, a partial key seed may be (K1\/20110810\/usa-east-1\/DDS, K2\/20110810\/org_name\/jpl\/DDS), where each string between slashes is a restriction. Such an encoding of information may be referred to as a key path. As a more general example, a partial key seed may be X\/ . . . \/X, where each X(for i between 1 and n) corresponds to a parameter, such as a parameter described above. The partial key seeds from the applicable authorities may be encoded as an n-tuple, referred to as a key seed. An n-tuple for the example immediately above may be (spec, spec, . . . , spec), where each entry is a key path for a corresponding K. It should be noted that the key seed (and\/or key path) encodes the precise key use (full restriction among all authorized keys) that the key holder is authorizing by producing a signature\/key. Further, with partial key seeds available to both message signors and signature verifiers, arbitrary ordering of the parameters used to generate keys and signatures is possible since, for example, a message signor has information that specifies the order the parameters were used to generate a signing key and can, therefore, generate the signing key and message accordingly.","A value for HMAC(Kspec, key-seed) may then be obtained or computed for each of the applicable authorities, that is, the authorities for which a key is to be generated. This value may be computed by a client obtaining a signing key to sign messages or may be computed by another device and subsequently provided to the client, in various embodiments. Each of these values may be referred to as partial keys, for the purpose of the following discussion. The semantics of each of these partial keys, in an embodiment, are that they are valid only when combined with the below construction (and certain variations of the below construction) and, when combined, form the intersection of specializations encoded in the key seeds.","To generate a signing key to sign a message, a value for\n\n=HMAC(partial_key+ . . . +partial_key,key-seed)\n\nwhere \u201c+\u201d may refer to some associative operation on partial keys that surround the symbol in the formula. The \u201c+\u201d symbol may be, for example, an exclusive OR (XOR) operation on bits comprising the partial keys. The \u201c+\u201d symbol may also refer to some other suitable operation or function.\n","To verify a signature used to sign a message, a verifier may obtain each partial key, combine the partial keys as above to form a signing key, sign a received message and compare the result with an expected result to verify the signature, such as discussed above.","The various embodiments further can be implemented in a wide variety of operating environments, which in some cases can include one or more user computers, computing devices, or processing devices which can be used to operate any of a number of applications. User or client devices can include any of a number of general purpose personal computers, such as desktop or laptop computers running a standard operating system, as well as cellular, wireless, and handheld devices running mobile software and capable of supporting a number of networking and messaging protocols. Such a system also can include a number of workstations running any of a variety of commercially-available operating systems and other known applications for purposes such as development and database management. These devices also can include other electronic devices, such as dummy terminals, thin-clients, gaming systems, and other devices capable of communicating via a network.","Most embodiments utilize at least one network that would be familiar to those skilled in the art for supporting communications using any of a variety of commercially-available protocols, such as TCP\/IP, OSI, FTP, UPnP, NFS, CIFS, and AppleTalk. The network can be, for example, a local area network, a wide-area network, a virtual private network, the Internet, an intranet, an extranet, a public switched telephone network, an infrared network, a wireless network, and any combination thereof.","In embodiments utilizing a Web server, the Web server can run any of a variety of server or mid-tier applications, including HTTP servers, FTP servers, CGI servers, data servers, Java servers, and business application servers. The server(s) also may be capable of executing programs or scripts in response requests from user devices, such as by executing one or more Web applications that may be implemented as one or more scripts or programs written in any programming language, such as Java\u00ae, C, C# or C++, or any scripting language, such as Perl, Python, or TCL, as well as combinations thereof. The server(s) may also include database servers, including without limitation those commercially available from Oracle\u00ae, Microsoft\u00ae, Sybase\u00ae, and IBM\u00ae.","The environment can include a variety of data stores and other memory and storage media as discussed above. These can reside in a variety of locations, such as on a storage medium local to (and\/or resident in) one or more of the computers or remote from any or all of the computers across the network. In a particular set of embodiments, the information may reside in a storage-area network (\u201cSAN\u201d) familiar to those skilled in the art. Similarly, any necessary files for performing the functions attributed to the computers, servers, or other network devices may be stored locally and\/or remotely, as appropriate. Where a system includes computerized devices, each such device can include hardware elements that may be electrically coupled via a bus, the elements including, for example, at least one central processing unit (CPU), at least one input device (e.g., a mouse, keyboard, controller, touch screen, or keypad), and at least one output device (e.g., a display device, printer, or speaker). Such a system may also include one or more storage devices, such as disk drives, optical storage devices, and solid-state storage devices such as random access memory (\u201cRAM\u201d) or read-only memory (\u201cROM\u201d), as well as removable media devices, memory cards, flash cards, etc.","Such devices also can include a computer-readable storage media reader, a communications device (e.g., a modem, a network card (wireless or wired), an infrared communication device, etc.), and working memory as described above. The computer-readable storage media reader can be connected with, or configured to receive, a computer-readable storage medium, representing remote, local, fixed, and\/or removable storage devices as well as storage media for temporarily and\/or more permanently containing, storing, transmitting, and retrieving computer-readable information. The system and various devices also typically will include a number of software applications, modules, services, or other elements located within at least one working memory device, including an operating system and application programs, such as a client application or Web browser. It should be appreciated that alternate embodiments may have numerous variations from that described above. For example, customized hardware might also be used and\/or particular elements might be implemented in hardware, software (including portable software, such as applets), or both. Further, connection to other computing devices such as network input\/output devices may be employed.","Storage media and computer readable media for containing code, or portions of code, can include any appropriate media known or used in the art, including storage media and communication media, such as but not limited to volatile and non-volatile, removable and non-removable media implemented in any method or technology for storage and\/or transmission of information such as computer readable instructions, data structures, program modules, or other data, including RAM, ROM, EEPROM, flash memory or other memory technology, CD-ROM, digital versatile disk (DVD) or other optical storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other medium which can be used to store the desired information and which can be accessed by the a system device. Based on the disclosure and teachings provided herein, a person of ordinary skill in the art will appreciate other ways and\/or methods to implement the various embodiments.","The specification and drawings are, accordingly, to be regarded in an illustrative rather than a restrictive sense. It will, however, be evident that various modifications and changes may be made thereunto without departing from the broader spirit and scope of the invention as set forth in the claims.","Other variations are within the spirit of the present disclosure. Thus, while the disclosed techniques are susceptible to various modifications and alternative constructions, certain illustrated embodiments thereof are shown in the drawings and have been described above in detail. It should be understood, however, that there is no intention to limit the invention to the specific form or forms disclosed, but on the contrary, the intention is to cover all modifications, alternative constructions, and equivalents falling within the spirit and scope of the invention, as defined in the appended claims.","The use of the terms \u201ca\u201d and \u201can\u201d and \u201cthe\u201d and similar referents in the context of describing the disclosed embodiments (especially in the context of the following claims) are to be construed to cover both the singular and the plural, unless otherwise indicated herein or clearly contradicted by context. The terms \u201ccomprising,\u201d \u201chaving,\u201d \u201cincluding,\u201d and \u201ccontaining\u201d are to be construed as open-ended terms (i.e., meaning \u201cincluding, but not limited to,\u201d) unless otherwise noted. The term \u201cconnected\u201d is to be construed as partly or wholly contained within, attached to, or joined together, even if there is something intervening. Recitation of ranges of values herein are merely intended to serve as a shorthand method of referring individually to each separate value falling within the range, unless otherwise indicated herein, and each separate value is incorporated into the specification as if it were individually recited herein. All methods described herein can be performed in any suitable order unless otherwise indicated herein or otherwise clearly contradicted by context. The use of any and all examples, or exemplary language (e.g., \u201csuch as\u201d) provided herein, is intended merely to better illuminate embodiments of the invention and does not pose a limitation on the scope of the invention unless otherwise claimed. No language in the specification should be construed as indicating any non-claimed element as essential to the practice of the invention.","Preferred embodiments of this disclosure are described herein, including the best mode known to the inventors for carrying out the invention. Variations of those preferred embodiments may become apparent to those of ordinary skill in the art upon reading the foregoing description. The inventors expect skilled artisans to employ such variations as appropriate, and the inventors intend for the invention to be practiced otherwise than as specifically described herein. Accordingly, this invention includes all modifications and equivalents of the subject matter recited in the claims appended hereto as permitted by applicable law. Moreover, any combination of the above-described elements in all possible variations thereof is encompassed by the invention unless otherwise indicated herein or otherwise clearly contradicted by context.","All references, including publications, patent applications, and patents, cited herein are hereby incorporated by reference to the same extent as if each reference were individually and specifically indicated to be incorporated by reference and were set forth in its entirety herein."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0005","num":"0004"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0006","num":"0005"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0007","num":"0006"},"figref":["FIG. 3","FIG. 2"]},{"@attributes":{"id":"p-0008","num":"0007"},"figref":["FIG. 4","FIG. 3"]},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 13"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 14"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 15"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 16"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 17"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 18"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 19"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 20"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 21"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 22"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 23"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 24"}]},"DETDESC":[{},{}]}
