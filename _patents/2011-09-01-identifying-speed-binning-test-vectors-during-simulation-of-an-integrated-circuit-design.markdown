---
title: Identifying speed binning test vectors during simulation of an integrated circuit design
abstract: A method for automated functional coverage includes creating event monitors that monitor signals and events within an IC design based upon timing information in a timing report generated by a timing analysis tool. In particular, speed paths that have a higher timing criticality may be selected for monitoring during simulations of the IC design. In addition, if an event is detected on a speed path, the endpoint of that speed path may be forced to a failing value, and the simulation may be resumed. At some point later in the simulation, the simulation results may be checked to determine if a failure that corresponds to the failing value was observed at a structure that would be visible on a manufactured version of the IC design. If the failure is visible, the test vectors that were used may be identified and captured for use in production testing.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08392860&OS=08392860&RS=08392860
owner: Apple Inc.
number: 08392860
owner_city: Cupertino
owner_country: US
publication_date: 20110901
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY OF THE EMBODIMENTS","DETAILED DESCRIPTION"],"p":["1. Technical Field","This disclosure relates to integrated circuit (IC) design, and more particularly to testing of integrated circuit logic designs.","2. Description of the Related Art","During the IC design cycle, the design must be validated or verified to ensure that the design functions the way that it was intended to function. One way to verify the design is to perform some level of verification. Accordingly, verification includes providing some stimulus to the IC design, monitoring the results during simulation, and determining whether the stimulus exercised the IC design adequately to determine whether or not the design does function as it was designed to. Accordingly, the concept of coverage arises. Coverage refers to the concept of a verification engineer or other designer judging the stimulus applied to a system to verify the IC design.","There are several kinds of coverage available, some of which may be easy to automate. For example, line, path, toggle, and finite state machine coverage may be easily automated. In addition, exhaustive coverage which may test every possible state may be possible on small designs. However, as designs have increased in size and complexity, the number of possible states to cover can approach infinity. Thus, another coverage type may be more appropriate. Functional coverage is a more sophisticated type of coverage that usually involves having knowledge of the architecture of the design so that a relationship between signals can be defined and used to develop the desired coverage. Thus, of the nearly infinite number of states, the states that are the most interesting are selected. However, one drawback of obtaining adequate functional coverage is that the selection process can be both time and resource intensive.","In addition, even if a given internal state failure can be detected during simulation, these internal states may not be architecturally visible during testing of the manufactured device. Thus, identifying test vectors that can propagate and detect these internal failures at the architectural level can be difficult and time consuming.","Various embodiments of a method for providing automated functional coverage of an integrated circuit (IC) design are disclosed. Broadly speaking a method is contemplated in which event monitors that monitor signals and events within an IC design are created based upon timing information in a timing report that is generated by a timing analysis tool. In particular, speed paths in the report that have a higher timing criticality may be selected for monitoring during simulations of the IC design. In addition, if an event is detected on a speed path, the endpoint of that speed path may be forced to a failing value, and the simulation may be resumed. When the simulation is complete or at some point later, the simulation results may be checked to determine if a failure that corresponds to the failing value was observed at a structure that would be visible on an IC device that is manufactured from the IC design. If the failure is visible, then the test vectors that were used may be identified and captured for use in production testing as desired.","Accordingly, in one embodiment, the method includes receiving a timing analysis report generated from an integrated circuit (IC) design. The timing analysis report includes timing information corresponding to an arrival time of signals conveyed on signal paths in the IC design. The method may also include generating one or more event monitors based upon the timing information in the timing analysis report. Each event monitor may determine whether a specified event occurred on a respective signal path during a simulation of the IC design. The method may also include simulating the IC design using a simulation stimulus provided by a test generator on a simulation test bench. The method may further include forcing a value corresponding to a failure condition on an endpoint of a given signal path during the simulation of the IC design in response to determining that the specified event occurred on the given signal path.","Specific embodiments are shown by way of example in the drawings and will herein be described in detail. It should be understood, however, that the drawings and detailed description are not intended to limit the claims to the particular embodiments disclosed, even where only a single embodiment is described with respect to a particular feature. On the contrary, the intention is to cover all modifications, equivalents and alternatives that would be apparent to a person skilled in the art having the benefit of this disclosure. Examples of features provided in the disclosure are intended to be illustrative rather than restrictive unless stated otherwise.","As used throughout this application, the word \u201cmay\u201d is used in a permissive sense (i.e., meaning having the potential to), rather than the mandatory sense (i.e., meaning must). Similarly, the words \u201cinclude,\u201d \u201cincluding,\u201d and \u201cincludes\u201d mean including, but not limited to.","Various units, circuits, or other components may be described as \u201cconfigured to\u201d perform a task or tasks. In such contexts, \u201cconfigured to\u201d is a broad recitation of structure generally meaning \u201chaving circuitry that\u201d performs the task or tasks during operation. As such, the unit\/circuit\/component can be configured to perform the task even when the unit\/circuit\/component is not currently on. In general, the circuitry that forms the structure corresponding to \u201cconfigured to\u201d may include hardware circuits. Similarly, various units\/circuits\/components may be described as performing a task or tasks, for convenience in the description. Such descriptions should be interpreted as including the phrase \u201cconfigured to.\u201d Reciting a unit\/circuit\/component that is configured to perform one or more tasks is expressly intended not to invoke 35 U.S.C. \u00a7112, paragraph six, interpretation for that unit\/circuit\/component.","The scope of the present disclosure includes any feature or combination of features disclosed herein (either explicitly or implicitly), or any generalization thereof, whether or not it mitigates any or all of the problems addressed herein. Accordingly, new claims may be formulated during prosecution of this application (or an application claiming priority thereto) to any such combination of features. In particular, with reference to the appended claims, features from dependent claims may be combined with those of the independent claims and features from respective independent claims may be combined in any appropriate manner and not merely in the specific combinations enumerated in the appended claims.","Turning now to , a conceptual diagram depicting one embodiment of a process for verifying functional coverage of the logic in an integrated circuit (IC) design during simulation is shown. The IC design under test  is simulated using a test bench . The test bench  may apply to the reference IC design under test  a simulation stimulus generated by the test generator . The stimulus is typically a test pattern representing a predetermined group of signals and or instructions, for example. The test bench  may also monitor and record the results of the simulation using the monitors  and the coverage tool .","In various embodiments, the IC design under test  may be represented in a number of different ways. For example, the IC design may be represented as a register transfer level (RTL) representation, a gate-level netlist , and a transistor level netlist , among others. Accordingly, because the IC design under test  is typically instantiated into the test bench , dependent on what level the IC design under test  is represented, the test bench  that is used to simulate a given design may include different levels of logic depending on the level of hierarchy of the design within the context of the system. More particularly, if for example the IC design under test  is a processor, then test bench performs the functionality and provides the stimulus of the system in which the processor may reside. Likewise, if the IC design under test  were a functional unit within a processor, then the test bench  includes system logic and some of the logic of a processor, and the test bench would now include functionality and stimulus of the system in which the processor resides, as well as the functionality and stimulus of the processor that interfaces to the functional unit.","The test bench  may use monitors  or \u201cevent monitors\u201d to identify and indicate whether specific events have occurred. More particularly, a monitor  may \u201clook at\u201d any nodes or signals that are visible in the IC design under test  and indicate whether or not a signal or set of signals matches conditions that have been set up in the monitor. Monitors  may be implemented in a variety of ways. In one embodiment, monitors  may be implemented in program instructions that are part of the test bench . In other embodiments, monitors  may be implemented as instructions that are called by the test bench  using, for example, an application programming interface (API) or the like. The use of event monitors will be described in greater detail below in conjunction with the description of .","The test generator tool  is configured to generate test patterns for use as simulation stimulus during simulation of the IC design under test . In one embodiment, the test generator tool  may be a directed random test generator (DRTG). The DRTG may produce pseudo random test patterns. However, the DTRG may be biased in various ways to produce test patterns that have a better chance of exercising specific functionality. Accordingly, test generator tool  may have one or more adjustments available that may provide a level of test pattern tuning.","In one embodiment, the coverage tool  may gather simulation results from the test bench , including results from the monitors . As described in greater detail below, these results may be used to manipulate the test generator tool  to produce patterns that may more effectively exercise a specific function of the design under test .","During the functional coverage simulations of the IC design under test , it is sometimes difficult to determine if the test patterns are exercising critical areas of the IC design. Accordingly, when performing DRTG-based simulations it would be helpful to know what parts of the design must be exercised. Thus an insight into where problems may lie may be gained by understanding how a logic circuit is created. More particularly, signal paths that have a great deal of logic complexity packed into them may be good candidates for problems. It is these types of circuits that may be prone to errors.","One way to identify such circuits and\/or signal paths is through the use of static timing analysis. Specifically, a signal path or timing path that includes a lot of complex logic may have a higher likelihood of having issues meeting timing. Thus, a timing report generated through timing analysis will provide timing information for all timing paths. The timing information usually includes the logic that is included in each path along with the arrival time of a signal as it propagates through the timing path to the endpoint. In addition, the timing information includes the slack for the timing path. The slack typically refers to the amount of time positive or negative that a signal takes to arrive at a node or device as referenced to a specified arrival time (e.g., a setup or hold time). Timing paths that have some predetermined amount of slack may be identified as critical speed paths. These speed paths then may be targeted for checking during simulation. Thus, the speed paths may be selected based upon their timing criticality, or how close the given speed path is to failing timing.","As described further below, monitors  may be generated based upon the timing information from the timing report. These event monitors may be generated to look specifically at selected speed paths and to indicate whether the selected speed paths have been exercised.","Referring to , a conceptual diagram depicting one embodiment of a design flow for generating event monitors for use during simulation of an IC design is shown. In the IC design flow, a synthesis tool  may synthesize a circuit model  such as a synthesizable RTL model, for example, into a gate level netlist , using a particular device library . In one embodiment, the netlist  may be back annotated with delay information. A timing analysis tool  may perform timing analysis on the netlist , and generate a timing report .","As described above, the timing report  may include a listing of signal or timing paths in the netlist . Along with each path, the timing report  may include the timing slack for the entire path at the endpoint as well as the slack at each node or device.","In one embodiment, a monitor generation tool  may generate event monitors  from the information in the timing report . More particularly, the monitor generation tool  may identify some number of the worst-case speed paths in the timing report , and generate an event monitor for each of the speed paths. In one embodiment, the monitor generation tool  may identify the worst-case speed paths based upon some predetermined worst-case slack value or worst-case timing criticality. The event monitors  may then be used during subsequent simulation runs to determine whether the logic in these worst-case speed paths is being exercised. It is noted that the speed paths may be single-cycle (i.e., a signal propagates from a signal path starting point to an endpoint in one clock cycle) paths or multi-cycle (i.e., a signal propagates from a signal path starting point to an endpoint in more than one clock cycle) paths.","In , a flow diagram describing a method for verifying functional coverage of the logic in an IC design is shown. Referring collectively to  through , and beginning in block  of , a timing analysis is run on the IC design and a timing report is generated. Some number of timing paths having a slack that is less than some predetermined threshold value may be selected from the timing report (block ). The monitor generation tool  generates event monitors that may determine whether a particular signal or set of signals satisfies a given condition (i.e., an event) during simulation (block ). It is noted that in one embodiment, the monitor generation tool  may be an interactive tool that generates the event monitors  with the interaction of a user. However, in other embodiments, the monitor generation tool  may automatically generate the event monitors  without any user input.","The IC design under test is then simulated (block ). During simulation the event monitors  record event occurrence information by logging the event occurrences and the coverage tool  may gather the monitor and simulation results (block ). An exemplary speed path is shown in  and code segments used to monitor the speed path of  is shown below.","Referring to , an exemplary block diagram of one embodiment of a logic circuit including a speed path is shown. The logic diagram  includes a two-input AND-gate  coupled to one input of a two-input OR-gate , and a two-input AND-gate  coupled to the other input of the OR-gate . If we assume that inputs A through A are driven by flip-flops clocked by some clock_ (not shown), and the C feeds a flip-flop (not shown) that is also clocked by clock_, then the output \u2018C\u2019 of the OR-gate  may be the endpoint of this particular \u201cspeed path.\u201d Accordingly, an event monitor could be created to monitor C during simulation to determine if C transitions under the appropriate conditions. More particularly, an event monitor may be created that evaluates the logic states in the signal path of interest. For example, in the RTL code segment shown below, the monitor code may evaluate C, but also A, A, and B.","The following code pseudocode segment corresponds to an RTL representation of the circuit shown in .","signal A, A, A, A;","signal B, B;","signal C;","B=(A & A);","B=(A & A);","C=(B|B);","Based on the speed path assumption made above, also assume that a timing report that identifies some number of worst-case speed paths identifies signal C as one of the signals that is closest to failing timing.","An exemplary pseudocode timing report might look like the following for C:","signal C has 5 picoseconds of slack; negedge clock, posedge A, posedge B, posedge C, posedge clock_","Thus, the timing report indicates that the logic between clock edges (i.e., the path that went from A\u2192B\u2192C with the state of A being high, B being high, and C being high) is the path that has only 5 picoseconds of slack.","What may also be inferred from this is that signal A needed to be a high logic value so that the output B could be high. What may also be inferred is that signal B had to be a low logic value because if it was high, the output C would be high regardless of the value of B. In various embodiments, timing analysis tools may be set up to provide timing reports that provide this information. In such embodiments, the appropriate information may be extracted automatically to create corresponding monitor code. In other embodiments, the needed values of the other signals to sensitize the critical path through the logic may be inferred upon inspection.","The following is a pseudocode example of an event monitor to detect the speed path C.",{"@attributes":{"id":"p-0048","num":"0047"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"14pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},{},"monitor detect_speed_path",{}]},{"entry":[{},{},"{",{}]},{"entry":[{},{},"\/\/ define the signals",{}]},{"entry":[{},{},"signal A1, A2;",{}]},{"entry":[{},{},"signal B1, B2;",{}]},{"entry":[{},{},"signal C0;",{}]},{"entry":[{},{},"signal clock1;",{}]},{"entry":[{},{},"\u2003\/\/ attach the signals into the design",{}]},{"entry":[{},{},"\u2003A1 = attach(\u201ctop.A1\u201d);",{}]},{"entry":[{},{},"\u2003A2 = attach(\u201ctop.A2\u201d);",{}]},{"entry":[{},{},"\u2003B1 = attach(\u201ctop.B1\u201d);",{}]},{"entry":[{},{},"\u2003B2 = attach(\u201ctop.B2\u201d);",{}]},{"entry":[{},{},"\u2003\/\/ A3 and A4 are don't cares, we just",{}]},{"entry":[{},{},"\u2003\/\/ need to ensure that B2 is low",{}]},{"entry":[{},{},"\u2003C0 = attach(\u201ctop.C0\u201d);",{}]},{"entry":[{},{},"\u2003clock_l = attach(\u201ctop.clock_1\u201d);",{}]},{"entry":[{},{},"\u2003\/\/ wait for clock 1 to toggle",{}]},{"entry":[{},{},"\u2003wait (posedge(clock_1));",{}]},{"entry":[{},{},"\u2003\/\/ See if the path C0 is hit",{}]},{"entry":[{},{},"\u2003if (((A1.get_value( ) == 1) && (A2.get_value( ) == 1)))",{}]},{"entry":[{},{},"\u2003\u2003{",{}]},{"entry":[{},{},"\u2003\u2003\/\/ A1 and A2 are high",{}]},{"entry":[{},{},"\u2003\u2003if ((B1.get_value( ) == 1) && (B2.get_value( ) == 0))",{}]},{"entry":[{},{},"\u2003\u2003\u2003{",{}]},{"entry":[{},{},"\u2003\u2003\u2003\u2003\u2003\u2003\/\/ the or gate is also in the right state - ",{}]},{"entry":[{},{},"\u2003\u2003\u2003\u2003\u2003\u2003the output of the top AND gate is",{}]},{"entry":[{},{},"\u2003\u2003\u2003\u2003\u2003\u2003high, the bottom one is low",{}]},{"entry":[{},{},"\u2003\u2003\u2003\u2003if (C0.get_value( ) == 1)",{}]},{"entry":[{},{},"\u2003\u2003\u2003\u2003{",{}]},{"entry":[{},{},"\u2003\u2003\u2003\u2003\/\/ the critical path is hit, log the event",{}]},{"entry":[{},{},"\u2003\u2003\u2003\u2003log_event(detect_speed_path);",{}]},{"entry":[{},{},"\u2003\u2003\u2003\u2003}",{}]},{"entry":[{},{},"\u2003\u2003\u2003}",{}]},{"entry":[{},{},"\u2003\u2003\u2003\u2003\u2003}",{}]},{"entry":[{},{},"\u2003\u2003\/\/ take no action, no event",{}]},{"entry":[{},{},"\u2003}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]}}}}},"The above monitor code is configured to detect and log the event in which the speed path from A\u2192B\u2192C is sensitized as described above. In one embodiment, the event logs may be gathered by the coverage tool .","Referring back to , in one embodiment, the coverage tool  may include predetermined coverage parameters. If the coverage exceeds the parameters and is acceptable (block ), the functional coverage simulations are complete (block ). However, if the coverage is not acceptable such as, for example, if the event monitor logs indicate that the speed paths have not been sufficiently exercised, then the coverage tool results may be used to manipulate the test generator tool  as described above. More particularly, the test generator tool  may be adjusted to produce patterns that may exercise specific portions of the IC design under test  (e.g., the logic in the speed paths being monitored) (block ). Once the test generator tool  has been adjusted, the IC design under test  may be simulated again as described above in conjunction with the description of block . This may be an iterative process of simulating and adjusting the generator tool  until a sufficient comfort level that the coverage is adequate is reached.","Turning now to , a conceptual diagram depicting one embodiment of design flow for identifying speed path tests during simulation of an IC design is shown. Similar to the IC design flow shown in , a gate level netlist  may be created by a synthesis tool. A timing analysis tool  may perform timing analysis on the netlist , and generate a timing report . As described above, the timing report  may include a listing of signal or timing paths in the netlist . In addition, in one embodiment, a monitor generation tool  may generate event monitors  from the information in the timing report  as described above. The event monitors  may then be used during subsequent simulation runs to determine whether the logic in these worst-case speed paths is being exercised as described above.","In addition, since the event monitors have access to nodes and signals that are internal to the device and which may not be visible at an architecturally visible structure, test patterns need to exercise the device in a way that makes the failure visible at an architecturally visible structure. For example, to test the IC design once it is fabricated, failures need to be visible on a production tester, or similar testing device. In many cases, these testers only have access to architecturally visible structures such as control, status registers, special test mode registers, input and output pins, etc, of the device.","Accordingly, the information used to create the event monitors that can detect speed path sensitization may also be used to create code to modify a speed path endpoint to force a speed path to a failing value during a remainder of a simulation run. Specifically, in one embodiment, a speed path endpoint modification  may be performed to force a failing value on the endpoint. Once the simulation environment  has been modified to both detect the sensitization of the speed path, and to force a failure of the speed path at an internal node, the simulation results may be checked  to determine if the speed path failure is visible at an architecturally visible point so that a test and\/or test pattern may be identified to check for this failure .","Referring back to , to determine if a failure event detected at C is observable by the simulation environment at an architecturally visible structure, in one embodiment, the monitor code shown above may be modified to force a particular state at C (or any desired node in the general case). More particularly, C may be forced to a logic value of zero for the current cycle of the simulation run once the speed path is detected. If a corresponding failure shows up at an architecturally visible structure during the remainder of the simulation, then the failure at C may be considered to be observable on a manufactured device using a test platform. As described further below in conjunction with the description of , this type of speed path testing may be useful when testing manufactured devices across frequencies to determine which devices can operate at what frequencies. This type of device testing is commonly referred to as speed binning.","In one embodiment, the following pseudocode segment or one that is functionally similar may be added to the above pseudocode segment right after the log_event statement.","if (simulate_speed_path_failure)\n\n","}","In other embodiments, this or a similar pseudocode segment may be a stand-alone segment that may be used after the event monitors are run.","In the above pseudocode segment, a flag (e.g., simulate_speed_path_failure) may be used to determine whether or not to force a value after a speed path detection. In the above example, if the flag is set, then the signal C is forced to a logic value of zero, and simulations may resume.","A flow diagram describing a method for identifying speed path tests for an IC design is shown in . Referring collectively to  through  and beginning in block  of , once the timing analysis is run on the IC design and a timing report is generated, some number of timing paths having a slack that is less than some predetermined threshold value may be selected from the timing report (block ). As described above, the monitor generation tool  generates event monitors that may determine whether a particular signal or set of signals satisfies a given condition (i.e., an event) during simulation. In addition, as described above, the monitor generation tool  may also generate a monitor that may be configured to force a value onto an endpoint of a speed path, once that speed path has been identified as being sensitized. Accordingly, in one particular embodiment, the monitor code may include conditional statements to include the forcing of values on endpoints (block ).","It is noted that as described above, in one embodiment, the monitor generation tool  may be an interactive tool that generates the event monitors  with the interaction of a user. However, in other embodiments, the monitor generation tool  may automatically generate the event monitors  without any user input.","In block  the IC design simulation is started. During simulation the event monitors  record or log event occurrence information. If an event monitor does not detect the event (block ), then no event is detected and the simulation continues to completion (block ). However, if the event monitor detects the event (block ), the monitor may log the event, force a failing value on the endpoint of the speed path that was detected for the current clock cycle, and continue the simulation (block ). As the simulation continues, the coverage tool gathers the monitor and simulation results. If a failure that corresponds to the forced failure appears at an observable point as described above (block ), the test vectors that were used may be captured (block ) and the simulation is complete (block ). These test vectors may be used to create a production device test.","Referring back to block , in one embodiment, the coverage tool  may include predetermined coverage parameters. If a failure that corresponds to the forced failure does not appear at an observable point at the completion of the simulation, the failure is considered to be not observable (block ). As such, different test patterns may be attempted in an effort to cause the failure to be observable depending on a number of factors including the overall test coverage, the nature of the failure, and so on. If more test patterns are going to be run, operation would continue as described above in conjunction with the description of block , otherwise the simulations are complete (block ).","It is noted that as mentioned above, in one embodiment, respective monitors may be created to perform event detection and endpoint force failures. However, in another embodiments, a monitor may include functionality to both detect an event and to force a failure once the event is detected.","Turning to , a block diagram of one embodiment of a system for implementing a tool for performing functional equivalence between a reference IC design and a modified version of the reference IC design is shown. Computer system  includes a plurality of workstations designated A through C. The workstations are coupled together through a network  and to a plurality of storages designated A through C. In one embodiment, each of workstations A-C may be representative of any standalone computing platform that may include, for example, one or more processors, local system memory including any type of random access memory (RAM) device, monitor, input output (I\/O) means such as a network connection, mouse, keyboard, monitor, and the like (many of which are not shown for simplicity).","In one embodiment, storages A-C may be representative of any type of non-transitory computer readable storage device such as hard disk systems, optical media drives, tape drives, ram disk storage, and the like. As such, the program instructions comprising the design tools may be stored within any of storages A-C and loaded into the local system memory of any of the workstations during execution. As an example, as shown in , the test bench tool  and the simulation tool  are shown stored within storage A, while the netlist(s) , circuit design (e.g., behavioral, RTL, etc) , test generation tool , and the coverage tool  are stored within storage C. Further, the monitor generation tool , and the event monitors  are stored within storage B. Additionally, the program instructions may be stored on a portable\/removable storage media. The program instructions may be executed directly from the removable media or transferred to the local system memory of a given workstation  or mass storages  for subsequent execution. As such, the portable storage media, the local system memory, and the mass storages may be referred to as non-transitory computer readable storage mediums. The program instructions may be executed by the one or more processors on a given workstation or they may be executed in a distributed fashion among the workstations, as desired.","In one embodiment, the monitor generation tool  may include program instructions written in any of a variety of programming languages or scripting languages, and which may be executable by a processor to create the event monitors , which depending on the specific implementation may or may not include the endpoint force fail functionality.","It is noted that although the computer system shown in  is a networked computer system, it is contemplated that in other embodiments, each workstation may also include local mass storage. In such embodiments, the program instructions and the results of the design tools may be stored locally. Further, it is contemplated that the program instructions may be executed on a standalone computer such as a personal computer that may include local mass storage and a system memory.","Although the embodiments above have been described in considerable detail, numerous variations and modifications will become apparent to those skilled in the art once the above disclosure is fully appreciated. It is intended that the following claims be interpreted to embrace all such variations and modifications."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 7"}]},"DETDESC":[{},{}]}
