---
title: Rendering a customized list of controls
abstract: Form controls can be reused so that the control can be bound to large volumes of data without adverse performance issues because of a large number of controls. A maximum number of rows of data N that can appear in a form are calculated. A container in memory is created for N+2 rows. The additional two rows are used to store the row after the last displayed row and the row previous to the first displayed row. In response to a user scroll or tab operation, rows within the container are reused. Child controls are hosted by the control and are also reused when the data is scrolled out of view.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08078992&OS=08078992&RS=08078992
owner: Microsoft Corporation
number: 08078992
owner_city: Redmond
owner_country: US
publication_date: 20080918
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["A user interface is a computer program that allows a user to interact with a computer and computer-controlled devices. A graphical user interface or GUI presents graphical icons, visual indicators or graphical elements, sometimes in conjunction with text, labels or text navigation, to represent information and actions available to the user. Instead of offering only text menus, or requiring typed commands, an action is usually performed through direct manipulation of graphical interface elements.","A control is an interface element with which the user interacts, such as a window or a text box. A control provides a single interaction point for the direct manipulation of a particular kind of data. Controls are building blocks for user interfaces. When combined in an application, controls hold the data processed by the application and control the available interactions on the data. Controls are typically objects that are contained within form objects. Each type of control object has its own set of properties, methods, and events that make it suitable for a particular purpose. Controls can frequently be manipulated in a designer and code can be written to add controls dynamically at run time.","Generic controls are often packaged into toolkits. The controls in the toolkits are used by programmers to build graphical user interfaces (GUIs). Most operating systems include a set of customizable controls that a programmer can incorporate into an application. Each type of control generally is defined as a class by object-oriented programming (OOP). Therefore, many controls are derived via class inheritance.","A grid view or a datagrid is a graphical user interface control that presents a tabular view of data. Some toolkits distinguish between a grid and a datagrid. If this is the case, the term datagrid refers specifically to a control that can be linked to a data source such as a database, a web service or any other type of data source with little or no effort on the part of a programmer. One common use of a datagrid is displaying lists of products on a web site or displaying lists of files, such as, for example, in the \u201cDetails\u201d view in Windows XP file managers. Grid views are sometimes referred to as spreadsheet controls because a grid view may visually resemble a spreadsheet application.","Some existing grid-type controls allow a developer to display rows of data. These controls can be bound to very large data sources but doing so may cause severe performance issues because each row of data can itself contain several fields and each field is typically displayed in a separate control. Thus the total number of controls can very quickly add up. For example, if there were 10,000 rows of data in a data source with 20 fields of data in each row, the number of controls created to display this data could be over 200,000.","Large volumes of data can be displayed quickly without creating in memory one row for each and every row of data from the data source, where each row comprises a plurality of controls. Form controls are reused so that large volumes of data can be displayed quickly by creating a scrollable container of at most N+2 rows of forms controls, where N is the number of rows visible on the form at a particular point in time. Rows can be reused when the user scrolls or tabs through the data or when the used activates a page down or page up feature. Fields within a row of data are hosted child controls. Child controls can also be reused.","This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter, nor is it intended to be used to limit the scope of the claimed subject matter.","Overview","A graphical user interface application programming interface (API) is typically included in a managed code framework or environment to enable access to native code interface elements (controls). Typically, native code interface elements (including controls such as grid controls) are wrapped in managed code to allow developers to create a grid control using managed code controls. For example, Windows Forms is the name given to the graphical user interface application programming interface (API) included as a part of Microsoft's .NET Framework. Windows Forms provides access to the native Microsoft Windows interface elements by wrapping the existing Windows API in managed code. Similarly, AWT provides an analogous function in a JAVA environment Other controls (including grid controls) are written in managed code.","One known grid-style control allows developers to create a customized display using standard managed code controls to display each row of data of a data source on a form. The control can be bound to very large data sources but doing so may cause severe performance issues. The reasons that there are likely to be performance issues is that traditionally one or more controls are created in memory for each row of data so that if a data source contains 1 million rows of data, at least 1 million controls are created in memory. Furthermore, each row can itself contain a number of fields and traditionally each field will be displayed in a separate control. Thus, even for relatively small data sources, the total number of controls can very quickly add up. For example if there were 10,000 rows of data with 20 fields in each row, 200,000 controls (or more) would be created to display this data. Some grid-style controls are not scrollable. Although data from the previous or next row in the data source can be displayed by clicking the up and down arrows on the scroll bar, (e.g., using a fixed, none scroll pattern), the controls themselves are not scrolled or scrollable, only the data within the control is scrolled.","To address the issues described above, a new type of grid control called a data repeater control has been developed which reuses form controls so that large volumes of data can be displayed by creating at most N+2 rows of forms controls in memory, where N is the number of rows visible on the form in its initial size. If M is the number of rows of data in the data source, it is likely that N is a far smaller number than is M. Rows are reused when the user scrolls or tabs through the data or when the user activates a page down or page up feature. Child controls hosted by the data repeater control are created and are also reused.","When the data repeater control is first displayed, for example on a Windows Form, the number of rows (known as data repeater items) that will fit on the form are calculated. A data repeater item is created in a scrollable container in memory for each row that can be displayed on the form at one time. Each data repeater item can also include a child control for each field in the row to display the contents of the data. Two additional data repeater items may be created to be used when the user scrolls or tabs through the data so that adjacent rows of data can be quickly displayed. When the data is scrolled up or down the data repeater items are scrolled in the same direction. When a data repeater item is scrolled out of view it, along with its hosted child controls, are then reused to display the row of data (either a previous row or a next row) that is scrolling into view. This allows the data repeater to need at most N+2 rows of data repeater items and their associated child controls to be created in memory at one time instead of needing one row (comprising a plurality of controls) for each row of data in the data source to be created in memory at one time. A container of N+1 data repeater items can be created in memory when the row requested is a first row or last row of the data source. A data repeater control as described may enable a user to use standard Windows Forms controls instead of custom painted cells\/rows, permitting the user to leverage his knowledge of familiar APIs.","Rendering a Customized List of Controls",{"@attributes":{"id":"p-0020","num":"0019"},"figref":["FIG. 1","FIG. 5","FIG. 6","FIG. 5"],"b":["100","100","107","108","102","104","105","106","103","100","100","600","100"]},"A managed code framework  may comprise a .NET framework or a JAVA framework or any other managed code framework or environment. The data source  may comprise any data source such as a web service, database, file, etc. The application may be written in any managed code language or may be written in a native code language and a managed code add-in may provide an interface between the native code application and the managed code controls. A forms control library  may include a data repeater control as described more fully herein.",{"@attributes":{"id":"p-0022","num":"0021"},"figref":["FIG. 2","FIG. 2"],"b":["200","200","202","202","200","204","206","208","210","200","202","202","204","208"]},"During a design phase, a developer or other user may generate a customized data repeater control by dragging and dropping a data repeater control from a control library (e.g., control library ) onto the form and dragging and dropping data source components to the data repeater item template. In response, the data repeater control automatically (programmatically) populates child controls for every field in the data source on the form. This capability provides a one-step WYSIWYG (\u201cWhat You See Is What You Get\u201d) user experience. That is, a data repeater control can be dragged and dropped onto a form, a data source associated with the data repeater control and the data binding happens automatically at runtime. In contrast, in known controls, a separate user control was created and associated with a data source for each field to be displayed in the grid. On a separate form, the user controls acting as templates were used to create the grid, a two-step process in which the developer or user had to switch back and forth between the form and templates.","In accordance with aspects of the subject matter disclosed herein, unwanted field(s) in the data source can be removed from the data repeater template by deleting the associated child control(s) of the data repeater control. For example, in form , a field in the data row, such as Country can be removed from the data repeater item  by deleting the child controls  associated with the Country field from the data repeater template. Unlike known grid-style controls in which control types are limited, (for example, a text box had to be used for a string data type), no limitation is placed on the type of the control associated with the data type. For example, although Customer ID data may be of data type \u201cstring\u201d the control used to display the Customer ID data is not restricted to a textbox. At runtime, the data repeater control will automatically (programmatically) determine the data source bound to the control. Different data formats can be chosen in which the data is displayed in the control. For example, to display a column of date\/time type, formats such as 12\/31\/1981 14:23:51, Dec. 31, 1981 2:23:51 pm, etc. may be selected for display.",{"@attributes":{"id":"p-0025","num":"0024"},"figref":["FIG. 3","FIG. 3"],"b":["300","300","302","304","306","302","304","306","300","308","310","312","302","314","304","316","306","318","320","322","302","324","304","326","306"]},"Each child control, (e.g., child text box control , child text box control , etc.), in data repeater item  of display  is a child control of the data repeater item  because each child control is hosted by the data repeater item . In addition, each label (e.g., child control label Customer ID , child control label Company Name ), in data repeater item  and so on may themselves be controls. Similarly, each child control in data repeater item  of display  is a child control of the data repeater item  because each child control is hosted by the data repeater item  and so on.","At runtime the control takes the template developed during the design phase (e.g., displayed in ) and repeats it for each row in the data source displayed on the screen (e.g., as displayed in ). A row is not created in memory for each row in the data source. Instead a maximum of N+2 rows of data repeater items are created in a scrollable container in memory, where N represents the number of rows displayed on the screen.","For example, in display , three (N) rows of data of the data source are displayed using three data repeater items so that a maximum of five (N+2) data repeater items are stored in memory. These five rows of data repeater items in memory can be reused whenever a user scrolls down or up or tabs to the next or previous row or data repeater item. Similarly the child controls for each data repeater item can be reused. Suppose for example, the three rows displayed in display  by the three data repeater items ,  and  represent the following rows of data in the data source: row  (displayed by data repeater item , row  (displayed by data repeater item ) and row  (displayed by data repeater item ). The two additional data repeater items would be populated in memory with the data from row  (the row previous to row ) and row  (the row after row ), although these rows of data are not visible on the display .","Thus, if a user were positioned on row  and tabbed to the next row, row  would scroll into view, row  displayed by data repeater item  would disappear from the display window, row  displayed by data repeater item  and row  displayed by data repeater item  would be displaced upwards on the display one item each and row  displayed by a data repeater item stored in memory and not previously visible on display  would be displayed below row  (row  still displayed by data repeater item ). Thus display  would then display rows ,  and  via data repeater items ,  and a data repeater item (not shown) stored in memory. The data repeater item previously used to hold the data not displayed for row  may now be used to hold the undisplayed data for row .","Consider the following example. Suppose four (N) data repeater items are visible on a particular form display. In memory six (N+2) data repeater items may created in a scrollable container to store six rows of data from a data source, the six data repeater items representing the four data repeater items visible on the initial display and two data repeater items used for rapid display of the previous and next data rows.","Suppose the container in memory represents\/stores the following information:","[data repeater item |row ]","[data repeater item |row ]","[data repeater item |row ]","[data repeater item |row ]","[data repeater item |row ]","[data repeater item |row ]","A control border may be displayed above and below the visible rows of data, as follows:","[data repeater item |row ] not visible","[----control border----]","[data repeater item |row ] visible","[data repeater item |row ] visible","[data repeater item |row ] visible","[data repeater item |row ] visible","[----control border----]","[data repeater item |row ] not visible","In the example above, four data repeater items are in view on a display, bordered by a control border at the top and bottom of the display. Data repeater items , ,  and  (rows , ,  and ) are visible on the example display. Two additional data repeater items (data repeater item  and data repeater item ) may be created to handle a TAB through or normal scroll operation but are not now visible. If a current data repeater item is data repeater item  and a user presses TAB, in accordance with aspects of the subject matter disclosed herein, data repeater item  may scroll into view and data repeater item  may be moved down to the bottom and may be filled with row , thusly:","[data repeater item |row ]","[----control border----]","[data repeater item |row ]","[data repeater item |row ]","[data repeater item |row ]","[data repeater item |row ]","[----control border----]","[data repeater item |row ]","In the ending display in this example, data repeater items , ,  and  (rows , .  and ) are visible on the display and data repeater item  (row ) and data repeater item  (row ) are not visible on the display.","Considering again the original example:","[data repeater item |row ]","[----control border----]","[data repeater item |row ]","[data repeater item |row ]","[data repeater item |row ]","[data repeater item |row ]","[----control border----]","[data repeater item |row ]","Now suppose that the current item is data repeater item  and a user presses shift+TAB or scrolls up one data repeater item. In this case, in accordance with aspects of the subject matter disclosed herein, data repeater item  may scroll into view and data repeater item  may be moved up to the top and may be filled with row , thusly:","[data repeater item |row ]","[----control border----]","[data repeater item |row ]","[data repeater item |row ]","[data repeater item |row ]","[data repeater item |row ]","[----control border----]","[data repeater item |row ]","In the ending display in this example, data repeater items , , , and  (rows , , , and ) are visible on the display and data repeater item  (row ) and data repeater item  (row ) are not visible on the display.","A second type of scrolling operation can be performed using an Up\/Down operation or PageUp\/PageDown operation. In this case, moving data repeater items as described above may result in flickering. Instead, in accordance with aspects of the subject matter disclosed herein, data repeater items may be filled with rows. For example, considering again the original example:","[data repeater item |row ]","[----control border----]","[data repeater item |row ]","[data repeater item |row ]","[data repeater item |row ]","[data repeater item |row ]","[----control border----]","[data repeater item |row ]","In response to receiving a PageDown operation, the following may result:","[data repeater item |row ]","[----control border----]","[data repeater item |row ]","[data repeater item |row ]","[data repeater item |row ]","[data repeater tern |row ]","[----control border----]","[data repeater item |row ]","That is, data repeater items may be re-populated with data reflecting the page up or page down operation. A group of data repeater items currently in the scrollable container in memory may be replaced with a new group of data repeater items reflecting the next or previous page of visible data. It will be appreciated that the associated child controls may be similarly reused.",{"@attributes":{"id":"p-0095","num":"0094"},"figref":"FIG. 4","b":["402","404","406","408"]},"At  for each field for each of the data repeater items, a child control may be created. At  the N rows may be displayed. If, for example, there are 91 rows of data in a data source and a request is received to display row , at , rows ,  and  may be displayed. In cache but not visible on the screen rows  and  may be stored. Alternatively, rows ,  and  may be displayed. In this case, in cache but not visible on the display rows  and  may be stored. At  a second user input may be received. User input may include a tab or scroll operation in an upward or downward direction. At  based on the input, the data on the display may be refreshed. In response to a second user input scrolling or tabbing up the last row displayed in the first display may disappear from view and the row previous to the first row of the first display may become visible. Similarly in response to a second user input scrolling or tabbing down, the first row on the first display may disappear and the last row on the first row may be followed by a new row on the second display. For example, suppose rows  and  are in cache, rows ,  and  are displayed on a first display and a user scrolls up from row . Row  may be displayed as the first row of the second display, followed by rows  and , row  may remain in cache and the data repeater item that formerly held row  in cache may be reused and may subsequently hold row . The child controls for row  may also be reused for the child controls of row .","A data repeater control in accordance with aspects of the subject matter disclosed herein may also check a value inputted via the control to see if the value violates a rule associated with the data source. If, for example, an input does not respect a data source constraint, the value may not be allowed to be saved to the data source. For data sources which are data bases, the data repeater may check constraints on a data column or on a data row.","Example of a Suitable Computing Environment","In order to provide context for various aspects of the subject matter disclosed herein,  and the following discussion are intended to provide a brief general description of a suitable computing environment  in which various embodiments may be implemented. While the subject matter disclosed herein is described in the general context of computer-executable instructions, such as program modules, executed by one or more computers or other computing devices, those skilled in the art will recognize that portions of the subject matter disclosed herein can also be implemented in combination with other program modules and\/or a combination of hardware and software. Generally, program modules include routines, programs, objects, physical artifacts, data structures, etc. that perform particular tasks or implement particular data types. Typically, the functionality of the program modules may be combined or distributed as desired in various embodiments. The computing environment  is only one example of a suitable operating environment and is not intended to limit the scope of use or functionality of the subject matter disclosed herein.","With reference to , a general purpose computing device in the form of a computer  is described. Computer  may include a processing unit , a system memory , and a system bus . The processing unit  can be any of various available processors. Dual microprocessors and other multiprocessor architectures also can be employed as the processing unit . The system memory  may include volatile memory  and nonvolatile memory . Nonvolatile memory  can include read only memory (ROM), programmable ROM (PROM), electrically programmable ROM (EPROM) or flash memory. Volatile memory  may include random access memory (RAM) which may act as external cache memory. The system bus  couples system physical artifacts including the system memory  to the processing unit . The system bus  can be any of several types including a memory bus, memory controller, peripheral bus, external bus, or local bus and may use any variety of available bus architectures.","Computer  typically includes a variety of computer readable media such as volatile and nonvolatile media, removable and non-removable media. Computer storage media may be implemented in any method or technology for storage of information such as computer readable instructions, data structures, program modules or other data. Computer storage media includes, but is not limited to, RAM, ROM, EEPROM, flash memory or other memory technology, CDROM, digital versatile disks (DVD) or other optical disk storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other medium which can be used to store the desired information and which can be accessed by computer .","It will be appreciated that  describes software that can act as an intermediary between users and computer resources. This software may include an operating system  which can be stored on disk storage , and which can control and allocate resources of the computer system . Disk storage  may be a hard disk drive connected to the system bus  through a non-removable memory interface such as interface . System applications  take advantage of the management of resources by operating system  through program modules  and program data  stored either in system memory  or on disk storage . It will be appreciated that computers can be implemented with various operating systems or combination s of operating systems.","A user can enter commands or information into the computer  through an input device(s) . Input devices  include but are not limited to a pointing device such as a mouse, trackball, stylus, touch pad, keyboard, microphone, and the like. These and other input devices connect to the processing unit  through the system bus  via interface port(s) . An interface port(s)  may represent a serial port, parallel port, universal serial bus (USB) and the like. Output devices(s)  may use the same type of ports as do the input devices. Output adapter  is provided to illustrate that there are some output devices  like monitors, speakers and printers that require particular adapters. Output adapters  include but are not limited to video and sound cards that provide a connection between the output device  and the system bus . Other devices and\/or systems or devices such as remote computer(s)  may provide both input and output capabilities.","Computer  can operate in a networked environment using logical connections to one or more remote computers, such as a remote computer(s) . The remote computer  can be a personal computer, a server, a router, a network PC, a peer device or other common network node, and typically includes many or all of the elements described above relative to the computer , although only a memory storage device  has been illustrated in . Remote computer(s)  can be logically connected via communication connection . Network interface  encompasses communication networks such as local area networks (LANs) and wide area networks (WANs) but may also include other networks. Communication connection(s)  refers to the hardware\/software employed to connect the network interface  to the bus . Connection  may be internal to or external to computer  and include internal and external technologies such as modems (telephone, cable, DSL and wireless) and ISDN adapters, Ethernet cards and so on.","It will be appreciated that the network connections shown are examples only and other means of establishing a communications link between the computers may be used. One of ordinary skill in the art can appreciate that a computer  or other client device can be deployed as part of a computer network. In this regard, the subject matter disclosed herein man pertain to any computer system having any number of memory or storage units, and any number of applications and processes occurring across any number of storage units or volumes. Aspects of the subject matter disclosed herein may apply to an environment with server computers and client computers deployed in a network environment, having remote or local storage. Aspects of the subject matter disclosed herein may also apply to a standalone computing device, having programming language functionality, interpretation and execution capabilities.",{"@attributes":{"id":"p-0105","num":"0104"},"figref":"FIG. 6","b":["600","602","600","610","600","600","650","610","611","620","611","650","660"]},"A user can create and\/or edit the source code component according to known software programming techniques and the specific logical and syntactical rules associated with a particular source language via a user interface  and a source code editor  in the IDE . Thereafter, the source code component  can be compiled via a source compiler , whereby an intermediate language representation of the program may be created, such as assembly . The assembly  may comprise the intermediate language component  and metadata . Application designs may be able to be validated before deployment.","The various techniques described herein may be implemented in connection with hardware or software or, where appropriate, with a combination of both. Thus, the methods and apparatus described herein, or certain aspects or portions thereof, may take the form of program code (i.e., instructions) embodied in tangible media, such as floppy diskettes, CD-ROMs, hard drives, or any other machine-readable storage medium, wherein, when the program code is loaded into and executed by a machine, such as a computer, the machine becomes an apparatus for practicing aspects of the subject matter disclosed herein. In the case of program code execution on programmable computers, the computing device will generally include a processor, a storage medium readable by the processor (including volatile and non-volatile memory and\/or storage elements), at least one input device, and at least one output device. One or more programs that may utilize the creation and\/or implementation of domain-specific programming models aspects, e.g., through the use of a data processing API or the like, may be implemented in a high level procedural or object oriented programming language to communicate with a computer system. However, the program(s) can be implemented in assembly or machine language, if desired. In any case, the language may be a compiled or interpreted language, and combined with hardware implementations.","While the subject matter disclosed herein has been described in connection with the figures, it is to be understood that modifications may be made to perform the same functions in different ways."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["In the drawings:",{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 6"}]},"DETDESC":[{},{}]}
