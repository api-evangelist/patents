---
title: Method, system, and program product to support multiple content-management data models
abstract: Methods, systems, and program products for managing multimedia content. These are built upon a combination of a high level content model for specific multimedia content types and a low level physical for mapping to a data engine. The method, system, and program product include representing multimedia content management objects and managing the objects in a relational database. The relational database is adapted for representing data in a plurality of relational database tables, where each of the relational database tables has at least one row with a plurality of columns. Content is managed by associating the object as an item to a row in a first relational database table; and associating additional components, if any, of the object to additional relational database tables.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07043490&OS=07043490&RS=07043490
owner: International Business Machines Corporation
number: 07043490
owner_city: Armonk
owner_country: US
publication_date: 20020305
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION"],"p":["Our invention relates to data structure models, including multimedia data structure models, and facilitates access, retrieval, and data conversion for content management applications. Our invention further relates to the use of the data structure model, to systems utilizing the data structure model, and to program products incorporating the data structure model. Further aspects of our invention further relate to a tool kit, tool set, or wizard that enables an end user to create a hierarchy of RDBMS tables to implement the model, that is, by pointing to or linking various disparate data models and their RDBMS representations. The data structure model is used for organizing, inter-relating, and accessing data and files, including relational, network, hierarchical, and entity-relationship models, and graphics, text, and web page files, among others.","Multimedia data management and delivery is a complex, computer and memory intensive, task. As used herein, \u201cmultimedia\u201d data refers to combinations of sound, graphics, animation, text, and video data, which may be linked in an associative system of storage and retrieval, which may be interactive, and which may be linked to other media.","A multimedia content management system needs to manage a large volume of disparate data, including unstructured data as well as structured data. The structured data often include \u201cmetadata\u201d that describe the unstructured data so that the latter can be organized, grouped and correlated in various ways, searched, retrieved, and administered. Within a content management system, a relational database management system (RDBMS) is often used to manage these structured data so that off-the-shelf RDBMS data management technologies can be leveraged. However, the type of the unstructured data, that is, multimedia content, differs from application to application.","Because the type of data (including its schema, metadata, applicable extenders, and the like) differs between applications and content data models (as streaming, graphical, visual, video, audio, text, numeric), a different database design is needed to support the metadata and schema database of each application and data model. Heretofore, it was not possible to support different content management applications using different content data models with a single, general-purpose content management system. Such a system could not have a pre-designed, i.e., \u201cone size fits all,\u201d database management system. Rather, the content management system must have been provided with the capability of allowing an application developer to describe the required structured data so that a database with a suitable design could be created for that application. This description was normally expressed in the abstraction of a high-level data model supported by the content management system, usually through an application programming interface (API) or a graphical user interface (GUI). While this high-level data model provided the flexibility to support more than one application, it also limited the coverage to only those applications that could be expressed in that particular high level model.","The data model is an essential aspect of a content management system because it determines the potential capability of the system as well as its limitations. However, while a data model can sometimes be expanded somewhat, such an expansion is usually very limited and will not be able to capture a different paradigm, especially one with an incompatible or even conflicting concept.","Thus, a clear need exists for an extensible and scalable data model that readily supports a wide range of disparate content data models, and which can be readily implemented in a system or program product.","A further need exists for a tool, tool kit, tool set, or wizard to create and populate a relational database of disparate content schema and metadata, for an extensible and scalable content management RDBMS.","This is accomplished by the methods, systems, and program products for managing multimedia content of our invention. The method, system, and program product of our invention utilize a low level physical content model that is able to support a plurality of high level content models to meet a diverse and open set of content application requirements. The low level physical model of the data content is extensible to new technologies, and new standards, and to satisfy new requirements, through the addition of additional, new, high level data models. It also provides efficient mapping to the data engine (a database management system, as a relational database management system or an object oriented database management system, or an XML data repository, all by way of example and not limitation).","Exemplifications of the method, system, and program product of the invention include representing multimedia content management objects in the low level physical model and managing the objects in a relational database. The relational database is adapted for representing data in one or more relational database tables, where each of the relational database tables has at least one row with a plurality of columns. Content is managed by associating the object as an item to a row in a first relational database table, and additional rows, if any, in additional tables.","The invention includes a method of representing a multimedia content management object in a relational database adapted for representing multimedia content management data in one or more relational database tables, and a method, system, and program product for managing the multimedia content database management system. Each of the relational database tables has at least one row with a plurality of columns. The method associates the object as an item to a row in a first relational database table, and additional rows, if any, in additional tables. Any columns of these tables may contain pointers to other items or to non-structured content resources.","As shown in , a multimedia system is a complex client-server system with multiple clients, , , a server, , and one or more content servers, , , each with one or more content stores, , , , . It should be noted that the content stores may contain structured data, such as metadata for content, or unstructured data, such as textual data, image data, streaming audio, or streaming video. These data may be, and typically are, in a variety of disparate formats.","The server, , which may include a web server, also includes the content manager server. The content manager server is the repository of the content management RDBMS described herein. To be noted is that while we illustrate our invention with respect to relational database management systems, the method, system, and program product of our invention are also applicable to, for example, object oriented database management systems and XML data repositories.","To accommodate more than one content data model in a high-level data model, we provide an extensible content management system such that a user can introduce appropriate metadata and schema and new APIs to support new high-level data models. This extensibility is enabled by an architecture that is built around a low-level infrastructure supporting a physical data model and implemented through a hierarchical structure of RDBMS tables of content and content metadata, as items, components, sub-components, and attributes, with corresponding rows and columns (attributes) within the rows. The architecture and an associated infrastructure and physical data model are used as building blocks to support high-level data models. This physical data model is independent of application-specific semantics, maps directly and efficiently to a relational database designed to exploit RDBMS capabilities, and can be enriched over time to expand its functions and\/or to exploit new RDBMS capabilities.","The design point for this physical data model is different from that of a high-level data model exposed to an application developer. The high-level data model focuses heavily on its logical aspects (its usability and expressiveness with respect to a class of applications), whereas the physical data model focuses heavily on its physical aspects (storage access efficiency and ability to exploit RDBMS capabilities) to provide generic, basic functions broadly useful to many content management applications. This physical data model, or any part of it, may or may not be exposed to user through a high-level data model.","Conceptually, as shown in , the method, system, and program product of our invention utilize a high level content model that is able to support a diverse and open set of content application requirements and a plurality of high level data models, and a low level physical model of the data content that is extensible to accommodate new technologies, new standards, and new requirements and provides efficient mapping to the data engine (a database management system, as a relational database management system or an object oriented database management system, by way of example and not limitation). To be noted is that each high level data model is in the form of an Application Program Interface (API) embodying a representation of data structure and constraints. Also to be noted is that the low level data model or infrastructure, , can support multiple high level models, , , . The extensible and scalable content management system of the invention contains one or more APIs supporting disparate high level data models, , , , supported by a generic, low level infrastructure, , that is, a physical data model, which in turn is supported by the Relational Database Management System (RDBMS), .",{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIGS. 3","b":["4","5","6"]},"The primary, standalone unit of content managed by the physical layer of the content management system of the invention is an \u201cItem.\u201d  shows an Item Database, , with a root component, , having Item Rows, and . An item consists of a typed hierarchical structure of components, , and one or more levels of sub-components, , , with attributes , , , , , , , and has a unique identifier \u201cItemID\u201d.","Each component, , contains a reference, , to the parent component. The reference is through a foreign key.","The Sub-component tables, and , may reference further sub-components or attributes. The sub component table, , is illustrated as referencing pointers to content data repositories, , and ",{"@attributes":{"id":"p-0029","num":"0028"},"figref":["FIG. 4","FIG. 3","FIG. 4"],"b":["41","41","35"],"i":["b","a"]},"A user-specified attribute can be of any data model supported by the RDBMS, or can be of a special data model supported by the content management system. An \u201cItem\u201d logically consists of a row in the root table of the respective \u201cItemType,\u201d and any number of rows in each child table of the \u201cItemType,\u201d with a condition that the parent of a child row contained in an \u201cItem\u201d must also be contained in the \u201cItem.\u201d An \u201cItem\u201d is a hierarchy of rows that are stored in a hierarchy of tables. Each of these rows is called a \u201cComponent\u201d of the \u201cItem\u201d and has a \u201cComponentID\u201d that uniquely identifies the \u201cComponent\u201d within the respective \u201cComponentType.\u201d","Cardinality constraints can be defined for each child \u201cComponentType\u201d to assure a minimum and\/or a maximum number of rows of that type under each of their parent rows. The default minimum is zero and the default maximum is infinity. An \u201cItemType\u201d can also be ordered or unordered. For an \u201cItem\u201d of an ordered \u201cItemType,\u201d the child rows under each parent row are ordered, and the ordering is maintained by the system.","An \u201cItemType\u201d can be versioned. If so, multiple versions of an \u201cItem\u201d are maintained for every \u201cItem\u201d in the \u201cItemType.\u201d They share the same \u201cItemID\u201d but each has a different version number. The number of latest versions to be retained for an \u201cItem\u201d can be specified for each versioned \u201cItemType.\u201d The default is infinity, i.e., no automatic purging of old versions will be performed by the system.","In one preferred embodiment, the parent-child relationship between two \u201cComponentTypes\u201d within an \u201cItemType\u201d is maintained by a RDBMS Foreign Key created in the child \u201cComponentType\u201d (or sub-component) referencing the parent \u201cComponentType.\u201d Thus, the referential integrity of each child \u201cComponent\u201d (or sub-component) to its parent \u201cComponent\u201d is assured by the RDBMS. In this embodiment, each \u201cComponent\u201d in an \u201cItem\u201d contains at least the following system attributes: \u201cItemID\u201d, \u201cComponentID\u201d, and ParentID, and optionally may contain an \u201cItem\u201d VersionNumber, and ACL Code (Access Control List code). Although \u201cItemID\u201d, \u201cItem\u201d VersionNumber, and ACL Code are only needed for the root \u201cComponent,\u201d they may be included in every \u201cComponent\u201d to facilitate access. Other system attributes can also be included to facilitate access or maintenance, e.g., \u201cComponentType,\u201d the number of immediate child Components underneath a \u201cComponent,\u201d etc. Also a separate RDBMS table is created for each \u201cComponentType\u201d defined for an \u201cItemType;\u201d i.e., tables are not shared between two \u201cItemTypes\u201d. This design simplifies the logic and also enhances database scalability. In a different embodiment, a table can be shared among several \u201cItemTypes\u201d to store Components (rows) of similarly defined ComponentTypes for these several \u201cItemTypes\u201d. In this case, including \u201cItemType\u201d as a system attribute in this shared table can facilitate access. Sharing a table in this manner allows a faster search when the search scope covers multiple \u201cItemTypes\u201d that contain common attribute(s) being searched on.","As illustrated in , Items (including Child Components, Grand Child Components and Attributes) can relate to or be associated with each other, for example through a system table, using Links. A Link is an \u201cexternal\u201d relationship that binds a source \u201cItem,\u201d , to a target \u201cItem,\u201d , along with a LinkType, , and an optional Link \u201cItem,\u201d . This relationship is \u201cexternal\u201d since it is not imbedded in either the source or the target \u201cItem.\u201d The LinkType is a categorization label so that an application can selectively traverse, or search on, Links of a particular type. A Link \u201cItem\u201d is a third \u201cItem\u201d that can be used to describe this relationship if needed. Links can be used to support one-to-many and many-to-many relationships, including aggregation and containment relationships.","The semantics of each relationship are defined by a high-level data model. One example is \u201cfoldering\u201d, in which case an \u201cItem\u201d representing a folder is Linked to the Items (representing documents or other folders) that are \u201ccontained\u201d in this folder. For example, Source Item , acts as a container for Target Item, . The binding of a Link to the source or the target \u201cItem\u201d can be either version-specific or version-independent. The former binds a specific version of an Item, whereas the latter binds to any\/all versions of an \u201cItem.\u201d In one embodiment, Links are maintained as rows in one or more dedicated RDBMS tables containing at least the following attributes: source \u201cItemID\u201d, source \u201cItem\u201d VersionNumber, target \u201cItemID\u201d, target \u201cItem\u201d VersionNumber, LinkType, Link \u201cItemID\u201d, and Link \u201cItem\u201d VersionNumber.","As illustrated in , items can also relate to each other using \u201cItem Reference\u201d attributes, which are maintained like other attributes contained in an \u201cItem.\u201d An \u201cItem Reference\u201d attribute is a user-defined attribute created as a part of a \u201cComponentType,\u201d , within an \u201cItemType,\u201d . This attribute has a special data model maintained by the content management system. It contains a reference, , that points to a target \u201cItem,\u201d \u2032. Similar to a Link, () the binding of the reference, , to the target \u201cItem,\u201d \u2032, can be either version-specific or version independent. When an \u201cItem Reference,\u201d , attribute is specified, a Scope of Reference and a Delete Semantics are defined for the referenced Items. The scope specifies which \u201cItemType\u201d (s) the referenced Items can belong to, whereas the delete semantics are similar to the delete rules maintained by a RDBMS to assure referential integrity when a referenced \u201cItem\u201d is to be deleted. An \u201cItem Reference\u201d attribute, , can also be unscoped, in which case a referenced \u201cItem\u201d can belong to any \u201cItemType.\u201d In a preferred embodiment, a homogeneously scoped \u201cItem Reference\u201d attribute (i.e., when the scope is a single \u201cItemType\u201d) is supported by a RDBMS Foreign Key. Heterogeneously scoped (i.e., when the scope includes multiple \u201cItem\u201d Types) and unscoped \u201cItem Reference\u201d attributes are maintained by the content management system using RDBMS triggers.","Another special data model supported by this physical data model is that of a Resource Reference attribute, , also illustrated in . As illustrated in , a Resource Reference, , contains a reference to a Resource, , managed by a Resource Manager of the content management system. A Resource Manager is a special-purpose server that manages resources of a particular type. Examples are an Object Server, which manages a large volume of binary objects, and a Stream Server, which manages and delivers streaming objects (e.g., audio and video content). The extensible content management system in our design is able to accommodate new Resource Managers, each of which is specially designed to manage a specific type of resources, with its specific representation and methods that are not necessarily modeled by the physical data model described here. The unstructured data managed by the content management system are largely managed internally by one or more of these Resource Managers. The integrity of a Resource Reference is maintained by the content management system.","The physical data model described herein is able to support a wide range of high-level data models to cover a diverse spectrum of application domains, as well as to support many industry standards (e.g., Dublin Core, XML). Equally important, this physical data model also provides enough flexibility to allow database optimization so as to support high-level data models efficiently. In one example, a high-level data model uses Items of one \u201cItemType\u201d to represent standalone, sharable images, each of which has its own attributes, versions, and ACL. The actual images are stored as Resources. Items of another \u201cItemType\u201d are then used to represent documents, and Links are used to bind each document to the images it contains. In another example, to support a high-performance production application, a single \u201cItem\u201d is used to represent a document together with the images contained in the document. (The actual images are also stored as Resources.) In this case, performance is critical but there is no sharing requirement for the images.","\u201cItemView(s)\u201d can be defined on an \u201cItemType.\u201d An \u201cItemView\u201d is a named template to restrict access to an \u201cItemType\u201d to certain \u201cComponent\u201d tables and attributes. It is essentially a set of RDBMS views for the corresponding \u201cComponent\u201d tables in the \u201cItemType.\u201d","One exemplification of the invention is a multimedia distributed database management system with distributed card reader access, for example, as would be used in a magnetic card security system, a credit card or debit card or automatic teller machine card system, or an airline frequent traveler system. One version of this system is shown in . The system, , is actuated by identification indicia, e.g., encrypted data, on a magnetic or optical card, , read by a card reader ","After reading the card, , biometric readings are taken. Exemplary biometric data includes fingerprints at finger print reader , voice prints and samples, facial images, and eye images, at digital camera, , among others. The biographical, audio, and image data are typically accessed through and processed by separate servers , , , and , and stored in separate databases, , , , and , for example, fingerprint data, voice data, and facial and eye image data are stored as multimedia data objects on separate fingerprint data, voice data, and facial and eye image databases, with such attributes as data models (images, mathematical representations of image data, audio data, and mathematical representations of audio data), as well as repository addresses (e.g., URL's or IP addresses), where the data is the item and the addresses and definitions of data models are the attributes, and the image presented to the screener, security guard, cashier, boarding agent, or enforcement professional is the resource.","The method and system are physically implemented in a program product. The program product may reside on one computer or on several computers or on a distribution server or a disk or disks or tapes. The program itself may be encrypted and\/or compressed, as would be the case of distribution media or a distribution server, for example, before installation or it may be installed on the one or more computers.","A further aspect of the invention is a method and program product in the nature of a wizard (that is, a structured series of dialogs that ask questions and use the answers or choices to produce a result ) for populating the multimedia content management system with content schema and metadata, including high level content models and low level physical models. This is accomplished by presenting a query to a user as to a content item, and, based upon the end user's response, presenting one or more subsequent queries as to the content item, and based upon the responses, determining the sub-components and attributes of the item.","While the invention has been described with respect to certain preferred embodiments and exemplifications, it is not intended to e limited thereby, but solely by the claims appended hereto."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"THE FIGURES","p":["The invention is illustrated in the FIGURES attached hereto.",{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 7"}]},"DETDESC":[{},{}]}
