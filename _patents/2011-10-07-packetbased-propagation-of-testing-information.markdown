---
title: Packet-based propagation of testing information
abstract: A packet-based testing capability is provided. The packet-based testing capability is configured to provide a packet-based JTAG (PJTAG) protocol. The PJTAG protocol is an asynchronous protocol configured to support the synchronous JTAG protocol. The PJTAG protocol is configured to convert between JTAG signals and packets configured to transport information of the JTAG signals (e.g., to convert JTAG signals into PJTAG packets at an interface from a JTAG domain to a PJTAG domain and to convert PJTAG packets into JTAG signals at an interface from a PJTAG domain to JTAG domain).
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09341676&OS=09341676&RS=09341676
owner: Alcatel Lucent
number: 09341676
owner_city: Boulogne-Billancourt
owner_country: FR
publication_date: 20111007
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["The invention relates generally to testing and, more specifically but not exclusively, to controlling propagation of information related to testing.","Joint Test Action Group (JTAG) or Institute of Electrical and Electronics Engineers (IEEE) 1149.1 is a standard for automated digital testing. While JTAG was initially developed primarily for interconnection testing, it has since evolved into a solution for accessing components and for performing other test and maintenance functions, and many related standards and approaches have been developed in this regard. While most of these standards and approaches are effective in the circuit\/board space in which components are accessed via an 1149.1 circuit composed of scan registers, they may be inefficient or even ineffective for accessing remote components.","Various deficiencies in the prior art are addressed by embodiments for supporting packet-based JTAG testing.","In one embodiment, an apparatus includes a component configured to receive a plurality of test signals and generate one or more associated test packets. The test signals include a test data signal, a test control signal, and a test clock signal. The one or more test packets are generated via sampling of the test data signal and the test control signal using the test clock signal without sampling the test clock signal, and the test clock signal is represented as bit alignment information within the one or more test packets.","In one embodiment, a method includes receiving a plurality of test signals and generating one or more associated test packets. The test signals include a test data signal, a test control signal, and a test clock signal. The one or more test packets are generated via sampling of the test data signal and the test control signal using the test clock signal without sampling the test clock signal, and the test clock signal is represented as bit alignment information within the one or more test packets.","In one embodiment, an apparatus includes a component configured to receive one or more test packets and generate a plurality of test signals using the one or more test packets. The one or more test packets include test data, test control information, and bit alignment information. The test signals include a test data signal conveying the test data, a test control signal conveying the test control information, and a test clock signal generated using the bit alignment information.","In one embodiment, a method includes receiving one or more test packets and generating a plurality of test signals using the one or more test packets. The one or more test packets include test data, test control information, and bit alignment information. The test signals include a test data signal conveying the test data, a test control signal conveying the test control information, and a test clock signal generated using the bit alignment information.","To facilitate understanding, identical reference numerals have been used, where possible, to designate identical elements that are common to the figures.","In general, a packet-based testing capability is depicted and described herein, although various other capabilities also may be presented herein.","In at least some embodiments, the packet-based testing capability is configured to provide a packet-based JTAG protocol (referred to herein as a PJTAG protocol). The PJTAG protocol is an asynchronous protocol configured to support the synchronous JTAG protocol. The PJTAG protocol is configured to convert between JTAG signals and packets configured to transport information of the JTAG signals (e.g., to convert JTAG signals into PJTAG packets at an interface from a JTAG domain to a PJTAG domain and to convert PJTAG packets into JTAG signals at an interface from a PJTAG domain to JTAG domain).",{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 1"},"The JTAG-based testing environment  includes a first JTAG domain and a second JTAG domain (collectively, JTAG domains ) configured to communicate via a packet-based JTAG (PJTAG) domain  using a packet-based JTAG (PJTAG) protocol.","The JTAG-based testing environment  may be configured to support different types of applications in which the PJTAG protocol may be used. In one embodiment, for example, JTAG-based testing environment  may be implemented as a TAP-level PJTAG implementation (e.g., where PJTAG domain  may be physically distributed and may include one or more elements where each element may be an individual PJTAG system including a JTAG Test Access Port (TAP) and associated TAP Finite State Machine (FSM)). In one embodiment, for example, JTAG-based testing environment  may be implemented as a component-level PJTAG implementation (e.g., PJTAG domain  is a JTAG system including one or more elements where each element may be a component of the JTAG system).","The JTAG domains  each support propagation of the following types of JTAG signals: (1) test data signals (i.e., Test Data Input (TDI) and Test Data Output (TDO)) and (2) test control signals (i.e., Test Mode State (TMS), Test Clock (TCK), and, optionally, TSTR (an optional Reset Signal)). For purposes of clarity, first JTAG domain is depicted as supporting the JTAG TDI signal, the JTAG TCK signal (denoted as TCK, which is local to first JTAG domain ), and the JTAG TMS signal, and, similarly, second JTAG domain is depicted as supporting the JTAG TDO signal, the JTAG TCK signal (denoted as TCK, which is local to second JTAG domain ), and JTAG TMS signal. The JTAG domains  may be any suitable types of JTAG domains, which may depend upon the application for which the PJTAG protocol is used. The JTAG domains  also may support propagation of scan control signals associated with the Finite State Machine (FSM) of the Test Access Port (TAP), such as ShiftDR, UpdateDR, Select, CaptureDR, and the like.","The PJTAG domain  may be any suitable type of domain, which may depend upon the application for which the PJTAG protocol is used. In one embodiment, for example, in the case of TAP-level PJTAG, PJTAG domain  may be a communication network supporting packet-based communications (e.g., an Ethernet network, the Internet, and the like). In one embodiment, for example, in the case of component-level PJTAG, PJTAG domain  may be a communication medium within a JTAG system (e.g., supporting internal communication between components of the JTAG system). The PJTAG domain  may be any other suitable type of domain configured to support propagation of packets in accordance with the PJTAG protocol.","The PJTAG domain  is configured to support propagation of JTAG testing information (e.g., test data and test control information and, optionally, scan control information), using packets, in accordance with the PJTAG protocol. The PJTAG domain  includes a Test Data Channel (TDCh) that is configured to propagate packets including test data (denoted herein as test data packets) and a Test Signaling Channel (TSCh) that is configured to propagate packets including test control information (and, optionally, scan control information) related to the test data (denoted herein as test control packets).","The TDCh and the TSCh are channels configured to support packet-based communications, and may be implemented in any suitable manner. In one embodiment, as depicted in , TDCh and TSCh may be implemented using separate physical channels. In one embodiment, which is omitted from  for purposes of clarity, TDCh and TSCh may be implemented as separate logical channels sharing medium common physical channel. In one embodiment, which also is omitted from  for purposes of clarity, TDCh and the TSCh may be implemented using a common logical channel in which test data and test control information are included within the same packets (which are denoted herein more generally as test packets).","The PJTAG domain  includes a plurality of elements -(collectively, elements ). The elements  are connected in series using TDCh and are connected in parallel using TSCh . The elements  may be any suitable type of elements, which may depend upon the application for which the PJTAG protocol is used. In one embodiment, for example, in the case of a TAP-level PJTAG implementation (e.g., where PJTAG domain  may be physically distributed), each of the elements  may be an individual PJTAG system including a JTAG TAP and associated TAP FSM. In one embodiment, for example, in the case of component-level PJTAG implementation (e.g., where PJTAG domain  is a JTAG system), each of the elements  may be a component of the JTAG system. The elements  may be any other suitable type of elements configured for use within a PJTAG domain.","The JTAG-based testing environment  includes a pair of components  configured to convert information between the format used in the JTAG domains  (e.g., JTAG TAP signals and, optionally, FSM control signals) and the format used in the PJTAG domain  (e.g., test packets or a combination of test data packets and test control packets). The pair of components  includes a dispatcher and an issuer .","The dispatcher is configured to function as an interface between first JTAG domain and PJTAG domain . The dispatcher is configured to convert information from the format used in the first JTAG domain (e.g., JTAG TAP signals and, optionally, FSM control signals) to the format used in the PJTAG domain  (e.g., PJTAG packets including test data packets and test control packets). The set of functions that dispatcher is configured to perform may depend on the type of implementation of JTAG-based testing environment  (e.g., whether TAP-level, component-level, or some other implementation).","In one embodiment, for example, when the dispatcher is used within a TAP-level implementation (as depicted in ), dispatcher is configured to perform the following functions. The dispatcher is configured to receive a test data signal conveying test data, a test control signal conveying test control information (e.g., a test mode state signal conveying test mode state information), and a test clock signal conveying a test clock. The dispatcher is configured to (1) generate one or more test data packets via sampling of the test data signal using the test clock signal without sampling the test clock signal; and (2) propagate the one or more test data packets via TDCh in the PJTAG domain . The dispatcher is configured to (1) generate one or more test control packets via sampling of the test control signal based using the test clock signal without sampling the test clock signal and (2) propagate the one or more test control packets via TSCh in the PJTAG domain . In one embodiment, for example, sampling a signal (e.g., test data signal, test control signal, and the like) using the test clock signal may include sampling the value of the signal at each rising edge of the test clock signal such that the value may be placed within the appropriate packet. The dispatcher also is configured to represent the test clock signal as bit alignment information within the one or more test data packets and the one or more test control packets. It is noted that the bit alignment information may be considered to indicate the manner in which the values of the signals (e.g., the test data signal and the test control signal) were distributed within the packets, i.e. the manner in which the values of the signals were sliced when sampled for placing the associated values of the signals into the packets. For example, the test data signal may be a JTAG TDI\/TDO signal, the test control signal may be a JTAG TMS signal, and the test clock signal may be a JTAG TCK signal.","In one embodiment, for example, when the dispatcher is used within a component-level implementation (omitted from  for purposes of clarity), dispatcher is configured to perform the functions described for the TAP-level implementation as well as additional functions related to propagation of scan control information via the PJTAG domain . The dispatcher is configured to receive scan control signals (e.g., ShiftDR, UpdateDR, Select, CaptureDR, and the like) including scan control information related to a TAP FSM, generate the one or more test control packets such that they also include the scan control information from the scan control signals, and propagate the one or more test control packets (including the scan control information) via TSCh in the PJTAG domain .","The issuer is configured to function as an interface between PJTAG domain  and second JTAG domain . The issuer is configured to convert information from the format used in the PJTAG domain  (e.g., PJTAG packets including test data packets and test control packets) and the format used in the second JTAG domain (e.g., JTAG TAP signals and, optionally, FSM control signals). The set of functions that the issuer is configured to perform may depend on the type of implementation of JTAG-based testing environment  (e.g., whether TAP-level, component-level, or some other implementation).","In one embodiment, for example, when the issuer is used within a TAP-level implementation (as depicted in ), issuer is configured to perform the following functions. The issuer is configured to receive one or more test data packets via TDCh in the PJTAG domain  and to receive one or more test control packets via TSCh in the PJTAG domain . The test data packets include test data and bit alignment information that is representative of test control timing information, and the test control packets include test control information (e.g., test mode state information) and bit alignment information that is representative of test control timing information. The issuer is configured to generate, from the one or more test data packets, a test data signal conveying the test data, and propagate the test data signal via a test data signal path. The issuer is configured to generate, from the one or more test control packets, a test control signal conveying the test control information (e.g., a test mode state signal conveying test mode state information), and propagate the test control signal via a test control signal path. The issuer is configured to generate, using the bit alignment information from the one or more test data packets and the bit alignment information from the one or more test control packets, a test clock signal conveying the test control timing information, and propagate the test clock signal via a test clock signal path. In one embodiment, for example, a local oscillator may be used to generate a clock signal and the bit alignment information may then be used to gate the clock signal to form thereby the test clock signal. In one such embodiment, if a packet reception queue of the issuer is empty, the clock can be gated so that the scan chain is frozen until new packets arrive at the issuer . For example, the test data signal may be a JTAG TDI\/TDO signal, the test control signal may be a JTAG TMS signal, and the test clock signal may be a JTAG TCK signal.","In one embodiment, for example, when the issuer is used within a component-level implementation (omitted from  for purposes of clarity), issuer is configured to perform the functions described for the TAP-level implementation as well as additional functions related to propagation of scan control information via the PJTAG domain . The issuer is configured to receive one or more test control packets that also include scan control information, generate scan control signals (e.g., ShiftDR, UpdateDR, Select, CaptureDR, and the like) including the scan control information, and propagate the scan control signals via a scan control signal path.","The components  each may be implemented in any suitable manner. For example, a component  (e.g., dispatcher and\/or issuer ) may be implemented using one or more hardware elements configured to provide the dispatcher and\/or issuer functions, using a processor that is configured to execute instructions configured to provide the dispatcher and\/or issuer functions, and the like, as well as various combinations thereof.","In PJTAG domain , the packets may be implemented using any suitable format.","In one embodiment, for example, a test data packet used to transport test data signals via TDCh may have a packet format including the following fields: (1) Test_Data, including up to TDSize elements, (2) Used Bytes (if <TDSize), and (3) Bit_Position indicating the cardinal position of the first bit of the test data packet. This packet format allows up to TDSize test data bits of the test data signal to be sent within a packet. The Bit_Position field allows each element (e.g., each PJTAG component in a TAP-level implementation, each scan chain component in a component-level implementation, and the like) to align the Test_Data from the test data packet with the associated control information being propagated via TSCh in an associated test control packet. It is noted that the TDSize parameter may be a fixed value, or may be adapted to the transmission situation.","In one embodiment, for example, a test control packet used to transport test control information via TSCh may have a packet format including the following fields: (1) Test_Control_Data, including up to TSSize elements, (2) Used Bytes (if <TSSize), and (3) Bit_Position indicating the cardinal position of the first bit of the test control packet. This packet format allows up to TSSize test control bits (and, optionally, scan control bits) to be sent within a packet. The Bit_Position field allows each element (e.g., each PJTAG component in a TAP-level implementation, each scan chain component in a component-level implementation, and the like) to align the Test_Control_Data from the test control packet with the associated test data being propagated via TDCh in an associated test data packet. It is noted that the TSSize parameter may be a fixed value, or may be adapted to the transmission situation. Although primarily depicted and described in  with respect to embodiments in which the test data and test control information (and, optionally, scan control information) are conveyed using separate test data packets and test control packets (e.g., via separate physical connections or separate logical channels of a common physical connection), it is noted that in one embodiment the test data and test control information (and, optionally, scan control information) may be conveyed within the same test packets). In one such embodiment, a test data packet used to transport the test data signal and the test control signal (and, optionally, the scan control signal) may have a packet format including the following fields: (1) Test_Data, including up to TDSize elements, (2) Used Bytes (if <TDSize) for the Test_Data, (3) Test_Control_Data, including up to TSSize elements, (4) Used Bytes (if <TSSize) for the Test_Control_Data, and (5) Bit_Position indicating the cardinal position of the first bit of the test packet. This packet format allows up to TDSize test data bits of the test data signal and up to TSSize test control bits (and, optionally, scan control bits) to be sent within a packet. The Bit_Position field allows each element (e.g., each PJTAG component in a TAP-level implementation, each scan chain component in a component-level implementation, and the like) to perform alignment operations. It is noted that the TDSize and\/or TSSize parameters may be fixed values and\/or may be adapted to the transmission situation.","It is noted that, within PJTAG domain , synchronization between testing data and its associated control information is performed using the bit alignment information included within the packets of the PJTAG domain . As a result, there is no need to transport the TCK signal via PJTAG domain  and, thus, no need to sample the TCK signal at the dispatcher or to recover TCK values at the issuer . This is depicted in , with dispatcher being configured to terminate the local TCK signal (illustratively, TCK) that is received from the first JTAG domain and, similarly, with issuer being configured to generate a local TCK signal (illustratively, TCK) to be provided to second JTAG domain . As a result, the two JTAG clocks TCKand TCKare completely independent in terms of both frequency and synchronization and, thus, can be optimized to the needs of first JTAG domain and second JTAG domain , respectively. In other words, remote components are able to run on local clocks respectively. The alignment of the test data of TDCh and the control information of TSCh in order to maintain such synchronization may be performed in any suitable manner (e.g., by bitwise shifting values of the Test_Data field of test data packets propagated via TDCh ). The alignment of JTAG signals in second JTAG domain may be performed in any suitable manner (e.g., issuer may be configured to use buffering and gating on its local JTAG clock TCKin order to correct for latencies between packets received at issuer via PJTAG domain ).","It is noted that conversion between JTAG domains  and PJTAG domain  should not have any timing problems associated therewith. This will be appreciated when considering that JTAG clocks typically are quite slow given the propagation time over long wiring. In any event, dispatcher does not have any associated timing constraints, since it may simply send PJTAG packets when needed. The issuer , on the other hand, may have to handle timing constraints associated with conversion between PJTAG packets in the PJTAG domain  and JTAG signals in the second JTAG domain . For example, issuer , may be configured to buffer received PJTAG packets (and, if needed, freeze the output clock when the buffer empties), in order to generate continuous JTAG signals for second JTAG domain .","In this manner, the PJTAG protocol is an asynchronous packet protocol that is functionally equivalent to the synchronous JTAG protocol in terms of supporting the following two principles upon which JTAG is based: (1) serial scan of bits from the TDI to the TDO, and (2) synchronous assertion of the control signals on the elements of the scan chain. It is noted that connection of the elements  of PJTAG domain  in series via TDCh enables packets sent over TDCh to traverse the elements  of PJTAG domain  in series (thereby replicating principle (1) of JTAG discussed above) and connection of the elements  of PJTAG domain  in parallel via TSCh enables packets sent over TSCh to be received by the elements  of PJTAG domain  at substantially the same time (thereby replicating principle (2) of JTAG discussed above). In other words, there is a functional equivalence of the asynchronous PJTAG protocol and the synchronous JTAG protocol, thereby enabling a JTAG controller to see both JTAG components and PJTAG components on the scan chain (i.e., the interface is transparent).","As noted above, the PJTAG protocol depicted and described with respect to  may be used to directly translate JTAG signals into PJTAG packets. An example of direct translation from JTAG signals into PJTAG packets for an exemplary TAP-based implementation is depicted and described with respect to .",{"@attributes":{"id":"p-0045","num":"0044"},"figref":["FIG. 2","FIG. 1"]},"As depicted in , an exemplary JTAG chronogram  illustrates five JTAG signals associated with testing, including two test data signals (i.e., TDI and TDO), two test control signals (i.e., TMS and TCK), and a scan control signal (denoted as TAP State, which may include scan control signals such as RTI, SHIFT-DR, and the like). The exemplary JTAG chronogram  is shifting 320 bits over 327 clock cycles.","As depicted in , portions of the exemplary JTAG chronogram  are converted into associated PJTAG packets.","On TSCh , the test control packets have a size of TSSize=6 bits. A first portion of the TMS signal is converted into a PJTAG packet  in which the Test_Control_Data field includes four bits (illustratively, 1100) from the TMS signal, the Used_Bytes field indicates that four bits are used, and the Bit_Position field indicates a bit position of 0. A second portion of the TMS signal is converted into a PJTAG packet  in which the Test_Control_Data field includes three bits (illustratively, 110) from the TMS signal, the Used_Bytes field indicates that three bits are used, and the Bit_Position field indicates a bit position of 324.","On TDCh (when used to transport a TDI signal bitstream), the test data packets have a size of TDSize=8 bits. A first portion of the TDI signal is converted into a PJTAG packet  in which the Test_Data field includes eight bits (illustratively, 01000000) from the TDI signal, the Used_Bytes field indicates that eight bits are used, and the Bit_Position field indicates a bit position of 3. A second portion of the TDI signal is converted into a PJTAG packet  in which the Test_Data field includes eight bits (illustratively, 011 . . . ) from the TDI signal, the Used_Bytes field indicates that eight bits are used, and the Bit_Position field indicates a bit position of 11. A third portion of the TDI signal is converted into a PJTAG packet  in which the Test_Data field includes one bit (illustratively, 0) from the TDI signal, the Used_Bytes field indicates that one bit is used, and the Bit_Position field indicates a bit position of 323.","On TDCh (when used to transport a TDO signal bitstream), the test data packets have a size of TDSize=8 bits. A first portion of the TDO signal is converted into a PJTAG packet  in which the Test_Data field includes eight bits (illustratively, 00111111) from the TDI signal, the Used_Bytes field indicates that eight bits are used, and the Bit_Position field indicates a bit position of 3. A second portion of the TDO signal is converted into a PJTAG packet  in which the Test_Data field includes eight bits (illustratively, 111 . . . ) from the TDO signal, the Used_Bytes field indicates that eight bits are used, and the Bit_Position field indicates a bit position of 11. A third portion of the TDO signal is converted into a PJTAG packet  in which the Test_Data field includes one bit (illustratively, 0) from the TDO signal, the Used_Bytes field indicates that one bit is used, and the Bit_Position field indicates a bit position of 323.","It is noted that the translation of JTAG signals into PJTAG packets that is depicted in  is merely exemplary (e.g., any other suitable JTAG signals having any other suitable values may be used, any other suitable number of bits shifted over any other suitable number of clock cycles may be used, and the like, as well as various combinations thereof).","Although primarily depicted and described in  and  with respect to embodiments in which the test data and test control information (and, optionally, scan control information) is conveyed using separate test data packets and test control packets (e.g., via separate physical connections or separate logical channels of a common physical connection), it is noted that in one embodiment the test data and test control information (and, optionally, scan control information) may be conveyed within the same test packets). Exemplary methods associated with transport of test data and test control information (and, optionally, scan control information) within the same test packets are depicted and described in . Exemplary methods associated with transport of test data and test control information (and, optionally, scan control information) using separate test data packets and test control packets are depicted and described in .",{"@attributes":{"id":"p-0053","num":"0052"},"figref":["FIG. 3","FIG. 3","FIG. 1"],"b":["300","300","300","115"],"sub":"D "},"At step , method  begins.","At step , test signals are received. The test signals include a test data signal, a test control signal, and a test clock signal. In a JTAG domain, for example, the test data signal may be a JTAG TDI signal or a JTAG TDO signal, the test control signal may be a JTAG TMS signal, and the test clock signal may be a JTAG TCK signal. The test signals optionally may include a scan control signal (e.g., in a component-level implementation).","At step , one or more test packets are generated via sampling of the test data signal and the test control signal using the test clock signal without sampling the test clock signal, and the test clock signal is represented as bit alignment information within the one or more test packets. It is noted that, where scan control information is received via a scan control signal, the one or more test packets also may be generated to include scan control information from the scan control signal.","At step , the one or more test packets are propagated via a test channel or test channels.","In one embodiment, values from the test data signal and values from the test control signal may be combined within the same test packets. In this case, the test channel may be considered to be a single logical channel shared by the test data and the test control information.","In one embodiment, values from the test data signal and values from the test control signal may be confined to separate test packets, such as where the test packets include one or more test data packets including values sampled from the test data and one or more test control packets including values sampled from the test control signal. In this case, the test channels may be considered to be separate logical channels of a common physical channel or separate physical channels. An exemplary embodiment of a method for converting JTAG signals of a JTAG domain into PJTAG packets of a PJTAG domain for this case is depicted and described with respect to .","At step , method  ends. Although depicted and described as ending for purposes of clarity, it will be appreciated that the steps of method  may continue to be performed as long as test data signals and associated test control signals continues to be received.",{"@attributes":{"id":"p-0061","num":"0060"},"figref":["FIG. 4","FIG. 1"],"b":["400","400","115"],"sub":"D "},"At step , method  begins.","At step , test signals are received. The test signals include a test data signal, a test control signal, and a test clock signal. In a JTAG domain, for example, the test data signal may be a JTAG TDI signal or a JTAG TDO signal, the test control signal may be a JTAG TMS signal, and the test clock signal may be a JTAG TCK signal. The test signals optionally may include a scan control signal (e.g., in a component-level implementation).","From step , the method  branches into two paths associated with transport of test data and control information via a PJTAG domain, respectively. The steps of the first path associated with transport of test data are indicated using subscripts of \u201cD\u201d and the steps of the second path associated with transport of control information are indicated using subscripts of \u201cC\u201d.","At step , one or more test data packets are generated (1) via sampling of the test data signal using the test clock signal without sampling the test clock signal and (2) by representing the test clock signal as bit alignment information within the one or more test data packets. At step , the one or more test data packets are propagated via a test data channel of a PJTAG domain. From step , method  proceeds to step , where method  ends.","At step , one or more test control packets are generated. The one or more test control packets are generated (1) via sampling of the test control signal using the test clock signal without sampling the test clock signal and (2) by representing the test clock signal as bit alignment information within the one or more test control packets. It is noted that, where scan control information is received via a scan control signal, the one or more test control packets also may be generated to include scan control information from the scan control signal. At step , the one or more test control packets are propagated via a test control channel of a PJTAG domain. From step , method  proceeds to step , where method  ends.","At step , method  ends. Although depicted and described as ending for purposes of clarity, it will be appreciated that the steps of method  may continue to be performed as long as test data signals and associated test control information signals continues to be received via a JTAG interface.",{"@attributes":{"id":"p-0068","num":"0067"},"figref":["FIG. 5","FIG. 5","FIG. 1"],"b":["500","500","500","115"],"sub":"I "},"At step , method  begins.","At step , one or more test packets are received. The one or more test packets include test data, test control information, and bit alignment information. The one or more test packets optionally may include scan control information (e.g., in a component-level implementation).","At step , test signals are generated using the one or more test packets. The test signals include a test data signal including the test data, a test control signal including the test control information, and a test clock signal generated using the bit alignment information. It is noted that, where scan control information is received within the one or more test packets, the test signals also may include a scan control signal including the scan control information.","At step , the test signals are propagated via test signal paths. The test signal paths including test data signal path configured to transport the test data signal, a test control signal path configured to transport the test control signal, and a test clock signal path configured to transport the test clock signal. It is noted that, where scan control information is received within the one or more test packets, the test signal paths also may include a scan control signal path configured to transport the scan control signal.","In one embodiment, values of the test data and values of the test control information may be combined within the same test packets. In this case, the one or more test packets may be received via a test channel that is considered to be a single logical channel shared by the test data and the test control information.","In one embodiment, values of the test data signal and values of the test control information may be confined to separate test packets, such as where the test packets include one or more test data packets including the test data and one or more test control packets including the test control information. In this case, one or more test packets may be received via a test data channel and a test control channel that are considered to be separate logical channels of a common physical channel or separate physical channels. An exemplary embodiment of a method for converting PJTAG packets of a PJTAG domain into JTAG signals of a JTAG domain for this case is depicted and described with respect to .","In a JTAG domain, for example, the test data signal may be a JTAG TDI signal or a JTAG TDO signal, the test control signal may be a JTAG TMS signal, and the test clock signal may be a JTAG TCK signal.","At step , method  ends. Although depicted and described as ending for purposes of clarity, it will be appreciated that the steps of method  may continue to be performed as long as test data and associated control information continues to be received via a PJTAG domain.",{"@attributes":{"id":"p-0077","num":"0076"},"figref":["FIG. 6","FIG. 1"],"b":["600","600","115"],"sub":"I "},"At step , method  begins.","From step , method  branches into two paths associated with transport of test data and control information via a PJTAG domain, respectively. The steps of the first path associated with transport of test data are indicated using subscripts of \u201cD\u201d and the steps of the second path associated with transport of control information are indicated using subscripts of \u201cC\u201d.","At step , one or more test data packets are received via a test data channel of a PJTAG domain. The one or more test data packets include test data and bit alignment information. At step , a test data signal is generated using the one or more test data packets. A The test data signal conveys the test data and is configured for transport via a test data signal path. From step , method  proceeds to step .","At step , one or more test control packets are received via a test control channel of a PJTAG domain. The one or more test control packets include test control information and bit alignment information. It is noted that the one or more test control packets also may include scan control information. At step , a test control signal is generated using test control information from the one or more test control packets. The test control signal conveys the test control information and is configured for transport via a test control signal path. It is noted that, where scan control information is received within the one or more test control packets, a scan control signal is generated using the scan control information from the one or more test control packets. From step , method  proceeds to step .","At step , a test clock signal is generated using the bit alignment information from the one or more test data packets and the one or more test control packets. The test clock signal conveys test clock information and is configured for transport via a test clock signal path.","At step , the generated signals are propagated. The test data signal is propagated via a test data signal path, the test control signal is propagated via a test control signal path, and the test clock signal is propagated via a test clock signal path. It is noted that, where scan control information is received within the one or more test control packets, the scan control signal is propagated via the scan control signal path.","At step , method  ends. Although depicted and described as ending for purposes of clarity, it will be appreciated that the steps of method  may continue to be performed as long as test data and associated control information continues to be received via a PJTAG domain.","In one embodiment, the PJTAG protocol may be configured for use with a network communication interface. In one embodiment, the PJTAG protocol may be wrapped inside of a protocol used for a high-speed interface. For example, the PJTAG protocol may be wrapped inside of the Transmission Control Protocol (TCP)\/Internet Protocol (IP) to form a TCP\/IP-based wrapping of PJTAG, inside of Universal Serial Bus (USB) packets to form a USB-based wrapping of PJTAG, and the like. An example is illustrated in .",{"@attributes":{"id":"p-0086","num":"0085"},"figref":"FIG. 7"},"As depicted in , the exemplary network  includes a plurality of nodes -(collectively, nodes ) and a test host . The nodes  and test host  are each connected to an Ethernet network . As depicted in , each node  includes four cards (labeled as cards A, B, C, and D) which are connected via a bus (e.g., PCIExpress in this example). As further depicted in , each node  has at least one Peripheral (P) connected thereto through at least one associated USB connection to at least one of the cards of the node . The nodes  may be any suitable nodes which may be configured and communicatively coupled in this manner (e.g., desktop PCs and\/or any other suitable nodes). Although omitted from  for purposes of clarity, it is assumed that each of the cards and peripherals of each of the nodes  includes an internal JTAG subsystem.","As depicted in , various embodiments of the PJTAG protocol enable exemplary network  to be viewed as a JTAG system despite the fact that the JTAG subsystems of exemplary network  are not physically connected together. The PJTAG protocol enables the JTAG subsystems to be interfaced together through high-speed functional connections. This is depicted as JTAG\/PJTAG partitioning  of , which illustrates which portions of exemplary network  are JTAG domains  and which portions of exemplary network  are PJTAG domains . It is noted that, in the JTAG\/PJTAG partitioning , each JTAG domain  corresponds to one of the JTAG domains  of  (e.g., either first JTAG domain or second JTAG domain , depending upon the orientation of the JTAG domain  with respect to an associated PJTAG domain ) and each PJTAG domain  corresponds to the PJTAG domain  of . It is further noted that dispatchers (e.g., similar to dispatcher of ) may be provided at interface points in a direction from one of the JTAG domains  to one of the PJTAG domains  and, similarly, issuers (e.g., similar to issuer , of ) may be provided at interface points in a direction from one of the PJTAG domains  to one of the JTAG domains .","As noted above, use of PJTAG enables exemplary network  to be represented as JTAG\/PJTAG partitioning . As a result, the test host  will see exemplary network  as being the equivalent system  depicted in . For example, test host  sees the cards -as having parallel paths -, respectively, where each path  is accessible to test host  via TDI\/TDO paths and, further, is composed of a respective series of JTAG domains  and PJTAG domains . For example, a first path of equivalent system  that is associated with card includes the following sequence of components: Test Host, A, P, P, B, C, D, Test Host. For example, a second path of equivalent system  that is associated with card includes the following sequence of components: Test Host, A, P, B, C, D, PTest Host. For example, an n-th path of equivalent system  that is associated with card includes the following sequence of components: Test Host, P, A, B, C, D, P, Test Host.","As depicted in , the equivalent system  is essentially a multi-drop architecture (e.g., which may be typical of ATCA). Thus, the test host  is able to analyze the equivalent system  and generate associated testing bitstreams using any suitable tools (which may include traditional testing tools).","It is noted that PJTAG also may be configured for use in various other types of environments.","In one embodiment, for example, PJTAG may be configured for use with System JTAG (SJTAG).","In one embodiment, for example, PJTAG may be configured for use with integrated approaches (e.g., System-on-Chip (SoC), Network-on-Chip (NoC), and the like), where PJTAG could be used as a solution to access the different components for testing and\/or maintenance by using already-implemented functional buses and connections. It is noted that  is generic enough to represent at least some such embodiments (e.g., SoC, NoC, and the like).","It is noted that PJTAG can be used to connect through virtually any packet-based interface, as long as a local Dispatcher\/Issuer interface is implemented.","In one embodiment, for example, PJTAG may be configured for use in software applications (e.g., software debugging, virtual applications, and the like). The use of JTAG for software debugging is already common in embedded systems. For example, most processors present a JTAG infrastructure to access the embedded hardware components (e.g., internal registers). Debuggers (e.g., GDB and the like) can then be used to remotely debug the processor, with the associated JTAG communications being transparent to the user. In one embodiment, PJTAG may be used to extend this concept to purely software components as follows: a software module can implement a PJTAG interface, thereby making it possible to access internal data structures of the software module as if they were hardware components. The software module can implement a PJTAG interface using a messaging Application Programming Interface (API), such as POSIX or any other suitable messaging API. In one embodiment, this concept of using PJTAG for software components can be used for virtual applications using virtualization software, in which case the virtualization software can present a PJTAG interface and allow access to the data structures modeling the virtualized hardware (which will then appear on the JTAG chain along with the real hardware). An example is depicted and described with respect to .",{"@attributes":{"id":"p-0096","num":"0095"},"figref":"FIG. 8"},"As depicted in , a computer  includes a General Processing Unit (GPU) motherboard, composed of physical components including a Central Processing Unit (CPU)  and an additional acceleration units (illustratively, a Floating-Point Processing Unit (FPU) ). The physical components of the GPU motherboard are connected in a JTAG chain for debugging and\/or maintenance purposes. If the GPU motherboard is used to implement Virtual Hardware, the CPU  is configured to run virtual components, including Virtual Machine Monitor (VMM) software  which, in turn, is configured to run one or more Virtual Machines (VMs) -(collectively, VMs ).","As further depicted in , via use of PJTAG the virtual components (i.e., VMM  and VM(s) ) can appear directly on the JTAG chain and, thus, be treated in the same manner as the physical components of the JTAG chain. This is illustrated in JTAG chain , which includes the following sequence of physical and virtual components: CPU  (JTAG domain)  VMM  (PJTAG domain)\u2192VM(PJTAG domain)\u2192VM(PJTAG domain)\u2192 . . . \u2192VM(PJTAG domain)\u2192FPU (JTAG domain). This greatly simplifies debugging as there is a single unified interface using a common set of tools for both the physical components and the virtual components. Additionally, this also can enable new debugging and monitoring capabilities, because the virtual resources and the hardware running the virtual resources are accessed together via the JTAG chain, thereby simplifying correlation of the behavior of the virtual resources and the hardware running the virtual resources. It is noted that the asynchronous nature of embodiments of PJTAG overcomes the synchronous nature of JTAG that previously prevented integration of software components in the JTAG chain.","Although primarily depicted and described with respect to use of PJTAG in environments that include a combination of JTAG domains and PJTAG domains, it is noted that PJTAG may be used to implement a fully-PJTAG system in which all of the relevant components are connected via packet-based interfaces.","Although primarily depicted and described herein with respect to embodiments in which the test packets transport each of the values of the test signals, it is noted that in at least some embodiments only changes to values of certain signals may be sent within the test packets, thereby reducing the amount of information that needs to be transported via the test packets. For example, since certain test control signals are stable during shifting (e.g., the JTAG TMS signal) such that it is uneconomical to keep sending the same value in the test packets, the sending end (e.g., dispatcher ) may be configured to only encode changes in the value of a test control signal within the test packets and the bit alignment information can be used to indicate to the receiving end (e.g., issuer ) that the value of the test control signal has changed. It will be appreciated that similar economizations may be made for other types of signals (e.g., for any other signal or signals were the values are expected to remain the same for a relatively long enough time to justify use of such economizations.",{"@attributes":{"id":"p-0101","num":"0100"},"figref":"FIG. 9"},"As depicted in , computer  includes a processor element  (e.g., a central processing unit (CPU) and\/or other suitable processor(s)) and a memory  (e.g., random access memory (RAM), read only memory (ROM), and the like). The computer  also may include a cooperating module\/process  and\/or various input\/output devices  (e.g., a user input device (such as a keyboard, a keypad, a mouse, and the like), a user output device (such as a display, a speaker, and the like), an input port, an output port, a receiver, a transmitter, and storage devices (e.g., a tape drive, a floppy drive, a hard disk drive, a compact disk drive, and the like)).","It will be appreciated that the functions depicted and described herein may be implemented in software (e.g., via implementation of software on one or more processors) and\/or may be implemented in hardware (e.g., using a general purpose computer, one or more application specific integrated circuits (ASIC), and\/or any other hardware equivalents).","It will be appreciated that the functions depicted and described herein may be implemented in software (e.g., for executing on a general purpose computer (e.g., via execution by one or more processors) so as to implement a special purpose computer) and\/or may be implemented in hardware (e.g., using one or more application specific integrated circuits (ASIC) and\/or one or more other hardware equivalents).","In one embodiment, the cooperating process  can be loaded into memory  and executed by the processor  to implement functions as discussed herein. Thus, cooperating process  (including associated data structures) can be stored on a computer readable storage medium, e.g., RAM memory, magnetic or optical drive or diskette, and the like.","It will be appreciated that computer  depicted in  provides a general architecture and functionality suitable for implementing functional elements described herein and\/or portions of functional elements described herein. For example, the computer  provides a general architecture and functionality suitable for implementing one or more of portions of dispatcher , dispatcher , portions of issuer , issuer , portions of a node , a node , portions of a test host , a test host , and the like.","It is contemplated that some of the steps discussed herein as software methods may be implemented within hardware, for example, as circuitry that cooperates with the processor to perform various method steps. Portions of the functions\/elements described herein may be implemented as a computer program product wherein computer instructions, when processed by a computer, adapt the operation of the computer such that the methods and\/or techniques described herein are invoked or otherwise provided. Instructions for invoking the inventive methods may be stored in fixed or removable media, transmitted via a data stream in a broadcast or other signal bearing medium, and\/or stored within a memory within a computing device operating according to the instructions.","Although various embodiments which incorporate the teachings of the present invention have been shown and described in detail herein, those skilled in the art can readily devise many other varied embodiments that still incorporate these teachings."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The teachings herein can be readily understood by considering the following detailed description in conjunction with the accompanying drawings, in which:",{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 9"}]},"DETDESC":[{},{}]}
