---
title: System and method for updating or modifying an application without manual coding
abstract: The invention provides, in some aspects, a computer-implemented method for enabling enhanced functionality in a software application. The method includes executing, on a computer, an enhancement engine that is communicatively coupled to a rules base (or other store that contains rules) and/or a rules engine that executes rules (e.g., from the rules base). The enhancement engine receives a request to enable enhanced functionality in an application that is defined, at least in part, by a plurality of such rules, where the request specifies a selected rule in the application for such enhancement. The enhancement engine identifies (or ascertains) a new rule at least partially providing the enhanced functionality and (i) updates the rules base (or other store) to include the new rule along with the others that define at least a portion of the application and/or (ii) effects execution by the rules engine of the new rule along with those others.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09195936&OS=09195936&RS=09195936
owner: PEGASYSTEMS INC.
number: 09195936
owner_city: Cambridge
owner_country: US
publication_date: 20111230
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE ILLUSTRATED EMBODIMENT"],"p":["The present invention relates generally to a method and system for implementing enhanced functionality in a software application (hereinafter \u201capplication\u2019). More specifically, embodiments of the present invention relate to a method and system for modifying an application to allow for enhanced functionality related to the collection, transmission, manipulation, display and storage of data, e.g., of a sensitive nature.","Businesses, governmental agencies, organizations and individuals increasingly rely on applications executing on computer systems to accomplish a wide array of tasks. From filing an insurance claim to executing a financial transaction, computer systems facilitate certain actions that may be otherwise time consuming or prohibitively complex.","Computer systems are often configured by software applications that execute a series of procedural process actions or steps in order perform a desired task. For example, an application can be configured to complete an online product order by performing four steps (or process actions), including, product identification, user information collection, payment information collection, and order confirmation, where one or more of those steps is associated with a corresponding user interface.","When creating a software application, developers utilize programming languages, such as C++, Java, ASP, PHP, etc., to define the steps and, more generally, the functionality of that application. For example, in an application for charting and managing operation of a plant, a developer may draft source code programming steps in the Java language to implement the process flow, business logic, user interface and data model used to achieve the task of creating and managing human (and other) resource records. That Java code is compiled to create a version of the application which is executable by a computer system.","Applications frequently collect, manipulate, analyze or otherwise utilize data that may be considered sensitive or that may otherwise require verification, validation, or other due care. For example, an order placement application may collect credit card information or other financial data, while an enterprise human resources application may collect and store employees' social security numbers, childrens' names, and so forth. Federal regulations, state regulations and corporate privacy policies (hereinafter \u201cdata policies\u201d) often require enhanced handling of such sensitive (or other) data. A data policy may dictate that a data property be stored in an encrypted database or require detailed audit records to be generated in the event the value of the data property is modified. Additional steps may be required, as well. For example, within the health care industry, the Health Insurance Portability and Accountability Act (HIPAA) requires that a patient be notified in the event of a data breach involving the patient's personal health information.","Properly harmonizing an application with relevant data policies can be problematic. Developers who design and build applications are frequently unaware or under informed as to relevant data policies and, even those who are aware of those policies, find effecting them can be complicated and time consuming. Furthermore, even in instances where developers properly implement relevant data policies, changes to those policies can place the application out of compliance, necessitating post-facto source code re-writes.","Developers are not the only personnel in an enterprise involved in data policy compliance. Business users must often interface with the developers to identify sensitive data properties during initial design and during implementation phases. Moreover, unless those business personnel have the skills to directly modify a software application, those personnel must team with developers to enhance the functionality of a given application whenever there is a data policy change.","As a result, an object of the invention is to provide improved methods and systems for digital data processing and, more particularly, to facilitate rapid modification of software applications to provide enhanced functionality for the collection, transmission, manipulation, display and storage of data.","The foregoing are among the objects attained by the invention, which provides, in some aspects, a computer-implemented method for enabling enhanced functionality in a software application. The method includes executing, on a computer, an enhancement engine that is communicatively coupled to a rules base (or other store that contains rules) and\/or a rules engine that executes rules (e.g., from the rules base). The enhancement engine receives a request to enable enhanced functionality in an application that is defined, at least in part, by a plurality of such rules, where the request specifies a selected rule in the application for such enhancement. The enhancement engine identifies (or ascertains) a new rule at least partially providing the enhanced functionality and (i) updates the rules base (or other store) to include the new rule along with the others that define the application and\/or (ii) effects execution by the rules engine of the new rule along with those others.","Related aspects of the invention provide a method as described above in which the new rule comprises an updated version of at least one of the said plurality of rules that defines the application, at least in part.","Further related aspects of the invention provide a method as described above in which the new rule comprises an updated version of the selected rule.","Further related aspects of the invention provide a method as described above in which the enhancement engine reports an error if the one of the said plurality of rules is unavailable for updates.","Yet still further aspects of the invention provide a method as described above in which the receiving step includes providing a user interface that is used to specify the selected rule. In a related aspect, the receiving step includes marking the selected rule in a selectable list displayed in the user interface. In a further related aspect, the receiving step includes specifying the selected rule by marking an other rule that references the selected rule.","Other aspects of the invention provide a method as described above in which the selected rule is a data element. In a related aspect, the identifying step includes identifying a new rule that enables the application to identify an attempt to assign a new value to the data element by detecting a discrepancy between the new value and another value of the data element that was previously stored in a memory. In a still further related aspect of the invention, the new rule enables the application to perform an additional step prior to assigning the new value to the data element. The new rule can instead or in addition, perform the additional step of prompting a user to input a reason for assigning the new value. Moreover, it can enable the application to generate an audit record comprising the new value, the other value and the reason.","Yet other aspects of the invention provide a method as described above and which the new rule enables the application to perform the additional step of prompting a user to any of authenticate and re-authenticate his or her identity.","Still other related aspects of the invention provide a method as described above in which the new rule enables the application to perform an additional step of executing an approval flow.","Still yet other aspects of the invention provide a method as described above in which the receiving step includes receiving a request to enable the enhanced functionality for a rule that is an action associated with a process flow. According to these aspects of the invention, the new rule can enable the application to execute an approval flow before and\/or after that action.","These and other aspects of the invention are evident in the drawings and in the text that follows.",{"@attributes":{"id":"p-0030","num":"0029"},"figref":["FIG. 1","FIG. 1"],"b":["100","100","102","124","102","106","108","110","102","102"]},"According to the embodiment of the present invention illustrated in , the Digital Data Processor  is configured to enable operation of illustrated Rules System , an environment for development and execution of applications, such as an Application . The illustrated Rules System  includes a Rules Engine , a Rules Base , an Enhancement Engine  and an Application . The Rules Base  may consist of databases, data stores, and the like, stored on any conventional digital data storage medium (e.g., RAM, CD-ROM, read-only memory, hard disk etc.) for storing and retrieving Rules . The Rules  may define any aspect of an application (sometimes referred to herein as a \u201crules-based application,\u201d a \u201csoftware application,\u201d and so forth), including application profile data, process models, process actions, properties, and other metadata, scripts or logic necessary to support the application, as implemented and operated in accord with the illustrated architecture. In response to events signaled to and\/or otherwise detected by the Rules Engine , the Rules Engine  may communicate with the Rules Base , or any other data store, to retrieve one or more of the Rules  that are stored and\/or managed by the Rules Base  or the other data store. The Rules Engine  may also be configured to execute and\/or otherwise process the Rules  that are retrieved from the Rules Base  or other rule repositories.","According to certain embodiments of the present invention, a rule may comprise metadata. This metadata can include data elements and\/or method elements. Such method elements can be procedural or declarative. For example, a method element may be declarative insofar as it sets forth (declares) a relation between variables, values, and so forth (e.g., a loan rate calculation or a decision-making criterion), or it declares the desired computation and\/or result without specifying how the computations should be performed or the result achieved. By way of non-limiting example, the declarative portion of a metadata may declare the desired result of retrieval of a specified value without specifying the data source for the value or a particular query language (e.g., SQL, CQL, .QL etc.) to be used for such retrieval. In other cases, the declarative portion of a metadata may comprise declarative programming language statements (e.g., SQL). Still other types of declarative metadata are possible. In the former regard, for example, such a structure may be procedural insofar as it comprises one or more of a series or ordered steps (e.g., in a workflow).","While some rules may comprise metadata that are wholly procedural and others may comprise those that are wholly declarative, embodiments of the present invention also contemplates rules that comprise both procedural and declarative metadata (e.g., a rule that includes one portion that defines one or more steps of a workflow and another portion that defines a decision-making criterion).","According to certain embodiments of the present invention, certain rules that comprise metadata structures may also reference and\/or incorporate other such rules, which themselves may, in turn, reference and\/or incorporate still other such rules. Thus, a rule represented by metadata structure may include a procedural portion that defines a workflow, or process flow, as well as a reference to another metadata-based rule that specifies a decision-making criterion for one of the steps in that workflow.","An advantage of rules that comprise metadata structures over conventional rules is that such rules provide users with the flexibility to apply any of code-based and model-driven techniques in the development and modification of software applications. Particularly, like models in a model-driven environment, metadata structures may comprise data elements that can be used to define any aspect of a digital data processing system at a higher level of abstraction than source code written in programming languages such as Java or C++. On the other hand, users may also embed programming language statements into metadata structures if they deem that to be the most efficient design for the system being developed or modified. At run-time, the data elements of the metadata structures along with programming language statements (if any) are converted into and\/or used to generate executable code by the Rules Engine .","Rules System , including Rules Engine  and Rules Base , are constructed and operated in the manner of rules-based business process management systems of the type known in the art (e.g., and commercially available, for example, from the Assignee hereof, Pegasystems, Inc.), as adapted for inclusion and operation of Enhancement Engine  and otherwise in accord with the teachings hereof.","In some embodiments, rules may be the primary artifacts that get created, stored (e.g., in the Rules Base ) or otherwise manipulated to define and\/or modify the overall functionality of rules-based applications (e.g., such as Application ) that businesses, governmental agencies, organizations and individuals may execute on digital data processing system  to accomplish any of a variety of tasks at run-time. By way of non-limiting example, a plurality of the Rules  stored in the Rules Base  define aspects of an Application  used within a specific industry or a business function (e.g., human resources, finance, healthcare, telecommunications etc.) or across industries (e.g., a project management application, issue-tracking application etc.), or in some other way. At run-time of the Application , the Rules Engine  may retrieve any portion of the plurality rules that define the Application  from the Rules Base . The retrieved rules may then be executed and\/or otherwise processed by the Rules Engine  as the illustrated Executing Rules .","At run-time or execution of an application (e.g., Application ), any data that is collected, generated, stored or otherwise processed by the application may be referred to as transactional data. By way of non-limiting example, transactional data may include information received through a user interface, data generated by an application (e.g., Application ) at run-time, or information received by the application from any external process or systems. In the illustrated embodiment, such transactional data may be stored in the Rules Base  or any other data store accessible to the Rules System .","According to certain embodiments of the present invention, at least some of the rules defining Application  are configured as metadata structures that are used e.g., by the Rules Engine , to generate source code. Such source code can in turn be converted, e.g., again by Rules Engine , to an intermediate or executable (collectively, \u201cexecutable\u201d) form, here, for example, in Java. That generation and conversion can be performed each time a particular metadata rule is retrieved for execution by the Rules Engine , though, preferably it is done less often. Thus, for example, in the illustrated embodiment, the first time that a particular metadata rule is implicated for a specific context at run-time of the Application , the metadata portion of that rule is retrieved from the rules repository (e.g., Rules Base ) by the Rules Engine , used to generate Java source code that is compiled into a Java class, executed, and stored into a Java cache. All subsequent references to the same rule for the same context will simply reuse the Java class that has already been generated and stored in the Java cache. As illustrated in , the Executing Rules  may represent the Java classes, complied code and\/or rules to be compiled. In alternative embodiments of the present invention, the rules may be used to generate C++ classes or other compilable, interpretable or directly executable computer code.","According to certain embodiments of the present invention, the Rules Engine  may only retrieve and\/or otherwise process a portion of the rules that define the functionality of Application . By way of non-limiting example, if only a single workflow or process action of the Application  is implicated by a request or event signaled to and\/or otherwise detected by the Rules Engine , the Rules Engine  may only retrieve and\/or otherwise process the rules that are associated with the implicated workflow or process action.","According to the embodiment of the present invention illustrated in , the Application , Rules Base  and the Rules Engine  are all communicatively connected to Enhancement Engine , which is constructed and operated as discussed herein. In the illustrated embodiment, the Enhancement Engine  responds to a request for enabling enhanced functionality associated with any aspect of a software application (e.g., Application ) by identifying one or more new rules (i.e., rules in addition to and\/or modified from those that form part of the metadata and\/or source code of Application ) that may be executed or otherwise processed by the Rules Engine  at run-time of the application to Application  to implement the desired enhanced functionality, as discussed in more detail below. Those \u201cnew\u201d rules may be updated versions of one or more rules that are currently define or are otherwise part of the application where the new rules replace\/supersede the current rules, or they may be additional rules that supplement those current rules.","According to certain embodiments of the present invention, the Enhancement Engine  may be integrated into the Rules Engine  or implemented as one or more separate components and\/or modules as part of the Rules System . Alternatively or in addition, it may be coupled to the Rules Base  for direct addition and\/or modification of rules contained or otherwise stored in the Rules Base . In certain embodiments, at least a portion of the Enhancement Engine  may itself be implemented through rules that are stored in a rules repository (e.g., Rules Base ) and executed at run-time using a Rules Engine (e.g., ).",{"@attributes":{"id":"p-0043","num":"0042"},"figref":"FIG. 2","b":["200","116","118"]},"By way of non-limiting example, an embodiment of the present invention may be utilized in connection with an application (e.g., Application ) used by customer service representatives (CSRs) to process customer data at a call center. In an effort to prevent unauthorized access to sensitive customer data, a business manager at the call center with no software development experience may wish to alter the functionality of the application to require all CSRs to re-authenticate themselves prior to viewing and\/or processing that sensitive data. Implementing this enhanced functionality quickly without having to wait for skilled development resources to become available would help to effectively mitigate the risk associated with unauthorized access of sensitive customer information. The methods and techniques described herein provide businesses, governmental agencies, organizations and individuals with such ability to manage risk without overly relying on the routinely scarce and expensive skilled IT resources.","According to an embodiment of the present invention described in , method  begins at step  by specifying (e.g., through action of an administrator or other user via a user interface) a rule that is associated with an application and that is to be enhanced. Continuing the prior example, in a rules-based implementation of an application for completing an online product order, one or more rules associated with the collection of credit card numbers or other payment information will likely be specified in step .","Following the specification of at least one rule in step , method  continues at step  by identifying a new rule that defines at least a portion of the desired enhanced functionality to be performed during execution of the application. The new rule may define the enhanced functionality by providing a new action, creating an association with an existing process flow and\/or otherwise enabling additional processing within the application. As used herein, the \u201cnew rule\u201d may include one or more rules and, as otherwise evident from context, \u201cidentifying\u201d may mean\u2014in addition to ascertaining, determining, or the like\u2014adding or generating one or more rules that did not previously exist, retrieving or otherwise accessing one or more rules that were not previously accessible by the Rules Engine , and\/or updating one or more existing rules (e.g., those identified in step ) to create a new version of the existing rule. Thus, using the example of the product ordering application above, identifying a new rule may comprise adding or generating one or more rules that define a new credit card or bank account validation process and\/or updating one or more existing rules to trigger the new validation functionality after the payment information collection step of the application.","Following the identification of the new rule at step , the new rule is then used to modify the application, at step . In an instance where the new rule that defines the enhanced functionality is a modified version of an existing rule that defines at least a portion of the application, the existing rule is modified by the Enhancement Engine  (e.g., in the Rules Base  or other rules repository) and\/or is communicated by the Enhancement Engine  to the Rules Engine  for execution or other processing at run time in lieu of the existing rule and in connection with the other rules defining the application. Alternatively or in addition, in an instance where the enhanced functionality is defined through one or more additional rules (i.e. rules that did not previously exist or were not previously accessible by the application), such additional rules are stored in Rules Base  (or other rules repository accessible by the application) along with the other existing rules defining the application and\/or communicated by the Enhancement Engine  to the Rules Engine  for execution or other processing at run time in connection with the other existing rules. In addition to and\/or in lieu of storing the additional rules to the Rules Base  and\/or communicating them to the Rules Engine , the Enhancement Engine  can link or otherwise associate those additional rules with the application such that the additional rules are executed (e.g., by the Rules Engine ) along with the application to enable the enhanced functionality.","Continuing with the example of the online product ordering application that may be modified using the method  shown in , new rule identified in step  may comprise one or more additional rules that define a validation process and an updated version of an existing user interface rule for payment information collection. The updated version of the user interface rule may trigger the execution of new validation process when a user inputs credit card information at the payment information collection step at run-time of the application.","In cases where identification of a new rule in step  comprises the Enhancement Engine  updating an existing rule to create a new version, the existing rule may be initially locked (e.g., by a user for other manual updates) or otherwise unavailable to be updated by the Enhancement Engine . In such instances, the Enhancement Engine  may report an error to provide notification of the failed update attempt and\/or queue the update to be completed at a later time.","According to some embodiments of the present invention, a user interface may be executed or otherwise displayed (e.g., on a client device ) to communicate with the Enhancement Engine  (e.g., over a network ) in order to specify enhanced functionality to be associated with at least a portion of an application (e.g., Application ). In such embodiments, the user interface may be configured to display a selectable list of rules that define at least a portion of the application for which enhanced functionality may be specified. These rules may be related to any aspect of the application, including but not limited to, workflow process, user interface generation, data capture and validation, integration with legacy systems, decision logic and security. The user may select one or more rules from the list for which enhanced functionality will be specified. Furthermore, a user may also indicate a type of enhanced functionality corresponding to the one or more selected rules. Still other variations in the design and functionality of the user interface are possible in other embodiments of the invention.","According to one embodiment of the invention, the rules included in the selectable list may be grouped into a process flow, or workflow category that includes the steps or actions executed to complete a given task. In this regard, it will be appreciated that each action within a process flow may have related rules that define the data elements, user interface, business logic or any other configurable setting needed to perform that action or step within a process. By way of non-limiting example, an action within a process flow configured to collect user information may have related rules which define the display and behavior of the user interface implemented to collect the user information, the data elements input and\/or processed by the user interface, any data validation rules implemented by the user interface, and any other features of the user interface.","As illustrated in , a Process Flow  represents a process flow that may be associated with an application (e.g., Application ). The process flow specifies a plurality of actions to perform a task within the application. The Process Flow  comprises indicators for the start and end of the process flow in addition to Action A, Action B, and Action C. Actions A-C represent steps, or process actions, performed while executing the Process Flow . For example, in an embodiment of the present invention wherein the Process Flow  represents a portion of a medical billing system, Action A may be configured to collect patient address information, Action B may be configured to collect patient medical history information, and Action C may be configured to collect health insurance information.","According to the embodiment of the present invention illustrated in , the Enhancement Engine  generates a User Interface  related to the Process Flow , wherein the User Interface  is utilized by a user to identify which steps or actions require the addition of enhanced functionality. The User Interface  provides a Selectable Action List  which includes the actions of the Process Flow  (i.e., Action A, Action B and Action C). The User Interface  is further configured to allow for specification of a certain type of enhanced functionality (i.e., enhanced auditing) to be associated with one or more of the actions displayed in the Selectable Action List . As shown in the Selectable Action List  of the User Interface , the Action B has been selected for enhanced auditing. Once this selection is transmitted to the Enhancement Engine  through the User Interface , the Enhancement Engine  will update (e.g., by employing the method described in ) the Process  to include the enhanced audit functionality for Action B. As a result, any user without any programming or other software development training (hereinafter a \u201cbusiness user\u201d) can easily identify actions from the Selectable Action List  to enable enhanced functionality without the need for writing any code or requiring the help of a skilled developer. Thus, applications can be quickly updated or modified in response to the ever-changing business requirements for such applications.","According to the illustrated embodiment in , an Enhanced Process Flow  represents an updated version of the Process Flow  which includes the enhanced audit functionality that was specified through the User Interface . At runtime of any application (e.g., Application ) which incorporates the Enhanced Process Flow , the Before Action  and the After Action  will be executed to enable the enhanced audit functionality for that application. As illustrated, the Before Action  has been added prior to the selected Action B  and the After Action  has been added after the selected Action B , within the Enhanced Process Flow . The Before Action  and the After Action  facilitates enhanced auditing of the information related to the Action B  by monitoring any changes made to the values of data elements or properties associated with the Action B . For example, if the Action B  is configured to generate and display a user interface containing credit card information (e.g., cardholder name, credit card number, expiration date, security code), the enhanced audit functionality may monitor any changes made to the credit card information through that user interface while Action B  is being performed. To monitor such changes, the Before Action  may store in memory the value of the properties or data elements associated with the Action B  before execution of Action B . The value of a property or data element may comprise transactional data as described above. Following execution of the Action B , the After Action  compares the value of the properties provided in response to the Action B  with the value of the properties previously stored in memory. In the event of a discrepancy between the two values, the After Action  may trigger enhanced audit functionality by prompting a user to provide additional information to explain the reason for making the change that resulted in the discrepancy, require a user to authenticate and\/or re-authenticate their identity, or require the performance of any other actions or steps that could help maintain the authenticity of the underlying data record being updated through the Enhanced Process Flow . Such enhanced audit functionality is further discussed below in connection with ,  and .","The embodiment of the present invention illustrated in  allows for auditing of all property values associated with a selected action (e.g., all property values associated with the Action B). As a result, if Action B provided for generating a user interface which includes the properties of user name, password and address, each of the values for these properties will be monitored for changes as a result of the selection of Action B made through the User Interface . However, an application may only require enhanced audit functionality for only a sub-set of the property values associated with a selected action. For example, in an embodiment of the present invention where a user interface associated with an action displays the properties of patient name, patient address and medical history, the applicable data policies for the application may only require monitoring changes to the values of the patient name and medical history and not patient address. As such, according to an embodiment of the present invention, the enhanced audit functionality may be enabled to ignore any changes made to the patient address and only trigger an enhanced audit functionality (e.g., via Before Action  and After Action  as described above) in the event that a change is made to the values of patient name and\/or medical history properties. Specification of such targeted enhanced audit functionality is further explained below in connection with the discussion for .",{"@attributes":{"id":"p-0056","num":"0055"},"figref":["FIG. 4","FIG. 3","FIG. 4","FIG. 4"],"b":["400","402","404","402","406","400","402","408","406","408","406","408","408","412","414"]},"In order to facilitate the targeted enhanced audit functionality, the Enhancement Engine  may add and\/or update entries in the rules repository (e.g., Rules Base ) where the tagged\/selected property rules are stored, or elsewhere in a separate database, table or other storage medium. By way of non-limiting example, such entries may be added and\/or updated by the Enhancement Engine  after a user submits their property selection(s) from the Selectable Property List  using the User Interface . In a rules-based system (e.g., Rules System  in ), the Enhancement Engine  may update the metadata associated with the one or more rules that define the selected properties, wherein the metadata is stored in a rule repository (e.g., Rules Base ) and is updated to provide an indicator at run-time to ignore the selected properties for the purposes of the enhanced functionality. In another embodiment, the Enhancement Engine  may add a new rule or a database table to track the ignored properties at run-time. Still other variations are possible in the means to track the properties, actions, process flows or any other rule that may be selected or tagged for targeted enhanced functionality (e.g., ignoring certain properties for enhanced audit purposes).","It will be appreciated that in an alternative embodiment, the Selectable Property List  included in User Interface  may be designed differently. For example, the Selectable Property List  could be configured such that all properties are marked as \u201cIgnore\u201d and a user has to specifically tag or specify those properties that will be associated with any enhanced functionality (e.g., audit). Furthermore, the Selectable Property List  may be dynamically updated to add properties to and\/or delete properties from the Selectable Property List  based on a user selecting and\/or deselecting action(s) from the Selectable Action List . Still other variations in the design and functionality of the User Interface , Selectable Action List  and the Selectable Property List  are possible.",{"@attributes":{"id":"p-0059","num":"0058"},"figref":["FIG. 5","FIGS. 3 and 4","FIGS. 3 and 4","FIG. 5"],"b":["500","300","400","302","402","306","404","500","502","504","506","510","504","510","506","504"]},"Similar to the process flows previously described, Process Flow  includes a series of actions associated with an application or portion of an application (e.g., Application ). The User Interface  is generated related to the Process Flow  such that a Selectable Action List  is displayed on the User Interface  including the actions of the Process Flow  (i.e., Actions A, B and C). The Selectable Action List  allows for identification of one or more these actions for which an enhanced \u2018Post-Approval\u2019 functionality can be specified. Once enabled, this \u2018Post-Approval\u2019 functionality will keep the process flow from completing the selected action\/step and proceeding to the next step until \u2018Post-Approval\u2019 processing is completed. Such an enhanced functionality may be used in an instance where a manager is required to approve changes made during Action B  before proceeding to Action C .","In the illustrated embodiment, Action B of Process Flow  is selected from the Selectable Action List . Once the Enhancement Engine  receives this user selection through the User Interface , it will automatically update the Process Flow  to add the Approval Action  after the selected Action B and generate an Enhanced Process Flow  with the \u2018Post-Approval\u2019 enhanced functionality incorporated therein. This enhanced functionality makes use of the Approval Flow  that is referenced by Approval Action . Along with updating Process Flow  (and\/or any steps included therein) to generate the Enhanced Process Flow , the Enhancement Engine  may also have generated and\/or updated Approval Action  to provide a link between the Enhanced Process Flow  and a pre-existing Approval Flow . Alternatively or in addition, the Approval Flow  may itself be generated by the Enhancement Engine  to enable the enhanced approval functionality in response to the selection through the User Interface . In alternative embodiments, multiple approval actions (e.g., ) and corresponding approval flows (e.g., ) may be associated with one or more enhanced process flows (e.g., ). Similarly, certain approval flows may link to one or more other approval flows. Still other variations in the configuration of enhanced approval functionality are possible.","As illustrated, the Approval Action  may be configured to halt processing of the Enhanced Process Flow  at run-time and initiate the Approval Flow . Actions ,  and  included in the Approval Flow  may be performed before the run-time processing returns to the Enhanced Process Flow  and Action C  is initiated. In addition, any of the Actions A, B and C that were part of the Process Flow  may be updated in the Enhanced Process Flow  to account for the interim processing specified by the Approval Flow . This approval processing may be explained by way of a non-limiting example where the Process Flow  defines the steps to complete a product return by performing Action A to receive product information, Action B to receive payment information and Action C to reimburse the customer for the purchase price of the returned product. A company implementing the Process Flow  may wish to alter this return process by requiring managers to approve all product returns prior to reimbursing the purchase price. To enable manager approval prior to reimbursement, Action B is specified through the Selectable Action List , as the point after which manager approval should occur. In response to the selection, the Enhancement Engine  automatically generates the Enhanced Process Flow  to include the Approval Action  which triggers a 3-step manager approval process defined by Approval Flow . This 3-step process defined by Actions ,  and  may include prompting a manager to approve or reject the return, alerting the internal finance team (e.g., via email) of the manager's response and sending a letter to the customer related to the final outcome of their return request. Once these 3 steps in the Approval Flow  are completed, the Enhanced Process Flow  continues at Action C  which is also updated to take the outcome of the manager approval step (i.e. Action ) into account before reimbursing the customer.",{"@attributes":{"id":"p-0063","num":"0062"},"figref":["FIG. 6","FIGS. 3","FIG. 6","FIGS. 3"],"b":["4","5","600","602","604","602","612","600","4","5","612","602"]},"In the illustrated example in , the Selectable Properties List  includes properties i-vi, wherein i-ii relate to Action A, properties iii-iv relate to Action B, and properties v-vi relate to Action C. It should be noted that in certain embodiments of the present invention, a single property may be associated with more than one action in a process flow. When generating the Selectable Properties List , the properties for each action in the Process Flow  are identified and the Selectable Properties List  is generated accordingly. In a rules-based system (e.g., Rules System  in ), where an action may be defined by one or more rules to generate a user interface for that action at run-time, identifying properties associated with the action may comprise analyzing or introspecting the one or more rules (e.g., using Enhancement Engine ) to determine what properties or data elements are displayed by or otherwise associated with the user interface. Similarly, the Selectable Action Lists , ,  may also be generated in a rules-based system by analyzing or introspecting the one or more rules that define the corresponding process flows (i.e. -).","As illustrated in , property ii and property iii have been tagged for the enhanced audit functionality. Given that property ii is associated with Action A and property iii is associated with Action B, the Enhanced Process Flow  is configured to include a Before Action  and an After Action  to monitor changes to the value of property ii as a result of Action A  and a Before Action  and an After Action  to monitor changes to the value of property iii as a result of Action B . It will be appreciated that even though in the illustrated embodiment, the enhanced functionality specified for each property is audit functionality, in alternative embodiments, other types of enhanced functionality may be specified.","As described above, an exemplary embodiment of the invention may be used to audit any changes made to data (e.g., transactional data) processed by an application. By way of non-limiting example, such auditing may be enabled to support an application that processes and\/or manages data related to pharmaceutical research. Under certain governmental regulations that are applicable to pharmaceutical research and development, any changes made to certain data values within a pharmaceutical research application must be tracked and documented according to strict data policies. These strict data policies include, for example, creating an enhanced audit record that stores an initial data value, an updated data value and the reason for updating the initial data value. To facilitate compliance with these strict data policies, an enhanced process flow (e.g., Enhanced Process Flows ,  and ) may be generated and linked with the pharmaceutical application using the methods and techniques described herein.","It will be appreciated that the design and functionality of the User Interfaces - in  is for illustrative purposes only and may vary in alternative embodiments of the invention. For example, even though only actions and\/or properties have been shown to be included in the selectable lists (e.g., Selectable Action List , ,  etc.) for the purposes of specifying a corresponding \u2018Post Approval\u2019 or \u2018Audit\u2019 enhanced functionality, in alternative embodiments, other types of rules, data or other portions of an application may be included (e.g., in selectable lists) in one or more user interface for the purposes of specifying various types of enhanced functionality (e.g., Audit, Pre\/Post Approval, reporting, encryption etc.) to be associated with a selected portion of the application. Still other variations are possible in the design and functionality of user interface(s) to be used to communicate with the Enhancement Engine  as described below.","The embodiments illustrated in , , , and  each include a single user interface that displays actions and\/or properties associated with a process flow (e.g., Process Flow ). These process flows may be associated with an application and are defined by one or more rules. Since an application may comprise a large number of process flows and hence, many more rules, using a single screen for the purposes of specifying enhanced functionality for the various processes or rules associated with an application may result in an extremely complex and unwieldy user interface design. Therefore, embodiments of the present invention may provide for a series of screens (e.g., in a software wizard) that may be used by an administrator or other user to communicate with the Enhancement Engine  to specify and\/or implement enhanced functionality for one or more software applications (e.g., Application ).","By way of non-limiting example, an enterprise may use a Rules System (e.g., Rules System ) that includes dozens of software applications (e.g., Application ) used throughout the enterprise. Such applications may include HR, compliance, legal, procurement, project management and finance applications and all the rules (e.g., process flows, properties, business logic, user interfaces etc.) associated with such applications may be stored in one or more rule repositories (e.g., Rules Base ). In such an embodiment, a software wizard may be used to help business users navigate the rules repository and identify a single action for which enhanced functionality can be specified as described above in connection with ,  and . The wizard may start by prompting the user to specify one or more applications that need to be modified (e.g., due to a change in applicable data policies within the enterprise) and then quickly \u2018drill-down\u2019 to the specific process flow, action, property or other rule through a series of screens. Alternatively, or in addition, the user may specify enhanced functionality for an entire application, group of rules or rule sets without having to drill down to individual rules. For example, using the techniques described herein, a user may specify an application for which all data must be encrypted prior to storage. In such an embodiment, the user may select the application through a user interface (e.g., similar to ,  and ) and specify \u2018encryption\u2019 as a type of enhanced functionality to be enabled for the selected application. The user's selections may be transmitted to the Enhancement Engine  which may, in turn, automatically update the appropriate encryption settings for the selected application by identifying one or more new rules as described above. The encryption settings may include, but are not limited to, a specific encryption cipher or algorithm and the required encryption keys (e.g. public or private keys required) depending on the specified cipher. At run-time of the application, for example in Rules System , the one or more new rules will be executed by the Rules Engine  to encrypt and\/or decrypt the transactional data being processed by the application in accordance with the encryption settings. It will be appreciated that other variations are possible in the design and implementation of encryption-related enhanced functionality using the Enhancement Engine  in an application.","In addition to enabling encryption, enhanced audit and\/or approval processing, other types of enhanced functionality may be enabled in an application without any manual coding using the methods and techniques described herein. By way of non-limiting example, a user may tag or otherwise specify one or more properties in an application (e.g., Application ) as \u2018required\u2019 using, for example, a Selectable Properties List (e.g., , ) through a user interface (e.g., , ). Upon receiving the user's request, the Enhancement Engine  may identify one or more new rules (as described above in connection with ) to update the display format (e.g., by updating the appropriate style sheet(s)) of the selected properties such that they appear highlighted on any user interface (e.g., , ) that is configured to display the selected properties. Furthermore, the one or more new rules may add validation logic to such user interfaces in order to ensure that the selected property values are not null during run-time of the user interfaces. Still other types of enhanced functionality may be enabled in an application using the methods and systems described herein.",{"@attributes":{"id":"p-0071","num":"0070"},"figref":["FIG. 7","FIG. 3","FIG. 8","FIG. 9","FIG. 2","FIG. 7"],"b":["700","504","604","800","900","900","116"],"i":["a ","a "]},"Method  begins at step  with the receipt of a request (e.g., by a Rules Engine  from client device  over network ) to process an action that has been specified for enhanced functionality. Using the example above, step  may involve a request for a user interface to display investigator information at run-time of a pharmaceutical research application where the action for generating the user interface has previously been specified for enhanced audit functionality. As a result, in response to the request at step , method  continues at step  by performing a before action of saving (e.g., temporarily in local memory) the initial or existing property values that are to be displayed on the user interface for investigator information. Following the storage of the initial property values, the updated user interface is transmitted (e.g., to the client device ) at step  such that a user may view and alter the initial property values. As illustrated in , the initial property values may be as follows\u2014Investigator Name: Doctor Jone, Street: 123 Main Street, City: New York, State: New York, Zip: 12345, Country: USA, Email: drjone@email.com, and Phone: (555)123-9876. Upon reviewing the investigator information, a user may alter the investigator name property value to correct a misspelling of the investigator's name from \u201cDoctor Jone\u201d to \u201cDoctor Jones.\u201d This is illustrated in  where user interface is shown to display the corrected spelling of the investigator's name. Following the changes made by a user to the initial property values, the user may try to permanently update the investigator information data record by clicking the \u201cSubmit\u201d button on user interface to submit the new values to a server (e.g., ) for permanent storage. At that point, method  proceeds to step  where the new property value(s) are received (e.g., by Rules Engine ) at the digital data processor (e.g., ) that is processing the specified action. To identify changes made to the property values, an after action is executed at step  which compares the new property values submitted through user interface with the initial property values that were previously stored in memory. If no discrepancy is found between the initial property values and the new property values, method  is complete and no other enhanced audit functionality or action is required. However, if a discrepancy is found between the two values, method  proceeds to step  to perform an enhanced audit action.","As illustrated, the enhanced audit action  includes authenticating or re-authenticating the user who is attempting to update the property values. In addition, the user is prompted to provide a text description of the rationale behind making changes to the property values associated with the specified action. Both of these enhanced audit functions are accomplished via user interface in the illustrated embodiment where the property value of investigator's name is permanently updated upon successfully authenticating the user credentials. In case the user is not successfully authenticated, the property values are not changed and the user may see an error message alerting them of the failed attempt.","A user may also view an enhanced audit log by clicking the \u2018View Audit History\u2019 button on the user interface . In the illustrated embodiment, this button was added to user interface  in response to the action associated with generating that interface being specified for enhanced audit functionality. User interface  is modified to form user interface that includes the button by identifying one or more rules as described above in  discussion. The button is added to facilitate a quick review of any changes to data that is deemed sensitive by users of an application. In the illustrated embodiment, a user may click the button to see the initial and new values of the investigator's name, reason for change and a date stamp on when the information was updated.","It will be appreciated the user interfaces depicted in  and the corresponding enhanced audit functionality is for illustrative purposes only. In other embodiments, other types of user interfaces or enhanced functionality may be implemented when processing an action specified for such enhanced functionality. For example, an additional approval process may be triggered and other screens displayed upon successful authentication of the user using user interface . Furthermore, users may be prompted to provide additional data related to the attempted change of property values. Still other variations in user interface design and enhanced functionality are possible.","Similarly, steps of method  may be modified without departing from the spirit of the invention. For example, step  may be configured in certain embodiments of the invention to ignore a discrepancy between a new value for a property and an initial null value for that property. This may indicate that an underlying data record is being created for the first time and hence, no enhanced audit action designed to monitor changes to existing records is needed. However, in other embodiments, step  may be configured to detect and audit all data discrepancies. Still other variations in the steps of method  are possible.","It is to be understood that the exemplary embodiments are merely illustrative of the invention and that many variations of the above-described embodiments may be devised by one skilled in the art without departing from the scope of the invention. It is therefore intended that all such variations be within the scope of the following claims and their equivalents."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The present invention will be more readily understood from the detailed description of the exemplary embodiments presented below considered in conjunction with the attached drawings, of which",{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 9"}]},"DETDESC":[{},{}]}
