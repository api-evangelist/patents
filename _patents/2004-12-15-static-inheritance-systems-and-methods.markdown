---
title: Static inheritance systems and methods
abstract: The subject invention pertains to a system and method of extending programming languages to enable static inheritance. In particular, static subclasses can be defined which extend class functionality and/or behaviors without extending base class state. The subclasses can be specified to include static fields as well as static or instance methods and/or properties that provide a more specific interpretation of an object without extending the state thereof. Furthermore, a static subclass can be specified to provide for type aliasing. Casting is also enabled in both directions between base class type and derived class type in a convenient manner without run-time performance penalties. According to one aspect of the invention, the disclosed systems and methods can be employed to create specific programmatic context, for instance for accessing, manipulating, and type checking external data (e.g., XML).
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08250528&OS=08250528&RS=08250528
owner: Microsoft Corporation
number: 08250528
owner_city: Redmond
owner_country: US
publication_date: 20041215
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["The subject invention relates generally to computers and more particularly toward class extension and inheritance in programming languages.","Programming languages are formal languages employed specifically to communicate instructions to computers or microprocessors for task execution. Through the years, object oriented programming has become one of many familiar and popular models designers and programmers utilize to implement functionality within computer systems. Object oriented programming is unique at least because it is premised on viewing programming in terms of objects or things rather than actions like other models.","The benefit of object technology arises out of three basic principles: encapsulation, polymorphism and inheritance. Objects hide or encapsulate the internal structure of their data and associated methods. Instead of exposing implementation details, objects present interfaces that represent their abstractions cleanly without extraneous information. Polymorphism takes encapsulation one-step further. Polymorphism allows the use of the same code for different data types\u2014the idea being many shapes, one interface. Hence, a software component can make a request of another component without knowing exactly what that component is. The component that receives the request interprets it and figures out according to its variables and data how to execute the request. The third principle is inheritance, which enables developers to reuse pre-existing design and code. This capability allows developers to avoid creating all software from scratch. Rather, through inheritance, developers can derive subclasses that inherit and modify both state and behaviors of other classes.","The object oriented programming model is often defined via a class-based approach. In this system, objects are entities including both state and behavior. Both the state and behavior of an object are defined by a class, which identifies objects of a particular type. An object created based on a class definition is considered an instance of that class reflected in a dynamic type. Thus, a class specifies the data (i.e., state) that the object can contain as well as methods, functions, or behaviors that the object can perform. Methods operate to modify the internal state of the associated objects by altering the data contained therein. The combination of such data and methods in objects is often referred to as encapsulation in object-oriented programming. Encapsulation provides for the state of an object to be changed only by well-defined methods associated with the object. When the behavior of an object is confined to such well-defined locations and interfaces, changes (e.g., code modifications) in the object will have minimal impact on the other objects and elements in the system.","As mentioned briefly above, one of the most important features of object-oriented programming is inheritance. Inheritance describes a relationship between at least two classes. In particular, a class or subclass may be derived from another class (called a base class, parent class, etc.), where the subclass inherits the data attributes or state and methods of the base class. Stated differently, a class is inherited if it shares, modifies or extends another class state and behavior. Conventional class inheritance is typically employed for two purposes: (1) constraining a value set of a class by adding new fields and virtual methods and (2) adding methods allowing manipulation of an object's state in some convenient manner. These two needs are tightly related and are considered very dependent upon one another.","The following presents a simplified summary of the invention in order to provide a basic understanding of some aspects of the invention. This summary is not an extensive overview of the invention. It is not intended to identify key\/critical elements of the invention or to delineate the scope of the invention. Its sole purpose is to present some concepts of the invention in a simplified form as a prelude to the more detailed description that is presented later.","Briefly described, the subject invention concerns systems and methods for extending programming language classes and implementation of static inheritance. More specifically static subclasses are presented herein that can provide additional methods, functions or behaviors to extend base classes. Unlike conventional subclasses, proper static subclasses do not add or extend the state of the base class from which it inherits. This relationship between static subclasses and base classes can be referred to as static inheritance. Static inheritance provides several benefits not appreciated by the conventional inheritance.","For one, static subclasses become equivalent for purposes of casting at least because the addition to state can always be assumed to be zero. The base class and the static class have the same dynamic type. This allows casting in both directions from base to subclass and from subclass to base without a type conversion and thus without any performance penalty as no runtime representation exists for an instance of the static type.","Furthermore, in addition to providing a more custom manner of interacting with data and other classes, static inheritance provides a mechanism (e.g., type safe wrappers) for enhancing static type checking for a language. In particular, static subclasses can allow expression of assumptions about an underlying document that is to be queried. These assumptions provide context for data to be retrieved and provide a way to strongly type an otherwise unsafe manner of accessing data.","According to one aspect of the invention, a system is provided for extending a class. The system includes an input component that receives a static subclass component. The static subclass component can include, among other things, static fields and methods that extend a base class to provide more custom functions for a particular context. At the same time, these fields and methods are required not to be additive with respect to the state of the base class. Once the static subclass component is received, it can be exposed via an extension component for use thereof.","In addition to being manually created or specified by a programmer, for instance, static classes can be automatically generated in accordance with another aspect of the invention. More specifically, a generation system can receive a data schema or some other context and generate one or more static subclasses to facilitated access to data or a more customized interaction.","According to another aspect of the invention, static subclass components can be utilized at least as part of an interface or API (Application Programming Interface) between programmatic components and some other entity or data source.","Further yet, a type checking system is disclosed in accordance with another aspect of the invention. The type checking system can verify that static subclasses do not extend base class state and furthermore can statically type check code declarations or types and interactions there between.","According to a particular aspect of the subject invention, static subclasses can be employed in a programming language to facilitate strongly typed and custom queries of XML data or documents.","Finally, it should be noted and appreciated that static subclasses need not provide additional methods or extend functionality. According to one aspect of the invention, a static type can be employed to enable type aliasing. In such a scenario, the static subclass would not need to includes any static methods, fields or properties, or any instance methods or properties.","To the accomplishment of the foregoing and related ends, certain illustrative aspects of the invention are described herein in connection with the following description and the annexed drawings. These aspects are indicative of various ways in which the invention may be practiced, all of which are intended to be covered by the present invention. Other advantages and novel features of the invention may become apparent from the following detailed description of the invention when considered in conjunction with the drawings.","The present invention is now described with reference to the annexed drawings, wherein like numerals refer to like or corresponding elements throughout. It should be understood, however, that the drawings and detailed description thereto are not intended to limit the invention to the particular form disclosed. Rather, the intention is to cover all modifications, equivalents, and alternatives falling within the spirit and scope of the present invention.","As used in this application, the terms \u201ccomponent\u201d and \u201csystem\u201d and the like are intended to refer to a computer-related entity, either hardware, a combination of hardware and software, software, or software in execution. For example, a component may be, but is not limited to being, a process running on a processor, a processor, an object, an instance, an executable, a thread of execution, a program, and\/or a computer. By way of illustration, both an application running on a server and the server can be a component. One or more components may reside within a process and\/or thread of execution and a component may be localized on one computer and\/or distributed between two or more computers.","The word \u201cexemplary\u201d is used herein to mean serving as an example, instance, or illustration. Any aspect or design described herein as \u201cexemplary\u201d is not necessarily to be construed as preferred or advantageous over other aspects or designs.","Furthermore, the present invention may be implemented as a method, apparatus, or article of manufacture using standard programming and\/or engineering techniques to produce software, firmware, hardware, or any combination thereof to control or direct a computer to implement the disclosed invention. The term \u201carticle of manufacture\u201d (or alternatively, \u201ccomputer program product\u201d) as used herein is intended to encompass a computer program accessible from any computer-readable device, carrier, or media. For example, computer readable media can include but are not limited to magnetic storage devices (e.g., hard disk, floppy disk, magnetic strips . . . ), optical disks (e.g., compact disk (CD), digital versatile disk (DVD) . . . ), smart cards, and flash memory devices (e.g., card, stick). Additionally it should be appreciated that a carrier wave can be employed to carry computer-readable electronic data such as those used in transmitting and receiving electronic mail or in accessing a network such as the Internet or a local area network (LAN). Of course, those skilled in the art will recognize many modifications may be made to this configuration without departing from the scope or spirit of the subject invention.","Artificial intelligence based systems (e.g., explicitly and\/or implicitly trained classifiers) can be employed in connection with performing inference and\/or probabilistic determinations and\/or statistical-based determinations as in accordance with one or more aspects of the subject invention as described hereinafter. As used herein, the term \u201cinference\u201d refers generally to the process of reasoning about or inferring states of the system, environment, and\/or user from a set of observations as captured via events and\/or data. Inference can be employed to identify a specific context or action, or can generate a probability distribution over states, for example. The inference can be probabilistic\u2014that is, the computation of a probability distribution over states of interest based on a consideration of data and events. Inference can also refer to techniques employed for composing higher-level events from a set of events and\/or data. Such inference results in the construction of new events or actions from a set of observed events and\/or stored event data, whether or not the events are correlated in close temporal proximity, and whether the events and data come from one or several event and data sources. Various classification schemes and\/or systems (e.g., support vector machines, neural networks, expert systems, Bayesian belief networks, fuzzy logic, data fusion engines . . . ) can be employed in connection with performing automatic and\/or inferred action in connection with the subject invention.","Referring initially to , a class extension system  is depicted in accordance with an aspect of the subject invention. Class extension system  can include one or more static subclass components , an input component  and an extension component . Static subclass component  is a special type of derived class as will be described in further detail infra. Input component  is operable to receive and\/or retrieve one or more static subclass components . Furthermore, it should be appreciated that input component  may also be employed to facilitate specification of or creation of a static subclass component. For example, input component could correspond to a text editor in an integrated design environment (IDE). Upon receipt or creation of the static subclass component , the input component  can provide the subclass component  to the extension component . Extension component  can then expose, among other things, the static subclass component . Exposure of the subclass component  makes it available for use or reference, for instance, by other programmatic entities (e.g., objects, classes, functions, interfaces . . . ). The static subclass component  can provide additional functions or behaviors associated with a super class object. However, unlike conventional subclasses a properly formed or typed static subclass component cannot and does not extend or add super class object state.","Turning to , a class system  is illustrated in accordance with an aspect of the subject invention. Class system  includes a super class , and object  and a static subclass component . In object oriented design technologies, objects  are often modeled or described by classes or software objects. Here, object  is modeled by class . An object can be some real world object or an abstract object. Objects can have both state and behavior. For example, if an object models a bank account the state can include the type of account (e.g., savings, checking), the account number, and the balance, among other things. The behavior includes functions or methods that operate on the object state. For instance, behavior can include opening an account, closing an account, incrementing the balance upon deposit, and decrementing the balance upon withdrawal. Accordingly, a class  that models an object must also include a state component  and a behavior component . State can be maintained by one or more variables (also known as instance variables), wherein variables are identifiers for data items stored on a computer readable medium. Behavior can be represented in a class  by methods (also known as instance methods). Methods can correspond to functions or algorithms associated with a class. In most classes, there is typically at least one method (e.g., virtual method) that modifies or adds state.","Classes can be defined in terms of and\/or depend from other classes. In object-oriented programming, this is referred to as inheritance. A subclass (also referred to as a child class or derived class) inherits from a super class (also called a base class or parent class). Relationships are not limited to a single super class and a subclass there can be many combinations thereof that can define hierarchical relationships. The subclass inherits the state and methods of the super class. However, subclasses are not limited to inherited state and methods. They may also provide there own state and methods. Here, class  is identified as super class as it has a subclass  that inherits from class . In conventional inheritance, a subclass is able to and likely extends both the state and the behavior(s) of the super class. In the previous bank account example, a subclass can correspond to a more specific type of account such as an interest bearing checking account, which includes instance fields and methods that calculate interest and modify the account balance state of the super class by adding interest thereto. Alternatively, a class  can be defined as bank account with a virtual method interest. A virtual method depends on dynamic or runtime type. Thus, subclasses  can be defined for one or more specific types of accounts such as a savings and checking account. Each account can have its own method for calculating interest that can override the virtual interest method. Thus, conventional inheritance supports virtual methods, among other things, that depend on a runtime type. Conversely, the subject invention discloses what can be referred to as static inheritance, which does not introduce a new runtime or dynamic type. Static inheritance provides for a restrictive class inheritance relationship that provides distinct benefits not previously contemplated or appreciated by the object oriented programming community (as described further in later sections). In accordance with an aspect of the subject invention, subclass  only provides additional behaviors . Subclass  does not extend the state of the super class. Stated differently, subclass  is a static class, which does not add state, and inherits from super class .","Turning to , a static subclass component  is illustrated in further detail in accordance with an aspect of the subject invention. Static class component  can include a static class indicator , super class reference , and optionally behaviors  defined by zero or more static fields\/variables , zero or more static or instance methods , and\/or zero of more static or instance properties. Static class indicator  identifies the subclass component  as static. This can be accomplished, for instance, by specifying a keyword such as \u201cstatic\u201d or some other indicia prior to the subclass name. The super class reference  points, refers, or otherwise identifies a base class from which the instant subclass component inherits. By way of example and not limitation, the super class reference  can specify the relationship as an extension such that a subclass extends a super class (e.g. subclass name: super class name). Behavior or functionality  can be specified by employing zero or more of fields\/variables , methods , and\/or properties . A field represents a variable associated with an object or class. Fields  can correspond to static fields (alternatively referred to as class variables) where data entities are associated with a class as a whole and not to particular instance or state of an object. Static fields or variables  can be defined at least in part to assist methods . A method implements an action of function that can be performed by an object or class. Similar to fields , methods  can correspond to static or non-virtual instance methods that provide a mechanism to perform some action, for example as defined by a sequence of instructions. Unlike traditional methods, static methods  are not associated with nor do they interact with any object instance. They purely perform class functionality alone or in conjunction with fields . Additionally, instance methods can be employed by the static subclass component  as they will not affect state. Furthermore, static subclass component  can include static or instance properties . Properties provide access to a characteristic of an object or class. Properties are an extension of fields or a special kind of method. Unlike fields, properties do not denote storage locations. Rather, properties have accessors that specify statements to be executed when their values are read or written. Static or instance properties like static or instance methods do not extend state. Accordingly, static subclass component  can include static fields, methods, and properties, and\/or instance methods or properties, as these class members do not extend the subclass' dynamic type or state.","It should be noted that the data structures described in both  can be embodied or stored on a computer readable medium to support execution thereof by a computing device. In particular, the medium can include a class (e.g., base, super, parent . . . ) data structure as well as a static subclass structure that extends the behavior of the class structure without extending class state. The static subclass can then include further structures such as static fields\/variables, static or non-virtual instance methods, and\/or static or instance properties to generate the extended behavior. The class and related static subclass can thus have the same dynamic type, which can facilitate casting between the class and subclass (e.g., up cast, down cast) without runtime performance penalties associated with type conversion, for instance. The static subclass could also include data structures referencing the class and indicating that the subclass is in fact static. It should be appreciated that many other structures may be stored on a computer readable medium in conjunction with providing static inheritance and utilizing this feature (e.g., calls to static subclasses . . . ). Furthermore, the static subclass need not extend behavior or functionality utilizing one or more other structures. In fact, the static subclass alone can simply provide for type aliasing. For example, assume a base class integer for numbers. One might want to distinguish between feet and meters. Accordingly, a static subclass component feet and\/or meters can be defined, which derives from the class integer. In this situation, no additional functionality was introduced via fields, methods, or properties. The static subclass simply provides a new type that is an alias for integer.","The nature of static inheritance provides significant advantages not previously contemplated or appreciated. First static inheritance may be available when convention inheritance is not. For example, conventional subclass inheritance may not be available when a base class has been sealed or designated not extensible. Moreover, with static inheritance the base and special subclasses can be treated as equivalent from a typecasting point of view. This is possible because static inheritance does not add new fields or instance variables, add\/override virtual methods of the base class, and does not introduce a new dynamic type, only a new static type that equivalent or the same as the dynamic type of the base class. Essentially, the internal state of a class or class instance remains unchanged with static inheritance. Static inheritance provides for static subclass , which can add one or more behaviors on top of an existing class or simply provide a new type alias. As a result, casting from base class  to such a static subclass  (i.e., down casting, narrowing conversion) is possible at least because static inheritance does not introduce a new dynamic type or change any of an object's behavior. Casting from a static subclass  to its super class (i.e., up casting, widening conversion) is also possible for the same reason\u2014no change in an object's state or behavior will be effectuated. Static inheritance can thus provide some convenience in a custom context that is not needed or provided in a more generic context described by a base class. Moreover, the subject invention can enable introduction of customized object notations in local programming application contexts without any runtime overhead (e.g., conversion, cast check . . . ) and in full consistency with statically strongly typed style of programming (as described in further detail infra).","For purposes of clarity and understanding and not limitation, consider the following exemplary code snippets concerning Cartesian and polar coordinates.\n\n","This static subclass  provides a custom view of the same points identified by the base class . In particular, the static subclass enables the same points to be treated as polar coordinates. As shown, the subclass includes two static fields or properties Angle and Radial as well as one new method Rotate. Following this static subclass is the Main class providing various calls to the super class and static subclass to illustrate, inter alia, class calls and conversion between class types.\n\n","In the first assignment, a new Point is created so an implicit cast to Point can be made. The assignment to variable p of type Polar Point causes a cast to PolarPoint. In the second assignment, p.Rotate is implicitly cast to Polar type. The assignment to the variable Rotated causes a cast to type Point. Thus, type casting between a static subclass and its parent generic class can be easily specified and executed. It should be noted and appreciated from the example that the PolarPoint class is not implemented merely as a conventional subclass. If this were so, than a run time conversion for the Rotate method would be required in Main( ). Instead, the class is implemented as static subclass, so that type conversion on entry\/exit from Rotate method does not require any actions at run time as they have the same dynamic type and therefore there is no performance penalty for conversion, for example.","The aforementioned example demonstrates a context where a Polar interpretation of points are preferred rather than a Cartesian interpretation. The code is specified as if the object has Angle and Radial properties, while the \u201creal\u201d base object does not have such properties. This is merely one exemplary application of aspects of the subject invention. Those of skill in the art will come to recognize and appreciate many other uses or contexts of the various inventive aspects disclosed herein, all of which are considered within the scope of the invention. For example, static subclasses can be added to conventional programming languages (e.g., C#, Visual Basic, Java . . . ) to facilitate support for XML (extensible Markup Language) queries.","XML is a data format language that provides for text markup or tags describing data. In essence, XML enables the creation of customized data tags that facilitate definition, transmission, validation, and interpretation of data. Currently, XML is becoming a standard for sharing data over the Internet between both applications as well as organizations. XML is a broad term that is often utilized to characterize a family of technologies based on the World Wide Web Consortium (W3C) Recommendation including but not limited to XSL (XML Stylesheet Language), XSLT (XSL Transformations), XML DOM (XML Document Object Model) and XPath (XML Path Language). Generally speaking, XSL and XSLT provide for data transformation and presentation. XML DOM provides for building a tree structure from an XML document representing hierarchical relationships and facilitating interaction with data utilizing other technologies such as XPath. XPath provides a filtering mechanism such that only data a user specifies as interesting will be returned. XPath provides such filtering of an XML document by receiving a specification of a location(s) in the form of nodes alone or in combination with predicates to further refine or filter the returned data.","The growing popularity of XML as a data storage format generates a need to support XML features in primary programming languages. It is typical in an XML world to be in a situation where some data is created elsewhere as a generic XML node, but in the context of a particular application such data has a very specific meaning (e.g., in accordance with a custom schema) and needs an appropriate mechanism to enable manipulation (e.g., retrieval, filtering . . . ) thereof. Furthermore, it is desirable that such a mechanism be statically typed. One way of solving such a problem would be to create a custom static class with a bunch of methods that take the generic object as the explicit first parameter. Alternatively, these helper methods could be grouped into a new subclass, for instance so that the object instance would appear as the implicit \u201cthis\u201d parameter. Unfortunately, creating an ordinary subclass is often impossible because the class is sealed or designated as not extensible. Hence, a static subclass can be introduced to extend programming languages to support static inheritance. This fits very well into conventional language structure without having to significantly alter data constructs and introduce a plurality of new keywords. Thus, the subject invention can be thought of as a semantic extension that according to one aspect of the invention allows resolution of a notational problem that is very important in the context of XML data processing.","By way of example and not limitation, one of the features that users of programming languages expect is the ability to write XPath-like expressions in a natural and strongly typed manner. For instance, uses may want to write the XPath expression \u201cmy: Customer\/ns: Order\/@data as Customer.Order.Date.\u201d One way of achieving this would be by adding dynamic dispatch to a programming language. However, this would eliminate all static typing. Furthermore, dynamic dispatch does not solve the problem of XML namespace support. In particular, conventionally identifiers in programming language names do not have namespace prefixes. More specifically, the type System.Xml.XmlNode can represent any node in a DOM tree. When a user's code accepts, retrieves, or receives an instance of Xml.Node it in most cases knows that this is not an arbitrary XML node, but has some structure or even corresponds to some schema. For example, the node may correspond to Customer, which has ns: Name and ns: children. Users could access both children with a SelectSingleNode ( ) method by passing it the string name of the respective children. Therefore, the DOM tree by itself provides \u201cdynamic dispatch\u201d functionality. What are missing are strong typing and a way to access these dynamic properties as regular language members. Static inheritance as disclosed herein can solve these and other problems.","Consider the following code snippets in conjunction with  describing a static subclass component .\n\n","Provided above are three static subclasses Customer, CustomerName and Organization. Each static subclass extends or inherits from System.Xml.XmlNode, the super class. Static subclass Customer includes two methods Name of type CustomerName and Organization of type Organization. Static subclass CustomerName provides two methods FirstName and Last Name, while static class Organization includes two different methods, Name and Address. The collection of static subclasses  therefore describes a particular data schema where each class is a static subclass of an XmlNode. Moreover, the static subclasses enable static type checking in accessing such data. The SelectSingleNode( ) is an accessor to some internal state which is not available as a strongly typed member. Static inheritance allows one to convert this unsafe way of accessing data into a strongly typed manner. Consider, for instance, FirstName in the static subclass Customer. Here, First name is known to be a string and is specified as such utilizing the accessor SelectSingleNode(\u201c@FirstName\u201d).ToString( ). This enables data access to be safe and strongly typed.","Using the above static subclasses, one can program against XML using conventional member-access notation. For example:\n\n","The types Customer, Name, and the like guide a programming language compiler in expanding member access into calls to the proper underlying Select SingleNode methods. Thus, the set of XML classes can provide convenience in data access as well as strong typing based on the knowledge of the data schema.","Turning to , a static subclass generation system  is depicted in accordance with an aspect of the subject invention. Although, static subclasses can be generated manually via programmer specification, system  provides for an automatic or a substantially automated mechanism of static subclass generation. System  can include a receiver component  and a generation component . Receiver component  can receive or retrieve a particular context in the form of a data schema (e.g., XML schema), for instance. The schema can provide information concerning data, data relationships, data types, and the like. Upon receipt of a schema, receiver component  can provide or present the schema to generation component . Generation component  can analyze the data schema and generate one or more static subclass components in accordance therewith. It should be noted that although generation component  can employ conventional logic to generate subclass components, the present invention also contemplates and appreciates that a variety of expert systems, artificial intelligence and\/or machine learning can be employed by the generation component to intelligently and\/or efficiently produce static subclass components. Such artificial intelligence can include but is not limited to one or more of Bayesian methodologies (e.g., networks, classifiers . . . ), neural networks, support vector machines, linear and non-linear regression, and statistical classifiers. Thus, the generation component can infer, in accordance with an aspect of the invention, the proper static class to generate based on context as well as other factors.",{"@attributes":{"id":"p-0056","num":"0065"},"figref":"FIG. 5","b":["500","500","510","520","510","210","110","510","210","220","520","520","520"]},{"@attributes":{"id":"p-0057","num":"0066"},"figref":"FIG. 6","b":["600","500","600","520","510","510","210","110","610","520","520"]},"Turning to , a data interaction system  is illustrated in accordance with one aspect of the invention. System  facilitates data interaction including but not limited to retrieving, receiving, storing, and otherwise manipulating data. System  can include one or more program components  (e.g., programs, routines, executable instructions, programmatic constructs . . . ) that need to interact with one or more data sources . These data sources  may be provided in different formats. In accordance with one aspect of the invention, the data sources can be schematized for example as an XML document. Interface component  enables communications between program components  and data sources . According to an aspect of the invention interface component  can include one or more static class components  as well as other class components (e.g., base class). The static class components , as described supra, can provide supplemental functionality related to a specific context. In this instance, the static class components  can be employed to interact with data from data sources . According to a particular aspect of the subject invention, the interface component  and associated static class components  can be part of an application-programming interface (API) within a computer program. Furthermore, the data source  can be an XML document such that the interface component  via static class components  can retrieve and otherwise interact with XML data from within a program.","In view of the exemplary systems described supra, a methodology that may be implemented in accordance with the present invention will be better appreciated with reference to the flow charts of . While for purposes of simplicity of explanation, the methodology is shown and described as a series of blocks, it is to be understood and appreciated that the present invention is not limited by the order of the blocks, as some blocks may, in accordance with the present invention, occur in different orders and\/or concurrently with other blocks from what is depicted and described herein. Moreover, not all illustrated blocks may be required to implement the methodology in accordance with the present invention.","Additionally, it should be further appreciated that the methodologies disclosed hereinafter and throughout this specification are capable of being stored on an article of manufacture to facilitate transporting and transferring such methodologies to computers. The term article of manufacture, as used, is intended to encompass a computer program accessible from any computer-readable device, carrier, or media.","Turning to , a method of extending a class  is depicted in accordance with an aspect of the invention. At , a base class is identified. The base class provides some generic functionality, which is sought to be extended or supplemented for some particular context. Once a base class is identified, a static subclass can be generated that extends the functionality of the base class, at . A static subclass component is a subclass that can provide, inter alia, static fields and methods associated with a particular context or data schema. The static subclass component can be generated by a programmer or user via manual specification. Additionally or alternatively, the static subclass component can be produced from a generation system, for example, that automatically or semi-automatically generates static subclasses in response to a received or retrieved schema. The super class associated therewith can thus be extended with the subclass functionality. It should be appreciated that the extension is limited to fields, methods, and properties that do not extend or add to the state of the super class from which it inherits. Furthermore, it should be appreciated that mere generation of a static subclass without any fields, methods, and properties can be one form of base class extension. In this instance, the static subclass can define a type alias for the base class. The method  of extending class functionality can also be referred to as static inheritance. Static inheritance differs from conventional inheritance at least in that inherited subclasses extend or are capable of extending both the state and behavior of the super class.",{"@attributes":{"id":"p-0062","num":"0071"},"figref":"FIG. 9","b":["910","920"]},"Turning to , a type checking methodology  is presented as a flow chart in accordance with an aspect of the subject invention. At , a static subclass is received. At , a check is made concerning whether the static subclass extends or inherits from a base class or other class. If the static subclass does not extend another class then the process proceeds to  where an error is generated and the procedure is subsequently terminated. If the static subclass does extend another class then the process can proceed at . At , a determination is made as to whether the static subclass adds to the state of the base class that it extends. This can be accomplished, for instance, by analyzing both the fields and methods of the static subclass to determine if they are static. If the static subclass adds to the state of the base class that it extends, then procedure continues at . At , an error is generated signifying that the static subclass is not in fact static as required. Thereafter, the method terminates. If the static subclass does not extend the state of the associated base class then the process terminates successfully without error.",{"@attributes":{"id":"p-0064","num":"0073"},"figref":"FIG. 11","b":["1100","1110","1120","1130","1140","1150"]},{"@attributes":{"id":"p-0065","num":"0074"},"figref":"FIG. 12","b":["1210","1220"],"ul":{"@attributes":{"id":"ul0005","list-style":"none"},"li":["static class CustomerName: System.Xml.XmlNode {string FirstName {get {return this. SelectSingleNode(\u201c@FirstName\u201d).ToString( );}}","string LastName {get {return this. SelectSingleNode(\u201c@LastName\u201d).ToString( );}}}"]}},"The static subclasses can be defined manually, semi-automatically, and\/or automatically. For example, a programmer can manually specify the static subclasses and\/or employ some tools to automate the specification process. Furthermore, a system can be employed that receives at least one schema and automatically generates appropriate static subclass based on the schema. At , once the static classes are defined, the schematized data can be manipulated from within a program utilizing the static classes. Thus, the static subclasses can extend a programming language to more efficiently and specifically interact with schematized data. Moreover, static subclasses facilitate static type checking related to defined static subclasses in a manner consistent with strongly typed programming languages. In other words, the static subclasses can provide type safe wrappers. For instance, a generic data accessor such as the SelectSingleNode( ) for XML data accesses some node of piece of data from a source the type of which is not known statically. The static subclass and the static inheritance associated therewith allows this unsafe manner of accessing data to become strongly typed. Specifically, the data is wrapped by one or more static subclass, which provides additional functionality related to a particular context. Instead of just retrieving a generic node of data, a particular member can be retrieved such as FirstName whose type (e.g., String) is known and specified in a static subclass.","In order to provide a context for the various aspects of the invention,  as well as the following discussion are intended to provide a brief, general description of a suitable computing environment in which the various aspects of the present invention may be implemented. While the invention has been described above in the general context of computer-executable instructions of a computer program that runs on a computer and\/or computers, those skilled in the art will recognize that the invention also may be implemented in combination with other program modules. Generally, program modules include routines, programs, components, data structures, etc. that perform particular tasks and\/or implement particular abstract data types. Moreover, those skilled in the art will appreciate that the inventive methods may be practiced with other computer system configurations, including single-processor or multiprocessor computer systems, mini-computing devices, mainframe computers, as well as personal computers, hand-held computing devices, microprocessor-based or programmable consumer electronics, and the like. The illustrated aspects of the invention may also be practiced in distributed computing environments where task are performed by remote processing devices that are linked through a communications network. However, some, if not all aspects of the invention can be practiced on stand-alone computers. In a distributed computing environment, program modules may be located in both local and remote memory storage devices.","With reference to , an exemplary environment  for implementing various aspects of the invention includes a computer . The computer  includes a processing unit , a system memory , and a system bus . The system bus  couples system components including, but not limited to, the system memory  to the processing unit . The processing unit  can be any of various available processors. Dual microprocessors and other multiprocessor architectures also can be employed as the processing unit .","The system bus  can be any of several types of bus structure(s) including the memory bus or memory, controller, a peripheral bus or external bus, and\/or a local bus using any variety of available bus architectures including, but not limited to, 11-bit bus, Industrial Standard Architecture (ISA), Micro-Channel Architecture (MSA), Extended ISA (EISA), Intelligent Drive Electronics (IDE), VESA Local Bus (VLB), Peripheral Component Interconnect (PCI), Universal Serial Bus (USB), Advanced Graphics Port (AGP), Personal Computer Memory Card International Association bus (PCMCIA), and Small Computer Systems Interface (SCSI).","The system memory  includes volatile memory  and nonvolatile memory . The basic input\/output system (BIOS), containing the basic routines to transfer information between elements within the computer , such as during start-up, is stored in nonvolatile memory . By way of illustration, and not limitation, nonvolatile memory  can include read only memory (ROM), programmable ROM (PROM), electrically programmable ROM (EPROM), electrically erasable ROM (EEPROM), or flash memory. Volatile memory  includes random access memory (RAM), which acts as external cache memory. By way of illustration and not limitation, RAM is available in many forms such as synchronous RAM (SRAM), dynamic RAM (DRAM), synchronous DRAM (SDRAM), double data rate SDRAM (DDR SDRAM), enhanced SDRAM (ESDRAM), Synchlink DRAM (SLDRAM), and direct Rambus RAM (DRRAM).","Computer  also includes removable\/non-removable, volatile\/non-volatile computer storage media.  illustrates, for example disk storage . Disk storage  includes, but is not limited to, devices like a magnetic disk drive, floppy disk drive, tape drive, Jaz drive, Zip drive, LS-100 drive, flash memory card, or memory stick. In addition, disk storage  can include storage media separately or in combination with other storage media including, but not limited to, an optical disk drive such as a compact disk ROM device (CD-ROM), CD recordable drive (CD-R Drive), CD rewritable drive (CD-RW Drive) or a digital versatile disk ROM drive (DVD-ROM). To facilitate connection of the disk storage devices  to the system bus , a removable or non-removable interface is typically used such as interface .","It is to be appreciated that  describes software that acts as an intermediary between users and the basic computer resources described in suitable operating environment . Such software includes an operating system . Operating system , which can be stored on disk storage , acts to control and allocate resources of the computer system . System applications  take advantage of the management of resources by operating system  through program modules  and program data  stored either in system memory  or on disk storage . It is to be appreciated that the present invention can be implemented with various operating systems or combinations of operating systems.","A user enters commands or information into the computer  through input device(s) . Input devices  include, but are not limited to, a pointing device such as a mouse, trackball, stylus, touch pad, keyboard, microphone, joystick, game pad, satellite dish, scanner, TV tuner card, digital camera, digital video camera, web camera, and the like. These and other input devices connect to the processing unit  through the system bus  via interface port(s) . Interface port(s)  include, for example, a serial port, a parallel port, a game port, and a universal serial bus (USB). Output device(s)  use some of the same type of ports as input device(s) . Thus, for example, a USB port may be used to provide input to computer  and to output information from computer  to an output device . Output adapter  is provided to illustrate that there are some output devices  like displays (e.g., flat panel and CRT), speakers, and printers, among other output devices , that require special adapters. The output adapters  include, by way of illustration and not limitation, video and sound cards that provide a means of connection between the output device  and the system bus . It should be noted that other devices and\/or systems of devices provide both input and output capabilities such as remote computer(s) .","Computer  can operate in a networked environment using logical connections to one or more remote computers, such as remote computer(s) . The remote computer(s)  can be a personal computer, a server, a router, a network PC, a workstation, a microprocessor based appliance, a peer device or other common network node and the like, and typically includes many or all of the elements described relative to computer . For purposes of brevity, only a memory storage device  is illustrated with remote computer(s) . Remote computer(s)  is logically connected to computer  through a network interface  and then physically connected via communication connection . Network interface  encompasses communication networks such as local-area networks (LAN) and wide-area networks (WAN). LAN technologies include Fiber Distributed Data Interface (FDDI), Copper Distributed Data Interface (CDDI), Ethernet\/IEEE 802.3, Token Ring\/IEEE 802.5 and the like. WAN technologies include, but are not limited to, point-to-point links, circuit-switching networks like Integrated Services Digital Networks (ISDN) and variations thereon, packet switching networks, and Digital Subscriber Lines (DSL).","Communication connection(s)  refers to the hardware\/software employed to connect the network interface  to the bus . While communication connection  is shown for illustrative clarity inside computer , it can also be external to computer . The hardware\/software necessary for connection to the network interface  includes, for exemplary purposes only, internal and external technologies such as, modems including regular telephone grade modems, cable modems, power modems and DSL modems, ISDN adapters, and Ethernet cards.",{"@attributes":{"id":"p-0076","num":"0087"},"figref":"FIG. 14","b":["1400","1400","1410","1410","1400","1430","1430","1430","1410","1430","1400","1450","1410","1430","1410","1460","1410","1430","1440","1430"]},"What has been described above includes examples of the present invention. It is, of course, not possible to describe every conceivable combination of components or methodologies for purposes of describing the present invention, but one of ordinary skill in the art may recognize that many further combinations and permutations of the present invention are possible. Accordingly, the present invention is intended to embrace all such alterations, modifications and variations that fall within the spirit and scope of the appended claims. Furthermore, to the extent that the terms \u201cincludes,\u201d \u201chas,\u201d and \u201chaving\u201d are used in either the detailed description or the claims, such term is intended to be inclusive in a manner similar to the term \u201ccomprising\u201d as \u201ccomprising\u201d is interpreted when employed as a transitional word in a claim."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The foregoing and other aspects of the invention will become apparent from the following detailed description and the appended drawings described in brief hereinafter.",{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 13"},{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 14"}]},"DETDESC":[{},{}]}
