---
title: External service application discovery method
abstract: An external service application discovery process that connects a host with an external application server running a service application allowing a user of a client computing device to work with a file via a web browser. The host brokers the functionality of an external application server and serves as the platform where interactions between the client computing device and the external application server occur. An open interface protocol, which is a shared communication protocol, allows the host to communicate instructions from the client computing device to the external application server. Through the external service application discovery process, the external application server describes functionality provided by the service application to the host. The host selectively makes the functionality provided by the service application available to users based on the level of implementation of the open platform interface and the conventions of the external service application discovery process understood by the host.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09578114&OS=09578114&RS=09578114
owner: Microsoft Technology Licensing, LLC
number: 09578114
owner_city: Redmond
owner_country: US
publication_date: 20111028
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["RELATED APPLICATIONS","BACKGROUND","BRIEF SUMMARY","DETAILED DESCRIPTION"],"p":["This application claims benefit under 35 U.S.C. \u00a7119(e) of U.S. Provisional Patent Application Ser. No. 61\/539,975, titled \u201cOpen Platform Interface\u201d and filed on Sep. 27, 2011, the entirety of which is incorporated by reference herein.","Enterprises often maintain various types of documents that are stored in different places for different purposes. In many cases, such documents are created and stored according to a variety of different software applications and storage systems. For example, documents may be generated using word processing applications, spreadsheet applications, presentation applications, note applications, graphic design applications, photographic applications, and the like. Generated documents may be stored via a variety of storage systems, including one or more content servers used for storing documents of various types, servers for storing documents as attachments to electronic mail items (e-mail), storage systems for storing documents as attachments to meetings, customer relationship management (CRM) systems for storing documents as attachments to leads or customer data, general purpose document stores for storing documents for routine use, and\/or specialized document stores (e.g., Documentum\u00ae from Documentum, Inc.) for storing documents for specific, highly regulated needs.","Accessing and working with these various types of documents often requires that the appropriate software for each document type be available to users. The typical enterprise scenario envisions that each person who needs to access or work with a document will have the appropriate software locally installed on the computing device they routinely use. Where everyone has access to the same set and versions of applications, this is a workable approach. However, in many situations, where a number of users may only use a given software application on an infrequent basis the given software application may not be loaded on the users' computing devices by the enterprise. One approach to remedy such problems has been to convert documents into a \u201cpublished\u201d format that is readily viewable but not readily editable. Another approach to providing access to various document types without the need for local installations of the necessary software packages has been to provide viewing and editing functionality innately within a content server or to provide for direct (i.e., hard coded) integration between a content server and a dedicated system for viewing and editing supported documents; however enterprises are often discouraged from integrating such functionality with their content servers for fear that such integration of additional functionality may reduce processing capacity and capability of the likely mission-critical uses, increase downtime, and\/or complicate the management of their content servers. Further, the resources invested in a dedicated system (e.g., the time, effort, and expense associated development, procurement, and deployment) are unlikely to be transferable to another platform.","It is with respect to these and other considerations that the present invention has been made.","The following Brief Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Brief Summary is not intended to identify key features or essential features of the claimed subject matter, nor is it intended to be used to limit the scope of the claimed subject matter.","According to embodiments, the external service application discovery process connects one or more hosts with one or more service applications that allow a user of a client computing device to work with a file via a general client application (i.e., a web browser). An open platform interface, which is a shared communication protocol, allows the host and the external application server to communicate, regardless of the native communication protocol of the host. Through the external service application discovery process described by the conventions of the open platform interface, the external application server describes the functionality provided by the service application and how to invoke that functionality. The host selectively makes the functionality provided by the service application available to users based on the level of implementation of the open platform interface and the conventions of the external service application discovery process understood by the host.","Integration with the external application server is a responsibility of the host accomplished through a process called discovery during which the host learns about the functionality supported by external application server. Prior to discovery, the host is not required to have any knowledge of the availability or functionality of an external application server. To participate in discovery of the external application server, the host must understand the open platform interface and the discovery conventions associated with the open platform interface. The behavior of the host changes based on the availability and functionality of the external application server.","The external service application discovery process is initiated from the host by providing the location of a discovery data source which contains the information describing the functionality of the external application server. The discovery data is maintained by the external application server and provided to the host as response or in a discovery document. After obtaining the location of the discovery data, the host issues a discovery request to the discovery data source. Upon receipt of the discovery request, the discovery data source provides a response containing the discovery data describing the functionality supported by the external application server (i.e., the properties of the external application server). The discovery data is formatted according to and contains information specified by the conventions of the open platform interface. The host consumes the discovery data returned by the discovery data source. After consuming the discovery data, the host stores the information about the actions supported by the service application for the associated file type. After completing the external service application discovery process, the behavior of the host changes to integrate the advertised functionality of the service application that is supported by the host.","An external service application discovery process for connecting a host with an external application server is described herein and illustrated in the accompanying figures. The external service application discovery process connects one or more hosts with one or more service applications that allow a user of a client computing device to work with a file over a network via a general client application communicating with a host. An open platform interface, which is a shared communication protocol, allows the external application server and the host to interact, regardless of the native communication protocol of the host. Through the external service application discovery process described by the conventions of the open platform interface, the external application server describes the functionality provided by the service application and how to invoke that functionality. The host selectively makes the functionality provided by the service application available to users based on the level of implementation of the open platform interface and the conventions of the external service application discovery process understood by the host.",{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 1","b":["100","102","104","106","102","108","110","102","126","106","102","112","114","102","102","106","116","126","102","104","106","104","106","102","104","102","120","102","104","102","104","104"]},"The external application server  runs one or more web based service applications  enabling the user  to access, view, edit, and, optionally, perform other operations on content (i.e., a file or document) and perform folder (i.e., directory) management over the network from the client computing device  without requiring a local installation of the appropriate application(s) needed to work with a particular document type. The operation and output of the external application server  is not specific to the host  that invokes the functionality of the external application server . Each service application  generally runs as services on the external application server . The external application server  uses the open platform interface and the set of open platform interface conventions to integrate with the host . The external application server  provides the necessary operations and functionality to work with a document of a selected file type. The external application server  is host agnostic. In other words, the operation and\/or output of the external application server  are not specific to the host  that facilitates access to the services of the external application server . Examples of the service applications  to handle various document types include the online (i.e., web based) companions to the standard (i.e., locally installed) applications for working with word processing documents, spreadsheets, presentations, and notes.","The operations provided by each service application  are typically specific to a selected file type or related to folder management. The core operations provided by the external application server  are viewing and editing documents. In various embodiments, the service application  provides one or more additional operations including, but not limited to, reformatting a document for viewing on a mobile device, creating a new document, converting a document, embedding a document, and broadcasting a document From the perspective of the external application server , broadcasting and embedding are particular interactive user flows. In the case of broadcasting, the external application server  displays the document on multiple client computing devices  and, in one embodiment, keeps track of the current page being view at each multiple client computing devices . The host  manages the document upload, broadcast initiation, and the rich client entry points. In another embodiment of the broadcasting operation, page tracking is handled by the host .","The supported operations for each service application  are accessed through one or more service application entry URLs. Each service application entry URL serves as an entry point to the external application server  for a particular operation on a particular document type. Generally, each service application entry URL includes the address of the external application server and specifies the task (e.g., embedded edit using the spreadsheet application), the required data associated with the task, namely the metadata URL for the document and the access token authorizing access, and any optional parameters specific to the task. When the user  selects an operation for a document, the host  generates a service application entry URL for that operation against the selected document for the user. More specifically, the external application host page  generates the URL parameters used with the service application . The parameters generated by external application host page  include, but are not limited to, the access token and the source URL. The source URL is the URL that the service application  uses to access the host endpoint  and the document. The access token is a token that is unique to the user\/object pair that the host endpoint  uses to authenticate the user  and authorize access to the document and\/or the service application . In various embodiments, the access token is calculated based on a hash of one or more of the user identifier, the time stamp, and the document identifier and is encrypted with a secret known to the host  (e.g., stored in the host configuration database).","The service application entry points are handled through the wrapper provided by the host . The wrapper provided by the host  is a framework or environment that displays the output of the external application server  and accepts input from the client computing device  allowing a user  to interact with a document using the functionality provided by the service application . In one embodiment, the wrapper includes the external application host page  and\/or an application frame . By way of example, one embodiment of the external application host page  generated by the host  is a single page that hosts all service application pages in a web page container such as an inline frame (iFrame) with an edge-to-edge layout. The external application host page  has no user interface of its own. Alternate implementations of the external application host page may include a user interface or substitute other web page containers and layouts for those described above.","The amount of embedded information potentially results in a long and cumbersome service application entry URL. Further, the inclusion of an expiring access token makes the service application entry URL brittle. The wrapper compensates for the cumbersome and brittle nature of the service application entry URL by providing support for bookmarking and link sharing. In other words, the URL of the external application host page is bookmarkable and shareable. The application frame  points at the service application entry URL, and the external application host page  optionally presents host chrome and navigation control(s).","The background tasks of the external application server  are implemented in a manner similar to that of the user interaction operations, but make use of a hidden frame in the page displayed by the browser displayed by the client computing device  to navigate to a service application entry URL and load a script, applet, or other set of instructions (e.g., a JavaScript) that drives the task, provides retry logic, and allows for notification of final state by navigating the parent frame. In one embodiment, background tasks are used for host directed document conversion.","When a service application performs file level operations, it makes requests to the host endpoint  using the open platform interface. The host endpoint  is a web service that understands requests made using the open platform interface. Various embodiments of the host endpoint  are implemented as a REST based web service. In some embodiments, communications with the host endpoint  are handled exclusively through a secure transport protocol (e.g., HTTPS) in order to protect the authentication token and the content of the files. In one embodiment, the host endpoint URL is created by appending the location of the host endpoint web service to the host URL.","The external application server  provides the necessary functionality to access, edit, view, and otherwise manipulate or work with various document types. In the described embodiment, the external application server  does not include the complexity and overhead associated with network access, user authentication, file storage, network and file security, and other administrative tasks normally handled by other servers within a network and often specific to a particular enterprise. Omitting such features and focusing the external application server on handling document operations through the open platform interface allows the external application server  to be used in a wide range of enterprise network scenarios. It should be appreciated that an external application server  performing as described herein and assuming additional roles and responsibilities normally handled by other servers on the enterprise network falls within the scope and spirit of the present invention.","The host  is an online server application capable of being accessed over a network using a general client application, such as a web browser. The services provided by the external application server  are consumed by the host  and made available to a client computing device . When attached to an external application server , the host  becomes aware of each service application  and functionality supported by the external application server . Examples of suitable host systems include, but are not limited to, mail systems allowing web based access (e.g., Microsoft Exchange Server\u00ae), unified communication systems (e.g., IBM Lotus Sametime\u00ae, Microsoft Lync\u00ae, and Unison\u00ae), and content and\/or document management systems (e.g., IBM Lotus Quickr\u00ae and Microsoft Share Point\u00ae).","The host  has a number of responsibilities to facilitate interaction between the client computing device  and the external application server . The host  stores the user's data and initiates scenarios involving the external application server . The host  implements the wrapper for displaying the user interface pages hosted by each service application . Additionally, the host  implements and exposes the host endpoint  for receiving communications from the external application server . The host endpoint  is a web service that understands requests made using the open platform interface. The host  also provides file operations for the service application  via requests made using the open platform interface. Other responsibilities of the host  include handling access control to documents at the user level and license enforcement for the external application server . In one embodiment, the host  handles access control by generating an expiring access token (i.e., the authorization element) that is passed to the external application server  to authorize the requested operation.","Integration with the external application server is another responsibility of the host accomplished through a process called discovery during which the host learns about the functionality supported by external application server. Prior to discovery, the host is not required to have any knowledge of the availability or functionality of an external application server. All that is necessary is that the host understands the open platform interface used by the external application server. The behavior of the host changes based on the availability and functionality of the external application server.","The configuration, functionality, level of implementation of the open platform interface and the adherence to the conventions of the open platform interface by the host  determines the functionality of external application server available to the end user. If the host does not fully implement the open platform interface or does not meet the requirements for certain functionality of the external application server, that functionality is not available to the user. More specifically, if the host does not advertise support for specific functionality, the service application suppresses any features that require the unsupported functionality. For example, the service application should not allow the user to edit a document when the host is not capable of saving an updated copy of the file. Further, administrative control over access to a connected service application is optionally available through configuration of the host.","The host manages licensing for the service applications provided by the external application server. The host checks licensing at the same time it checks the user's permissions against a file. In order to perform the selected operation on the document, the user must have both appropriate permissions to perform the operation on the file and a valid license to use the associated service application. The host reports the results of the permission and licensing checks to the external application server. Additionally, the host optionally checks to see whether access to a particular document type supported by a service application is blocked via administrative control configured in the host. A blocked document type cannot be saved or retrieved by the host.","In various embodiments, the host checks licensing in response to a clicking a file type associated with a service application before invoking the default action. If the user does not have an appropriate license for the service application associated with the operation for a default click, the host does not attempt to execute the command (i.e., invoke the operation). In other embodiments, the host does not attempt to execute commands for which the user lacks appropriate permissions or against blocked document types.","In various embodiments, the host also checks licensing when generating dynamic user interface controls, such as a context menu, used to access to the functionality provided by the external application server. The dynamic user interface control generally provides the user with a list of operations that are available for that document type. If the user does not have an appropriate license for the service application associated with an operation for the document type, the host does not display the command in the dynamic user interface control. In other embodiments, the dynamic user interface control does not show commands for which the user lacks appropriate permissions or in connection with blocked document types.","In various embodiments, basic functionality, such as a view operation, are available without a license while advanced functionality, such as edit and conversion operations, requires a license. In one embodiment, use of the service application is licensed per user or per machine. In another embodiment, use of the service application is limited by the number of available concurrent licenses. In a further embodiment involving multiple service applications, a single license either applies to use of all service applications provided by a single external application server. In yet another embodiment, a license is required for each service application.","As mentioned previously, the host is a content server in which the host provides document storage. In an alternate embodiment, the host is configured to provide access to documents stored outside of the host (e.g., stored in the network file system or on a network attached storage device). In an alternate embodiment, the external application server is configured to request documents stored in any accessible content server or file storage system that accepts and understands file operation requests made using the open platform interface.","Online access to the host and the service application is provided by a web server. The external application server is most responsive when it has exclusive access to the web server. Communication lags resulting from shared use of the web server are more likely to make the experience less positive for the end user. A shared web server is acceptable in some situations where the other applications sharing the web server have low bandwidth requirements, are infrequently accessed, and\/or transfer small amounts of data. In one embodiment, the host and\/or the external application server use the services of an independent web server. In another embodiment, the external application server integrates a web server. In a still further embodiment, the host integrates a web server used by the external application server.","The open platform interface used for communication between the host and the external application server allows interaction with documents and uses an access token as an authorization\/authentication mechanism.","The open platform interface is both extensible and provides support for cross-version interface communication. The basic data transport mechanism of the open platform interface facilitates cross-platform communication. In various embodiments, the basic data is transferred in a JavaScript Object Notation (JSON) body, although it should be recognized that other human and\/or machine readable data interchange formats fall within the scope and spirit of the present invention. The open platform interface also follows the service oriented architecture principles of \u201cignore what you weren't expecting\u201d and \u201cuse default values for data you were expecting but didn't get\u201d used by some application programming interfaces such as the Windows Communication Foundation (WCF). The semantic of \u201cdefault values must result in acceptable behavior\u201d used by the open platform interface helps maintain functionality in a highly cross-versioned world. This semantic is particularly useful maintaining functionality between SkyDrive, Hotmail, and the production and integration environments of the external application server.","The primary extensibility mechanism of the open platform interface is through the declaration, implementation, and consumption of functional sets (e.g., Cobalt, CoAuth, Locking, Update). The core open platform interface only contains a method for getting the metadata associated with a document and a method for getting the document data. All other methods supported by the host are declared within the document metadata and returned as a list of supported functional sets. Each functional set is declared by string, and promises the implementation a set of methods supported by the open platform interface. The open interface defines the names of the functional sets and the associated methods promised by the functional set. The functional sets available for a host to implement are limited by the conventions of the open platform interface. In other words, the open platform interface does not provide a mechanism to attempt a fully generic method discovery similar to what Simple Object Access Protocol (SOAP) metadata exchange provides. The open platform interface is easily extended by declaring new functional sets.","In order to provide access to a service application, the host  must learn of the availability of and the functionality provided by the external application server . The external service application discovery process allows the host  to learn about an available external application server without requiring an administrator to manually configure the host . During the external service application discovery process the host  learns the file formats and the open platform interface verbs that are supported by the external application server .",{"@attributes":{"id":"p-0040","num":"0039"},"figref":"FIG. 2","b":["200","102","104","200","202","104","104","202","104","102","204","206","202","104","102","202","104","206","202","202","102"]},"After obtaining the discovery URL, the host  issues a discovery request  to the discovery endpoint . In one embodiment, the discovery request  is an HTTP GET request against the discovery URL. The discovery endpoint  provides the host  with the ability to connect with the discovery service . Upon receipt of the discovery request , the discovery service  responds with a discovery response message  containing the discovery data  describing the functionality provided by the service application running on the external application server. The discovery data  is formatted according to and contains information specified by the conventions of the open platform interface. In one embodiment, the discovery response message  does not contain any HTML in the message body. Instead, the body contains the discovery data described in an XML format understood by the host. In various embodiments, the discovery data contains information such as an identifier for the service application, a description of the service application, a file extension, an operation (i.e., action) associated with the file extension, any open platform interface implementation requirements for the host (e.g., functional sets), the location of the service application responsible for handling the operations, and\/or a mime type for the documents associated with the file extension.","The host  consumes the discovery data  returned by the discovery service . After consuming the discovery data , the host  stores the information about the actions supported by the service application for the associated file type in the host configuration store  (i.e., registers the service application). After completing the external service application discovery process , the behavior of the host changes to integrate the supported functionality of the service application.","The discovery data content and structure is specified by the open platform interface. The core data for discovery includes the action identifier, the file type associated with the action, and source URL for invoking the action. Optional discovery data includes the service application identifier, the requirements for the host to support the action, the folder\/directory identifier, the network zone identifier, the default click behavior, the target extension identifier, and the proof identifier. The action identifiers are defined by the conventions of the open platform interface and define the operations allowed against a particular file type. Examples of action identifiers include view, edit, editnew, mobileview, mobilehandler, embedview, present (present a broadcast), attend (attend a broadcast), convert. The file type describes the type of file to which the action applies. In one embodiment, the file type is specified by a file extension. The source URL specifies the input data for determining the absolute URL of the external application server that performs the action for the matching file type. The service application identifier is a human and machine readable identifier (e.g., a string value) for the supporting application (e.g., \u201cMicrosoft Excel Web App\u201d) identifies the service application. The network zone identifier describes the specific parameters (e.g., the source URL) used for the action when invoked from a particular network zone. The service application identifier and the network zone identifier are used to group the file type\/operation pairs and offer a meaningful way of presenting the available service applications in the host configuration user interface. The folder\/directory identifier is used with or instead of the file type for certain actions to identify the object of the action. The default click behavior specifies the action invoked by host when the user selects a file types supported by the service application without selecting a specific action through the user interface. The target extension identifier specifies the file type of the target file for the convert action. In one embodiment, the target extension identifier is specified by a file extension.","Registration associates the file types supported by each service application , the operations supported by the external application server  for each supported file type, and the URLs of a computing device in the external application server used to invoke the operations for each supported file type. In other words, when the host  connects to the external application server , the external application server  returns a list of paired file types and operations together with the URL used to invoke that operation for that file type. The parameters needed in the URL are defined by the open platform interface.","During discovery, the host chooses to make use of or ignore individual actions based on the conventions understood by the host at the time. In one embodiment, the host  verifies that it supports the requirements for the operation before registering the paired file type and operation. If the host  does not support the operation and\/or meet the hosting requirements, the paired file type and operation is not registered. More specifically, in some embodiments, the host uses the \u201crequires\u201d attribute, which specifies the open platform interface implementation requirements, to filter out actions the host cannot support. In other words, if the host does not recognize or understand all the fields listed in the \u201crequires\u201d attribute value or chooses not to support that convention of the open platform interface, the host does not register (i.e., implement) the paired file type and operation and does not offer that functionality to the user.","The source URL uses parameters to produce the valid service application entry URL associated with each action. As with the actions, the service application entry URL parameters are specified by convention in the open platform interface. Some parameters are required and others are optional. In one exemplary embodiment, the required parameters are delimited by square brackets (\u201c[\u201d and \u201c]\u201d) and the optional parameters are delimited by angled brackets (\u201c<\u201d and \u201c>\u201d). If the host does not understand a required parameter, the host does not register the action. Conversely, when an optional parameter is not understood, the host may choose to register the action. In such case, the functionality associated with the optional parameter is simply lost, but the host is still able to provide the action with as much functionality as the host understands. This behavior provides the basis for cross-version compatibility between different versions of the open platform interface. Even if an upgrade of the service application server provides new functionality, the host continues to work with the upgraded service application server. The host simply continues to provide support for the functionality it understands and ignores any functionality it does not understand. Examples of optional parameters include the language of the user interface, the language of the object's user interface, whether or not to embed the presentation frame, whether or not to allow a presentation attendee to independently switch slides, and whether or not to show thumbnails for slides.","The host is often accessible from various network zones. A network zone is often described by whether it is internal or external to the network and by the whether transport layer security is used. In order to fully describe the functionality of the external application server to the host, one embodiment of the discovery data describes the file type\/operation pairs for one or more possible zone configurations through the network zone identifier. For example, to work with a host that is accessible from via both an extranet (e.g., the internet) and an intranet (e.g., the enterprise local area network), one embodiment of the discovery data describes each file type\/operation pair with an service application URL for internal use and an service application URL for external use. Similarly, one embodiment of the discovery data describes the file type\/operation pairs with an service application URL for use with open network protocols (e.g., HTTP) and secure network protocols (e.g., HTTPS) to accommodate hosts that allow access using both secure and unsecure network protocols. Another embodiment of the discovery data describes each file type\/operation pair with a service application URL for each combination of internal\/external and secure\/insecure use (e.g., internal-http, external-http, internal-https, external-https). In some embodiments, the discovery conventions provide a fallback position to a lower security zone when the host is not configured for a secure network. In other words, if the host is not configured to a secure network protocol, service application URL specified to use a secure network protocol is altered and registered using a corresponding open network protocol. As a result, the functionality of the service application server is made available to the user, but without the benefit the secure network protocol.","For simplicity, one embodiment of the external service application discovery process defaults to associating the service applications with all zones configured in the host and sets the host endpoint allow list to allow all zones. Administrative control over the integration between the service applications and the various zones is available through some hosts. In various embodiments, integration is disabled at the service application server level (i.e., all service applications provided by the service application server are enabled or disabled) or at the service application level (i.e., service applications are selectively enabled or disabled). Where integration with the service application server\/service application is disabled, the host does not list the operations in dynamic user interface controls or attempt to execute the commands.","Optionally, the discovery data provided to the host includes cryptographic key information specific to the service application server. The cryptographic key information provides the host with a mechanism by which to verify that a request was in fact made by the service application server. When a request arrives at the host endpoint, the host optionally uses the cryptographic key information to validate the cryptographic signatures of the request. If the cryptographic signature cannot be validated, the host ignores the request.","In the various embodiments, the host implements error checking during the external service application discovery process. In one embodiment, the host generates a notification if the discovery URL is malformed. In another embodiment, the host generates a notification if the external application server is unresponsive or cannot be located. In a further embodiment, the host generates a notification if the discovery response is malformed. In yet another embodiment, the host generates a notification in the event of a conflict (i.e., if the external application server attempts to register a file type that is already registered) and does not register the service application.","In one embodiment, discovery occurs only when initiated by an administrator so the host and service application server do not automatically become aware of any changes in supported functionality of the other. In alternate embodiments, once the host and the service application server are connected, the discovery process provides an automated mechanism for updating the supported functionality. In the various embodiments of the automated discovery update process, updates are provided on a periodic basis (e.g., scheduled polling) or in real time (e.g., push notifications). Further, the various embodiments of the automated discovery update process are implemented on the host side (e.g., periodically repeating the discovery process) or the service application server side (e.g., the discovery service notifies the host of changes).","The inclusion of the external application server provides document handling services that are independent from the host. This eliminates the need to add new components or substantially modify the configuration of a working host that supports the external application server. By not modifying the operation or adding new components to a working host, the potential for breaking the working configuration or requiring substantial downtime of the host is minimized. This also allows the external application server services to upgraded, modified, added, or removed without requiring reconfiguration of the host. This is particularly beneficial because new versions and upgrades to document handling applications tend to occur much more frequently than upgrades to core services like the host. In other words, the enterprise is relieved from the downtown, risk, and burden of modifying the host just to take advantage of improvements to existing document handling applications, to add newly developed or newly required document handling applications, or to remove obsolete or deprecated document handling applications.","The embodiments and functionalities described herein may operate via a multitude of computing systems such as the host , and the external application server , and the client device  described above with reference to , including wired and wireless computing systems, mobile computing systems (e.g., mobile telephones, tablet or slate type computers, laptop computers, etc.). In addition, the embodiments and functionalities described herein may operate over distributed systems (e.g., cloud-based computing systems), where application functionality, memory, data storage and retrieval and various processing functions may be operated remotely from each other over a distributed computing network, such as the Internet or an intranet. User interfaces and information of various types may be displayed via on-board computing device displays or via remote display units associated with one or more computing devices. For example user interfaces and information of various types may be displayed and interacted with on a wall surface onto which user interfaces and information of various types are projected. Interaction with the multitude of computing systems with which embodiments of the invention may be practiced include, keystroke entry, touch screen entry, voice or other audio entry, gesture entry where an associated computing device is equipped with detection (e.g., camera) functionality for capturing and interpreting user gestures for controlling the functionality of the computing device, and the like.  and the associated descriptions provide a discussion of a variety of operating environments in which embodiments of the invention may be practiced. However, the devices and systems illustrated and discussed with respect to  are for purposes of example and illustration and are not limiting of a vast number of computing device configurations that may be utilized for practicing embodiments of the invention, described herein.",{"@attributes":{"id":"p-0054","num":"0053"},"figref":["FIG. 3","FIG. 3"],"b":["300","102","104","110","300","302","304","304","304","305","306","320","108","112","118","305","300","308"]},"Computing device  may have additional features or functionality. For example, computing device  may also include additional data storage devices (removable and\/or non-removable) such as, for example, magnetic disks, optical disks, or tape. Such additional storage is illustrated in  by a removable storage  and a non-removable storage .","As stated above, a number of program modules and data files may be stored in system memory , including operating system . While executing on processing unit , programming modules  may perform processes including, for example, one or more of the stages of the external service application discovery process . The aforementioned process is an example, and processing unit  may perform other processes. Other programming modules that may be used in accordance with embodiments of the present invention may include electronic mail and contacts applications, word processing applications, spreadsheet applications, database applications, slide presentation applications, drawing or computer-aided application programs, etc.","Generally, consistent with embodiments of the invention, program modules may include routines, programs, components, data structures, and other types of structures that may perform particular tasks or that may implement particular abstract data types. Moreover, embodiments of the invention may be practiced with other computer system configurations, including hand-held devices, multiprocessor systems, microprocessor-based or programmable consumer electronics, minicomputers, mainframe computers, and the like. Embodiments of the invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment, program modules may be located in both local and remote memory storage devices.","Furthermore, embodiments of the invention may be practiced in an electrical circuit comprising discrete electronic elements, packaged or integrated electronic chips containing logic gates, a circuit utilizing a microprocessor, or on a single chip containing electronic elements or microprocessors. For example, embodiments of the invention may be practiced via a system-on-a-chip (SOC) where each or many of the components illustrated in  may be integrated onto a single integrated circuit. Such an SOC device may include one or more processing units, graphics units, communications units, system virtualization units and various application functionality all of which are integrated (or \u201cburned\u201d) onto the chip substrate as a single integrated circuit. When operating via an SOC, the functionality of server applications  or client applications  may be implemented via application-specific logic integrated with other components of the computing device  on the single integrated circuit (chip). Embodiments of the invention may also be practiced using other technologies capable of performing logical operations such as, for example, AND, OR, and NOT, including but not limited to mechanical, optical, fluidic, and quantum technologies. In addition, embodiments of the invention may be practiced within a general purpose computer or in any other circuits or systems.","Embodiments of the invention, for example, may be implemented as a computer process (method), a computing system, or as an article of manufacture, such as a computer program product or computer readable media. The computer program product may be a computer storage media readable by a computer system and encoding a computer program of instructions for executing a computer process.","The term computer readable media as used herein may include computer storage media. Computer storage media may include volatile and nonvolatile, removable and non-removable media implemented in any method or technology for storage of information, such as computer readable instructions, data structures, program modules, or other data. System memory , removable storage , and non-removable storage  are all computer storage media examples (i.e., memory storage.) Computer storage media may include, but is not limited to, RAM, ROM, electrically erasable read-only memory (EEPROM), flash memory or other memory technology, CD-ROM, digital versatile disks (DVD) or other optical storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other medium which can be used to store information and which can be accessed by computing device . Any such computer storage media may be part of device . Computing device  may also have input device(s)  such as a keyboard, a mouse, a pen, a sound input device, a touch input device, etc. Output device(s)  such as a display, speakers, a printer, etc. may also be included. The aforementioned devices are examples and others may be used.","The term computer readable media as used herein may also include communication media. Communication media may be embodied by computer readable instructions, data structures, program modules, or other data in a modulated data signal, such as a carrier wave or other transport mechanism, and includes any information delivery media. The term \u201cmodulated data signal\u201d may describe a signal that has one or more characteristics set or changed in such a manner as to encode information in the signal. By way of example, and not limitation, communication media may include wired media such as a wired network or direct-wired connection, and wireless media such as acoustic, radio frequency (RF), infrared, and other wireless media. Computing device  may include communication connections  allowing communications with other computing devices . Examples of suitable communication connections  include, but are not limited to, RF transmitter, receiver, and\/or transceiver circuitry; universal serial bus (USB), parallel, or serial ports, and other connections appropriate for use with the applicable computer readable media.",{"@attributes":{"id":"p-0062","num":"0061"},"figref":["FIGS. 4A and 4B","FIG. 4A"],"b":["400","400","400","405","410","400","400","415","415","400","405","405","410","400","435","435"]},"Mobile computing device  incorporates output elements, such as display , which can display a graphical user interface (GUI). Other output elements include LED light  and speaker . Additionally, mobile computing device  may incorporate a vibration module (not shown), which causes mobile computing device  to vibrate to notify the user of an event. In yet another embodiment, mobile computing device  may incorporate a headphone jack (not shown) for providing another means of providing output signals.","Although described herein in combination with mobile computing device , in alternative embodiments the invention is used in combination with any number of computer systems, such as in desktop environments, laptop or notebook computer systems, multiprocessor systems, micro-processor based or programmable consumer electronics, network PCs, mini computers, main frame computers and the like. Embodiments of the invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network in a distributed computing environment; programs may be located in both local and remote memory storage devices. To summarize, any computer system having a plurality of environment sensors, a plurality of output elements to provide notifications to a user and a plurality of notification event types may incorporate embodiments of the present invention.",{"@attributes":{"id":"p-0065","num":"0064"},"figref":["FIG. 4B","FIG. 4A"],"b":["400","402","402","402"]},"One or more application programs  may be loaded into memory  and run on or in association with operating system . Examples of application programs include phone dialer programs, e-mail programs, personal information management (PIM) programs, word processing programs, spreadsheet programs, Internet browser programs, messaging programs, and so forth. System  also includes non-volatile storage  within memory . Non-volatile storage  may be used to store persistent information that should not be lost if system  is powered down. Applications  may use and store information in non-volatile storage , such as e-mail or other messages used by an e-mail application, and the like. A synchronization application (not shown) also resides on system  and is programmed to interact with a corresponding synchronization application resident on a host computer to keep the information stored in non-volatile storage  synchronized with corresponding information stored at the host computer. As should be appreciated, other applications may be loaded into memory  and run on the device , including the various client and server applications described herein.","System  has a power supply , which may be implemented as one or more batteries. Power supply  might further include an external power source, such as an AC adapter or a powered docking cradle that supplements or recharges the batteries.","System  may also include a radio  that performs the function of transmitting and receiving radio frequency communications. Radio  facilitates wireless connectivity between system  and the \u201coutside world\u201d, via a communications carrier or service provider. Transmissions to and from radio  are conducted under control of the operating system . In other words, communications received by radio  may be disseminated to application programs  via operating system , and vice versa.","Radio  allows system  to communicate with other computing devices, such as over a network. Radio  is one example of communication media. Communication media may typically be embodied by computer readable instructions, data structures, program modules, or other data in a modulated data signal, such as a carrier wave or other transport mechanism, and includes any information delivery media. The term \u201cmodulated data signal\u201d means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example, and not limitation, communication media includes wired media such as a wired network or direct-wired connection, and wireless media such as acoustic, RF, infrared and other wireless media. The term computer readable media as used herein includes both storage media and communication media.","This embodiment of system  is shown with two types of notification output devices: light emitting diode (LED)  that can be used to provide visual notifications and an audio interface  that can be used with speaker  to provide audio notifications. These devices may be directly coupled to power supply  so that when activated, they remain on for a duration dictated by the notification mechanism even though processor  and other components might shut down for conserving battery power. LED  may be programmed to remain on indefinitely until the user takes action to indicate the powered-on status of the device. Audio interface  is used to provide audible signals to and receive audible signals from the user. For example, in addition to being coupled to speaker , audio interface  may also be coupled to a microphone to receive audible input, such as to facilitate a telephone conversation. In accordance with embodiments of the present invention, the microphone may also serve as an audio sensor to facilitate control of notifications, as will be described below. System  may further include video interface  that enables an operation of on-board camera  to record still images, video stream, and the like.","A mobile computing device implementing system  may have additional features or functionality. For example, the device may also include additional data storage devices (removable and\/or non-removable) such as, magnetic disks, optical disks, or tape. Such additional storage is illustrated in  by storage . Computer storage media may include volatile and nonvolatile, removable and non-removable media implemented in any method or technology for storage of information, such as computer readable instructions, data structures, program modules, or other data.","Data\/information generated or captured by the device  and stored via the system  may be stored locally on the device , as described above, or the data may be stored on any number of storage media that may be accessed by the device via the radio  or via a wired connection between the device  and a separate computing device associated with the device , for example, a server computer in a distributed computing network, such as the Internet. As should be appreciated such data\/information may be accessed via the device  via the radio  or via a distributed computing network. Similarly, such data\/information may be readily transferred between computing devices for storage and use according to well-known data\/information transfer and storage means, including electronic mail and collaborative data\/information sharing systems.",{"@attributes":{"id":"p-0073","num":"0072"},"figref":"FIG. 5","b":["108","112","118","112","118","522","524","526","528","530","112","118","520","112","118","520","112","118","520","112","118","515","102","300","110","110","110","516"],"i":["a","b ","c "]},"Embodiments of the present invention, for example, are described above with reference to block diagrams and\/or operational illustrations of methods, systems, and computer program products according to embodiments of the invention. The functions\/acts noted in the blocks may occur out of the order as shown in any flowchart. For example, two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order, depending upon the functionality\/acts involved.","While certain embodiments of the invention have been described, other embodiments may exist. Furthermore, although embodiments of the present invention have been described as being associated with data stored in memory and other storage mediums, data can also be stored on or read from other types of computer-readable media, such as secondary storage devices, like hard disks, floppy disks, or a CD-ROM, a carrier wave from the Internet, or other forms of RAM or ROM. Further, the disclosed methods' stages may be modified in any manner, including by reordering stages and\/or inserting or deleting stages, without departing from the invention.","In various embodiments, the types of networks used for communication between the computing devices that make up the present invention include, but are not limited to, an internet, an intranet, wide area networks (WAN), local area networks (LAN), and virtual private networks (VPN). In the present application, the networks include the enterprise network and the network through which the client computing device accesses the enterprise network (i.e., the client network). In one embodiment, the client network is part of the enterprise network. In another embodiment, the client network is a separate network accessing the enterprise network through externally available entry points, such as a gateway, a remote access protocol, or a public or private internet address.","The description and illustration of one or more embodiments provided in this application are not intended to limit or restrict the scope of the invention as claimed in any way. The embodiments, examples, and details provided in this application are considered sufficient to convey possession and enable others to make and use the best mode of claimed invention. The claimed invention should not be construed as being limited to any embodiment, example, or detail provided in this application. Regardless of whether shown and described in combination or separately, the various features (both structural and methodological) are intended to be selectively included or omitted to produce an embodiment with a particular set of features. Having been provided with the description and illustration of the present application, one skilled in the art may envision variations, modifications, and alternate embodiments falling within the spirit of the broader aspects of the claimed invention and the general inventive concept embodied in this application that do not depart from the broader scope."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["Further features, aspects, and advantages of the present disclosure will become better understood by reference to the following detailed description, appended claims, and accompanying figures, wherein elements are not to scale so as to more clearly show the details, wherein like reference numbers indicate like elements throughout the several views, and wherein:",{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIGS. 4A and 4B"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 5"}]},"DETDESC":[{},{}]}
