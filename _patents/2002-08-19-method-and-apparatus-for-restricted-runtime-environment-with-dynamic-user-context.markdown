---
title: Method and apparatus for restricted run-time environment with dynamic user context
abstract: Embodiments of the present invention are directed to a method and apparatus for restricted run-time environment with dynamic user context. In one embodiment, a user interacts with the computer system through a restricted run-time environment. When the user begins using the computer system at a local machine (i.e., a client), a user context is dynamically created at the local machine. Then, a user interface is initiated in the run-time environment which is isolated from the local machine's system files. In one embodiment, the user interface and all actions resulting from interaction through the interface take place in the isolated run-time environment. In one embodiment, the isolated run-time environment contains its own set of system files that the user may need to access. In one embodiment, the local machine is running the Unixâ„¢ operating system. A user interacts with the system through an interface running from the chroot directory.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07069275&OS=07069275&RS=07069275
owner: Sun Microsystems, Inc.
number: 07069275
owner_city: Santa Clara
owner_country: US
publication_date: 20020819
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION"],"p":["1. Field of the Invention","The present invention relates to the field of computer user interfaces and, in particular, to a method and apparatus for restricted run-time environment with dynamic user context.","Sun, Sun Microsystems, the Sun logo, Solaris and all Java-based trademarks and logos are trademarks or registered trademarks of Sun Microsystems, Inc., in the United States and other countries. All SPARC trademarks are used under license and are trademarks of SPARC International, Inc., in the United States and other countries. Products bearing SPARC trademarks are based upon an architecture developed by Sun Microsystems, Inc.","2. Background Art","In some computer systems (e.g., thin client architectures) much of a user's data and computation is maintained and performed at a remote location using a server computer. When all of the data or computation necessary for a user's task is handled by a server, the user may easily interact with the system at different locations using different client computing devices. However, some applications require or prefer some data or computation to be handled at the client computer. Using prior art methods, the client's system data is vulnerable to tampering by a malicious user. Before further discussing the drawbacks of current schemes, it is instructive to discuss a computer architecture where this problem occurs.","Multi-Tier Application Architecture","In the multi-tier application architecture, a client communicates, for example, requests to a server for data, software and services, and the server responds to the requests. The server's response may entail communication with a database management system for the storage and retrieval of data.","The multi-tier architecture includes at least a database tier that includes a database server; an application tier that includes an application server and application logic (i.e., software application programs, functions, etc.); and a client tier. The data base server responds to application requests received from the client. The application server forwards data requests to the database server.",{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 1","b":["100","110","110"]},"Further application functionality is provided by application logic managed by an application server  in application tier . The apportionment of application functionality between client tier  and application tier  is dependent upon whether a \u201cthin client\u201d or a \u201cthick client\u201d topology is desired. In a thin client topology, the client tier (i.e., the end user's computer) is used primarily to display output and obtain input while the computing takes place in other tiers. On the other hand, a thick client topology uses a more conventional, general purpose computer which has processing, memory, and data storage abilities. Database tier  contains the data that is accessed by the application logic in application tier . Database server  manages the data and\/or its structure, as well as the operations that can be performed on the data and\/or its structure.","Application server  can include applications such as a corporation's scheduling, accounting, personnel and payroll applications. Application server  manages requests for the applications that are stored therein. Application server  can also manage the storage and dissemination of production versions of application logic. Database server  manages the database(s) that manage data for applications. For example, database server  responds to requests to access the scheduling, accounting, personnel and payroll applications' data.","Connection  is used to transmit data between client tier  and application tier , and may also be used to transfer the application logic to client tier . The client tier can communicate with the application tier via, for example, a Remote Method Invocator (RMI) application programming interface (API) available from Sun Microsystems\u2122. The RMT API provides the ability to invoke methods, or software modules, that reside on another computer system. Parameters are packaged and unpackaged for transmittal to and from the client tier. Connection  between application server  and database server  represents the transmission of requests for data and the responses to such requests from applications that reside in application server .","Elements of the client tier, the application tier and the database tier (e.g., client , application server  and database server ) may execute within a single computer. However, in a typical system, elements of the client tier, the application tier and the database tier may execute within separate computers interconnected over a network such as a LAN (local area network) or WAN (wide area network).","Local Machine System Security","If all of the user's data and computation (task) is handled at the remote location, the user will not need to create any files or modify any existing files on the client. Thus, in such a system, the user often is prevented from creating or modifying local files, which prevents a malicious user from damaging the local machine's system information, yet, still enables full use of the system. However, if some user task requires that the user be able to create or modify a local file, in prior art methods, a malicious user may be able to modify and damage the local machine's system information (i.e., the system information in the client tier). Thus, a need exists to allow a user to create or modify a local file while preventing a malicious user from modifying or damaging the local machine's system information.","Embodiments of the present invention are directed to a method and apparatus for restricted run-time environment with dynamic user context. In one embodiment of the present invention, a user interacts with the computer system through a restricted run-time environment. When the user begins using the computer system at a local machine (i.e., a client), a user context is dynamically created at the local machine. Then, a user interface is initiated in the run-time environment which is isolated from the local machine's system files.","In one embodiment, the user interface and all actions resulting therefrom occurs in the isolated run-time environment. In one embodiment, the isolated run-time environment contains its own set of system files available for user access.","In one embodiment, the local machine is running the Unix\u2122 operating system. A user interacts with the system through an interface running from the chroot directory. All actions initiated by the interface also run from a chroot directory. Thus, a malicious user is unable to tamper with the local machine's system files.","In one embodiment, the user interface requires a local user context. Before the user interface is initiated, the local user context is dynamically generated for the user. In one embodiment, some of the user context data is downloaded from the system to the local machine and incorporated in the local user context. In another embodiment, the local machine contains default user context data. The default user context data is incorporated in the local user context. In one embodiment, if the system is unavailable, a default local user context is generated from the default user context data.","In one embodiment, the user may persistently alter a portion of the user context data from the system. After the context data is altered, the altered data is uploaded to the system. In another embodiment, the user may temporarily alter a portion of the default user context data on the local machine. When the user stops using the system (e.g., logs out), the temporary alterations are lost and the default user context data is restored. In another embodiment, the user is prevented from altering some portions of the user context.","In one embodiment, the user interface is a web browser (e.g., Netscape). The user displays standard web content using the web browser. In one embodiment, the user uses applets to adapt to changing needs. In one embodiment, the web browser initiates helper applications to perform specific tasks (e.g., scripting, Java virtual machine, image output, video output or audio output).","The invention is a method and apparatus for restricted run-time environment with dynamic user context. In the following description, numerous specific details are set forth to provide a more thorough description of embodiments of the invention. It is apparent, however, to one skilled in the art, that the invention may be practiced without these specific details. In other instances, well known features have not been described in detail so as not to obscure the invention.","Restricted Run-Time Environment","In one embodiment of the present invention, a user interacts with the computer system (e.g., a system having a multi-tier application architecture) through a restricted run-time environment. When the user begins using the computer system at a local machine (i.e., a client and\/or a simple local server, such as a Sunray server that only executes a browser for a thin client and\/or a plurality of thin clients), a user context is dynamically created at the local machine. Then, the user interface is initiated in a run-time environment, which is isolated from the local machine's system files.","In one embodiment, the user context for the user can be dynamically created from a preset pool of available user contexts. Every time the user initiates the use of the system, an available user context is selected for that user and every time that user has completed the use of the system, the user context is put back into the pool to be later reused by that user and\/or another user. The user context may include preference information, such as font settings, and\/or protection information, such as where a user can create files, what files a user can access, and\/or where the user can access the files.",{"@attributes":{"id":"p-0043","num":"0042"},"figref":"FIG. 2","b":["200","210","220"]},{"@attributes":{"id":"p-0044","num":"0043"},"figref":"FIG. 3","b":["300","310"]},"At block , a user context is dynamically created at the local machine for the user. At block , a user interface (e.g., a browser) is initiated in the restricted run-time environment. Since the user interface is initiated in the restricted run-time environment, the user will not be able to tamper with the local machine's system files, which are maintained outside the restricted run-time environment.","In one embodiment, the user interface and all actions resulting from interaction through the interface take place in the isolated run-time environment. In one embodiment, the restricted (or isolated) run-time environment contains its own set of system files the user may need to access. Thus, system files in the restricted run-time environment may be upgraded for the user without altering a stable set of system files used by the local machine.",{"@attributes":{"id":"p-0047","num":"0046"},"figref":"FIG. 4","b":["400","410","420","430"]},{"@attributes":{"id":"p-0048","num":"0047"},"figref":"FIG. 5","b":["500","510"]},"At block , a user context is dynamically created at the local machine (i.e., the client tire) for the user. At block , a user interface is initiated in the restricted run-time environment. Since the user interface is initiated in the restricted run-time environment, the user will not be able to tamper with the local machine's system files, which are maintained outside the restricted run-time environment. The system files contained in the restricted run-time environment are still at potential risk of user tampering.","Chroot Environment","In one embodiment, the local machine is running the Unix\u2122 operating system. A user interacts with the system through an interface running from a chroot (or change root) directory. All actions initiated by the interface also run from the chroot directory. The chroot directory (or environment) is an alternate root directory that appears as the root directory for a given process or set of processes. Thus, a malicious user is unable to tamper with the local machine's system files in the main directory because the user is confined to the directory tree below the chroot directory (i.e., the user only has access to files stored in the directory tree below the chroot directory).",{"@attributes":{"id":"p-0052","num":"0051"},"figref":"FIG. 6","b":["600","610"]},"At block , a user context is dynamically created at the local machine for the user. At block , a user interface is initiated in the chroot environment. Since the user interface is initiated in the chroot environment, the user will not be able to tamper with the local machine's system files, which are maintained outside the chroot environment. However, the system files contained in the chroot environment are used by the user and remain at risk for user tampering.","In one embodiment, all users of a local machine share a single chroot environment. Protection within the chroot environment is provided (only) by the standard Unix user semantics. Use of the chroot environment provides greater protection for the system resources outside of the chroot environment.",{"@attributes":{"id":"p-0055","num":"0054"},"figref":"FIG. 7","b":["700","0"]},"A second script for putting the user in the level two  (e.g., bbcontrol) is then executed (with the new user permissions set up in level one ). At this level , execution is done in the root file system with the newly created or assigned userX permission (e.g., user permission or user-specific permission) rather than the root permission. In addition, scripts for supporting and\/or monitoring (e.g., bbstartd) are started, and a script for stating the browser (e.g., bbstartbrowser) is started as a background process. The supporting and\/or monitoring scripts should reside outside the chroot environment but should perform the supporting and\/or monitoring tasks for the chroot environment. The window manager (wm) is also initiated at this permission level  and does not terminate until the user (e.g., user) logs out of the webtop.","The execution then switches to the level three protection scheme. Level three  is the level for user applications. The window manager (wm), the browser, and any application(s) (defined and\/or available in the chroot environment) that the window manager and\/or the browser spawn (or start) run with level three permission (e.g., a user application-specific permission) in the chroot environment. Thus, the user applications use the system files provided within the chroot environment without access to the root system files in the environment used by the local machine.","In addition to increased security, the reason for using the three-level scheme is to provide for easy cleaning or evicting of user-related information when a user exits from the system. For example, on exit of a session the system only has to scan the process table for processes associated with user ids, userX (e.g., user), and evict them.","The cleaning\/evicting of user-related information should be the last step in a user session (i.e., in the bbrootsession script). As a default, no processes with the specific user IDs, userX (e.g., user), should remain after userX has exited from the system. An optional script for running tasks on the system may be provided to allow certain user-specific information to remain on the system after the user has exited.","Dynamic User Context","In one embodiment, the user interface requires a local user context. Before the user interface is initiated, a local user context is dynamically generated for the user (i.e., automatically selected from a preset pool of reserved user contexts).  illustrates the process of initiating a user interface in accordance with one embodiment of the present invention. At block , a user requests to connect to a computer system. At block , a local user context is dynamically generated for the user. The local user context may include preferences such as font settings. At block , a user interface is initiated using the local user context for the user.","In one embodiment, some of the user context data is downloaded from the system to the local machine and incorporated in the local user context. In another embodiment, the local machine contains default user context data. The default user context data is incorporated in the local user context. In one embodiment, if the user context data on the system is unavailable, a default local user context is generated from the default user context data.",{"@attributes":{"id":"p-0063","num":"0062"},"figref":"FIG. 9","b":["900","910","920","930","950","940","950","950"]},"Altering User Contexts","In one embodiment, the user may persistently alter a portion of the user context data from the system. After the context data is altered, the altered data is uploaded to the system.  illustrates the process of persistently altering user context data in accordance with one embodiment of the present invention. At block , user context data is downloaded from the system. At block , a local user context is generated using the downloaded user context data.","At block , a user interface is initiated using the local user context. At block , the user alters part of the user context data that is stored on the system. At block , the user logs out and the altered user context data is uploaded to the system for persistent storage.","In another embodiment, the user may temporarily alter a portion of the default user context data on the local machine. When the user stops using the system (e.g., logs out), the temporary alterations are lost and the default user context data is restored. In another embodiment, the user is prevented from altering some portions of the user context.",{"@attributes":{"id":"p-0068","num":"0067"},"figref":"FIG. 11","b":["1100","1110","1120","1130","1170"]},"If the user is allowed to alter the aspect of the local user context, it is determined whether the user is allowed to persistently alter the aspect of the local user context at block . If the user is not allowed to persistently alter the aspect of the local user context, the aspect of the local user context is temporarily altered at block  and the process continues at block . In one embodiment, aspects are temporarily altered by altering the aspect in memory, but not altering the aspect as it is stored on a persistent storage device. Thus, when a user logs out, all temporary changes are lost and the unchanged stored value is used in generating subsequent local user contexts.","If the user is allowed to persistently alter the aspect of the local user context, the aspect of the local user context is altered and marked for persistent alteration at block . At block , it is determined whether the user attempts more alterations. If the user attempts more alterations, the process repeats at block . If the user does not attempt more alterations, the user logs off and all persistent alterations of the local user context are uploaded to the system for persistent storage at block .","Web Browser Interface","In one embodiment, the user interface is a web browser (e.g., Netscape). The user displays standard web content using the web browser (e.g., HTML, JPEG, GIF, Java and Javascript). In one embodiment, the web browser is Netscape Navigator (e.g., Netscape Navigator 4.75) with only the browser enabled. In one embodiment, two configuration files (i.e., a global netscape.cfg and a preferences.js) are used to help generate the dynamic local user context. In one embodiment, the configuration file, preferences js, is generated dynamically each time the browser is started.","In one embodiment, the user uses applets to adapt to changing needs. In one embodiment, the web browser initiates helper applications to perform specific tasks (e.g., scripting, Java virtual machine, image output, video output or audio output).","In one embodiment, documents in portable data format (PDF) are rendered using the Adobe Acrobat Reader (Acroread) as a helper function. In another embodiment, forms data format (FDF) files are rendered using Acroread as a helper function. In one embodiment, postscript documents (e.g., PS and EPS) are converted to PDF files using Ghostscript and are displayed using Acroread. In another embodiment, TIF and TIFF documents are displayed using a plug-in. In yet another embodiment, G3 documents are displayed using a plugin.","Multimedia Content","In other embodiments, multimedia content is handled by helpers or plugins. In one embodiment SMI files are displayed using RealPlayer (e.g., RealPlayer7). In another embodiment, SPL files are displayed using Macromedia Plugin. In yet another embodiment, SWF files are displayed using Macromedia Plugin. In various embodiments, Java Media Framework is used to display UA, SND, G728, G729, G729a, MID, MIDI, MP3, RMF, AIFF, AIF, GSM, WAV, MPEG, MGP, MPE, MPV, VBS, MPEGV, MOV, MPV2, MP2V, or AVI files.","In other embodiments, RealPlayer (e.g., RealPlayer7) is used to display RA, RM, RAM or M3U. In one embodiment, RealPlayer Plugin is used to display RPM files. In various embodiments, Java Plugin is used to handle different MIME types. For example, java bean, java applet and java vm are handled by Java Plugin.","Example of an Implementation","One embodiment of the invention is implemented in a computer system having a local machine and a data center server. The local machine includes an input\/output unit or units (e.g., a \u201cHuman Interface Device\u201d described below) and a local box having a local server (e.g., a Sunray server). The input\/output unit is for receiving and displaying data. The local box is for running the local server and a restricted run-time environment. The local server is for executing an interface, such as a browser, for the input\/output unit or units. The data center server is for providing all other state maintenance and computation functions.","Moreover, an embodiment of the invention is used as part of a thin client architecture system.  shows an example of a thin client topology called a virtual desktop system architecture. The virtual desktop system architecture provides a re-partitioning of functionality between a central server installation  and end user hardware . Data and computational functionality are provided by data sources via a centralized processing arrangement. At the user end, all functionality is eliminated except that which generates output to the user (e.g., display and speakers) and takes input from the user (e.g., mouse and keyboard) or other peripherals with which the user may interact (e.g., scanners, cameras, removable storage, etc.). All computing is done by the central data source and the computing is done independently of the destination of the data being generated. The output of the source is provided to a terminal referred to here as a \u201cHuman Interface Device\u201d (HID). The HID is capable of receiving and displaying the data.","The functionality of the virtual desktop system is partitioned between a display and an input device, such as a remote system and associated display device, and data sources or services, such as a host system interconnected to the remote system via a communication link. The display and input device is a human interface device (HID). The system is partitioned such that state maintenance and computation functions have been removed from the HID and reside on data sources or services. One or more services communicate with one or more HIDs through a communication link, such as a network. An example of such a system is illustrated in  wherein the system comprises computational service providers  communicating data through communication link  to HIDs .","The computational power and state maintenance are provided by the service providers or services. The services are not tied to a specific computer, but may be distributed over one or more traditional desktop systems, such as described in connection with , or with traditional servers. One computer may have one or more services and a service may be implemented by one or more computers. The service provides computation, state and data (i.e., state maintenance) to HIDs and the service is under the control of a common authority or manager. In , the services are provided by computers , , and . In addition to the services, a central data source can provide data to the HIDs from an external source, such as, for example, the Internet or World Wide Web. The data source also can be broadcast entities, such as those that broadcast data (e.g., television and radio signals).","Examples of services include, among others, X11\/Unix services, archived or live audio or video services, Windows NT service, and Java\u2122 program execution service. A service herein is a process that provides output data and response to user requests and input. The service handles communication with an HID currently used by a user to access the service. This includes taking the output from the computational service and converting it to a standard protocol for the HID. The data protocol conversion is handled by a middleware layer, such as the X11 server, the Microsoft Windows interface, video format transcoder, the OpenGL\u00ae interface, or a variant of the java.awt.graphics class, within the service producer machine. The service machine handles the translation to and from a virtual desktop architecture wire protocol described further below.","Each service is provided by a computing device optimized for its performance. For example, an Enterprise class machine (e.g., a data center server, a multi-CPU server, and\/or a Sun E4500 server) could be used to provide X11\/Unix service, a Sun MediaCenter\u2122 could be used to provide video service, and a Hydra based NT machine could provide applet program execution services.","The service providing computer system can connect directly to the HIDs through the interconnect fabric. It is also possible for the service producer to be a proxy for another device providing the computational service, such as a database computer in a three-tier architecture, where the proxy computer might only generate queries and execute user interface code.","The interconnect fabric can comprise any of multiple, suitable communication paths for carrying data between the services and the HIDs. In one embodiment the interconnect fabric is a local area network implemented as an Ethernet network. Any other local network may also be utilized. The invention also contemplates the use of wide area networks, the Internet, the World Wide Web, and others. The interconnect fabric may be implemented with a physical medium, such as a wire or fiber optic cable, or it may be implemented in a wireless environment.","The interconnect fabric provides actively managed, low-latent, high-bandwidth communication between the HID and the services being accessed. One embodiment contemplates a single-level, switched network with cooperative (as opposed to completing) network traffic. Dedicated or shared communication interconnects may be used in the present invention.","The HID is the means by which users access the computational services provided by the services.  illustrates HIDs ,  and . Each HID comprises a display , a keyboard , a mouse , and audio speakers . The HID includes the electronics needed to interface these devices to the interconnection fabric and to transmit to and receive data from the services.","A block diagram of an example embodiment of the HID is illustrated in . The components of the HID are coupled internally to a PCI bus . Network control block  communicates to the interconnect fabric, such as an Ethernet, through line . An audio codec  receives audio data on interface  and is coupled to network control block . USB data communication is provided on lines  to a USB controller . The HID further comprises an embedded processor  such as a Sparc2ep with coupled flash memory  and DRAM . The USB controller , the network control block  and the embedded processor  are all coupled to the PCI bus . A video controller , also coupled to the PCI bus , can include an ATI RagePro+ frame buffer controller, which provides SVGA output on the line . NTSC data is provided in and out of the video controller through video decoder  and encoder , respectively. A smartcard interface  may also be coupled to the video controller .","Alternatively, the HID can comprise a single chip implementation, as illustrated in . The single chip includes the necessary processing capability implemented via CPU  and graphics renderer . Chip memory  is provided along with video controller\/interface . An internal bus (USB) controller  is provided to permit communication to a mouse, a keyboard and other local devices attached to the HID. A sound controller  and an interconnect interface  are also provided. The video interface shares memory  with the CPU  and graphics renderer . The software used in this embodiment may reside locally in on-volatile memory or it can be loaded through the interconnection interface when the device is powered.","Thus, a method and apparatus for restricted run-time environment with dynamic user context is described in conjunction with one or more specific embodiments. The invention is defined by the following claims and their full scope and equivalents."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["These and other features, aspects and advantages of the present invention will become better understood with regard to the following description, appended claims and accompanying drawings where:",{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIG. 13"},{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIG. 14"},{"@attributes":{"id":"p-0038","num":"0037"},"figref":"FIG. 15"}]},"DETDESC":[{},{}]}
