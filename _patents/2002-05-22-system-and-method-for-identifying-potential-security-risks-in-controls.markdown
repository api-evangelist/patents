---
title: System and method for identifying potential security risks in controls
abstract: Controls of interest are indentified by determining which installed software objects associated with the application of interest exhibit certain characteristics, such as being publicly creatable, being designated as safe, and providing a security-related interface. Once the controls of interest are identified from the installed software objects, information associated with each control is obtained and stored. Each time the software program of interest is modified and re-installed, the information is updated to reflect the modifications. Additional information is also stored with the information. The information and the additional information may be provided to a browser for display and may be modified by a user to describe a present state associated with the control of interest (i.e., tested, untested).
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07577941&OS=07577941&RS=07577941
owner: Microsoft Corporation
number: 07577941
owner_city: Redmond
owner_country: US
publication_date: 20020522
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENT"],"p":["The Internet and the World Wide Web continue to offer users access to increasingly sophisticated content through Web pages. In the past, Web pages typically contained simple text and some graphics. Thus, the Web pages were very unlikely to cause harm to a user's computer system. Now, Web pages are designed to provide more sophisticated content, that is not natively supported by a browser. The sophisticated content allows the users to interact with Web pages in new and innovative ways. For the purpose of this discussion, this sophisticated content is referred to as active content. In some cases, in order to provide this active content, the Web pages may require additional executable code to run on the system that is viewing the Web page (i.e., the user's system).","One technique for providing active content is through the use of ActiveX controls. However, ActiveX controls are not only found in Web pages, but are also commonly found in packaged software products, freeware and shareware products. Any of these sources of ActiveX controls may eventually cause the ActiveX control to get installed on the user's system, such as when new software products are installed, when downloading content from the Internet, or the like. Once installed, the ActiveX control is available for use by any code that knows of the ActiveX control's existence.","For example, a Web page may include an object tag identifying an ActiveX control. A scripting engine within a browser application will read the object tag and instantiate the ActiveX control and begin processing provided by the ActiveX control. When the ActiveX control is designated as unsafe, the Internet browser application will provide an option to the user explaining that the ActiveX control is unsafe and will ask whether the user wishes to proceed anyway. Thus, the user is provided an opportunity to forego using the active content provided by the unsafe ActiveX control. However, once the ActiveX control is designated as safe, the Internet browser application may proceed to run the ActiveX control without warning.","Therefore, once the ActiveX control is installed on the user's system and designated as safe, anyone that knows of the control's existence or anyone that finds out about the control's existence may cause the user to use the ActiveX control without the user even knowing. This provides an opportunity for someone to purposefully harm a user's system by using an ActiveX control in a malicious manner. This is especially worrisome because the ActiveX control may get installed on the user's system and designated as safe automatically without warning to the user if the user has previously expressed acceptance of digitally signed code by a company associated with the ActiveX control. Thus, there is a huge concern that someone may use one of the numerous ActiveX controls created by a reputable software company in a malicious manner to harm the user's computer. Until the present invention, a mechanism did not exist that would allow software companies to easily identify potential security risks in ActiveX controls designed by them for use in their commercial software products.","The present invention provides a system and method for tracking and verifying that controls associated with an application of interest do not present a potential security risk. The method includes identifying controls of interest by determining which installed software objects associated with the application of interest exhibit certain characteristics, such as being publicly creatable, being designated as safe, and providing a security-related interface. Once the controls of interest are identified from the installed software objects, information associated with each control is obtained and stored. Each time the software program of interest is modified and re-installed, the information is updated to reflect the modifications. Additional information is also stored with the information. The addition information provides a mechanism for tracking changes and verifying testing of the controls of interest.","In one aspect of the invention, the information and the additional information are provided to a browser for display and are modifiable to describe a present state associated with the control of interest (i.e., tested, untested).","Briefly stated, the present invention provides a rich display of information about a control (e.g., ActiveX control) to a client computer in response to a request for information about the control. The rich display includes change information, testing information, and review information that enables a software developer and others the ability to determine whether additional testing or review is necessary to ensure that the control is secure. The rich display also includes general information about the requested control. This general information is extracted from the client computer each time controls are installed after a build of the controls. The general information is sent to a web server that is responsible for storing the general information and for providing the general information and the rich display to user computers. Embodiments of the invention will now be described to facilitate a better understanding of the invention. The described environment pertains to an ActiveX software development environment. However, the invention is not limited to these specific embodiments, but rather is defined only by the scope of the appended claims.",{"@attributes":{"id":"p-0018","num":"0017"},"figref":["FIG. 1","FIG. 1","FIG. 1"],"b":["100","100","102","104","104","104","105","106","107","100","108"]},"Computing device  may have additional features or functionality. For example, computing device  may also include additional data storage devices (removable and\/or non-removable) such as, for example, magnetic disks, optical disks, or tape. Such additional storage is illustrated in  by removable storage  and non-removable storage . Computer storage media may include volatile and nonvolatile, removable and non-removable media implemented in any method or technology for storage of information, such as computer readable instructions, data structures, program modules, or other data. System memory , removable storage  and non-removable storage  are all examples of computer storage media. Computer storage media includes, but is not limited to, RAM, ROM, EEPROM, flash memory or other memory technology, CD-ROM, digital versatile disks (DVD) or other optical storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other medium which can be used to store the desired information and which can be accessed by computing device . Any such computer storage media may be part of device . Computing device  may also have input device(s)  such as keyboard, mouse, pen, voice input device, touch input device, etc. Output device(s)  such as a display, speakers, printer, etc. may also be included. These devices are well known in the art and need not be discussed at length here.","Computing device  may also contain communication connections  that allow the device to communicate with other computing devices , such as over a network. Communication connections  is one example of communication media. Communication media may typically be embodied by computer readable instructions, data structures, program modules, or other data in a modulated data signal, such as a carrier wave or other transport mechanism, and includes any information delivery media. The term \u201cmodulated data signal\u201d means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example, and not limitation, communication media includes wired media such as a wired network or direct-wired connection, and wireless media such as acoustic, RF, infrared and other wireless media. The term computer readable media as used herein includes both storage media and communication media.",{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 2","b":["200","200","204","206","208","212","214","210","210","208"]},"In this implementation, user computers -, build computer , client computer , and web server  are computing devices such as the one described above in conjunction with . Client computer  includes an extraction process (i.e., one of program modules  shown in ). One of the advantages of the present invention is that developers do not necessarily have to alert testers that their code is an ActiveX control and that their code needs to be tested for security concerns. Rather, in accordance with the present invention, the determination of whether code is an ActiveX control is performed automatically. This determination, described in detail later in conjunction with , is performed by the extraction process on client computer . Briefly described, program files (e.g., program file ) are installed on client computer . Program files  are built by developers on build computer . Some of these program files  include ActiveX control code (e.g., ActiveX control ). Using registry , the client computer  creates a baseline  that identifies all ActiveX controls installed. Then, when additional program files  are installed or modified, the client computer  creates a change file  that identifies new ActiveX controls and modified ActiveX controls. The change file  is then submitted to Web server  for storing in database .","Web server  includes a process for handling requests from the client computer  to update database  with information regarding installed ActiveX controls. In addition, Web server  includes a process for handling requests from the user computers - for information about the installed ActiveX controls. The server process (e.g., one of program modules  on Web server ) is described in detail later in conjunction with . This server process provides another advantage of the present invention, namely, the ability of the software developers and, perhaps, their managers to track changes, ownership, and review in a more convenient and friendly manner. The interface provided for display on the user computers - is discussed in detail below in conjunction with .","Now, before explaining how the ActiveX controls are identified by the client computer and how information associated with the ActiveX controls is stored in the web server, the rich display of information provided to a user on one of the user computers - is described.  are illustrative screen shots of a user interface that may be displayed on the user computer using data provided by the Web server shown in , in accordance with one implementation of the invention.",{"@attributes":{"id":"p-0025","num":"0024"},"figref":["FIG. 3","FIG. 2"],"b":["300","220","300","300","302"]},"Now, assuming \u201cOWC10.DLL\u201d is displayed in the filename box  and is selected, when more information button  is selected, illustrative screen shot  may be presented to the user as shown in . Screen shot  includes the filename box  in addition to an object box . Object box  includes an object list  that identifies each object in the selected file (e.g., \u201cOWC10.DLL\u201d). One of the objects in the object list  may be selected and more detailed information pertaining to the selected object will appear.",{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 5","b":["501","300","400","500","502","504","501","514","514","520","522","524","526","501"]},"For example, when a developer or tester wishes to view changes, an unapproved change link  is selected.  is an exemplary screen shot  illustrating the unapproved changes. From this screen shot , a user can sign off on specific changes by selecting a corresponding checkbox (e.g., checkbox ). Alternatively, the user may sign off on all the listed changes by selecting a \u201cSelect All\u201d button . In either case, once the desired changes have been selected, the user selects an approved change button  to effectively sign-off on the changes. The sign-off information will then be transmitted to the web server  and maintained for future reference.","In another example, when a developer wishes to edit details about the object, the user clicks an edit icon , shown in .  is an exemplary screen shot illustrating current information pertaining to the object. The current information is identical to the information displayed in the summary information  in . However, some fields may have an associated editable field (e.g., edit field ) allowing the user to enter changes. These changes are then submitted to the web server when update button  is selected. One will note that certain fields may not be editable, such as the object name, and CLSID.","In yet another example, from screen shot , the user may obtain additional information about one of the members by selecting the member and clicking more information button .  is exemplary screen shot  illustrating addition information, such as prototype , comments , and sample code . Again, some of these entries may be easily edited by selecting edit link .","Therefore, a tester can clearly and conveniently indicate the review and testing of the object upon each change made to the object. This allows the present invention to track changes, which become invaluable when determining whether a control has been adequately reviewed and tested. In addition, the present invention allows reports to be run on the controls to see which ActiveX controls need to be tested from a security standpoint. In addition, the present invention provides a mechanism for storing pertinent information regarding the controls that will be valuable to future team members of the software development team.","The following discussion describes how this available information is obtained and stored. While the current discussion describes the invention in the context of a software development environment, the invention may also be utilized to obtain information about controls in an off-the-shelf product. Thus, the ActiveX controls in the off-the-shelf product can be identified and reviewed in order to identify potential security risks in controls in that product.",{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 9","b":["900","901","900","902"]},"At decision block , a determination is made whether a baseline exists (i.e., baseline  shown in ). The baseline allows the present invention to be able to track changes to controls that have been installed on a computer. If a baseline does not exist, the process continues at block  where a baseline is created. The process for creating a baseline is described below in conjunction with . Once the baseline has been created, the process proceeds to the end block. If a baseline currently exists, processing continues at block .","At block , the controls are reviewed and classified as potential controls if certain conditions are met. Briefly, information is obtained from objects within a registry, and from files and type libraries associated with the objects obtained from the registry and the file system. This information identifies a set of potential controls. The process for identifying potential controls is described in detail later in conjunction with . Processing continues at block .","At block , a set of controls of interest is identified from within the potential controls. Briefly, the potential controls are further investigated in order to determine which of the potential controls have been designated as safe or warrant being classified as safe due to the nature of the potential control. The process for identifying the controls of interest is described in detail later in conjunction with . Processing continues at block .","At block , the controls of interest are further reviewed in order to determine whether the control needs to be updated or added to the database on the web server. The controls that need to be updated or added are identified in a modify list. In general, the modify list identifies new controls and identifies updates to members associated with existing controls. The process for creating the modify list is described in detail later in conjunction with . Processing continues at block .","At block , the modify list is submitted to the web server for processing. In one embodiment, each of the changes listed in the modify list is sent in a change request at as HTTP POST request to the web server. Because the web server services each request statelessly and independently, the change requests are submitted in a specific order. For example, an object is submitted before members associated with the object are submitted. Once each of the changes listed in the modify list has been sent, processing is complete and proceeds to the end block.",{"@attributes":{"id":"p-0039","num":"0038"},"figref":["FIG. 10","FIG. 9"],"b":["1000","1001","1002"]},"At block , the controls are installed. As mentioned above, controls are typically installed when installing a software application on the client computer. Therefore, when creating the baseline, applications that are not of interest to the present development application are installed. Processing continues at block .","At block , each control that was installed is identified. In one embodiment, this identification occurs by reviewing entries in a registry. When running in one exemplary operating system, the registry may include a HKEY_CLASSES_ROOT\\CLSID key that contains subkeys for each object that is installed. The name of the subkey corresponds to the object's class identifier (CLSID). Therefore, each object currently in the above key does not need to be tracked or reviewed with respect to the application being currently developed. Processing continues at block .","At block , each class identifier is written to a text file (e.g., baseline file  shown in ). This baseline file will then be used later when identifying whether a control is associated with the application currently being developed (hereinafter referred to as application of interest). Processing then proceeds to return block. Process  may install numerous applications at block .",{"@attributes":{"id":"p-0043","num":"0042"},"figref":["FIG. 11","FIG. 9"],"b":["1100","1101","1102"]},"At block , a complete install of the application of interest is performed. This install is done so that all the components of the application of interest are installed on one computer (i.e., the client computer ). For example, typically, an install program allows various configurations to be installed. Because the present invention desires to alert potential security risks in controls, the present invention attempts to force all the components to become installed. Processing continues at block .","At block , objects that have been registered are identified and compared with the baseline. Because the present invention is interested only in the potential security risks created by the application of interest, the object that were previously in the baseline are removed from further investigation. Thus, the remaining objects are designated as identified objects. However, these identified objects unfortunately may not represent all possible controls because some controls may not have registered themselves during the install process. Thus, additional processing is performed in order to identify all possible potential controls. Processing continues at block .","At block , a file list is created based on the identified objects thus far. The file list contains a pathname to an executable file. The executable file typically includes DLL, EXE, OCX, or OCA code for the identified object. As will be appreciated by those skilled in the art, the executable file may have any file extension. This pathname is obtained by looking in the registry for the identified object. Because multiple objects may reference the same file, duplicate pathnames are not added to the file list. Once all the pathnames are obtained for the current identified objects and written to the file list, processing continues at block .","At block , these executable files identified in the file list are loaded. At this point, the present invention is attempting to ferret out all possible controls that may be \u201chidden\u201d in the program files. Thus, in addition, an in-process server identified for each identified file is called to attempt to force registration of the identified file. In one embodiment, this entails calling an application programming interface, such as DllRegisterServer. Processing continues at block .","At block , each type library associated with the program file is identified. Because multiple type libraries may reference the same control, the process checks to make sure that the control has not been previously processed. The type library for each program file is identified by opening the program file, searching the program file at a specific location based on the executable binary file format of the program file, reading the type library, and parsing the type library that was read. The type library is then available later on when necessary. Processing continues at block ","At block , the client computer is again reviewed to determine whether the load performed in block  was successful in registering any \u201chidden\u201d objects. In one embodiment, each file on the hard disk is review and compared with the files in the baseline file. For any file that is new, the new file is read to determine whether a type library exists, similar to processing performed in block  above. If a type library exists, the type library is reviewed to determine additional objects that can be included in the identified objects for the application of interest. However, duplicate objects are not added to the identified objects. Duplicate objects may occur because multiple file type libraries may reference the same control for cases where the object models inherit interfaces. Identifying duplicate controls may be accomplished by double-checking the registry associated with the control to determine whether the control has already been profiled. Processing continues at block .","At block , each of these identified objects is further reviewed to determine whether the object allows public creation and supports an interface that may be a security risk. Thus, in one embodiment, each identified objects is reviewed to determine whether the IDispatch Interface is supported and whether the identified object has a coclass. In one embodiment, determining whether the IDispatch Interface is supported is accomplished by attempting to instantiate the IDispatch interface for the control itself. The following is exemplary code for instantiating the IDispatch interface for the control:",{"@attributes":{"id":"p-0051","num":"0050"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"return = CoCreateInstance("}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"classID,"]},{"entry":[{},"NULL,"]},{"entry":[{},"CLSCTX_LOCAL_SERVER | CLSCTX_INPROC_SERVER,"]},{"entry":[{},"IID_IDispatch,"]},{"entry":[{},"(void **) &pIDispatch"]},{"entry":[{},");."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"If the IDispatch interface is not supported, \u201cresult\u201d will return a specific error code (e.g., E_NOINTERFACE) that designates that the IDispatch interface is not supported. In this case, the object is not included in identified objects associated with the application of interest. However, for most other return values, the present invention errors on the side of caution and presumes that IDispatch interface may be supported. Thus, the object is included in the identified objects. The type library (previously identified above) is then reviewed to determine whether the interface has a coclass or not. If the identified object supports IDispatch and has coclasses for the IDispatch interface, the identified object is designated as a potential control. Thus, the object has met the first set of criteria for determining whether the object is an ActiveX control. The process proceeds to return block.",{"@attributes":{"id":"p-0053","num":"0052"},"figref":["FIG. 12","FIG. 9","FIG. 11"],"b":["1201","1202"]},"At block , one of the potential controls is retrieved for further review. Processing continues at decision block . At decision block , a determination is made whether the potential control is marked as safe in the registry. As mentioned above, if the potential control is marked as safe, the web browser application will not warn the user when the potential control is executed. Thus, this potential control is designated as a control of interest in accordance with the present invention (block ). Processing continues at decision block .","At decision block , a determination is made whether another potential control needs to be reviewed. Once all potential controls have been reviewed, processing is complete and proceeds to return block. However, while there are still potential controls that need to be reviewed, processing loops back to block  and continues as described above.","Returning to decision block , when the potential control is not marked safe in the registry, processing continues at block . At block , the process attempts to instantiate the potential control. Processing continues at decision block .","At decision block , a determination is made whether the instantiation of the potential control was successful. If the instantiation was unsuccessful, the present invention designates the potential control a control of interest (block ). Therefore, the present invention errors on the side of caution when determining which objects to classify as ActiveX controls. If the instantiation was successful, processing continues at decision block .","At decision block , a determination is made whether the instantiated potential control supports an interface related to safety, such as IObjectSafety Interface. If the IObjectSafety Interface is supported, processing continues at block  where the potential control is designated as a control of interest. Otherwise, processing continues to decision block  to determine whether another potential control needs to be reviewed. Because the above discussion focuses on an ActiveX development environment, the controls of interest correspond to ActiveX controls. However, as those skilled in the art will appreciate, in other development environments, the controls of interest may correspond to other types of controls, such as Java applets.",{"@attributes":{"id":"p-0059","num":"0058"},"figref":["FIG. 13","FIG. 9"],"b":["1301","1302"]},"At block , one of the controls of interest is retrieved for processing. Processing continues at block . At block , a query is sent to the web server from the client computer requesting information regarding the retrieved control of interest. The processing performed on the web server will be described in detail in conjunction with . In overview, the web server will send back a reply informing the client computer whether the control of interest currently exists. Processing continues at decision block .","At decision block , a determination is made whether the reply from the web server indicated that information about the control of interest currently exists on the server. If information about the control of interest does not exist on the server, processing continues at block  where the control of interest is added to a modify list. Processing then continues to decision block  where a determination is made whether another control of interest is available for processing. If there is another control of interest, processing loops back to block  where the next control of interest is retrieved. Otherwise, processing is complete and continues to return block.","Returning to decision block , if the control of interest exists on the web server, another query is sent to the server requesting information regarding the members of the control of interest. As mentioned above, the members include methods, properties, parameters, and events associated with the control of interest. Processing continues at decision block .","At decision block , a determination is made whether one or more of the members are new. If there are any new members, processing continues at block  where sample javascript is generated. This sample javascript is later provided to the user when the user requests information regarding this control (see ). Processing continues at block , where the type library associated with the control is read so that comments specific to the new member can be extracted. Processing continues at block .","At block , each new member that was identified is added to the modify list. In addition, if comments were available for the new member, these comments may also be added to the modify list. Processing then continues to decision block  to process another control of interest.","Returning to decision block , if a new member was not identified, processing continues to decision block . At decision block , a determination is made whether one or more members have changed. This is achieved by comparing the information returned from the web server with the information available at the client computer obtained after the install. If one ore more members have changed, processing continues to block  where the modified members are added to the modify list.","When no members have changed (decision block ), processing continues at decision block  and proceeds as described above. Thus, once the controls of interest have all been processed, the modify list includes information on each new control and each changed control. This information will then be submitted to the web server in order for the web server to update the database.",{"@attributes":{"id":"p-0067","num":"0066"},"figref":["FIG. 14","FIG. 2"],"b":["1400","1401","1402"]},"At block , a request is received from either the user computer or the client computer. At decision block , a determination is made regarding the type of request that was received. In general, there are two types of requests, a request for information and a request to update information. In one embodiment, the request for information is sent via an HTTP GET and the request to update is sent via an HTTP POST. When the request is a request for information, processing continues to block .","At block , the web server opens a connection to the database. In one embodiment, the web server communicates with the database using ActiveX Data Objects (ADO). ADO provides a consistent way of accessing the data regardless of the structure of the data. Processing continues at block .","At block , a query is formed based on the request. In one embodiment, the query utilizes a structured query language (SQL) to form the query. The query is then run on the database (block ). Results from the query are formatted into an HTML document (block ) and sent to the requestor in a manner that the web browser application can easily display. For example, when the requestor is the user computer,  illustrate exemplary displays. Included within the HTML document is javascript that manipulates the user-interface on behalf of the requestor. Processing of the information request is then complete and proceeds to end block.","Returning to decision block , when the request is an update request, processing continues at block . At block , again, the web server opens a connection to the database. Once the connection is opened, processing continues at block . At block , a query is formed. At block , the query is executed to determine whether the information exists. Processing continues to decision block .","At decision block , a determination is made whether the information requested in the update request already exists in the database. If the information exists in the database, processing continues at block .","At block , the database is updated accordingly. For example, if an additional method was added to the control of interest, the database updates the method associated with the control of interest. Processing then optionally continues at block , where an HTML response is sent to the update requestor summarizing the update that was performed. Processing is then complete and proceeds to the end block.","Returning to decision block , when the information does not exist in the database, the process continues at block  so that the database may be updated accordingly.","The above specification, examples and data provide a complete description of the manufacture and use of the composition of the invention. Since many embodiments of the invention can be made without departing from the spirit and scope of the invention, the invention resides in the claims hereinafter appended."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":["FIGS. 3-8","FIG. 2"]},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":["FIG. 10","FIG. 9"]},{"@attributes":{"id":"p-0013","num":"0012"},"figref":["FIG. 11","FIG. 9"]},{"@attributes":{"id":"p-0014","num":"0013"},"figref":["FIG. 12","FIG. 9"]},{"@attributes":{"id":"p-0015","num":"0014"},"figref":["FIG. 13","FIG. 9"]},{"@attributes":{"id":"p-0016","num":"0015"},"figref":["FIG. 14","FIG. 2"]}]},"DETDESC":[{},{}]}
