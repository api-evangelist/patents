---
title: Workflows with associated processes
abstract: Workflows are used to automate processes. When a first workflow is performed, it may invoke a set of one or more nested workflows, workflows in other applications or services in other applications. The first workflow can be configured to pause and wait for the invoked set of one or more nested workflows, workflows in other applications, or services in other applications. Alternatively, the first workflow can be configured to proceed without waiting. Various means are disclosed for re-staring the first workflow and providing data back for the first workflow.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07937655&OS=07937655&RS=07937655
owner: Oracle International Corporation
number: 07937655
owner_city: Redwood Shores
owner_country: US
publication_date: 20011130
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"p":["This application claims the benefit of U.S. Provisional Application No. 60\/258,087, \u201cIntegrated Identity and Access Management Systems With Group and Organization Managers,\u201d filed on Dec. 22, 2000; and U.S. Provisional Application No. 60\/285,524, \u201cIntegrated Identity and Access Management System,\u201d filed on Apr. 20, 2001; both of which are incorporated herein by reference.","A portion of the disclosure of this patent document contains material, which is subject to copyright protection. The copyright owner has no objection to the reproduction by anyone of the patent document or the patent disclosure as it appears in the United States Patent and Trademark Office patent file or records, but otherwise reserves all copyright rights whatsoever.","This Application is related to the following Applications:","\u201cTemplate Based Workflow Definition\u201d, by Joan C. Teng, 09\/998,910, filed the same day as the present application; and","\u201cDomain Based Workflows\u201d, by Joan C. Teng and Thomas B. Remahl, 09\/998,895, filed the same day as the present application.","Each of these related Applications are incorporated herein by reference.","1. Field of the Invention","The present invention is directed to technology for using workflows with associated processes.","2. Description of the Related Art","With the growth of the Internet, the use of networks and other information technologies, Identity Systems have become more popular. In general, an Identity System provides for the creation, removal, editing and other managing of identity information stored in various types of data stores. The identity information pertains to users, groups, organizations and\/or things. For each entry in the data store, a set of attributes is stored. For example, the attributes stored for a user may include a name, address, employee number, telephone number, email address, user ID and password. The Identity System can also manage access privileges that govern what an entity can view, create, modify or use in the Identity System. Often, this management of access privileges is based on one or more specific attributes, membership in a group and\/or association with an organization.","Many organizations require pre-defined business methods in order to carry out various tasks. For example, to add a new user to the Identity System, a business method may require the telecommunications group to provide a telephone number, the Information Technology Group to provide an email address, the Human Resources Group to provide personal data, and, finally, approval from a manager. To implement such business methods with an Identity System, workflows have been implemented. In general, a workflow is a process that is implemented by the Identity System (or other system) and automates the business methods.","No single process, however, can fit the needs of every organization and task. Therefore, a given system is likely to have many workflows. The administration costs of creating and maintaining these many workflows can be burdensome on the organization. Thus, there is a need to reduce administration costs associated with creating and maintaining workflows.","Furthermore, there are situations when an entity's business process requires tasks to be performed by different applications. Since workflows are performed by one application, previous workflows have been unable to implement processes that require the use of two applications.","The present invention, roughly described, pertains to technology for using workflows with associated processes. For example, a first workflow can invoke one or more nested sub-workflows (\u201csublows\u201d). Re-using existing workflows as subflows reduces administrative costs of creating and maintaining workflows. Additionally, having a first workflow invoke one or more workflows in other applications or services in other applications allows workflows to implement processes that require the use of two applications. The first workflow can be configured to pause and wait for the invoked set of one or more nested workflows, workflows in other applications or services in other applications. Alternatively, the first workflow can be configured to proceed without waiting. Various means are disclosed for re-starting the first workflow and providing data back to the first workflow or its target.","One embodiment of the present invention includes performing a first workflow for a first task and starting a second workflow as a subflow of the first workflow in order to perform a second task. Performance of the first workflow includes accessing an indication of whether the first workflow should wait for the second workflow to complete the second task and waiting, if so indicated. In another embodiment, the second workflow invokes additional one or more nested workflows.","Another embodiment of the present invention includes performing a first workflow in a first application and causing a second process in a second application to be performed in response to the first workflow. One example of a second process is a workflow. In one implementation, a status message is received indicating that the first workflow should be paused. The first workflow is then paused until a callback command is invoked.","The present invention can be accomplished using hardware, software, or a combination of both hardware and software. The software used for the present invention is stored on one or more processor readable storage media including hard disk drives, CD-ROMs, DVDs, optical disks, floppy disks, tape drives, RAM, ROM or other suitable storage devices. In alternative embodiments, some or all of the software can be replaced by dedicated hardware including custom integrated circuits, gate arrays, FPGAs, PLDs, and special purpose computers.","These and other objects and advantages of the present invention will appear more clearly from the following description in which the preferred embodiment of the invention has been set forth in conjunction with the drawings.",{"@attributes":{"id":"p-0097","num":"0096"},"figref":["FIG. 1","FIG. 1"]},{"@attributes":{"id":"p-0098","num":"0097"},"figref":["FIG. 1","FIG. 1","FIG. 1"],"b":["12","14","18","20","16","12","14","12","14","18"]},"Web Server  is a standard Web Server known in the art and provides an end user with access to various resources via network . One embodiment includes two firewalls. A first firewall (see dotted lines) is connected between network  and Web Server . A second firewall (see dotted lines) is connected between Web Servers  and  and Access Server \/Identity Server .",{"@attributes":{"id":"p-0100","num":"0099"},"figref":"FIG. 1","b":["22","24","22","18","18","24","18"]},{"@attributes":{"id":"p-0101","num":"0100"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"119pt","align":"left"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Resource","URL Encoding"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Directory","\/Sales\/"]},{"entry":[{},"HTML Page","\/Sales\/Collateral\/index .html"]},{"entry":[{},"CGI Script with no query","\/cgi-bin\/testscript.cgi"]},{"entry":[{},"CGI Script with query","\/cgi_bin\/testscript.cgi?button=on"]},{"entry":[{},"Application","\/apps\/myapp.exe"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"A URL includes two main components: a protocol identifier and a resource name separated from the protocol identifier by a colon and two forward slashes. The protocol identifier indicates the protocol used to fetch the named resource. Examples of protocols include HTTP, FTP, Gopher, File and News. The resource name is the complete address to the resource. The format of the resource name depends on the protocol. For HTTP, the resource name includes a host name, a file name, a port number (optional) and a reference (optional). The host name is the name of the machine on which the resource resides. The file name is the path name to the file on the machine. The port number is the number of the port to which to connect. A reference is a named anchor within a resource that usually identifies a specific location within a file. Consider the following URL:","\u201chttp:\/\/www.oblix.com\/oblix\/sales\/index.html.\u201d","The string \u201chttp\u201d is the protocol identifier. The string \u201cwww.oblix.com\u201d is the host name. The string \u201c\/oblix\/sales\/index.html\u201d is the file name.","A complete path, or a cropped portion thereof, is called a URL prefix. In the URL above, the string \u201c\/oblix\/sales\/index.html\u201d is a URL prefix and the string \u201c\/oblix\u201d is also a URL prefix. The portion of the URL to the right of the host name and to the left of a query string (e.g. to the left of a question mark, if there is a query string) is called the absolute path. In the URL above, \u201c\/oblix\/sales\/index.html\u201d is the absolute path. A URL can also include query data, which is typically information following a question mark. For example, in the URL:","http:\/\/www.oblix.com\/oblix\/sales\/index.html?user=smith&dept=sales","the query data is \u201cuser=smith&dept=sales.\u201d Although the discussion herein refers to URLs to identify a resource, other identifiers can also be used within the spirit of the present invention.",{"@attributes":{"id":"p-0106","num":"0105"},"figref":"FIG. 1","b":["18","28","28","18","28","34","34","36"]},"The Access System includes Access Server , Web Gate , and Directory Server . Access Server  provides authentication, authorization, auditing logging services. It further provides for identity profiles to be used across multiple domains and Web Servers from a single web-based authentication (sign-on). Web Gate  acts as an interface between Web Server  and Access Server . Web Gate  intercepts requests from users for resources  and , and authorizes them via Access Server . Access Server  is able to provide centralized authentication, authorization, and auditing services for resources hosted on or available to Web Server  and other Web Servers.","The Identity System includes Web Pass , Identity Server  and Directory Server . Identity Server  manages identity profiles. An identity profile is a set of information associated with a particular entity (e.g. user, group, organization, etc.). The data elements of the identity profile are called attributes, which are discussed in more detail below. An attribute may include a name, value and access criteria. The Identity Server includes three main applications, which effectively handle the identity profiles and privileges of the user population: User Manager , Group Manager , and Organization Manager . User Manager  manages the identity profiles for individual users. Group Manager  manages identity profiles for groups. Organization Manager  manages identity profiles for organizations. Identity Server  also includes Publisher , an application that enables entities to quickly locate and graphically view information stored by Directory Server . In one embodiment, Web Pass  is a Web Server plug-in that sends information back and forth between Identity Server  and the Web Server , creating a three-tier architecture. The Identity System also provides a Certificate Processing Server (not shown in ) for managing digital certificates.","User Manager  handles the functions related to user identities and access privileges, including creation and deletion of user identity profiles, modification of user identity profile data, determination of access privileges, and credentials management of both passwords and digital certificates. With User Manager , the create, delete, and modify functions of user identity management can be set as flexible, multi-step workflows. Each business can customize its own approval, setup, and management processes and have multiple processes for different kinds of users.","Multi-level delegation features also simplify individual user management. Companies can assign the responsibility for maintaining user identity data to the people closest to it. For example, individual users can be allowed to: (1) add themselves to the user directory by filling out customized forms, (2) modify personal or professional information about themselves (such as addresses, personal preferences, or name changes), (3) change a piece of information in their identity profiles that can determine their access rights, or (4) allow someone else to log in as their temporary substitute while they are out of the office or on vacation. Likewise, any number of delegated administrators (both inside and outside the company) can be given the authority to: (1) create and delete users in the user directory, (2) approve a change that a user has requested, and (3) change the information about users to grant or revoke services. An administrator can be delegated any allowed degree of responsibility. For example, a company might decide that only IT staff can assign application access, whereas department managers can add new users.","External legacy systems\u2014such as human resource management systems\u2014can be allowed to trigger automated workflows. With this feature, a new user could be created, a departing employee could be deleted, or certain services could be granted or revoked following an event change in an external system.","The Identity System also provides for self-registration. User Manager  enables an individual to self-register in situations when it's appropriate. User Manager  then authorizes delegated administrators to verify the individual's information and approve or deny the registration requests. In one embodiment, self-registration is defined by a customizable, multi-step workflow. This concept is discussed below.","Group Manager  allows entities to create, delete and manage groups of users who need identical access privileges to a specific resource or set of resources. Managing and controlling privileges for a group of related people\u2014rather than handling their needs individually\u2014yield valuable economies of scale. Group Manager  meets a wide range of e-business needs: easy creation, maintenance, and deletion of permanent and ad hoc groups of users who may be allowed or denied access to particular resources; modification and adaptation of groups and their access privileges with minimal disruption to the directory server's underlying schema; efficient addition and deletion of users from established groups; and delegation of administrative responsibility for group membership and subscription requests and approvals.","With Group Manager , companies (or other entities) can allow individual users to do the following: (1) self-subscribe to and unsubscribe from groups, (2) view the groups that they are eligible to join or have joined, and (3) request subscription to groups that have access to the applications they need. Multi-step workflows can then define which users must obtain approval before being added to a group and which can be added instantly. Group Manager  also lets companies form dynamic groups specified by an LDAP filter. The ability to create and use dynamic groups is extremely valuable because it eliminates the administrative headache of continually keeping individual, static membership up-to-date. With dynamic group management features, users can be automatically added or removed if they meet the criteria specified by the LDAP filter. Dynamic groups also greatly enhance security since changes in user identities that disqualify someone from membership in a group are automatically reflected in the dynamic group membership.","The third application in the Identity System, Organization Manager , streamlines the management of large numbers of organizations within an e-business network, including partners, suppliers, or even major internal organizations such as sales offices and business units. Certain infrastructure security and management operations are best handled\u2014or can only be handled\u2014at the highest organizational unit level rather than at the individual or group level. Like User Manager and Group Manager, this application relies on multi-step workflow and delegation capabilities. Organization Manager handles the following administrative tasks: (1) organization lifecycle management, whereby companies can create, register, and delete organizations in their systems using customizable workflows; (2) maintenance of organization profiles on an attribute-by-attribute basis through self-service, delegated administration and system-initiated activities; (3) organization self-registration, whereby organizations such as business partners, customers and suppliers can self-generate a request to be added to the e-business network; and (4) creation of reusable rules and processes through multi-step workflows.","The system of  can be used to protect a web site, network, Intranet, Extranet, etc. To understand how the system of  protects a web site (or other structure), it is important to understand the operation of unprotected web sites. In a typical unprotected web site, end users cause their browsers to send a request to a Web Server. The request is usually an HTTP request, which includes a URL. The Web Server then translates, or maps, the URL into a file system's name space and locates the matching resource. The resource is then returned to the browser.","With the system of  deployed, Web Server  (enabled by Web Gate , Access Server , and Directory Server ) can make informed decisions based on default and\/or specific rules about whether to return requested resources to an end user. The rules are evaluated based on the end user's identity profile, which is managed by the Identity System. In one embodiment of the present invention, the general method proceeds as follows. An end user enters a URL or an identification of a requested resource residing in a protected policy domain. The user's browser sends the URL as part of an HTTP request to Web Server . Web Gate  intercepts the request. If the end user has not already been authenticated, Web Gate  causes Web Server  to issue a challenge to the browser for log-on information. The received log-on information is then passed back to Web Server  and on to Web Gate .","Web Gate  in turn makes an authentication request to Access Server , which determines whether the user's supplied log-on information is authentic or not. Access Server  performs the authentication by accessing attributes of the user's identity profile and the resource's authentication criteria stored on Directory Server . If the user's supplied log-on information satisfies the authentication criteria, the process flows as described below; otherwise, the end user is notified that access to the requested resource is denied and the process halts. After authenticating the user, Web Gate  queries Access Server  about whether the user is authorized to access the resource requested. Access Server  in turn queries Directory Server  for the appropriate authorization criteria for the requested resource. Access Server  retrieves the authorization criteria for the resource and answers Web Gate 's authorization query, based on the resource's authorization criteria and the user's identity profile. If the user is authorized, the user is granted access to the resource; otherwise, the user's request is denied. Various alternatives to the above described flow are also within the spirit and scope of the present invention.","Authentication and Authorization decisions are based on policy domains and policies. A policy domain is a logical grouping of Web Server host ID's, host names, URL prefixes, and rules. Host names and URL prefixes specify the course-grain portion of the web name space a given policy domain protects. Rules specify the conditions in which access to requested resources is allowed or denied, and to which end users these conditions apply. Policy domains contain two levels of rules: first level default rules and second level rules contained in policies. First level default rules apply to any resource in a policy domain not associated with a policy.","A policy is a grouping of a URL pattern, resource type, operation type (such as a request method), and policy rules. These policy rules are the second level rules described above. There are two levels of rules available (first and second levels) for authentication, authorization, and auditing. Policies are always attached to a policy domain and specify the fine-grain portion of a web name space that a policy protects. In practice, the host names and URL prefixes from the policy's policy domain are logically concatenated with the policy's URL pattern. The resulting overall pattern is compared to the incoming URL. If there is a match, then the policy's various rules are evaluated to determine whether the request should be allowed or denied; if there is not a match, then default policy domain rules are used.","The system of  is scalable. There can be many Web Servers, many Access Servers, and many Identity Servers. In one embodiment, Directory Server  is an LDAP Directory Server and communicates with other servers\/modules using LDAP over SSL. In other embodiments, Directory Server  can implement other protocols or can be other types of data repositories (e.g. SQL, etc.). Many variations of the system of  can be used with the present invention. For example, instead of accessing the system with a web browser, an API can be used. Alternatively, portions of functionality of the present invention cab be separated into independent programs that can be accessed with a URL.",{"@attributes":{"id":"p-0122","num":"0121"},"figref":["FIG. 2","FIG. 2"],"b":["50","52","50","52","50","52","52"]},"The system of  further includes mass storage device , peripheral device(s) , user input device(s) , portable storage medium drive(s) , graphics subsystem , and output display . For purposes of simplicity, the components shown in  are depicted as being connected via a single bus . However, the components may be connected through one or more data transport means. For example, processor unit  and main memory  may be connected via a local microprocessor bus, and the mass storage device , peripheral device(s) , portable storage medium drive(s) , and graphics subsystem  may be connected via one or more input\/output (I\/O) buses. Mass storage device , which may be implemented with a magnetic disk drive or an optical disk drive, is a non-volatile storage device for storing data and instructions for use by processor unit . In one embodiment, mass storage device  stores the system software for implementing the present invention for purposes of loading to main memory .","Portable storage medium drive  operates in conjunction with a portable non-volatile storage medium, such as a floppy disk, to input and output data and code to and from the computer system of . In one embodiment, the system software for implementing the present invention is stored on such a portable medium, and is input to the computer system via the portable storage medium drive . Peripheral device(s)  may include any type of computer support device, such as an input\/output (I\/O) interface, to add additional functionality to the computer system. For example, peripheral device(s)  may include a network interface for connecting the computer system to a network, a modem, a router, etc.","User input device(s)  provide a portion of a user interface. User input device(s)  may include an alpha-numeric keypad for inputting alpha-numeric and other information, or a pointing device, such as a mouse, a trackball, stylus, or cursor direction keys. In order to display textual and graphical information, the computer system of  includes graphics subsystem  and output display . Output display  may include a cathode ray tube (CRT) display, liquid crystal display (LCD) or other suitable display device. Graphics subsystem  receives textual and graphical information, and processes the information for output to display . Additionally, the system of  includes output devices . Examples of suitable output devices include speakers, printers, network interfaces, monitors, etc.","The components contained in the computer system of  are those typically found in computer systems suitable for use with the present invention, and are intended to represent a broad category of such computer components that are well known in the art. Thus, the computer system of  can be a personal computer, handheld computing device, Internet-enabled telephone, workstation, server, minicomputer, mainframe computer, or any other computing device. The computer can also include different bus configurations, networked platforms, multi-processor platforms, etc. Various operating systems can be used including Unix, Linux, Windows, Macintosh OS, Palm OS, and other suitable operating systems.",{"@attributes":{"id":"p-0127","num":"0126"},"figref":"FIG. 1","b":["20","40","38","40"]},"Possible opcodes that can be employed in the blob data transfer opcode field include: (1) indicating that the blob data transfer is to be employed by Identity Server ; and (2) indicating that this data is to be employed by a Web Server  in a configuration process. In one embodiment of the present invention, the Actual Message is presented in a key-val-map format having the following syntax: {length}key=val {length}key=val {length}key val . . . .",{"@attributes":{"id":"p-0129","num":"0128"},"figref":["FIG. 1","FIG. 3"],"b":["40","36","120","120"]},"When database manager  starts, it will read the directory server configuration file(s) and insert corresponding profile and agent objects to its internal tables for later reference.  shows database manager  in communication with profiles , ,  and . Each profile corresponds to an agent. For example, profile  corresponds to agent , profile  corresponds to agent , profile  corresponds to agent , and profile  corresponds to agent . Each agent is associated with a connection manager and a data store. For example, agent  is associated with connection manager  and data store . Agent  is associated with connection manager  and data store . Agent  is associated with connection manager  and data store . Agent  is associated with connection manager  and data store . In one embodiment, each of the data stores are LDAP directory servers with LDAP directories. In other embodiments, one or more of the data stores are LDAP directories and one or more of the data stores are other types of data stores (e.g. SQL servers) or others. In further embodiments, none of the data stores are LDAP directories.","Each of the profiles represents configuration information for the associated data store. This includes, among other things, host name, port number, name space, login name (also called an ID), password, and support operations. There is a one-to-one mapping between a profile and agent. One of the most important methods exposed by a profile is the method \u201cIsSupported.\u201d Database manager  calls this method to determine whether a proposed data store access request can be performed by the data store associated with the profile. The method will return a false if any of the following are met: (1) the configured profile is not enabled, (2) the database type (e.g. LDAP) of the access request is not the same as the data store for that profile, (3) the type of operation is not supported by the data store, (4) the target user identification has no overlap with the profile's (and data store's) name space, or (5) the target's user identification is above the profile's (and data store's) name space and the target operation is not SEARCH.","The Agent is the object responsible for all the interaction with the data stores. Each agent includes a Connection Manager, which maintains the connection with the associated data store. The agents are responsible for converting the native data store entries to the format expected by the application.","Database clients interact with database manager  to accomplish any database operation. Database manager , in turn, interacts with the profiles to determine which data stores can service the database operation. A database proxy  is created to service a particular database request. Database proxy  communicates directly to the Agents for the data stores that can service the request. The database client then interacts directly with proxy  to access the appropriate data stores. Thus, database proxy  is a dynamic object which database manager  creates every time a database request is made.","Database proxy  encapsulates the supporting agent objects for the particular operation. It also acts as a storage area where input parameters and output results are stored. Each database proxy object exposes its methods and input parameters. These parameters include search base, object class, auxiliary class, filter, search scope, attributes and entry. After a database client sets all the parameters, the client calls the execute method of the proxy to invoke the database operation. The client then calls the database proxy GetResults method to retrieve the operations results.",{"@attributes":{"id":"p-0135","num":"0134"},"figref":["FIG. 3","FIG. 3"],"b":["154","36","36"],"i":["a ","b. "]},{"@attributes":{"id":"p-0136","num":"0135"},"figref":"FIG. 4","b":["170","150","152","150","42","44","46","152","152"]},"BaseDB  calls database manager  in step , indicating the operation and search base for the data operation. In step , database manager  consults each of the profiles to determine which data store can support the operation. That is, each data store is a particular type of data store, has its own set of operations that it supports, and has its own search base that it supports. In step , each of the profiles indicates whether they can service the request based on whether the above mentioned criteria match the request. In step , database manager  creates proxy . Note that proxy  is for this one particular request and will be terminated at the end of the request.","In one example, it is assumed that profiles  and  indicate that their associated data stores can service the operation, but profiles  and  report that their associated data stores cannot service the operation. Therefore, proxy  will be set up to communicate with agents  and , as depicted in .","In step , proxy  is provided with pointers to the appropriate agents, as depicted in . In step , baseDB  calls proxy  to indicate the one or more database access operations requested. In step , proxy  communicates the appropriate request information to the appropriate agents. In step , the appropriate agents perform appropriate database accesses using their respective connection managers. In step , the agents convert the data from the native format of the data store to the format expected by application . In some embodiments, conversion is not necessary. In step , each of the agents returns the results to proxy . In step , proxy  combines the results from the various data stores into one set of results. In one embodiment, step  is skipped and the results are not combined. In step , the results are then provided to userDB . In step , database proxy  is terminated. In step , the results are reported back to application . In this manner, application  is insulated from the data access layer (which includes database proxy, database manager and any other components below the database manager , as depicted in ). Note that when the access to the data stores includes a read operation, the reporting of results will likely include the data that was read. If the access was for a write operation, the reporting of results can include a confirmation of the write operation or a reporting of the data that was written. In some embodiments, the failure to notify of an error during a write operation can be considered as reporting a successful result of the write operation.","The basic unit of information store in a directory is called an entry, which is a collection of information about an object. The information in an entry often describes a real-world object such as a person, but this is not required. A typical directory includes many entries that correspond to people, departments, servers, printers, and other real-world objects in the organization served by the directory.","An entry is composed of a set of attributes, each of which describes one particular trait of the object. Each attribute has a type, one or more values, and associated access criteria. The type describes the kind of information contained in the attribute, and the value contains the actual data.","An entry in the directory has a set of attribute that are required and a set of attribute that are allowed. For example, an entry describing a person is required to have a cn (common name) attribute and an sn (surname) attribute. One example of an allowed attribute may be a nickname. Any attribute not explicitly required or allowed is prohibited. The collections of all information about required and allowed attributes are called the directory schemas.","Examples of attributes stored in a user identity profile include: first name, middle name, last name, title, email address, telephone number, fax number, mobile telephone number, pager number, pager email address, identification of work facility, building number, floor number, mailing address, room number, mail stop, manager, direct reports, administrator, organization that the user works for, department number, department URL, skills, projects currently working on, past projects, home telephone, home address, birthday, previous employers and anything else desired to be stored by an administrator. Examples of attributes stored in a group identity profile include: owner, name, description, static members, dynamic member rule, subscription policies, etc. Examples of attributes stored in a user organization identity profile include: owner, name, description, business category, address, country, etc. In other embodiments, less or more than the above-listed information is stored.",{"@attributes":{"id":"p-0144","num":"0143"},"figref":["FIG. 5","FIG. 5","FIG. 5"],"b":["36","230","230","230","232","234","230","236","238","240","242","250","252","254","256","258","260","262","264"]},"Each entity has a distinguished name (DN), which uniquely identifies the node. In one embodiment, each entry also has a relative name, which is different from all other relevant names on the same level of the hierarchy. In one implementation, the distinguished name (DN) comprises a union of the relative names up the tree through to the entity. For example, the distinguished name of employee 1 (node ) is\n\n",{"@attributes":{"id":"p-0146","num":"0146"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"91pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"DC","=","Domain Component"]},{"entry":[{},"O","=","Organization"]},{"entry":[{},"OU","=","Organizational Unit"]},{"entry":[{},"CN","=","conmon name."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]}}}}},{"@attributes":{"id":"p-0147","num":"0147"},"figref":"FIG. 5"},"There are many ways for an entity to access and use the Identity System. In one embodiment, the entity can access the Identity Systems services using a browser. In other embodiments, XML documents and API's can be used to access the services of the Identity System. For example, an entity can use a browser by pointing the browser to Identity Server . The user will then be provided with a login page to enter the user's ID, password, type of user and application requested (optional). Upon filling out that information, the user will be authenticated and authorized (by the Access System) to use the Identity System, as described below. Alternatively, the Access System can be bypassed (or there may be no Access System) and the Identity System authenticates the user.",{"@attributes":{"id":"p-0149","num":"0149"},"figref":["FIG. 6","FIG. 1"],"b":["300","40","20","20","20","38","302","304"]},{"@attributes":{"id":"p-0150","num":"0150"},"figref":"FIG. 7","b":["360","362","364","366","362","364","366","366","366"]},"If, in step , it is determined that a valid UidCookie exists, then, in step , the user is given access to the Identity System application requested. The Uid from the cookie is used as the user identification upon entering the Identity System. If the valid UidCookie does not exist (step ), then it is determined whether a user identification was received in a header variable. In one embodiment using an integrated Access and Identity System, a user's request to access the Identity System will be authenticated and authorized by the Access System. After authentication and\/or authorization, the HTTP request will be redirected to the Identity System. This redirected HTTP request will include a header variable labeled as \u201cuserAuth.\u201d The data associated with this header variable will indicate the user identification for the user. If the user identification was in a header variable then a UidCookie is created in step  and that user identification is added to the UidCookie. Subsequent to step , the user is provided access to the Identity System in step .","If the user identification was not in a header variable, then the system attempts to authenticate the user in step . That is, the user's user name and password provided by the login page are used to access Directory Server  in order to authenticate the user. More information about authentication is described below. If the user is properly authenticated, then a UidCookie is created in step . During an authentication process, the user's ID and password were used to access the user's identity profile in Directory Server . That identity profile will include a user identification, which is added to the UidCookie in step . In one embodiment, the user identification is the user's distinguished name. In step , the user is provided access to the Identity System. If the user was not properly authenticated, then the user is denied access to the Identity System in step .","As discussed above, when requesting access to the Identity System, the user selects which of the Identity System applications (User Manager , Group Manager , Organization Manager  or Publisher ) the user wishes to access. In one embodiment, the login page for the Identity System will request an ID, a password, an indication of the application requested and an indication of a role (discussed below). After appropriate authentication and authorization, the user is provided with a home page for User Manager , a home page for Group Manager , a home page for Organization Manager  or a home page for Publisher , depending upon which application was selected by the user. From the home page, the user can access the various services of the application.",{"@attributes":{"id":"p-0154","num":"0154"},"figref":"FIG. 8","b":["42","402","404","406","408","410","412","414","416","402","402","404"]},"By selecting My Identity tab , a user is provided with the information stored in that user's identity profile. Create User Identity tab  allows a user with the appropriate privileges to create a new user identity profile (e.g. with a workflow). Deactivate User Identity tab  allows a user with proper privileges to remove an identity profile from the directory. Substitute Rights tab  allows the user to indicate who can proxy that user and allows the user to be a proxy for someone else. Request tab  allows a user to monitor workflows that are in progress or recently completed. Depending on the user's privileges, by selecting request tab , the user can see all workflows that involve that user, that are started by that user, that affect that user or that the user has privileges to view. Request tab  will indicate workflows for which there is an outstanding action to be done by the current user. The user can select that workflow and perform the task.","Configure tab  allows a user to configure various options for User Manger . The user must have sufficient privileges to access Configure tab . The user can perform attribute access control, delegate administration, define workflows and set the search base. Attribute access control includes controlling who has view and modify permissions for each attribute. Attributes can be set at any and all levels in an organization. The configuration also allows the specification of an e-mail notification list when a change to an attribute is requested. Delegation administration includes delegating administrative tasks to local administrators. An entity can choose what rights to delegate, whom to delegate to, and the scope to delegate. Workflow definition includes defining workflows for a particular organization, defining who will be responsible for the workflow actions and\/or defining who will be receiving notifications for the workflow actions. Setting the search base includes setting the search base for a particular organization, person or set of persons. This will localize access to ensure security.",{"@attributes":{"id":"p-0157","num":"0157"},"figref":"FIG. 9","b":["44","430","432","434","436","438","440","434","434","432","436","438","440"]},"Configure tab  allows an entity to provide attribute access control, delegate rights, define workflows and expand dynamic groups. Attribute access control includes controlling who has view and modify permissions for each attribute in group identity profiles. Additionally, e-mail notification lists can be created which are used to notify entities when a change to an attribute is requested. Administration tasks can be delegated to local administrators. An entity can choose what rights to delegate, who to delegate to, and what the scope of the delegation is. Workflow definition includes defining the workflows for a particular group. This includes defining who is responsible for the workflow actions and who will be receiving notifications for workflow actions. Expanding dynamic groups will be discussed below. Note that some of the tabs and services may not be available to all entities, depending upon the privileges of those entities.",{"@attributes":{"id":"p-0159","num":"0159"},"figref":"FIG. 10","b":["46","46","46","442","444","446","448","450","442","444"]},"Create Organizational Profile tab  allows a user to create new organizational objects, if the user has sufficient privileges. Request tab  allows a user to access pending workflows and workflows that have recently been finished that relate to organizational objects. Access to Request tab  can be restricted and\/or limited depending upon users privileges. If a user has a step to perform for a workflow, it will be indicated by Request tab .","Configure tab  allows the entity to perform attribute access control, delegate administration, define workflows and define container limits. Attribute access control includes controlling who has view and modify permissions for each attribute of an organizational identity profile. In addition, an entity can specify an e-mail notification list when a change to an attribute is requested. Delegating administration includes delegating administrative tasks to local administrators. An entity can choose what rights to delegate, whom to delegate to, and the scope of the delegation. Workflow definition includes defining the workflows for a particular organization, including who will be responsible for the workflow actions and who will be receiving notifications for the workflow. Container limits includes controlling how many objects can be created in an organization. This would also include defining who will be receiving notifications that a container limit has been met, has been violated or is close to being met.","As discussed above, user identity profiles, group identity profiles and organization identity profiles all contain attributes. In the various services provided by User Manager, Group Manager and Organization Manager, users with the appropriate privileges can configure the rights to access each of the attributes.  is a flowchart describing an exemplar process for configuring rights to access attributes. In step , a user requests to configure rights. For example, the user may select any of the configuration tabs described above. In step , it is determined whether that user is allowed to configure rights to access attributes. If no, the user is not given access to configure any access rights. If the user is allowed to configure access rights, then in step  the user selects which rights to configure. In one embodiment, there are choices of three rights: read, write and notify. The notify right is associated with persons who are notified when an attribute changes.","In step , the particular attributes are selected. For example, in the User Manager, an entity can select the user's name, the user's telephone number, etc. In step , the domain is selected. The domain applies to the portion of the directory tree that is affected by the configuration. That is, only identity profiles in the specified domain are being affected by the current process being performed. In step , the users are identified whose rights to access the selected attributes are being affected. The users can be identified by identifying specific names of users, a group, a class of users, and an owner of the identify profile, or an LDAP filter.","Based on the configuration from the process of , when a user accesses an identity profile, the user's ability to view or modify that profile will be restricted.  is a flowchart describing the process for accessing an identity profile and viewing attributes. In step , the user's browser sends a request to access attributes of a target directory entry. Alternatively, the user can attempt to access attributes via means different than a browser (e.g. XML document). In step , the request is received by User Manager , Group Manager  or Organization Manager . In step , the appropriate manager accesses the target profile and a source profile on directory server . The target profile is the identity profile sought to be viewed. The source profile is the identity profile of the user attempting to access the target profile. In step , the manager determines the access rights for each of the attributes for the target profile. In step , the manager passes the result information for the allowed attributes to the browser. That is, the manager will determine which attributes the user may view based on the access information (e.g. from ) and the user's identity profile. All of those attributes that can be viewed are displayed in step . Those attributes that can be modified will include a \u201cmodify\u201d button next to the attribute. Selecting a modify button will allow the user to modify the attribute (e.g. change the user's telephone number, etc.).","In many implementations of the system of , there is a single instance of the system that will be running against the directory server that holds all the partners\/suppliers\/customer information in a hierarchical tree. A given user that belongs to one of these partners (or other entities) should be restricted to accessing the information that only pertains to that user's company (or other organization). So different users will have access to a different logical directory.","To support segmentation of the directory tree, the system employs a policy based search base. As part of the configuration, an administrator can set up search bases. A particular search base includes two components. The first component includes identifying to whom the search base pertains. The first component can name a single person, multiple persons, a domain in the directory or an LDAP filter. The second component of the search base is to indicate the search base itself. In one embodiment, indicating the search base includes identifying a node in the directory tree. That node and all nodes below that node in the directory tree will be part of the search base. In some embodiments, the search base can be associated with an object class.","Once the search base is set up, anyone who the search base pertains to can only access nodes within the search base. Thus, if a company employs an Extranet and two suppliers have accessed the Extranet, one supplier can be prevented from seeing the profiles about the other supplier using this search base feature. That is, persons in company A can be configured to only have a search base that includes company A, and persons in company B can be configured to only have a search base that includes company B.","As discussed above, when an entity logs into the Identity System, the entity indicates the entity's role. There are at least six roles: System Administrator, Master Identity Administrator, Master Access Administrator, Delegated Access Administrator, Delegated Identity Administrator and End User. The System Administrator can perform all Access System configuration tasks and all Identity System configuration tasks. The Master Identity Administrator can configure access controls, attribute access controls, new user services, workflow definitions, setting the search base, delegating rights, expanding dynamic groups, and setting container limits. The Master Access Administrator can configure a web gate, configure an access server, create host identifiers, configure users, set-up policies and policy domains, and delegate rights. The Delegated Identity Administrator is an administrator who has been delegated rights from the Master Identity Administrator. The Delegated Access Administrator can be delegated rights from a Master Access Administrator. An End User cannot perform configuration functions. There can also be a delegated admin who can create\/delete users, add\/remove users to\/from groups, process workflow steps, etc.","A delegated administrator receives rights that were delegated by a master administrator or another delegated administrator.  depicts the process of delegating rights to a delegated administrator. In step , a request is made to delegate rights. In one embodiment, this request is made by accessing the configure tabs described above. In step , it is determined whether the user requesting to delegate is allowed to delegate. A Master Identity Administrator is allowed to delegate and a Delegated Administrator can delegate if that Delegated Administrator has been provided with delegation rights. If the user is not able to delegate rights, then the process is not completed. If the user can delegate rights, then in step , the rights to be delegated are selected. In step , it is determined whether the person receiving the delegated right can further delegate that right. That is, can a Delegated Administrator receiving the right then delegate that right to another Delegated Administrator. In step , the attributes associated with a delegated right are selected. In step , a domain is specified. The domain indicates the area of the directory tree that will be affected by the delegation of rights. Only profiles within the domain are subject to the delegation of rights. In step , the Delegated Administrators who will receive the rights being configured are identified. The administrators can be identified by indicating a particular name (or other identification), a group or an LDAP rule indicating who should receive the rights.","One right that an administrator has and which can be delegated to a Delegated Administrator is the proxy right. The proxy right for person A allows person A to choose another person (e.g. person B) to be a proxy for person A during a period of time. For example, if a Delegated Administrator (or other administrator) is going on vacation, or will otherwise be unavailable to perform its administrative duties, that Delegated Administrator can identify another person (or persons) who can be a proxy for that Delegated Administrator. While person B is being a proxy for person A, person B has all the rights and privileges of person A within the Identity System. Person B does not have the rights of person A in the Access System. Thus, the Identity System will see person B as person A, but the Access System will see person B as person B.",{"@attributes":{"id":"p-0171","num":"0171"},"figref":["FIG. 14","FIG. 14","FIG. 14"],"b":["412","640","412","412"]},"In step , the administrator can search for more persons to be on the list of potential proxies. In one embodiment, step  includes providing a search tool for a user to search for users. A list of identified users is then depicted on the substitute rights tab. Next to each user's name is a check box. In step , the user can select any of the users for proxy by selecting the check box. Once a user has been selected for proxy, then that user can be a proxy for the administrator performing the process of . However, the user will not become a proxy until the user enacts the proxy right. Thus, selecting the user in step  (e.g. checking the box next to the users name) only provides for the potential for that user to be a proxy. In step , all of the persons who have been selected for potential proxy are notified by e-mail, by a page\/tab displaying proxy information or by other means.",{"@attributes":{"id":"p-0173","num":"0173"},"figref":["FIG. 15","FIG. 7"],"b":["660","412","662","412","664","664"]},"In step , the UidCookie on the user's machine is edited by changing Uid  to equal the user identification for the person being proxied. In step , the user now operates as the person being proxied in the Identity System. Because the Uid in the Cookie identifies the person being proxied, the Identity System treats the user as the person being proxied. However, the UidCookie is only used by the Identity System, so only the Identity System treats the person as the person being proxied. The Access System uses a different cookie (described below), and the Access System's cookie is not edited. Therefore, the Access System treats the user as himself or herself and not as the person being proxied. While being a proxy, the user has all the rights and privileges as the person being proxied. In one embodiment, the process of  is performed without the user providing or knowing the password for the person being proxied and. therefore, without authenticating the password and ID for the person being proxied.","In one embodiment, step  includes receiving a request from the user (e.g. the entity who is the proxy) to access a service of the Identity System. In response, the system will access the Uid in the cookie, and use that Uid to access attributes, group memberships and organizations memberships for the identity profile of the person being proxied. Based on those attributes, the user will or will not be provided access to the requested service.","In step  of , the user de-enacts the proxy right. In one embodiment, this is performed by accessing the substitute rights tab and clicking on a \u201cde-enact\u201d button. After de-enacting, the Uid from the originalUidCookie is inserted into the UidCookie in step . Editing the UidCookie in step  thus reverts the user back to the rights and privileges that the user originally had before the process of . In one embodiment, the originalUidCookie is deleted in step .","A lot of the tasks that are performed in the Identity System are accomplished using workflows. A workflow is a predefined set of steps that perform a specific task, where information or tasks are passed between participants and programs according to a defined set of rules. One embodiment of the present invention supports the following types of workflows: create object; delete object; change the value of attributes; and certificate issuance, revocation and renewal. In one embodiment of the present invention, a user is required to create a workflow to create or delete an object, change the value of an attribute or implement certificates. Workflows ensure that an organization's guidelines for performing a task are met. Workflows can be defined in the User Manager, Group Manager or Organization Manager. A workflow can be used only in the application (e.g. User Manager) in which it was created. Each workflow has two or more steps, including one to start the action and one to implement or commit it. Each step can contain an action, send e-mail notifications to selected persons and start the next step if its entry conditions are satisfied. A workflow is associated with a portion of the directory tree. This allows an entity to have its organizations and partners enforce different workflows. Workflows can be stored in Directory Server .","Table 1 provides examples of different tasks that can be performed with workflows in the appropriate applications:",{"@attributes":{"id":"p-0179","num":"0179"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"105pt","align":"left"}}],"thead":{"row":[{"entry":[{},"TABLE 1"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Application","Workflow Tasks"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"User Manager","Create User"]},{"entry":[{},{},"Delete User"]},{"entry":[{},{},"Change Attribute"]},{"entry":[{},{},"Certificate Enrollment"]},{"entry":[{},{},"Certificate Renewal"]},{"entry":[{},{},"Certificate Revocation"]},{"entry":[{},"Group Manager","Create Group"]},{"entry":[{},{},"Delete Group"]},{"entry":[{},{},"Change Attribute"]},{"entry":[{},"Org. Manager","Create Object"]},{"entry":[{},{},"Delete Object"]},{"entry":[{},{},"Change Attribute"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"Each workflow includes two or more steps. Each step can include one or more actions. Table 2, below, provides examples of different actions that can be performed with various types of workflows:",{"@attributes":{"id":"p-0181","num":"0181"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"119pt","align":"left"}}],"thead":{"row":[{"entry":[{},"TABLE 2"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Workflow Type","Actions"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Creating object","Initiate"]},{"entry":[{},{},"Self Registration"]},{"entry":[{},{},"Provide Information"]},{"entry":[{},{},"Approval"]},{"entry":[{},{},"Provide Information and Approval"]},{"entry":[{},{},"Activate"]},{"entry":[{},{},"Commit"]},{"entry":[{},{},"Error Report"]},{"entry":[{},{},"External Action"]},{"entry":[{},"Deleting object","Initiate"]},{"entry":[{},{},"Change Information"]},{"entry":[{},{},"Approval"]},{"entry":[{},{},"Change Approval"]},{"entry":[{},{},"Deactivate"]},{"entry":[{},{},"Commit"]},{"entry":[{},{},"Error Report"]},{"entry":[{},{},"External Action"]},{"entry":[{},"Changing Attribute","Request"]},{"entry":[{},{},"Approval"]},{"entry":[{},{},"Provide Information"]},{"entry":[{},{},"Provide Information and Approval"]},{"entry":[{},{},"Commit"]},{"entry":[{},{},"Error Report"]},{"entry":[{},{},"External Action"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"Table 3 provides a description of the various actions:",{"@attributes":{"id":"p-0183","num":"0183"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"126pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 3"},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Action","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["initiate","This action initiates workflows."]},{"entry":[{},"Required, option, and supplied"]},{"entry":[{},"attributes may be configured for this"]},{"entry":[{},"action. Based on the relevant data"]},{"entry":[{},"configured in the step, the action will"]},{"entry":[{},"compose a page for the user to fill in"]},{"entry":[{},"the required information and to add"]},{"entry":[{},"additional attributes for provisioning"]},{"entry":[{},"(supplied variables) if so desired."]},{"entry":[{},"Once the page is submitted, the"]},{"entry":[{},"workflow engine will trigger the"]},{"entry":[{},"Change Attribute workflows for the"]},{"entry":[{},"supplied attributes. People who are"]},{"entry":[{},"configured as a participant for this"]},{"entry":[{},"action and its corresponding workflow"]},{"entry":[{},"will see the \u201cCreate Profile\u201d or"]},{"entry":[{},"\u201cInitiate Deactivate User\u201d button."]},{"entry":["self_registration","This action allows an e-user to fill in a"]},{"entry":[{},"registration form and submit it for"]},{"entry":[{},"acceptance. The required information"]},{"entry":[{},"will be displayed on the page. It is"]},{"entry":[{},"envisioned that self-registration will"]},{"entry":[{},"be used before the user has access to"]},{"entry":[{},"an application. Therefore, the UI of"]},{"entry":[{},"this page will be designed without the"]},{"entry":[{},"context of an application and with"]},{"entry":[{},"credentials for authentication."]},{"entry":["request","This action makes a request for"]},{"entry":[{},"change\/add\/delete attribute. People"]},{"entry":[{},"who are configured as a participant for"]},{"entry":[{},"this action and its corresponding"]},{"entry":[{},"workflow will see the \u201cRequest to"]},{"entry":[{},"Modify\u201d or \u201cRequest to Remove\u201d"]},{"entry":[{},"button on the profile page (during"]},{"entry":[{},"\u201cmodify\u201d mode)."]},{"entry":["provide_info","This action is similar to initiate, in that"]},{"entry":[{},"it collects information from the user"]},{"entry":[{},"and triggers other workflows, if"]},{"entry":[{},"necessary. It is treated as a different"]},{"entry":[{},"action from initiate for the following"]},{"entry":[{},"reasons:"]},{"entry":[{},"\u2218 Initiate is always the first"]},{"entry":[{},"\u2009\u2009action in the workflow."]},{"entry":[{},"\u2218 Provide_info can occur at"]},{"entry":[{},"\u2009\u2009multiple places in a workflow"]},{"entry":[{},"\u2009\u2009while initiate can not."]},{"entry":[{},"\u2218 The people who can initiate the"]},{"entry":[{},"\u2009\u2009workflow may be different"]},{"entry":[{},"\u2009\u2009from those who can provide"]},{"entry":[{},"\u2009\u2009intermediate information."]},{"entry":[{},"\u2009\u2009Only the people configured as"]},{"entry":[{},"\u2009\u2009the participants for the initiate"]},{"entry":[{},"\u2009\u2009action will see the \u201cCreate"]},{"entry":[{},"\u2009\u2009Profile\u201d button."]},{"entry":[{},"\u2218 Provide_info will try to"]},{"entry":[{},"\u2009\u2009retrieve the required attributes"]},{"entry":[{},"\u2009\u2009to display the values to the"]},{"entry":[{},"\u2009\u2009user. This allows the"]},{"entry":[{},"\u2009\u2009information setup in the"]},{"entry":[{},"\u2009\u2009previous steps or in the"]},{"entry":[{},"\u2009\u2009directory to be changed."]},{"entry":["change_info","This action is identical in behavior to"]},{"entry":[{},"provide_info. A different name is"]},{"entry":[{},"used because the name change_info"]},{"entry":[{},"makes more sense in the case of"]},{"entry":[{},"deactivating."]},{"entry":["approval","This action can be configured with"]},{"entry":[{},"only the required attributes. At run"]},{"entry":[{},"time, the values of the required"]},{"entry":[{},"attributes will be presented to the user"]},{"entry":[{},"to get approval. No information is"]},{"entry":[{},"supposed to be changed. The only"]},{"entry":[{},"user action allowed is to click on the"]},{"entry":[{},"button to indicate approve or reject."]},{"entry":[{},"In other embodiments, a digital"]},{"entry":[{},"signature could be used to provide a"]},{"entry":[{},"nonrepudiation approval."]},{"entry":["Provide_info and approval","This action combines the provide_info"]},{"entry":[{},"and the approval into one action. In"]},{"entry":[{},"some situation, customers may want"]},{"entry":[{},"the people who can approve also to be"]},{"entry":[{},"able to provide or change the"]},{"entry":[{},"information if necessary."]},{"entry":["change_approval","This action is identical in behavior to"]},{"entry":[{},"provide_approval. A different name is"]},{"entry":[{},"given to reflect the nature of the action"]},{"entry":[{},"in the deactivating context."]},{"entry":["activate","This action enables the user to"]},{"entry":[{},"explicitly mark an entry ready. Until"]},{"entry":[{},"this action is performed, the user's"]},{"entry":[{},"entry has been marked as"]},{"entry":[{},"\u201cPendingActivation.\u201d Upon"]},{"entry":[{},"completing this action, the status will"]},{"entry":[{},"be changed to \u201cActivated.\u201d Once"]},{"entry":[{},"\u201cActivated,\u201d this user entry may be"]},{"entry":[{},"used for authentication to the system."]},{"entry":["deactivate","This action is the counterpart of the"]},{"entry":[{},"activate action to mark an entry"]},{"entry":[{},"suspended. Until this action is"]},{"entry":[{},"performed, the user's entry has been"]},{"entry":[{},"marked as \u201cPending for Deactivation.\u201d"]},{"entry":[{},"Upon completing this action, the"]},{"entry":[{},"status will be changed to"]},{"entry":[{},"\u201cDeactivated.\u201d In both of these cases,"]},{"entry":[{},"this entry will not be recognized as an"]},{"entry":[{},"authorized user in the system."]},{"entry":["commit","This action writes the information"]},{"entry":[{},"collected this far in the previous"]},{"entry":[{},"workflow steps to the directory."]},{"entry":[{},"Commit can be done multiple times."]},{"entry":[{},"The location of the write is the user's"]},{"entry":[{},"permanent location as selected in the"]},{"entry":[{},"\u201cinitiate\u201d step."]},{"entry":["error_report","This action is to report for a"]},{"entry":[{},"background process. When a"]},{"entry":[{},"background process encounters a"]},{"entry":[{},"processing error, it has no proper way"]},{"entry":[{},"to report the error since there is no"]},{"entry":[{},"responsible person for the action. The"]},{"entry":[{},"workflow definer can configure the"]},{"entry":[{},"failed path to this error_report step, so"]},{"entry":[{},"that the error can be designated to the"]},{"entry":[{},"responsible individuals."]},{"entry":["external_action","External action can be plugged into"]},{"entry":[{},"the workflow as a distinct step."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"Workflows are created based on templates (forms) by users with sufficient privileges. In one embodiment, each template has at least four sections including a section for creating objects, deleting objects, changing attributes and working with certificates. The template provides parameters that define how workflows can be created. Templates can be edited in order to tailor the workflow definition processes. The User Manager, Group Manager and Organization Managers each have their own template files and use those template files to control and define the workflow definition process. In one embodiment, the template file is an XML document that defines a set of parameters for each of the actions available to that particular workflow type. Table 4 describes the various parameters that are used in the template files:",{"@attributes":{"id":"p-0185","num":"0185"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"84pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 4"},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Parameter","Description","Sample Setting"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["occurrence","Indicates how many times","[1][n]"]},{"entry":[{},"this action may be used","1\u2013action can be used"]},{"entry":[{},"within a workflow.","once."]},{"entry":[{},{},"n\u2013action can be used"]},{"entry":[{},{},"multiple times."]},{"entry":["useraction","Indicates whether or not","[true][false]"]},{"entry":[{},"the step is interactive.","True\u2013action requires"]},{"entry":[{},{},"user interaction."]},{"entry":[{},{},"False\u2013this is a"]},{"entry":[{},{},"background step and"]},{"entry":[{},{},"requires no user"]},{"entry":[{},{},"interaction."]},{"entry":["forceCommit","Indicates whether an","[true][false]"]},{"entry":[{},"implicit commit takes","True_implicit commit"]},{"entry":[{},"place for this step, even","takes place."]},{"entry":[{},"though this action is not a","False_implicit commit"]},{"entry":[{},"commit. An implicit","does not take place."]},{"entry":[{},"commit writes all collected"]},{"entry":[{},"data to the specific target"]},{"entry":[{},"entry."]},{"entry":["pre_action","Indicates that the current","[list of actions]"]},{"entry":[{},"action can be specified if"]},{"entry":[{},"the previous step's action"]},{"entry":[{},"is in this list."]},{"entry":["exit_condition","Indicates the possible","[list of exit conditions]"]},{"entry":[{},"results for the given action.","For example:"]},{"entry":[{},{},"true: 1"]},{"entry":[{},{},"false: 0"]},{"entry":["relevant_data","Indicates which types of","[list of relevant data}"]},{"entry":[{},"relevant data can be","Can be any combination of"]},{"entry":[{},"configured for this step.","Required, Optional, or"]},{"entry":[{},"Background steps do not","Supplied."]},{"entry":[{},"contain any relevant data."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}}},"Below is a generic form of a template. In the left hand margin is a letter to identify each line of the template for explanation purposes:",{"@attributes":{"id":"p-0187","num":"0187"},"tables":{"@attributes":{"id":"TABLE-US-00007","num":"00007"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"center"}},"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Generic Template"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u00a9 Oblix, Inc., 2001"]},{"entry":[{},"a <CompoundList ListName = \u201c[workflow type]\u201d>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"b","<CompoundList ListName = \u201c[action]\u201d>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"217pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"c","<SimpleList>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"d","<NameValPair ParamName=\u201coccurrence\u201d Value= [value] \/>"]},{"entry":[{},"e","<NameValPair ParamName=\u201cuseraction\u201d Value= [value] \/>"]},{"entry":[{},"f","<NameValPair ParamName=\u201cforceCommit\u201d Value= [value] \/>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"217pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"g","<\/SimpleList>"]},{"entry":[{},"h","<ValList ListName= \u201cpre_action\u201d>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"i","<ValListMember Value = \u201c[action]\u201d"]},{"entry":[{},"j",". . ."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"217pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"k","<\/ValList>"]},{"entry":[{},"l","<ValNameList ListName= \u201cexit_condition\u201d>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"m","<NameValPair ParamName = \u201ctrue\u201d Value=\u201c0\u201d\/>"]},{"entry":[{},"n","<NameValPair ParamName = \u201cfalse\u201d Value=\u201c1\u201d\/>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"217pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"o","<\/ValList>"]},{"entry":[{},"p","<ValList ListName= \u201crelevant_data\u201d>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"q","<ValListMember Value = \u201crequired\u201d>"]},{"entry":[{},"r","<ValListMember Value = \u201coptional\u201d>"]},{"entry":[{},"s","<ValListMember Value = \u201csupplied\u201d>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"217pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"t","<\/ValList>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"u","<\/CompoundList>"]},{"entry":[{},{},"[more definitions of actions]"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"v <\/CompoundList>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}},"br":{}},{"@attributes":{"id":"p-0188","num":"0188"},"figref":"FIG. 16","b":["700","702","42","44","46","704","700","706","708","702","708"]},{"@attributes":{"id":"p-0189","num":"0189"},"figref":"FIG. 17","b":["730","732","734"]},{"@attributes":{"id":"p-0190","num":"0190"},"figref":["FIG. 18","FIG. 16"],"b":["702","750","754","756","758","760","756","760"]},"In step , the user specifies the domain in the directory to associate with the workflow. In one embodiment, specifying a domain limits the workflow to only operate on target identity profiles that are in the domain. In one implementation, the domain is specified by identifying a node in the directory. The domain includes the identified node and all nodes in the tree that are below the identified node. For example, if a user selects node  of , then the domain includes nodes ,  and . In one embodiment, a filter can be used so that the workflow can be associated with a portion of a flat tree or hierarchical tree. The filter can be an LDAP filter or other type of filter for identifying a set of entities.",{"@attributes":{"id":"p-0192","num":"0192"},"figref":["FIG. 19","FIG. 19"],"b":["780","782","784","786","788"]},"In step , the system receives a selection of the attributes and the types from the user. That is, the user will select which attributes are optional, which attributes are required and which attributes are supplied. An attribute is supplied if it is provided from another workflow. In other embodiments, other types can be used. In step , the participants who can perform the current step being defined are identified. They can be identified by naming them individually, naming a group, or using an LDAP filter. In step , pre and post notifications are specified. A pre-notification means that prior to the step being performed the following set of users are sent an e-mail (or other form of communication). Post notification means that after the step has being completed the following individuals are sent an e-mail (or other form of communication).","If there is another step in the workflow (step ), then the method loops to step ; otherwise, the process of  is completed. In step  the possible entry conditions are determined from the template. In step , these entry conditions are added to the GUI. In step , a selection of the entry conditions is made from the GUI. In step , the system determines if the previous step has a subflow. If so, the user has an opportunity to indicate whether to prevent the initiation of the current step until the subflow is completed. Determination of whether there is a subflow can be based on the template or based on the types of data in the previous step (e.g. is there supplied data). If there is a subflow (or multiple subflows), then indication of the subflow(s) is added to the GUI in step . In step , the system receives an indication from the GUI whether the current step should wait for the previous step's subflow(s) to complete. This indication to wait for subflows is stored as a flag with the data for the workflow. After step , the method continues at step .","In one alternative, each subflow (for a step that had multiple subflows) can be associated with a separate entry condition. In such an embodiment, the user can individually select whether to wait for each subflow.","A subflow is a workflow that is initiated by another workflow. The concept of subflow was introduced and implemented to reduce administrative work. If a workflow already exists to perform a task, any other workflow that needs to perform that task should be able to leverage off the first workflow. When creating a workflow, an indication that there is a sub-workflow is provided by the creator of the workflow when the creator indicates that one or more of the variables are supplied.","The workflow that initiates the subflow is referred to as the parent workflow. A workflow can be both a parent workflow to a first workflow and a subflow to a second workflow. The parent workflow may or may not wait for the subflow, as defined in the workflow creation. Consider the following example, a company uses a first workflow to create new users for the Identity System and add the new user's identity profile to the directory. As part of its process, the new user workflow obtains the new user's telephone number. The obtaining of the new user's telephone number is accomplished by performing a new telephone number workflow. In this example, the new telephone number workflow is initiated by a step in the new user workflow. Therefore, the new telephone number workflow is a subflow of the new user workflow. In one alternative, the new telephone number workflow can also call a subflow, for example, to get a new telephone line connected and operational. This, second subflow can also call a subflow, and so on. There can be many levels of nesting of subflows. Additionally, a parent workflow can have many subflows.","In one embodiment, a parent workflow and its subflows must all be performed by the same application. For example, the all must be performed by the User Manager. Or, they must be performed by the Group Manager, etc.",{"@attributes":{"id":"p-0199","num":"0199"},"figref":["FIG. 20","FIG. 20","FIG. 20","FIG. 5","FIG. 5"],"b":["840","842","264","264"]},"In some situations, a workflow is requested without knowing the location of the target identity profile. For example, a user can request to create an object without indicating where to store the object in the directory. In such a scenario, the system will find and report workflows that perform the requested task and can be accessed by the user. When the system reports the list of workflows (e.g. via a GUI), the system will also report the domain associated with each workflow. In this situation, step  includes the system receiving a selection from the user of the workflow desired, and the domain to operate on.","In step , the system receives a selection from the user of the work flow desired. Note that is step  only identified one workflow, then step  can be skipped or performed automatically. In step , it is determined whether the user is allowed to perform this workflow step. If not, the process of  is completed, at least temporarily. One embodiment of the process of  does not include step . If the user is allowed to perform the step, then the event catalog is accessed in step . The event catalog, which will be discussed in more detail below, is a list of events that trigger actions (e.g. cross application workflows) external to the workflow. In one embodiment, the event catalog is only checked if the template allowed for the use of external actions. For example, one of the actions allowed in a workflow step and defined in a template is \u201cexternal_action.\u201d","In step , pre-notifications, if any, defined in the workflow are sent out. In step , cross application workflows, if any, are invoked, as per the event catalog. In step , the current step of the workflow is performed. In step , it is determined whether there are supplied variables. When creating a workflow, the creator had the option of defining the types of variables. Supplied variables are those variables whose value will be supplied by a subflow. If the current step has a supplied variables, then the system searches for any workflows that can supply the variable and apply to the appropriate domain. If only one workflow is found for each supplied variable, then those workflows are initiated as a subflow in step . If multiple workflows are found for a particular supplied variable, then the user is given a choice and the chosen workflow is initiated as a subflow in step . Note that the subflow could itself have a subflow, which could itself have a subflow, and so on. There is no limitation on the number of subflow nestings.","If there are no supplied variables, or after the subflow(s) are started, the event catalog is accessed in step . Note that cross application workflows can be started pre-step or post-step. Step  is for post-step cross application workflows. In step , post step notifications are sent out, if any. In step , the next step is accessed from the workflow definition. If there are no more steps, then the process of  is completed. In step , the event catalog is checked. In step , pre-notifications are sent out.","In step , the system determines whether the user is allowed to perform the next step. If not, the process of  is stopped. If so, the system determines in step  whether it has to wait for the subflow(s) started in the previous workflow step. In one embodiment, a flag is set at workflow creation time to indicate that the workflow should wait or not wait. If there is a subflow and the current workflow has to wait, the system continues to wait until the subflow is completed. If there is no subflow or it does not have to wait, then the system determines whether all entry conditions have been satisfied in step . If not, the system waits for the entry conditions to be satisfied. If yes, the process continues to step .","Note that different steps may be set up for performance by different users. Thus, a first user may start the workflow but a different user or a different set of users may be needed for intermediate steps. Therefore, the process of  performed by the initial user may temporarily halt. As described above, if another user is needed to perform a step, that user will be notified either by e-mail or through one of the request tabs discussed above. When that user desires to perform the step, the user will request access to the workflow in step  of . For example, the user can respond to a link in an e-mail or select a workflow listed in one of the request tabs. In step , the step for that particular user is accessed, and then the method continues with step  of .",{"@attributes":{"id":"p-0206","num":"0206"},"figref":"FIG. 21","b":["900","40","902","904"]},"If the parent workflow is still active, then the result of the subflow is written to the parent workflow in step . If the parent workflow is not active, then the result is written to the target identity profile in step . In an alternative embodiment, the end result of the subflow can be written to the target identity profile regardless of whether the parent workflow is still active or not. Note that a subflow may have a subflow of its own, which would cause the process of  to operate in a recursive manner. There is no limit on the number of subflow nestings.","A workflow is performed by one of the three managers described above (User Manager, Group Manager, Organization Manager). There may be cases when one workflow in one of the applications (e.g. user manger) needs to trigger a workflow in another application (e.g. Group Manager). For example, when creating a new user with a workflow in the User Manager, it may be beneficial for that workflow to trigger another workflow in the Group Manager which subscribes the new user to groups. A cross application workflow is performed using the event catalog described above, a client program and (optionally) a configuration file for the client program, all of which will be described below.","The cross application workflow uses a pre and post processing feature of the integrated Identity System and Access System. The pre and post processing allows third parties to extend the base of functionality of the system by providing custom actions based on specific defined events. The base elements of pre and post processing are called events. Events occur any time the user interacts with the system. Events can be as simple as adding, modifying or deleting an object or could be as complex as a specific step within a workflow process.","Actions are functions or applications that perform a task in response to an event. These actions are defined to enhance the base functionality of the system of . Multiple actions can be defined for each event. Actions are executed in the order that they appear in an event catalog. Actions are defined using a plug-in model similar to Web Server CGI model. Functions are applications defined for each custom action. Each function\/application will take a standard XML structure as its parameters that allow the system to specify information about the event that triggered the function. Action functions are defined within libraries (.dll or .so) or stand alone executable files. To create a new action based on an event, one must insert a hook into the event catalog. All entries in the event catalog are defined in the following format:","actionName; exectype; param1, param2, . . . ; path; execparam; func;","The \u201cactionName\u201d is the name of the event. The convention for most events is APPNAME_EVENTNAME_PPPTYPE, where APPNAME is the name of the application, EVENTNAME is the name of the event and PPPTYPE is the type of processing (pre event or post event). For a workflow, the APPNAME is the workflow ID for the workflow, the EVENTNAME is the step number in the workflow. The \u201cexectype\u201d is a type of hook, which can be exec or lib. An exec is an executable. A type that is lib is in a library such as a dll. The \u201cparam\u201d is the parameter, which the system takes to output the value. The parameters are deliminated by commas. The \u201cpath\u201d is the path for the external exc or dll to be launched. The \u201cexecparam\u201d identifies the input parameters, deliminated by a comma. The \u201cfunc\u201d is the function in the shared library. Thus, when the event defined in actionName occurs, the appropriate executable or library function is called.","The function in the shared library or the executable that is to be executed upon the event (hereinafter referred to as the \u201cclient program\u201d) needs to include logic to decide which workflow (or other process) to be invoked. It can make use of a configuration file to have a mapping between workflows and any distinguished names, values of attributes, system parameters and any other variables of interest. This client program, after deciding which workflow to call, must connect to the system. In some embodiments, the client program does not call any workflows\u2014rather the client program does all of the work or the client program calls another program\/function.","In one embodiment, the integrated Access and Identity System accepts XML document inputs that are encapsulated in a SOAP envelope using HTTP protocol requests. The XML document contains the necessary parameters and authentication information for carrying out the request. The request is sent to an appropriate URL for the desired application. The Identity System provides the desired application's response to the client program as an output XML document.","The XML input language is a language based on SOAP that allows customers to perform functions outside of the current GUI. The structure of SOAP requests is explained in greater detail below.","One example of a use for a cross application workflow is for a new user workflow to spawn a subscribe to group workflow. The following is the XML input to spawn the subscribe to group workflow:",{"@attributes":{"id":"p-0217","num":"0217"},"tables":{"@attributes":{"id":"TABLE-US-00008","num":"00008"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u00a9 Oblix, Inc., 2001"]},{"entry":[{},"<?xml version=\u201c1.0\u201d?>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<oblix:requests>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<authentication type=\u201cbasic\u201d login=\u201cnewuser\u201d"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"password=\u201cpasswd\u201d>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<oblix.request application=\u201cgroupservcenter\u201d"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"function=\u201cSetGroupSubscription\u201d includeRequest=\u201cnone\u201d"]},{"entry":[{},"displayOutput=\u201cNo\u201d>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<oblix:params>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<oblix.param name=\u201cuseruid\u201d>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<oblix:value>cn=new user,"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"ou=engineering, o=company, c=us<\/oblix:value>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/oblix:param>"]},{"entry":[{},"<oblix:param name=\u201cgroupuid\u201d>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<oblix:value>cn=engineering group,"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"ou=engineering, o=company,c=us<\/oblix:value>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/oblix:param>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/oblix:params>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/oblix.request>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/oblix:requests>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},{"@attributes":{"id":"p-0218","num":"0218"},"figref":"FIG. 22","b":["940","942","944","940","946","948"]},{"@attributes":{"id":"p-0219","num":"0219"},"figref":["FIG. 23","FIG. 23","FIG. 20","FIG. 23","FIG. 23"],"b":["852","864","870","978","856","860","980","982","984","998","990"]},"When the client program is called, it is passed the following information: distinguished name of the user, attributes that have been preconfigured in the event catalog, a callback handle URL and the workflow ID. The callback handle URL is a URL for the client program to call back the workflow if the workflow returns a \u201casync\u201d status code. The client program is written to return either failure, success or async depending on the conditions specific to that particular program. When the client program returns with \u201cfail\u201d or \u201csuccess\u201d the workflow continues. If the client program returns \u201casync,\u201d then the first workflow pauses until the client program invokes the callback handle URL to start the first workflow again. When the client program sends an \u201casync\u201d status, the user at the browser receives a status message that the workflow is pending for another event.","Therefore, in step , if the response is \u201casync\u201d then the workflow engine pauses and waits for the client to return in step . The user is provided with a message that the workflow is paused. When the client program invokes the callback URL (step ), the workflow engine will receive an asynchronous response of either a \u201csuccess\u201d or \u201cfail\u201d with the callback URL. If the result is \u201cfail\u201d (step ), then the process continues at step . If the result is \u201csuccess\u201d (step ), then the process continues at step .",{"@attributes":{"id":"p-0222","num":"0222"},"figref":["FIG. 24","FIG. 23","FIG. 23"],"b":["1010","1010","980","1012","982","1014","1016","1018","1020","1022","1024"]},"In step , the client program returns a status message back to the workflow engine indicating success, failure or async, based on whether the second workflow started successfully and other custom logic (optional). In step , the client program waits for the output message from the application running the second workflow. The output message is likely to be sent to the client program after the second workflow is completed. The output message is an XML document. In step , the output message is processed (including being read and acted on). In step , the client program invokes the callback URL if the previous status was \u201casync.\u201d Note that the above discussion was tailored to cross application workflows. However, the pre and post processing features, including the event catalog, client program and XML inputs, can be used to associate with events other than workflow events and other than workflow actions.","Looking back at , one of the services provided by Group Manager  is to the ability to view a list of all groups of which a user is a member. A user can be a static member of a group, a dynamic member of a group or a nested member of a group. A user is a static member if the user is explicitly listed as a member. For example, the user can be identified in a membership attribute of the group identity profile. A user is a dynamic member if the user's identity profile matches the LDAP rule that specifies the group's dynamic membership. The LDAP rule is stored in an attribute of the group identity profile. A user is a nested member of Group A if the user is a member for Group B and Group B is a member of Group A. The number of levels of nesting is not limited. A nested member of a group receives the privileges of being a member, including receiving access to resource available to the group.","When a user selects the My Groups tab , the user is provided with a list of the groups for which the user is a static member, dynamic member or nested member. In one embodiment, My Groups tab  visualizes the containment relationship of all groups in which the user is a member. This relationship is displayed as a tree on its side, with the roots on the left and the leaves on the right. The display allows the user to tunnel down from a particular group to display the groups contained in (e.g. that are a member of) that group, and so on.",{"@attributes":{"id":"p-0226","num":"0226"},"figref":["FIG. 25","FIG. 25"],"ul":{"@attributes":{"id":"ul0003","list-style":"none"},"li":["Let u denote the target user;","Let g denote a single group;","Let G denote a set of groups, where the gdenotes the igroup in the set;","Let Gdenote the set of groups in which u is a static member;","Let Gdenote the set of groups in which u is a dynamic member; and","Let Gdenote the set of groups in which each ghas a reference to each of its containing groups."]}},"The process of  starts at step  when a user requests to view groups of which the user is a member. One example of performing step  is the selection of My Groups tab  (see ). In step , the system determines all groups of which the user is a static member. Each group identity profile has an attribute defining static membership. The system determines all groups for which the user is specifically listed in the static membership attribute. In step , the system determines all groups of which the user is a dynamic member. A group can have an attribute that defines a dynamic membership in terms of an LDAP filter\/rule. In one embodiment, the system compares the user's identity profile with the LDAP filter for each group to determine which filters are satisfied by the user's identity profile. Those LDAP filters that are satisfied are groups in which the user is a dynamic member.","In step , the set of groups that the user is a static member of and the set of groups that the user is a dynamic member of are combined to determine the set of groups in which the user is either a dynamic or static member. In step , the final set of groups Gis initialized to the set of groups in which the user is either a static member or dynamic member. For each group in which the user is a static or dynamic member, the system calls the function Find_Containing_Groups (step ). The results of the function are added to the set G. In step , the resulting set Gis reported as an identification of all the groups in which the user is either a static, dynamic or nested member. The resulting set can be reported in various ways including reporting the groups in a GUI for the user (e.g. a tree on its side), reporting the groups to the user in a non-graphical format, storing a list of the groups in a file, providing identifications of the groups to another process, etc. In one example, the access system requests that the Identity System determine a user's groups so that the access system can authorize a user to access a resource based on membership in a particular group.","The function Find_Containing_Groups (shown as step ) includes three sub-steps. In the first sub-step (substep 1 in step ), the system finds all groups that contain gas a member. These are the containing groups of g. In the second sub-step, the system iterates over the set of containing groups. In sub-step 2.i. (step ), the system marks g, as a containing group g. The markings are provided in order to graphically show the nesting relationship in My Groups tab . In sub-step 2.ii. (step ), the system recursively finds the containing groups of g. In sub-step 3 (step ), the system returns the closure of the set of containing groups.",{"@attributes":{"id":"p-0230","num":"0236"},"figref":["FIG. 26","FIG. 26","FIG. 25","FIG. 26"],"ul":{"@attributes":{"id":"ul0004","list-style":"none"},"li":["Let u denote the target user;","Let g denote a single group;","Let G denote a set of groups where gdenotes the igroup in the set;","Let Gdenote the set of groups in which u is a static member;","Let Gdenote the set of groups in which u is a dynamic member;","Let Gdenote the set of groups in which u is a nested member, where i denotes the ilevel of nesting;","Let Gdenote the set of Gwhere i is the iset of groups;","Let Gbe a set of groups, where gdenotes the jgroup in the set; and","Let Gbe a set of groups, where gdenotes the kgroup in the set, such that for all g, there exists gsuch that gis a static member of g."]}},"In step  of , the system receives a request to view groups of which a user is a member. One example of performing step  is the user selecting My Groups tab . In step , the system determines the set of groups Gin which the user is a static member. In step , the system determines the set of groups Gin which the user is a dynamic member. In step , the variable i is initialized to nesting level 0. In step , Gis initialized to be the union of Gand G. In step , the system iterates until the set of groups for the ilevel of nesting is empty, finding the (i+1) set of groups which contain groups that have a static member that is in the iset of groups.","In step , the system iterates over the set of groups in G. In step a, Gis set to G. In step b, Gis assigned to equal G. In step c, the system iterates over the containing set of groups G. In step d, the system iterates over the contained set of groups G. In step e, the system determines if group g(the contained group under consideration) is a static member of the group g(the containing group under consideration). In step f, the containing group gis marked as a containing group of g, if gis a static member of g. In step , the system iterates over the set of G, adding each set of groups to the final set G. In step , the resulting set of groups Gis reported back to the requester.","Another feature of the Group Manager is to allow a user to view all the members of a group. For example, when a list of groups is presented in response to a search or a request to \u201cview all my groups,\u201d a user can select a group and request to see all the members. A response to this request from Group Manager  will list all static members, dynamic members and nested members of the group. In one embodiment, each type of membership (static, dynamic, nested) is displayed as separate lists. In other embodiments, one combined list is displayed. To display static and dynamic membership of the group is somewhat straightforward. Static membership is stored directly in the group's identity profile. A dynamic membership is obtained by evaluating the LDAP rule\/filter that specifies the group's dynamic membership. However, the nested membership is more difficult to determine, since the membership of nested members must be recursively calculated.",{"@attributes":{"id":"p-0234","num":"0249"},"figref":["FIG. 27","FIG. 27"],"ul":{"@attributes":{"id":"ul0005","list-style":"none"},"li":["Let Ube the total set of group members including static, dynamic and nested;","Let g denote a single group;","Let G denote a set of groups;","Let gdenote the igroup in G;","Let U(g) denote the set of static user members of group g;","Let G(g) denote the set of static members of group g;","Let U(g) denote the set of dynamic user members of group g; and","Let gbe the target group."]}},"In step , the system receives a request to view the members of a group. In response to the request, the system calls the function GetMembersOfGroup in step . The result of the function GetMembersOfGroup is a set of users U, which is reported in step . The function GetMembersOfGroup includes three steps. In the first step (1), the static members of group g are added to the total set U. In the second step (2), the dynamic members of group g are added to the total set U. In the third step (3), the system iterates over the set of static group members of group g\u2014adding the members for gto the total set Uby recursively calling the function GetMembersOfGroup.",{"@attributes":{"id":"p-0236","num":"0259"},"figref":["FIG. 28","FIG. 28"],"ul":{"@attributes":{"id":"ul0006","list-style":"none"},"li":["Let R denote a set of LDAP rules;","Let r denote an LDAP rule comprised of three components: r, scope rand filter r;","Let rdenote the irule in the set R;","Let gdenote the LDAP rule that specifies the dynamic membership of the group; and","Let Rdenote the normalized set of LDAP rules, there does not exist rand rsuch that r=rand r=r."]}},"In step  of , the system receives a request to view members of a particular group. In step , the function GetMembersOfGroup is called. This function includes three steps. In the first step (a), the static members of group g are added to the total member set U. In the second step (b), the dynamic membership rule gis added to R. In the third step (c), the system iterates over the set of static group members of g, G(g), calling GetMembersOfGroup for each gand G(g). The function GetMembersOfGroup adds all static members of g to the total member set U, and adds the LDAP rule specifying dynamic membership of g to set R.","In step , the system iterates over the set of rules R, constructing the normalized set of rules, R. In substep (i) of step , the system initializes the match to false, and j to 0 for each iteration. In substep (ii), the system iterates over the set of rules in the normalized set R, continuing until a match is found or until the end of the set. The system checks if the rule rin R has identical search base (r) and scope (r) as the rule r, in the normalized set R. If so, the system constructs the disjunction of the filter in the normalized rule rwith that of r. The system also sets match to true to indicate that rhas been normalized. In substep (iii) of step , if a rule rhas not been found in the normalized set Rthat has an identical search base (r) and scope (r) as r, then add rto the normalized set. In step , the system iterates over the set of normalized rules in R, getting the user set for each rule U (r) and adding that set to the total member set U. In step , the total member set Uis reported back as a list of members. Once you have identified a list of members, a requesting entity can request to view certain attributes of those users.","Group manager  also allows an administrator to associate a policy with a group that controls user subscription to and unsubscription from that group. Subscription is defined as adding the user to the static membership of the group. Unsubscription means removing the user from the static membership of the group. A static member is a member who is explicitly identified as a member, as opposed to a dynamic member that is indirectly identified by a rule or other means. In one embodiment, an identity profile for a group includes an attribute that stores a list of all static members and an attribute that stores an identification of the policy for subscribing\/unsubscribing.","While viewing the attributes of a group, a user can request to subscribe or unsubscribe. In one embodiment, a \u201csubscribe\u201d button or \u201cunsubscribe\u201d will be displayed in the GUI while the user views the attributes of a group. By selecting the button, the subscribe or unsubscribe process will start based on the policy for that group. The process of subscribing or unsubscribing according to a policy is typically initiated by the user who is being added to or removed from the group. However, in other embodiments, a first user can request that a different user be added to or removed from the group.","There are at least four policies for subscribing\/unsubscribing: open, open with filter, control through workflow and closed. An open policy does not restrict subscription or unsubscription, any user can subscribe or unsubscribe. The open with filter policy requires that a user satisfy an LDAP rule (or other type of rule) to subscribe but does not require that the rule be satisfied to unsubscribe. The control through workflow policy requires a user to subscribe or unsubscribe through a workflow process. In one embodiment, in order to start the process, the user must be a participant in the first step of a workflow that changes the static member attribute of the group. A closed policy prohibits the subscription to or unsubscription from the group. The open and open with filter policies are less restrictive than the control through workflow and close policies. In one embodiment, the system enforces the rule that no group with a less restrictive policy can be added as a nested member to a group with a more restrictive policy. This rule avoids subversion of the latter policy.",{"@attributes":{"id":"p-0242","num":"0270"},"figref":"FIG. 29","b":["44","432","1250","1252","44","1254","1256","1258","1260","1262","1264","1266","1268"]},"If the subscription policy was not open or open with filter, the system determines whether the subscription from policy is \u201ccontrolled through workflow\u201d (step ). If so, then the workflow is initiated in step . If the workflow completes successfully (step ), then the entity is added to the group in step ; otherwise, the subscription fails and the entity is not added to the group in step . In one embodiment, the workflow is used to approve a user for a group. If the user is approved, the user is added to the group after the workflow completes. In another embodiment, the user is approved and added to the group by the workflow. If the subscription policy is not \u201copen,\u201d \u201copen with filter,\u201d or \u201ccontrolled through workflow,\u201d then the group is closed and the user cannot be added to the group (step ).",{"@attributes":{"id":"p-0244","num":"0272"},"figref":"FIG. 30","b":["1300","1302","434","1304","1306","1308","1310","1312","1314","1316","1318"]},"Another feature of Group Manager  is the ability to perform group expansion. Expanding a group means evaluating the LDAP rule that specifies its dynamic membership and then updating the static membership list with results of the evaluation of the LDAP rules. Expansion, in effect, populates the static membership with a snapshot of the dynamic membership at the time of expansion. Expansion has performance implications. On one hand, it is much faster to evaluate group membership by looking up a value in the static membership list than to evaluate the rule that specifies dynamic membership. On the other hand, frequently updating groups is, in itself, computationally expensive. If the expansion occurs as a separate process, the performance hit can be hidden from the user. Thus, if a group is already expanded when a user requests to see all the members of a group, the processes of  or  do not need to be performed again because the group only has static members at this point. An administrator should expand the groups regularly to maintain accuracy. It may be possible to create a background process that automatically expands a group at certain intervals.","In one embodiment, the group expansion feature can be accessed from Configure tab  in Group Manager . Within the configure tab there is a button labeled \u201cExpand Dynamic Groups.\u201d  is a flowchart for describing the process for expanding dynamic groups. When the user selects the button in Configure tab , a request to expand is sent to Group Manager  in step . The administrator can select a particular group or set of groups to be expanded in step . In step , these groups are expanded by determining all of the members of the groups according to the processes of  or . In one embodiment, the process of expanding the groups only determines dynamic members. In another embodiment, the process of expanding determines dynamic members and nested members (including multiple levels of nesting). Step  also includes storing all of the determined members. In one embodiment, the system will store and keep track of which group members were added during expansion and which members were original static members. That is because future expansions may remove some members that no longer satisfy the LDAP rule; however, members who are named static members will not be removed as part of the expansion process.","When an entity accesses the groups that were expanded in step  and\/or requests to see the members of the group (step ), the entity sees the expanded list of members. Additionally, any process that needs to access members of a group will access the membership generated in the expansion process. In one embodiment, the process of  can be automatically repeated (step ) using a background process or any other means.","In one embodiment, the process of expanding groups can only be performed on groups that have an expansion attribute that is set to true. Additionally, the person or entity expanding the group must have read access for the group expansion attribute and the dynamic filter attribute. That user must also have write access for the static member attribute. In one embodiment, all the expanded members are stored in the static member attribute with the original static members. In another embodiment, all of the original static members can be stored in one attribute and the members added during expansion stored in another attribute.","Another feature of Group Manager  is the ability to dynamically modify groups during run time. This feature is based on attaching auxiliary object classes to structural object classes. A structural object class can be instantiated to create a group such that for each entry in the directory there is only one structural object class. The structural object class cannot change after the object has been instantiated and is being used. One or more auxiliary object classes can be attached to any structural object class in a directory. The structural object class defines a set of attributes. The auxiliary object class also has a set of attributes. When an auxiliary object class is attached to an object class, the attributes of the auxiliary class are added to the object. Once instantiated, a structural object class cannot be modified or removed; auxiliary object classes, however, can be added or removed. Group manager  provides the user with the ability to add or remove auxiliary object classes on the fly using a GUI.","Prior identity systems allow for the addition of auxiliary classes to structural classes upon creation of the object. The present invention allows for auxiliary classes to be added and removed subsequent to object creation. That is, dynamically, an existing object class can have additional attributes added to the group object or removed from the group object by adding or removing auxiliary classes.","When creating a group, an administrator (or other user with sufficient privileges) is provided with a graphical user interface that lists all possible attributes that can be included in the group profile. Some of these attributes are part of structural object class, while others are part of auxiliary object classes (or auxiliary object class schema). If the user selects attributes from an auxiliary class, then those auxiliary classes are added to the object upon creation of the object. After the group is created, various attributes can be populated with data values. Subsequent to this time, attributes that are associated with auxiliary classes can be removed or added to the group. In addition to adding flexibility to defining which attributes are associated with a group, the present invention allows for bulk deletion of attributes. Simply removing the auxiliary object class from the group entry will automatically delete all attributes of the removed auxiliary object class.",{"@attributes":{"id":"p-0252","num":"0280"},"figref":"FIG. 32","b":["1398","1398","1400","1400","1400","1400","44","440","44","1402","44","44","1404","44","1406","1408","1408"]},{"@attributes":{"id":"p-0253","num":"0281"},"figref":"FIG. 33","b":["1430","44","1432","44","1432","1434","1432","1436","1438","1430","1436","1434","1440","1430"]},{"@attributes":{"id":"p-0254","num":"0282"},"figref":["FIG. 34","FIG. 34"],"b":["1460","44","1462","1464","1460","1466","1460","1468","1460"]},"The ability to add or remove from an existing group at runtime provides greater flexibility in defining the content for groups. Furthermore, the removal of an auxiliary class provides a means to bulk delete a set of attributes because removing an auxiliary class will, in one embodiment, delete all attributes for the removed class. Finally, the ability to add or remove from an existing group provides for less coupling between a group schema and group entries. For example, if the schema changes such that a group auxiliary class is removed, only those group entries that have that auxiliary class need to be updated.","The Identity System also includes an \u201cAdvanced Group\u201d auxiliary object class that contains the attributes necessary to implement some of the unique functionalities described above. Administrators can attach the \u201cAdvanced Group\u201d to a group in order to provide values for attributes that control features such as Subscription\/Unsubscription and Dynamic Membership. In one embodiment, the \u201cAdvanced Group\u201d consists of one auxiliary class that includes the attributes listed below. In another embodiment, the \u201cAdvanced Group\u201d consists of a plurality of classes.","The attributes in the \u201cAdvanced Group\u201d related to Subscription\/Unsubscription are:\n\n","The attributes related to Dynamic Membership are:\n\n","The following two attributes belong to neither of the two categories above but are included here for completion:\n\n","The system of  provides users with a variety of interface options. For example, the system supports users with traditional browsers by providing for communication using HTTP and Hypertext Mark-up Language (\u201cHTML\u201d). The system also supports interfaces to third party applications, proprietary browsers and others by providing for communication using Extensible Mark-up Language (\u201cXML\u201d). Embodiments of the present invention provide further flexibility by facilitating the use of custom XML templates to generate HTML and XML responses.",{"@attributes":{"id":"p-0261","num":"0298"},"figref":"FIG. 35","b":["40","40","20","1600","40"]},"http:\/\/host:port\/appname.cgi?param1=value1&param2=val2 . . . .","The \u201chttp\u201d indicates the request is controlled by the HTTP protocol. The host:port field identifies the host that is the target of the request and port on that host. The appname field identifies the application for Identity Server  to perform, such as User Manager, Group Manager, or Organization Manager. The parameter fields (param1, param2, . . . ) identify parameters employed by the identified application. For example, param1 may be a function the identified application performs, and param2 may be a variable or other information required for carrying out the function. One example of a function is a search program that searches Directory Server  for entries with attributes corresponding to values in the request's parameters. In this example, the parameters may require Identity Server  to search Directory Server  for the employee entry for John Smith.","When the SOAP protocol is employed, Identity Server  receives a request similar to the example described above, with a host:port value that informs Identity Server  that the SOAP protocol is in use. The request includes an XML document encapsulated in the SOAP protocol format. The following provides an example of such a request:",{"@attributes":{"id":"p-0265","num":"0302"},"tables":{"@attributes":{"id":"TABLE-US-00009","num":"00009"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"266pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u00a9 Oblix, Inc., 2001"},{"entry":"<?xml version=\u201c1.0\u201d?>"},{"entry":"<SOAP-ENV:Envelope"},{"entry":"xmlns:oblix=\u201chttp:\/\/www.oblix.com\u201d"},{"entry":"xmlns:SOAP-ENV=\u201chttp:\/\/schemas-xmlsoap.org\/soap\/envelope\/\u201d>"},{"entry":"<SOAP-ENV:Body>"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"35pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<oblix:authenication","xmlns:oblix=\u201chttp:\/\/www.oblix.com\u201d","type=\u201c<fill","in"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"266pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"authentication type>\u201d>"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<oblix:login>login name<\/oblix:login>"]},{"entry":[{},"<oblix:password>password<\/oblix:password>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"252pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/oblix:authentication>"]},{"entry":[{},"<oblix:request application=\u201c<fill in application name>\u201d function=\u201c<fill in function"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"266pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"name>\u201d>"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<oblix:params>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"8"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"6","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"7","colwidth":"42pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<oblix:param","name=\u201c<fill","in","parameter","name>\u201d><fill","in","parameter"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"266pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"value><\/oblix:param>"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/oblix:params>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"252pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/oblix:request>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"266pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<\/SOAP-ENV:Body>"},{"entry":"<\/SOAP-ENV:Envelope>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"The above listed text is the backbone of a standard SOAP request with the italicized text representing variables that change between requests. The \u201coblix:authentication\u201d directive identifies the type of user authentication to be employed. The authentication directive includes a type parameter that corresponds to an authentication operation. One authentication type calls for a user's login ID and password. These parameters are provided in the \u201coblix:login\u201d field and \u201coblix:password\u201d field. Alternate implementations of authentication operations include evaluating a user's cookie and\/or requiring the user to submit a challenge phrase.","The \u201coblix:request\u201d directive provides the necessary information for identifying the user's request. Attributes provided within the \u201coblix:request\u201d section are application name, function name, and parameters employed by the function.","Once a request is received (step , ), Identity Server  determines whether any pre-processing is required for the request (step ). Decryption is an example of one pre-processing operation. If pre-processing is required, Identity Server  performs the pre-processing operation (step ). Once pre-processing is complete or if no pre-processing is required, Identity Server  translates the request (step ). In one implementation, Identity Server  translates the request by identifying all programs to be performed in response to the request and the format for outputting the results from each program. Process steps for carrying out the translation are described in greater detail below.","Identity Server  performs the request (step ) after the request is translated. In performing the request, Identity Server  retrieves and manipulates data in accordance with the functions identified in the request. After the request is performed, Identity Server  prepares an Output XML (step ). The Output XML is a data file organized in accordance with formatting directions retrieved during the translation operation (step ). In one embodiment of the present invention, the Output XML is formed using a XML template obtained during the translation process (step ) and display characteristics. The XML template provides a data structure for the Output XML. The use of XML templates and display characteristics is described in greater detail below.","After preparing the Output XML, Identity Server  determines whether any post-processing is to be performed (step ). Post-processing may include operations such as encryption. Embodiments of the present invention also provide for post-processing operations that further customize the Output XML. If post-processing is to be performed, Identity Server  carries out the post-processing operation (step ).","After completing post-processing or if no post-processing is necessary, Identity Server  determines whether client-side processing will be used (step ). In client-side processing, Identity Server  provides the Output XML data file to the requesting client through Web Server . In contrast, the client may elect to have Identity Server  perform server-side processing. In server-side processing, Identity Server  processes the Output XML to prepare a response to the request.","If client-side processing is chosen, Identity Server  prepares a client-side response (step ). In one implementation of the present invention, two different client-side responses are possible. The client may receive only the Output XML or both the Output XML and references to a set of XSL stylesheets that contain directives for converting the Output XML into an HTML display. In various embodiments of the present invention, the set of XSL stylesheets may contain one or multiple XSL stylesheets. The user (or client) then formats the Output XML for presentation or any other purpose the user desires. If client-side processing is not selected, Identity Server  prepares a server-side response (step ). In one embodiment, Identity Server  combines the Output XML with a XSL stylesheet to obtain a HTML response for the client.","In one embodiment of the present invention, Identity Server  determines whether to perform client-side or server-side processing by examining a processing parameter in the request. In a further implementation, the processing parameter also indicates the desired client-side response from Identity Server , namely Output XML and XSL stylesheet references or Output XML and no XSL stylesheet references. If the processing parameter is set to equal \u201cxmlnoxsl,\u201d Identity Server  prepares a client-side processing response including Output XML and no stylesheet references. If the processing parameter is set to equal \u201cxml,\u201d Identity Server  prepares a client-side processing response including both output XML and references to a set of XSL stylesheets the client can access. If no processing parameter appears in the request, Identity Server  defaults to preparing a server-side processing response. In further embodiments, the request can also include a parameter expressly identifying a XSL stylesheet for Identity Server  to employ in preparing either a server-side or client-side response.","In another version of the present invention, Identity Server  employs a predefined list to determine whether to provide client-side processing or server-side processing. The list identifies browsers that desire client-side processing. If Identity Server  receives a request for a browser on the list, Identity Server  performs client-side processing. Otherwise, Identity Server  performs server-side processing. In a further embodiment, the list distinguishes between client-side processing providing Output XML and XSL stylesheet references and client-side processing providing Output XML and no XSL stylesheet references. The list may be updated by clients.","Once a response has been prepared, Identity Server  forwards the response to Web Server  (step ), which forwards the response to the client (step ).",{"@attributes":{"id":"p-0276","num":"0313"},"figref":["FIG. 36","FIG. 35"],"b":["40","1604","40","1640","40","1642"]},"In order to perform request translation (step , ), Identity Server  maintains program service  and XML data registry , which are both depicted in . Program service  contains a list of the programs supported by applications running on Identity Server . Each function in the request corresponds to at least one program listed in program service . Each program listing in program service  contains a pointer to a program, as well as any peripheral programs to be performed in conjunction with the listed program. In alternate embodiments of the present invention, the peripheral programs can be identified in the request or a register file in XML data registry . An example of a peripheral program is the display of a navigation bar that accompanies the display of a request's results.","XML data registry  contains registration files. Each registration file corresponds to at least one program or peripheral programs listed in program service . Each registration file contains information necessary for structuring the output of a program's result. Identity Server  maintains a set of XML templates , XML schemas , and XSL stylesheets . Each registration file in data registry  contains a pointer to an XML template, an XML schema and XSL stylesheet. The application of templates and stylesheets will be explained below in greater detail. Schemas provide information to Identity System users for establishing display characteristics.",{"@attributes":{"id":"p-0279","num":"0316"},"figref":["FIG. 38","FIG. 35"],"b":["40","1606","1700","40","40","1660"]},"Identity Server  completes the request translation by retrieving XML templates and XSL stylesheets. Identity Server  retrieves a XML template for each identified program and peripheral program (step ). Identity Server  retrieves each template from a register file in data registry . Each register file corresponds to at least one combination of an application and a program. Identity Server  retrieves a XSL stylesheet for each identified program and peripheral program (step ). In one embodiment, Identity Server  retrieves each stylesheet from the same register files containing the retrieved XML templates.","The following provides an example of a registration file in one embodiment of the present invention:",{"@attributes":{"id":"p-0282","num":"0319"},"tables":{"@attributes":{"id":"TABLE-US-00010","num":"00010"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u00a9 Oblix, Inc., 2001"},{"entry":"<?xml version=\u201c1.0\u201d?>"},{"entry":"<ObProgramRegistry>"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<ObApplication name=\u201cthe_application_name\u201d>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<ObProgram name=\u201ca_program_name\u201d>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<ObButton name=\u201ca_button_name\u201d\/>"]},{"entry":[{},"<ObButton name=\u201cyet_another_button_name\u201d\/>"]},{"entry":[{},"<ObButton name=\u201cand_maybe_more_button_names\u201d\/>"]},{"entry":[{},". . ."]},{"entry":[{},". . ."]},{"entry":[{},"<ObTemplate name=\u201ctemplatename.xml\u201d\/>"]},{"entry":[{},"<ObStyleSheet name=\u201cstylesheetname.xsl\u201d\/>"]},{"entry":[{},"<ObSchema name=\u201cXML_schema_name.xsd\u201d\/>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/ObProgram>"]},{"entry":[{},"<ObProgram name=\u201canother_program_name\u201d>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<ObStyleSheet name=\u201cIts_stylesheetname.xsl\u201d\/>"]},{"entry":[{},"<ObButton name=\u201ca_button_associated_with_it\u201d\/>"]},{"entry":[{},"<ObSchema name=\u201cIts_XML_schema_name.xsd\u201d\/>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/ObProgram>"]},{"entry":[{},"<ObProgram name=\u201cand_so_on\u201d>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},". . ."]},{"entry":[{},". . ."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/ObProgram>"]},{"entry":[{},". . ."]},{"entry":[{},". . ."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/ObApplication>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<\/ObProgramRegistry>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"The ObProgramRegistry directive identifies the file as a registration file. The ObApplication instruction identifies an application. The ObProgram instruction identifies a program. Identity Server  uses the ObApplication and ObProgram values to identify the appropriate register file for retrieving a program's XML template, XML schema, and XSL stylesheet. For each program, Identity Server  locates the register file with the ObApplication and ObProgram values matching the request's application and program (steps  and ).","Information within an ObProgram directive provides the template, schema and stylesheet for formatting a program's results as Output XML and an HTML document. The ObTemplate field specifies an XML template to be used with the program specified in the ObProgram field. The ObStyleSheet field identifies the XSL stylesheet for the program. The ObSchema field identifies the schema for the program. Identity Server  retrieves the identified template and stylesheet in steps  and  for each program identified in step .","In further embodiments, the register file contains additional information related to preparing an output display for a program's result. For example, one or multiple \u201cObButton\u201d directives can be associated with a program combination when a button is to be displayed along with program results. The button field is used in preparing the button display for Identity Server . For example, it may be appropriate to display an acceptance button along with program results\u2014calling for a user to accept displayed data. A typical button identifies the following characteristics: (1) graphical display; (2) mouse over text; and (3) link that will be invoked when the button is selected by the user. In one implementation, button information is dynamically determined, as opposed to being defined in a template.","The following is an example of an XML template employed with a program for retrieving personal information for people with the last name Smith:",{"@attributes":{"id":"p-0287","num":"0324"},"tables":{"@attributes":{"id":"TABLE-US-00011","num":"00011"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u00a9 Oblix, Inc., 2001"]},{"entry":[{},"<?xml version=\u201c1.0\u201d?>"]},{"entry":[{},"<Company>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<PersonalInformation>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<Email>"]},{"entry":[{},"<oblix:data attrname=\u201cmail\u201d\/>"]},{"entry":[{},"<\/Email>"]},{"entry":[{},"<Name>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<oblix:attribute name=\u201cSmith\u201d>"]},{"entry":[{},"<oblix:data attrname=\u201csn\u201d\/>"]},{"entry":[{},"<\/oblix:attribute>"]},{"entry":[{},"<oblix:data attrname=\u201ccn\u201d\/>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/Name>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/PersonalInformation>"]},{"entry":[{},"<oblix:link href=\u201clocation.xml\u201d\/>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/Company>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"This template indicates that a program retrieves personal information from entries in a company's directory server that have a last name \u201cSmith.\u201d The personal information retrieved includes the person's e-mail and name. The XML template provides directives to obtain this information. The <oblix:data attrname=\u201cmail\u201d\/> directive specifies mail as an attribute name for the desired e-mail address value. The program responds by replacing the <oblix:data attrname=\u201cmail\u201d> element with the e-mail value retrieved by the program. This element is also referred to as a direct proxy value.","The <oblix:attribute name=\u201cSmith\u201d> <oblix:data attrname=\u201csn\u201d\/> <\/oblix:attribute> directive calls for the program to select an entry from the directory server with a value in the surname (sn) attribute corresponding to \u201cSmith.\u201d The <oblix:data attrname=\u201ccn\u201d\/> instruction is another direct proxy calling for the complete name (cn) attribute in the selected entry. The <oblix:link href=\u201clocation.xml\u201d\/directive links the present template to another XML template specified by the location.xml name.","The following shows the resulting XML template after the program has been executed and the program fills in direct proxies in the XML template.",{"@attributes":{"id":"p-0291","num":"0328"},"tables":{"@attributes":{"id":"TABLE-US-00012","num":"00012"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u00a9 Oblix, Inc., 2001"]},{"entry":[{},"<?xml version=\u201c1.0\u201d?>"]},{"entry":[{},"<Company>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<PersonalInformation>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<Email>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"j.smith@company.com"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/Email>"]},{"entry":[{},"<Name lastName=\u201cSmith\u201d>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"John Smith"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/Name>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/PersonalInformation>"]},{"entry":[{},"<Location>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<FloorNumber value=\u201c6\u201d\/>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/Location>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/Company>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"The program located one person with a last name of Smith, namely John Smith. The program returned John Smith's e-mail as j.smith@company.com and John Smith's name as \u201cJohn Smith.\u201d The referenced \u201clocation.xml\u201d template was also integrated into the existing template to indicate that John Smith resides on the 6floor.","The use of templates and stylesheets provides users with a great deal of flexibility and control. Templates and stylesheets can be modified to address the unique needs of system users. Different system users employing the same programs can create different displays of the program's results. Users and\/or system administrators implement customized templates and stylesheets in desired register files.",{"@attributes":{"id":"p-0294","num":"0331"},"figref":["FIG. 39","FIG. 35"],"b":["40","1610","40","1730","40"]},"Identity Server  maps data retrieved in performing the request's programs into the XML data structure. An example of an XML data structure for the XML template shown above appears below in Table 5:",{"@attributes":{"id":"p-0296","num":"0333"},"tables":{"@attributes":{"id":"TABLE-US-00013","num":"00013"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"112pt","align":"left"}}],"thead":{"row":[{"entry":[{},"TABLE 5"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Proxies","Retrieved Attribute Values"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Email","j.smith@company.com"]},{"entry":[{},"Complete Name","John Smith"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"In the XML data structure, the left-hand column lists the names of data server entry attributes retrieved by the program. These are also referred to as direct proxies. The right-hand column corresponds to the retrieved attribute values for the direct proxies. Identity Server  fills each right-hand column cell with the corresponding data for the direct proxy. As shown in Table 5 above, the direct proxy field for the e-mail address attribute is filled with the j.smith@company.com value, and the direct proxy field for the complete name attribute is filled with John Smith.","In some instances, an XML template indirectly defines data to be retrieved\u2014calling for data from an attribute based on the status of another attribute. For example, a search program may call for the name and e-mail address for each direct report of John Smith. In this example, an entry's name and e-mail address attributes for a person are returned, if another attribute in the entry identifies John Smith as the person's direct manager. The XML template shown below supports this search:",{"@attributes":{"id":"p-0299","num":"0336"},"tables":{"@attributes":{"id":"TABLE-US-00014","num":"00014"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<Person>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<Direct Report>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<Name>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<oblix:data attrname=\u201ccn\u201d\/>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/Name>"]},{"entry":[{},"<Email>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<oblix:data attrname=\u201cmail\u201d\/>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/Email>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/Direct Report>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/Person>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"The above XML template indicates that a name and e-mail address is to be retrieved for each direct report of John Smith. In Directory Server , no entry identifies the direct reports of John Smith. Instead, the entry for each person identifies the person's direct manager. Identity Server  queries Directory Server entries and retrieves name and e-mail address information from those entries with John Smith in the direct manager attribute. The <oblix:data attrname=\u201ccn\u201d\/> and <oblix:data attmame=\u201cmail\u201d\/> directives in the template are indirect proxy values for the data to be retrieved by Identity Server .","Template elements calling for indirect proxies are also mapped into the XML data structure. Prior to mapping these elements into the XML data structure, Identity Server  prepares a data structure identifying each of the entries used to obtain the indirect proxy values. An example data structure for the above XML template appears below in Table 6:",{"@attributes":{"id":"p-0302","num":"0339"},"tables":{"@attributes":{"id":"TABLE-US-00015","num":"00015"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"91pt","align":"left"}}],"thead":{"row":[{"entry":[{},"TABLE 6"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Direct Report","Entry"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Direct Report 1","Bob Smith"]},{"entry":[{},"Direct Report 2","Gordon Smith"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"The indirection structure in Table 6 identifies the entries for Bob Smith and Gordon Smith as direct reports of Bob Smith. This indicates that Identity Server  will retrieve indirect proxy values from the data store entries for Bob Smith and Gordon Smith. Identity Server  adds data for the indirect proxy values for the Bob Smith and Gordon Smith entries to the XML data structure, which can contain both direct and indirect proxies. The resulting XML data structure appears below in Table 7:",{"@attributes":{"id":"p-0304","num":"0341"},"tables":{"@attributes":{"id":"TABLE-US-00016","num":"00016"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"119pt","align":"left"}}],"thead":{"row":[{"entry":[{},"TABLE 7"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Proxies","Retrieved Attribute Values"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Email","b.smith@company.com"]},{"entry":[{},"Name","Bob Smith"]},{"entry":[{},"Email","g.smith@company.com"]},{"entry":[{},"Name","Gordon Smith"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"The XML data structures shown above are just examples of XML data structures that can be prepared in accordance with the present invention. As those skilled in the art will recognize, the contents of XML data structures can vary widely as different XML templates and programs are employed.","After preparing the XML data structure (step , ), Identity Server  transforms the XML data structure into Output XML (step ). Identity Server  obtains attribute display characteristics for the retrieved attributes in the XML data structure. The display characteristics establish the display format of attribute data in the XML data structure. Attribute display characteristics identify a display type and relevant information for the display. For example, a text box display type and the length of the text box.","In one embodiment, Identity Server  obtains attribute display characteristics from directory entries in Directory Server . Each Directory Server entry corresponds to a different attribute type. For each attribute, Identity Server  locates a corresponding directory entry, which provides the attribute's display characteristics. In one such embodiment, a system administrator creates all the display attribute directory entries when Identity System  is configured. In alternate embodiments of the present invention, the directory entries are replaced by tables, data structures, or other means that relate display characteristics to attributes so the display characteristics can be obtained by Identity Server .","As explained above, the Output XML is combined with XSL stylesheets to obtain HTML displays. XSL stylesheets interpret directives integrated into the Output XML by the attribute display characteristics\u2014providing instructions to Identity Server  or any other processing engine to implement the formatting called for by the attribute display characteristics. For example, the attribute display characteristics may have integrated directives into the Output XML indicating that a name, such as John Smith, is to be displayed according to a particular type. The identified type corresponds to a set of instructions in an XSL stylesheet that direct a processor to display the value John Smith with a particular font and size. In one example, the display type instructions in the XSL stylesheet indicate that the name John Smith is to be displayed in an Arial font with  point typeface.",{"@attributes":{"id":"p-0309","num":"0346"},"figref":["FIG. 40","FIG. 35","FIG. 35"],"b":["1614","1604","40","1750","40","1752"]},"By employing post-processing, a client can create a plug-in program running on Identity Server  that captures and modifies the Output XML prior to Identity Server  returning a request response. This provides users of Identity Server  with great flexibility and control over the content and format of request responses. For example, a user can modify the Output XML to insert a customized display type directive or remove unwanted data.",{"@attributes":{"id":"p-0311","num":"0348"},"figref":["FIG. 41","FIG. 35"],"b":["40","1620","40","1780","40","1784","40","1782"]},{"@attributes":{"id":"p-0312","num":"0349"},"figref":["FIG. 42","FIG. 35"],"b":["40","1628","40","1800","40","1802"]},"One of the peripheral programs frequently performed in conjunction with a user's expressly requested program is the generation of a navigation bar. The navigation bar is displayed along with the result of a user's expressly identified program\u2014enabling the user to navigate within the request response and other related areas. For example, the navigation bar lets a user scroll through the text of the response and jump to related data in Directory Server . Some implementations of Identity Server , however, provide users with different levels of access to Directory Server  and functions performed by Identity Server . Identity Server  provides for displaying different navigation bars based on user access privileges.",{"@attributes":{"id":"p-0314","num":"0351"},"figref":["FIG. 43","FIG. 35","FIG. 38","FIG. 38","FIG. 43","FIGS. 35-42"],"b":["40","40","1660","1606","1700","40","1702","1706","40","40","40","1820","40","1821","40"]},"Requests for data received by the Identity System frequently require repeated access to the same entries in Directory Server . Continually retrieving this information through Directory Server  slows operation and wastes server bandwidth. Therefore, Identity Server  provides each active request with a cache to reduce the number of data store accesses.","Each request is assigned to a thread of operation. Each thread has access to a small amount of memory in Identity Server  that is referred to as thread local storage.  provides an illustration of thread , which resides in Identity Server  and contains thread local storage . In accordance with the invention, thread local storage  contains cache pointer , which points to cache object . Cache object  is reserved for caching data from entries in Directory Server  that are accessed by the request assigned to thread .","In one embodiment, cache object  is a write through cache that is deleted once a request completes operation in thread . In one implementation, Identity Server  does not update cache object  to maintain coherency with either cache objects in other threads of execution or changes made to the data store by other threads of execution. Requests typically expect data retrieved during one segment of the request's performance to remain the same, unless changed by the request itself. In alternate embodiments of the present invention, Identity Server  updates cache object  to maintain coherency between cache object , the data store, and other cache objects.",{"@attributes":{"id":"p-0318","num":"0355"},"figref":"FIG. 45","b":["20","1830","1826","40","1832","1826","1829","40","1833","40"]},"Identity Server  determines whether the request's data store command is a query or a write to data store  (step ). Directory Server  is referred to here as a data store, since there is nothing directory server specific in the request-based caching. The embodiment shown in  operates in many types of environments including flat files and RDBMS. If the attempted access is a query, Identity Server  determines whether the queried entry is already stored in cache object  (step ). If the queried entry resides in cache object , Identity Server  retrieves the requested entry from cache  (step ). Otherwise, Identity Server  retrieves the entry from the data store through data store  (step ). Identity Server  then copies the entry into cache object  so the data will be available for later accesses (step ).","If the attempted data store access is a write (step ), Identity Server  determines whether the requested memory location is stored in cache object  (step ). If the entry is stored in cache object , Identity Server  removes the old entry in cache object  (step ) and writes the data supplied by the request into cache object  (step ). Identity Server  also writes the same data into the data store (step ). If no cache entry exists for the requested entry, Identity Server  creates a space for the entry in cache  and writes the data to cache  (step ). Identity Server  also writes the data to the data store through data store  (step ).","The process shown in , beginning with step  described above, is repeated for each data store access command in a request. Once the request is completed, cache object  is destroyed.","As described above, clients submit requests to the Identity System asking for information on requesting tasks to be performed. These requests can be submitted via HTTP, XML documents, or other means. In some embodiments of the present invention, multiple Identity Servers are employed to increase the throughput of the Identity System. In such embodiments, requests are assigned to Identity Servers so as to balance the load of each Identity Server. In some instances a request may execute a function that requires a primary Identity Server handling the request to communicate with another Identity Server.","One example of need for inter-server communications arises in caching applications. In some implementations, Identity Servers each maintain caches for data that is frequently used by requests. For example, each Identity Server maintains a workflow definition cache containing workflow data. When a request alters a workflow, the workflow definition cache in every Identity Server must be flushed, since the cache data is no longer accurate. The primary Identity Server handling the request must communicate with all other Identity Servers to instruct them to flush their workflow definition caches. Identity Servers in one embodiment of the present invention are equipped to perform such inter-server communications.",{"@attributes":{"id":"p-0324","num":"0361"},"figref":"FIG. 46","b":["1900","1904","1904","1906","1906","1904","1906"]},"Identity Server  also includes management service , management registry , and request handler . Management service  provides an application programming interface for functional modules to call when remote access of another Identity Server is required. Management registry  stores pointers to functions in set . In one embodiment of the present invention, management registry  is a hash table. Request handler  receives communication requests from other identity servers.","Identity Server  includes function module set , cache set , management service , management registry , and request handler . The components identified in Identity Server  operate the same as the similarly named components in Identity Server .","Request handler  is coupled to management service  to receive inter-server communications. Request handler  is coupled to management service  to receive inter-server communications.","In one embodiment of the present invention, inter-server communications include a remote request to implement functions. In one such embodiment, function parameters accompanying a remote request are transferred among identity servers in a key-value format, which appears below:\n\n","The \u201c{\u201d symbol indicates the beginning of a parameter. The \u201cval\u201d field is the parameter being passed. The \u201clength\u201d field identifies the number of bytes in the val field. The \u201c}\u201d symbol indicates the end of the length field. The \u201ckey\u201d field identifies the name for the parameter. In this embodiment, each remote function is able to encode and decode key-val parameters.",{"@attributes":{"id":"p-0330","num":"0368"},"figref":"FIG. 47","b":["1904","1910","1940","1910","1910","1900","1942","1902","1944","1942","1944","1902","1900"]},{"@attributes":{"id":"p-0331","num":"0369"},"figref":["FIG. 48","FIG. 47"],"b":["1900","1942","1910","1960","1910","1904","1910","1908","1908","1904","1910","1964"]},"After executing the local operation or if no local operation is required, management service  opens a message channel for providing the remote request to remote Identity Server  (step ). Management service  then issues the remote request to remote Identity Server  (step ). In the embodiment shown in , management service  opens up a communication channel with Identity Server  and provides the remote request to server . In alternate embodiments, however, more than two Identity Servers are employed in the Identity System. In such embodiments, local Identity Server  opens message channels with all the other remote Identity Servers and issues the remote request to them.",{"@attributes":{"id":"p-0333","num":"0371"},"figref":"FIG. 49","b":["1902","1922","1910","1990","1922","1914","1992","1922","1918","1914","1902","1994"]},{"@attributes":{"id":"p-0334","num":"0372"},"figref":["FIGS. 50 and 51","FIG. 50","FIG. 48","FIG. 50","FIG. 48"],"b":["1900","1964","1900","2010","1900","1900","2012","1900","2012","1900","1900","1902","2013","1900","1902","1900","1906","2014","1900","2016","2013","1966","1968","1902","2013","1966","1968","1900","2014","2016"]},{"@attributes":{"id":"p-0335","num":"0373"},"figref":["FIG. 51","FIG. 49"],"b":["1902","1916","1994","1902","2040","1902","2042","1902","2042","1902","1916","2044","1902","2046"]},"In one embodiment, the present invention provides for customized certificate management processes. Certificates are electronic documents used to verify the identity of an entity such as a user, group or organization. A well known standard defining certificate formats is the X.509 standard for certificates. In general, a certificate contains information about an entity, including a public key for performing encryption. A certificates holder maintains a secret copy of a corresponding private key that is used for decryption. Certificates employed in one embodiment of the present invention include the following fields: (1) VEND\u2014certificate's expiration date; (2) VSTART\u2014certificate validity start date; (3) ISSUER\u2014certificate holder's distinguished name (dn); (4) EMAIL\u2014certificate holder's e-mail address; (5) SERIAL\u2014certificate serial number; (6) VERSION\u2014certificate version number; (7) ALGOID\u2014certificate algorithm identifier; (8) PUBLICKEY_ALGOID\u2014public key algorithm identifier; (9) PUBLICKEY\u2014public key value of the certificate; (10) ISSUER_SIGNATURE_ID\u2014certificate holder's signature algorithm identifier; and (11) SUBJECT\u2014subject of the certificate.","When a first person wants to establish a secure connection with a second person, the first person sends the second person their certificate. The second person obtains the first person's public key from the certificate. When sending messages to the first person, the second person uses the public key to encrypt the message. The first person uses their private key to decrypt the message. The first person can provide a secure response to the second person by using the second person's public key, which is attached to the second person's certificate.","Embodiments of the present invention provide for establishing different sets of criteria for obtaining a certificate. For example, a high level person in an organization may have great need for access to confidential corporate information. The corporation may wish to issue this person a certificate without any more than a mere request being filed. On the other hand, entry level employees at a corporation may have very little need for access to confidential information. The corporation may wish to have the entry level person's manager approve the issuance of a certificate. One embodiment of the integrated Access and Identity System of the present invention incorporates certificate management into the workflow process so different standards for certificate management can be applied among various entities. In one implementation, different certificate enrollment, renewal, and revocation workflows can be defined for different types of system users.",{"@attributes":{"id":"p-0339","num":"0377"},"figref":"FIG. 52","b":["40","2072","2072","36","2082","36","2072","36"]},"The integrated Access and Identity System of the present invention also includes Certificate Processing Server , which is in communication with Identity Server  to communicate with certificate registration module . Certificate Processing Server  issues certificate signing requests to Certificate Authority , which is external to the integrated Access and Identity System and in communication with Certificate Processing Server . Certificate Authority  is typically a third party vendor that provides certificates, including pairs of public and private keys for attachment to the certificates. One example of a third party certificate provider is Verisign. Certificate Processing Server  is also in communication with signing device . Signing device  digitally signs certificate signing requests before they are issued to Certificate Authority . Digitally signing certificate signing requests heightens the level of security in the connection between Certificate Processing Server  and Certificate Authority . In one embodiment of the present invention, certificate registration module  communicates with Certificate Processing Server  via a secure SSL socket connection and Certificate Processing Server  communicates with Certificate Authority  via a secure SSL connection to enhance system security.",{"@attributes":{"id":"p-0341","num":"0379"},"figref":["FIG. 53","FIGS. 54-59"],"b":["40","2100","20","40","2102","2072","2072"]},{"@attributes":{"id":"p-0342","num":"0380"},"figref":["FIG. 54","FIG. 53"],"b":["2072","2102","2072","2120","2072"]},"Certificate registration module  proceeds with certificate enrollment in accordance with the workflow by retrieving information (step ). Examples of the information retrieved include information from the user's identity profile and information from entities associated with the user. Examples of entities associated with the requesting user include the requesting user's manager who also has an identity profile in the Identity System and can be contacted by Identity Server .","Certificate registration module  also retrieves approval responses, indicating whether issuing a certificate to the requesting user is allowed (step ). For example, certificate registration module , in one implementation, queries a user's manager to determine whether the user is eligible to receive a certificate. If approval is not granted (step ), certificate registration module  issues the requesting user a rejection report (step ). If enrollment is approved (step ), certificate registration module  obtains a certificate for the user (step ). In another embodiment, approval can be based on comparing an LDAP filter to the attributes of the user's identity profile.","In accordance with the present invention, system administrators are able to define different workflows for different users\u2014making many variations of the above-described certificate enrollment process possible. In alternate implementations, the workflow does not call for retrieving information or obtaining approval responses. Certificate registration module  immediately moves to obtain a certificate for the user (step ).",{"@attributes":{"id":"p-0346","num":"0384"},"figref":["FIG. 55","FIG. 54","FIG. 54"],"b":["2128","2070","2152","2072","2122","2072","2072","2076","2154"]},"Certificate Processing Server  obtains a digital signature for the request from signing device  (step ). Certificate Processing Server  then forwards the digitally signed request as a certificate signing request to Certificate Authority  (step ). Certificate Authority  responds by creating a certificate (step ) and forwarding the certificate to Certificate Processing Server  (step ). Certificate Processing Server  forwards the certificate to certificate registration module  (step ). Certificate registration module  stores the new certificate in certificate data store location  (step ). Certificate registration module  then notifies the user that the certificate is in place (step ).","Once a certificate has been issued it is typically valid for a predetermined period of time, such as one year. After the time period expires, the certificate holder must renew the certificate. In one embodiment of the present invention, the certificate holder renews the certificate by submitting a certificate renewal request to Identity Server . This request is handled by certificate registration module  in essentially the same manner as described above for certificate enrollment. The same process is applicable, because the renewal of a certificate is essentially the same as enrollment. When a certificate is renewed, Certificate Authority  generates a new private key-public key pair, in essence creating a new certificate without increasing the total number of certificates issued to the Identity System. The only difference is that Certificate Processing Server  informs Certificate Authority  that a certificate is to be renewed, as opposed to a new certificate being issued.","When a new certificate is issued through enrollment or a certificate is renewed, the system administrator informs the user that the certificate is ready for pick-up. The administrator can send the user an e-mail indicating the certificate is available on a floppy disk in the administrator's office. The user then goes to the administrator's office and picks up the floppy disk with the certificate. The user's copy of the certificate includes the private key, which is not available in the certificate maintained in certificate data store . After picking up the certificate, the user installs the certificate in his\/her client device's browser. The copy of the certificate in certificate data store location  is available for system users to view and obtain the certificate holder's public key information.","In an alternate embodiment of the present invention, an automatic renewal option is provided. In response to an automatic renewal request, renewal is based solely on authenticating the requesting user. No data collection or additional approval is required.  illustrates one set of steps taken by certificate registration module  to respond to an automatic renewal request (step , ). Certificate registration module  retrieves the automatic renewal certificate workflow for the user (step ). In one embodiment, there are multiple automatic renewal workflows with each workflow corresponding to a different set of user characteristics. Certificate registration module  selects the workflow that matches the characteristics of the user. Certificate registration module  then obtains the renewal certificate (step ).",{"@attributes":{"id":"p-0351","num":"0389"},"figref":["FIG. 57","FIG. 56"],"b":["2192","2072","2212","2072"]},"Certificate registration module  forwards the automatic renewal request to Certificate Processing Server  (step ). Certificate Processing Server  obtains a digital signature for the request (step ). Certificate Processing Server  forwards the request to Certificate Authority  as a certificate signing request (step ). Certificate Authority  provides a renewal acknowledgement to Certificate Processing Server  (step ). Certificate Processing Server  forwards the renewal acknowledgement to certificate registration module  (step ). Certificate registration module  updates the certificate in the data store (step ) and notifies the user of the certificate renewal (step ). In the automatic renewal process described above, a new public key-private key pair is not issued for the certificate. In alternate embodiments, a new key pair is issued as described with reference to .",{"@attributes":{"id":"p-0353","num":"0391"},"figref":["FIG. 58","FIG. 53"],"b":["2076","2102","2072","2250","2072","2072","2252"]},{"@attributes":{"id":"p-0354","num":"0392"},"figref":["FIG. 59","FIG. 58"],"b":["2072","2252","2072","2272","2072","2076","2274","2076","2078","2276","2076","2084","2278","2284","2076","2080","2076","2072","2282"]},"The system administrator is responsible for verifying that a certification has been successfully revoked. In one embodiment, the system administrator reviews a certificate revocation list provided by Certificate Authority . Certificate Authority  makes arrangements with the system administrator to determine the frequency at which the certificate revocation list will be updated. Alternatively, the system administrator employs an Online Certificate Status Protocol (\u201cOCSP\u201d) to check the status of a certificate revocation in real time through an online connection with Certificate Authority . OCSP is a real time protocol provided by Certificate Authority  that enables applications to check the status of certificates with the Certificate Authority. One Certificate Authority that provides such a protocol is Verisign.","It is important to note that revoking a certificate does not result in the certificate being deleted from certificate data store location . Revoked certificates remain in the data store until Identity Server  deletes the certificate, which can be done through a change attribute workflow.","The following table provides example workflows for certificate enrollment, revocation and renewal.",{"@attributes":{"id":"p-0358","num":"0396"},"tables":{"@attributes":{"id":"TABLE-US-00017","num":"00017"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"126pt","align":"left"}}],"thead":{"row":[{"entry":[{},"TABLE 8"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Workflow","Actions"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Certificate Enrollment","cert_initiate_enroll"]},{"entry":[{},{},"provide_info (optional)"]},{"entry":[{},{},"approval\/provide_approval (optional)"]},{"entry":[{},{},"cert_generate_certificate"]},{"entry":[{},"Certificate Renewal","cert_initiate_renew"]},{"entry":[{},{},"provide_info (optional)"]},{"entry":[{},{},"approval\/provide_approval (optional)"]},{"entry":[{},{},"cert_generate_certificate"]},{"entry":[{},"Certificate Revocation","cert_initiate_revoke"]},{"entry":[{},{},"cert_revoke_certificate"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"The first action in the certificate enrollment workflow is cert_initiate_enroll, which includes certificate registration module  presenting the requesting user with a certificate enrollment page\u2014indicating that certificate enrollment process is under way. In one embodiment, the user's browser responds by submitting the certificate enrollment page back to certificate registration module .","The provide_info action calls for certificate registration module  to retrieve information from either the user or an entity affiliated with the user, as described above. The enrollment workflow can also contain either an approval action or a provide_approval action. The approval action requires certificate registration module  to obtain approval for certificate issuance from an entity, such as someone affiliated with the user. For the provide_approval action, certificate registration module  obtains information along with the approval. The provide_info, approval, and provide_approval actions are optional.","The cert_generate_certificate action in the enrollment workflow causes certificate registration module  to obtain a certificate. As shown above, certificate registration module  obtains certificates with the assistance of Certificate Processing Server  and Certificate Authority .","The actions in the certificate renewal workflow are essentially the same as those in the enrollment workflow with the exception of cert_initiate_enroll being replaced by cert_initiate_renew. The cert_initiate_renew action causes certificate registration module  to present the user with a request to renew button. Certificate registration module  provides this button when there is a predetermined period of time remaining before an existing certificate expires. The user requests the renewal of a certificate by selecting the button, and certificate registration module  provides the user with a renewal page to be submitted as a renewal request.","The cert_initiate_revoke action enables certificate registration module  to accept a revocation request. The cert_revoke_certificate action causes certificate registration module  to carryout the revocation process through Certificate Processing Server  and Certificate Authority .","As shown above, several of the workflow actions are optional. The flexibility to add different steps to workflows makes certificate management very flexible. System administrators can create different certificate related workflows for different types of users. For example, a particular type of user may be automatically granted a certificate upon requesting enrollment\u2014requiring the workflow to include only the cert_initiate_enroll and cert_generate_certificate actions. Alternatively, another type of user may require approval before a certificate is issued\u2014requiring the workflow to include an approval or provide approval action. In further embodiments, system administrators can also initiate certificate related requests on behalf of system users.","As described above, Identity Server  maintains public copies of certificates in certificate data store location . Identity System users issue requests to Identity Server  to export or display the certificates. In one embodiment of the present invention, the Identity System maintains real time status information about the certificates, so users are not unknowingly importing or viewing expired certificates. Maintaining this status information is beneficial, because certificate status is a dynamic value that cannot typically be provided in a certificate field.",{"@attributes":{"id":"p-0366","num":"0404"},"figref":"FIG. 59A","b":["40","40","3400","40","2084","40","2084","40","2084","2076"]},"Identity Server  stores the retrieved certificate status in Directory Server  (step ). Identity Server  also stores validation information for the certificate in Directory Server  (step ). In one implementation, the validation information includes: 1) Status Retrieval Time\u2014indicating the time that Identity Server  retrieved the certificate's real time status in step  and 2) Validation Interval\u2014indicating a time period extending from the Status Retrieval Time. In one embodiment of the present invention, the Validation Interval is set to a value of zero, if the certificate's status is not valid.","In one embodiment, Identity Server  performs the sequence of steps shown in  in response to a request from a user or system administrator that identifies a certificate. In alternate embodiments, Identity Server  also automatically carries out the steps in  at predetermined time intervals.",{"@attributes":{"id":"p-0369","num":"0407"},"figref":"FIG. 59B","b":["40","40","20","2082","3420","40","3422","40"]},"If a status check is not required, Identity Server  exports the requested certificate to the user via Web Server  (step ). Otherwise, Identity Server  determines whether a real time status check of the certificate is required (step ). Identity Server  also makes this determination in one embodiment by querying an Identity System parameter field. If a real time status check is required, Identity System  retrieves the requested certificate's real time status from Certificate Authority , as described above with reference to . In some embodiments, Identity Server  also stores the retrieved real time certificate status and related validation information as shown in . Identity Server  determines whether the certificate's real time status is valid (step ). If the status is valid, Identity Server  exports the certificate (step ). Otherwise, Identity Server  issues an error message to the user (step ).","If real time status checking was not required (step ), Identity Server  determines whether the user's export request falls within the Validation Interval for the certificate (step ). As explained above, the Validation Interval is a window of time extending from the last time the certificate's real time status was retrieved. In one embodiment, the Validation Interval is one hour. In various embodiments, the Validation Interval has many different values. As the Validation Interval is reduced, the probability increases that the stored real time status for the certificate is still accurate. If the export request falls within the Validation Interval, Identity Server  exports the requested certificate (step ). Otherwise, Identity Server  issues an error message to the user (step ). By employing stored real time certificate status, Identity System  can supply real time status for large numbers of certificates. In one embodiment, the Validation Interval is zero for a certificate that is not valid-resulting in Identity Server  issuing an error message in response to the determination in step .",{"@attributes":{"id":"p-0372","num":"0410"},"figref":"FIG. 59C","b":["40","40","20","2082","3450","40","3452","40"]},"If certificate status is not required (step ), Identity Server  identifies the fields in the requested certificate that are to be displayed (step ). Identity Server  identifies these fields in one embodiment by querying a set of parameters in the Identity System that are programmed by the Identity System administrator. Identity System  then displays the identified fields from the certificate without any certificate status (step ).","If certificate status is required (step ), Identity Server  determines whether a real time certificate status check is required (step ). Identity Server  makes this determination in one implementation by querying an Identity System parameter field. If a real time status check is required, Identity Server  retrieves a new real time status for the certificate (step ), as described above with reference to . In some implementations, Identity Server  also stores the status and validation information as shown in . If a real time status check is not required (step ), Identity Server  retrieves previously obtained real time status that is stored in the Identity System for the certificate (step ).","Identity Server  identifies the fields in the requested certificate that are to be displayed after obtaining certificate status in real time or from storage (step ). Identity Server  then displays the identified fields for the certificate and the certificate's status (step ).","The operations described above in  can also be employed to provide users with dynamic certificate related information other than certificate status. Examples of other dynamic information include certificate policies and certificate costs.","The discussions above regarding workflows, groups, communication between Identity Servers, etc., primarily pertain to managing and using the Identity System. As stated above, the Identity System manages identity profiles. These identity profiles are used, among other things, to authenticate users and to authorize users to access resources. The Access System has primary responsibility for providing authentication and authorization services. In one embodiment, authentication and authorization services are performed based on using identity profiles with authentication and authorization rules. These authentication and authorization rules are associated with policy domains and policies, as described above.",{"@attributes":{"id":"p-0378","num":"0416"},"figref":"FIG. 60","b":["2400","2402","2404","2405","2406","2408"]},"In step , a first level (default) authentication rule is added to the policy domain. In general, authentication is the process of verifying the identity of the user. Authentication rules specify the challenge method by which end users requesting access to a resource in the policy domain must prove their identity (authentication). As previously discussed, first level (default) authentication rules apply to all resources in a policy domain, while second level authentication rules are associated with policies that apply to subsets of resources or specific resources in the policy domain. In one embodiment, there is only one default authentication rule for a policy domain. If an administrator desires an authentication rule to apply to only a specific resource in the policy domain, a separate policy for that specific resource having a second level (specific) authentication rule should be defined.","After setting up the authentication rule in step , one or more first level or default authorization rules are added to the policy domain in step . In general, an authorization rule determines who can access a resource. The default authorization rule allows or denies users access to resources within its applicable policy domain. If multiple authorization rules are created, then they are evaluated in an order specified in step . In step , a first level (default) audit rule is configured for the policy domain. In step , zero or more policies are added to the policy domain. In step , the data for the policy domain is stored in Directory Server  and appropriate caches (optional) are updated. In one embodiment, an authorization rule or an authentication rule can be set up to take no action. That is, always grant authentication without any challenge or verification; or always grant authorization without any verification.",{"@attributes":{"id":"p-0381","num":"0419"},"figref":"FIG. 61","b":"2432"},"In steps  and , authorization actions are set up. Authorization actions personalize the end user's interaction with the Web Server. In step , header variables are provided for authorization success events and authorization failure events. This feature allows for the passing of header variables about the end user (or other information) to other web-enabled resources. Web-enabled applications can personalize the end user's interaction with the Web Server using these header variables. As a simple example, the actions could supply each application with the user's name. An application could then greet the user with the message \u201chello <user's name>\u201d whenever the user logs on. Header variables are variables that are part of an HTTP request. If an authorization rule is set up with header variables as part of an authorization success action, a successful authorization causes the HTTP request to the resource to include the header variables. Similarly, if there are header variables for an authorization failure, an authorization failure event includes adding header variables to the HTTP request that redirects a browser to an authorization failure web page. The resources identified by the HTTP requests that include the header variables can use the header variables any way desired. In one embodiment of the method of , one or more groups can be specified for authorization to the resource(s).",{"@attributes":{"id":"p-0383","num":"0421"},"figref":["FIG. 62","FIG. 62","FIG. 62"],"b":["2450","2452","2454","2456","2458","2450"]},"The variable name entered in step  is a value that appears in the HTTP header to name the variable. The downstream resource using the header variable searches for the variable name. The string entered is data that can be used by the downstream resource. The LDAP attribute(s) can be one or more attributes from the requesting user's identity profile. Thus, the following can occur in the simple authorization success example described above: (1) the variable name field can include \u201cauthorization success,\u201d (2) the return field can include \u201cyes,\u201d and (3) the attribute field can include the name attribute for the user in the user's identity profile. Any of the attributes from the user's identity profile can be selected as a header variable.","Looking back at , in step , a redirect URL can be added for an authorization success event and a redirect URL can be entered for an authorization failure event. Step  includes specifying the users allowed to access the resource associated with the authorization rule. By default, users cannot access a resource until they are granted access rights. In one embodiment, there are at least four means for specifying who can access a resource. The first means is to explicitly name a set of users who can access the resource. A second means includes identifying user roles. The third means is to enter an LDAP rule that can be used to identify a set of users based on a combination of one or more attributes. A fourth means is to enter an IP address, which allows users of computers having the specified IP address to access the resource.","Step  is used to specify the users not allowed to access the resource associated with this rule. Identification of users, roles, LDAP rules, and IP addresses are entered in step  in the same manner as entered in step . It is possible that a particular user can be subject to both an allow access rule and a deny access rule. Step  is used to set a priority between such rules. Optional step  is used to define any POST data to be used for authorization if this feature is implemented. An HTTP POST request can include POST data in the body of the HTTP request. POST data can also be submitted in query string form. One embodiment of the present invention allows POST data to be used for authorization purposes.","In optional step , an administrator defines which POST data is to be used for authorization purposes. If POST data is to be used for authorization to satisfy an authorization rule, the POST request must include all the appropriate POST data and values for that POST data as defined in step . However, it will be understood that POST data need not be used for authorization in all embodiments of the present invention. Step  is used to set a priority of evaluation for the authorization rule relative to other authorization rules in a given policy. In one embodiment, if multiple authorization rules apply to a resource, this priority determines the order of evaluation.",{"@attributes":{"id":"p-0388","num":"0426"},"figref":"FIG. 63","b":["2470","2472","2474"]},{"@attributes":{"id":"p-0389","num":"0427"},"figref":"FIG. 64","b":["2518","2520","2520"]},"In step , a pattern for the URL path (or other type of path) to which the policy applies is specified. This is the part of URL that does not include the scheme (\u201chttp\u201d) and host\/domain (\u201cwww.oblix.com\u201d), and appears before a \u2018?\u2019 character in the URL. In step , a query string is specified. This is a set of variables and values that must be included in the specified order in an incoming URL for the policy to match and be activated. For example, in the URL","\u201cHTTP:\/\/www.zoo.com\/animals.cgi?uid=maneaters&tigers=2\u201d the values after the question mark (e.g. \u201cuid=maneaters&tigers=2\u201d) comprise a query string. Only a URL exhibiting the query string can match to this policy. For example, a URL with the \u201ctigers\u201d variable appearing before the \u201cuid\u201d variable will not match the above-identified policy.","In step , query string variables are added. Query string variables include a name of a variable and the variable's corresponding value. Query string variables are used when it is desirable for multiple variables to be found in the query string, but the order is unimportant. Thus, for a policy with query string variables \u201cuid=maneaters\u201d and \u201ctigers=2,\u201d a URL with a query string having the appropriate uid and appropriate tigers variable, in any order, will match the policy. In order for a resource URL to apply to a policy, the path of the requested resource URL must match the path of the policy as well as any query string or query variables. As discussed above, POST data can be submitted in query string form (for example, in a form submission), and evaluated using the query string variables entered in step .","The query string or query variables specified in the steps of  do not need to uniquely identify a resource. Rather, they are used to identify a policy, which may apply to one or more resources.","Typically, the query data is added to a URL to access certain data from a resource. However, the query data can be used in the URL to identify the resource. Each application or resource is free to use the query data in any way that is in agreement with standards and norms known in the art.","In step  of , the authentication rule is created in accordance with the method of . In step , one or more authorization rules are created for the policy in accordance with the method of . In step , an audit rule for the policy is configured. In step , POST data (optional) is added to the policy. This POST data is used to map resources with policies.","The present invention supports the use of multiple authentication schemes. An authentication scheme comprises an authentication level, a challenge method, an SSL assertion parameter, a challenge redirect parameter, and authentication plug-ins. The authentication level represents an arbitrary designation of the level of confidence that an administrator has in a particular authentication scheme relative to other authentication schemes.","In one embodiment of the present invention, an authentication scheme can specify one of four challenge methods: none, basic, form, and X.509. If an authentication scheme's challenge method is set to \u201cnone,\u201d no authentication is required to access a requested resource, thus allowing support for unauthenticated users. This challenge method can be used over both unsecured as well as SSL connections. The \u201cbasic\u201d challenge method can also be used over both unsecured and SSL connections. The \u201cX.509\u201d challenge method can be used over an SSL connection between a user's browser and Web Server host. A \u201cform\u201d challenge method employs a custom, site-specific HTML form presented to the user, who enters information and submits the form. Subsequent processing is determined by the administrator at the time the authentication scheme is created. Form challenge methods can be used over both unsecured and SSL connections.","The SSL parameter of an authentication scheme identifies whether SSL is to be asserted on the connection to the user's browser by the Web Server. The challenge parameter identifies where to redirect a request for authentication for the particular authentication scheme. Authentication plug-ins are necessary for processing the user's supplied information. Authentication plug-ins can interface with Access Server  through an authentication API.","An authentication scheme that an attacker can easily and profitability eavesdrop upon is typically considered \u201cweak.\u201d In one embodiment, the basic authentication challenge method places the user's credential (supplied information), a simple password, \u201cin the clear\u201d over an unsecured network connection. However, the authentication scheme can be made stronger by passing the user's credential over an encrypted connection, such as SSL. In one embodiment, given two authentication schemes (one with and one without SSL), an access administrator will assign the authentication scheme without SSL to a lower authentication level than the authentication using SSL.","When a user first requests a protected resource, the user is challenged according to either: (1) the authentication scheme defined by the first level authentication rule in the applicable policy domain, or (2) the second level authentication rule in the applicable policy associated with the requested resource. If the user satisfies the authentication rule, an encrypted authentication cookie is passed to the user's browser indicating a successful authentication. Once authenticated, the user may request a second resource protected by a different policy domain and\/or policy with a different authentication rule. The user is allowed access to the second resource without re-authenticating under the following condition: the authentication level of the authentication scheme used to successfully authenticate for the first resource is equal to or greater than the authentication level of the authentication scheme of the second resource. Otherwise, the user is challenged and asked to re-authenticate for the second resource in accordance with the second resource's higher level authentication scheme. Satisfaction of a higher or lower authentication level is determined by evaluating the authentication cookie sent by the user's browser when requesting the second resource. In one embodiment of the present invention, administrators can define an unlimited number of authentication levels.","Once authenticated, a user can explicitly log out, causing authentication cookies cached (or otherwise stored) by the user's browser to be destroyed or become invalid. Authentication cookies can also be set by an administrator to be destroyed after a maximum idle time has elapsed between requests to resources protected in accordance with the present invention.",{"@attributes":{"id":"p-0402","num":"0440"},"figref":"FIG. 65","b":["2550","12","22","24","28","2552","2553","2595","2554","12","2550","2552","2554","2556","2554","2560"]},"If the user successfully authenticates for the requested resource (step ), then the method proceeds to step . Otherwise, the unsuccessful authentication is logged in step . After step , the system then performs authentication failure actions and Web Gate  denies the user access to the requested resource in step . In step , the successful authentication of the user for the resource is logged. The method then performs authentication success actions in step . In response to the successful authentication, Web Gate  then passes a valid authentication cookie to browser  (step ), which stores the cookie. After passing the cookie in step , the system attempts to authorize in step .","In step , the method determines whether the user is authorized to access the requested resource. If the user is authorized (step ), the method proceeds to step . Otherwise, the unsuccessful authorization is logged in step . After step , the method performs authorization failure actions (step ) and Web Gate  denies the user access to the requested resource. If authorization is successful (step ), then the successful authorization of the user is logged in step . Authorization success actions are performed in step . The user is granted access to the requested resource in step . In one embodiment of step , some or all of HTTP request information is provided to the resource. In one or more scenarios, the resource being accessed is the Identity System.",{"@attributes":{"id":"p-0405","num":"0443"},"figref":"FIG. 66","b":["2630","28","2642","2632","2640","28","34","2633","34","2636"]},"If mapping step  is unsuccessful (step ), then the requested resource is deemed to be unprotected (step ). However, if a successful mapping has occurred (step ), then Access Server  retrieves the authentication rule (step ) and audit rule (step ) associated with the requested resource. Access Server  then passes the authentication scheme ID from the authentication rule, audit mask, and any POST data received to Web Gate  in step . Web Gate  caches the authentication scheme ID from the authentication rule, audit mask, and POST data in the resource cache (step ). Since the requested resource was successfully mapped to a policy domain in step , the resource is deemed protected (step ).",{"@attributes":{"id":"p-0407","num":"0445"},"figref":"FIG. 67","b":["2700","34","28","34","2702","2702","2702","2704","34","2716"]},"In step , Access Server  determines whether the policy domain associated with the matching URL prefix calls for one or more host ID's. In one embodiment, resources are mapped to certain policy domains if the port number of a resource request and the location of the resource itself conform to one or more host ID's. Thus, multiple policy domains can be associated with identical URL prefixes, each policy domain requiring different host ID's (or none at all). If the policy domain considered in step  requires a matching host ID, then Access Server  proceeds to step . Otherwise, Access Server  proceeds directly to step  where the requested resource is mapped to the policy domain associated with the currently considered URL prefix. In step , if a matching host ID is found, Access Server  proceeds to step . If no matching host ID is found, Access Server  returns to step  where it determines whether additional matching URL prefixes exist.","If no matching URL prefix is found in step , then Access Server  proceeds to step . In step , Access Server  crops the right-most term from the resource URL prefix compared in step . Thus, if the resource URL prefix compared in step  reads: \u201c\/oblix\/sales\/index.html\u201d then the resource URL prefix will be cropped in step  to read: \u201c\/oblix\/sales.\u201d If the entire resource URL prefix has been cropped in step  such that no additional terms remain (step ), then the method proceeds to step  where Access Server  concludes that there is no policy domain associated with the requested resource. However, if one or more additional terms remain in the resource URL prefix, then the method returns to step  where the cropped URL prefix is compared with URL prefixes cached in the URL prefix cache.","As will be apparent from , the method recursively performs steps , , , and  until either a match is found (step ) or the entire resource URL prefix has been cropped (step ). In any case, the method of  will inevitably return either a successful mapping (step ) or no mapping (step ).",{"@attributes":{"id":"p-0411","num":"0449"},"figref":["FIG. 68","FIG. 66","FIG. 68"],"b":["2730","34","2636","36","34","34","2731","2732","34","34","2735","34","2733","2733","34","2734","2732","2733","2730","2737","2732","2735","2736","2737"]},{"@attributes":{"id":"p-0412","num":"0450"},"figref":"FIG. 69"},"1. Pattern on the path of the URL: This is the part of URL that does not include the scheme (\u201chttp\u201d) and host\/domain (\u201cwww.oblix.com\u201d), and appears before a \u2018?\u2019 character in the URL. In the example URL:","http:\/\/www.oblix.com\/oblix\/sales\/index.html?user=J.Smith&dept=engg the absolute path is \u201c\/oblix\/sales\/index.html.\u201d","2. Pattern on name value pairs in the URL: This may be a set of patterns. They apply to query data (data appearing after the \u2018?\u2019 character in the URL when operation is GET, or the POST data if operation is POST) and are configured as name (no pattern allowed) plus a pattern or value. For example:",{"@attributes":{"id":"p-0416","num":"0454"},"tables":{"@attributes":{"id":"TABLE-US-00018","num":"00018"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"77pt","align":"left"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"variable name","pattern"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"user","*Smith"]},{"entry":[{},"dept","*sales*"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"If multiple name value pairs are specified, they all must match to the incoming resource URL. So the URL:","http:\/\/www.oblix.com\/oblix\/sales\/index.html?user=J.Smith&dept=engg will not match this pattern set. This pattern does not include a notion of order to these name-value pairs. A URL:","http:\/\/www.oblix.com\/oblix\/sales\/index.html?dept=sales&user=J.Smith (with reverse order of \u201cdept\u201d and \u201cuser\u201d) will also satisfy this pattern. This is important because it is usually difficult to control the order of name value pairs in GET\/POST query data.","3. Pattern on the entire query string: This is useful when an administrator desires to enforce an order on the query string. For example, a pattern \u201cuser=*Smith*sales\u201d will match query string \u201cuser=J.Smith&dept=sales.\u201d","A policy can contain one or more of above types of patterns. If multiple patterns are specified in one policy, they ALL must match to the incoming resource URL. If not, that policy doesn't apply to the incoming resource URL.","Patterns used for one embodiment of the current invention can use the following special characters:","1. ?: Matches any one character other than \u2018\/\u2019. For example, \u201ca?b\u201d matches \u201caab\u201d and \u201cazb\u201d but not \u201ca\/b.\u201d","2. *: Matches any sequence of zero or more characters. Does not match \u2018\/\u2019. For example, \u201ca*b\u201d matches \u201cab,\u201d \u201cazb,\u201d and \u201cazzzzzzb but not \u201ca\/b.\u201d","3. [\u201cset\u201d]: Matches one from a set of characters. \u201cset\u201d can be specified as a series of literal characters or as a range of characters. A range of characters is any two characters (including \u2018-\u2019) with a \u2018-\u2019 between them. \u2018\/\u2019 is not a valid character to include in a set. A set of characters will not match \u2018\/\u2019 even if a range which includes \u2018\/\u2019 is specified. Examples includes: \u201c[nd]\u201d matches only \u201cn\u201d or \u201cd\u201d; \u201c[m-x]\u201d matches any character between \u201cm\u201d and \u201cx\u201d inclusive; \u201c[\u2014b]\u201d matches any character between \u201c-\u201d and \u201cb\u201d inclusive (except for \u201c\/\u201d); \u201c[abf-n]\u201d matches \u201ca,\u201d \u201cb,\u201d and any character between \u201cf\u201d and \u201cn\u201d inclusive; and \u201c[a-f-n]\u201d matches any character between \u201ca\u201d and \u201cf\u201d inclusive, \u201c-,\u201d or \u201cn.\u201d The second \u201c-\u201d is interpreted literally because the \u201cf\u201d preceding it is already part of a range.","4. {\u201cpattern1,\u201d \u201cpattern2,\u201d . . . }: Matches one from a set of patterns. The patterns inside the braces may themselves include any other special characters except for braces (sets of patterns may not be nested). Examples includes: \u201ca{ab,bc}b\u201d matches \u201caabb\u201d and \u201cabcb\u201d; \u201ca{x*y,y?x}b\u201d matches \u201caxyb,\u201d \u201caxabayb,\u201d \u201cayaxb,\u201d etc.","5. \u201c\/ . . . \/\u201d: Matches any sequence of one or more characters that starts and ends with the \u2018\/\u2019 character. Examples includes: \u201c\/ . . . \/index.html\u201d matches \u201c\/index.html,\u201d \u201c\/oblix\/index.html,\u201d and \u201c\/oblix\/sales\/index.html,\u201d but not \u201cindex.html,\u201d \u201cxyzindex.html,\u201d or \u201cxyz\/index.html\u201d; and \u201c\/oblix\/ . . . \/*.html\u201d matches \u201c\/oblix\/index.html,\u201d \u201c\/oblix\/sales\/order.html,\u201d etc.","6. \u201c\\\u201d: Any character preceded by a backslash matches itself. Backslash is used to turn off special treatment of special characters. Examples include \u201cabc\\*d\u201d only matches \u201cabc*d\u201d; and \u201cabc\\\\d\u201d only matches \u201cabc\\d.\u201d","To increase the speed of pattern matching, the system tries to do some work up front. When Access Server  loads a pattern, it creates an object. This object's constructor \u201ccompiles\u201d the pattern. This compiling is essentially building a simple state machine from one pattern to other, i.e., it creates a chain of \u201cglob nodes.\u201d Each glob node consists of either one pattern or a node set. For example, consider pattern: \/ . . . \/abc*pqr{uv,xy*}.","The chain would look like:",{"@attributes":{"id":"p-0430","num":"0000"},"ul":{"@attributes":{"id":"ul0015","list-style":"none"},"li":{"@attributes":{"id":"ul0015-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0016","list-style":"none"},"li":"node(\u201c\/ . . . \/\u201d)--->node(\u201cabc\u201d)--->node(\u201c*\u201d)--->node(\u201cpqr\u201d)--->nodeset(node(\u201cuv\u201d), (node(\u201cxy\u201d)--->node(\u201c*\u201d)))"}}}},"Once the chain is constructed, it is used to match a resource URL to the pattern. Each node or node set in this chain takes a pointer to a string, walks it and decides if it matches the pattern held by the node. In doing so, it also moves this pointer further up in the string. For example, when the system gets a URL \u201c\/1\/3\/abcdepqrxyz,\u201d the system takes this string and starts walking the chain. Below is an example of evaluation at each node\/node set and pointer (*p) in the string. Note that the original string is not modified. To begin with lets assume that the pointer points to the beginning of the string: *p->\u201c\/1\/3\/abcdepqrxyz.\u201d:\n\n","At any point, if the system finds a node that does not match its string, the system stops processing and concludes that the string does not match the pattern. For example, a URL \u201c\/1\/3\/dddddd\u201d will clear step 1 above, but will fail step 2, so the matching stops after step 2.","Referring to , in step , Access Server  retrieves the policy information from a policy domain cache, which cache's data from the directory server. The policy information can include one or more of the following: a URL absolute path, a query string, and zero or more query variables. In step , Access Server  determines whether the requested resource matches the policy resource type. If the resource type does not match, Access Server  skips to step . However, if the resource type does match, Access Server  proceeds to step . In step , Access Server  determines whether the operation used to request the resource matches a policy operation type. If the operation type does not match, Access Server  skips to step . If the operation type does match, Access Server  proceeds to step .","In step , the policy URL absolute path, query variables, and query strings are broken up into various nodes, as described above. In step , the various nodes are stored. Access Server  accesses the requested resource URL in step . In step , the first node of the policy URL is considered by Access Server . In step , Access Server  considers whether the considered node matches the resource URL, as described above. If the first node does not match, then the entire policy will not match (step ). If the node does match the resource URL, or if there is no nodes for the policy, then in step  it is determined whether there are any more nodes to consider. If more nodes remain to be considered, then in step  the next node is considered and the method loops back to step . If there are no more nodes (step ), the query string for the policy is compared to the query string of the resource URL in step . If the query string for the policy exactly matches the query string for the resource URL, or if there is no query string for the policy, then the method continues with step . If the query string for the policy does not match the query string for the resource URL, then the resource URL does not match and is not associated with the policy (step ).","In step , it is determined whether there are any query variables to consider that have not already been considered. If there are query variables to consider, then the next query variable is accessed in step . The accessed query variable is searched for in the resource URL in step . If the query variable is found in the resource URL and the value for the query variable matches the stored value query variable in for the policy (step ), then the method continues at step ; otherwise, Access Server  proceeds to step . The purpose of steps , , , and  is to determine whether each of the query variables (and associated values) defined for a policy are found, in any order, in the resource URL. If all of the query variables are in the URL with the appropriate values, than there is a match (step ). In one embodiment, the query string and the query variables are in the portion of the URL following the question mark.","If, in step , a match is not found, then it is determined whether a match may still be possible using POST data. In one embodiment, resources are mapped to policies by matching POST data submitted with resource requests. Thus, different policies can be associated with a given resource, depending on the contents of the POST data. For example, a user may request a resource during the course of submitting an online form containing POST data. Applicable policies can be mapped on the basis of POST data added to the policy. In step , Access Server  determines whether the policy operation type is an HTTP POST request. If not, then there is no match (step ). However, if the operation type is an HTTP POST request, then Access Server  proceeds to step  where Access Server  requests and receives the POST data from Web Gate . In one embodiment, Web Gate  transmits a flag with all POST requests forwarded to Access Server . When POST data is transmitted with an HTTP POST request, the flag is set. If no POST data is transmitted, then the flag is not set. In step , Access Server  evaluates whether the POST data received in step  matches the POST data required by the policy to achieve a match. If the POST data matches, then the method proceeds to step . Otherwise, the method proceeds to step .","An Internet domain can reside on a single Web Server, or be distributed across multiple Web Servers. In addition, multiple Internet domains can reside on a single Web Server, or can be distributed across multiple Web Servers. In accordance with the present invention, the Access System allows a user to satisfy the authentication requirements of a plurality of domains and\/or Web Servers by performing a single authentication.","In the simplest case, all of an e-business host company's Web Servers will be in the same domain (i.e. oblix.com). When a user successfully authenticates at one of the Web Servers, the Web Gate running on the authenticating Web Server causes the Web Server to return an encrypted cookie, indicating a successful authentication. Subsequent requests by the browser to the domain will pass this cookie (assuming the cookie applies to the requested URL), proving the user's identity; therefore, further authentications are unnecessary.","In a more complex case, an e-business host company's web presence incorporates associated web sites whose Web Servers have names in multiple domains. In such a multiple domain case, each of the associated portal Web Servers use a Web Gate plug-in configured to redirect user authentication exchanges to the e-business host's designated web log-in Web Server. The user is then authenticated at the e-business host's web log-in server, and an encrypted cookie is issued for the e-business host's domain to the user's browser. The user's browser is then redirected back to the original associated portal's site where the Web Gate creates a new cookie for the associated portal's domain and returns it to the user's browser.","As a result, the user is transparently authenticated in both the original associated portal's domain and the e-business host's domain. The process is transparently performed for each different associated portal that a user may visit during a session. The present invention's associated portal support easily supports single Web Servers having multiple DNS names in multiple domains, and\/or multiple network addresses. In accordance with the present invention, this multiple domain authentication enables \u201cstaging\u201d of web sites. For example, a new edition of a web site can be deployed on a separate set of servers, and then mapped to policy domains protected by the present invention by simply updating the policy domain's host ID's.",{"@attributes":{"id":"p-0441","num":"0487"},"figref":"FIG. 70","b":["2920","2922","2926","2922","36","2924","2926"]},"In step , the system discerns whether the authentication challenge scheme retrieved calls for basic, form, certificate, or no authentication. If the challenge scheme indicates basic authentication, then the method proceeds to step  and performs basic authentication. If the challenge scheme indicates form authentication, then the method proceeds to step  and performs form authentication. If the challenge scheme indicates certificate authentication, then the method proceeds to step  and performs certificate authentication. If the challenge scheme indicates that no authentication is required (step ), then the user is not challenged, authentication is not performed.",{"@attributes":{"id":"p-0443","num":"0489"},"figref":["FIG. 71","FIG. 65"],"b":["3150","28","12","2580","3150","28","36","28","34","3150","3150"]},"In one embodiment, the information stored by cookie  includes: (1) the authentication level  of the authentication scheme used to create the cookie, (2) the user ID  of the authenticated user, (3) the IP address  of the authenticated user, and (4) session start time  identifying the time at which cookie  was created. If the time elapsed since the session start time  exceeds a maximum session time, the cookie will become invalid. Idle start time  is also stored, which identifies the time when the previous HTTP request for a protected resource was made in which cookie  was passed. If the time elapsed since the idle start time  exceeds a maximum idle time, the cookie will become invalid. Both of these time limits force users to re-authenticate if they have left a session unattended for longer than the maximum session or idle times. In one embodiment, user ID  stores the distinguished name for the authenticated user.","Cookie  also stores a secured hash  of information , , , , and . In one embodiment of the present invention, secured hash  is created using an MD5 hashing algorithm. Most Internet browsers cache a user's supplied authentication information during basic and certificate authentication challenge methods, and then transparently re-send the information upon receiving an authentication challenge from a Web Server. In one embodiment, an administrator can enable a form authentication challenge method requiring end users to re-authenticate upon expiration of the maximum session or maximum idle time limits.",{"@attributes":{"id":"p-0446","num":"0492"},"figref":"FIG. 72","b":["3194","34","34","3196","34","36","3198","34","3196","34","3200"]},"If the authorization rule is satisfied in step , Access Server  determines whether the identity profile attributes for the user are found in a user profile cache (step ). If so, Access Server  proceeds to step . If not, Access Server  retrieves the attributes of the current user (step ), and communicates the authorization success actions and attributes to Web Gate  (step ).","If the authorization rule is not satisfied (step ), then Access Server  determines whether more authorization rules remain to be evaluated (step ). If more rules remain, the next rule is read (step ) and evaluated (step ). If no more rules remain, Access Server  determines whether the attributes for the user is found in the user profile cache (step ). If so, Access Server  proceeds to step . If not, Access Server  retrieves the attributes of the current user (step ), and communicates the authorization success actions and attributes to Web Gate  (step ).",{"@attributes":{"id":"p-0449","num":"0495"},"figref":"FIG. 73","b":["36","3280","34","36","34","3282","3284","34","3292","34","3286","34","3288","3284","3286","34","3294","3284","34","3292","3280"]},{"@attributes":{"id":"p-0450","num":"0496"},"figref":["FIG. 74","FIG. 72","FIG. 74"],"b":["3200","3320","3324","3320","34","3322"]},"If the resource request does not employ a POST request method (or if POST data is not enabled to be used for authorization), then Access Server  proceeds to step . If specific users are defined (by distinguished name) in the authorization rule, Access Server  evaluates whether the distinguished name of the authenticated user matches the distinguished name(s) called for by the authorization rule (step ). If specific groups are defined in the authorization rule (step ), Access Server  evaluates whether the authenticated user is a member of the groups identified in the authorization rule (step ). If specific roles are defined in the authorization rule (step ), then Access Server  evaluates whether the role of the authenticated user matches the role called for by the authorization rule (step ). If specific LDAP rules are defined in the authorization rule (step ), Access Server  evaluates whether the attributes of the authenticated user (and\/or other data) satisfy the LDAP rule of the authorization rule (step ). In one embodiment, the result of the LDAP rule evaluation in step  is cached. If specific IP addresses are defined in the authorization rule (step ), Access Server  evaluates whether the IP address of the authenticated user matches the IP address called for by the authorization rule (step ). If a successful match is found at any point (steps , , , , and ), the authorization is successful (step ). If no matches are found, authorization is unsuccessful (step ). In some embodiments, authorization is only successful if multiple matches are found. For example, a user must have the appropriate rule, be a member of the appropriate group and have an appropriate IP address.","More details of various processes for authenticating and authorizing, including using an application programinterface, can be found in U.S. patent application Ser. No. 09\/814,091, \u201cAccess System Interface,\u201d filed on Mar. 21, 2001, Charles W. Knouse and Minoo Gupta (\u201c'091 application\u201d), which in its entirety is incorporated herein by reference. Specifically, FIGS. 14-56 of the '091 application describe the details of one set of implementations for authenticating and authorizing. FIGS. 58-62 of the '091 application describe a set of embodiments that use an application program interface for accessing the system. The present invention can make use of the authentication and\/or authorization technology described in the '091 patent or various other methods of authentication and\/or authorization.","The foregoing detailed description of the invention has been presented for purposes of illustration and description. It is not intended to be exhaustive or to limit the invention to the precise form disclosed. Many modifications and variations are possible in light of the above teaching. The described embodiments were chosen in order to best explain the principles of the invention and its practical application to thereby enable others skilled in the art to best utilize the invention in various embodiments and with various modifications as are suited to the particular use contemplated. It is intended that the scope of the invention be defined by the claims appended hereto."],"BRFSUM":[{},{}],"heading":["COPYRIGHT NOTICE","CROSS-REFERENCE TO RELATED APPLICATIONS","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION"],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 13"},{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 14"},{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 15"},{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 16"},{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIG. 17"},{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIG. 18"},{"@attributes":{"id":"p-0038","num":"0037"},"figref":"FIG. 19"},{"@attributes":{"id":"p-0039","num":"0038"},"figref":"FIG. 20"},{"@attributes":{"id":"p-0040","num":"0039"},"figref":"FIG. 21"},{"@attributes":{"id":"p-0041","num":"0040"},"figref":"FIG. 22"},{"@attributes":{"id":"p-0042","num":"0041"},"figref":"FIG. 23"},{"@attributes":{"id":"p-0043","num":"0042"},"figref":"FIG. 24"},{"@attributes":{"id":"p-0044","num":"0043"},"figref":"FIG. 25"},{"@attributes":{"id":"p-0045","num":"0044"},"figref":"FIG. 26"},{"@attributes":{"id":"p-0046","num":"0045"},"figref":"FIG. 27"},{"@attributes":{"id":"p-0047","num":"0046"},"figref":"FIG. 28"},{"@attributes":{"id":"p-0048","num":"0047"},"figref":"FIG. 29"},{"@attributes":{"id":"p-0049","num":"0048"},"figref":"FIG. 30"},{"@attributes":{"id":"p-0050","num":"0049"},"figref":"FIG. 31"},{"@attributes":{"id":"p-0051","num":"0050"},"figref":"FIG. 32"},{"@attributes":{"id":"p-0052","num":"0051"},"figref":"FIG. 33"},{"@attributes":{"id":"p-0053","num":"0052"},"figref":"FIG. 34"},{"@attributes":{"id":"p-0054","num":"0053"},"figref":"FIG. 35"},{"@attributes":{"id":"p-0055","num":"0054"},"figref":"FIG. 36"},{"@attributes":{"id":"p-0056","num":"0055"},"figref":"FIG. 37"},{"@attributes":{"id":"p-0057","num":"0056"},"figref":"FIG. 38"},{"@attributes":{"id":"p-0058","num":"0057"},"figref":"FIG. 39"},{"@attributes":{"id":"p-0059","num":"0058"},"figref":"FIG. 40"},{"@attributes":{"id":"p-0060","num":"0059"},"figref":"FIG. 41"},{"@attributes":{"id":"p-0061","num":"0060"},"figref":"FIG. 42"},{"@attributes":{"id":"p-0062","num":"0061"},"figref":"FIG. 43"},{"@attributes":{"id":"p-0063","num":"0062"},"figref":"FIG. 44"},{"@attributes":{"id":"p-0064","num":"0063"},"figref":"FIG. 45"},{"@attributes":{"id":"p-0065","num":"0064"},"figref":"FIG. 46"},{"@attributes":{"id":"p-0066","num":"0065"},"figref":"FIG. 47"},{"@attributes":{"id":"p-0067","num":"0066"},"figref":"FIG. 48"},{"@attributes":{"id":"p-0068","num":"0067"},"figref":"FIG. 49"},{"@attributes":{"id":"p-0069","num":"0068"},"figref":"FIG. 50"},{"@attributes":{"id":"p-0070","num":"0069"},"figref":"FIG. 51"},{"@attributes":{"id":"p-0071","num":"0070"},"figref":"FIG. 52"},{"@attributes":{"id":"p-0072","num":"0071"},"figref":"FIG. 53"},{"@attributes":{"id":"p-0073","num":"0072"},"figref":"FIG. 54"},{"@attributes":{"id":"p-0074","num":"0073"},"figref":"FIG. 55"},{"@attributes":{"id":"p-0075","num":"0074"},"figref":"FIG. 56"},{"@attributes":{"id":"p-0076","num":"0075"},"figref":"FIG. 57"},{"@attributes":{"id":"p-0077","num":"0076"},"figref":"FIG. 58"},{"@attributes":{"id":"p-0078","num":"0077"},"figref":"FIG. 59"},{"@attributes":{"id":"p-0079","num":"0078"},"figref":"FIG. 59A"},{"@attributes":{"id":"p-0080","num":"0079"},"figref":"FIG. 59B"},{"@attributes":{"id":"p-0081","num":"0080"},"figref":"FIG. 59C"},{"@attributes":{"id":"p-0082","num":"0081"},"figref":"FIG. 60"},{"@attributes":{"id":"p-0083","num":"0082"},"figref":"FIG. 61"},{"@attributes":{"id":"p-0084","num":"0083"},"figref":"FIG. 62"},{"@attributes":{"id":"p-0085","num":"0084"},"figref":"FIG. 63"},{"@attributes":{"id":"p-0086","num":"0085"},"figref":"FIG. 64"},{"@attributes":{"id":"p-0087","num":"0086"},"figref":"FIG. 65"},{"@attributes":{"id":"p-0088","num":"0087"},"figref":"FIG. 66"},{"@attributes":{"id":"p-0089","num":"0088"},"figref":"FIG. 67"},{"@attributes":{"id":"p-0090","num":"0089"},"figref":"FIG. 68"},{"@attributes":{"id":"p-0091","num":"0090"},"figref":"FIG. 69"},{"@attributes":{"id":"p-0092","num":"0091"},"figref":"FIG. 70"},{"@attributes":{"id":"p-0093","num":"0092"},"figref":"FIG. 71"},{"@attributes":{"id":"p-0094","num":"0093"},"figref":"FIG. 72"},{"@attributes":{"id":"p-0095","num":"0094"},"figref":"FIG. 73"},{"@attributes":{"id":"p-0096","num":"0095"},"figref":"FIG. 74"}]},"DETDESC":[{},{}]}
