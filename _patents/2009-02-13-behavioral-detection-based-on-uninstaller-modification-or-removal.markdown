---
title: Behavioral detection based on uninstaller modification or removal
abstract: To evade heuristic detection, malware is often designed to trick users into installing the malware by being packaged in a standard installer known to the user's computer for typically installing legitimate software. To prevent removal of the malware, the malware modifies or removes its uninstaller. A security module manages this type of evasion technique by monitoring and detecting installations performed on a computer. The module detects attempts to remove or modify the uninstaller for the application to render the uninstaller incapable of uninstalling the application. The module can intercept and block such attempts, and then analyze the application for malicious code. Where the application is determined to be malware, the module prevents malicious activity. The module can also use the malware's own uninstaller to uninstall the malware from the computer.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08099784&OS=08099784&RS=08099784
owner: Symantec Corporation
number: 08099784
owner_city: Mountain View
owner_country: US
publication_date: 20090213
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","DISCLOSURE OF INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS"],"p":["1. Field of the Invention","This invention pertains in general to computer security, and more specifically to detecting malicious code based on its behavior relating to deletion or modification of its uninstallation module.","2. Description of the Related Art","Computer systems are continually threatened by a risk of attack from malicious computer code, also known as \u201cmalware.\u201d Malware threats include computer viruses, worms, Trojan horse programs, spyware, adware, crimeware, and phishing web sites. Malicious code can spread through a variety of different routes. For example, malicious code can spread when a user inserts a disk or other infected medium into a computer system. In a network-based attack, malicious code can be transmitted to the computer as an executable program in an attachment to an electronic message. In this case, the malicious code can attack the computer when the user clicks on the attachment, or the attachment might open automatically when the user reads or previews the electronic message. In addition, malware can access and cause damage to a user's computer when a user installs new programs that are infected.","Given all of the different types of malware and mechanisms for gaining access to and infecting computers, a multitude of different detection techniques must be designed and constantly updated to protect computers today. Antivirus or security software on the computer can use techniques such as signature scanning and behavior monitoring heuristics to detect the malware. For example, various types of heuristic detection can be used to detect malware behavior where a user has installed a potentially infected application. Before damage can be done to the user's computer, the malware can be promptly removed or disarmed.","With the many detection techniques instituted regularly, the designers of malware are constantly evolving new methods for eluding detection. For example, malware may be designed to evade heuristic detection and to trick users into installing the malware by being packaged in a standard installer. Since the installer is known to the user's computer for typically installing legitimate software, the malware and its installation package is not detected. One example of such an evasion technique has been seen currently where a malicious executable file gains access to a computer through one of the mechanisms described above (via disk, email, etc.). The executable file stores a downloader (e.g., a VISUAL BASIC\u00ae downloader) that downloads an installation package recognized by the computer as a standard installer. Since a standard installer is used for the installation, the user recognizes the installation process as normal and unknowingly agrees to the installation of the malware. Finally, once installed and able to run on the computer, the malware deletes the uninstaller so that the user cannot later uninstall the malware. Other examples of this type of detection evasion are commonly seen, generally having similar features in that a known installer is used to trick the user into installing malware, and the malware then uninstalls or damages the uninstaller to prevent malware removal.","Thus, there is needed a system and method for detecting the installation of these types of malware designed to evade detection using a standard installer, and to remove such malware from the computer.","The above and other needs are met by a method, computer-implemented system, and computer program product in which a security module prevents malicious code from performing malicious activity on a computer by detecting an attempt by the malicious code to remove or modify an uninstaller. An embodiment of the method comprises monitoring installation actions performed to install applications on a computer. The method further includes detecting an installation action being performed to install an application on the computer, where the installation action executes an installer that installs both the application and an uninstaller for uninstalling the application. The method also includes detecting an attempt to remove or modify the uninstaller to render the uninstaller incapable of uninstalling the application. In one embodiment, the method includes intercepting and blocking of the attempt to remove or modify the uninstaller for analysis of the application. In addition, the method comprises analyzing the application for the presence of malicious code responsive to detecting an attempt to remove or modify the uninstaller, and determining that the application being installed on the computer comprises malicious code responsive to the analysis. In one embodiment, the method includes utilizing the uninstaller for the application infected with malicious code to uninstall the application. Similarly, an embodiment of the computer program product comprises a computer-readable storage medium storing executable computer program instructions for performing these steps.","In an embodiment of the system, a monitoring module monitors installation actions performed to install applications on a computer. An installation detection module detects an installation action being performed to install an application on the computer, where the installation action executes an installer that installs the application and installs an uninstaller for uninstalling the application. The installation detection module further detects an attempt to remove or modify the uninstaller to render the uninstaller incapable of uninstalling the application. In one embodiment, the system includes an interception module for intercepting and blocking the attempt to remove or modify the uninstaller. In addition, an analysis module analyzes the application for the presence of malicious code responsive to the detection of an attempt to remove or modify the uninstaller, and a malware management module determines that the application being installed on the computer comprises malicious code responsive to the analysis. In one embodiment, the malware management module is further configured for utilizing the uninstaller for the application infected with malicious code to uninstall the application. The system can also include a computer-readable storage medium that stores these executable software modules, and a processor that executes the software modules stored by the computer-readable storage medium.","The features and advantages described in this disclosure and in the following detailed description are not all-inclusive, and particularly, many additional features and advantages will be apparent to one of ordinary skill in the relevant art in view of the drawings, specification, and claims hereof. Moreover, it should be noted that the language used in the specification has been principally selected for readability and instructional purposes, and may not have been selected to delineate or circumscribe the inventive subject matter, resort to the claims being necessary to determine such inventive subject matter.","The figures depict an embodiment of the present invention for purposes of illustration only. One skilled in the art will readily recognize from the following description that alternative embodiments of the structures and methods illustrated herein may be employed without departing from the principles of the invention described herein.",{"@attributes":{"id":"p-0018","num":"0017"},"figref":["FIG. 1","FIG. 1","FIG. 1"],"b":["100","116","110","116","110","100","110","116","110","112"]},"The server  serves information or content to clients  via the network . In one embodiment, the server  is located at a website provided by SYMANTEC CORPORATION, although the server can also be provided by another entity. The server  can include a database storing information and a web server for interacting with clients . The server  can send information stored in the database, such as installation packages including applications or updates to applications for installation on the computer, across the network  to the client computers .","The clients  are computers or other electronic devices used by one or more users  that can interact with the server  or other clients . The clients , for example, can be personal computers executing a web browser that allows the user to browse and search for information available at a website associated with the server. In other embodiments, the clients  are network-capable devices other than a computer, such as a personal digital assistant (PDA), a mobile telephone, a pager, a television \u201cset-top box,\u201d etc. The client computers  preferably execute an operating system (e.g., LINUX\u00ae, one of the versions of MICROSOFT WINDOWS\u00ae, and PALM OS\u00ae), which controls the operation of the computer system, and execute one or more application programs. Other entities besides the user can also download information via the network . Considering the example given above in which a malicious executable file has gained access to a client computer  (e.g., through transmission via email, via USB key, etc.) and the malicious file downloads malware disguised in a standard installation package, the malware can be provided to the client  via server . In this case, the server  may be managed by a malicious entity.","The network  enables communications among the entities connected to it. In one embodiment, the network  is the Internet and uses standard communications technologies and\/or protocols. Thus, the network  can include links using technologies such as Ethernet, 802.11, worldwide interoperability for microwave access (WiMAX), 3G, digital subscriber line (DSL), asynchronous transfer mode (ATM), InfiniBand, PCI Express Advanced Switching, etc. Similarly, the networking protocols used on the network  can include multiprotocol label switching (MPLS), the transmission control protocol\/Internet protocol (TCP\/IP), the User Datagram Protocol (UDP), the hypertext transport protocol (HTTP), the simple mail transfer protocol (SMTP), the file transfer protocol (FTP), etc. The data exchanged over the network  can be represented using technologies and\/or formats including the hypertext markup language (HTML), the extensible markup language (XML), etc. In addition, all or some of links can be encrypted using conventional encryption technologies such as the secure sockets layer (SSL), transport layer security (TLS), virtual private networks (VPNs), Internet Protocol security (IPsec), etc. In another embodiment, the entities use custom and\/or dedicated data communications technologies instead of, or in addition to, the ones described above.","In the embodiment illustrated in , the client computers  execute a security module  for behaviorally detecting malware. The security module  can be a discrete application program, or the module  can be integrated into another application program or the client computer's  operating system. The security module detects malware designed to evade heuristic detection and to trick users into installing the malware by being packaged in a standard installer. Since the standard installer is recognized as one that typically installs legitimate software, the malware and its installation package can often evade detection. Once the malware is installed and can run on the computer, the malware deletes the uninstaller so that the user cannot later uninstall the malware. The security module prevents malicious action on the computer by detecting the malware based on the malware's behavior in attempting to remove or modify the uninstaller. Since the security module prevented the malware from removing or damaging the uninstaller, the uninstaller is still present on the computer and is still functional. The security module can respond by utilizing the malware's own uninstaller (non-malicious uninstaller from the standard installation package) to uninstall the malware. Thus, the security module can both detect the disguised malware and can remove the malware to prevent it from causing damage to the computer.",{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 2","b":["200","16","110","202","204","204","220","222","206","212","220","218","212","208","210","214","216","222","200","206","202"]},"The storage device  is a computer-readable storage medium such as a hard drive, compact disk read-only memory (CD-ROM), DVD, or a solid-state memory device. The memory  holds instructions and data used by the processor . The pointing device  is a mouse, track ball, or other type of pointing device, and is used in combination with the keyboard  to input data into the computer system . The graphics adapter  displays images and other information on the display device . The network adapter  couples the computer system  to the network . Some embodiments of the computer  have different and\/or other components than those shown in .","The computer  is adapted to execute computer program modules for providing functionality described herein. As used herein, the term \u201cmodule\u201d refers to computer program instructions and other logic used to provide the specified functionality. Thus, a module can be implemented in hardware, firmware, and\/or software. In one embodiment, program modules formed of executable computer program instructions are stored on the storage device , loaded into the memory , and executed by the processor .","The types of computers  used by the entities of  can vary depending upon the embodiment and the processing power used by the entity. For example, a client  that is a mobile telephone typically has limited processing power, a small display , and might lack a pointing device . The server , in contrast, may comprise multiple blade servers working together to provide the functionality described herein.",{"@attributes":{"id":"p-0027","num":"0026"},"figref":["FIG. 3","FIG. 3","FIG. 3"],"b":["120","120","302","304","306","308","310","120","120"]},"The monitoring module  monitors installation actions performed to install applications on a computer. The monitoring module  reviews and keeps track of actions performed on a computer, and monitors for actions relating to the installation of an application. When an installation occurs, certain actions are typically taken or certain events commonly occur. The module  can watch for these types of actions in its monitoring process. For example, the monitoring module can track what application programming interfaces (APIs) are called, what files are being created, modified, stored or deleted, what registry keys are being accessed\/modified, what downloads are occurring, and so forth.","The installation detection module  detects an installation action being performed to install an application on the computer, the installation action executing an installer that installs both the application and an uninstaller for uninstalling the application. Based on the monitoring provided by the monitoring module , the installation detection module  can determine when an application is being installed on the computer. There are various actions that can occur on the computer that would result in detection of an installation action by the module . For example, certain APIs might be called that are typically associated with installations. Specific files or registry keys that are normally associated with installations could be accessed\/modified. The module  might detect that a download is occurring, and determine that it is a download of an application. The module  might detect that the user is responding to dialog boxes relating to an installation. The module  can detect any other action associated with an installation. As an example, when a program is installed, common operations performed include creation or modification of shared and non-shared program files, folders\/directories, WINDOWS\u00ae registry entries (for a computer running WINDOWS\u00ae operating system), configuration file entries, environment variables, links or shortcuts, etc. The module  can watch for these and other similar types of actions including actions involving accessing, creating, or modifying directories known to be associated with uninstallers.","The installation detection module  further detects an attempt to remove or modify the uninstaller to render the uninstaller incapable of uninstalling the application. The attempt to remove or modify the uninstaller indicates that the application being installed on the computer may include malicious code, since the malware may be trying to prevent itself from being later uninstalled by the user if detected. Installation packages typically include both an installer that is used to install the application, and an uninstaller that can be later used to uninstall the application if it is no longer wanted by the user. When the user wishes to uninstall a program, the user can simply initiate the uninstall process, thus causing the uninstaller to remove the program from the computer. However, malware that has managed to get itself installed on a computer by hiding behind a conventional installer (e.g., MICROSOFT\u00ae WINDOWS INSTALLER (MSI), NULLSOFT SCRIPTABLE INSTALL SYSTEM (NSIS), CLICKTEAM, INNOSETUP, WINDOWS INSTALLER XML (WiX), IZPACK, etc.), that is either downloaded with the application or already available on the computer, will want to avoid any possibility of being uninstalled if later detected by the user\/computer. Thus, the malware can remove all or part of the uninstaller to avoid its own uninstallation or can modify the uninstaller in a manner that will prevent it from being able to remove the application or from being able to completely\/successfully remove the application.","Malware can modify an uninstaller in a number of ways, and each of these attempts at modification can be detected by module . The malware can modify the uninstaller to render it incapable of performing any of its uninstallation actions. The malware can also modify the uninstaller so that it can perform some but not all of its uninstallation actions. The modification can prevent the uninstaller from removing any piece of the malware, or can allow the uninstaller to remove some portions of the application, while still preventing it from completely removing the application. The modification can also be designed to damage the uninstaller in some manner so that it cannot function properly. The modification can also be designed so that when the user runs the uninstaller, the uninstaller appears to the user\/computer to actually remove the application, but instead the uninstaller leaves some or all of the malware installed on the computer. For example, the modification could modify the installer's log file that tracks which files were installed and could remove several entries for installed files so the uninstaller appears to run, but not all of the malware files are removed. In one embodiment, the attempt to modify the uninstaller changes it such that it crashes when the user attempts execution. In another embodiment, the attempt to modify the uninstaller is an attempt to modify files, registry entries, etc. that are essential to the operation of the uninstaller in uninstalling the application, rather than a modification of the uninstaller executable.","The module  can detect an attempt to remove\/modify an uninstaller in a number of ways. As one example, the module  can monitor which APIs are being called and can look for access of APIs relating to an installation action. As another example, the module  can monitor modifications to registry keys related to installation actions. In addition, the module  can detect actions associated with the various uninstaller modification examples provided above, including detecting removal\/modification of log\/data files, uninstaller executable code, registry entries required for uninstallation, and other types of actions that could be associated removal or modification of an uninstaller.","In some embodiments, the module  is designed to determine which types of modifications to the uninstaller are valid modifications (e.g., to avoid false positive detections), and which types of modifications are invalid and may be malicious. For example, certain changes to log files or registry entries storing information about names and locations of installed files may be permitted, while others will be determined to be potential malicious actions.","The interception module  intercepts and blocks the attempt to remove or modify the uninstaller. As explained above, module  detects when an attempt is made to remove or modify the uninstaller, and module  intercepts this attempt to prevent the removal\/modification. The interception can occur in a number of manners. For example, the system can hook the APIs that might typically be accessed when making changes to the uninstaller. Once one of these APIs is called, the module  can intercept the call and prevent the action for which the API was called (e.g., a possible malicious change to the uninstaller). As another example, the module  can monitor and detect changes to registry keys associated with the installation\/uninstallation of applications. When a modification is made to such a registry key, the interception module  can intercept this attempt and prevent the change from occurring. The blocking and intercepting of the attempt to remove or modify the uninstaller by the module  allows for analysis of the application by module  described below to determine if it is malware.","The analysis module  analyzes the application for the presence of malicious code. The analysis module  can use one or more methods to analyze the application for malware. For example, the module  can use signature-based detection to compare the contents of the application to a dictionary of virus signatures. As another example, the module  could use heuristic-based detection to identify unknown viruses by searching the application for virus-like instructions or by executing the program in a virtual environment and logging what actions the program performs. Other known malware detection techniques can be used as well.","The analysis module  can perform the analysis by itself or with outside assistance. In one embodiment the analysis module  itself has the capability to analyze the application for malware. In another embodiment, the analysis module  analyzes the application with the help of other programs on the computer. For example, antivirus or other security software on the computer can be used by the module  to analyze the application. The analysis module  can interact with one or more of these other security programs for analysis of the possibly malicious application. The module  can also send the relevant information to the security programs for performing the analysis and the module  can then receive the analysis results.","The malware management module  determines that the application being installed on the computer comprises malicious code responsive to the analysis. Based on the analysis provided via the analysis module , the module  can determine that the application is malware and can prevent the application from performing malicious activity on the computer. The module  can prevent malicious activity in a number of ways. The module  can quarantine the application to prevent it from taking malicious action. The module  can allow other security software to take action to prevent malicious activity. Further, the module  itself or other security programs can conduct additional analysis on the malware, store relevant virus signatures, etc. for future use in detecting such malware.","The malware management module  can also take action to remove the malware from the computer. In one embodiment, the module  utilizes the uninstaller for the application determined to be infected with malicious code to uninstall the application and prevent malicious activity. In this embodiment, the malware's own uninstaller that it was attempting to damage to prevent removal can be used to uninstall the malware. The module  can thus initiate the uninstall process using the malware's own installation package that will result in the uninstallation of the malware. Since the malware used a clean installer\/uninstaller to disguise itself and since the malware was prevented from damaging the uninstaller as intended, the malware's clean uninstaller can be used to completely remove the malicious files from the computer.","Referring now to , there is shown a flowchart illustrating the operation of the security module , according to some embodiments of the present invention. Specifically,  illustrates the steps of the security module  involving monitoring for and detecting installations, and also detecting attempts at uninstaller modification\/removal. It should be understood that these steps are illustrative only. Different embodiments of the security module  may perform the illustrated steps in different orders, omit certain steps, and\/or perform additional steps not shown in  (the same is true for ).","As shown in , the security module  monitors  installation actions performed to install applications on a computer. When an application is installed on a computer, there are a number of common operations that occur. The application often must be \u201cunpacked\u201d from the condensed form in which it is distributed, and the relevant information must be stored in the proper locations. Tests may be run and other configurations or settings of the computer adjusted to ensure the application can operate appropriately. In some cases, the installation simply includes copying of files to the relevant places. Thus, as explained above, the module  can track any of these types of installation actions, including what APIs are called, what files are being created, modified, stored or deleted that might be related to an installation, what registry keys are being accessed\/modified, what downloads are occurring, whether the user is responding to installation dialog boxes, and other common operations associated with application installations.","The module  detects  an installation action being performed to install an application on the computer, where the installation action executes an installer that installs both the application and an uninstaller for uninstalling the application. The module  can thus detect an installation action when one of the actions described above, for which the module  is monitoring, occurs.","The module  detects  an attempt to remove or modify the uninstaller to render the uninstaller incapable of uninstalling the application. The attempt to remove or modify the uninstaller can be an attempt to damage the uninstaller so it cannot completely uninstall the application or to modify files essential to the operation of the uninstaller. The attempt can also take on any of the various other forms described in more detail above. The module  can detect  such an attempt in any of the manners described above, as well. For example, the module  can monitor which APIs are called for an installation action or whether attempts are made to modify registry entries associated with installation or uninstallation.","Referring now to , there is shown a flowchart illustrating the operation of the security module , according to some embodiments of the present invention. Specifically,  illustrates the steps of the security module  involving interception and blocking of attempts to tamper with the uninstaller, analysis of the application, and management of any malware detected.","In one embodiment, the module  intercepts and blocks  the attempt to remove or modify the uninstaller for analysis of the application. Attempts to access or make changes to the uninstaller can thus be stopped before the uninstaller is damaged or removed.","The module  analyzes  the application for the presence of malicious code. The module  can use any of the known techniques for malware analysis and\/or can allow security programs installed on the computer to analyze  the application.","The module  determines  that the application being installed on the computer comprises malicious code in response to the analysis . The module  can respond to the determination accordingly, preventing the application from conducting malicious activity on the computer. In one embodiment, the module  utilizes  the uninstaller for the application determined to be infected with malicious code to uninstall the application and prevent malicious activity.","The above description is included to illustrate the operation of the embodiments and is not meant to limit the scope of the invention. The scope of the invention is to be limited only by the following claims. From the above discussion, many variations will be apparent to one skilled in the relevant art that would yet be encompassed by the spirit and scope of the invention. As used herein any reference to \u201cone embodiment\u201d or \u201can embodiment\u201d means that a particular element, feature, structure, or characteristic described in connection with the embodiment is included in at least one embodiment. The appearances of the phrase \u201cin one embodiment\u201d in various places in the specification are not necessarily all referring to the same embodiment."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 1","b":"100"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 2","b":"200"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 3","b":"120"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 5"}]},"DETDESC":[{},{}]}
