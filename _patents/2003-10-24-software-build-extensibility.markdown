---
title: Software build extensibility
abstract: In a first exemplary media implementation, one or more processor-accessible media include a build provider that is tailored for a particular file type, the build provider adapted to generate code from files corresponding to the particular file type and to contribute the generated code to a compilation. In a second exemplary media implementation, one or more processor-accessible media include processor-executable instructions that, when executed, direct a device to perform actions including: accepting multiple files, each file of the multiple files corresponding to a respective file type and including source code; associating a build provider with each file of the multiple files in accordance with the corresponding respective file type; ascertaining the source code of each file of the multiple files via the associated build provider; and compiling the ascertained source code of each file of the multiple files into an assembly.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07596782&OS=07596782&RS=07596782
owner: Microsoft Corporation
number: 07596782
owner_city: Redmond
owner_country: US
publication_date: 20031024
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["This disclosure relates in general to software build extensibility and in particular, by way of example but not limitation, to a pluggable build architecture that is capable of compiling into an assembly multiple files of arbitrary and\/or expandable types.","Software, whether executing on a general-purpose processor or a specialized processor, significantly impacts many facets of modern life. When software is to be executed expeditiously, it is often supplied to processors in machine code form. However, it is usually far more difficult and time consuming for human programmers to write software in machine code form as compared to a higher-level language such as Fortran, C++, C#, Visual Basic, and so forth.","Consequently, most software is written in a so-called high-level language and then converted, or compiled, into machine code form. The conversion is effectuated with another software program called a compiler. Compilers take one or more files of a single file type and compile them into a program that is in machine code form.","As software proliferates, the number of different types of files increases. Furthermore, the level of actual and expected interoperability, as well as interconnectedness, between and among various hardware environments and software scenarios likewise continues to grow. Accordingly, there is a need for schemes and\/or techniques that can handle different file types as both hardware environments and software scenarios change, grow, and evolve.","In a first exemplary media implementation, one or more processor-accessible media include a build provider that is tailored for a particular file type, the build provider adapted to generate code from files corresponding to the particular file type and to contribute the generated code to a compilation.","In a second exemplary media implementation, one or more processor-accessible media include processor-executable instructions that, when executed, direct a device to perform actions including: accepting multiple files, each file of the multiple files corresponding to a respective file type and including source code; associating a build provider with each file of the multiple files in accordance with the corresponding respective file type; ascertaining the source code of each file of the multiple files via the associated build provider; and compiling the ascertained source code of each file of the multiple files into an assembly.","Other method, system, approach, apparatus, device, media, application programming interface (API), procedure, arrangement, etc. implementations are described herein.",{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 1","b":["110","104","108","112","102","102","104","108","110","112","102","102"]},"As illustrated, three files (), (), and () are compiled. File  () includes code  () and is of a type A A. File  () includes code  () and is of a type B B. File  () includes code  () and is of a type E E. It should be understood that each file  may not physically include its code . However, the source code for each code  is inferable or otherwise derivable from the contents of its file . Although a finite number of files  and types  are illustrated in and\/or indicated by , any number of files  and types  may be involved in a compilation  as orchestrated by software .","File  () of type E E is shown with dashed lines to indicate that it represents an extended file type. In other words, file  () of type E E may be compiled  into assembly  under the control and\/or management of software  even if software  is originally designed and currently exists without direct and\/or specific knowledge of files  of type E E. In fact, files  of type E E may be developed after software  is developed.","In a described implementation, software  provides management and\/or hosting as part of an extensible build architecture. In operation, code  () from file  () of type A A, code  () from file  () of type B B, and code  () from file  () of type E E are jointly compiled  into an assembly . For example, software  may comprise a pluggable build architecture that interfaces with modules assigned to files . These modules may be tailored to the corresponding arbitrary file types  of files  in order to facilitate a compilation  of their code  into a target assembly .",{"@attributes":{"id":"p-0024","num":"0023"},"figref":["FIG. 2","FIG. 1","FIG. 2"],"b":["104","108","1","104","1","2","104","2","3","104","3","4","104","4","4","106","4","108","102","202","204","206","208","104"]},"In a described implementation, build provider interfaces  represent interfaces (e.g., APIs, including methods and\/or properties) for (i) build providers  and (ii) build provider manager  and\/or build provider host . Exemplary build provider interfaces  are described below especially for build provider host  and build providers  with reference to , respectively.","Build provider manager  at least partially manages and\/or controls compilation  directly and indirectly, including by way of build providers  and build provider host . Build provider manager  comprises at least part of a build system. For example, Active Server Pages (ASP) .NET from Microsoft\u00ae Corporation of Redmond, Wash. includes a general build system. Hence, build provider managers  may be implemented for just-in-time (JIT) compiling in a runtime environment, including non-Microsoft\u00ae common language runtimes such as the Java\u2122 programming environment from Sun Microsystems\u00ae. Nevertheless, build provider managers  may alternatively embrace static compilation approaches and other processing environments.","Build provider host  is implemented by build provider manager . A build provider host  is typically instantiated once for each compilation . Each build provider host  provides services to build providers  that are involved in the corresponding compilation .","A respective build provider  is created (e.g., instantiated) for and\/or assigned to each respective file . Build providers  are tailored for and\/or correspond to particular file types . As illustrated, four build providers (), (), (), and () are \u201cplugged into\u201d or interfacing with build provider manager . Build provider () corresponds to type A A, build provider () corresponds to type B B, build provider () corresponds to type E E, and build provider () also corresponds to type A A.","Although file  () and file  () are both of file type A A, each is assigned its own build provider . Hence, as indicated by the double-empty-headed arrows, build provider () is associated with file  (), build provider () is associated with file  (), build provider () is associated with file  (), and build provider () is associated with file  (). Although only four files  and four associated build providers  are illustrated in , any number of such file  and build provider  associations may alternatively participate in a given compilation . Furthermore, any number of files  of extended type E E may be involved.","The exemplary extensible build architecture as illustrated in  provides extensibility for new file types . A described pluggable build architecture implementation comprises software  that enables additions for new build providers  that can be associated with the new file types . Such software  enables the addition of new build providers  via build provider interfaces  of build provider host  and\/or build provider manager .","Consequently, subsequent and\/or outside developers can enable files  of extended file types E to be compiled  by build provider manager  along with files  of previous file types A, B, etc. With a relatively minor amount of coding to produce an appropriate build provider  for extended file type E, developers can enable files of extended file type E to be compiled. Moreover, developers can do so without having to worry about the complicated details surrounding compilation  and the resulting assembly . For example, build provider manager  and\/or a more-encompassing (e.g., runtime) component can handle where the resulting assembly  should and is to live, how assembly  can be cached to disk so that it need not be recompiled every time it is to be used, and so forth.",{"@attributes":{"id":"p-0032","num":"0031"},"figref":["FIG. 3","FIGS. 1 and 2","FIG. 2","FIG. 1"],"b":["300","300","302","308","300","302","308","110"]},"At block , multiple files of different, arbitrary types are accepted. For example, build provider manager  may accept for compilation file  (), file  (), file  (), and file  (). The files may be of one, two, three, or more different file types . For each particular file type , there may be one, two, three, or more different files  of that particular file type . The different, arbitrary file types  may possibly include a new expanded file type E.","Examples of types  include \u201c.cs\u201d (C# or C sharp), \u201c.aspx\u201d (pages), \u201c.ascx\u201d (user controls), \u201c.asmx\u201d (web services), \u201c.ashx\u201d (web handlers), \u201c.wsdl\u201d (web server description language file), \u201c.arb\u201d (arbitrary type), \u201c.ext\u201d (new extended type), and so forth. Although the preceding exemplary file types are indicated by file extension, other implementations may utilize an alternative indication scheme. For example, the file naming schemes for an Apple\u00ae OS, a Unix\u00ae OS, a Linux\u00ae OS, etc. may alternatively be used to indicate file types . Furthermore, file types  may be indicated in manners other than a file-naming scheme (e.g., a different file type attribute, tag, etc.).","At block , a build provider is associated with each respective file of the multiple files according to its corresponding file type. For example, build providers (), (), (), and () may be associated with files  (),  (),  (), and  (), respectively. A one-to-one correspondence may be established in certain implementations between files  and build providers  such that multiple build providers  corresponding to a single file type  are instantiated when multiple files  of the single file type  are accepted. For instance, file  () and file  () are both of type A A, so two build providers  that are tailored for type A A are instantiated (e.g., build provider () and build provider ()).","At block , source code for each of the multiple files is ascertained via the associated build providers. For example, respective build providers  may ascertain the code  of respective associated files . For instance, build provider () ascertains code  () from file  (), build provider () ascertains code  () from file  (), build provider () ascertains code  () from file  (), and build provider () ascertains code  () from file  ().","At block , the ascertained source code of the multiple files is compiled into an assembly. For example, build provider host  (and\/or build provider manager ) may cause code  (), code  (), code  (), and code  () to be compiled  into assembly . Assembly  may be, for example, machine-consumable object code, a dynamic link library or executable file in any general OS environment (e.g., a .dll file or a .exe file, respectively, in a Microsoft\u00ae Windows environment), intermediate language (IL) code that is subsequently JIT compiled in a runtime environment (e.g., a common language runtime (CLR) from any given vendor), some combination thereof, and so forth.",{"@attributes":{"id":"p-0038","num":"0037"},"figref":"FIG. 4","b":["204","402","414","204","402","404","406","408","410","412","414","402","414","204"]},"In a described implementation, interfaces - facilitate actions and\/or communications between build provider host  and multiple build providers , especially with regard to providing services to build providers  during compilation . Get referenced assemblies  returns a collection of one or more assemblies with which build providers  are intended to be compiled. Add assembly reference  adds at least one assembly that can be referenced during compilation . For example, if a particular build provider  needs or prefers a given assembly in order to have the particular code  of its particular file  compiled, then that particular build provider  requests that the given assembly be included in compilation .","Create code file object  creates a file object that is to include new source code for compilation . A build provider  adds new source code  to the file object from an associated file . The new source code can subsequently be included in compilation  from the code file object. An example of a suitable code file object mechanism is TextWriter of Microsoft\u00ae Corporation's ASP .NET. With a TextWriter implemenation, build provider  writes the new source code to a file using the returned TextWriter. Another example of a suitable code file object mechanism is StringWriter of Java\u2122 from Sun Microsystem\u00ae.","Get code file path  returns a path to a file whose source code is to be included in compilation . In a described implementation, the path is a physical file path; however, the path may alternatively employ a virtual or some other mechanism. Additionally, the file is typically actually created by build provider , instead of build provider host . After creation of the returned file, build provider  adds to it the new source code  of an associated file  for compilation . In an environment that utilizes file extensions, the source file is given the correct extension for the designated language, as is addressed further herein below.","Get code object model provider  returns a code object model provider that can be used by build provider  to generate a code compile unit. A code compile unit is a high-level, language independent expression of a coding construct. The code object model provider is a mechanism for describing the coding in a language independent manner as a code compile unit. An example of such a code object model provider\/code compile unit paradigm is the CodeDOM aspect of Microsoft\u00ae Corporation's ASP NET. With CodeDOM, the employed mechanism for expressing the desired coding construct is an object tree structure.","Add code compile unit  enables a build provider  to add a code compile unit to a compilation . Add code compile unit  is typically used after get code object model provider  in conjunction with a code compile unit that has been generated by the acquired code object model provider. Add code compile unit  may therefore be used in lieu of create code file object  or get code file path  by a build provider  that is attempting to contribute its code  of its associated file  to compilation  in a language-independent manner. A code object model provider\/code compile unit paradigm is described further below with reference to , especially with regard to blocks , , and \u2032\u2033.","Create embedded resource  creates a new resource that is to be added to compilation . The calling build provider  can write the desired resource using a returned stream, for example. Examples of such resources that build providers  may wish to include in compilation  are: localizable resources, text localized to different languages, an image file, and so forth.",{"@attributes":{"id":"p-0045","num":"0044"},"figref":"FIG. 5","b":["208","502","506","208","502","504","506","502","506","208"]},"In a described implementation, interfaces - facilitate actions and\/or communications between build providers  and build provider host , especially with regard to participation by build providers  in compilation . Usable code language  returns a language that build provider  uses, or it can return null if build provider  can use any language (i.e., if build provider  is language agnostic).","Generate code  asks build provider  to generate code  of a file  to which it is associated. The generation\/contribution can be effectuated using any of a variety of mechanisms, including those mechanisms (e.g., methods) exposed by build provider host . These mechanisms include (i) create code file object , (ii) get code file path , (iii) get code object model provider \/add code compile unit , (iv) some combination thereof, and so forth.","File path  gets or sets a path to the associated file  that build provider  is responsible for handling during compilation . In a described implementation, the path is a virtual file path; however, the path may alternatively be physical or employ some other file identification mechanism. For a virtual path implementation, a virtual path may map to a physical path, without necessarily having a one-to-one correspondence between the two different kinds of paths.",{"@attributes":{"id":"p-0049","num":"0048"},"figref":["FIGS. 6-9","FIG. 6","FIGS. 1"],"b":["600","204","202","600","602","614","600","2","4","5","8","9"]},{"@attributes":{"id":"p-0050","num":"0049"},"figref":["FIG. 7","FIGS. 1","FIG. 6","FIG. 7"],"b":["700","208","700","704","706","708","710","710","710","712","700","2","4","5","8","9","604","612","704","712"]},{"@attributes":{"id":"p-0051","num":"0050"},"figref":["FIG. 8","FIG. 9","FIG. 8"],"b":["800","104","112","802","800","202","204","202","802"]},"As illustrated, three files  include code . Specifically, file  () includes code  (), file  () includes code  (), and file  () includes code  (). Also, three respective files  are associated with three respective build providers . Specifically, file  () is associated with build provider (), file  () is associated with build provider (), and file  () is associated with build provider (). Although not explicitly shown in  for the sake of clarity, each file  and each associated build provider  correspond to a particular file type  (e.g., as shown in ).","In a described implementation, build provider manager  and\/or build provider host  manage and\/or control compilation . Compilation  entails compiling the source code of code  (), code  (), and code  () into a single target assembly . The files , in which the source code of code  is located, may be of arbitrary and different file formats that are possibly unrelated to each other.","For flowchart  (of ) at block , multiple files are accepted. For example, build provider manager  may accept file  (), file  (), and file  (). As shown in the example of , file  () corresponds to type A A, file  () corresponds to type B B, file  () corresponds to type E E.","At block , an associated build provider is created for each file. For example, with reference to BPR-MDS , build provider manager  may create a respective build provider  for each respective file . For instance, build provider () is created for file  (), build provider () is created for file  (), and build provider () is created for file  (). In a described implementation, BPR-MDS  maps file types  to different types of build providers .","In , BPR-MDS  has multiple entries  in which each entry  includes a particular file type  and a denotation of a build provider  that can handle files  of that particular file type . Specifically, entry () maps file type () to (a denotation of) build provider (), entry () maps file type () to (a denotation of) build provider (), and entry () maps file type () to (a denotation of) build provider (). As indicated by the index \u201cn\u201d, any number of mapping entries  may be included in BPR-MDS .","In certain implementations, such as those in a Microsoft\u00ae Windows\u00ae environment, BPR-MDS  may be realized as a registration portion of a configuration file. Furthermore, each file type  may be indicated by a file extension such as .cs, .aspx, .ascx, .asmx, .ashx, .wsdl, .arb, \u201c.new\/.abc\u201d (for a new type), .ext, and so forth.","Hence, build providers  that are to participate in compilations  are registered in a configuration file. Although a BPR-MDS  may be utilized in other OS environments, an example of a BPR-MDS  as part of a configuration file in a Microsoft\u00ae Windows\u00ae environment follows:\n\n","For flowchart  (of ) at block , a build provider is created. As indicated by the rounded rectangle  and the dashed arrow extending therefrom, build provider  is created (e.g., instantiated) prior to the actions of blocks - being performed by build provider .","At block , each build provider is given a path to its associated file. For example a path (e.g., a physical or virtual path) for file  () is given to build provider (), a path for file  () is given to build provider (), and a path for file  () is given to build provider (). These paths may be given by build provider manager  and\/or build provider host  to build providers (, , and ) by calling their respective file path 506 interfaces. At block , each build provider receives the path of its associated file. For example, respective build providers (, , and ) receive paths for their respective files (, , and ) via their respective file path 506 interfaces.","At block , each build provider is asked for its usable language. For example, build provider manager  and\/or build provider host  invoke the usable code language 502 method of each build provider (, , and ). In response, at block , each build provider indicates its usable code language. Each build provider  can use a specific language for the source code  of its associated file , or it can use any language. Thus, each build provider  can indicate a specific language (e.g., C#, Visual Basic, etc.) or that it does not care which language is used (e.g., that it is language agnostic by returning null). The language indicated by build providers  is designated as the language that is to be used for compilation .","In a described implementation, in order to compile  the various codes  into one assembly , each build provider  has the same language or is language agnostic. In other words, assembly  is formed from codes  that are from the same language or are language independent (e.g., under a get code object model provider \/add code compile unit 412 mechanism). Thus, for a group of codes  that is to be compiled  into an assembly , each code  of the group is all the same language, all language agnostic, or all the same language with some that are language agnostic. If all build providers  for a given grouping are language agnostic, then a default language is used as the designated language.","At some time after respective build providers  are associated with respective files  (at blocks  and ), build providers  may optionally call the get referenced assemblies 402 interface of build provider host . The assemblies to be referenced in compilation  are returned to build providers . Based on each build provider's  associated file , for example, each build provider  determines whether an additional assembly or assemblies may be required or preferred when compiling the code  included as part of its associated file . If so, the relevant build providers  call the add assembly reference 404 interface of build provider host  to have such assembly or assemblies added. Of course, a particular assembly may be added once by build provider host  regardless of the number of relevant build providers  that call add assembly reference  for the particular assembly. This add assembly reference 404 interface can be especially helpful when classes are being extended in a given compilation .","At block , each build provider is requested to contribute code. For example, build provider host  may make a call to the generate code 504 interface of each build provider (), (), and () (e.g., in a sequential fashion). As indicated by blocks \u2032, \u2033, and \u2032\u2033, build providers  may contribute code  of their respective files  in any of three different exemplary manners\/mechanisms for compilation . It should be noted that a given build provider  can contribute code  more than once, either by using the same contribution manner multiple times or by using an arbitrary combination of any two or more of the three described (or other) contribution manners. The three contribution manners of a described implementation are shown at blocks , , and  of . As described further below, block  relates to block \u2032, block  relates to block \u2033, and block  relates to block \u2032\u2033.","Generally, each build provider  is associated with a file  of a type  to which each corresponds. Consequently, a particular build provider  of a particular type  is adapted to comprehend, parse, dissect, etc. an associated particular file  of the particular type , and it is therefore capable of generating the code  from the associated particular file . It should be noted that code  may be contiguous or discontinuous, comprised of one or more modules, intermixed with other non-code portions, directly or indirectly derived from non-code portion(s), and so forth.","Depending on the format of the particular type  and\/or the capabilities\/configuration of the particular build provider , the generated code  that is to be contributed to compilation  may or may not be the entirety of the code that is included as part of the particular file . For example, a section of code may be commented out, a particular code portion may not be applicable to compilation  and\/or the target assembly , and so forth. Furthermore, build providers  may have the ability to generate (and therefore contribute) source code from non-code portion(s) of files . Thus, source code to be contributed to a compilation  is generated based on a particular build provider  and a particular associated file  (or more generally from files  of the same corresponding type  as the particular build provider ).","At block \u2032, source code is written to an object. For example, build provider () may cause code  () of file  () to be written to a code file object at block  in order to contribute code  () to compilation . For instance, build provider () may call the create code file object 406 interface of build provider host  in order to acquire a code file object to which code  () may be added.","At block \u2033, source code is written to a stipulated path. For example, build provider () may write code  () of file  () to a file at a location stipulated by a path acquired from build provider host  at block  in order to contribute code  () to compilation . For instance, build provider () may call the get code file path 408 interface of build provider host  in order to acquire the path to a file to be created by build provider () to which code  () is added.","At block \u2032\u2033, a code object model (COM) provider is requested and the code object model provider is used to generate a code compile unit. For example, build provider () may request a code object model provider from build provider host , and build provider () may subsequently employ the code object model provider to generate a code compile unit for code  () of file  () at block  in order to contribute code  () to compilation . For instance, build provider () may call the get code object model provider  interface as well as the add code compile unit 412 interface of build provider host  in order to acquire and use a code object model provider.","The code compile unit  for code  () is generated, and may be contributed, as a language-independent structure. In this example, build provider () is language agnostic inasmuch as the language-independent structure may be converted into any desired language. In a described implementation, build provider host  performs or causes to be performed the conversion of the language-independent structure to source code in the designated language for compilation . Alternatively, some other entity, such as build provider manager  or build provider (), may perform this conversion.","As illustrated in , build provider () uses a writable object mechanism for code contribution, build provider () uses a writable file path location mechanism for code contribution, and build provider () uses a code object model provider\/code compile unit mechanism for code contribution. However, any given build provider  may be capable of using any one or more mechanisms for contributing code, optionally including the use of multiple mechanisms in a single compilation .","By way of example, new file types E that correspond to an extended build provider  (e.g., build provider ()) may use a writable object mechanism and\/or a writable file path mechanism, as well as the illustrated code object model provider\/code compile unit mechanism. Likewise, a pre-planned or built-in build provider  (e.g., build providers () and ()) may employ a code object model provider\/code compile unit mechanism. Furthermore, build providers  that are not language-agnostic may use a code object model\/code compile unit mechanism. In such cases, the code object model contains some nodes that are language-specific along with other nodes that are language-agnostic.","At block , zero, one or more resources are submitted. For example, build providers (, , and\/or ) may submit to build provider host  resource(s) for use in compilation . For instance, each relevant build provider  may call the create embedded resource 414 interface of build provider host . At block , resources (including notifications thereof) are received from build providers . For example, build provider host  may receive submitted resources (not explicitly shown in ) from one or more build providers .","At block , code and resources (if any) from multiple build providers are compiled into an assembly. For example, build provider host  may launch a compiler (e.g., a compiler for the designated language) to compile code  () from the writable object of block , code  () from the stipulated file location of block , and code  () from the language-converted code compile unit of block  into target assembly . Compilation  therefore causes assembly  to include and be derived from source code of code  (), code  (), and code  (). This compilation  may be effectuated even when a file type  of a file  that is participating in compilation  is developed after build provider manager  and\/or build provider host  is developed, as well as when files  are unrelated to one another.","The actions, aspects, features, components, etc. of  are illustrated in diagrams that are divided into multiple blocks. However, the order, interconnections, interrelationships, layout, etc. in which  are described and\/or shown is not intended to be construed as a limitation, and any number of the blocks can be modified, combined, rearranged, augmented, omitted, etc. in any manner to implement one or more systems, methods, devices, procedures, media, APIs, apparatuses, arrangements, etc. for software build extensibility. Furthermore, although the description herein includes references to specific implementations (and the exemplary operating environment of ), the illustrated and\/or described implementations can be implemented in any suitable hardware, software, firmware, or combination thereof and using any suitable software architecture(s), source code language(s), code contribution mechanism(s), compiling scheme(s), and so forth.","Exemplary Operating Environment for Computer or Other Device",{"@attributes":{"id":"p-0076","num":"0078"},"figref":"FIG. 10","b":["1000","1000"]},"Exemplary operating environment  is only one example of an environment and is not intended to suggest any limitation as to the scope of use or functionality of the applicable device (including computer, network node, entertainment device, mobile appliance, general electronic device, etc.) architectures. Neither should operating environment  (or the devices thereof) be interpreted as having any dependency or requirement relating to any one or to any combination of components as illustrated in .","Additionally, software build extensibility may be implemented with numerous other general purpose or special purpose device (including computing system) environments or configurations. Examples of well known devices, systems, environments, and\/or configurations that may be suitable for use include, but are not limited to, personal computers, server computers, thin clients, thick clients, personal digital assistants (PDAs) or mobile telephones, watches, hand-held or laptop devices, multiprocessor systems, microprocessor-based systems, set-top boxes, programmable consumer electronics, video game machines, game consoles, portable or handheld gaming units, network PCs, minicomputers, mainframe computers, network nodes, distributed or multi-processing computing environments that include any of the above systems or devices, some combination thereof, and so forth.","Implementations for software build extensibility may be described in the general context of processor-executable instructions. Generally, processor-executable instructions include routines, programs, modules, protocols, objects, interfaces, components, data structures, etc. that perform and\/or enable particular tasks and\/or implement particular abstract data types. Software build extensibility, as described in certain implementations herein, may also be practiced in distributed processing environments where tasks are performed by remotely-linked processing devices that are connected through a communications link and\/or network. Especially but not exclusively in a distributed computing environment, processor-executable instructions may be located in separate storage media, executed by different processors, and\/or propagated over transmission media.","Exemplary operating environment  includes a general-purpose computing device in the form of a computer , which may comprise any (e.g., electronic) device with computing\/processing capabilities. The components of computer  may include, but are not limited to, one or more processors or processing units , a system memory , and a system bus  that couples various system components including processor  to system memory .","Processors  are not limited by the materials from which they are formed or the processing mechanisms employed therein. For example, processors  may be comprised of semiconductor(s) and\/or transistors (e.g., electronic integrated circuits (ICs)). In such a context, processor-executable instructions may be electronically-executable instructions. Alternatively, the mechanisms of or for processors , and thus of or for computer , may include, but are not limited to, quantum computing, optical computing, mechanical computing (e.g., using nanotechnology), and so forth.","System bus  represents one or more of any of many types of wired or wireless bus structures, including a memory bus or memory controller, a point-to-point connection, a switching fabric, a peripheral bus, an accelerated graphics port, and a processor or local bus using any of a variety of bus architectures. By way of example, such architectures may include an Industry Standard Architecture (ISA) bus, a Micro Channel Architecture (MCA) bus, an Enhanced ISA (EISA) bus, a Video Electronics Standards Association (VESA) local bus, a Peripheral Component Interconnects (PCI) bus also known as a Mezzanine bus, some combination thereof, and so forth.","Computer  typically includes a variety of processor-accessible media. Such media may be any available media that is accessible by computer  or another (e.g., electronic) device, and it includes both volatile and non-volatile media, removable and non-removable media, and storage and transmission media.","System memory  includes processor-accessible storage media in the form of volatile memory, such as random access memory (RAM) , and\/or non-volatile memory, such as read only memory (ROM) . A basic input\/output system (BIOS) , containing the basic routines that help to transfer information between elements within computer , such as during start-up, is typically stored in ROM . RAM  typically contains data and\/or program modules\/instructions that are immediately accessible to and\/or being presently operated on by processing unit .","Computer  may also include other removable\/non-removable and\/or volatile\/non-volatile storage media. By way of example,  illustrates a hard disk drive or disk drive array  for reading from and writing to a (typically) non-removable, non-volatile magnetic media (not separately shown); a magnetic disk drive  for reading from and writing to a (typically) removable, non-volatile magnetic disk  (e.g., a \u201cfloppy disk\u201d); and an optical disk drive  for reading from and\/or writing to a (typically) removable, non-volatile optical disk  such as a CD, DVD, or other optical media. Hard disk drive , magnetic disk drive , and optical disk drive  are each connected to system bus  by one or more storage media interfaces . Alternatively, hard disk drive , magnetic disk drive , and optical disk drive  may be connected to system bus  by one or more other separate or combined interfaces (not shown).","The disk drives and their associated processor-accessible media provide non-volatile storage of processor-executable instructions, such as data structures, program modules, and other data for computer . Although exemplary computer  illustrates a hard disk , a removable magnetic disk , and a removable optical disk , it is to be appreciated that other types of processor-accessible media may store instructions that are accessible by a device, such as magnetic cassettes or other magnetic storage devices, flash memory, compact disks (CDs), digital versatile disks (DVDs) or other optical storage, RAM, ROM, electrically-erasable programmable read-only memories (EEPROM), and so forth. Such media may also include so-called special purpose or hard-wired IC chips. In other words, any processor-accessible media may be utilized to realize the storage media of the exemplary operating environment .","Any number of program modules (or other units or sets of instructions\/code) may be stored on hard disk , magnetic disk , optical disk , ROM , and\/or RAM , including by way of general example, an operating system , one or more application programs , other program modules , and program data .","A user may enter commands and\/or information into computer  via input devices such as a keyboard  and a pointing device  (e.g., a \u201cmouse\u201d). Other input devices  (not shown specifically) may include a microphone, joystick, game pad, satellite dish, serial port, scanner, and\/or the like. These and other input devices are connected to processing unit  via input\/output interfaces  that are coupled to system bus . However, input devices and\/or output devices may instead be connected by other interface and bus structures, such as a parallel port, a game port, a universal serial bus (USB) port, an infrared port, an IEEE 1394 (\u201cFirewire\u201d) interface, an IEEE 802.11 wireless interface, a Bluetooth\u00ae wireless interface, and so forth.","A monitor\/view screen  or other type of display device may also be connected to system bus  via an interface, such as a video adapter . Video adapter  (or another component) may be or may include a graphics card for processing graphics-intensive calculations and for handling demanding display requirements. Typically, a graphics card includes a graphics processing unit (GPU), video RAM (VRAM), etc. to facilitate the expeditious display of graphics and performance of graphics operations. In addition to monitor , other output peripheral devices may include components such as speakers (not shown) and a printer , which may be connected to computer  via input\/output interfaces .","Computer  may operate in a networked environment using logical connections to one or more remote computers, such as a remote computing device . By way of example, remote computing device  may be a personal computer, a portable computer (e.g., laptop computer, tablet computer, PDA, mobile station, etc.), a palm or pocket-sized computer, a watch, a gaming device, a server, a router, a network computer, a peer device, another network node, or another device type as listed above, and so forth. However, remote computing device  is illustrated as a portable computer that may include many or all of the elements and features described herein with respect to computer .","Logical connections between computer  and remote computer  are depicted as a local area network (LAN)  and a general wide area network (WAN) . Such networking environments are commonplace in offices, enterprise-wide computer networks, intranets, the Internet, fixed and mobile telephone networks, ad-hoc and infrastructure wireless networks, other wireless networks, gaming networks, some combination thereof, and so forth. Such networks and communications connections are examples of transmission media.","When implemented in a LAN networking environment, computer  is usually connected to LAN  via a network interface or adapter . When implemented in a WAN networking environment, computer  typically includes a modem  or other component for establishing communications over WAN . Modem , which may be internal or external to computer , may be connected to system bus  via input\/output interfaces  or any other appropriate mechanism(s). It is to be appreciated that the illustrated network connections are exemplary and that other manners for establishing communication link(s) between computers  and  may be employed.","In a networked environment, such as that illustrated with operating environment , program modules or other instructions that are depicted relative to computer , or portions thereof, may be fully or partially stored in a remote media storage device. By way of example, remote application programs  reside on a memory component of remote computer  but may be usable or otherwise accessible via computer . Also, for purposes of illustration, application programs  and other processor-executable instructions such as operating system  are illustrated herein as discrete blocks, but it is recognized that such programs, components, and other instructions reside at various times in different storage components of computing device  (and\/or remote computing device ) and are executed by processor(s)  of computer  (and\/or those of remote computing device ).","Exemplary Descriptions for BuildProviderHost and BuildProvider Classes","Two exemplary classes involved in a described architecture are: BuildProviderHost and BuildProvider. BuildProviderHost may be implemented, for example, by the ASP.NET build system from Microsoft\u00ae Corporation. BuildProvider may be implemented for each file type that plugs into the overall build system.","An exemplary description of a BuildProvider class follows an exemplary description of a BuildProviderHost class:",{"@attributes":{"id":"p-0096","num":"0098"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\/\/\/ Provides services to BuildProvider's during their compilation"},{"entry":"public abstract class BuildProviderHost {"},{"entry":"\u2003\/\/\/ Returns a collection of assemblies that the build provider is to be compiled with."},{"entry":"\u2003public abstract ICollection GetReferencedAssemblies( );"},{"entry":"\u2003\/\/\/ Adds an assembly that is to be referenced during compilation."},{"entry":"\u2003public abstract void AddAssemblyReference(Assembly a);"},{"entry":"\u2003\/\/\/ Returns a CodeDomProvider that the build provider can use to generate a"},{"entry":"\u2003\/\/\/ CodeCompileUnit."},{"entry":"\u2003public abstract CodeDomProvider GetCodeDomProvider( );"},{"entry":"\u2003\/\/\/ Creates a new source file that will be added to the compilation. The build"},{"entry":"\u2003\/\/\/ provider writes source code to this file using the returned TextWriter."},{"entry":"\u2003\/\/\/ The build provider may close the TextWriter when it is done writing to it."},{"entry":"\u2003\/\/\/ The build provider passes itself as a parameter to this method."},{"entry":"\u2003public abstract TextWriter CreateCodeFile(BuildProvider buildProvider);"},{"entry":"\u2003\/\/\/ Returns the physical path to a source file that will be included in the"},{"entry":"\u2003\/\/\/ compilation. Note that the file is not actually created. It is up to the"},{"entry":"\u2003\/\/\/ build provider to do this."},{"entry":"\u2003\/\/\/ The source file has the correct extension for the target language."},{"entry":"\u2003\/\/\/ The build provider passes itself as a parameter to this method."},{"entry":"\u2003public abstract string GetCodeFilePhysicalPath(BuildProvider buildProvider);"},{"entry":"\u2003\/\/\/ Adds a CodeCompileUnit to the compilation. This is typically used as an"},{"entry":"\u2003\/\/\/ alternative to CreateSourceFile, esp. by providers who are CodeDOM aware."},{"entry":"\u2003\/\/\/ The build provider passes itself as a parameter to this method."},{"entry":"\u2003public abstract void AddCodeCompileUnit(BuildProvider buildProvider,"},{"entry":"CodeCompileUnit codeCompileUnit);"},{"entry":"\u2003\/\/\/ Creates a new resource that is to be added to the compilation. The build"},{"entry":"\u2003\/\/\/ provider can write to it using the returned Stream."},{"entry":"\u2003\/\/\/ The build provider may close the Stream when it is done writing to it."},{"entry":"\u2003\/\/\/ The build provider passes itself as a parameter to this method."},{"entry":"\u2003public abstract Stream CreateEmbeddedResource(BuildProvider buildProvider,"},{"entry":"string name);"},{"entry":"}"},{"entry":"\/\/\/ Base class for build providers that want to participate in a compilation."},{"entry":"\/\/\/ It may be used by build providers that process files based on a virtual path."},{"entry":"public abstract class BuildProvider {"},{"entry":"\u2003\/\/\/ Returns the language that this build provider uses, or null of it can use"},{"entry":"\u2003\/\/\/ any language."},{"entry":"\u2003public virtual string GetCodeLanguage( );"},{"entry":"\u2003\/\/\/ Asks this build provider to generate any code that it has, using the various"},{"entry":"\u2003\/\/\/ methods on the passed in BuildProviderHost."},{"entry":"\u2003public virtual void GenerateCode(BuildProviderHost host);"},{"entry":"\u2003\/\/\/ Gets or sets the virtual path that this build provider handles."},{"entry":"\u2003public string VirtualPath { get; set; }"},{"entry":"\u2003}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"The above class descriptions are provided by way of example only, for software build extensibility may be implemented in a myriad of other manners as described herein. Additionally, although the above classes are implemented in the C# programming language, they may alternatively be implemented in one or more other languages. Furthermore, the above classes may be alternatively implemented in one or more non-Microsoft\u00ae Corporation environments.","Although systems, media, devices, methods, procedures, apparatuses, techniques, APIs, schemes, approaches, procedures, arrangements, and other implementations have been described in language specific to structural, logical, algorithmic, and functional features and\/or diagrams, it is to be understood that the invention defined in the appended claims is not necessarily limited to the specific features or diagrams described. Rather, the specific features and diagrams are disclosed as exemplary forms of implementing the claimed invention."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The same numbers are used throughout the drawings to reference like and\/or corresponding aspects, features, and components.",{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":["FIG. 9","FIG. 8"]},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 10"}]},"DETDESC":[{},{}]}
