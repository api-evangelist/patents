---
title: Determining object graph and object graph projection
abstract: A method for generating a projected graph data structure, including generating a request for the projected graph data structure using a variable usage specification, retrieving a server graph data structure using the request, generating a projected graph data structure representation using the request, the server graph data-structure, and a schema associated with the server graph data-structure, and instantiating the projected graph data-structure using the projected graph data-structure representation.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07058655&OS=07058655&RS=07058655
owner: Sun Microsystems, Inc.
number: 07058655
owner_city: Santa Clara
owner_country: US
publication_date: 20020111
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF INVENTION","SUMMARY OF INVENTION","DETAILED DESCRIPTION"],"p":["An \u201cobject graph\u201d is a collection of related objects which are represented in forms including binary, text, XML (\u201cExtensible Markup Language\u201d), etc.  illustrates a class schema. The class schema  represents the classes that may be present in a given object graph, attributes associated with the classes, the relationships between the classes, and associated accessors. Further, the class schema  encapsulates the class definitions necessary to create the class. For example, the class schema in  contains a Purchase_Order class  with a PURCHASE_ORDER_ID attribute. The Purchase_Order class  is related to a LineItem class \u2014with a one-to-many relationship. Further, the Purchase_Order class  contains an accessor, LineItems, for the relationship to the LineItem class . The LineItem class  contains a LINEITEM_ID attribute, a QUANTITY attribute, and a DISCOUNT attribute. Further, the LineItem class  contains an accessor, Product, for the relationship to the Product class , and an accessor, Purchase_Order, for the relationship to the Purchase_Order class . The LineItem class  is related to a Product class  with a one-to-one relationship. The Product class  contains a PRODUCT_ID attribute, a NAME attribute, and a PRICE attribute.","The class schema , illustrated in , may be used to create numerous object graphs that conform to the class schema. For example,  illustrates an exemplary object graph  that conforms to the class schema ( in ). The object graph  contains a Purchase_Order_Object_  that contains a PURCHASE_ORDER_ID attribute. The Purchase_Order_Object_  is related to three LineItem objects , , and . As specified by the class schema , each LineItem object , , and  contains a LINEITEM_ID attribute, a NAME attribute and a PRICE attribute. Each LineItem object , ,  is related to one Product object. For example, LineItem_Object_  is related to Product_Object_ , LineItem_Object_  is related to Product_Object_ , and LineItem_Object_  is related to Product_Object_ . As specified by the class schema , each Product object ,  contains a PRODUCT_ID attribute, a NAME attribute, and a PRICE attribute. The Purchase_Order_Object_  may be called the root of the object graph  because the Purchase_Order_Object_  (explicitly or implicitly) references all objects in the object graph  and is the entry point into the object graph .","As shown in , objects typically include a wealth of data and behavior corresponding to the union of all possible applications of the data. As such, object graphs can be quite large. Relational database management systems (RDBMS) allow for the partial retrieval of data corresponding to an object. Retrieval of part of the object, e.g., part of a table row, is called a projection. There are difficult to solve problems related to using projected object graphs. For example, a method defined on an object may require certain attributes, and, thus, if not all the attributes are retrieved, some methods may fail or produce incorrect results. In this case, sending the entire object graph shown in  would be inefficient when all that is really needed is a small portion of the object graph.","As an example,  illustrates a projected version of the object graph  that is actually needed by a client process. Note that only a few of the attributes shown in  are needed by the client process. In this case, it would be inefficient to send the large object graph shown in  when all that is really needed is the small object graph shown in .","Still referring to , the subset of object graph \u2032, includes the primary key for each object within the object graph, e.g., the primary key for the Purchase_Order_Object_ \u2032 is \u201cPURCHASE_ORDER_ID.\u201d Additionally, some objects also include a secondary key. Typically, object graphs require that objects within the graph all include their primary key. Depending on the database requirements, the secondary key may also be required.","In addition, if part of an object is fetched in one transaction, and the rest in another transaction, the two parts may be inconsistent with each other. Because these sorts of problems are difficult to solve, systems that use objects typically fetch the entire object graph. The most innovative systems define groupings of attributes as part of the object schema. This requires the application developer to guess which groups will be needed in the future and to insert this information into the application manually. Unless the proper groups exist in the schema, the results may not be optimal.","In general, in one aspect, the invention relates to a method for generating a projected graph data structure, comprising: generating a request for the projected graph data structure using a variable usage specification, retrieving a server graph data structure using the request, generating a projected graph data structure representation using the request, the server graph data-structure, and a schema associated with the server graph data-structure, and instantiating the projected graph data-structure using the projected graph data-structure representation.","In general, in one aspect, the invention relates to a method for generating a projected graph data-structure, comprising generating a request for the projected graph data-structure using a usage variable specification, retrieving a server graph data-structure using the request, generating a projected graph data-structure representation using the request, the server graph data-structure, and a schema associated with the server graph data-structure, instantiating the projected graph data-structure using the projected graph data-structure representation, and synchronizing projected objects located on the client with distributed objects located on a server.","In general, in one aspect, the invention relates to a network system, comprising a customer component that generates a request for a projected object graph, a service component that generates a service-side projected object graph representation, means for generating the request for the projected graph data-structure using a usage variable specification, means for retrieving a server graph data-structure using the request, means for generating the projected graph data-structure representation using the request, the server graph data-structure, and a schema associated with the server graph data-structure, and means for instantiating the projected graph data-structure using the projected graph data-structure representation.","In general, in one aspect, the invention relates to an apparatus for generating a projected graph data-structure, comprising means for generating a request for the projected graph data-structure using a usage variable specification, means for retrieving a server graph data-structure using the request, means for generating a projected graph data-structure representation using the request, the server graph data-structure, and a schema associated with the server graph data-structure, and means for instantiating the projected graph data-structure using the projected graph data-structure representation.","Other features and advantages of the invention will be apparent from the following description and the appended claims.","Exemplary embodiments of the invention will be described with reference to the accompanying drawings. Like items in the drawings are shown with the same reference numbers.","The following is a detailed description of specific embodiments of the invention. In the following detailed description, numerous specific details are set forth in order to provide a more thorough understanding of the invention. However, it will be apparent to one of ordinary skill in the art that the invention may be practiced without these specific details. In other instances, well-known features have not been described in detail to avoid obscuring the invention.","A projection generation system consistent with the embodiments of the present invention generates object graph projections optimized for a distributed application. The projection generation system bases object graph projection on application usage specifications rather than object schemas. A variable usage specification (VUS) describes the application as a series of states and transitions. The states represent information derived from objects. The transitions represent business logic and operations that occur between any two given states. For example, a state might correspond to a single screen displayed to an end-user of a client process. Transition between states is typically caused by a user-gesture, such as pressing a key, moving a mouse, etc. In the context of a web application, for example, web pages are states, and transitions are the buttons\/actions on the web pages that take the user to a different page (or state). The projection generation system restricts calling of remote business methods to transitions between states. The VUS also includes consistency requirements for each datum. The VUS may be provided by the programmer or generated dynamically by the client.","For illustration purposes, Table 1 shows an example of the VUS based on the object graph  (shown in ). It should be noted that there are a variety of ways of representing the VUS, and the format shown in Table 1 is not intended to limit the invention in any way. The VUS references the portions of the object graph  (shown in ) that are of interest. The references are made relative to the root of the object graph  (shown in ), which is the Purchase_Order_Object_ ( in ). Note that the VUS shown in Table 1 corresponds to the object graph \u2032 (as illustrated in ) which is the projected version of the object graph  shown in .",{"@attributes":{"id":"p-0022","num":"0021"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 1"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Variable Usage Specification"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Purchase_Order.PURCHASE_ORDER_ID"]},{"entry":[{},"Purchase_Order.LineItems[1].LINEITEM_ID"]},{"entry":[{},"Purchase_Order.LineItems[1].DISCOUNT"]},{"entry":[{},"Purchase_Order.LineItems[2].QUANTITY"]},{"entry":[{},"Purchase_Order.LineItems[3].DISCOUNT"]},{"entry":[{},"Purchase_Order.LineItems[3].QUANTITY"]},{"entry":[{},"Purchase_Order.LineItems[3].Product.PRODUCT_ID"]},{"entry":[{},"Purchase_Order.LineItems[3].Product.PRICE"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"The projection generation system automatically generates projected object graphs, where in one embodiment, the projected object graph corresponds to an object graph only populated with objects and attributes that are required for a particular state. The attributes in the project object graph may be accessed via accessors and mutators, where in one embodiment, an accessor may be a get method and a mutator may be a set method.","For each state of the application, the projection generation system fetches and locally caches the objects required to represent the state. The projection generation system determines what objects and corresponding attributes are required for each state based on the VUS. The objects are cached as projected objects and may be accessed locally by a client process. Before a remote method is invoked on the server, the projection generation system synchronizes the projected objects, located on a client, with the corresponding distributed objects in the server. In this way, the projection generation system ensures that all the attributes required for a particular state are available.",{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 4","b":["30","30","32","58","36","56","32","36","30","30","30","40","32","52","36","40","52","30","54"]},"The customer component  intercepts calls from the client component  in order to automatically optimize object graph projection. At runtime, the customer component  determines the states and the transitions in the application. A state may correspond to information displayed to an end user, e.g., using a web browser. In order to generate the information to display to the end-user, the client component  may require data from one or more server object graphs  ( in ) in the server component . A transition may correspond to one or more business method calls required to move the application from one state to another. Typically, the transition is initiated through user gestures, such as clicking a mouse or hitting a key. The customer component  determines what portions of the server object graphs  are required for the current state of the application, based on the VUS. The required objects include at least one object from the server object graph  and a distributed business object , where in one embodiment the distributed business object contains the business logic of the application. The customer component  then fetches the data from the server based on this information. In addition, the customer component  synchronizes the projected object graphs  used in the current state with the corresponding server object graphs  in the server component . This ensures that the required server object graph attributes contain the correct information. The customer component  may be implemented as a runtime library that includes a set of routines that are bound to the client, e.g., client component , at runtime.","As shown in , the service component  receives requests from the customer component  to retrieve particular portions of a server object graph , corresponding server object graph attributes, and distributed business objects  from the server component . The service component retrieves entire server object graph  (e.g.,  in ) and creates a service-side projected object graph representation  based on the particular attributes requested by the customer component . Additionally, the service component  provides application-independent services to the customer component , such as forwarding requests from an invoking method call to a server object graph  in the server component .","In one embodiment of the present invention, the service-side projected object graph representation is represented as an Extensible Mark-up Language (XML) document.","In one embodiment of the present invention, the service-side projected object graph representation is represented as a serialized file. The file may be created using an application programming interface (API) such as the Java\u2122 Serialization API.","In one embodiment of the present invention, the service-side projected object graph representation is represented as a hash table.","In one or more embodiments of the present invention, the service component contains functionality to handle referential loops, and handle reference to the same object within an object graph. This functionality is used during generation of the service-side projected object graph representation. In one embodiment, the service component uses a table to handle referential loops and references to the same object. As the service component traverses through the server object graph to create the service-side projected object graph representation, each object that is encountered is entered into the table. If the encountered object is already in the table, then it is not reprocessed. This process is repeated until all required objects within the object graph have been processed.","To the client component , the customer component  is a local representation of the server component . The client component  interacts with the customer component  and projected object graphs  just as it would with the server component  and server object graphs .","In order to take advantage of the projection generator , an application is described as a series of states and transitions. The states represent the information (derived from objects) sent to a web browser. The transitions represent the business logic and operations that occur between any two given states. The description of the application also includes the consistency requirements for each datum.","Additionally, the client component  is able to route calls that would normally be made to the server component  to be made to the customer component . Such calls may include calls for creating, finding, or destroying server object graphs in the server component , calls for accessing data stored in server object graphs in the server component , and calls for changing data stored in server object graphs in the server component .",{"@attributes":{"id":"p-0035","num":"0034"},"figref":["FIG. 5","FIG. 2","FIG. 3"],"b":["30","40","32","70","40","40","47","52","44","44","8","52","52","40","44","51","8","51","49","40","51","44"]},"In one embodiment of the present invention, the projected object graph located on the customer component is synchronized with the corresponding server object graph on the server component prior to generating a service-side projected object graph representation.","Advantages of the present invention may include one or more of the following. The projection generation system verifies and retrieves all specified data for a given state at every transition, allowing for client objects to execute with only a sparsely populated object graph, e.g., . The projection generation system allows distributed applications to be automatically optimized by allowing client objects to execute with minimal information, and minimizing the amount of data that is required to be transferred from the server to the client. The projection generation system ensures client components of distributed applications always contain just the current information when entering a new state. Further, the projection generation system allows programs to increase efficiency in bandwidth usage, time usage, communication cost, processes time, etc. Further, the flexible nature of the projection generation system allows it to be used in thin clients, e.g., Personal Digital Assistants (PDAs). Those skilled in the art will appreciate that the present invention may include other advantages and features.","While the invention has been described with respect to a limited number of embodiments, those skilled in the art, having benefit of this disclosure, will appreciate that other embodiments can be devised which do not depart from the scope of the invention as disclosed herein. Accordingly, the scope of the invention should be limited only by the attached claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF DRAWINGS","p":[{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0015","num":"0014"},"figref":["FIG. 3","FIG. 2"]},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 5"}]},"DETDESC":[{},{}]}
