---
title: Using stages to handle dependencies in parallel tasks
abstract: Technologies are described herein for using stages for managing dependencies between tasks executed in parallel. A request for permission to execute a task from a group or batch of tasks is received. The specified task is retrieved from a task definition list defining a task ID, stage, and maximum stage for each task in the group. If another pending or currently running task exists with a stage and maximum stage less than the stage defined for the retrieved task, then the retrieved task is not allowed to run. If no other pending or currently running task exists with a stage and maximum stage less than the stage defined for the retrieved task, then the permission to execute the specified task is given.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08949853&OS=08949853&RS=08949853
owner: Microsoft Corporation
number: 08949853
owner_city: Redmond
owner_country: US
publication_date: 20110804
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["A system administrator or developer in a computer system environment may often be required to execute a large list of tasks or processes. The easiest way to schedule the list of tasks is to run them sequentially. This solution may not be optimal, however, because of underutilized execution resources and increased total time of execution of the tasks.","While running the tasks in parallel may be more efficient, it may also be more complicated due to dependencies that exist between tasks in the list. For example, some tasks may temporarily change the topology of the system in such a way that other tasks running in parallel would fail. Other tasks may depend upon the output or changes to data generated by previously executed tasks in the list.","An optimum approach may be to run as many tasks in the list in parallel as possible while taking into consideration these dependencies between tasks. However, analyzing dependencies between large numbers of tasks to produce an execution schedule may be complex. In addition, frequent changes to the environment may require the dependencies be changed frequently, and maintenance of the complex set of dependencies may be difficult and costly.","It is with respect to these considerations and others that the disclosure made herein is presented.","Technologies are described herein for using stages for managing dependencies between tasks executed in parallel. Utilizing the technologies presented herein, extra abstraction layer \u201cstages\u201d may be added to the definition of a group or batch of tasks to be executed in order to handle dependencies that may exist between tasks. Using stages defined for each task may allow a maximum number of tasks to be executed in parallel while preventing tasks with dependencies from executing at the same time. In addition, each task is mapped to only one rule, i.e. a stage and maximum stage, defined for each task, making the maintenance of the task definitions manageable and the solution highly scalable.","According to embodiments, a request for permission to execute a task from the group or batch of tasks is received. The specified task is retrieved from a task definition list defining a task identifier (\u201cID\u201d), stage, and maximum stage for each task. If another pending or currently running task exists with a stage and maximum stage less than the stage defined for the retrieved task, then the specified task is not allowed to run. If no other pending or currently running task exists with a stage and maximum stage less than the stage defined for the retrieved task, then permission to execute the specified task is given.","It should be appreciated that the above-described subject matter may be implemented as a computer-controlled apparatus, a computer process, a computing system, or as an article of manufacture such as a computer-readable medium. These and various other features will be apparent from a reading of the following Detailed Description and a review of the associated drawings.","This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter, nor is it intended that this Summary be used to limit the scope of the claimed subject matter. Furthermore, the claimed subject matter is not limited to implementations that solve any or all disadvantages noted in any part of this disclosure.","The following detailed description is directed to technologies for using stages for managing dependencies between tasks executed in parallel. While the subject matter described herein is presented in the general context of program modules that execute in conjunction with the execution of an operating system and application programs on a computer system, those skilled in the art will recognize that other implementations may be performed in combination with other types of program modules. Generally, program modules include routines, programs, components, data structures, and other types of structures that perform particular tasks or implement particular abstract data types. Moreover, those skilled in the art will appreciate that the subject matter described herein may be practiced with other computer system configurations, including hand-held devices, multiprocessor systems, microprocessor-based or programmable consumer electronics, minicomputers, mainframe computers, and the like.","In the following detailed description, references are made to the accompanying drawings that form a part hereof and that show, by way of illustration, specific embodiments or examples. In the accompanying drawings, like numerals represent like elements through the several figures.",{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 1","b":["100","100","102","102","102","102"]},"The application server  executes a task dependencies management module . According to one embodiment, the task dependencies management module  is responsible for managing the dependencies in the parallel execution of a number of tasks A-N (referred to herein generally as tasks ) on a number of execution resources A-N (referred to herein generally as execution resources ) in the operating environment . The task dependencies management module  may be implemented as hardware, software, or a combination of the two. The task dependencies management module  may be an add-in or component of a batch processing system, a software testing suite, or the like, and may include a number of application program modules and other components executing on the application server  and\/or other computers or computing devices.","The tasks  may include any computer-executable instructions presented in any form, such as software programs, application modules, database scripts, stored procedures, system scripts, testing profiles, and the like. The execution resources  may include computing resources for executing the tasks, such as CPUs, virtual machines, execution threads, runtime engines, batch processors, database engines, testing engines, and the like. The execution resources  may be provided by the application server  and\/or one or more other computers or computing devices in the operating environment .","According to embodiments, the tasks  for parallel execution are defined in a task definition list . The task definition list  includes a definition of each task  to be executed. In one embodiment, the definition of each task  in the task definition list  comprises a tuple including a task ID identifying the task to be executed, a numeric stage of execution for the task, and a maximum stage indicating a maximum stage of execution that can be executed in parallel with the task. The stage and maximum stage of each task are used by the task dependencies management module  to determine which tasks  defined in the task definition list  may be executed in parallel. The stages and maximum stages defined in the task definition list  may be based on the dependencies between the tasks. According to embodiments, each task  is assigned to only one stage, and each stage may contain multiple tasks. Tasks  assigned to the same stage may run in parallel. In addition, all the tasks  assigned to stages that are less than a current maximum stage can also be executed in parallel.","Therefore, the task dependencies management module  may determine if a particular task  may be executed based on the stage and\/or maximum stage of all other pending or running tasks. Particularly, a task A with stage SA and maximum stage MA will be allowed to execute unless another task B is pending or currently running with stage SB less than SA and maximum stage MB less than SA. For example, the task definition list  may include four tuples defining four tasks A, B, C, and D, as shown below in Table 1.",{"@attributes":{"id":"p-0021","num":"0020"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 1"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Example Task Definitions"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"(Task ID = A, Stage = 01, Maximum Stage = 05)"]},{"entry":[{},"(Task ID = B, Stage = 01, Maximum Stage = 01)"]},{"entry":[{},"(Task ID = C, Stage = 02, Maximum Stage = 02)"]},{"entry":[{},"(Task ID = D, Stage = 10, Maximum Stage = 10)"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"According to the task definitions shown in Table 1, task A will be allowed to execute at any time, since no other defined task has a maximum stage less than the stage SA of task A, i.e. MB>=SA, MC>=SA, and MD>=SA. Task B may also execute at any time for the same reasons (MA>=SB, MC>=SB, and MD>=SB). However, task C may only execute after task B is complete, because while the maximum stage MA of task A and the maximum stage MD of task D are both greater than or equal to the stage SC, i.e. MA>=SC and MD>=SC, the maximum stage MB of task B is less than the stage SC. Similarly, task D may only be executed alone, once tasks A, B, and C are complete (MA<SD, MB<SD, MC<SD).","In one embodiment, the task definition list  may comprise an extensible markup language (\u201cXML\u201d) file with a node defining each task .  shows a sample portion of XML  from a task definition list , according to the embodiment. The XML  may include a Task node  for each task . The task node  may include a Name attribute  identifying a script, profile, or definition of the associated task . The task node  also includes a Stage attribute  specifying the numeric stage of the task, and a MaximumStage attribute  specifying the maximum stage. For example, as shown in , a task  identified as \u201cBVT_Client-BecWebService.xml\u201d may have a stage of \u201c001\u201d and a maximum stage of \u201c019.\u201d In another embodiment, the Task nodes  may be grouped under a parent node, such as a Batch, Group, or Cycle node, with its own name or identifier, and multiple batches or groups may be defined in the task definition list .","According to the task definition list  defined by the XML , all tasks  in the listing except \u201cBVT_SubscriptionExtendedTests.xml\u201d and \u201cUnlistedBVTProfiles\u201d would be allowed to run in parallel with the task \u201cBVT_Client-BecWebService.xml.\u201d Similarly, the task \u201cBVT_AuthZExtendedTests.xml\u201d is set to execute in stage \u201c001,\u201d but only other tasks assigned to stage \u201c001\u201d may run in parallel with the task. Therefore, the task \u201cBVT_Aws.xml,\u201d which is set to execute in stage \u201c002,\u201d will not be allowed to execute until the \u201cBVT_AuthZExtendedTests.xml\u201d has completed.","In other embodiments, the task definition list  may be stored in a delimited flat file, a database table, or any other mechanism known in the art for storing structured data. As further shown in , each task  has only one associated entry in the task definition list , making the listing easy to maintain and ensuring that the solution scales well. The concept of stages may also allow for increased maintainability as it groups parallel tasks in the same stage. Once the tasks are mapped to stages in the task definition list , the task dependencies management module  need only read the stage configuration and base the decision whether to run a task on the stage and maximum stage data. There is no extra design effort required from system administrators or developers.","According to one embodiment, the task dependencies management module  reads and parses the task definition list  in order to provide an indication of whether a particular task is allowed to execute or not upon request for permission to execute the task from an execution resource . The task dependencies management module  may implement an application programming interface (\u201cAPI\u201d)  that is used by the execution resources  to determine whether tasks  may be executed based on the defined dependencies. When an execution resource  becomes available, the execution resource may utilize the API  to request permission to execute a particular task  from the task dependencies management module  by specifying the task ID, such as the task Name attribute , for example. The task dependencies management module  may utilize the stage and maximum stage defined for the identified task  in the task definition list , along with knowledge of the completed and currently executing tasks, to determine if the requested task can currently be executed, using a procedure similar to that described below in regard to . The task dependencies management module  may then return an indication of whether the specified task  may currently be executed to the requesting execution resource .","The execution resources  may also utilize the API  to update the task dependencies management module  on the completion of a particular task  as well as whether the task completed successfully or not. The task dependencies management module  may track the completed tasks  and\/or the currently executing tasks in an executed task list . The executed task list  may be utilized to determine whether a particular task  may be executed, as described above. The executed task list  may be stored in a memory of the application server , or may be stored in a database or other storage mechanism accessible by the server.","According to another embodiment, the task dependencies management module  reads the task definitions from the task definition list  and initiates execution of the defined tasks  in stage order on the available execution resources  in the environment . The task dependencies management module  may further monitor execution of the tasks  on the execution resources  to determine when a task completes and an execution resource becomes available. Upon completion of a task  and\/or an execution resource  becoming available, the task dependencies management module  utilizes the stage and maximum stage defined for each task to determine which task(s) may be executed next.","In a further embodiment, the task definition list  is parsed and the task definitions contained therein are stored in a table of a database on the application server . The executed task list  may also be stored in the database, and the functionality required by the task dependencies management module  to determine whether a particular task may execute, as will be described below in regard to , may be implemented in stored procedures. The database may expose the API  and the stored procedures executed to handle each request made by an execution resource , as described above.","Referring now to , additional details will be provided regarding the embodiments presented herein. It should be appreciated that the logical operations described with respect to  are implemented (1) as a sequence of computer implemented acts or program modules running on a computing system and\/or (2) as interconnected machine logic circuits or circuit modules within the computing system. The implementation is a matter of choice dependent on the performance and other requirements of the computing system. Accordingly, the logical operations described herein are referred to variously as operations, structural devices, acts, or modules. These operations, structural devices, acts, and modules may be implemented in software, in firmware, in special purpose digital logic, and any combination thereof. It should also be appreciated that more or fewer operations may be performed than shown in the figures and described herein. The operations may also be performed in a different order than described.",{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 3","b":["300","106","110","300","104","102","300","300","104","114","106"]},"The routine  begins at operation , where the task dependencies management module  loads a list of tasks from the task definition list . As described above in regard to , the task definition list  may comprise one or more tuples defining a task ID, stage, and maximum stage for each task. According to embodiments, the list of tasks parsed from the task definition list  may be stored in memory of the application server  or in a database table or other storage mechanism accessible by the server. It will be appreciated that the operation  to load the list of tasks from the task definition list  may only be executed once by the task dependencies management module  at the beginning of the execution of a group or batch of tasks defined in the task definition list, instead of upon every request.","From operation , the routine  proceeds to operation , where the task dependencies management module  receives the task ID of the task  to be executed. For example, an execution resource  may utilize the API  of the task dependencies management module  to request permission to execute a particular task . The request may specify a task ID of the task , such as the task Name attribute  described above in regard to .","The routine  then proceeds from operation  to operation , where the task dependencies management module  determines whether the specified task may be executed based on the stage and maximum stage of all other pending or running tasks . Particularly, the task dependencies management module  determines if any pending or currently running task  has a stage or maximum stage that is less than the stage defined for the specified task. If another task B is pending or currently running with a stage SB less than the stage SA of the retrieved task and a maximum stage MB less than SA, the specified task is not allowed to run in parallel with or prior to the other task, and the routine  proceeds to operation , where the task dependencies management module  prevents the specified task from being executed. For example, the task dependencies management module  may respond to the requesting execution resource  with an indicator indicating that the specified task may not be executed at this time.","However, if no other pending or currently running task  has a stage or maximum stage that is less than the stage defined for the specified task, then the routine  proceeds from operation  to operation , where the specified task is allowed to execute. For example, the task dependencies management module  may respond to the requesting execution resource  with an indicator indicating that the task may be executed. From operations  or , the routine  ends.","In a further embodiment, a client module may execute on a remote computer and manage the execution of the tasks  defined in a local list or group of tasks on a subset of the execution resources . Upon detecting that an execution resource  is available, the client module may determine the next task in the local list of tasks to be executed, and utilize the API  of the task dependencies management module  to request permission to execute the task, by providing a task ID, for example. The task execution module  will utilize the routine  described above to determine if the task is allowed to execute based on the stage and maximum stage of the other pending and currently running tasks, as determined from the list of tasks and the executed task list .","The task execution module  may then respond to the client module with an indicator indicating whether the task may be executed or not. If the task may be executed, then the client module will initiate the task  on the available execution resource . If the task may not be executed, then the client module will select the next task in the local task list for execution and request permission for execution of that task from the task dependencies management module . In another embodiment, the client module may execute on the same application server  as the task dependencies management module  or may be a component of the task dependencies management module, and the local task list may be the task definition list .",{"@attributes":{"id":"p-0038","num":"0037"},"figref":["FIG. 4","FIG. 4"],"b":["400","102"]},"The computer architecture shown in  includes one or more central processing units (\u201cCPUs\u201d) . The CPUs  may be standard processors that perform the arithmetic and logical operations necessary for the operation of the computer . The CPUs  perform the necessary operations by transitioning from one discrete, physical state to the next through the manipulation of switching elements that differentiating between and change these states. Switching elements may generally include electronic circuits that maintain one of two binary states, such as flip-flops, and electronic circuits that provide an output state based on the logical combination of the states of one or more other switching elements, such as logic gates. These basic switching elements may be combined to create more complex logic circuits, including registers, adders-subtractors, arithmetic logic units, floating-point units, and other logic elements.","The computer architecture further includes a system memory , including a random access memory (\u201cRAM\u201d)  and a read-only memory  (\u201cROM\u201d), and a system bus  that couples the memory to the CPUs . A basic input\/output system containing the basic routines that help to transfer information between elements within the computer , such as during startup, is stored in the ROM . The computer  also includes a mass storage device  for storing an operating system , application programs, and other program modules, which are described in greater detail herein.","The mass storage device  is connected to the CPUs  through a mass storage controller (not shown) connected to the bus . The mass storage device  provides non-volatile storage for the computer . The computer  may store information on the mass storage device  by transforming the physical state of the device to reflect the information being stored. The specific transformation of physical state may depend on various factors, in different implementations of this description. Examples of such factors may include, but are not limited to, the technology used to implement the mass storage device, whether the mass storage device is characterized as primary or secondary storage, and the like.","For example, the computer  may store information to the mass storage device  by issuing instructions to the mass storage controller to alter the magnetic characteristics of a particular location within a magnetic disk drive, the reflective or refractive characteristics of a particular location in an optical storage device, or the electrical characteristics of a particular capacitor, transistor, or other discrete component in a solid-state storage device. Other transformations of physical media are possible without departing from the scope and spirit of the present description. The computer  may further read information from the mass storage device  by detecting the physical states or characteristics of one or more particular locations within the mass storage device.","As mentioned briefly above, a number of program modules and data files may be stored in the mass storage device  and RAM  of the computer , including an operating system  suitable for controlling the operation of a computer. The mass storage device  and RAM  may also store one or more program modules. In particular, the mass storage device  and the RAM  may store the task dependencies management module , which was described in detail above in regard to . The mass storage device  and the RAM  may also store other types of program modules or data.","In addition to the mass storage device  described above, the computer  may have access to other computer-readable media to store and retrieve information, such as program modules, data structures, or other data. It should be appreciated by those skilled in the art that computer-readable media may be any available media that can be accessed by the computer , including computer-readable storage media and communications media. Communications media includes transitory signals. Computer-readable storage media includes volatile and non-volatile, removable and non-removable media implemented in any method or technology for the storage of information, such as computer-readable instructions, data structures, program modules, or other data, but does not encompass transitory signals. For example, computer-readable storage media includes, but is not limited to, RAM, ROM, EPROM, EEPROM, flash memory or other solid state memory technology, CD-ROM, digital versatile disks (DVD), HD-DVD, BLU-RAY, or other optical storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other medium that can be used to store the desired information and that can be accessed by the computer .","The computer-readable storage medium may be encoded with computer-executable instructions that, when loaded into the computer , may transform the computer system from a general-purpose computing system into a special-purpose computer capable of implementing the embodiments described herein. The computer-executable instructions may be encoded on the computer-readable storage medium by altering the electrical, optical, magnetic, or other physical characteristics of particular locations within the media. These computer-executable instructions transform the computer  by specifying how the CPUs  transition between states, as described above. According to one embodiment, the computer  may have access to computer-readable storage media storing computer-executable instructions that, when executed by the computer, perform the routine  for using stages for managing dependencies between tasks executed in parallel, described above in regard to .","According to various embodiments, the computer  may operate in a networked environment using logical connections to execution resources , remote computing devices, and computer systems through a network , such as a LAN, a WAN, the Internet, or a network of any topology known in the art. The computer  may connect to the network  through a network interface unit  connected to the bus . It should be appreciated that the network interface unit  may also be utilized to connect to other types of networks and remote computer systems.","The computer  may also include an input\/output controller  for receiving and processing input from a number of input devices, including a keyboard, a mouse, a touchpad, a touch screen, an electronic stylus, or other type of input device. Similarly, the input\/output controller  may provide output to a display device, such as a computer monitor, a flat-panel display, a digital projector, a printer, a plotter, or other type of output device. It will be appreciated that the computer  may not include all of the components shown in , may include other components that are not explicitly shown in , or may utilize an architecture completely different than that shown in .","Based on the foregoing, it should be appreciated that technologies for using stages for managing dependencies between tasks executed in parallel are provided herein. Although the subject matter presented herein has been described in language specific to computer structural features, methodological acts, and computer-readable storage media, it is to be understood that the invention defined in the appended claims is not necessarily limited to the specific features, acts, or media described herein. Rather, the specific features, acts, and mediums are disclosed as example forms of implementing the claims.","The subject matter described above is provided by way of illustration only and should not be construed as limiting. Various modifications and changes may be made to the subject matter described herein without following the example embodiments and applications illustrated and described, and without departing from the true spirit and scope of the present invention, which is set forth in the following claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 4"}]},"DETDESC":[{},{}]}
