---
title: Methods and systems for converting non-layered-software-application installations into layered installations
abstract: A method may include receiving a request to convert a non-layered installation of a software application into a layered installation of the software application. The method may also include determining a base location of at least one file associated with the non-layered installation of the software application. The method may further include creating the layered installation of the software application by transitioning the at least one file from the base location to a virtualization layer. Various other methods, systems, and computer-readable-media are also disclosed.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08402458&OS=08402458&RS=08402458
owner: Symantec Corporation
number: 08402458
owner_city: Mountain View
owner_country: US
publication_date: 20090318
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"p":["Information Technology (IT) administrators may spend a substantial amount of time managing software applications. Managing software applications may include resolving application conflicts, repairing damaged applications, migrating to new versions of applications, installing applications, and patching applications. These tasks may be frustrating and time consuming.","Application virtualization technologies may simplify many IT administration tasks. For example, application virtualization may allow an administrator to turn on or off a user's access to applications and data, which may reduce the time it takes to provide users with the resources they need. Application virtualization may also allow an administrator to reset broken applications to a known-good state without fear of damaging other applications. Application virtualization may insure that each virtualized application has its own copy of DLL files that it would normally share with other applications. This eliminates conflicts that occur when two or more applications may require different versions of the same DLL, thereby rescuing administrators from a condition commonly referred to as \u201cDLL hell.\u201d","Application virtualization may allow different versions of the same application to peacefully coexist. Among other things, this means that an administrator may keep older versions intact and available while testing new versions. Even after migrating to a new version, an administrator may quickly roll back to the previous version at any time. Despite these advantages, traditional application virtualization technologies may only allow for virtualization of fresh installations of an application. Thus, an application that has already been installed may not be able to take advantage of software virtualization without being reinstalled.","Embodiments of the instant disclosure may provide methods and systems for converting a non-layered installation of a software application into a layered installation of the software application. For example, an installation-conversion module may receive a request to convert a non-layered installation of a software application into a layered installation of the software application. The installation-conversion module may determine a base location of one or more files and\/or settings associated with the non-layered installation of the software application. The installation-conversion module may then provide the layered installation of the software application by transitioning one or more of the files and\/or settings from their base locations to a virtualization layer.","In some embodiments, the installation-conversion module may transition files and settings from base locations to a virtualization layer by moving the files and settings from the base locations to the virtualization layer. In other embodiments, the installation-conversion module may transition the files and settings from the base locations to the virtualization layer by copying the files and settings from the base locations to the virtualization layer and initiating an uninstaller to uninstall the non-layered installation of the software application.","In at least one embodiment, the installation-conversion module may determine the base locations of files and settings by referencing a layered-installation package associated with the non-layered installation. In other embodiments, the installation-conversion module may determine base locations of files and settings by monitoring at least one process associated with the software application. The instant disclosure also includes various other embodiments, alternatives, and examples for transitioning a software application from a non-layered installation to a layered installation.","Throughout the drawings, identical reference characters and descriptions indicate similar, but not necessarily identical, elements. While the exemplary embodiments described herein are susceptible to various modifications and alternative forms, specific embodiments have been shown by way of example in the drawings and will be described in detail herein. However, the exemplary embodiments described herein are not intended to be limited to the particular forms disclosed. Rather, the instant disclosure covers all modifications, equivalents, and alternatives falling within the scope of the appended claims.","Embodiments of the present disclosure provide various methods and systems for converting a non-layered installation of a software application into a layered installation of the software application. For example, an installation-conversion module may receive a request to convert a non-layered installation of a software application into a layered installation of the software application. The installation-conversion module may also determine a base location of at least one file associated with the non-layered installation of the software application and provide the layered installation of the software application by transitioning the at least one file from the base location to a virtualization layer.","Embodiments of the present disclosure may provide various advantages and features that are not provided by traditional technologies. For example, methods and systems described herein may allow for an installed application to take advantage of application layering. Thus, a user may be able to transition settings, files, and\/or other information associated with a non-layered installation of an application to a layered installation of the application. These and other embodiments, features, and advantages will be more fully understood upon reading the following detailed description in conjunction with the accompanying drawings and claims.",{"@attributes":{"id":"p-0021","num":"0020"},"figref":["FIG. 1","FIGS. 2 and 3","FIGS. 4-7","FIGS. 8-9"]},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 1","b":["100","100","110","120","130","140","130","140","100"]},"Installation-conversion module  may represent one or more software applications or programs that, when executed by a computing system, may cause the computing system to perform one or more of the steps disclosed herein, such as receiving a request to convert a non-layered installation of a software application into a layered installation of the software application, determining a base location of at least one file associated with the non-layered installation of the software application, and\/or providing the layered installation of the software application by transitioning the at least one file from the base location to a virtualization layer.","As will be described in greater detail below, installation-conversion module  may represent a software module configured to run on one or more computing devices, such as computing system  in  and\/or portions of exemplary network architecture  in . Installation-conversion module  may also represent all or portions of one or more special-purpose computers configured to perform one or more of the tasks associated with steps disclosed herein.","As previously noted, layering computing system  may include database . Database  may represent a portion of one or more computing devices. For example, database  may represent a portion of computing system  in  and\/or potions of exemplary network architecture  in . Database  may be implemented using any suitable data structure or data storage mechanism. Database  may include a layered-installation package .","Layered-installation package  may include information that indicates where to look for and\/or how to identify an application's executables, settings, and\/or other files. For example, a layered-installation package may be a layered MICROSOFT INSTALLER (MSI) package. As described in the discussion of , such packages may be useful in converting an existing installation of a software application into a layered installation of the software application.","Layering computing system_ also includes virtualization layer . As used herein, the phrase \u201cvirtualization layer\u201d generally refers to any virtualization technology capable of providing a layered (i.e., virtualized) installation of an application. For example, a virtualization layer may provide a layer of abstraction between an operating system and a software application by redirecting system calls for the software application's files, processes, and settings.  provide various examples and explanations of virtualization layers.","Virtualization layer  may include a layered installation of a software application . As used herein the phrase \u201clayered installation of a software application\u201d generally refers to any software application with one or more settings, executable files, data files, and\/or other files stored on a virtualization layer. For example, a layered installation of a software application may include a set of files and registry settings encapsulated in a virtualization layer. From the perspective of users and\/or an underlying operating system, a layered installation of a software application may be indistinguishable from a conventionally installed application.","In addition to virtualization layer , system  includes base locations . As used herein, the phrase \u201cbase location\u201d may refer to a location of a file or setting in a non-layered installation of a software application. In some embodiments, a base location may be a location where a software application installs or stores a file when the software application is not virtualized.","As shown in , base locations  may include a non-layered installation of a software application . A non-layered installation of a software application may include any installation of a software application that is not installed on a virtualization layer. For example, a non-layered installation of a software application may be an installation of a software application where the software application's settings, executable files, data files, and other files are installed in base locations on a computing system.",{"@attributes":{"id":"p-0031","num":"0030"},"figref":["FIG. 2","FIG. 2","FIG. 2"],"b":["110","210","110"]},"At step , installation-conversion module  may determine a base location of at least one file associated with the non-layered installation of the software application. Installation-conversion module  may determine the base location of the file using any suitable base-location-determination mechanism. For example, installation-conversion module  may reference a layered-installation package associated with the non-layered installation to determine the base location of the file. A layered-installation package may be associated with a non-layered installation if the layered-installation package is for installing the software application of the non-layered installation. Installation-conversion module  may use the layered-installation package to determine the base location by using information in the layered-installation package to determine where the software application typically installs the file.","In other embodiments, installation-conversion module  may monitor at least one process associated with the software application to determine the base location of the file. For example, while the software application is running from its non-layered installation, installation-conversion module  may monitor a process of the software application. Installation-conversion module  may determine the base location of the file by monitoring where the software application accesses the file. In some embodiments, installation-conversion module  may monitor one or more processes of the software application during one or more user sessions to determine base locations of files associated with the software application.","In other embodiments, installation-conversion module  may receive input from a user to determine the base location of the file. For example, installation-conversion module  may ask a user where one or more files associated with the software application are located. In some embodiments, installation-conversion module  may query a user about which files and settings of an application should be moved into a virtualization layer.","At step , installation-conversion module  may create the layered installation of the software application by transitioning the file from the base location to a virtualization layer. By transitioning the file from the base location to the virtualization layer, installation-conversion module  may transform a non-layered-software-application installation into a layer installation. Installation-conversion module  may use one or more transitioning mechanisms to transition the file from the base location to the virtualization layer. In some embodiments, installation-conversion module  may transition the file from the base location to the virtualization layer by moving the file from the base location to the virtualization layer. For example, the file may be ripped from the base location and saved to the virtualization layer. In such embodiments, if the file is a shared file, installation-conversion module  may need to adjust a usage count of the file.","In other embodiments, installation-conversion module  may transition the file from the base location to a virtualization layer by copying the file from the base location to the virtualization layer and initiating an uninstaller to uninstall the non-layered installation of the software application. In such embodiments, a traditional application uninstaller may be used to uninstall the non-layered installation of the software application, thereby removing the file from the base location.","As used herein, the term \u201cfile\u201d may refer to an executable file, a data file, setting information (e.g., a registry key), and\/or any other type of file. In some embodiments, one or more executable files, data files, settings, and\/or other files associated with the software application may be transitioned from base locations to the virtualization layer. Installation-conversion module  may transition any type of executable file, data file, setting, or other file from a base location to a virtual layer. Executable files may include any files that contain instructions of a software application. Data files may include any files that contain data created, manipulated, or otherwise accessed by the software application. Settings may include registry keys and\/or information that indicate one or more settings of the software application.",{"@attributes":{"id":"p-0038","num":"0037"},"figref":["FIG. 3","FIG. 3","FIG. 3"],"b":["110","310","110"]},"At step , installation-conversion module  may reference a layered-installation package to determine a base location of at least one file associated with the non-layered installation of the software application. At step , installation-conversion module  may copy the at least one file from the base location to a virtualization layer. Then, at step  installation-conversion module  may initiate an uninstaller to uninstall the non-layered installation of the software application. The uninstaller may be an uninstaller associated with the non-layered installation of the software application.",{"@attributes":{"id":"p-0040","num":"0039"},"figref":"FIG. 4","b":["410","410","408","408","406","408","406","404","406","410","412","412","400","406","402"]},{"@attributes":{"id":"p-0041","num":"0040"},"figref":["FIG. 5","FIG. 5"],"b":["500","500","502","504","500","508","500","502","502","508","502","502","504","506","504","506","508","502"]},"Application  may make another file access . The virtualization system may not find a corresponding entry in layer B , but may find an entry in layer A . A third file access request  may not have a corresponding entry in layer B  or layer A , and the virtualization system may therefore return an entry from base file system .",{"@attributes":{"id":"p-0043","num":"0042"},"figref":"FIG. 6","b":["614","614","616","618","612","614","600","612","608","600","612"]},"Management application  may provide notices to a Windows Explorer  indicating that the contents of a mounted file system have been changed. Other applications  may interact with the system, performing read and write operations to the file system and registry through system driver . A compression library  may be provided to compress layer information.",{"@attributes":{"id":"p-0045","num":"0044"},"figref":"FIG. 7","b":["702","706","702","704","706","704"],"i":["a","n ","a","n","a","n ","a","n"]},"A layer may isolate an application from a base file system and may include files and a directory structure of the application's installation. The application files and directories may be shadowed or overlaid over the regular operating file system. Shared libraries (such as DLLs), system accessible configuration (such as registry entries), and version control may be managed by a layering subsystem.","Though each layer may be a separate and individual entity within a computing system, the application files, data, and system-accessible configuration may be presented as though they resided in their respective ordinary locations. Thus, an application stored in a layer may appear to the operating system of a computing system as if it had been installed using traditional installation techniques.","Converting non-layered installations of software application to layered installations of software applications may have numerous advantages. For example, if the applications are stored individually in layers, interactions between application files may no longer occur due to conflicting shared libraries (DLLs), as each application may use its virtual libraries before accessing the base operating system. In some embodiments, applications transitioned to a layer in a computing system may be safely and completely uninstalled or removed from the computing system by removing the layer from the image. Isolating application files and configuration data in a layer may provide several benefits, including the ability to delete, disable, and enable applications in a simple way. Converting non-layered installations of applications into layered installations of applications may result in enhanced stability, reliability, usability, and security of a computing system.","A software application installed in a virtualization layer may be an application in any commonly used meaning, including word processors, browsers, system tools, games, and the like, and the principles described herein may also extend to any other software installed to a computing system.",{"@attributes":{"id":"p-0050","num":"0049"},"figref":"FIG. 8","b":["810","810","810","810","814","816"]},"Processor  generally represents any type or form of processing unit capable of processing data or interpreting and executing instructions. In certain embodiments, processor  may receive instructions from a software application or module. These instructions may cause processor  to perform the functions of one or more of the exemplary embodiments described and\/or illustrated herein. For example, processor  may perform and\/or be a means for performing, either alone or in combination with other elements, one or more of the receiving, determining, creating, copying, and\/or initiating steps described herein. Processor  may also perform and\/or be a means for performing any other steps, methods, or processes described and\/or illustrated herein.","System memory  generally represents any type or form of volatile or non-volatile storage device or medium capable of storing data and\/or other computer-readable instructions. Examples of system memory  include, without limitation, random access memory (RAM), read only memory (ROM), flash memory, or any other suitable memory device. Although not required, in certain embodiments computing system  may comprise both a volatile memory unit (such as, for example, system memory ) and a non-volatile storage device (such as, for example, primary storage device , as described in detail below).","In certain embodiments, exemplary computing system  may also comprise one or more components or elements in addition to processor  and system memory . For example, as illustrated in , computing system  may comprise a memory controller , an Input\/Output (I\/O) controller , and a communication interface , each of which may be interconnected via a communication infrastructure . Communication infrastructure  generally represents any type or form of infrastructure capable of facilitating communication between one or more components of a computing device. Examples of communication infrastructure  include, without limitation, a communication bus (such as an ISA, PCI, PCIe, or similar bus) and a network.","Memory controller  generally represents any type or form of device capable of handling memory or data or controlling communication between one or more components of computing system . For example, in certain embodiments memory controller  may control communication between processor , system memory , and I\/O controller  via communication infrastructure . In certain embodiments, memory controller  may perform and\/or be a means for performing, either alone or in combination with other elements, one or more of the steps or features described and\/or illustrated herein, such as receiving, determining, creating, copying, and\/or initiating.","I\/O controller  generally represents any type or form of module capable of coordinating and\/or controlling the input and output functions of a computing device. For example, in certain embodiments I\/O controller  may control or facilitate transfer of data between one or more elements of computing system , such as processor , system memory , communication interface , display adapter , input interface , and storage interface . I\/O controller  may be used, for example, to perform and\/or be a means for performing, either alone or in combination with other elements, one or more of the receiving, determining, creating, copying, and\/or initiating steps described herein. I\/O controller  may also be used to perform and\/or be a means for performing other steps and features set forth in the instant disclosure.","Communication interface  broadly represents any type or form of communication device or adapter capable of facilitating communication between exemplary computing system  and one or more additional devices. For example, in certain embodiments communication interface  may facilitate communication between computing system  and a private or public network comprising additional computing systems. Examples of communication interface  include, without limitation, a wired network interface (such as a network interface card), a wireless network interface (such as a wireless network interface card), a modem, and any other suitable interface. In at least one embodiment, communication interface  may provide a direct connection to a remote server via a direct link to a network, such as the Internet. Communication interface  may also indirectly provide such a connection through, for example, a local area network (such as an Ethernet network), a personal area network, a telephone or cable network, a cellular telephone connection, a satellite data connection, or any other suitable connection.","In certain embodiments, communication interface  may also represent a host adapter configured to facilitate communication between computing system  and one or more additional network or storage devices via an external bus or communications channel Examples of host adapters include, without limitation, SCSI host adapters, USB host adapters, IEEE 894 host adapters, SATA and eSATA host adapters, ATA and PATA host adapters, Fibre Channel interface adapters, Ethernet adapters, or the like. Communication interface  may also allow computing system  to engage in distributed or remote computing. For example, communication interface  may receive instructions from a remote device or send instructions to a remote device for execution. In certain embodiments, communication interface  may perform and\/or be a means for performing, either alone or in combination with other elements, one or more of the receiving, determining, creating, copying, and\/or initiating steps disclosed herein. Communication interface  may also be used to perform and\/or be a means for performing other steps and features set forth in the instant disclosure.","As illustrated in , computing system  may also comprise at least one display device  coupled to communication infrastructure  via a display adapter . Display device  generally represents any type or form of device capable of visually displaying information forwarded by display adapter . Similarly, display adapter  generally represents any type or form of device configured to forward graphics, text, and other data from communication infrastructure  (or from a frame buffer, as known in the art) for display on display device .","As illustrated in , exemplary computing system  may also comprise at least one input device  coupled to communication infrastructure  via an input interface . Input device  generally represents any type or form of input device capable of providing input, either computer or human generated, to exemplary computing system . Examples of input device  include, without limitation, a keyboard, a pointing device, a speech recognition device, or any other input device. In at least one embodiment, input device  may perform and\/or be a means for performing, either alone or in combination with other elements, one or more of the receiving, determining, creating, copying, and\/or initiating steps disclosed herein. Input device  may also be used to perform and\/or be a means for performing other steps and features set forth in the instant disclosure.","As illustrated in , exemplary computing system  may also comprise a primary storage device  and a backup storage device  coupled to communication infrastructure  via a storage interface . Storage devices  and  generally represent any type or form of storage device or medium capable of storing data and\/or other computer-readable instructions. For example, storage devices  and  may be a magnetic disk drive (i.e., a so-called hard drive), a floppy disk drive, a magnetic tape drive, an optical disk drive, a flash drive, or the like. Storage interface  generally represents any type or form of interface or device for transferring data between storage devices  and  and other components of computing system .","In certain embodiments, storage devices  and  may be configured to read from and\/or write to a removable storage unit configured to store computer software, data, or other computer-readable information. Examples of suitable removable storage units include, without limitation, a floppy disk, a magnetic tape, an optical disk, a flash memory device, or the like. Storage devices  and  may also comprise other similar structures or devices for allowing computer software, data, or other computer-readable instructions to be loaded into computing system . For example, storage devices  and  may be configured to read and write software, data, or other computer-readable information. Storage devices  and  may also be a part of computing system  or may be a separate device accessed through other interface systems.","In certain embodiments, the exemplary file systems disclosed herein may be stored on primary storage device , while the exemplary file-system backups disclosed herein may be stored on backup storage device . Storage devices  and  may also be used, for example, to perform and\/or be a means for performing, either alone or in combination with other elements, one or more of the receiving, determining, creating, copying, and\/or initiating steps disclosed herein. Storage devices  and  may also be used to perform and\/or be a means for performing other steps and features set forth in the instant disclosure.","Many other devices or subsystems may be connected to computing system . Conversely, all of the components and devices illustrated in  need not be present to practice the embodiments described and\/or illustrated herein. The devices and subsystems referenced above may also be interconnected in different ways from that shown in . Computing system  may also employ any number of software, firmware, and\/or hardware configurations. For example, one or more of the exemplary embodiments disclosed herein may be encoded as a computer program (also referred to as computer software, software applications, computer-readable instructions, or computer control logic) on a computer-readable medium. The phrase \u201ccomputer-readable medium\u201d generally refers to any form of device, carrier, or medium capable of storing or carrying computer-readable instructions. Examples of computer-readable media include, without limitation, transmission-type media, such as carrier waves, and physical media, such as magnetic-storage media (i.e., hard disk drives and floppy disks), optical-storage media (i.e., CD- or DVD-ROMs), electronic-storage media (i.e., solid-state drives and flash media), and other distribution systems.","The computer-readable medium containing the computer program may be loaded into computing system . All or a portion of the computer program stored on the computer-readable medium may then be stored in system memory  and\/or various portions of storage devices  and . When executed by processor , a computer program loaded into computing system  may cause processor  to perform and\/or be a means for performing the functions of one or more of the exemplary embodiments described and\/or illustrated herein. Additionally or alternately, one or more of the exemplary embodiments described and\/or illustrated herein may be implemented in firmware and\/or hardware. For example, computing system  may be configured as an application specific integrated circuit (ASIC) adapted to implement one or more of the exemplary embodiments disclosed herein.",{"@attributes":{"id":"p-0065","num":"0064"},"figref":["FIG. 9","FIG. 8"],"b":["900","910","920","930","940","945","950","910","920","930","810","940","945","950"]},"As illustrated in , one or more storage devices ()-(N) may be directly attached to server . Similarly, one or more storage devices ()-(N) may be directly attached to server . Storage devices ()-(N) and storage devices ()-(N) generally represent any type or form of storage device or medium capable of storing data and\/or other computer-readable instructions. In certain embodiments, storage devices ()-(N) and storage devices ()-(N) may represent network-attached storage (NAS) devices configured to communicate with servers  and  using various protocols, such as NFS, SMB, or CIFS.","Servers  and  may also be connected to a storage area network (SAN) fabric . SAN fabric  generally represents any type or form of computer network or architecture capable of facilitating communication between a plurality of storage devices. SAN fabric  may facilitate communication between servers  and  and a plurality of storage devices ()-(N) and\/or an intelligent storage array . SAN fabric  may also facilitate, via network  and servers  and , communication between client systems , , and  and storage devices ()-(N) and\/or intelligent storage array  in such a manner that devices ()-(N) and array  appear as locally attached devices to client systems , , and . As with storage devices ()-(N) and storage devices ()-(N), storage devices ()-(N) and intelligent storage array  generally represent any type or form of storage device or medium capable of storing data and\/or other computer-readable instructions.","In certain embodiments, and with reference to exemplary computing system  of , a communication interface, such as communication interface  in , may be used to provide connectivity between each client system , , and  and network . Client systems , , and  may be able to access information on server  or  using, for example, a web browser or other client software. Such software may allow client systems , , and  to access data hosted by server , server , storage devices ()-(N), storage devices ()-(N), storage devices ()-(N), or intelligent storage array . Although  depicts the use of a network (such as the Internet) for exchanging data, the embodiments described and\/or illustrated herein are not limited to the Internet or any particular network-based environment.","In at least one embodiment, all or a portion of one or more of the exemplary embodiments disclosed herein may be encoded as a computer program and loaded onto and executed by server , server , storage devices ()-(N), storage devices ()-(N), storage devices ()-(N), intelligent storage array , or any combination thereof. All or a portion of one or more of the exemplary embodiments disclosed herein may also be encoded as a computer program, stored in server , run by server , and distributed to client systems , , and  over network . Accordingly, network architecture  may perform and\/or be a means for performing, either alone or in combination with other elements, one or more of the receiving, determining, creating, copying, and\/or initiating steps disclosed herein. Network architecture  may also be used to perform and\/or be a means for performing other steps and features set forth in the instant disclosure.","As detailed above, computing system  and\/or one or more of components of network architecture  may perform and\/or be a means a performing, either alone or in combination with other elements, one or more steps of the exemplary methods described and\/or illustrated herein. For example, a computing system (e.g., computing system  and\/or one or more of the components of network architecture ) may perform a computer-implemented method for converting a non-layered installation of a software application into a layered installation of the software application. The computing system may receive a request to convert a non-layered installation of a software application into a layered installation of the software application, determine a base location of at least one file associated with the non-layered installation of the software application, and create the layered installation of the software application by transitioning the at least one file from the base location to a virtualization layer.","In some embodiments, the computing system may transition the at least one file from the base location to a virtualization layer by moving the at least one file from the base location to the virtualization layer. In other embodiments, the computing system may transition the at least one file from the base location to the virtualization layer by copying the at least one file from the base location to the virtualization layer and initiating an uninstaller to uninstall the non-layered installation of the software application.","According to certain embodiments, the computing system may determine the base location of the at least one file by referencing a layered-installation package associated with the non-layered installation. In various embodiments, the computing system may determine the base location of the at least one file by monitoring at least one process associated with the software application. In some embodiments, the computing system may determine the base location of the at least one file by receiving input from a user.","In various embodiments, the layered installation of the software application may cause requests from the software application to access the at least one file to be redirected to the virtualization layer. In some embodiments, the at least one file may include an executable of the application, a registry key of the application, and\/or a data file associated with the application.","According to certain embodiments, the computing system may determine a base location of at least one file associated with the non-layered installation of the software application by determining base locations of executable files, data files, and settings associated with the software application. The computing system may provide the layered installation of the software application by transitioning the executable files, data files, and settings from the base locations to the virtualization layer.","In some embodiments, a system may include a database configured to store a layered-installation package of a software application. The system may also include an installation-conversion module in communication with the database and programmed to: receive a request to convert a non-layered installation of a software application into a layered installation of the software application, reference the layered-installation package to determine a base location of at least one file associated with the non-layered installation of the software application, and provide the layered installation of the software application by transitioning the at least one file from the base location to a virtualization layer.","According to various embodiments, transitioning the at least one file from the base location to the virtualization layer may include moving the at least one file from the base location to the virtualization layer. In some embodiments, transitioning the at least one file from the base location to a virtualization layer may include copying the at least one file from the base location to the virtualization layer and initiating an uninstaller to uninstall the non-layered installation of the software application. In at least one embodiment, the installation conversion module may be further programmed to: determine base locations of at least one executable file, at least one data file, and at least one setting associated with the software application, and transition the at least one executable file, at least one data file, and at least one setting from the base locations to the virtualization layer.","According to certain embodiments, a computer-readable medium may include one or more computer-executable instructions that, when executed by a computing device, may cause the computing device to receive a request to convert a non-layered installation of a software application into a layered installation of the software application, determine a base location of at least one file associated with the non-layered installation of the software application, and create the layered installation of the software application by transitioning the at least one file from the base location to a virtualization layer.","In some embodiments, transitioning the at least one file from the base location to a virtualization layer may include copying the at least one file from the base location to the virtualization layer and initiating an uninstaller to uninstall the non-layered installation of the software application. In various embodiments, the one or more computer-executable instructions that determine the base location of the at least one file may be configured to reference a layered-installation package associated with the non-layered installation. In certain embodiments, the one or more computer-executable instructions may be further configured to cause the computing device to: determine base locations of executable files, data files, and settings associated with the software application and transition the executable files, data files, and settings from the base locations to the virtualization layer.","While the foregoing disclosure sets forth various embodiments using specific block diagrams, flowcharts, and examples, each block diagram component, flowchart step, operation, and\/or component described and\/or illustrated herein may be implemented, individually and\/or collectively, using a wide range of hardware, software, or firmware (or any combination thereof) configurations. In addition, any disclosure of components contained within other components should be considered exemplary in nature since many other architectures can be implemented to achieve the same functionality.","The process parameters and sequence of steps described and\/or illustrated herein are given by way of example only and can be varied as desired. For example, while the steps illustrated and\/or described herein may be shown or discussed in a particular order, these steps do not necessarily need to be performed in the order illustrated or discussed. The various exemplary methods described and\/or illustrated herein may also omit one or more of the steps described or illustrated herein or include additional steps in addition to those disclosed.","Furthermore, while various embodiments have been described and\/or illustrated herein in the context of fully functional computing systems, one or more of these exemplary embodiments may be distributed as a program product in a variety of forms, regardless of the particular type of computer-readable media used to actually carry out the distribution. The embodiments disclosed herein may also be implemented using software modules that perform certain tasks. These software modules may include script, batch, or other executable files that may be stored on a computer-readable storage medium or in a computing system. In some embodiments, these software modules may configure a computing system to perform one or more of the exemplary embodiments disclosed herein.","The preceding description has been provided to enable others skilled in the art to best utilize various aspects of the exemplary embodiments described herein. This exemplary description is not intended to be exhaustive or to be limited to any precise form disclosed. Many modifications and variations are possible without departing from the spirit and scope of the instant disclosure. It is desired that the embodiments described herein be considered in all respects illustrative and not restrictive and that reference be made to the appended claims and their equivalents for determining the scope of the instant disclosure.","Unless otherwise noted, the terms \u201ca\u201d or \u201can,\u201d as used in the specification and claims, are to be construed as meaning \u201cat least one of.\u201d In addition, for ease of use, the words \u201cincluding\u201d and \u201chaving,\u201d as used in the specification and claims, are interchangeable with and have the same meaning as the word \u201ccomprising.\u201d"],"heading":["SUMMARY","DETAILED DESCRIPTION OF EXEMPLARY EMBODIMENTS"],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The accompanying drawings illustrate a number of exemplary embodiments and are a part of the specification. Together with the following description, these drawings demonstrate and explain various principles of the instant disclosure.",{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 9"}]},"DETDESC":[{},{}]}
