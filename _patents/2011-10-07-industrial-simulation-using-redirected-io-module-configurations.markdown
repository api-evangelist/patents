---
title: Industrial simulation using redirected I/O module configurations
abstract: A simulation environment for running a process simulation used to validate an industrial control program. The simulation environment exposes the I/O module configurations defined in the control program and retrieves module configuration information therefrom. This I/O module configuration information is combined with generic, module-specific I/O module profiles to create a pool of available controller I/O points, which can be selectively associated with I/O points in the simulation to create an I/O point mapping. During control program validation, simulated I/O data is exchanged between the process simulation and the I/O module instances in the controller in accordance with the I/O point mapping.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08756041&OS=08756041&RS=08756041
owner: Rockwell Automation Technologies, Inc.
number: 08756041
owner_city: Mayfield Heights
owner_country: US
publication_date: 20111007
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","TECHNICAL FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["This application claims priority to U.S. Provisional Application Ser. No. 61\/450,058, filed on Mar. 7, 2011, entitled \u201cINDUSTRIAL SIMULATION USING REDIRECTED I\/O MODULE CONFIGURATIONS,\u201d the entirety of which is incorporated by reference.","The subject application relates generally to industrial control and simulation, and, more particularly, to an industrial simulation environment that leverages I\/O module configurations to exchange I\/O data with a controller during validation.","Industrial controllers and their associated control programming are central to the operation of modern industrial automation systems. These controllers interact with field devices on the plant floor to carry out controlled processes relating to such objectives as manufacture of a product, material handling, batch processing, waste water treatment, and other such processes. The controllers typically exchange data with the field devices using native hardwired I\/O or via a plant network such as Ethernet\/IP, Data Highway Plus, ControlNet, Devicenet, or the like. The controller receives any combination of digital or analog signals from the field devices indicating a current state of the devices and their associated processes (e.g., temperature, position, part presence or absence, fluid level, etc.), and executes a control program that performs automated decision-making for the controlled processes based on the received signals. The controller then outputs appropriate digital and\/or analog control signaling to the field devices in accordance with the decisions made by the control program. These outputs can include device actuation signals, temperature or position control signals, operational commands to a machining or material handling robot, and the like. The control program can comprise any conceivable type of code used to process input signals read into the controller and to control output signals generated by the controller, including but not limited to ladder logic, sequential function charts, function block diagrams, structured text, or other such platforms.","During development of a given control program, a plant simulation is often used to validate the program prior to deployment. This simulation emulates various aspects of the physical system to be regulated by the control program (e.g., actuators, sensors, etc.) and interfaces with the control program under test to exchange I\/O data in order to simulate real-time control. The plant simulation generates digital and analog values representing sensor or telemetry data, which are provided to the control program as simulated physical inputs. The control program processes these simulated inputs and generates digital and\/or analog output data in accordance with the program algorithms, and provides this output data to the plant simulation. The plant simulation then updates the simulated control input values based on the control outputs provided by the control program in a manner that simulates operation of the real-world system. In this way, the control program can be tested and debugged without putting field equipment and machinery at risk.","There are a number of inefficiencies inherent to conventional industrial simulation techniques that are detrimental to data fidelity, update rates, and simulation accuracy. For example, since there are no physical field devices wired to the controller's I\/O modules during simulation, simulated I\/O data must be exchanged via a direct connection to the controller's I\/O data table. That is, output data generated by the control program is read directly from the controller's data table by the simulation rather than being converted to an electrical signal and transmitted by the controller's physical output points. Likewise, simulated I\/O data generated by the simulation must be written directly to the controller's data table rather than being received as an electrical signal at one of the controller's physical inputs. To achieve this linkage between the controller's data table and the simulation, a middleware layer (e.g., an OPC server), is conventionally used to link the simulation's I\/O points to the appropriate data table addresses within the controller. I\/O data is then exchanged via the middleware layer, placing a non-deterministic layer between the simulation and the controller that can negatively impact transmission latency and data fidelity. This issue is often compounded by the fact that the plant simulation typically executes on a general-purpose computer or workstation, where the computer's operating system functions can interrupt simulation execution during validation.","Moreover, because the simulated I\/O data is read from and written to the I\/O data table directly by the middleware layer, the I\/O modules and their associated module configurations are effectively bypassed during simulation. Consequently, simulated I\/O data must be exchanged between the controller and the simulation as engineering units suitable for processing by the control program, rather than as raw values that would normally be received at the controller's I\/O and scaled in accordance with the I\/O module's user-defined scale factors. Since the I\/O module configurations are not taken into consideration during validation, the simulation is rendered less representative of the real-world system. This also leaves the I\/O module configurations themselves\u2014as well as the control program's behavior given those module configurations\u2014untested prior to deployment.","In a related problem, since the I\/O module configurations cannot be used during execution of the simulation, it is necessary in some cases to disable or remove the I\/O module configurations during simulation to allow the simulated I\/O values to be written to the I\/O data table registers. Another method for bypassing the I\/O module configurations during simulation is to employ temporary controller addresses in the control program in lieu of the actual I\/O addresses that will be used to send and receive I\/O data when the system is deployed. Both of these techniques necessitate excessive configuration work, both to bypass the I\/O module configurations prior to simulation, and to reinstate the module configurations when the system is deployed.","Also, middleware-based simulations, such as those using OPC server as described above, lack the ability to synchronize the respective clocks of the controller and the simulation. This lack of synchronization capability can adversely impact the fidelity of the simulation, since intensive processing on the simulation side can introduce unrealistic time delays in the exchange of I\/O data.","The above-described deficiencies of today's automation control simulations systems are merely intended to provide an overview of some of the problems of conventional systems, and are not intended to be exhaustive. Other problems with conventional systems and corresponding benefits of the various non-limiting embodiments described herein may become further apparent upon review of the following description.","The following presents a simplified summary in order to provide a basic understanding of some aspects described herein. This summary is not an extensive overview nor is intended to identify key\/critical elements or to delineate the scope of the various aspects described herein. Its sole purpose is to present some concepts in a simplified form as a prelude to the more detailed description that is presented later.","One or more embodiments of the present disclosure relate to an automation simulation system that leverages the I\/O module configuration information within an industrial controller to provide direct communication between a plant simulation and the controller's I\/O module instances. The simulation system can query a controller and retrieve information regarding the I\/O module configurations therein. This can include identifying the I\/O modules in use and their respective user-defined parameters (e.g., I\/O point names, scale factors, operating ranges, signal types, disabled points, etc.). The simulation system can then access a directory service to retrieve generic I\/O module profiles corresponding to the I\/O modules in use. The simulation system customizes these generic I\/O module profiles using the configuration information retrieved from the controller to yield an I\/O connection pool that instructs the simulation how to communicate with the controller's various I\/O points.","During simulation, a simulated I\/O kernel leverages this I\/O connection pool to exchange simulated I\/O data with the I\/O module instances in the controller rather than exchange data directly with the I\/O data table. This more accurately simulates exchange of physical I\/O signals, since the simulated I\/O can be exchanged as raw values and processed by the I\/O module configurations (e.g., scaled, range limited, etc.) as in the real-world system. Thus, the behaviors of the I\/O modules associated with the control program being tested are incorporated into the simulation process.","In one or more embodiments, the simulation environment can be embodied on a simulation module that attaches to the controller's chassis and communicates with the controller via the backplane. In some such embodiments, the simulation can employ a CIP (Common Industrial Protocol) service that allows I\/O messages to be packaged and transmitted across the controller backplane, which acts as a simulated network during validation.","In another aspect according to one or more embodiments, the simulation system can employ a synchronization mechanism that maintains synchronization between the respective controller and simulation clocks during program validation. This synchronization mechanism can employ a modified IEEE 1588 Precision Time Protocol (PTP) that compensates for inconsistent clock speeds by allowing the master clock designation to be dynamically adjusted based on an evaluation of the respective clock speeds.","To the accomplishment of the foregoing and related ends, certain illustrative aspects are described herein in connection with the following description and the annexed drawings. These aspects are indicative of various ways which can be practiced, all of which are intended to be covered herein. Other advantages and novel features may become apparent from the following detailed description when considered in conjunction with the drawings.","The subject disclosure is now described with reference to the drawings, wherein like reference numerals are used to refer to like elements throughout. In the following description, for purposes of explanation, numerous specific details are set forth in order to provide a thorough understanding thereof. It may be evident, however, that the subject disclosure can be practiced without these specific details. In other instances, well-known structures and devices are shown in block diagram form in order to facilitate a description thereof.","As used in this application, the terms \u201ccomponent,\u201d \u201csystem,\u201d \u201cplatform,\u201d \u201clayer,\u201d \u201ccontroller,\u201d \u201cterminal,\u201d \u201cstation,\u201d \u201cnode,\u201d \u201cinterface\u201d are intended to refer to a computer-related entity or an entity related to, or that is part of, an operational apparatus with one or more specific functionalities, wherein such entities can be either hardware, a combination of hardware and software, software, or software in execution. For example, a component can be, but is not limited to being, a process running on a processor, a processor, a hard disk drive, multiple storage drives (of optical or magnetic storage medium) including affixed (e.g., screwed or bolted) or removably affixed solid-state storage drives; an object; an executable; a thread of execution; a computer-executable program, and\/or a computer. By way of illustration, both an application running on a server and the server can be a component. One or more components can reside within a process and\/or thread of execution, and a component can be localized on one computer and\/or distributed between two or more computers. Also, components as described herein can execute from various computer readable storage media having various data structures stored thereon. The components may communicate via local and\/or remote processes such as in accordance with a signal having one or more data packets (e.g., data from one component interacting with another component in a local system, distributed system, and\/or across a network such as the Internet with other systems via the signal). As another example, a component can be an apparatus with specific functionality provided by mechanical parts operated by electric or electronic circuitry which is operated by a software or a firmware application executed by a processor, wherein the processor can be internal or external to the apparatus and executes at least a part of the software or firmware application. As yet another example, a component can be an apparatus that provides specific functionality through electronic components without mechanical parts, the electronic components can include a processor therein to execute software or firmware that provides at least in part the functionality of the electronic components. As further yet another example, interface(s) can include input\/output (I\/O) components as well as associated processor, application, or Application Programming Interface (API) components. While the foregoing examples are directed to aspects of a component, the exemplified aspects or features also apply to a system, platform, interface, layer, controller, terminal, and the like.","As used herein, the terms \u201cto infer\u201d and \u201cinference\u201d refer generally to the process of reasoning about or inferring states of the system, environment, and\/or user from a set of observations as captured via events and\/or data. Inference can be employed to identify a specific context or action, or can generate a probability distribution over states, for example. The inference can be probabilistic\u2014that is, the computation of a probability distribution over states of interest based on a consideration of data and events. Inference can also refer to techniques employed for composing higher-level events from a set of events and\/or data. Such inference results in the construction of new events or actions from a set of observed events and\/or stored event data, whether or not the events are correlated in close temporal proximity, and whether the events and data come from one or several event and data sources.","In addition, the term \u201cor\u201d is intended to mean an inclusive \u201cor\u201d rather than an exclusive \u201cor.\u201d That is, unless specified otherwise, or clear from the context, the phrase \u201cX employs A or B\u201d is intended to mean any of the natural inclusive permutations. That is, the phrase \u201cX employs A or B\u201d is satisfied by any of the following instances: X employs A; X employs B; or X employs both A and B. In addition, the articles \u201ca\u201d and \u201can\u201d as used in this application and the appended claims should generally be construed to mean \u201cone or more\u201d unless specified otherwise or clear from the context to be directed to a singular form.","Furthermore, the term \u201cset\u201d as employed herein excludes the empty set; e.g., the set with no elements therein. Thus, a \u201cset\u201d in the subject disclosure includes one or more elements or entities. As an illustration, a set of controllers includes one or more controllers; a set of data resources includes one or more data resources; etc. Likewise, the term \u201cgroup\u201d as utilized herein refers to a collection of one or more entities; e.g., a group of nodes refers to one or more nodes.","Various aspects or features will be presented in terms of systems that may include a number of devices, components, modules, and the like. It is to be understood and appreciated that the various systems may include additional devices, components, modules, etc. and\/or may not include all of the devices, components, modules etc. discussed in connection with the figures. A combination of these approaches also can be used.","To provide context for aspects of the present innovation,  illustrates a high-level overview of the interactions between a control program under test and a simulation of a process to be controlled by the program. Control program  can comprise any conceivable type of code used to process input signals read into a controller and to control output signals from the controller, including but not limited to ladder logic, sequential function charts, function block diagrams, or structured text. Control program  is designed to regulate a plant or an automation system therein. Process simulation  is a dynamic model representing the plant or automation system to be regulated by control program . Process simulation  mathematically models the system to be regulated by generating digital and analog I\/O values representing, for example, sensor outputs, metering outputs, or other plant data analogous to the data expected to be generated by the physical system being modeled. This simulated output data  is provided to the control program, which receives this data as one or more virtual physical inputs. Control program  processes these inputs according to user-defined algorithms, and generates digital and\/or analog controller output data  based on the processing. This output data  represents the physical outputs that would be generated by a controller executing control program  and transmitted to the hardwired field devices comprising the automation system (e.g., PID loop control outputs, solenoid energizing outputs, motor control outputs, etc.). The controller output data  is provided to the appropriate input points of the process simulation , which updates the simulated output data  accordingly. In this way, correct operation of control program  can be validated before deployment without the risk of damaging physical equipment.","In some simulation scenarios, both the control program  and the process simulation  execute on a shared memory environment on a common workstation. In other cases, the control program  executes on an industrial controller, while the simulation runs on a separate workstation or computer and exchanges simulated I\/O data with the controller across a network connection. In both of these simulation configurations, there are a number of non-deterministic layers between the process simulation and the control program.  depicts an exemplary simulation configuration that illustrates a number of drawbacks with conventional simulation techniques. Controller  can comprise, for example a programmable automation controller (PAC), a soft controller configured to execute on a personal computer, or other such controller, and can include one or more processors capable of executing control program . Control program  can comprise any conceivable type of code used to process input signals read into the controller  and to control output signals from the controller, including but not limited to ladder logic, sequential function charts, function block diagrams, or structured text.","Controller  can also include one or more physical I\/O modules  that provide hardwired or networked connectivity to controlled equipment and telemetry devices comprising a controlled system. These I\/O interfaces can include, for example, digital and\/or analog input modules, digital and\/or analog output modules, networking modules, or the like. An I\/O data table  within the controller's memory can maintain the present analog and digital values of the various inputs and outputs read from or written to the I\/O modules . That is, data values read from field devices by I\/O modules  (e.g., analog or digital input modules) are written to the I\/O data table . These input values are then read by control program , which updates its control variables accordingly. Similarly, output values generated by the control program  are written to I\/O table , causing commensurate output data signals to be generated by the analog or digital output modules comprising the I\/O interfaces .","Each physical I\/O module  is associated with an I\/O module instance  in the controller. These I\/O module instances act as processing interfaces between their respective modules and the I\/O data table , and process the I\/O data in accordance with I\/O module configurations associated with the respective modules. Turning briefly to , the relationship between the I\/O modules, I\/O module instances, and I\/O module configurations is described in more detail. Each I\/O module -attached to exemplary controller  has an associated I\/O module configuration -. Operational parameters associated with the I\/O module configurations are configurable through the controller's programming interface. A number of possible configuration parameters for an exemplary I\/O module configuration  are depicted in . Exemplary parameters that can be configured via the module configuration include, but are not limited to, the I\/O point name, functional description, allowable operating ranges, analog input scale factors, or signal type. The I\/O point names or descriptions can comprise, for example, labels, tag names, or textual descriptions associated with each point of the module. The allowable operating ranges can comprise permissible maximum and minimum values for signal data received or transmitted by each point of the module. Scale factors represent multipliers to be applied to received analog input data. For example, when an analog input signal is received at a physical I\/O point on the module, the I\/O module instance sees this signal as a raw value. The scale factor configured for the I\/O point is then applied to the raw value to yield the value (typically in engineering units) used by the control program. The signal type defines the type of analog signal to be used for each point of an analog input or output module (e.g., 4-20 mA current signal, 0-10 Vdc voltage signal, etc.).","Each I\/O module -depicted in  has a corresponding I\/O module instance -, which, as noted above, acts as an interface between its respective module and the I\/O data table. Returning now to the exemplary conventional simulation system of , when the controller  is deployed in the field, the I\/O module instances  process the I\/O data received by or delivered to the physical I\/O modules in accordance with the parameters defined in the I\/O module configurations for the respective physical I\/O modules. For example, when an analog input signal is received at a terminal of an analog input module (e.g., as a 4-20 mA signal, a 0-10 Vdc signal, etc.), the controller sees this signal as a raw (unsealed) value. The I\/O module instance associated with the analog input module applies a user-defined scale factor to this raw value to produce an engineering value, which is written to the I\/O table  for processing by the control program . The I\/O module instance can also enforce defined operating range limits on the input value, or perform other type of processing on the input data in accordance with the I\/O module configuration associated with the input module. Similarly, when the control program  generates an output value to be transmitted to a device via an analog output module, the program typically writes the value to the address in the I\/O data table  corresponding with the target output module point. The control program writes this value to the I\/O data table  in engineering units, and the I\/O module instance associated with the output module converts this engineering unit to an appropriate raw value used by the output module to generate the appropriately scaled output signal. As with the input module, the I\/O module instance associated with the output module can apply appropriate user-defined processing on the output value in accordance with the I\/O module configuration associated with the output module.","On the simulation side, process simulation  executes on a simulation workstation , which can be general-purpose computer, laptop, or other suitable platform. Process simulation  is an interactive algorithmic model of a physical automation system or plant to be regulated by control program . Simulation  generates digital and\/or analog I\/O data corresponding to physical I\/O points in the real-world automation system, based in part on digital and\/or analog output data provided to the simulation  by control program . In the present example, controller  and simulation workstation  communicate over a network  (e.g., Ethernet). Since process simulation  takes the place of the physical automation system for the purposes of program validation, I\/O data that would otherwise be exchanged with physical equipment and devices via the physical I\/O interface(s)  is instead exchanged with the simulation via network . For example, output data generated by control program  is written to the I\/O table  in the normal fashion; however, instead of being processed by the I\/O module instances  and transmitted via physical I\/O modules  to field devices, the output values are read into the process simulation  via network . Likewise, data values representing inputs to the controller  are written to the I\/O table  across network  for processing by control program . Thus, the I\/O module instances , and their associated I\/O module configurations, are effectively bypassed during simulation using the conventional simulation methods illustrated in .","In order to link the I\/O points of process simulation  with the appropriate registers of I\/O table  in the controller , a middleware server  is often employed as an intermediate layer through which the simulation and the controller exchange data. Middleware server  can comprise, for example, an OPC (Object Linking and Embedding for Process Control) server that includes an I\/O mapping  defining the communicative associations between I\/O points in the simulation  and I\/O data table registers in the controller . I\/O data generated by the simulation  to be sent to controller  is first written to the middleware server , which then writes the data to the appropriate register(s) in I\/O data table  in accordance with I\/O mapping . In the reverse direction, middleware server  monitors the I\/O table registers specified by I\/O mapping , detects changes to the values therein, and retrieves the modified values for delivery to simulation .","The presence of the middleware layer between the controller and the simulation introduces a number of problems. For one, fidelity of the I\/O data generated by the simulation is compromised, since the data must pass through at least one additional layer prior to being received at the controller. The middleware layer also introduces additional transmission latency, thereby adversely affecting data update rates between the controller and the simulation. Moreover, operations of the operating system running on the simulation workstation  can sometimes interfere with the execution of simulation , thereby exacerbating these transmission delays. Moreover, the configuration depicted in  lacks the ability to synchronize the execution times of the control program and the simulation. Such synchronization would allow the system to more accurately represent the physical system by rendering response times more representative of real-time operation.","Moreover, as noted above, the simulation configuration depicted in  does not take into consideration the I\/O module configurations associated with the physical I\/O modules. Instead, the simulated I\/O data is exchanged via a direct connection between the controller's I\/O table  and the process simulation , thereby leaving the I\/O module instances and their associated I\/O module configurations out of the simulation scenario. In some cases, the I\/O module configurations must even be disabled or neutralized to allow simulated I\/O values to be written to the I\/O modules' I\/O data table registers by the middleware server without being overwritten by the I\/O module instances. The validation is therefore rendered less accurate, since the role of the I\/O module configurations has been omitted from the simulation procedure. After the validation phase, the I\/O topology needs to be reattached to the control program to revalidate the solution with the real I\/O. Thus, there is a need to merge these two validation steps into one.",{"@attributes":{"id":"p-0047","num":"0046"},"figref":["FIG. 3","FIG. 2","FIG. 2","FIG. 2"],"b":["302","202","320","316","306","302","316","310","318","312","320","318","310","306"]},"Similarly, an output value generated by the control program  (representing, for example, a speed control output to be transmitted to a variable frequency drive as a 4-20 mA signal) can be written to the I\/O data table register corresponding to the appropriate output module point. In accordance with normal controller operation, this value is provided to the I\/O module instance for processing in accordance with a user-defined I\/O module configuration. However, rather than (or in addition to) generating the analog output signal on the output module terminal, the simulated kernel  of the simulation environment is able to read the processed output value from the I\/O module instance and provide this value to the process simulation .","By virtue of the techniques described above, one or more embodiments of the simulation environment described herein provide for redirection of the I\/O module instances  to the simulation environment , such that the I\/O module instances exchange raw I\/O data, not only with their corresponding physical I\/O modules , but also with simulated I\/O kernel  in the simulation environment  (and thereby with process simulation ). These aspects provide a number of advantages over the conventional configuration depicted in . For example, the I\/O module instances  and their associated I\/O module configurations need not be disabled or omitted from the simulation process, but rather are allowed to carry out their normal signal processing functions during simulation. In this regard, the simulated I\/O data values received from the simulation  are treated as raw analog signals that are processed by the I\/O module instances prior to being moved to the I\/O data table, rather than being injected directly to the I\/O data table by the simulation as pre-scaled engineering units. Redirection of the I\/O module instances  also mitigates the additional configuration work required to disable or remove the I\/O module configurations during simulation, which is sometimes necessary when writing data directly to registers in the I\/O data table corresponding to physical I\/O points. Using this simulated I\/O model, a higher fidelity control simulation environment can be achieved to better approximate the real-world scenario.","In order to link I\/O points in the process simulation with the appropriate points of the I\/O module instances in the controller, the simulated I\/O kernel in the simulation environment must be provided with instructions regarding how to connect with the I\/O module instances. One or more embodiments of the simulation platform described herein can leverage the I\/O module configuration information within the controller to create an I\/O connection pool that can be used by the simulation developer to link I\/O points between the simulation and the controller.  illustrates an exemplary system for creating this I\/O connection pool. Controller  executes a control program  designed to control an industrial process. Control program  is to be validated using process simulation , which has been designed to simulate the industrial process to be regulated by control program . The controller  and simulation environment  can exchange data across any suitable communication means, including a physical network (e.g., Ethernet) or across a backplane of the controller's chassis (if the simulation environment is embodied on a controller module). As discussed above, control program  includes a number of I\/O module configurations  that each correspond to an I\/O module that will be employed by controller  and used to exchange I\/O signaling with the industrial process.","Simulation environment  also includes a configuration retrieval component , which can query control program  to determine available I\/O points configured for the program. To this end, configuration retrieval component  can access the I\/O module configurations  and retrieve I\/O point configuration information  based on the module configurations. Configuration retrieval component  is thus able to expose the I\/O module configurations defined in the controller to the simulation environment , making the control program's defined I\/O points available for selective association with the simulation's I\/O points at design time. Configuration information  can include, for example, identification of the I\/O modules in use, as well as the I\/O points that are enabled for each I\/O module and their associated user-specified I\/O point names as defined in the module configurations. The configuration retrieval component can identify the enabled I\/O points in a number of ways. For example, some I\/O module configurations allow the programmer to individually set each point of an I\/O module as being ENABLED or DISABLED. This information can be read by configuration retrieval component  to determine the active status of each point. Alternatively, in one or more embodiments, the configuration retrieval component  can converse with the control program  itself to determine which I\/O module points are referenced in the I\/O module configuration for the specific control program. Other configuration information that can be retrieved by the configuration retrieval component  can include, but is not limited to, scaling factors, operating ranges, and signaling types defined for the respective I\/O points. It is to be appreciated that the exemplary configuration information described above is not intended to be exhaustive, and that any appropriate I\/O module or I\/O point configuration information encoded within the I\/O module configurations  can be retrieved by the configuration retrieval component . Also, the configuration retrieval component  need not retrieve all the configuration information discussed herein in order to remain within the spirit of the present invention.","After the configuration retrieval component  has retrieved the I\/O point configuration information , this information is passed to an I\/O connection pool . The I\/O connection pool  leverages the configuration information  to make the controller's I\/O points available to the process simulation . The I\/O points can be presented in the simulation as I\/O blocks that the simulation programmer can graphically manipulate to connect simulated data with a specific I\/O connection point. In order for the simulated I\/O kernel to learn the proper data structure mapping to use for communication with each I\/O module instance in the controller, the I\/O connection pool  retrieves one or more I\/O module profiles  from a directory service . The I\/O module profiles  are electronic data sheets describing the generic characteristic (e.g., module type, point count, communication characteristics, data processing functions, etc.) of the various I\/O modules that are compatible with controller , where each I\/O module profile represents a particular I\/O module and can include, in some embodiments, a graphical face for the module. The I\/O module profile corresponding to a given I\/O module contains information that can be used by the simulated I\/O kernel to communicate with a generic instance of the I\/O module, making it possible for the I\/O kernel to exchange data with the I\/O module instance on the controller. Directory service  serves as a profile catalog that can be accessed by the I\/O connection pool  to retrieve selected module profiles. Although the directory service  is depicted in  as being local to the simulation environment , it is to be appreciated that the directory service can also reside remotely at a central location accessible to multiple users. According to some such embodiments, the directory service can reside on a server accessible via the Internet, such that simulation environment  can remotely retrieve the necessary I\/O module profiles over an Internet connection.",{"@attributes":{"id":"p-0053","num":"0052"},"figref":"FIG. 7","b":["706","704","706","712","714","710","704","710","704","708"]},"The available I\/O  listed in the I\/O connection pool  can list each available input and output in the controller by its user-defined name or label, thus allowing the simulation developer to easily locate a desired I\/O point for association with a given simulation I\/O point. Each point in the available I\/O list  can also include application-specific configuration information for the point as determined from the configuration information , as well as the communication path and\/or other information needed by the simulation to establish a connection with the I\/O point of the I\/O module instance in the controller.",{"@attributes":{"id":"p-0055","num":"0054"},"figref":"FIG. 8","b":["802","808","814","806","802","806","804","808","814","802","812","810","812","810","814","814","810","810","812","808"]},{"@attributes":{"id":"p-0056","num":"0055"},"figref":["FIG. 9","FIG. 8","FIG. 9"],"b":["914","916","904","902","902","906","908","910","908","920","812","916","908","906","908"]},"Any suitable communication means  can be used to connect controller  with the simulation environment  during simulation. In one or more embodiments, the simulation environment  can reside on a separate workstation that communicates with controller  over a network connection (e.g., Ethernet or other suitable networking standard). Alternatively, simulation environment  can be embodied on a dedicated simulation module configured to reside in an available I\/O slot on the controller's chassis or on a shared control network with the controller. An example of such an embodiment is illustrated in . Controller  executes control program , similar to previous examples. Process simulation  and simulated I\/O kernel , which includes I\/O point mapping , are similar to those described above. As in previous examples, the simulated I\/O kernel  exchanges simulated I\/O data with the I\/O module instances , and thereby with control program  via the I\/O data table . In this example, the simulation environment is embedded within a simulation module  that exchanges I\/O messages  with the controller  across the backplane of the controller's chassis (if the module is mounted locally in the controller's chassis) and\/or across a control network on which controller  resides. In one or more embodiments, this simulation module  can be configured to reside in an available slot of the controller's chassis normally reserved for I\/O or networking modules. Alternatively, the simulation module  can reside on the controller network remotely from the controller. This allows I\/O messages  to be exchanged between the process simulation  and the I\/O modules instances  across the backplane  of the chassis and\/or control network.","One or more embodiments of simulation module  can employ a Common Industrial Protocol (CIP) service  to package the simulated I\/O messages with a CIP protocol prior to transmission over the backplane or network. This effectively creates a simulated network across the backplane or network that connects the controller with the simulated I\/O of the process simulation. Exchanging I\/O messages as CIP packets can increase the speed of data transmission between the process simulation  and the I\/O module instances  in the controller.","As noted above, one drawback of conventional OPC-based simulation configurations is the inability to synchronize the respective internal clocks of the simulation and the controller during validation. This can negatively impact the fidelity of the simulation, particularly since the heavy processing burden often seen on the simulation side can cause the simulation to execute more slowly than the controller, introducing undesirable delays in I\/O data exchanges, unrealistic time stamps for simulated control (time critical) events, etc. Accordingly, one or more embodiments of the present simulation system can include the ability to synchronize execution of the controller and the simulation.  illustrates an exemplary simulation system that incorporates such synchronization functionality in accordance with one or more embodiments. The synchronization functionality depicted in  is described in connection with a module-based simulation system similar to that described above in connection with . As in previous examples, controller  executes control program , which writes output data to and reads input data from I\/O data table . Simulation module  executes process simulation , which exchanges simulated I\/O data with the I\/O module instances  via simulated I\/O kernel  and CIP service , as described supra. Simulation module  can also include a synchronization component  that maintains synchronization between the simulation clock  and the controller clock . Synchronization component  can employ any suitable technique for maintaining synchronization between the controller and the simulation. For example, synchronization component  can utilize an IEEE 1588 Precision Time Protocol (PTP), wherein controller clock  is designated as a master clock, and the synchronization component adjusts the simulation clock  to converge with the controller clock .","Alternatively, one or more embodiments of synchronization component  can employ a modified version of the IEEE 1588 PTP protocol, wherein the master clock designation can be changed dynamically as needed during the simulation. This modified 1588 PTP protocol is premised on the observation that the relative speeds of the two clocks  and  may vary during simulation, and as such it is possible that a first clock may run faster than the second clock during a first execution step, while the second clock may be the faster clock during a subsequent execution step. This clock instability may be particularly pronounced given the heavy processing that may be required to execute the simulation . Since it is generally preferable to designate the slower clock as the master, the modified 1588 PTP protocol implemented by one or more embodiments of the synchronization component  can evaluate the respective clocks  and  at various times during simulation and dynamically select which clock is to serve as the master based on the evaluation. Selection of a master clock can be made, for example, based on a determination by the synchronization component  of which clock was the slower clock during a most recent simulation execution step. The slower clock is then designated by the synchronization component  to act as the master clock for the subsequent execution step. This modified 1588 PTP protocol is described in more detail in U.S. patent application Ser. No. 12\/896,506, filed by the applicant on Oct. 1, 2010, and incorporated herein by reference.",{"@attributes":{"id":"p-0061","num":"0060"},"figref":"FIGS. 12-13"},{"@attributes":{"id":"p-0062","num":"0061"},"figref":"FIG. 12","b":["1200","1202","1204"]},{"@attributes":{"id":"p-0063","num":"0062"},"figref":"FIG. 13","b":["1300","1302","1304","1306"]},"At , the retrieved I\/O module profiles are customized using the I\/O module configuration information retrieved at step . This step applies the user-defined parameters encoded in the module configuration information to the generic I\/O module profiles, thereby transforming the profiles into analogous representations of the I\/O modules configured for use by the control program. At , an I\/O connection pool is created using these customized I\/O module profiles. This connection pool presents the controller's available I\/O points to the simulation developer for selective association with the simulation I\/O points. At , simulation I\/O points are selectively linked to available I\/O points defined in the I\/O connection pool to yield an I\/O point mapping. At , this I\/O point mapping is leveraged by the process simulation to exchange simulated I\/O data between the process simulation and I\/O module instances in the controller.","Embodiments, systems, and components described herein, as well as industrial control systems and industrial automation environments in which various aspects set forth in the subject specification can be carried out, can include computer or network components such as servers, clients, programmable logic controllers (PLCs), communications modules, mobile computers, wireless components, control components and so forth which are capable of interacting across a network. Computers and servers include one or more processors\u2014electronic integrated circuits that perform logic operations employing electric signals\u2014configured to execute instructions stored in media such as random access memory (RAM), read only memory (ROM), a hard drives, as well as removable memory devices, which can include memory sticks, memory cards, flash drives, external hard drives, and so on.","Similarly, the term PLC as used herein can include functionality that can be shared across multiple components, systems, and\/or networks. As an example, one or more PLCs can communicate and cooperate with various network devices across the network. This can include substantially any type of control, communications module, computer, Input\/Output (I\/O) device, sensor, actuator, and human machine interface (HMI) that communicate via the network, which includes control, automation, and\/or public networks. The PLC can also communicate to and control various other devices such as I\/O modules including analog, digital, programmed\/intelligent I\/O modules, other programmable controllers, communications modules, sensors, actuators, output devices, and the like.","The network can include public networks such as the internet, intranets, and automation networks such as control and information protocol (CIP) networks including DeviceNet, ControlNet, and Ethernet\/IP. Other networks include Ethernet, DH\/DH+, Remote I\/O, Fieldbus, Modbus, Profibus, CAN, wireless networks, serial protocols, and so forth. In addition, the network devices can include various possibilities (hardware and\/or software components). These include components such as switches with virtual local area network (VLAN) capability, LANs, WANs, proxies, gateways, routers, firewalls, virtual private network (VPN) devices, servers, clients, computers, configuration tools, monitoring tools, and\/or other devices.","With reference to , an example environment  for implementing various aspects of the aforementioned subject matter includes a computer . The computer  includes a processing unit , a system memory , and a system bus . The system bus  couples system components including, but not limited to, the system memory  to the processing unit . The processing unit  can be any of various available processors. Dual microprocessors and other multiprocessor architectures also can be employed as the processing unit .","The system bus  can be any of several types of bus structure(s) including the memory bus or memory controller, a peripheral bus or external bus, and\/or a local bus using any variety of available bus architectures including, but not limited to, 8-bit bus, Industrial Standard Architecture (ISA), Micro-Channel Architecture (MSA), Extended ISA (EISA), Intelligent Drive Electronics (IDE), VESA Local Bus (VLB), Peripheral Component Interconnect (PCI), Universal Serial Bus (USB), Advanced Graphics Port (AGP), Personal Computer Memory Card International Association bus (PCMCIA), and Small Computer Systems Interface (SCSI).","The system memory  includes volatile memory  and nonvolatile memory . The basic input\/output system (BIOS), containing the basic routines to transfer information between elements within the computer , such as during start-up, is stored in nonvolatile memory . By way of illustration, and not limitation, nonvolatile memory  can include read only memory (ROM), programmable ROM (PROM), electrically programmable ROM (EPROM), electrically erasable PROM (EEPROM), or flash memory. Volatile memory  includes random access memory (RAM), which acts as external cache memory. By way of illustration and not limitation, RAM is available in many forms such as synchronous RAM (SRAM), dynamic RAM (DRAM), synchronous DRAM (SDRAM), double data rate SDRAM (DDR SDRAM), enhanced SDRAM (ESDRAM), Synchlink DRAM (SLDRAM), and direct Rambus RAM (DRRAM).","Computer  also includes removable\/non-removable, volatile\/non-volatile computer storage media.  illustrates, for example a disk storage . Disk storage  includes, but is not limited to, devices like a magnetic disk drive, floppy disk drive, tape drive, Jaz drive, Zip drive, LS-100 drive, flash memory card, or memory stick. In addition, disk storage  can include storage media separately or in combination with other storage media including, but not limited to, an optical disk drive such as a compact disk ROM device (CD-ROM), CD recordable drive (CD-R Drive), CD rewritable drive (CD-RW Drive) or a digital versatile disk ROM drive (DVD-ROM). To facilitate connection of the disk storage devices  to the system bus , a removable or non-removable interface is typically used such as interface .","It is to be appreciated that  describes software that acts as an intermediary between users and the basic computer resources described in suitable operating environment . Such software includes an operating system . Operating system , which can be stored on disk storage , acts to control and allocate resources of the computer system . System applications  take advantage of the management of resources by operating system  through program modules  and program data  stored either in system memory  or on disk storage . It is to be appreciated that one or more embodiments of the subject disclosure can be implemented with various operating systems or combinations of operating systems.","A user enters commands or information into the computer  through input device(s) . Input devices  include, but are not limited to, a pointing device such as a mouse, trackball, stylus, touch pad, keyboard, microphone, joystick, game pad, satellite dish, scanner, TV tuner card, digital camera, digital video camera, web camera, and the like. These and other input devices connect to the processing unit  through the system bus  via interface port(s) . Interface port(s)  include, for example, a serial port, a parallel port, a game port, and a universal serial bus (USB). Output device(s)  use some of the same type of ports as input device(s) . Thus, for example, a USB port may be used to provide input to computer , and to output information from computer  to an output device . Output adapter  is provided to illustrate that there are some output devices  like monitors, speakers, and printers, among other output devices , which require special adapters. The output adapters  include, by way of illustration and not limitation, video and sound cards that provide a means of connection between the output device  and the system bus . It should be noted that other devices and\/or systems of devices provide both input and output capabilities such as remote computer(s) .","Computer  can operate in a networked environment using logical connections to one or more remote computers, such as remote computer(s) . The remote computer(s)  can be a personal computer, a server, a router, a network PC, a workstation, a microprocessor based appliance, a peer device or other common network node and the like, and typically includes many or all of the elements described relative to computer . For purposes of brevity, only a memory storage device  is illustrated with remote computer(s) . Remote computer(s)  is logically connected to computer  through a network interface  and then physically connected via communication connection . Network interface  encompasses communication networks such as local-area networks (LAN) and wide-area networks (WAN). LAN technologies include Fiber Distributed Data Interface (FDDI), Copper Distributed Data Interface (CDDI), Ethernet\/IEEE 802.3, Token Ring\/IEEE 802.5 and the like. WAN technologies include, but are not limited to, point-to-point links, circuit switching networks like Integrated Services Digital Networks (ISDN) and variations thereon, packet switching networks, and Digital Subscriber Lines (DSL).","Communication connection(s)  refers to the hardware\/software employed to connect the network interface  to the bus . While communication connection  is shown for illustrative clarity inside computer , it can also be external to computer . The hardware\/software necessary for connection to the network interface  includes, for exemplary purposes only, internal and external technologies such as, modems including regular telephone grade modems, cable modems and DSL modems, ISDN adapters, and Ethernet cards.",{"@attributes":{"id":"p-0076","num":"0075"},"figref":"FIG. 15","b":["1500","1500","1510","1510","1500","1530","1530","1530","1510","1530","1500","1550","1510","1530","1510","1560","1510","1530","1540","1530"]},"What has been described above includes examples of the subject innovation. It is, of course, not possible to describe every conceivable combination of components or methodologies for purposes of describing the disclosed subject matter, but one of ordinary skill in the art may recognize that many further combinations and permutations of the subject innovation are possible. Accordingly, the disclosed subject matter is intended to embrace all such alterations, modifications, and variations that fall within the spirit and scope of the appended claims.","In particular and in regard to the various functions performed by the above described components, devices, circuits, systems and the like, the terms (including a reference to a \u201cmeans\u201d) used to describe such components are intended to correspond, unless otherwise indicated, to any component which performs the specified function of the described component (e.g., a functional equivalent), even though not structurally equivalent to the disclosed structure, which performs the function in the herein illustrated exemplary aspects of the disclosed subject matter. In this regard, it will also be recognized that the disclosed subject matter includes a system as well as a computer-readable medium having computer-executable instructions for performing the acts and\/or events of the various methods of the disclosed subject matter.","In addition, while a particular feature of the disclosed subject matter may have been disclosed with respect to only one of several implementations, such feature may be combined with one or more other features of the other implementations as may be desired and advantageous for any given or particular application. Furthermore, to the extent that the terms \u201cincludes,\u201d and \u201cincluding\u201d and variants thereof are used in either the detailed description or the claims, these terms are intended to be inclusive in a manner similar to the term \u201ccomprising.\u201d","In this application, the word \u201cexemplary\u201d is used to mean serving as an example, instance, or illustration. Any aspect or design described herein as \u201cexemplary\u201d is not necessarily to be construed as preferred or advantageous over other aspects or designs. Rather, use of the word exemplary is intended to present concepts in a concrete fashion.","Various aspects or features described herein may be implemented as a method, apparatus, or article of manufacture using standard programming and\/or engineering techniques. The term \u201carticle of manufacture\u201d as used herein is intended to encompass a computer program accessible from any computer-readable device, carrier, or media. For example, computer readable media can include but are not limited to magnetic storage devices (e.g., hard disk, floppy disk, magnetic strips . . . ), optical disks [e.g., compact disk (CD), digital versatile disk (DVD) . . . ], smart cards, and flash memory devices (e.g., card, stick, key drive . . . )."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 13"},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 14"},{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 15"}]},"DETDESC":[{},{}]}
