---
title: Monitoring a data structure in a virtual machine and determining if memory pages containing the data structure are swapped into or out of guest physical memory
abstract: A method for monitoring a data structure maintained by guest software within a virtual machine is disclosed. Changes to the contents of the data structure are determined, such as by placing write traces on the memory pages containing the data structure. Also, the method involves determining when memory pages containing the data structure are swapped into and/or out of guest physical memory by the guest software, such as by placing write traces on the memory pages containing the guest page table and detecting changes to the present bit of page table entries involved in mapping virtual addresses for the data structure. Information about the contents of the data structure is retained while memory pages containing the data structure are swapped out of guest physical memory.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08271450&OS=08271450&RS=08271450
owner: VMware, Inc.
number: 08271450
owner_city: Palo Alto
owner_country: US
publication_date: 20091001
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["1. Field of the Invention","Embodiments of the present invention pertain to monitoring data structures inside a virtual machine.","2. Related Art","Embodiments of this invention can be implemented in a wide variety of virtualized computer systems. Many such virtualized computer systems are described in the prior art. In particular, though not exclusively, embodiments of this invention can be implemented in virtualized computer systems that have been described in prior patents and applications originally assigned to VMware, Inc. (\u201cVMware\u201d), the original assignee of this patent, along with other published documents from VMware. Thus, for example, embodiments of this invention may be implemented in \u201chosted\u201d virtualized computer systems and in \u201cnon-hosted\u201d or \u201ckernel-based\u201d virtualized computer systems, as those terms are used in prior patents and applications originally assigned to VMware. Embodiments of this invention may also be implemented in virtualized computer systems having varying \u201cdegrees of virtualization,\u201d including \u201cpara-virtualized\u201d computer systems, as those terms are used in prior patents and applications originally assigned to VMware. Embodiments of the invention may also be implemented in computer systems having a wide variety of physical hardware platforms and configurations, as well as a wide variety of system software platforms and configurations.",{"@attributes":{"id":"p-0006","num":"0005"},"figref":"FIG. 1","b":["700","200","100","700","110","130","140","170","420","430","100"]},"Each VM  will typically have both virtual system hardware  and guest system software . The virtual system hardware typically includes at least one virtual CPU , virtual memory , at least one virtual disk , and one or more virtual devices . Note that a disk\u2014virtual or physical\u2014is also a \u201cdevice,\u201d but is usually considered separately because of the important role of the disk. All of the virtual hardware components of VM  may be implemented in software using known techniques to emulate the corresponding physical components. Guest system software  includes guest operating system (OS)  and drivers  as needed for various virtual devices . One or more guest applications  may run on the guest OS  in the VM .","Some interface is generally required between the guest software within VM  and the various hardware components and devices in underlying hardware platform . This interface\u2014which may be referred to generally as \u201cvirtualization software\u201d\u2014may include one or more software components and\/or layers, possibly including one or more of the software components known in the field of virtual machine technology as \u201cvirtual machine monitors\u201d (VMMs) , . . . , -, \u201chypervisors,\u201d or virtualization \u201ckernels\u201d . The interface between the guest software and the hardware platform may alternatively be referred to as \u201cvirtualization logic\u201d to include the possibility that some virtualization functionality may be implemented in hardware or firmware. The description below is generally made in terms of \u201cvirtualization software,\u201d however, except as specifically noted below, the invention may also be implemented in systems in which some virtualization functionality is implemented in hardware and\/or firmware.","Virtual Addressing","A traditional method used in computer resource management is virtual memory allocation. Essentially, the use of virtual memory allows an operating system to allocate memory to every program or process running on top of the operating system, so as to simplify memory management within programs. Often, the operating system can allocate more virtual memory than the system has real memory, as it is unlikely that every process or application will be running simultaneously; as such, not all virtual memory will need to be backed by physical memory. To \u201cstretch\u201d the available physical memory in this way, swapping is used to move inactive pages of memory to other storage devices, e.g., a hard drive, to free up physical memory for an active process.","One method of managing virtual memory and a corresponding virtual address space is to use page tables. A page table is a data structure used by a virtual memory system to store a mapping between virtual addresses and physical addresses.","In virtual machines, virtual memory allocation is similar to that described above, but with an additional layer of complexity. For example, a host machine has a defined amount of machine memory available. In a virtualization system, a certain amount of \u201cphysical memory\u201d is provided for each virtual machine. As with virtual memory, more physical memory may be provided to virtual machines than there is machine memory available. Analogous to an operating system in a physical computer system, a hypervisor or other virtualization software may use a storage device to back data that is swapped out of machine memory, giving the impression that each virtual machine actually has the physical memory that it has been provided. The guest operating system executing on the virtual machine will then allocate virtual memory to the various processes that are executing on that virtual machine.","There are various reasons why it may be advantageous to monitor certain data structures within a virtual machine. For example, there are various reasons why it may be useful to monitor a process list maintained by an operating system executing within a virtual machine. Monitoring a data structure in a virtual machine is made more challenging, however, because utilization and manipulation of memory by most operating systems is an internal process for the operating system that is not designed to be transparent. The \u201cblack box\u201d nature of virtual memory management in most operating systems often makes it difficult to determine the contents of pages in the virtual address space utilized by any given process executing on a virtual machine. For example, at any given time, various pages in the virtual address space may be swapped out to disk, and it is almost impossible to estimate how the guest operating system will choose to swap pages in and out of physical memory.","Embodiments of the present invention allow for monitoring of data structures within a virtual machine. Changes to the data structure itself are monitored. For example, in some embodiments, write traces are placed on the memory page(s) containing the data structure to detect attempts to write to the data structure. In addition, changes to page tables that may affect the data structure are also monitored. For example, in some embodiments, write traces are placed on memory page(s) containing page table(s) for which changes may affect the data structure. For example, if a memory page contains a guest page table page that maps virtual addresses for the data structure, a write trace may be placed on that memory page, so that, if a guest operating system attempts to swap out another memory page containing all or part of the data structure an attempt to write to the guest page table entry for the memory page to be swapped out can be detected. Monitoring changes made to the data structure and to relevant page table entries allows for monitoring a data structure in a virtual address space in a virtual machine, even as memory page(s) containing the data structure are swapped in and out of physical memory.","In some embodiments of the invention, a virtual machine can suspend operations, and all or part of the virtual address space utilized by the virtual machine can be examined. This allows for activities such as antivirus or anti-malware scanning to be performed from outside the virtual machine. Consequently, even if the virtual machine were to be compromised, a security product running within another virtual machine could be utilized to detect and correct problems.","In other embodiments, these techniques can be adapted to allow for virtual address space monitoring while a virtual machine is running. This method allows system call interception and monitoring, for example. If an application sets up the arguments for a system call, and is preempted and the memory corresponding to the system call is swapped out, this method allows a system call monitor to capture those arguments for examination, even though they no longer reside in memory.","Reference will now be made to several embodiments. While the subject matter will be described in conjunction with these embodiments, it will be understood that they are not intended to limit the claimed subject matter to these embodiments. On the contrary, the claimed subject matter is intended to cover alternatives, modifications, and equivalents, which may be included within the spirit and scope of the claimed subject matter as defined by the appended claims.","Furthermore, in the following detailed description, numerous details are set forth to provide an understanding of the claimed subject matter. However, it will be recognized by one skilled in the art that embodiments may be practiced without these details or with equivalents thereof. In other instances, well-known methods, procedures, components, and circuits have not been described in detail as not to unnecessarily obscure aspects and features of the subject matter.","Portions of the detailed description that follows are presented and discussed in terms of a method. Although steps and sequencing thereof are disclosed in a figure herein (e.g., FIG. ) describing operations of the method, such steps and sequencing are exemplary. Embodiments are well suited to performing various other steps or variations of the steps recited in the flowchart of the figure herein, and in a sequence other than that depicted and described herein.","Some portions of the detailed description are presented in terms of procedures, steps, logic blocks, processing, and other symbolic representations of operations on data bits that can be performed on computer memory. A procedure, computer-executed step, logic block, process, etc., is here, and generally, conceived to be a self-consistent sequence of steps or instructions leading to a desired result. The steps are those requiring physical manipulations of physical quantities. Usually, though not necessarily, these quantities take the form of electrical or magnetic signals capable of being stored, transferred, combined, compared, and otherwise manipulated in a computer system. It has proven convenient at times, principally for reasons of common usage, to refer to these signals as bits, values, elements, symbols, characters, terms, numbers, or the like.","It should be borne in mind, however, that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise as apparent from the following discussions, it is appreciated that throughout the present description, discussions utilizing terms such as \u201caccessing,\u201d \u201cwriting,\u201d \u201cincluding,\u201d \u201cstoring,\u201d \u201ctransmitting,\u201d \u201ctraversing,\u201d \u201cassociating,\u201d \u201cidentifying\u201d or the like, refer to the action and processes of a computer system, or similar electronic computing device, that manipulates and transforms data represented as physical (electronic) quantities within the computer system's registers and memories into other data similarly represented as physical quantities within the computer system memories or registers or other such information storage, transmission or display devices.","Computing devices typically include at least some form of computer readable media. Computer readable media can be any available media that can be accessed by a computing device. By way of example, and not limitation, computer readable medium may comprise computer storage media. Computer storage media includes volatile and nonvolatile, removable and non-removable media implemented in any method or technology for storage of information such as computer readable instructions, data structures, program modules, or other data. Computer storage media includes, but is not limited to, RAM, ROM, EEPROM, flash memory or other memory technology, CD-ROM, digital versatile discs (DVD) or other optical storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other medium which can be used to store the desired information and which can be accessed by a computing device. Moreover, computer storage media may be accessed over a communications or network connection, such as is common in network attached storage (NAS) or storage area network (SAN) solutions.","Some embodiments may be described in the general context of computer-executable instructions, such as program modules, executed by one or more computers or other devices. Generally, program modules include routines, programs, objects, components, data structures, etc. that perform particular tasks or implement particular abstract data types. Typically the functionality of the program modules may be combined or distributed as desired in various embodiments.","It is understood that the following embodiments are exemplary in nature. Embodiments of the present invention are well suited to application across a wide range of computers, virtual systems, networks, and storage protocols. Embodiments of the present invention may be used in both hosted and non-hosted virtualized computer systems, and regardless of the degree of virtualization and the systems. Embodiments may be used in applications in which the virtual machines have any number of physical and\/or logical virtualized processors. Embodiments of the present invention may be implemented in numerous locations, including as part of a computer system's primary operating system, both where the OS is designed to support virtual machines, and where it is not. Additionally, embodiments of the present invention may be implemented in software, in hardware, in firmware, or in some combination thereof, e.g., in processor architectures intended to provide hardware support for virtual machines.","Virtual Address Space Monitoring","Embodiments of the present invention allow for monitoring of data structures within a virtual machine. Changes to the data structure itself are monitored. For example, in some embodiments, write traces are placed on the memory page(s) containing the data structure to detect attempts to write to the data structure. In addition, changes to page tables that may affect the data structure are also monitored. For example, in some embodiments, write traces are placed on memory page(s) containing page table(s) for which changes may affect the data structure. For example, if a memory page contains a guest page table page that maps virtual addresses for the data structure, a write trace may be placed on that memory page, so that, if a guest operating system attempts to swap out another memory page containing all or part of the data structure an attempt to write to the guest page table entry for the memory page to be swapped out can be detected. Monitoring changes made to the data structure and to relevant page table entries allows for monitoring a data structure in a virtual address space in a virtual machine, even as memory page(s) containing the data structure are swapped in and out of physical memory.","In some embodiments of the invention, a virtual machine can suspend operations, and all or part of the virtual address space utilized by the virtual machine can be examined. This allows for activities such as antivirus or anti-malware scanning to be performed from outside the virtual machine. Consequently, even if the virtual machine were to be compromised, a security product running within another virtual machine could be utilized to detect and correct problems.","In other embodiments, these techniques can be adapted to allow for virtual address space monitoring while a virtual machine is running. This method allows system call interception and monitoring, for example. If an application sets up the arguments for a system call, and is preempted and the memory corresponding to the system call is swapped out, this method allows a system call monitor to capture those arguments for examination, even though they no longer reside in memory.","Linear Tracing","In the description that follows, exemplary embodiments are presented, which utilize page tables and shadow page tables. Embodiments monitor changes to a data structure of interest in a virtual address space in a virtual machine, as well as changes to page tables for the virtual address space that could affect the data structure. For example, swapping a memory page containing all or part of the monitored data structure in or out of memory can affect the availability of the data structure. It is understood that these embodiments may entail monitoring changes within multiple related page tables.","For example, with reference to , page table  includes entry . A memory location corresponding to entry  contains page table . Page table  includes entry , and a memory location corresponding to entry  includes page table . Page table  includes entry , which indicates the location of page  in memory. Therefore, to monitor changes occurring in page table  or on page , changes which affect the earlier page tables may also be monitored. The term \u201clinear tracing\u201d is used herein to describe monitoring multiple locations or page tables, to detect changes affecting a monitored or flagged item.","For example, linear tracing performed with reference to page  would monitor entry , e.g., to determine if page  was swapped out. Entry  would also be monitored, to determine if page table  was swapped out or modified. Similarly, entry  will be monitored, to determine if page table  was swapped out or modified. If page table  is not the highest level page table for the operating system, additional monitoring may be necessary to ensure that page  is not indirectly modified or affected by some action taken upon a page table even further up the hierarchy.","Shadowing Data Structures in Virtualized Environments","One useful technique for virtualization involves the creation of shadow data structures, which mirror the state of a data structure within a virtual machine. As changes are made to the data structure by the guest OS or other guest software executing within the virtual machine, the virtualization software, e.g., a virtual machine monitor (VMM), updates the shadow data structure to reflect the changed state. The shadowing of data structures is already used in various virtualized computer systems. For example, shadow page tables, which mirror the state of page tables generated by the guest OS in a VM, have been thoroughly described in the prior art. In embodiments of this invention, shadowing may also be used for monitoring data structures in a virtual machine, where the shadowing is not performed for the basic purpose of supporting the operation of the virtual machine, as in the case of shadow page tables.","One approach to the creation and maintenance of a shadow data structure involves placing a \u201cwrite trace\u201d on the primary structure. The write trace provides notification to the VMM whenever the guest attempts to modify the primary structure. This in turn gives the VMM the opportunity to control the modification to the primary structure, and rederive the shadow structure from the primary. In other situations, primarily involving memory-mapped devices, the VMM may use \u201cread traces\u201d to get notification whenever the guest reads a memory location. This approach is described in greater detail in U.S. Pat. No. 6,961,806, System and method for detecting access to shared structures and for maintaining coherence of derived structures in virtualized multiprocessor systems, by Agesen et al., which is incorporated herein by reference.","Virtual Address Space and the Shadow Page Table","As discussed previously, page tables allow for translation between virtual address space assigned to a particular process or program, and physical address space available in physical memory. Shadow page tables are utilized to translate between the guest virtual address space allocated by an operating system executing in a virtual machine, and physical address space available on the host system. In the following discussion, \u201cguest virtual address space\u201d (or just \u201cvirtual address space\u201d) is used to refer to the virtual address space allocated by the guest OS; \u201cguest physical address space\u201d refers to the memory allocated to a virtual machine, e.g., by a hypervisor; and \u201cphysical address space\u201d (or \u201cmachine address space\u201d) refers to the host system's underlying hardware resources.","Generally, each process or application executing on a virtual machine will have its own page table (or set of page tables), although some processes may share page tables, e.g., pages for the guest operating system will often be repeated across page tables for different processes. These page tables are maintained by the guest operating system within the virtual machine, and the guest operating system will update these tables as needed. For example, the guest operating system swaps pages in and out of guest physical memory and also performs context switches between multiple page tables. Of particular relevance to this description, the page tables maintained by the guest OS typically include entries that map certain virtual addresses to the page tables themselves. The guest OS then uses these virtual addresses when updating the page tables. Meanwhile, the virtualization software or the virtual machine monitor, generally creates a shadow page table for each \u201cguest\u201d page table created by the guest operating system, with each shadow page table generally including an entry corresponding to each entry in the corresponding guest page table. These shadow page tables are updated and modified as the guest page tables within the guest operating system are changed. Manipulation of physical memory is performed according to entries in the active shadow page table. Under some architectures, the machine CPU includes a page table base register (PTBR), which stores a reference to the current shadow page table.","With reference to , an exemplary mapping of guest virtual address space to physical address space is depicted, in accordance with one embodiment. It is understood that while describes certain specific, enumerated features, elements, and arrangements, embodiments are well suited to applications involving additional, fewer, or different features, elements, or arrangements. In particular, it is understood that page table and shadow page table entries may conform to a wide variety of formats, and include many different types of information, such as \u201cdirty\u201d bits, which indicate when the contents of a page have been altered; address space or process ID information, which indicate the process or program associated with the contents of a page; present bits, which indicate if the page is presently in memory; etc.","In the depicted embodiment, guest virtual address space  consists of four pages of memory, e.g., pages , , , and . Guest virtual address space  represents virtual memory addresses that are mapped by a guest page table associated with a process executing on a virtual machine, including virtual memory allocated to the process. In one embodiment this virtual memory is assigned to the process by the guest operating system for that VM. Guest virtual address space  generally also includes memory pages that are only accessible by kernel code in the guest operating system.","Guest physical address space  is depicted as including eight pages of memory -. The virtualization software running on the host system allocates guest physical memory to a VM; the VM uses this allocated guest physical memory as guest physical address space . Guest virtual address space  is mapped into guest physical address space , in accordance with page table .","As indicated by entry , each entry in page table  includes a present bit (Pbit), a virtual address, and a corresponding physical address. The present bit indicates whether a page corresponding to the virtual address is currently present in guest physical memory. Entries  through  indicate translations between guest virtual address space  and guest physical address space . In this example, all pages in guest virtual address space  are present in guest physical address space , at the locations given in page table  (and as indicated by the arrows between guest virtual address space  and guest physical address space ). Also in this example, page table  resides in virtual memory page , which is mapped to guest physical memory page  by entry  of guest page table . Thus, to access the page table , the guest OS uses virtual addresses that fall within virtual memory page , and entry  maps these virtual addresses into guest physical memory page .","Physical address space  is depicted as including 16 pages - of memory. Physical address space  represents the physical or machine memory available to the host system. Guest virtual address space  is mapped into physical address space , in accordance with shadow page table .","As indicated by entry , each entry in shadow page table  includes a present bit (Pbit), a virtual guest address, and a corresponding physical address. The present bit indicates whether the page corresponding to the virtual guest address is currently present in physical memory. Entries  through  indicate translations between guest virtual address space  and physical address space . In this example, each of the pages indicated in shadow page table  are currently present in physical address space . Entry  of shadow page table  maps virtual memory page , which contains guest page table , to physical memory page .","In the depicted embodiment, each entry in shadow page table  also includes a read\/write flag. As described in greater detail below, manipulation of the read\/write flag in the shadow page table allows for detecting modifications to the guest page table and to the guest virtual address space mapped by the guest page table. In the depicted embodiment, the numeral  is used to indicate that a particular entry in the shadow page table is unprotected. This indicates that the particular entry can be modified.",{"@attributes":{"id":"p-0052","num":"0051"},"figref":"FIG. 3","i":"a ","b":["4499","110","4100","4499","4450"]},"In some embodiments where it is desirable to be able to monitor the contents of virtual address space, manipulation of elements of the shadow page table can assist in detecting changes to the virtual address space, such as those caused by swapping pages in and out of physical memory.","For example, again depicts virtual address space , guest physical address space , and physical address space . Suppose there is some data structure, such as a process list, that is contained within virtual memory pages  and , and suppose some entity wants to monitor the contents of this data structure. To monitor the contents of this data structure in virtual address space , two changes are made. First, the shadow page table entry that maps the memory page containing the page table  is identified and the read\/write flag for this entry in shadow page table  is modified, to detect modification of entries  through . In the example of , the shadow page table entry that maps the memory page containing the page table  is entry . Thus, the read\/write flag for entry  is cleared to 0 to detect any changes to guest page table . As described above, in connection with , the page table  may actually comprise multiple memory pages, and possibly multiple levels of page table pages. Accordingly, multiple shadow page table entries mapping multiple memory pages in which the page table  is stored may be modified to prevent modification of entries in the page table . However, if memory pages contain page table pages that do not affect the data structure, then the entries mapping these memory pages do not need to be modified in this manner. Once the shadow page table entry is modified, if any attempt is made to modify an entry in page table , a page fault will be generated, e.g., by the host machine's memory controller. The virtualization software can generally handle such a page fault without invoking a page fault handling routine in the guest OS, thus effectively hiding the page fault from the guest operating system. As is explained in greater detail below, a monitoring agent can detect these hidden page faults, and use them to identify pages that are being affected, such as pages that are being swapped in or out of guest physical address space  by the guest operating system. Moreover, a detection process can be used to trigger certain other actions, such as creating copies of pages before they are swapped out or after they are swapped in.","Similarly, the contents of memory pages that actually contain the data structure can be monitored. Mappings for such memory pages are flagged as \u201cread only\u201d in the shadow page table. Attempts to modify the contents of these pages will generate a page fault, which is hidden from the guest OS. For example, once it is determined that the data structure is contained within memory pages  and , corresponding physical address space  locations (e.g., addresses  and ), can be monitored by clearing the read\/write flags to 0 in entries  and  corresponding to those locations in shadow page table .","As mentioned above, embodiments of this invention may be used to monitor a variety of data structures in a VM. To monitor a general data structure in a VM, one or more virtual memory pages in which the data structure is stored are identified. Changes to these memory pages are monitored. For example, write traces may be placed on the memory pages containing the data structure by modifying one or more shadow page table entries that map these virtual memory pages to physical memory pages. These write traces cause hidden page faults upon attempts to modify the memory pages containing the data structure. In addition, changes to guest page table pages that may affect the data structure are also monitored. For example, write traces may be placed on guest page table page(s) that map the virtual memory pages containing the data structure to guest physical memory. In this manner, virtualization software can be notified of any attempt to modify the data structure itself or any attempt to modify any entries in the guest page table that are used to map the virtual memory page containing the data structure to guest physical memory. Thus, in particular, the virtualization software will be notified if the guest OS attempts to swap in or out a guest physical memory page containing part of the data structure.","In some embodiments, once monitoring of a particular data structure in a virtual address space has begun, changes affecting that data structure will be identified, and may trigger certain other actions. illustrates an example. Guest virtual address space  is associated with a particular process executing on a virtual machine, controlled by a guest operating system. At the time depicted in , the guest operating system has swapped out several pages associated with guest virtual address space . This frees up additional portions of guest physical address space  for use by a different process. The guest operating system makes appropriate changes to page table  by changing the present bit for entries , , and . The guest operating system also writes pages , , and  to locations within swap space .","However, because the guest operating system is executing in a virtualized environment, changes made to page table  are mirrored by shadow page table . Shadow page table  is used by the host system to control physical address space . Because the monitored data structure is contained in virtual memory pages  and , entries  and  in shadow page table  were marked as read only. Entry  was also marked as read only because it maps the guest page table . Attempts to modify entries in guest page table  produce a page fault because the guest page table is marked as read only by means of entry , and attempts to modify the memory pages containing the data structure produce a page fault because the entries mapping these pages are marked as read only. As is explored in greater detail below, some embodiments utilize a monitoring agent which tracks these page faults, and uses them to identify pages relevant to a monitored data structure which are being modified. In one such embodiment, when the monitoring agent detects such a hidden page fault, it creates a copy of the page in physical memory corresponding to the location in guest physical memory being modified by the guest operating system before allowing the modification.","Monitoring State Machine","As discussed in some detail above, some embodiments utilize a monitoring agent or state machine, e.g., executing within the virtualization software or hypervisor, to facilitate monitoring of virtual address spaces belonging to virtual machines. While the nature and functionality of such an agent may vary across different embodiments, many embodiments share certain common functionality.","With reference now to , flowchart  depicts the interrelationship between several transitions in a state machine, in accordance with one embodiment. While flowchart  and the accompanying description describe explicit actions and behaviors, it is understood that embodiments are well suited to applications involving additional, fewer, or different transitions between many different states.","With reference to element , the monitoring agent or state machine is initialized by a creation transition. At this stage, the virtualization infrastructure will decide that a particular data structure should be available. With reference to the preceding figures, a monitoring system executing within the virtualization software on the host system decides that a data structure within virtual address space  should be monitored. This can be initiated, for example, as a result of a notification provided by a security agent running in a separate virtual machine. The monitoring system would then create a new monitoring agent or state machine to monitor the data structure and the related data structures, such as page table .","In some embodiments, creation of the monitoring agent may trigger the creation of a shadow data structure or other data storage mechanism to retain information about the contents of the primary data structure to be monitored. For example, a shadow data structure may be maintained including a copy of some or all of the contents of the primary data structure. In other embodiments, a shadow data structure may already exist for the data structure of interest, as part of normal virtualization operations. For example, the data structure to be monitored may be an entire virtual address space, such as virtual address space . In which case, shadow page table  may comprise the shadow data structure. In one such case, the monitoring agent may perform certain actions to facilitate monitoring the monitored data structure. It may mark certain entries in the shadow page table as read only to trigger page faults when a change occurs in the guest page table that may affect the monitored data structure. It may also monitor memory pages in the physical address space containing the monitored data structure to detect changes, e.g., by marking those pages read-only in the shadow page table, and detecting page faults generated when attempts are made to write to those memory pages.","In some embodiments, the creation transition may be triggered by the use of operation specific knowledge combined with execution instrumentation. For example, sufficient knowledge of the guest operating system may allow the virtualization infrastructure to know that a particular instruction at a particular virtual address indicates the creation of a process which should be monitored.","With reference now to element , the monitoring agent detects updates performed on the monitored data structure, where the updates may be made by the process, the guest operating system or another process, for example. In one embodiment, changes made to a data structure can be detected by marking entries in the shadow page table that map to the memory page(s) containing the data structure as read only. For example, if the data structure to be monitored is contained in virtual memory page , changes to the data structure can be monitored by marking entry  as read only, so that changes made to the data structure will result in hidden page faults. The monitoring agent can use these hidden page faults to detect changes made to the monitored data structure.","Further, in some embodiments, an update transition can occur when specific operating system or application knowledge allows the virtualization infrastructure to detect a call to a function which is known to modify the data structure. Obtaining such knowledge may require experimentation, e.g., to determine which memory locations are accessed by guest software under specific conditions, or detailed specifications for the guest software, or some combination of both. For example, if a monitoring system has sufficient knowledge of the guest software, it may be possible to detect execution of a particular process or function call which will result in modification of a monitored page within the machine memory. If only a particular function call is allowed to access or modify a particular location in memory, modifications of that location indicate that that function call has been invoked. If the monitoring system has sufficient knowledge about the guest software, it may be able to conclude what impact that function call will have on a monitored data structure or monitored memory.","With reference now to element , the monitoring agent detects changes in data structure availability. For example, memory page(s) containing the monitored data structure may be swapped in or out of memory. In addition, page table page(s) needed to map the memory pages containing the data structure may be swapped in or out of memory. In cases where the monitored data structure is an entire virtual address space, the page table corresponding to the monitored virtual address space may itself be swapped in or out of memory. In some embodiments, linear tracing is utilized to monitor the availability of a hierarchy of page tables, as well as monitoring a particular page of interest. Such functionality was described in greater detail above, with reference to . For example, if page  is being monitored, and page table  was swapped out of guest physical memory by the guest operating system, entry  of page table  will indicate that page table  is currently not present. The monitoring agent should continue to monitor entry  for changes in the availability of page table .","With reference now to element , the monitoring agent should terminate under certain conditions. For example, if the monitored data structure has been released, freed, or destroyed, or if the related process or application has been terminated, the monitoring agent should similarly terminate. In some embodiments, a termination transition will occur whenever one of a number of stopping conditions occurs. For example, using specific operating system knowledge, the virtualization infrastructure may detect function call termination, thread termination, process termination, operating system crash, or operating system reboot. Similarly, if the virtual machine is powered off or reset, the monitoring agent should terminate. In other embodiments, other stopping conditions may apply.","Examining the Virtual Address Space of a Suspended Virtual Machine","As discussed previously, some embodiments of the present invention are well suited to enabling applications running outside a virtual machine to examine the contents of virtual address space of the virtual machine. In particular, several such embodiments allow a security service, such as an antivirus or anti-malware application, running in a separate virtual machine to examine the contents of a monitored virtual machine.","One application of the present invention allows virtual address space of a monitored virtual machine to be scanned while the virtual machine is in a suspended state. Such a suspend\/scan operation may be regularly scheduled, triggered by aberrant behavior of the monitored virtual machine, or triggered upon detection of some other known event. By providing an API in the virtualization software, a security service can be made aware of the contents of the guest virtual address space associated with processes within the monitored virtual machine and can thereby access necessary locations in physical memory or machine storage to examine those contents.","With reference now to , a flowchart  of a method of examining virtual address space associated with a suspended virtual machine is depicted, in accordance with one embodiment. Although specific steps are disclosed in flowchart , such steps are exemplary. Embodiments of the present invention are well suited to performing various other (additional) steps or variations of steps recited in flowchart . It is appreciated that steps in flowchart  may be performed in an order different than presented, and that not all steps in flowchart  may be performed.","With reference now to step , the virtual machine is put into a suspended state. As noted previously, such a suspend operation may be instituted according to a regular scan schedule, or in response to a detected trigger event, such as observed aberrant behavior of a monitored virtual machine. Alternatively, a scan may run at a time when a virtual machine is in a suspended state (e.g., in preparation for virtual machine migration). In other embodiments, other methods of instituting a suspended state for a monitored virtual machine may be utilized.","With reference now to step , the virtual address space associated with the virtual machine is examined. In different embodiments, different methods are utilized for examining virtual address space associated with the virtual machine. One such method is described below, with reference to . Also, the nature of examination may vary, across different applications. For example, an application may scan the guest virtual address space of the virtual machine to perform an antivirus or anti-malware check, to determine resource utilization of the virtual machine, or to perform some other function.","With reference now to step , the virtual machine resumes operation. In some embodiments, the virtual machine resumes functioning, after the examination of the virtual address space is concluded successfully. In other embodiments, if the examination reveals a problem (e.g., a virus), the virtual machine may not resume ordinary operation.","As noted above, some embodiments incorporate a method enabling examination of virtual address space associated with a given virtual machine. In particular, some embodiments of the present invention modify virtualization software executing on a host system (e.g., by adding a monitoring system to the hypervisor). This monitoring system tracks the contents of virtual address space of some or all processes executing on the virtual machine to allow examination of those contents. Moreover, this monitoring system allows such examination even if memory manipulation operations of the guest operating system are not transparent from outside the monitored virtual machine.","With reference now to , flowchart  of a method of monitoring the state of virtual address space of a process in a virtual machine is depicted, in accordance with one embodiment. Although specific steps are disclosed in flowchart , such steps are exemplary. That is, embodiments of the present invention are well suited to performing various other (additional) steps or variations of the steps recited in flowchart . It is appreciated that steps in flowchart  may be performed in an order different than presented, and that not all steps in flowchart  may be performed.","With reference to step , a virtual machine starts up. In some embodiments, when the virtual machine is powered on, or particularly when a guest operating system for that virtual machine begins to function, the controlling virtualization software creates shadow page tables to minor page tables created by the guest operating system. As discussed previously, these shadow page tables allow translation between guest physical address space being apportioned by the guest operating system and physical address space corresponding to the host system's hardware.","With reference now to step , virtual address space in the virtual machine is traced, where the traced virtual address space may be the entire virtual address space of one or more processes, or that portion of a virtual address space containing a monitored data structure. In some embodiments, the virtualization software, or a monitoring system within the virtualization software, begins tracing virtual address space corresponding to one or more processes, function calls, or applications being run on the virtual machine. In different scenarios, tracing the virtual address space may involve different actions. For example, tracing the virtual address space associated with the program may involve disabling write access to entries in a shadow page table associated with that virtual address space. Attempts to modify the memory pages mapped by those shadow page table entries would therefore trigger page faults, which would be hidden from the virtual machine.","With reference now to step , an attempted change to a monitored page table is detected. If, for example, a page fault is triggered by an attempt to modify a read only entry in the shadow page table, the virtualization software, or a monitoring system within the virtualization software, will detect the page fault. Depending upon the nature of the intended change, different actions may result.","With reference to step , if a portion of the monitored virtual address space is to be swapped out, a copy of that portion is retained. If the detected change attempts to modify the present bit of an entry in the shadow page table (e.g., from \u201cpresent\u201d to \u201cnot present\u201d), the guest operating system may be attempting to swap that page out of guest physical memory, and into storage. As such, a copy of the swapped out page should be retained, to allow examination of that portion of the monitored virtual address space.","With reference to , the guest operating system swaps page  of guest virtual address space  out of guest physical address space  and into swap space . Page table , and specifically entry , is modified to change the present bit corresponding to page . Because the shadow page table entry  containing the mapping to the guest page table  is marked as read only, any write to the guest page table  generates a hidden page fault. Thus, the change to the present bit in entry  causes a page fault. The virtualization software for the host machine will detect this page fault, and a monitoring system running on the virtualization software will make a copy of page  (e.g., from physical address ); this copy may be stored, in order to facilitate a complete examination of virtual address space , even though a portion of virtual address space  has been swapped out. The virtualization software can then allow the modification to guest page table .","With reference now to step , if a portion of the monitored virtual address space is to be swapped in, any existing copies of that portion may be discarded. For example, if a page corresponding to the monitored virtual address space was previously swapped out, when that page is swapped back in, the copy created when it was swapped out can be discarded. If the detected change attempts to modify the present bit of an entry in the guest page table (e.g., from \u201cnot present\u201d to \u201cpresent\u201d), the guest operating system may be attempting to swap a page back in, e.g., write the contents of a page of virtual memory to a location in physical memory; the swapped-in page may or may not be written to the same physical address it was previously stored at. Alternatively, the guest operating system (or the monitored process) may be discarding the previous version of the page, and replacing its contents. In either scenario, the old copy of the swapped out page may be safely discarded. In some embodiments, before a copy is discarded, the stored copy is compared with the page being swapped in. These embodiments thereby provide additional protection against error or malicious attack, as pages are only swapped in to physical memory if they match the page which was previously swapped out. If the pages do not match, a monitoring event may be triggered, alerting the monitoring agent of the discrepancy.","In some embodiments, steps  through  may loop, so long as the virtual machine continues operating and the monitored virtual address space remains in use. In some situations, monitoring may begin and conclude without detecting any attempted page table changes, e.g., such as when the process being monitored is a short-lived function call, and is not preempted or interrupted. Moreover, in some situations, a process may be monitored, and changes occur in the monitored virtual address space, but the process may terminate without a scan being performed.","With reference now to step , the virtual machine is put into a suspended state. As noted previously, such a suspend operation may be instituted according to a regular scan schedule, or in response to a detected trigger event, such as observed aberrant behavior of a monitored virtual machine. Alternatively, a scan may run at a time when a virtual machine is in a suspended state, e.g., in preparation for virtual machine migration. In other embodiments, other methods of instituting a suspended state for a monitored virtual machine may be utilized.","With reference now to step , the virtual address space associated with the virtual machine is examined. In this embodiment, the examining entity, such as an antivirus scanner, examines both those portions of the virtual address space still resident in machine memory, and the copies of the portions of the virtual address space which have been swapped out of machine memory. A monitoring agent on the host may provide an interface for the examining entity, such as an API (Application Programming Interface), and indicate where copies of swapped pages may be located.","With reference now to step , the virtual machine resumes operation. In some embodiments, the virtual machine resumes functioning, after the examination of the virtual address space is concluded successfully. In other embodiments, if the examination reveals a problem, e.g., a virus, the virtual machine may not resume ordinary operation.","With reference now to step , tracing of the virtual address space stops. As noted previously, the monitoring agent should terminate under certain conditions. In different embodiments, different events may trigger the cessation of tracing. For example, if the related process has terminated, or if the monitored data structure, e.g., the page table, has been released or destroyed, or if the guest operating system shuts down, the monitoring agent should cease tracing the virtual address space. This step may also entail discarding any remaining copies of pages from the virtual address space, modifying the shadow page table to remove the read-only flags, or deleting the shadow page table.","Monitoring the Virtual Address Space of an Operating Virtual Machine","Another application of the present invention enables monitoring of the contents of the virtual address space of a monitored virtual machine, while the virtual machine is operating. This continued monitoring offers several advantages. First, security applications, such as antivirus and anti-malware programs, can monitor the operation of processes within the monitored virtual machine from outside the virtual machine. This can be accomplished from within a separate virtual machine on the same host, for example. Second, the virtualization software can monitor the operations of the virtual machine to better facilitate system call interception or other monitoring goals.","To monitor the virtual address space in use by any given program in a virtual machine while the virtual machine operates, a monitoring agent within the virtualization software should include several capabilities. First, the monitoring agent should include functionality to monitor a page table associated with virtual address space being monitored. Second, the monitoring agent should include functionality to monitor contents of physical (and machine) memory associated with that virtual address space. In different embodiments, the monitoring agent can be configured to provide notifications upon the occurrence of specified events. For example, if the contents of a given memory location being monitored change, the monitoring agent may be configured to send a notification event to a security program operating in another virtual machine.","With reference now to , showing flowchart , a method of monitoring virtual address space of an operating virtual machine is described, in accordance with one embodiment. Although specific steps are disclosed in flowchart , such steps are exemplary. That is, embodiments of the present invention are well suited to performing various other (additional) steps or variations of the steps recited in flowchart . It is appreciated that the steps in flowchart  may be performed in an order different than presented, and that not all of the steps in flowchart  may be performed.","With reference now to step , the virtual machine starts up. In some embodiments, when the virtual machine is powered on, or particularly when a guest operating system for that virtual machine begins to function, controlling virtualization software creates shadow page tables to minor page tables created by the guest operating system. As discussed previously, these shadow page tables allow translation between guest physical address space being apportioned by the guest operating system, and physical address space corresponding to the host system's hardware.","With reference now to step , virtual address space in the virtual machine is traced. In some embodiments, virtualization software, or a monitoring system within the virtualization software, begins tracing virtual address space corresponding to one or more processes, function calls, or applications being run on the virtual machine. In the depicted embodiment, tracing virtual address space involves disabling write access to entries in the guest page table associated with that virtual address space, such that attempts to modify the guest page table would trigger page faults. Tracing the virtual address space also includes monitoring memory associated with the virtual address space for changes, e.g., by monitoring physical address space locations corresponding to the virtual address space. In this manner, changes which modify the virtual address space being monitored are detected, even if those changes are not the result of modifications to the page table.","With reference now to step , a change in the monitored virtual address space is detected. If, for example, a page fault is triggered by an attempt to modify a guest page table entry mapped by a read only entry in the shadow page table, the virtualization software, or a monitoring system within the virtualization software, will detect the page fault. Also, if an attempt is made to modify the contents of a memory location associated with the virtual address space being monitored, such an attempt would also be detected, as the shadow page table entries mapping those memory pages are also marked as read only.","With reference to step , if a portion of the monitored virtual address space is to be swapped out, a copy of that portion is retained. If the detected change attempts to modify the present bit of an entry in the guest page table (e.g., from \u201cpresent\u201d to \u201cnot present\u201d), the guest operating system may be attempting to swap that page out of physical memory, and into storage. As such, a copy of the swapped out page should be retained, to allow examination of that portion of the monitored virtual address space.","With reference to step , if the contents of a monitored location in memory associated with the monitored virtual address space change, a notification event is processed. In some embodiments, portions of the guest physical memory or machine memory associated with the monitored virtual address space can be monitored for changes. In different scenarios, different amounts of memory may be monitored; for example, only a specific portion of a memory page may need to be monitored, to detect specific actions. In one embodiment, a trace is put on a full page. If a change is made to the monitored page, a monitoring agent or state machine executing within the virtualization software can examine the portion of interest for changes, and issue a notification event to an interested entity (e.g., a security program executing in another virtual machine on the host system).","With reference to step , if a portion of the monitored virtual address space is to be swapped in, any existing copies of that portion may be discarded. For example, if a page corresponding to the monitored virtual address space was previously swapped out, when that page is swapped back in, the copy created when it was swapped out can be discarded. If the detected change attempts to modify the present bit of an entry in the guest page table, the guest operating system may be attempting to swap a page back in. Alternatively, the guest operating system (or the monitored process) may be discarding the previous version of the page, and replacing its contents. In either scenario, the old copy of the swapped out page may be safely discarded. In some embodiments, before a copy is discarded, the stored copy is compared with the page being swapped in. These embodiments thereby provide additional protection against error or malicious attack, as pages are only swapped in to physical memory if they match the page which was previously swapped out. If the pages do not match, a notification event may be triggered, alerting the monitoring agent of the discrepancy.","Moreover, in some embodiments, a notification event can be triggered by changing the status of the present bit on an entry in the guest page table. In some situations, a monitoring program should be informed when an entry in the guest page table is marked as being present, e.g., to detect attempts to insert malicious instructions into the virtual address space being monitored.","With reference now to , showing flowchart , a method is illustrated, beginning at step , for monitoring a data structure maintained by guest software within a virtual machine, the virtual machine being supported by virtualization logic in a virtualized computer system. Step  comprises monitoring said data structure and detecting changes to said data structure. Step  comprises determining either that one or more memory pages containing said data structure are swapped into guest physical memory by guest software or that one or more memory pages containing said data structure are swapped out of guest physical memory by guest software. Step  comprises, based on the determination that one or more memory pages are swapped into or out of guest physical memory, retaining information about the contents of the data structure contained in at least one memory page that is swapped out of guest physical memory so that said contents are available after the at least one memory page has been swapped out of guest physical memory.","Although the subject matter has been described in language specific to structural features and\/or methodological acts, it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather, the specific features and acts described above are disclosed as example forms of implementing the claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The accompanying drawings, which are incorporated in and form a part of this specification, illustrate embodiments of the invention and, together with the description, serve to explain the principles of the invention:","Prior Art  is a diagram of an exemplary virtualized computer system with which embodiments of the present technology may be practiced.",{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 3","i":"a "},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 3","i":"b "},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 3","i":"c "},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 5","i":"a "},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 5","i":"b "},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 7"}]},"DETDESC":[{},{}]}
