---
title: Configuring templates for an application and network management system
abstract: Methods and Systems for configuring secure templates for an application and network management system to provide network security. A template for an application and network management system is configured with first information for determining whether at least one message received by the template should or should not be processed by the template. The template is configured with second information for processing data associated with at least one received message. The template is configured with third information for preventing the communication of at least one received message to other templates for the application and network management system.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08065368&OS=08065368&RS=08065368
owner: Hewlett-Packard Development Company, L.P.
number: 08065368
owner_city: Houston
owner_country: US
publication_date: 20030731
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["RELATED APPLICATIONS","TECHNICAL FIELD","BACKGROUND ART","DISCLOSURE OF THE INVENTION","BEST MODE FOR CARRYING OUT THE INVENTION","Hardware Overview","Software System and Functional Overviews","Attributes","Interceptors","Templates","Actions","Trouble Tickets and Notifications","Assigning Templates to Nodes","Validation","Condition Section","Set Attributes Section","Action Section","SNMP","Automation","Additional Considerations","Advanced Options","An Operational Example","Concslusion","Extensions and Alternatives"],"p":["This application is related to U.S. application Ser. No. 10\/360,883 entitled \u201cA Method and System for Preventing Unauthorized Action in an Application and Network Management Software Environment\u201d by Amit Raikar and Guruprasad Ramarao and assigned to the assignee of the present invention filed on Feb. 6, 2003, the contents of which are incorporated herein.","Embodiments of the present invention relate to managing networks. More specifically, embodiments of the present invention relate to configuring application and network management systems to provide security for devices and\/or applications associated with networks.","With the advent of distributed networking systems, there has been a growing need for systems that manage (referred to hereinafter as \u201cmanagement systems\u201d) the devices (referred to hereinafter as \u201cnodes\u201d) of networks and applications (referred to hereinafter as \u201cagents\u201d) that may run on those devices. A managed system may include, among other things, the nodes and agents the system manages and a server (referred to hereinafter as a \u201cmanagement server\u201d) that manages the nodes and agents.","Examples of nodes include operating system based computers that are capable of running agents (referred to hereinafter as \u201coperating systems based nodes\u201d) and devices, such as routers, firewalls, load balances, that are not capable of running agents (referred to hereinafter as \u201cnon-operating systems based nodes\u201d). Since the agents on \u201coperating systems based nodes\u201d not only send information about the system but can also actively and flexibly manage the nodes, the operating systems based nodes with agents are referred to hereinafter as \u201cmanaged\u201d nodes. On the other hand, even though \u201cnon-operating systems based nodes\u201d also send information about the system, for example using SNMP, the amount of flexibility in managing the system is limited; hence the non-operating systems nodes are also known as \u201cexternal\u201d nodes, even though they may be managed indirectly, as will be described in more detail.","Examples of managing include, among other things, determining whether processes, nodes, and\/or agents are running, how much memory a node has, the Computer Processing Unit (CPU) utilization of the node, whether a firewall has been intruded, correlating received messages either on the agent or the management server side to determine that a firewall has been intruded and taking action based on these determinations. Examples of taking action may include, among other things, adding more memory to a node, re-balancing a workload, or terminating reception of communications from a network behind a firewall that is failing.","One such application and network management system is Hewlett Packard's Openview Operations (OVO). Typically, in OVO, the nodes and\/or agents associated with the application and network monitoring system communicate, directly or indirectly, information about their status with a management server. The server uses the communications to manage the nodes and\/or agents associated with the network. For example, an agent executing on a particular managed node may generate a message including information about the status of the agent or the node the agent is running on. Similarly, a non-managed node may generate an SNMP trap (the term \u201cmessages\u201d shall be used hereinafter to refer to, among other things, messages, which are generated with Application Programming Interfaces (APIs), opcmsg, or opcmon, events, alerts, Simple Network management Protocol (SNMP) traps, and system logs). An interceptor, also running on the node, receives the message (referred to hereinafter as a \u201creceived message\u201d) and analyzes the received message with a template. Applications may be configured to be agents by associating templates and interceptors with the applications.","Typically a network administrator distributes templates to the various nodes that are being managed within a particular management system. Usually, templates are configured by more than one person or by more than one group of people. For example, application developers know more about the agents and network administrators know more about networks. Therefore, the applications developers may initially configure the templates based on the application developers' knowledge of their applications. Then network administrators may modify the templates or add templates based on their knowledge of networks and distribute the templates to the appropriate nodes.","One problem with configuring templates is that developers have varying knowledge about security in general and about other agents. For example, since the developer of application A on an agent does not know the code of application B on the same agent, the developer of application A may develop templates that create messages that will be received by the templates associated with application B (referred to herein as \u201cproliferation of messages\u201d).","Another problem with configuring templates is the complexity involved in configuring the templates. Furthermore, there is a lack of expertise on the part of people configuring the templates. For example, frequently network administrators and\/or application developers try erroneously to configure the templates as openly as possible. This may result in inappropriate actions being performed, either by mistake or owing to malicious intent.","An example of one inappropriate action is removing directories on a node that did not request the action. In this case, a user on node A creates a message requesting that a yet unspecified action be performed on node B. A template on node A intercepts the message and appends a request for an action, such as the deletion of directories. The message is forwarded to the server. Since the message designates that the action should be performed on node B, the server forwards the message to node B. Since the message is from the server, node B assumes that it has to perform the action and deletes all of its directories. As can be seen, a malicious user may use this inappropriate action to delete directories on a node the user is not even allowed access to.","In the above example, node A is an example of a \u201clocal node\u201d because it is the node that requested, by creating the message, to delete the directories. Node B is an example of a \u201cremote node\u201d because it is not the node that requested the deletion of its directories. The deletion of the directories is an example of a \u201cremote action\u201d because the action of deleting directories was performed on a remote node. A \u201ctarget node\u201d is the node that an action is performed on. In this case, Node B is the target node. However, if the action had been performed on Node A, then Node A would have been the target node. Further, if the Node A's directories had been deleted, then the action would have been a \u201clocal action\u201d because the action would have been performed on the local node. As the agent runs with root type of privileges and the message received by the agent can be created by a non-privileged user, even local actions may be used with malicious intent, for example, by getting around user account privilege enforcement mechanisms.","Another example of an inappropriate action is the proliferation of messages (also known as a \u201cmessage storm\u201d). In this case, an improperly configured template erroneously generates messages based on received messages.","The Advance Network Security (ANS) module may be used for securing the communications aspect of an OVO based solution. ANS may be used to assure that only authenticated agents communicate with an authenticated server, and the traffic between them meets integrity and confidentiality requirements. However, ANS does not address the problems already described herein.","For these and other reasons, a method and\/or a system that provides security for a network would be valuable. Further a method and\/or system that increases overall performance of a network would also be of value. A further a method and\/or a system that provides enhanced usability and robustness of a application and network management system would also be of value.","The present invention increases security for a network, and applications on that network. The present invention provides increased overall performance of a network and the nodes on that network. The present invention provides enhanced usability and robustness of a management system.","Embodiments of the present invention pertain to methods and systems for configuring secure templates for an application and network management system is described. In one embodiment, a template for an application and network management system is configured with first information for determining whether at least one message received by the template should or should not be processed by the template. The template is configured with second information for processing data associated with at least one received message. The template is configured with third information for preventing the communication of at least one received message to other templates of the application and network management system.","The drawings referred to in this description should not be understood as being drawn to scale except if specifically noted.","Reference will now be made in detail to various embodiments of the invention, examples of which are illustrated in the accompanying drawings. While the invention will be described in conjunction with these embodiments, it will be understood that they are not intended to limit the invention to these embodiments. On the contrary, the invention is intended to cover alternatives, modifications and equivalents, which may be included within the spirit and scope of the invention as defined by the appended claims. Furthermore, in the following description of the present invention, numerous specific details are set forth in order to provide a thorough understanding of the present invention. In other instances, well-known methods, procedures, components, and circuits have not been described in detail as not to unnecessarily obscure aspects of the present invention.",{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 1","b":["190","190","100","101","100","102","100","101","103","100","101","104","100","105","100","106","100","101","107","100","101","108","190"]},"Display device  utilized with computer system  may be a liquid crystal device, cathode ray tube, or other display device suitable for creating graphic images and alphanumeric characters recognizable to the user. Cursor control device  allows the computer user to dynamically signal the two-dimensional movement of a visible symbol (pointer) on a display screen of display device . Many implementations of the cursor control device are known in the art including a trackball, mouse, joystick or special keys on alphanumeric input device  capable of signaling movement of a given direction or manner of displacement. It is to be appreciated that the cursor control  also may be directed and\/or activated via input from the keyboard using special keys and key sequence commands. Alternatively, the cursor may be directed and\/or activated via input from a number of specially adapted cursor directing devices.",{"@attributes":{"id":"p-0026","num":"0025"},"figref":["FIG. 2","FIG. 2"]},"In the present embodiment, the software system  includes a network  and nodes (, , ) that are managed by an application and network management system  and a node , which is not managed by the application and network management system . The application and network management system  uses agents (, ), interceptors (, ), templates (, ), and a management server , among other things, to manage nodes (, , ). In the present embodiment, nodes (, ) are \u201coperating systems based managed nodes\u201d and node  is an example of a \u201cnon-operating systems based managed node\u201d.","In the present embodiment, applications of the \u201coperating systems based managed nodes\u201d are configured to be agents (, , ) of the application and network management system  by associating interceptors (, , ) and templates (, , ) with each of the agents (, , ). For example, agent  is configured with interceptors  and templates , agent  is configured with interceptors  and templates , agent  is configured with interceptors  and templates . Application  is not configured to be an agent of the application and network management system .","In the present embodiment, a template automator  may either create templates (, ), and\/or modify existing templates (, ) to provide a more secure environment.","In another embodiment, guidelines are described for either creating templates (, ), and\/or modifying existing templates (, ) to provide a more secure environment.","In one embodiment, the templates (, , ) and interceptors (, , ) associated with each agent (, , ) process more than one kind of message. For example, there may be templates for processing messages from opcmsg, SNMP traps, etc., as will be described in more detail. There may be a template T for processing opcmsg messages associated with templates  and a corresponding interceptor I associated with interceptors . Similarly, there may be a template T for processing SNMP traps associated with templates  and a corresponding interceptor  associated with interceptors . Similarly, there may be templates for processing opcmsg messages (T) and SNMP traps (T) associated with templates  and corresponding interceptors (I, I) associated with interceptors .","In one embodiment, the templates  associated with a particular node, such as node , form a hierarchy of templates. Continuing the example, the console message template and the SNMP trap template of templates  may be, respectively, the first and second templates in the template hierarchy. Similarly, a different console message template and a different SNMP trap template of templates  may be, respectively, the third and fourth templates in the template hierarchy.","Received messages may be analyzed by each template associated with the hierarchy of templates. Continuing the example, the received message may be analyzed by the first template in the template hierarchy, then by the second template, the third template and finally by the fourth template, thus, the received message may be processed by templates associated with more than one agent, as will be described in more detail.","In one embodiment, the application and network management system  is an OVO system, as will be described in more detail.","The nodes (, , , ) and the management server  form two and\/or three tiers of communication for the management system.","An example of three tier communications involves a node , such as a firewall, a load balancer, or a router, that does not run an agent. Assume that node  is a router that generates an SNMP trap that will be processed by an SNMP trap interceptor of interceptors  and an SNMP trap template of templates  associated with agent  running on node .","Continuing the three tier example, the node  generates an SNMP trap, the SNMP interceptor running on node  receives the trap and generates a message with the help of the SNMP trap template. The generated message is transmitted to the management server  on behalf of node . The SNMP trap template may use information from the received SNMP trap to generate the message that is transmitted to the management server . In this case, node  is the first tier, node  running the agent  is the second tier and the management server  is the third tier.","An example of two tier communications involves a node  that runs an agent . Assume that an agent , such as a database application, on node  generates a message with opcmsg, a message interceptor of interceptors  on the same node  receives the message and possible creates another message that is transmitted to the management server . In this case, node  running the agent  is the first tier and the management server  is the second tier.","Message attributes are used for associating information with the messages. Examples of attributes include, among other things, severity, node, application, message group, object, and message text. The severity attribute may specify the severity of conditions that resulted in the generation of the messages. The node attribute may specify the nodes that generated the message or that are affected by the message. The message group attribute may specify groups, such as operators or network administrators, which should see the message. The object attribute may be used for categorizing messages. For example, messages generated by a performance monitoring application may have object attributes set to the value \u201cperformance\u201d. The message text attribute may specify any kind of text that programmers may want to associate with a particular message. The action attribute may specify a request for performing an action.","In one embodiment, application and network management system  provides five types of interceptors. The first type is a \u201cmessage interceptor\u201d, for intercepting opcmsg commands or API based messages from an agent. The second type is a \u201clogfile interceptor\u201d for monitoring the system and application logfiles; The third type is an \u201cSNMP trap interceptor\u201d for intercepting SNMP traps that were transmitted to the node running the SNMP trap interceptor (referred to herein as \u201clocal SNMP traps\u201d) or that were transmitted from a non-operating systems based node (referred to herein as \u201cremote SNMP traps\u201d); The fourth type is a \u201cconsole message interceptor\u201d for intercepting messages sent to the console; and the fifth type is a \u201cmonitor agent interceptor\u201d for monitoring values and\/or objects with the help of programs and\/or scripts, as will be described herinafter.","In application and network management system , one interceptor for each type of interceptors may be provided to each agent and one template that corresponds to each interceptor is also provided. For example, there may be a message interceptor and a corresponding message template, a logfile interceptor and a corresponding logfile template, etc. for each agent that is managed by a management server in a particular network.","The templates provide the interceptors with instructions on how to analyze and\/or process the messages the interceptors receive. For example, the templates typically have, among other things, multiple individual \u201cmessage conditions\u201d. Each message condition may include three sections, a condition section, a set attribute section, and an action section, among other things.","The condition section may be configured with instructions to determine how received messages should be processed. For example, instructions may specify that a received message should not be processed by this template or by any templates after this template in the template hierarchy (referred to hereinafter as \u201csuppressing\u201d the received message). Similarly, instructions may specify that a new message should be created based on the received message.","Additionally, the instructions may specify conditions, such as this message is for \u201cperformance\u201d, that are \u201cmatched\u201d or \u201cunmatched\u201d. For example, a received message may be suppressed if the condition is not matched (referred to hereinafter as \u201csuppress on unmatched condition\u201d). In other words, if the received message does not pertain to performance, then suppress the message so that the message is not processed by this template or by any other template in the template hierarchy. In another example, the received message may be suppressed if the condition is matched (referred to hereinafter as \u201csuppress on matched condition\u201d). In other words, if the received message does pertain to performance, then suppress it. In another example, a new message is created if the received message pertains to a specified condition (referred to hereinafter as \u201cmessage on matched condition\u201d). In other words, if the received message is for performance a new message may be created and information from the received message may be copied into the new message, which may be transmitted to a management server.","The set attribute section may be configured to modify attributes in an existing message or a newly created message. For example, if the received message caused by a particular condition indicates that the criticality of the condition is minor, the set attribute section may modify the criticality to moderate. Similarly, the format of the received message may be modified in the set attribute section. For example, an operator may not understand messages that are generated by a database application. The set attribute section may take the information of a received message, create a new more user-friendly message and map the information of the received message into the new message.","The action section may be configured to specify an action to be performed based on the received message.","In one embodiment, actions may require operator intervention (referred to hereinafter as \u201coperator initiated actions\u201d) or may occur automatically without operator intervention (referred to hereinafter as \u201cautomatic actions\u201d). An example of an operator-initiated action may involve a database application running out of space. An operator may be presented a message indicating several possible actions the operator may select from. The operator may select (e.g., initiate) an action that results in backing up the database and in allocating more space to the database.","An example of an automatic action may involve terminating the reception of communications from a network behind a firewall that is failing. This may involve correlating received messages from one or more nodes to determine that the firewall has been intruded. Correlating messages may be performed, for example, on a managed node or a managed server.","Other examples of actions involve requesting trouble tickets or providing notifications, as will be described in more detail.","Managing the entities (nodes, agents, etc.) of a management system, sometimes involves requesting that other entities perform certain tasks. Sometimes these other entities are outside of the management system. Trouble tickets may be used for requesting that these tasks be performed.","Continuing the example of the database application running out of space. The database application (e.g., agent) detects and generates a message indicating that the database is running out of space. An interceptor for the database application receives the message. The action section of the template for the interceptor indicates in the newly created message that a trouble ticket should be generated. In the application and network management system , the \u201cset forward to trouble ticket\u201d option may be used to set a value in messages communicated to the management server that a trouble ticket should be generated. The newly created message is transmitted to the management server. The management server receives the new message and generates a trouble ticket indicating that a new disk should be allocated to the database. The trouble ticket is then forwarded to another entity, such as a workflow application, that performs tasks required for allocating the new disk.","In another example, notifications may be used for requesting that tasks be performed. An example of a notification, is indicating that an operator should be \u201cnotified\u201d by paging the operator. In this case, a request for the notification (e.g., page the operator) may be specified as an action of a message that is transmitted to a management server.","Nodes are frequently grouped together because they share a level of trust and\/or functionality (referred to hereinafter as a \u201cnode group\u201d). For example, nodes with a moderate level of trust may be grouped together. In a second example, nodes that are used by a particular department may be grouped together. In a third example, the nodes associated with a distributed database may be grouped together.","Templates are frequently grouped together for the purposes of distributing the templates to nodes (referred to hereinafter as \u201ctemplate groups\u201d). For example, templates for nodes in a distributed database may be grouped together and distributed to the grouped nodes.","Distributing template groups to a particular node or a group of nodes should be approached with caution, as certain aspects that affect security may not be noticed. In one embodiment, template groups are not distributed to node groups, but instead templates are analyzed and distributed individually to particular nodes.","In one embodiment, various mechanisms may be used for validating information associated with messages to ensure that appropriate actions are performed. These mechanisms may include, among other things, analyzing the messages with programs and\/or scripts, analyzing message information with pattern matching language, using environment variables to set and\/or analyze attributes of the messages, and using values obtained from secure sources to set and\/or analyze attributes of the messages.","Message Stream Interface (MSI) is an example of a product that provides an interface for programs and\/or scripts for analyzing messages on behalf of the application and network management system to enhance security. MSI application (i.e. the application using MSI) may be run on either a managed node or on the management server. For example, MSI application installed on node  may receive the same message that interceptors  receive. Similarly, MSI application installed on a management server  may receive messages that interceptors  received or other messages that include information from the messages that interceptors  received. Further MSI may be run in either \u201cdivert\u201d or \u201cparallel\u201d mode. Continuing the example, in parallel mode MSI application and the interceptors  both receive identical copies of messages. However, in divert mode MSI application initially receives the message, processes the message and potentially modifies the message, after which the interceptors  receive the message. MSI application may prevent the interceptors  from receiving messages. Since a malicious user may install MSI application configured in divert mode on a managed node, templates in conjunction with the interceptors have no way of determining whether the messages they receive have been modified. Therefore, in one embodiment, MSI is run in parallel mode on managed nodes.","However, since a malicious user does not have access to management servers, MSI running in divert mode on management servers may be used to provide enhanced security. For example, MSI application running on a management server may intercept a message before the message is processed by management code on the server to validate packet level information in the message against application level data. Examples of application level data include the IP address from the application header. In one embodiment, MSI is run in divert mode on the management server. In one embodiment, MSI is minimally deployed on the management server.","In one embodiment, received messages may be validated by programs and\/or scripts, such as those provided by MSI. The invocation of programs\/scripts may be specified as an automatic action, for example on a trusted system like a management server, to which the values of message attributes are passed. The programs\/scripts may validate the values of the message attributes and retransmit the received messages with an additional attribute that indicates the received messages have been validated.","Environment variables are variables that define the environment of an agent. Examples of environment variables are MSG_GEN_NODE, which is the node that generates a particular message and MSG_GEN_NODE_NAME, which is the name of the node that generated the message. MSG_NODE is the node that is affected by the message and MSG_NODE_NAME is the name of the node that is affected by the message. In the case where the node, such as a proxy server, that generates a particular message forwards the message to another node, the MSG_GEN_NODE will not be identical to the MSG_NODE. Similarly in this case, the MSG_GEN_NODE_NAME will not be identical to the MSG_NODE_NAME.","In one embodiment, environment variables are used for ensuring an action is performed on the node requesting the action. For example, by using the environment variables to specify that an action must be performed on the node that requested the action, a malicious user on one node may not request that harmful actions be performed on another node. Similarly, the environment variables may be used to determine whether a message already specifies that the action will be performed on the node that requests the action.","In another embodiment, environment variables are not trusted in a non-trusted environment. For example, MSI running in divert mode on the management server may be used to determine if the node that generated the message is the same as the node that will be affected by the message. In this case, this may be determined by comparing MSG_GEN_NODE_NAME to MSG_NODE_NAME.","As already stated, frequently received messages include message attributes such as severity, node, application, message group, object and message text. Pattern matching language may be used for analyzing attributes in the condition and the set attributes sections, among other things","The pattern matching language of the application and network management system  provides pattern matching capabilities such as a wild card for an entire attribute (e.g., \u201c*\u201d ) and a wild card for an individual character (e.g., \u201c@\u201d). For example, \u201c*\u201d may be used to indicate that any value for a particular attribute, such as the node attribute, in received messages is valid. Similarly, \u201c@\u201d may be used to indicate that any character specified in a particular position of received messages is valid.","Other pattern matching capabilities may be used to specify where within a message a comparison should begin. For example, the \u201c^\u201d indicates that a comparison should begin at the start of a message. Similarly, the \u201c$\u201d indicates that a comparison should start at the end of a message. The \u201cnS\u201d indicates the number of spaces that should be skipped before beginning a comparison. For example, 5S indicates that a comparison should begin after 5 spaces from the start of a message.","The pattern matching capabilities \u201c^\u201d and \u201c$\u201d are referred to as anchoring characters because comparisons are anchored to the start or end of a message.","In one embodiment, open pattern matching capabilities such as \u201c*\u201d are not used for analyzing received messages to avoid taking inappropriate actions or correlating messages incorrectly, as will be described in more detail.","In one embodiment, anchoring characters are used to increase the probability that received messages are correctly identified.","In one embodiment, numerical comparison characters of the pattern matching language may be used to validate numerical values associated with received messages.","In one embodiment, non-numerical values, such as keywords, associated with received messages are validated with \u201c@\u201d and\/or \u201cnS\u201d. For example, the \u201c@\u201d and \u201cnS\u201d may be used to determine if the message text of a received message includes desired keyword values. In this case, the message text of performance related messages may include \u201cCPU utilization=90%\u201d, or \u201cCPU utilization=80%\u201d, etc., where the percent varies from one performance related message to another. Further the \u201cCPU utilization=\u201d may start at position  in a message. The pattern matching language 12S may be used to start a comparison at position , where the message is compared against a literal \u201cCPU utilization=\u201d. Two \u201c@\u201d signs may be specified after \u201cCPU utilization=\u201d to indicate that any percent is valid.","In one embodiment, non-numerical values associated with received messages may be validated by comparing the non-numerical values against the values of environment variables. For example, MSG_GEN_NODE_NAME and MSG_GEN_NODE may be used to validate the node and\/or the object attributes.","In application and network management system , a \u201ctest pattern matching feature\u201d is provided to determine whether the condition section has been configured properly. Specifically the \u201ctest pattern matching feature\u201d validates whether the pattern matching language specified by templates designates the proper message that should be received by that template. In one embodiment, the \u201ctest pattern matching feature\u201d is used to validate templates before the templates are distributed to various nodes in the management system.","Values may be obtained from sources that users cannot tamper with, such as application and network management environment variables or a host configuration file. Values obtained from secure sources may be used to set the values of attributes and\/or to validate the values of attributes.","As stated before, the templates typically include, among other things, multiple individual message conditions. Message conditions include among other things condition sections.","In one embodiment, the condition section of the \u201cfirst\u201d message condition is used for determining whether messages received by a particular template should or should not be processed by the particular template and the \u201clast\u201d message condition is used for determining whether the received messages should be processed by other templates in the template hierarchy. For example, the template hierarchy may include templates T and T where template T receives messages before T. Also assume that template T receives messages A and B. The first message condition of template T may determine that template T will process message A but not message B, thus, message A is processed by template T but message B is not processed by template T. Assume in this example, that template T processes message A with \u201cmessage on matched conditions\u201d to create another message C, copies information from message A into message C and possibly modifies the information in message C in some manner. Then the \u201clast\u201d message condition determines that message A only needs to be processed by template T and prevents template T from receiving message A.","In one embodiment, the condition section of the \u201cfirst\u201d message condition determines whether received messages should or should not be processed using \u201csuppress on unmatched condition\u201d logic. For example, if a message B includes an object attribute for \u201cFIREWALL INTRUDED\u201d and template T's purpose is to process performance messages, the \u201cfirst\u201d message condition of template T may suppress message B because message B does not match the condition \u201cperformance\u201d.","In one embodiment, the condition section of the \u201cfirst\u201d message condition may be configured to \u201csuppress on unmatched condition\u201d by not matching the \u201csuperset of conditions\u201d from all of the messages that the message template is configured to process. For example, if template T is configured to process a message for CPU degradation 80% and another message for CPU degradation 90%, then the \u201csuperset of conditions\u201d would be CPU degradation for 80% and also for 90%. Since the \u201cfirst\u201d message condition suppresses on unmatched conditions, received messages indicating a firewall has been intruded would be suppressed. Similarly, received messages for CPU degradation of 10% and 20% would also be suppressed.","First, suppressing received messages with a \u201cfirst\u201d message condition reduces the number of messages that the corresponding interceptor will process with the rest of the template. For example, if a message B is suppressed on the \u201cfirst\u201d message condition of template T, template T will not process message B with logic, such as \u201cmessage on matched conditions\u201d, that follows the \u201cfirst\u201d message condition. Reducing the number of messages that interceptors process improves overall performance of the network and enhances security of the network, among other things.","Second, suppressing received messages with a \u201cfirst\u201d message condition reduces the number of unnecessary messages that interceptors for other templates in the template hierarchy will process. For example, if template T suppresses message B, then template T will not receive message B. Reducing the number of unnecessary messages that interceptors process improves the overall performance of a network and enhances security of the network, among other things.","Third, suppressing received messages with a \u201cfirst\u201d message condition eliminates the need for redundant filtering on processing logic, such as \u201cmessage on matched conditions\u201d, that follows the \u201cfirst\u201d message condition. For example, assume that template T only processes performance messages but template T does not suppress messages that are not for performance in the \u201cfirst\u201d message condition. In this case, the processing logic that follows the \u201cfirst\u201d message condition would need to determine if the messages that the logic processes are for performance. If the logic includes several \u201cmessage on matched conditions\u201d, this determination would need to be made on each \u201cmessage on matched condition\u201d. Thus, eliminating the need for redundant filtering on each \u201cmessage on matched condition\u201d improves overall performance of a network. Since logfiles typically contain large amounts of data that requires a lot of parsing, eliminating redundant filtering on each \u201cmessage on matched condition\u201d of a logfile template results in a significant performance increase, among other things.","Fourth, suppressing received messages with \u201cfirst\u201d message condition eliminates the possibility that new messages may be erroneously created, for example in \u201cmessage on matched conditions\u201d that specify improper open conditions, such as a \u201c*\u201d for a target node. In another example, template T may receive a message C that is not related to performance and may create another message D using information from message C. Eliminating the erroneous creation of messages enhances the overall performance of a managed system and significantly improves the security of the managed system, among other things.","Fifth, suppressing received messages with a \u201cfirst\u201d message condition eliminates erroneous actions. For example, a request for an erroneous action (such as requesting that a management server create a trouble ticket) may be appended to message D. Eliminating erroneous actions improves the security of a managed system, among other things.","In one embodiment, the condition section of the \u201cfirst\u201d message condition is configured to suppress on unmatched condition in at least the message, logfile, SNMP trap, and console templates.","In one embodiment, the condition section of the \u201clast\u201d message condition is configured to \u201csuppress on matched condition\u201d messages that are processed by a particular template, provided the messages do not also need to be processed by other templates in the template hierarchy. For example, if received message A only applies to template T, and template T does not suppress message A after processing message A, template T, which comes after template T in the template hierarchy, will receive message A.","In one embodiment, the condition section of the \u201clast\u201d message condition may be configured to \u201csuppress on matched condition\u201d by matching the \u201csuperset of conditions\u201d from all of the messages that the template is configured to process. Continuing the previous example of the \u201csuperset of conditions\u201d being CPU degradation of either 80% or 90%: The condition section of the \u201clast\u201d message condition would suppress all messages for CPU degradation of either 80% or 90% after processing the messages for CPU degradation of 80% and 90%.","First, suppressing received messages with a \u201clast\u201d message condition of a particular template eliminates the possibility that other templates in the template hierarchy will erroneously process the messages. For example, if template T suppresses message A after processing message A, template T will not receive message A. Eliminating the possibility that other templates will erroneously process the messages improves overall performance of a network and enhances security of the network, among other things.","Similarly, since logfiles typically include large amounts of information, reducing the number of messages the logfile interceptors process greatly improves the performance of logfile interceptors.","Second, suppressing received messages with a \u201clast\u201d message condition of a particular template eliminates the possibility that other templates in the template hierarchy may erroneously create new messages in \u201cmessage on matched conditions\u201d. Continuing the example of template T receiving message A after template T fails to suppress message A. If template T's filtering rules are mis-configured or specify improper open conditions, T may incorrectly identify message A as a message T should process in some manner. One way T may process message A is by creating another message B and transmitting message B to the management server, for example with a \u201cmessage on matched condition\u201d. A \u201cmessage storm\u201d may result if enough messages are incorrectly created and transmitted. Not only does the incorrect creation and transmission of messages degrade the overall performance of the network, but security is also degraded, as unwanted actions may occur. By reducing the incorrect creation and transmission of messages, the usability and the availability of a network also increases.","In one embodiment, the condition section of the \u201clast\u201d message condition is configured to suppress on matched condition in at least the message, logfile, SNMP trap, and console templates.","In one embodiment, templates only suppress messages from the agents that the templates correspond to. For example, if template T corresponds to a particular performance monitoring application, the template T would only suppress messages in the \u201cfirst\u201d and \u201clast\u201d message condition for that performance monitoring application. One way of doing this is to check the value of the application attribute for the received messages.","In one embodiment, the condition section uses pattern matching language to identify received messages. For example, pattern matching language may be used in the \u201cfirst\u201d message condition to determine if received messages specify conditions that do not match the conditions specified by the pattern matching language; therefore, the received messages are suppressed. Similarly, pattern matching language may be used in \u201cmessage on matched conditions\u201d to determine if the received messages specify conditions that match conditions specified by the pattern matching language; therefore, new messages are created. Thirdly, pattern matching language may be used in the \u201clast\u201d message condition to determine if messages that have been processed specify conditions that match conditions specified by the pattern matching language; therefore, the processed message are suppressed.","In one embodiment, the pattern matching language is used against the received messages' message text as the message texts may be specific to each message. The values for attributes such as node, application, and node group, may be the same for messages that pertain to many templates; therefore, these attributes may be used in the \u201cfirst\u201d message conditions to suppress messages on unmatched condition, but, may not be sufficient for determining whether to create new messages with \u201cmessage on matched conditions\u201d.","In one embodiment, the pattern matching language is used to analyze the object attribute of received messages as the object attribute may be specific to a category of messages that are processed by particular templates. For example, a performance monitoring agent may produce a category of messages that have an object attribute set to \u201cperformance\u201d. Pattern matching language for a template associated with the performance monitoring agent may be used to determine whether received messages include an object set to the value \u201cperformance\u201d.","In the application and network management system , the \u201cmessage on matched conditions\u201d provides a set attributes section for message correlation and for setting some attributes associated with messages.","In the application and network management system , if the set attribute section does not provide specific values for message attributes, attributes for the messages created by the \u201cmessage on matched condition\u201d are automatically set to values from received messages (referred to hereinafter as \u201cinput values\u201d).","In one embodiment, the input values are only used for setting the attributes of created messages after the input values have been properly validated, using mechanisms as described in the \u201cValidation\u201d section herein, among other things.","In one embodiment, the set attribute section is not left empty. For example, specific values, that have been properly validated as already described herein, are assigned to the attributes of the created messages.","In one embodiment, attributes specifying keywords are used for determining whether the received messages are related (also known as \u201ccorrelating\u201d messages). Special care should be given to understanding these keywords to ensure that messages are properly correlated. For example, a keyword for \u201cfirewall intrusion\u201d is not related to a keyword for \u201cperformance\u201d. However, a keyword for \u201cCPU degradation\u201d may be related to a keyword for \u201cperformance\u201d. Further, it is important to use related keywords in templates associated with all managed nodes. For example, if a template that monitors performance on node A sets message text attributes to \u201cCPU degradation\u201d and a template that monitors performance on node B incorrectly sets message text attributes to \u201cxyz\u201d, the management server will probably not determine that the messages from both node A and node B are performance related.","In one embodiment, application and network management environment variables environment variables are used for setting the values of attributes in the set attribute section. For example, a malicious user may easily set the values of the object and node attributes. Therefore environment variables may be used for setting the values of the object and node attributes in the set attributes section.","Special attention should taken when setting the severity and message group attributes, as mis-configuring these attributes impairs security and may result in message storms. For example, modifying the severity of a message from minor to critical may result in a false alarm. Similarly, modifying the security group may result in inappropriate actions being taken as the wrong people may see the message.","The set attributes section may be used to modify the format of messages, as already described herein.","Typically, in the application and network management system , the action section may log information from received messages in a history log or configure messages with actions that a management server performs when it receives the configured messages. A message may be configured with an action by specifying in a command attribute of the message an action that should be performed. The command attribute may indicate, for example, that a trouble ticket should be generated by a management server or that someone should be notified to perform some task.","The configured message may be transmitted to the management server where the configured message may be analyzed with the help of a script and\/or program. In this case, the configured message may include information for locating the script and\/or program, such as the path name of the script and\/or program. The script and\/or program may analyze the values of attributes associated with the configured message to help the management server determine how the action should be performed. For example, the script and\/or program may determine the target node that the action should be performed on. Similarly, the script and\/or program may determine whether the action should be performed automatically or whether the action involves operator involvement. In one embodiment, the script and\/or program validates messages by comparing the values of the received messages' attributes against the values of environment variables and\/or variables from secure sources.","In one embodiment, information for locating scripts and\/or programs specify the full path name of the scripts and\/or programs. For example, the configured message would include the full path name of the script and\/or program rather than just the a relative path name of the script and\/or program, thus, preventing scripts\/programs residing in a different directory from gaining access to the configured message.","Some received messages do not request actions to be performed. In this case, the management server may not be informed of the contents of the received message. For example, templates may or may not be configured with an \u201con server log only\u201d option. Templates configured with \u201con server log only\u201d notify management servers of received messages that do not request actions and therefore the management servers only need to log. Templates that are configured with the \u201con server log only\u201d option, notify the management server when they receive messages that do not request actions. However, templates that are not configured with the \u201con server log only\u201d option do not notify the management server when they receive messages that do not specify requests for actions. In one embodiment, management servers are notified of data associated with message even when the messages do not specify requests for actions.","In one embodiment, the node attribute indicating where an action will be performed is always specified by an action section. If the node attribute is not specified in the action section, the node indicated in the received message may be used. Since a malicious user may specify the node in a message received by a template, actions should not be performed on the node specified by a received message.","In one embodiment, the identification of a node that actions are performed on are hard coded by the action section into messages. For example, the action section of a particular template may hard code the name of nodes into messages processed by the action section, thus, ensuring what nodes actions are performed on.","In an alternative embodiment, variables that are local (referred to hereinafter as \u201clocal variables\u201d) to a particular template may be used for specifying the node that actions are performed on. In one embodiment, the values of the variables may be validated. For example, the local variables may be compared against environment variables or variables from secure sources.","In one embodiment, environment variables may be used for specifying the node that actions are performed on. For example, MSG_NODE may be used for specifying the node that actions are performed on. In this case, templates may be written in a generic manner and distributed to many nodes, as the environment variables are initialized with values that pertain to the node the template resides on.","In one embodiment, a command attribute indicating what action will be performed is always specified by the action section. Specifying the action in the action section prevents malicious users from directly or indirectly causing a request for an action to be appended to a message, among other things.","In one embodiment, variables that are local to a particular template may be used for specifying values associated with the command attribute. In one embodiment, the values of the local variables may be validated. For example, the variables may be compared against environment variables or variables from secure sources.","In one embodiment, environment variables may be used for specifying values associated with the command attribute.","In one embodiment, variables are validated by a script and\/or program, as already described herein, before being used to specify values for the command attribute.","Various scripts and\/or programs on management servers may be invoked as the result of actions being performed. Frequently, different groups of people develop the templates and the scripts\/programs. Attributes, such as the object attribute, may be used to pass values to the scripts\/programs. In one embodiment, the attributes, which the scripts\/programs use, may be analyzed to determine whether the condition sections and\/or the set attributes sections of templates should be modified to provide more validation of attributes. For example, templates may validate attributes in the condition section that scripts\/programs rely on by comparing the attributes to the values of environment variables or variables from secure sources before the scripts\/programs receive the attributes. Similarly, the template may use environment variables or variables from secure sources to set the values of attributes before the scripts\/programs receive the attributes.","In one embodiment, SNMP trap templates specify the nodes that actions are performed on, since SNMP traps are typically issued from nodes which provide little or no security. For example, SNMP traps are typically issued without password protection or from non-managed nodes, which do not provide security with an agent executing on the nodes. In one embodiment, trap templates may specify the nodes that actions are performed on by specifying the nodes' Internet Protocol (IP) addresses and\/or the nodes' Domain Space Names (DSNs). For example, if the node is not managed by a management system, the IP address and\/or the DSN may be used to identify the node.","In one embodiment, configuring templates is automated. For example, a person, such as a network administrator, may use a generalized user interface (GUI) for a template automator  to specify one or more templates to be configured and select a feature of the GUI to cause the templates to be configured.","In one embodiment, a template automator analyzes templates to determine whether the templates provide network security and modifies the templates to enhance their level of security. In one embodiment, the template automator analyzes the template's message processing logic to determine what messages the template should suppress. For example, the template automator  may analyze the \u201cmessage on matched conditions\u201d in a particular template to determine the \u201csuperset of conditions\u201d for the \u201cmessage on matched conditions\u201d in that template. The template automator  may use the \u201csuperset of conditions\u201d from the \u201cmessage on matched conditions\u201d to modify the template to have a \u201cfirst\u201d message condition that \u201csuppresses on unmatched condition\u201d where the condition in the \u201csuppress on unmatched condition\u201d is the \u201csuperset of conditions\u201d. Similarly, the template automator  may use the \u201csuperset of conditions\u201d to modify the template to have a \u201clast\u201d message condition that \u201csuppresses on matched condition\u201d where the condition in the \u201csuppress on matched condition\u201d is the \u201csuperset of conditions\u201d.","In one embodiment, a template automator may modify open conditions in templates to be specific conditions. For example, the template automator  may analyze templates to determine if the templates specify \u201c*\u201d when checking the node attribute in received messages. The template automator  may modify the templates to use environment variables, such as MSG_NODE_NAME, hard coded names, IP addresses, and\/or DSNs, instead of \u201c*\u201d. Similarly, the template automator  may modify templates to specify that actions may be performed on specific nodes.","In one embodiment, a template automator may modify templates based on rules. For example, a network administrator may specify rules for modifying templates. Examples of rules may include what actions may be performed remotely and what nodes these remote actions may be performed on. The rules may specify whether templates using open conditions to analyze messages should be modified to instead use, among other things, environment variables, hard coded values, etc.","In one embodiment, a template automator analyzes existing templates and re-configures the templates. In one embodiment, a template automator creates new templates rather than re-configuring existing templates. In one embodiment, the template automator distributes templates after they have been created and\/or re-configured.","Even users with little or no privileges may cause actions to be performed by issuing messages, for example with opcmsg, opcmon, and\/or an API, among other things. One way of protecting systems against dangerous remote actions (such as causing the deletion of directories on a node the user has little or no privileges on) is to prevent actions from being performed remotely, as already described herein. However, in some situations remote actions may be very useful. Remote actions may be allowed provided extra security is provided in a system to ensure that the remote actions are not dangerous and are performed on appropriate nodes.","In one embodiment, the authorization of remote actions may be provided by MSI application. In this case, MSI application may be configured with a file in a standard or proprietary format and integrated with an overall security policy application. MSI application may be installed and configured on both managed nodes (optionally) and\/or management servers, as already described herein.","In another embodiment, the authorization of remote actions may be provided explicitly by specifying in templates what nodes actions may be performed on, as already described herein. In one embodiment, the authorization of remote actions may be enhanced by explicitly specifying in templates what actions may be performed. For example, the actions may be specified in the action section in the form of a \u201clist of actions\u201d that are allowed. In one embodiment, the authorization of remote actions may be enhanced by verifying actions specified in an action attribute of a message with pattern matching language. For example, the action attributes may be verified by a list of instructions with pattern matching language for determining if the action attributes specify authorized remote actions.","In one embodiment, default settings are used for advanced options in the application and network management system . In one embodiment, the following two options are not used. First, MSI is not run in divert mode on a managed node. Second, the \u201cenable message with local automatic actions with send when action finished\u201d option is not set. For example, some actions, such as logfile rotation, are performed automatically and locally on a node. If the \u201cenable message with local automatic actions with send when action finished\u201d option is set, the management server is not notified of actions that are performed automatically and locally on a node.",{"@attributes":{"id":"p-0125","num":"0124"},"figref":["FIG. 3","FIG. 2"],"b":["300","300","300","300","300","300","300","292","292","190"]},"For the purposes of illustration, the following discussion of flowchart  shall refer to structures depicted in  and to exemplary instructions depicted in Table 1 below. Referring to , for the purposes of illustration assume that agent  is a performance monitoring application called perfmon , that a template T of templates  includes the instructions depicted in Table 1, and that an interceptor I of interceptors  uses template T to process performance related messages generated by perfmon  using opcmsg.","Referring to , for the purposes of illustration assume that agent  is a billing application called billapp , that an interceptor I of interceptors  uses template T to process billing messages generated by billapp  using opcmsg. In this example, I and I are message interceptors. Similarly, T and T are message templates.","Referring to Table 1, for the purposes of illustration, assume the instruction 1 depicts a \u201cfirst\u201d message condition, that instructions 2 and 3 depict \u201cmessage on matched conditions\u201d for generating new messages when the specified conditions are matched, and that instruction 4 depicts a \u201clast\u201d message condition.",{"@attributes":{"id":"p-0129","num":"0128"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 1"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Exemplary instructions of a template"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Instruction",{}]},{"entry":["No.","Instructions"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["1","For messages generated by application perform, suppress"]},{"entry":[{},"received messages that are not for conditions:"]},{"entry":[{},"Object = performance or"]},{"entry":[{},"Message text = CPU degradation of 80% or"]},{"entry":[{},"Message text = CPU degradation of 90%."]},{"entry":["2","Generate a new message if received message is for"]},{"entry":[{},"conditions:"]},{"entry":[{},"Object = performance and"]},{"entry":[{},"Message text = CPU Degradation of 80%."]},{"entry":["3","Generate a new message if received message is for"]},{"entry":[{},"conditions:"]},{"entry":[{},"Object = performance and"]},{"entry":[{},"Message text = CPU Degradation of 90%."]},{"entry":["4","For messages generated by application perfmon, suppress"]},{"entry":[{},"messages that are for conditions:"]},{"entry":[{},"(Object = performance and Message text = CPU Degrad-"]},{"entry":[{},"ation of 80%) or"]},{"entry":[{},"(Object = performance and Message text = CPU Degrad-"]},{"entry":[{},"ation of 90%)."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"As depicted in Table 1, instructions 1 and 4 only suppress messages generated by application perfmon , thus, messages generated by other applications, such as billapp , may be processed by the interceptors and templates that correspond to the other applications, such as I and T.","In step  of , a template for a application and network management system is configured with first information for determining whether data associated with at least one message received by the template should or should not be processed by the template. For example, template T may be configured with instructions of Table 1 for suppressing messages generated by application perfmon  that are not for \u201cperformance\u201d, \u201cCPU degradation of 80%\u201d, or \u201cCPU degradation of 90%\u201d. When perfmon  generates a message A including an object attribute set to \u201cperformance\u201d and a message text attribute set to \u201cCPU degradation of 80%\u201d, the interceptor I uses instruction  to determine that the data from message A should be processed by instructions , , and  of template T as depicted in Table 1.","Similarly, when perfmon  generates a message B including a message text attribute set to \u201cCPU degradation of 10\u201d, interceptor I uses instruction 1 to determine that the data from message B be suppressed. Therefore, instructions 2, 3, and 4 will not process message B and interceptor I will not receive message B.","In yet another example, if billapp  generates a message C including an object attribute set to \u201cbilling\u201d, the interceptor I uses instruction 1 to determine that the interceptor I is not going to suppress message C, thus, interceptor I receives message C.","In step , the template is configured with second information for processing data associated with at least one received message. For example, template T may be configured with instructions 2 and 3 of Table 1. When interceptor I uses instruction 2 for generating a new message for \u201cperformance\u201d and \u201cCPU Degradation of 80%\u201d, a message E may be created. Message E may include data from message A, such as the object is \u201cpeformance\u201d and the message text is \u201cCPU Degradation is 80%\u201d. Similarly, additional attributes of message E may be set. For example, a severity attribute associated with message E may be set to \u201ccritical\u201d. Message E may be transmitted to management server .","In step , the template is configured with third information for preventing the communication of at least one received message to other templates of the application and network management system. Continuing the example, template T may be configured with instruction 4 of Table 1 for suppressing messages generated by application perfmon  that are for \u201cperformance\u201d and \u201cCPU degradation of 80%\u201d or for \u201cperformance\u201d and \u201cCPU degradation of 90%\u201d. Since, message A has an object attribute set to \u201cperformance\u201d and a text attribute set to \u201cCPU Degradation of 80%\u201d, interceptor I may use instruction 4 to suppress message A, thus, interceptor I will not receive message A.","By configuring the \u201cfirst\u201d and \u201clast\u201d message conditions as described herein, the creation and\/or processing of erroneous messages is prevented, thus, security is provided, overall performance of the network is increased, and performance of interceptors is increased.","Proper validation of messages using secure sources, pattern message language, environment variables, and MSI, not only prevents the creation and\/or processing of erroneous messages but also provides application and network security.","By preventing the creation and\/or processing of erroneous messages, the usability and the overall robustness of an application and network management system is increased.","Although certain embodiments of the present invention were described using the application and network management system , the present invention is not limited to the application and network management system . For example, any mechanism for managing entities, such as nodes and\/or agents associated with a network, which analyzes messages to and\/or from those entities, may use embodiments described herein.","Embodiments of the present invention are thus described. While the present invention has been described in particular embodiments, it should be appreciated that the present invention should not be construed as limited by such embodiments, but rather construed according to the following claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The accompanying drawings, which are incorporated in and form a part of this specification, illustrate embodiments of the invention and, together with the description, serve to explain the principles of the invention:",{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 3"}]},"DETDESC":[{},{}]}
