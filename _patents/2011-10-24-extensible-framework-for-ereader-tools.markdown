---
title: Extensible framework for ereader tools
abstract: The functionality of an ereader module that is displaying an electronic book (“ebook”) is extended. A user identifier specifying a user using a client device executing the ereader module and an ebook identifier specifying the ebook displayed by the ereader module are received from the client device. One or more layers associated with the user are determined. One or more layers associated with the ebook are determined. A list of one or more layers is assembled. The layer list is transmitted to the client device. The client device enables the user to select a layer and use the selected layer to interact with content of the ebook.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09141404&OS=09141404&RS=09141404
owner: Google Inc.
number: 09141404
owner_city: Mountain View
owner_country: US
publication_date: 20111024
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["1. Technical Field","The invention generally relates to the field of electronic books and in particular to a framework for tools for interacting with electronic books.","2. Background Information","Electronic books (\u201cebooks\u201d) come in a variety of formats (e.g., IDPF\/EPUB and PDF) and can be read using a variety of devices (e.g., dedicated reading devices and general-purpose mobile devices, tablet computers, laptop computers, and desktop computers). Each device includes reading software (\u201cereader\u201d) that displays an ebook to a user. An ereader that enables a user to interact with an ebook is generally specific to a particular device, a particular ebook format, and\/or a particular ebook. Also, the interaction functionality is usually built-in to the ereader. Since ereaders come with limited sets of functionality, software developers want to extend existing functionality and\/or add new functionality. However, no framework exists for implementing ereader functionality.","The above and other issues are addressed by a computer-implemented method, non-transitory computer-readable storage medium, and computer system for extending functionality of an ereader module that is displaying an electronic book (\u201cebook\u201d). An embodiment of the method comprises receiving, from a client device executing the ereader module, a user identifier specifying a user using the client device and an ebook identifier specifying the ebook displayed by the ereader module. The method further comprises determining one or more ereader tools (\u201clayers\u201d) associated with the user; determining one or more layers associated with the ebook; and transmitting a list of layers to the client device. The client device enables the user to select a layer and use the selected layer to interact with content of the ebook.","An embodiment of the medium stores executable computer program instructions for extending functionality of an ereader module that is displaying an ebook. The instructions receive, from a client device executing the ereader module, a user identifier specifying a user using the client device and an ebook identifier specifying the ebook displayed by the ereader module. The instructions further determine one or more layers associated with the user; determine one or more layers associated with the ebook; and transmit a list of layers to the client device. The client device enables the user to select a layer and use the selected layer to interact with content of the ebook.","An embodiment of the computer system for extending functionality of an ereader module that is displaying an ebook comprises at least one non-transitory computer-readable storage medium storing executable computer program instructions. The instructions comprise instructions for receiving, from a client device executing the ereader module, a user identifier specifying a user using the client device and an ebook identifier specifying the ebook displayed by the ereader module. The instructions further determine one or more layers associated with the user; determine one or more layers associated with the ebook; and transmit a list of layers to the client device. The client device enables the user to select a layer and use the selected layer to interact with content of the ebook.","The Figures (FIGS.) and the following description describe certain embodiments by way of illustration only. One skilled in the art will readily recognize from the following description that alternative embodiments of the structures and methods illustrated herein may be employed without departing from the principles described herein. Reference will now be made to several embodiments, examples of which are illustrated in the accompanying figures. It is noted that wherever practicable similar or like reference numbers may be used in the figures and may indicate similar or like functionality.",{"@attributes":{"id":"p-0016","num":"0015"},"figref":["FIG. 1","FIG. 1"],"b":["100","100","100","110","120","130","140","120","130","140"]},"The network  represents the communication pathway between the repository , the processing server , and the client device . In one embodiment, the network  uses standard communications technologies and\/or protocols and can include the Internet. Thus, the network  can include links using technologies such as Ethernet, 802.11, worldwide interoperability for microwave access (WiMAX), 2G\/3G\/4G mobile communications protocols, digital subscriber line (DSL), asynchronous transfer mode (ATM), InfiniBand, PCI Express Advanced Switching, etc. Similarly, the networking protocols used on the network  can include multiprotocol label switching (MPLS), transmission control protocol\/Internet protocol (TCP\/IP), User Datagram Protocol (UDP), hypertext transport protocol (HTTP), simple mail transfer protocol (SMTP), file transfer protocol (FTP), etc. The data exchanged over the network  can be represented using technologies and\/or formats including image data in binary form (e.g. Portable Network Graphics (PNG)), hypertext markup language (HTML), extensible markup language (XML), etc. In addition, all or some of the links can be encrypted using conventional encryption technologies such as secure sockets layer (SSL), transport layer security (TLS), virtual private networks (VPiNs), Internet Protocol security (IPsec), etc. In another embodiment, the entities on the network  can use custom and\/or dedicated data communications technologies instead of, or in addition to, the ones described above.","The client device  is used by a user to interact with an ebook. The client includes an ereader module  that enables the user to view the ebook, a client layer support module  that enables an ereader tool (\u201clayer\u201d) to be used to interact with the ebook, and a client available-layers module  that determines which layers are available to interact with selected ebook content.","The ereader module  enables a user to view and\/or read an ebook. The ereader module  also communicates with the ebook support module  (part of the processing server ) to obtain ebooks that are stored in the ebook repository  (part of the repository ). In one embodiment, the ereader module  is a JavaScript program that executes on the client device in conjunction with a web browser (also executing on the client device).","The client layer support module  enables a layer to be used to interact with art ebook. The client layer support module  also communicates with the server layer support module  (part of the processing server ) to obtain layer information that is stored in the layer repository  and the layer data repository  (part of the repository ).","A layer enhances the functionality of the ereader module  by enabling a user to interact with an ebook that is being presented by the ereader module. Specifically, a layer enables a user to interact with particular ebook content (e.g., content that the user has selected or content that is associated with \u201clayer data\u201d). In this way, a layer adds contextually useful interactivity to the ebook. The particular ebook content may be text, art image, or other embedded content. In one embodiment, multiple types of content can be interacted with simultaneously. A layer is able to display information, such as information from the ebook, information from layer data, and\/or information generated based on same. A layer is able to store data and associate it with particular ebook content. The data is referred to as an \u201cannotation\u201d (part of the layer data stored in the layer data repository ), and the ebook content with which the data is associated is referred to as \u201cannotated content.\u201d An existing annotation can be obtained from the layer data repository , and a new annotation can be created by a layer (e.g., due to user interaction with the layer). Annotations are discussed below with reference to layer data and layer data repository . A layer includes executable code and metadata. Layer executable code is a computer program module (\u201clayer module\u201d) that executes on the client.","Layers can provide various types of functionality for interacting with ebook content. Layers can be created by anyone, such as third parties and\/or book publishers. Exemplary layers include Margin Notes, Define, Translate, Search Book, Search Internet, and Search Encyclopedia.","Margin Notes\u2014The Margin Notes layer enables a user to highlight and\/or add a note to content in an ebook. The user selects content in the ebook and then uses the Margin Notes layer to highlight the selected content (in any of a variety of colors) and\/or enter information (a \u201cnote\u201d) to associate with the selected content. The user specifies a desired highlight color by selecting a displayed color (e.g., yellow, green, pink, or blue) or uses a default color (e.g., yellow). The note information can include, for example, typed characters, a URL, handwritten information, or multimedia (e.g., a still image, a video, or audio). If particular ebook content is already associated with a note, then hovering the cursor over that content will cause the note to be displayed. The displayed note can then be edited or deleted if desired. The highlight color and the note information are examples of annotations (part of layer data), which are discussed below with reference to layer data repository .","Define\u2014The Define layer enables a user to view the definition of text in an ebook. The user selects text in the ebook and then uses the Define layer to display a definition of the selected text. For example, a popup window appears with the selected text's definition.","Translate\u2014The Translate layer enables a user to view the translation of text in an ebook. The user selects text in the ebook and then uses the Translate layer to display a translation of the selected text. The user specifies the language of the selected text and the language for the desired translation. For example, a popup window enables the user to specify these languages. The popup window then shows the appropriate translation. In one embodiment, the Translate layer uses the Google Translate translation service.","Search Book\u2014The Search Book layer enables a user to search an ebook for text within that ebook. The user selects text in the ebook and then uses the Search Book layer to search for the selected text in that same ebook. The Search Book layer displays the search results (e.g., a list of citations).","Search Internet\u2014The Search Internet layer enables a user to search the Internet for text in an ebook. The user selects text in the ebook and then uses the Search Internet layer to search the Internet for the selected text. The Search Internet layer displays the search results (e.g., a list of web sites).","Search Encyclopedia\u2014The Search Encyclopedia layer enables a user to search an electronic encyclopedia for text in an ebook. The user selects text in the ebook and then uses the Search Encyclopedia layer to search the encyclopedia for the selected text. The Search Encyclopedia layer displays the search results (e.g., a relevant encyclopedia article).","In one embodiment, more than one layer can be used at the same time and\/or multiple instances of the same layer can be used at the same time (e.g., for different selected or annotated ebook content). In another embodiment, layers cannot interact with each other. While multiple layers can be used simultaneously (possibly for the same selected or annotated content), the layers are isolated from each other.","In one embodiment, the client layer support module  includes functionality related to enabling\/disabling layers, launching layers, indicating the presence of annotations, and providing an application programming interface (API) to layers. Regarding enabling\/disabling layers, the client layer support module  enables a user to enable\/disable layers. Enabled layers can be provided as options in a layer popup menu (discussed below with reference to manual launch of a layer), while disabled layers cannot. Also, annotations associated with enabled layers can be displayed automatically (discussed below with reference to automatic launch of a layer). In one embodiment, a user can designate an enabled layer as \u201cautomatic-launch,\u201d which causes the layer to be launched when the ereader module  displays ebook content associated with a relevant annotation (described below). In one embodiment, a graphical user interface lists \u201cinstalled\u201d layers (indicated by the user layer settings repository ), and the user enables\/disables these layers (and possibly marks them as \u201cautomatic-launch\u201d) by checking\/unchecking various boxes. These settings are then stored and made available by the client layer support module .","Regarding launching layers, the client layer support module  launches a layer (i.e., creates an instance of a layer) so that a layer module is executed by the client device. An instance of a layer (e.g., content dynamically rendered by a layer) is displayed within the ereader module's main window. In one embodiment, a layer can be displayed in various modes, such as overlay (floating above an entire page of ebook content), replace (floating above particular ebook content, thereby \u201chiding\u201d the ebook content), side panel (present in a side panel adjacent to the ebook content, possibly in the form of a small preview that can be interacted with), and margin (present in a margin area of the ebook content, possibly in the form of a very limited preview). The ereader module  allocates a display area inside of which a layer can create user interface (UI) controls. The ereader module  instructs the layer to render itself into the appropriate display area and informs the layer of the context in which it is rendering itself (e.g., overlay, replace, side panel, or margin). The display area that is allocated depends on the layer's display mode. In one embodiment, a layer cannot modify the size of its display area, move the display area, or create UI elements outside of the display area. In another embodiment, a layer can request the properties of its display environment (e.g., display mode, display area size, display area location, and pinning status) and\/or be notified of any changes.","In one embodiment, when the client layer support module  launches a layer, the client layer support module  also sends layer usage data to the server layer support module . The server layer support module  then stores the layer usage data. In one embodiment, layer usage data includes a layer ID of the layer that was launched, a display mode in which the layer was launched, a user ), an ebook ii), an associated (e.g., selected or annotated) content range, ebook context (discussed below with reference to the Layer API and a context object), web browser information, and\/or client device information.","The client layer support module  provides two ways to launch a layer: manually and automatically. Manual launch of a layer involves a popup menu that enables a user to launch a layer. Responsive to a user selecting ebook content (presented by the ereader module ), the client layer support module  uses the client available-layers module  (discussed below) to determine which layers are available for interacting with the selected content. The client layer support module  then displays a popup menu listing the available layers. In one embodiment, the available layers are listed in the popup menu according to a sort order. One example of a sort order is alphabetical order. Another example of a sort order is popularity (e.g., popularity of using a particular layer (layer ID) to interact with a particular ebook (ebook ID) or with a particular content range within a particular ebook). Popularity is determined based on, for example, the layer usage data stored by the server layer support module . The client layer support module  obtains layer usage data from the server layer support module  and uses the data to sort the available layers according to their popularity. Responsive to the user selecting a layer entry from the menu, an instance of that layer is launched with respect to the selected content using a particular display mode.","Automatic launch of a layer involves layer data associated with ebook content. Responsive to ebook content being displayed by the ereader module , the client layer support module  determines whether any layer data is associated with the ebook content. If layer data is associated with the ebook content (i.e., if the ebook content is \u201cannotated\u201d), then the client layer support module  determines whether that layer data indicates that a layer should be automatically launched. In one embodiment, there are two ways in which layer data can indicate that a layer should be automatically launched. One way is that the layer indicated by the layer data (e.g., the Layer ID data item in Table 1) has been designated by the user as \u201cautomatic-launch\u201d (part of enabling\/disabling layers, discussed above). Another way is that a) the annotated content style indicated by the layer data (e.g., the Style data item in Table 1) specifies that the layer indicated by the layer data should be automatically launched and b) the layer indicated by the layer data has been enabled by the user. The client layer support module  then automatically launches the layer with respect to the layer data using a particular display mode. Note that automatic layer launch causes layer content (e.g., annotations or data provided by layers) to be displayed, even if the associated ebook content has not been selected by the user.","Note that the module of the layer must exist on the client device  before the layer instance can be launched. In one embodiment, the layer module is transferred from the repository  to the client device  (via the processing server  and the network ) when the list of available layers is received in step  of . For example, the modules of all available layers are transferred or the modules of only the \u201cinstalled\u201d available layers (as indicated in the user layer settings repository ) are transferred. In another embodiment, the layer module is transferred when an attempt is made to launch the layer, either manually (e.g., using a popup menu) or automatically (e.g., based on layer data). For example, the client layer support module  detects the attempt and, in response, sends a request to the server layer support module  (via the network ) for the relevant layer module. The server layer support module  receives the request and, in response, sends the relevant layer module to the client layer support module  (via the network ). In yet another embodiment, the layer module is transferred at any other suitable time.","Note that the layer module can already be present on the client device  due to having been transferred in the past. In one embodiment, a layer module on the client device is deleted after the ereader module  ceases executing. In another embodiment, a layer module on the client device remains on the client device even after the ereader module ceases executing. If a layer module remains, the module can be updated later on as necessary (e.g., as indicated by a module version number).","Regarding indicating the presence of annotations, the client layer support module  can visually indicate ebook content (presented by the ereader module ) that is associated with an annotation (part of layer data). For example, the client layer support module  highlights or otherwise styles the ebook content that is associated with the annotation (referred to as \u201cannotated content\u201d). In one embodiment, the client layer support module  visually indicates only annotated content that is associated with an annotation whose associated layer is enabled. In this embodiment, the client layer support module  does not visually indicate annotated content that is associated with an annotation whose associated layer is disabled.","In one embodiment, the display style of annotated content (\u201cannotated content style\u201d) is configurable from a fixed set of options. Options include, for example, simple formatting, display mode, and automatic layer launch. Simple formatting includes, for example, text style options (e.g., font, color, highlighting, italics, boldface, underlining, and outlining) and indicators (e.g., mini-icons or chiclets) that are displayed in the ebook margins or alongside ebook content to indicate that a particular type of layer has content available near that location. In one embodiment, annotated content is indicated in the page slider presented by the ereader module . This makes it easy for the user to return to a page with annotated content. Display mode includes a default or preferred display mode in which to launch a particular layer (e.g., the layer associated with the annotation) (e.g., overlay, replace, side panel, or margin). Automatic layer launch specifies that a particular layer (e.g., the layer associated with the annotation that is associated with the annotated content) should be automatically launched when the annotated content is displayed by the ereader module . Note that simple formatting, display mode, and automatic layer launch can be used independently of each other. For example, if automatic layer launch is used without simple formatting, then the annotated content does not appear differently from non-annotated content; however, a layer is automatically launched when the annotated content is displayed.","Display styles can be set on a case by case basis, so different instances of ebook content associated with annotations saved by the same layer can be displayed differently (e.g., yellow highlighting versus green highlighting for different passages annotated by the same Margin Notes layer). Note that when an existing annotation is saved, the annotated content style of the layer data can be modified. For example, consider an Inscription Layer that enables an inscription to be added to an ebook. The annotated content style of Inscription Layer layer data specifies that the annotated content does not appear differently from non-annotated content. However, when the annotated content is displayed, the Inscription Layer is automatically launched in overlay mode (floating above the entire page of ebook content that contains the annotated content), and the inscription (as specified in the annotation portion of the Inscription Layer layer data) is displayed. The user views the inscription and closes the Inscription Layer, Responsive to the Inscription Layer being closed, the annotated content style of the Inscription Layer layer data is updated. The updated style specifies that the next time the annotated content is displayed, the Inscription Layer is not automatically launched. Instead, an icon is displayed in the margin and can be used to access the inscription stored in the annotation portion of the Inscription Layer layer data.","Note that layer data must exist on the client device  before the annotation (part of layer data) can be displayed. In one embodiment, layer data is transferred from the repository  to the client device  (via the processing server  and the network ) in response to a request from the client layer support module  (see steps  and  in ).","In one embodiment, a layer cannot draw its own style for annotated content. In this embodiment, the client layer support module  indicates annotated content using a configurable style (e.g., selected by the user). In one embodiment, layer data can specify its own style for annotated content. For example, the annotated content style is indicated by the Style data item (see Table 1).","In one embodiment, a \u201clayers side panel\u201d view for an ebook includes one area that displays ebook content and another area (a \u201clayers side panel\u201d) that displays layer content (e.g., annotations). The layers side panel area is adjacent to the ebook content area and can differ in size relative to the ebook content area. When an ebook is displayed in side panel view, layers are automatically launched in side panel display mode when relevant annotated content is displayed in the ebook content area (regardless of the annotated content style specified in the layer data and regardless of whether the layers have been designated as \u201cautomatic-launch\u201d). In another embodiment, a \u201clayers display\u201d view for an ebook shows all of the layer content (e.g., annotations) associated with the ebook in a single view, organized by category, by prominence, or in any other way that makes sense. For example, the layers display view displays annotations on a page-by-page basis, corresponding to the pages of the ebook (whether or not the ebook content is also displayed).","A layer uses an API provided by the client layer support module  (referred to as the \u201cLayer API\u201d) In one embodiment, the client layer support module  provides a JavaScript API. The Layer API includes various functions. Exemplary functions are described below:","(i) A function to obtain the ebook content for which the layer was invoked and to which the layer can attach an annotation (referred to as \u201ccontent range\u201d). For example, the function calls a piece of executable code (a \u201ccallback\u201d) with an object describing the content range. The content range may include content of various types (e.g., text content, audio content, and image content). The content range may include multiple annotated content segments. These annotated segments are represented as individual ranges within the entire content range. The content range object provides methods to access these ranges.","(ii) A function to save an annotation (part of layer data) and an annotated content style and associate them with a content range, replacing any previously saved annotation and annotated content style.","(iii) A function to load an annotation (part of layer data) previously saved by this layer and associated with a content range.","(iv) A function to navigate an ebook (i.e., control which portion of the ebook is displayed by the ereader module ). In one embodiment, this function includes the ability to navigate backwards one page, navigate forwards one page, go to a specific chapter, go to a specific page, go to a specific position within a page, and go to a specific piece of content (e.g., an image, table, or figure).","(v) A function to search inside an ebook (e.g., using functionality from the ereader module ). A search panel is displayed, and search results are highlighted. The layer remains visible.","(vi) A function to close the layer instance so that the layer is no longer displayed.","A layer can access the ebook content for which it was launched (e.g., selected content or annotated content) and also a context object. In one embodiment, the context object includes only context that is local to the ebook and the user's interaction with the ebook. Local context includes, for example, ebook title, author, publisher, indication of currently-displayed portion of ebook (e.g., chapter number and page number), indication of current ebook display mode (e.g., flowing text versus scanned image), and device capabilities. In another embodiment, additional context is provided such as related books, most popular pages in the ebook, etc. The additional context can be provided in the same context object or through additional Layer API functions.","In one embodiment, the Layer API enables a layer to specify an annotated content style. In another embodiment, a generic UI control is provided by the ereader module  so that the user can specify the annotated content style. In this UI, the user can specify \u201cuse this display style for the current annotated content only\u201d or \u201cuse this display style for all content annotated by this layer,\u201d In yet another embodiment, a layer can indicate whether a generic UI control should be displayed to specify annotated content style or whether the layer will provide its own UI controls to specify annotated content style.","The client available-layers module  determines which layers are available to interact with selected ebook content. Specifically, the client available-layers module  takes as input a list of available layers (output by the server available-layers module ), selected content, and a list of enabled layers and outputs a list of layers that are available for interacting with the selected content. The client available-layers module  compares the list of available layers to the list of enabled layers to determine a list of possible layers (i.e., layers that are both available and enabled). The type of the selected content (e.g., text versus image) is then compared to the possible layers (specifically, to the layers' metadata, which specifies what type of ebook content can be interacted with using each layer). The client available-layers module  outputs the matching layers as a list, Note that this list of layers is selected-content-specific.","The repository  is a computer (or set of computers) that stores an electronic book (\u201cebook\u201d) repository , an ereader tool (\u201clayer\u201d) repository , a layer data repository , and a user layer settings repository . In one embodiment, the repository  includes a server that provides the processing server  access to the ebook repository , layer repository , layer data repository , and user layer settings repository  in response to requests.","The ebook repository  stores various ebooks. In one embodiment, an ebook adheres to the JavaScript Object Notation (JSON) format. An ebook includes content and metadata. Ebook content includes an electronic collection of text (and possibly additional types of content such as images and\/or sound). For example, ebook content includes content of a book such as would be printed on the pages of a traditional paper-based book. All of the text in the collection may be from a single source, or the collection may contain text from different sources. The text may have originated in a traditional paper-based format (e.g., a physical book or newspaper), or it may have originated in a digital format (e.g., electronic files in a format such as Portable Document Format (PDF)). The content of an ebook is divided into segments so that portions of the content can be transferred and\/or loaded separately. For example, an ebook can include one segment for each chapter. In one embodiment, ebook content includes files that adhere to the HTML for at, the Cascading Stylesheets (CSS) format, and various multimedia formats (e.g., audio files and video files).","Ebook metadata includes bibliographical information about an ebook, such as the title, author, publication date, number of pages, number of chapters, etc. Ebook metadata also includes a list of segments into which the ebook's content is divided. A segment is represented on the list by, for example, a unique identifier. In one embodiment, ebook metadata also includes a blacklist, a whitelist, and\/or an add-list. These lists control which layers can be used with an ebook. A blacklist specifies layers that cannot (i.e., are not allowed to) be used with a particular ebook. A whitelist specifies layers that can (i.e., are allowed to) be used with a particular ebook. An add-list specifies layers that are recommended to be used with a particular book. For example, an ebook publisher can require that a particular ebook be interacted with in accordance with a particular blacklist, whitelist, and\/or add-list. A layer is represented on a list by, for example, a unique identifier. Blacklists, whitelists, and add-lists are further described below with reference to server available-layers module .","The layer repository  stores various layers. A layer includes executable code and metadata. Layer executable code is a computer program module (\u201clayer module\u201d) that executes on a client device  and enhances the functionality of an ereader module . A layer enables a user to interact with an ebook that is being presented by the ereader module. Specifically, a layer enables a user to interact with particular ebook content (e.g., content that the user has selected or annotated content). The particular content may be text, an image, or other embedded content. In one embodiment, multiple types of content can be selected simultaneously. In one embodiment, a layer module is implemented as a JavaScript program.","Layer metadata specifies what type of ebook content a particular layer is applicable to (i.e., what type of content can be interacted with using a particular layer). For example, a first layer can enable interaction with only textual content, while a second layer can enable interaction with only graphical content. Layer metadata also specifies which display modes (e.g., overlay, replace, side panel, and\/or margin) are supported by the layer, possibly designating one of the supported display modes as the default or preferred display mode.","In one embodiment, an extensible framework for layers includes the following features: 1) An XML file format for packaging a layer's HTML, JavaScript, and application descriptor into a single file. The application descriptor indicates which types of ebook content the layer is applicable to. 2) A service that renders a layer XML file into HTML\/JavaScript that can be displayed in a web browser. 3) Client-side JavaScript for existing web applications (e.g., ereader module  and\/or client layer support module ) to instantiate layers and display them inside a container element. The JavaScript creates sandboxed iframe HTML elements for each layer. The iframes use uniform resource locators (URLs) that point back to the service to render the requested layer. 4) Client-side JavaScript for a remote procedure call (RPC) framework that enables applications (e.g., ereader module  and\/or client layer support module ) to register JavaScript methods (the Layer API) that the layers cart call from their sandboxed iframes. This enables layers to call back into the application and send\/receive data. Also, executing a layer in an isolated iframe prevents the layer from interfering with the operation of the ereader module . 5) The ability to bundle RPC methods into a user interface extension (UIX) \u201cfeature.\u201d A Books feature exposes books-specific APIs (the Layer API) to the layers via the RPC framework. A layer can indicate in its application descriptor which features it requires to execute.","Layer data repository  includes information concerning data that is used by a layer (e.g., to display to the user when the layer is launched). In one embodiment, the data was created by a layer during execution of the layer (e.g., due to user interaction with the layer). In another embodiment, the data was created before the layer was ever executed. (For example, the creator of a layer that is meant to display \u201cCliffsNotes\u201d would also create layer data with the actual CliffsNotes text. This layer data would exist before the CliffsNotes layer was ever executed and would be available to users of the CliffsNotes layer.) Layer data is associated with particular ebook content. Recall that a layer enables a user to interact with particular ebook content (e.g., content that the user has selected or annotated content). Data that is stored by a layer (e.g., a \u201cnote\u201d added by a user with the Margin Notes layer) is associated with the particular ebook content that was selected or annotated when the layer was launched. If, at a later time, the same layer is launched with respect to the same ebook content, then the layer will load its previously stored data. This data is known as an annotation (part of layer data).","In one embodiment, data stored by a layer is accessible to only that layer and is not accessible to other layers. In another embodiment, data stored by a layer when a particular user account is active is accessible to only that user account and is not accessible to other user accounts. In yet another embodiment, data can be stored by a layer only when a user account is active (i.e., when a user has logged in) and cannot be stored when the user is anonymous.","In one embodiment, layer data includes three elements: an indication of particular ebook content (the ebook content with which the layer data is associated; \u201cannotated content\u201d or \u201ccontent range\u201d), a type (e.g., an indication of the particular layer that created the layer data), and an annotation (the data that a layer stores and retrieves for user interaction purposes; e.g., a \u201cnote\u201d added by a user with the Margin Notes layer). The indication of particular ebook content is, for example, an ebook indicator, a page indicator, and a position range that includes a start position and an end position. Each position is an internal marker for a position within an ebook and includes, e.g., a paragraph indicator and an offset within that paragraph. In a graphic novel where there is no text, a position can be specified for each image. The image positions can be used to determine where a content range starts and\/or ends so that images within the content range can be indicated. The indication of the particular layer that created the layer data is, for example, a layer identifier (\u201cID\u201d). In one embodiment, each instance of layer data is associated with only one layer (i.e., the layer that created the layer data instance).","An ebook can be updated frequently, resulting in different versions with different content locations. Content locations between these different versions should be translated so that layer data can be associated with the correct ebook content. For example, a client  can request layer data for a particular page of an ebook cached at the client. If the indexed (i.e., currently live) ebook in the ebooks repository  is of a different version, then the pages can have changed. Also, a client  can save layer data that is based on an old cached version of an ebook. This layer data should be saved relative to the indexed (i.e., currently live) ebook in the ebooks repository .","In one embodiment, this problem is addressed by a position validation service. The position validation service keeps track of layer data positions within ebooks (specifically, positions of ebook content associated with layer data). Position information includes, for example, page information and original scanjob information (e.g., information regarding the scanning of the underlying book to create the ebook). Page information includes, for example, a volume (ebook) page ID and a volume structured page ID. Scanjob information includes, for example, a scanjob ID and a scanjob page ID. Position information can also include a volume ID, the content before the annotated content, the annotated content itself, and the content after the annotated content. In one embodiment, position information is used to localize a layer data position within an old version of an ebook within a new version of the same ebook. Text alignment is then performed (using, for example, the Associated Ebook Text item in Table 1) to calculate an exact position.","Table 1 shows data items that are stored for each instance of layer data according to one embodiment.",{"@attributes":{"id":"p-0065","num":"0064"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"133pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 1"},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Data item Name","Data Item Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Volume ID","the volume (ebook) the layer data is for"]},{"entry":["Layer ID","the layer the layer data is for"]},{"entry":["User ID","the user id of the owner"]},{"entry":["ACL","the permissions for the layer data"]},{"entry":["Page Id","the multiple page ids the layer data can span"]},{"entry":["Before Text","the text before the associated (selected or"]},{"entry":[{},"annotated) ebook content (if any)"]},{"entry":["After Text","the text after the associated (selected or"]},{"entry":[{},"annotated) ebook content (if any"]},{"entry":["Associated Ebook Text","the text portion (if any) of the associated"]},{"entry":[{},"(selected or annotated) ebook content"]},{"entry":["Style","the style information for associated (selected"]},{"entry":[{},"or annotated) ebook content (e.g., simple"]},{"entry":[{},"formatting and\/or automatic layer launch;"]},{"entry":[{},"\u201cannotated content style\u201d)"]},{"entry":["Data","the data to store for the layer (for user"]},{"entry":[{},"interaction purposes; \u201cannotation\u201d)"]},{"entry":["Client Sent Range ","start\/end position and start\/end offset for"]},{"entry":["Association","multiple position types (text, image,"]},{"entry":[{},"canonical fragment indicators (CFI), EPUB"]},{"entry":[{},"marker); the range information, including"]},{"entry":[{},"content version, of where the associated"]},{"entry":[{},"(selected or annotated) content is exactly"]},{"entry":[{},"located for the specified version of the"]},{"entry":[{},"volume when this layer data was last created"]},{"entry":[{},"or modified as sent by the client"]},{"entry":["Current Range ","same as Client Sent Range Association but"]},{"entry":["Association","for current volume version; the current range"]},{"entry":[{},"information, including the current content"]},{"entry":[{},"version, of where the associated (selected or"]},{"entry":[{},"annotated) content is exactly located for the"]},{"entry":[{},"specified version of the volume when this"]},{"entry":[{},"layer data was last created or modified"]},{"entry":["Current Volume Version","current version of the volume"]},{"entry":["Scanjob information","helpful when moving the layer data because"]},{"entry":[{},"of content shifting (e.g., between volume"]},{"entry":[{},"versions)"]},{"entry":["Last Modified","timestamp of last modification for this layer"]},{"entry":[{},"data"]},{"entry":["Created","timestamp of when layer data was created"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}},"br":{}},"User layer settings repository  includes information concerning which layers a user has \u201cinstalled.\u201d For example, the user layer settings repository  includes, for each user ID, a list of layers that user has installed (if any). In one embodiment, the user layer settings repository  also includes a default list of installed layers for use with users who are anonymous (e.g., have not logged in). Installation of a layer indicates that the user wants to use that layer at some point in time, although not necessarily all of the time. (An installed layer can be disabled, as explained above.) Installation of a layer does not indicate that the module for that layer is actually present on client device . Since one person can use multiple devices to read ebooks, user layer settings are stored at the repository . If a user wants to use a particular layer on a particular client device , the module for that layer will need to be present on that device. In one embodiment, a graphical user interface lists layers that are available for installation. The user installs\/uninstalls these layers by checking\/unchecking various boxes. These settings are then stored in the user layer settings repository .","The processing server  includes various modules such as an ebook support module  for handling ebook-related requests, a server layer support module  for handling layer-related requests, a server available-layers module  for determining which layers are available, and an available layer data module  for determining which layer data is available. In one embodiment, the processing server  includes a computer (or set of computers) that communicates with repository  and client device  and processes data (e.g., by executing the ebook support module , the server layer support module , the server available-layers module , and the available layer data module ). In one embodiment, the processing server  includes a web server that responds to requests from the client device .","The ebook support module  handles ebook-related requests. Specifically, the ebook support module  receives requests from the ereader module  (part of the client device ) and responds to them accordingly. One type of request is for ebook metadata. Another type of request is for ebook content. These requests and responses are described below with reference to .","The server layer support module  handles layer-related requests. Specifically, the server layer support module  receives requests from the client layer support module  (part of the client device ) and responds to them accordingly. One type of request is for a list of available layers. Another type of request is for layer data. These requests and responses are described below with reference to .","The server available-layers module  determines which layers are available for a specified user to use with a specified ebook. Specifically, the server available-layers module  takes as input a user ID and an ebook ID and outputs a list of layers that are available for the user ID to use with the ebook ID. The server available-layers module  uses the user ID to determine which layers the user has installed (stored in the user layer settings repository ). If a user ID is not provided (e.g., the user is anonymous or has not logged in), then a default list of installed layers is used (stored in the user layer settings repository ). The server available-layers module  uses the ebook ID to determine a blacklist, whitelist, and\/or add-list (if any) associated with the ebook (stored in ebook metadata in the ebook repository ). The server available-layers module  then assembles a list of available layers by starting with the installed layers, keeping any layers that are on the whitelist (if a whitelist exists), removing any layers that are on the blacklist and not on the whitelist (if a blacklist exists), and adding any layers that are on the add-list (if an add-list exists). (If neither a blacklist nor a whitelist nor an add-list exists, then the assembled list includes all of the installed layers.) In one embodiment, wildcards can be used in the blacklist, whitelist, and\/or add-list. For example, a blacklist that contains only a wildcard would cause all layers to be removed (unless the layers are on the whitelist). The server available-layers module  outputs the remaining layers as a list of available layers (including layer metadata such as what type of ebook content a particular layer is applicable to and which display modes are supported by a particular layer). Note that this list of layers is ebook-specific.","The available layer data module  determines which layer data is available for a specified user and specified pages of a specified ebook. Specifically, the available layer data module  takes as input a user ID, an ebook ID, and a page range and outputs layer data that is available for the user ID, the ebook ID, and the page range. The available layer data module  uses the user ID, the ebook ID, and the server available-layers module  to determine which layers are available for the specified user to use with the specified ebook. The available layer data module  then obtains the layer data (stored in the layer data repository ) associated with the available layers, the specified user, the specified ebook, and the specified page range. If a user ID is not provided (e.g., the user is anonymous or has not logged in), then the available layer data module  obtains the layer data (stored in the layer data repository ) associated with the available layers, \u201call users\u201d (e.g., anonymous users or the general public), the specified ebook, and the specified page range. The available layer data module  then outputs this layer data.",{"@attributes":{"id":"p-0072","num":"0071"},"figref":"FIG. 2","b":["200","120","130","140","202","204","204","250","255","206","213","250","218","213","208","210","214","216","255","200","206","202"]},"The storage device  includes one or more non-transitory computer-readable storage media such as a hard drive, compact disk read-only memory (CD-ROM), DVD, or a solid-state memory device. The memory  holds instructions and data used by the processor . The pointing device  is used in combination with the keyboard  to input data into the computer system . The graphics adapter  displays images and other information on the display device . In some embodiments, the display device  includes a touch screen capability for receiving user input and selections. The network adapter  couples the computer system  to the network . Some embodiments of the computer  have different and\/or other components than those shown in . For example, the repository  and\/or the processing server  can be formed of multiple blade servers and lack a display device, keyboard, and other components, while the client device  can be a notebook or desktop computer, a tablet computer, or a mobile phone.","The computer  is adapted to execute computer program modules for providing functionality described herein. As used herein, the term \u201cmodule\u201d refers to computer program instructions and\/or other logic used to provide the specified functionality. Thus, a module can be implemented in hardware, firmware, and\/or software. In one embodiment, program modules formed of executable computer program instructions are stored on the storage device , loaded into the memory , and executed by the processor .",{"@attributes":{"id":"p-0075","num":"0074"},"figref":"FIG. 3","b":["310","142","140","132","130","132","320","132","142"]},"In step , the ereader module  sends to the ebook support module  a user ID, an ebook ID, and a segment ID. The ebook support module  determines (not shown) whether the specified user is allowed to read the specified segment of the specified ebook. If the user is allowed to read the ebook segment, then in step , the ebook support module  sends to the ereader module  content for the specified ebook. That content corresponds to the specified segment. In one embodiment, the segment content is transferred in art encrypted state and then decrypted at the client device .","In the embodiment illustrated in , the ebook support module  does not send to the ereader module  all of the content for the specified ebook at one time. Instead, content is transferred segment by segment (step ) as each segment is requested (step ). In one embodiment, after the requested segment is sent, segments for nearby pages are also sent. This way, if the user tries to view a page outside the requested segment, the appropriate segment will already exist on the client device and can be displayed.","In this embodiment, the client device  must be online so that the ereader module  can periodically request and receive segment content (as needed) from the ebook support module . In a different embodiment (not shown), one request from the ereader module  to the ebook support module  results in the ebook support module  sending all of the content for the specified ebook at one time. In this embodiment, the client device  need not be online after the initial request and receipt of content.",{"@attributes":{"id":"p-0079","num":"0078"},"figref":"FIG. 4","b":["410","144","140","134","130","136","134","420","136","430","134","144"]},"In step , the client layer support module  sends to the server layer support module  a user ID, an ebook ID, and a page range. (The user ID is optional, as discussed above with respect to the available layer data module .) The server layer support module  executes  the available layer data module  to determine which layer data is available for the specified user (or anonymous user) and the specified pages of the specified ebook. In step , the server layer support module  sends to the client layer support module  layer data for the specified ebook. That layer data corresponds to the specified pages. In one embodiment, after the layer data for the specified page range is sent, layer data for nearby page ranges is also sent. This way, if the user views a page outside the specified range, the relevant layer data will already exist on the client device and can be displayed.",{"@attributes":{"id":"p-0081","num":"0080"},"figref":["FIG. 5","FIG. 1"],"b":"500"},"When the method  starts, the client layer support module  has already sent a user ID and an ebook ID to the server layer support module . The server layer support module  then provides the user ID and the ebook ID to the server available-layers module . At this point, the method  begins.","In step , the user ID is used to determine which layers the user has installed. For example, the server available-layers module  queries the user layer settings with the user ID. The user ID is optional, as discussed above with respect to the server available-layers module . If no user ID is provided, then the server available-layers module  queries the user layer settings repository  for a default list of installed layers.","In step , the ebook ID is used to determine a blacklist, whitelist, and\/or add-list (if any) associated with the ebook. For example, the server available-layers module  queries the ebook metadata with the ebook ID.","In step , a list of available layers is assembled. For example, the server available-layers module  starts with the installed layers, keeps any layers that are on the whitelist (if a whitelist exists), removes any layers that are on the blacklist and not on the whitelist (if a blacklist exists), and adds any layers that are on the add-list (if an add-list exists). If neither a blacklist nor a whitelist nor an add-list exists, then the assembled list includes all of the installed layers.","In step , the remaining layers are output as a list of available layers. For example, the server available-layers module  outputs the remaining layers as a list of available layers (including layer metadata such as what type of ebook content a particular layer is applicable to and which display modes are supported by a particular layer). Note that this list of layers is ebook-specific.",{"@attributes":{"id":"p-0087","num":"0086"},"figref":["FIG. 6","FIG. 1"],"b":"600"},"When the method  starts, the client layer support module  has already received a list of available layers (ebook-specific). This is the same list that was output by the server available-layers module  in step  of  and then sent from the server layer support module  to the client layer support module  in step  of . Also, the selected ebook content has been obtained using a Layer API function provided by the client layer support module . Finally, the list of enabled layers has been obtained from the client layer support module . At this point, the method  begins.","In step , the list of available layers is compared to the list of enabled layers. For example, the client available-layers module  compares the list of available layers (ebook-specific) to the list of enabled layers to determine a list of possible layers (i.e., layers that are both available and enabled).","In step , the type of the selected content is compared to the possible layers. For example, the client available-layers module  compares the type of the selected content (e.g., text versus image) to the possible layers (specifically, to the layers' metadata, which specifies what type of ebook content can be interacted with using each layer) to determine a list of matching layers (i.e., layers that can be used to interact with the type of the selected content).","In step , the matching layers are output as a list of available layers. For example, the client available-layers module  outputs the matching layers as a list of available layers. Note that this list of layers is selected-content-specific.","The above description is included to illustrate the operation of certain embodiments and is not meant to limit the scope of the invention. The scope of the invention is to be limited only by the following claims. From the above discussion, many variations will be apparent to one skilled in the relevant art that would yet be encompassed by the spirit and scope of the invention."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 6"}]},"DETDESC":[{},{}]}
