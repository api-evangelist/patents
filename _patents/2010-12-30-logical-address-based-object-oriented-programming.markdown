---
title: Logical address based object oriented programming
abstract: Disclosed are methods and systems for generating resource with URI. The methods and systems involve receiving a request for processing a data, the request including an uniform resource identifier (URI), based on the URI, sending the request to an associated resource handler, instantiating set of data resources associated with the URI by calling a resource factory and processing the request by passing the set of data resources to a specific application programming interface for presenting instantiated set of data resources.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08595699&OS=08595699&RS=08595699
owner: Business Objects Software Limited
number: 08595699
owner_city: Dublin
owner_country: IE
publication_date: 20101230
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["The field generally relates to logical addressing programming and is more specifically related to logical addressing of objects and classes in object oriented program.","Object Oriented Programming (OOP) is a program paradigm that uses objects in data structures including data fields and methods together with their interactions to design applications and computer programs. The OOP model mainly includes class, instance and method. In general, the classes and the object instances in the classes are assigned memory references. During program execution, memory references are used to call classes, objects associated with the program. In cases of large computer programs, using memory references to call classes and objects becomes complicated as memory references use binary relationships between memory references.","Existing solutions like Intentional Programming (IP) and Representational State Transfer (REST) have tried to overcome the use of memory references. Intentional Programming (IP) uses identity that tries to couple user interaction and natural domain language with the programming entities. However, IP does not have a clear naming structure for defining identity. For using an IP, a tool infrastructure associated with the IP has to be used. This makes IP difficult to be used by other programming communities. Another existing solution REST discloses a unique naming method and a layered approach for restructuring systems. However, it is difficult to apply key principles of REST to other programming communities.","Various embodiments of systems and methods for logical address based object oriented program are described herein. The methods and systems involve receiving a request for processing a data, the request including an uniform resource identifier (URI), based on the URI, sending the request to an associated resource handler, instantiating set of data resources associated with the URI by calling a resource factory and processing the request by passing the set of data resources to a specific application programming interface for presenting instantiated set of data resources.","According to one embodiment, the requested may be processed by passing the set of data resources to a specific application programming interface (API).","These and other benefits and features of embodiments of the invention will be apparent upon consideration of the following detailed description of preferred embodiments thereof, presented in connection with the following drawings.","Embodiments of techniques for logical address based object oriented program are described herein. In the following description, numerous specific details are set forth to provide a thorough understanding of various embodiments. One skilled in the relevant art will recognize, however, that the invention can be practiced without one or more of the specific details, or with other methods, components, materials, etc. In other instances, well-known structures, materials, or operations are not shown or described in detail to avoid obscuring aspects of the invention.","Reference throughout this specification to \u201cone embodiment\u201d, \u201cthis embodiment\u201d and similar phrases, means that a particular feature, structure, or characteristic described in connection with the embodiment is included in at least one embodiment of the present invention. Thus, the appearances of these phrases in various places throughout this specification are not necessarily all referring to the same embodiment. Furthermore, the particular features, structures, or characteristics may be combined in any suitable manner in one or more embodiments.","Object Oriented Programming (OOP) uses three basic concepts as the fundamentals for the programming language namely class, instance and methods. A class is a template for an object, a user-defined data type that contains variables, properties, and methods. A class defines the abstract characteristics of the object, including its attributes, fields or properties. For example, the class human resources (HR) may include employee related services such as employee name, employee number, employee department and so on. The class may include an instance of the class. The instance is an actual object created at a run time. Method is a set of procedural statements for achieving the desired result.","In OOPS every object instance is unique and may have a memory foot print. The object instance is attached to a memory reference. Processing the object instance according to the memory reference is a tedious process. Therefore, logical address mapping between the resources is disclosed. The process mainly uses logical address for identifying resources such as classes and objects. The logical address may be identified through a Uniform Resource Identifier (URI).","Uniform addressing provides a common way of addressing classes and objects. The classes and objects may include data, code, state and services. Once a logical address is assigned, it may be available for use and many resources may use the same classes and objects. The interaction between the two resources may be established through the logical address.","According to one embodiment, a new software component may be created in the logical address based object oriented program model by requesting a resource through the URI. Unlike the traditional approach of OOP the new resource is not created directly and unlike OOP the calling component does not control the newly created resource. The calling software component does not control the lifecycle of the newly created object.","In a logical address based object oriented program model a software component may be built or assembled through a logical association of sub-components. Generally, the component names the sub-components that it may use. In the logical address based object oriented program model since the logical address is used to identify resources, there is no impact even if the resource name changes. Since the resources are used by name it is not necessary to explicitly pass arguments or dependencies.","Consider a business scenario explaining the difference between a logical addressing and memory reference addressing. \u2018John Smith\u2019 was a HR manager, replaced by a new HR manager \u2018John Doe\u2019. By using logical address based object oriented program any process involving the HR manager will not be affected as the HR manager may be referred using the logical address \u2018hr\/manager\u2019. Whereas in traditional OOP approach, the process would be affected since memory reference object refers to the name of the HR Manager.","Objects or resource associated with an application has a uniform resource identifier (URI). The URI incorporates the semantics of the application with an URI schema. For instance, object API \u2018Employee Promotion\u2019 is given an URI \u201chr\/promote\u201d. The URI indicates that the API belongs to HR function module and it is about promotion. The URI based address space enables the user to map using the URI convention. There may be other address spaces in the HR function module such as hr\/payroll, hr\/hiring, hr\/candidates and so on. But the URI \u201chr\/promote\u201d directs that the request refers to address space \u201chr\/promote\u201d. Such address mapping allows organizing data in a business oriented manner.","A resource repository includes plurality of resources. During the identification process of resources associated with a request, the resource repository maps the URI in the request and relates it to a specific object class in OOP. The semantic address may be the URI address and the corresponding physical programming unit may be a class in OOP. To be present in the resource repository, a resource may register according to its URI. For instance, employee is a resource that registered with its URI \u201chr\/employee\/{id}\u201d. The employee resource may be registered along with its implemented entity class, employee, which represents a row in employee table within HR database. In another instance, a promotion logic may register as \u201chr\/promote\u201d with a set of arguments with its implemented entity class. The implemented entity class may include function along with the objects required to deliver the promotion logic. For example, a function may be HRService.promote (ID, manager, role). The objects may be the ID of the employee, manager ID and the role to which the employee is promoted.",{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 1","b":["105","110","115","120"]},"According to one embodiment, sending the request to an associated resource handler includes sending the request to one or more resource handlers which may be linked to one another. The linking of the one or more resource handlers may be provided by routing information. When a request is made for processing data, the application associated with the data processing may need to know the URI of the requested resource. The implementation of the resource may be determined by the routing information.","In another embodiment, the API identifies addressable objects in the request. The addressable program interface may include specifications for objects and classes used to communicate between the user request and the implementer of the API.","In yet another embodiment, the resource handler determines a function module associated with the resource handler according to the URI. According to yet another embodiment, the routing component including the resource handler identifies various resources to be grouped to achieve a desired result. For instance, to achieve promotion logic, resources such as employee, manager may be grouped.","In yet another embodiment, the URI may be used for identifying resources. URI's support structuring addresses into namespaces and hierarchies that provide a logical partition of the address space. For instance, a promote object associated with the HR may have URI as \u201chr\/promote\u201d. URI may also express information about the resource that it refers to. Any additional metadata embedded in a URI might be provided to assist consumption rather than being required to actually identify the object. Objects should be registered so that the object can be retrieved according to its URI.","Consider a business scenario for the above described process. Consider receiving a request in form of code including URI string and set of arguments. An exemplary code segment may be Resource rc=hrservice.put (\u201chr\/promote\u201d,\n\n","In the exemplary code, HR service request \u201chrservice.put\u201d is an addressable URI. The addressable URI includes objects URI, employee, role and manager. The addressable API passes the request to a routing component. The routing component may be a resource handler. In this scenario, the resource handler may be a HR resource handler. An instance of the resource handler is created to determine the URI address \u201chr\/promote\u201d. From the request it is determined that the request is related to HR function module. A resource factory associated with the HR is called. The resource factory retrieves set of resources required by the promotion logic to perform the promotion. In this scenario, resources such as employee, role and manager are retrieved. The set of resources or objects related to the request \u201chr\/promote\u201d is instantiated. On instantiating, the set of data is passed to a specific API to process the request. On processing the request, the result is returned as a resource including a URI. In this business scenario, the employee data with new role is returned with URI.",{"@attributes":{"id":"p-0033","num":"0035"},"figref":"FIG. 2","b":"200"},"The program  illustrates three addressable API's namely employee, manager and role. The program also includes a set of arguments . The program is processed according to the business scenario described in .","The result of the exemplary program is returned as follows:",{"@attributes":{"id":"p-0036","num":"0038"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Employee employee = new Employee(\u201ci012345\u201d);"]},{"entry":[{},"Manager manager = new Manager(\u201ci456798\u201d);"]},{"entry":[{},"Role specialistRole = new Role(\u201cspecialist\u201d);"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},{"@attributes":{"id":"p-0037","num":"0039"},"figref":"FIG. 3","b":["305","310","315","315","320","325","320"]},{"@attributes":{"id":"p-0038","num":"0040"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"105pt","align":"left"}}],"thead":{"row":[{"entry":[{},"TABLE 1"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"URI","Handler"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/hr\/employee\/i123456","Employee Resolver"]},{"entry":[{},"\/hr\/policies\/working-time","Local Policy Resolver"]},{"entry":[{},"\/hr\/policies\/stock-trading","Enterprise Policy Resolver"]},{"entry":[{},"\/hr\/policies\/local","Local Policy Resolver"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"For instance, row 1 in Table 1 shows a URI \u201chr\/employee\/i123456\u201d. By the URI \u201chr\/employee\u201d, it is determined that the request is related to HR and employee. The resource HR may include various resource handlers for various functions. Since the request directs to an employee, an employee resolver is determined. Similarly, URI \u201chr\/policy\/stock-trading directs the request to an enterprise policy resolver.",{"@attributes":{"id":"p-0040","num":"0042"},"figref":"FIG. 4A","b":["400","405","400","410","415"]},{"@attributes":{"id":"p-0041","num":"0043"},"figref":"FIG. 4B","b":["400","420","425","430","435","440"]},"According to one embodiment, collection of resources may be specified as in case of pay roll service that may use other services such as team collection, fetching time sheets for each employee in the team, calculating pay, pension and tax for each employee, and the like.",{"@attributes":{"id":"p-0043","num":"0045"},"figref":"FIG. 5","b":["500","505","510","515","520","525","530","510","510","515","520","520","505","520","525","530","535"]},"Some embodiments of the invention may include the above-described methods being written as one or more software components. These components, and the functionality associated with each, may be used by client, server, distributed, or peer computer systems. These components may be written in a computer language corresponding to one or more programming languages such as, functional, declarative, procedural, object-oriented, lower level languages and the like. They may be linked to other components via various application programming interfaces and then compiled into one complete application for a server or a client. Alternatively, the components may be implemented in server and client applications. Further, these components may be linked together via various distributed programming protocols. Some example embodiments of the invention may include remote procedure calls being used to implement one or more of these components across a distributed programming environment. For example, a logic level may reside on a first computer system that is remotely located from a second computer system containing an interface level (e.g., a graphical user interface). These first and second computer systems can be configured in a server-client, peer-to-peer, or some other configuration. The clients can vary in complexity from mobile and handheld devices, to thin clients and on to thick clients or even other servers.","The above-illustrated software components are tangibly stored on a computer readable storage medium as instructions. The term \u201ccomputer readable storage medium\u201d should be taken to include a single medium or multiple media that stores one or more sets of instructions. The term \u201ccomputer readable storage medium\u201d should be taken to include any physical article that is capable of undergoing a set of physical changes to physically store, encode, or otherwise carry a set of instructions for execution by a computer system which causes the computer system to perform any of the methods or process steps described, represented, or illustrated herein. Examples of computer-readable media include, but are not limited to: magnetic media, such as hard disks, floppy disks, and magnetic tape; optical media such as CD-ROMs, DVDs and holographic devices; magneto-optical media; and hardware devices that are specially configured to store and execute, such as application-specific integrated circuits (\u201cASICs\u201d), programmable logic devices (\u201cPLDs\u201d) and ROM and RAM devices. Examples of computer readable instructions include machine code, such as produced by a compiler, and files containing higher-level code that are executed by a computer using an interpreter. For example, an embodiment of the invention may be implemented using Java, C++, or other object-oriented programming language and development tools. Another embodiment of the invention may be implemented in hard-wired circuitry in place of, or in combination with machine readable software instructions.",{"@attributes":{"id":"p-0046","num":"0048"},"figref":"FIG. 6","b":["600","600","605","655","600","640","655","610","615","610","615","605","615","600","625","630","600","625","630","600","635","600","650","650","600","645","600","620","660","660","660","650","660"]},"A data source is an information resource. Data sources include sources of data that enable data storage and retrieval. Data sources may include databases, such as, relational, transactional, hierarchical, multi-dimensional (e.g., OLAP), object oriented databases, and the like. Further data sources include tabular data (e.g., spreadsheets, delimited text files), data tagged with a markup language (e.g., XML data), transactional data, unstructured data (e.g., text files, screen scrapings), hierarchical data (e.g., data in a file system, XML data), files, a plurality of reports, and any other data source accessible through an established protocol, such as, Open DataBase Connectivity (ODBC), produced by an underlying software system (e.g., ERP system), and the like. Data sources may also include a data source where the data is not tangibly stored or otherwise ephemeral such as data streams, broadcast data, and the like. These data sources can include associated data foundations, semantic layers, management systems, security systems and so on.","In the above description, numerous specific details are set forth to provide a thorough understanding of embodiments of the invention. One skilled in the relevant art will recognize, however, that the invention can be practiced without one or more of the specific details or with other methods, components, techniques, etc. In other instances, well-known operations or structures are not shown or described in detail to avoid obscuring aspects of the invention.","Although the processes illustrated and described herein include series of steps, it will be appreciated that the different embodiments of the present invention are not limited by the illustrated ordering of steps, as some steps may occur in different orders, some concurrently with other steps apart from that shown and described herein. In addition, not all illustrated steps may be required to implement a methodology in accordance with the present invention. Moreover, it will be appreciated that the processes may be implemented in association with the apparatus and systems illustrated and described herein as well as in association with other systems not illustrated.","The above descriptions and illustrations of embodiments of the invention, including what is described in the Abstract, is not intended to be exhaustive or to limit the invention to the precise forms disclosed. While specific embodiments of, and examples for, the invention are described herein for illustrative purposes, various equivalent modifications are possible within the scope of the invention, as those skilled in the relevant art will recognize. These modifications can be made to the invention in light of the above detailed description. Rather, the scope of the invention is to be determined by the following claims, which are to be interpreted in accordance with established doctrines of claim construction."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The claims set forth the embodiments of the invention with particularity. The invention is illustrated by way of example and not by way of limitation in the figures of the accompanying drawings in which like references indicate similar elements. The embodiments, together with their advantages, may be best understood from the following detailed description taken in conjunction with the accompanying drawings.",{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 4A"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 4B"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 6"}]},"DETDESC":[{},{}]}
