---
title: Tilting tree spinning cones method and system for mapping XML to n-dimensional data structure using a single dimensional mapping array
abstract: A tilting tree, spinning cones process is employed to map n-dimensional array data originally in markup language, to an n-dimension table suitable for use by COBOL application programs. Mapping is performed without scanning the result array for an empty slot. This allows the result array slots to be pre-loaded with state data. During mapping, the hierarchical nature of the markup language n-dimensional data is represented in two-dimensions using an inverted tree structure having cones for each array level. The tree is tilted to bring a member of a given level into contact with one of the axes of the tree graph, followed by spinning appropriate cones to bring a certain member of that level into contact with the same axis. This results in the ability to use a one-dimensional mapping array. The dimension offset on the mapping axis can then be used as an index value into the mapped array output for storage or retrieval of element data.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06985910&OS=06985910&RS=06985910
owner: International Business Machines Corporation
number: 06985910
owner_city: Armonk
owner_country: US
publication_date: 20030206
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DESCRIPTION OF THE INVENTION"],"p":["1. Field of the Invention","This invention relates to methods and processes for translating data from one format or programming paradigm to another programming format or paradigm, and especially to methods for converting Extensible Markup Language data structures to COBOL data structures.","2. Background of the Invention","Common Business Oriented Language or \u201cCOBOL\u201d is one of the oldest high-level computer programming languages still in widespread use today. Like other programming languages, COBOL is designed to allow development of computer programs that perform specific purposes and tasks. COBOL is especially well suited for business data processing tasks, as opposed to scientific or engineering data processing tasks. Business oriented data is characterized by \u201ctransactions\u201d, often which are either reflections of manually-conducted activities (e.g. sales, deposits, withdrawals, etc.) or reflections of automatically-conducted activities (e.g. compounding of interest on a principal amount). A common \u201coutput\u201d of business-oriented tasks is a \u201creport\u201d. As such, COBOL is tailored to collect, organize, validate, update, process and report with respect to business-oriented data.","As COBOL was originally targeted to and executed by large \u201cmainframe\u201d business computers, it was one of the original languages employed in the \u201cclient-server\u201d topologies of 20 to 30 years ago. As evolution of computing has brought processing paradigms full circle with the advent of \u201cthin clients\u201d, networked servers, wide area networks and the Internet, \u201cclient-server\u201d architectures-are once again in favor, albeit the \u201cclients\u201d are now commonly web browser computers, and the servers are many thousands of times more capable in processing bandwidth, storage capacity, and communications capabilities.","COBOL, and related products and systems such as International Business Machine's (\u201cIBM's\u201d) Customer Information Control System (\u201cCICS\u201d), and IBM's Information Management System (\u201cIMS\u201d) are well known in the industry, being employed in business and government enterprises ranging from banking, finance, investment, insurance, to manufacturing and service operations.","As newer programming languages such as object-oriented languages including \u201cC\u201d, \u201cC++\u201d, and Sun Microsystem's Java [TM], have found widespread acceptance in the software industry, some may be led to believe that COBOL, IMS, CICS, and similar products and languages are of limited future value. Regardless of whether COBOL, CICS, and IMS\/DC are recognized as strategic products, from a business case perspective, there are literally billions of lines of COBOL business application code in use today. While Java has now become the application development language of choice, until recently COBOL was the main application development language, in use since the early 1970's, in both CICS and IMS\/DC transaction processing environments. For example, in 1999, the IBM Hursley (United Kingdom) development laboratory estimated that more than 20 billion transactions per day were processed in IBM's customers' CICS installations worldwide. Therefore, COBOL remains an important technology, and problems arising from interfacing and interacting COBOL resources with newer technology resources (e.g. applets, servlets, etc.) must be addressed as inventively as any other \u201ccutting edge\u201d technology problem. For example, and inefficient solution to a COBOL problem which is executed 20 billion times per day accumulates to massive wasted processing bandwidth, memory and storage waste, and communication inefficiencies. By the very nature of COBOL applications (e.g. business transactions), such results manifest themselves as increased costs, latency to complete transactions, and reduced profits.","The more modern concept of \u201cData Mining\u201d can be summarized as the ability to re-use business application logic from existing application programs to solve business problems in the future. Data Mining implementations exist in varying degrees of sophistication. For example, a simple application refacing solution may use a Web browser connected to a Web Server, which in turn accesses data from a transaction-processing server using an Extensible Markup Language (\u201cXML\u201d) interface. In another example, a tightly coupled business-to-business (\u201cB2B\u201d) application may connect a company to a supplier, where an XML document serves as the common data transport. In this example, it can be seen that XML-based servers will enable the evolution of Web Services to access older \u201clegacy\u201d data such that a business can greatly extend its reach to customers over time while continuously updating, upgrading, and migrating its business application programs to offer enhanced services and products with ever-increasing cost and response efficiencies.","As such, the networked economy is driving the businesses from rigidly designed business computing systems to employ flexible application design on scalable computing platforms, from static to dynamic interaction-between partners, and from technology integration to business integration.","So, two extremes in technology are firmly established\u2014billions of lines of code of COBOL representing untold billions of dollars of business investment on one end, with XML data transport technology ensuring the ability of future business applications to access and use legacy data. Neither XML or COBOL may be used exclusively. However, there are significant technical challenges to interfacing COBOL and XML to each other, especially with respect to multi-dimensional arrays or \u201ctables\u201d of data which are so prevalent in today's business application requirements.","Brief Review of COBOL Field Definitions and Tables","While COBOL is well known in the art, it will be useful to briefly review the implementation of \u201ctables\u201d or \u201carrays\u201d of data in COBOL in order to fully understand the impact of converting tabular or indexed data structures to and from COBOL and XML.","In COBOL syntax, a \u201cpicture\u201d clause is used to define a field for use, such as shown in Table 1.",{"@attributes":{"id":"p-0014","num":"0013"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 1"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Example COBOL Field Definition"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"98pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"01","Data - Field",{}]},{"entry":[{},{},"02 Data - Item - 1","Pic X(1)."]},{"entry":[{},{},"03 Data - Item - 2","Pic X(1)."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]}}]}}},"In this example, two data items, both being alphanumeric fields, are defined with a \u201cprecision\u201d of one character. The \u201cX\u201d following the \u201cPic\u201d indicates the field is alphanumeric, and the \u201c(1)\u201d following the \u201cX\u201d indicates the field is 1 character in length. A \u201cPic 9(3)\u201d field type would be a numeric field having 3 digits, as would be a \u201cPic 999\u201d field type. Other field types, such as literals, and numerics with decimal (e.g. fractional components) may be defined, as is well known in the art. Fields may be defined within groups, as indicated by elementary levels within group levels, as is also well known within the art.","So, for example, a customer information record could be defined as shown in Table 2, wherein the customer name may have up to 30 characters, the telephone number 10 digits, and the account number 18 alphanumeric characters.",{"@attributes":{"id":"p-0017","num":"0016"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 2"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Example Customer Information Defined in COBOL"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"84pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"01","Data - Field",{}]},{"entry":[{},{},"02 Customer - Name","Pic X(30)."]},{"entry":[{},{},"03 Customer - Telephone","Pic 9(10)."]},{"entry":[{},{},"04 Customer - Acctnum","Pic x(18)."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]}}]}}},"This type of customer data is often organized into arrays or tables of information, such as arrangements employed by relational database application programs.","Implementation and storage layout of an array structure varies by language. The COBOL language table structure, implemented by use of the COBOL \u201coccurs\u201d clause, stores array elements in consecutive memory locations.","For example, a one-dimensional array T beginning at memory location X, containing six elements e, where each element is four characters in length, is defined in a COBOL program as follows:",{"@attributes":{"id":"p-0021","num":"0020"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"01 T."]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"05 e OCCURS 6 TIMES PICTURE 9999."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0023","num":"0022"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 3"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Example Single Dimension Table Definition in COBOL"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"105pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"01","DaysOfWeek - Table.",{}]},{"entry":[{},{},"03 Day - Name","Pic X(8) Occurs 7 Times."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]}}]}}},"During initialization of a program using such an array or immediately following the definition of such an array as shown in Table 3, the initial values (e.g. strings containing the weekday names) of the fields could be set using a COBOL \u201cmove\u201d verb, such as shown in Table 4.",{"@attributes":{"id":"p-0025","num":"0024"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 4"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Example Table Initialization in COBOL"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["000061","Move \u201cMonday\u201d To DAY-Name(1)"]},{"entry":["000062","Move \u201cTuesday\u201d To DAY-Name(2)"]},{"entry":["000063","Move \u201cWednesday\u201d To DAY-Name(3)"]},{"entry":"."},{"entry":"."},{"entry":"."},{"entry":["000067","Move \u201cSunday\u201d To DAY-Name(7)"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"Once the table is loaded or initialized, individual field values can be quickly and directly accessed using the day number index, and specialized verbs such as the COBOL \u201csearch\u201d verb, can be used to inspect or verify the information.","However, most business oriented data cannot be as simply organized as a single-dimension array. For example, customers may be organized by product type, sales volume, geographic location, etc. COBOL allows for multi-dimensional tables to be defined essentially as tables of tables, as shown in Table 5.",{"@attributes":{"id":"p-0028","num":"0027"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 5"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Example Multi-Dimensional Table Definition in COBOL"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"000040 01 Sales-Transactions."]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"03 Customer-Num Occurs 100 Times Indexed by Cust-Index"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"05 Order-Num Pic X(3) Occurs 15 Times Indexed by"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Order-Index"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{}," 07 Order-Items Pic X(45) Occurs 25 Times"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Indexed by Item-Num"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"In this example, 100 different customers, each with a customer number, are tracked for 15 orders (each with an order number), with each order having up to 25 items listed or described using up to 45 characters in each item description. In COBOL implementation, this is realized as 15 tables of 25 fields, further organized into an array of 100 tables (e.g. 100\u00d715\u00d725).","Multidimensional COBOL tables are stored in row major order, in which rows are, placed one after another in memory, as is described in the text \u201cData Structures & Their Algorithms\u201d by Harry R. Lewis and Larry Denenberg (HaiperCollins, 1991). The row is defined as the first index, where a table having three dimensions and indexed by the 3-tuple (x, y, z), x is the index for the row.","For example, a two-dimensional array T beginning at memory location X, containing two rows and three columns, where each element (x) is two characters in length, and each element (y) is four characters in length, as defined in a COBOL program with the three COBOL statements:",{"@attributes":{"id":"p-0032","num":"0031"},"tables":{"@attributes":{"id":"TABLE-US-00007","num":"00007"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"01 T."]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"05 x OCCURS 2 TIMES PICTURE XX."]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"10 y OCCURS 3 TIMES PICTURE 9999."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 2"},"For example, databases may store sparse arrays (partially filled arrays) by using linked lists or a hierarchical table of pointers. During processing the application program may decide to store the array elements in a database.","n-Dimensional Array Data Mapping Between Markup Language and COBOL","An XML document request can originate from an external source (e.g. another company, another agency, another enterprise, etc.), or it can be generated by a network server that requires an XML interface to access mainframe applications. Mapping an XML document to COBOL data structures is distinct from the challenge of developing algorithms for the efficient storage and retrieval of XML documents on mass media.","An XML parser and mapper are somewhat straightforward to develop for simple XML documents. The challenge, however, arise when mapping XML documents that may have multi-dimensional table or array data. This requirement, though, is actually very common.","For example, a system for displaying information about an athletic sport league might use an XML document to display statistics for an individual player, within a team, within a conference, within a division, and within a league. The resulting structure would be a 4-dimensional array.","An example using the National Football League (\u201cNFL\u201d) can be used to illustrate the general conceptual procedure for mapping a data element into the result array. In this example, the NFL divisions are the first dimension (w), the conferences are the second dimension (x), the teams are the third dimension (y), and the players are the fourth dimension (z). If a team name is parsed from the XML document containing the relevant statistics, the following procedure must be followed to map the team name into the result array:\n\n","However, actually designing a software implementation for this general conceptual procedure presents challenges to developing an efficient method to navigate the result array, and for determining the target dimension array index, especially if the result array has been pre-loaded with state data. Therefore, there is a need in the art for a method and system which efficiently maps multi-dimensional table array data to and from XML and COBOL.","Our new tilting tree, spinning cones process can be employed to efficiently map multi-dimensional array data contained in markup language documents, such as XML, to data structures suitable for use by COBOL application programs. The process maps the data in a significantly more efficient manner, thereby allowing more data to be mapped with reduced processing resources.","First, a two-dimensional inverted tree structure using cones to represent the XML arrays is virtualized, which achieves mapping the n-dimensional XML data to a two-dimensional representation. Next, the inverted cone tree is repositioned on the two-dimensional graph by tilting it so that one array (cone) member in each dimension lays flat against an axis, such as the y-axis. This axis is now referred to as the mapping axis. Now the dimensions in the XML structure correspond to y-axis segments.","Finally, by spinning the cones (e.g. rotating the arrays) one at a time, every member of every array can be brought into contact with the mapping axis. The dimension segments of the mapping axis can be represented as a one-dimensional or linearly organized array, suitable for COBOL application programs.","The present invention is preferrably embodied in computer programs which provide interfacing of n-dimensional data structures between formats such as Extensible Markup Language (\u201cXML\u201d) and structured programming formats such as COBOL. The present invention may be embodied as software in a high level language (COBOL, C, C++, Java, etc.), low level or assembly language, or even in programmable or fixed-design firmware and logic for use in computing systems such as enterprise servers.","A Generic Converter solution for Web enabling CICS applications including an interface to the 3270 Bridge to provide access to 3270 applications, has been available from International Business Machines in one form or another for some time.","The Generic Converter solution has now been further enhanced with an XML interface containing our inventive \u201ctilting tree, spinning cones\u201d process. This enables Java developers to be solution participants by providing WebSphere Java clients. This is the subject of the present invention.","To present the process of the invention, it is useful first to review how n-dimensional arrays are represented in XML. The structure of an XML document is typically illustrated as an inverted tree (), as shown in . The main root, at the top, branches to progressively lower levels or dimensions. The vertical members, at any particular level, represent array elements at that level.","The following example shows a graphed XML structure according to our NFL example, with League as the root element, Divisions as the first dimension array, Conferences as the second dimensional array, Teams as the third dimension array, and Players as the fourth dimension array (). It can be seen from this diagram that all elements of the XML document may be represented in a two-dimensional space in this manner. This is true without regard to the number of dimensions (y-axis) or the size of an individual array (x-axis).","At the conclusion of the foregoing general conceptual procedure discussion, we indicated that the result array might be pre-loaded with state data prior to parsing and mapping XML document array elements. Therefore, it would be unreliable to use the result array to determine the mapping of a parsed XML document array element based on the presence of data in the result array. However, using this approach, an n-dimensional result array can be represented in a two-dimensional space, which makes it possible to create a mirror array of the n-dimensional result array that can be used for mapping.","Unfortunately, this mirror array could become quite large. The simple football league example, holding 20 items of information at each dimensional level, would require a mirror array at least 50 k bytes in size. Moreover, searching for the correct array dimension (e.g. navigating the table) could be cumbersome and inefficient if higher dimension levels need to be re-navigated for every data element.","However, our new tilting tree, spinning cones process can be employed, resulting in representations which require much less storage space, 164 bytes for our example, and is much more efficient at mapping. The following discussion and illustrations explain this process.","First, an inverted tree structure (), similar to that shown in , may also be illustrated using cones () to represent the arrays, as shown in .","Next, the inverted cone tree is repositioned on the graph by tilting it so that one array (cone) member in each dimension lays flat against an axis. Now the dimensions () in the XML structure (\u2032) correspond to y-axis segments, as shown in .","Finally, it can be seen that by spinning () the cones (e.g. rotating the arrays) one at a time, every member of every array can be brought into contact with this axis, which we can now refer to as the mapping axis, as illustrated in . The dimension segments of the mapping axis can be represented as a one-dimensional array. Returning to our NFL example, a mapping array is required with 4 element groups, one group for each dimension. Each group would contain:\n\n","As the XML document is parsed by the process, the mapping array group at each dimension holds information pertaining to the cone that is currently spun into contact (e.g. rotationally positioned to align) with the mapping axis. Parsing and mapping begin with the XML document root element, and proceeds by parsing down to cones at successively lower dimensions. Cone elements are mapped as they are encountered.","For example, if during processing the cone elements (spinning in place) at the Teams level, a Player element is encountered representing a lower level cone, then the lower level Players cone is immediately \u201cspun into contact\u201d with the mapping axis. Once the Players cone processing is completed for a team, the mapping array is shifted up one dimension to spin a new Teams cone into place, repeating the process until all cones in the n-dimensional array have been processed.","For further understanding of the invention, we now present a functional, operational example embodiment and application of our tilting tree, spinning cones process for mapping n-dimensional data. The following discussion will use another example of an inbound XML document request, shown in Table 6, with the corresponding COBOL program 4-dimensional table definition, shown in Table 7, and the mapping array it creates.",{"@attributes":{"id":"p-0064","num":"0073"},"tables":{"@attributes":{"id":"TABLE-US-00008","num":"00008"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 6"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Example XML Inbound Data"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<league>"},{"entry":"<leaguename>NFL<\/leaguename>"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<division>"]},{"entry":[{},"<divisionname>AFC<\/divisionname>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<conference>"]},{"entry":[{},"<conferencename>AFCEast<\/conferencename>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<team>"]},{"entry":[{},"<teamname>Dolphins<\/teamname>"]},{"entry":[{},"<teamgamesplayed>16<\/teamgamesplayed>"]},{"entry":[{},"<teamplayer>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<playername>Jay Fiedler<\/playername>"]},{"entry":[{},"<playergamesplayed>16<\/playergamesplayed>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/teamplayer>"]},{"entry":[{},"<teamplayer>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<playerName>Ed Perry<\/playerName>"]},{"entry":[{},"<playergamesplayed>16<\/playergamesplayed>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/teamplayer>"]},{"entry":[{},"<teamplayer>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},":"]},{"entry":[{},":"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/teamplayer>"]},{"entry":[{},"<\/team>"]},{"entry":[{},"<team>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},":"]},{"entry":[{},":"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/team>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/conference>"]},{"entry":[{},"<conference>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},":"]},{"entry":[{},":"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/conference>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/division>"]},{"entry":[{},"<division>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},":"]},{"entry":[{},":"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/division>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<\/league>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},{"@attributes":{"id":"p-0065","num":"0074"},"tables":{"@attributes":{"id":"TABLE-US-00009","num":"00009"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 7"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Example COBOL Program Statements"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"01 COBOL-RESULT-ARRAY"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"02 LEAGUE-NAME PIC X(20)."]},{"entry":[{},"02 DIVISION OCCURS 2 TIMES."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"04 DIVISION-NAME PIC X(03)."]},{"entry":[{},"04 CONFERENCE OCCURS 3 TIMES."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"06 CONFERENCE-NAME PIC X(09)."]},{"entry":[{},"06 TEAM OCCURS 6 TIMES."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"08 TEAM-NAME PIC X (20)."]},{"entry":[{},"08 TEAM-GAMES-PLAYED PIC 9(03)."]},{"entry":[{},"08 TEAM-PLAYER OCCURS 70 TIMES"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"10 PLAYER-NAME PIC X(20)."]},{"entry":[{},"10 PLAYER-GAMES-PLAYED PIC 9(03)."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"05 DIMENSION-COUNTER PIC S9(4) COMP."},{"entry":"05 MAPPING-ARRAY"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"10 DIMENSION-TABLE OCCURS 4 TIMES."]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"126pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"63pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"20 DIMENSION-TAG-NAME","PIC X(32)."]},{"entry":[{},"20 DIMENSION-OCCURS-GROUP-LEN","PIC S9(4) COMP."]},{"entry":[{},"20 DIMENSION-OCCURS-MAX-TIMES","PIC S9(4) COMP."]},{"entry":[{},"20 DIMENSION-FIELD-COUNT","PIC S9(4) COMP."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}]}}},"According to our example embodiment in an IBM CICS computing environment, when an XML request is received, a SAX (Standard API for XML) parser starts parsing at the beginning of the XML document. The SAX parser is event driven, meaning that when an XML tag name is found (an event), control is given to our tilting tree, spinning cones process for element mapping.","Further according to our example embodiment, the mapping array has two associated control values. The dimension counter indicates the current dimension level being processed for the multi-dimension result array. The dimension array offset is the offset into the array for the beginning of the dimension currently being processed. The fact that the mapping array is one-dimensional is made possible by the concept of tilting the tree into the mapping array axis. Remember, the tree is a two-dimensional representation of the multi-dimensional source array.","For each parser event, processing proceeds as follows:",{"@attributes":{"id":"p-0068","num":"0000"},"ul":{"@attributes":{"id":"ul0005","list-style":"none"},"li":["1. An in-memory repository contains metadata information about the result array structure and result array data elements. The repository is searched for a match of the XML tag name.","2. If the tag name corresponds to an array name (i.e. DIVISION, CONFERENCE, TEAM, or TEAM-PLAYER), then:\n    \n    ","3. If the tag name corresponds to an array element (i.e. DIVISION-NAME, CONFERENCE-NAME, TEAM-NAME, TEAM-GAMES-PLAYED, PLAYER-NAME, or PLAYER-GAMES-PLAYED), then:\n    \n    "]}},"While the immediately preceding explanation may appear simple and straightforward, actual code implementation is somewhat more complex to be able to handle the COBOL array definitions shown in Table 8. In this example, notice that TEAM-LOCATION is an element of the TEAM array, but follows the higher dimension array for TEAM-PLAYER. The CONFERENCE-BOARD array is an array of equal dimension to the CONFERENCE array, both under the DIVISION array, and follows the higher level arrays of TEAM and TEAM-PLAYER.",{"@attributes":{"id":"p-0070","num":"0089"},"tables":{"@attributes":{"id":"TABLE-US-00010","num":"00010"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 8"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Example COBOL Implementation"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"01 COMMAREA."}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"119pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"02 LEAGUE-NAME ","PIC X(20)."]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"02 DIVISION OCCURS 2 TIMES."]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"04 DIVISION-NAME PIC X(03)."]},{"entry":[{},"04 CONFERENCE OCCURS 3 TIMES."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"06 CONFERENCE-NAME PIC X(09)."]},{"entry":[{},"06 TEAM OCCURS 6 TIMES."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"08 TEAM-NAME PIC X(20)."]},{"entry":[{},"08 TEAM-GAMES-PLAYED PIC 9(03)."]},{"entry":[{},"08 TEAM-PLAYER OCCURS 70 TIMES."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"10 PLAYER-NAME PIC X(20)."]},{"entry":[{},"10 PLAYER-GAMES PLAYED PIC 9(03)."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"70pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"08 TEAM-LOCATION ","PIC X(20)."]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"04 CONFERENCE-BOARD OCCURS 12 TIMES."]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"06 CONFERENCE-BOARD-MEMBER-NAME PIC X(20)."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"Those skilled in the art will readily recognize that the various aspects of embodiments disclosed herein are provided as illustrative details, and do not represent limitations of the scope of the present invention. Alternate computing platforms, programming methodologies, communications protocols, and storage technologies can be employed to realize the present invention. Therefore, the scope of the present invention should be determined by the following claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The following detailed description when taken in conjunction with the figures presented herein provide a complete disclosure of the invention.",{"@attributes":{"id":"p-0041","num":"0046"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0042","num":"0047"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0043","num":"0048"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0044","num":"0049"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0045","num":"0050"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0046","num":"0051"},"figref":"FIG. 6"}]},"DETDESC":[{},{}]}
