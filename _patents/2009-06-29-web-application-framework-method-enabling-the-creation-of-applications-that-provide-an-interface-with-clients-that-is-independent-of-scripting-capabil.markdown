---
title: Web application framework method enabling the creation of applications that provide an interface with clients that is independent of scripting capability
abstract: An improved web application framework methodology enables the creation of web applications which can respond to client requests in a fashion that results in rendering which appears on the client to be independent of scripting capability.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08458246&OS=08458246&RS=08458246
owner: Research In Motion Limited
number: 08458246
owner_city: Waterloo
owner_country: CA
publication_date: 20090629
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATION","BACKGROUND","DESCRIPTION"],"p":["The present application claims priority to U.S. Provisional Application Ser. No. 61\/106,594, filed Oct. 19, 2008, the contents of which are hereby incorporated by reference.","1. Field","The disclosed concept relates generally to web applications and, more particularly, to a web application framework that enables optimum rendering performance on a client based upon detected parameters of the client.","2. Related Art","It is known that web application developers develop web applications that are executed on servers and that include web content which is made available to clients via a network such as the worldwide web. Such content typically is stored in the form of web pages and other content that are made available to a web application that is deployed to a server. Such web pages often include instructions in the form of markup language such as html which are in the nature of instructions for a client, such as an instruction as to how certain content should be rendered on a display of the client.","It is understood, however, that the various clients, which may take the form of mobile electronic devices and other devices, for instances, have various hardware characteristics, software characteristics, and other characteristic that affect the capabilities of the clients. For example, the various characteristics of a client may include physical properties such as: screen size; screen resolution; screen aspect ratio; color or black-and-white-only, etc. Additionally or alternatively, the various characteristics of a client may include software capabilities, such as: does\/doesn't support various fonts; does\/doesn't support style sheets; supports only up to HTML 4.0 standard or supports HTML 5.0 (and it's additional features); does\/doesn't support JavaScript, etc.","A given piece of markup instruction often is usable for at most a limited number of different clients since certain clients having differing characteristics likely will render in different fashions or in incorrect fashions the subject matter of the markup instructions. Additionally, web pages having JavaScript content will have their JavaScript go unexecuted if the client is incapable of executing JavaScript or has a JavaScript feature disabled.","Various methodologies have been proposed to deal with the large variety of client characteristics. One proposed solution is to provide multiple versions of any given web page, with a different version of the web page being created for each permutation of client characteristics that are deemed to be worthy of supporting. Such an approach requires extensive work by a web application developer because of the large number of times any given web page must be individually replicated in various forms to suit various device characteristics. Another approach has been to write a single version of each web page, with the content being tailored to the client having singularly the lowest level of functionality, whereby all clients, including those having progressively greater degrees of rendering functionality, will be rendered at the same low capability level. While such an approach can save effort, at least initially, on the part of the web application developer, the resulting web application has an undesirably low level of rendering functionality which fails to take advantage of the generally greater rendering capabilities of many of the existing clients. Another proposed approach is to write web applications having pages that are highly sophisticated and which include scripting instructions that are executable on a client, that detect the various characteristics of a client, and that tailor the markup instructions to take advantage of the individual client's rendering and other capabilities. However, such web applications are of an extremely high level of sophistication and are therefore difficult to create, and such web pages often are prohibitively large in size and as a result are very slow to download. Moreover, clients lacking the ability to execute such scripting instructions will be incapable of correctly rendering the content of such a web page. There thus exists a need to provide an improved methodology of enabling web content to be properly rendered on a wide variety of clients.","Similar numerals refer to similar parts throughout the specification.",{"@attributes":{"id":"p-0021","num":"0020"},"figref":["FIG. 1","FIG. 1"],"b":["8","12","16","4","20","8","12","16"]},"The clients , while being indicated generally with the same numeral , are understood to be different from one another or to at least potentially be different from one another. That is, each client  has a number of characteristics such as hardware properties and software capabilities, and one or more of the characteristics of any given client  may be different from the corresponding one or more characteristics of another client , although this need not be the case.","It is advantageously noted that in making an http request, a client  typically includes in a header of the request one or more client parameters. A small portion of such a header may look like this fragment:","user-agent:BlackBerry8120\/4.3.0Profile\/MIDP-2.0 Configuration\/CLDC-1.1 VendorID\/\u22121","which includes client parameters indicative of client characteristics such as the client device model number and the browser type and version that is making the request. As employed herein, the expression \u201cparameter\u201d and variations thereof shall refer to arguments that are placed in and that can be parsed from an http request and read by a server receiving the request. While at certain locations herein a client  may be characterized as having or possessing client parameters, it is understood that this terminology is understood to be referring to the fact that those parameters are the ones that would be provided in an http request from such a client  and that relate to various characteristics of the client . As employed herein, the expression \u201ccharacteristic\u201d and variations thereof shall refer to capabilities of a client . In accordance with the disclosed concept, the various client parameters are parsed from the header of the http request, and from these client parameters one or more characteristics of the client can be discerned with the use of a database .","Various parameters may be employed in making http requests. For instance, hardware parameters might be said to include, by way of example, the model number of the device of the client, the screen size, the screen pixel density, and the presence or absence of a pointing device, among other hardware parameters. Software parameters might include, for instance, the type of browser that is running on the client device and the version of such browser, among other software parameters. Another parameter might include, for example, whether or not the client has a present capability to execute a scripting language such as JavaScript.","The clients  that are expressly depicted in  are representative of a large number of clients , each of which will have a particular set of characteristics. While the clients  are depicted in  as being wirelessly connected with the network , it is understood that other clients  may have other types of connections with the network  such as wired connections or other wireless connections without departing from the disclosed concept.","The server  is depicted in  as comprising a processor  and a memory  and as having a web application  deployed thereon. The memory  is an exemplary machine readable storage medium having stored thereon instructions which comprise the application  and which, when executed on the processor , cause the server  to perform certain operations such as one or more of those that are set forth herein. It is understood, however, that the expression \u201cmachine readable storage medium\u201d could comprise any type of medium, whether or not presently in existence, that is capable of having instructions stored thereon, and would specifically include, for example, CD and DVD storage media, hard disks, memory chips, and the like without limitation.","Specifically, the instructions executed on the processor  generate a runtime, such as a Java runtime or other runtime, within which the application  runs. The exemplary server  is depicted in  as being an individual component connected with the network , but it is understood that the server  is more particularly in the nature of the aforementioned runtime within which the application  runs. The application  can be said to interface with the clients  and vice-versa.","The exemplary application  is schematically depicted as comprising a plurality of pages indicated at the numerals  and , a database , and a database access engine  that are compiled together into an executable form that runs in the runtime afforded by the server . As a general matter, the database access engine  generally is platform-specific, and it interfaces with the database  which generally and advantageously is platform-independent. The database access engine  thus can be said to provide an interface between a particular platform and a more generically-conceived database . More specifically, the database access engine  acts as a mediator between the code for a number of custom tags in a library and the information in the database , exposing the database contents to the library in a form that the library code can more easily understand and access.","It is understood that the pages  and  are exemplary only, and it is also understood that the application  may include numerous additional pages that are not expressly depicted herein. The pages  and  are in the form of files that each comprise a number of components and other data objects that are broadly characterized as being \u201cweb content\u201d, but the expression is not intended to be limiting in any fashion whatsoever. It is also noted that the elements of the exemplary application  depicted in  are not intended to be viewed as being necessary in all formulations of the disclosed concept, and rather are intended to illustrate one example of a system wherein the disclosed concept can be implemented.","The database  can be characterized as being a data arrangement and is described in greater detail in conjunction with . It is noted, however, that the database  comprises large quantities of machine-readable storage elements that correspond with permutations of client parameters. Any given set of the machine readable storage elements that correspond in the database  with a given permutation of client parameters will typically have been selected in view of a number of characteristics of a client  having the given permutations of client parameters. Responsive to one or more client parameters being input to the database , the database  accesses a number of machine-readable storage elements that may be in the nature of data or instructions or both, for instance, which have been selected and stored in the database  in view of the set of characteristics that would be found on a client  having the one or more client parameters. This therefore enables a number of client parameters that have been provided by a client  in making an http request to be input to the database , with the database  responsively providing some type of output that is tailored to the characteristics of the client  since the database  already has built in the correlations between a permutation of client parameters and the corresponding set of device characteristics that would be possessed by a client  having that permutation of client parameters.","The database  can advantageously be created once and implemented on any of a variety of platforms without requiring the machine-readable storage elements to be rewritten or reconstituted for any specific platform. For example, a platform for use in developing a web application (such as on the desktop computer ) is specifically depicted in  and is indicated generally with the numeral . In the example presented herein, the platform  is a Java-based web application framework called JavaServer Faces, and while this particular web application framework will be further described in the example embodiment described herein, it is understood that it is exemplary in nature and is provided for the sake of explanation of the concept rather than being limiting. The example platform  comprises the database access engine  and a library  of components  that, in the exemplary depicted embodiment, are in the form of tags. The components  may be employed, with or without other content, to create the pages  and  for deployment to the server  as part of the application . The database access engine  is depicted in  as being structured to interface with the library  and the database , and in at least some respects the database access engine  functions as an application programming interface (API). However, the database  is depicted as not necessarily being a part of the platform  in order to indicate that the database  is not platform-dependent.","In order to illustrate the portability of the database  from one platform to another, the same database  is depicted in  as being employed by another platform A. The alternate platform A can be used to develop web applications and can be any of a variety of other web application frameworks such as, for instance and without limitation, one entitled \u201cASP .NET\u201d, although this is not intended to be limiting and rather is intended to be merely illustrative of an alternate web application framework. The exemplary platform A includes an database access engine A and a library A of components that can be used in creating pages of web content for deployment on the server  or on another server. The database access engine A is depicted in  as interfacing directly with the database  and the library A, and the database  is depicted as being in the same condition as when it is depicted in , i.e., as interfacing with the database access engine .","As a general matter, the database  can be implemented for use in conjunction with virtually any web application framework by creating a library of components that are usable in creating pages of web content, and by further creating a database access engine that comprises class logic and other content and which, when invoked by a component of a web page being requested, is capable of interfacing with the database . Such interfacing would include, for instance, taking one or more of the parameters of the client  that is requesting the page and determining from the database  what markup language or other instruction or both should be created and provided as a data object in place of such web page component. As such, the database , which represents a large amount of machine-readable storage elements that correspond with various permutations of client parameters, can be created once and implemented on numerous platforms by creating a custom database access engine and library, thus enabling widespread use of the database  without requiring that the database  be recreated or reconstituted for the various platforms.","As mentioned above, the database  comprises a set of machine-readable storage elements for each of a plurality of permutations of client parameters. The exemplary client parameters employed herein comprise the device model of the client, the version of the firmware on the device, the type of browser executed on the device of the client, and the version of the browser. This listing of client parameters is intended to be exemplary only and is not intended to be exclusive or exhaustive. Such client parameters or other parameters or additional parameters in any combination may be obtained or otherwise ascertained by the application  from a header of a request made by a client . That is, when a client  makes a request that is received by the application  on the server , the received request comprises a header which includes the client parameters among other information. As such, a header of a request from a client  can be said to include information indicative of the particular permutation of the client parameters possessed by the client .","Such client parameters in the header are indicative of a number of hardware characteristics or software characteristics or other characteristics in any combination of the client  that possesses the particular permutation of client parameters. One or more of the characteristics may results from one or more parameters, and vice-versa, and thus in some circumstances a \u201cparameter\u201d in a header may in some cases be the same as a \u201ccharacteristic\u201d of a client  but in other cases the two may be different. The database  thus advantageously comprises permutations of client parameters and, corresponding to each permutation of client parameters, a set of machine-readable storage elements that are selected in accordance with a number of hardware characteristics or software characteristics or other characteristics in any combination of a client  possessing the permutation of parameters. The database  may be a relational database or may be in other forms without departing from the present concept.",{"@attributes":{"id":"p-0038","num":"0037"},"figref":["FIG. 4","FIG. 4"],"b":["36","36","36","54","54"]},{"@attributes":{"id":"p-0039","num":"0038"},"figref":["FIG. 4","FIG. 4","FIG. 4"],"b":["56","54","56","16","54","56","56","56","56","56","16","54","54","60","56","56","52"]},"More particularly, it is noted that the library  comprises a number of components , and each component  may invoke one or more classes of logic whenever a page  or  that comprises the component  is requested by a client . As used herein, the expression \u201cclass\u201d and variations thereof shall refer broadly to a set of machine-readable instructions that embody a piece of logic, and such logic can comprise a reusable set of associated properties and can further comprise a set of operations that can be performed on or using such properties. The database access engine  comprises instructions, and each class can access a certain portion of the instructions of the database access engine . Each class of logic of the database access engine  may also access a particular portion of the database . As such, the database  can have numerous portions, such as may be represented as being in the form of various tables, that are variously accessed by the various classes when invoked by the components  on the pages  and . Due to the variability of the logic of each class of the database access engine , the various classes may have different requirements with regard to the particular subject matter that is sought to be obtained from the database  in order to enable the classes to create markup instructions that are tailored to the characteristics of a client  as indicated by the client parameters. That is, upon receipt of a request from a client  for a page  or  of the application , the various components  of the requested page  or  each invoke the various classes that correspond with the components . In the example of the JavaServer Faces (JSF) platform example described herein, each component has at least three classes, including a component class, a renderer class, and a tag class, although other classes or additional classes or both can be deployed without departing from the present concept.","Each class typically has some dedicated logic which may perform various operations, and the operations of the classes invoked by a given component  typically result in the generation of markup instructions, such as html instructions, that are configured to render the component  on the client  in a fashion that is optimized for the characteristics of the client  as were indicated by the client parameters extracted from the header of the request. While in the example presented herein the markup or other instructions are optimized for rendering on the client , it is understood that such optimization may be for virtually any other type of operation on the client . Each class thus may include its own logic or may include its own individual need for information regarding the characteristics of a client  or both, and it may additionally or alternatively require instructions for the particular client  that are obtained from the database  or may provide specialized post-processing of data or instructions for the entire class or both, by way of example. As such, it can be understood that the database  depicted in  is merely representative of the extensive, varied, and detailed contents actually possessed by the database .",{"@attributes":{"id":"p-0042","num":"0041"},"figref":"FIG. 5","b":["48","52","52","64","68","64","28","32","68","64","28","32","68","28","32","36","52","52","52","64","68","52"]},"It is noted that JavaScript or other scripting instructions typically will be provided only if the client  is determined to have a present capability of executing the scripting instructions. That is, it may be determined that a client  does not possess the present capability to execute, for instance, JavaScript, such as by the request header parameters indicating that the client would be incapable of executing JavaScript or indicating that the JavaScript capability of the client  is presently disabled. In such a situation, the invoked classes will generate a resultant data object that typically will consist of markup language, for instance, without the addition of scripting instructions. On the other hand, if the client  possesses a present capability to executed scripting instructions such as JavaScript, these same invoked classes will generate a resultant data object that typically will include both markup language and scripting instructions. Advantageously, therefore, a data object that includes markup alone will function on a suitable client  in a fashion that is functionally identically to or nearly so to the function on a suitable client  of a data object that includes markup together with scripting instructions. The developer of the web application is thus advantageously freed from having to consider factors of client device capabilities because the resultant application and generated data objects function identically or nearly so on all device types, regardless of device capabilities It is noted that the markup language created in the JavaScript enabled situation may be the same as or different from that created in the JavaScript non-enabled situation.","An existing web application framework such as the exemplary JSF described herein may already include a library that comprises at least some of the standard tags  along with a database access engine comprising corresponding classes and their logic. The creation of the library  typically would involve creating the custom tags  along with enhancements to the database access engine to form the database access engine , or creation of an entirely new database access engine to form the database access engine . It is noted that the database  provides significant advantages in portability of the data contained therein, but it is understood that the machine-readable storage elements of the database  could instead be incorporated into the database access engine if needed.","As mentioned above, the library  lists the standard tags  and custom tags  that are employable in creating the pages  and . More specifically,  depicts an exemplary portion of the exemplary page , and  depicts an exemplary portion of the exemplary page . The schematically depicted lines of instruction in  which employ the standard tags  could be said to each comprise an html instruction. However, those lines of instruction in  that employ the custom tags  would be better referred to as an extensible markup language (XML) instruction. When either of the pages  and  is requested by a client , the classes associated with the components  of the requested page  or , i.e., the classes associated with the standard and custom tags  and  of the requested page  or , are invoked and, as set forth above, generate a number of data objects that comprise html or other markup instructions, possibly with the addition of scripting instructions such as in JavaScript. The data objects are assembled together and are forwarded as a data set in the form of a page of web content to the requesting client . The client  then renders the web page on its display in accordance with the received markup instructions with the possible addition of received scripting instructions. Advantageously, therefore, the data set is customized to the capabilities of the requesting client , and this facilitates advantages such as, by way of example only, automatic scaling of bitmap images on the server side to fit the available space on small-screened devices, and automatic inclusion of other types of integration between a web page and the built-in features of a particular device (e.g., add an entry to its contact list, show the location of an address in a mapping application, etc.).","The application  is also advantageously configured to enable further interfacing with the clients  by receiving other requests from the clients , i.e., updating requests that involve communication with the server , to be handled regardless of whether the client  has a present capability to execute instructions in a scripting language, such as JavaScript. By way of example, a data set that is downloaded as a page of web content to a client  typically will include one or more data objects, and each data object typically includes instructions in a markup language. If the client  has a present capability to execute, for instance, JavaScript, one or more of the data objects may additionally comprise some JavaScript instructions in addition to the markup instructions. On the other hand, if the client  lacks a present capability to execute JavaScript, the data set will have been provided with versions of the data objects having markup language alone, i.e., without the addition of JavaScript. This is, as mentioned above, in keeping with the creation of a customized data set in the form of a web page created for a client  that makes a request for a page  or  and that is customized for optimum rendering performance on the client  in view of its client parameters.","In the circumstance where a given data object stored on a client  includes some JavaScript or other scripting instructions, the data object may make an updating request to the server  by transmitting to the server  an XMLhttpRequest, which is a request that does not require a reloading of an entire page, but rather is intended to request that the application  change a state of a variable or make some other change, for example. Such a request is also referred to as an AJAX request. If available, an AJAX request is desirable because it avoids the need to reload an entire page on the client , and it thereby avoids the shortcomings that are typically associated with the reloading of a web page, such as losing partially entered text in text fields of a browser, losing the location and degree of zoom of a portion of a page rendered in a browser, losing locations of vertical or other scroll positions, and the like. It also avoids consuming transmission bandwidth by avoiding a transmission of a page in its entirety.","In the situation where a request is in the form of an XMLhttpRequest, the URL of such an XMLhttpRequest typically will include the identity of a custom servlet of the application , and the request is thus automatically transferred directly to the identified custom servlet. The custom servlet will then perform the same set of class logic as when the requesting component was originally generated by the database access engine , except that it will additionally, for instance, change the state of a variable that is represented by the requesting component of the data set on the client . If the requested change of state is successful, the custom servlet will generate and transmit to the client  response that is representative of \u201csuccess\u201d. Otherwise, it may send a response that is representative of \u201cfailure\u201d or another appropriate communication indicative of the result. In the situation where the returned response is representative of \u201csuccess\u201d, the JavaScript or other scripting instructions of the requesting data object may cause the rendered element to be re-rendered on the client  in such a fashion to represent the changed state of the aforementioned variable. By way of example, the response may be a value such as an integer value, such as an integer value of one for \u201csuccess\u201d and an integer value of zero for \u201cfailure\u201d, although the response could be any type of communication without limitation.","On the other hand, if a data object of a web page stored on a client  needs updating but lacks scripting instructions, the data object will typically be unable to make an XMLhttpRequest and rather will make an http POST request, which is a request for the reloading of an entire page. In such a situation, the receipt of an http POST request, i.e., a page request, results in initiation of an application environment servlet in a runtime, such as in the exemplary JSF environment wherein a FacesServlet is initiated in a Java runtime on the server . Based upon the request header, the exemplary FacesServlet invokes the classes of the data object that made the request, and such classes include logic to cause, for example, a change in state of a variable that is represented by the requesting data object. Additionally, an alternate version of the requesting data object is generated for inclusion in the updated page. The exemplary FacesServlet also retrieves the stored states of the other components of the page and recreates with these stored states the data objects that had previously been created for such components. All of the data objects are assembled into the updated page, which is then transferred to the client  and is rendered thereon. As is generally understood, JSF provides the feature of saving states of web page components, thereby avoiding the necessity of reprocessing of the associated class logic if a given component did not make an http POST request of the application .","The aforementioned XMLhttpRequest and http POST Request are intended to illustrate a request initiated by two different versions of the same data object on two different clients , i.e., one data object on one client  possessing a present capability to execute scripting instructions such as JavaScript, the other data object on the other client  lacking a present capability to execute scripting instructions such as JavaScript. For the client  having the JavaScript capable version of the data object, the XMLhttpRequest requires far less communications bandwidth and far less processing since it requires the transmission to the client of less than an entire page and additionally is processed by a custom servlet that generally at most, for example, changes a state of a variable and communicates a confirmation or other indication of the success or failure of such a processing effort. For the version of the data object that is not JavaScript enabled, the requesting data object must request that the entire page be reloaded via the html POST Request. The receipt of the html POST request on the server  initiates the exemplary FacesServlet which executes the class logic of the requesting data object and retrieves stored states of other data objects to generate an updated page for transmission to the client. The class logic invoked with the FacesServlet also possesses logic to cause, for example, the change of state of the same variable, albeit through slightly different operations.","In either situation, however, the rendered result of the update on any particular client  is substantially the same regardless of whether the client  is JavaScript enabled or not (neglecting for the moment differences among other characteristics of, for instance, the displays of the clients ). That is, the application  is advantageously configured to download to a given client  whichever version of the data object, i.e., the JavaScript enabled version or the JavaScript non-enabled version, is best suited to the client  based upon the client parameters of the header of the original page request. The data object downloaded to and stored on the client  then makes either an XMLhttpRequest or an html POST Request depending upon whether the data object is the JavaScript enabled version or the JavaScript non-enabled version, respectively. For the JavaScript enabled version of the data object, the application  changes a state of a variable represented by the data object, for example, and sends to the client  a confirmation of the change in state, thereby causing the data object to re-render itself to indicate the change in state of the variable. On the other hand, if the JavaScript non-enabled version of the data object makes its http POST Request, the JSF lifecycle is initiated and executed on the server  and creates an updated version of the page which is downloaded to the client  and rendered thereon. The client logic invoked by the JSF lifecycle changes the state of the same variable, for instance, and generates a replacement data object reflective of the change in state for inclusion in the updated version of the page.","As such, the application  enables an initial request for a page from a client  to result in the rendering of web content on the client  in a substantially consistent fashion regardless of whether the requesting client  is JavaScript enabled or is JavaScript non-enabled, and the application  achieves the same kind of consistent rendered result in the situation of an updating request from either type of client. It is expressly noted, however, that such similarity may be unavailable in cases where a client  is limited in its rendering capabilities, such as if it is capable of providing text in a single font and color rather than in multiple fonts and colors, by way of example.",{"@attributes":{"id":"p-0053","num":"0052"},"figref":"FIG. 8","b":["12","16","104","24","12","108"]},"Thereafter, the application analyzes the header of the request to identify one or more client parameters, as at . The identity of the requested web page typically will be included in the URL of the request, and this information is employed to retrieve, as at , the requested web page, which is typically in the form of a data file and comprises a number of components. Thereafter, the one or more classes that are associated with each component of the retrieved page are invoked, as at . If the logic of an invoked class determines, as at , that input is required from the database , processing is transferred to  where the class logic associated by the component employs one or more of the client parameter in interfacing with the database  to generate a set of markup instructions. In so doing, the class logic may employ the one or more client parameters to retrieve one or more corresponding machine-readable storage elements from the database . The class logic may additionally generate some scripting instructions, such as JavaScript, if it is determined that the requesting client  is capable of executing such scripting language. The class logic, which is embodied in the database access engine , will then generate a data object that comprises the markup instructions and, as appropriate, any scripting instructions. The data object is added to a data set, as at .","On the other hand, if it is determined, as at , that the component being processed does not require input from the database , such as if it is determined that the component employs a standard tag , processing continues at  where the class logic generates static markup instructions, whether or not additionally including scripting instructions, and a data object is generated therefrom. Such data object is similarly added to the data set, as at .","It is then determined, as at , whether all components of the retrieved page have been processed. If not, processing continues, as at , wherein another component is processed by invoking its associated classes. Otherwise, such as if it is determined at  that all of the components of the retrieved page have been processed, the assembled data set is sent to the client, as at , for rendering on the client. It is noted that additional processing such as post-processing may be performed during the operations depicted generally in .","Other aspects of the disclosed concept are indicated in flowchart depicted generally in . An input is detected by a client , as at , with respect to a data object of a data set that is in the form of a web page stored on and rendered on the client . Such an input typically will be an action performed by a user of the client , such as a double clicking on a page component, a movement of a mouse cursor onto a page component, or a typing of some text into a page component, although these are intended to be non-limiting examples. The client  thereafter generates, as at , a request from the requesting data object in the form of an AJAX Request, i.e., an XMLhttpRequest, or a page request, i.e., and html POST Request. The request is then received, as at , by the server . The application  on the server  then takes one of two courses of action depending upon whether the request was an AJAX request or a page request.","An AJAX request is transferred, as at , to a custom servlet such as would be designated in the URL of the AJAX request. The custom servlet would then change, for example, and as at , a state of a variable that is represented by the requesting data object. The application  would then forward to the client  a response that is representative of \u201csuccess\u201d, as at . For the sake of completeness, it is noted that if the custom servlet is unsuccessful in changing the state of the variable, a different type of response will be returned to the client . The client  then employs, as at , scripting instructions such as JavaScript already existent in the data object on the client  to re-render the requesting data object, for example, or take other action.","On the other hand, a page request initiates, as at , the application environment servlet which, in the present example, is a FacesServlet running in a Java runtime. As at , the exemplary FacesServlet then would retrieve the web page that comprises the requesting data object, would invoke the classes of the requesting data object to change a state of the variable represented by the data object, for example, and would generate an alternate version of the data object for inclusion in a new version of the requested page. Processing thereafter continues, as at , where the exemplary FacesServlet retrieves the stored states of any non-requesting components of the requested page and recreates the data objects that had previously been transmitted as part of the original data set to the client . All of the data objects are assembled into a new version of the data set, as at , that is forwarded to the client  in the form of a new page. The client then renders, as at , the new page.","The concept presented herein thus advantageously provides a database  that can be employed on numerous platforms without recreating the contents of the database . The database  can be extensive and can be interfaced by class logic having a rich content. The library  of standard tags  and custom tags and  can be advantageously employed to create a single version of each page  or  having by way of its custom tags  an ability to dynamically generate markup instructions, whether or not additionally including JavaScript or other scripting instructions, that are configured for optimum processing on the requesting client  based upon the detected parameters of the client . The concept also advantageously enables an updating operation to occur which provides substantially the same rendered result on a client  regardless of whether the client  is Java enabled or is Java non-enabled, it being reiterated that the rendering capabilities of any given client  may be otherwise limited in terms of color, font size, font content, and the like.","While specific embodiments of the disclosed concept have been described in detail, it will be appreciated by those skilled in the art that various modifications and alternatives to those details can be developed in light of the overall teachings of the disclosure. Accordingly, the particular arrangements disclosed are meant to be illustrative only and not limiting as to the scope of the disclosed concept which is to be given the full breadth of the claims appended and any and all equivalents thereof."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["A full understanding of the disclosed concept can be obtained from the following Description when read in conjunction with the accompanying drawings in which:",{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 9"}]},"DETDESC":[{},{}]}
