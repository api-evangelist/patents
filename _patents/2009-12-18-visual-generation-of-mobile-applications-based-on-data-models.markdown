---
title: Visual generation of mobile applications based on data models
abstract: Systems, methods and computer program products for mobile device application design are described herein. The method accesses a data model corresponding to a selected mobile platform. The data model is used by a device application designer to generate, model, and debug a mobile application. The data model is used to take into consideration characteristics of the selected platform and a selected mobile device as the application is designed. The application is structured and generated for a selected platform that is independent of the data model, but is cognizant of the selected platform. A simulator models the application user interface (UI) as it will appear on the selected platform. The method performs platform-specific validation and allows for correction of various aspects of a generated application including platform-specific features. The tool generates a graphical image that can guide a developer to either generated code or help files corresponding to framework libraries.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09336023&OS=09336023&RS=09336023
owner: SYBASE, INC.
number: 09336023
owner_city: Dublin
owner_country: US
publication_date: 20091218
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","BRIEF SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION","APPENDIX","CONCLUSION"],"p":["The present invention is generally related to mobile applications, and more specifically to tools for developing applications for mobile platforms.","Mobile devices with the ability to run software applications continue to become prevalent in the field. Due to differences between mobile device hardware and operating systems, many mobile applications must be tailored to and customized for specific types of mobile devices. Thus, multiple versions of mobile applications must be developed to run on disparate mobile operating platforms, operating systems, and mobile devices. Mobile applications must be designed and developed in light of mobile device hardware capabilities, enterprise software, wireless network capabilities, and the target mobile device platform. Mobile application development represents a rapidly growing business segment.","Due to the broad range of mobile device capabilities and characteristics, mobile application development often entails designing, developing, and debugging software code using platform-specific development environments and tools for each specific device type. There are many flaws with this approach. For example, using this approach, it is difficult, if not impossible, to readily visualize and debug applications to ensure consistency of mobile applications across different mobile device platforms. As a result, it is difficult to efficiently test and debug mobile applications to be deployed to multiple mobile platforms.","This approach also does not afford efficient platform-neutral code generation. As a result, mobile application development costs increase and software releases are delayed.","Accordingly, what is needed is an improved platform-neutral approach for developing and debugging mobile applications for a multiple platforms.","The present invention is directed to systems, methods and computer program products for developing device applications. A device application is a software application that runs on a mobile device. Briefly stated, according to an embodiment, a developer can create device applications using a device application designer tool. In an alternative embodiment, a developer can use an application programming interface (API) framework to develop device applications. In an embodiment, a data model corresponding to a selected mobile platform and device is accessed to enable visual device application design so that device application code corresponding to a selected platform and device is generated. In an embodiment, the device application designer tool is accessed via an interactive user interface in order to simulate or model the operation of generated device applications for testing and debugging purposes.","The systems, methods, and computer program products are used to develop mobile applications for a plurality of diverse mobile devices running a plurality of operating systems. In an embodiment, the device application designer tool takes into consideration characteristics of the diverse mobile devices and platforms and generates applications for a plurality of device types independent of the data model but cognizant of the device and appropriately structuring the application. The mobile applications that are built using the data model are provisioned on to the devices in a secure way across various devices.","Further features and advantages of the present invention, as well as the structure and operation of various embodiments thereof, are described in detail below with reference to the accompanying drawings. It is noted that the invention is not limited to the specific embodiments described herein. Such embodiments are presented herein for illustrative purposes only. Additional embodiments will be apparent to persons skilled in the relevant art(s) based on the teachings contained herein.","The features and advantages of the present invention will become more apparent from the detailed description set forth below when taken in conjunction with the drawings. In the drawings, like reference numbers generally indicate identical, functionally similar, and\/or structurally similar elements. Generally, the drawing in which an element first appears is indicated by the leftmost digit(s) in the corresponding reference number.","Overview of the Invention","The present invention is directed to embodiments for visual development of mobile applications. A mobile application is any application that can run on a mobile device, including those presently known and those developed in the future. A mobile device may be one of many devices, such as, but not limited to, personal digital assistants (\u201cPDAs\u201d), IPHONEs, IPOD touch devices, devices operating according to the Microsoft Pocket PC specification with the MICROSOFT Windows CE operating system (OS), devices running the MICROSOFT Windows Mobile Standard OS, devices running the MICROSOFT Windows Mobile Professional OS, devices running the Android OS, devices running the Symbian OS, devices running the PALM OS, mobile phones, BLACKBERRY devices, smart phones, hand held computers, palmtop computers, laptop computers, ultra-mobile PCs, and other wireless mobile devices capable of running mobile applications.","As used herein, an application is any software program or web service that can be executed or run on a server, computer, or mobile client device. An application includes at least a rendering component, execution logic, and Input\/Output (I\/O) parameters. An application's execution logic may be in the form of binary executable code or scripting programming\/markup languages such as WinMobile C#, Objective-C, Java, JavaScript, HyperText Markup Language (HTML), Extensible HTML (XHTML), or AJAX (Asynchronous JavaScript and XML). One of skill in the relevant arts will appreciate that other programming languages and technologies can be used for an application's execution logic.","Unless specifically stated differently, a developer is interchangeably used herein to identify a human user, a software agent, or a group of users and\/or software agents. Besides a human developer who needs to design and debug mobile applications, a software application or agent sometimes generates and validates mobile applications. Accordingly, unless specifically stated, the term \u201cdeveloper\u201d as used herein does not necessarily pertain or refer to a human being.","In one embodiment, the device application designer tool employs a code generation pattern for building platform-specific applications based on a data model corresponding to a selected target platform. The data model represents operational characteristics of a mobile platform, pre-defined application screens for the platform, mobile devices supported by the platform; and default input controls for mobile devices supported by the selected platform. In an embodiment, respective data models for a plurality of mobile device platforms are defined as a respective plurality of extensible markup language (XML) files. For example, a data model corresponding to the data model for the BLACKBERRY\/Research in Motion (RIM) platform can include XML code indicating, operational characteristics of the BLACKBERRY\/RIM platform, pre-defined application screens for the BLACKBERRY\/RIM platform, specific BLACKBERRY devices supported by the BLACKBERRY\/RIM; and default input controls for each of the BLACKBERRY devices supported by the BLACKBERRY\/RIM platform.","In an exemplary embodiment, if a BLACKBERRY\/RIM platform is selected, the device application designer tool generates RIM-specific Java code for a BLACKBERRY device. In an alternative embodiment, if a Windows Mobile operating system is selected as the platform, WinMobile C# code is generated by the tool for smart phones and mobile devices running a Windows Mobile operating system (OS). In another embodiment, if an IPHONE platform is selected, Objective-C code is generated for applications running in an IPHONE OS developed by Apple Inc. for an IPHONE or IPOD touch mobile device.","As some mobile applications may not be completely implemented using the device application designer tool, the tool includes an interface that enables developers to modify generated code. For example, the tool may include a source code editing interface enabling a developer to insert additional code into the generated code in order to implement additional logic.","In an embodiment, the device application designer tool is part of the SYBASE Unwired Platform (SUP), formerly the Unwired Enterprise Platform (UEP). The UEP is described in greater detail in U.S. patent application Ser. No. 11\/882,749, entitled \u201cUnwired Enterprise Platform,\u201d filed Aug. 3, 2007, which is herein incorporated by reference in its entirety.","The invention enables a developer to visualize and test applications developed for multiple devices and platforms before they are deployed to and installed on the actual mobile devices. Mobile devices  may be any existing or future mobile device, and may be operating from any location.","Systems for Visual Generation of Mobile Applications","In the exemplary mobile application design systems  and  depicted in , a mobile application which has been designed and generated using device application designer  for platform  is deployed to mobile device .",{"@attributes":{"id":"p-0029","num":"0028"},"figref":["FIG. 1","FIG. 2"],"b":["100","160","164","100","124","114","116","118","128","130","124","122","124","124","114","116","118","128","130","122"]},"Although a single mobile device  is depicted in systems  and , it is understood that device application designer  can be used to design, generate, and test applications for a plurality of disparate mobile devices  and platforms .","In an embodiment, device application designer  is configured to access a plurality of data models corresponding to mobile devices  and platforms . In another embodiment, platform plug-ins indicating platform-specific properties for platforms  are accessed from data store . These platform plug-ins contribute platform-specific properties to the mobile application  and the mobile application  screen controls and stock screens. In other embodiments, stock images, stock screens, stock styles, and system variables for platforms  and mobile devices  are stored in data store  for use by device application designer . In one embodiment system styles corresponding to platforms  are also stored in data store  so that the pre-defined styles are available to designers.","In an embodiment, generation wizard  is a multi-page wizard, which allows a developer to select a platform  and a target mobile device . The selection of a platform  and a mobile device  causes the generation wizard  to map the current selected device  to the correct UI simulator  and device modeler . This mapping is described below with reference to . In one embodiment, the first page of generation wizard  allows a developer to pick the platform  to generate mobile application code  for mobile application . According to an embodiment, a default platform is mapped based upon the mobile device  picked in a screen design interface. An exemplary screen design user interface (UI) is described below with reference to . Other details of generation wizard  are described below with reference to .","Mobile application  comprising mobile application code  is deployed to mobile devices  via connectivity to multiple diverse and disparate wired and wireless networks, including but not limited to WiFi, 2G\/2.5G, WiMAX, Wired, and 3G. Other wired and wireless mediums will be apparent to persons skilled in the relevant art(s), and fall within the scope of the present invention.","As illustrated in , mobile device  may comprise a local data store . In an embodiment, mobile application  comprising mobile application code  is deployed to device  is stored in local data store .","As depicted in , mobile device  may further comprise a display  and an input device . According to embodiments of the present invention, input device  can be, but is not limited to, for example, a touch screen, a keyboard, a pointing device, a track ball, a touch pad, a joy stick, a voice activated control system, or other input devices used to provide interaction between a user and mobile device application . Input device  can be used by a user of mobile device  to launch newly-deployed and installed mobile applications .","Additionally, existing mobile applications  that have previously been deployed to mobile device  can be executed and displayed on display .","Accordingly, mobile applications  operate on mobile devices with varying levels of hardware and platform capabilities and in a heterogeneous network environment with varying degrees of reliability, bandwidth, latency, connectivity, etc. According to embodiments of the invention, device application designer  takes into consideration the characteristics of the diverse mobile devices  and their respective platforms . Features of generation wizard , debugger , UI simulator , and device modeler  are described below with reference to .","The device application designer  allows applications for a variety of devices  and platforms  to be visually designed, debugged, and modified in a single tool. By doing so, the device application designer  provides a single context hides the complexities of implementing mobile applications  across an increasing range of mobile devices  and platforms .","Mobile Application Generation Methods",{"@attributes":{"id":"p-0039","num":"0038"},"figref":"FIG. 3","b":"300"},"More particularly, flowchart  illustrates the steps by which an application is designed and developed for a selected mobile platform and device, according to an embodiment of the present invention.",{"@attributes":{"id":"p-0041","num":"0040"},"figref":["FIG. 3","FIGS. 1 and 2","FIG. 3"]},"The method begins at step  when a device application designer tool is invoked. In an embodiment, device application designer  depicted in  is accessed by a developer in step . According to an embodiment of the invention, the device application designer tool makes automatic entries in some data fields in the generation wizard , such as a parent folder for generation wizard . In one embodiment, the parent folder is a directory within data store  under which generated mobile device application code  associated with a mobile application  is saved.","After the tool is invoked, a user interface for the device application designer is launched and method proceeds to step .","In step , selections of mobile application  screen creation preferences are received from a preferences interface. In this step, a file name for the mobile application can be entered. In step , a developer can link the mobile application code  being generated to one or more files in data store . In this step, a platform  for which the mobile application  is being created is selected. These selections determine which application features are available to be generated in subsequent steps in the method illustrated in flowchart . In an embodiment, the selection of a platform  causes device application designer  to access a data model associated with the platform. In an embodiment, the data model is accessed from data store . The default device  is set based upon the selected . Once the selections of the target platform  and screen creation preferences are made, the method proceeds to step .","In step , a flow design interface in the device application designer is used to create a flow design for custom and pre-defined mobile application screens. An exemplary flow design interface is described below with reference to . In an embodiment, a flow design is selected, which allows selection of a mobile application screen from a set or \u2018palette\u2019 of pre-defined screens in a menu. The pre-defined screens presented in the menu are based upon the data model accessed in step . The flow design can be visually generated in this step. For example, pre-defined screens can be dragged and dropped from the palette onto a flow design \u2018canvas\u2019 within device application designer . In step , additional screens can be added to mobile device application , as needed. In this step, connections between the screens can also be selected. In step , in a UI in device application designer , a developer can add controls and actions to the screens of mobile application . In an embodiment, a flow design UI of device application designer  is used in this step to create a flow design for custom mobile application  screens. In step , the flow design UI can also be used to add and connect screens, as well as customized stock screens. Once the initial flow design of mobile application  is complete, the method proceeds to step .","In step , additional connections are created between screens within mobile application . In one embodiment, in a flow design page within device application designer , a selection of a connection type from a set or palette of connection types is made. In this step, a developer can, using an input device, select a source screen and drag to connect it to a target screen. In an embodiment, this step can be performed using an interactive interface which allows a designer to hide details of connections to other screens within the flow design by collapsing screens to icons and expand the screen views to show both the screens and any connections to other screens. Connections between screens created in step  will not work until they are used in an action attached to a menu, button, or until another control is selected. The selection of controls occurs is described below with reference to step . In an embodiment, a UI displays a connection line between screens that are connected in this step. Once the additional connections are created, the method proceeds to step .","In step  a mobile device  is selected. The properties of display  of the selected mobile device  are used to format a screen designer UI specifically for the selected mobile device . In an embodiment, once a mobile device  is selected, an empty canvas is displayed in a screen design UI, wherein the empty canvas is formatted for the selected device . According to one embodiment, a mobile device  is selected from a drop-down list. In this step, if a specific mobile device, an orientation icon is activated so a developer can select the orientation for the selected device . For example, if a BLACKBERRY STORM\u2122 is selected, horizontal and vertical orientations are available in the canvas. If a specific mobile device  is not selected in step , the default device set in step  is used, but the default device screen is displayed as a much larger canvas in the screen design UI. This makes it easier to add additional controls to screens that have containers that occupy most of the screen design UI display. Once the mobile device  is selected, the method proceeds to step .","In step , controls and their corresponding control events are added to the application screens added in step . In an embodiment, a screen design palette is used to add controls to mobile device application screens. In this step, a menu, button, or other controls for the connections between screens are selected. A properties page for can be used to configure the controls added in this step. In an embodiment, the types of controls available in the screen design palette varies depending the platform  and device  selected in steps  and , respectively. For example, if the selected device  is an IPHONE or IPOD touch device, a \u2018wheel\u2019 control is available for selection. Similarly if the selected platform  and device  supports a touch screen UI, touch screen controls can be selected in step . In an embodiment of the invention, control events are selected for one or more of the controls added in this step. Control events, or event hooks include, but are not limited to, those shown in Table 1.",{"@attributes":{"id":"p-0049","num":"0048"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"center"}},"thead":{"row":{"entry":"TABLE 1"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Control Events for Controls Applied to a Mobile Device Application"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Event Name","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["onLoad","Event is called in response to loading the control is loaded. For"]},{"entry":[{},"example in, in an email\/PIM mobile application, an inbox button"]},{"entry":[{},"may be edited to show the button as an envelope icon with a"]},{"entry":[{},"number indicating the number of unread mail before the button"]},{"entry":[{},"is displayed"]},{"entry":["onClick","Event is called in response to detecting that a control has been"]},{"entry":[{},"acted upon. This may be used for showing tool tip (i.e.,"]},{"entry":[{},"interactive, context-aware help), or expanding a table cell\/row to"]},{"entry":[{},"show additional information for the cell\/row (i.e., to show"]},{"entry":[{},"additional contact information when a user navigates to a contact"]},{"entry":[{},"record in an address book)."]},{"entry":["onValueChange","Event is called in response to detected a value change of an input"]},{"entry":[{},"control. This could be handy for linked parameters in that the"]},{"entry":[{},"values of a control change based on the selected value of another"]},{"entry":[{},"control."]},{"entry":["onSelectionChange","Event called when a selection of a table or list detail is detected."]},{"entry":[{},"This event can be used for enabling or disabling menu items,"]},{"entry":[{},"activating phone actions, etc."]},{"entry":["onOrientationChange","Event code is called in response to detecting an orientation"]},{"entry":[{},"change of the mobile device (i.e., landscape versus portrait,"]},{"entry":[{},"horizontal versus vertical). May trigger a redraw of the mobile"]},{"entry":[{},"application screen\/UI."]},{"entry":["onDraw","Event called when the control or container is called to paint the"]},{"entry":[{},"object."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"In an embodiment, control events can be supported in two different levels. For the first level, an \u201cEvents\u201d property page may be displayed which allows developers to provide the location and method name of any platform-specific source for the control events for specific platforms  for each control added in step . During the code generation described below with reference to step , the provided source can be linked into a device client corresponding to the mobile device  selected in step . According to an embodiment, a second level, event scripting, abstracts controls and persistence layers into JavaScript objects. In this way, JavaScript can be generated for manipulating controls and data on a display  of mobile device . The JavaScript can be converted into mobile application code  when the client for device  is generated. For example, when an IPHONE client is generated, the script may be converted into Objective-C code. In this way, the same JavaScript can work on multiple platforms . After controls are added and their corresponding control events (i.e., event hooks) are selected, the method proceeds to step .","In step , the design of the mobile device application  to be generated is verified. In an embodiment, platform specific problem checking is performed in this step based upon the platform  selected in step . For example, if a RIM\/BLACKBERRY platform has been selected, step  will perform personal information manager (PIM)-type checks on the PIM actions that are supported by the RIM\/BLACKBERRY platform. The validation in this step may result in detection of configuration problems with platform-specific actions. In an embodiment, developers can also contribute or add problem checks for a given platform  by returning implemented problems in the platform's getPlatformProblems( ) method. In this way, any new problem checks for a platform  can be added into the device application designer . These problems will automatically be added into the preferences system for platform problems so that the severity of the problem can be configured. In one embodiment, depicted in the code sample below, problems can only be added for checking and the actions performed by content assist are not extensible. The problems detected in step  are automatically placed under the platform name corresponding to platform  in the problems preferences for setting default values.","The following code is an embodiment for adding problem checks for a platform. In this embodiment (from a device application design tool entitled \u2018Bob\u2019), a problem can be added for actions including editing or removing. As would be appreciated by one of skill in the relevant arts, other programming languages and technologies can be used to implement the problem checking in the programming language code sample below.",{"@attributes":{"id":"p-0053","num":"0052"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\/**"},{"entry":"\u2009* Platforms can add problem checks. These problems will automatically"},{"entry":"be added"},{"entry":"\u2009* into the preferences system for platform problems for configuration"},{"entry":"of the severity."},{"entry":"\u2009*"},{"entry":"\u2009* NOTE: problems can only be added for checking, the actions performed"},{"entry":"by content assist"},{"entry":"\u2009* are not extensible. However, in most cases this is not necessary."},{"entry":"\u2009*"},{"entry":"\u2009* For extensible objects like actions, If the problem is for your"},{"entry":"action,"},{"entry":"\u2009* you would assign the problem to the check type for a"},{"entry":"\u201cCHECK_TYPE_MENUITEM_PLATFORM_ACTION\u201d or"},{"entry":"\u2009* \u201cCHECK_TYPE_PLATFORM_ACTION\u201d (widgets). This will give"},{"entry":"\u2009the content"},{"entry":"assist for edit, remove the action."},{"entry":"\u2009* On edit, the action is opened with the problem check type and should"},{"entry":"fix the problem."},{"entry":"\u2009*"},{"entry":"\u2009*\/"},{"entry":"public interface IBobProblem"},{"entry":"{"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/**"]},{"entry":[{},"\u2009* Get the id to use for this marker. This is used as the key for"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"the preference."}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2009* @return"]},{"entry":[{},"\u2009*\/"]},{"entry":[{},"public String getId( );"]},{"entry":[{},"\/**"]},{"entry":[{},"\u2009* Get the type of marker this should be added in to for checking."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"This is one of the"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\u2009* marker types defined in IBobMarkerConstants. i.e."]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"FLOW_DESIGN_PROBLEM, SCREEN_DESIGN_PROBLEM, etc."}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2009* @return marker type"]},{"entry":[{},"\u2009* @see IBobMarkerConstants"]},{"entry":[{},"\u2009*\/"]},{"entry":[{},"public String getMarkerType( );"]},{"entry":[{},"\/**"]},{"entry":[{},"\u2009* Get the message to display without arguments. This is used in the"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"preference settings"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\u2009* so the user can figure out what severity to set. This would be"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"the resource, string without"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2009* message format, i.e."]},{"entry":[{},"\u2009* com.sybase.uep.bob.flowdesignmarker.screen=Screen {0} is not"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"valid."}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2009* The id would be: com.sybase.uep.bob.flowdesignmarker.screen"]},{"entry":[{},"\u2009* The message would be: Screen {0} is not valid."]},{"entry":[{},"\u2009*"]},{"entry":[{},"\u2009* @return"]},{"entry":[{},"\u2009*\/"]},{"entry":[{},"public String getMessage( );"]},{"entry":[{},"\/**"]},{"entry":[{},"\u2009* Get the default severity assigned for this problem id. This will"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"be used with the preference"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2009* system to assign defaults."]},{"entry":[{},"\u2009* @return"]},{"entry":[{},"\u2009*\/"]},{"entry":[{},"public int getDefaultSeverity( );"]},{"entry":[{},"\/**"]},{"entry":[{},"\u2009* Check the bob document using the given checker (checker assigned"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"will be type returned from"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\u2009* getMarkerType( )). The problem should be added into the checker"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"via the reportCheckResult( )"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2009* @param checker checker to use."]},{"entry":[{},"\u2009* @param bob editor"]},{"entry":[{},"\u2009* @see getMarkerType( )"]},{"entry":[{},"\u2009* @see BaseBobChecker.reportCheckResult( )"]},{"entry":[{},"\u2009*\/"]},{"entry":[{},"public void checkProblem(BaseBobChecker checker, BobEditor bob);"]},{"entry":[{},"\/**"]},{"entry":[{},"\u2009* Check the bob document using the given checker (checker assigned"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"will be type returned from"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\u2009* getMarkerType( )). The problem should be added into the checker"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"via the reportCheckResult( )"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2009* @param checker"]},{"entry":[{},"\u2009* @param bob"]},{"entry":[{},"\u2009* @param localePath locale to check if the problem is extending the"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"locale checker."}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2009* @see getMarkerType( )"]},{"entry":[{},"\u2009* @see BaseBobChecker.reportCheckResult( )"]},{"entry":[{},"\u2009*\/"]},{"entry":[{},"public void checkProblem (BaseBobChecker checker, BobEditor bob,"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"IPath localePath);"},{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"In an embodiment, a modeling tool is used in step  to provide platform and device specific validation and allows for correction of various aspects of the mobile application code , including device specific features, and errors in connections between screens created in step . After the design is validated, control is passed to step .","In step , an evaluation is made regarding whether there are errors in the mobile device application  to be generated. This step is performed by verifying the mobile application code  associated with the mobile device application  to be generated. If it is determined that there are no errors, control is passed to step  where the mobile device application  is generated. If it is determined that there are errors in the mobile device application, control is passed to step  where the application is debugged.","In step , a mobile device application  is generated. In an embodiment, in this step, generation wizard  generates mobile application code  based upon the selections made in steps -. For example a multi-page generation wizard  may be invoked to generate mobile device application . The first page of generation wizard  may allow the developer to pick the platform  to generate the application for. If no selection is made in the wizard, a default platform  will be mapped based upon the device  picked in step . In this step, a locale may also be selected in the wizard. The locale section contains the locales defined for the selected platform  and device . The locale section of generation wizard  is disabled if localization capability is not supported by the selected platform . Another section of generation wizard  contains areas of checking that are generic to all platforms . When a platform  is selected the next button will bring up that platform's specific generation wizard  page(s). After completion of the generation wizard  pages, mobile device application  is generated and control passes to step .","In step , a \u2018mind map\u2019 of mobile device application  is generated so that a developer can readily navigate to different pieces of mobile application code  where errors were detected in step . In an embodiment, in this step, functional components of mobile device application  are depicted as an interactive mind map so that a developer can select one or more functional components in order to inspect the underlying source code and help files. In the mind map generated in step , functional components of mobile device application  are linked to corresponding mobile application code . The mind map can be used in conjunction with a debugger in step  to link to portions of generated mobile application code  that needs to be fixed. Step  is described in greater detail below with reference to . After the mind map is generated and displayed, control is passed to step .","In step , a debugger is invoked to fix and test errors detected during step . In an embodiment, debugging is performed in a platform neutral way by using an agent based approach to integrate platform simulators with debugger  in device application designer . In an embodiment, platform simulators comprise a UI simulator  and device modeler  corresponding to the selected device  and platform . In an embodiment, the debugging of the mobile application code  is performed by debugger  in conjunction with a simulator configured to simulate the behavior of the combination of the selected device  and platform . However, as an agent is used by the platform simulator, the debugging performed in this step is independent of the device type being debugged because of the abstraction between debugger  and the simulator. The debugging performed by debugger  is described in greater detail below with reference to . After the mobile application code  is debugged and errors are fixed, control is passed to step  where the mobile application  is generated.","In step , the generated mobile device application  is ready to be deployed to a mobile device . In step , the developer may identify additional software components that are required on device  to properly execute the generated mobile device application . For example, the developer may identify an operating system upgrade, patch, library, plug-in, etc., that is required to be installed on device  so that the application  will properly execute on the device . The listing or identity of such required components is considered to be metadata associated with the application designed and developed in steps -. In step , such metadata may be stored in data store  so that it can be deployed with the application . In an embodiment, the developer provides the metadata to an administrator who stores the metadata in a metadata repository within data store . In one embodiment step  is performed at some later time, when device  that is connected to a network and requests that the application  be installed. Once the application  is deployed and installed, the process ends.","Friendly Code Generation with Inspection and Assistance","This section describes embodiments of the invention for a tool to generate and graphical image that can guide the developer to either the code generated or the help files corresponding to the framework libraries that are leveraged by the device application designer to generate the application. In an embodiment, the tool generates and displays an interactive visual representation, or \u2018mind map\u2019, that enables developers to navigate to generated code and\/or help documents corresponding to various aspects of a mobile application previously generated by the device application designer.","In an embodiment, device application designer  employs a code generation pattern for building device-specific applications  based on a selected target device . As many of the applications  are not completely implemented using the visual design process  described above, the generated code often needs to be modified so that code can be inserted to implement additional logic or to fix errors in an application . Due to the large amounts of code that is generated, it is difficult for a developer to parse through all the mobile application code  to determine how the mobile device application  modeled in the device application designer  matches up with particular subsets of code so that code can be modified at correct place (i.e., in the correct functional component) without causing side effects.",{"@attributes":{"id":"p-0062","num":"0061"},"figref":["FIG. 4","FIG. 4","FIGS. 1-3","FIG. 4"],"b":["410","126","410","322","300","410","100","200","168","126","410","168"]},"In the example mind map  depicted in , the mobile device application  being analyzed is sales application . Using an input device similar to input device  described above with reference to , a developer can select the About Screen component  to link to the code sample provided below.",{"@attributes":{"id":"p-0064","num":"0063"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/Define and register the screen"]},{"entry":[{},"screen4 = newAboutScreen(\u201cAbout\u201d);"]},{"entry":[{},"SCREEN_REGISTRY.put(\u201cscreen4\u201d, screen4);"]},{"entry":[{},"SETTING_SCREEN_REGISTRY.put(\u201cscreen4\u201d, screen4);"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"By selecting the top-level Sales MBO component , mind map  links to the generated mobile business office (MBO) code for sales application .","More particularly, by selecting a specific MBO such as Customer MBO , Sales MBO , or Sales Order MBO , mind map  navigates to Java documents or code for the selected MBO. For example, by selecting Customer MBO , a developer can link to the code sample provided below.",{"@attributes":{"id":"p-0067","num":"0066"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\/\/MBO: Customers"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"addMobileApplication(\u201c1\u201d, \u201cCustomers\u201d, \u201c1\u201d, \u201c\u201d, \u201cSales:1.0\u201d);"]},{"entry":[{},"addInitialSyncParameter(\u201c1\u201d, \u201cstate\u201d, \u201c\u201d, \u201cSTRING\u201d);"]},{"entry":[{},"addMBOAttribute(\u201c1\u201d, \u201cid\u201d, \u201cid\u201d, \u201cINT\u201d, null);"]},{"entry":[{},"addMBOAttribute(\u201c1\u201d, \u201cfname\u201d, \u201cfname\u201d, \u201cSTRING\u201d, null);"]},{"entry":[{},"addMBOAttribute(\u201c1\u201d, \u201clname\u201d, \u201clname\u201d, \u201cSTRING\u201d, null);"]},{"entry":[{},"addMBOAttribute(\u201c1\u201d, \u201caddress\u201d, \u201caddress\u201d, \u201cSTRING\u201d, null);"]},{"entry":[{},"addMBOAttribute(\u201c1\u201d, \u201ccity\u201d, \u201ccity\u201d, \u201cSTRING\u201d, null);"]},{"entry":[{},"addMBOAttribute(\u201c1\u201d, \u201cstate\u201d, \u201cstate\u201d, \u201cSTRING\u201d, null);"]},{"entry":[{},"addMBOAttribute(\u201c1\u201d, \u201czip\u201d, \u201czip\u201d, \u201cSTRING\u201d, null);"]},{"entry":[{},"addMBOAttribute(\u201c1\u201d, \u201cphone\u201d, \u201cphone\u201d, \u201cSTRING\u201d,"]},{"entry":[{},"newLogicalType("]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\u201cphone\u201d));"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"addMBOAttribute(\u201c1\u201d, \u201ccompany name\u201d, \u201ccompany name\u201d,"]},{"entry":[{},"\u201cSTRING\u201d,"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"null);"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"Selecting UI Frameworks  takes a developer to Java documents for the user interface frameworks.","In an embodiment, an interactive mind map  is generated by device application designer  for all platforms  supported by systems  and , including, but not limited to, Windows Mobile, the IPHONE OS, RIM, the Android mobile operating system, and other platforms .",{"@attributes":{"id":"p-0070","num":"0069"},"figref":["FIG. 5","FIG. 5","FIGS. 1-3","FIG. 5","FIG. 5","FIG. 5","FIG. 5"],"b":["500","168","322","300","116","126","510","124","512","512","168","518","118","128","164","514","164","304","300","168","514","516","168","514","168","160","160","164","516","514","168","160","310","300","164","304","310","160","514","262","264"]},"As shown in the embodiment depicted in , Android simulator  comprising agent  can be used for debugging when the Android OS platform  has been selected as the target platform  for application . Similarly, in another embodiment, IPHONE simulator  comprising agent  can be used to debug applications  when the IPHONE OS platform  was selected in step  in the method depicted in flowchart . In the example embodiment depicted in , only three platform simulators, , , and  are depicted for three exemplary platforms  (e.g., RIM\u2032 Android, and IPHONE, respectively). However, as would be appreciated by one of skill in the relevant arts, other platforms  can be simulated using platform simulators comprising a UI simulator  and device modeler  configured to model the operational characteristics of other mobile platforms and operating systems not depicted in .","As desktop agent  agent communicates with agents running within each respective simulator, platform-neutral debugging can be performed independent of the selected device  and platform . This is because of the abstraction from the actual devices\/platforms being simulated and the additional level of abstraction between the simulator agents , , and  and desktop agent .","Device\/Platform Specific View of User Interface Controls","This section describes functionality within the device application designer  to display various control \u2018widgets\u2019 as they would appear on the selected device\/platform combination. In an embodiment, device application designer  can provide a developer with a device and platform-specific view of a UI control based on the device  and platform  chosen. The developer can dynamically change the view of that UI control based on selecting a different device  and\/or platform . This embodiment enables developers to have a realistic view of the UI of an application  being designed without having to first execute it on a simulator. In an embodiment, the device application designer  provides default views for all controls, regardless of which platform  the figure is designed for. Additionally, a platform-specific figure interface is provided for each control widget. Each platform  implements an interface to create its own version of views in order to model the look and feel of a selected platform  and device . Not all platforms  support the same widgets. For example, a screen designed for a BLACKBERRY platform might look dramatically different on an IPHONE device. A toggle widget, for example, can be displayed as a checkbox on a BLACKBERRY device, but may be displayed as an on-off switch on devices running an IPHONE OS. The device application designer  updates an application editor to show the figure corresponding to the currently-selected platform . A default figure may be used if a platform-specific figure is not available for a selected platform .  depicts exemplary control widgets for BLACKBERRY STORM controls  and IPHONE controls . The code sample below provides an example platform-specific interface view for radio button controls.",{"@attributes":{"id":"p-0074","num":"0073"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\/**"},{"entry":"\u2009* This interface contains methods that need to be implemented by radio"},{"entry":"button views."},{"entry":"\u2009*"},{"entry":"\u2009*\/"},{"entry":"public interface IRadioButtonFigure extends IBaseFigure, IWidgetFigure"},{"entry":"{"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/**"]},{"entry":[{},"\u2009* Sets the RadioButton item."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"119pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2009* @param bIsSelected","Whether the radio button is checked."]},{"entry":[{},"\u2009* @param bReadOnly","Whether the item is read only."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2009*\/"]},{"entry":[{},"public void setSelectedState(boolean bIsSelected, boolean"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"bReadOnly);"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/**"]},{"entry":[{},"\u2009* Sets the value of the radio button."]},{"entry":[{},"\u2009* @param radioValue The display of the radio."]},{"entry":[{},"\u2009*\/"]},{"entry":[{},"public void setRadioValue(String radioValue);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}},"br":{}},{"@attributes":{"id":"p-0075","num":"0074"},"figref":["FIGS. 7-19","FIGS. 7-19","FIGS. 1-5","FIGS. 1-5","FIGS. 7-19","FIG. 3","FIG. 4","FIGS. 7-19"],"b":["302","324","410","122","124"]},"Although in the exemplary embodiments depicted in  the GUI is shown for designing and generating mobile device applications  for BLACKBERRY devices, it is understood that the GUI can be readily adapted to create applications other mobile device platforms and operating systems.","Throughout , displays are shown with various icons, command regions, buttons, menus, links, and data entry fields, which are used to initiate action, invoke routines, launch displays, enter data, view data, or invoke other functionality. The initiated actions include, but are not limited to selecting platforms, selecting devices, selecting device orientation, completing generation wizard , and designing screens. For brevity, only the differences occurring within the figures, as compared to previous or subsequent ones of the figures, are described below.",{"@attributes":{"id":"p-0078","num":"0077"},"figref":["FIG. 7","FIG. 7"],"b":["700","160","700","164","304","700","700","710","114","160","710","130","128","118","514","700"]},{"@attributes":{"id":"p-0079","num":"0078"},"figref":"FIG. 8","b":["800","810","160","124","160","800","812","810","164","814","816","818","800","164","160","800","164"]},{"@attributes":{"id":"p-0080","num":"0079"},"figref":["FIGS. 9 and 10","FIG. 9","FIG. 10"],"b":["900","160","168","900","130"]},{"@attributes":{"id":"p-0081","num":"0080"},"figref":["FIG. 11","FIG. 11"],"b":["1100","160","164","1100"]},{"@attributes":{"id":"p-0082","num":"0081"},"figref":["FIGS. 12 and 13","FIGS. 12 and 13"],"b":["114","114","1200","164","160"]},"The locale section  of the interface contains the locales defined for the data model corresponding to the selected platform . This section is disabled if localization capability is not supported by the selected platform. The advanced section  contains areas of checking that are generic to all platforms. When a platform  is selected, the next button  will bring up that platform's wizard page(s). The details of the flow of generation will be described in the wizard page interface.  provides an exemplary BLACKBERRY generation wizard page .",{"@attributes":{"id":"p-0084","num":"0083"},"figref":["FIGS. 14 and 15","FIG. 14","FIG. 15"],"b":["164","1400","1500","1510","1520"]},{"@attributes":{"id":"p-0085","num":"0084"},"figref":"FIG. 16","b":["1600","124","1600","164","1610","1610","1600"]},{"@attributes":{"id":"p-0086","num":"0085"},"figref":"FIG. 17","b":["1700","1700","1710","168"]},{"@attributes":{"id":"p-0087","num":"0086"},"figref":["FIGS. 18 and 19","FIGS. 18 and 19","FIG. 16","FIG. 18"],"b":["1800","1600","1610","1820","1610","1600","1840","1800","1800","168","1800","1820","168","1800","1810","1610","1820","1810","1820","1800","1820","168","1810","168","1800","1820"]},"Additional connections  can be created between screens  and  within mobile application  using flow design interface . In one embodiment, a selection of a connection type from a set or palette of connection types is received from flow design interface . In flow design interface , a developer can, using an input device (not shown), select a source screen  and drag to connect it to a target screen  via a connection .","As shown in , screen sets  comprising collections of custom screens  can be grouped together in flow design interface . In an embodiment, flow design interface  allows a designer to toggle between hiding details of connections  to other screens  within a screen set  by collapsing screen views to icons and expanding screen views to show both the screens  and connections  to other screens  within the screen set . In this way, a developer can collapse a screen set  into something like a folder figure that hides the detail, or expand it to show all screens  and connections  within a screen set . The purpose of this is to reduce clutter within flow design interface , especially for applications with many screens. Connections  between screens created in flow design interface  will not work until they are used in an action attached to a menu, button, or another control is selected.","As shown in , menu  can be used to profile, push, or save the new screens  selected in flow design interface .","Example Computer Implementation","Various aspects of the present invention can be implemented by software, firmware, hardware, or a combination thereof.  illustrates an example computer system  in which the present invention, or portions thereof, can be implemented as computer-readable code. For example, the methods illustrated by the flowchart  of  can be implemented in system . The device application designer tool described above can also be implemented in system . The GUI described above with reference to  can be displayed via display interface  on display . Various embodiments of the invention are described in terms of this example computer system . After reading this description, it will become apparent to a person skilled in the relevant art how to implement the invention using other computer systems and\/or computer architectures.","Computer system  includes one or more processors, such as processor . Processor  can be a special purpose or a general purpose processor. Processor  is connected to a communication infrastructure  (for example, a bus, or network).","Computer system  also includes a main memory , preferably random access memory (RAM), and may also include a secondary memory . Secondary memory  may include, for example, a hard disk drive , a removable storage drive , flash memory, a memory stick, and\/or any similar non-volatile storage mechanism. Removable storage drive  may comprise a floppy disk drive, a magnetic tape drive, an optical disk drive, a flash memory, or the like. The removable storage drive  reads from and\/or writes to a removable storage unit  in a well known manner. Removable storage unit  may comprise a floppy disk, magnetic tape, optical disk, etc. which is read by and written to by removable storage drive . As will be appreciated by persons skilled in the relevant art(s), removable storage unit  includes a computer usable storage medium having stored therein computer software and\/or data.","In alternative implementations, secondary memory  may include other similar means for allowing computer programs or other instructions to be loaded into computer system . Such means may include, for example, a removable storage unit  and an interface . Examples of such means may include a program cartridge and cartridge interface (such as that found in video game devices), a removable memory chip (such as an EPROM, or PROM) and associated socket, and other removable storage units  and interfaces  which allow software and data to be transferred from the removable storage unit  to computer system .","Computer system  may also include a communications interface . Communications interface  allows software and data to be transferred between computer system  and external devices. Communications interface  may include a modem, a network interface (such as an Ethernet card), a communications port, a PCMCIA slot and card, or the like. Software and data transferred via communications interface  are in the form of signals which may be electronic, electromagnetic, optical, or other signals capable of being received by communications interface . These signals are provided to communications interface  via a communications path . Communications path  carries signals and may be implemented using wire or cable, fiber optics, a phone line, a cellular phone link, an RF link or other communications channels.","In this document, the terms \u201ccomputer program medium\u201d and \u201ccomputer usable medium\u201d are used to generally refer to media such as removable storage unit , removable storage unit , and a hard disk installed in hard disk drive . Signals carried over communications path  can also embody the logic described herein. Computer program medium and computer usable medium can also refer to memories, such as main memory  and secondary memory , which can be memory semiconductors (e.g. DRAMs, etc.). These computer program products are means for providing software to computer system .","Computer programs (also called computer control logic) are stored in main memory  and\/or secondary memory . Computer programs may also be received via communications interface . Such computer programs, when executed, enable computer system  to implement the present invention as discussed herein. In particular, the computer programs, when executed, enable processor  to implement the processes of the present invention, such as the steps in the methods illustrated by flowchart  of  discussed above. Accordingly, such computer programs represent controllers of the computer system . Where the invention is implemented using software, the software may be stored in a computer program product and loaded into computer system  using removable storage drive , interface , hard drive , or communications interface .","The invention is also directed to computer program products comprising software stored on any computer useable medium. Such software, when executed in one or more data processing device, causes a data processing device(s) to operate as described herein. Embodiments of the invention employ any computer useable or readable medium, known now or in the future. Examples of computer useable mediums include, but are not limited to, primary storage devices (e.g., any type of random access memory), secondary storage devices (e.g., hard drives, floppy disks, CD ROMS, ZIP disks, tapes, magnetic storage devices, optical storage devices, MEMS, nanotechnological storage device, etc.), and communication mediums (e.g., wired and wireless communications networks, local area networks, wide area networks, intranets, etc.).","The invention can work with software, hardware, and\/or operating system implementations other than those described herein. Any software, hardware, and operating system implementations suitable for performing the functions described herein can be used.","The attached Appendix forms a part of this application, and is thus herein incorporated by reference in its entirety. The Appendix provides a technical specification for an exemplary device application designer entitled \u2018Bob.\u2019 In particular, section 1.1.5 of the Appendix describes an exemplary generation wizard and section 1.1.7 describes an embodiment of how the \u2018Bob\u2019 device application designer can provide a developer with a device and platform-specific view of a UI control based on a selection of a device and platform. Section 5.5 of the Appendix describes an exemplary modeling tool that can be used to provide platform and device specific validation and allow for correction of device specific features of a mobile application design.","While various embodiments of the present invention have been described above, it should be understood that they have been presented by way of example only, and not limitation. It will be understood by those skilled in the relevant art(s) that various changes in form and details may be made therein without departing from the spirit and scope of the invention as defined in the appended claims. Accordingly, the breadth and scope of the present invention should not be limited by any of the above-described exemplary embodiments, but should be defined only in accordance with the following claims and their equivalents."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS\/FIGURES","p":["The accompanying drawings, which are incorporated herein and form part of the specification, illustrate the present invention and, together with the description, further serve to explain the principles of the invention and to enable a person skilled in the relevant art(s) to make and use the invention.",{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIGS. 7-19"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 20"}]},"DETDESC":[{},{}]}
