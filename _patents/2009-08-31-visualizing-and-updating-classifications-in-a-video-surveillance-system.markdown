---
title: Visualizing and updating classifications in a video surveillance system
abstract: Techniques are disclosed for visually conveying classifications derived from pixel-level micro-features extracted from image data. The image data may include an input stream of video frames depicting one or more foreground objects. The classifications represent information learned by a video surveillance system. A request may be received to view a classification. A visual representation of the classification may be generated. A user interface may be configured to display the visual representation of the classification and to allow a user to view and/or modify properties associated with the classification.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08797405&OS=08797405&RS=08797405
owner: Behavioral Recognition Systems, Inc.
number: 08797405
owner_city: Houston
owner_country: US
publication_date: 20090831
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENT"],"p":["1. Field of the Invention","Embodiments of the invention provide techniques for conveying information learned by a video surveillance system. More specifically, embodiments of the invention relate to techniques for visualizing and updating object classifications in a video surveillance system.","2. Description of the Related Art","Some currently available video surveillance systems provide simple object recognition capabilities. For example, a video surveillance system may be configured to classify a group of pixels (referred to as a \u201cblob\u201d) in a given frame as being a particular class of object (e.g., a person or vehicle). Once identified, a \u201cblob\u201d may be tracked frame-to-frame in order to follow the \u201cblob\u201d moving through the scene over time, e.g., a person walking across the field of vision of a video surveillance camera. Further, such systems may be configured to determine when an object has engaged in certain predefined behaviors.","However, such surveillance systems typically require that the objects and\/or behaviors which may be recognized by the system to be defined in advance. Thus, in practice, these systems rely on predefined definitions for objects and\/or behaviors to evaluate a video sequence. In other words, unless the underlying system includes a description for a particular object or behavior, the system is generally incapable of recognizing that behavior (or at least instances of the pattern describing the particular object or behavior). Thus, what is \u201cnormal\u201d or \u201cabnormal\u201d behavior needs to be defined in advance, and separate software products need to be developed to recognize additional objects or behaviors. This results in surveillance systems with recognition capabilities that are labor intensive and prohibitively costly to maintain or adapt for different specialized applications. Accordingly, currently available video surveillance systems are typically unable to recognize new patterns of behavior that may emerge in a given scene or recognize changes in existing patterns. More generally, such systems are often unable to identify objects, events, behaviors, or patterns as being \u201cnormal\u201d or \u201cabnormal\u201d by observing what happens in the scene over time; instead, such systems rely on static patterns defined in advance.","One embodiment of the invention includes a computer-implemented method for a video surveillance system to process a sequence of video frames depicting a scene captured by a video camera. The method may generally include receiving a request to view an object classification type assigned to a foreground object depicted in the sequence of video frames. The object classification type may be used to classify the foreground object as being an instance of one of a plurality of foreground object classification types. Additionally, the object classification type may assigned to the foreground object based on a plurality of micro-features derived from analyzing pixels depicting the foreground object in the sequence of video frames. The method may further include generating a visual representation of the requested object classification type and outputting the generated visual representation for display.","In a particular embodiment, object classification type is generated by mapping micro-features derived from a plurality of foreground objects to nodes of a self-organizing map (SOM) and using an Adaptive Resonance Theory (ART) network to cluster the resulting nodes of the SOM. Further, the visual representation of the requested object classification type may include image data from the sequence of video frames depicting one or more instances of the object classification type.","Still another embodiment includes a computer-readable storage medium containing a program which, when executed by a video surveillance system, performs an operation to process a sequence of video frames depicting a scene captured by a video camera. The operation itself may generally include receiving a request to view an object classification type assigned to a foreground object depicted in the sequence of video frames. The object classification type may be used to classify the foreground object as being an instance of one of a plurality of foreground object classification types.","Additionally, the object classification type may assigned to the foreground object based on a plurality of micro-features derived from analyzing pixels depicting the foreground object in the sequence of video frames. The operation may further include generating a visual representation of the requested object classification type and outputting the generated visual representation for display.","Another embodiment of the invention provides a video surveillance system. The video surveillance system may generally include a video input source configured to provide a sequence of video frames, each depicting a scene, a processor, and a memory containing a program, which when executed by the processor is configured to perform an operation to process the scene depicted in the sequence of video frames. The operation itself may generally include receiving a request to view an object classification type assigned to a foreground object depicted in the sequence of video frames. The object classification type may be used to classify the foreground object as being an instance of one of a plurality of foreground object classification types. Additionally, the object classification type may assigned to the foreground object based on a plurality of micro-features derived from analyzing pixels depicting the foreground object in the sequence of video frames. The operation may further include generating a visual representation of the requested object classification type and outputting the generated visual representation for display.","Embodiments of the invention provide an interface configured to visually convey information learned by a behavior-recognition system. The behavior-recognition system may be configured to identify, learn, and recognize patterns of behavior by observing and evaluating events depicted by a sequence of video frames. In a particular embodiment, the behavior-recognition system may include both a computer vision engine and a machine learning engine. The computer vision engine may be configured to evaluate a stream of video frames. Typically, each frame of video may be characterized using multiple color (or grayscale) channels (e.g., a radiance value between 0-255 and a set of red, green, and blue (RGB) color channels values, each between 0-255). Further, the computer vision engine may generate a background image by observing the scene over a number of video frames. For example, consider a video camera trained on a stretch of a highway. In such a case, the background would include the roadway surface, the medians, any guard rails or other safety devices, and traffic control devices, etc., that are visible to the camera. Vehicles traveling on the roadway (and any other person or thing engaging in some activity) that are visible to the camera would represent scene foreground objects.","The computer vision engine may compare the pixel values for a given frame with the background image and identify objects as they appear and move about the scene. Typically, when a region of the scene (referred to as a \u201cblob\u201d or \u201cpatch\u201d) is observed with appearance values that differ substantially from the background image, that region is identified as depicting a foreground object. Once identified, the object may be evaluated by a classifier configured to determine what is depicted by the foreground object (e.g., a vehicle or a person). Further, the computer vision engine may identify features (e.g., height\/width in pixels, average color values, shape, area, and the like) used to track the object from frame-to-frame. Further still, the computer vision engine may derive a variety of information while tracking the object from frame-to-frame, e.g., position, current (and projected) trajectory, direction, orientation, velocity, acceleration, size, color, and the like. In one embodiment, the computer vision outputs this information as a stream of \u201ccontext events\u201d describing a collection of kinematic information related to each foreground object detected in the video frames. Each context event may provide kinematic data related to a foreground object observed by the computer vision engine in the sequence of video frames.","Data output from the computer vision engine may be supplied to the machine learning engine. In one embodiment, the machine learning engine may evaluate the context events to generate \u201cprimitive events\u201d describing object behavior. Each primitive event may provide semantic meaning to a group of one or more context events. For example, assume a camera records a car entering a scene, and that the car turns and parks in a parking spot. In such a case, the computer vision engine could initially recognize the car as a foreground object; classify it as being a vehicle, and output kinematic data describing the position, movement, speed, etc., of the car in the context event stream. In turn, a primitive event detector could generate a stream of primitive events from the context event stream such as \u201cvehicle appears,\u201d \u201cvehicle turns,\u201d \u201cvehicle slowing,\u201d and \u201cvehicle stops\u201d (once the kinematic information about the car indicated a speed of 0). As events occur, and re-occur, the machine learning engine may create, encode, store, retrieve, and reinforce patterns representing the events observed to have occurred, e.g., long-term memories (or long-term \u201cpercepts\u201d) representing a higher-level abstraction of a car parking in the scene\u2014generated from the primitive events underlying multiple observations of different cars entering and parking. The interface may be configured to visually convey such patterns. Specifically, the patterns may be stored in a long-term memory of the machine learning engine. Further still, patterns representing an anomalous event (relative to prior observation) or events identified as an event of interest may result in alerts passed to users of the behavioral recognition system.","In one embodiment, the machine learning engine may classify foreground objects based on pixel-level micro-features that are extracted from one or more images. The micro-features may be heuristic features of foreground patches depicting objects in frames of video. The micro-features may be represented as a vector input to a micro-feature classifier. The micro-feature classifier may learn a set of distinct object types, over time, through observing different micro-feature vectors. In one embodiment, the micro-feature classifier includes a self-organizing map and adaptive resonance theory (SOM-ART) network. The SOM-ART network processes the pixel-level micro-features to adaptively learn and organize the micro-features into object type clusters. In other words, the machine learning engine may classify foreground objects into object type clusters (or \u201cclassifications\u201d). Each object type cluster represents a specific type of foreground object, such as a human, a car, a truck, a motorcycle, etc. The machine learning engine may also provide an arbitrary symbol (such as a number) for distinctly labeling each object type cluster. In one embodiment, the training of the SOM-ART network is unsupervised, i.e., performed independent of any training data that defines particular objects. That is, the ability of the SOM-ART network to classify objects is not constrained by specific object definitions.","Further, the video surveillance system may generate an alert upon observing an object that matches a specified type of object, as specified by metadata properties associated with a given object type. For example, a user may specify that an alert should be generated whenever a particular object type is observed in a scene e.g., for an object type of \u201cperson,\u201d a rule specifying that an alert should be generated whenever an object classified as being a \u201cperson\u201d is detected in a restricted area monitored by the video surveillance system, regardless of how common it is for people to be in the restricted area. Thus, the metadata attributes allow users to have alerts generated not only for events, observations, based on a frequency of occurrence (as learned by the machine learning engine) but also for events that, while not anomalous relative to frequency, are nevertheless of significant interest to a user of the video surveillance system.","In one embodiment, the machine-learning engine may include a transaction server. The transaction server may generate a visual representation of classifications derived by the machine learning engine. Thus, the transaction server allows users to explore data learned by the machine-learning engine. Further, the transaction server allows users to specify how the system is to respond to certain observed events and\/or behaviors (for example, when to produce (or not produce) an alert). For instance, the transaction server may receive a request to view classifications learned from observing objects in a scene. In response, the transaction server may generate a visual representation of the classifications. The visual representation may include a grid of hexagonal blocks. Each hexagonal block may represent a node of the SOM. Further, each hexagonal block may be shaded to indicate which object type cluster the corresponding node belongs to (i.e., as classified by the ART network). Alternatively, the transaction server may also transmit learned data to a client application. The client application may generate a visual representation of the classifications from the learned data. Further, the transaction server may also receive user requests to associate metadata with a classification. The metadata may be used to guide system behavior. For example, a user may provide a name for a classification, specify a rule that the system should generate an alert (or refrain from generating an alert) upon observing anomalous events matching a classification, or otherwise modify metadata associated with a classification.","In the following, reference is made to embodiments of the invention. However, it should be understood that the invention is not limited to any specifically described embodiment. Instead, any combination of the following features and elements, whether related to different embodiments or not, is contemplated to implement and practice the invention. Furthermore, in various embodiments the invention provides numerous advantages over the prior art. However, although embodiments of the invention may achieve advantages over other possible solutions and\/or over the prior art, whether or not a particular advantage is achieved by a given embodiment is not limiting of the invention. Thus, the following aspects, features, embodiments and advantages are merely illustrative and are not considered elements or limitations of the appended claims except where explicitly recited in a claim(s). Likewise, reference to \u201cthe invention\u201d shall not be construed as a generalization of any inventive subject matter disclosed herein and shall not be considered to be an element or limitation of the appended claims except where explicitly recited in a claim(s).","One embodiment of the invention is implemented as a program product for use with a computer system. The program(s) of the program product defines functions of the embodiments (including the methods described herein) and can be contained on a variety of computer-readable storage media. Examples of computer-readable storage media include (i) non-writable storage media (e.g., read-only memory devices within a computer such as CD-ROM or DVD-ROM disks readable by an optical media drive) on which information is permanently stored; (ii) writable storage media (e.g., floppy disks within a diskette drive or hard-disk drive) on which alterable information is stored. Such computer-readable storage media, when carrying computer-readable instructions that direct the functions of the present invention, are embodiments of the present invention. Other examples media include communications media through which information is conveyed to a computer, such as through a computer or telephone network, including wireless communications networks.","In general, the routines executed to implement the embodiments of the invention may be part of an operating system or a specific application, component, program, module, object, or sequence of instructions. The computer program of the present invention is comprised typically of a multitude of instructions that will be translated by the native computer into a machine-readable format and hence executable instructions. Also, programs are comprised of variables and data structures that either reside locally to the program or are found in memory or on storage devices. In addition, various programs described herein may be identified based upon the application for which they are implemented in a specific embodiment of the invention. However, it should be appreciated that any particular program nomenclature that follows is used merely for convenience, and thus the invention should not be limited to use solely in any specific application identified and\/or implied by such nomenclature.",{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 1","b":["100","100","105","110","115","145","110","105","115","115","120","125","130","135","140","135","140","105"]},"Network  receives video data (e.g., video stream(s), video images, or the like) from the video input source . The video input source  may be a video camera, a VCR, DVR, DVD, computer, web-cam device, or the like. For example, the video input source  may be a stationary video camera aimed at a certain area (e.g., a subway station, a parking lot, a building entry\/exit, etc.), which records the events taking place therein. Generally, the area visible to the camera is referred to as the \u201cscene.\u201d The video input source  may be configured to record the scene as a sequence of individual video frames at a specified frame-rate (e.g., 24 frames per second), where each frame includes a fixed number of pixels (e.g., 320\u00d7240). Each pixel of each frame may specify a color value (e.g., an RGB value) or grayscale value (e.g., a radiance value between 0-255). Further, the video stream may be formatted using known such formats e.g., MPEG2, MJPEG, MPEG4, H.263, H.264, and the like. Additionally, although shown as a single video input source , the system  may support many video cameras\u2014each observing a distinct scene. Further, each camera may have multiple preset positions (i.e., a single camera may, in fact, be trained on more than one scene). In such cases, a separate instance of the computer vision engine  and machine learning-engine  may be available to observe the video stream from each camera (and presets, if any).","The computer vision engine  may be configured to analyze this raw information to identify active objects in the video stream, classify the objects, derive a variety of metadata regarding the actions and interactions of such objects, and supply this information to a machine-learning engine . In turn, the machine-learning engine  may be configured to evaluate, observe, learn, and remember details regarding events (and types of events) that transpire within the scene over time.","In one embodiment, the machine-learning engine  receives the video frames and the data generated by the computer vision engine . The machine-learning engine  may be configured to analyze the received data, build semantic representations of events depicted in the video frames, detect patterns, and, ultimately, to learn from these observed patterns to identify normal and\/or abnormal events. Additionally, data describing whether a normal\/abnormal behavior\/event has been determined and\/or what such behavior\/event is may be provided to output devices  to issue alerts, for example, an alert message presented on a GUI screen. In general, the computer vision engine  and the machine-learning engine  both process video data in real-time. However, time scales for processing information by the computer vision engine  and the machine-learning engine  may differ. For example, in one embodiment, the computer vision engine  processes the received video data frame-by-frame, while the machine-learning engine  processes data every N-frames. In other words, while the computer vision engine  analyzes each frame in real-time to derive a set of information about what is occurring within a given frame, the machine-learning engine  is not constrained by the real-time frame rate of the video input.","Note, however,  illustrates merely one possible arrangement of the behavior-recognition system . For example, although the video input source  is shown connected to the computer system  via the network , the network  is not always present or needed (e.g., the video input source  may be directly connected to the computer system ). Further, various components and modules of the behavior-recognition system  may be implemented in other systems. For example, in one embodiment, the computer vision engine  may be implemented as a part of a video input device (e.g., as a firmware component wired directly into a video camera). In such a case, the output of the video camera may be provided to the machine-learning engine  for analysis. Similarly, the output from the computer vision engine  and machine-learning engine  may be supplied over computer network  to other computer systems. For example, the computer vision engine  and machine-learning engine  may be installed on a server system and configured to process video from multiple input sources (i.e., from multiple cameras). In such a case, a client application running on another computer system may request (or receive) the results of over network .",{"@attributes":{"id":"p-0035","num":"0034"},"figref":["FIG. 2","FIG. 1"],"b":["135","140","135","205","210","215","220","205","210","215","220","105","140","205","210","215","220","205","210","215","220"]},"In one embodiment, the BG\/FG component  may be configured to separate each frame of video provided by the video input source  into a stationary or static part (the scene background) and a collection of volatile parts (the scene foreground.) The frame itself may include a two-dimensional array of pixel values for multiple channels (e.g., RGB channels for color video or grayscale channel or radiance channel for black and white video). In one embodiment, the BG\/FG component  may model the background states for each pixel using a corresponding ART network. In such a case, mature clusters in the art network for a given pixel may represent a distinct background state for the scene being observed. That is, each mature cluster may represent a pixel color value (and mean and variance from that value) expected to be observed in a frame of video when the background of the scene is visible to the camera. Typically, a cluster in the ART network is \u201cmature\u201d after a specified number of inputs have been mapped to that pixel. For example, consider a camera fixed on an elevator lobby. An ART network corresponding to a pixel could steadily fluctuate between a pixel color value obtained when an elevator door was closed and one when it was open\u2014with other colors transiently being observed as agents (people) move about the scene. This could result in an ART network with two mature clusters (one modeling the color values when the elevator door is closed and one modeling when it is open). In this manner, each pixel may be classified as depicting scene foreground or scene background (from frame-to-frame) using an ART network modeling a given pixel.","Additionally, the BG\/FG component  may be configured to generate a mask used to identify which pixels of the scene are classified as depicting foreground and, conversely, which pixels are classified as depicting scene background. The BG\/FG component  then identifies regions of the scene that contain a portion of scene foreground (referred to as a foreground \u201cblob\u201d or \u201cpatch\u201d) and supplies this information to subsequent stages of the pipeline. In one embodiment, a patch may be evaluated over a number of frames before being forwarded to other components of the computer vision engine . For example, the BG\/FG component  may evaluate features of a patch from frame-to-frame to make an initial determination that the patch depicts a foreground agent in the scene as opposed to simply a patch of pixels classified as foreground due to camera noise or changes in scene lighting. Additionally, pixels classified as depicting scene background maybe used to a background image modeling the scene.","The tracker component  may receive the foreground patches produced by the BG\/FG component  and generate computational models for the patches. The tracker component  may be configured to use this information, and each successive frame of raw-video, to attempt to track the motion of the objects depicted by the foreground patches as they move about the scene.","The estimator\/identifier component  may receive the output of the tracker component  (and the BF\/FG component ) and classify each tracked object as being one of a known category of objects. For example, in one embodiment, estimator\/identifier component  may classify a tracked object as being a \u201cperson,\u201d a \u201cvehicle,\u201d an \u201cunknown,\u201d or an \u201cother.\u201d In this context, the classification of \u201cother\u201d represents an affirmative assertion that the object is neither a \u201cperson\u201d nor a \u201cvehicle.\u201d Additionally, the estimator\/identifier component may identify characteristics of the tracked object, e.g., for a person, a prediction of gender, an estimation of a pose (e.g., standing or sitting) or an indication of whether the person is carrying an object. Alterntivaely, the machine learning engine  may classify foreground objects observed by the vision engine . For example, the machine-learning engine  may include an unsupervised classifier configured to observe and distinguish among different agent types (e.g., between people and vehicles) based on a plurality of micro-features (e.g., size, speed, appearance characteristics, etc.).","The context processor component  may receive the output from other stages of the pipeline (i.e., the tracked objects, the background and foreground models, and the results of the estimator\/identifier component ). Using this information, the context processor  may be configured to generate a stream of context events regarding objects tracked (by tracker component ) and classified (by estimator identifier component ). For example, the context processor component  may evaluate a foreground object from frame-to-frame and output context events describing that object's height, width (in pixels), position (as a 2D coordinate in the scene), acceleration, velocity, orientation angle, etc.","The computer vision engine  may take the outputs of the components , , , and  describing the motions and actions of the tracked objects in the scene and supply this information to the machine-learning engine . In one embodiment, the primitive event detector  may be configured to receive the output of the computer vision engine  (i.e., the video images, the object classifications, and context event stream) and generate a sequence of primitive events\u2014labeling the observed actions or behaviors in the video with semantic meaning. For example, assume the computer vision engine  has identified a foreground object and classified that foreground object as being a vehicle and the context processor component  estimates the kinematic data regarding the car's position and velocity. In such a case, this information is supplied to the machine-learning engine  and the primitive event detector . In turn, the primitive event detector  may generate a semantic symbol stream providing a simple linguistic description of actions engaged in by the vehicle. For example, a sequence of primitive events related to observations of the computer vision engine  occurring at a parking lot could include formal language vectors representing the following: \u201cvehicle appears in scene,\u201d \u201cvehicle moves to a given location,\u201d \u201cvehicle stops moving,\u201d \u201cperson appears proximate to vehicle,\u201d \u201cperson moves,\u201d \u201cperson leaves scene\u201d \u201cperson appears in scene,\u201d \u201cperson moves proximate to vehicle,\u201d \u201cperson disappears,\u201d \u201cvehicle starts moving,\u201d and \u201cvehicle disappears.\u201d As described in greater detail below, the primitive event stream may be supplied to excite the perceptual associative memory .","Illustratively, the machine-learning engine  includes a long-term memory , a perceptual memory , an episodic memory , a workspace , codelets , and a mapper component . In one embodiment, the perceptual memory , the episodic memory , and the long-term memory  are used to identify patterns of behavior, evaluate events that transpire in the scene, and encode and store observations. Generally, the perceptual memory  receives the output of the computer vision engine  (e.g., the context event stream) and a primitive event stream generated by primitive event detector . The episodic memory  stores data representing observed events with details related to a particular episode, e.g., information describing time and space details related on an event. That is, the episodic memory  may encode specific details of a particular event, i.e., \u201cwhat and where\u201d something occurred within a scene, such as a particular vehicle (car A) moved to a location believed to be a parking space (parking space ) at 9:43 AM.","The long-term memory  may store data generalizing events observed in the scene. To continue with the example of a vehicle parking, the long-term memory  may encode information capturing observations and generalizations learned by an analysis of the behavior of objects in the scene such as \u201cvehicles tend to park in a particular place in the scene,\u201d \u201cwhen parking vehicles tend to move a certain speed,\u201d and \u201cafter a vehicle parks, people tend to appear in the scene proximate to the vehicle,\u201d etc. Thus, the long-term memory  stores observations about what happens within a scene with much of the particular episodic details stripped away. In this way, when a new event occurs, memories from the episodic memory  and the long-term memory  may be used to relate and understand a current event, i.e., the new event may be compared with past experience, leading to both reinforcement, decay, and adjustments to the information stored in the long-term memory , over time. In a particular embodiment, the long-term memory  may be implemented as a binary ART network and a sparse-distributed memory data structure.","The mapper component  may receive the context event stream and the primitive event stream and parse information to multiple ART networks to generate statistical models of what occurs in the scene for different groups of context events and primitive events.","Generally, the workspace  provides a computational engine for the machine-learning engine . For example, the workspace  may be configured to copy information from the perceptual memory , retrieve relevant memories from the episodic memory  and the long-term memory , select and invoke the execution of one of codelets . In one embodiment, each codelet  is a software program configured to evaluate different sequences of events and to determine how one sequence may follow (or otherwise relate to) another (e.g., a finite state machine). More generally, the codelet may provide a software module configured to detect interesting patterns from the streams of data fed to the machine-learning engine. In turn, the codelet  may create, retrieve, reinforce, or modify memories in the episodic memory  and the long-term memory . By repeatedly scheduling codelets  for execution, copying memories and percepts to\/from the workspace , the machine-learning engine  performs a cognitive cycle used to observe, and learn, about patterns of behavior that occur within the scene.","Further, both the computer vision engine  and the machine learning engine  may interface with a transaction server  and a GUI tool  to allow users to explore data learned by the machine-learning engine , according to one embodiment. Users may also specify, via the GUI tool , how the system is to respond to certain observed events and\/or behaviors (for example, when to produce (or not produce) an alert). Note, while  shows the transaction server  as being separate from the machine learning engine , those skilled in the art will recognize that the transaction server  may readily be integrated as part of the machine learning engine .",{"@attributes":{"id":"p-0047","num":"0046"},"figref":["FIG. 3","FIG. 1"],"b":["300","115","105","135","140","270","105","301","135","135","301","302","301","301"]},"As noted, the computer vision engine  may track objects frame-to-frame and generate micro feature vectors for each foreground object at a rate of, e.g., 5 Hz. In one embodiment, the machine learning engine may be configured to create clusters from this stream of micro feature vectors. For example, each micro feature vector may be supplied to an input layer of the ART network (or a combination of a self organizing map (SOM) and ART network used to cluster nodes in the SOM). In response, the ART network maps the micro feature vector to a cluster in the ART network and updates that cluster (or creates a new cluster of the input micro feature vector is sufficiently dissimilar to the existing clusters). Each cluster is presumed to represent a distinct object type, and objects sharing similar micro feature vectors (as determined using the choice and vigilance parameters of the ART network) are mapped to the same cluster.","In one embodiment, the machine learning engine  includes a SOM-ART network. The SOM-ART network includes a SOM  and an ART network . As is known, a self-organizing map (SOM)  provides an artificial neural network trained using unsupervised learning to produce a low-dimensional, discretized representation of a higher-dimensional input space of training samples. The discretized representation is called a map and is typically two-dimensional. Thus, the SOM  allows high-dimensional data to be visualized. Further, like many artificial neural networks, SOMs operate in two modes: training and mapping. Training builds the map using sample vector inputs. Mapping assigns new input vectors to a node of the SOM .","A SOM  includes nodes , each node occupying a distinct position in the map. Further, each node  includes a weight vector of the same dimension as the input vectors (e.g., micro-feature vectors). The nodes  may typically be arranged in an evenly spaced fashion and in a hexagonal or rectangular grid. The SOM  maps data from a higher dimensional input space to a lower dimensional map space. For each input vector, the SOM  identifies a node  having the closest weight vector. The closest weight vector may be identified by computing a Euclidean distance between the input vector and the weight vector. Once identified, the SOM  may assign distinct position (i.e., coordinates) of the node  in the map to the input vector. The SOM  may also adjust the weight vector of the node  (and weight vectors of neighboring nodes within a given radius of the node) based on the mapped input vector. The SOM  may also decrease the radius over time (as input vectors are mapped).","As described above, the SOM-ART network also includes an ART network . Upon each input vector mapping to a node  in the SOM  (i.e., for each adjustment of the SOM ), the machine learning engine  may supply the SOM  to the ART network . As is known, Adaptive Resonance Theory (ART) describes a number of neural network models which use supervised and unsupervised learning methods. In one embodiment, the ART network  generates clusters from the nodes  of the SOM . Each cluster represents a statistical distribution of nodes  of the SOM . Further, the ART network  may assign an arbitrary identifier (or symbol) to each cluster. In one embodiment, the ART network  may be configured to provide dynamic clustering. That is, a cluster in ART network  may change in size\/shape as each set of SOM nodes  is mapped to that cluster. A cluster may initially be defined as a relatively small size. However, as inputs are mapped to that cluster, the size may grow and change over time. Further, the clusters may decay over time. For example, if a cluster does not receive a set of SOM nodes  (reinforcing the importance of that cluster) for a specified period of time, such a cluster may be removed from an ART network .","In one embodiment, the machine learning engine  (via the SOM-ART network) creates object type clusters from a group of inputs, e.g., micro-feature vectors. Each element (micro-feature value) of the micro-feature vector is a dimension of an input to the SOM . Each object type cluster corresponds to a classification  of an object depicted in a scene. For example, the machine learning engine  may classify an object as being one of the learned object types (e.g., a person, a car, a truck, etc.) or as an unrecognized (unknown) object type based on a distance measure between a micro-feature vector received for the object and the object type clusters of the SOM . Further, the machine learning engine  performs unsupervised learning to automatically find what and how many object types may exist in the image data. This unsupervised learning and object type cluster discovery are adaptive because the knowledge about existing classes of objects is dynamically updated as new object types appear and are classified by the machine learning engine . That is, the machine learning engine  is not limited to specific pre-defined object types.","In one embodiment, the GUI tool  and the transaction server  allow users to retrieve and generate visualizations of classifications  (generated by the SOM-ART network of the machine learning engine ). For example, the transaction server  may be configured to processes user requests from the GUI tool  to generate and display a visualization of a classification . Table I shows examples of transactions that may be supported by the transaction server :",{"@attributes":{"id":"p-0054","num":"0053"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE I"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Transactions supported by the transaction server 260"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Transaction","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Get preset list","Obtain a list of presets for a specified camera"]},{"entry":["Get scene image","Obtain a picture that represents a scene as"]},{"entry":[{},"viewed by the camera"]},{"entry":["Get classifications, ART","Obtains all learned data for a"]},{"entry":["labels, and SOM nodes","specified preset (e.g., including properties)"]},{"entry":["Set always alert","Specifies to always alert on event(s) matching"]},{"entry":[{},"a classification"]},{"entry":["Set always ignore","Specifies to never alert on event(s) matching"]},{"entry":[{},"a classification"]},{"entry":["Modify property","Modify a specified property of a classification"]},{"entry":["Set classification failure","Specifies to always alert on a failure to"]},{"entry":["to always alert","classify an object as one of the learned object"]},{"entry":[{},"types"]},{"entry":["Set classification failure","Specifies to never alert on a failure to"]},{"entry":["to never alert","classify an object as one of the learned object"]},{"entry":[{},"types"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},{"@attributes":{"id":"p-0055","num":"0054"},"figref":"FIG. 4","b":["260","404","406","260","404","260","260"]},"As shown, the method  begins at step , where the user  invokes the client . At step , a user interacts with the client  to connect to the transaction server . For example, the client  may connect to a specified IP address and port number on which the transaction server  is listening. At step , the client  queries for a list of cameras and associated presets . Each preset may include a location and orientation of a video camera observing (or having observed) a scene. At step , the transaction server  returns a list of cameras and presets to the client . At step , the client  displays the list of cameras and presets to the user .","At step , the user  selects a camera and a preset. The client  then queries for a list of classifications, ART labels, and SOM nodes from the server  for the selected camera and preset (step ). At step , the server  returns the list of classifications, ART labels, and SOM nodes to the client . Alternatively, the server  may be configured to return a list of object classification typos for a currently active scene being observed by the computer vision engine  and machine-learning engine . In one embodiment, the client  may also recive an example clip from frames of video showing one or more examples of an object classified as being an instance of the object classification type. For example, the client may recive image data depdicitng multiple instances of object classified as being a vehicle or a person. At step , the client  displays the list of object classification typos to the user . The  may select a classification from the list. The client  may then display properties associated with the selected classification. The properties may include an identifier for the classification, a label for the classification, alert preferences for the classification, etc. The client  may also allow the user  to modify one or more properties for a classification. For example, a user  may modify a label for a classification to customize how the GUI tool  conveys information for the classification.","At step , the user  modifies a property of a classification via the client . At step , the client  sends a request to the server  to update the property of the classification. At step , the server  attempts to update the property of the classification and returns a result to the client  indicating success or failure of the attempted update. After the step , the method  terminates. The user  may also continue to interact with the client  (e.g., via the steps , , or ).",{"@attributes":{"id":"p-0059","num":"0058"},"figref":"FIG. 5","b":["500","140","500","502","504","506","508","510"]},"As shown, the visualization  of the SOM includes nodes of the SOM arranged in an evenly spaced fashion and in a hexagonal grid. Further, each node may be shaded (or otherwise visually distinguished from other nodes) to indicate which object type cluster (i.e., classification) the node belongs to (as classified by the ART network). Thus, a classification may be visualized as nodes belonging to a single object type cluster in the visualization  of the SOM. Because a node includes a weight vector that represents micro-features (such as orientation angle, animateness, etc.) of objects in a scene, the visualization of the SOM node may also be derived from the weight vector of the SOM node.","In one embodiment, a user may click on any node in the visualization  of the SOM to select the object type cluster to which the node belongs. That is, clicking the SOM node may select all nodes belonging to the object type cluster (as classified by the ART network). Aside from selecting a classification by clicking on the SOM, a user may also select a classification from the list  of classifications. Further, a user may navigate through the list  of classifications (e.g., using arrow keys of a keyboard or using a scroll bar for the list  of classifications). Upon receiving user input selecting a classification (e.g., from the list  of classifications or from the SOM ), the GUI tool  may highlight, in the visualization  of the SOM, nodes belonging to the classification. Further, the GUI tool may also display images  of objects matching the classification. The images may be selected based on properties of classified objects (such as how recently the objects were classified, how strongly the object matches a classification, etc.). For instance, if a user selects a classification of \u201ccar,\u201d the GUI tool  may display four recent objects observed in the scene that matched the selected classification of \u201ccar.\u201d","As shown, the count  of classifications indicates that the ART network clusters the nodes of the SOM into a total of six classifications. Further, the GUI tool  may display properties  of the selected classification. As shown, the properties  of the classification include an identifier for the classification, a symbol of the classification, ancestors of the classification, whether to alert upon detecting a foreground object that matches the classification. Ancestors of a classification refer to two or more classifications that are merged to form the classifications. The user may supply or modify the symbol or label for the classification, according to one embodiment. Further, the user may also set the machine-learning engine  to alert (or not to alert) whenever the machine-learning engine detects that an object matching the classification is observed.",{"@attributes":{"id":"p-0063","num":"0062"},"figref":"FIG. 6","b":["600","600","610","260"]},"At step , the transaction server  (and\/or the GUI tool ) generates a visual representation of the classification. For example, the transaction server  may generate, from object type clusters that emerge from the SOM-ART network (based on micro-features of objects in the scene), a grid of evenly-spaced hexagonal nodes. Each hexagonal node represents a node of the SOM. Further, nodes classified as belonging to a single object type cluster may be visually distinguished (e.g., shaded using a specific color) from nodes not classified as belonging to the single object type cluster. For example, the visual representation of the classification may the shaded nodes. Further, the visual representation of the classification may also include images of objects matching the classification. The images may assist a user in naming (or renaming) a classification. Further, the GUI tool  may be configured to allow the user to view and\/or modify properties of any classification selected by the user. At step , the transaction server  (and\/or the GUI tool ) may output the visual representation for display. After step , the method  terminates.",{"@attributes":{"id":"p-0065","num":"0064"},"figref":"FIG. 7","b":["700","700","710","260","720","725","730","260","140","735","740","260","140","745","725","735","745","260","750","740","750","700"]},"Advantageously, embodiments of the invention visually convey classifications derived from pixel-level micro-features extracted from image data. The image data may include an input stream of video frames depicting one or more foreground objects. The classifications represent information learned by a video surveillance system. Further, the visualization may provide an interface used to guide system behavior. In one embodiment, a GUI tool allows a user to visualize and manipulate classifications derived by a video surveillance system. For example, users may specify that observations matching an existing classification are to always (or never) result in an alert. Further, the GUI tool may allow users to modify other various properties of a classification, including semantic labels used to name the classification.","While the foregoing is directed to embodiments of the present invention, other and further embodiments of the invention may be devised without departing from the basic scope thereof, and the scope thereof is determined by the claims that follow."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["So that the manner in which the above recited features, advantages, and objects of the present invention are attained and can be understood in detail, a more particular description of the invention, briefly summarized above, may be had by reference to the embodiments illustrated in the appended drawings.","It is to be noted, however, that the appended drawings illustrate only typical embodiments of this invention and are therefore not to be considered limiting of its scope, for the invention may admit to other equally effective embodiments.",{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 7"}]},"DETDESC":[{},{}]}
