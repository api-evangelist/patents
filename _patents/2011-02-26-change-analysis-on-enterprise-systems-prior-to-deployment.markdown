---
title: Change analysis on enterprise systems prior to deployment
abstract: A computer (“patch analysis computer”) retrieves from a website, metadata describing one or more patch files to be used to change software in one or more computers (“target computers”). Prior to installation of the patch files in a target computer, the patch analysis computer performs analysis on the patch files and on the target computer and on application of the patch files to the target computer. The analysis is based on the retrieved metadata and based on configuration data of the target computer. Subsequent to performing the analysis, the management computer displays a report resulting from the analysis including one or more operations to fix issues found during analysis, and receives input from a human on specific patch files and operations. In response to receipt of human input, the patch analysis computer performs operations approved by the human and applies the patch files to the target computer.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08893106&OS=08893106&RS=08893106
owner: Oracle International Corporation
number: 08893106
owner_city: Redwood Shores
owner_country: US
publication_date: 20110226
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS-REFERENCE TO PROVISIONAL APPLICATION","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["This application claims priority under 35 USC \u00a7119 (e) from U.S. Provisional Application No. 61\/314,081 filed on Mar. 15, 2010 having the title CHANGE ANALYSIS ON ENTERPRISE SYSTEMS PRIOR TO DEPLOYMENT, filed by Ningombam et al., which is incorporated by reference herein in its entirety.","Any software that is previously installed (\u201cpre-installed software\u201d) and currently executing in systems of computers in an enterprise or organization may need to be changed, for example to keep up with new requirements, latest technologies, and fix defects (\u201cbugs\u201d). A vendor of the pre-installed software may release additional software (\u201cpatch\u201d) to fix bugs in the pre-installed software. Patches are typically released in a binary form, and used to overwrite portions of pre-installed software also in binary form. Note that if the pre-installed software is in another form, e.g. byte codes, then the patch is also released in the same form, e.g. also byte codes. For example, Oracle\u00ae Corporation releases a bundle of patches (\u201cCritical Patch Update\u201d or CPU) on a quarterly basis to provide security fixes for ORACLE\u00ae products.","Specifically, ORACLE\u00ae CPUs are released every quarter on a pre-announced date at a predetermined website. Each CPU contains patches in patch files, and also contains files of supporting documentation (\u201cmetadata\u201d), including a documentation roadmap. The documentation roadmap helps a human decide on appropriate patches for specific software in the systems of computers (\u201centerprise systems\u201d). The metadata also indicates actions to be performed with the patch files during deployment, e.g. actions to replace files of pre-installed software with newer version of the software in files released as patches. Patches in a CPU can be either cumulative (include fixes in all earlier patches) or incremental (e.g. one-off patches).","The task of upgrading and\/or patching of pre-installed software is normally handled by a human skilled in Information Technology (IT). For example, steps to be performed by IT personnel to keep the Oracle\u00ae Database software up-to-date with latest product fixes available from Oracle Corporation is described in Chapter 12 entitled \u201cManaging Oracle Database Software\u201d in the book Oracle\u00ae Database 2 Day DBA 11 g Release 1 (11.1), Part No. B28301-03, which is incorporated by reference herein in its entirety. An IT professional typically performs such a task on enterprise systems by first testing patch files on a test deployment () before applying them to a production system (). For effective testing, the test environment is set up to resemble the production environment as closely as possible. Vendors of software products may provide software tools to assist IT professionals in selecting one or more patch files to be deployed, and thereafter automatically deploy the selected patch files to one or more computers in the enterprise systems that contain the software to be patched.","A software utility called \u201cOPatch\u201d is available from Oracle Corporation, Redwood Shores, Calif. Prior to installing a patch file, OPatch can be used to resolve patch conflicts, and do a version check. A patch conflict can arise, for example, if a previously applied patch touches certain files that are also touched by a new patch and the new patch is not a superset of the previously applied patch. OPatch checks for such situations and raises an error when it detects a conflict.","Another software utility called \u201cOracle Universal Installer\u201d is normally used to install ORACLE products (i.e. not patches, but entire products). Oracle Universal Installer (OUI) maintains an inventory which can be used by OPatch to detect conflicts by issuing the following command \u201copatch apply-silent-no_bug_superset-report\u201d. The -report option detects any conflicts without applying the patch.","For more information on the above-described two tools, namely OPatch and OUI, see the following document which is incorporated by reference herein in its entirety: Chapter 7 of Oracle\u00ae Universal Installer and OPatch User's Guide, 11 g Release 1 (11.1) for Windows and UNIX, Part No. B31207-03, January 2008, entitled \u201cPatching Oracle Software with OPatch.\u201d","Another software tool called ORACLE\u00ae Enterprise Manager 10.2.0.5 is also available from Oracle Corporation, Redwood Shores, Calif. The Enterprise Manager (EM) provides a central management console to manage computers in a system containing software from ORACLE Corporation. Using this management console, an IT professional can identify patches applicable to their enterprise system, schedule CPU patching across multiple computers in the enterprise, and apply patches to multiple ORACLE_HOMEs at the same time (scalable patching model).","If any issues arise during patch deployment, the IT professional to take corrective action can use the EM. The EM can also be used to automate parts of the CPU implementation tasks by developing the necessary extensions to existing change management tools or systems. The following article is incorporated by reference herein in its entirety as background, entitled \u201cSaving Time and Labor On ORACLE Patching With Enterprise Manager Provisioning Pack\u2014a case study with Oracle Internal IT\u201d dated January 2008, by Pankaj Chandiramani and Hariprasanna Srinivasan.","Moreover, please see the following documents which are also incorporated by reference herein in their entirety as background: (1) Chapter 10 of Oracle\u00ae Enterprise Manager Advanced Configuration, 10g Release 4 (10.2.0.4.0), E10954-01, October 2007, entitled \u201cUsing Enterprise Manager For Grid Automation With Deployment Procedures.\u201d (2) Chapter 6 of Oracle\u00ae Enterprise Manager, Concepts, 10 g Release 1 (10.1), Part No. B12016-0, December 2003 entitled \u201cManaging Deployments.\u201d","Furthermore, also incorporated by reference herein in their entirety are the following: (1) US Patent Publication 20070288903 by Manglik et al. entitled \u201cAUTOMATED TREATMENT OF SYSTEM AND APPLICATION VALIDATION FAILURES\u201d; (2) US Patent Publication 20080098099 by Khasnis et al. entitled \u201cFACILITATING DEPLOYMENT OF CUSTOMIZATIONS OF ENTERPRISE APPLICATIONS\u201d; (3) US Patent Publication 20060225072 by Lari et al, entitled \u201cPackaging multiple groups of read-only files of an application's components into multiple shared libraries\u201d; and (4) US Patent Publication 20080178173 by Sriram et al, entitled \u201cEnhanced Flexibility In Deployment of Patches to Fix Errors In Pre-Installed Software.\u201d","Software tools of the type described above assist an IT professional in deploying to one or more target computers, a patch that the IT professional has personally selected e.g. based on the IT professional's knowledge of the target environment in their enterprise system. The target environment includes vendor-specific types of hardware (e.g. IBM-PC or Sun Workstation), as well as vendor-specific software, such as the type of operating system (e.g. Unix or Windows), and\/or application software (e.g. PeopleSoft or Siebel).","Inventors of the current patent application note that due to the diverse nature of hardware and software in the computers of an enterprise system, deployment of patches can cause unforeseen problems. For example, the IT professional may not think of some critical functionality of a computer that is found to be adversely affected after applying a patch, resulting in the computer becoming unavailable until the original configuration is restored.","Inventors of the current patent application further note that restoring an adversely affected computer back to its original configuration is difficult and time consuming. Even if there is no critical failure, a newly-applied patch in one software tier (e.g. application software) may conflict with a previously-applied patch in another software tier (e.g. middleware software), requiring roll-back (i.e. removal) of the previously-applied patch. Accordingly, the inventors of the current patent application believe there is a need for a new tool of the type described below, to improve the process of deployment of a patch.","In accordance with the invention, a computer (\u201cpatch analysis computer\u201d) is programmed to retrieve via a communication network, metadata (\u201cpatch metadata\u201d) related to one or more patches to be used to change previously installed software (e.g. to repair defects and\/or upgrade functionality) in one or more computers (\u201ctarget computers\u201d). Prior to application of a patch to a target computer, the patch analysis computer performs various kinds of analyses to determine in advance the effect of application of the patches to the previously-installed software, in each target computer. One kind of analysis is based solely on patch metadata, to check if a patch is of a version currently supported for patching. Another kind of analysis is based solely on metadata related to a configuration (\u201cconfiguration metadata\u201d) of each target computer, to check if resources in the target computer required to accept patching are available. Each of the just-described two kinds of analysis do not use metadata used by the other type. Still another kind of analysis is based on use of both patch metadata and configuration metadata, to check whether a patch is suitable for application to a target computer. Subsequent to performing such analysis, the patch analysis computer displays a report (on a video monitor) of results from the analysis, including one or more operations that are recommended to fix issues (if any) found during analysis. After displaying the report, the patch analysis computer receives input from a human on specific patch files and operations. In response to receipt of human input, the patch analysis computer performs operations approved by the human and applies the specific patch files to the previously-installed software in the target computer.","A computer (also called \u201cpatch analysis computer\u201d) is programmed in accordance with the invention to perform analysis on patches to be applied to computers that are to be patched (\u201ctarget computers\u201d), and based on the analysis recommend actions (\u201cremedial operations\u201d) to be performed when the patches are applied. Conceptually one may think of a patch analysis computer as performing a \u201cdry-run\u201d of applying each patch to each target computer, to identify and work out any issues prior to actual deployment, i.e. identify and fix issues in each target computer without actually making any change to the software installed and running in each target computer.","In many embodiments, a patch analysis method  () is performed in one or more computers. Method  obtains at least two kinds of metadata, specifically metadata related to patches in an act  and metadata related to computers containing previously-installed software that is to be patched (\u201ctarget computers\u201d) in an act . Depending on the embodiment, these two acts  and  can be performed in any order relative to one another and may even be performed simultaneously if performed in different computers. As illustrated in , metadata  is related to patches and is available from a vendor that releases the patches. Metadata  identifies, for example, (a) version number of the patches, and a flag indicating whether or not the patches are obsolete (b) prior patches and\/or software products that are required as pre-requisites and\/or co-requisites, and\/or that cause conflicts.","Moreover, metadata  () is related to one or more target computer(s) and is available by polling the target computer(s). For a target computer, metadata  identifies, for example, (a) version number of patches previously applied, and\/or software products previously installed, (b) available disk space, granted privileges, existing directories, running services, and supported commands. Information, which is obtained in the two kinds of metadata  and  in accordance with the invention, depends on the analysis implemented by one or more checks - () using the information.","Typically, metadata  () contains information on issues that may be found in applying a patch and corresponding remedial operations that correct (i.e. fix) the issues. Metadata  of some embodiments also contains information on which specific patch resolves which specific issue in predetermined software that is being patched. The metadata  is typically available for download from vendor's computer  () at a predetermined address on the Internet. In some embodiments, customer's computer  uses a database (\u201cconfiguration management database\u201d or CMDB)  () to store metadata  about the specific configuration of each of computers ,  and  (also called \u201ctarget computers\u201d). Metadata  is also used in some embodiments to identify a specific patch that is applicable to each of target computers - (depending on software installed therein) and to download the identified patch  and its related metadata  into a computer-readable non-transitory storage medium, such as a hard disk for use in installation of the identified patch in target computers -. Certain embodiments store patch metadata  in CMDB  (i.e. in addition to also storing configuration metadata  in CMDB ).","In several embodiments of method  (), acts  and  of collecting metadata are both performed by the same computer (\u201cmanagement computer\u201d)  that is located at a customer's facility, and uses CMDB  for information about the configuration of target computers ,  and . In the embodiments shown in , each of the target computers - is programmed with software (\u201cmanagement agent\u201d) to assist in maintaining CMDB  up to date (i.e. current). Specifically, management computer  of some embodiments uses management agents to collect information on the configuration of software that is installed in target computers -, and then stores the collected information in CMDB . In one illustrative embodiment, a customer uses the above-described software tool called ORACLE\u00ae Enterprise Manager 10.2.0.5 available from Oracle Corporation, Redwood Shores, Calif. In alternative embodiments, instead of using management agents, management computer , to obtain and keep up to date the CMDB , polls target computers ,  and  individually.","Note that target computers ,  and  () are normally located at a facility owned or operated by a customer, and are used in day-to-day activities in the customer's business. In a first example, a target computer  () is programmed with a first type of software, which is database software (such as a relational database management system available from Oracle Corporation), and holds information needed for the customer to perform their normal business functions (e.g. sales data, employee data, customer data, etc). In a second example, a target computer  () is programmed with a second type of software, which is business application software (such as accounting software, HR software, and CRM software) that applies business rules and logic on data in target computer . Another example of application software in computer  is WebMD Health application. In a third example, a target computer  () is programmed with a third type of software, which is middleware software, such as BEA Weblogic.","In some embodiments, computer  () is programmed to perform act  () by automatically retrieving metadata related to patches that are applicable to target computers -. In act , computer  retrieves metadata  () across a communications network (such as the Internet) from a computer  located at the facility owned and\/or operated by a vendor of the predetermined software. Metadata  () is typically expressed (by the software vendor) in an extensible markup language (XML). The content of metadata  depends on the vendor, and for a given vendor also depends on the type of software to which the corresponding patch  () is applicable. This patch metadata will be used in the checks that are performed during analysis, in acts - ().","In certain illustrative embodiments of the invention, prior to installation of patch files in target computers - (), computer  (also called \u201cpatch analysis computer\u201d) performs at least three kinds of checks ,  and  () to determine issues that would arise in application of specific patches to the to-be-patched software that is previously installed and running in one or more of target computers - (). Specifically, in act , computer  checks if a predetermined patch is currently supported by the vendor (e.g. latest version released by the vendor). In act , computer  checks if the predetermined patch to be applied is appropriate for the specific software to be patched (e.g. whether disk space required for patching is less than disk space available in target). In act , computer  checks if the target has one or more resources (e.g. installer software, and administrator privilege) that are known to be needed to apply any patch.","Depending on the embodiment, acts ,  and  may be performed in any order relative to one another. Also depending on the embodiment, acts  and  may be performed multiple times for different portions of respective metadata  and . Also, act  may be repeated for various combinations of the portions of metadata  and . In certain illustrative embodiments, act  is performed x times (e.g. 3 times) and act  is performed at least 10x times (e.g. 30 times). Hence, depending on the embodiments, act  may be performed a number of times that is one order of magnitude or more larger than the number of times act  is performed. Hence, several illustrative embodiments perform an exhaustive analysis of the configuration metadata and perform a cursory analysis of patch metadata (wherein one group of checks for the target computer is an order of magnitude larger in number than another group of checks for the patch to be applied).","If after performing any of acts ,  and  (), no issue is identified, then a \u201csuccess\u201d result is stored in an action  of method . Moreover, if after acts ,  and , an issue is identified, and then a \u201cfail\u201d result is stored in non-volatile memory (e.g. in a database), by performing an act  of method . Any issues identified by performance of each check ,  and  are thereafter used, in several embodiments of patch analysis method , to perform an act  of identifying one or more remedial operations (\u201ccorrective actions\u201d) followed by storing the identified operations in memory in act  along with results of checking.","For example, if a target computer  () is found in act  to have insufficient disk space to apply specific patch file(s), then performance of act  identifies as a remedial operation  () one or more steps (to be performed manually and\/or automatically) to increase space in target computer  by deleting temporary files from and\/or compression of its hard disk and\/or by adding thereto a new hard disk. Other examples of remedial operations include adding of pre-requisite patches, and selecting a newer version of the patch etc. A specific remedial operation that is identified in act  () depends on a corresponding issue that is found during analysis in acts ,  and . In some embodiments, a remedial operation is identified within patch metadata , for each check to be performed in acts ,  and  ().","After act , customer's computer  () displays a report on the results of patch analysis on a video monitor  () for review by a human (e.g. in a role of system administrator). For example, computer  may display on monitor  information on which software features and components of a target are affected by applying a specific patch. Depending on the embodiment, such a report may further identify for each of target computers - (), which specific patches are expected to succeed and which particular patches are expected to fail. Computer  may further display, for each particular patch that is expected to fail, information on one or more remedial operations (\u201cremediation\u201d) that may be performed to avoid failure, i.e. to proactively fix issues before they arise in patching (in act  of ). The specific information being displayed in the report by act  may differ, depending on the embodiment.","In some embodiments, at this stage computer  does not copy and install (i.e. deploy) the patch files into target computers -, and instead waits (as per act  in ) to receive input from the human (also called \u201cpatch analyst\u201d) as to whether or not the analyzed patch files are approved by the human for deployment. If the report on video monitor  does not indicate any issues, the human provides input to computer  approving the installation of the patch files. In response to receipt of the human input in act  and if the input is approval, computer  performs (in act  of ) an application of patch  to predetermined software in target computers - (). Note that patch  is applied with any additional patches that may be necessary to avoid violations, and\/or remediation to avoid issues.","As noted elsewhere, act  () performs copying to target computers -, patch  that repairs and\/or upgrades the previously-installed software therein. When the just-described patch  is applied, remedial operations if any were identified during analysis, are also performed manually and\/or automatically depending on the embodiment. In certain embodiments, if analysis indicates no issues, computer  automatically deploys the patch files without waiting for human approval, but if there are issues to be reported then human approval is awaited as just described.","Analysis of the effects on a target computer, resulting from deploying a patch file prior to the actual deployment is an important aspect of the invention, which provides at least four advantages as follows. Firstly, if all issues are addressed prior to deployment (e.g. by performing remedial operations), system down time is reduced (because of reduced chances of failure during deployment), which is important in some enterprise systems. Secondly, when the effects of patching are determined prior to deployment as described herein, any issues identified in patch analysis can be fixed before deployment of the patch files. Issue resolution prior to deployment saves significant time otherwise spent by a human (e.g. System Administrator) in tracking and investigating issues that are otherwise reported during a failed patch deployment.","Thirdly, patch analysis prevents catastrophic failures in enterprise systems since the patch analysis is done prior to the deployment of patch files. Fourthly, the patch analysis process is automated in many embodiments, which eliminates the need for a full-time human (e.g. patch analyst) who is otherwise required to perform this task in most enterprise environments. Hence, use of patch analysis as described above automates the task of the human, and reduces (or even eliminates) the possibility of human error in the process of patch deployment.","In some embodiments, computer  retrieves from a predetermined website (e.g. \u201cmetalink\u201d website of Oracle Corporation), metadata related to patch files. The metadata in one illustrative embodiment is included in an advisory of the type issued by Oracle Corporation for patching of various ORACLE products. Act  () is performed repeatedly in some embodiments, e.g. on a periodic schedule, such as once a quarter. The schedule and the website are configurable by a human (e.g. a system administrator).","In certain illustrative embodiments, computer  performs the method illustrated in . Specifically, in act , computer  periodically retrieves patch metadata  from a vendor's website, and also periodically receives configuration metadata  from the target computers. Depending on the embodiment, the periodicity of act  may be same or different for the two different types of metadata. Additionally, in act  of , computer  receives human input (e.g. through a graphical user interface, via a mouse and\/or keyboard) a selection of patch files that are to be applied, and a selection of target computers on which the selected patch files are to be applied.","Thereafter, computer  performs at least three kinds of analyses, in acts ,  and  () in a manner similar to that discussed above for acts ,  and  (). Specifically, in respective acts , , and  (), the following analyses are performed: (a) patch readiness analysis based on patch metadata  but not configuration metadata , (b) patch-target dependency analysis based on both metadata  and , and (c) target readiness analysis based on configuration metadata  but not patch metadata . Each of these three kinds of analyses is discussed below.","During a patch readiness analysis performed in act , computer  checks whether any selections made by a human and received in act  during a patching session have become obsolete and\/or are superseded by newer changes. Specifically, in an act A, computer  checks if a human-selected patch file is marked obsolete on the vendor's website for release of patches. If the result of checking is true, then in act B computer  identifies non-application of the selected patch file as one of the possible remedial operation.","Additionally, in an act C, computer  checks if the human-selected patch file is superseded by another version available on the vendor's website. If superseded, then in an act D computer  identifies as a remedial operation, use of said another version. For example a change C on Weblogic is superseded by change C by BEA. In such a case, this analysis operation recommends C be selected instead of C.","During a dependency analysis performed in act , computer  checks whether each patch that has been selected by the user is suited to each target also selected by the user, by performing one or more of the following dependency analyses: (A) Pre-requisite analysis, (B) Cross tier co-requisite analysis and (C) Conflict analysis. These three dependency analyses may be performed in different orders relative to one another, depending on the embodiment. These three dependency analyses as performed in act  of one embodiment, are discussed below.","In acts A-B, computer  performs a pre-requisite analysis. Specifically, in act A, computer  checks whether any changes to be made by the selected patch require other changes to be previously applied; for example a change C on a WebMD Health application requires another change C to be applied prior to C. In this example, presence of change C in the selected patch file of the current patching session or a prior application of C to the target computers in another patching session is checked in act A. Another example is an Oracle Fusion patch requiring another Oracle Fusion patch to be applied.","Note that in several embodiments, the pre-requisite check of act A is performed in a manner similar or identical to Opatch, although in such embodiments computer  is programmed to perform its pre-requisite checking in parallel on multiple target computers (in some embodiments on all targets in an enterprise system) which is a significant improvement over Opatch. Additionally, in act B, computer  identifies as a remedial operation (\u201cremediation\u201d), application of the pre-requisite patch that is missing from the target computer and that is required for application of the selected patch.","In acts C-D (), computer  performs a co-requisite analysis across one or more tiers of software used in the target computers - (). Specifically, in act C, computer  checks whether any changes to be made by the selected patch at one level of a multi-tiered application require other changes to be applied at another level in the same computer or in another computer; for example a change C on WebMD Health application in target computer  () requires change C to be applied on Weblogic middleware in target computer  (), and the change C in turn requires a change C to be applied on an Oracle Database software in target computer . Accordingly, presence of changes C and C in patch files or their prior application is checked in this act C (). Another example is an Oracle Fusion patch requiring a database patch to be applied on the database tier. Note that the database patch may itself require a SQL update and\/or a configuration file update. In act D, computer  identifies as a remediation, application of any co-requisite patch that has been identified in act C as missing from the target computer and that is required for application of the selected patch.","In acts E-F, computer  performs a conflict analysis. Specifically, in act E, computer  checks whether any changes to be made by the selected patch are in conflict with changes selected to be applied in the same patching session or in conflict with changes that were already applied to software on the target computer; for example a change C on Weblogic conflicts with a change C that is already applied, and absence of this conflict is checked during this analysis operation. A conflict arises when two patches have overlapping changes but each patch has at least one change that is not in the other patch. Additionally, in act F, computer  identifies as a remediation, a merge patch that includes all changes in the conflicting patches.","In some embodiments, computer  also performs an impact analysis in act , which may be performed in any order relative to above-described acts -, depending on the embodiment. Act  is optional, and not performed in other embodiments. Specifically, in act  of some embodiments, computer  uses patch metadata  to identify all components that are affected by the patch. Next, computer  queries a model of taxonomy of software installed in target computers - to obtain relationships between files, directories, components, business functions and applications, in the form of a hierarchy of business functions and applications. The hierarchy obtained in act  is stored to memory (in act ) and later displayed in a graphical form to a human (see  for an example). Hence the human can view identities of various components, business functions and applications that are expected to be impacted on application of the selected patch. Some embodiments of act  identify not only the impacted business functionality and the impacted components that need to be tested after application of the patch, but also identifies functionality that would have a downtime. Hence, the results of act  are stored in memory and used in some embodiments to identify testing needs after deployment of the selected patch.","In several embodiments, computer  performs a post-requisite analysis in act , which may be performed in any order relative to above-described acts -, depending on the embodiment. Act  is also optional, and not performed in other embodiments. Specifically, in act  of some embodiments, computer  uses patch metadata  to identify additional patches to be applied and\/or corrective actions to be taken after deploying the selected patch (including manual steps to complete deployment of the selected patch). Hence, the results of act  are also stored in memory in act , and used in some embodiments to after patch deployment.","In some embodiments, computer  performs a rule violation analysis in act , which may be performed in any order relative to above-described acts - and , depending on the embodiment. Act  is also optional, and not performed in other embodiments. Specifically, in act  of certain embodiments, computer  evaluates a number of rules (\u201cchange rules\u201d) to identify any violations and store the violations in memory. The change rule violations are used by computer  to identify one or more additional patches to be applied, and the identity of such additional patches is stored in memory in act .","During a target readiness analysis performed in act , computer  checks whether or not each target computer is ready to be patched, for example by checking for presence of appropriate attributes. As one example, in act A, computer  checks if read and write permissions are granted in each target computer so that one or more files of the to-be-patched software can be overwritten. If the result of checking is false for any specific target computer, then in act B computer  identifies as the remedial operation, the grant of read and write privileges in that specific target computer.","As another example, in act C, computer  checks if several commands that are normally issued during application of a patch are supported in each target computer. If the result of checking is false for any specific target computer, then in act D computer  identifies as the remedial operation, non-application of any patches to that specific target computer or ask the user to ensure the commands works before proceeding with the patch application.","As yet another example, in act E, computer  checks if the location of the software to be patched is identified in a variable of a predetermined name (e.g. in a registry) in each target computer. If the result of checking is false for any specific target computer, in act F computer  identifies as the remedial operation, initialization of the variable of the predetermined name to be same as a path to the location of the software in that specific target computer.","As still another example, in act G, computer  checks if one or more predetermined services (such as an installer, JDK, svchost, DLLs etc) are active in each target computer. If the result of checking is false for any specific target computer, in act H computer  identifies as the remedial operation, activation of the predetermined service(s) in that specific target computer.","After performance of one or more analysis operations as described above in acts -,  and , computer  stores the results of analysis and remedial operations identified (if any) in act  (). The stored results and remedial operations (if any) are displayed as a report on a video monitor  as illustrated in . In some embodiments, the results are not displayed until a human (e.g. patch analyst) provides input, e.g. clicks a specific button (or a sequence of buttons) in a user interface, to trigger display of the report containing the results. Such a report may include, for example, information on which patches are expected to be successfully applied (labeled \u201cpass\u201d in ), and which patches are expected to fail on application (labeled \u201cfail\u201d in ).","For patches expected to fail, computer  of some embodiments may further include in the report being displayed, one or more remedial operations (labeled as \u201crecommendations\u201d in ). Note that in the illustration shown in , only one remedial operation (see the fifth row) is identified in the \u201crecommendations\u201d column, as only one patch is expected to fail. For the remaining patches which are expected to pass, e.g. the first through fourth rows and sixth through tenth rows in  the recommendation column is blank, as they are all expected to pass. Examples of recommendations include applying other patches and\/or shutting down a database instance and\/or increasing available disk space and\/or changing read\/write permissions, etc. After display of the report, computer  awaits human input.","Certain embodiments of the invention perform the analysis of acts - () on a set of patch files that are selected by a human (\u201cpatch analyst\u201d) for application to specific target computers (previously identified by the human for application of patches). The human-selected patch files may be, for example, a subset of patch files that have been identified by a software vendor in an advisory (described below). The identity of patch files is maintained, in certain embodiments of the invention, in a data structure in a volatile memory of computer , implemented for example as a linked list.","In some embodiments, the just-described data structure is included in an object called \u201cchange cart\u201d or simply \u201ccart\u201d in a memory of computer . To summarize, some embodiments use a change cart to hold identities of patch files that are to be analyzed and\/or that are analyzed and are modified with additional patch files to be manually approved, and\/or that are approved and are to be deployed. Note that use of a change cart is not a critical aspect of this invention, and as will be apparent to the skilled artisan in view of this disclosure, different data structures are used in other embodiments.","One exemplary implementation of programming computer  is with software  called \u201cAnalysis Engine\u201d that performs the method illustrated in . The Analysis Engine has an application programming interface (API) that may be invoked to start execution of various types of analysis operations supported by the analysis engine . Analysis engine  loops through one or more acts that are repeatedly performed for each of several target computers that are identified in computer  for application of patches in the change cart.","Specifically, in act , a change cart of the type described above is received. Next, in act , a target type is selected from among a list of predetermined types of target computers, the type being based on the specific software which is installed in each computer. Examples of predetermined types of target computers are: Oracle Database, Oracle RAC Database, Oracle Application Server, Oracle Agent etc. Next, in act , a target computer (also called \u201ctarget\u201d) is selected, from among multiple target computers of the target type selected in .","Next, in act , a function called \u201cTarget Analyzer\u201d is in a loop that iterates over different target types in the change cart. For each target type (e.g. database type, middleware type and application type) selected in an iteration of the loop, computer  loops over all target computers of the selected type which are identified in the change cart. In the call to the function Target Analyzer, the first argument contains the execution context of a deployment service used by computer . Deployment service is a centralized framework used in any computer executing the software Enterprise Manager available from Oracle Corporation, for running any kind of operations on various software targets and it makes calls to specific APIs for a given operation. The second argument in a call to Target Analyzer contains the host name of the target computer. The third argument supplied to the Target Analyzer, contains directory location in a computer-readable non-transitory storage medium (e.g. hard disk) of the target computer where the software to be patched is stored. The fourth argument contains a reference to a software library in the target computer in which the patch file is stored. The fifth argument contains a list of updates that have been selected to be applied to the target computers.","When invoked, the function Target Analyzer  of this exemplary implementation performs the following twenty-five checks while performing target readiness analysis  () of a target computer. However, as will be apparent to the skilled artisan in view of this disclosure, other implementations of target readiness analysis omit one or more of these checks and\/or perform additional such checks.","1. Check validity of Central Inventory location\u2014in this check, the function Target Analyzer checks if the central inventory pointer points to a valid central inventory directory. The central inventory directory contains information of all installed software on a host along with details of any patches that has been applied on the various software installations on the host. If this check fails, the remedial operation is to ensure that the central inventory location points to the correct central inventory directory.\n\n2. Check Central Inventory For Patching Session\u2014in this check, function Target Analyzer checks if the above-described central inventory directory has appropriate permissions to allow reading and writing files in a session (called \u201cRWSession\u201d) to be used in deploying patch files. If this check fails, the remedial operation is to set read and write permission for the patching user to the central inventory directory.\n\n3. Check System Command Available\u2014in this check, function Target Analyzer checks if all the required system commands to perform the patching operation are available or not in each of target computers -. If this check fails, the remedial operation is to install and activate the identified unavailable commands.\n\n4. Check Active Files And Executables\u2014in this check, function Target Analyzer checks if any of the files and\/or executables which are to be patched, are active in each of target computers -. If this check fails the remedial action is to stop the processes that are using these files\/executables.\n\n5. Check Active Services\u2014in this check, function Target Analyzer checks if predetermined services are active in the target computer - (e.g. if application software is to be patched, then check that the following predetermined files are being executed\u2014EvtEng.exe, svchost.exe, jusched.exe, Isass.exe, services.exe, winlogin.exe, wdfmgr.exe). If this check fails, the remedial operation is to activate whichever service in the target computer is inactive.\n\n6. Check If Directory For Patching Is Locked\u2014in this check, function Target Analyzer checks if the central inventory directory is locked by previous unsuccessful session of patching (e.g. by OPatch). If this check fails, the remedial operation is to retry the patching action after the previous patching session is complete.\n\n7. Check JDK\u2014in this check, function Target Analyzer checks if a Java developer's kit (JDK) is installed in the target computer -. If this check fails, the remedial operation is to download and install JDK.\n\n8. Check Vendor Home\u2014in this check, function Target Analyzer checks if the directory identified in the variable of predetermined name e.g. environmental variable ORACLE HOME has the contents needed for patching, e.g. by checking if this directory (\u201cvendor's home directory\u201d) holds predetermined files and directories with permissions that have been predetermined as being proper (\u201cproper permissions\u201d). If this check fails, the remedial operation is to ensure that the environment variable points to the right installation directory and or the identified issues with the installation directory are fixed.\n\n9. Check Installer Location\u2014in this check, function Target Analyzer checks if the vendor's home contains predetermined software for an installer (such as OUI). If this check fails, the remedial operation is to obtain a copy of the installer.\n\n10. Check If Installer Version Is Compatible\u2014in this check, function Target Analyzer checks if the required version of installer software (e.g. OUI) is present in the vendor's home directory. If this check fails, the remedial operation is to obtain a copy of the installer.\n\n11. Check Required Libraries\u2014in this check, function Target Analyzer checks if all the required libraries are present in the vendor's home directory. If this check fails, the remedial operation is to obtain a copy of the libraries or re-install the software.\n\n12. Check User Admin Privilege\u2014in this check, function Target Analyzer checks if the user is root. If this check fails, the remedial operation is to run the patching session as a non-root user,\n\n13. Check Applicable\u2014in this check, function Target Analyzer checks if all actions of the patch are applicable for the vendor's home directory. All software installations do not have all the optional components that comes with the software install bits. Patches are applicable to one or more components. If the components required for the patch are not in the installation then the patch is not applicable. If this check fails, the remedial operation is to not apply the selected patch.\n\n14. Check Patch Applicable On Current Platform\u2014in this check, function Target Analyzer checks if the patch is applicable for the current platform. Patches are platform specific or generic. Software installation is platform specific. Compatibility needs to exist between the platform of the patch and that of the software installation. If this check fails, the remedial operation is to not apply the selected patch.\n\n15. Check System Space\u2014in this check, function Target Analyzer checks if the target computer's disk has enough free space available to install the patch. If this check fails, the remedial operation is to request a human to increase available space.\n\n16. Check If Rollbackable\u2014in this check, function Target Analyzer checks if the patch can be rollbacked completely. In certain cases a pre-requisite patch need to exist already in the software installation when a new patch is applied. In such a case the pre-requisite patch cannot be rollbacked unless the dependent patch is also rollbacked. If this check fails, the remedial operation is to not apply the selected patch.\n\n17. Check Cluster Node List\u2014in this check, function Target Analyzer checks if all the nodes in the RAC setup are valid and reachable, e.g. by sending a ping message to each node. If this check fails, the remedial operation is to ensure that all nodes of the cluster are rectified and are able to communicate with one another.\n\n18. Check Remote Command Invocable\u2014in this check, function Target Analyzer checks if commands can be invoked on a remote node of a cluster, e.g. by invoking a command to display a directory listing. If this check fails, the remedial operation is to ensure that all nodes of the cluster are rectified and are able to communicate with one another.\n\n19. Check Remote Copy And Remove\u2014in this check, function Target Analyzer checks if a file be copied and removed from the target computer, e.g. by copying a predetermined file to the target computer and then deleting it. If this check fails, the remedial operation is to ensure that all nodes of the cluster are rectified and are able to communicate with one another. The patching user must have read, write permission on remote nodes.\n\n20. Check For Cluster Home If Cluster\u2014in this check, function Target Analyzer checks if this is a RAC setup, then check if there logical composite directory listed in the inventory that has child node details. If the check fails then the cluster is faulty and the setup rectified.\n\n21. Check Conflict Against Vendor Home\u2014in this check, function Target Analyzer checks if the patches to be applied have any conflicts among themselves and with the patches present in the vendor's home directory. If this check fails, the remedial operation is to not apply the selected patch or find for superset patch that resolves the conflicts.\n\n22. Check Installed One Offs\u2014in this check, function Target Analyzer checks if all the specified patch IDs for rollback are present in the vendor's home directory. If this check fails, the remedial operation is to not apply\/rollback the selected patch.\n\n23. Check Patch Apply Dependents\u2014in this check, function Target Analyzer checks if all the patches required by the given patch(es) are present in the vendor's home directory. If this check fails, the remedial operation is to not apply the selected patch.\n\n24. Check Patch Rollback Dependents\u2014in this check, function Target Analyzer checks if there are any patches in the vendor's home directory that depend on the patches to be rolled back. If this check fails, the remedial operation is to not apply the selected patch.\n\n25. Check Applicable Product\u2014in this check, function Target Analyzer checks if the patch (es) is applicable on the product type represented by the vendor's home directory. If this check fails, the remedial operation is to not apply the selected patch.\n","Results of performing target analysis at the end of act  are stored in an output file (e.g. in XML format) in each target computer - that was analyzed. In one embodiment, the output file is stored in a predetermined directory therein called \u201cstaging folder.\u201d Note that in due course, output file is transferred from the target computer's staging folder to customer's computer . Output file (e.g. in XML) is then parsed, and the results are stored in database tables in customer's computer .","Next, in act  (), a function called \u201cPatch Analyzer\u201d is in a loop that iterates over multiple patches in the change cart. The Patch Analyzer (also called \u201cMetalinkAnalyzer\u201d) uses predetermined rules and\/or logic to check (e.g. see act  in ) whether or not the patch files being analyzed are the most current files available in vendor's computer . Following are several checks that are done during performance of patch readiness analysis (as per act  in ) using information in a vendor's computer , by a Patch Analyzer of some embodiments:","1) Check If Patch Is Obsolete\u2014in this check, the Patch Analyzer checks whether the patch being applied has been marked obsolete in vendor's computer . If this check fails, the remedial operation is to not apply the selected patch or let the patch approver to decide taking up the newer version.\n\n2) Check If Patch Is Password Protected\u2014in this check, the Patch Analyzer checks whether the patch being applied is password protected. The check fails if the patch password is not provided. If this check fails, the remedial operation is to not apply the selected patch.\n\n3) Check Patch's Version\u2014in this check, the Patch Analyzer checks whether the patch is available for multiple versions and whether the one selected is a latest version or not. If this check fails, the remedial operation is to use the latest version of the selected patch or consciously make the decision to apply the patch of lower version. Results of act  are written to a database table (e.g. stored in a database (such as CMDB) in customer's computer  which is performing act ), and hence this database table holds analysis results.\n","Next, in act  (), a function called \u201cImpact Analyzer\u201d is in a loop that iterates over multiple patches in the change cart. The Impact Analyzer iterates over each patch file in the change cart and uses predetermined rules and\/or logic to perform impact analysis (e.g. see act  in ). Specifically, impact analyzer of some embodiments performs the following checks:\n\n","Next, in act  (), a function called Post Requisite Analyzer is invoked to iterate over each patch in the change cart and performs a post requisite analysis by using predetermined rules and\/or logic. Following are the checks done by Post Requisite Analyzer of some embodiments:\n\n","Next, act  invokes a function called \u201cRule Violation Analyzer\u201d (also called ConfigStdAnalyzer). The Rule Violation Analyzer iterates over each patch file in the change cart and uses predetermined rules and\/or logic to check on violations (of rules in a configuration standard) that are fixed by application of the patch and also check whether any new violations may be raised by applying the patch. Following are the checks done by the Rule Violation Analyzer of some embodiments:\n\n","Note that a configuration standard of some embodiments is a standard by which target computers - are measured or judged by the Rule Violation Analyzer. A configuration standard is comprised of one or more rules, optionally organized into a hierarchy using rule folders, which are managed as a group. A system administrator entering human input in customer's computer  sets up the configuration standards, to define a desired state of software installed in target computers -","Next, in act , a function called \u201cDependency Analyzer\u201d iterates over each patch file in the change cart and uses predetermined rules and\/or logic to check on pre-requisites, co-requisites, and conflicts as noted above. Following are the checks done by the Dependency Analyzer of some embodiments:\n\n","On completion of act , an act  is performed to check if all targets of the selected target type have been visited (e.g. if all database servers have been visited), and if not control transfers to act , which has been discussed above. If all targets of the selected target type have been visited, then control transfers to act  to check if all target types have been visited and if not control transfers to act  (discussed above). The types of checks perform in each of the blocks mentioned above could differ from target type to target type. The kinds of checks are metadata driven. If the answer is yes in act , control transfers to act  whereby the results stored in database tables are displayed to a human (patch analyst) in a graphical user interface (analysis UI).","The method  illustrated in  is performed in some embodiments of the invention by use of three tables as illustrated in . Specifically, in an illustrative embodiment, a change cart is stored in computer  as a row in a database table called \u201cchange_cart_details.\u201d This table contains the following columns. The first column is cart_guid, populated with a globally unique identifier that is used as an identifier of the cart. The second column is cart_name, populated with a string of characters manually typed on a keyboard by a patch analyst when creating a cart, and used thereafter to identify the cart to the patch analyst. The third column is rfc, which is populated with a string of characters manually typed on a keyboard by the patch analyst to identify a \u201crequest for change\u201d identifier. The rfc field can be empty if the patch analyst does not have a request id for creating the change cart. The fourth column is \u201ccreated_by\u201d which identifies a name (first name followed by last name) of the patch analyst that created the cart. The fifth column is \u201ccreated_date\u201d which identifies the date on which the cart was created.","In the illustrative table change_cart_details () the sixth column is \u201clast_modified_by\u201d which contains the user id (e.g. name) of a person (e.g. patch analyst) who last updated any field of the change cart. The seventh column is \u201clast_modified_date\u201d which contains the date on which change cart was last modified. The eighth column is \u201cschedule\u201d which contains the planned date and time for change cart deployment start. The ninth column is \u201ccurrent_assignee\u201d is the user id (e.g. name) of a person (e.g. patch analyst) to whom change cart is currently assigned. The tenth column is \u201cdeployment_start\u201d which gives a start time of the cart deployment. The eleventh column is \u201cdeployment_end\u201d which is approximate date and time at which deployment is expected to complete.","In the illustrative table change_cart_details (), the twelfth column is \u201cdeployment_status\u201d which contains the current state of the change cart. Various possible states are: created, assigned, reassigned, approved, rejected, analyzing, analysis succeeded, analysis failed, deploy succeeded, deploy failed. The thirteenth column is \u201cpackage_urn\u201d which contains the unique identifier of the corresponding deployment object corresponding to the cart. The fourteenth column is \u201crunning_time\u201d which is used to store the approximate amount of duration for which the change cart deployment is expected to run. The fifteenth column is \u201capprover\u201d which contains user id (e.g. name) of the person who would have authority to approve or reject a change cart for deployment.","In the illustrative table change_cart_details (), the sixteenth column is \u201capproval_status\u201d which contains the current status of cart approval. The seventeenth column is \u201cgate\u201d which is used to denote whether a cart is locked or open for modifications. If a gate is set on a cart, it is locked and cannot be modified by any user till the gate is unset. The eighteenth column is \u201cattachment_urn\u201d which contains the unique identifier of the attachments linked with the cart.","In addition to the above-described table change_cart_details in a database, some embodiments also use two additional tables, namely (1) \u201cchange_cart_analysis\u201d and (2) \u201cMGMT_CART_ANALYSIS_RESULTS\u201d illustrated in , which are together used to store the details of change cart analysis. Specifically, in one illustrative embodiment, table change_cart_analysis has the following five columns. First column of table change_cart_analysis is \u201canalysis_guid\u201d which is the unique identifier for a given analysis. The second column is \u201ccart_guid\u201d which is a foreign key from the above-described change_cart_details table. This foreign key is used to store an identifier of the change cart. The third column is \u201cinstance_name\u201d which is the name of deployment instance which ran the analysis job. The fourth column is \u201canalysis_type\u201d which contains the type of analysis (e.g. target readiness analysis or patch readiness analysis etc) performed on the cart. The fifth column is \u201cstart_datetime\u201d which contains start date and time for the analysis. The sixth column is \u201cend_datetime\u201d which the date and time at which the analysis ended.","Moreover, in the illustrative embodiment, table MGMT_CART_ANALYSIS_RESULTS contains the following thirteen columns. First column is the \u201crecommendation_guid\u201d which is a globally unique identifier for each recommendation from analysis engine. The second column is \u201canalysis_guid\u201d which is a foreign key from change_cart_analysis table. The third column is \u201ctarget_guid\u201d which is a globally unique identifier of the target computer on which the analysis recommendation is shown. The fourth column is \u201cupdate_id_list\u201d which contains update identifier for the patch. The fifth column is \u201crecommendation_target\u201d which contains the target identifier for which a recommendation is generated.","The sixth column of the illustrative table MGMT_CART_ANALYSIS_RESULTS is \u201crecommendation_update\u201d which stores the update on which the recommendation is generated. The seventh column is \u201ccheck_performed\u201d which is used to store a type of check which was performed for the given analysis type. The eighth column is \u201ccheck_desc\u201d which contains a visual description of the check performed. The ninth column is \u201cresult\u201d which contains status of analysis check done. The result can have values \u201cpassed\u201d and \u201cfail\u201d. The tenth column is \u201cresult_desc\u201d which contains description of the result obtained. The eleventh column is \u201crecommendation\u201d which stores recommended course of action for the given analysis result (that's whether to accept it or reject). The twelfth field is \u201cis_actionable\u201d which stores whether the analysis result is readonly or actionable from UI. The thirteenth column is \u201cuser_action\u201d which describes the supported user action with the specified analysis result.",{"@attributes":{"id":"p-0086","num":"0096"},"figref":"FIG. 4D","ul":{"@attributes":{"id":"ul0009","list-style":"none"},"li":{"@attributes":{"id":"ul0009-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0010","list-style":"none"},"li":["a) target_name: name of the target, e.g. DB001","b) target_type: family of the target, like standalone database, rac, Clusterware etc","c) inventory_path: installation home","d) host: machine on where installation is done (e.g. \\\\182.123.120.20 in )","e) version: the release of the software install (e.g. 12.301.1 in )","f) related targets: information of other related targets like listener, ASM (Automatic storage management), CRS (Clusterware) etc"]}}}},"Note that the tables shown in  are merely illustrative of data that is stored in one embodiment of the invention, and such tables may have additional columns for other data, depending on the embodiment. Many such embodiments execute centralized software (e.g. analysis engine) to generate reports based on performance of various types of analysis, in a manner not believed to be disclosed in any prior art known to the inventors. In some embodiments, this design is generic and can be used for building an analysis engine for use in deployment of any software.","Note that in some embodiments, acts  to  are performed as described herein, within an asynchronous job which triggers each of these acts. Accordingly, in several embodiments, such acts retrieve relevant data from change_cart_details table and perform a specific type of analysis on the retrieved data. Certain embodiments implement additional tables for a change cart, for use in storing store finer details of cart contents (e.g. config standard name, rule name, update details, platform, approver etc). The additional tables are not critical to practicing the invention.",{"@attributes":{"id":"p-0089","num":"0105"},"figref":["FIG. 4C","FIG. 4A","FIG. 4C"]},"public class ChangeCart creates a deployment instance from change cart package and submits the cart for analysis. It adds an action \u2018Cart Analyzed\u2019 into history of the cart and returns the deployment instance name","public class CartAnalysis stores the common attributes for a single analysis run for a specific analysis type. This class contains a list of recommendations, in addition to other attributes, such as analysis type, time, instance name etc. In one illustrative embodiment, the analysis engine determines recommendations and stores the recommendations in repository tables. In this embodiment, objects of this class CartAnalysis are populated using repository data when user interface screens are rendered.","Public class CartAnalysisInfo stores the results and recommendations from a single analysis run.","Public class MetalinkAnalyzer gets the ChangeCart object using the cart guid and iterates over each update in change cart and performs the metalink validations on the updates. Finally results are written to analysis result table using API's in CADataSource.","Public class ImpactAnalyzer is invoked from an Exec Java step in PatchingCart package. The method gets the ChangeCart object using the cart guid and iterates over each update in change cart and performs the impact analysis. Finally results are written to analysis result table using API's in CADataSource.","Public class PostReqAnalyzer is invoked from an Exec Java step in PatchingCart package. The method gets the ChangeCart object using the cart guid and iterates over each update in change cart and performs the post requisite analysis. Finally results are written to analysis result table using API's in CADataSource.","Public class ConfigStdAnalyzer is invoked from an Exec Java step in PatchingCart package. The method gets the ChangeCart object using the cart guid and iterates over each update in change cart and checks the Config Standard violations fixed by various patches and also checks whether any new violations may be raised by applying the patches. Finally results are written to analysis result table using API's in CADataSource.","Public class function Target Analyzer is invoked from an Exec java step called Transfer Results. The method gets the changeCart object using the cart guid, gets xml results from the target machine, parses the xml file and writes the result to analysis results tables using API's in CADatasource.","Database layer (CADatasource) class has the following methods for updating Analysis data. public void insertAnalysisResults inserts the result of analysis into table CHANGE_CART_ANALYSIS and MGMT_CART_ANALYSIS_RESULTS. public void getCartAnalysis retrieves the result of analysis for a specified change cart from repository and sets the analysis results for the change cart object.","In one illustrative embodiment of the invention, a patch analyst provides human input to computer  through a software tool called Enterprise Manager which is similar to the above-described ORACLE\u00ae Enterprise Manager 10.2.0.5, but modified as described herein. The Enterprise Manager of the illustrative embodiment enables a human (in the role of a patch analyst) to assign patch files to a change cart, and permits the patch analyst to access reports () resulting from analysis in act  (). More specifically, in the illustrative embodiment, the Enterprise Manager includes software called Change Management which provides an automated workflow-enabled way to have software in target computers adhere to a set of configuration standards","In the illustrative embodiment, one particular type of configuration standard is called \u201cChange Management Configuration Standards\u201d if it contains one or more Change Rules. A Change Rule is a rule that is supported by the Change Advisor (described below). A Change Advisor supports a set of rules based on the type, subtype and reason of the rule. A Change Rule when executed stores in memory of vendor computer , violation context information on a software update to be applied, to fix the violation of the rule. A specific type of Change Management Configuration Standard is called \u201cPatch Configuration Standards\u201d if it specifies the set of software updates (patches) that need to be applied based on some criteria. A Patch Configuration Standard consists of Patch Rules. A Patch rule is a rule that describes patches to be applied on a product installation. The patch rule when executed, also stores in memory of vendor computer , its violation context including an identity of the software update and a target computer that requires the software update.","In the illustrative embodiment, Change Management uses software called Change Advisor to perform repeated monitoring of configuration standards in computer . Change Advisor repeatedly also monitors vendor's computer  to check for any required patch files (also called \u201csoftware updates\u201d). Change Advisor displays software updates that are recommended by a software vendor for the specific software installed in the customer's target computers (also called \u201csoftware environment\u201d). Specifically, Change Advisor displays to a patch analyst the software updates to be applied on software installed in target computers, based on advisories and optionally also based on additional information in the form of Recommended Software Updates and\/or Certified Configuration of the type published by Oracle Corporation.","In the illustrative embodiment, an advisory is information published by the software vendor detailing issues in their previously-released software and identities of software updates that resolve the issues. Customers are advised to use the advisory to do a status check on their installed software, and apply those software updates that are applicable to their software (in target computers). An advisory is expressed in the form of meta-data conforming to a published schema. One specific type of advisory is called \u201cCritical Patch Advisory\u201d which has information on security vulnerabilities in the software and identifies a critical patch update. A critical patch update is a one off patch or a patchset that resolves an issue in an advisory.","In the illustrative embodiment, a Recommended Software Update is created when a list of recommended software updates (i.e. patches) is downloaded by Enterprise Manager from the vendor's computer . A Change Rule in the Recommended Software Update, when executed, evaluates the applicability of recommended software updates in the downloaded list on the installed software in the customer's target computers. A Certified Configuration specifies rules of configuration of Oracle product installations in a target computer, published by the software vendor (e.g. Oracle Corporation) as best practices.","In the illustrative embodiment, the Change Advisor guides a patch analyst through the process of analyzing software updates they choose to apply to the target computers. Change Advisor works in tandem with one or more software update management modules. Change Advisor uses a software updates automation module to apply software updates to an Oracle installation in the target computers. Patching in the illustrative embodiment allows a BPEL based process workflow that guides the patch analyst through getting advice on software updates via the Change Advisor, creating and analyzing the change cart, approval of updates in the change cart to application of the updates on the target computers.","In the illustrative embodiment, a Change Rule includes information on how to remediate or fix a violation of that Change Rule. The remediation information is put into the violation context of a DMQL query that expresses the Change Rule. The DMQL query in a Change Rule returns an identity of the target computer in violation, a package template that fixes the violation, as well as parameters to pass to a package instantiated by the package template, to fix the violation.","In the illustrative embodiment, the Change Advisor operates on metadata which is expressed in an XML file called the ChangeAdvisorRule metadata. Humans, such as system administrators, system integrators and patch analysts can enter new entries into this file. Use of the file allows the Change Advisor to support new types of rules that may be expressed in Configuration Standards, as well as enables a human to identify a package to be used to remediate violation of the rule. In the illustrative embodiment, the ChangeAdvisorRule meta-data has the following information: Type, Subtype, Reason of Rule, Package Template, and Parameter List.","More specifically, in the illustrative embodiment, the Change Advisor works with metadata that expresses the type, subtype and reason of the rules that the Change Advisor knows about. The set of type-subtype-reason of Rules supported by the Change Advisor is specified in ChangeAdvisorRule metadata. The metadata includes additional information on the package to be deployed to remediate a violation of the Change Rule, the parameter list to pass to the package, and the parameter list to display to a human in the context of the Change Advisor GUI. For each type-subtype-rule entry in the ChangeAdvisorRule meta-data, the package template and the parameter list is specified in the same meta-data. Examples of the metadata are listed in the following table:",{"@attributes":{"id":"p-0108","num":"0124"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"49pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}},{"entry":[{},{},"Package","Parameter"]},{"entry":["Type","Subtype","Template","List"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Oracle","Critical","Oracle","PatchIDs"]},{"entry":["Software","Patches","Software",{}]},{"entry":["Update",{},"Update",{}]},{"entry":[{},{},"package",{}]},{"entry":["Oracle","Recommended","Oracle","PatchIDs"]},{"entry":["Software","Patches","Software",{}]},{"entry":["Update",{},"Update",{}]},{"entry":[{},{},"package",{}]},{"entry":["Linux",{},"Linux","RPMList"]},{"entry":["Update",{},"Update",{}]},{"entry":[{},{},"package",{}]},{"entry":["Customer","Customer",{},"PatchIDs,"]},{"entry":["inserted","inserted sub",{},"portNos"]},{"entry":["type","type"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}}}}},"In the illustrative embodiment, the Change Advisor enables the patch analyst to see a report of software updates, with minimum impact or with maximum coverage. The report type is specified in a setup of the Change Advisor. In one type, the report shows software updates with minimum impact at the same code level (same patchset level) or the ones in which the minimum upgrade is required. In another type, the report shows software updates with maximum coverage at the latest code level (latest patchset level).","The method of  may be used to program a computer system  of the type illustrated in , which is discussed next. Specifically, computer system  includes a bus  () or other communication mechanism for communicating information, and a processor  coupled with bus  for processing information. Computer system  also includes a main memory , such as a random access memory (RAM) or other dynamic storage device, coupled to bus  for storing information and instructions (e.g. for the method of ) to be executed by processor .","Main memory  also may be used for storing temporary variables or other intermediate information (e.g. patch metadata as shown in  and\/or configuration information) during execution of instructions to be executed by processor . Computer system  further includes a computer-readable non-transitory storage medium, such as a read only memory (ROM)  or other static storage device coupled to bus  for storing static information and instructions for processor . A storage device , such as a magnetic disk or optical disk, is provided and coupled to bus  for storing information and instructions.","Computer system  may be coupled via bus  to a display device or video monitor  such as a cathode ray tube (CRT) or a liquid crystal display (LCD), for displaying information to a computer user. An input device , including alphanumeric and other keys (e.g. of a keyboard), is coupled to bus  for communicating information and command selections to processor . Another type of user input device is cursor control , such as a mouse, a trackball, or cursor direction keys for communicating direction information and command selections to processor  and for controlling cursor movement on display . This input device typically has two degrees of freedom in two axes, a first axis (e.g., x) and a second axis (e.g., y), that allows the device to specify positions in a plane.","As described elsewhere herein, collecting and analyzing statistics of components in a distributed database system is performed by computer system  in response to processor  executing one or more sequences of one or more instructions contained in main memory . Such instructions may be read into main memory  from another computer-readable non-transitory storage medium, such as storage device . Execution of the sequences of instructions contained in main memory  causes processor  to perform the operations of a process described herein and illustrated in . In alternative embodiments, hard-wired circuitry may be used in place of or in combination with software instructions to implement the invention. Thus, embodiments of the invention are not limited to any specific combination of hardware circuitry and software.","The term \u201ccomputer-readable non-transitory storage medium\u201d as used herein refers to any storage medium that holds information in a non-transitory manner, and participates in providing instructions and\/or data to processor  for execution therein and\/or thereon. Such a storage medium may take many forms, including but not limited to (1) non-volatile storage media, and (2) volatile storage media. Common forms of non-volatile storage media include, for example, a floppy disk, a flexible disk, hard disk, optical disk, magnetic disk, magnetic tape, or any other magnetic medium, a CD-ROM, any other optical medium, punch cards, paper tape, any other physical medium with patterns of holes, a PROM, and EPROM, a FLASH-EPROM, any other memory chip or cartridge that can be used as storage device . Volatile storage media includes dynamic memory, such as main memory  which may be implemented in the form of a random access memory or RAM.","Instead of or in addition to a computer-readable non-transitory storage medium, a transmission link may be used to provide instructions to processor . A transmission link includes coaxial cables, copper wire and fiber optics, including the wires that comprise bus . A transmission link can also take the form of acoustic or light waves, such as those generated during radio-wave and infra-red data communications, any of which can be used to implement a carrier wave as described herein.","Accordingly, instructions to processor  can be provided by a non-transitory storage medium from which a computer can read information, such as data and\/or code. Specifically, various forms of computer-readable non-transitory storage medium may be involved in providing one or more sequences of one or more instructions to processor  for execution. For example, the instructions may initially be comprised in a storage device, such as a magnetic disk, of a remote computer (e.g. vendor's computer). The remote computer can load the instructions into its dynamic memory (RAM) and send the instructions over a telephone line using a modem. A modem local to computer system  can receive the information on the telephone line and use an infra-red transmitter to transmit the information in an infra-red signal. An infra-red detector can receive the information carried in the infra-red signal and appropriate circuitry can place the information on bus . Bus  carries the information to main memory , from which processor  retrieves and executes the instructions. The instructions received by main memory  may optionally be stored on storage device  either before or after execution by processor .","Computer system  also includes a communication interface  coupled to bus . Communication interface  provides a two-way data communication coupling to a network link  that is connected to a local network . Local network  may interconnect multiple computers (as described above). For example, communication interface  may be an integrated services digital network (ISDN) card or a modem to provide a data communication connection to a corresponding type of telephone line. As another example, communication interface  may be a local area network (LAN) card to provide a data communication connection to a compatible LAN. Wireless links may also be implemented. In any such implementation, communication interface  sends and receives electrical, electromagnetic or optical signals that carry digital data streams representing various types of information.","Network link  typically provides data communication through one or more networks to other data devices. For example, network link  may provide a connection through local network  to a host computer  or to data equipment operated by an Internet Service Provider (ISP) . ISP  in turn provides data communication services through the world wide packet data communication network  now commonly referred to as the \u201cInternet\u201d. Local network  and network  both use electrical, electromagnetic or optical signals that carry digital data streams. The signals through the various networks and the signals on network link  and through communication interface , which carry the digital data to and from computer system , are exemplary forms of carrier waves transporting the information.","Computer system  can send messages and receive data, including program code, through the network(s), network link  and communication interface . In the Internet example, a server  might transmit statistics of components in a distributed database system through Internet , ISP , local network  and communication interface .","The instructions for performing the operations of  may be executed by processor  as they are received, and\/or stored in storage device , or other non-volatile storage for later execution. In this manner, computer system  may obtain the just-described instructions and any related data in the form of a carrier wave.","Note that  is a very low-level representation of many hardware components of a computer system. Several embodiments have one or more additional software components in main memory  as shown in : Database Server  (e.g. a server available from ORACLE Corporation) that provides access to a source database, and a PL\/SQL application  which changes records in the source database via an interface provided a database management system in server .","Numerous modifications and adaptations of the embodiments described herein will become apparent to the skilled artisan in view of this disclosure. In some embodiments, there can be more than one versions of a patch with given patch identifier. For example a patch may be applicable on 10.2.0.1 and 10.2.0.2 databases, and if so there are 2 valid versions of this patch. Hence, in such embodiments, vendor's computer  checks if the patch to be applied is an obsoleted version which is available but not recommended by the vendor and if so notifies the patch analyst. Numerous modifications and adaptations of the embodiments described herein are encompassed by the scope of the invention."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE FIGURES","p":[{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIGS. 1A and 1B"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 2A"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 2B"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 3A"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 3B"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 3C"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 4A"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":["FIG. 4B","FIG. 4A"]},{"@attributes":{"id":"p-0025","num":"0024"},"figref":["FIG. 4C","FIG. 4A"]},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 4D"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":["FIGS. 5A and 5B","FIG. 2A","FIG. 2B"]}]},"DETDESC":[{},{}]}
