---
title: Providing a search service including updating aspects of a document using a configurable schema
abstract: Embodiments provide indexing and searching features including the use of a configurable schema as part of providing partial update support of one or more aspects of an electronic document or documents, but are not so limited. In an embodiment, a system is configured to provide search services including partial update functionality based in part on use of a configurable schema to manage partial document updates and/or query processing operations. A method of one embodiment operates to use a configurable schema to define a number of merge sets that group various document attributes based in part on data source, update, and/or usage parameters to provide an efficient partial update mechanism. Other embodiments are included.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09104748&OS=09104748&RS=09104748
owner: Microsoft Technology Licensing, LLC
number: 09104748
owner_city: Redmond
owner_country: US
publication_date: 20111021
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["Electronic documents can be large and costly to parse, process, and index, due in part to the quantity of information used to substantiate and track aspects of each electronic document. Partial update support refers to an ability to update parts of an indexed document without having to send in the entire document content, including all meta-properties, to the search engine. Supporting partial updates is difficult for a search service due in part to having to split documents into inverted indexes sorted by words, wherein each word references a list of documents containing the word.","Words from multiple document properties are typically bundled in the same indexing structures, wherein multiple indexing fields are handled as combined entities. Extracting original documents and making minor modifications to some properties in such structures can be costly and too time consuming in practice. Therefore, in practice, indexes are often made immutable, and new versions of complete documents are created in new index fragments while the old document versions in the old index fragments are marked as invalid using a mechanism sometimes referred to as exclusion-listing.","Re-indexing a complete document is costly and inefficient when only a minor change is needed. Incremental indexing is typically necessary for any search services where content is steadily updated or growing over time. If indexes are not merged on an ongoing basis, query performance suffers due in part to the large numbers of index partitions. Even though supporting partial updates can be costly and difficult, partial update support is typically needed since clients are not always capable of sending in every property of a document when wanting to make an update.","This summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This summary is not intended to identify key features or essential features of the claimed subject matter, nor is it intended as an aid in determining the scope of the claimed subject matter.","Embodiments provide indexing and searching features including the use of a configurable schema as part of providing partial update support of one or more aspects of an electronic document or documents, but are not so limited. In an embodiment, a system is configured to provide search services including partial update functionality based in part on use of a configurable schema to manage partial document updates and\/or query processing operations. A method of one embodiment operates to use a configurable schema to define a number of merge sets that group various document attributes based in part on data source, update, and\/or usage parameters to provide an efficient partial update mechanism. Other embodiments are included.","These and other features and advantages will be apparent from a reading of the following detailed description and a review of the associated drawings. It is to be understood that both the foregoing general description and the following detailed description are explanatory only and are not restrictive of the invention as claimed.",{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 1","b":["100","100"]},"Partial updates can include distributing or portioning a document into separate parts in a manner consistent with an update cycle and\/or usage patterns for information and\/or properties that constitute electronic document parts (see  for example). As described below, a search service uses a configurable schema representation in part to enable definition and evolution of partial update structures that can be used to provide a responsive search experience.","In an embodiment, components of the environment  are configured in part to provide partial update functionality that includes the use of a configurable schema architecture and splitting\/parsing documents into separate parts in a manner consistent with an update cycle and\/or usage patterns (e.g., timestamps of last update) for properties that constitute the document parts. As an example, a configurable schema architecture can be used by a domain expert, familiar with the documents, content sources, and domains in question to predefine how document properties are to be grouped in merge sets, thus allowing a system\/component to adapt to an actual expected usage and\/or update cycle. Partial update support enables updating parts of an indexed document absent having to send in the entire document content, all meta-fields etc. to a search engine or other component(s). For example, partial update support can be used to isolate select document portions for update and management operations, such as a new security access control list (ACL), updated link text, click-through text from an analysis processing engine or new static boost values for a document as examples.","As described below, a core search engine feature uses indexed fields associated with a number of managed properties that are managed using a number of merge sets and associated index representations. A managed property of an embodiment can be created from multiple crawled properties, and can use suitable processing operations for various update and\/or management scenarios. Components of the environment  can be configured to impart incremental indexing functionality to create new index partitions based in part on merging of existing index partitions. Since a job of merging indexes can be resource intensive, a partial update process can be used to enable responsive performance characteristics of a search service, including providing document consistency.","As described below, partial update support is provided in part using a configurable schema representation that defines target merge sets that are used in part to track aspects of an electronic document, including functionality to partially update one or more document portions using one or more target merge sets. A searching service of an embodiment can obtain document information associated with the constituent parts, and group parts of the electronic document into multiple independent indexes to manage one or many document attributes or properties, wherein designated document parts can be updated independently of the other document parts as part of providing a searching service. Components of the environment  can be configured to define and use merge sets, such as groups of document properties for example to allow for usable and efficient partial updates. In an embodiment, property data in a main merge set is managed using a first update cycle, and property data managed on different update cycles can be included in different merge sets for responsive performance and usability.","The components of the environment  can operate to provide partial updates of documents in a search engine index by partitioning all index fields into disjoint merge sets, including enabling updates to individual merge sets. As one example, a system administrator or other user\/component can group index fields into target merge sets based in part on an expected usage and\/or update cycle of the grouped index fields. New system features, usage scenarios, and\/or document parts may change the merge sets dynamically at later times. According to one embodiment, all index fields in the same merge set can be simultaneously updated, and any number of merge sets can be updated by a partial update process.","As shown in , the exemplary environment  includes a search system  communicatively coupled to one or more clients  and\/or one or more information repositories . The search system  is also communicatively coupled to a schema management system . In one embodiment, the information repositories  are used to provide crawled data associated with a number of site collections, sites, farm content, etc. In one embodiment, the search system  can be used in conjunction with the schema management system  as part of providing a search service that includes the use of partial update features including the use of schema-driven merge sets as part of managing updates of different document parts.","The schema management system  of an embodiment provides configurable schema features and functionality, but is not so limited. For example, the configurable schema functionality can be used to manage changes to document properties mapped to various merge sets using explicit schemas, including modification of properties and\/or property types. As an example, the schema management system  provides an interface to a user or system administrator using a web user or service interface web or any other remote or local interface through which it is convenient to communicate with the schema management system . The schema management system  can be configured to translate user interactions to calls to a schema processing component that operates to persist the schema information in a schema storage component. The schema storage component of an embodiment can be configured to contain a list of document properties, and for each document property define which merge set the property belongs to and thus effectively grouping the document properties and splitting the documents into constituent parts.","The search system  interacts with the schema management system  in part by reading schema information (e.g., merge set information) through a well-defined interface to obtain the proper field and query mappings. During query time, the search system  operates to account for multiple merge sets used to manage a partial update and\/or search process. In an embodiment, a field splitter feature can be used to examine a received query and send query parts to corresponding merge set(s), using schema and mapping information managed by the schema management system . When the results from each merge set are returned, the field splitter feature can operate to generate an overall result set for further result processing.","With continuing reference to , the search system  of an embodiment includes indexing features used to process any number of searchable items including, but not limited to, web pages, documents of any kind, spreadsheets, music files, picture files, video files, contacts, lists and list items, tasks, calendar entries, content of any kind, metadata, meta-metadata, etc. The search system  of one embodiment includes features that operate, but are not so limited, to: create indexes based on raw textual input and\/or return results for queries by using the indexes; receive content from various clients, crawlers, connectors, etc. which can be processed and indexed; and\/or parse information including documents and other content to produce a textual output, such as a list of properties including document title, document content, body, locations, size, etc. as examples.","As described below, as part of partial update functionality, components of the environment  can provide a search service that operates to group document properties\/parts based in part a source of data (e.g., the same source of data) and associate each property group with a merge set, wherein an update cycle can be used to manage property and\/or schema updates using one or more existing merge sets. A search service of an embodiment operates uses the search system  that interacts with other components operable to receive, process, and\/or transmit partial document structures, such as documents for which certain ones of the properties are missing or different.","The search system  of one embodiment is configured to send the correct properties\/parts to the proper merge sets according to a configurable schema that is used in part to group aspects of electronic documents, including meta-properties and\/or other information into target merge sets. In an embodiment, the search service can use explicit schemas and a schema engine as part of managing a partial update process. In an embodiment, the search service uses a separate index representation for each merge set according to the types of properties being managed. Each index can include different types of index fields depending on properties being managed using the corresponding merge set.",{"@attributes":{"id":"p-0025","num":"0024"},"figref":["FIG. 2","FIG. 2"],"b":["200","202","204","206","208","210","212","214","216"]},"Partial update features and functionality can be integrated with a search and index service using various parameters, such as source data parameters, update parameters, and\/or usage parameters. A partial update mechanism of an embodiment accounts for the fact that different document portions and\/or properties have a number of different characteristics concerning the source of the data, update cycle(s), and\/or how data is used. As an example, a source of data can be actual content management systems or analysis systems\/jobs, such that: main document content can originate from and\/or be maintained by content sources such as file servers, collaboration servers (e.g., SHAREPOINT servers), databases and\/or other content management systems; security information can originate from and\/or be maintained by the same content sources as the main document content, but may utilize other APIs to acquire the security-related data; web structure properties can originate from independent analyses running analyses of total page link structure of a set of documents and\/or assign static rank values to the documents depending on how many other documents point thereto (amongst other parameters); usage and recommendation properties can be provided by extracting real usage information about the documents.","As described above, partial update services can also support update cycles associated with document parts or portions. As an example, an update cycle can be used to update document content independently from security settings. In one embodiment, updates can be associated with: scheduled jobs that re-crawl content sources and input changed data; web structure properties when the proper analyses jobs have completed, wherein the analyses jobs of an embodiment are on a different schedule than the crawl jobs (e.g., typically run less often); and\/or usage and recommendation properties based on the actual usage that may need to be updated even if the document content and\/or security information has been updated (same may apply to web structure properties).","Partial update services can also be configured according to usage parameters. Document parts, including various document properties can be used to form end-user and\/or application queries to search for documents. Since security information is used to protect information and\/or documents, in an embodiment, such information or portions thereof can be used to trim result sets according to current user, and need not be used to evaluate the real user query. Web structure properties and usage and recommendation properties can be used to rank documents and\/or adjust a rank according to the documents use, ratings, link structure, etc. Other properties\/parts may be used to federate result sets with data from other sources such as databases, legacy back-end systems, and\/or other search engines.","The table below includes a number of exemplary document properties that can be utilized by a search service, including a schema management component to define a schema for one more document merge sets.",{"@attributes":{"id":"p-0030","num":"0029"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"49pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE"},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Field name","Description","Update group"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["AboutMe","For a contact, or the author of a document, a",{}]},{"entry":[{},"description of the person"]},{"entry":["Anchortextpartial","List of anchor texts in documents pointing to this","Link"]},{"entry":[{},"document"]},{"entry":["AssignedTo","Name of assignee (if task or similar)"]},{"entry":["Author","All forms of name of the author who wrote this"]},{"entry":[{},"document"]},{"entry":["Body","The body text of the item"]},{"entry":["Charset","The character set used in the document"]},{"entry":["Colleagues","List of colleagues, for e.g a contact"]},{"entry":["Companies","Company names found in the item using property"]},{"entry":[{},"extraction"]},{"entry":["Contentclass","Type of document"]},{"entry":["ContentSource","Origin of document"]},{"entry":["Created","Creation date for the item"]},{"entry":["CreatedBy","Name of creator"]},{"entry":["Department","Department of contact if this is a contact, or"]},{"entry":[{},"department of author if a document"]},{"entry":["Description","Any kind of free-text description of this item"]},{"entry":["Docacl","List of security principals allowed to see this item","Security"]},{"entry":["Docaclsystemid","Security system principals for this item belong to","Security"]},{"entry":["DocComments","Free-text comments"]},{"entry":["DocKeywords","Free-text keywords"]},{"entry":["Docrank","Static rank-value of document (a rank score which is","Link"]},{"entry":[{},"independent of query)"]},{"entry":["DocSubject","Subject for this item"]},{"entry":["Docvector","A similarity vector representation for this item"]},{"entry":["Domain","URL domain, e.g., www.contoso.com"]},{"entry":["DuplicateHash","A document signature for the item"]},{"entry":["EndDate","For a task, when it ends"]},{"entry":["ExpirationTime","When the item is no longer valid"]},{"entry":["File Extension","A file extension"]},{"entry":["Filename","Name of original file"]},{"entry":["FirstName","Name of contact"]},{"entry":["Format","Symbolic representation of the item format, e.g.,"]},{"entry":[{},"Internet HTML"]},{"entry":["HostingPartition","GUID representing tenant to which this item belongs in"]},{"entry":[{},"a cloud-based or shared deployment"]},{"entry":["Interests","If a contact, details about that contact"]},{"entry":["JobTitle","Job title of a contact"]},{"entry":["Keywords","Additional keywords"]},{"entry":["Language","Detected written language for the item. For multi-"]},{"entry":[{},"lingual items, this is the primary language detected"]},{"entry":["Languages","Detected written languages for the item. Contains all"]},{"entry":[{},"detected languages for multi-lingual items"]},{"entry":["LastModifiedTime","Last time this indexed version of the item was updated"]},{"entry":[{},"(may be newer in the source)"]},{"entry":["LastName","Name of contact"]},{"entry":["Location","Item location"]},{"entry":["Locations","Geographical locations found in the item using"]},{"entry":[{},"property extraction"]},{"entry":["ManagedProperties","Tracking all managed properties in use for each"]},{"entry":[{},"document"]},{"entry":["Memberships","List of groups a contact is a member of"]},{"entry":["MetadataAuthor","Name of person who created various metadata"]},{"entry":["MobilePhone","Phone no. of a contact"]},{"entry":["ModifiedBy","Name of last person modifying this item"]},{"entry":["PastProjects","List of projects a contact has worked on in the past"]},{"entry":["Path","Path to this item","basic"]},{"entry":["personnames","Person names found in the item using property"]},{"entry":[{},"extraction"]},{"entry":["PictureHeight","Description of an optional picture going with the item"]},{"entry":["PictureThumbnail","Description of an optional picture going with the item"]},{"entry":"URL"},{"entry":["PictureURL","Description of an optional picture going with the item"]},{"entry":["PictureWidth","Description of an optional picture going with the item"]},{"entry":["PreferredName","Preferred name of a contact"]},{"entry":["Priority","Priority number of this item"]},{"entry":["ProcessingTime","Date\/time when the item was processed by item"]},{"entry":[{},"processing"]},{"entry":["Pronunciations","Pronunciations of a contacts name"]},{"entry":["Purpose","What the item is used for"]},{"entry":["RecommendedFor","Who this item is recommended for","Usage"]},{"entry":["Responsibilities","A contacts responsibilities"]},{"entry":["Schools","List of schools attended by a person"]},{"entry":["Site","Site that a document originates from"]},{"entry":["SiteName","The URL of the site that contains the crawled item. If"]},{"entry":[{},"the crawled item is not contained in a site, this property"]},{"entry":[{},"is absent."]},{"entry":["SiteRank","Score reflecting the expected quality of the site the","Link"]},{"entry":[{},"document came from"]},{"entry":["SiteTitle","Title of the item's site"]},{"entry":["Size","Size of the item"]},{"entry":["Skills","Skills of a contact\/person"]},{"entry":["StartDate","A start date, e.g., a task start date"]},{"entry":["Status","Status of the item, e.g. ready for review"]},{"entry":["Tags","Any user defined tags"]},{"entry":["Teaser","A query independent document summary for this item"]},{"entry":["Title","Title for the crawled item","basic"]},{"entry":["TLD","Top level domain for a document"]},{"entry":["Url","The URL of the matching item","basic"]},{"entry":["UrlKeywords","The individual (key)words of an URL string","Link"]},{"entry":["Urls","A list of all URLs that point to the item (including","Link"]},{"entry":[{},"duplicates and hypertext markup language (HTML)"]},{"entry":[{},"redirects)"]},{"entry":["UserName","some system-related user name of a contact"]},{"entry":["UserProfile_GUID","user id of a contact"]},{"entry":["ViewsLastDays","Number of views last days","usage"]},{"entry":["WorkEmail","e-mail address of a contact"]},{"entry":["WorkPhone","phone no of a contact"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}}},{"@attributes":{"id":"p-0031","num":"0030"},"figref":["FIGS. 3A-3C","FIG. 3A"],"b":["300","300","302","304","306","308","310","312","313"]},"The search service, as part of providing robust search operations and results, can include a computing architecture that uses processor(s), memory, hard drive storage, networking, and\/or other components. A computer storage medium can be configured with instructions that, when executed, operate to provide certain partial update features, such as program instructions encoded as part of a computer program or programs. In some embodiments, component features and\/or functionalities can be further combined and\/or subdivided.","The core search engine  includes functionality to perform various document operations including, but not limited to, add and\/or update operations, partial update operations, and\/or delete operations. An add and\/or update operation of an embodiment operates to create a document entry if no such entry exists, and\/or update all merge sets with values from an input document. A partial update operation of an embodiment operates to update only target merge sets for any associated included properties of an input document. A delete operation of an embodiment operates to delete a document, including associated properties, completely.","The core search engine  includes functionality to create indexes based on raw textual input and return results for queries by using the indexes, including different indexes that are maintained based on corresponding document merge sets. The content API  is used by various clients, crawlers, connectors, etc. (e.g., content domains ) to submit and receive content for subsequent processing and indexing operations. Item processing  is used to parse documents and other content to produce textual and other output, such as a list of properties for example (e.g., document title, document content, body, locations, size, etc.).","Query processing  operates to analyze raw user input (e.g., query), including improving and\/or rewriting a query for execution using the core search engine . For example, query processing  can be configured to detect language, correct spelling errors, add synonyms to a query, rewrite abbreviations, etc. Results processing  operates to process results provided by the core search engine  before they are returned. For example, the core search engine  contains ranking and relevancy algorithms and results processing  contains sorting, filtering, and\/or federation (e.g., uses data from other data sources such as BING search engine, stock exchange data, current weather reports\/forecasts or other features used in part to return relevant search results. The client search API  is used by search front-end and other applications (e.g., client domains ) to issue queries and retrieve results using the queries.","In one embodiment, the system  can also include an alerting engine that operates to store queries and analyzes all incoming (e.g., crawled or fed) documents. For example, when a new document matches a query, the altering engine can send out an alert to any subscribers of the alert. The exemplary system  can be used to provide rich searching services, including providing a store for partial update support, domain-wide terms, keywords, content types, and\/or other data and\/or parameters. As an example, searching services can provide partial document update support shared and hosted as part of the same server farm or hosted on a dedicated services farm and\/or on different farms. Cross-farm and single-farm services can also be implemented.",{"@attributes":{"id":"p-0037","num":"0036"},"figref":["FIG. 3B","FIG. 3B"],"b":["302","304","302","318","320","322","326"],"sup":"th "},"As shown for this example, and in accordance with an embodiment, the core search engine API  is communicatively coupled (e.g., wired and\/or wirelessly) with document processing , query processing , results processing , and the schema engine . More particularly, and according to such an embodiment, the core search engine API  is receiving inputs from document processing  and query processing , while outputting information to results processing  and the field splitter , but is not so limited. The schema engine  is also outputting information to the field splitter .","The field splitter  of an embodiment is responsible for sending the different document properties to the proper merge set, including the proper collection of indexing structures for the various document properties\/portions. The schema engine  or schema management component, is configured to manage the schema(s) which is a definition of fields in the index needed and the corresponding attributes, including a merge set or sets that the fields belong to. The field splitter  of an embodiment operates to split and\/or manage the fields into merge sets based in part on an assigned document ID. The field splitter  is configured to send\/transmit the document ID with the pertinent properties to a delineated merge set as part populating the merge sets in conjunction with providing the partial update functionality. According to an embodiment, the field splitter  uses one merge set as the main merge set, wherein a document exists the main merge set includes an entry for the document (e.g., document ID and\/or URL).","The field splitter  can be configured to perform various operations based in part on whether an operation is a partial update operation, regular add\/update operation (e.g., insert operation), and a delete operation. When mapping properties and\/or values to merge sets, the field splitter  can operate to send one partial update to every merge set that has properties in the incoming document. If a merge set has multiple fields, the field splitter  of an embodiment can operate to update all properties at the same time, wherein fields not present in or absent from a partial update document are considered to have NULL values. If no properties for a merge set are associated with the input document, the field splitter  does not alter values for the document in a merge set.","During a regular add\/update operation, all properties in the main merge set need to have values, otherwise the field splitter  ignores the add operation. The field splitter  can create entries for every merge set for which there are properties for the input document. Properties that are not present in or absent from the document are considered by the field splitter  to have NULL values. The field splitter  can also delete a document entry in one or more merge sets with no properties associated with the input. During a delete operation, the field splitter  of an embodiment can be configured to send a delete instruction or instructions to every merge set.","During query time, a query issues from query processing  to the field splitter  using the core search engine API . As part of accounting for multiple merge sets, the field splitter  examines the query and sends parts of the query to the corresponding merge set, using the information received from the schema engine . For example, if a query is author:Shakespeare, only the merge set (e.g., ) that holds an author property receives the query. When the results from each merge set are returned, the field splitter  operates to generate an overall result set for the query which is output to the result processor  using the core search engine API . In an embodiment, the overall result set includes a total result set from all merge sets, calculated using intersection or union operations. Depending on global settings, configuration, and\/or per query parameters, the field splitter  output may or may not involve all or only some certain number of the merge sets. For example, ACL parameters of a security merge set are rarely returned with a result set.","As an illustrative example, consider the query \u201ctitle:tiger AND author:calvin\u201d. The core search engine  can operate to return documents with the word \u201ctiger\u201d in the title that also have \u201ccalvin\u201d as the author as defined by the managed property. If the title and author document properties are in different merge sets, the field splitter  can operate to send \u201ctitle:tiger\u201d to a dedicated merge set and \u201cauthor::calvin\u201d to another dedicated merge set. After populating each merge set, the field splitter  can operate to merge the results sets from each merge set into an overall correct result set. In an embodiment, the field splitter  can use a merge process that utilizes a shared or common document ID present in each of the merge sets to identify the proper document.","A merge process of an embodiment can be based in part on using sorted lists of document IDs that are shared in all merge sets. A result set can be defined as a list of document IDs matching the query. In one embodiment, query and result processing operations include two passes: 1) uses a query to obtain all matching documents IDs, and 2) communicates (e.g., max ) the document IDs, requesting document summaries for the corresponding documents. If a query is an AND between two properties in different merge sets, the field splitter  can operate to perform an INTERSECTION operation between the two lists of documents IDs returned (UNION operation for OR operators). If the title and author document properties are in the same merge set however, the field splitter  operates to forward the query to the containing merge set and also outputs the query results to result processing  using the core search engine API .","When query processing  requests document summaries, the core search engine  can return the given properties for the requested documents. A document summary can include managed property stored with a document in an index that can be returned, such as a snippet of the original document text. In an embodiment, the snippet can be combined with the query to be shortened further, or returned as is. A document summary can also include other information, such as a picture, video, etc. The field splitter  of an embodiment can operate to receive the request and retrieve the fields in question from the merge sets they are stored in.","The field splitter  can also be configured to calculate a final ranking for documents by merging the partial rank scores from the various merge sets. Ranking operations include sorting of results, which can include assumed best results ranked first. This is usually a sum of different factors. Each merge set gives factors for the properties from those merge sets. The overall ranking can be configured as weighted sum\/product of the sums from each merge set. Attribute vectors can be used for sorting results sets and\/or to create refiners. The field splitter  can operate to send refiner requests to any relevant merge set(s) and return an overall set of refiners. For sorting, the field splitter  can operate to retrieve the correct sort order from a merge set. If multiple fields are used for sorting, the field splitter  can operate to combine the sorting returned from the involved merge sets.","As shown in , the schema engine  of an embodiment provides a schema management service and includes a schema UI component , schema processing , and a schema storage database , but is not so limited. The schema engine  provides an interface  to a user, system administrator, component, device, system etc. using the schema UI component . For example, the schema UI component  can be configured and used as part of a web-based or other user interface that uses hypertext markup language (HTML), SILVERLIGHT, AJAX, JAVA, or other coding technologies, a web service interface (e.g., SOAP, WCF, JSON, etc.), or any other remote or local interface through which it is convenient for a user to communicate or interact with the system .","The schema UI component  of an embodiment is configured to translate user interaction to calls to schema processing  which is responsible for persisting the schema information in the schema storage database . The schema storage database  of an embodiment is configured to contain a list of document properties, and for each document property define which merge set the property belongs and thereby group document properties according to a grouping definition\/criteria for further storage and use. It will be appreciated that not all documents will include all properties, but each existing document property can be mapped to one single merge set (e.g., the main merge set). The core search engine  of an embodiment interacts with the schema engine  by reading schema information, including merge set information using the schema UI component  to obtain the proper field and\/or query mappings.","As described above, components of the exemplary system  can be configured to manage document update, tracking, and\/or searching features when various document properties come from different content sources and\/or have different update schedules, but is not so limited. For example, components of the exemplary system  enable the use and availability of partial updates without the need of immutable index structures or storing complete versions of already processed and\/or indexed documents.","The system  of an embodiment uses a number of update or merge group types as part of providing a search service and\/or interface (e.g., intranet, internet, etc.) including a basic group, a default group, a security group, a usage group, and\/or a link group. Additional group types can be used, such as a custom property group type for example to separate information (e.g., security, pricing, etc.) in a different source system(s) than other portions of an electronic document. Additionally, existing groups can be modified for users having certain use and\/or interaction permissions. The basic group of an embodiment is configured to include one or more required properties for a document to exist in the system , such as a document URL or document ID for example. The basic group can be used to quickly include a document in an index and may include a finite number of properties (e.g., greater than one but less than five properties). The basic group can be configured as the main merge set described above which enables a document to be partially searchable very quickly with only limited document processing and\/or resources.","The default group of an embodiment is configured to include the main parts or properties of a document such as e.g. the main document text or body of an HTML document. The security group of an embodiment is configured to include the security related properties, such as a document ACL, security type, etc. The usage group of an embodiment is configured to include properties related to usage of a document (in a source system and\/or as part of the search results) and can be updated by an analysis engine at intervals or cycles different from one or more other merge sets. The link group of an embodiment is configured to include properties related to how a document relates to other documents and can be updated by an analysis engine at intervals or cycles different from one or more other merge sets.","Update processing of an embodiment includes updating the usage group and the link group at the same time but at a different time from one or more of the basic group, default group, and\/or security group. In one embodiment, the basic group and default group can be updated at the same time according to an update cycle or interval useful for content management systems (e.g., SHAREPOINT services). For example, merge sets associated with the basic and default group can be defined to include document information, such as data, metadata, meta-metadata, etc. (e.g., author(s), version(s), document type(s), URL, and\/or title, etc.) and main document content can be merged into a single merge set and referred to by the schema engine  and\/or core search engine  as part of update and\/or maintenance operations. Update processing can effectively use update groups for certain update parameters, such as security parameter updates for example. As an example, in a medium or large organization, the list of individuals or groups having access to a document typically changes more often than the document content itself. To keep the security trimming in search based on indexed document access control list (docacls) that comprises a list of users and groups that have (or are denied) access to a particular document up to date, which can be fed into the system with very little document processing and updated quickly and at low processing cost.",{"@attributes":{"id":"p-0053","num":"0052"},"figref":"FIG. 4","b":["400","402","400"]},"At , after receiving the item, the process  parses the item and transforms one or more crawled or submitted properties (e.g., linguistics processing, spell checking, synonym replacement, extraction and recognition of entities such as people, names, locations, companies etc., as well as expanding abbreviations and other types of data-cleansing using external organization databases, product databases, etc.) to one or more managed properties. At , the process  operates to output a list of managed properties for the item. For example, the process  at  can operate to output a list of managed properties to an indexing component of a core search engine for use in partial document update operations using one or more merge sets that are configured to include different types of managed properties and managed according to an update cycle or other process.","At , the process  operates to use (e.g., retrieve or receive) the list of merge sets and mapping information associated with managed property to target merge set mappings. In an embodiment, the process  can use a schema engine configured to retrieve or receive the list of merge sets from an indexing component, and refer to a schema mapping database that defines a managed property to merge set association or mapping. For example, mappings can be defined between a managed property (e.g., author, ACL, creation date, etc.) and the merge set or sets in use (basic, security, linkAnalysis, etc.).","At , the process  operates to process the item including checking or identifying a merge set or sets that the item properties belong to. At , the process  operates to loop through the existing merge sets, extract names and values of properties for each merge set, and\/or update the merge set and associated indexing structure with the property names and values to finally create all indexing structures. In an embodiment, at , the process operates to write the created index structures to a store or storage medium (e.g., local and\/or remote locations). At , the process  operates to use the indexing structure(s) to serve queries and provide search results. While a certain number and order of operations is described for the exemplary flow of , it will be appreciated that other numbers and\/or orders can be used according to desired implementations.","Exemplary pseudo code below describes operations performed by an indexing service as part of providing partial update support.\n\n",{"@attributes":{"id":"p-0058","num":"0058"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"PropertyToMergeSetMapping = GetMappings( ) \/\/ Get mappings"]},{"entry":[{},"MergeSetUpdates = new MergeSetUpdateStructure(item);"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"ul":{"@attributes":{"id":"ul0003","list-style":"none"},"li":{"@attributes":{"id":"ul0003-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0004","list-style":"none"},"li":"Then, for every item, each managed property of the item is routed to the correct merge set in a temporary memory structure, organized by merge sets:"}}}},{"@attributes":{"id":"p-0059","num":"0060"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"For every managed property mp of the current item"]},{"entry":[{},"\u2003CurrentMergeSet = GetMergeSetMapping(mp)"]},{"entry":[{},"\u2003MergeSetUpdates[CurrentMergeSet].SetValue(mp.name, mp.value)"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"ul":{"@attributes":{"id":"ul0005","list-style":"none"},"li":{"@attributes":{"id":"ul0005-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0006","list-style":"none"},"li":"Afterwards, the indexing structures of each changed merge set are updated with new content:"}}}},{"@attributes":{"id":"p-0060","num":"0062"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"For every MergeSet in MergeSetUpdates"]},{"entry":[{},"\u2003UpdateMergeSet(MergeSet)"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"While certain embodiments are described herein, other embodiments are available, and the described embodiments should not be used to limit the claims. Suitable programming means include any means for directing a computer system or device to execute steps of a method, including for example, systems comprised of processing units and arithmetic-logic circuits coupled to computer memory, which systems have the capability of storing in computer memory, which computer memory includes electronic circuits configured to store data and program instructions. An exemplary computer program product is useable with any suitable data processing system. While a certain number and types of components are described above, it will be appreciated that other numbers and\/or types and\/or configurations can be included according to various embodiments. Accordingly, component functionality can be further divided and\/or combined with other component functionalities according to desired implementations.","Exemplary communication environments for the various embodiments can include the use of secure networks, unsecure networks, hybrid networks, and\/or some other network or combination of networks. By way of example, and not limitation, the environment can include wired media such as a wired network or direct-wired connection, and\/or wireless media such as acoustic, radio frequency (RF), infrared, and\/or other wired and\/or wireless media and\/or components. In addition to computing systems, devices, etc., various embodiments can be implemented as a computer process (e.g., a method), an article of manufacture, such as a computer program product or computer readable media, computer readable storage medium, and\/or as part of various communication architectures.","The term computer readable media as used herein may include computer storage media. Computer storage media may include volatile and nonvolatile, removable and non-removable media implemented in any method or technology for storage of information, such as computer readable instructions, data structures, program modules, or other data. System memory, removable storage, and non-removable storage are all computer storage media examples (i.e., memory storage.). Computer storage media may include, but is not limited to, RAM, ROM, electrically erasable read-only memory (EEPROM), flash memory or other memory technology, CD-ROM, digital versatile disks (DVD) or other optical storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other medium which can be used to store information and which can be accessed by a computing device. Any such computer storage media may be part of a device or system. By way of example, and not limitation, communication media may include wired media such as a wired network or direct-wired connection, and wireless media such as acoustic, RF, infrared, and\/or other wireless media.","The embodiments and examples described herein are not intended to be limiting and other embodiments are available. Moreover, the components described above can be implemented as part of networked, distributed, and\/or other computer-implemented environment. The components can communicate via a wired, wireless, and\/or a combination of communication networks. Network components and\/or couplings between components\/systems can include any of a type, number, and\/or combination of networks and the corresponding network components include, but are not limited to, wide area networks (WANs), local area networks (LANs), metropolitan area networks (MANs), proprietary networks, backend networks, cellular, satellite, etc.","Client computing devices\/systems and servers can be any type and\/or combination of processor-based devices or systems. Additionally, server functionality can include many components and include other servers. Components of the computing environments described in the singular tense may include multiple instances of such components. While certain embodiments include software implementations, they are not so limited and encompass hardware, or mixed hardware\/software solutions. Other embodiments and configurations are available.","Exemplary Operating Environment","Referring now to , the following discussion is intended to provide a brief, general description of a suitable computing environment in which embodiments of the invention may be implemented. While embodiment of the invention can be described in the general context of program modules that execute in conjunction with program modules that run on an operating system on a personal or other computer, those skilled in the art will recognize that the invention may also be implemented in combination with other types of computer systems, devices, and program modules.","Generally, program modules include routines, programs, components, data structures, and other types of structures that perform particular tasks or implement particular abstract data types. Moreover, those skilled in the art will appreciate that embodiments of the invention may be practiced with other computer system configurations, including hand-held devices, multiprocessor systems, microprocessor-based or programmable consumer electronics, minicomputers, mainframe computers, and the like. Embodiments of the invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment, program modules may be located in both local and remote memory storage devices.","Referring now to , an illustrative operating environment for embodiments of the invention will be described. As shown in , computer  comprises a general purpose server, desktop, laptop, handheld, or other type of computer capable of executing one or more application programs. The computer  includes at least one central processing unit  (\u201cCPU\u201d), a system memory , including a random access memory  (\u201cRAM\u201d) and a read-only memory (\u201cROM\u201d) , and a system bus  that couples the memory to the CPU . A basic input\/output system containing the basic routines that help to transfer information between elements within the computer, such as during startup, is stored in the ROM . The computer  further includes a mass storage device  for storing an operating system , application programs, and other program modules\/resources .","The mass storage device  is connected to the CPU  through a mass storage controller (not shown) connected to the bus . The mass storage device  and its associated computer-readable media provide non-volatile storage for the computer . Although the description of computer-readable media contained herein refers to a mass storage device, such as a hard disk or CD-ROM drive, it should be appreciated by those skilled in the art that computer-readable media can be any available media that can be accessed or utilized by the computer .","By way of example, and not limitation, computer-readable media may comprise computer storage media and communication media. Computer storage media includes volatile and non-volatile, removable and non-removable media implemented in any method or technology for storage of information such as computer-readable instructions, data structures, program modules or other data. Computer storage media includes, but is not limited to, RAM, ROM, EPROM, EEPROM, flash memory or other solid state memory technology, CD-ROM, digital versatile disks (\u201cDVD\u201d), or other optical storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other medium which can be used to store the desired information and which can be accessed by the computer .","According to various embodiments of the invention, the computer  may operate in a networked environment using logical connections to remote computers through a network , such as a local network, the Internet, etc. for example. The computer  may connect to the network  through a network interface unit  connected to the bus . It should be appreciated that the network interface unit  may also be utilized to connect to other types of networks and remote computing systems. The computer  may also include an input\/output controller  for receiving and processing input from a number of other devices, including a keyboard, mouse, etc. (not shown). Similarly, an input\/output controller  may provide output to a display screen, a printer, or other type of output device.","As mentioned briefly above, a number of program modules and data files may be stored in the mass storage device  and RAM  of the computer , including an operating system  suitable for controlling the operation of a networked personal computer, such as the WINDOWS operating systems from MICROSOFT CORPORATION of Redmond, Wash. The mass storage device  and RAM  may also store one or more program modules. In particular, the mass storage device  and the RAM  may store application programs, such as word processing, spreadsheet, drawing, e-mail, and other applications and\/or program modules, etc.","It should be appreciated that various embodiments of the present invention can be implemented (1) as a sequence of computer implemented acts or program modules running on a computing system and\/or (2) as interconnected machine logic circuits or circuit modules within the computing system. The implementation is a matter of choice dependent on the performance requirements of the computing system implementing the invention. Accordingly, logical operations including related algorithms can be referred to variously as operations, structural devices, acts or modules. It will be recognized by one skilled in the art that these operations, structural devices, acts and modules may be implemented in software, firmware, special purpose digital logic, and any combination thereof without deviating from the spirit and scope of the present invention as recited within the claims set forth herein.","Although the invention has been described in connection with various exemplary embodiments, those of ordinary skill in the art will understand that many modifications can be made thereto within the scope of the claims that follow. Accordingly, it is not intended that the scope of the invention in any way be limited by the above description, but instead be determined entirely by reference to the claims that follow."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIGS. 3A-3C"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 5"}]},"DETDESC":[{},{}]}
