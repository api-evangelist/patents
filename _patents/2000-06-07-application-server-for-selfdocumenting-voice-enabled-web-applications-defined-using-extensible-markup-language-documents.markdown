---
title: Application server for self-documenting voice enabled web applications defined using extensible markup language documents
abstract: A unified web-based voice messaging system provides voice application control between a web browser and an application server via an hypertext transport protocol (HTTP) connection on an Internet Protocol (IP) network. The application server, configured for executing a voice application defined by XML documents, also is configured for describing the voice application by collecting, for each of the XML documents, attributes describing execution of the XML documents in an application runtime environment, and generating for storage on a tangible medium an output file that describes the voice application based on at least a portion of the collected attributes selected by a user. Hence, the voice applications defined by XML documents can be considered as self-documenting, and the act of writing the applications using XML documents generates the necessary information for creating and formatting documentation in accordance with the attributes (i.e., context) provided by the application runtime environment.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06847999&OS=06847999&RS=06847999
owner: Cisco Technology, Inc.
number: 06847999
owner_city: San Jose
owner_country: US
publication_date: 20000607
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS REFERENCE TO RELATED APPLICATIONS","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","BEST MODE FOR CARRYING OUT THE INVENTION"],"p":["This application claims priority from provisional application No. 60\/152,316, filed Sep. 3, 1999, the disclosure of which is incorporated in its entirety herein by reference.","1. Field of the Invention","The present invention relates to generating and executing voice enabled web applications within a hypertext markup language (HTML) and hypertext transport protocol (HTTP) framework.","2. Description of the Related Art","The evolution of the public switched telephone network has resulted in a variety of voice applications and services that can be provided to individual subscribers and business subscribers. Such services include voice messaging systems that enable landline or wireless subscribers to record, playback, and forward voice mail messages. However, the ability to provide enhanced services to subscribers of the public switched telephone network is directly affected by the limitations of the public switched telephone network. In particular, the public switched telephone network operates according to a protocol that is specifically designed for the transport of voice signals; hence any modifications necessary to provide enhanced services can only be done by switch vendors that have sufficient know-how of the existing public switched telephone network infrastructure.","An open standards-based Internet protocol (IP) network, such as the World Wide Web, the Internet, or a corporate intranet, provides client-server type application services for clients by enabling the clients to request application services from remote servers using standardized protocols, for example hypertext transport protocol (HTTP). The web server application environment can include web server software, such as Apache, implemented on a computer system attached to the IP network. Web-based applications are composed of HTML pages, logic, and database functions. In addition, the web server may provide logging and monitoring capabilities.","In contrast to the public switched telephone network, the open standards-based IP network has enabled the proliferation of web based applications written by web application developers using ever increasing web development tools. Hence, the ever increasing popularity of web applications and web development tools provides substantial resources for application developers to develop robust web applications in a relatively short time and an economical manner. However, one important distinction between telephony-based applications and web-based applications is that telephony-based applications are state aware, whereas web-based applications are stateless.","In particular, telephony applications are state aware to ensure that prescribed operations between the telephony application servers and the user telephony devices occur in a prescribed sequence. For example, operations such as call processing operations, voicemail operations, call forwarding, etc., require that specific actions occur in a specific sequence to enable the multiple components of the public switched telephone network to complete the prescribed operations.","The web-based applications running in the IP network, however, are state-less and transient in nature, and do not maintain application state because application state requires an interactive communication between the browser and back-end database servers accessed by the browsers via a HTTP-based web server. However, an HTTP server provides asynchronous execution of HTML applications, where the web applications in response to reception of a specific request in the form of a URL from a client, instantiate a program configured for execution of the specific request, send an HTML web page back to the client, and terminate the program instance that executed the specific request. Storage of application state information in the form of a \u201ccookie\u201d is not practical because some users prefer not to enable cookies on their browser, and because the passing of a large amount of state information as would normally be required for voice-type applications between the browser and the web application would substantially reduce the bandwidth available for the client.","Commonly-assigned, copending application Ser. No. 09\/501,516, filed Feb. 1, 2000 entitled Arrangement for Defining and Processing Voice Enabled Web Applications Using Extensible Markup Language Documents, the disclosure of which is incorporated in its entirety herein by reference, discloses an arrangement for defining a voice-enabled web application using extensible markup language (XML) documents that define the voice application operations to be performed within the voice application. Each voice application operation can be defined as any one of a user interface operation, a logic operation, or a function operation. Each XML document includes XML tags that specify the user interface operation, the logic operation and\/or the function operation to be performed within a corresponding voice application operation, the XML tags being based on prescribed rule sets that specify the executable functions to be performed by the application runtime environment. Each XML document may also reference another XML document to be executed based on the relative position of the XML document within the sequence of voice application operations to be performed. The XML documents are stored for execution of the voice application by an application server in an application runtime environment.","The application server disclosed in the above-incorporated application Ser. No. 09\/501,516 executes the voice-enabled web application by runtime execution of the extensible markup language (XML) documents that define the voice-enabled web application to be executed. The application server includes a runtime environment that establishes an efficient, high-speed connection to a web server. The application server, in response to receiving a user request from a user, accesses a selected XML page that defines at least a part of the voice application to be executed for the user. The XML page may describe any one of a user interface such as dynamic generation of a menu of options or a prompt for a password, an application logic operation, or a function capability such as generating a function call to an external resource. The application server then parses the XML page, and executes the operation described by the XML page, for example dynamically generating an HTML page having voice application control content, or fetching another XML page to continue application processing. In addition, the application server may access an XML page that stores application state information, enabling the application server to be state-aware relative to the user interaction.","Hence, web programmers can write voice-enabled web applications, using the teachings of the above-incorporated application Ser. No. 09\/501,516, by writing XML pages that specify respective voice application operations to be performed. The XML documents have a distinct feature of having tags that allow a web browser (or other software) to identify information as being a specific kind or type of information.","One recurring problem in application development is the necessity for documenting applications. In particular, documentation of voice applications (e.g., code-level functional call flows, user-level call flows, prompt sequences and listings, user input requirements, etc.) has typically been a manual process undertaken by a combination of product managers, software developers, and testers. Due to the manual nature of defining the application, creating the application, and documenting the application, the process tends to the error prone. The manual process typically results in incomplete documentation, for example due to the product being released and shipped before the product is fully documented.","The manual documentation process has been a necessity because many voice applications are written in general-purpose programming languages, and because the interface (e.g., menus, prompt, user input requirements) are inseparable from the code. In view of the complex rules surrounding the written code, it becomes very difficult to determine what information is useful for the documentation process, and what information is extraneous.","There is a need for an arrangement that enables voice applications to be documented based on interpretation of application-defining parameters by an application server. In particular, there is a need for arrangement that enables generation of documentation for voice applications, where an application server configured for executing a voice application also can extract documentation parameters for creating and formatting documentation for the voice application.","These and other needs are attained by the present invention, where an application server, configured for executing a voice application defined by XML documents, is configured for describing the voice application by collecting, for each of the XML documents, attributes describing execution of the XML documents in an application runtime environment, and generating for storage on a tangible medium an output file that describes the voice application based on at least a portion of the collected attributes selected by a user.","One aspect of the present invention provides a method in an application server configured for executing a voice application. The method includes parsing an extensible markup language (XML) document having XML tags for defining voice application operations, collecting attributes describing execution of the XML tags by the application server within an application runtime environment, and generating for storage on a tangible medium an output file that describes the voice application by outputting at least a portion of the collected attributes based on a user selection. Use of XML documents to define voice application operations enables the separation of user interface logic from application logic; hence, the parsing of XML tags enables the identification of attributes that describe the execution of the XML tags within the application runtime environment. These attributes are then collected for each XML document, enabling the application runtime environment to generate an output file that describes the voice application according to a format selected by a user. Hence, a user can request generation of documents that describe the voice application in any format, for example a relationship diagram that identifies interrelated XML documents and application functions, a user prompt menu to assist users navigating menu options generated by the voice application, a resource utilization table that specifies resources necessary for selected XML documents, and\/or a call flow diagram that specifies the sequence of voice application operations.","Another aspect of the present invention provides an application server including a storage medium configured for storing extensible markup language (XML) documents having XML tags that define voice application operations for a voice application, and an application runtime environment. The application runtime environment is configured for generating an output file that describes selected attributes of the voice application, and includes a parser configured for determining attributes of the respective XML tags within each of the XML documents according to the application runtime environment. The application runtime environment also includes a context collection module configured for storing the determined attributes, the application runtime environment selecting the stored determined attributes based on a user selection. Since the voice application operations are defined by the XML documents, the XML parser can identify attributes of the voice application, for example the relationship of operations specified by the XML tags to resources, procedures, and other XML documents accessible by the application runtime environment. Hence, the application runtime environment can generate an output file in any user-selectable format that describes any desired attribute of the voice application defined by XML documents.","Additional advantages and novel features of the invention will be set forth in part in the description which follows and in part will become apparent to those skilled in the art upon examination of the following or may be learned by practice of the invention. The advantages of the present invention may be realized and attained by means of instrumentalities and combinations particularly pointed out in the appended claims.",{"@attributes":{"id":"P-00029","num":"00029"},"figref":["FIG. 1","FIG. 3"],"b":["42","42","64","44","42","44","50","42","56"],"i":["a ","b","a ","b "]},"As shown in , each of the clients (tiny clients, skinny clients, thin clients and fat clients) are able to communicate via a single, unified architecture  that enables voice communications services between different clients, regardless of whether the client actually has browser capabilities. Hence, the fat client and the thin client are able to execute voice enabled web applications without any hardware modification or any modification to the actual browser; rather, the browsers  in the clients and merely are provided with an executable voice resource configured for providing browser audio control, described below.","The user devices , , and , illustrated as a cordless telephone , a fax machine having an attached telephone, and an analog telephone , are referred to herein as \u201cskinny clients\u201d, defined as devices that are able to interface with a user to provide voice and\/or data services (e.g., via a modem) but cannot perform any control of the associated access subnetwork.","The wireless user devices , , and , illustrated as a cellular telephone (e.g., AMPS, TDMA, or CDMA) , a handheld computing device (e.g., a 3-Com Palm Computing or Windows CE-based handheld device) , and a pager , are referred to as tiny clients. \u201cTiny clients\u201d are distinguishable from skinny clients in that the tiny clients tend to have even less functionality in providing input and output interaction with a user, rely exclusively on the executable application in an access subnetwork to initiate communications; in addition, tiny clients may not be able to send or receive audio signals such as voice signals at all.","Hence, the skinny clients , , and and the tiny clients , , and access the unified voice messaging services in the unified network  via a proxy browser , configured for providing an IP and HTTP interface for the skinny clients and the tiny clients. In particular, browsers operate by interpreting tags within a web page supplied via an HTTP connection, and presenting to a user media content information (e.g., text, graphics, streaming video, sound, etc.) based on the browser capabilities; if a browser is unable to interpret a tag, for example because the browser does not have the appropriate executable plug-in resource, then the browser typically will ignore the unknown tag. Hence, the proxy browser  can provide to each of the skinny clients and tiny clients the appropriate media content based on the capabilities of the corresponding client, such that the cordless telephone and telephone would receive analog audio signals played by the proxy browser  and no text information (unless a display is available); the fax machine and pager would only receive data\/text information, and the cellular telephone and the handheld computing device would receive both voice and data information. Hence, the proxy browser  interfaces between the IP network and the respective local access devices for the skinny clients and the tiny clients to provide access to the unified messaging network .","The proxy browser  and the web browsers  within the fat client and the thin client execute voice enabled web applications by sending data and requests to a web server , and receiving hypertext markup language (HTML) web pages from the web server , according to hypertext transport protocol (HTTP). The web server  serves as an interface between the browsers and an application server  that provides an executable runtime environment for XML voice applications . For example, the web server  may access the application server  across a common gateway interface (CGI), by issuing a function call across an application programming interface (API), or by requesting a published XML document or an audio file requested by one of the browsers  or . The application server , in response to receiving a request from the web server , may either supply the requested information in the form of an HTML page having XML tags for audio control by a voice resource within the browser, or may perform processing and return a calculated value to enable the browser  or  to perform additional processing.","The application server  accesses selected stored XML application pages (i.e., pages that define an application) and in response generates new HTML pages having XML tags during runtime and supply the generated HTML pages having XML tags to the web server . Since multiple transactions may need to occur between the browser  or  and the application server , the application server  is configured for storing for each existing user session a data record, referred to as a \u201cbrownie\u201d, that identifies the state of the existing user session; hence, the application server  can instantiate a procedure, return the necessary data, and terminate the procedure without the necessity of maintaining the instance running throughout the entire user session.","Hence, the application server  executes voice application operations from a stored XML document based on a transient application state, where the application server  terminates the application instance after outputting the generated XML media information to the browser  or .",{"@attributes":{"id":"P-00037","num":"00037"},"figref":["FIG. 2","FIG. 2"],"b":["64","66","68","70","70","56","72","66","72","66","66","72","74"],"i":"b "},"Certain development tools having direct access to the application server  can be used to establish context information used by the application runtime environment within the application server  for execution application operations based on parsing of XML documents. In particular, development tools such as a graphic based development system , a forms-based development system , an editor-based development system , or an outline-based development system may be used to define XML tags and procedure calls for the application runtime environment. The development tools  may be used to establish an application and resource database  to define low-level operations for prescribed XML tags, for example dynamically generating an XML menu page using executable functions specified by a menu rule set in response to detecting a menu tag, performing a logical operation using executable functions specified by a logic rule set in response to a decision tag, or fetching an audio (.wav) file in response to detecting a sound tag.","The development tools  may be used to establish an application programming interface (API) library  (e.g., a SQL interface) for the application runtime environment, enabling the application server  to issue prescribed function calls to established services, such as IMAP, LDAP, or SMTP. The library  may be implemented as dynamically linked libraries (DLLs) or application programming interface (API) libraries.",{"@attributes":{"id":"P-00040","num":"00040"},"figref":["FIGS. 3A and 3B","FIG. 3A"],"b":["66","66","66","100","102","100","72","92","66","104","66","64"]},"The runtime environment  is configured for execution of the parsed XML documents. The runtime environment  includes a tag implementation module  that implements the XML tags parsed by the XML parser . The tag implementation module  performs relatively low-level operations for execution of user interface operations, logic operations, or procedure calls. In particular, the tag implementation module  includes an executable tag resource library  that includes executable routines for selected XML tags (e.g., selected XML tags implemented using executable code such as C), which may be instantiated during initialization of the application runtime environment , or as needed upon execution of the corresponding XML tag operation. The tag implementation module  also includes an XML tag list  that \u201cdescribes\u201d the corresponding operation by specifying any logical operation, resource, procedure call etc. to implement the corresponding tag.","Hence, the tag implementation module  enables implementation of the XML tags within the context of the application runtime environment . For example the tag implementation module  dynamically generates an XML menu page using executable functions specified by a menu rule set in response to detecting a menu tag, performs a logical operation using executable functions specified by a logic rule set in response to a decision tag, or fetches an audio (.wav) file in response to detecting a an XML tag specifying an audio file as a resource. Hence, the tag implementation module  implements the tag operations that are specified within the XML framework of the stored XML documents, performing any one of a user interface operation, a logic operation, or a procedure call as specified by the parsed XML document by executing a corresponding set of executable functions based on the rule set (specified by the executable tag resource library  or the XML tag list ) for the corresponding operation.","The application runtime environment  also includes a voice prompts resource directory  that specifies the location of resources, such as .wav files, specified in the XML documents. Hence, the voice prompts resource directory  enables the application runtime environment  to access, either locally or remotely, stored .wav files used as voice prompts specified in the XML documents. Each voice prompt may also include corresponding text data that specifies the contents of the corresponding voice prompt: the text data may be stored within the header of the voice prompt, may be stored as a separate text file linked to the .wav file, or may be integrated within the .wav file itself.","The application server  also includes a set of libraries  that may be implemented as dynamically linked libraries (DLLs) or application programming interface (API) libraries. The libraries  enable the runtime environment  to implement the procedures as specified by the appropriate XML document. For example, the application server  may issue a function call to one of a plurality of IP protocol compliant remote resources , , or  according to IMAP protocol, LDAP Protocol, or SMTP protocol, respectively. For example, the PHP hypertext processor includes executable routines capable of accessing the IMAP or LDAP services, where the XML tags that reference those services are defined in the tag implementation module  (e.g., as executable code in the executable resource library  or rule sets within the XML tag list ). Note that the mechanisms for accessing the services , , or  should be established within the library  before use of XML documents that reference those services. Once the mechanisms for accessing the services , , or  are established in the library , the application runtime environment  can perform a function operation by using executable functions specified by a function call rule set in the tag implementation module .","As described above, the tag implementation module  specifies the rule sets for XML tags, enabling specific operations to be performed for each parsed XML tag, within the context of the application runtime environment . For example, the tag implementation module  includes rule sets that define four types of XML documents used by the application server  to execute web-based voice applications: menu documents, activity documents, decision documents, and \u201cbrownies\u201d. The menu documents, activity documents, and decision documents are XML documents, stored in the document database , that define user interface and boolean-type application logic for a web application, hence are considered \u201cexecutable\u201d by the application server . The brownie document, stored in a separate registry , is an XML data record used to specify application state and user attribute information for a given XML application during a user session. Hence, the XML documents define user interface logistics and tie services and application server events together in a meaningful way, forming a coherent application or sets of applications. Additional details regarding the definition of executable voice applications using XML documents are described in the above-incorporated application Ser. No. 09\/501,516.","The disclosed embodiment directed to an arrangement that generates documents that describe voice-enabled web applications based on interpreting the XML documents that define the voice-enabled web application operations within the context of the application runtime environment .","The application runtime environment  includes a context collection module  and an output module , illustrated in detail in FIG. B. The context collection module  is configured for storing XML tag attributes determined by the parser  based on context information derived from the tag implementation module  within the application runtime environment . The context collection module  includes a resource collection table  configured for storing resources determined by the XML parser  to be referenced by a corresponding parsed XML document. The context collection module  also includes an executable procedures collection table , configured for storing executable procedures (e.g., procedure calls to the procedures library ) referenced by the corresponding parsed XML document. The context collection module  also includes a possible next states collection table configured for storing possible next states of the voice application as specified by the corresponding parsed XML document. Each of the tables , , and  also are configured for storing the attributes on a per-XML document basis. Hence, each application-defining XML document has its own corresponding entry in the tables , , and  for storing of the corresponding attributes.","Hence, the structured nature of XML documents that permits voice-enabled web applications to be executed by the application runtime environment  based on a prescribed set of rules also enables the application runtime environment  to generate a document that identifies the relationships between XML documents, based on user selection and based on the attributes collected within the context collection module  for each of the XML documents.","The application runtime environment  also includes an output module  configured for generating the output document file based on the user selection. In particular, the output module  includes scripts for generating documents that describe the voice application according to prescribed output formats. The output module  also is configured for accessing selected attributes from the tables ,  and  for selected XML documents using a sequential or recursive technique, depending on the type of output format. Exemplary output formats include: a user prompt menu that enables a user to follow a sequence of prompts within the menu structure specified by the XML documents; a resource utilization table that identifies all the resources within the voice prompts resources directory  that are used by selected XML documents, and\/or graphic output format for diagrams such as a call flow diagram. Hence, the output module  accesses selected attributes from the context collection module , depending on the type of output format desired by the user.","An understanding of the self-documenting nature of XML documents will become more readily apparent from the following description of ,  and .  is a diagram illustrating an implementation  of a relatively simple program entitled \u201cHello World\u201d written using an executable code. One needs a detailed understanding of the programming language used for the implementation  to even begin deciphering the flow of the application. In contrast, defining the application using a set of documents  and , illustrated in  within the context of an application runtime environment  that specifies a simple set of rules relating the documents  and , enables the generation of a directed graph , illustrated in , from which various forms of documentation can be extracted.",{"@attributes":{"id":"P-00051","num":"00051"},"figref":"FIG. 5","b":["402","404","406","402","404","406","406","100","100","3","402","404","410","412","406"]},"In contrast to the code-implemented application , the documents  and  separate logic from functions and user interface. Hence, the call flow relationship diagram  can be generated based on parsing the documents  and , and explicitly specifying the relationships between the tags within the documents  and , the resources , and the function calls  that are established during execution by the application runtime environment . Moreover, the call flow relationship diagram  can be generated by the application runtime environment  without parsing or examination of the underlying executable code used to execute the tags within the documents  or .",{"@attributes":{"id":"P-00053","num":"00053"},"figref":["FIG. 7","FIG. 7"]},"The method begins in step , where the application runtime environment  is initialized C by loading runtime variables such as resource locators from the voice resource directory , library registration parameters for the procedures library , and prescribed XML tag executable routines and\/or XML tag definitions from the tag implementation module . The application runtime environment , having loaded the necessary runtime variables for execution of XML tags within the context of the application runtime environment, receives from a user in step  a self-document request that specifies a prescribed format, for example a user prompt menu, a resource utilization table, a call flow diagram, etc. Typically the request may specify either a single XML document, or may specify a prescribed sequence of voice application operations. The application runtime environment  accesses in step  the documents related to the request that sequence of voice application operations, for example by identifying the application state specified in the user's brownie (stored in the registry ) if the XML document is not specifically identified in the user request.","The XML parser  within the application runtime environment  then parses in step  the XML tags in the referenced XML document, and interprets the XML tags based on the context-specific rule sets specified by the tag implementation module .","The parser  then identifies the resources, for example the voice resources , that are referenced by the parsed XML document in step , and stores the identified resources within an entry for the corresponding parsed XML document in the resource collection table . The parser  also identifies any procedure calls to the procedures library  specified in the parsed XML tags, for example procedures , and stores in step  the identified procedure calls within an entry for the corresponding parsed XML document in the executable procedures collection table . The parser  also identifies other XML documents referenced as possible next states, and stores in step  the possible next states within an entry for the corresponding parsed XML document in the next states collection table . For example, the next states collection table entry for document  (\u201cDocument A\u201d) would reference the documents  and , specified in the action tags \u201consuccess\u201d and \u201confailure\u201d, respectively.","Hence, the context collection module  stores the attributes of the parsed XML documents as explicit references to resources, procedure calls, and possible next states that are otherwise  implicit during execution of the XML documents during application runtime. Once the application runtime environment  has collected the attributes describing execution of the XML tags within an XML document, the output module  is able to begin generation of the output file that describes the voice application, depending on the user selected output format in step  (e.g., if the output request specifies a text file that does not require state-dependent output generation).","The application runtime environment  in step  accesses another XML document, if necessary, and repeats the process for collecting the attributes for the accessed XML document. For example, the application runtime environment  may access each of the XML documents specified in the next states collection table  for the first XML document entry.","Once the application runtime environment has collected the attributes for all relevant XML documents associated with a prescribed voice application operation, the output module  generates the output file by accessing selected attributes in step  from the collection table ,, and , and outputs the file in step , for example by storing as a text file, graphic file, etc. on a tangible medium or printing the document. As described above with reference to , the output module  selects collected attributes based on the type of documentation requested by the user.","Hence, the output module  may generate different types of output documents, for example the context relationship diagram illustrated in , a menu call flow diagram, a list of default prompts, a list of all documents that reference the selected resource , a list of all resources (e.g., voice prompts) utilized by a selected XML document.","Another example of the flexibility provided by the above-described arrangement involves an example where the keystroke *8 represents a transfer function for transferring the call outside a customer premises: assume that an administrator decides to no longer permit external transfers. The above-described arrangement could be used to generate two forms of documentation, the first identifying every user menu that used the *8 option, and the second specifying how to reach each of the user menus from an initial entry state.","According to the disclosed embodiment, voice applications defined by XML documents can be automatically documented based on user-selected requirements by parsing the XML documents, and collecting attributes describing execution of the XML tags of the XML documents within the application runtime environment. An output file can be generated that describes the voice application based on selecting the collected attributes based on user selection. Hence, the voice applications defined by XML documents can be considered as self-documenting, and the act of writing the applications using XML documents generates the necessary information for creating and formatting documentation in accordance with the attributes (i.e., context) provided by the application runtime environment.","While this invention has been described in connection with what is presently considered to be the most practical and preferred embodiment, it is to be understood that the invention is not limited to the disclosed embodiments, but, on the contrary, is intended to cover various modifications and equivalent arrangements included within the spirit and scope of the appended claims."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["Reference is made to the attached drawings, wherein elements having the same reference numeral designations represent like elements throughout and wherein:",{"@attributes":{"id":"P-00022","num":"00022"},"figref":"FIG. 1"},{"@attributes":{"id":"P-00023","num":"00023"},"figref":"FIG. 2"},{"@attributes":{"id":"P-00024","num":"00024"},"figref":"FIGS. 3A and 3B","b":"2"},{"@attributes":{"id":"P-00025","num":"00025"},"figref":"FIG. 4"},{"@attributes":{"id":"P-00026","num":"00026"},"figref":["FIG. 5","FIG. 4"]},{"@attributes":{"id":"P-00027","num":"00027"},"figref":["FIG. 6","FIG. 3"],"b":"5"},{"@attributes":{"id":"P-00028","num":"00028"},"figref":"FIG. 7"}]},"DETDESC":[{},{}]}
