---
title: Preventing malware from abusing application data
abstract: An attempted exploit of a vulnerability of an application executed by a computer is detected. The exploit attempts to call an application programming interface (API) and abuse application data through a malicious parameter of the call. The API of the application is hooked and monitored for a call made to the hooked API. A parameter of the call is analyzed to determine whether the parameter has a malicious characteristic indicating an attempt to use data within an address space of the application to execute malicious software. A remediation action is taken responsive to determining that the parameter has a malicious characteristic.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08499354&OS=08499354&RS=08499354
owner: Symantec Corporation
number: 08499354
owner_city: Mountain View
owner_country: US
publication_date: 20110315
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","BRIEF SUMMARY","DETAILED DESCRIPTION"],"p":["1. Field of the Invention","This invention pertains in general to computer security and in particular to detecting attempted exploits of vulnerabilities of applications and other programs executing on a computer.","2. Description of the Related Art","Applications executed on modern computers are often susceptible to a wide variety of attacks. Web browsers, for example, are particularly susceptible to attacks because browsers receive large amounts of content from the Internet. Other types of applications are also vulnerable. For example, email programs and even word processors provide interfaces that are vulnerable to attack.","Malicious attackers can compromise such applications by crafting specially-formulated inputs that exploit vulnerabilities in the applications. Such an input contains data that, when received by an application, gives the attackers control over the application and allows them to perform malicious acts such as capturing keystrokes, sending messages on the network, deleting files, installing malicious software (malware) such as spyware and adware, etc. Specifically, this type of attack exploits an application's vulnerability in order to inject or otherwise write malicious code into the application's address space. The application then executes the malicious code and gives the attacker control of the application.","To stop these sorts of attacks, modern security products monitor address spaces used by applications to detect behaviors that signify malicious code being written to the address space. Attackers have thus turned to new techniques that use data already present in an application's address space to carry out an attack. Since these new techniques do not write data into an application's address space, they are not detected by the security products.","The above and other issues are addressed by a method, computer system, and computer-readable storage medium for detecting an attempted exploit of a vulnerability of an application executed by a computer. An embodiment of the method comprises hooking an application programming interface (API) of the application and monitoring for a call made to the hooked API. The method further comprises analyzing a parameter of the call to determine whether the parameter has a malicious characteristic indicating an attempt to use data within an address space of the application to execute malicious software (malware). The method additionally comprises performing a remediation action responsive to a determination that the parameter has the malicious characteristic.","An embodiment of the computer system comprises a non-transitory computer-readable storage medium storing executable computer program modules for performing steps. The steps comprise hooking an application programming interface (API) of the application and monitoring for a call made to the hooked API. The steps further comprise analyzing a parameter of the call to determine whether the parameter has a malicious characteristic indicating an attempt to use data within an address space of the application to execute malicious software (malware). The steps additionally comprise performing a remediation action responsive to a determination that the parameter has the malicious characteristic. The computer system also comprises a computer processor for executing the computer program modules.","An embodiment of the medium comprises a non-transitory computer-readable storage medium storing executable computer program modules for detecting an attempted exploit of a vulnerability of an application executed by a computer. The modules perform hooking an application programming interface (API) of the application and monitoring for a call made to the hooked API. The modules further perform analyzing a parameter of the call to determine whether the parameter has a malicious characteristic indicating an attempt to use data within an address space of the application to execute malicious software (malware). The modules additionally perform a remediation action responsive to a determination that the parameter has the malicious characteristic.","The figures depict an embodiment of the present invention for purposes of illustration only. One skilled in the art will readily recognize from the following description that alternative embodiments of the structures and methods illustrated herein may be employed without departing from the principles of the invention described herein.",{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 1","b":["100","100","100"]},"The illustrated computer  includes at least one processor  coupled to a chipset . The chipset  includes a memory controller hub  and an input\/output (I\/O) controller hub . A memory  and a graphics adapter  are coupled to the memory controller hub , and a display device  is coupled to the graphics adapter . A storage device , keyboard , pointing device , and network adapter  are coupled to the I\/O controller hub . Other embodiments of the computer  have different architectures. For example, the memory  is directly coupled to the processor  in some embodiments.","The storage device  is a non-transitory computer-readable storage medium such as a hard drive, compact disk read-only memory (CD-ROM), DVD, or a solid-state memory device. The memory  holds instructions and data used by the processor . The pointing device  is used in combination with the keyboard  to input data into the computer . The graphics adapter  displays images and other information on the display device . In some embodiments, the display device  includes touch screen capability for receiving user input and selections.","The network adapter  couples the computer system  to a network such as the Internet. For example, the network may connect the computer  to a security server that provides and updates a security module. The network may also connect the computer  to a variety of servers that provide websites and other functionality.","Some embodiments of the computer  have different and\/or other components than those shown in . For example, the computer  can be formed of multiple blade servers and lack a display device, keyboard, and other components.","The computer  is adapted to execute computer program modules for providing functionality described herein. As used herein, the term \u201cmodule\u201d refers to computer program instructions and other logic used to provide the specified functionality. Thus, a module can be implemented in hardware, firmware, and\/or software. In one embodiment, program modules formed of executable computer program instructions are stored on the storage device , loaded into the memory , and executed by the processor .","In addition, this description uses the term \u201capplication\u201d to refer to a program executed by the computer . The application can be part of an operating system executing on the computer, or independent of the operating system. The application is formed of one or more files that typically reside on the storage device  and are loaded into memory  when executed. At least one of the files loaded into memory  is referred to as the \u201cexecutable image\u201d and is executed as a process. The process includes an application programming interface (API) having functions (including methods) that can be called by other processes executing on the computer. A valid function call includes zero or more parameters that are passed to the called process for use by the called function.",{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 2","b":["100","210","220"]},"Assume that the application  has an interface for executing content received from a server via the network, stored on a local disk, or located elsewhere. In a common example, the application  is a web browser such as MICROSOFT INTERNET EXPLORER or MOZILLA FIREFOX that includes functionality for downloading web pages from a server and executing downloaded content.","The computer  may be attacked by receiving malware shell code within a malicious script on a seemingly-innocuous web page. When the script is executed by the computer , the shell code exploits a vulnerability of the browser or another application  to compromise the computer. Once the shell code gains control of the computer , it performs additional malicious actions such as downloading malware to the computer  from the network and\/or executing malware previously downloaded to the computer.","In a particular exploit, the malware stores malicious code in a file on the computer  having a file name that is a substring of a string within the address space of the process for the application . The shell code calls a function in the API of the application  and passes a set of parameters to the application. A parameter references the substring within the address space of the application , and causes the application to load and execute the malicious code in the file. Thus, the malware exploits the vulnerability of the application without injecting or otherwise writing malicious code into the application's address space because the substring exists within the address space of the process for the application  before the call is made.","For example, if the application's address space contains the string \u201cntdll.dll,\u201d the malware stores malicious code in a file on the computer  named \u201cdll.dll.\u201d The shell then makes a call to the application  that includes a parameter referencing a string starting at the third character of \u201cntdll.dll,\u201d i.e., \u201cdll.dll.\u201d As a result of this call, the application  loads and executes the malicious code in the \u201cdll.dll\u201d file. The malicious code can then perform other malicious actions on the computer .","The security module  executes on the computer  to detect and report malware using a variety of techniques. In one embodiment, the security module  is configured to detect and block attacks that reference data within the address space of an application  like those described above. The security module  may also use malware definitions that describe signature strings and\/or behaviors that, if detected on the computer , indicate the presence of malware. The security module  thus provides protection by preventing malware from compromising the computer .","In some embodiments the security module  is incorporated into an operating system executing on the computer  while in other embodiments the security module is a standalone application or part of another product. As shown, the security module  itself includes multiple modules. Those of skill in the art will recognize that other embodiments of the security module  can have different and\/or other modules than the ones described here, and that the functionalities can be distributed among the modules in a different manner.","A monitoring module  within the security module  hooks APIs of applications  to enable transfer of control flow from the applications to the security module  at certain points during the applications' executions. In one embodiment, the monitoring module  identifies applications  on the computer  that have vulnerabilities that can be exploited by malicious code in content received via a network or from other sources. The monitoring module  hooks function calls in the APIs of these applications at locations which allow the security module  to detect malware exploiting the applications' vulnerabilities.","The specific APIs and functions hooked by the monitoring module  vary in different embodiments. An embodiment of the monitoring module  receives a list of applications, exploitable vulnerabilities, and hooking locations from the developer of the security module  and\/or from another source and compares the applications in the list with the applications installed on the computer . The monitoring module  hooks the specified locations of the installed applications. In another embodiment, the monitoring module  hooks any API functions that can be called to pass parameters to an application.","In one embodiment, the monitoring module  installs a hook by replacing one or more instructions in the application's instruction stream with a jump instruction or other similar instruction that redirects control flow to the security module . In one embodiment, executing the hook causes the monitoring module  to save the state of the computer , including the parameters of the hooked function call, for subsequent analysis. If the analysis fails to detect malware, an embodiment of the monitoring module  restores the original state of the computer  and transfers the control flow back to the hooked application  by executing the original instructions that were replaced when the hook was installed.","An analysis module  analyzes the parameters of hooked function calls for evidence that malware is attempting to exploit vulnerabilities of applications . In one embodiment, the analysis module  is activated when a hooked function is called by another process. The analysis module  determines whether the parameters being passed to the function by the calling process have characteristics indicating an attempt to use data within the called application's address space to execute malware.","A malware detection module  uses the results from the analysis module  to determine if the process that called the hooked function is malware. In one embodiment, the malware detection module  makes the determination based on results from multiple different types of analyses. For example, the malware detection module  can also consider the reputation of the process that called the hooked function, whether the process engaged in other suspicious behaviors, whether the process is digitally signed, whether the process is on a whitelist of known legitimate applications, and\/or whether a string signature of known malware is found within the process. Based on these considerations, the malware detection module  declares the calling process malicious or legitimate.","A remediation module  performs one or more remediation actions for detected malware. The remediation actions vary in different embodiments. In one embodiment, the remediation module  performs an action that blocks the malware from compromising the computer . These actions may include terminating the calling and\/or called process, and deleting a malicious file stored on the computer. The remediation actions may also include reporting the malware detection to a user of the computer and\/or to a security server via the network.",{"@attributes":{"id":"p-0036","num":"0035"},"figref":["FIG. 3","FIG. 3"],"b":["214","210","214","310","312","314"]},"The location module  determines whether a parameter of the call references an abnormal location in the called application's address space. Normally, a parameter that supplies a string will reference a location in the resource or string sections of the address space (i.e., of the portable executable file loaded into the address space as the executable image), or pass the string on the processor stack. An attacker, in contrast, may reference a string in an abnormal location, such the header section, perhaps because the string required for the attack is found only in that location. If the call parameter references an abnormal location, the location module  flags the call as having a suspicious characteristic.","The substring module  determines whether a parameter of the call references a location in the called application's address space holding substring of a full string. In one embodiment, strings stored in the address space, on the stack, and elsewhere are bounded by null characters. The substring module  thus determines whether the string contained within the location referenced by the parameter has bounding null characters. If the characters bounding the string are not null, the location module  flags the call as having suspicious characteristics.","The relation module  determines whether a parameter of the call references data at a location having no apparent relationship with the called application. Typically, the data referenced by a parameter is located either within the executable image of the called application, or within another related module used by the application (e.g., within a DLL file loaded into the address space by the application). It is unusual for a parameter to reference data from a different location. Therefore, if the parameter references data at a location having no apparent relationship with the called application, the relation module  flags the call as having suspicious characteristics.","The file existence module  determines whether a parameter of the call references a data string having the same name as a file on the storage device  of the computer . In one embodiment, the file existence module  interacts with the substring module  to determine whether the data string referenced by the parameter is a substring of a full string. If the data string is a substring, the file existence module  determines whether a file having the same name as the full string exists on the storage device  of the computer . If the file exists, the file existence module  flags the call as having suspicious characteristics because it is unusual for a call parameter to reference only part of the name of a file stored by the computer  and it is likely that the call is attempting to load malware.","In one embodiment, the file existence module  determines whether a file having the same name as the substring is stored on the storage device . If the file with the substring name exists, the file existence module  examines the file for characteristics indicating whether it is malicious. For example, the file existence module  may determine the creation date of the file. If the file was created recently, this characteristic indicates that the file is potentially malicious because it might have been created by malware that recently entered the computer . On the other hand, if the file creation was not recent, this characteristic suggests that the file is not malicious.","The check of whether the file with the substring name exists can serve as a false positive mitigation test for the file existence module . If a file with the full string name exists, and the file with the substring name exists and lacks malicious characteristics, an embodiment the file existence module  does not flag the call as having suspicious characteristics because the file with the substring name might be legitimate.",{"@attributes":{"id":"p-0043","num":"0042"},"figref":"FIG. 4","b":["210","100","210"]},"The security module  hooks  function calls in the API of an application  on the computer . In one embodiment, the security module  hooks the application when the executable image is loaded into memory by the computer . The hook transfers control flow to the security module  if a hooked function is called. In one embodiment, when a hook is followed and control flow passes to the security module , the security module saves the state of the computer , including the parameters of the hooked call.","In one embodiment, the analysis module  of the security module  analyzes  the parameters of the hooked call for evidence indicating that a vulnerability in the application  is being exploited. This analysis  may include determining whether a parameter references data in an abnormal location in the application's address space and whether a parameter references a substring of a full string in the address space. The analysis  may also include determining whether a parameter of the call references data at a location having no apparent relationship with the called application, and whether files having the substring and\/or full string names are stored by the computer . In one embodiment, the security module  combines the results of the call analyses with results of other analyses of the computer  to determine  whether the function call is malicious (i.e., attempting to exploit a vulnerability of the application). If the security module  determines that the call is not malicious, the security module returns  control flow to the application. On the other hand, if the security module  determines that the call is malicious, it performs one or more remediation actions such as blocking the exploit and notifying the computer user.","Some portions of above description describe the embodiments in terms of algorithmic processes or operations. These algorithmic descriptions and representations are commonly used by those skilled in the data processing arts to convey the substance of their work effectively to others skilled in the art. These operations, while described functionally, computationally, or logically, are understood to be implemented by computer programs comprising instructions for execution by a processor or equivalent electrical circuits, microcode, or the like. Furthermore, it has also proven convenient at times, to refer to these arrangements of functional operations as modules, without loss of generality. The described operations and their associated modules may be embodied in software, firmware, hardware, or any combinations thereof.","As used herein any reference to \u201cone embodiment\u201d or \u201can embodiment\u201d means that a particular element, feature, structure, or characteristic described in connection with the embodiment is included in at least one embodiment. The appearances of the phrase \u201cin one embodiment\u201d in various places in the specification are not necessarily all referring to the same embodiment.","Some embodiments may be described using the expression \u201ccoupled\u201d and \u201cconnected\u201d along with their derivatives. It should be understood that these terms are not intended as synonyms for each other. For example, some embodiments may be described using the term \u201cconnected\u201d to indicate that two or more elements are in direct physical or electrical contact with each other. In another example, some embodiments may be described using the term \u201ccoupled\u201d to indicate that two or more elements are in direct physical or electrical contact. The term \u201ccoupled,\u201d however, may also mean that two or more elements are not in direct contact with each other, but yet still co-operate or interact with each other. The embodiments are not limited in this context.","As used herein, the terms \u201ccomprises,\u201d \u201ccomprising,\u201d \u201cincludes,\u201d \u201cincluding,\u201d \u201chas,\u201d \u201chaving\u201d or any other variation thereof, are intended to cover a non-exclusive inclusion. For example, a process, method, article, or apparatus that comprises a list of elements is not necessarily limited to only those elements but may include other elements not expressly listed or inherent to such process, method, article, or apparatus. Further, unless expressly stated to the contrary, \u201cor\u201d refers to an inclusive or and not to an exclusive or. For example, a condition A or B is satisfied by any one of the following: A is true (or present) and B is false (or not present), A is false (or not present) and B is true (or present), and both A and B are true (or present).","In addition, use of the \u201ca\u201d or \u201can\u201d are employed to describe elements and components of the embodiments herein. This is done merely for convenience and to give a general sense of the disclosure. This description should be read to include one or at least one and the singular also includes the plural unless it is obvious that it is meant otherwise.","Upon reading this disclosure, those of skill in the art will appreciate still additional alternative structural and functional designs for a system and a process for discovering documents sharing common underlying structures in a large collection of documents and processing the documents using the discovered structures. Thus, while particular embodiments and applications have been illustrated and described, it is to be understood that the present invention is not limited to the precise construction and components disclosed herein and that various modifications, changes and variations which will be apparent to those skilled in the art may be made in the arrangement, operation and details of the method and apparatus disclosed herein without departing from the spirit and scope as defined in the appended claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 4","b":"100"}]},"DETDESC":[{},{}]}
