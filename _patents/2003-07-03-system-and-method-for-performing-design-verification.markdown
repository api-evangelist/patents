---
title: System and method for performing design verification
abstract: A design verification system for developing electronic systems and methods for manufacturing and using same. The design verification system comprises a plurality of system elements, including at least one physical (or hardware) element and/or at least one virtual (or software) element, which are coupled, and configured to communicate, via a general communication system. Since the system elements may be provided on dissimilar development platforms, each system element is coupled with the communication system via a co-verification interface, which is provided as a layered protocol stack to assure portability and flexibility. Through use of the co-verification interface, the design verification system can be configured to support a wide variety of mixed physical/virtual systems.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07792933&OS=07792933&RS=07792933
owner: Cadence Design Systems, Inc.
number: 07792933
owner_city: San Jose
owner_country: US
publication_date: 20030703
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS"],"p":["The present invention relates generally to design verification systems and more particularly, but not exclusively, to design verification systems for developing system-on-chip (SoC) modules.","System-on-chip (SoC) technology presents a major revolution in the design of integrated circuits because of the unprecedented levels of integration possible. A system-on-chip has both hardware and software components. The hardware components can include one or more central processing units (CPUs), memory systems, special functions devices, buses, and interfaces; whereas, operating systems, applications, and drivers are exemplary software components.","Because the hardware components execute the software components, these hardware and software components are dependant on each other. Despite this, the hardware and software components typically are separately developed, often by different people. Since silicon turns (each \u201csilicon turn\u201d is a complete fabrication of chip) can account for a large portion of the total cost and time for developing a system-on-chip, considerable hardware verification is performed prior to fabrication. One important technique for performing functional verification of a system-on-chip involves executing the software components with real data to test a preselected percentage of the system-on-chip's total state space, a set of all reachable system states and transitions among these states.","Numerous methods have been used to perform co-verification of hardware and software components. For example, one technique involves modeling one or more hardware components in a Hardware Description Language (HDL) such as Verilog and simulating the modeled components by running the software components on an event-driven gate-level logic simulator. With current designs, presently available simulators and workstations have proven unsatisfactory because performance of such models ranges between approximately one and one thousand cycles per second, which is inadequate for operating the software components.","Similarly, one or more hardware components can be modeled at the instruction level in a high-level programming language, such as C or C++, by an instruction set simulator (ISS). The instruction set simulator can be readily developed and can operate the software components and modeled hardware components at a clock frequency of about ten thousand to one hundred thousand cycles per second. This is an improvement over the event driven simulators discussed above, but instruction-level instruction set simulators also have substantial limitations. Instruction set simulators, for instance, are not useful when cycle level accuracy is needed to model software execution speed, which often is necessary in media processing systems and other real-time embedded systems. A fully accurate cycle level instruction set simulator, which employs accurate models of internal pipelines, speculative execution, and cache and memory management unit (MMU) behavior, is very difficult to design. Further, since the central processing unit's cache and\/or memory management unit typically are not modeled, instruction set simulators do not present the same sequence of transactions to both the modeled hardware components and physical hardware components.","Custom prototypes of new hardware components can be produced with one or more field programmable gate arrays (FPGAs) and\/or with hardware assisted accelerators or emulators, such as the Palladium Accelerator\/Emulator provided by Cadence Design Systems, Inc., of San Jose, Calif. The use of field programmable gate arrays however is limited to small, modular hardware components, while hardware assisted accelerators require custom processors, which can be expensive.","Physical platform development prototype boards, such as an ARM Integrator Development Board platform produced by ARM Limited in Cambridge, England, provide a platform with central processing units, memory systems, and other devices that are interconnected by buses and that are suitable for developing new hardware and software components for a system-on-chip designs. Each new component typically is independently debugged, generally requiring specially-developed testbench programs. Once produced in synthesizable register transfer level (RTL) form, the new components can be synthesized into a field programmable gate array in a field programmable gate array for verification at full speed. However, the new components, once in synthesizable register transfer level form, are difficult to debug and revise, resulting in increased cost and longer development times.","In view of the foregoing, a need exists for an improved design verification system that overcomes the aforementioned obstacles and deficiencies of currently-available design verification systems.","The present invention is directed toward a design verification system that is configured to couple, and transmit communication signals among, system elements of an electronic system under development.","The design verification system comprises a plurality of system elements, including at least one physical (or hardware) element and\/or at least one virtual (or software) element, which are coupled, and configured to communicate, via a flexible communication system. The physical elements can comprise one or more electronic components, such as central processing units (CPUs), memory systems, and field programmable gate arrays (FPGAs), and typically are assembled on one or more hardware development platforms. Comprising software models of physical elements, each of the virtual elements can be modeled in a programming language or a Hardware Description Language (HDL) and are simulated via a software development platform, such as an accelerator, simulator, and\/or emulator. The physical elements and the virtual elements each provide at least one hardware function, which contributes to the overall system function of the electronic system.","Since one or more of the system elements may be provided on an incompatible development platform, each system element is provided with a co-verification interface to facilitate communications among the system elements. The co-verification interfaces couple the system elements with the communication system and preferably is provided as a layered protocol stack to assure portability and flexibility. The system elements exchange communication signals via the communication system to execute the overall design verification system and to provide debugging services. Since the hardware development platforms can be configured to provide an operating system for the virtual elements, a number of clock cycles expended during interactions among the physical elements and the virtual elements can be reduced such that verification of the electronic system can be performed more quickly.","Considerable debugging of the electronic system can be achieved while the virtual elements remain in their virtual form. Once the electronic system is stable, one or more of the virtual elements can be refined to a register transfer level (RTL) form for further testing. The virtual elements subsequently can be compiled into a field programmable gate array (FPGA) for more extensive verification at full speed. As each virtual element is converted to a physical form, system performance and verification coverage increase.","Other aspects and features of the present invention will become apparent from consideration of the following description taken in conjunction with the accompanying drawings.","It should be noted that the figures are not drawn to scale and that elements of similar structures or functions are generally represented by like reference numerals for illustrative purposes throughout the figures. It also should be noted that the figures are only intended to facilitate the description of the preferred embodiments of the present invention. The figures do not describe every aspect of the present invention and do not limit the scope of the invention.","Since current design verification systems require highly accurate component modeling and can prove difficult and costly to implement, a design verification system that provides a flexible interface and protocol for interconnecting and co-verifying physical and virtual elements of an electronic system under development can prove much more desirable and provide a basis for a wide range of electronic applications, such as the development of system-on-chip (SoC) modules. This result can be achieved, according to one embodiment disclosed herein, by employing a design verification system  (shown in ).","Turning to , the development of an electronic system  normally involves an integration of one or more subsystems, including existing subsystems , newly-designed subsystems , or both. Although the electronic system  can comprise a new, but untested, combination of existing subsystems , a more typical electronic system  includes at least one newly-designed subsystem . For purposes of illustration, the electronic system  of  is shown and described as having one existing subsystem  and one newly-designed subsystem . However, it will be appreciated that the electronic system  can include any number and\/or configuration of existing subsystems  and\/or newly-designed subsystems . The existing subsystem  and the newly-designed subsystem  are configured to provide at least one hardware function, which contributes to the overall system function of the electronic system . Each of the hardware functions can be provided by one or both of the existing subsystem  and the newly-designed subsystem . When development is complete, the electronic system  can be integrated into an electronic package, such as a system-on-chip (SoC) module, and the existing subsystem  and the newly-designed subsystem  can be coupled, and configured to communicate, via one or more communication channels, such as a communication bus , as shown in .","During development, the existing subsystem  and the newly-designed subsystem  of the electronic system  can be provided on the design verification system  as illustrated in . The design verification system  comprises a plurality of system verification elements, such as one or more physical (e.g., hardware) verification elements  and\/or virtual (e.g., software) verification elements , which are coupled, and configured to communicate, via a flexible communication system . The system elements ,  are configured to execute a portion of the overall system function of the electronic system  and\/or to provide debugging services for evaluating the electronic system . Although the design verification system  shown and described below as comprising one physical element  and one virtual element , it is understood that the design verification system  can be extended to any number and\/or configuration of physical elements  and\/or virtual elements .","The physical element  are provided as an arrangement of one or more physical electronic components, such as integrated components and\/or discrete components, which typically are assembled on one or more hardware development platforms  in the manner known in the art. Each hardware development platform  can comprise a physical platform development prototype board like an ARM Integrator Development Board platform. As shown in , the physical element  can include any type of central processing units (CPUs) , memory systems , field programmable gate arrays (FPGAs), or a combination thereof, and are configured to communicate with each other via one or more internal communication channels, such as an internal communication bus . If desired, the physical element  can share at least one electronic component, such as the memory system  and\/or the hardware development platform , with one or more other physical elements .","Similarly, the virtual element  includes one or more software models , which can be compiled and simulated via one or more software development platforms  in the manner known in the art. Comprising models  of at least one component, in whole or in part, of the electronic system , the virtual element  can be provided in any programming language, such as C, C++, SystemC, Perl, or Java, or in any Hardware Description Language (HDL), such as Verilog or Very High Speed Integrated Circuits Hardware Description Language (VHDL) and can be developed and\/or stored on any type of computer system  that can process software. For example, the virtual element  can be provided on any type of processing system, including a personal computer, workstation, server, embedded processor, and\/or digital signal processor (DSP), which is operating an operating system, such as Windows or UNIX. Exemplary software development platforms  include accelerators, simulators, and\/or emulators of any kind, examples of which are an HDL simulator, an instruction set simulator (ISS), a SystemC simulator, or Cadence's Palladium Accelerator\/Emulator. It will be appreciated that each virtual element  can be provided on substantially separate software development platforms  and\/or that the software development platform  can be shared by two or more virtual elements .","The software models  can be provided in any level of abstraction. Abstraction is a modeling technique that eliminates details that make little or no contribution to the accuracy required by the intended use of the model . Contributing to the design and verification process by providing structure, the software models  can be quickly simulated and preferably are reusable, measurable for accuracy, and support the refinement of the software models  toward, for example, a Hardware Description Language (HDL) implementation level. Each software model  preferably includes a functional model and an interface model. The functional model can embody a substantially complete set of the hardware functions supported by the emulated component; whereas, the interface model includes a set of functions declared in terms of operations on transactions that facilitate communication with the model .","When the electronic system  is disposed on the design verification system , the existing subsystem  and the newly-designed subsystem  can be provided as one or more physical elements , one or more virtual elements , or a combination of both physical elements  and virtual elements .  illustrates a typical configuration of the design verification system  in which the existing subsystem  is provided as the physical element  and is assembled the hardware development platform ; whereas, the newly-designed subsystem  comprises the virtual element , which is compiled and simulated on the software development platform . It will be appreciated, however, that the newly-designed subsystem  can be provided as a physical element  and\/or that the existing subsystem  can be provided as a virtual element  when, for example, one or more components of the existing subsystem  are being revised or are otherwise unavailable. Thereby, the existing subsystem  and the newly-designed subsystem  both can comprise physical elements  or virtual elements , as desired.","In the manner discussed above, the physical element  and the virtual element  are coupled, and configured to communicate, via the communication system . The communication system  is configured to transmit communication signals (not shown) between the physical element  and the virtual element . Typically comprising data, address, and control signals, the communication signals can comprise messages for executing the design verification system  and\/or for providing debugging services. Through use of the communication system , the design verification system  can employ the communication signals to communicate events, messages, transactions, debugging commands, data, and user-defined messages of any kind to and from the physical element  and the virtual element .","A message is the fundamental unit of transfer between system elements ,  and can be provided with any suitable level of abstraction. Illustrative messages include commands, requests, or responses that are communicated between system elements , . In a signal-level interface, for example, a message can include information regarding one or more events and can be provided via one or more signals. An event is a change of state of a signal at a specific time or cycle and can include, for instance, a bus read or an interrupt going active; whereas, each signal comprises a net signal or a bus signal that is provided by the electronic system  and that corresponds with a hardware communication path, such as a wire or a bus. In contrast, a transaction-level interface is more abstract. Comprising a request and\/or a response, a transaction can take place over a plurality of timesteps or cycles and can include information regarding one or more commands, addresses, and\/or data words.","Transactions also can have one or more attributes, including user-defined attributes and\/or meta attributes. User-defined attributes are typically chosen according to the minimal information required to communicate between blocks and include attributes such as address information, data information, and data size. Supporting analysis of the simulation results for design space exploration and\/or functional verification, meta attributes can include a begin time for a transaction, an end time for a transaction, and fields to specific relationships between transactions to show, for example, cause and effect relationships. The manner in which transactions are realized can depend upon the programming language used. For example, SystemC realizes transactions as C++ classes.","Since the physical element  and the virtual element  may be provided on dissimilar, and potentially incompatible, development platforms , , at least one of the system elements ,  can be provided with a co-verification interface  to facilitate communications between the physical element  and the virtual element , as shown in . Preferably, the physical element  and the virtual element  are both provided with the co-verification interface . As illustrated in , the physical element  is coupled with the communication system  via a physical co-verification interface P; while, the virtual element  is coupled with the communication system  via a virtual co-verification interface V. As desired, the co-verification interface P can be disposed substantially within the physical element , as shown in , and\/or can be separate from the physical element , as illustrated in . The co-verification interface V likewise can be disposed substantially within the virtual element , as shown in , and\/or can be separate from the virtual element , as illustrated in . It also will be appreciated that the communication system  and the co-verification interfaces  can be combined such that the physical element  and the virtual element  can be coupled substantially via the co-verification interfaces  as shown in .","To assure portability and flexibility, the co-verification interfaces  are provided as a layered protocol stack  as shown in . The layering of the protocol stack  permits flexibility in the type of physical medium comprising the communication system  and in the type of the communication signals exchanged between the physical element  and the virtual element . Thereby, the physical medium comprising the communication system  is decoupled from the development platforms , . Being similar to standard network layering protocols, such as Transmission Control Protocol\/Internet Protocol (TCP\/IP) and Open Systems Interconnect Model (OSI), the co-verification interface  can support communication systems  with a wide variety of physical media, including IEEE-1394 FireWire, Interprocess Communication (IPC) pipes, Peripheral Component Interconnection (PCI), Ethernet, and custom cables and\/or software forms, such as shared messaging or inter-process communications.","The communication system  can be provided with any appropriate configuration. For example, the communication system  can include one or more serial and\/or parallel communication paths. The configuration of the communication system  preferably depends at least partially upon the characteristics of the communication signals exchanged between the physical element  and the virtual element  as well as the characteristics of the physical element  and\/or the virtual element  themselves. The protocol stack  also can be configured to manage flow control between the physical element  and the virtual element  and server timeouts.","The protocol stack  of each co-verification interface  can include any suitable number of layers to facilitate communications between the physical element  and the virtual element . As illustrated in , for example, the protocol stacks  of the co-verification interfaces P, V each preferably comprise at least three layers: an application layer , a network layer , and a data link layer . As desired, the communication system  can comprise a fourth layer, a physical layer , of the protocol stacks  as shown in . Although shown and described below as forming the physical layer  of the protocol stacks , it is understood that the communication system  can be provided as a separate system from the protocol stacks  and can be coupled with the protocol stacks  in a manner similar to the manner described below with reference to the system elements , .","Each layer , , ,  in the protocol stack  can be implemented in hardware, software, or a combination of hardware and software components. Preferably, each layer , , ,  of the virtual co-verification interface V is implemented in software. In contrast, the physical co-verification interface P comprises layers , , , , which preferably are implemented in hardware. It will be appreciated that, when the design verification system  includes physical elements  and virtual elements  as shown in , at least one layer , , , , such as the physical layer , of the co-verification interfaces P, V comprises both hardware and software components. Although the layers , , ,  are shown and described as being separate for purposes of illustration, it is understood that the hardware and\/or software components of two or more of the layers , , ,  can be combined, for example, into a common field programmable gate array.","The protocol stacks  also include one or more coupling interfaces , , , , which preferably comprise standard interfaces for coupling the co-verification interfaces P, V with the system elements , , the physical layer  (e.g., the communication system ). As shown in , the coupling interfaces  can be disposed substantially between and coupled with the system elements ,  and the application layers  of the respective co-verification interfaces P, V and provide a universal interface for coupling the application layers  with the system elements , . Each of the coupling interfaces , for example, can comprise a plurality of hardware and\/or software Application Programming Interfaces (APIs) that are functionally equivalent and interchangeable and that are configured to couple the relevant protocol stack  and system element , . The coupling interfaces ,  are respectively disposed substantially between the application layers  and the network layers  and between the network layers  and the data link layers ","Each coupling interface  is disposed substantially between the respective data link layers  and physical layers . Although configurable to provide a universal interface for coupling the data link layers  of the co-verification interfaces P, V with the physical layers , the coupling interfaces  typically are defined by an industry standard, such as the IEEE-1394 FireWire standard, that is associated with the physical media of the physical layers . Therefore, the coupling interfaces , being disposed substantially between the network layers  and the data link layers , preferably are configured to provide the universal interface for coupling the co-verification interfaces P, V with the physical layers . By including the coupling interfaces , , , , the co-verification interfaces P, V become more universal and are configured to flexibly couple with a wide variety of system elements ,  and\/or physical layers .","The co-verification interfaces P, V are configured to handle a suitable number of communication channels between the system elements , . Each communication channel preferably provides a unidirectional communication path for transmitting the communication signals from one system element ,  to another system element , . One communication channel, for example, can transmit peripheral data from the virtual element  to a hardware peripheral device (not shown), such as a printer system or display system, which is coupled with the physical element . A channel pair, comprising two communication channels that are configured to transmit the communication signals in opposite directions, can provide a bi-directional communication path between the system elements , . Likewise, a plurality of channel pairs can be advantageously disposed between the system elements ,  to provide a plurality of communication connections, which may support the same and\/or different types of communication signals. For example, one of the plurality of channel pairs can be configured to extend an Advanced Peripherals Bus (APB) provided by the physical element  to the virtual element ; whereas, another of the channel pairs can transmit interrupt signals provided by the virtual element  to the physical element .","The application layers  are configured to control the flow of the communication signals between the system elements ,  and the network layers . The communication signals preferably are communicated between the system elements ,  and the respective application layers  via any suitable number of electrical connections  as shown in . The configuration of the electrical connections  is application-dependent and can comprise a single electrical link for, for example, serial communication signals, and\/or a plurality of electrical links, such as a communication bus. Being configured to form a portion of a communication channel between the system elements , , the electrical connections  can directly couple the system elements ,  and the application layers , and\/or, as illustrated in , the electrical connections  can couple the system elements ,  and the application layers  indirectly, such as, via transactors , .","The transactors ,  provide interfaces between the system elements ,  and the network layers  and are configured to convert the communication signals exchanged between the system elements ,  and the network layers . For example, the transactors ,  can convert between signal-level communication signals and transaction-level communication signals in accordance with the Cadence Design Systems' publication, Transaction-Based Verification: TestBuilder User Guide\u201d (July 2002), the disclosure of which is hereby incorporated herein by reference. The transactors ,  can be disposed between the system elements ,  in any manner. As shown in , for example, the transactor  can be provided adjacent to the software model  on the development platforms ; whereas, the transactor  can be included in a field programmable gate array (FPGA)  that provides one or more of the layers , , ,  of the physical co-verification interface P.","Likewise, one or more electrical connections  can be disposed substantially between the application layers  and the respective network layers . A number of the electrical connections  coupling the application layers  and the network layers  can be greater than, less than, or substantially equal to the number of electrical connections  coupling the application layers  and the system elements , . The electrical connections  can communicate the communication signals between the application layers  and the respective network layers , and, in the manner discussed above with reference to the electrical connections , the configuration of the electrical connections  is application-dependent and can comprise one or more electrical links. The application layer  includes a plurality of communication connections (not shown). The communication connections of the application layer  couple the electrical connections  and the electrical connections  such that two-way communication of the communication signals is permitted between the system elements ,  and the network layers . The system elements ,  thereby are configured to communicate outgoing communication signals to the network layers  and to receive incoming communication signals from the network layers  each via the communication connections of the application layers , forming a portion of a communication channel between the system elements , .","Each of the electrical connections ,  preferably includes unidirectional electrical connection for transmitting or receiving the communication signals. For example, an electrical connection can comprise a unidirectional electrical connection that is configured to transmit outgoing communication signals from the physical element  to the application layer ; whereas, the physical element  can receive incoming communication signals from the application layer  via a unidirectional electrical connection . The electrical connections , can be paired to form a bi-directional electrical connection between the physical element  and the application layer . Likewise, electrical connections , can be unidirectional electrical connections and be configured to exchange incoming and outgoing communication signals between the application layer  and the network layer . Also being paired to provide a bi-directional electrical connection between the application layer  and the network layer , the electrical connections , can be coupled, and configured to communicate, via the communication connections of the application layer  in the manner described above to form a portion of a bi-directional channel pair.","It will be appreciated that the application layer  can independently control the communication connections coupling the electrical connections  and the electrical connections . The communication connections thereby can be closed to inhibit an exchange of the communication signals between the physical element  and the network layer  and\/or opened to allow the communication signals to be exchanged between the physical element  and the network layer , as desired.","The structure of the application layers  is application-dependent. For example, the application layer  of the virtual co-verification interface V can define signal-level event messages. The event messages include a control command and at least one data field. The control command is configured to control evaluation and clocking of the virtual element ; whereas, the data fields utilize two-state or four-state logic systems that can be used singly and\/or packed into multi-bit vectors. Preferably, the communication signals associated with the virtual element  substantially correspond to Open Model Interface (OMI)-specified values in accordance with the IEEE Standard Interface for Hardware Description Models of Electronic Components, Std. 1499-1998 (November 1999), the disclosure of which is hereby incorporated herein by reference, to minimize conversion. The application layer  of the virtual co-verification interface V thereby is sufficiently general and flexible for use any verification environment without conflict or needless overhead.","Similarly, the coupling interfaces  (shown in ) coupling the co-verification interfaces P, V and the system elements ,  have constructions that are application-dependent. The application layer  of the virtual co-verification interface V can be coupled with the virtual element  via an Application Programming Interface (API) written in the high-level programming language C (C API). The virtual element  is configured to use the C API to control the communication connections of the application layer . When the communication connections are open, the virtual element  can send the outgoing communication signals to the physical element  and\/or check for, and receive, the incoming communication signals from the physical element . The communication signals can be exchanged between the virtual element  and the physical element  with any protocol, including an open-ended protocol, a closed-ended protocol, a time-limited blocking protocol, and\/or a non-blocking protocol. A transmitting system element ,  is provided with one opportunity to successfully transmit the communication signal under the open-ended protocol; whereas, the closed-ended protocol permits the transmitting system element ,  a plurality of opportunities over a predetermined time interval to successfully transmit the communication signal. When the relevant communication connection is busy, the transmitting system element , , operating under the time-limited blocking protocol, waits until the communication connection is clear before sending the communication signal; however, under the non-blocking protocol, the transmitting system element ,  returns an error message upon encountering a busy communication connection.","Turning to the physical co-verification interface P, the application layer  also can include the coupling interface  for coupling with the physical element  in the manner described above. The coupling interface  preferably comprises a standard interface such as a Peripheral Virtual Component Interface (PVCI). Being well defined, the Peripheral Virtual Component Interface supports the functionality of a wide variety of standardized busses, including system-on-chip busses, and can be used as a transaction-level physical API for the protocol stack  (shown in ) of the physical co-verification interface P. If the electrical connection  comprises a bus protocol that is not compatible Peripheral Virtual Component Interface, an additional interface, such as the transactor , can be disposed between the physical element  and the Peripheral Virtual Component Interface, and\/or the application layer  can provide a different coupling interface  that supports the incompatible bus protocol. For example, when the coupling interface  includes a signal-level interface, such as a signal-level physical API, the signal-level interface can include additional control signals, such as a sample\/update signal and a clock signal, and a signal change detection system. The additional control signals are configured to initiate and exchange the communication signals between the physical element  and the application layer ; whereas, the signal change detection system senses level changes in the communication signals for minimizing interface messaging.","As shown in , the network layers  of the co-verification interfaces  are disposed substantially between the application layers  and the data link layers . Each network layer  is configured to receive the outgoing communication signals from the relevant application layer  via the electrical connections . One or more electrical connections  couple the network layer  and the data link layer , and, in the manner discussed above with reference to the electrical connections , the configuration of the electrical connections  is application-dependent and can comprise one or more electrical links. The network layer  is configured to receive the outgoing communication signals provided by the electrical connections  of the relevant application layer  and to route selected outgoing communication signals to the relevant data link layer . The selected outgoing communication signals can be selected in accordance with any predetermined criteria, including an order in which the outgoing communication signals are received by the network layer  and\/or a priority of the outgoing communication signals.","For example, the network layer  can be coupled with the data link layer  via a plurality of electrical connections  as illustrated in . In the manner described above with reference to the application layer , the network layer  can include a plurality of communication connections (not shown) that couple the electrical connections  and the electrical connections  such that two-way communication of the communication signals is permitted between the application layer  and the data link layer . The network layer  thereby is configured to communicate the outgoing communication signals from the application layer  to the data link layer  and to receive the incoming communication signals from the data link layer  to the application layer  via the communication connections of the network layer .","In the manner described above with reference to the electrical connections , , the electrical connections  preferably comprise unidirectional electrical connections for transmitting or receiving the communication signals. For example, an electrical connection can comprise a unidirectional electrical connection that is coupled with the electrical connection via the network layer  and that is configured to transmit outgoing communication signals from the application layer  to the data link layer . The application layer  likewise can receive incoming communication signals from the data link layer  via a unidirectional electrical connection , which is coupled with the electrical connection via the network layer . The electrical connections , can be paired to form a bi-directional electrical connection between the network layer  and the data link layer . The bi-directional channel pair of the communication channel thereby extends through the network layer .","The network layer  also is configured to control the communication connection coupling the electrical connections  and the electrical connections . Thereby, the network layer  can open the communication connection associated with the selected outgoing communication signals such that the selected outgoing communication signals can be provided to the data link layer . The remaining communication connections preferably remain closed to inhibit the other communication signals from being provided to the network layer . For example, the network layer  of the physical co-verification interface P can select the outgoing communication signals associated with the electrical connection by opening the communication connection coupling the electrical connection with the electrical connection and by closing the communication connection coupling the electrical connection with the electrical connection . Thereby, the outgoing communication signals associated with the electrical connection are selected and provided to the data link layer . Likewise, the outgoing communication signals associated with the electrical connection can be selected and provided to the data link layer  by closing the communication connection coupling the electrical connection with the electrical connection and by opening the communication connection coupling the electrical connection with the electrical connection ","The virtual co-verification interface V illustrates another configuration of the network layer . Here, the network layer  is coupled with the data link layer  via one electrical connection . The electrical connection  of the virtual co-verification interface V is common to each of the electrical connections  coupling the application layer  with the network layer . To select the selected outgoing communication signals, the network layer  opens a communication connection (not shown) that couples the relevant electrical connections  to the electrical connection  such that the selected outgoing communication signals are provided to the data link layer . As desired, the electrical connection  comprise a bi-directional communication channel and\/or can include an outgoing electrical connection and an incoming electrical connection as shown in . Comprising a unidirectional communication link, the outgoing electrical connection is configured for communicating the selected outgoing communication signals to the data link layer .","The network layer  also is configured to receive the incoming communication signals from the data link layer  and to route the incoming communication signals to at least one selected electrical connection  coupling the network layer  with the application layer . In the manner described in more detail above with reference to the physical co-verification interface P, the network layer  can be coupled with the data link layer  via the plurality of electrical connections . The incoming communication signals are provided to one or more of the electrical connections , and the network layer  selects the selected electrical connection  by opening the communication connection associated with the selected electrical connection . The remaining communication connections preferably remain closed to inhibit the incoming communication signals from being provided to the other electrical connections . Thereby, the incoming communication signals are provided to the selected electrical connection .","In the manner described in more detail above with reference to the virtual co-verification interface V, the network layer  is coupled with the data link layer  via the common electrical connection . The common electrical connection  can comprise the incoming electrical connection , which is a unidirectional communication link and which is configured for receiving the incoming communication signals from the data link layer . The network layer  can select the selected electrical connection  by opening the communication connection associated with the selected electrical connection  such that the incoming communication signals are provided to the selected electrical connection . The remaining communication connections preferably remain closed to inhibit the incoming communication signals from being provided to the other electrical connections .","The network layer  can include the coupling interface  for coupling the network layer  with the data link layer . Being disposed substantially between the network layer  and the data link layer , the coupling interface  preferably is a standard interface and facilitates an interchange of interface implementations and\/or implementations of the protocol stack . In the manner described in more detail above with reference to the coupling interfaces , the coupling interfaces  have constructions that are application-dependent. With regard to the virtual co-verification interface V, for example, the coupling interface  can be an Application Programming Interface (API) written in the high-level programming language C (C API). The virtual element  is configured to use the C API to control communication connections (not shown) provided by the data link layer . Similarly, the coupling interface  of the physical co-verification interface P preferably comprises a standard interface such as a Peripheral Virtual Component Interface (PVCI) or an Open Core Protocol (OCP).","Being disposed between the network layers  and the physical layers , the data link layers  are configured to allocate and manage message buffers (not shown) and to provide flow control for communication paths  (shown in ) provided by the physical layer . Each of the data link layers  is configured to receive the communication signals from the relevant network layer  via the electrical connections . One or more electrical connections  also are provided to couple the data link layer  with the physical layer , and, in the manner discussed above with reference to the electrical connections , the configuration of the electrical connections  is application-dependent and can comprise one or more electrical links. The data link layer  is configured to receive the selected outgoing communication signals provided by the electrical connections  of the relevant network layer  and includes at least one communication connection that is configured to route the selected outgoing communication signals to the physical layer .","Likewise, data link layer  can receive the incoming communication signals provided by the physical layer , and the communication connection of the data link layer  can route the incoming communication signals to the electrical connections  of the network layer . Upon receiving the incoming communication signals, the data link layer  provides the relevant network layer  with a notification signal. Likewise, the data link layer  accepts command signals from the network layer  to transmit the outgoing communication signals. The definition of the data link layer  permits a wide variety of implementations of the physical layer , which implementations can be substituted without affecting the associated system elements , .","In the manner described above with reference to the electrical connections , , , the electrical connections  preferably comprise unidirectional electrical connections for transmitting or receiving the communication signals. For example, an electrical connection can comprise a unidirectional electrical connection that is coupled with the electrical connection via the data link layer  and that is configured to transmit outgoing communication signals from the data link layer  to the physical layer . Also, the data link layer  can receive incoming communication signals from the physical layer  via a unidirectional electrical connection , which is coupled with the electrical connection via the data link layer . The electrical connections , can be paired to form a bi-directional electrical connection between the data link layer  and the physical layer . The bi-directional channel pair of the communication channel thereby extends through the data link layer .","As illustrated in , the data link layer  in the physical co-verification interface P can comprise a DLL Verilog RTL  that is coupled with a link layer system . Preferably, the link layer system  comprises a PHY-Link Interface provided by Texas Instruments as part number TSB12LV01. In the virtual co-verification interface V, the data link layer  can be provided as a combination of software components and hardware components. For example, the software components can include custom middleware , a custom Open Host Controller Interface (OHCI) driver , and a vendor OHCI driver ; whereas, the hardware components can comprise a link layer system . As desired, the link layer system  of the virtual co-verification interface V can be provided in the same manner described above with reference to the link layer system  of the physical co-verification interface P.","The data link layers  are coupled with the physical layers  such that communication signals can be exchanged by the system elements , . Preferably, the protocol stacks  of two or more system elements ,  are coupled via a common physical layer . The physical layer  can comprise any type of communication medium, including any type of general or special purpose cable, bus, and\/or network when the physical layer  couples two or more physical elements  and\/or physical elements  with virtual elements . The exemplary busses include IEEE-1394 FireWire, Peripheral Component Interconnection (PCI), and Universal Serial Bus (USB); whereas, typical networks include Ethernet, FibreChannel, and local area networks (LANs). If coupling two virtual elements , the physical layer  preferably comprises shared memory with the virtual co-verification interfaces V of the virtual elements  exchanging control of the shared memory.","Returning to , the physical layer  preferably provides one or more communication paths  between the physical element  and the virtual element . In the manner described above with reference to the electrical connections , , ,  (shown in ), the communication paths  preferably comprise unidirectional communication paths for transmitting or receiving the communication signals. For example, communication path can comprise a unidirectional communication path that is coupled with the electrical connection via the physical layer  and that is configured to transmit outgoing communication signals from the physical layer  to the virtual element . Also, the physical layer  can receive incoming communication signals from the virtual element  via unidirectional communication path , which is coupled with the electrical connection via the physical layer .","The communication paths  couple the electrical connections  of the data link layers  of the system elements ,  such that the system elements ,  can exchange incoming and outgoing communication signals. Typically, two unidirectional communication paths , each transmitting the communication signals in opposite directions, are provided between the physical element  and the virtual element  to form a bi-directional communication path . Stated somewhat differently, the physical layer  can be configured to support one-way (e.g. streaming) and\/or two-way (e.g. command\/response) communications between the system elements , . The bi-directional channel pair of the communication channel thereby extends through the physical layer . The configuration of each unidirectional communication path  is application-dependent and can comprise a single electrical link for, for example, serial communication signals, and\/or a plurality of electrical links, such as a communication bus in the manner discussed in more detail above with reference to the electrical connections  (shown in ).","One-way communications comprise the transmitting system element ,  and the receiving system element ,  being coupled by one or more unidirectional communication paths . For example, the virtual system element  can be configured as a master system element and can employ the unidirectional communication paths  to transmit the communication signals, such as data, to the physical system element , which is configured as a slave system element, such as display device. The unidirectional communication paths  comprise general-purpose communication connections and can be used to transmit any type of communication signals. In two-way communications, the system elements ,  can be coupled via at least one bi-directional communication path  with one system element ,  acting as a client element and the other system element ,  acting as a server element.","The physical element  and the virtual element , for example, can be configured to act as the client element and the server element, respectively. Upon identifying a real bus cycle that targets the virtual element , the physical co-verification interface P can transmit the communication signal, comprising a transaction request message, to the virtual co-verification interface V. The virtual element , running in simulation, performs its own local system activity and regularly polls the virtual co-verification interface V for incoming transaction request messages. The transactor  of the physical co-verification interface P translates the transaction request message into a stimulus for the bus interface of the virtual element . The virtual element  then produces a bus response, and the virtual co-verification interface V translates the bus response into a transaction response message. The transaction response message is communicated to the physical co-verification interface P via the physical layer  to complete the real bus cycle.","The physical layer  preferably is configured to communicate via unidirectional point-to-point static circuits such that the communication signals are transmitted peer-to-peer and such that a central server is not needed. The communication paths  preferably are established at verification run time such that the communication paths  are \u201cplug-and-play.\u201d That is, the system elements ,  can initialize in any sequence. For example, if the virtual element  initializes before the physical element , the co-verification interfaces  are configured to initiate communications between the system elements ,  when the physical element  initializes. Each protocol stack  is initiated via a common XML registry file that is configured to establish a connection with the other protocol stacks . Thereby, different instances of the same system element , , such as a SystemC model and a Field Programmable Gate Array (FPGA) prototype of the system element , , may be freely selected without recompilation.","The speed of the design verification system  primarily depends upon the latency of the communication signals that are exchanged between the system elements , . Hardware roundtrip latency under ten microseconds can be achieved through the use of a lightly loaded Peripheral Component Interconnection (PCI) bus when installed in a host workstation. Similar performance can be achieved via IEEE-1394 FireWire when operated in asynchronous mode. Software latency in the physical layer  can be reduced by avoiding task switching and by using memory-mapped Direct Memory Access (DMA) between the virtual co-verification interface V and the physical co-verification interface P.","In operation, the design verification system  provides two operational modes for synchronizing the system elements , . The operational mode of the design verification system  can be determined by any of the system elements , . In uncoupled mode, the system elements ,  operate independently, and neither system element ,  attempts to synchronize with the other system element , . Thereby, each system element ,  can operate freely, subject to interactions with the other system element , , such as waiting for the other system element ,  to complete a transaction. By operating in uncoupled mode, the design verification system  can quickly perform system verification.","The design verification system  also can operate in coupled mode. Since coupled mode comprises a more complex operational mode, the design verification system  operates more slowly, but is cycle accurate, in coupled mode. In coupled mode, the system elements ,  share a common clock domain. For example, the physical element  and the virtual element  each operate during the same clock cycle of the system clock, which is controlled by the physical co-verification interface P. Any communication signals, such as messages and\/or transactions, are exchanged between the system elements ,  on the clock boundaries of the system clock. The co-verification interfaces  preferably do not include any combinatorial loops to ensure that one evaluation of each clock system is correct.","To accelerate operation of the design verification system , coupled mode can provide an extended operation period before the communication signals are exchanged between the system elements , . The extended operation period can comprise more than one clock cycle, such as a predetermined number of clock cycles. The predetermined number can be provided in a configuration register (not shown) of each co-verification interface . If the physical element  provides a communication signal during the extended operation period, the communication signal from the physical element  can be sent on the clock boundary of the current clock cycle without waiting for the end of the extended operation period.","It will be appreciated that considerable debugging of the electronic system  can be achieved while the virtual element  remains in a virtual form. Once the electronic system  is sufficiently stable, the virtual element  can be refined to a register transfer level (RTL) form for further evaluation and testing. The virtual element  subsequently can be compiled into a field programmable gate array for more extensive verification at full speed. As each virtual element  is converted to a physical form, system performance and verification coverage of the electronic system  increase.","Although illustrated in  and  as having one co-verification interface , the system elements ,  each can be provided with two or more co-verification interfaces , for example, when three or more physical elements  and\/or virtual elements  are included in the design verification system . Turning to , the design verification system \u2032 includes the virtual elements A, B and the physical elements CF, GH, which can be provided in the manner described in more detail above with regard to the virtual element  (shown in  and ) and the physical element  (shown in  and ), respectively. When coupled with two co-verification interfaces G, H as shown in , the physical element GH can be provided with two or more unidirectional communication paths EGH, GHE, FGH, GHF and\/or bi-directional communication paths EGH, FGH across the physical layer  for communicating with the other system elements A, B, CF. The design verification system \u2032 thereby supports two bi-directional communication paths EGH, FGH for exchanging communication signals (not shown) between the system elements CF, GH in the manner described in more detail above with reference to the design verification system  (shown in  and ).","As desired, the bi-directional communication paths EGH, FGH can comprise substantially independent communication paths provided on separate physical layers and\/or can be provided on the same physical layer  as shown in . Further, the bi-directional communication paths EGH, FGH can support the same, or different, communication protocols. For example, the communication path EGH can support the communication signals provided in accordance with the IEEE-1394 FireWire protocol standard; whereas, the bi-directional communication path FGH can support the communication signals provided in accordance with the Interprocess Communication (IPC) pipes protocol standard. It is understood that each of the communication paths EGH, FGH can support a plurality of transaction-level communication signals and\/or a plurality of signal-level communication signals that can be transmitted in both directions, that have substantially the same and\/or different synchronizations, and\/or that are configured to serve the same and\/or different portions of the design verification system \u2032. Although the physical element GH is shown and described as comprising a physical element having two co-verification interfaces G, H, it is understood that the physical element GH can comprise a virtual element and that the physical element GH can include any number and\/or configuration of co-verification interfaces  for coupling the physical element GH with two or more system elements A, B, CF.","It will likewise be appreciated that a co-verification interface AB can be used to couple two or more system elements A, B disposed, for example, on the same development platform , with the system element CF as illustrated in . Having a plurality of communication connections (not shown) provided in the manner described in more detail above with reference to the application layer  shown in , the application layer  of the co-verification interface AB can be segmented into application layer segment A and application layer segment B. The application layer segments A, B preferably each include coupling interfaces (not shown) that are provided in the manner described above with reference to the coupling interfaces  (shown in ) and that are configured to provide a universal interface for coupling the co-verification interface AB with the system elements A, B. Thereby, one or more of the communication connections are associated with the application layer segment A and are coupled with, and configured to communicate with, the system element A; whereas, the system element B is coupled with, and configured to communicate with, the communication connections that are associated with the application layer segment B.","The system elements A, B are respectively configured to transmit outgoing communication signals (not shown) and to receive incoming communication signals (not shown) via the application layer segments A, B of the application layer  in the manner described in more detail above with regard to the application layer  shown in . The network layer  of the co-verification interface AB, in turn, is configured to receive the outgoing communication signals from the system elements A, B and to route selected outgoing communication signals to the data link layer  in the manner discussed in more detail above with respect to the network layer  shown in . The data link layer  then can communicate the selected outgoing communication signals to the system element CF via unidirectional communication paths ABCF, CFAB and\/or bi-directional communication paths ABCF in the manner discussed above with reference to the communication paths ,  shown in . Also being configured to receive the incoming communication signals from the system element CF via the communication paths ABCF, CFAB, ABCF, the data link layer  of the co-verification interface AB can provide the incoming communication signals to the network layer  of the co-verification interface AB. The network layer  can route the incoming communication signals to the appropriate system element A, B to selecting the appropriate communication connection of the application layer .","Although the co-verification interface AB is shown and described as comprising two application layer segments A, B, it will be appreciated that the application layer  can include any number and\/or configuration of application layer segments A, B for coupling any number of system elements A, B with the co-verification interface AB. Likewise, the system elements A, B each can be coupled with, and configured to communicate with, more than one application layer segments A, B and that each application layer segments A, B can be configured to couple and communicate with one or more system elements A, B. The application layer segments A, B can support the same, or different, types of communication signals, such as events, messages, transactions, and\/or debugging commands. It is also understood that the system elements A, B can comprise any number and\/or combination of physical elements and\/or virtual elements.","Alternatively, or in addition, one or more of the layers , , , and  of the of the co-verification interface  can be segmented as illustrated with the co-verification interface CF as shown in . The co-verification interface CF can be provided in the manner described in more detail above with reference to the co-verification interface  shown in  and  and is coupled with the physical element CF. In addition, the application layer  of the co-verification interface CF can be segmented into application layer segment C, application layer segment D, and application layer segment EF; whereas, the data link layer  can be segmented into data link layer segment CD, data link layer segment E, and data link layer segment F. As illustrated in , the application layer segments C, D, EF are coupled with the physical element CF, preferably via coupling interfaces (not shown) that are provided in the manner described above with reference to the coupling interfaces  (shown in ) and that are configured to provide a universal interface for coupling the co-verification interface CF with the physical element CF. The application layer segments C, D, EF can be configured to support the same, or different, types of communication signals, such as events, messages, transactions, and\/or debugging commands. Thereby, the co-verification interface CF can be configured to support a plurality of different types of communication signals.","The data link layer segments CD, E, F of the data link layer  are coupled with, and configured to communicate with, the application layer segments C, D, EF of the application layer  via the network layer  in the manner described above with regard to the co-verification interface  shown in  and . Preferably, the data link layer segments CD, E, F are coupled with the network layer  via coupling interfaces (not shown) that are provided in the manner described above with reference to the coupling interfaces  (shown in ) and that are configured to provide a universal interface for coupling the co-verification interface CF with the physical layer . It will be appreciated that the data link layer segments CD, E, F can be configured to support the same, or different, types of communication protocols within the physical layer . For example, the communication path EGH can support the communication signals provided in accordance with the IEEE-1394 FireWire protocol standard; whereas, the communication paths ABCF, FGH each can support the communication signals provided in accordance with the Interprocess Communication (IPC) pipes protocol standard. The co-verification interface CF thereby can be configured to support a plurality of different types of communication protocols.","As illustrated in , for example, the co-verification interface CF can be configured to receive outgoing communication signals (not shown) from the physical element CF via the application layer segments C, D and to provide selected outgoing communication signals to the virtual element A and\/or the virtual element B. If the physical element CF transmits debugging commands and transactions, for instance, the application layer segment C can be configured to support the debugging commands, and the application layer segment D can be configured to support the transactions. The network layer  can be configured to select the debugging commands associated with the application layer segment C and\/or transactions associated with the application layer segment D and to route selected outgoing communication signals to the data link layer segment CD. In the manner described above with respect to the co-verification interface  shown in  and , the selected outgoing communication signals are communicated to the co-verification interface AB via the bi-directional communication paths ABCF and then are provided to the virtual element A and\/or the virtual element B by way of the co-verification interface AB.","The co-verification interface CF also can be configured to receive incoming communication signals from, for example, the virtual element A via the communication paths ABCF in the manner discussed above with regard to the co-verification interface  shown in  and . Upon receiving the incoming communication signals, the data link layer CD can provide the incoming communication signals to the network layer , which is configured to route the incoming communication signals to the application layer segment C and\/or the application layer segment D. The appropriate application layer segment C, D preferably is selected based at least in part upon the type of communication signals supported. Therefore, if the incoming communication signals comprise debugging commands, the network layer can route the incoming communication signals to the application layer segment C; whereas, the incoming communication signals that comprise transactions are routed to the application layer segment D. Thereby, the incoming communication signals are provided to the physical element CF by the relevant application layer segment C, D.","Likewise, the physical element CF can be configured to exchange communication signals (not shown) with the physical element GH via the co-verification interface CF. The physical element CF transmits outgoing communication signals to the application layer segment EF. The type of outgoing communication signals transmitted to the application layer segment EF can be the same as, or different from, the types of communication signals associated with the application layer segment C and\/or the application layer segment D. The network layer  can be configured to receive the outgoing communication signals from the application layer segment EF and to selectably provide the outgoing communication signals to the data link layer segment E and\/or the data link layer segment F. The appropriate data link layer segment E, F preferably is selected based at least in part upon the communication protocols supported by the media coupling the physical elements CF, GH.","For example, the communication path EGH can support the communication signals provided in accordance with the IEEE-1394 FireWire protocol standard; whereas, the bi-directional communication path FGH can support the communication signals provided in accordance with the Interprocess Communication (IPC) pipes protocol standard. Therefore, when the outgoing communication signals are to be transmitted in accordance with the IEEE-1394 FireWire protocol standard, the network layer  can route the communication signals to the data link layer segment F for transmission to the physical element GH via the communication path FGH. The network layer  likewise routes the communication signals associated with the Interprocess Communication (IPC) pipes protocol standard to the data link layer segment E for transmission to the physical element GH via the communication path EGH.","Similarly, incoming communication signals from the physical element GH can be provided to the co-verification interface CF via the communication path FGH and\/or the communication path EGH. The incoming communication signals are provided in the communication protocols supported by the media coupling the physical elements CF, GH in the manner described above. Upon receiving the incoming communication signals, the data link layer segments E, F are configured to provide the incoming communication signals to the network layer . The network layer  then routes the incoming communication signals to the appropriate communication connections of the application layer segment EF in the manner described in more detail above with regard to the co-verification interface  shown in  and . The incoming communication signals then are provided to the physical element CF by the application layer segment EF.","Although the co-verification interface CF is shown and described as comprising three application layer segments C, D, EF, three data link layer segments CD, E, F, it will be appreciated that the co-verification interface CF can be expanded to any number of application layer segments and\/or data link layer segments. It also is understood that the network layer  and the physical layer  each can be segmented into any number of network layer segments and physical layer segments, respectively, and that the communication paths ABCF, EFGH, FGH comprise a form of segmenting the physical layer . Likewise, the application layer segments C, D, EF, the network layer segments, the data link layer segments CD, E, F, and the physical layer segments ABCF, EFGH, FGH can be provided in any configuration and\/or arrangement. The application layer segments C, D were shown and described as being associated with the data link layer segment CD and the application layer segment EF was shown and described as being associated with the data link layer segments E, F for purposes of illustration only. Stated somewhat differently, each layer , , ,  of the co-verification interface CF can be associated with any number and\/or arrangement of the other layers , , ,  of the co-verification interface CF.","The invention is susceptible to various modifications and alternative forms, and specific examples thereof have been shown by way of example in the drawings and are herein described in detail. It should be understood, however, that the invention is not to be limited to the particular forms or methods disclosed, but to the contrary, the invention is to cover all modifications, equivalents, and alternatives falling within the spirit and scope of the claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":["FIG. 3A","FIG. 2"]},{"@attributes":{"id":"p-0018","num":"0017"},"figref":["FIG. 3B","FIG. 3A"]},{"@attributes":{"id":"p-0019","num":"0018"},"figref":["FIG. 4","FIGS. 3A-B"]},{"@attributes":{"id":"p-0020","num":"0019"},"figref":["FIG. 5","FIG. 2"]}]},"DETDESC":[{},{}]}
