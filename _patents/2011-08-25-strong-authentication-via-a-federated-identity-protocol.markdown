---
title: Strong authentication via a federated identity protocol
abstract: A computing system of an authentication service provider receives a federated identity protocol request triggered by a relying party to validate a user. The federated identity protocol request includes a user identifier of an authenticated identity. The computing system searches mapping data stored in a data store that is coupled to the computing system to identify a type of virtual token associated with the user identifier and authenticates the user by requesting the identified type of virtual token from a user device and verifying a virtual token received from the user device using the mapping data. The computing system sends second-factor authentication results to the relying party via the federated identity protocol.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09191381&OS=09191381&RS=09191381
owner: Symantec Corporation
number: 09191381
owner_city: Mountain View
owner_country: US
publication_date: 20110825
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["Embodiments of the present invention relate to strong authentication. Specifically, the embodiments of the present invention relate to providing strong authentication via a federated identity protocol.","Enterprises can control user access to enterprise applications, such as web applications, by authenticating users via user credentials, such as a username and password. Enterprises may wish to provide a more secure environment by implementing strong authentication, also known as second-factor authentication. Second-factor authentication requires a user to provide additional evidence of who they are, for example, via a one-time password (OTP), a digital certificate (e.g., public key infrastructure (PKI) certificate), a fingerprint, etc.","Traditionally, enterprises develop proprietary application programming interfaces (APIs) to integrate a strong authentication service provider into an existing application infrastructure. In addition, enterprises must modify existing front-end application user interfaces and back-end database schemas to support second-factor authentication. For example, for an enterprise that wishes to integrate second-factor authentication via digital certificates into an existing architecture, the enterprise must change an existing database schema and add application logic to determine whether users have PKI certificates, verify the PKI certificates, provision PKI certificates, etc. Such a change to existing enterprise architecture is often time-consuming and may require additional development resources and add overhead to the enterprise application.","In one embodiment, a system for providing strong authentication via a federated identity protocol is described. An exemplary system may include a memory and a processor that is coupled to the memory. In one embodiment, the system receives a federated identity protocol request triggered by a relying party to validate a user using second-factor authentication. The federated identity protocol request includes a user identifier of an authenticated identity. The system searches mapping data stored in a data store that is coupled to the system to identify a type of virtual token associated with the user identifier. The system authenticates the user by requesting the identified type of virtual token from a user device and verifying a virtual token received from the user device using the mapping data. The system sends second-factor authentication results to the relying party via the federated identity protocol.","In one embodiment, the system authenticates the user by requesting the identified type of virtual token without notifying the user of the request for the identified type of virtual token and receiving a virtual token from the user device without receiving user input via the user device. In one embodiment, the system sends a request for the identified type of virtual token to a plug-in hosted by a user device. The plug-in obtains a virtual token hosted by the user device in response to the request.","In one embodiment, the identified type of virtual token is a public key infrastructure certificate. In one embodiment, the federated identity protocol is Security Assertion Markup Language.","In one embodiment, the system further includes a second memory and a second processor that is coupled to the second memory. In one embodiment, the second processor receives first-factor validation results indicating that a user identity of a user is authenticated from an application server and sends a federated identity protocol request that includes a user identifier of the user identity that is authenticated to an authentication service provider. The federated identity protocol request is a request for the authentication service provider to validate the user using second-factor authentication. The second processor receives a request for a type of a virtual token from the authentication service provider and provides a virtual token from a local data store to the authentication service provider. The authentication service provider generates second-factor authentication results indicating whether the provided virtual token is valid. The system provides the second-factor authentication results to the application server.","In one embodiment, the system further includes a plug-in to receive the request from the authentication service provider and locate the virtual token in a local data store. In one embodiment, the user identifier does not reveal a first-factor credential of the user.","In addition, a non-transitory computer readable storage medium for providing strong authentication via a federated identity protocol is described. An exemplary non-transitory computer readable storage medium includes instructions that will cause a processor to receive a federated identity protocol request, which includes a user identifier of an authenticated identity, triggered by a relying party to validate a user using second-factor authentication, search mapping data stored in a data store that is coupled to the computing system to identify a type of virtual token associated with the user identifier, authenticate the user by requesting the identified type of virtual token from a user device and verifying a virtual token received from the user device using the mapping data, and send second-factor authentication results to the relying party via the federated identity protocol.","Further, a method for providing strong authentication via a federated identity protocol is described. In one embodiment, a method comprises receiving, by the computing system of the authentication service provider, a federated identity protocol request triggered by a relying party to validate a user using second-factor authentication, the federated identity protocol request including a user identifier of an authenticated identity, searching mapping data stored in a data store that is coupled to the computing system to identify a type of virtual token associated with the user identifier, authenticating the user by requesting the identified type of virtual token from a user device and verifying a virtual token received from the user device using the mapping data, and sending second-factor authentication results to the relying party via the federated identity protocol.","Further, a method for providing silent strong authentication services via a federated identity protocol is described. In one embodiment, a method comprises receiving first-factor validation results indicating that a user identity of a user is authenticated from an application server, sending a federated identity protocol request comprising a user identifier of the user identity that is authenticated to an authentication service provider, the federated identity protocol request being a request for the authentication service provider to validate the user using second-factor authentication, receiving a request for a type of a virtual token from the authentication service provider, providing a virtual token from a local data store to the authentication service provider, wherein the authentication service provider generates second-factor authentication results indicating whether the provided virtual token is valid, and providing the second-factor authentication results to the application server.","Embodiments of the invention are directed to a method and system for providing strong authentication via a federated identity protocol. A computing system of an authentication service provider receives a federated identity protocol request triggered by a relying party to validate a user. The federated identity protocol request includes a user identifier of an authenticated identity. The computing system searches mapping data stored in a data store that is coupled to the computing system to identify a type of virtual token associated with the user identifier and authenticates the user by requesting the identified type of virtual token from a user device and verifying a virtual token received from the user device using the mapping data. The computing system sends second-factor authentication results to the relying party via the federated identity protocol.","Embodiments of the invention provide an enterprise a simple and convenient mechanism to integrate strong authentication into existing application authentication architectures. Embodiments eliminate the need for an enterprise to develop proprietary application programming interface (API) calls to an authentication server provider and remove the need to change an existing enterprise database schema to support strong authentication. Embodiments also provide diverse credential support and silent authentication using a single strong authentication service provider.",{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 1A","b":["100","100","105","180","183","101","183","130","120","120","120"]},"An application server  can be hosted by any type of computing device including server computers, gateway computers, desktop computers, laptop computers, hand-held computers or similar computing device. A client device  can be hosted by any type of computing device including desktop computers, laptop computers, tablet computers, mobile communications devices, cell phones, smart phones, hand-held computers, or similar computing device.","A user  can login to an application  via a client device  and using first-factor credentials, such as a user ID (identifier) and password. An application  can represent one or more applications of any type including, for example, a web application, a desktop application, a SSL VPN gateway or any network-based, software-based service, etc. A client device  can host a web browser, or similar application, to access an application .","A user  can register a client device  with an authentication service provider . The registration process can install a silent second-factor authentication plug-in  and a second-factor credential on the client device . In one embodiment, the second-factor credential is a virtual token. A virtual token is a credential that is not visible to a browser, such as a browser hosted by the client device . In one embodiment, the virtual token is a digital certificate. A digital certificate can be a Public Key Infrastructure (PKI) certificate that is issued by a certificate authority. The digital certificate can be a X.509 digital certificate.","The application server  can include a relying party strong authentication module  to integrate strong authentication into the enterprise environment  via a federated identity protocol. The relying party strong authentication module  can communicate with the silent second-factor authentication plug-in , which in turn, can communicate with an authentication service provider  via a federated identity protocol to integrate strong authentication into the enterprise environment . In one embodiment, the authentication service provider  can be implemented as a cloud service provider to provide strong authentication solutions to one or more enterprise environments  using a cloud computing and SaaS (software as a service).","The silent second-factor authentication plug-in  can integrate silent second-factor authentication into the enterprise environment . Silent second-factor authentication does not involve user input by a user  and can be performed without notifying a user  that second-factor authentication is being used. With silent second-factor authentication, a user  can login to an enterprise application  using first-factor credentials without noticing that second-factor authentication is also being performed.","A federated identity protocol can provide a framework for exchanging security information. Examples of a federated identity protocol can include, and are not limited to, Security Assertion Markup Language (SAML) and OpenID. Strong authentication is hereinafter also referred to as second-factor authentication. Examples of strong authentication can include, and are not limited to, one-time password (OTP), digital certificates (e.g., public key infrastructure (PKI) certificates), device fingerprinting, physical tokens, etc.","When an identity of a user  has been authenticated, for example, using a first-factor username and password, the relying party strong authentication module  can trigger the silent second-factor authentication plug-in  to send a request via a federated identity protocol to the authentication service provider  to validate a user  and\/or client device  using second-factor authentication. In one embodiment, the application server  is a relying party, which is the party triggering a request to the authentication service provider  to validate a user  and\/or client device . Another embodiment describing a primary identity service provider as a relying party to trigger a request to the authentication service provider  is described in greater detail below in conjunction with .","The authentication service provider  can include a federated identity protocol strong authentication module  to receive the request o validate the user  and\/or user device  using second-factor authentication. The federated identity protocol strong authentication module  can exchange communications with the silent second-factor authentication plug-in  to validate the user  and\/or client device . Embodiments of using the silent second-factor authentication plug-in  to validate the user  and\/or client device  are described in greater detail below in conjunction with .","The federated identity protocol strong authentication module  can generate and send second-factor authentication results to the silent second-factor authentication plug-in , which can then forward the results to the application server  via a federated identity protocol. The application server  can determine whether to grant a user  access to an application  based on the received second-factor authentication results.","The communication between the relying party strong authentication module , the silent second-factor authentication plug-in , and the federated identity protocol module  via a federated identity protocol removes the need of the enterprise environment  to develop additional application plug-ins, web service calls, and\/or APIs to communicate with the authentication service provider  to integrate strong authentication, and thus, keeps any application overhead to a minimum.","In a typical federated identity protocol request, a user identifier is not included in the request. Embodiments modify a federated identity protocol request to include a user identifier, which corresponds to a user identity that has been authenticated. Embodiments also provide the enterprise environment  with diverse second-factor credential support. For example, enterprises can easily integrate second-factor PKI certification and second-factor OTP with existing enterprise first-factor authentication architectures without requiring an enterprise to modify its database schema. Embodiments also provide anonymous second-factor authentication. Anonymous second-factor authentication authenticates a user  and\/or client device  without exposing any user first-factor authentication credentials, such as a username, across the network .",{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIG. 1B","b":["150","150","160","180","183","140","101","120"]},"A user  can login to an application  via a client device  using first-factor credentials. The application server  can provide the first-factor credentials of the user  to the primary identity service provider , which can then validate the first-factor credentials. A primary identity service provider  can be hosted by any type of computing device including server computers, gateway computers, desktop computers, laptop computers, hand-held computers or similar computing device.","An enterprise may wish to further authenticate the user  and\/or client device  using second-factor authentication, and the primary identity service provider  can be configured as a relying party to trigger a request to be sent to the authentication service provider  to validate a user  and\/or client device  using strong authentication. The primary identity service provider  can include a relying party strong authentication module  to trigger the silent second-factor authentication plug-in  to send a request via a federated identity protocol to the authentication service provider  to validate a user  and\/or client device  using second-factor authentication.","The authentication service provider  can exchange communications with the silent second-factor authentication plug-in  to validate the user  and\/or client device . The federated identity protocol strong authentication module  can generate and send second-factor authentication results to the silent second-factor authentication plug-in , which can then forward the results to the primary identity service provider  via a federated identity protocol. The primary identity service provider  can send the second-factor authentication results to the application server , which can then determine whether to grant a user  access to an application  based on the received second-factor authentication results.",{"@attributes":{"id":"p-0040","num":"0039"},"figref":["FIG. 2","FIGS. 1A-B"],"b":["200","200","145","200","213","215"]},"The validator sub-module  can receive a federated identity protocol request from a silent second-factor authentication plug-in hosted by a user device to authenticate a user and\/or user device using second-factor authentication. A relying party, such as an enterprise application server or a primary identity service provider, can trigger the silent second-factor authentication plug-in to send the request to the request sub-module .","The federated identity protocol request can include, for example, a user identifier of an authenticated identity, an enterprise identifier, and one or more attributes, such as a second-factor attribute identifying the type of second-factor authentication challenge which the authentication service provider should use or a specific second-factor authentication challenge that should be used. A second-factor challenge can be a request for a second-factor credential. For example, a second-factor challenge can be a request for a digital certificate.","The validator sub-module  can determine whether the federated identity protocol request is a legitimate request by applying the user identifier, enterprise identifier, and\/or the attributes from the request to business rules  and user data  that are stored in a data store  that is coupled to the federated identity protocol strong authentication module . A legitimate request is a request that satisfies business rules .","The user data  can be provided by one or more enterprises and can describe data pertaining to a user, such as a user level (e.g., Premium level user, Basic level user), a user role (e.g., administrator role, user role), a user identifier, a hash algorithm associated with the user. The user data  can also include second-factor authentication user data, such as mapping data that associates user second-factor challenges (e.g., requests for OTP, PKI certificates, fingerprints, or physical tokens) and corresponding user devices with a user identifier. The user data  can be based on registration data when a user registers user devices with second-factor credentials via an authentication service provider.","The business rules  can be provided by one or more enterprises and can describe enterprise policies pertaining to second-factor authentication. For example, the data store  stores an enterprise policy, such as a PayPal\u00ae policy that allows up to five second-factor authentication credentials (e.g., OTP, physical tokens, fingerprints, one or more virtual certificates, such as PKI certificates) per PayPal\u00ae user. One embodiment of using business rules and user data is described in greater detail below in conjunction with .","The validator sub-module  can determine a request is a legitimate request if the user identifier, enterprise identifier, and\/or the attributes from the request satisfy the business rules . When a request is a legitimate request, the validator sub-module  can validate a user device (e.g., user smart phone, user laptop computer, user tablet, etc.) based on the business rules  and user data  that includes the mapping data.","The validator sub-module  can use the user identifier and second-factor attribute from the request to search the mapping data in the user data  to identify the type of second-factor challenge that is associated with a user. The validator sub-module  can authenticate the user device by sending the second-factor challenge (e.g., request for a virtual token, OTP, fingerprint, or physical token) to a user device via a federated identity protocol and comparing the second-factor challenge response that is received from the user device to the second-factor credentials (e.g., virtual token, OTP, fingerprint, physical token) in the mapping data that correspond to the user identifier in the request from the relying party. The validator sub-module  can send the second-factor challenge to a silent second-factor authentication plug-in on the client device. One embodiment of sending a challenge to and receiving a response from a silent second-factor authentication plug-in to implement silent second-factor authentication is described in greater detail below in conjunction with .","The user data  can also include user device registration that associates particular devices with the user and\/or user identifier. The validator sub-module  can verify the user by comparing the second-factor challenge response that is received from the user device (e.g., virtual token, OTP, fingerprint, physical token) to the device registration data.","The results sub-module  can generate a federated identity protocol response to send to the silent second-factor authentication plug-in. The response can be a SAML assertion, which is a statement about a user. The response can include the validation results indicating whether the user device and\/or the user have been or have not been successfully validated using second-factor authentication. The results sub-module  can send the response to silent second-factor authentication plug-in via a federated identity protocol. The silent second-factor authentication plug-in can forward the results to a relying party via the federated identity protocol.","A data store  can be a persistent storage unit. A persistent storage unit can be a local storage unit or a remote storage unit. Persistent storage units can be a magnetic storage unit, optical storage unit, solid state storage unit, electronic storage units (main memory), or similar storage unit. Persistent storage units can be a monolithic device or a distributed set of devices. A \u2018set\u2019, as used herein, refers to any positive whole number of items.",{"@attributes":{"id":"p-0051","num":"0050"},"figref":["FIG. 3","FIGS. 1A-B"],"b":["300","300","300","145"]},"At block , processing logic receives a federated identity protocol request triggered by a relying party via a federated identity protocol to validate a user using second-factor authentication. The trigger can be a successful authentication of a user identity using first-factor authentication. The request includes a user identifier of an authenticated identity. At block , processing logic identifies a type of second-factor challenge that corresponds to the user identifier in the data store. Processing logic can use the user identifier from the request to search mapping data stored in a data store for one or more types of second-factor challenges that are associated with the user identifier. The types of second-factor challenges that are associated with the user identifier can include requests for virtual tokens (e.g., PKI certificates).","At block , processing logic selects one of the types of second-factor challenges to be used based on a second-factor attribute in the request. For example, the request includes the second-factor attribute TKI_UID\u2032, which is an example indicating that the type of virtual token that should be requested from the client device is the first PKI certificate that is associated with the user identifier. At block , processing logic validates the user and\/or user device by requesting the identified type of second-factor challenge from a silent second-factor authentication plug-in hosted on a user device and receiving a second-factor challenge response from the plug-in. For example, processing logic queries the plug-in hosted by the user device for a PKI certificate. The second-factor challenge response received from the plug-in can be a virtual token, such as a PKI certificate, that is stored on the user device. Processing logic validates the received virtual token using the mapping data in the data store.","At block , processing logic generates and sends a response, which includes validation results indicating whether or not the user device and\/or user were successfully validated based on the second-factor response, to the silent second-factor authentication plug-in via a federated identity protocol. The silent second-factor authentication plug-in can forward the validation results to a relying party via a federated identity protocol.",{"@attributes":{"id":"p-0055","num":"0054"},"figref":"FIG. 4","b":["401","402","483","480","403","485","404","405","440","401","430"]},"The request can be a modified federated identity protocol request to redirect the client device  to the authentication service provider  via a SAML redirect command. The federated identity protocol request includes a user identifier and one or more attributes, such as a second-factor authentication attribute that identifies the type of second-factor authentication challenge the authentication service provider  should use or a specific second-factor authentication challenge the authentication service provider  should use. For example, the request includes a second-factor attribute TKI_UID\u2032.","The federated identity protocol strong authentication module  receives the SAML redirect and uses business rules and user data that are associated with the enterprise application to validate  that the request is a legitimate request. The business rules can describe policies for different types of enterprise users and different policies for the various types of second-factor challenges (e.g., requests for virtual tokens, OTP, physical tokens, fingerprints, etc.). For example, there may be a PayPal\u00ae business rule that allows up to five second-factor challenges to be associated with any PayPal\u00ae user that is a Premium level user and up to two second-factor challenges for any PayPal\u00ae user that is a Basic level user. There may be a PayPal\u00ae business rule that limits Basic level users to one type of second-factor challenge, such as OTP. There may be a PayPal\u00ae business rule that permits any Premium level user to use any type of virtual token for silent second-factor authentication, which does not require any user input from the Premium level users. According to the PayPal\u00ae policies, if the request from the relying party includes a user identifier for a Basic Level user, the request should also include an attribute of \u2018OTP\u2019 in order for the request to be a legitimate request.","If the request is valid, the federated identity protocol strong authentication module  accesses user data to locate a second-factor challenge to send to the client device . For example, the federated identity protocol strong authentication module  sends  a query for a type of virtual token (e.g., PKI certificate) to the client device  and receives  a response from the client device . The response may include a virtual token (e.g., PKI certificate) that is stored on the client device . The federated identity protocol strong authentication module  validates  the second-factor challenge response received for the client device  using the user data store in a data store and generates and sends  a response to the silent second-factor authentication plug-in  via the federated identity protocol, which can forward  the response to the application server . The response indicates whether the second-factor response from the user was successfully validated, and the application server  determines whether to grant the user  access to the application  based on the response.",{"@attributes":{"id":"p-0059","num":"0058"},"figref":"FIG. 5","b":["503","501","501","501","501"]},"Jane Doe wishes to login to her PayPal\u00ae account using her smart phone. The plug-in  on her smart phone sends an access request  that includes her first-factor user credentials (e.g., user ID and password) to the application server , which hosts the PayPal\u00ae application. The application server  validates Jane Doe's identity by comparing her first-factor user credentials against the first-factor user credentials stored in a data store that is coupled to the application server  and sends  a success response to the plug-in .","The success response triggers the plug-in  to be redirected  to the authentication service provider  using standard federated identity request protocol (e.g., SAML, OpenID). For example, the redirect  can use either HTTP GET or POST and a <sampl:AuthnRequest>element. The redirect  is a request that the authentication service provider  validate the user and\/or user device (e.g., Jane Doe and her smart phone) using strong authentication. The redirect  can include an enterprise identifier for PayPal\u00ae, a user identifier for Jane Doe, and a second-factor TKI_UID\u2032. Another example of an attribute can include, and is not limited to, a device identifier. In one embodiment, the redirect  includes a specific instruction on the desired authentication to be used. For example, the redirect  may include a message \u201cPlease authentication this user and require a One Time Password or PKI credential.\u201d In another embodiment, the redirect  does not include explicit instructions and the authentication service provider  can determine which application server  is associated with the request and use configuration data to determine which authentication method and\/or business logic is to be used for the particular application server . The authentication service provider  can be coupled to a data store that stores backend configuration data that specifies which authentication method or business logic should be used for a particular application server. The configuration data can be pre-configured.","The authentication service provider  uses business rules and user data that are associated with the enterprise application to validate  that the request (e.g., redirect ) is a legitimate request. For example, there may be a PayPal\u00ae business rule that permits any Premium level user to use any type of virtual token for silent second-factor authentication. According to the PayPal\u00ae policies, if the request includes a second-factor attribute for a virtual token, then the user identifier in the request should correspond to a Premium level user in order for the request to be a legitimate request. The authentication service provider  can search user data using the user identifier for Jane Doe in the request and determine that Jane Doe is a Premium level user. Finding the request is a legitimate request, the authentication service provider  detects  the plug-in  installed on the smart phone.","The authentication service provider  accesses user data to locate a second-factor challenge (e.g., request for the second-factor credential) to send to the smart phone and sends the challenge  to the plug-in  on the smart phone. For example, the authentication service provider  sends a query for a virtual token (e.g., PKI certificate) to the plug-in .","The request for the virtual token is handled by the plug-in  and is not visible to a browser that is hosted by the smart phone. The plug-in  triggers a search  for the virtual token (e.g., PKI certificate) on the smart phone. The virtual token  is not visible to a browser that is hosted by the smart phone and thus, the search is conducted by the plug-in . The plug-in  locates  a virtual token on the smart phone. The plug-in  generates a second-factor challenge response, which includes the virtual token, and sends  the response to the authentication service provider .","The authentication service provider  validates the user device by comparing  the second-factor challenge response to mapping data. The authentication service provider  also verifies that the user device is registered for the specific user by verifying the mapping. The authentication service provider  creates  a validation response based on the comparison to the mapping data. The validation response indicates whether the user device and\/or user were successfully validated. The validation response can be a federated identity protocol assertion (e.g., SAML assertion).","The authentication service provider  sends the response as part of a redirect  to the plug-in . The redirect  includes the assertion. The plug-in  sends  the assertion (e.g., SAML assertion) in the response to the application server  via the federated identity protocol. The application server  validates  the assertion by validating the signature of the assertion using the public key of the authentication service provider . The application server  updates  the session data to indicate the device is valid and grants the user access to the application.","In one embodiment, the machine (e.g., user device) that is used to access an application server  also hosts the second-factor credential (e.g., virtual token ). In another embodiment, the second-factor credential could be hosted by a different machine (e.g., a different user device) and the authentication service provider  sends the authentication request and challenge  to the different device that is hosting the second-factor credential, and the different device searches  for the virtual token (e.g., PKI certificate). The different device locates  a virtual token and generates a second-factor challenge response, which includes the virtual token, and sends  the response to the authentication service provider . In this embodiment, paths  and  collapse to a single path from the authentication service provider  to the device that is hosting the second-factor credential, and paths  and  collapse to a single path from the device that is hosting the second-factor credential to the authentication service provider .",{"@attributes":{"id":"p-0068","num":"0067"},"figref":["FIG. 6","FIGS. 1A-B"],"b":["600","600","142","600","610","613","615"]},"The request module  can receive first-factor validation results indicating that a user identity of a user has been successfully authenticated via first-factor credentials (e.g., username and password). The validation results can include a user identifier, such as a first-factor credential (e.g., username). The validation results can be received from an identity service provider or an application server. The request module  can create a modified federated identity protocol request for an authentication service provider to validate the user and\/or user device using second-factor authentication. The request includes a user identifier of the user identity that has been authenticated and one or more attributes, such as a second-factor attribute that identifies the type of second-factor authentication challenge which the authentication service provider should use or a specific second-factor authentication challenge that should be used. Backend configuration data can be pre-configured to specify which authentication method or business logic should be used. In one embodiment, the request module  creates a user identifier that does not reveal a first-factor credential of the user. The user identifier can be a unique handle, such as a hash of a first-factor credential. The request module  can send the modified federated identity protocol request to the authentication service provider via a federated identity protocol.","The virtual token module  can receive a virtual token request from the authentication service provider for a type of virtual token, such as a specific PKI certificate. The virtual token module  can search a data store  that is coupled to the silent second-factor authentication plug-in  for a virtual token. A virtual token  can be stored in the data store  when a user registers the user device with an authentication service provider. The virtual token  stored in the data store  is not visible to a browser hosted by the user device. The virtual token module  can provide the virtual token  to the authentication service provider.","The results module  can receive second-factor authentication results from the authentication service provider via a federated identity protocol and can send the results to a relying party via the federated identity protocol.",{"@attributes":{"id":"p-0072","num":"0071"},"figref":["FIG. 7","FIGS. 1A-B"],"b":["700","700","700","142"]},"At block , processing logic receives first-factor validation results indicating that a user identity of a user is authenticated. The validation results can include a user identifier, such as a first-factor credential (e.g., username). At block , processing logic creates a modified federated identity protocol request, which includes a user identifier of the user identity that has been authenticated. The modified federated identity protocol request can also include an enterprise identifier. The request is a request for an authentication service provider to validate the user and\/or user device using second-factor authentication. In one embodiment, the user identifier that is included in the request does not reveal a first-factor credential of the user. The user identifier can be a unique handle, such as a hash of a first-factor credential.","At block , processing logic sends the modified federated identity protocol request to the authentication service provider via a federated identity protocol. At block , processing logic receives a virtual token request from the authentication service provider. The request is for a type of virtual token, such as a specific PKI certificate. At block , processing logic locates a virtual token from a local data store and provides the virtual token to the authentication service provider at block . The virtual token stored in the local data store is not visible to a browser hosted by the user device. The authentication service provider receives the virtual token and verifies it using mapping data and generates second-factor authentication results. At block , processing logic receives the second-factor authentication results from the authentication service provider via a federated identity protocol and sends the results to a relying party via the federated identity protocol at block . The relying party may be an application server or an identity service provider. The second-factor authentication results can be used by an application server to determine whether to grant a user access to an application.",{"@attributes":{"id":"p-0075","num":"0074"},"figref":"FIG. 8","b":"800"},"The exemplary computer system  includes a processing device , a main memory  (e.g., read-only memory (ROM), flash memory, dynamic random access memory (DRAM) such as synchronous DRAM (SDRAM) or DRAM (RDRAM), etc.), a static memory  (e.g., flash memory, static random access memory (SRAM), etc.), and a secondary memory  (e.g., a data storage device in the form of a drive unit, which may include fixed or removable computer-readable storage medium), which communicate with each other via a bus .","Processing device  represents one or more general-purpose processing devices such as a microprocessor, central processing unit, or the like. More particularly, the processing device  may be a complex instruction set computing (CISC) microprocessor, reduced instruction set computing (RISC) microprocessor, very long instruction word (VLIW) microprocessor, processor implementing other instruction sets, or processors implementing a combination of instruction sets. Processing device  may also be one or more special-purpose processing devices such as an application specific integrated circuit (ASIC), a field programmable gate array (FPGA), a digital signal processor (DSP), network processor, or the like. Processing device  is configured to execute the instructions  for performing the operations and steps discussed herein.","The computer system  may further include a network interface device . The computer system  also may include a video display unit  (e.g., a liquid crystal display (LCD) or a cathode ray tube (CRT)) connected to the computer system through a graphics port and graphics chipset, an alphanumeric input device  (e.g., a keyboard), a cursor control device  (e.g., a mouse), and a signal generation device  (e.g., a speaker).","The secondary memory  may include a machine-readable storage medium (or more specifically a computer-readable storage medium)  on which is stored one or more sets of instructions  embodying any one or more of the methodologies or functions described herein. The instructions  may also reside, completely or at least partially, within the main memory  and\/or within the processing device  during execution thereof by the computer system , the main memory  and the processing device  also constituting machine-readable storage media. The instructions  may further be transmitted or received over a network  via the network interface device .","The computer-readable storage medium  may also be used to store the instructions  persistently. While the computer-readable storage medium  is shown in an exemplary embodiment to be a single medium, the term \u201ccomputer-readable storage medium\u201d should be taken to include a single medium or multiple media (e.g., a centralized or distributed database, and\/or associated caches and servers) that store the one or more sets of instructions. The terms \u201ccomputer-readable storage medium\u201d shall also be taken to include any medium that is capable of storing or encoding a set of instructions for execution by the machine and that cause the machine to perform any one or more of the methodologies of the present invention. The term \u201ccomputer-readable storage medium\u201d shall accordingly be taken to include, but not be limited to, solid-state memories, and optical and magnetic media.","The instructions , components and other features described herein (for example in relation to  and ) can be implemented as discrete hardware components or integrated in the functionality of hardware components such as ASICS, FPGAs, DSPs or similar devices. In addition, the instructions  can be implemented as firmware or functional circuitry within hardware devices. Further, the instructions  can be implemented in any combination hardware devices and software components.","In the above description, numerous details are set forth. It will be apparent, however, to one skilled in the art, that the present invention may be practiced without these specific details. In some instances, well-known structures and devices are shown in block diagram form, rather than in detail, in order to avoid obscuring the present invention.","Some portions of the detailed description which follows are presented in terms of algorithms and symbolic representations of operations on data bits within a computer memory. These algorithmic descriptions and representations are the means used by those skilled in the data processing arts to most effectively convey the substance of their work to others skilled in the art. An algorithm is here, and generally, conceived to be a self-consistent sequence of steps leading to a result. The steps are those requiring physical manipulations of physical quantities. Usually, though not necessarily, these quantities take the form of electrical or magnetic signals capable of being stored, transferred, combined, compared, and otherwise manipulated. It has proven convenient at times, principally for reasons of common usage, to refer to these signals as bits, values, elements, symbols, characters, terms, numbers, or the like.","It should be borne in mind, however, that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise as apparent from the following discussion, it is appreciated that throughout the description, discussions utilizing terms such as \u201creceiving,\u201d \u201csearching,\u201d \u201cauthenticating,\u201d \u201csending,\u201d \u201crequesting,\u201d \u201cproviding,\u201d or the like, refer to the actions and processes of a computer system, or similar electronic computing device, that manipulates and transforms data represented as physical (e.g., electronic) quantities within the computer system's registers and memories into other data similarly represented as physical quantities within the computer system memories or registers or other such information storage, transmission or display devices.","Embodiments of the invention also relate to an apparatus for performing the operations herein. This apparatus can be specially constructed for the required purposes, or it can comprise a general purpose computer system specifically programmed by a computer program stored in the computer system. Such a computer program can be stored in a computer-readable storage medium, such as, but not limited to, any type of disk including optical disks, CD-ROMs, and magnetic-optical disks, read-only memories (ROMs), random access memories (RAMs), EPROMs, EEPROMs, magnetic or optical cards, or any type of media suitable for storing electronic instructions.","The algorithms and displays presented herein are not inherently related to any particular computer or other apparatus. Various general purpose systems can be used with programs in accordance with the teachings herein, or it may prove convenient to construct a more specialized apparatus to perform the method steps. The structure for a variety of these systems will appear from the description below. In addition, embodiments of the present invention are not described with reference to any particular programming language. It will be appreciated that a variety of programming languages can be used to implement the teachings of embodiments of the invention as described herein.","A computer-readable storage medium can include any mechanism for storing information in a form readable by a machine (e.g., a computer), but is not limited to, optical disks, Compact Disc, Read-Only Memory (CD-ROMs), and magneto-optical disks, Read-Only Memory (ROMs), Random Access Memory (RAM), Erasable Programmable Read-Only memory (EPROM), Electrically Erasable Programmable Read-Only Memory (EEPROM), magnetic or optical cards, flash memory, or the like.","Thus, a method and apparatus for providing strong authentication via a federated identity protocol is described. It is to be understood that the above description is intended to be illustrative and not restrictive. Many other embodiments will be apparent to those of skill in the art upon reading and understanding the above description. The scope of the invention should, therefore, be determined with reference to the appended claims, along with the full scope of equivalents to which such claims are entitled."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The present invention is illustrated by way of example, and not by way of limitation, in the figures of the accompanying drawings in which like references indicate similar elements. It should be noted that different references to \u201can\u201d or \u201cone\u201d embodiment in this disclosure are not necessarily to the same embodiment, and such references mean at least one.",{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIGS. 1A-B"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 8"}]},"DETDESC":[{},{}]}
