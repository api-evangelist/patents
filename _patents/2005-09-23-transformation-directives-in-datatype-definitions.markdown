---
title: Transformation directives in datatype definitions
abstract: The present invention provides computer-implemented methods and systems for providing a transformation directive in a data type definition statement. The transformation directive specifies one or more transformations to be applied to data before it is stored in a variable of the data type being defined. The runtime framework interprets the transformation directive and applies the transformation to data which is assigned to a variable of the data type that was defined; and stores the transformed value to the variable.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07571175&OS=07571175&RS=07571175
owner: SAP AG
number: 07571175
owner_city: Walldorf
owner_country: DE
publication_date: 20050923
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION"],"p":["The present invention relates to computer-implemented methods and systems for transforming data, in particular, computer-implemented methods and systems for transforming data using a data type definition statement.","To keep pace with rapidly changing business models, business enterprises require a flexible computing environment that allow changes to be implemented quickly and cost-effectively. In recent years, the \u201cservices-oriented architecture\u201d (SOA) technology based on Web services has gained popular appeal. SOA technology allows loosely coupled business applications to be assembled from a set of internal and external services and distributed over a connected information technology (IT) infrastructure. In order to be flexible, ubiquitous, and cost-effective to maintain, SOAs are largely open and standards compliant.","One example of an SOA is the Enterprise Services Architecture (ESA) offered by SAP AG. SAP's ESA is an open architecture that builds on the benefits of Web services and is enabled by the SAP NetWeaver platform. Like many SOAs, ESA separates the interface and process definition from the underlying application by modeling the terms of a business relationship using \u201cbusiness objects\u201d defined using one or more standard data definition languages, such as the Web Services Definition Language (WSDL), XML schema (xsd), or specialized XML languages, such as cXML, eBXML, or the Core Components Technical Specification (CCTS) by the UN\/CEFACT (United Nations Centre for Trade Facilitation and Electronic Business), WSDL is described in the W3C Note dated 15 Mar. 2001, available at www.w3.org. SAP defines a proprietary extension of the WSDL standard, called WSDL++. A business object may be, for example, an invoice, expense report, purchase order, or other business form requiring data. Using WSDL++, for example, business objects can be described using structured information to simplify the sharing of the business object between business applications.","Most current standards, such as XML, provide limited facilities for datatypes and each defined datatype expects the data in a specific format. Data that is entered into a business object in an unacceptable format can cause problems for an SOA. The problem of non-standard data arises even more frequently today as enterprises merge and become more global. For example, an enterprise may result from the merging of a number of formerly separate entities, each used to entering data into its applications in its own unique format. Enterprises that span different continents may run into the difficulty of having entities in different countries enter data in different manners. For example, Europeans are typically used to entering the date by specifying the day, then the month, while Americans are more used to entering the month, then the day.","These differences in data entry must be addressed at some level or they risk causing error. In XML, for example, an XML schema definition (xsd) consists of components such as type definitions and element declarations that can be used to assess the validity of well-formed element and attribute information items. When data is received into a business object defined in xsd, a program storing data defined by a type definition checks to see if the data falls within the requirements set for the data type. If the data does not exactly meet the restrictions of the data type, the data is rejected and an error occurs.","Non-standard data can be and has been addressed by using programming languages, such as Java and Perl, at the application level. Programmers can, for example, add code to the various applications using the business object to transform data that is stored that is within the restrictions of the data type, but outside the requirements of the application. Perl, for example, has directives that perform pattern replacement and transliteration. In the Java programming language, there can be transformation in class definitions. By allowing transformations only in a high-level programming language such as Java or Perl, however, application programmers must write specialized code for each of the various applications. This prevents total portability of the business object.","By allowing transformation in data type definition statements, business objects can be created that are more readily usable by a wider variety of applications and environments without causing error or requiring special purpose coding of business applications.","Methods and systems consistent with the present invention provide a transformation directive in a data type definition statement, the transformation directive specifying one or more transformations to be applied to a value before it is stored in a variable of the data type being defined; interpret the transformation directive by a runtime framework; apply the transformation to at least one value which is assigned to a variable of the data type that was defined; and store the transformed value to the variable.","In methods and systems consistent with the present invention, transformation directives are provided that allow data transformation in data type definitions. Embodiments of the present invention will be described with reference to the accompanying drawings, wherein like parts are designated by like reference numerals throughout, and wherein the leftmost digit of each reference number refers to the drawing number of the figure in which the referenced part first appears. The implementations set forth in the following description do not represent all implementations consistent with the claimed invention. Instead, they are merely some examples consistent with certain aspects related to the invention.",{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 1","b":["100","100","110","120","140","130","120","130","150"]},"Client  may be any computing device capable of being used to access development environment  and application server . Client  may access development environment  and application server  via any known communications method, such as, for example, by bus, Local Area Network (LAN), Wide Area Network (WAN), Internet, dedicated Intranet, wireless or other type of connection. Further, any suitable combination of wired and\/or wireless components and systems may be used to provide a communication method. Similarly, each of development environment  and application server  may access repository  via any known communications method, such as the ones listed above or any combination thereof. Further, the components of computer system  may communicate via Web-based protocols, such as Transmission Control Protocol\/Internet Protocol (TCP\/IP), Hyper Text Transfer Protocol (HTTP), and SOAP (simple object access protocol). While in most embodiments, client  will not need direct access to repository , such access is not foreclosed and, if warranted, may also be via known communications method, such as those mentioned above. In certain embodiments, client  and application server  may be the same device or devices.","Client  comprises a processor and may comprise one or more memories, input\/out devices, or display devices. Client  is capable of making a request to instantiate an application on servers , , . As used herein, the term \u201cinstantiate\u201d means, in an object oriented programming environment, an object of a particular class, and, more generally, includes deploying, customizing, running and\/or executing an application.","Development environment  is platform used at design time to design data type definition statements consistent with the present invention and as will be described more below. Development environment  may be hardware, software, or a combination of hardware and software. One example of a suitable development environment  is the Integration Builder software component of the SAP Exchange Infrastructure (XI) component of SAP's NetWeaver platform. Integration Builder is a tool used to define messages and processes, map one format to another, configure the way the formats will be used by other systems and store the data in a repository, such as data repository .","Repository  may be any one of a number of commercially available repositories. However, in a preferred embodiment, the Enterprise Services Repository from SAP AG is used. Data repository  may employ any of a number of commercially available database systems such as Microsoft Access, dbase, Oracle, Sybase, etc.","Repository  may also store business objects that may be created using a data type definition consistent with the present invention. Business objects stored in repository  encapsulate their data and processes. External data to the data and processes is only possible by means of specific methods. In at least one embodiment, the business objects may be accessed by means of Business Application Programming Interfaces (BAPI), one well known and widely used application interfaces used to achieve interoperability between various systems and to integrate third party software components with the software offered by SAP AG. In another exemplary environment, such as one existing Netweaver architecture, the Enterprise Services Infrastructure (ESI) provides access to the business objects. Within the ESI, the implementor of the service may use the Service Provider Interface (SPI) to specify business objects and the consumer may use, for example, the Generic Consumer Proxy (GCP) or Typed Consumer Proxy (TCP) of the Enterprise Services Framework to access the business application.","Application server  may be any computer platform running a business application. Servers, such as application server , may include a storage device and a memory. The memory may contain an operating system, one or more applications as well as their corresponding interfaces. According to an embodiment of the present invention, application server  accesses business objects stored in repository .",{"@attributes":{"id":"p-0022","num":"0021"},"figref":["FIG. 1","FIG. 2"]},"According to the present invention, a \u201ctype\u201d to be used in a business object may be defined as design time to transform data from one format to another. In embodiments consistent with the present invention, the type definition comprises one or more expressions that define the transliteration of the data that should take place prior to storage. For example, in one instance, a type definition consistent with the present invention may specify to search for a set of certain patterns and replace those patterns with a different set of patterns. Once the type definition is defined at design time, the type definition may be used in construction of a business object. At run time, data that matches one or more patterns in the set of patterns to be transformed may be replaced with the specified patterns in the replacement set before restrictions and validations are performed by the XML schema.",{"@attributes":{"id":"p-0024","num":"0023"},"figref":["FIG. 2","FIG. 1"],"b":"200"},"The modeling application stores the business objects and corresponding type definitions (step ). In one exemplary environment, for example, such business objects and corresponding type definitions may be stored in the Enterprise Services Repository (ESR).","When a second user (such as an application programmer) wishes to use the business objects and type definitions stored in the ESR, the second user configures the application for the user interface by, for example, selecting particular business objects and type definitions for use (step ). In some embodiments, the first and second users may be the same person acting in different roles. The second user may select business objects and type definitions for use, for example, by using a user interface.","Additionally, proxies are generated for using the indicated business objects and type definition (step ). In certain embodiments, proxies are generated upon selection of the particular business objects and type definitions by the user. A proxy is a programming stub that models the look and feel of a particular message. During proxy generation, a copy of the models is stored in the application server, as well as copies of the proxies themselves and the mapping of the data to the corresponding models in the ESR. The application is configured to connect the modeled services to the application and define how the application will look like to the user. In one exemplary embodiment, this may be performed at SAP using the SAP Visual Composer.","Steps  and  may be performed in the order shown in , or the reverse order. In certain embodiments, steps  and  may be performed independently of one other or concurrently. Once the application is configured, when the application is invoked, the application uses the generated proxies and not the data stored in the ESR.",{"@attributes":{"id":"p-0029","num":"0028"},"figref":["FIG. 3","FIG. 2"],"b":["310","320"]},"During use of the application, the user adds or requests a change to the data (step ). In applications, when data is added to a business object, the data is checked against the restrictions associated with the data type during design. During this validation step, a transformation directive consistent with the present invention may be applied to the entered data (step ). The validation based on the transformed data is performed based on the restrictions defined in the type definition. If incoming data fits the restrictions of the transformation directive (step ), the data is transformed according to the present invention (step ). If not (step ), the original data is stored (step ).","The following is one example of an xsd type definition for a \u201cLanguage\u201d type whose values will all be lower case and have only two characters:",{"@attributes":{"id":"p-0032","num":"0031"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"7pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"210pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2003<?xml version=\u201c1.0\u201d encoding=\u201cISO-8859-1\u201d?>"]},{"entry":[{},"\u2003<xsd:schema xmlns:xsd=\u201chttp:\/\/www.w3.org\/2001\/XMLSchema\u201d"]},{"entry":[{},"\u2003xmlns=\u201chttp:\/\/sap.com\/"]},{"entry":[{},"test \u201d targetNamespace=\u201chttp:\/\/sap.com\/test\u201d>"]},{"entry":[{},"\u2003\u2003<xsd:simpleType name=\u201cLanguage\u201d>"]},{"entry":[{},"\u2003\u2003\u2003<xsd:annotation>"]},{"entry":[{},"\u2003\u2003\u2003\u2003<xsd:documentation xml:lang=\u201cEN\u201d>"]},{"entry":[{},"\u2003\u2003\u2003\u2003Language of the entry"]},{"entry":[{},"\u2003\u2003\u2003\u2003<\/xsd:documentation>"]},{"entry":[{},"\u2003\u2003\u2003<\/xsd:annotation>"]},{"entry":[{},"\u2003\u2003\u2003<xsd:restriction base=\u201cxsd:string\u201d>"]},{"entry":[{},"\u2003\u2003\u2003\u2003<xsd:minLength value=\u201c2\u201d \/>"]},{"entry":[{},"\u2003\u2003\u2003\u2003<xsd:maxLength value=\u201c2\u201d \/>"]},{"entry":[{},"\u2003\u2003\u2003\u2003<xsd:pattern value=\u201c[a-z]+\u201d \/>"]},{"entry":[{},"\u2003\u2003\u2003\u2003<xsd:transformation value=\u201cs\/(..).*\/\\1\/ tr\/A-Z\/a-z\/\u201d \/>"]},{"entry":[{},"\u2003\u2003\u2003<\/xsd:restriction>"]},{"entry":[{},"\u2003\u2003<\/xsd:simpleType>"]},{"entry":[{},"\u2003<\/xsd:schema>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"The portion highlighted in bold is a representative example of a transformation directive consistent with the present invention. Transformation directives consistent with the present invention comprise one or more directives for transform data from one format for another, such as search and replace directives or transliteration directives.","In the Language type above, the \u201cpattern value\u201d directive immediately above the bolded transformation directive will check the value range of the data to ensure that all characters are lower case. Without a transformation directive consistent with the present invention (as appears on the next line in bold), if all characters are not lower case, the data will be rejected.","However, in the example above, the transformation directive will transform most, if not all, data before failure occurs. The exemplary transformation directive, shown above in bold, actually comprises two directives that are applied in sequence to any values which are assigned to a variable of the type. The first directive truncates the input value to two characters (s\/( . . . ).*\/\\1\/) and the second directive converts all upper case characters to lower case (tr\/A-Z\/a-z\/). In the first directive, the program searches for a string pattern with length equal to two. In the second directive, capital letters A-Z are replaced with lower case letters a-z. In this example, rather than just rejecting a value which does not conform to the restrictions in the type definition, the transformation directives allows the runtime environment to try and convert the value to something which conforms to the restrictions.","After the transformation takes place, the resulting value is still checked against the defined restrictions. For example, if a value which contains numbers like \u201cF4\u201d would be given, this would be transformed to \u201cf4\u201d and still be rejected because it does not match the given pattern \u201c[a-z]+\u201d which only allows for lower case letters in the value.","In certain embodiments of the present invention, the transformation directive includes a scripting engine that allows providing of transformation directives in the form of a program that is applied to values that are to be assigned to a variable of a given datatype. In this exemplary embodiment, the directive may look like the following:",{"@attributes":{"id":"p-0038","num":"0037"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<xsd:transformation>"]},{"entry":[{},"\u2003<script language=\u201cperl\u201d>"]},{"entry":[{},"\u2003\u2003$value = $ARGV[0];"]},{"entry":[{},"\u2003\u2003if ($value =~ \/{circumflex over (\u2009)}(\\d+)\\\/(\\d+)\\\/(\\d+)$\/) {"]},{"entry":[{},"\u2003\u2003# American format with \/ as separator mm\/dd\/yyyy"]},{"entry":[{},"\u2003\u2003\u2003$month = $1;"]},{"entry":[{},"\u2003\u2003\u2003$day = $2;"]},{"entry":[{},"\u2003\u2003\u2003$year = $3;"]},{"entry":[{},"\u2003\u2003} elsif ($value =~ \/{circumflex over (\u2009)}(\\d+)\\.(\\d+)\\.(\\d+)$\/) {"]},{"entry":[{},"\u2003\u2003# German format with . as separator dd.mm.yyyy"]},{"entry":[{},"\u2003\u2003\u2003$day = $1;"]},{"entry":[{},"\u2003\u2003\u2003$month = $2;"]},{"entry":[{},"\u2003\u2003\u2003$year = $3;"]},{"entry":[{},"\u2003\u2003} else {"]},{"entry":[{},"\u2003\u2003# no valid format, return original string"]},{"entry":[{},"\u2003\u2003\u2003return $value;"]},{"entry":[{},"\u2003\u2003}"]},{"entry":[{},"\u2003\u2003# check if the year is given complete with century"]},{"entry":[{},"\u2003\u2003if ($year < 100) {"]},{"entry":[{},"\u2003\u2003\u2003$year = 2000 + $year;"]},{"entry":[{},"\u2003\u2003}"]},{"entry":[{},"\u2003\u2003# format the internal storage format yyyymmdd"]},{"entry":[{},"\u2003\u2003return sprintf(\u201c%04d%02d%02d\u201d, $year, $month, $day);"]},{"entry":[{},"\u2003<\/script>"]},{"entry":[{},"<\/xsd:transformation>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"In the example above, the transformation directive uses a script written in the Perl programming language, however, other languages, such as VBScript, JavaScript, Python, or the like, may also be used. As shown above, the language tag in the script element specifies the script language (in this case Perl). The script expects the value in a special variable $ARGV[0] (which is used in Perl for the first command line argument when a script is called). The script in the example checks the value first against the American date format with a month, day, and year separated by a \u201c\/\u201d and extracts the three values separately. If this fails, it checks against the German format day, month, year, separated by \u201c.\u201d. If this fails as well, the transformation will not succeed and the original value is returned. In successful cases, the script proceeds and checks if the year was given with a century; if not, 2000 is added to the year (of course, with a bit more elaborate coding one could write a script which takes the century information from the current system time). After that, the date is formatted into an internal format used for storage. This is just one example of the type of format checks that may be made by a script in a transformation directive consistent with the present invention.","Aspects of the invention described herein may also be embodied in a computer program product or a computer-readable medium with a computer program product stored thereon. Certain aspects of the present invention may be embodied in a display on a display device.","It is to be understood that the foregoing description is intended to illustrate and not to limit the scope of the invention, which is defined by the scope of the appended claims. Other embodiments are within the scope of the following claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The accompanying drawings, which are incorporated in and constitute a part of this specification, illustrate various embodiments of the invention and, together with the description, serve to explain the principles of the invention. In the drawings:",{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 1","b":"100"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 3"}]},"DETDESC":[{},{}]}
