---
title: Method and device for managing hardware errors in a multi-core environment
abstract: A method and device for managing hardware errors in a multi-core environment includes allocating processor cores to a main set and a spare set of processor cores. The main set of processor cores are used by an operating system, and the spare set of processor cores are dedicated to software applications. Should a processor core error occur, a processor core swap may be performed to swap a spare processor core for a failing main processor core without interrupting the execution of the operating system.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09658930&OS=09658930&RS=09658930
owner: Intel Corporation
number: 09658930
owner_city: Santa Clara
owner_country: US
publication_date: 20111230
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","DETAILED DESCRIPTION OF THE DRAWINGS"],"p":["Contemporary high-performance computing relies on the use of many processor cores to perform various intensive and complicated computations and processes. Some computing devices are specifically designed for such tasks and may include multiple processor sockets with each processor having multiple processor cores. As such, high-performance computing system may utilize fifty or more processor cores or threads to perform various workloads. Such systems may include \u201csmall cores,\u201d a combination of \u201csmall\u201d and \u201cbig\u201d cores\u201d, or all \u201cbig\u201d cores. Small cores may be defined as lower feature processor cores designed for highly parallel computing, whereas big cores are defined as general purpose computer cores such as those typically found in standard server computing devices.","In a multi- or many-core system, the failure of a single processor core may result in an unrecoverable error of the entire system, including any remaining good cores. The potential of critical failure of the entire system is magnified with a larger number of processor cores. For example, in a system with fifty processor cores, the failure of one of the fifty processor cores can cause the failure of the entire system. Additionally, the failure of one processor core in one location of the processor die may place undue stress on adjoining cores and tiles. Further, the loss of processor cores can increase the workload of remaining cores, which may exacerbate any current problems in the processor core or tile. Some systems include software solutions to manage the processor core errors. However, such software solutions typically increase the workload overhead of the system and fail to consider core or tile layout and its effect on the health and throughput of continued computing on the system.","While the concepts of the present disclosure are susceptible to various modifications and alternative forms, specific exemplary embodiments thereof have been shown by way of example in the drawings and will herein be described in detail. It should be understood, however, that there is no intent to limit the concepts of the present disclosure to the particular forms disclosed, but on the contrary, the intention is to cover all modifications, equivalents, and alternatives consistent with the present disclosure and the appended claims.","In the following description, numerous specific details such as logic implementations, opcodes, means to specify operands, resource partitioning\/sharing\/duplication implementations, types and interrelationships of system components, and logic partitioning\/integration choices are set forth in order to provide a more thorough understanding of the present disclosure. It will be appreciated, however, by one skilled in the art that embodiments of the disclosure may be practiced without such specific details. In other instances, control structures, gate level circuits and full software instruction sequences have not been shown in detail in order not to obscure the invention. Those of ordinary skill in the art, with the included descriptions, will be able to implement appropriate functionality without undue experimentation.","References in the specification to \u201cone embodiment,\u201d \u201can embodiment,\u201d \u201can example embodiment,\u201d etc., indicate that the embodiment described may include a particular feature, structure, or characteristic, but every embodiment may not necessarily include the particular feature, structure, or characteristic. Moreover, such phrases are not necessarily referring to the same embodiment. Further, when a particular feature, structure, or characteristic is described in connection with an embodiment, it is submitted that it is within the knowledge of one skilled in the art to effect such feature, structure, or characteristic in connection with other embodiments whether or not explicitly described.","Embodiments of the invention may be implemented in hardware, firmware, software, or any combination thereof. Embodiments of the invention implemented in a computer system may include one or more bus-based interconnects between components and\/or one or more point-to-point interconnects between components. Embodiments of the invention may also be implemented as instructions carried by or stored on a transitory or non-transitory machine-readable medium, which may be read and executed by one or more processors. A machine-readable medium may be embodied as any device, mechanism, or physical structure for storing or transmitting information in a form readable by a machine (e.g., a computing device). For example, a machine-readable medium may be embodied as read only memory (ROM); random access memory (RAM); magnetic disk storage media; optical storage media; flash memory devices; mini- or micro-SD cards, memory sticks, electrical signals, and others.","In the drawings, specific arrangements or orderings of schematic elements, such as those representing devices, modules, instruction blocks and data elements, may be shown for ease of description. However, it should be understood by those skilled in the art that the specific ordering or arrangement of the schematic elements in the drawings is not meant to imply that a particular order or sequence of processing, or separation of processes, is required. Further, the inclusion of a schematic element in a drawing is not meant to imply that such element is required in all embodiments or that the features represented by such element may not be included in or combined with other elements in some embodiments.","In general, schematic elements used to represent instruction blocks may be implemented using any suitable form of machine-readable instruction, such as software or firmware applications, programs, functions, modules, routines, processes, procedures, plug-ins, applets, widgets, code fragments and\/or others, and that each such instruction may be implemented using any suitable programming language, library, application programming interface (API), and\/or other software development tools. For example, some embodiments may be implemented using Java, C++, and\/or other programming languages. Similarly, schematic elements used to represent data or information may be implemented using any suitable electronic arrangement or structure, such as a register, data store, table, record, array, index, hash, map, tree, list, graph, file (of any file type), folder, directory, database, and\/or others.","Further, in the drawings, where connecting elements, such as solid or dashed lines or arrows, are used to illustrate a connection, relationship or association between of among two or more other schematic elements, the absence of any such connecting elements is not meant to imply that no connection, relationship or association can exist. In other words, some connections, relationships or associations between elements may not be shown in the drawings so as not to obscure the disclosure. In addition, for ease of illustration, a single connecting element may be used to represent multiple connections, relationships or associations between elements. For example, where a connecting element represents a communication of signals, data or instructions, it should be understood by those skilled in the art that such element may represent one or multiple signal paths (e.g., a bus), as may be needed, to effect the communication.","Referring now to , a computing device  for managing hardware errors in a multi-core environment includes one or more multi-core processors . Each of the multi-core processors  includes one or more processor cores  such that the computing device  includes two or more processor cores. For example, in some embodiments, the computing device  may include fifty or more processor cores. In use, hardware errors of the computing device  that originate from the processor cores  are managed by allocating the processor cores  between a main set  and a spare set  of processor cores (see ). To do so, as discussed in more detail below, a main hardware description table  (see ) that identifies each of the processor cores  of the main set  and a separate spare hardware description table  (see ) that identifies each of the processor cores  of the spare set  are established.","The processor cores  of the main hardware description table  are exposed to an operating system executed on the computing device  while the processor cores  of the spare hardware description table  are \u201cabstracted\u201d or not otherwise directly accessible to the operating system kernel. The processor cores  of the spare hardware description table  are reserved for and assigned to software applications (e.g., computational intensive applications) executed on the computing device  in a computational request response fashion. To do so, a message passing interface (MPI) is established between the software applications and the assigned processor cores  of the spare set . Should a processor core error occur with one of the assigned processor cores , the associated interrupt is limited to the spare set  of processor cores  (i.e., the interrupt is not received by the main set  of processor cores ). As such, the associated software application (or task of the associated software application) may be restarted and a new processor core(s)  of the spare set  may be assigned to the software application (or task thereof). Alternatively, should a processor core error occur with one of the processor cores  of the main hardware description table , a processor core swap may be performed to replace the failing\/failed processor core  of the main set  with a processor core  from the spare set . In one embodiment, the processor core swap is performed based upon the location of the failing\/failed processor core(s)  in the processor die to minimize future errors and to minimize latency (e.g., the replacement processor core(s)  of the spare set  may be selected based on the die location of the failing\/failed processor core(s)  of the main set ). Additionally, the processor core swap is performed without affecting the operating system, which is executing on the processor cores  of the main set , by using embedded firmware, hardware, system software, etc. To do so, as discussed below, the context of the computing device  is paused as performed in a typical System Management Mode (SMM) or similar error handling state. In this way, the execution of the operating system may be uninterrupted (e.g., the operating system need not be restarted) even in the event of a processor core failure.","As shown in , the processor(s)  includes a controller  and processor registers , which may be embodied as memory locations of internal memory of the processor(s) . The controller  may be embodied as control circuitry and associated firmware\/microcode for controlling the operation of and access to the processor cores . For example, as discussed in more detail below, the controller  configures the processor registers  for the allocation of processor cores to the spare set  and manages access to the main set  and spare set  of the processor cores . Additionally, as discussed in more detail below, the processor registers  includes register flags, bits, or other indicators for each processor core  to indicate whether the respective processor core  has failed (or is failing) and to control or limit the broadcast of hardware interrupts caused by the respective processor core  to the respective processor sets , .","The computing device  may be embodied as any type of computing device such as a mobile computing device, a smart phone, a computing tablet, a mobile internet device, a lap top computer, a digital assistant, a desktop computer, a server, and\/or other computing device capable of performing the functions described herein. As shown in , the illustrative computing device  further includes an I\/O subsystem , a memory , a-data storage , and one or more additional peripheral devices . In some embodiments, several of the foregoing components may be incorporated on a motherboard of the computing device , while other components may be communicatively coupled to the motherboard via, for example, a peripheral port. Furthermore, it should be appreciated that the computing device  may include other components, sub-components, and devices commonly found in a multi-core computing device or system, which are not illustrated in  for clarity of the description.","The I\/O subsystem  of the computing device  may be embodied as circuitry and\/or components to facilitate input\/output operations with the processor(s)  and\/or other components of the computing device . In some embodiments, the I\/O subsystem  may be embodied as a memory controller hub (MCH or \u201cnorthbridge\u201d), an input\/output controller hub (ICH or \u201csouthbridge\u201d), and a firmware device. In such embodiments, the firmware device of the I\/O subsystem  may be embodied as a memory device for storing Basic Input\/Output System (BIOS) data and\/or instructions and\/or other information (e.g., a BIOS driver used during booting of the computing device ). However, in other embodiments, I\/O subsystems having other configurations may be used. For example, in some embodiments, the I\/O subsystem  may be embodied as a platform controller hub (PCH). In such embodiments, the memory controller hub (MCH) may be incorporated in or otherwise associated with the processor(s) , and the processor(s)  may communicate directly with the memory  (as shown by the hashed line in ). Additionally, in other embodiments, the I\/O subsystem  may form a portion of a system-on-a-chip (SoC) and be incorporated, along with the processor(s)  and other components of the computing device , on a single integrated circuit chip.","The processor(s)  is communicatively coupled to the I\/O subsystem  via a number of signal paths. These signal paths (and other signal paths illustrated in ) may be embodied as any type of signal paths capable of facilitating communication between the components of the computing device . For example, the signal paths may be embodied as any number of point-to-point links, wires, cables, light guides, printed circuit board, traces, via, bus, intervening devices, and\/or the like.","The memory  of the computing device  may be embodied as or otherwise include one of more memory devices or data storage locations including, for example, dynamic random access memory devices (DRAM), synchronous dynamic random access memory devices (SDRAM), double-data rate synchronous dynamic random access memory device (DDR SDRAM), mask read-only memory (ROM) devices, erasable programmable ROM (EPROM), electrically erasable programmable ROM (EEPROM) devices, flash memory devices, and\/or other volatile and\/or non-volatile memory devices. The memory  is communicatively coupled to the I\/O subsystem  via a number of signal paths. Although only a single memory device  is illustrated in , the computing device  may include additional memory devices in other embodiments. Various data and software may be stored in the memory . For example, one or more operating systems, applications, programs, libraries, and drivers that make up the software stack executed by the processors(s)  may reside in memory  during execution.","The data storage  may be embodied as any type of device or devices configured for the short-term or long-term storage of data such as, for example, memory devices and circuits, memory cards, hard disk drives, solid-state drives, or other data storage devices. For example, an operating system and various software applications to be executed on the computing device  may be stored, in the data storage . Additionally, data generated by such software applications may be stored on the data storage  for later retrieval and use as need by the software application.","The peripheral devices  of the computing device  may include any number of additional input\/output devices, interface devices, and\/or other peripheral devices. For example, the peripheral devices  may include a display, keyboard, mouse, speakers, and\/or other peripheral devices. The peripheral devices  are communicatively coupled to the I\/O subsystem  via a number of signal paths thereby allowing the I\/O subsystem  and\/or processor(s)  to receive inputs from and send outputs to the peripheral devices .","Referring now to , in use, the computing device  establishes a software environment . The software environment  includes one or more software applications , which are executed on an operating system  of the computing device . The software application  may be embodied as any type of software application capable of utilizing the processor cores  of the spare set  as discussed below. For example, in one embodiment, the software application  is embodied as a computational intensive, multi-threaded application.","The software environment  also includes a firmware , such as a basic input\/output system (BIOS) firmware, which controls access to the processor cores  by the applications  and the operating system . To do so, as discussed above, the firmware  establishes the main processor core description table , which is illustratively embodied as a Multiple Advance Programmable Interrupt Controller (APIC) Description Table (MADT). Of course, other types of hardware description tables, lists, or datasets may be used in other embodiments. The main processor core description table  identifies each of the unallocated processor cores  of the main set . However, the allocated processor cores  of the spare set  are not listed in the main processor core description table . During initialization, the operating system  accesses the main processor core description  to identify those processor cores  available to the operating system . Because the allocated processor cores  of the spare set  are not listed in the main processor core description table , the allocated processor cores  of the spare set  are \u201cabstracted\u201d from the operating system  and, as such, the operating system  does not directly use the processor cores  of the spare set  during normal operation.","The firmware  also establishes the spare processor core description table , which is illustratively embodied as a virtual message passing interface (VMPI) table. Again, other types of hardware description tables, lists, or datasets may be used in other embodiments. The spare processor core description table  identifies each of the allocated processor cores  of the spare set  of processor cores . During execution of the application , processor cores  of the spare processor core description table  are assigned to the software application  (or individual task\/thread of the software application ) as needed.","To facilitate interaction with the processor cores , the firmware  also establishes an Advanced Configuration and Power Interface (ACPI) between the operating system.  and the processor cores  of the main set  and a Message Passing Interface (MPI) between the application  and the processor cores  of the spare set . The operating system  uses the ACPI to communicate with the processor cores  of the main set  and the application  uses the MPI to communicate with the processor cores of the spare set .","The software environment  also includes one or more processor microcode , which may be executed by the controller  of the processor(s) . The microcode  manages and controls access to the processor cores . For example, as discussed above, the microcode  maintains processor registers  to facilitate the allocation of processor cores  between the main set  and the spare set . Although shown and described in the illustrative embodiment of  as processor microcode , it should be appreciated that in other embodiments a BIOS SMM or other embedded operational code may be used to manage and control the access to the processor cores .","In the illustrative embodiment of , the processor registers  include a number of flags, bits, or other indicators usable to indicate a status of the processor cores  and control the handling of errors generated therefrom. For example, the processor registers  include a spare core flag  that may be used (e.g., \u201cset\u201d) by the microcode  to indicate that the respective processor core  has been allocated to the spare set . The processor registers  also includes a failed core flag  that may be used by the microcode  to indicate that the respective processor core  has failed or is failing. Additionally, the processor registers  include a Virtual Message. Passing Interface (VMPI) interrupt flag  that may be used by the microcode  to indicate that any interrupt caused by the respective processor core  should be broadcast to, or otherwise accessible by, only the processor cores  of the spare set .","As discussed in more detail below, should a processor core error occur during operation of the computing device , the firmware  and\/or microcode  may perform certain actions to facilitate the recovery of the computing device  from the hardware error. For example, if the processor core error is caused by a processor core  of the spare set , the hardware error generated therefrom is broadcast only to those processor cores  of the spare set  and, as such, is recoverable. To do so, the firmware  instructs the application  to restart, which causes new processor cores  of the spare set  to be assigned to the application . Alternatively, if the processor core error is caused by a processor core  of the main set , the firmware \/microcode  may perform a processor core swap (if the error is recoverable) to replace the failed\/failing processor core  of the main set  with a processor core  of the spare set . In this way, processor core errors may be handled without halting or restarting execution of the operating system .","Referring now to , in use, the computing device  may execute a method  to allocate processor cores  to the main set  and the spare set . The method  begins with block  in which the computing device  performs pre-boot initialization procedures (e.g., the memory  may be initialized). In block , the microcode  configures the processor registers  for allocation of the processor cores . To do so, as discussed above, the firmware  or microcode  may configure the processor registers  for use with the spare core flag , the failed core flag , and the VMPI interrupt flag . The microcode  may also set the spare, core flag  and VMPI interrupt flag  for those processor cores  allocated to the spare set .","In block , the firmware  establishes the main processor core description table . As discussed above, the main processor core description table  identifies each of the unallocated processor cores  of the main set . Similarly, in block , the firmware  establishes the spare processor core description table . Again, as discussed above, the spare processor core description table  identifies each of the allocated processor cores  of the spare set  the main set  of processor cores . Additionally, in block , the firmware  establishes the error handlers for the processor cores  of the main processor core description table  and the spare processor core description table  (e.g., see method  of ).","Referring now to , after the computing device  has performed the initialization and processor core allocation procedure of method , the computing device  may load the operating system  and execute one or more software applications . To do so, the computing device  may execute a method  for executing a software application on the computing device . The method  begins with block  in which the operating system  is loaded onto the computing device . In block , the computing device  determines whether to execute a software application . If so, the method  advances to block  in which the computing device  determines whether the software application  is to use the allocated processor cores  of the spare set . If not, the software application  is executed using the processor cores  from the main set  in block . However, if the software application  is to use the allocated processor cores  of the spare set , the method  advances to block  in which one or more processor cores of the spare set  is assigned to the software application . The computing device  may use any suitable methodology or algorithm (e.g., load balancing algorithms) to select the processor cores  of the spare set  to be assigned to the software application . Subsequently, in block , the software application is executed using the assigned processor cores  of the spare set . It should be appreciated that, in some embodiments, every software application  executed on the computing device  is assigned processor cores  from the spare set .","Referring now to , during execution of the software application , one or more hardware errors may occur. As such, the computing device  may execute a method  for managing hardware errors. The method  begins with block  in which the computing device  determines whether a hardware error has occurred. In some embodiments, a system management interrupt (SMI) is generated in response to the hardware error. If a hardware error has not occurred, the method  loops back to block  to continue monitoring for hardware errors. However, if a hardware error has occurred, the method  advances to block  in which the computing device  determines whether the hardware error is a processor core error. If the computing device  determines that the hardware error is not a processor core error (e.g., the hardware error may be memory error), the method  advances to block  in which the hardware error is handled as normal.","However, if the hardware error is determined to be a processor core error, the method  advances to block  in which the firmware  of the computing device  determines whether the processor core error is caused by a processor core  of the spare set . If so, processor core error is recoverable, and the method  advances to block  in which the firmware  notifies the software application  to restart, and the firmware returns control the operating system  in block . As discussed above, when the application  is restarted, one or more new processor cores  of the spare set  will be assigned to the application  (i.e., the application is unlikely to be executed on the same processor cores  of the spare set ). Additionally, as discussed above, if the processor core error is caused by a processor core  of the spare set , the system management interrupt (SMI) generated as a result of the processor core error is broadcast, only to those processor cores  of the spare set, and not to the processor cores  of the main set .","Referring back to block , if the firmware  determines that the processor core error is caused by a processor core  of the main set , the method  advances to block  in which the firmware  determines whether the processor core error is a recoverable error. If not, the method  advances to block  in which control is returned to the operating system  for additional error handling (if available). However, if the firmware  determines that the processor core error is a recoverable error in block , the method  advances to block  in which the firmware  updates an error tracking counter associated with the processor core  responsible for the processor core error. The error tracking counter may be embodied as any type of software counter or register for tracking the number of occurrences of processor core errors by the respective processor core . In block , the firmware  determines whether the error tracking counter for the associated processing core  has reached a reference threshold value (e.g., has the respective processor core  generated a number of processor core errors equal to or greater than the reference threshold value). If not, the method  advances to block  in which the firmware  returns control, the operating system  to allow the operating system  to reattempt execution of the last executed instruction or procedure.","However, if the error threshold of the respective processor core  has been reached, the method  advances to block  in which the firmware \/microcode  performs a processor core swap. That is, the failed or failing processor core  (i.e., the processor core  that caused the processor core error) is replaced with a processor core  from the spare set . To do so, the firmware  updates the main processor core description table  to add the replacement processor core  from the spare set  in block . Additionally, the firmware  updates the spare processor core description table  to remove the replacement processor core . The firmware  may use any suitable methodology or algorithm to select which processor core(s) of the spare set  to use as replacement core(s). For example, in one embodiment, the firmware  selects the processor core(s) of the spare set  to use as replacement core(s) based on the die location of the failed or failing processor core  of the main set .","The microcode  also updates the processor registers  by resetting the spare core flag  to denote that the replacement processor core  is no longer allocated to the spare set  in block . Additionally, the microcode  may set the failed core flag  of the failed\/failing processor core . Further, the firmware  and\/or microcode  attempt to migrate the state information and context of the failing processor core  (e.g., register settings, etc.) to the replacement processor core  in block . However, in some cases, the complete context of the failing processor core  may not be accessible. In block , the firmware  clears the error counter associated with the replacement processor core  and the method  loops back to block  to monitor for additional hardware errors.","While the disclosure has been illustrated and described in detail in the drawings and foregoing description, such an illustration and description is to be considered as exemplary and not restrictive in character, it being understood that only illustrative embodiments have been shown and described and that all changes and modifications consistent with the disclosure and recited claims are desired to be protected."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The invention described herein is illustrated by way of example and not by way of limitation in the accompanying figures. For simplicity and clarity of illustration, elements illustrated in the figures are not necessarily drawn to scale. For example, the dimensions of some elements may be exaggerated relative to other elements for clarity. Further, where considered appropriate, reference labels have been repeated among the figures to indicate corresponding or analogous elements.",{"@attributes":{"id":"p-0005","num":"0004"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0006","num":"0005"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0007","num":"0006"},"figref":["FIG. 3","FIG. 1"]},{"@attributes":{"id":"p-0008","num":"0007"},"figref":["FIG. 4","FIG. 1"]},{"@attributes":{"id":"p-0009","num":"0008"},"figref":["FIG. 5","FIG. 1"]}]},"DETDESC":[{},{}]}
