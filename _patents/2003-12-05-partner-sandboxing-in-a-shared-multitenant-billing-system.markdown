---
title: Partner sandboxing in a shared multi-tenant billing system
abstract: The present invention relates to a system and methodology for interacting with a Subscription Platform Service (SPS) and providing data security between entities that employ such service. The system includes a component that receives a request to access an object by an entity, and a data store that stores security information on classes of the objects. A verification component employs the security information to determine whether the entity has permission to call an Application Programming Interface (API) for the object and/or operate on the object, wherein the verification component exposes the object if permission exists or masks the object if permission does not exist.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07921299&OS=07921299&RS=07921299
owner: Microsoft Corporation
number: 07921299
owner_city: Redmond
owner_country: US
publication_date: 20031205
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION"],"p":["The present invention relates generally to computer systems, and more particularly to a system and method for protecting access to shared data structures in a centralized billing system via a globalized security feature associated with an object class.","Organizations that employ third-party service providers (application, network or otherwise) generally, should manage users and access rights across both their internal systems and the systems run by service providers. In some cases, provisioning systems can facilitate establishing new users' rights and privileges across multiple applications. Many provisioning systems include a workflow system, a logging and audit system, a database to support the workflow and auditing tasks, and personal agents that communicate with applications to add, delete, suspend or change users and privileges. Not all provisioning systems have equal spans of control and utility, however, wherein several problems currently exist.","At the core of many systems, custom-designed models and architectures have been developed to support existing businesses and\/or business practices (e.g., an electronic accounting system that can only manage accounts relating to the associated business it was designed for). These models can include inflexible rules that are configured to one particular business model or a limited subset of business activity. Thus, inflexible or hard-coded designs are not easily adaptable to newer and ever-changing technologies such as provided by the Internet and\/or other type electronic services. Consequently, if new services are to be added to existing businesses, or if new packages of services are desired, extensive systems, architectural improvements, and re-designs are generally required to support such services.","Another related problem involves the amount of development effort that is expended when new services become available and another entity that has not developed the service desires to sell the respective service or in some cases become aware of service availability. As an example, if a vendor of a music service were to add a subsequent service such as a retail merchandise service, it is very likely that the vendor would have to develop a custom and\/or new interface to support existing billing and\/or accounting practices that were previously in place for the original music service. As can be appreciated, if new interfaces, software, procedures and\/or business practices are required when new services are added and deployed or in many cases when new relationships are established, then development time and associated costs can become excessive.","As technology migrates from a desktop centric world to a services based business, an increasing portion of revenue will be derived from billing customers and businesses for services they consume. In an online subscription business, for example, many tenants associated with the business also may be competitors with each other. Thus, these tenants generally desire to keep information about their customers confidential with respect to other tenants that may also utilize the business. From the tenant's perspective, they do not want their competition to be able to gain access to sensitive customer information or worse, allow the competitor to modify or delete such information. Therefore, protections should be in place to mitigate the possibilities of confidential data being accessed by unauthorized parties.","The following presents a simplified summary of the invention in order to provide a basic understanding of some aspects of the invention. This summary is not an extensive overview of the invention. It is intended to neither identify key or critical elements of the invention nor delineate the scope of the invention. Its sole purpose is to present some concepts of the invention in a simplified form as a prelude to the more detailed description that is presented later.","The present invention relates to systems and methods that provide an architecture by which partners (e.g., tenants and service providers) employ an automated billing and provisioning system for creating\/servicing\/managing subscriptions while mitigating exposure of sensitive or confidential data between partners. In this manner, respective partners can utilize a full range of services offered by the billing and provisioning system in an autonomous manner by individual partners while such services can be concurrently accessed by a plurality of such partners. \u201cPartner Sanboxing\u201d provides a system and method for authorizing partners to facilitate that these entities receive full access to Application Programming Interfaces (API's) and\/or objects for which there is a business need and partial or no access to other API's or business objects. This granular grant of rights is supported in an easily configurable, data driven manner.","A shared billing system or subscription platform can easily consist of several million or billions of \u201cbusiness objects\u201d which in the case of a Subscription Platform Service (SPS) relates to customer accounts and subscriptions. In such cases, it is generally not efficient to maintain security information (e.g., via separate Access Control Lists or ACLs) along with each one of the various objects. Instead, a smart optimization process is provided for storing security information on one or more classes of objects that are employed by the service. Thus, each new object created automatically inherits default or determined security information related to its class. In some exceptions, it is possible to override the default security settings with higher or different security options with an explicit security grant for the object in question.","When a partner such as a tenant attempts to perform an operation on a business object, an automated check or determination can be performed to verify that the tenant in question is allowed to call an API attempting access to the business object. If the check or determination succeeds, another check or determination can be performed to facilitate that the tenant has suitable privileges to operate on the respective business object. If the tenant does not have suitable privileges, the object can be hidden from the tenant. In this manner, the tenant has the impression that it is the only partner on the entire system even though the system may support several partners concurrently.","The present invention also supports proxied tenant callers where an intermediate proxy can place calls into the SPS on behalf of another tenant but still gain access to the desired objects. Security principals for identifying partners can be platform neutral and stored in a backend databases for high performance access checks. Management of authorization information can also be achieved through a separate management portal, if desired.","The following description and the annexed drawings set forth in detail certain illustrative aspects of the invention. These aspects are indicative, however, of but a few of the various ways in which the principles of the invention may be employed and the present invention is intended to include all such aspects and their equivalents. Other advantages and novel features of the invention will become apparent from the following detailed description of the invention when considered in conjunction with the drawings.","The present invention relates to a system and methodology for interacting with a Subscription Platform Service (SPS) and providing data security between entities that employ such service. The Subscription Platform Service can be provided as a centralized platform supporting billing, provisioning, signup, data storage and\/or supportability needs of several partners, for example. Such a shared platform model has several advantages, wherein partner data privacy and integrity should also be provided to mitigate unauthorized reading or modifying data belonging to another partner's users. Partner sandboxing is a feature that allows several partners to maintain their data in a virtual, isolated environment (i.e., sandbox) even though the data may be physically present in a shared data store. In this manner, one partner cannot intentionally or accidentally read or modify the data of another partner's users. Also, this feature saves on the additional cost of having separate billing systems for each partner in order to maintain security between partners.","In online subscription businesses, for example, a business entity providing subscription services may have partners (e.g., content\/service providers), whereby the \u201cpartners\u201d are competitors of each other. Partner sandboxing controls partner access to subscriber information (i.e., \u201cobjects\u201d) in a shared multi-partner billing system. It is generally not efficient to maintain security information (e.g., Access Control Lists, or ACLs) along with each respective object. Instead, security information can be stored on classes of objects. When a partner attempts to perform an operation on a business object, an automated verification can be performed to verify permissions to call an associated Application Programming Interface (API) and\/or verify privileges to operate on the object. In one aspect of the present invention, a system is provided that facilitates access to a plurality of shared software objects by disparate entities. The system includes a component (e.g., SPS) that receives a request to access an object by an entity, and a data store that stores security information on classes of the objects. A verification component employs the security information to determine whether the entity has permission to call an API for the object and\/or operate on the object, wherein the verification component exposes the object if permission exists or masks the object if permission does not exist.","As used in this application, the terms \u201ccomponent,\u201d \u201cinterface,\u201d \u201cobject,\u201d \u201csystem,\u201d and the like are intended to refer to a computer-related entity, either hardware, a combination of hardware and software, software, or software in execution. For example, a component may be, but is not limited to being, a process running on a processor, a processor, an object, an executable, a thread of execution, a program, and\/or a computer. By way of illustration, both an application running on a server and the server can be a component. One or more components may reside within a process and\/or thread of execution and a component may be localized on one computer and\/or distributed between two or more computers. Also, these components can execute from various computer readable media having various data structures stored thereon. The components may communicate via local and\/or remote processes such as in accordance with a signal having one or more data packets (e.g., data from one component interacting with another component in a local system, distributed system, and\/or across a network such as the Internet with other systems via the signal).","Referring initially to , a data security system  and subscription platform service (SPS)  is illustrated in accordance with an aspect of the present invention. One or more partners  such as a tenant that sells services and\/or a service provider that provides such services utilize the SPS for automated billing and provisioning services. For example, these services can include automated creation, maintenance, and access to billing accounts that record transactions by customers who receive services from the partners . The accounts are stored in a data store  (or data stores) that includes one or more objects  relating to the accounts. In order to create and access services of the SPS  and objects , one or more Application Programming Interfaces (API's)  are directed to the SPS. It is noted that access can be based on security information stored on the class of object being accessed or other objects related to this object such as deriving implied security permissions by using related objects. For example, a tenant may not be able to observe certain details about customer account object that exists in the system unless that customer has a related subscription objected that is owned by that tenant.","In one aspect of the present invention, it is desirable for the partners  to be able to access the SPS  and objects  in a manner whereby it appears to the partner that they are the only entity employing such services even though other entities or partners utilize common aspects of the system. In other words, data stored from one entity or partner via the objects  should be shielded or protected from activities from another entity or partner . This type of protection can be modeled as a security perimeter surrounding the objects  to mitigate unauthorized access to a respective partner's object or objects. This type of modeled security for respective objects  can also be referred to as a \u201cPartner Sandbox.\u201d For example, if a first partner has access to an Object! and a second partner has access to Object, then neither partner should be allowed access the other partner's object that is protected by a security \u201csandbox\u201d without suitable authorization from one of the partners. One manner for achieving security for the objects  is to employ an Access Control List (ACL) for each object. However, since the SPS  and associated data store  can support a plurality of objects, then creation and maintenance of the lists for each object can become inefficient in terms of data storage requirements and associated processing of the lists.","To mitigate ACL processing and storage, the present invention employs a multi-tiered security model. At one level, a verification component  is associated with the SPS to determine and verify whether or not a respective partner  should be allowed access to the objects  via the API's . The verification component  can perform checks (e.g., security credential checking, authentication, authorization) on the partner issuing the API  to determine whether the partner should be allowed access to the objects , wherein detailed examples of verification are described below. At another level of security depicted at reference numeral , the objects  when created, can inherit (or supplied to object by a component) a default or determined level of security from one or more class components . By inheriting security properties as object members of a respective class, creation and management of individual ACL's is mitigated. Since there may be circumstances whereby the partner  may desire additional or other security options, one or more override security mechanisms  may be provided to augment default security properties of the class component .","It is noted that the following discussion relating to  describe particular example implementations of automated verification procedures and object security encapsulation techniques. However, it is to be appreciated that the present invention is not limited to the particular examples shown and thus, substantially any technique for providing multi-level security and\/or providing object inheritance of security parameters as members of a class in the context of an automated billing and provisioning system are considered to be within the scope of the present invention. Before proceeding, the following terms may be employed as part of the discussion that follows:\n\n","API Caller\u2014Software that invokes methods from an SPS API set. Web services are specific type of API Caller; others may include a tool that invokes an SPS SPK described below.\n\n","Referring now to , a system  illustrates example tenant interactions with a subscription platform service  in accordance with an aspect of the present invention. The system  illustrates one particular classification of callers in a tenant business. It is to be appreciated that other classifications are possible. Tenants can designate between one and three API Callers (or more) to perform basic functions of Signup at , Account Management at , and Customer Care at  for their business. As described above, an API Caller is a web service that calls SPS APIs, wherein it is noted that a single API Caller can be granted more than one of these roles for a Tenant. Also, Tenants can identify a Centralized Signup as their Signup API Caller, BAM as their Account Management API Caller, for example, and another entity as their Customer Care API Caller, if desired. This can also be the case for default purchase 3party offers. Wholesalers may desire to build their own Account Management and Customer Care API Callers. Associations between Tenants and their API Caller agents can be stored in a Tenant Agents Table (not shown). This table can be referenced when new objects are created in the system in order to apply suitable security measures.","Turning to , Application Programming Interface security aspects  are illustrated in accordance with an aspect of the present invention. A Subscription Platform Service can expose a number of application programmable interfaces (APIs)  known collectively as a Billing Development Kit or SPK. These APIs perform a variety of manipulations upon SPS business data. For example, a CreateAccount API creates a new user account in the system, and an AdjustLineItem API grants a financial adjustment to a historical line item. Authorization in accordance with the present invention restricts the ability to call APIs as a first line of defense against malicious or malfunctioning API Callers. As client SOAP commands arrive, the SPK application can authorize the requested action using a combination of NT identity (or other type) and API name. If the caller is not authorized to make such an API call, then the SPK can return an error.","Object Sandboxing described below provides suitable security even without API security. A malicious Tenant should be able to call any API freely without risk of damaging another Tenant's business. However, restricting the ability to call APIs has some advantages:\n\n","API Callers depicted above in , can be granted access to individual APIs in an API Authorization Table, but a Partner On-boarding utility simplifies this process by grouping APIs by function. When a new API Caller is modeled, it is granted access to the APIs in one or more of these API groups. The APIs in those groups are then added to the Caller API table for that API Caller. The following section describes the API Groups according to their function. An API Caller may be granted access to any or all of these groups or others that are not shown.","At , Signup API Groups contain APIs related to creating new Accounts in the system and selling Subscriptions. This group may include one or more of the following APIs:","ManageAccounts Group","This group contains APIs that locate and update existing accounts, and create new ones. Granting an API Caller the ManageAccounts Group will authorize it to call:\n\n","This group contains APIs that determine offerings and purchase them for a user. Granting an API Caller the SellSubscriptions Group will authorize it to call:\n\n","This group contains APIs that manage user access to services. Granting an API Caller the ManageRoles Group will authorize it to call:\n\n","This group contains APIs that convert one subscription to another and manage the conversion process. Granting an API Caller the Convert Group will authorize it to call:\n\n","This group contains APIs that determine and modify resource balances. Granting an API Caller the ManageResources Group will authorize it to call:\n\n","At , Account Management API Groups include APIs related to customer self-service. This group may include one or more of the following APIs:","ManageSubscriptions","This group contains APIs that view subscription sets, and manage subscription status. Granting an API Caller the ManageSubscriptions Group will authorize it to call:\n\n","This group includes APIs that manage outstanding balances. Granting an API Caller the ChangePayments Group will authorize it to call:\n\n","This group contains APIs that modify payment instruments on an Account. Granting an API Caller the ModifyPaymentInstruments Group will authorize it to call:\n\n","This group contains APIs that look up billing and provisioning history on an account. Granting an API Caller the LookupHistory Group will authorize it to call:\n\n","At , Customer Care API Groups include APIs related to customer self-service. This group may include one or more of the following APIs:","Comment","This group includes APIs that add to or view a CSR comments collection on an Account. Granting an API Caller the Comment Group will authorize it to call:\n\n","This group contains APIs that provide a user adjustments, offsets, or monetary credits. Granting an API Caller the CompensateUser Group will authorize it to call:\n\n","This group contains APIs that perform deep or costly search algorithms used in CSR scenarios. Granting an API Caller the MatchAccounts Group will authorize it to call:\n\n","This group contains APIs that modify or view status of an account, including violations. Granting an API Caller the ManageStatus Group will authorize it to call:\n\n","At , Object Designer API Groups contain APIs related to adding or modifying SPS business objects, including offers and new API Callers. This group may include one or more of the following APIs:","ManageObjects","This group includes APIs that modify or view SPS business objects, including Offers and API Callers. Granting an API Caller the ManageObjects Group will authorize it to call:\n\n",{"@attributes":{"id":"p-0056","num":"0150"},"figref":"FIG. 4"},"Before proceeding with a detailed discussion of , various API security enforcement aspects are described. Enforcement of API authorization can occur in the SPK as requests arrive and execute before control is handed from a (e.g., ASP.NET) process to the SPK caller methods. One purpose of enforcing API security at an early stage rater than in each API method is to mitigate errors by enforcing API security by default. Thus, developers do not have to perform extra work in order to provide security with new APIs. An SPK application can run as a Domain Guest user, SPSSPKAccount. This account should be granted access to underlying stored procedures in SPS. Incoming calls to the SPK generally will not be impersonated. Instead, HS can authenticate the caller without impersonation and the caller's requests can be fulfilled in the context of the SPSSPKAccount. The SPK can define a class derived from a SOAPExtension named AuthorizeSPK in a web.config file such as the following example:\n\n","An AuthorizeSPKAPI class can override SOAPExtension methods such as:\n\n",{"@attributes":{"id":"p-0059","num":"0164"},"figref":"FIG. 4","b":"400"},"At , a SOAP request arrives requesting a specific SPK API. At , an ASP.NET application (or other type) fires an AuthorizeSPKAPI.Initialize method. This event fires after an HTTP request arrives, but before processing is performed on the request. An Initialize method refreshes its local API Role data cache at  if it is absent or more than five minutes old (or other predetermined time). At , the ASP.NET application fires an AuthorizeSPKAPI.ProcessMessage method for AfterDeserialize. The ProcessMessage collects information about the call such as the caller's NT name from HTTPContext.User and the requested API from SOAPMessage.MethodName. At , ProcessMessage matches the information against its local cache of Authorization data. If there is no such NT name (or other type verification), then create an error of type SPK_BAD_CREDENTIALS and abort further processing at . At , if the NT name is listed in an Identity table, but the corresponding API Caller is not allowed to call the requested API, then create an error of type SPK_API_NOT_AUTHORIZED and abort further processing at . Otherwise, ProcessMessage exits with an implicitly successful authorization at .",{"@attributes":{"id":"p-0061","num":"0166"},"figref":"FIG. 5","b":["500","510","520","530","540","520","550","520","550"]},"In general, the Authorization model supports the following object-level rights in order to minimize security descriptor overhead:\n\n","Sandboxing security can be implemented at the SPS business object level, wherein objects requiring explicit protection can list a set of access rights granted to specific API Callers. As noted above, storing an ACL on every subscription in the system can be costly in terms of disk space, and impedes changing large numbers of ACLs swiftly. Moreover, Subscription ACLs are highly uniform in the common case, since most subscriptions are sold directly by a supplier company. As an optimization, SPS can define default Subscription ACLs, indexed by Offer. If a Subscription does not have an ACL stored locally, then the default Subscription ACL for that offer can be processed as the active ACL. This does not alter the security of Subscriptions, however. A difference is that the Subscription's explicit ACL is stored centrally or in a global manner and is thus referenced by more than one Subscription.",{"@attributes":{"id":"p-0064","num":"0171"},"figref":["FIG. 6","FIG. 5"],"b":["600","610","620","624","630","640","620","624","650","620","624","650","624","620"]},"Results from APIs related to Account details should be filtered based upon the implicit security on that account. These APIs (GetAccountInfo, GetAccountIDFromAdminPUID, and GetAccountEDFromPaymentInstrumentInfo) are designed to return billable information on an account, including some information that could be construed as private. However in order to support up-sell and cross-sell, all Tenants should have the ability to locate Accounts and see their basic status regardless of their prior relationship with the customer. The results from these APIs can depend upon the subscriptions on the target account. An API Caller that does not have the Access or","Support right on a dependent subscription should only see summary details on the account, regardless of whether the API Caller specifies the bFullData flag in the call.","In particular, information provided to an API caller without these rights will be limited to:\n\n",{"@attributes":{"id":"p-0068","num":"0178"},"figref":"FIG. 7","b":["700","710","720","720"],"ul":{"@attributes":{"id":"ul0046","list-style":"none"},"li":{"@attributes":{"id":"ul0046-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0047","list-style":"none"},"li":"Access: By Default, API Callers are granted the Access right on a new offer, provided that payment instrument restrictions are met. However, it is possible to override this default behavior."}}}},"When an Offer is purchased, a Subscription is created and related to an original offer. The resulting Subscription is visible to SPS Tenants, and visible by an Account Management team associated with the Tenant that purchased the Offer:\n\n",{"@attributes":{"id":"p-0070","num":"0183"},"figref":"FIG. 8","b":["800","810","820","810","830"]},"A Tenant Agents Table (not shown) allows multiple Tenants to name the same API Caller for one of their agent roles. For example, two 3-Party Tenants could name the same Signup API Caller server to perform their signup work. However, since those two Tenants may not use the same Account Management and Customer Care API Callers, it is desirable for CSF and other Proxy Signup API Callers to know the identity of the Tenant they are proxying and create Subscriptions with the appropriate ACLs. The PurchaseOffering and ConvertSubscription APIs can be overloaded to support a Purchase On Behalf of a named Tenant. When Signup API Callers purchase an Offer On Behalf of a Tenant, the derived Subscription can be processed as though it had been purchased by an agent of that Tenant. Signup API Callers may purchase an Offer On Behalf of a Tenant provided that:\n\n","A Purchase On Behalf schema overloads a bstrReferralSetXML that is a component of PurchaseOffering, but does not change the schema signature. The bstrReferralSetXML can be added to ConvertSubscription. The following is an example of a Purchase On Behalf request to purchase an MSN9 Offer for an example wireline tenant:\n\n",{"@attributes":{"id":"p-0073","num":"0199"},"figref":"FIG. 9","b":["900","910"],"ul":{"@attributes":{"id":"ul0056","list-style":"none"},"li":{"@attributes":{"id":"ul0056-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0057","list-style":"none"},"li":["Carry an immediate financial outlay. For example, cash rebate offers.","Involve a free term of service that is not offered to all customers of the service. For example, a six-months free offer if the user purchases through designated supplier.","Gratis offers given to VIPs. For example, an Executive Plan."]}}}},"Restricted Audience Offers have an explicit list of Tenants that may purchase the Offer:\n\n","Although the ability to purchase or convert to a Restricted Audience Offer is limited, the resulting Subscription has no more restrictions than a typical Subscription purchased by an exclusive Signup agent.","At , conversions are employed to transfer a user from one Offer bundle to another without requiring the user to cancel his or her existing subscription. When a conversion path between two subscriptions is defined, an API Caller with access to a ConvertSubscription API may request to convert subscriptions of the first type into subscriptions of the second type. This could conceivably lead to theft of business between wholesale providers, a practice known in the Telcom industry as \u201cslamming.\u201d SPS can protect against slamming with a restriction upon subscription conversion: API Callers may only convert a subscription if they EITHER have the right to Support the Payment Instrument type used by the original Subscription OR if the Subscription is in the Expired state.","At , Payment Instrument Security is considered. Offers can also be restricted by payment instrument type. There are generally three options to pay for a Subscription:\n\n","Referring now to , a system  illustrates a billing and provisioning processing architecture in a distributed computing environment in accordance with an aspect of the present invention. The system  provides an infrastructure to support various billing relationships between parties and entities. One or more processing engines  are provided that respond to external billing and provisioning events  and operate according to a plurality of rules  that are associated with a respective processing engine . The events  can include internally determined events (not shown) within the processing engines  and generally conform to a subscription event model. The model represents state transitions that a subscription may pass through in a subscription lifecycle (e.g., subscription for online services such as e-mail). An example of such events  can include: Subscription Pre-Purchase, Subscription Purchase, Subscription Sponsorship, Subscription Cancel, Subscription Disable, Subscription Enable, Subscription Convert Out Of, Subscription Convert Into, Subscription Renewal, Subscription Usage Event Report, Subscription To Expire, User Service Profile Change, Subscription Expiration, Service Allocation, Service De-allocation, Service Suspension, and Service Enable. It is to be appreciated that other such events can be defined in accordance with the present invention.","The rules  can include service delivery rules, qualification rules, rating rules, and\/or other type rules that facilitate billing and provisioning processing in accordance with the processing engines . Depending on the nature of the events , the processing engines  apply a set or subset of the rules  that are associated with the events. For example, service delivery rules define atomic units of service to be delivered that include data about the type of service, service level delivery, and\/or associated resource balance relating to performance and payment of a service. Qualification rules define eligibility requirements for purchase of a respective service. These rules can be created to restrict and\/or alter purchasing of services to a limited set of users, user languages, currencies, countries, tenants, service providers, existing services and\/or offerings owned, affiliation with a particular tenant, payment via a particular method, and so forth. Rating rules facilitate determining balance impacts to currency balances that result in charges and\/or include non-currencies that monitor consumption and allocation of services. These rules can be defined within the scope of an individual offering to be processed in the context of the subscription event model, described above. As will be described in more detail below, one or more data stores  are provided to support billing and provisioning within the system  and related subscription\/event processing by the processing engines .","A Subscription Platform Service (SPS)  is provided that includes one or more Subscription Platform Objects (SPO)  in order to establish and maintain billing, provisioning, and account relationships between one or more tenants , one or more service providers  and one or more customers . In general, the tenants  sell services that are performed by the service providers  to the customers , wherein the SPS  is employed to create and manage a respective billing account for such services. The tenant  offers a service or package of services (related or unrelated) to the customer  or consumer of the services. An offering can include an atomic unit of salable items associated with a service in the system . Offerings can contain collections of service delivery, qualification, and rating rules, plus multiple language and pricing descriptions for respective eligible languages, and include additional meta-data employed by the system . Subscriptions provide an instance of an offering that is associated with a respective end user or customer .","If a subscription for the service is desired, the tenant  retrieves credit card information or other type of billing arrangement from the customer , exchanges legal or contract information with the customer, and determines an amount to charge the customer on a regular or periodic basis for the service or services. The tenant  employs the SPS  to create a billing account, authorize the customer's credit card or other instrument with an associated financial institution, and notifies the service provider  to begin offering services to the customer . As services are performed by the service provider , the SPS  bills the customer's account. It is to be appreciated that other components illustrated in the system  can offer or sell services to the customer  in accordance with the present invention. For example, the service provider  can offer and sell services to the customer  without interacting with a respective tenant .","Other parties or entities that are involved with the SPS  include customer service components at  to provide on-going support and management of customer accounts. Payment providers at  (e.g., banks, financial institutions) facilitate payment of customer accounts, whereas financial, business, and product operations aspects are illustrated at . Financial and business operations can employ the SPS  for data manipulation and analysis, if desired, whereas product operations can utilize the SPS to determine and provide product catalog offerings such as with packaged services, for example.","In accordance with one aspect of the present invention, an Application Program Interface set (API) - is provided, wherein the respective entities - can interact with the SPS . The API set - generally performs as an interface to the SPS . It is through the API set - that tenants , service providers , customers , customer service representatives , payment providers  and\/or financial\/other operations  access one or more features of the subscription platform service . For example, the API set - can expose one or more of the following aspects such as Account Management, Product Catalog Search and Manipulation, Subscription Management, User Authorization, Usage events, Online Statements\/Self-Care, Customer Service Utilities, Business and Product Operations, Utilities, Events and Notifications, and\/or Provisioning Support.","An Extensible Markup Language (XML) schema can be provided that defines the platform objects  for provisioning, billing and\/or customer care. For example, the objects  can include Accounts, Payment Instruments, Offerings, Service Components, Subscriptions, Service Instances, Role Assignments, Permits, Resources, Billing Statement Period Information, Billing Statement Payment Information, Billing Statement Line Items, Comments, and\/or Settlement Information to name possible object functionality. The entities - can also interact with the SPS  and\/or between entities across a network  and via a protocol .","The protocol  can include a Simple Object Access Protocol (SOAP), although as can be appreciated other protocols can be selected. SOAP facilitates a program running in one type of operating system to communicate with a program in the same or another kind of an operating system by utilizing Hypertext Transfer Protocol (HTTP) and\/or XML as components for information exchange, as an example. An optional Partner Support Object (PSO)  can be provided with the entities - to facilitate communications between entities and the SPS . For example, the PSO  can provide a helper interface for establishing connections to the SPS  and\/or provide connection pooling of objects to facilitate performance. The PSO  generally exposes a single API such as a connect interface. After installing the PSO , the respective entity - can utilize the PSO for authentication, authorization, and\/or other communications, if desired.","Referring now to , a system  illustrates an event processing architecture in accordance with the present invention. The system  can be organized into a multi-tier architecture that directs runtime communications with external parties through a Subscription Platform Services (SPS) layer . The SPS  includes a Partner Permissions Manager (PPM)  that facilitates enforcement of per partner permissions at tier associated with a partner communicating with the system . The PPM  is employed to enforce a partner permissions model on a per transaction basis enabling respective partners with suitable permissions to modify individual subscription and service states. The partner permissions model describes rights associated with a registered partner (e.g., tenants and\/or service providers) that define their ability to modify individual subscription, account, and\/or service states within the system .","The SPS  coordinates processing by various engines  within the system  and generally controls writing and updating data into various data stores . A product catalog  is provided that can include a defined SQL Server database that stores the catalog of service component definitions, partner permissions, and\/or offering meta data. The product catalog  can also include rating, qualification, and\/or service delivery rules associated with individual offerings. Additional features supported by the product catalog  include service component registrations (e.g., component ID assignments, partner IDs, URLs, support information), cross-partner offerings including multi-service component offerings and cross partner bundles. The catalog  can include globalized offerings according to a plurality of countries, languages, associated currencies, customs and taxes in addition to providing groups of offerings that map substantially any combination of services.","Offering information can also be stored in the product catalog . This information can include base, upgrade, downgrade, renewal, add-on, and mutual exclusivity between services information. In addition, eligibility information relating to date of sale, partners, languages, countries, currencies, maximum ownership per accounts, and valid payment instruments can be provided. Other offering information relates to billing cycles (e.g., monthly, multi-month, 28 day, forward\/arrears cycle billing). This can also include information relating to renewals such as automatic or confirmed renewals and information relating to grace periods for settling accounts. Other catalog items can include event to rule mapping entries that define a subset of rules to be executed in the occurrence of an associated event.","A balance impact rating engine  processes an extensible set of rating rules and\/or ratings events\u2014from the product catalog  and a rated event store , respectively, in the context of a subscription and associated subscription events that can be stored in a subscription store . This engine  can process a plurality of balance impact events (e.g., events affecting payment and utilization of services) provided at the scale of multiple service providers, tenants, customers, and\/or other entities. The balance impact events can be stored and processed in a billing impact store at . A resource balances store  maintains an aggregate amount for respective accounts that result from processing of rating rules by the balance impact rating engine . Balances can be \u201ctyped\u201d to indicate a value for the units of service represented, and scoped to one or more service delivery rules. This can include processing currency and non-currency resources, and processing rating rules that respond to user driven events (UDE) such as purchase, cancellation, cycle, usage reports, convert to\/from, renewal, suspend and reactivate, for example. In addition, ratable events can be partitioned according to periods and provide immediate settlements and\/or settlement amounts aggregated per a selected payment instrument. It is noted that the engines  and\/or system  components can be implemented in substantially any object model framework (e.g., COM, DCOM, CORBA, .NET).","A qualification engine  evaluates the eligibility of an individual user to purchase, cancel, and\/or convert online service subscriptions. This engine  processes qualification rules (stored in the product catalog ) associated with a given offering, employing attributes of an end user profile and associated subscriptions, for example. A provisioning engine  coordinates transactional processing of defined provisioning methods across common service providers in response to suitable events as provided in the subscription event model, described above. This engine  facilitates accurate and timely delivery of services to an end user. Provisioning methods include the act of setting the state (e.g., setting a flag or condition based on non-payment of bills) required to deliver or prevent delivery of a specified service to a designated user of the service or services. The provisioning engine  also controls the flow of communications to service providers , tenants , or other entity (not shown) that employ one or more APIs ,  to respond to provisioning events.","A Partner Configuration Tool (PCT)  and a Partner Configuration Loader  can communicate to the product catalog  through an out-of-band process, if desired. Communications should be in accordance with an administrator having suitable security credentials for configuring and\/or loading product catalog data. The PCT  can be implemented as a graphical user interface (GUI) tool to configure service delivery rules, offerings, qualification rules, and\/or per tenant permissions in addition to other parameters. The Partner Configuration Loader  loads one or more Partner Configuration Files (PCF)  into multiple system environments facilitating shared development\/testing\u2014across partner's testing and deployment, into multiple production and pre-production environments. The Partner Configuration Loader  also facilitates creation of a partner account within the system  to provide a substantially secure transmission of protected data to a respective partner. A protecting key can be transmitted out of band, for example, in order to mitigate attempts at hacking the system . The PCF  can be a transient schema file that includes definitions of offerings and associated qualification, rating, service delivery rules and\/or partner permissions in an XML format, if desired. This format can include design time attributes employed by the PCT  and\/or runtime attributes employed by the various engines  in the system .","It is to be appreciated that the systems, components, and\/or processes described thus far and described below can be implemented as individual components or processes and\/or can be combined in various combinations. In addition, one or more of the described components and\/or processes can be combined in accordance with various other components and\/or processes\u2014including providing all components and\/or processes in a single component, or combinations of components, if desired.","In order to provide a context for the various aspects of the invention,  and the following discussion are intended to provide a brief, general description of a suitable computing environment in which the various aspects of the present invention may be implemented. While the invention has been described above in the general context of computer-executable instructions of a computer program that runs on a computer and\/or computers, those skilled in the art will recognize that the invention also may be implemented in combination with other program modules. Generally, program modules include routines, programs, components, data structures, etc. that perform particular tasks and\/or implement particular abstract data types. Moreover, those skilled in the art will appreciate that the inventive methods may be practiced with other computer system configurations, including single-processor or multiprocessor computer systems, minicomputers, mainframe computers, as well as personal computers, hand-held computing devices, microprocessor-based or programmable consumer electronics, and the like. The illustrated aspects of the invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. However, some, if not all aspects of the invention can be practiced on stand-alone computers. In a distributed computing environment, program modules may be located in both local and remote memory storage devices.","With reference to , an exemplary environment  for implementing various aspects of the invention includes a computer . The computer  includes a processing unit , a system memory , and a system bus . The system bus  couples system components including, but not limited to, the system memory  to the processing unit . The processing unit  can be any of various available processors. Dual microprocessors and other multiprocessor architectures also can be employed as the processing unit .","The system bus  can be any of several types of bus structure(s) including the memory bus or memory controller, a peripheral bus or external bus, and\/or a local bus using any variety of available bus architectures including, but not limited to, 16-bit bus, Industrial Standard Architecture (ISA), Micro-Channel Architecture (MSA), Extended ISA (EISA), Intelligent Drive Electronics (IDE), VESA Local Bus (VLB), Peripheral Component Interconnect (PCI), Universal Serial Bus (USB), Advanced Graphics Port (AGP), Personal Computer Memory Card International Association bus (PCMCIA), and Small Computer Systems Interface (SCSI).","The system memory  includes volatile memory  and nonvolatile memory . The basic input\/output system (BIOS), containing the basic routines to transfer information between elements within the computer , such as during start-up, is stored in nonvolatile memory . By way of illustration, and not limitation, nonvolatile memory  can include read only memory (ROM), programmable ROM (PROM), electrically programmable ROM (EPROM), electrically erasable ROM (EEPROM), or flash memory. Volatile memory  includes random access memory (RAM), which acts as external cache memory. By way of illustration and not limitation, RAM is available in many forms such as synchronous RAM (SRAM), dynamic RAM (DRAM), synchronous DRAM (SDRAM), double data rate SDRAM (DDR SDRAM), enhanced SDRAM (ESDRAM), Synchlink DRAM (SLDRAM), and direct Rambus RAM (DRRAM).","Computer  also includes removable\/non-removable, volatile\/non-volatile computer storage media.  illustrates, for example a disk storage . Disk storage  includes, but is not limited to, devices like a magnetic disk drive, floppy disk drive, tape drive, Jaz drive, Zip drive, LS-100 drive, flash memory card, or memory stick. In addition, disk storage  can include storage media separately or in combination with other storage media including, but not limited to, an optical disk drive such as a compact disk ROM device (CD-ROM), CD recordable drive (CD-R Drive), CD rewritable drive (CD-RW Drive) or a digital versatile disk ROM drive (DVD-ROM). To facilitate connection of the disk storage devices  to the system bus , a removable or non-removable interface is typically used such as interface .","It is to be appreciated that  describes software that acts as an intermediary between users and the basic computer resources described in suitable operating environment . Such software includes an operating system . Operating system , which can be stored on disk storage , acts to control and allocate resources of the computer system . System applications  take advantage of the management of resources by operating system  through program modules  and program data  stored either in system memory  or on disk storage . It is to be appreciated that the present invention can be implemented with various operating systems or combinations of operating systems.","A user enters commands or information into the computer  through input device(s) . Input devices  include, but are not limited to, a pointing device such as a mouse, trackball, stylus, touch pad, keyboard, microphone, joystick, game pad, satellite dish, scanner, TV tuner card, digital camera, digital video camera, web camera, and the like. These and other input devices connect to the processing unit  through the system bus  via interface port(s) . Interface port(s)  include, for example, a serial port, a parallel port, a game port, and a universal serial bus (USB). Output device(s)  use some of the same type of ports as input device(s) . Thus, for example, a USB port may be used to provide input to computer , and to output information from computer  to an output device . Output adapter  is provided to illustrate that there are some output devices  like monitors, speakers, and printers, among other output devices , that require special adapters. The output adapters  include, by way of illustration and not limitation, video and sound cards that provide a means of connection between the output device  and the system bus . It should be noted that other devices and\/or systems of devices provide both input and output capabilities such as remote computer(s) .","Computer  can operate in a networked environment using logical connections to one or more remote computers, such as remote computer(s) . The remote computer(s)  can be a personal computer, a server, a router, a network PC, a workstation, a microprocessor based appliance, a peer device or other common network node and the like, and typically includes many or all of the elements described relative to computer . For purposes of brevity, only a memory storage device  is illustrated with remote computer(s) . Remote computer(s)  is logically connected to computer  through a network interface  and then physically connected via communication connection . Network interface  encompasses communication networks such as local-area networks (LAN) and wide-area networks (WAN). LAN technologies include Fiber Distributed Data Interface (FDDI), Copper Distributed Data Interface (CDDI), Ethernet\/IEEE 1102.3, Token Ring\/IEEE 1102.5 and the like. WAN technologies include, but are not limited to, point-to-point links, circuit switching networks like Integrated Services Digital Networks (ISDN) and variations thereon, packet switching networks, and Digital Subscriber Lines (DSL).","Communication connection(s)  refers to the hardware\/software employed to connect the network interface  to the bus . While communication connection  is shown for illustrative clarity inside computer , it can also be external to computer . The hardware\/software necessary for connection to the network interface  includes, for exemplary purposes only, internal and external technologies such as, modems including regular telephone grade modems, cable modems and DSL modems, ISDN adapters, and Ethernet cards.",{"@attributes":{"id":"p-0102","num":"0235"},"figref":"FIG. 13","b":["1400","1400","1410","1410","1400","1430","1430","1430","1410","1430","1400","1450","1410","1430","1410","1460","1410","1430","1440","1430"]},"What has been described above are preferred aspects of the present invention. It is, of course, not possible to describe every conceivable combination of components or methodologies for purposes of describing the present invention, but one of ordinary skill in the art will recognize that many further combinations and permutations of the present invention are possible. Accordingly, the present invention is intended to embrace all such alterations, modifications and variations that fall within the spirit and scope of the appended claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 13"}]},"DETDESC":[{},{}]}
