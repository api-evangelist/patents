---
title: Error response test system and method using test mask variable
abstract: An error response test system and method with increased functionality and improved performance is provided. The error response test system provides the ability to inject errors into the application under test to test the error response of the application under test in an automated and efficient manner. The error response system injects errors into the application through a test mask variable. The test mask variable is added to the application under test. During normal operation, the test mask variable is set to allow the application under test to operate normally. During testing, the error response test system can change the test mask variable to introduce an error into the application under test. The error response system can then monitor the application under test to determine whether the application has the correct response to the error.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07089456&OS=07089456&RS=07089456
owner: Honeywell International, Inc
number: 07089456
owner_city: Morristown
owner_country: US
publication_date: 20020603
---

{"@attributes":{"id":"description"},"GOVINT":[{},{}],"heading":["STATEMENT OF GOVERNMENT INTEREST","BACKGROUND OF THE INVENTION","DISCLOSURE OF INVENTION","BEST MODE FOR CARRYING OUT THE INVENTION"],"p":["The U.S. Government has a paid-up license in this invention and the right in limited circumstances to require the patent owner to license to others on reasonable terms as provided for by the terms of Contract No. NAS15-10000 awarded by the National Aeronautics and Space Administration (NASA), Boeing Subcontract No. 940S9001.","1. Technical Field","This invention generally relates to computer systems, and more specifically relates to testing of computer systems.","2. Background Art","Modern life is becoming more dependent upon computers. Computers have evolved into extremely sophisticated devices, and may be found in many different applications. These applications involve everything from application specific computers found in everyday devices such as automobiles, phones and other electronics, to the general purpose computers found in the form of PDAs, personal computers, servers and mainframes.","As computers become more integrated into daily life, their reliability becomes a greater and greater necessity. In order to ensure sufficient reliability it is necessary to thoroughly test computer systems. Thorough testing involves testing both the hardware and software of the computing system to ensure that the system operates properly in a wide range of situations.","One of the more difficult areas in computer system performance to test is the computer system's response to errors in operation. For example, it has been especially difficult to test built-in test routines for response to errors in those routines. The major difficulty in testing a computer's response to errors is in steps that need to be taken to inject the errors into the system. Typically, this has been accomplished with intrusive methods.","For example, a debugger or emulator is used to set breakpoints into the software at which the errors are injected by operator command. These methods are tedious, time consuming and not easily automated. Another method is to instrument the code to cause the error. This involves the creation of a special version of the software that is hard coded to cause the error. This approach raises several issues. The first being that multiple versions of the software must be maintained. The second issue is that the software being tested is no longer the actual operational software, and the actual operational software may in fact respond differently then the test software.","Additionally, it can be especially difficult to inject errors that represent hardware failures. Thus, it can be extremely difficult to evaluate software's response to hardware errors.","For these reasons, the computer system's response to errors may not be tested fully. Instead, only a few manual tests may be performed, and they may not be repeated as the application is modified in the future. Or in some cases, the failure conditions may not be tested at all.","Thus, what is needed is an improved testing system and method that provides for more complete testing of a computer system's response to errors.","The present invention provides an error response test system and method with increased functionality and improved performance. The error response test system provides the ability to inject errors into the application under test to test the error response of the application under test in an automated and efficient manner.","The error response system injects errors into the application through a test mask variable. The test mask variable is permanently added to the application under test. During normal operation, the test mask variable is set to allow the application under test to operate normally. During testing, the error response test system can change the test mask variable to introduce an error into the application under test. The error response system can then monitor the application under test to determine whether the application has the correct response to the error.","The error response system is particularly applicable to the testing of the software application's response to built-in test routines. In this application, the test mask variable is permanently added to a location in the application software where it can affect the result of the built-in test routine. During normal operation, the test mask variable is set to allow the built-in test routine to function normally. During testing, the error response system can change the test mask variable to a value that interferes with the results of the built-in test routine, causing it to fail. Thus, the software application can be run through the built in test routine, and the application monitored for its response to an error in the built-in test routine.","The error response system thus provides increased testing flexibility and functionality, allowing computer systems to be fully tested to improve the reliability of the computer system.","The foregoing and other objects, features and advantages of the invention will be apparent from the following more particular description of a preferred embodiment of the invention, as illustrated in the accompanying drawings.","The present invention provides an error response test system and method with increased functionality and improved performance. The error response test system provides the ability to inject errors into the application under test to test the error response of the application under test in an automated and efficient manner.","The error response system injects errors into the application through a test mask variable. The test mask variable is permanently added to the application under test. This has a negligible performance impact on the application, particularly for built-in test routines. During normal operation, the test mask variable is set to allow the application under test to operate normally. During testing, the error response test system can change the test mask variable to introduce an error into the application under test. The error response system can then monitor the application under test to determine whether the application has the correct response to the error.","The error response test system is particularly applicable to the testing of the software application's response to built-in test routines. Built-in test routines are software algorithms, which are part of the software application, whose purpose is to verify the correct operation of a hardware component. They are typically executed upon specific request by a user or they can be run in a background mode, during processor idle times. The test mask variable is permanently added to a location in the application software where it can affect the result of the built-in test routine. During normal operation, the test mask variable is set to allow the built-in test routine to function normally. During testing, the error response system can change the test mask variable to a value that interferes with the results of the built-in test routine, causing it to fail. Thus, the software application can be run through the built in test routine, and the application monitored for its response to an error in the built-in test routine.","Turning now to , an exemplary computer system  is illustrated. Computer system  illustrates the general features of a computer system that can be used to implement the invention. Of course, these features are merely exemplary, and it should be understood that the invention can be implemented using different types of hardware that can include more or different features. The exemplary computer system  includes a processor , a storage interface , a terminal interface , a network interface , a storage device , a bus  and a memory . In accordance with the preferred embodiments of the invention, the memory system  includes an application under test and an error response test program.","The processor  performs the computation and control functions of the system . The processor  may comprise any type of processor, include single integrated circuits such as a microprocessor, or may comprise any suitable number of integrated circuit devices and\/or circuit boards working in cooperation to accomplish the functions of a processing unit. In addition, processor  may comprise multiple processors implemented on separate computer systems, such as a system where a first processor resides on a target computer system designed to closely resemble the final hardware system and a second processor resides on a test computer system coupled to the target hardware system for testing. During operation, the processor  executes the programs contained within memory  and as, controls the general operation of the computer system .","Memory  can be any type of suitable memory. This would include the various types of dynamic random access memory (DRAM) such as SDRAM, the various types of static RAM (SRAM), and the various types of non-volatile memory (PROM, EPROM, and flash). It should be understood that memory  may be a single type of memory component, or it may be composed of many different types of memory components. In addition, the memory  and the processor  may be distributed across several different computers that collectively comprise system . For example, a portion of memory  may reside on the target hardware system and another portion may reside on the test system.","The bus  serves to transmit programs, data, status and other information or signals between the various components of system . The bus  can be any suitable physical or logical means of connecting computer systems and components. This includes, but is not limited to, direct hard-wired connections, fiber optics, infrared and wireless bus technologies.","The terminal interface  allows users to communicate with system , and can be implemented using any suitable method and apparatus. The network interface  allows the computer system  to communicate with other systems, and can be implemented using any suitable method and apparatus. The storage interface  represents any method of interfacing a storage apparatus to a computer system. Storage device  can be any suitable type of storage apparatus, including direct access storage devices such as hard disk drives, floppy disk drives and optical disk drives. As shown in , storage device  can comprise a CD type device that uses optical discs  to store data.","In accordance with the preferred embodiments of the invention, the memory system  includes an application under test and an error response test program. During operation, the application under test and the error response test program are stored in memory  and executed by processor . The error response system injects errors into the application through a test mask variable. The test mask variable is permanently added to a location in the application software where it can affect the result of the built-in test routine. During normal operation, the test mask variable is set to allow the built-in test routine to function normally. During testing, the error response system can change the test mask variable to a value that interferes with the results of the built-in test routine, causing it to fail. Thus, the software application can be run through the built in test routine, and the application monitored for its response to an error in the built-in test routine.","It should again be noted that the preferred implementation of the computer system would typically have the application under test residing on a target computer system that models the production computer system. This provides the most effective test bed for the application under test. The error response test program would typically be located on a separate computer system coupled to the target computer system to allow the error response test program to control and\/or monitor the test. Furthermore, in many common applications the target computer system would comprise an embedded system designed as a combination of hardware and software that are integrated together as part of a larger overall system.","The preferred implementation is one in which the test mask variable is stored in a location that can be read and written by the error response test program and is also visible to the application under test. This can be provided by systems that support the real-time reloading of its software or allow special access to internal memory for diagnostic purposes. The test mask variable is inserted into the operation of the application in a location that affects the performance of the application. In one application, the test mask variable is ANDed to a program value, to change the program value during testing but leaves the program value unchanged during normal operation. This changing of the program value is sufficient to interfere with the built-in test routine, causing it to fail.","It should be understood that while the present invention is described in the context of a fully functioning computer system, those skilled in the art will recognize that the mechanisms of the present invention are capable of being distributed as a program product in a variety of forms, and that the present invention applies equally regardless of the particular type of signal bearing media used to carry out the distribution. Examples of signal bearing media include: recordable media such as floppy disks, hard drives, memory cards and optical disks (e.g., disk ), and transmission media such as digital and analog communication links, including wireless communication links.","Turning now to , the error response test program and application under test are illustrated schematically to illustrate the interactions between elements. The application includes a built in test routine designed to test the hardware on which the application resides. The error response test program controls testing of the application. In this example, the error response test program will be used to test the application's response to an error in the built in test routine. Of course, the error response test program can be configured to test other features of the application program.","In accordance with the preferred embodiments of the present invention, a test mask variable is located in a shared memory location that can be accessed by both the application and the error response test system. The code of the application is configured to reference the test mask variable during a portion of the execution in a way that can affect the performance of the built in test routine. During normal operation, the test mask variable is set to a value that does not affect the performance of the built-in test routine.","To facilitate testing, the error response test program includes a test mask writer and a test monitor. The test mask writer is used to change the test mask variable to a value that affects the performance of the built in test routine. In particular, the test mask writer is used to change the test mask variable in way that induces an error in the built in test routine that will be recognized by the application program. The test monitor is used to monitor the application's response to the error in the built in test routine.","During testing, the test mask writer changes the test mask variable to a value that will introduce an error into the built in test routine. The error response test program then forces the application to run through the built in test routine while the test monitor monitors the performance of the application. The changed value of the test mask variable causes an error in the built in test routine, the test monitor observes the response of the application. Thus, the error response test program facilitates complete testing of the application's response to errors in the built in test routine.","Turning now to , a method  of testing an application is illustrated. The test method  injects an error into the application and then runs the application while monitoring the response to the introduced errors.","The first step  of method  is to load the application under test into memory. As stated above, one such embodiment is the testing of an application's response to errors in a built-in test program. The loaded application contains the reference to the test mask variable in the built-in test routine. The code sequence that references the test mask variable can be any sequence of instructions that has a pass\/fail impact on the built-in test.","The next step  is to change the test mask variable to introduce an error into the application program. The test mask variable can be changed in any way that introduces the type of error that is to be tested. In the built in test routine example, a one bit change in the test mask variable can introduce an error that the built in test routine does not expect, and thus treats as an error in the hardware.","The next step  is to test run the application through a code sequence that references the modified test mask variable. This can be accomplished using any suitable code testing technique, such as the many common techniques used to test software. The application is forced to run through the code sequence, and the changed test mask variable introduces an error into the operation of the code sequence.","The next step  is to monitor the application's response to the error created. This allows the test error response system to determine if the application responded properly to the error introduced by the modified test mask variable. If the response is correct, the application is known to be robust to this type of failure.","The next step  is to restore the test mask variable to a value that does not introduce an error into the system. This can comprise restoring the test mask variable to the original value, or to any other value that does not introduce the tested error. Thus, the application's operation can be returned to the original procedure. This allows the program to again function normally, and allows further testing to proceed. This further testing can then include additional testing by changing additional test mask variables and testing of application response to the errors introduced. In one embodiment, the test mask variable can be restored by the error response test system. In another, it can be restored by the application.","Turning now to , an exemplary unmodified test mask variable is illustrated, and an exemplary modified test mask variable is illustrated. While  illustrates one type of test mask variable, and one type of modification, those skilled in the art will recognize that other variable structures and modifications can be employed. The unmodified test mask variable illustrated in  includes the string FF FF FF FF in hexadecimal. This corresponds to a 32 bit string of ones. Having the unmodified test mask variable comprise a string of ones allows it to be insertable into the application using an AND operation to a program value that in some way affects the program to be tested. Thus, during normal operation of the application, the string of ones ANDed to the program value does not change the value, and the program operates normally.","The exemplary test mask variable has been changed to FF FF EF FF in hexadecimal. Thus, one of the 32 bits has been changed from one to zero. Thus, when the modified test mask variable is ANDed to the program value, the program value is changed. This change in the program value introduces the error into the application program, and thus the application program's response to the error can be tested.","Turning now to , a sample a built-in test procedure is illustrated. In this sample procedure, a memory test is performed by the built-in test. In accordance with an embodiment of the invention, the built-in test procedure includes an ANDing reference to a TEST MASK VARIABLE. Under regular operating conditions, the test mask variable is set to FF FF FF FFh. This causes the built-in test procedure to operate normally. During testing, the error response test system can change the test mask variable to another value and affect the outcome of the test.","As an example, assume that a test pattern AA AA AA AAh is used. During normal testing, the built-in test routine writes that test pattern to a test address. ANDing the test pattern to the TEST MASK VARIABLE does not alter the test pattern. Thus, the built-in test procedure will return a pass indicator (assuming no actual error occurs), operating normally.","During testing of the built-in test procedure, the TEST MASK VARIABLE is altered to another value that will introduce an error. For example, the test driver could set the TEST MASK VARIABLE equal to FF FF FF 00 h. Now, when the built-in test procedure is run, the ANDing of the test pattern to the TEST MASK VARIABLE changes the test pattern to AA AA AA 00 h. Thus, the data read will not equal the data written, and the procedure will return a failed indication. The error response test system can monitor the system's response to the fail indicator, and determine if the response is correct. When the test is complete, the TEST MASK VARIABLE is returned to its original state, and the built-in test routine again operates normally.","As described above, the error response test system is particularly applicable to the testing of the software application's response to built-in test routines. The error response test system and the test mask variable can be used to test the application's response to other types of errors. For example, the error response test system is also applicable to the testing of the application's response to a failure in a polling loop. For example, a data polling technique is often used to detect completion of EPROM programming. Data polling is typically implemented with a polling loop that exits when either programming is complete or when some maximum time has elapsed. By ANDing the test mask variable with the EPROM programming status the polling loop can be forced to exit due to a polling timeout in order to evaluate the application's response to EPROM programming failure.","As another example, the error response test system is also applicable to the testing of the application's response to a checksum failure. Checksums are sometimes used to validate data integrity across data transfers. Another embodiment can compute the checksum of the data in real time and compare it with the expected checksum to check for miscompares. By ANDing the actual or expected checksum with a test mask variable, the application's response to a checksum miscompare error can be evaluated.","Of course, these are merely some examples of the many possible uses of the error response test system and the test mask variable.","The present invention thus provides an error response test system and method with increased functionality and improved performance. The error response test system provides the ability to inject errors into the application under test to test the error response of the application under test in an automated and efficient manner. Because the mask variable reference can be permanently added to the application, it allows testing of the application to be performed without requiring a special test version of the application be instrumented. Additionally, it does not require the use of a special debugger or in-circuit emulator, and can instead be implemented entirely in software. Finally, the present invention can be implemented in a self-checking, automated and repeatable manner. This allows testing to be easily included as part of regularly executed test suites, and ensures that tests can be performed in real time.","The embodiments and examples set forth herein were presented in order to best explain the present invention and its particular application and to thereby enable those skilled in the art to make and use the invention. However, those skilled in the art will recognize that the foregoing description and examples have been presented for the purposes of illustration and example only. The description as set forth is not intended to be exhaustive or to limit the invention to the precise form disclosed. Many modifications and variations are possible in light of the above teaching without departing from the spirit of the forthcoming claims."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF DRAWINGS","p":["The preferred exemplary embodiment of the present invention will hereinafter be described in conjunction with the appended drawings, where like designations denote like elements, and:",{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 5"}]},"DETDESC":[{},{}]}
