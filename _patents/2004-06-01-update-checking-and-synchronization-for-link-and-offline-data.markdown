---
title: Update checking and synchronization for link and offline data
abstract: A computer system includes an object oriented framework that provides a set of application integration interfaces that support programmatic updating operations for maintaining locally stored copies of resources such as hypertext document pages from remote servers on a computer network. The updating operations continually check for updates to the data at the remote server and download updated versions of the resources to maintain concurrency of the locally stored copy. The updating operations are performed while a connection to the remote network is left idle, to maximize usage of on-line connection time. The updating operations also can be programmatically scheduled by a client program of the updating operations. The updating operations include updating the contents of a folder or directory in a local file system as specified in a file at a remote server on the network, and providing automatically updating and populating groups of sites or document pages organized by category.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08065673&OS=08065673&RS=08065673
owner: Microsoft Corporation
number: 08065673
owner_city: Redmond
owner_country: US
publication_date: 20040601
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["RELATED APPLICATION DATA","FIELD OF THE INVENTION","BACKGROUND AND SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE ILLUSTRATED EMBODIMENTS"],"p":["This application is a continuation of U.S. patent application Ser. No. 08\/761,657, filed Dec. 6, 1996, now U.S. Pat. No. 6,745,224, issued Jun. 1, 2004, the disclosure of which is hereby incorporated by reference.","This invention relates generally to an object-oriented software framework that provides services to support periodically recurring operations, including change monitoring and updating of locally stored copies of remote documents so as to be available for off line use.","In many software applications, it is necessary or desirable to perform operations on a periodically recurring basis. Further, it is desirable to perform such operations without requiring continuing user action to activate the operations, or in other words while unattended by the user. An example is a hard disk utility application such as a disk checker, defragmenter or virus scanner. These utility applications are desirably executed automatically on a periodically recurring basis (e.g., daily, weekly or just once per month) to prevent degradation of disk performance over time as a result of normal usage. Further, the user desirably is not forced to track when these operations are done, or to manually initiate the operations.","Typically, applications that perform operations on a periodically recurring basis have each implemented their own mechanisms to schedule the recurring operations, initiate the operations on the scheduled basis, and monitor the results. In an electronic mail application for example, mail software at a client computer on a network may include code to periodically check for new messages at a mail server on the network. If there are new messages, the client mail software transfers the mail messages to the client computer from the network's mail server and may also display a notice to the user that a new message has arrived.","This typical practice of each application separately implementing mechanisms to support periodically recurring operations has several drawbacks. In order for the application to perform the periodically recurring operations while unattended by a user, the application must remain loaded and running on the computer. Because the application often does no useful work while waiting to perform its next periodically recurring operation, leaving the application running is wasteful of the computer's memory and processing capacities which could otherwise be used by other applications. If too many such applications are left running, the user may be unable to run applications for the user's immediate work activities, such as a spreadsheet, word processor or browser.","Another drawback is that this typical approach makes programming of periodically recurring operations more difficult. The mechanism that supports scheduling, initiating and monitoring of the periodically recurring operation is separately implemented in each application, often from scratch.","A software utility called the \u201csystem agent\u201d in the Microsoft\u00ae Windows\u00ae 95 operating system operates as a general mechanism to trigger applications (e.g., a disk checker or defragmenter utility) according to a preset schedule of times. The system agent provides user interface dialogs in which the user selects a schedule of times (e.g., daily at 2 am, Tuesdays and Fridays at 4:30 pm, 9 pm on the third day of every month, etc.) at which to run a desired program (the \u201cscheduled program\u201d). When its user interface is closed, the system agent runs as a background task. When the scheduled program's next scheduled time arrives, the system agent loads and runs the scheduled program (using the CreateProcess API of Microsoft's Win32 API set). The scheduled program thus can perform a periodically recurring operation when it is run by the system agent at each of its scheduled times. When the operation is complete, the scheduled program must self terminate. Programs that implement a recurring operation thus are not left running between the scheduled times, which frees the computer's memory and processing capacity for use by other applications.","The Windows\u00ae 95 system agent utility has several drawbacks which limit its use by applications to provide periodically recurring operations. One drawback is that there are limited ways in which an application program can interact with the system agent utility. In general, each scheduled program is scheduled with the system agent by user input to the user interface of the system agent. Alternatively, the system agent stores information on the times of scheduled programs in a system registry. (The system registry is a database file which stores configuration information for the operating system.) An application program therefore can schedule a program that implements a desired recurring operation with the system agent by adding entries containing appropriate scheduling information into the system registry. Further, once the system agent starts the program at the scheduled time (using the CreateProcess API), the system agent does not further interact with the program. Also, if the scheduled program is scheduled by an application adding entries to the system registry, the system agent provides no way for that application to further interact with the scheduled program at the scheduled times. Thus, an application program is not able to programmatically schedule an operation with the system agent utility, programmatically control the performance of the operation at its scheduled times, or receive notifications to monitor the operation.","The present invention includes an object-oriented framework that provides a set of object integration interfaces which support programmatic scheduling, configuring, and notifications of periodically recurring operations. In other words, the framework acts as a system service or application programming interface to access services for an application program to schedule, configure, and subscribe to notifications from an agent program that implements a desired periodically recurring operation, and especially operations for change monitoring and updating of data.","The object-oriented framework in an illustrated embodiment of the invention includes a scheduler object that provides a set of integration interfaces with which a client application can programmatically schedule on a periodic basis initiating operations by an agent object in which the operations are implemented. A core object in the framework provides additional interfaces with which any client application can subscribe to receive notifications from the agent relating to the operation. The framework further defines interfaces for agent objects and for a call back object of the client application. The interfaces on the agent objects allow the client application to programmatically set options controlling the operation that the agent performs. The interfaces on the client application's call back object allow the client application to receive notifications from the agent as the operation is performed. The interfaces on the agent objects and client application call back objects also allow the framework to persistently store a state of the agent objects and client application call back objects so that the client application and agent objects can be terminated and unloaded from memory until the time for the operation arrives.","The object oriented framework of the invention overcomes many of the drawbacks of prior art mechanisms for performing periodically recurring operations. The framework allows a client application to programmatically control scheduling of the operation, and set options controlling the operation itself. The framework also allows client applications, including applications other than the client application which schedules a periodically recurring operation, to receive notifications and alerts pertaining to the operation. Additionally, the framework allows agent software in which the operation is implemented and the client application which schedules the operation to be terminated between times that the operation is performed, so as to free memory and processing capacity for use by other active applications.","A particular use of the framework is in a network environment, such as the Internet, to provide monitoring of data residing at a remote server for changes (\u201cupdate checking\u201d), and to download changed data to a user's computer so as to maintain an updated local copy of the data at the user's computer. The illustrated framework provides agent objects which implement various forms of such updating operations. These updating operations include an operation (herein called \u201csmart folder updating\u201d) to update the contents of a local folder (herein called a \u201csmart folder\u201d) as specified in a remote file. The updating operations also include an operation (herein called automatically populating and updating favorites categories) that automatically fill and periodically update lists of remote documents for a user to browse organized in categories.","The scheduler in the illustrated framework supports scheduling of an agent's updating operations on different periodic bases, which include at scheduled times and during network idle times. The scheduled times are times scheduled by the user at which the updating operation is automatically triggered by the scheduler to connect to the Internet or other network unattended, and perform the updating operation. The scheduler also can perform the update operations on a periodic basis by detecting times when the user is connected to the Internet for other activities (such as on-line browsing) and the connection is left idle. When such idle status is detected, the agent for the update operation automatically performs the update checking and downloading over the connection unattended as background processing to the user's other activities.","Additional features and advantages of the invention will be made apparent from the following detailed description of an illustrated embodiment which proceeds with reference to the accompanying drawings.","1. Computer Overview","Referring to , an operating environment for an illustrated embodiment of the present invention is a computer system  with a computer  that comprises at least one high speed processing unit (CPU) , in conjunction with a memory system , an input device , and an output device . These elements are interconnected by at least one bus structure .","The illustrated CPU  is of familiar design and includes an ALU  for performing computations, a collection of registers  for temporary storage of data and instructions, and a control unit  for controlling operation of the system . The CPU  may be a processor having any of a variety of architectures including Alpha from Digital, MIPS from MIPS Technology, NEC, IDT, Siemens, and others, x86 from Intel and others, including Cyrix, AMD, and Nexgen, and the PowerPc from IBM and Motorola.","The memory system  generally includes high-speed main memory  in the form of a medium such as random access memory (RAM) and read only memory (ROM) semiconductor devices, and secondary storage  in the form of long term storage mediums such as floppy disks, hard disks, tape, CD-ROM, flash memory, etc. and other devices that store data using electrical, magnetic, optical or other recording media. The main memory  also can include video display memory for displaying images through a display device. Those skilled in the art will recognize that the memory  can comprise a variety of alternative components having a variety of storage capacities.","The input and output devices ,  also are familiar. The input device  can comprise a keyboard, a mouse, a physical transducer (e.g., a microphone), etc. The output device  can comprise a display, a printer, a transducer (e.g., a speaker), etc. Some devices, such as a network interface or a modem, can be used as input and\/or output devices.","As is familiar to those skilled in the art, the computer system  further includes an operating system and at least one application program. The operating system is the set of software which controls the computer system's operation and the allocation of resources. The application program is the set of software that performs a task desired by the user, using computer resources made available through the operating system. Both are resident in the illustrated memory system .","In accordance with the practices of persons skilled in the art of computer programming, the present invention is described below with reference to acts and symbolic representations of operations that are performed by computer system , unless indicated otherwise. Such acts and operations are sometimes referred to as being computer-executed. It will be appreciated that the acts and symbolically represented operations include the manipulation by the CPU  of electrical signals representing data bits which causes a resulting transformation or reduction of the electrical signal representation, and the maintenance of data bits at memory locations in memory system  to thereby reconfigure or otherwise alter the computer system's operation, as well as other processing of signals. The memory locations where data bits are maintained are physical locations that have particular electrical, magnetic, or optical properties corresponding to the data bits.","2. Browser and Updating Operations Overview","In an off-line browsing environment  of an illustrated embodiment of the invention shown in , the computer  (also shown in ) runs software, referred to herein as a \u201cbrowser\u201d , which provides on-line and off-line browsing of electronic documents and other data from a remote computer network . The browser  can be integrated with the operating system software, or can be a separate application software. The illustrated browser  is the Microsoft\u00ae Internet Explorer browser. The computer  also runs services software, herein called \u201cWeb Check\u201d , which provides an object-oriented framework (shown in  and described more fully below) with programmatic access for client applications (such as the Internet browser ) to services supporting periodically recurring operations. The operations in the illustrated browsing environment are updating operations that provide change monitoring and updating of data by downloading from the network .","The illustrated remote computer network  is the Internet. The Internet is a well known, global network of cooperatively interconnected computer networks. The World-Wide Web portion of the Internet is a collection of server computers (referred to as \u201cWorld-Wide Web sites\u201d) on the Internet which store electronic documents in a hypertext mark-up language (\u201cHTML\u201d) format that can be publicly accessed by computer users having a connection to the Internet. There are many such World-Wide Web sites on the Internet.","In the illustrated browsing environment , the computer  connects to the computer network  over a telephone line  with a modem . Other physical connections to the computer network alternatively can be used, such as an ISDN, T1 or like high speed telephone line and modem, a television cable and modem, a satellite link, an optical fiber link, an Ethernet or other local area network technology wire and adapter card, radio or optical transmission devices, etc. The invention can alternatively be embodied in a browsing environment for other public or private computer networks, such as a computer network of a commercial on-line service, a local area network (LAN), an intranet, or like computer network.","Documents for browsing with the illustrated browser can reside as files of a file system stored in the computer's secondary storage  (), or reside as resources at a remote computer  (also referred to as a \u201csite\u201d) connected to the computer network , such as a World-Wide Web site on the Internet. The illustrated document  residing at the site  conforms with HTML standards, and may include extensions and enhancements of HTML standards. HTML documents are ASCII coded (a well known standard for coding alpha-numeric characters in 7- or 8-bits) character files generally consisting of text and HTML \u201ctags\u201d which specify formatting of the document, links (referred to as \u201chyper-links\u201d) to related documents, and other files that contain information (e.g., sound, images, video, etc.) which is to be combined into the document, among other tag features. Typical HTML documents found on the world wide web include both text and tags specifying files for several images that are to be displayed with the text.","In conformance with HTML, the illustrated document  can incorporate other additional information content , such as images, audio, video, executable programs, etc. (hereafter called \u201cdependencies\u201d ), which also reside at the remote computer . The document  and dependencies  preferably are stored as files in a file system of the remote computer . The document  incorporates the dependencies  using HTML tags that specify the location of files or other Internet resource containing the dependencies on the Internet .","When browsing the HTML document  on-line (i.e., while connected to the network), the illustrated browser  retrieves the document from its site  on the Internet using the well-known windows sockets network programming interface (also known as \u201cwinsock\u201d). In the Microsoft\u00ae Windows 95 operating system used on the illustrated computer , the Windows sockets network programming interface is implemented in a software module named wsock32.dll. Windows sockets, in turn, relies on a set of Internet communications protocols which are implemented in one or more other software modules, such as in a network protocol driver and a modem driver. These Internet protocols can include application protocols, such as File Transfer Protocol (FTP), Simple Mail Transfer Protocol (SMTP), Hyper Text Transfer Protocol (HTTP), Gopher, etc.; transport protocols, such as the Transmission Control Protocol (TCP) and the Internet Protocol (IP) protocol suite; and connection protocols, such as the Serial Line Protocol (SLIP) or the Point-to-Point Protocol (PPP). Alternative embodiments of the invention for browsing documents on other networks may utilize various other network protocols, such as the NetBIOS Extended User Interface (NetBEUI) by IBM Corporation, Internet Packet Exchange\/Sequenced Packet Exchange (IPX\/SPX) by Novell corporation, DECnet, by Digital Equipment Corporation, NetBIOS by Microsoft Corporation, and OSI\/TP-4, among others. After retrieving the document  from the site , the browser  processes the HTML data to generate a view of the document, which the browser then displays on the computer's screen  (). The browser stores a copy of any documents with their dependencies which are browsed on-line in an Internet cache  in the computer's local storage .","The browser  also can be operated off-line (i.e., when the computer  is disconnected from the network ) to browse documents which are stored locally at the computer . In addition to documents which are cached by the browser during on-line browsing, documents also are locally stored by Web Check  for off-line browsing (i.e., browsing while disconnected from the network ) using the browser .","Web Check  is an object-oriented framework including a set of software modules that is described below with reference to . As described more fully below, Web Check  includes a core set of software modules with interfaces for a client application program to set up, schedule and monitor periodically recurring operations implemented by an agent program. In the illustrated system , the agent programs implement operations that serve to monitor for changes or to periodically update data in the system. Specifically, the agent programs in the illustrated system implement updating operations for use by the operating system and application software (such as the browser ) to automatically monitor a specified document (e.g., HTML document ) residing at a remote site on a computer network for changes and maintain an up-to-date locally stored copy of the document for later off-line use. In alternative systems employing the Web Check framework, agent programs can implement other periodically recurring operations that differ from those in the illustrated system. Generally, although not necessarily, the periodically recurring operations serve to monitor for a change in the system or to maintain updated data in the system. For example, alternative systems can include agent programs that monitor for changes to files stored locally rather than remotely as in the illustrated system .","The updating operations provided using the Web Check framework  in the system  maintain locally stored copies of documents in either the Internet cache  or in file system folders which are designated as \u201csmart folders\u201d . Web Check  thus provides a continually updated local copy of a document for off-line use, such as for off-line browsing using the browser .","In one embodiment of the invention, the updating operations to be performed by Web Check  are identified by entries in a system registry . In the Microsoft\u00ae Windows\u00ae operating system, the system registry is a database which stores configuration information for the operating system, including information to enumerate and track applications, device drivers, and operating system control parameters. For a detailed discussion of the registry, see 32 2, published by Microsoft Press, Redmond, Wash. (1993). Web Check  performs the updating operations, and stores identifying entries for the updating operations in the registry on a per-user basis under an HKeyCurrentUser registry key in the registry .","Each of the registry entries for Web Check  stores three pieces of data, a \u201cflags\u201d double word value, a \u201cpath\u201d text string, and a \u201cURL\u201d text string. The flags value contains bits which can be set to specify the particular updating service to be performed by Web Check. The path string is a file system path name of a folder in the local storage  of the computer . The URL string is a URL of a file on a remote World-Wide Web site . The definitions of the flag value bits for Web check registry entries in the illustrated system  are listed in the following Table 1. The updating operations specified by setting these flags value bits are described in more detail in subsequent sections.",{"@attributes":{"id":"p-0045","num":"0044"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 1"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"A. Definition of Flags Value Bits"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["B.",{}]},{"entry":["Bit","C. Definition"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["D. 0","E. The registry entry specifies a smart folder updating"]},{"entry":[{},"service described in the \u201cSmart Folders Updating Operation\u201d"]},{"entry":[{},"section below. The path string refers to a file system directory"]},{"entry":[{},"which is a smart folder. The URL string refers to a file on a"]},{"entry":[{},"remote server, called a \u201cfolder descriptor file,\u201d which Web Check"]},{"entry":[{},"uses in the smart folder updating service to update the smart"]},{"entry":[{},"folder."]},{"entry":["F. 1","G. The registry entry specifies an updating service for"]},{"entry":[{},"Internet Shortcuts kept in a local folder. The path string refers"]},{"entry":[{},"to the local folder which contains the Internet Shortcuts that are"]},{"entry":[{},"updated with this service. The URL string is not used, and may"]},{"entry":[{},"be omitted."]},{"entry":["H. 2","I. This bit is set in conjunction with bit 1 to specify the"]},{"entry":[{},"updating service is for Internet shortcuts in sub-folders of the"]},{"entry":[{},"local folder referred to by the path string."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"A set of sample registry entries for Web Check  is as follows:",{"@attributes":{"id":"p-0047","num":"0046"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2003\u2003\\HKCU\\Software\\Microsoft\\Windows\\CurrentVersion"]},{"entry":[{},"\u2003\u2003\\WebCheck"]},{"entry":[{},"\u2003\u2003\u2003\\0000"]},{"entry":[{},"\u2003\u2003\u2003\u2003(REG_DWORD) Flags=0x0000001"]},{"entry":[{},"\u2003\u2003\u2003\u2003(REG_STRING) Path=\u201cc:\\program"]},{"entry":[{},"files\\msn\\unplugged\u201d"]},{"entry":[{},"\u2003\u2003\u2003\u2003(REG_STRING) URL=\u201chttp:\/\/www.msn.com\u201d"]},{"entry":[{},"\u2003\u2003\u2003\\0001"]},{"entry":[{},"\u2003\u2003\u2003\u2003Flags=0x00000001"]},{"entry":[{},"\u2003\u2003\u2003\u2003Path=\u201cc:\\windows\\favorites\u201d"]},{"entry":[{},"\u2003\u2003\u2003\u2003URL=\u201chttp:\/\/www.hotlinks.com\/favs.htm\u201d"]},{"entry":[{},"\u2003..."]},{"entry":[{},"\u2003\u2003\u2003\\xxxx"]},{"entry":[{},"\u2003\u2003\u2003\u2003Flags=0x0000003"]},{"entry":[{},"\u2003\u2003\u2003\u2003Path=\u201cc:\\windows\\desktop\u201d"]},{"entry":[{},"\u2003\u2003\u2003\u2003URL=\u201c \u201d"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"With reference to , Web Check  () performs the updating operations specified in the Web Check entries of the system registry  () on either a scheduled basis or during idle connection times at the user's option (referred to as the \u201cmonitoring time\u201d option). The user sets this and other options  in a Web Check properties dialog , such as by clicking on a desired setting of each option with the mouse or other input device. For example, the user sets the monitoring time option to the idle connection times setting by clicking on a radio button control  next to the caption \u201cCheck sites for changes in the background while I'm connected to the Internet.\u201d Alternatively, the user can set the monitoring time option to the scheduled basis setting by clicking on another radio button control , and entering a schedule of times in a list box control . Alternative embodiments of the invention can present additional Web Check options.","When the user sets the monitoring time option to idle connection times, Web Check  is loaded to run on the computer  whenever the Internet browser  or other application software loads the windows sockets module (wsock32.dll) to connect to the Internet . As described above, the Internet browser  uses the windows sockets module as a network programming interface for connecting to and communicating on the Internet . During the user's on-line session, Web Check  monitors the computer's connection to the Internet  to detect times when the connection is left idle (i.e., when the application software is not transmitting or receiving data on the connection to the Internet). At such times, Web Check  performs the update operations specified in the registry entries described above, e.g., checking remote documents for changes and downloading updated documents to local storage.","In the illustrated system , Web Check  detects idle times using services provided by the windows sockets network programming interface. Communications through windows sockets over the Internet connection are made through what are called \u201cports\u201d or \u201csockets.\u201d Windows sockets tracks a time of the last activity occurring on each port, and provides a network programming interface for other software modules to query windows sockets for this \u201clast activity\u201d time. In the illustrated system, the windows sockets provides network programming interfaces for applications to query the last activity time, which have the following form:","GetSockOpt (SO_IDLE)","getsockopt(SO_IDLE)","The former of these two network programming interfaces returns a value indicating the time that a last transaction occurred on a non-idle time socket (i.e., on any socket not marked as an \u201cidle time socket\u201d as described below). The latter of the above windows sockets network programming interfaces returns a value indicating the time elapsed since the last activity on a non-idle time socket. This latter time is derived by subtracting the last activity time from a current system time. Web Check periodically polls these windows sockets interfaces to determine how long the connection has been idle.","Although the Internet browser can commence new communications over the port at any time, the length of time that the connection has been idle is a good indication of how long the connection is likely to remain idle before the next communication commences. Specifically, the longer the connection has been idle\u2014the more likely it is to continue to remain idle. This relationship reflects how a connection is used during on-line browsing. In general, when a user browses to a new document on-line, the browser engages in a series of rapid data exchanges with servers on the Internet, which include: requesting a connection to a name server; receiving a response; requesting translation of a URL identifying the document from the name server; obtaining a Internet Protocol (IP) address in response; requesting a connection to a World-Wide Web site where the document resides using the IP address; receiving a response; requesting to download the document from the site; receiving the document; requesting any images or other files referenced in the document (also known as the document's \u201cdependencies\u201d); and receiving the dependencies. Between each of these exchanges, there may be a short pause (typically a fraction of a second up to several seconds). On the other hand, once the document and its dependencies have been downloaded, the user usually reads or views the document for a much longer duration before browsing to another document. In which case, the delay until the browser resumes communications over the connection can be several minutes.","Based on this relationship, Web Check  uses the elapsed time since the last activity time obtained from windows sockets to determine when the connection is idle. More particularly, Web Check  determines that the connection is idle when this elapsed time exceeds a predefined threshold interval or intervals. At such times, Web Check  downloads data from the Internet  for the updating operations specified in the Web Check entries of the system registry  (). Web Check  performs these downloads over a separate port (the \u201cidle time port\u201d) than that used by the Internet browser, and sets parameters for the port such that windows sockets does not track the last activity time of the downloads using the idle time port. This allows Web Check to continue monitoring the elapsed time from the Internet browser's last activity time for idle time detection. In the illustrated system, the windows sockets provides the following network programming interfaces for Web Check  to mark the port it uses for idle time downloading as the idle time port:","SetSockOpt(SO_IDLE)","setsockopt(socket s, SO_IDLE)","In the illustrated system , Web Check  uses different predefined threshold intervals for idle time detection depending on the expected duration of each updating service download. In particular, Web Check  triggers updating service downloads with short expected durations (hereafter \u201cshort term idle time events\u201d) when the elapsed time from the last activity time exceeds a short delay interval (e.g., about two seconds). These short term idle time events may include, for example, downloading update information of documents (e.g., last changed date) and downloading smaller documents. For updating service downloads with longer expected durations (hereafter \u201clong term idle time events\u201d), Web Check  uses a longer delay interval (e.g., ten seconds). These long term idle time events may include downloading updated versions of complete documents and their dependencies to the local storage  (). Generally, Web Check  triggers one or more short term idle time events (if any are pending) at the beginning of an idle period. Later in the idle period after sufficient time has elapsed from the last activity time, Web Check  triggers any long term idle time events. For higher bandwidth connections (e.g., an ISDN line or cable modem), Web Check  automatically scales down the delay threshold intervals.","In alternative embodiments of the invention, Web Check  can determine the idle times using different delay intervals (e.g., a longer 30 second interval), and without consideration to the size of the download.","When the monitoring time option is set to a scheduled basis, Web Check  is loaded and run at scheduled times by scheduler software (not shown). The scheduler software in the illustrated system  is the system agent application software of the Microsoft Windows 95 operating system. The system agent application software can be set at the user's option to load and run Web Check on any of a variety of bases, such as at a particular hour on a daily, weekly, monthly or like basis. Thus, for example, the user can have Web Check activated on a scheduled basis at times that the computer would otherwise be idle, such as during early morning hours.","When activated at the scheduled times, Web Check  automatically connects to the Internet  using the windows sockets network programming interface. Web Check  then iterates through the Web Check entries in the system registry  () and performs each of the updating operations specified therein. When the updating operations are complete, Web Check  disconnects from the Internet  and shuts down.","Web Check  thus performs automated updating of locally stored copies of documents from the Internet , by unattended downloading of data from the Internet either at scheduled times or at detected idle on-line times. This provides automatically updated, locally stored copies of documents and other files from the Internet for off-line use.","3. Smart Folders Updating Operation","With reference now to , Web Check  () provides an updating operation  herein referred to as a \u201csmart folder updating.\u201d In accordance with this updating operation, Web Check  updates the contents of a local folder  (the \u201csmart folder\u201d) based on a file  (the \u201cweb collections file\u201d or \u201cWCF\u201d) residing on a remote server (e.g., World-Wide Web site  of ) that specifies the contents of the smart folder. As described above, the local folders that are to be updated by Web Check  with the smart folder updating service are identified by entries in the system registry  which have the 0-bit of the flag value set. As stated in Table 1 above, the path string in this registry entry identifies the folder  in the file system of the local storage  (), while the URL string identifies the WCF  at the remote server  ().","The illustrated WCF  can contain any of three main sections, which are as follows:","1.\n\n","2.\n\n","3.\n\n","The following is a listing of a sample WCF.",{"@attributes":{"id":"p-0070","num":"0072"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"[Files to download]"},{"entry":"image1.gif = http:\/\/www.foo.com\/images\/7-29-96.gif"},{"entry":"image2.gif = http:\/\/www.foo.com\/images\/9-22-06.gif"},{"entry":"\/Sports\/basketball.gif = http:\/\/www.foo.com\/images\/image.gif"},{"entry":"[URLs to Create]"},{"entry":"\u201cUniversity of Waterloo\u201d = www.waterloo,ca, cache = \u201csticky\u201d,"},{"entry":"author = \u201cTeri Martin\u201d, category = \u201ceducation\u201d"},{"entry":"\u201cESPNet\u201d = www.espnet.com, cache = \u201csticky\u201d, author ="},{"entry":"\u201cStarwaveCorp\u201d, category = \u201cSports\u201d"},{"entry":"News\/\u201cGlobe and Mail\u201d = www.Globemail.ca, cache = \u201c \u201d, author ="},{"entry":"\u201cEditor's at the Globe\u201d, category = \u201cnews\u201d"},{"entry":"[Cache Only]"},{"entry":"http:\/\/www.foo.com\/microsoft\/startpage.htm"},{"entry":"http:\/\/www.foo.com\/espn\/sportszone.htm"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"With reference to , Web Check  performs the smart folder updating service  for each smart folder  () identified in the system registry  along with other updating operations on the scheduled time or detected idle time basis described above. When performing the smart folder updating service for each smart folder, Web Check  checks whether the WCF  associated with the smart folder  as specified in the registry entry has changed (step ). If the WCF  has changed, Web Check  retrieves the WCF  (step ) and updates the contents of the smart folder  as specified in the WCF (steps -). Web Check  also deletes files and Internet shortcuts from the smart folder that are no longer specified in the WCF (step ).","4. Internet Shortcuts Updating Operation","With reference now to , Web Check  also provides an updating operation  referred to herein as \u201coff-line readable Internet shortcut updating.\u201d In accordance with this service, Web Check  checks remote resources  identified by Internet shortcuts - for updates, and maintains up-to-date copies of the resources stored locally in the Internet cache . Internet shortcuts are software objects in the Microsoft\u00ae Windows\u00ae 95 operating system residing on the local computer  and which contain a URL that refers to a resource on a remote server (e.g., World-Wide Web site ) along with other properties relating to the resource. Software objects and their implementation are described in more detail in the Object Overview section below. The data contained by an Internet shortcut can be persistently stored as a file in a file system folder  (hereafter \u201cshortcuts folder\u201d).","With reference to , the Internet shortcuts - differ from those in the Microsoft Windows 95 operating system in that they are extended to include off-line reading properties according to the invention. The off-line reading properties of these extended Internet shortcuts - include the properties summarized in the following Table 2",{"@attributes":{"id":"p-0075","num":"0077"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 2"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Internet Shortcut Off-line Reading Properties."}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Property","Definition"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["update checking","This property indicates whether or not Web Check"]},{"entry":[{},"is to check the resource referenced by the Internet"]},{"entry":[{},"shortcut for updates."]},{"entry":["local caching","This property indicates whether or not Web Check"]},{"entry":[{},"is to maintain a copy of the resource referenced by"]},{"entry":[{},"the Internet shortcut in the Internet cache 66."]},{"entry":["number of levels","This property indicates the extent to which Web"]},{"entry":["deep","Check is to download and locally cache copies of"]},{"entry":[{},"documents referenced by hyperlinks in a hypertext"]},{"entry":[{},"page referenced by the Internet shortcut. For"]},{"entry":[{},"example, if the number of levels deep is set to two,"]},{"entry":[{},"Web Check downloads and caches the document"]},{"entry":[{},"directly referenced by the Internet shortcuts, any"]},{"entry":[{},"documents (\u201cfirst level documents\u201d) referenced by"]},{"entry":[{},"hyperlinks in the directly referenced document, and"]},{"entry":[{},"also any documents (\u201csecond level documents\u201d)"]},{"entry":[{},"referenced by hyperlinks in the first level documents."]},{"entry":["download","This property indicates whether Web Check is to"]},{"entry":["dependencies","download the dependencies of the document"]},{"entry":[{},"pointed to by the Internet shortcut."]},{"entry":["download","This property indicates a limit in kilobytes and\/or as"]},{"entry":["size limit","a percentage of total local storage on the data"]},{"entry":[{},"which is locally cached by Web Check for the"]},{"entry":[{},"Internet shortcut."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"In the illustrated system  (), the off-line reading properties are set for a particular Internet shortcut in a properties sheet which the user opens by right clicking on an icon of the particular Internet shortcut (such as in the Windows Explorer file management application of the Microsoft Windows 95 operating system or in a folder view), and then selecting a properties command from a pop-up context menu activated by the right clicking.","The extended Internet shortcuts - () also include an added group of properties (herein called \u201cabout web site\u201d properties) which relate to the update status of the resource  that the shortcuts reference. The about web site properties of the Internet shortcuts are summarized in the following table 3.",{"@attributes":{"id":"p-0078","num":"0080"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 3"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Internet Shortcut About Web Site Properties"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Property","Definition"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["What's New","A text string description of the newest update or"]},{"entry":[{},"updates to the document. This text string originally"]},{"entry":[{},"is obtained from a text string embedded into the"]},{"entry":[{},"document by its author, such as by using the"]},{"entry":[{},"\u201cmeta\u201d HTML tag in a header to the document."]},{"entry":["Last Visited","A date that the document was last viewed by the"]},{"entry":[{},"user of the computer 20. This information is"]},{"entry":[{},"tracked locally by the Internet browser 51 per user."]},{"entry":["Last Updated","A date that the document was last updated. This"]},{"entry":[{},"text string also is obtained trom information embedded"]},{"entry":[{},"by the author in the remote document by its"]},{"entry":[{},"author, such as by using the \u201cmeta\u201d HTML tag in"]},{"entry":[{},"the document's header."]},{"entry":["Number of Visits","A number of times the document was viewed by the"]},{"entry":[{},"user of the computer 20. This information also is"]},{"entry":[{},"tracked locally by the Internet browser 51 per user."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"With reference to  and in accordance with the off-line readable Internet shortcut updating operation, Web Check  updates a group of Internet shortcuts - by maintaining update information relating to each shortcut and also by locally caching updated copies of the remote resources  indicated by the shortcuts into the Internet cache . In the illustrated system  (), Web Check  updates Internet shortcuts identified as described above by entries in the system registry  which have the 1-bit of the flag value set. As stated in Table 1 above, the path string in this registry entry identifies the shortcuts folder  in the file system of the local storage  () where files containing the persistent data of the Internet shortcuts - are stored. The URL string of these entries is not used. These registry entries also may have the 2-bit of the flag value set to indicate that Internet shortcuts stored in sub-folders of the shortcuts folder identified in the Path string also are to be updated by Web Check .","This method of identifying the Internet shortcuts to be updated by Web Check  assumes that the user of the computer  typically clusters Internet shortcuts together within particular folders in the file system, such as the desktop or favorites folders in a computer running the Microsoft\u00ae Windows\u00ae 95 operating system. In alternative embodiments of the invention, the Internet shortcuts which are to be updated by Web Check can be listed individually in an entry or entries of the system registry  to allow more flexibility in the storage locations of the Internet shortcuts (or, as a further alternative, Internet shortcuts outside of a favorites or like folder can be individually identified in the system registry).","With reference to , Web Check  performs the off-line reading Internet shortcut updating service  for each shortcuts folder  identified in the system registry  along with other updating operations on the scheduled time or detected idle time basis described above. In an alternative embodiment of the invention, the agent program that implements the Internet shortcut updating service  may update only Internet shortcuts stored in certain preset folders, rather than those identified in the system registry .","When performing the off-line reading Internet shortcut updating service  for the shortcuts folder , Web Check  repeats a sequence of updating steps - for each of the Internet shortcuts - stored in the shortcuts folder  depending on the settings of the particular shortcut's off-line reading properties (step ).","At steps -, Web Check  performs an update checking operation depending on whether the update checking property of the Internet shortcut is set. If the update checking property is set (step ), Web Check  downloads the document referenced by the URL contained in the Internet shortcut from the Internet  (step ). Web Check  then parses the document and extracts information from the document to update the shortcut's \u201cabout web site\u201d properties, including the \u201clast updated,\u201d \u201cwhat's new,\u201d and \u201cauthor\u201d properties. Web Check stores these properties in the Internet shortcut -.","At steps -, Web Check  performs operations to update locally cached data for the Internet shortcut - depending on other off-line reading properties of the shortcut and on whether the document has been updated since it was last visited. If the document has been updated more recently than the shortcut's \u201clast visited\u201d date (step ) and the \u201clocal caching\u201d property is set (step ), Web Check  stores the downloaded document in the Internet cache  () as indicated at step . Web Check  sets a flag (e.g., the \u201cSTICKY_CACHE_ENTRY\u201d flag in the Internet cache of the Microsoft\u00ae Internet Explorer browser) so that the document is not automatically removed during on-line browsing with the Internet browser  (). The Internet browser  in the illustrated system  otherwise automatically replaces documents in the Internet cache  on a least recently used basis as new documents are downloaded.","At the steps -, Web Check  also maintains up-to-date locally cached copies of related resources. If the shortcut's download dependencies property is set (step ), Web Check  also downloads and locally caches the document's dependencies (step ). If the number of levels deep property is set to a number greater than zero, Web Check  further follows any hyperlinks in the document out to the number of levels set by this property, and downloads those documents indicated by the hyperlinks into the Internet cache . The document's dependencies and linked documents also are flagged as exempt from automatic replacement. Web Check  limits the local caching at steps - by the limits set in the download size limit property of the shortcut.","Finally, at step , Web Check  removes any out-of-date files previously associated with the Internet shortcut from the Internet cache , such as copies of the document, its dependencies and levels deep documents from a previous update of the Internet shortcut by Web Check . In the illustrated system , information identifying the locally cached files associated with each Internet shortcut is stored in a database. Web Check  retrieves this information for the particular Internet shortcut -, and verifies that each of the locally cached files associated with the Internet shortcut is still related as the document, one of its dependencies or a levels deep document. If the locally cached file is no longer related to the Internet shortcut, Web Check purges the file from the Internet cache .","Web Check  then repeats the loop of steps - for the next Internet shortcut in the shortcuts folder  until all shortcuts in the folder have been updated (step ).","5. Object Overview","With reference to , Web Check  () and other software in the illustrated system are implemented as objects which conform to Microsoft Corporation's Component Object Model (COM), and support various ActiveX (also known as Object Linking and Embedding (\u201cOLE\u201d)) interfaces. COM, ActiveX and OLE are object-oriented technologies which provide integration and interoperability between separate software components. For a detailed discussion of OLE see by Kraig Brockschmidt, Microsoft Press, Redmond, Wash. 1995. A brief overview of objects in OLE and associated terminology is provided below before discussing the details of the illustrated embodiment.","An object is an instance of a programmer-defined type referred to as a class, which exhibits the characteristics of data encapsulation, polymorphism and inheritance. Data encapsulation refers to the combining of data (also referred to as properties of an object) with methods that operate on the data (also referred to as member functions of an object) into a unitary software component (i.e., the object), such that the object hides its internal composition, structure and operation and exposes its functionality to client programs that utilize the object only through one or more interfaces. An interface of the object is a group of semantically related member functions of the object. In other words, the client programs do not access the object's data directly, but must instead call functions on the object's interfaces to operate on the data.","Polymorphism refers to the ability to view (i.e., interact with) two similar objects through a common interface, thereby eliminating the need to differentiate between two objects. Inheritance refers to the derivation of different classes of objects from a base class, where the derived classes inherit the properties and characteristics of the base class (which for purposes of OLE are the interfaces of the base class).","Microsoft Corporations's COM specification defines binary standards for objects and their interfaces which facilitate the integration of software components. According to the COM specification, a typical object  is represented in the system  () by an instance data structure , a virtual function table , and member functions -. The instance data structure  contains a pointer  to the virtual function table  and data  (also referred to as data members, or properties of the object). A pointer is a data value that holds the address of an item in memory. The virtual function table  contains entries - for the member functions -. Each of the entries - contains a reference to the code - that implements the corresponding member function.","The pointer , the virtual function table , and the member functions - implement an interface of the object . Client programs interact with the object  by obtaining a pointer (referred to as an interface pointer) to the pointer  of the virtual function table . OLE includes a type definition of an interface pointer which allows client programs to call member functions on the interface by name through the interface pointer and provides type checking on the function's arguments, as expressed in the following code (in the C++ programming language):","pinterface->MemberFunction( . . . )","By convention, the interfaces of an object are illustrated graphically as a plug-in jack as shown for the document object in . Also, Interfaces conventionally are given names beginning with a capital \u201cI.\u201d Objects can include multiple interfaces which are implemented with one or more virtual function tables. The member function of an interface is denoted as \u201cIInterfaceName::FunctionName.\u201d","The object  conforming to the COM specification exhibits data encapsulation by exposing its interfaces (semantic groupings of its member functions) to client programs. The client programs interact with the object  by calling the member functions - on a particular interface of the object, but do not directly manipulate the object's data. The object  also exhibits polymorphism and inheritance in that the object  can provide interfaces in common with a base class and other similar objects, so that client programs can interact with each of the objects in the same manner by calling member functions of the interface that the objects have in common.","6. Automation Server Overview","Referring still to , the virtual function table  and member functions - of the object  are provided by a server application program  which is stored in the computer system  () as an executable program file (with a \u201c.exe\u201d file name extension) or as a dynamic link library file (with a \u201c.dll\u201d file name extension). Dynamic link library files are loaded, dynamically linked, and executed by the Windows\u00ae operating system in a same process with a client application program. Executable program files are loaded by the operating system as a separately executing process. In accordance with OLE, the server application  includes code for the virtual function table  () and member functions - () of the classes that it supports, and also includes a class factory  that generates the instance data structure  () for an object of the class.","For a client program (e.g., a document object host or container) to interact with the object  provided by the server application , the server application must first create the object (i.e., instantiate an object of a class supported by the server application) and the client program must gain an interface pointer to the object . In OLE, the client program realizes these events using services provided by OLE and a set of standard object interfaces defined by COM based on class and interface identifiers assigned to the object's class and interfaces. More specifically, the services are available to client programs as application programming interface (API) functions provided in the COM library, which is part of a component of the Windows\u00ae operating system in a file named \u201cOLE32.DLL.\u201d In OLE, classes of objects are uniquely associated with class identifiers (\u201cCLSIDs\u201d). Class identifiers are 128-bit globally unique identifiers (\u201cGUID\u201d) that the programmer creates with an OLE service named \u201cCoCreateGUID\u201d and assigns to the respective classes. The interfaces of an object are associated with interface identifiers (\u201cIIDs\u201d).","In particular, the COM library provides an API function, \u201cCoCreateInstance,\u201d that the client program can call to request creation of an object to encapsulate a particular documents data using a CLSID associated with the data. The CoCreateInstance API function creates the object and returns a pointer of the requested interface to the client program.","Once the client program has obtained a first interface pointer to the object , the client program obtains pointers to other desired interfaces of the object using the interface identifier associated with the desired interface. COM defines several standard interfaces generally supported by OLE objects including the IUnknown interface. This interface includes a member function named \u201cQueryInterface.\u201d The QueryInterface function can be called with an interface identifier as an argument, and returns a pointer to the interface associated with that interface identifier. By convention, the IUnknown interface's member functions are included as part of each interface on an object. Thus, any interface pointer that the client program obtains to an interface of the object  can be used to call the QueryInterface function.","In a typical situation, however, the only information that the client program has to reference a particular document is a textual name, such as a file name or an Internet URL. In the case of a file name, the COM library provides API functions (e.g., \u201cGetClassFile,\u201d \u201cReadClassStg\u201d and \u201cReadClassStm\u201d) for obtaining a CLSID associated with the file. Client programs also can utilize a system provided object known as a moniker to resolve a name that references a document into an interface pointer on an instantiated object that encapsulates the document's data. These well known mechanisms are described in more detail in , supra.","7. Web Check Object Architecture","With reference to , Web Check  () is implemented within an object-oriented framework  which includes a Web Check core, scheduler and download objects  and Web Check agent objects . These objects  and  conform to the OLE\/COM and Active X specifications, and support integration interfaces which allow a client application program  (e.g., the Internet browser  of ) to programmatically utilize updating operations implemented in the agent objects  on a periodically recurring basis, e.g., the smart folder updating operation  () and the Internet shortcuts updating operation  (), so as to provide an off-line reading feature, and other features based on these services.","The Web Check core, scheduler and download objects  are implemented in the illustrated system  () as three separate objects integrated together with private interfaces. These objects manage the infrastructure and scheduling of update operations by the agent objects  for Web Check's updating operations  ( (). In the illustrated system , a single instance of the core and scheduler objects run on the computer  () in the address space of the operating system's shell at all times that Web Check is enabled. The core object creates the downloader object (also in the shell address space) when there are downloads to complete. The core, scheduler and download objects  also support a group of external interfaces summarized in Table 4 below for use by the client application  and agent object  (two of which, the IWebCheckScheduler interface  and IWebCheckModuleEvents interface  are shown in ).",{"@attributes":{"id":"p-0106","num":"0108"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 4"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Web Check Core, Scheduler and Download Object Interfaces."}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Interface","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["IWebCheck","This is the main interface for programmatically"]},{"entry":[{},"controlling Web Check"]},{"entry":["IWebCheckScheduler","This interface manages a schedule of"]},{"entry":[{},"updates. The client creates a agent"]},{"entry":[{},"object for each item to be updated,"]},{"entry":[{},"then schedules the agent object with"]},{"entry":[{},"the scheduler using this interface."]},{"entry":["IWebCheckScheduleItem","This interface schedules a single update"]},{"entry":[{},"item. The client retrieves a"]},{"entry":[{},"pointer to this interface for an update"]},{"entry":[{},"item from the IWebCheckScheduler"]},{"entry":[{},"interface."]},{"entry":["IWebCheckSchedule-","This interface schedules a collection of"]},{"entry":["Collection","update items, which allows programming"]},{"entry":[{},"the client application using a \u201cfor"]},{"entry":[{},"each in\u201d syntax of the Microsoft Visual"]},{"entry":[{},"Basic programming language."]},{"entry":["IWebCheckEnum-","This interface enumerates schedules"]},{"entry":["Schedules","which have previously been set."]},{"entry":["IWebCheckModule-","This interface receives notifications"]},{"entry":["Events","from a agent object during a download"]},{"entry":[{},"operation."]},{"entry":["IWebCheckAdviseSink","This interface sends notifications to a"]},{"entry":[{},"client application which has used the"]},{"entry":[{},"IConnectionPoint interface on the"]},{"entry":[{},"scheduler or Callback property on the"]},{"entry":[{},"agent object."]},{"entry":["DWebCheckEvents","This interface sends notifications to a"]},{"entry":[{},"client application which has used the"]},{"entry":[{},"IConnectionPoint interface on the"]},{"entry":[{},"scheduler. The D in"]},{"entry":[{},"DWebCheckEvents denotes a dispatch"]},{"entry":[{},"interface which supports late bound"]},{"entry":[{},"calls."]},{"entry":["IWebCheckDownloader","This interface is used by the agent"]},{"entry":[{},"object to cause Web Check to perform"]},{"entry":[{},"a download operation on a URL."]},{"entry":["IConnectionPoint","This interface allows a client"]},{"entry":[{},"application to connect to the object 322"]},{"entry":[{},"so as to receive notifications of Web"]},{"entry":[{},"Check activity."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"The object-oriented framework  provides a different separate agent object  to handle each of the updating operations described above. The different agent objects in the illustrated framework  include a favorites agent object, an off-line reading agent object, and a smart folders agent object. The favorites agent object handles download operations to check Internet shortcuts for changes, and retrieve information for the about web site properties of the Internet shortcut. The off-line reading agent object handles downloads of resources (including dependencies and hyperlinked documents to a specified number of levels deep) indicated by an URL (such as an URL contained in Internet shortcuts) for caching locally and marking with the \u201csticky\u201d flag. Each agent object  provides a user interface dialog for setting its options. Each agent object  supports an IWebCheckModuleControl interface  and an IPersistStream interface , in addition to an agent object-specific interface (i.e., an IWebCheckOfflineReading interface  for the off-line reading agent object ; an IWebCheckFavorites interface for the favorites agent object; an IWebCheckInternetShortcuts interface for the Internet Shortcuts agent object; and an IWebCheckSmartFolders interface for the smart folders agent object). The IPersistStream interface is a well known OLE interface used to persistently store an object's state.","The client application  in the illustrated framework  can provide a Web Check call back object  to receive notifications of Web Check activities from the agent object. The call back object  supports interfaces summarized in the following table 5 (of which an IWebCheckOfflineReadingSink interface  and an IPersistStream interface  are shown).",{"@attributes":{"id":"p-0109","num":"0111"},"tables":{"@attributes":{"id":"TABLE-US-00007","num":"00007"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 5"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Web Check Call Back Object Interfaces"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"105pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Interface","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["DWebCheckEvents or","This interface is needed by a call"]},{"entry":["IWebCheckAdviseSink","back object which uses the"]},{"entry":[{},"IConnectionPoint interface on the"]},{"entry":[{},"Web Check scheduler object to"]},{"entry":[{},"get notifications of Web Check"]},{"entry":[{},"activity. IWebCheckAdviseSink"]},{"entry":[{},"also handles receiving standard"]},{"entry":[{},"notifications from the agent"]},{"entry":[{},"object."]},{"entry":["IPersistStream","This interface is used to"]},{"entry":[{},"persistently store the state of the"]},{"entry":[{},"client's call back object when the"]},{"entry":[{},"client sets the call back object to"]},{"entry":[{},"receive notifications from a"]},{"entry":[{},"scheduled download."]},{"entry":["ICustomDownloadModuleAdviseSink","This is a agent object specific"]},{"entry":["(e.g., IWebCheckOffline-","interface which handles receiving"]},{"entry":["ReadingSink)","notifications specific to the agent"]},{"entry":[{},"object."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"7.1 Interfaces for Web Check Core and Scheduler Objects","The IWebCheck interface. The IWebCheck interface has member functions defined as follows:",{"@attributes":{"id":"p-0112","num":"0114"},"tables":{"@attributes":{"id":"TABLE-US-00008","num":"00008"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"182pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"HRESULT ShowProperties(HWND hwndParent);"]},{"entry":[{},"HRESULT StartService( );"]},{"entry":[{},"HRESULT StopService( );"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"The ShowProperties function causes the Web Check core object  to display the Web Check properties dialog  () to the user. The client application  calls this function to allow the user to set Web Check options. This is available instead of allowing programs to directly set WebCheck scheduling options.","The StartService and StopService function start and stop the scheduler service of WebCheck.","The IWebCheckScheduler interface. The IWebCheckScheduler interface  of the Web Check core object  has member functions defined as follows:",{"@attributes":{"id":"p-0116","num":"0118"},"tables":{"@attributes":{"id":"TABLE-US-00009","num":"00009"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"Parameterized property: IWebCheckScheduleItem"},{"entry":"ScheduleItem(long Cookie);"},{"entry":"Read-only property: IWebCheckScheduleCollection"},{"entry":"ScheduleItems;"},{"entry":"Property: VARIANT_BOOL Busy"},{"entry":"HRESULT NewScheduleItem([out] long *plNewCookie,"},{"entry":"[out] IWebCheckScheduleItem **ppScheduleItem);"},{"entry":"HRESULT get_ScheduleItem(long Cookie, [out]"},{"entry":"IWebCheckScheduleItem *pScheduleItem);"},{"entry":"HRESULT DeleteScheduleItem(long lCookie);"},{"entry":"HRESULT EnumerateScheduleItems(BSTR lpURL, BSTR bstrCLSID,"},{"entry":"[out]IWebCheckEnumSchedules **ppEnumSchedules);"},{"entry":"HRESULT get_ScheduleItems(BSTR lpURL, BSTR bstrCLSID,"},{"entry":"[out]IWebCheckScheduleCollection **ppScheduleCollection);"},{"entry":"HRESULT RunScheduleItemNow(long lCookie);"},{"entry":"HRESULT AbortScheduleItem(long lCookie);"},{"entry":"HRESULT AbortEverything( );"},{"entry":"HRESULT get_Busy([out] VARIANT_BOOL *fBusy);"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"The NewSchedulerltem function creates a new schedule item which sets a schedule for a particular download operation with an agent object. The function returns a data structure called the \u201ccookie,\u201d and a copy of the schedule item. The cookie is a data value that identifies the schedule item in the scheduler object.","The Scheduleltem function retrieves a reference to the schedule item.","The DeleteScheduleltem function causes the Web Check core object to delete the schedule item associated with the cookie.","The EnumerateScheduleltem function causes the Web Check core object to enumerate the schedule items associated with a particular URL (specified in the IpURL parameter), or a particular agent object (specified in the bstrCLSID parameter). The function returns an IWebCheckEnum Schedules interface (in the ppEnumSchedules parameter) for enumerating the specified schedules.","The get_Scheduleltems function is called by the client application to enumerate a collection of schedule items associated with a agent object. The function returns a pointer to the IWebCheckScheduleCollection interface.","The RunScheduleltemNow function is called by the client application to cause the Web Check core object to trigger a previously scheduled download operation to update a specified URL (associated with the cookie specified as the ICookie parameter).","The AbortScheduleltem is called by the client application to abort a specified previously scheduled download operation. If the Web Check core object queued the download operation, the function will delete the download operation. If it is currently processing the download operation, the function will abort the download operation.","The AbortEverything function is called by the client application to immediately abort whatever download operations currently being performed by the Web Check core object. The client application should only call this function at the user's request.","The get_Busy function returns the value, TRUE, if any of the agent objects are currently performing download operations.","The IWebCheckScheduleItem interface. This interface includes functions to set scheduling options for a single schedule item. Each schedule item has associated with it a URL, a trigger settings, and a schedule type. A newly created schedule item will have NULL URL, have no trigger setting, and be of type \u201cRun Later\u201d.",{"@attributes":{"id":"p-0127","num":"0129"},"tables":{"@attributes":{"id":"TABLE-US-00010","num":"00010"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Property: BSTR URL"]},{"entry":[{},"Property: long ScheduleFlags"]},{"entry":[{},"Property: long MaxDownloadLimit"]},{"entry":[{},"Property: SAFEARRAY (unsigned char) TaskTrigger"]},{"entry":[{},"Property: IUnknown DownloadModule"]},{"entry":[{},"Property: VARIANT_BOOL Disabled"]},{"entry":[{},"Property (read only): DATE LastRun"]},{"entry":[{},"Property (read only): DATE LastCompleted"]},{"entry":[{},"Property (read only): DATE NextRun"]},{"entry":[{},"Property (read only): long Cookie"]},{"entry":[{},"HRESULT get_URL([out] BSTR *pURL);"]},{"entry":[{},"HRESULT put_URL(BSTR pURL);"]},{"entry":[{},"HRESULT get_ScheduleFlags([out] long *plScheduleFlags);"]},{"entry":[{},"HRESULT put_ScheduleFlags(long lScheduleFlags);"]},{"entry":[{},"HRESULT get_MaxDownloadLimit([out] long"]},{"entry":[{},"*plMaxDownloadLimit);"]},{"entry":[{},"HRESULT put_MaxDownloadLimit(long"]},{"entry":[{},"lMaxDownloadLimit);"]},{"entry":[{},"Property: ScheduleTypeConstants ScheduleType"]},{"entry":[{},"HRESULT get_ScheduleType([out]"]},{"entry":[{},"ScheduleTypeConstants *psScheduleType);"]},{"entry":[{},"HRESULT put_ScheduleType(ScheduleTypeConstants"]},{"entry":[{},"sScheduleType);"]},{"entry":[{},"HRESULT get_TaskTrigger([out] SAFEARRAY (unsigned char)"]},{"entry":[{},"*pTaskTrigger);"]},{"entry":[{},"HRESULT put_TaskTrigger(SAFEARRAY (unsigned char)"]},{"entry":[{},"TaskTrigger);"]},{"entry":[{},"HRESULT get_DownloadModule([out] IDispatch **ppDisp);"]},{"entry":[{},"HRESULT put_DownloadModule(IDispatch *pDisp);"]},{"entry":[{},"HRESULT get_Disabled([out] VARIANT_BOOL *pfDisabled);"]},{"entry":[{},"HRESULT put_Disabled(VARIANT_BOOL fDisabled);"]},{"entry":[{},"HRESULT get_LastRun([out] DATE *pLastRun);"]},{"entry":[{},"HRESULT get_LastCompleted ([out] DATE *pLastCompleted);"]},{"entry":[{},"HRESULT get_NextRun([out] DATE *pNextRun);"]},{"entry":[{},"HRESULT get_Cookie([out] long *plCookie);"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"The get_URL and put_URL functions are called by the client application  to retrieve and set the URL associated with the schedule item.","The get_ScheduleFlags and put_ScheduleFlags functions are called by the client application  to retrieve and set trigger settings associated with the schedule item. Normally, the Web Check scheduler object  will trigger the schedule item's download operation only if the URL has changed since it was last run. A constant called schedRunEvenIfURLUnchanged can be passed as the parameter of the functions to override the normal triggering so that the scheduler object will always trigger the download operation. A constant called schedPerMachineOperation can be passed to indicate the scheduler will run the download operation for any user, not just the user currently logged onto the computer .","The get_maxDownLoadLimit and put_MaxDownloadLimit functions are called by the client application to retrieve and set a limit on the maximum size in kilobytes that the scheduler will allow the operation to consume. The download operation will be aborted once it exceeds this limit. A value of 0 (the default) indicates no limit.","The get_ScheduleType and put_SheduleType functions are called by the client application to retrieve and set a schedule type associated with the schedule item. The parameter passed with the function can be one of the following values:\n\n","The get_TaskTrigger and put_TaskTrigger are called by the client application to retrieve and set the trigger setting of the schedule item. The trigger setting is used only if the schedule item's type is set to \u201cschedRunLater,\u201d in which case it is still optional. When set, the scheduler objects uses the trigger setting to determine the next time the download operation of schedule item is to run.","The get_DownloadModule and put_DownloadModule functions are called by the client application to retrieve or change the agent object which handles the download operation for the schedule item.","The get_Disabled and put_Disabled functions are called by the client application to retrieve and set the disabled status of the schedule item. If the disabled status is set to TRUE, the schedule item's download operation will not be run unless the RunScheduleltemNow method is called in the scheduler object.","The get_LastRun, get_LastCompleted, and get_NextRun are called by the client application to retrieve the date and time that this schedule item was last triggered, that it last completed running, and that it will next be run given current options. The value may be 0 if invalid or not available.","The get_Cookie function is called by the client application  to obtain the cookie that identifies the schedule item in the scheduler object .","The IWebCheckEnumSchedules interface. This interface is retrieved from the Web Check scheduler object using functions of the IWebCheckScheduler interface. The IWebCheckEnumSchedules interface has member functions to enumerate schedule items for a single URL or agent object , which are defined as follows.",{"@attributes":{"id":"p-0138","num":"0143"},"tables":{"@attributes":{"id":"TABLE-US-00011","num":"00011"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"HRESULT Next(ULONG celt, [out]long *lCookies, [out]ULONG"]},{"entry":[{},"*pcFetched);"]},{"entry":[{},"HRESULT Skip(ULONG celt);"]},{"entry":[{},"HRESULT Reset( );"]},{"entry":[{},"HRESULT Clone([out]IWebCheckEnumSchedules **ppIEnum);"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"The Next function is called by the client application to retrieve cookies identifying schedule items associated with the URL or agent object one at a time in the enumeration. The client application can then use the cookie in a call to the IWebCheckScheduler:GetSchedule function described above. The Skip function jumps one schedule item forward in the enumeration, while the Reset function returns to the beginning of the enumeration.","The IWebCheckScheduleCollection interface. This interface is intended for client applications written in the Microsoft Visual Basic programming language to allow use of the \u201cfor each in\/next\u201d syntax of that language in enumerating schedules. The interface has member functions defined as follows:",{"@attributes":{"id":"p-0141","num":"0146"},"tables":{"@attributes":{"id":"TABLE-US-00012","num":"00012"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"HRESULT _NewEnum([out]lUnknown **ppEnum);"},{"entry":"HRESULT NewEnum([out]IWebCheckEnumSchedules **ppEnum);"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"The _NewEnum function returns an interface to an object implemented as the lEnum VARIANT data structure of Visual Basic. The NewEnum function returns the IWebCheckEnumSchedules interface.","The IWebCheckModuleEvents interface. The scheduler object  uses this interface to receive notifications from the agent object  and thereby keep track of active agent objects and their status. The interface has member functions defined as follows:",{"@attributes":{"id":"p-0144","num":"0149"},"tables":{"@attributes":{"id":"TABLE-US-00013","num":"00013"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"HRESULT UpdateBegin(long lCookie, SCODE scReason,"]},{"entry":[{},"BSTR lpURL, lUnknown *punkModule);"]},{"entry":[{},"HRESULT UpdateProgress(long lCookie, long lSizeDownloaded,"]},{"entry":[{},"long lCurrent, long lMax, BOOL fExternalEvent);"]},{"entry":[{},"HRESULT UpdateEnd(long lCookie, SCODE scReason, long"]},{"entry":[{},"lFlags);"]},{"entry":[{},"HRESULT UpdateBegin (long lCookie, SCODE scReason, BSTR"]},{"entry":[{},"lpURL);"]},{"entry":[{},"HRESULT UpdateProgress(long lCookie, long lCurrent, long"]},{"entry":[{},"lmax);"]},{"entry":[{},"HRESULT UpdateEnd(long lCookie, SCODE scReason);"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"The UpdateBegin function notifies the scheduler object that the agent object has begun a download operation. The ICookie parameter contains an identifier which is unique for the life of the agent object. The scReason parameter indicates a reason that this operation is being run by the agent object. The IpURL parameter designates the URL used in the download operation. The punkModule parameter points to the agent object. The function may return a value to indicate that no further notification relating to the download operations need be made by the agent object to the scheduler object.","The UpdateProgress function is called by the agent object to notify the scheduler object periodically of the progress of the download operation. The ISizeDownloaded parameter indicates the entire size of the data that has been downloaded so far. The ICurrent parameter indicates the current position in the download, starting at 0 and increasing in value as the download progresses. The IMax parameter indicates the maximum size of the download operation. (The IMax parameter may be\u20141 if the maximum value is unknown.) The agent object is required to call this method when anything changes. If the scheduler object passes the notifications to the client application connected by an event sink, it returns true as the fExternalEvent parameter. This allows the agent object to cut back on the number of UpdateProgress calls when the fExternalEvent parameter is false.","The UpdateEnd function is called by the agent object to notify the scheduler that the download operation is completed. The scReason parameter indicates whether the download operation ended successfully, or was aborted\/failed. The IFlags parameter indicates the result of the download operation using values defined by the agent object. The schedNotifyOnDelete parameter indicates that the scheduler object must notify the agent object before deleting the schedule item so that the agent object can performs cleanup (such as removing the \u201csticky\u201d flag marking from resources stored in the Internet cache  to allow their removal).","The IWebCheckAdviseSink interface. This interface is used as an advise sink to notify the client application of Web Check activities. The scheduler object  uses this interface to pass status notification from the agent object  on to the client application  when it has set global connections to the scheduler . The agent object  also uses the interface to communicate directly with the client application  when the client application has set callbacks on that specific agent object. The client application may instead or also support agent object specific advisory interfaces (defined by the agent object) for richer information reporting. The IWebCheckAdviseSink interface has member functions similar to like named functions of the IWebCheckModuleEvents interface described above, which are defined as follows:",{"@attributes":{"id":"p-0149","num":"0154"},"tables":{"@attributes":{"id":"TABLE-US-00014","num":"00014"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"HRESULT UpdateBegin(long lCookie, SCODE scReason,"]},{"entry":[{},"BSTR lpURL);"]},{"entry":[{},"HRESULT UpdateProgress(long lCookie, long lCurrent, long"]},{"entry":[{},"lMax);"]},{"entry":[{},"HRESULT UpdateEnd(long lCookie, SCODE scReason);"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"The DWebCheckEvents interface. This interface is similar to the IWebCheckAdviseSink interface, but is implemented as a dispatch interface. The interface has member functions similar to like named functions of the IWebCheckAdviseSink interface, which are defined as follows:",{"@attributes":{"id":"p-0151","num":"0156"},"tables":{"@attributes":{"id":"TABLE-US-00015","num":"00015"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"HRESULT UpdateBegin(long lCookie, SCODE scReason,"]},{"entry":[{},"BSTR lpURL);"]},{"entry":[{},"HRESULT UpdateProgress(long lCookie, long lCurrent, long"]},{"entry":[{},"lMax);"]},{"entry":[{},"HRESULT UpdateEnd(long lCookie, SCODE scReason);"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"7.2 Interfaces for Web Check Download Modules","The IWebCheckModuleControl interface. This interface provides member functions which are called from the Web Check scheduler object  during a download operation. The member functions are defined as follows:",{"@attributes":{"id":"p-0154","num":"0159"},"tables":{"@attributes":{"id":"TABLE-US-00016","num":"00016"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"HRESULT ScheduleTriggered(long lCookie, LPCWSTR"]},{"entry":[{},"lpURL, SYSTEMTIME pstTriggered, IUnknown"]},{"entry":[{},"*punkScheduleAdvise);"]},{"entry":[{},"HRESULT PauseUpdate(SCODE scReason);"]},{"entry":[{},"HRESULT ResumeUpdate();"]},{"entry":[{},"HRESULT AbortUpdate(SCODE scReason);"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"The ScheduleTriggered function is called from the scheduler object  when the download operation is to start. The ICookie parameter identifies the schedule item of the agent object. The punkScheduleAdvise parameter passes a pointer to the scheduler object's IWebCheckModuleEvents interface, which the agent object uses to notify the scheduler object of its status during the download operation.","The PauseUpdate function is called by the scheduler object  to cause the agent object  to stop downloading after any current downloads complete. The scheduler object  uses this function to control download operations performed at detected idle times and to suspend lower-priority downloads. In response to the call, the agent object  maintains its state until it is resumed or aborted.","The ResumeUpdate function is called by the scheduler object  to cause the agent object to start downloading again after the PauseUpdate function suspends a download operation.","The AbortUpdate function is called by the scheduler object  to cause the agent object to abort whatever operation it may be performing. The scheduler object  may abort an update operation of the agent object for the following reasons: the user requests to abort, the maximum download size limit is reached, and the computer becomes disconnected from the Internet  (). In response, the agent object immediately aborts any downloads. The agent object still notifies the scheduler object (via the punkScheduleAdvise->UpdateEnd function) when it's complete.","7.3 Interfaces for Off-Line Reading Download Module","The IWebCheckOfflineReading interface is implemented by the Off-line Reading agent object  to allow setting and retrieval of all off-line reading options for an individual URL, Internet shortcut, or like entity. This interface has member functions defined as follows:",{"@attributes":{"id":"p-0161","num":"0166"},"tables":{"@attributes":{"id":"TABLE-US-00017","num":"00017"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Property : IUnknown *Callback"]},{"entry":[{},"Property : long RecurseFlags"]},{"entry":[{},"Property: long RecurseLevels"]},{"entry":[{},"Property : BSTR SiteMapToFollow"]},{"entry":[{},"Property: long MaxSize"]},{"entry":[{},"Property : BSTR SiteMapToCreate"]},{"entry":[{},"HRESULT get_Callback([out]IUnknown"]},{"entry":[{},"**ppunkCallback);"]},{"entry":[{},"HRESULT put_Callback(IUnknown *punkCallback);"]},{"entry":[{},"HRESULT get_RecurseFlags([out]long *plFlags);"]},{"entry":[{},"HRESULT put_RecurseFlags(long lFlags);"]},{"entry":[{},"HRESULT get_RecurseLevels([out]long *plRecurseLevels);"]},{"entry":[{},"HRESULT put_RecurseLevels(long lRecurseLevels);"]},{"entry":[{},"HRESULT get_SiteMapToFollow([out]BSTR *pURL);"]},{"entry":[{},"HRESULT put_SiteMapToFollow(BSTR URL);"]},{"entry":[{},"HRESULT get_MaxSize([out]long *plMaxSize);"]},{"entry":[{},"HRESULT put_MaxSize(long lMaxSize);"]},{"entry":[{},"HRESULT get_SiteMapToCreate([out]BSTR *pPath);"]},{"entry":[{},"HRESULT put_SiteMapToCreate(BSTR Path);"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"The put_Callback and get_Callback functions set or retrieve a call back (e.g., the Web Check call back object  of the client application ) that the off-line reading agent object  uses to provide notifications relating to an update operation. The call back object  must support IPersistStream as well as IWebCheckOfflineReadingSink.","The get_RecurseFlags and put_RecurseFlags functions are called to set and retrieve flags controlling the off-line reading agent object's update operation. One or more of the flags shown in Table 6 can be set.",{"@attributes":{"id":"p-0164","num":"0169"},"tables":{"@attributes":{"id":"TABLE-US-00018","num":"00018"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 6"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Off-line Reading agent object Recurse Flags."}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"112pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Flag","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["WCOffReadMakeHTMLSticky","Make HTML sticky in cache"]},{"entry":["WCOffReadMakeImagesSticky","Make dependencies sticky in cache"]},{"entry":["WCOffReadDownloadSomeImages","Cache some dependencies (non-"]},{"entry":[{},"background"]},{"entry":[{},"images\/sounds\/avis)"]},{"entry":["WCOffReadDownloadAllImages","Cache all dependencies"]},{"entry":["WCOffReadLinksToOtherSites","Recurse - follow links other sites"]},{"entry":["WCOffReadLinksToward-","Otherwise will follow only links to"]},{"entry":["HomePage","same or lower \u2018level\u2019 on same site."]},{"entry":["WCOffReadOnlyLinksIn-","Will follow only links to site map"]},{"entry":["HTMLSiteMap","referenced in HTML. If this flag is"]},{"entry":[{},"not set, WebCheck will ignore any"]},{"entry":[{},"site maps referenced in the HTML"]},{"entry":[{},"but will use \u201cSiteMapToFollow\u201d if it"]},{"entry":[{},"is set."]},{"entry":["WCOffReadIgnoreIf-","Only recurse or cache"]},{"entry":["HTMLUnchanged","dependencies from that page if"]},{"entry":[{},"HTML has changed."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"The get_RecurseLevels and put_RecurseLevels functions retrieve and set the number of levels deep of hyperlinked documents to be downloaded in the update operation. The IRecurseLevels parameter indicates the number of levels of hyperlinked documents to follow recursively, and also download. When set to zero, the parameter indicates to not follow any links and download only top level page.","The get_MaxSize and put_MaxSize functions retrieve and set a limit on the amount of downloading performed for the update operation. The off-line reading agent object will stop downloading in the update operation when the limit is reached. Setting the limit to zero indicates no maximum size limit (which is the default).","The get_SiteMapToFollow and put_SiteMapToFollow functions retrieve and set a site map property of the off-line reading agent object . A site map is a file at a World-Wide Web site which includes a directory listing of resources that reside at the site. Setting the site map property causes the off-line reading agent object  to limit the recursive downloading of hyperlinked documents in the update operation to only those denoted in the site map at the root HTML page of the subject URL of the update operation. In other words, the agent object  does not follow or download documents at hyperlinks from the URL of the update operation that are not in the URL's site map. A URL of a specific custom site map can be passed in the pURL property to override using the site map at the root HTML page. If the site map property is not set, the off-line reading agent object  does not look at a site map unless the appropriate bit in RecurseFlags is set and a site map is referenced in the root HTML page.","The get_SiteMapToCreate and put_SiteMapToCreate sets or gets a local stored site map for off-line use. This site map will be created based on the URLs that the off-line reader downloads.","The IWebCheckOfflineReadingSink interface. This interface is implemented on the client application's call back object  to receive notifications specific to the off-line reading agent object . The agent object  provides progress notifications for an update operation on a single URL and all its associated URLs (i.e., dependencies and levels deep documents). The agent object  retrieves the documents depth-first, then dependencies (i.e., the top level or subject URL first, then first and subsequent levels deep URLs up to the maximum levels deep setting, and finally the dependencies of each URL). This interface has member functions defined as follows:",{"@attributes":{"id":"p-0170","num":"0175"},"tables":{"@attributes":{"id":"TABLE-US-00019","num":"00019"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"HRESULT UpdateInitialize(long lCookie, BSTR URL, [out]long"]},{"entry":[{},"*plOptions);"]},{"entry":[{},"HRESULT UpdateBegin();"]},{"entry":[{},"HRESULT UpdateProgress(long lLevel, long lNum, long lMax);"]},{"entry":[{},"HRESULT UpdateFinishedOneHTML(BSTR URL, long lFlags);"]},{"entry":[{},"HRESULT UpdateEnd(SCODE scReason);"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"The client application's call back object  can return a value, \u201cE_ABORT,\u201d to the off-line reading agent object  from any of these functions to request that the agent object stop the operation.","The UpdateInitialize function is called first and only once by the off-line reading agent object at the start of an update operation. The IpURL parameter of the function indicates the subject URL of the update operation. The off-line reading agent object passes a pointer to its IWebCheckOfflineReading interface as the pOfflineReading parameter. The client application's call back object  returns flags controlling which notifications the off-line reading agent object sends to the call back object in the plOptions parameters. These flags can include an WCOffReadNotifyProgress flag to indicate the call back object's UpdateProgress( ) function may be called periodically with progress updates, and an WCOffReadNotifyEachHTML flag to indicate the call back object's UpdateFinishedOneHTML( ) function will be called for each HTML URL successfully downloaded.","The UpdateBegin function is called once by the off-line reading agent object  at the start of downloading the top-level URL.","The UpdateProgress function is called by the off-line reading agent object  to indicate the progress of the update operation. The off-line ILevel parameter passed in the function call be the off-line reading agent object indicates the update operation's progress (ILevel==0, 1, 2, 3 for level of recursion currently being downloaded, and ILevel==\u22121 if dependencies being downloaded). The INum and IMax parameters represent current file number and maximum file number out of the files downloaded in the update operation, although the off-line reading agent object need not call the function for every file downloaded in the update operation.","The UpdateFinishedOneHTML function is called by the off-line reading agent object as soon as a given HTML URL has been downloaded. The off-line reading agent object passes a value as the IFlags parameter as shown in Table 7 below.",{"@attributes":{"id":"p-0176","num":"0181"},"tables":{"@attributes":{"id":"TABLE-US-00020","num":"00020"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 7"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"UpdateFinishedOneHTML Flags"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"112pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Flag","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["WCOffReadURLUnchanged","Off-line reading agent object has"]},{"entry":[{},"detected that the URL has not"]},{"entry":[{},"changed from the last time we"]},{"entry":[{},"downloaded it."]},{"entry":["WCOffReadWillFollowLinks","Off-line reading agent object will"]},{"entry":[{},"follow hyperlinks from this page one"]},{"entry":[{},"or more levels."]},{"entry":["WCOffReadWillDownloadImages","Off-line reading agent object will"]},{"entry":[{},"download images on this page."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"The UpdateEnd function is called once by the off-line reading agent object  when the subject URL of the update operation, and all linked documents and dependencies are done downloading. The agent object  also may be called if the update operation is aborted. The value passed as the scReason parameter will indicate which case.","7.4 Interfaces for the Favorites Web Check Download Module","The favorites agent object which implements the Internet shortcut updating operation  of  comprises two separate objects a favorites object and an Internet shortcut object. The Web Check scheduler  always keeps at least one favorites object scheduled. This favorites object controls checking all URLs in the Internet browser's favorites list and on the desktop for updates (e.g., the Internet shortcuts stored in the favorites folder and the desktop folder in the computer's file system). The favorites object also is responsible for enumerating all scheduled Internet shortcut objects to check for updates at the same time as the favorites folder. More specifically the favorites object operates by creating an Internet Shortcut object and using it to check each of the shortcuts found in the Favorites folder. The favorites object then enumerates the Internet Shortcut objects through the scheduler object  to find any other Internet shortcuts to check.","The IWebCheckFavorites interface. The favorites object provides an IWebCheckFavorites interface which allows the client application to control overall checking of URLs stored as Internet shortcuts in the favorites and desktop folders of the computer's file system. The IWebcheckFavorites interface has member functions defined as follows:",{"@attributes":{"id":"p-0181","num":"0186"},"tables":{"@attributes":{"id":"TABLE-US-00021","num":"00021"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"Property: VARIANT_BOOL CheckFavoritesFolder"},{"entry":"Property: VARIANT_BOOL CheckFavoritesSubFolders"},{"entry":"Property: VARIANT_BOOL CheckDesktop"},{"entry":"Property: VARIANT_BOOL CheckInternetShortcuts"},{"entry":"Property : IUnknown *Callback"},{"entry":"HRESULT get_CheckFavoritesFolder([out]VARIANT_BOOL"},{"entry":"*fCheckFavoritesFolder);"},{"entry":"HRESULT put_CheckFavoritesFolder(VARIANT_BOOL"},{"entry":"fCheckFavoritesFolder);"},{"entry":"HRESULT get_CheckFavoritesSubFolders([out]VARIANT_BOOL"},{"entry":"*fCheckFavoritesSubFolders);"},{"entry":"HRESULT put_CheckFavoritesSubFolders(VARIANT_BOOL"},{"entry":"fCheckFavoritesSubFolders);"},{"entry":"HRESULT get_CheckDesktop([out]VARIANT_BOOL"},{"entry":"*fCheckDesktop);"},{"entry":"HRESULT put_CheckDesktop(VARIANT_BOOL fCheckDesktop);"},{"entry":"HRESULT get_CheckInternetShortcuts([out]VARIANT_BOOL"},{"entry":"*fCheckInternetShortcuts);"},{"entry":"HRESULT put_CheckInternetShortcuts(VARIANT_BOOL"},{"entry":"fCheckInternetShortcuts);"},{"entry":"HRESULT get_Callback([out]IUnknown **ppunkCallback);"},{"entry":"HRESULT put_Callback(IUnknown *punkCallback);"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"The functions in the IWebCheckFavorite interface get and set properties of the favorites object which include a CheckFavoritesFolder value (default TRUE), a CheckFavoritesSubFolder value (default (TRUE), a Check Desktop value (default FALSE), and a CheckInternetShortcuts value (default TRUE). These value control whether the favorites object checks Internet shortcuts for updates that are contained in the favorites folder  (), favorites sub-folders (e.g., the favorites category folders - of ), the desktop folder, and Internet shortcuts stored elsewhere that are individually scheduled through the Internet shortcut by a client application (e.g., the Internet browser ), respectively. The get_Callback and put_Callback functions retrieve and set the call back object of the client application to which the favorites object sends notifications. The call back object must support the IPersistStream interface as well as the IWebCheckAdviseSink interface described above.","The IWebCheckInternetURL interface. The Internet shortcut object for a scheduled Internet shortcut implements this interface. The client application uses the interface to check a single URL to see if it's changed since the last time the Internet shortcut object was executed. The locally cached copy of the document indicated by the URL can be removed from the Internet cache  (). The Internet shortcut object uses the about web site properties obtained from the HTML document header as described above (if available) or a cyclic redundancy check (\u201cCRC\u201d) checksum calculated on the file to determine if the target of the Internet shortcut's URL has changed. The Internet shortcut checks only the target of the URL for updates, and not any indirectly referenced URLs such as frames in a frameset. The IWebChecklnternetURL interface has member functions defined as follows:",{"@attributes":{"id":"p-0184","num":"0189"},"tables":{"@attributes":{"id":"TABLE-US-00022","num":"00022"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Property : IUnknown *Callback"]},{"entry":[{},"Property: VARIANT_BOOL IsInternetShortcut"]},{"entry":[{},"HRESULT get_Callback([out]IUnknown **ppunkCallback);"]},{"entry":[{},"HRESULT put_Callback(IUnknown *punkCallback);"]},{"entry":[{},"HRESULT get_IsInternetShortcut([out]VARIANT_BOOL"]},{"entry":[{},"*fIsInternetShortcut);"]},{"entry":[{},"HRESULT put_IsInternetShortcut(VARIANT_BOOL"]},{"entry":[{},"fIsInternetShortcut);"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"The get_Callback and put_Callback functions retrieve and set the call back object of the client application to which the Internet shortcut is to send notifications of its activities. The call back object must support the IPersistStream interface as well as the IWebCheckAdviseSink interface described above. The Internet shortcut object passes the value S_TRUE as the scReason parameter in a call to the UpdateDone function of the IWebCheckAdviseSink interface on the call back object to indicate the URL has changed, and S_FALSE if the URL has not changed. The Internet shortcut object passes S_FALSE the first time it runs an update check for the URL.","The get_IsInternetShortcut and put_IslnternetShortcut functions retrieve and set the IsInternetShortcut property of the Internet shortcut object which controls whether the Internet shortcut object updates the about web site properties displayed in the dialog  of . If set to FALSE, the Internet shortcut object checks only whether the URL has changed since it was last checked by the Internet shortcut object.","7.5 Interfaces for Smart Folders Download Module","The smart folders updating operation  of  is handled with a smart folders agent object. The smart folders agent object provides an IWebCheckSmartFolders interface to allow client applications to programmatically control the smart folders updating operation . The IWebCheckSmartFolders interface has member functions defined as follows:",{"@attributes":{"id":"p-0189","num":"0194"},"tables":{"@attributes":{"id":"TABLE-US-00023","num":"00023"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Property : BSTR LocalDirectory;"]},{"entry":[{},"Property : long lOptions"]},{"entry":[{},"Property: long lMaxSize;"]},{"entry":[{},"Property : IUnknown *Callback"]},{"entry":[{},"HRESULT get_LocalDirectory([out]BSTR *lpDirectory);"]},{"entry":[{},"HRESULT put_LocalDirectory(BSTR lpDirectory);"]},{"entry":[{},"HRESULT get_Options([out]long *plOptions);"]},{"entry":[{},"HRESULT put_Options(long lOptions);"]},{"entry":[{},"HRESULT get_MaxSize([out]long *plMaxSize);"]},{"entry":[{},"HRESULT put_MaxSize(long lMaxSize);"]},{"entry":[{},"HRESULT get_Callback([out]IUnknown **ppunkCallback);"]},{"entry":[{},"HRESULT put_Callback(IUnknown *punkCallback);"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"These functions set and retrieve properties of the smart folders agent object that control aspects of the smart folder updating operation  (). The LocalDirectory property is the location of the smart folder updated by the agent object. The LMaxSize property specifies a maximum size of the data to download into this directory. The Callback property determines the callback object to which the smart folders agent object send activity notifications, which must support the IPersistStream and IWebCheckAdviseSink interfaces.","8. Programmatically Scheduling and Executing Web Check Update Operations.","With reference still to , the client application uses the interfaces described above to programmatically request, monitor, and control update operations by Web Check  (). The use of the interfaces to schedule an update operation using an off-line reading update operation as an example is illustrated in .","The client application  begins scheduling an off-line reading update operation by creating an instance of the off-line reading agent object . The client application  then calls functions described above from the IWebCheckOfflineReading interface  on the agent object  to set up all of the off-line reading options, such as the recursion depth, dependencies, maximum size limit, and other options. The client application also creates a callback object and passes a pointer to the callback object (i.e., a pointer to the callback object's IPersistStream interface ) in a call to the put_Callback function on the IWebCheckOffline reading interface .","The client application  next calls the NewScheduleltem function of the IWebCheckScheduler interface  of the Web Check scheduler object  to schedule the update operation of the off-line reading agent object . The scheduler object  returns a pointer to a IWebCheckScheduleltem interface for the client application to set options of the schedule item controlling the scheduled times of the off-line reading update operation. The client application calls functions on the IWebCheckScheduleltem interface to set the URL, the scheduled download times, and the off-line reading agent object in the schedule item.","Finally, the scheduler object  uses the IPersistStream interface  on the off-line reading agent object to persist the object so that it can be unloaded from the main memory  () until the scheduled time of the update operation. The off-line reading agent object in turn uses the IPersistStream interface on the callback object  to persist the call back object.","The use of the Web Check interfaces to execute the off-line reading update operation is illustrated in . When the next scheduled time set for the schedule item for the update operation arrives, the scheduler object  uses the IPersistStream interface to reload the off-line reading agent object  and restore its persisted state. The off-line reading agent object , in turn, reloads and restores the persisted state of the client application's call back object  using its IPersistStream interface.","The scheduler object  then calls the ScheduleTriggered function of the IWebCheckModuleControl interface  on the off-line reading agent object . This causes the off-line reading agent object to commence its update operation. The off-line reading agent object begins downloading any files that need to be updated into the Internet cache  as described above. As files are downloaded, the off-line reading agent object calls functions of the IWebCheckModuleEvents interface  on the scheduler object  and of the IWebCheckOfflineReadingSink interface  on the client application's callback object  to notify them of the status of the update operation. The scheduler object  passes notifications received via its IWebCheckModuleEvents interface to other client applications that have connected via the IConnectionPoint to receive the notifications on these other client application's IWebCheckAdviseSink or DWebCheckEvents interfaces.","Having described and illustrated the principles of our invention with reference to an illustrated embodiment, it will be recognized that the illustrated embodiment can be modified in arrangement and detail without departing from such principles. It should be understood that the programs, processes, or methods described herein are not related or limited to any particular type of computer apparatus, unless indicated otherwise. Various types of general purpose or specialized computer apparatus may be used with or perform operations in accordance with the teachings described herein. Elements of the illustrated embodiment shown in software may be implemented in hardware and vice versa.","In view of the many possible embodiments to which the principles of our invention may be applied, it should be recognized that the detailed embodiments are illustrative only and should not be taken as limiting the scope of our invention. Rather, we claim as our invention all such embodiments as may come within the scope and spirit of the following claims and equivalents thereto."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":["FIG. 2","FIG. 1","FIG. 9"]},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":["FIG. 4","FIG. 2"]},{"@attributes":{"id":"p-0020","num":"0019"},"figref":["FIG. 5","FIG. 4"]},{"@attributes":{"id":"p-0021","num":"0020"},"figref":["FIG. 6","FIG. 2"]},{"@attributes":{"id":"p-0022","num":"0021"},"figref":["FIG. 7","FIG. 6"]},{"@attributes":{"id":"p-0023","num":"0022"},"figref":["FIG. 8","FIG. 1"]},{"@attributes":{"id":"p-0024","num":"0023"},"figref":["FIG. 9","FIG. 2"]},{"@attributes":{"id":"p-0025","num":"0024"},"figref":["FIG. 10","FIG. 9"]}]},"DETDESC":[{},{}]}
