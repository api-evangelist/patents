---
title: Stochastic block allocation for improved wear leveling
abstract: Systems and methods are disclosed for stochastic block allocation for improved wear leveling for a system having non-volatile memory (“NVM”). The system can probabilistically allocate a block or super block for wear leveling based on statistics associated with the block or super block. In some embodiments, the system can select a set of blocks or super blocks based on a pre-determined threshold of a number of cycles (e.g., erase cycles and/or write cycles). The block or super block can then be selected from the set of super blocks. In other embodiments, the system can use a fully stochastic approach by selecting a block or super block based on a biased random variable. The biased random variable may be generated based in part on the number of cycles associated with each block or super block of the NVM.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08762625&OS=08762625&RS=08762625
owner: Apple Inc.
number: 08762625
owner_city: Cupertino
owner_country: US
publication_date: 20110414
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE DISCLOSURE","SUMMARY OF THE DISCLOSURE","DETAILED DESCRIPTION OF THE DISCLOSURE"],"p":["NAND flash memory, as well as other types of non-volatile memories (\u201cNVMs\u201d), are commonly used for mass storage. For example, consumer electronics such as portable media players often include flash memory to store music, videos, and other media.","A NVM can include multiple blocks and\/or super blocks. In order to extend the lifespan of a NVM, it is preferable to have similar wear on all of the super blocks of a NVM. Therefore, in some cases, electronic devices may perform an operation known as \u201cwear leveling\u201d on one or more super blocks of the NVM.","In order to determine which super block to select for wear leveling, a system may rely on statistics associated with each super block of the NVM. These statistics may indicate the number of times a particular super block has been erased or programmed, and are generally aggregated for a period of time before being recorded on the NVM.","When a system experiences a power loss, however, unrecorded statistics may become lost. As a result, the system may be unable to accurately determine which block to select for wear leveling purposes.","Systems and methods are disclosed for stochastic block allocation for improved wear leveling. As used herein, \u201cstochastic\u201d block allocation can refer to the non-deterministic selection of a block, where one or more blocks or super blocks have a random or probabilistic chance of being allocated.","In particular, a system having non-volatile memory (\u201cNVM\u201d) can probabilistically allocate a block or super block based on statistics associated with the block or super block. In some embodiments, the system can select a set of blocks or super blocks based on a pre-determined threshold of a number of cycles (e.g., erase cycles and\/or write cycles). A block or super block can then be selected from the set of super blocks. In other embodiments, the system can use a fully stochastic approach by selecting a block or super block based on a biased random variable. In some cases, the biased random variable may be generated based in part on the number of cycles associated with each block or super block of the NVM.","Systems and methods for stochastic block allocation for improved wear leveling are provided. As used herein, \u201cstochastic\u201d block allocation can refer to the non-deterministic selection of a block, where one or more blocks or super blocks have a random or probabilistic chance of being allocated.","A NVM interface of a system can probabilistically allocate a block or super block based on statistics associated with the block or super block. The block or super block may be allocated for any suitable programming purposes including, for example, host writing, garbage collection, and wear leveling. In some embodiments, in order to allocate a particular super block, a set of super blocks can be selected from multiple super blocks of a NVM based on a pre-determined threshold of a number of cycles (e.g., erase cycles and\/or write cycles). For example, if the NVM interface determines that a lower-cycled super block needs to be allocated for dynamic host writes and garbage collection (\u201cGC\u201d) writes, the NVM interface can select one or more super blocks that have a number of cycles that is lower than or equal to a pre-determined threshold (e.g., a 10percentile) of a total distribution of the number of cycles of the super blocks of the NVM. As another example, if the NVM interface determines that a higher-cycled super block needs to be allocated for wear leveling writes or static host writes, the NVM interface can select one or more super blocks that have a number of cycles that is greater than or equal to a pre-determined threshold (e.g., a 90percentile) of a total distribution of the number of cycles of the super blocks of the NVM.","In other embodiments, the system can use a fully stochastic approach by selecting a block or super block based on a biased random variable. The biased random variable may be generated based at least in part on the number of cycles associated with each block or super block of the NVM. In some cases, the probability of allocating a particular block or super block can increase if the number of cycles of the block or super block is closer to the number of cycles of a lowest-cycled or a highest-cycled block or super block.",{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 1","b":["100","100"]},"Electronic device  can include system-on-a-chip (\u201cSoC\u201d)  and non-volatile memory (\u201cNVM\u201d) . Non-volatile memory  can include a NAND flash memory based on floating gate or charge trapping technology, NOR flash memory, erasable programmable read only memory (\u201cEPROM\u201d), electrically erasable programmable read only memory (\u201cEEPROM\u201d), Ferroelectric RAM (\u201cFRAM\u201d), magnetoresistive RAM (\u201cMRAM\u201d), or any combination thereof.","NVM  can be organized into \u201cblocks\u201d, which can be the smallest erasable unit, and further organized into \u201cpages\u201d, which can be the smallest unit that can be programmed or read. In some embodiments, NVM  can include multiple integrated circuits, where each integrated circuit may have multiple blocks. Memory locations (e.g., blocks or pages of blocks) from corresponding integrated circuits may form \u201csuperblocks\u201d. Each memory location (e.g., page or block) of NVM  can be referenced using a physical address (e.g., a physical page address or physical block address).","System-on-a-chip  can include SoC control circuitry , memory , and NVM interface . SoC control circuitry  can control the general operations and functions of SoC  and the other components of SoC  or device . For example, responsive to user inputs and\/or the instructions of an application or operating system, SoC control circuitry  can issue read or write commands to NVM interface  to obtain data from or store data in NVM . For clarity, data that SoC control circuitry  may request for storage or retrieval may be referred to as \u201cuser data,\u201d even though the data may not be directly associated with a user or user application. Rather, the user data can be any suitable sequence of digital information generated or obtained by SoC control circuitry  (e.g., via an application or operating system).","SoC control circuitry  can include any combination of hardware, software, and firmware, and any components, circuitry, or logic operative to drive the functionality of electronic device . For example, SoC control circuitry  can include one or more processors that operate under the control of software\/firmware stored in NVM  or memory .","SoC control circuitry  can dispatch one or more commands to NVM . In some embodiments, SoC control circuitry  can include a block device driver or wrapper that can be configured to dispatch application programming interface (\u201cAPI\u201d) operations to NVM  or a controller of NVM . In some embodiments, SoC control circuitry  can modify one or more parameters of the block device driver or wrapper in order to transfer information to NVM . For example, by modifying the one or more parameters, SoC control circuitry  can transfer information associated with commands used to access NVM  (e.g., read, program, erase, and\/or write-multi commands).","Memory  can include any suitable type of volatile memory, such as random access memory (\u201cRAM\u201d) (e.g., static RAM (\u201cSRAM\u201d), dynamic random access memory (\u201cDRAM\u201d), synchronous dynamic random access memory (\u201cSDRAM\u201d), double-data-rate (\u201cDDR\u201d) RAM), cache memory, read-only memory (\u201cROM\u201d), or any combination thereof. Memory  can include a data source that can temporarily store user data for programming into or reading from non-volatile memory . In some embodiments, memory  may act as the main memory for any processors implemented as part of SoC control circuitry .","NVM interface  may include any suitable combination of hardware, software, and\/or firmware configured to act as an interface or driver between SoC control circuitry  and NVM . For any software modules included in NVM interface , corresponding program code may be stored in NVM  or memory .","NVM interface  can perform a variety of functions that allow SoC control circuitry  to access NVM  and to manage the memory locations (e.g., pages, blocks, super blocks, integrated circuits) of NVM  and the data stored therein (e.g., user data). For example, NVM interface  can interpret the read or write requests from SoC control circuitry , perform wear leveling, and generate read and program instructions compatible with the bus protocol of NVM .","While NVM interface  and SoC control circuitry  are shown as separate modules, this is intended only to simplify the description of the embodiments of the invention. It should be understood that these modules may share hardware components, software components, or both. For example, SoC control circuitry  may execute a software-based memory driver for NVM interface .","In some embodiments, electronic device  can include a target device, such as a flash memory drive or Secure Digital (\u201cSD\u201d) card, that includes NVM  and some or all portions of NVM interface  (e.g., a translation layer, discussed below). In these embodiments, SoC  or SoC control circuitry  may act as the host controller for the target device. For example, as the host controller, SoC  can issue read and write requests to the target device.",{"@attributes":{"id":"p-0029","num":"0028"},"figref":["FIG. 2","FIG. 1","FIG. 1"],"b":["200","100","200"]},"Electronic device  can include file system , NVM driver , NVM bus controller , and NVM . In some embodiments, file system  and NVM driver  may be software or firmware modules, and NVM bus controller  and NVM  may be hardware modules. Accordingly, in these embodiments, NVM driver  may represent the software or firmware aspect of NVM interface , and NVM bus controller  may represent the hardware aspect of NVM interface .","File system  can include any suitable type of file system, such as a File Allocation Table (\u201cFAT\u201d) file system or a Hierarchical File System Plus (\u201cHFS+\u201d), and may be part of the operating system of electronic device  (e.g., part of SoC control circuitry  of ). In some embodiments, file system  may include a flash file system, which provides a logical to physical mapping of pages. In these embodiments, file system  may perform some or all of the functionalities of NVM driver  discussed below, and therefore file system  and NVM driver  may or may not be separate modules.","File system  may manage file and folder structures for the application and operating system. File system  may operate under the control of an application or operating system running on electronic device , and may provide write and read commands to NVM driver  when the application or operating system requests that information be read from or stored in NVM . Along with each read or write command, file system  can provide a logical address to indicate where the user data should be read from or written to, such as a logical page address or a logical block address (\u201cLBA\u201d) with a page offset.","File system  may provide read and write requests to NVM driver  that are not directly compatible with NVM . For example, the logical addresses may use conventions or protocols typical of hard-drive-based systems. A hard-drive-based system, unlike flash memory, can overwrite a memory location without first performing a block erase. Moreover, hard drives may not need wear leveling to increase the lifespan of the device. Therefore, NVM interface  can perform any functions that are memory-specific, vendor-specific, or both to handle file system requests and perform other management functions in a manner suitable for NVM .","NVM driver  can include translation layer . In some embodiments, translation layer  may be or include a flash translation layer (\u201cFTL\u201d). On a write command, translation layer  can map the provided logical address to a free, erased physical location on NVM . On a read command, translation layer  can use the provided logical address to determine the physical address at which the requested data is stored. Because each NVM may have a different layout depending on the size or vendor of the NVM, this mapping operation may be memory and\/or vendor-specific.","NVM driver  may interface with NVM bus controller  to complete NVM access commands (e.g., program, read, and erase commands). Bus controller  may act as the hardware interface to NVM , and can communicate with NVM  using the bus protocol, data rate, and other specifications of NVM .","NVM interface  may manage NVM  based on memory management data, sometimes referred to herein as \u201cmetadata\u201d. The metadata may be generated by NVM driver  or may be generated by a module operating under the control of NVM driver . For example, metadata can include any information used for managing the mapping between logical and physical addresses, bad block management, wear leveling, error-correcting code (\u201cECC\u201d) data used for detecting or correcting data errors, or any combination thereof. The metadata may include data provided by file system  along with the user data, such as a logical address. Thus, in general, \u201cmetadata\u201d may refer to any information about or relating to user data or used generally to manage the operation and memory locations of a non-volatile memory.","NVM interface  may be configured to store metadata in NVM . In some embodiments, NVM interface  may store metadata associated with user data at the same memory location (e.g., page) in which the user data is stored. For example, NVM interface  may store user data, the associated logical address, and ECC data for the user data at one or more memory locations of NVM . NVM interface  may also store other types of metadata about the user data in the same memory location.","NVM interface  may store the logical address so that, on power-up of NVM  or during operation of NVM , electronic device  can determine what data resides at that location. In particular, because file system  may reference the user data according to its logical address and not its physical address, NVM interface  may store the user data and logical address together to maintain their association. This way, even if a separate table maintaining the physical-to-logical mapping in NVM  becomes outdated, NVM interface  may still determine the proper mapping at power-up or reboot of electronic device , for example.","In addition to logical-to-physical address mapping, translation layer  can perform any of the other functions that may be typical of flash translation layers, such as garbage collection and wear leveling. For example, translation layer  can perform wear leveling to provide for similar wear on all blocks of NVM .","Conventionally, translation layer  can monitor statistics associated with each free super block of NVM . As used herein, \u201cstatistics\u201d can refer to the number of cycles (e.g., erase cycles or write cycles) associated with each super block of NVM . In addition, as used herein, \u201cfree\u201d super blocks may be one or more super blocks of NVM  that are available for programming.","For example, translation layer  can monitor the number of erase cycles and\/or write cycles that each super block of NVM  has cycled through. Then, at a suitable time (e.g., during idle time or during a garbage collection process), translation layer  can select the lowest-cycled super block of NVM  to initiate wear leveling. As used herein, the lowest-cycled super block can be a super block that is associated with the smallest number of cycles, and consequently may have received less wear as compared to other super blocks of the NVM.","After selecting the lowest-cycled super block, translation layer  can initiate wear leveling on that super block. For example, translation layer  can free up and erase the lowest-cycled super block. In some embodiments, translation layer  can copy the valid data stored on the lowest-cycled super block to another super block that is fairly dynamic (e.g., the highest-cycled block of NVM ). As used herein, the highest-cycled super block can be a super block that is associated with the highest number of cycles, and consequently has received more wear as compared to other super blocks of the NVM.","After the lowest-cycled super block has been erased, NVM interface  can program the lowest-cycled super block with new user data received from file system . Consequently, by performing wear leveling periodically on one or more super blocks of NVM , translation layer  can ensure that all super blocks of NVM  will ultimately have undergone a similar number of cycles and will therefore receive similar wear.","Because the wear leveling process depends on accurate statistics, it is preferable for statistics to be recorded each time a write or erase operation is performed on a super block. Generally, however, in order to decrease write amplification and improve system performance, statistics are aggregated for a period of time before being recorded to NVM . As a result, the granularity with which statistics are recorded and when the events actually occur (e.g., when super blocks are erased or programmed) can be different.","Moreover, statistics may be lost if a system failure (e.g., a power loss, error(s) in statistics recording, or a shut-down path error) occurs before statistics have been recorded to NVM . This may consequently cause wear leveling problems in a system. That is, due to the lost statistics, the same super block (e.g., the lowest-cycled and\/or highest-cycled super block) may repeatedly be allocated for wear leveling purposes, which can lead to a block allocation bias (e.g., a physical skew in terms of super block cycling). Furthermore, in such a scenario, even if there are multiple super blocks that have the same lowest number or highest number of cycles, the system may still select the same super block due to the properties of a minimum or a maximum function. In particular, the system may automatically select either the first super block satisfying a minimum function (e.g., the lowest-cycled super block) or last super block satisfying a maximum function (e.g., the highest-cycled super block). Due to the block allocation bias, the system may be unaware that a particular super block is being cycled a disproportionate number of times.","Accordingly, a more robust system can be designed where super blocks are allocated stochastically rather than deterministically. As used herein, \u201cstochastic\u201d block allocation can refer to the non-deterministic selection of a block, where one or more blocks or super blocks have a random or probabilistic chance of being allocated.","In particular, instead of only allocating the lowest-cycled or the highest-cycled super block, the system can select from a set of super blocks, where each super block of the set of super blocks has a particular probability (e.g., a non-zero probability) of being selected. As a result, the NVM can become more wear leveled because the system can improve block allocation during both wear leveling and host writes. In particular, the system can avoid block allocation bias despite experiencing statistics loss.","In some embodiments, the set of super blocks can be selected based on a pre-determined threshold of a number of cycles (e.g., erase cycles and\/or write cycles). For example,  shows an illustrative total distribution  of the number of cycles associated with various super blocks of a NVM (e.g., NVM  of  or NVM  of ). In particular, total distribution  may correspond to the number of cycles associated with free super blocks of the NVM. Alternatively, total distribution  may correspond to the number of cycles associated with all super blocks of the NVM.","Although the following discussion refers to allocating super blocks, persons skilled in the art will appreciate that one or more blocks can also be allocated. Persons skilled in the art will also appreciate that a NVM interface (e.g., NVM interface  of  or NVM interface  of ) and\/or a control circuitry (e.g., SoC control circuitry  of ) of the system may perform one or more of the steps discussed below.","In particular, an NVM interface can select a set of super blocks from the free super blocks of a NVM. In some embodiments, if the NVM interface determines that a lower-cycled super block needs to be allocated, the NVM interface can select a set of super blocks that have a number of cycles that is lower than or equal to a pre-determined threshold of a total distribution of the number of cycles of multiple super blocks of the NVM (e.g., free super blocks or all super blocks of the NVM).","For example, as shown in , the pre-determined threshold (e.g., T) may be the 10percentile of total distribution  of the number of cycles of the super blocks of a NVM. That is, the NVM interface can select super blocks  that fall between the 0and 10percentile of total distribution  (e.g., each super block of super blocks  can have a number of cycles that is in a 10percentile of total distribution ). Correspondingly, at least one super block of set of super blocks  can be a lowest-cycled super block (e.g., there may be multiple super blocks that have the same lowest number of cycles). Persons skilled in the art will appreciate that the pre-determined threshold may be set any suitable percentile of total distribution  (e.g., 20percentile, 30percentile, and so forth), where the pre-determined threshold can be selected based on one or more statistical parameters (e.g., mean and\/or median of total distribution ).","Similarly, if the NVM interface determines that a higher-cycled super block needs to be allocated, the NVM interface can select a set of super blocks that have a number of cycles that is greater than or equal to a pre-determined threshold of the total distribution of the number of cycles of multiple super blocks of the NVM.","For example, as shown in , the pre-determined threshold (e.g., T) may be the 90percentile of total distribution  of the number of cycles of the super blocks of the NVM. That is, the NVM interface can select super blocks  that fall between the 90and 100percentile of total distribution  for the set of super blocks (e.g., each super block of super blocks  can have a number of cycles that is in a 90percentile of total distribution ). Correspondingly, at least one super block of the set of super blocks  can be a highest-cycled super block. Persons skilled in the art will appreciate that the pre-determined threshold may be set any suitable percentile of total distribution  (e.g., 80percentile, 70percentile, and so forth), where the pre-determined threshold can be selected based on one or more statistical parameters (e.g., mean and\/or median of total distribution ).","After selecting the set of super blocks, the NVM interface can allocate a super block of the set of super blocks, wherein the super block can be stochastically selected from the set of super blocks. For example, the NVM interface can allocate a random super block from the set of super blocks. As another example, the NVM interface can allocate a super block based on one or more statistical parameters. The one or more statistical parameters can include the mean of total distribution , the median of total distribution , any other suitable statistical parameter(s), and\/or any combination thereof.","Turning now to , flowcharts of illustrative processes are shown in accordance with various embodiments of the invention. These processes may be executed by one or more components of a system (e.g., electronic device  of  or electronic device  of ). For example, at least some of the steps in the processes of  may be performed by a NVM interface (e.g., NVM interface  of  or NVM interface  of ). In addition, persons skilled in the art will appreciate that at least some of the steps may be performed by control circuitry (e.g., SoC control circuitry  of ).","Turning first to , process  is shown for allocating a super block. Process  may begin at step , and, at step , the NVM interface can determine that programming (e.g., wear leveling) needs to be performed on a NVM (e.g., NVM  of  or NVM  of ).","At step , the NVM interface can select a set of super blocks from a plurality of super blocks of a NVM (e.g., free super blocks) that satisfy a pre-determined threshold of a number of cycles (e.g., erase cycles and\/or write cycles). For example, the NVM interface can select set of super blocks  () that are in the 10percentile of total distribution  (). As another example, the NVM interface can select set of super blocks  () that are in the 90percentile of total distribution  (). In some cases, the pre-determined threshold can be selected based on one or more statistical parameters (e.g., mean and\/or median) of a total distribution of the number of cycles of the plurality of super blocks.","Continuing to step , the NVM interface can allocate a super block of the set of super blocks, where the super block can be stochastically selected from the set of super blocks. For example, the NVM interface can select to allocate a random super block from the set of super blocks. As another example, the NVM interface can select to allocate a super block based on one or more statistical parameters. Therefore, in contrast to a conventional system, the super block that is allocated can be from the same statistical grouping as the lowest-cycled or highest-cycled super block, but is not necessarily the lowest-cycled or the highest-cycled super block.","At step , the NVM interface can direct a bus controller (e.g., NVM bus controller  of ) to program the allocated super block (e.g., perform wear leveling using the allocated super block). Process  may then end at step .","Turning now to , process  is shown for allocating a lower-cycled super block or a higher-cycled super block. In some embodiments, process  can represent a more detailed view of the selecting a set of super blocks step  and the allocating the super block step  of process  ().","Process  may begin at step , and, at step , the NVM interface can determine whether a lower-cycled super block needs to be allocated (e.g., for dynamic host writes or GC writes). If, at step , the NVM interface determines that a lower-cycled super block needs to be allocated, process  may move to step . As used herein, \u201cdynamic host writes\u201d can refer to writes of data that are frequently updated or changed.","At step , the NVM interface can select a set of super blocks (e.g., free super blocks), where each super block has a number of cycles (e.g., erase cycles and\/or write cycles) that is within a pre-determined range of the number of cycles (e.g., erase cycles and\/or write cycles) of a lowest-cycled block. In particular, the pre-determined range can have a lower end that is equal to the number of cycles of the lowest-cycled block, and an upper end that is equal to a pre-determined percentile (e.g., 10percentile) of a total distribution (e.g., total distribution  of ) of the number of cycles of multiple super blocks of a NVM (e.g., NVM  of  or NVM  of ). After selecting the set of super blocks, process  may move to step .","At step , the NVM interface can allocate a super block of the set of super blocks, where the super block can be stochastically selected from the set of super blocks. The NVM interface can then direct a bus controller (e.g., NVM bus controller  of ) to program the allocated super block (e.g., perform wear leveling on the NVM using the allocated super block). Process  may then end at step .","Referring back to step , if the NVM interface instead determines that a higher-cycled super block needs to be allocated (e.g., for wear leveling writes or static host writes), process  may move to step . As used herein, \u201cstatic host writes\u201d can refer to writes of data that are rarely updated or changed.","At step , the NVM interface can select a set of super blocks, where each super block has a number of cycles (e.g., erase cycles and\/or write cycles) that is within a pre-determined range of the number of cycles (e.g., erase cycles and\/or write cycles) of a highest-cycled block. For example, the pre-determined range can have a lower end that is equal to a pre-determined percentile (e.g., 90percentile) of a total distribution (e.g., total distribution  of ) of the number of cycles of multiple super blocks of the NVM, and an upper end that is equal to the number of cycles of the highest-cycled block. After selecting the set of super blocks, process  may move to step , where the NVM interface can allocate a super block of the set of super blocks.","In some embodiments, a block or super block can be allocated based on a biased random variable using a fully stochastic approach. For example, the biased random variable may be generated based at least in part on the number of cycles (e.g., erase cycles and\/or write cycles) associated with each block or super block of a NVM.","Referring now to , a flowchart of illustrative process  is shown for allocating a super block. Although the following discussion refers to allocating blocks, persons skilled in the art will appreciate that one or more super blocks can also be allocated.","Process  may begin at step , where the NVM interface can determine that a block needs to be allocated. Then, at step , the NVM interface can assign weights to multiple blocks (e.g., multiple free blocks) of a NVM (e.g., NVM  of  or NVM  of ), where each weight can be assigned to a block based on the number of cycles associated with the block.","For example,  shows a graph  of illustrative weights  and  that may be assigned to multiple blocks of a NVM. Weights  can correspond to weights that are assigned if a lower-cycled block needs to be allocated, and weights  can correspond to weights that are assigned if a higher-cycled block needs to be allocated. As shown in , weights  can have lower values as the number of cycles corresponding to blocks increases, and consequently, lower cycled blocks have a higher probability of being selected. In contrast, weights  can have higher values as the number of cycles corresponding to blocks increases, and consequently, higher cycled blocks have a higher probability of being selected.","Referring back to , after assigning weights to each free block at step , process  may move to step . At step , the NVM interface can generate a sum of the weights.","Then, at step , the NVM interface can select a random variable based on the sum of the weights. The random variable can be selected using any suitable approach. For example, the NVM interface can subtract the sum of the weights by one to generate an upper range value. The random variable can then be selected to have a range between zero and the upper range value. In some cases, the NVM interface may introduce additional bias to the random variable by, for instance, squaring or cubing the random variable. The random variable can thus be biased towards either a lower-cycled block or a higher-cycled block.","Continuing to step , the NVM interface can select a block of the multiple blocks of the NVM. Then, at step , the NVM interface can compare the weight assigned to the block to the random variable. If, at step , the NVM interface determines that the random variable is less than the weight assigned to the block, process  may move to step .","At step , the NVM interface can allocate the block for programming. Moreover, the NVM interface can direct a bus controller (e.g., NVM bus controller  of ) to perform programming on the block (e.g., perform wear leveling on the NVM using the allocated block). Process  may then end at step .","Referring back to step , if the NVM interface instead determines that the random variable is greater than or equal to the weight assigned to the block, process  may move to step . At step , the NVM interface can update the random variable by subtracting the weight assigned to the block from the random variable. Process  may then return to step , where the NVM interface can select another block of the NVM for comparison to the updated random variable. The NVM interface can thus iterate along the multiple blocks until it finds a block that satisfies the condition in step .","Accordingly, because of the biased random variable, the probability of allocating a particular block increases if the block has a lower or higher number of cycles. However, in contrast to a conventional approach, the probability of selecting a block that is not the lowest-cycled or highest-cycled block is non-zero. As a result, wear leveling does not depend on having completely accurate statistics, and block allocation bias can be avoided as variation is introduced into the blocks that are selected for allocation.","It should be understood that processes , , and  of  are merely illustrative. Any of the steps may be removed, modified, or combined, and any additional steps may be added, without departing from the scope of the invention.","The described embodiments of the invention are presented for the purpose of illustration and not of limitation."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The above and other aspects and advantages of the invention will become more apparent upon consideration of the following detailed description, taken in conjunction with accompanying drawings, in which like reference characters refer to like parts throughout, and in which:",{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIGS. 1 and 2"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 7"}]},"DETDESC":[{},{}]}
