---
title: On-demand translator for localized operating systems
abstract: A method of testing a computer program written for use in a foreign language can include identifying text presented upon a display screen, wherein the text is in a first language, and automatically acquiring the text from the display screen. The text can be translated from the first language to a second language. The translated text can be presented in the second language upon the display screen.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07669198&OS=07669198&RS=07669198
owner: International Business Machines Corporation
number: 07669198
owner_city: Armonk
owner_country: US
publication_date: 20041118
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION"],"p":["1. Field of the Invention","The present invention relates to testing computer programs and, more particularly, to testing computer programs that utilize different languages.","2. Description of the Related Art","Software, whether system software or application software, is subjected to extensive testing to ensure that the final product is free from defects. Typically, software is tested by a quality assurance (QA) engineer or other personnel. The QA engineer subjects the software to various tests and compares the output of the software against known or expected results.","As software has become a global market, the potential user base for a given software title may speak any of a number of different languages. As a result, software may be configured to utilize the English language when sold in the U.S.A., the Japanese language when sold in Japan, Italian when sold in Italy, etc. Such is the case not only with regard to application programs, but also with system software such as operating systems, particularly localized operating systems executing within a single machine.","This linguistic complexity can exacerbate the already difficult task of testing software. Essentially, each linguistically different version of a program must be independently tested. That is, the Japanese version of a software title often is tested and verified independently of the English version or the Italian version. In order to adequately test such software, however, the QA engineer must be able to comprehend text that the software under test presents upon a display screen.","To date, several different techniques for testing software in different languages have been used. One involves hiring a QA engineer that is proficient in each relevant language. A QA engineer that is proficient in Japanese can test programs intended for Japanese speaking users. A QA engineer that is proficient in English can test programs intended for English speaking users.","Another technique is to utilize QA engineers that are proficient in only a single language and manually translate text from the display screen as needed. The QA engineer begins testing a program that is intended for users that speak a language that is foreign to, or different from, that of the QA engineer. As text is presented upon the display in the foreign language, the QA engineer manually selects, copies, and pastes the text into a translation program. The translation program translates the text into a language in which the QA engineer is proficient thereby allowing the QA engineer to review the text properly.","Yet another alternative is to pair a human translator with the QA engineer. This approach can be useful in cases where the text to be translated in not selectable. The human translator can translate text from the display screen as needed throughout the testing process. Each of these techniques, however, requires significant resources in terms of personnel, time, and cost.","The present invention provides a solution for testing software intended for users that speak different languages. One embodiment of the present invention can include a method of testing a computer program written for use in a foreign language. The method can include displaying a computer desktop that includes a program written for use in a foreign language on a display screen, and identifying all text presented within the display screen and automatically acquiring the text. The text can be in a first language. The method also can include translating the text from the first language to a second language and reproducing the computer desktop that includes the program written for use in the foreign language, utilizing text from the second language.","Another embodiment of the present invention can include a system for testing a computer program written for use in a foreign language. The system can include a display means for displaying a computer desktop that includes a program written for use in a foreign language, an interface to a computer program under test. The interface can identify all text that is presented upon the display means and automatically acquire the text. The text can be in a first language. The system further can include a translator configured to translate the text from the first language to a second language and means for reproducing the computer desktop that includes the program written for use in the foreign language, utilizing text from the second language.","Another embodiment of the present invention can include a machine readable storage being programmed to cause a machine to perform the various steps described herein.","The present invention provides a solution for testing software intended for users that speak different languages. The present invention allows a quality assurance (QA) engineer, or other test personnel, to test software that is written for use by persons that speak a language other than that of the tester. That is, the intended users speak a language that is foreign to that spoken by the QA engineer. In accordance with the inventive arrangements disclosed herein, the present invention provides a real-time, or near real-time, translation of displayed text from application and\/or system software. Text from the software is translated from a first language to a second language in which the tester is proficient. This allows the QA engineer to test software without being proficient in the language of the software under test. Thus, software intended for use by Japanese speaking users can be tested by a QA engineer that is proficient only in English.",{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 1","b":["100","100","105","110","105","110","105","110"]},"Computer system  can include an operating system (OS)  intended for use by speakers of a first language. That is, the OS  can be a foreign language OS, such as one intended for use by speakers of Japanese, Italian, Chinese, or any other language that is different from that of the OS . OS , disposed within computer system , can be intended for use by speakers of a second language such as English. The OS  can be localized in that it can be limited to executing solely within computer system . OS  can be localized in similar fashion within computer system . In this embodiment, the QA engineer using system  will likely have little or no proficiency in the first language used by OS , but have at least minimal proficiency with the second language used by OS .","Computer system  further can include application software . Application software  can be configured to execute within OS  and further can be configured for use by users proficient in the first language. The application software  can execute within computer system  to undergo testing. Notwithstanding, it should be appreciated that one or more aspects of the OS  can be tested as well. In that case, application software  can be excluded, or not executed, depending upon the particular functions and software, i.e. application or system, undergoing testing.","An interface  also is included which facilitates communication with a translator program . In one embodiment of the present invention, the interface  can be one or more accessibility application programming interfaces (API's). Accessibility API's provide programmatic access to user interface elements, whether in application software or system software. One example of accessibility API's can include Microsoft\u00ae Active Accessibility\u00ae available from Microsoft Corporation of Redmond, Wash. It should be appreciated that the particular accessibility interface or API can vary according to the type of OS used.","Accessibility API's provide other programs, such as the translator program. , with the ability to obtain information about or manipulate user interface elements corresponding to application software  and\/or OS . Thus, using accessibility. API's, user interface objects can be identified. Further, attributes of the interface objects, such as text that the interface object causes to be displayed upon a display screen, can be obtained.","In another embodiment, the interface  can be a program that is capable of capturing an image from the desktop displayed by computer system . The captured image would include the text to be translated. The interface  can be configured to capture images and utilize a text extraction technology, such as optical character recognition or another image processing technique, to obtain text specified within the captured image. Once extracted, the text can be provided to the translator program .","The viewer  can be any of a variety of remote control applications which facilitate control of a remote computer system, referred to as a client, from another computer system, referred to as the host. The viewer  allows an operator of computer system , the host in this case, to view the desktop, or a portion of the desktop, of another computer system such as computer system . The viewer  interacts with remote controller , which is software that facilitates control over one or more aspects of computer system  from the viewer . In one embodiment, the remote controller  allows the operator of computer system  to view at least a portion of the desktop of the computer system  via the viewer . In another embodiment, the operator of computer system  can take control of one or more aspects of computer system .","The translator  is a program that is configured to receive text input in a first language and translate the received text into a second and different language. Accordingly, the translator  can receive text from the interface , whether the text was obtained using accessibility API's and\/or image capture\/text extraction technology, and translate that text to a specified language. In one embodiment, the specified language can be the language for which OS  has been configured. The invention, however, is not so limited.","In operation, text in a first language, such as Japanese, can be presented upon a desktop or other graphical user interface for the computer system . This text can be presented within a dialog box, within a document, used as a label for a menu or other visual construct, or the like. For example, such text can be text that is not selectable using a cursor or pointer. In any case, the text can be obtained using accessibility API's and\/or image capture as described herein.","The text can be provided to the translator program . The translator program  translates the received text to a specified language. The translation can be displayed upon a display screen of computer system . An operator of computer system  can view the translated text from the display screen of computer system  using the viewer  and companion remote controller .",{"@attributes":{"id":"p-0031","num":"0030"},"figref":["FIG. 2","FIG. 1","FIG. 1","FIG. 1"],"b":["205","210","205","105","210","110","205","215"]},"A window  within view  can include text in the Japanese language. The window  can be generated by the OS and\/or the application software as the case may be. Window  can be a pop-up style window, a dialog box, or any of a variety of other user interface object types as are known in the art of graphical user interfaces. For example, text to be translated can be included in a menu construct, within a text window of a word processor, or the like.","According to one embodiment, the text can be identified by a pointer . The operator can move the pointer to a location that is proximate to, or on top of, the text and\/or user interface object specifying the text to be translated. In another aspect, a region surrounding the pointer  can be defined. The region can be any of a variety of different geometric shapes having a predefined area. Accordingly, any text and\/or user interface objects causing text to be displayed that are in contact with the region, can be identified. Thus, in the case of accessibility API's, the pointer , including any region surrounding the pointer, can be used to identify the user interface object and query such object for the text to be translated.","In the case where an image is captured, the image can be a representation of the area surrounding the pointer . This can serve to limit the size of the image that is captured thereby speeding up processing time with regard to text extraction. Alternatively, an image of the entire desktop can be captured and processed to extract text. In that case, if so desired, the pointer  location can be used to prioritize which portions of the image are to be processed before others. Notwithstanding, it should be appreciated that all text displayed upon the display screen  can be identified using either image processing and\/or accessibility API technology.","Any of a variety of different key commands and\/or graphical controls can be provided to trigger the translation process described herein. In one embodiment, however, keeping the pointer  stationary at a given location for a minimum amount of time can trigger such processing, particularly when the pointer indicates text to be translated as described herein. In another embodiment, the process described herein can activate automatically at predetermined time intervals. Despite the mechanism used to trigger translation processing, it should be appreciated that the text can be automatically identified and\/or extracted and then translated responsive to a defined triggering event.","In any case, the text within window , once identified and obtained, can be provided to the translator. As shown, view  includes a window . Window  can be any of a variety of different interface elements or window types. In one embodiment, window  can be similar to, or of the same type as, window . Regardless of the appearance of window , the translation of the Japanese text obtained from window  can be displayed therein.","Notably, the position of window  within view  can correspond to that of window  in view . That is, the position of window  within view  approximates the position of window  within view . In this case, windows  and  are located in the mid-left portion of views  and  respectively.","Within view  is a window  which includes a representation of the desktop, or a portion of the desktop, shown in view . The window  is generated by the viewer discussed in reference to the system of . Accordingly, within window  is shown a representation  of window . In this manner, a QA engineer can obtain real-time, or near real-time, translations of foreign language text of an OS or an application program. Such translations can be provided on-demand responsive to the triggering event.",{"@attributes":{"id":"p-0039","num":"0038"},"figref":["FIG. 3","FIG. 1"],"b":["300","300"]},"As shown, the computer system  can include an OS , application software , an interface , and a translator\/presentation module (translator) . The OS  can be a foreign language OS as described with reference to . That is, the OS  can be intended for users proficient in a language other than that of the QA engineer. The application software  can be an application under test. Still, as noted, if aspects of the OS  are to be tested, the application software  need not be incorporated or executed.","The interface  can obtain text displayed upon a display screen (not shown), such as a computer monitor or other visual display, of the computer system . Such text can be specified by, or within, a user interface object as previously described. In one embodiment, the interface  can be a collection of one or more accessibility API's. In another embodiment, the interface  can be an image capture and text extraction technology. In either case, rather than locating the translator  within a different computer system, the translator  can execute within the computer system . As such, the translator  can be configured to run within the OS . The translator  further can be configured to display translated text upon the visual display of computer system .",{"@attributes":{"id":"p-0042","num":"0041"},"figref":["FIG. 4","FIG. 3"],"b":["400","400","405","405","410","415"]},"It should be appreciated that window  need not be a tool-tip style window or interface, but rather can be any of a variety of different window types. Further, window  need not be positioned proximate to the pointer  or translated text as shown. In another embodiment, a link to an electronic document can be presented within the window . In that case, selecting the link can cause the electronic document to be opened. This embodiment can be used in cases where a significant amount of text is to be translated that would not be easily readable within a smaller window or interface.","As discussed, the pointer  can indicate text to be translated by hovering over the text or pointing to the text. Alternatively, any text and\/or interface objects within a predefined area surrounding the pointer  can be identified. In one embodiment, a QA engineer can trigger the translation function and use the pointer  to draw a shape surrounding or contacting the text to be translated. Such a function can be similar to drawing programs in which users bound or select objects by drawing an expandable shape such as a rectangle or circle.",{"@attributes":{"id":"p-0045","num":"0044"},"figref":"FIG. 5","b":["500","505","510"]},"In one embodiment, text can be identified using a pointer. The pointer can be moved to point to the text to be translated. Alternatively, a region surrounding the pointer can be defined such that any text within or in contact with that region can be identified for translation. The text can be identified responsive to detecting a particular triggering event such as the pointer remaining over, or proximate to, a user interface object, or text displayed by a user interface object, for a minimum amount of time. In another embodiment, any text displayed upon the desktop can be identified for translation.","In step , the text can be acquired. If accessibility API's are used, the text can be acquired by querying the software under test, which can include the operating system. If image capture is used, then text extraction technology can be used to acquire the text from the captured image.","In step , the text can be provided to a translator. As noted, the translator can execute within the same computer system in which the software under test is executing, or on another computer system. Appreciably, if located in a different computer system, that computer system can be located near, or remote from, the computer system executing the software under test.","In step , the text can be translated to the second and different language. In step , the translated text can be presented. As noted, the translated text can be presented using pop-up style windows or other user interface elements. In the event that the translator executes within a different computer system than the software under test, viewer and remote control applications can be used. In that case, all, or a portion of, the desktop of the different computer system can be viewed from the display screen or desktop of the computer system executing the software under test.","The various embodiments disclosed herein have been presented for purposes of illustration only and should not be construed as limiting the scope of the present invention. For example, in one embodiment, offline, batch-style processing can be performed in cases where the amount of text to be translated would unduly slow the operation of the computer system executing the software under test. In such a case, translated text can be stored in a file for later viewing. Alternatively, text in the first language that is acquired from a display screen can be saved in a file for translation at a later time.","The languages used in describing the various embodiments presented herein have been provided as examples and are not intended to limit the present invention. It should be appreciated that any two different languages can be used such that text in the first language is translated into text in the second language. Also, it should be recognized that one or more of the computer programs described herein can be formed of a plurality of smaller programs, which collectively, provide the functions described herein. Further, two or more of the programs discussed herein can be combined into a larger, more complex program that provides the same functionality as the combined programs.","The inventive arrangements disclosed herein provide a solution for testing software written in different languages. Using the present invention, a QA engineer can test software that is written in, or intended for use by, users that speak, or are proficient in, a language other than that used by the QA engineer. The arrangements described herein provide a real-time, or near real-time system, which can provide translations on-demand.","The present invention can be realized in hardware, software, or a combination of hardware and software. The present invention can be realized in a centralized fashion in one computer system or in a distributed fashion where different elements are spread across several interconnected computer systems. Any kind of computer system or other apparatus adapted for carrying out the methods described herein is suited. A typical combination of hardware and software can be a general-purpose computer system with a computer program that, when being loaded and executed, controls the computer system such that it carries out the methods described herein.","The present invention also can be embedded in a computer program product, which comprises all the features enabling the implementation of the methods described herein, and which when loaded in a computer system is able to carry out these methods. Computer program or software, in the present context, means any expression, in any language, code or notation, of a set of instructions intended to cause a system having an information processing capability to perform a particular function either directly or after either or both of the following: a) conversion to another language, code or notation; b) reproduction in a different material form.","This invention can be embodied in other forms without departing from the spirit or essential attributes thereof. Accordingly, reference should be made to the following claims, rather than to the foregoing specification, as indicating the scope of the invention."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["There are shown in the drawings, embodiments that are presently preferred; it being understood, however, that the invention is not limited to the precise arrangements and instrumentalities shown.",{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":["FIG. 4","FIG. 3"]},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 5"}]},"DETDESC":[{},{}]}
