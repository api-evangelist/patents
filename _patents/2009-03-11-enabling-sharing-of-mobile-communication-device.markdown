---
title: Enabling sharing of mobile communication device
abstract: Various exemplary user interfaces, methods and computer program products describe enabling sharing of mobile communication devices. This process utilizes a shared mode for an owner of the mobile communication device to create a virtual environment for a borrower of the mobile communication device, which allows content information (e.g., certain applications and files) to be accessible and visual to the borrower. The process allows an owner of the mobile communication device to track and to manage data created or changed by the borrower. The owner may accept or reject the changes made in the content information. Furthermore, the process conceals non-shared resources to the borrower.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08261361&OS=08261361&RS=08261361
owner: Microsoft Corporation
number: 08261361
owner_city: Redmond
owner_country: US
publication_date: 20090311
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["The subject matter relates generally to mobile communication devices, and more specifically, to sharing a mobile communication device with another individual.","Typically, a mobile communication device is a personal device meant for a single user or an owner, loaded with personal data (e.g. photos, contacts, text messages (SMSes), or call history). It may be desirable to share the mobile communication device with other users or borrowers for various purposes. This is especially true as mobile communication devices are increasingly integrating features conventionally provided by dedicated devices, from MP3 players to game consoles.","A problem that exists for the owner when sharing the mobile communication device with other users or borrowers is that the owner gives complete access to a borrower, since existing mobile communication devices provide little protection for private data and pay-per-use applications. This problem has made sharing less acceptable and has prevented mobile communication device owners from sharing, when it may be socially desirable. Consequently, when the owner shares their communication device, the borrower has the same access to the private data and unlimited access to pay-per-use applications as the owner.","Another problem with sharing the mobile communication device is determining the amount of call minutes or text messaging used on a mobile communication device plan. In certain circumstances, the owner and the borrower may be sharing costs for the mobile communication device plan. Thus, there is no mechanism for the owner to determine a cost to the borrower.","Various attempts have been made to have restriction features in mobile communication devices. One attempt for the mobile communication device is to use a password to prevent unauthorized access; yet the password is set for the entire system and therefore the access control is an all or nothing approach. Some of the restriction features would disable some built-in applications. Some of these approaches require booting into a less-known \u201ckiosk\u201d mode allowing certain applications to run. However, these approaches do not work for a third-party, do not provide access control to data, or do not work without requiring a reboot. Thus, these approaches make it impractical to share mobile communication devices without a restricted mode.","Therefore, it is desirable to find ways for the owner of the mobile communication device to share the mobile communication device with another individual, while providing access control of private data and applications for the owner.","This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter, nor is it intended to be used to limit the scope of the claimed subject matter.","This disclosure describes various exemplary methods, user interfaces, and computer program products for sharing a mobile communication device with transition modes. The process creates a profile to share content information in a shared mode and identifies the content information that is accessible for the shared mode. The process provides access to the content information for the shared mode, while simultaneously hiding other parts of the content information that were not selected for the share mode for a borrower.","Overview","This disclosure is directed to various exemplary methods, user interfaces, and computer program products for enabling to share a mobile communication device with transition modes. Traditional mobile communication device uses a password to access the mobile communication. However, the password access typically focused on a single use approach for one owner, without leveraging sharing of the mobile communication device and is not concerned with providing access control of private content information. Thus, the sharing of mobile communication devices with transition modes described herein allows owners to share their mobile communication devices by providing access to content information, while simultaneously hiding private content information in the process.","In one aspect, the process provides an interface having computer-readable instructions that, when executed by a processor, cause the processor to perform acts such as creating a profile. The acts include creating a profile to share content information in a shared mode for a borrower. The content information may include files, folders, pictures, videos, text messages, or applications. The acts further include identifying the files, folders, pictures, videos, text messages, or applications that are accessible for the shared mode, and providing access to the profile for the shared mode while simultaneously hiding or concealing other parts of the content information not selected to be included in the share mode.","In another aspect, there is a process computer-readable storage media with computer instructions that are executable by a processor for selectively sharing data and applications. The process establishes a sharing policy that includes access to a shared file selection, a shared application selection, or a resource allowance specification. The computer-readable media creates a shared mode by presenting a virtual environment to enable the sharing policy to allow access to the one or more files located in the shared mode and concealing the files in the owner mode that are not identified in the shared policy. The process identifies one or more changes implemented to the one or more files in the shared mode by directing the one or more changes to a separate folder, without modifying the one or more files in the owner mode.","In yet another aspect, the user interface includes selecting content information to share in one or more multiple display screens, the content information comprises at least one of files, folders, pictures, videos, text messages, or applications. The user interface creates a profile mode for one or more selection choices for the content information to be shared, and provides access to the profile mode for the selected choices, while simultaneously keeping other parts of the content information secret and hidden.","The described sharing of the mobile communication device with transition modes method improves privacy and convenience to the owner during sharing of the mobile communication device. Furthermore, the sharing method prevents changes to the content information, unless the owner accepts the changes. By way of example and not limitation, the sharing method described herein may be applied to many contexts and environments. The sharing method may be implemented to support sharing mobile communication devices among individuals at universities, hospitals, offices, restaurants, sporting events, meetings, and the like.","Illustrative Environment of Sharing Mobile Communication Device",{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 1","b":["100","102","102","100","102","1","102","2","102","102","102","1","102","104"],"i":["n","n"]},"The network  is representative of any one or combination of multiple different types of networks, interconnected with each other and functioning as a single large network (e.g., the circuit-switched telephone networks or IP-based packet-switch networks). The network  may also include wire-based networks (e.g., cable) and wireless networks (e.g., cellular, satellite, etc.). The network  may use any number of protocols and configurations to enable the communication devices () . . . () to access other devices and resources. The network  may include several types of circuit-switched telephone networks, such as Public Switched Telephone Network (PSTN) and packet-switched networks. For example, the network  may include Global System for Mobile communication (GSM)\/UMTS cellular network, a Code Division Multiple Access (CDMA) cellular network, other types of circuit-switched networks and\/or the Internet.","The system  may include sharing of mobile communication device using transition modes as, for example, but not limited to, a tool, a method, a solver, software, an application program, a service, technology resources which include access to the Internet, part of a Web browser, user interface, and the like. The terms \u201csharing of mobile communication device(s)\u201d, \u201csharing application program\u201d, and \u201csharing of mobile communication device with transition modes\u201d are used interchangeably. Here, the sharing of mobile communication device is implemented as an application program  operating on an operating system. In another implementation, the sharing of mobile communication device may be provided as a service.","The sharing application program  makes it more convenient for a user or an owner  to share the mobile communication device with another individual. The program  offers protection of private content information on the mobile communication device . Terms \u201cowner\u201d, \u201cuser\u201d, and \u201caccount holder\u201d may be used interchangeably to describe a person or an entity owning the mobile communication device  and\/or a person or an entity subscribing to a consumer telecommunication services. The sharing application program  allows the owner  to share the mobile communication device  with a borrower , by creating a shared mode to provide access to certain content information on the mobile communication device , while concealing personal and\/or private content information.","Shown in  is a representative set of servers () . . . () that is accessible via the network . The servers () . . . () may be independent servers, or a collection of servers that are configured to perform larger scale functions (e.g., a server farm), or a set of servers configured to host one or more sites (e.g., websites) accessible by the network . In the illustrated example, the servers () . . . () may represent private servers that serve content information and programming to the mobile communication device . Alternatively, the servers () . . . () may represent a wireless services provider that provides content to wireless devices, such as the portable handheld communication device . In still other implementations, the servers () . . . () may be configured to host a site, such as a website accessible by anyone of the communication devices via the Internet .","This environment  also illustrates a sharing transition mode user interface (UI)  that may be employed. Each communication device  may present the sharing transition mode UI  to the owner . In a first example operating environment, the mobile communication device  presents a transition mode UI  on the display. The transition UI  is implemented as a share UI module  as part of an operating system  that is stored and executed by the mobile communication device . A more detailed discussion of these examples is described below with reference to .","Illustrative Overview Process for Sharing Application Program","Illustrated in  is an overview exemplary flowchart of a process  for implementing the sharing of mobile communication device with transition modes application program  that provides a benefit to owners in managing and tracking sharing the content information on the mobile communication device . For ease of understanding, the method  is delineated as separate steps represented as independent blocks in . However, these separately delineated steps should not be construed as necessarily order dependent in their performance. The order in which the process is described is not intended to be construed as a limitation, and any number of the described process blocks maybe be combined in any order to implement the method, or an alternate method. Moreover, it is also possible that one or more of the provided steps will be omitted.","The flowchart for the process  provides an exemplary implementation of the sharing application program  of . Shown are the communication device , the sharing application program , the user interface module , and the operating system . There are two modes of operation in this process , an owner mode and a shared mode.","Starting at block , represents a first mode, referred to as the owner mode or a normal mode for implementing sharing application program . In the owner mode or the normal mode  the sharing application program  is a regular application that can be launched and closed, and does not affect the operation of other applications. When the sharing application program  transitions to a second mode which is the shared mode, the sharing application program  runs in the background.","Shown next is block , which represents specifying a sharing policy of the content information to share on the mobile communication device  with the borrower . The sharing policy  allows the owner  to promptly enter selections and the sharing policy  quickly implements the selections into operation. The owner  selects content information, which includes at least one of files, folders, pictures, videos, text messages, applications, and the like. In an implementation, the sharing policy  may include at least three components: shared files selection, shared services or application selections, and a resource allowance specification.","There are several design considerations when specifying the sharing policy . The operating system  associates a default application to most file types, the sharing application program  asks the owner  to select the files before applications; and then automatically selects appropriate applications for the files the owner  selects for sharing, which can be overridden by the owner .","Furthermore, the owner  specifies whether the file or the application is shared or not in the sharing policy . Applications that are identified as shared applications will be run, and the sharing application program  gives the shared applications read and write access to shared files, as well as permission to create new files. Initially, all items start as not being shared, except those applications that are automatically selected based on the shared data file types.","In an implementation, the sharing application program  creates profiles to enable the owner  to save frequently used sharing policies. The owner  creates a profile for one or more selection choices for the content information that is shared with the borrower . The sharing application program  provides access to the content information for the selected choices in the profile mode, while simultaneously hiding or concealing other parts of the content information that were not selected to be shared. The owner  may create several profiles for various borrowers, depending on the number of borrowers.","Block  represents shell customization. When the owner  hands the mobile communication device  to the borrower , the mobile communication UI  in relation to the permitted applications should be consistent with their original UI. Applications and data that are not intended for sharing should be concealed from the shell . Because the owner  has become accustomed to launching applications from the shell, removing the links to the non-shared applications will provide consistency between the user interface and functionalities.","The process  next proceeds to the second transition mode, which is also known as the shared mode , which is a temporary mode. The shared mode is temporary to allow the borrower  to use the mobile communication device. The process  further illustrates how the sharing application program  may provide a quick launch subprogram or method, called Quick Share. With Quick Share, the sharing application program  enters the shared mode , allowing access to the current front application and the files currently opened by Quick Share. To use Quick Share, the owner  first launches the sharing application program , brings the application to share to the front and opens the files to be shared, and then confirms Quick Share from the sharing application program .","As part of the operating process, the sharing application program  obtains a list of sharable files and applications from the operating system . This is possible because mobile operating systems store user-created data into a specific folder and install applications or the respective links in a fixed folder. A hierarchical list-based selection listing all possible choices is used. For file sharing, a hierarchical list similar to the built-in file browser is used to enable the owner  to explore and to select individual folders and files. Each item on the list has an indicator that indicates a sharing status of the file, the folder, or the application. In the user interface, clicking on an indicator changes the sharing status.","Furthermore, once the files to be shared are identified, the sharing application program  creates a file that contains the sorted list of all shared files, which may be referred to as a container file or a shared file. In the shared mode , the sharing application program  loads the container file or the shared file into memory and employs a binary search to determine whether a given file is in the list and whether access to the file should be granted to the borrower .","In an implementation, the sharing application program  creates a virtual environment for the shared mode  from the sharing policy . The sharing application program  runs in the background, customizes the shell , and enforces the sharing policy  based on the owner's specification. The virtual environment confines access to the shared data and applications through a resource namespace virtualization based on a file-level access control. The resource namespace virtualization gives access control and concealment of other applications and data that are not to be shared. In the virtual environment, the sharing application program  tracks all changes made by permitted applications and allows the owner  to manage the changes when exiting the shared mode .","The shared mode  allows the borrower  to use the mobile communication device . The sharing application program  may further allow the owner  to specify quotas for exhaustible resources used in a sharing session. The resource allowance specification may identify quotas for resources used for the borrower profile, the quotas for the processor located on the mobile communication device  including but not limited to a battery usage, a unit of storage on the mobile communication device , and SMS and data counts for texting, or a number of minutes for using the mobile communication device .","When switching from the shared mode  back to the owner mode , a user authentication  is required. The user authentication  may include but is not limited to a password, a code, a user identification, or the like. In an implementation, there may be a password or user authentication for the owner to identify before entering the shared mode.","The sharing application program  tracks changes made by the borrower  in the shared mode . When exiting from the shared mode , the sharing application program  prompts the owner  to manage changes made to files and settings in the shared mode . The sharing application program  provides another UI for the owner , a borrower data reconciliation . The user interface displays the changes and their locations in a UI similar to the policy specification UI. The owner  manages the content information that was created or modified by the borrower  during the borrower data reconciliation . The owner  may either accept or reject changes made in the shared mode . The default choice for modified items is reject; the default for new files is accept. Traditionally, most file sharing is intended for read only access, e.g. music and pictures. In contrast, many shared applications are intended for the borrower to create files, e.g. the camera. Thus, the rationales for the default rejecting or default accepting are based on history of users.","Exemplary Architecture of Shared Mode",{"@attributes":{"id":"p-0047","num":"0046"},"figref":"FIG. 3","b":["300","208","106","118","108","102"]},"Block  represents the sharing layer which includes an access control , a namespace virtualization , and a resource monitor .","Access control  represents impromptu configurable access control to applications and data. Once the owner  specifies the sharing policy , the sharing application program  rapidly identifies the files in granting access in order to block access to non-shared applications and data.","An issue is that mobile operating systems can keep some key services and recently used applications in memory to expedite their launch. Such services and applications create a challenge to access control  when shared, due to the private data loaded. For example, on Windows Mobile\u00ae, all SMSes are stored in file cemail.vol, which is kept opened by the Windows\u00ae CE Messaging Application Programming Interface (CEMAPI) service throughout its lifetime. As a result, if the owner  allows the borrower  to use the SMS application, the owner  may inadvertently allow the access to the SMS history. Most shared applications and services can be stopped or terminated without any impact on the rest of the system. Therefore, the sharing application program  simply terminates the corresponding processes before entering the shared mode .","Many applications require more than their executables to run, e.g. configuration files and DLLs. The sharing application program  locates an adequate set of files for the application to run properly. It is generally difficult to distinguish files necessary for the application to run, from private data files that are opened by the owner in that application. However, most mobile operating systems store application files and data files into different folders, including Windows Mobile\u00ae, Symbian, and iPhone OS. Therefore, the sharing application program  allows access to all of the files in the same folder as the corresponding executable. Some applications may access non-storage peripheral devices, such as the camera and the microphone. These non-storage peripherals do not contain any private information, therefore, the sharing application program  grants access to them in the shared mode .","Namespace virtualization  is a natural choice for sandboxing the shared applications and data to implement access control and a virtual environment for the shared mode . The namespace virtualization  controls resource access by renaming the resources for each folder or file, redirecting write access to another space, and concealing unshared files.","Namespace virtualization  allows sharing application program  to separate changes made to the files and the settings in the shared mode  and ensure those changes cannot affect the system in the owner mode . As previously mentioned, the sharing application program  asks the owner to decide which files or directories to share in the sharing policy . Once a file is shared, the sharing application program  allows both read and write accesses to the file in the shared mode . To protect the shared files from unwanted modification, the sharing application program  creates a private folder to hold the modified and created files in the shared mode . Instead of changing the original files, the sharing application program  uses a copy-on-write to re-direct all the changes to the private folder.","Through the namespace virtualization , the sharing application program  hides non-shared resources from shared applications in the shared mode  to provide a consistent system view in the shared mode . For example, the owner  may want to share two of the five files in a folder. Thus, in the shared mode , the borrower  will only see the two shared files, while the process conceals the other three files.","The resource monitor  helps with the resource allowance specification that identifies quotas for resources used during a borrower profile. The owner  is concerned with the over-usage of exhaustible system resources, such as battery, storage, and network chargeable features, such as phone minutes, SMS and data counts. Existing mobile operating systems provide APIs to assess battery capacity and file sizes, while the sharing application program  leverages them for battery and storage usage accounting.","Shown in  is a runtime environment in shared mode . The shared mode  in the runtime environment shows shared data and shared applications.","Exemplary API Interception for Sharing Mobile Communication Device",{"@attributes":{"id":"p-0057","num":"0056"},"figref":"FIG. 4","b":["400","304","402","102","400"]},"On Windows Mobile\u00ae, the applications use system application programming interface (API) to access files. API interception is a natural choice for file-level access control  because applications use system APIs to access files. For example, an application running on Windows Mobile\u00ae can use the CreateFile( ) function call to open a file. Furthermore, CreateFile( ) is called to open an executable file when the application is launched. The file access control  can be implemented at either the user-level or the kernel-level. However, the user-level implementation requires changing the ROM image on the mobile communication device  because Windows Mobile\u00ae extensively uses eXecution-In-Place (XIP) technique, to execute native programs and DLLs directly from ROM without copying them into RAM, and need to change the import address tables of programs or the export address tables of DLL. The file-level access control  can be implemented by intercepting system APIs at the kernel-level.","The sharing application program  generates the container file based on the user-specified sharing policy . The sharing application program  employs an interception routine for CreateFile( ) to enforce the sharing policy . The routine takes the path parameter passed to CreateFile( ) and looks it up in the container file using a binary search to determine whether access to the file should be granted. If so, it calls the original CreateFile( ) to open the file and returns the file handle. Otherwise, it denies access by returning an error. Because CreateFile( ) is called to open the executable when an application is launched, the interception routine ensures access control for both files and applications.","Windows Mobile\u00ae uses a client\/server model for file system APIs and implements all file system APIs in one separated server process . The file system APIs are either implicit file system APIs  or handle-based APIs . Implicit file system APIs  are globally registered and dispatched through the system API set table , e.g. CreateFile( ). The system API set table  in  also includes a plurality of Win32\u00ae APIs .","Handle-based APIs  are attached to a kernel object such as a file or an event, and called through a handle in a system handle table  to the kernel object. For example, CreateFile( ) function call is illustrative of the implicit file system API , and WriteFile( ) function call is illustrative of the handle-based API . The arrows in  illustrate intercepting both implicit  and handle-based API sets , using file system APIs as an example.","In the owner mode , when an application process  calls the implicit file system API , the application process  causes a trap  and jumps into the kernel process . Without the sharing application program  implemented, the kernel process  searches the system API set table  for the address of a method implementing the file system API and calls the method, which is located in a file system implicit method table .","However, the sharing application program  rewrites the functions. The system API set table  is located at a fixed memory address, the sharing application program  intercepts system APIs by locating the implicit file system API  and manipulating the corresponding table entries. As shown by the arrow (A), the process locates the implicit file system API , intercepts to file system implicit API interception routines  and then to the file system implicit method table . The sharing application program  implements interception routines in sharing interception DLL , loads the routines into the address space of the API set server process , and directs the corresponding entry in the system API set table  to the interception routine . The interception DLL  also holds the pointer to the original table in the server process  so that the interception routines can call the original system API methods, if the access control checking is passed.","Replacing entries in the system API set table  can only intercept file system implicit APIs . As all handles are created in implicit APIs, their creation in corresponding implicit interception routines can be tracked. Before returning the handles  to applications, the file system handle-based interception routines  are attached to the handle-based APIs . As a result, all calls to the handled-based APIs  are directed to the sharing interception DLL , where the original API methods are called to perform the work according to the currently active sharing policy .","The sharing interception DLL  holds a pointer to the file system implicit method table  in the API set server process  allowing one or more interception routines  to call the original file system API methods in the file system implicit method table  if the access control checking is passed. Where the access control checking fails, such as when attempting to open a non-shared file, the corresponding interception routine  returns an error (not shown).","Handle-based system APIs  are created in implicit file system APIs . Thus, in the shared mode , creation of a file handle  is tracked in a corresponding implicit interception routine , as described above in regard to implicit file system APIs . When a creation of a file handle  is intercepted and before the handle  is returned to a corresponding application, such as application , a handle-based interception routine  from the sharing interception DLL  is attached to the file handle .","After the interception routine  is attached to the file handle , calls made in the shared mode  to the handle-based system APIs  are directed to the sharing interception DLL , instead of being directed to the file system handle-based method table . The sharing interception DLL  processes the handle-based system APIs  according to the current access control . The sharing interception DLL  holds a pointer to the file system handle-based method table  in the API set server process  allowing one or more handle-based interception routines  to call the original file system API methods in the file system handle-based method table  pursuant to the current access control . As shown by the arrow (B), the process  locates the handle-based APIs , intercepts to file system handle-based API interception routines  and then to the file system handle-based method table .","The sharing interception DLL  is loaded into the corresponding server process to intercept the file system APIs. The capability of Windows Mobile\u00ae is leveraged to perform a callback function in the given process . By setting the callback function to LoadLibrary( ) and the parameter as the name of a DLL, the process  is forced to execute LoadLibrary( ) to load the DLL into its address space. Similarly, the process  is unloaded by setting the callback function to FreeLibrary( ). Using this approach, the sharing interception DLL  may be dynamically loaded and unloaded. When switching between the owner mode  and the shared mode , the sharing application program  automatically changes the system API set table  and loads or unloads its interception DLL  for the target processes.","Sharing Mobile Communication User Interface",{"@attributes":{"id":"p-0069","num":"0068"},"figref":"FIGS. 5-8"},"When the sharing application program  is launched for the first time, the user interface prompts the owner  to set a password and then stores the MD5 hash code of the password in a registry key. In the shared mode, the registry key is visible only to sharing application program  through access control. To switch back to the owner mode, the owner  should input the password correctly.",{"@attributes":{"id":"p-0071","num":"0070"},"figref":"FIG. 5","b":["500","502","504","506","506"]},{"@attributes":{"id":"p-0072","num":"0071"},"figref":"FIG. 6","b":["600","602","604","108"]},{"@attributes":{"id":"p-0073","num":"0072"},"figref":"FIG. 7","b":["700","702"]},{"@attributes":{"id":"p-0074","num":"0073"},"figref":"FIG. 8","b":["800","802"]},"Exemplary Process for Illustrating Shared Mode",{"@attributes":{"id":"p-0075","num":"0074"},"figref":"FIG. 9","b":["900","108","202","204","902"]},"At the decision point, if the owner  decides to not enter the shared mode, the process  takes a No branch  along the left side to the owner mode  without selecting content information. From the owner mode , the process  may return to specify share policy  and go through the process.","Returning to the decision point for the shared mode , if the owner  decides to enter the shared mode, the process  moves along the Yes branch  to customizing the shell in the shared mode  to ensure the user interface looks similar or consistent for the borrower.","Next, the process  presents or creates a virtual environment . The virtual environment  enables the sharing policy  to allow access to the one or more files located in the shared mode and simultaneously hiding access to files in the owner mode  that are not identified in the share policy . The process  illustrates how in the shared mode, the access is confined  to the borrower , while giving the owner  access control. Next, the process  goes to another decision point, to exit the shared mode  or not.","At the decision point, if the process does not exit the shared mode , the process  travels along the No branch and is in the Shared Mode .","Returning to Exit Shared Mode , if the owner  decides to exit the share mode, the process  takes the Yes branch  to reconcile borrower data . The reconcile borrower data  identifies one or more changes implemented to the one or more files in the shared mode by directing the one or more changes to a separate folder without modifying the one or more files in the shared mode.","Exemplary Operating System for Sharing",{"@attributes":{"id":"p-0081","num":"0080"},"figref":"FIG. 10","b":["1000","1000","106","1002","1004","1002","1002"]},"Memory  may store programs of instructions that are loadable, embedded, or encoded, and executable on the processor , as well as data generated during the execution of these programs. Depending on the configuration and type of communication device, memory  may be volatile (such as RAM) and\/or non-volatile (such as ROM, flash memory, etc.). The system  may also include additional removable storage  and\/or non-removable storage  including, but not limited to, magnetic storage, optical disks, and\/or tape storage. The disk drives and their associated computer-readable medium may provide non-volatile storage of computer readable instructions, data structures, program modules, and other data for the communication devices.","Turning to the contents of the memory  in more detail, may include an operating system , one or more sharing application program  for implementing all or a part of the sharing application program for the mobile communication device. For example, the system  illustrates architecture of these components residing on one system or one server. Alternatively, these components may reside in multiple other locations, servers, or systems. For instance, all of the components may exist on a client side. Furthermore, two or more of the illustrated components may combine to form a single component at a single location.","In one implementation, the memory  includes the sharing application program , a data management module , and an automatic module . The data management module  stores and manages storage of content information, such as files, folders, applications, pictures, text messages, and the like, and may communicate with one or more local and\/or remote databases or services. The automatic module  allows the process to operate without human intervention.","Memory , removable storage , and non-removable storage  are all examples of computer storage medium. Additional types of computer storage medium that may be present include, but are not limited to, RAM, ROM, EEPROM, flash memory or other memory technology, CD-ROM, digital versatile disks (DVD) or other optical storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other medium which can be used to store the desired information and which can accessed by the communication device .","The system  may also contain communications connection(s)  that allow the processor  to communicate with servers, the user terminals, and\/or other devices on a network. Communications connection(s)  is an example of communication medium. Communication medium typically embodies computer readable instructions, data structures, and program modules. By way of example, and not limitation, communication medium includes wired media such as a wired network or direct-wired connection, and wireless media such as acoustic, RF, infrared and other wireless media. The term computer readable medium as used herein includes both storage medium and communication medium.","The system  may also include input device(s)  such as a keyboard, mouse, pen, voice input device, touch input device, etc., and output device(s) , such as a display, speakers, printer, etc. The system  may include a database hosted on the processor . All these devices are well known in the art and need not be discussed at length here.","The subject matter described above can be implemented in hardware, or software, or in both hardware and software. Although embodiments of sharing mobile communication devices have been described in language specific to structural features and\/or methodological acts, it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather, the specific features and acts are disclosed as exemplary forms of exemplary implementations of sharing a mobile communication device. For example, the methodological acts need not be performed in the order or combinations described herein, and may be performed in any combination of one or more acts."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The Detailed Description is set forth with reference to the accompanying figures. The teachings are described with reference to the accompanying figures. In the figures, the left-most digit(s) of a reference number identifies the figure in which the reference number first appears. The use of the same reference numbers in different figures indicates similar or identical items.",{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0013","num":"0012"},"figref":["FIG. 3","FIG. 2"]},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 10"}]},"DETDESC":[{},{}]}
