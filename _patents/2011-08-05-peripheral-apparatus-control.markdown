---
title: Peripheral apparatus control
abstract: An information processing apparatus, which is connected to a peripheral apparatus via a network, issues, to the peripheral apparatus, a request required to acquire a response including information that represents whether or not the peripheral apparatus can notify the information processing apparatus of an event upon completion of print processing. Then, when the information included in the response returned from the peripheral apparatus in response to the request represents that the peripheral apparatus cannot notify the information processing apparatus of any event, the information processing apparatus deletes a print job, data of which have been sent to the peripheral apparatus, from a printer queue required to stack print jobs.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08629995&OS=08629995&RS=08629995
owner: Canon Kabushiki Kaisha
number: 08629995
owner_city: Tokyo
owner_country: JP
publication_date: 20110805
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DESCRIPTION OF THE EMBODIMENTS","First Embodiment","Second Embodiment","Third Embodiment","Fourth Embodiment","Other Embodiments"],"p":["1. Field of the Invention","The present invention relates to a peripheral apparatus control system, peripheral apparatus, information processing apparatus, and control method.","2. Description of the Related Art","In recent years, peripheral apparatuses are connected to information processing apparatuses using various interfaces such as Ethernet\u00ae and a wireless LAN to effectively use such peripheral information control systems in homes and offices in various modes. Examples of peripheral apparatuses include a printer, copying machine, facsimile apparatus, scanner, digital camera, digital video camera, and multi-functional equipment of them.","A printer will be exemplified as a peripheral apparatus. In recent years, the standardization in a network printing system in which a printer is shared by a plurality of information processing apparatuses has advanced. For example, a network printing system which uses a WSD (Web Service on Devices) print service has been put into practical use. Such network printing systems use event-based protocols. In such a print service, an information processing apparatus executes various kinds of control using events notified from a printer to the information processing apparatus.","For example, in the network printing system using the aforementioned print service, information processing apparatuses that share a printer on a single network can execute print processing using that printer. At this time, the printer notifies the information processing apparatus of an event indicating that print processing is complete (JobEndStateEvent) in response to a print job request issued by a given information processing apparatus.","The information processing apparatuses which are notified of this event include the information processing apparatus which issued the print job, and other information processing apparatuses which share that printer on the single network. Upon reception of the event from the printer, the information processing apparatus which issued the print job deletes the print-ended print job from a printer queue in itself.","In general, control of an event where a peripheral processing apparatus such as a printer notifies an information processing apparatus is seriously influenced by limitations of hardware resources of that peripheral apparatus. For example, it is difficult for a printer to notify all information processing apparatuses connected on a single network of, for example, a processing status of a print job by means of an event.","For this reason, in general, the printer is designed to notify a specific limited number of information processing apparatuses, which are controllable by itself, of events. For example, for a low-cost printer such as a color ink-jet printer, the number of information processing apparatuses to which that printer can send an event notification is normally limited to 10 to 20.","More specifically, when the number of information processing apparatuses to which the printer can send an event notification is limited to 10, the printer cannot notify the 11th and subsequent information processing apparatuses, which share that printer, of an event.","An OS (Operating System) incorporates measures to be taken under the assumption of the printer cannot notify an event, as described above. For example, the OS periodically acquires information associated with print jobs whose processes are in progress in the printer at intervals of once per 10 min using a GetActiveJobs operation, under the assumption of a case in which a print end event (JobEndStateEvent) is not notified.","Then, while the information that is associated with print jobs whose processes are in progress in the printer, and is acquired in response to the GetActiveJobs operation, includes information associated with a print job issued by this OS, the OS leaves the corresponding print job in a printer queue. After that, when that information does not include that of the corresponding print job, the OS deletes that print job from the printer queue.","In this measure processing, a time interval at which the OS periodically issues the GetActiveJobs operation to the printer is 10 min. However, this value may be derived in consideration of traffic on the network, processing speeds of information processing apparatuses, and the like in various use environments including network scales and hardware arrangements (specifications) of information processing apparatuses.","When this time interval is set to be, for example, 5 sec, and in a use environment where a plurality of printers are shared in a large-scale network configured by 100 or more information processing apparatuses, traffics on the network increase considerably. This is because all active information processing apparatuses periodically issue GetActiveJobs operations to printers at intervals of once per 5 sec. As a result, processing speeds of other services such as transmission\/reception of e-mail messages, and access to the Internet are adversely influenced.","Focusing attention on the processing of the OS in the information processing apparatus, the OS always continuously executes processing for periodically issuing a GetActiveJobs operation to a printer at intervals of once per 5 sec. That is, in case of a low-cost information processing apparatus with a lower processing performance, continuation of issuance processing of a GetActiveJobs operation once per 5 sec adversely influences other services and processes to lower the processing speed, thus impairing the user's operability. In this way, the time interval required when the OS (information processing apparatus) issues a GetActiveJobs operation to a printer cannot be carelessly shortened.","A case will be examined below wherein in a network printing system using a WSD print service, the number of information processing apparatuses to which a printer can notify an event is limited to 10 (information processing apparatuses A to J). In such a case, when there are 11 information processing apparatuses which share that printer on a single network, all 11 information processing apparatuses, that is, the information processing apparatuses A to J, and an information processing apparatus K can execute print processes using that printer.","At this time, the printer notifies the information processing apparatuses A to J of a print end event (JobEndStateEvent) in association with print job requests issued by these information processing apparatuses. Upon reception of this event, the information processing apparatuses A to J delete the corresponding print-ended print jobs from their printer queues.","However, the printer cannot notify the information processing apparatus K of the aforementioned print end event (JobEndStateEvent) in association with a print job request issued by the information processing apparatus K. As a result, the information processing apparatus K cannot delete a print-ended print job from its printer queue, and that print job is unwantedly left in the printer queue in the information processing apparatus K.","In this case where the print end event is not notified, the OS periodically acquires information associated with print jobs whose processes are in progress in the printer at intervals of once per 10 min using a GetActiveJobs operation, thereby discriminating print-ended print jobs. As a result of discrimination, if the print processing of the corresponding print job is complete, the OS deletes that print job from the printer queue. However, 10 min maximum are required after the print processing is complete until that job is deleted from the print queue. Hence, the print job cannot be deleted from the printer queue in real time.","For example, when the information processing apparatus successively issues 100 print jobs, and print processes of all the print jobs are complete within about 5 min, the print-ended print jobs are unwantedly left in the printer queue of that information processing apparatus during maximum of 10 min. As a result, operability is very poor. Also, operation errors of the user may be induced at increased risk.","The present invention provides a system and method, which allow to delete an enqueued print job in an information processing apparatus when a peripheral apparatus cannot notify the information processing apparatus of an event upon completion of print processing.","According to one aspect of the present invention, there is provided a peripheral apparatus control system, configured by an information processing apparatus using a printer queue required to stack print jobs, and a peripheral apparatus, which are connected via a network, wherein the information processing apparatus comprises: an issuance unit that issues, to the peripheral apparatus, a request required to acquire a response including information that represents whether or not the peripheral apparatus is configured to notify the information processing apparatus of an event; and an acquisition unit that acquires and saves the response from the peripheral apparatus, and the peripheral apparatus comprises: a return unit that returns a response including information that represents whether or not the peripheral apparatus is configured to notify the information processing apparatus of an event in response to the request issued from the information processing apparatus, and wherein when the information included in the response returned from the peripheral apparatus after the information processing apparatus has sent data of the print job to the peripheral apparatus is information that represents that the peripheral apparatus is configured not to notify the information processing apparatus of any event, the information processing apparatus deletes the print job from the printer queue.","Further features of the present invention will become apparent from the following description of exemplary embodiments (with reference to the attached drawings).","Embodiments for carrying out the invention will be described in detail hereinafter with reference to the drawings.","Some pieces of information, which are not especially described in detail, of those of an OS (Operating System) to be quoted in the following description, are those which have been published on the Internet, and an extra description thereof will not be given. These pieces of information are published on the Microsoft Developer Network (MSDN) site as of Apr. 12, 2010. http:\/\/msdn.microsoft.com\/en-us\/library\/default.aspx.","In the following description, \u201cWSD\u201d is short for \u201cWeb Service on Devices\u201d, and is information published on the Internet. Hence, an extra description thereof will not be given. This information is published on the Windows Hardware Developer Central site as of Apr. 12, 2010. http:\/\/www.microsoft.com\/whdc\/connect\/rally\/rallywsd.mspx.","In the following description, \u201cWSD Print Service Definition Version 1.0\u201d has been published on the Internet, and an extra description thereof will not be given. This service is a Print Service defined by Microsoft Incorporation, U.S.A. and published on the Windows Hardware Developer Central site as of Apr. 12, 2010. http:\/\/www.microsoft.com\/whdc\/connect\/rally\/wsdspecs.mspx.",{"@attributes":{"id":"p-0051","num":"0050"},"figref":["FIG. 1","FIG. 1","FIG. 2A"],"b":["1","2","5","888","1","2","5","888","1","2","5","888","1","2","5","888","4"]},"A printer  is configured by a color ink-jet printer as an example of a peripheral apparatus of the present invention. The printer  is a printer with a model name \u201cKmmn\u201d available from an ABC company. Note that the peripheral apparatus is not limited to the printer, but may be a copying machine, facsimile apparatus, scanner, digital camera, digital video camera, and multi-function equipment including these multiple functions. The printer  is configured by a hardware arrangement which will be described later using , and is connected to the PCs , , , and  via the network , so as to be able to communicate with each other.","A print application  is configured by an executable file (*.exe) for Windows\u00ae. Note that the print application  and a language monitor  will be described in more detail later using .",{"@attributes":{"id":"p-0054","num":"0053"},"figref":["FIGS. 2A and 2B","FIG. 2A","FIG. 2A"],"b":["1","2","5","888","5","5","201","202","203","204","205","207","206"]},"Respective modules (software) shown in FIGS.  and  are stored in the HDD , and are read out onto the RAM  as needed when they are executed by the CPU . Thus, the CPU  implements the functions of the respective modules (software) shown in .","On the other hand, the printer  has the hardware arrangement shown in . A CPU  shown in  is configured by a microprocessor and the like, and controls, as a central processing unit of the printer , a RAM , communication unit , recording unit , operation unit , and display unit  according to programs stored in a ROM .","The ROM  stores programs required to implement recording (printing) processing of the printer  and processing for notifying the PC  of a print operation status under the control of a printer driver (to be described later with reference to ). The RAM  temporarily stores print data which is mainly sent from the PC , and based on which an image is printed by the recording unit . The communication unit  includes, for example, a connection port for the network , and controls Ethernet\u00ae communications. The recording unit  is configured by a recording unit including an ink-jet recording head, color inks, a carriage, a recording sheet convey mechanism, and the like, and an electric circuit including an ASIC required to generate print pulses in the recording head based on print data.","By a print operation on a print application, display contents (image data) of a file, which is opened on that application, are temporarily stored in the HDD  of the PC  as a spool file of an EMF format. The stored spool file is converted into print data including control commands for the printer  via a printer driver , and the print data is sent to the printer  via the network . The print data received by the printer  is converted into print pulses by the recording unit , and is printed on a recording sheet.","The operation unit  includes various buttons such as a power button and reset button, and allows the user to operate the printer . The display unit  is configured by a touch panel type liquid crystal display. The display unit  can display states of the printer  and various settings, and allows the user to input various settings.",{"@attributes":{"id":"p-0060","num":"0059"},"figref":["FIG. 3","FIG. 3"],"b":["92","91","90","89","88"]},"Note that standard functions of the OS as a series of plug and play extension functions, which provide supports for network-connection devices, include PnP-X (Plug and Play for Extensions). However, this embodiment will exemplify a case using the N-PnP function as a function equivalent to the PnP-X function.","Also, WSDAPIs (to be described later) required to control the WSD are included in the WSD control stack . Then, APIs required to control IHV native protocols (to be described later) are included in the IHV native protocol control stack .","Device drivers  include standard drivers  supplied with the OS, and IHV drivers  provided from an IHV. An application\/DDI interface  includes an application programming interface (API) and device driver interface (DDI). Applications  include a print application  (to be described below with reference to ) and the like.",{"@attributes":{"id":"p-0064","num":"0063"},"figref":["FIG. 4","FIG. 4"],"b":["50","3","5","33","36","39","30","31","40","32","40"]},"In the printer driver , a print processor  changes a print layout and applies special processing to a print image. A graphics driver  executes image processing for printing based on rendering commands sent from the GDI  as a core of image processing of the printer driver, and generates print control commands. A UI module  provides and controls a user interface of the printer driver.","A language monitor  controls data sending\/receiving processing as a communication I\/F of data. A status monitor  displays statuses such as ink remaining amounts, alerts, and errors of the printer . A port monitor  executes processing for sending data received from the language monitor  to an appropriate port, and receiving data sent from the printer  via a class driver . Especially, a port monitor which controls the WSD print service will be referred to as \u201cWSDMon\u201d hereinafter.","The class driver  is a low-level module closest to a port. In this embodiment, the class driver  corresponds to a printer-class driver of the WSD or IHV native protocol, and controls the port (network port). The printer driver  is available from the ABC company as a manufacturer of the printer .",{"@attributes":{"id":"p-0068","num":"0067"},"figref":["FIGS. 10A and 10D","FIGS. 10B and 10C","FIGS. 10A to 10D"],"b":["3","3"]},{"@attributes":{"id":"p-0069","num":"0068"},"figref":"FIG. 10A","b":"3"},"In case of an event management database  shown in , the printer  can notify a maximum of two PCs, which are set in a Computer Name column, of events. A Subscribed Event column is set with events, registration of which is permitted by the printer , in response to registration requests of respective WSD events from the PCs. Furthermore, an ans:EventControl column saves values each set in an <ans:EventControl> element  in a GetPrinterElementsResponse of the WSD shown in . This example indicates that the printer  can notify the PCs  and  of the following WSD events.","PrinterElementsChangeEvent","PrinterStatusSummaryEvent","PrinterStatusConditionEvent","PrinterStatusConditionClearedEvent","JobStatusEvent","JobEndStateEvent","For example, when the PC  or  issues a print job to the printer , the printer  notifies the PC  or  of events according to processing statuses of that print job. Thus, the PC  or  can recognize the processing statuses of the print job issued by itself.","By contrast, when the PC  issues a print job to the printer , the printer  can accept this print job to perform a print operation, but it cannot notify the PC  of any event according to a processing status of that print job. As a result, the PC  cannot recognize the processing status of the print job issued by itself using events. The same limitations apply not only to a case in which the PCs , , and  issue print jobs nearly at the same time, but also to a case in which, for example, the PCs , , and  are connected on the network , and only the PC  issues a print job. The printer  cannot notify the PC  of events according processing statuses of that print job. This example focuses attention on, as especially important events, two events, that is, a JobStatusEvent which represents a processing status of a print job, and a JobEndStateEvent which represents that print processing is complete. This JobEndStateEvent will be described in more detail later with reference to .",{"@attributes":{"id":"p-0079","num":"0078"},"figref":"FIG. 10B","b":"3"},"In a print queue database , a management number (No.) column stores management numbers of print job requests in the print queue database . In this example, a maximum of five print job requests whose print processing is in progress or which wait for print processing in the printer  can be held at the same time. A next Computer Name column saves names of PCs, which issued the print job requests. A wprt:JobName column saves values each of which is set in a <wprt:JobName> element in a CreatePrintJobRequest of the WSD print job service. A wprt:JobOriginatingUserName column saves values each of which is set in a <wprt:JobOriginatingUserName> element in the CreatePrintJobRequest of the WSD print service. A wprt:JobId column saves values each of which is set in a <wprt:JobId> element in a CreatePrintJobResponse of the WSD, which is returned as a response to the print job request.","A value \u201c1001\u201d in the wprt:JobId column of a print job request of No.  has already been returned from the printer  to the PC  by a CreatePrintJobResponse as a response to a request, which was issued by the PC  and was accepted by the printer . This print job is a print job  shown in . Values \u201c1002\u201d and \u201c1003\u201d in the wprt:JobId column of print job requests of Nos.  and  have not been returned to the PCs  and  yet since the printer  does not accept requests issued from the PCs  and . These values are reserved to prepare for a case in which the printer  will accept requests issued from the PCs  and  after it completes print processing of the print job request of No. .","An ans:EventControl column saves values each of which is set in the <ans:EventControl> element  in the GetPrinterElementsResponse of the WSD shown in . A Status column saves processing statuses of the print job requests in the printer .  shows a state in which the printer  receives a print job request issued from the PC , accepts it as a request of No. , and is processing that request (Processing). Also,  shows a state in which the printer  receives print job requests issued from the PCs  and  and registers them in the print queue database  as requests of Nos.  and , but it does not accept and process these requests (Not Accepted).",{"@attributes":{"id":"p-0083","num":"0082"},"figref":["FIG. 10C","FIG. 10B"],"b":"3"},"Upon completion of the print processing of the print job request of No. , which was processed by the printer  in , the states of the print queue database  transit to those shown in . Then,  shows a state in which the printer  receives the print job requests issued from the PCs  and , and re-registers them in the print queue database  as print job requests of Nos.  and . Also,  shows a state in which the printer  accepts and processes the print job request of No.  of these print job requests (Processing), and it does not accept and process the print job request of No.  (Not Accepted). The print job of No.  is a print job  shown in .",{"@attributes":{"id":"p-0085","num":"0084"},"figref":["FIG. 5","FIG. 5"],"b":["3","30","501","40","502","40","36","504","36","37","506","37","507","508"]},"Normally, when the processing is normally done, \u201cTRUE\u201d is substituted in the return value pmRet; otherwise, \u201cFALSE\u201d is substituted in the return value pmRet. The language monitor  substitutes the return value of the PM_StartDocPort( ) function in lmRet (S), and ends the LM_StartDocPort( ) function. Then, the control returns to the call source (S).","The spooler  substitutes the return value of this LM_StartDocPort( ) function in spRet (S). In this case, when spRet\u2260TRUE (=FALSE) (S), the spooler  calls the LM_StartDocPort( ) function of the language monitor  again (S). On the other hand, when spRet=TRUE, the spooler  calls an LM_WritePort( ) function of the language monitor  (S). In this function, the language monitor  calls a PM_WritePort( ) function of the port monitor  (S). In this function, the port monitor  calls a CreatePrintJob( ) function of the WSDAPIs required to control the WSD. In this function, the port monitor  issues a WSD print service request (CreatePrintJobRequest) to the printer .","This request includes detailed information associated with this print job. In response to this request, the printer  returns a response (CreatePrintJobResponse) or Fault (ServerErrorNotAcceptingJobs) to the port monitor  (S). When the printer  is ready to accept a print job, and accepts that print job in practice, it returns a response to the port monitor . However, when the printer  is not ready to accept any print request, it returns Fault to the port monitor .","Upon reception of the return value of the CreatePrintJob( ) function from the printer , the port monitor  substitutes it in pmRet (S), and ends the PM_WritePort( ) function. Then, the control returns to the call source (S). Upon reception of pmRet, the language monitor  substitutes the return value of the PM_WritePort( ) function in lmRet (S), and ends the LM_WritePort( ) function. Then, the control returns to the call source (S).","The spooler  substitutes the return value of this LM_WritePort( ) function in spRet (S). In this case, when spRet\u2260TRUE (=FALSE) (S), the spooler  calls the LM_WritePort( ) function of the language monitor  again (S). On the other hand, when spRet=TRUE, the spooler  successively executes print data sending processing. This sending processing will be described in more detail later with reference .","Finally, the spooler  calls an LM_EndDocPort( ) function of the language monitor  (S). In this function, the language monitor  calls a PM_EndDocPort( ) function of the port monitor  (S). In this function, the port monitor  launches a notification waiting process of an event (JobEndStateEvent) which represents that the print processing is complete (S).","The port monitor  executes appropriate processing as needed (S), substitutes a processing result in the return value pmRet, and ends this function. Then, the control returns to the call source (S). Normally, when the processing is normally done, \u201cTRUE\u201d is substituted in the return value; otherwise, \u201cFALSE\u201d is substituted in the return value. The language monitor  substitutes the return value of the PM_EndDocPort( ) function in lmRet (S), and ends the LM_EndDocPort( ) function. Then, the control returns to the call source (S).","The spooler  substitutes the return value of this LM_EndDocPort( ) function in spRet (S), and ends the StartPrintJob( ) function. Then, the control returns to the call source (S). When the port monitor  receives a notification of that event from the printer  in the aforementioned event notification waiting process, it deletes the notified print-ended print job from the printer queue .","In the case of , when the printer  executes print processing for the print job request issued from the PC , the printer queue displays a print job  shown in  with a status \u201cPrinting\u201d. After that, the printer  notifies the PC  of a print end event upon completion of the print processing. Upon reception of this event in the notification waiting processing of that event, the port monitor  in the PC  deletes the print job  from the printer queue in the PC . As a result, as shown in , the print job  is deleted from the printer queue in the PC , and ceases to be displayed.","Even in the case of , the printer  can accept a print job request issued from the PC , and can execute its print processing. Then, when that print job is executed, the printer queue  in the PC  displays a print job  with a status \u201cPrinting\u201d, as shown in .","However, the printer  cannot notify the PC  of any print end event upon completion of the print processing. As a result, the port monitor  in the PC  cannot receive any event which represents that the print processing of the print job  issued from the PC  is complete in the notification waiting processing of that event. As a result, as shown in , the print job  with a status \u201cSent to printer\u201d is unwantedly left in the print queue  in the PC .","That is, a print job from a PC such as the PC  to which the printer  cannot notify this event is unwantedly left in the printer queue to have a status \u201cSent to printer\u201d although its print processing is complete.",{"@attributes":{"id":"p-0098","num":"0097"},"figref":["FIGS. 6 and 11","FIG. 10A"],"b":["3","1","2"]},"In , when the user starts print processing from the application  (S), the OS calls the StartPrintJob( ) function of the spooler  (S). In this function, the spooler  calls the LM_StartDocPort( ) function of the language monitor  (S). In this function, the language monitor  initializes a flag lmDeleteJob by substituting \u201cFALSE\u201d in that flag (S). This flag is used in the language monitor , and is set with \u201cTRUE\u201d when the printer  cannot notify a PC which issued the print job of an event which represents that the print job is complete. Otherwise, that flag is set with \u201cFALSE\u201d. The language monitor  initializes lmJobId by substituting \u201c0\u201d in it (S). After that, the language monitor  executes the same processes as in steps S to S shown in .","The spooler  substitutes the return value of this LM_StartDocPort( ) function, which is returned by the same process as in step S, in spRet (S). When spRet\u2260TRUE (=FALSE) (S), the spooler  calls the LM_StartDocPort( ) function of the language monitor . On the other hand, when spRet=TRUE, the process advances to step S in . Processing for issuing a print job request and acquiring print job information shown in  will be described later.","Finally, the spooler  calls the LM_EndDocPort( ) function of the language monitor  (S). In this function, the language monitor  calls a GetPrinterElements( ) function of the WSDAPIs required to control the WSD by setting wprt:PrinterDescription in its argument. In this function, the port monitor  issues a WSD print service request (GetPrinterElementsRequest) to the printer . In response to this request, the printer  returns a response (GetPrinterElementsResponse) to the port monitor  (S). Upon reception of the response, the port monitor  substitutes \u201cTRUE\u201d in a return value of the GetPrinterElements( ) function, and the control then returns to the call source (S).","On the other hand, when the port monitor  does not receive any response within a predetermined time period after it issued the request to the printer , it substitutes \u201cFALSE\u201d in the return value of the GetPrinterElements( ) function, and the control then returns to the call source (S).","The language monitor  substitutes the return value of the GetPrinterElements( ) function in lmRet. Note that in this embodiment, a description of an error case in which \u201cFALSE\u201d is returned as the return value of the GetPrinterElements( ) function will not be given. The request issued by the port monitor , and the response which is returned by the printer  in response to the request, will be described in detail later with reference to .","The language monitor  acquires a value set in a <wprt:DeviceId> element  in the response passed as the argument of the GetPrinterElements( ) function in step S, and determines a status of the printer . The language monitor  determines whether or not a value set in \u201cINFO:\u201d included in the acquired value is \u201c000\u201d which represents that the printer is online and in a standby state, that is, the value set in the <wprt:DeviceId> element  includes \u201cINFO:000\u201d (S). In this case, when the printer  is online and in the standby state, this means that the print processing is complete. When the language monitor  determines in step S that the value set in the <wprt:DeviceId> element  includes \u201cINFO:000\u201d, it executes the same processes as in steps S to S in . However, when the language monitor  determines in step S that the acquired value does not include \u201cINFO:000\u201d, the process returns to step S.","At this time, the language monitor  substitutes the return value of the PM_EndDocPort( ) function in lmRet by the same process as in step S. The language monitor  confirms the value set in lmDeleteJob. When \u201cTRUE\u201d is set (S), the language monitor  executes print job delete processing in steps S and S shown in  (S). For example, when the language monitor  deletes this print job in step S in , the print job with a status \u201cSent to printer\u201d (a print job  in ) is deleted from the printer queue  (). The language monitor  initializes lmDeleteJob by substituting \u201cFALSE\u201d in it (S). Also, the language monitor  initializes lmJobId by substituting \u201c0\u201d in it (S).","The language monitor  returns the value of lmRet as the return value of the LM_EndDocPort( ) function, and ends the LM_EndDocPort( ) function. Then, the control returns to the call source (S). Details of the processes of the LM_EndDocPort( ) function in steps S to S will be described later with reference to . The spooler  substitutes the return value of this LM_EndDocPort( ) function in spRet (S), and ends the StartPrintJob( ) function. Then, the control returns to the call source (S).","In , the spooler  calls the LM_WritePort( ) function of the language monitor  (S). In this function (S), the language monitor  calls the PM_WritePort( ) function of the port monitor  (S). In this function (S), the port monitor  calls the CreatePrintJob( ) function of the WSDAPIs required to control the WSD (S). In this function, the PC (PC ) issues a print job request, that is, a WSD print service request (CreatePrintJobRequest) to the printer . This request includes detailed information associated with this print job. In response to this request, the printer  returns a response (CreatePrintJobResponse) or Fault (ServerErrorNotAcceptingJobs) to the port monitor  (S).","When the printer  is ready to accept a print job request and to execute the accepted request, and accepts that print job request in practice, it returns a response to the port monitor  which issued that print job request. On the other hand, when the printer  is not ready to accept any print job request, and does not accept the print job request, it returns Fault to the port monitor  which issued that print job request.","Upon reception of the response, the port monitor  substitutes \u201cTRUE\u201d in the return value of the CreatePrintJob( ) function, and the control then returns to the call source (S). At this time, the printer  sets a value saved in the wprt:JobId column in  in a <wprt:JobId> element in the response. On the other hand, upon reception of Fault, the port monitor  substitutes \u201cFALSE\u201d in the return value of the CreatePrintJob( ) function, and the control then returns to the call source (S). The port monitor  substitutes the return value of the CreatePrintJob( ) function in the return value pmRet (S), and ends the PM_WritePort( ) function. Then, the control returns to the call source (S).","The language monitor  substitutes the return value of the PM_WritePort( ) function in lmRet (S). The language monitor  confirms the value of lmRet (S). When lmRet=TRUE, the process advances to step S; otherwise (lmRet=FALSE), the process advances to step S. In step S, the language monitor  calls the GetPrinterElements( ) function of the WSDAPIs required to control the WSD by setting wprt:PrinterDescription in its argument. In this function, the port monitor  issues a WSD print service request (GetPrinterElementsRequest) to the printer . In response to this request, the printer  returns a response (GetPrinterElementsResponse) to the port monitor  (S).","Upon reception of the response, the port monitor  substitutes \u201cTRUE\u201d in a return value of the GetPrinterElements( ) function, and the control then returns to the call source (S). On the other hand, when the port monitor  does not receive any response within a predetermined time period after it issued the request to the printer , it substitutes \u201cFALSE\u201d in the return value of the GetPrinterElements( ) function, and the control then returns to the call source (S). In step S, the language monitor  substitutes the return value of the GetPrinterElements( ) function in lmRet. Note that in this embodiment, a description of an error case in which \u201cFALSE\u201d is returned as the return value of the GetPrinterElements( ) function will not be given. The request issued by the port monitor , and the response which is returned by the printer  in response to the request in step S will be described in detail later with reference to .","The language monitor  acquires a value set in an <ans:EventControl> element  in the response passed as the argument of the GetPrinterElements( ) function in step S, and compares it with \u201cfalse\u201d (S). When the language monitor  determines \u201cfalse\u201d in step S, it substitutes \u201cTRUE\u201d in lmDeleteJob (S). At this time, a value set in the <wprt:DeviceId> element  is the following value, and it reveals that the printer  is in an \u201cINFO:001\u201d state indicating that the print processing is in progress (Processing).","\u201cMFG:ABC;CMD:ABCCommand;MDL:Kmmn;CLS:PRINTER;DES:ABC Kmmn;VER:1.00;INFO:001;\u201d","The language monitor  calls a GetActiveJobs function of the WSDAPIs required to control the WSD (S). In this function, the port monitor  issues a WSD print service request (GetActiveJobsRequest) to the printer . In response to this request, the printer  returns a response (GetActiveJobsResponse) to the port monitor  (S). Upon reception of the response, the port monitor  substitutes \u201cTRUE\u201d in a return value of the GetActiveJobs function, and the control returns to the call source (S). On the other hand, when the port monitor  does not receive any response within a predetermined time period after it issued the request to the printer , it substitutes \u201cFALSE\u201d in the return value of the GetActiveJobs function, and the control then returns to the call source (S). In step S, the language monitor  substitutes the return value of the GetActiveJobs function in lmRet.","Note that in this embodiment, a description of an error case in which \u201cFALSE\u201d is returned as the return value of the GetActiveJobs function will not be given. The request issued by the port monitor , and the response which is returned by the printer  in response to the request in step S will be described in detail later with reference to .","The language monitor  acquires a value of a <wprt:JobId> element  in the response passed as the argument of the GetActiveJobs function in step S, and substitutes the acquired value in lmJobId (S). The language monitor  ends the LM_WritePort( ) function, and the control then returns to the call source (S). At this time, as the return value of the LM_WritePort( ) function, the value of lmRet is returned (S).","The spooler  substitutes the return value of this LM_WritePort( ) function in spRet (S). When spRet\u2260TRUE (=FALSE) (S), the process returns to step S, and the spooler  calls the LM_WritePort( ) function of the language monitor . When spRet=TRUE in step S, the spooler  successively executes print data sending processing shown in . After that, the language monitor  executes the processes in steps S to S in , and the spooler  executes the process in step S in , thus ending the print processing.","As described above, in the case of , the print-ended print job  can be automatically deleted from the printer queue  in the PC , as shown in , resulting in high user's operability.",{"@attributes":{"id":"p-0119","num":"0118"},"figref":["FIG. 7","FIG. 5","FIG. 11"],"b":["519","1118","40","36","702","36","704","37","3","3"]},"In response to this request, the printer  returns a response (SendDocumentResponse) to the port monitor  (S). When the port monitor  receives this response and has sent all print data to the printer , it substitutes \u201cTRUE\u201d in a return value of the SendDocument( ) function, and the control returns to the call source (S). When an arbitrary error has occurred at the time of issuance of the request or at the time of reception of the response by the port monitor , the port monitor  substitutes \u201cFALSE\u201d in the return value of the SendDocument( ) function, and the control returns to the call source (S). The port monitor  substitutes the return value of the SendDocument( ) function in the return value pmRet (S), and ends the PM_WritePort( ) function. Then, the control returns to the call source (S).","The language monitor  substitutes the return value of the PM_WritePort( ) function in lmRet (S), and ends the LM_WritePort( ) function. The control then returns to the call source (S). The spooler  substitutes the return value of this LM_WritePort( ) function in spRet (S). In this case, when spRet\u2260TRUE (=FALSE) (S), the process returns to step S, and the spooler  calls the LM_WritePort( ) function of the language monitor . On the other hand, when spRet=TRUE, the process advances to step S in  or step S in .",{"@attributes":{"id":"p-0122","num":"0121"},"figref":["FIGS. 19A and 19B","FIGS. 8A and 8B","FIGS. 17A and 17B","FIGS. 14A and 14B","FIG. 22"]},{"@attributes":{"id":"p-0123","num":"0122"},"figref":["FIGS. 19A and 19B","FIG. 19A","FIG. 19B"]},{"@attributes":{"id":"p-0124","num":"0123"},"figref":["FIG. 19A","FIG. 19A"],"b":["5","3","1905"]},"A <wprt:JobDescription> element  is public information, which includes information associated with a print job. A <wprt:JobName> element  is public information, in which a print job name is set. This example represents a state in which a print job name \u201cPhoto2\u201d which is the same as that in a Document Name field of the print job  shown in  is set.","A <wprt:JobOriginatingUserName> element  is public information, in which a user name who issued this print job is set. This example represents a state in which a user name \u201cNatsu\u201d which is the same as that in an Owner field of the print job  shown in  is set.",{"@attributes":{"id":"p-0127","num":"0126"},"figref":["FIG. 19B","FIG. 10B"],"b":["3","5","1904","3","5","1"]},{"@attributes":{"id":"p-0128","num":"0127"},"figref":["FIGS. 8A and 8B","FIG. 8A","FIG. 8B","FIGS. 8A and 8B"]},{"@attributes":{"id":"p-0129","num":"0128"},"figref":"FIG. 8A","b":["5","3","801"]},{"@attributes":{"id":"p-0130","num":"0129"},"figref":"FIG. 8B","b":["3","5","801","3","5"]},"This response includes a description  which defines a name space of WSD print services of the ABC company as a name space name ans. An effective range of the name space name ans includes private information defined by the WSD print services of the ABC company. In the subsequent figures, the name space name ans is similarly handled, and the effective range of the name space name ans represents private information defined by the WSD print services of the ABC company.","A <wprt:ElementData> element  is public information, in which wprt:PrinterDescription of public information is set as a Name attribute. This represents that this response includes wprt:PrinterDescription designated by the <wprt:Name> element . A <wprt:PrinterDescription> element  is public information, which includes information associated with, for example, functions incorporated in the printer .","A <wprt:DeviceId> element  is pubic information, in which data (character string) defined by \u201cDevice ID\u201d of IEEE 1284-2000 is set. This represents a Device ID of the printer . This example represents a state in which a Device ID \u201cMFG:ABC;CMD:ABCCommand;MDL:Kmmn;CLS:PRINTER;DES:ABC Kmmn;VER:1.00;INFO:001;\u201d is set. This Device ID includes information INFO:xxx (xxx assumes one of following values) indicating a state of the printer , and states indicated by this information are as follows.",{"@attributes":{"id":"p-0134","num":"0133"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"INFO:"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"000","online and standby state"]},{"entry":[{},"001","print processing in progress (Processing)"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}]}}},"An <ans:EventControl> element  is private information, which indicates whether or not the printer  can notify a PC of a WSD event. When the printer  can notify that PC of a WSD event, \u201ctrue\u201d is set in the element ; otherwise, \u201cfalse\u201d is set in the element . This example represents a state in which \u201cfalse\u201d is set, and the printer  cannot notify the PC of a WSD event.","An <ans:MultipleJobsControl> element  is private information, which represents whether or not the printer  can accept and process only print job or can simultaneously accept and process a plurality of print job requests. When the printer  can accept and process only print job, \u201cfalse\u201d is set in the element ; when it can simultaneously accept and process a plurality of print job requests, \u201ctrue\u201d is set in the element . This example represents a state in which \u201cfalse\u201d is set, and the printer  is that which can accept and process only print job.",{"@attributes":{"id":"p-0137","num":"0136"},"figref":["FIGS. 14A and 14B","FIG. 14A","FIG. 14B","FIG. 14A","FIG. 14B"],"b":["5","3","3","5"]},"A <wprt:ActiveJobs> element  is public information, which represents information associated with all print jobs, which are being processed by the printer . A <wprt:JobSummary> element  is public information, which represents information associated with respective print jobs, which are being processed by the printer , for each print job.","The <wprt:ActiveJobs> element  includes zero to a plurality of <wprt:JobSummary> elements.  represents a case in which the <wprt:ActiveJobs> element  includes only one <wprt:JobSummary> element  which represents the print job  shown in  (the print job of No.  in ). A print-ended print job is not included in the <wprt:ActiveJobs> element .","Therefore, in the following case, the <wprt:ActiveJobs> element  in the response from the printer  in response to the request from the PC does not include any <wprt:JobSummary> element  of the print job . That is, after the state shown in  had changed to a state in which the print processing of the print job  was complete, when the next print job (the print job  shown in ) has been started to change the state to that shown in , the <wprt:JobSummary> element  of the print job  is not included in the <wprt:ActiveJobs> element . With this response, the PC  can recognize using the GetActiveJobs operation that the print processing of the print job  is complete.","A <wprt:JobId> element  is public information, in which a job ID of a print job is set. This job ID is the same as that set in the <wprt:JobId> element  in the CreatePrintJobResponse shown in , which was returned from the printer  to the PC  at the time of acceptance of this print job. This case represents a state in which the job ID \u201c1001\u201d, which was assigned, by the printer , to the print job  shown in  issued by the PC , is set.","A <wprt:JobState> element  is set with a value which represent a status (processing condition) of a print job. This case represents a state in which a value indicted by a Status column shown in  of the print job  is set. A <wprt:JobName> element  is public information, in which a print job name of this print job is set. This print job name is the same as that set in the <wprt:JobName> element  of the CreatePrintJobRequest shown in .","A <wprt:JobOriginatingUserName> element  is public information, in which a user name who issued a print job is set. This user name is the same as that set in the <wprt:JobOriginatingUserName> element  of the CreatePrintJobRequest shown in .",{"@attributes":{"id":"p-0144","num":"0143"},"figref":["FIG. 22","FIG. 22","FIG. 22","FIG. 18A","FIG. 18B"],"b":["3","1","144","3"]},"A <wprt:JobEndStateEvent> element  is public information, which represents a print end event (JobEndStateEvent) indicating that the print job is complete. A <wprt:JobEndState> element  is public information which represents detailed information of this print end event.","A <wprt:JobId> element  is public information, in which a job ID of a print job is set. This job ID is the same as that set in a <wprt:JobId> element (not shown) in a response which was returned from the printer  to the PC  at the time of acceptance of this print job. This example represents a state in which a job ID \u201c1002\u201d (in a wprt:JobId column of a print job request of No.  in ), which was assigned, by the printer , to the print job  shown in  issued by the PC , is set.","A <wprt:JobCompletedState> element  is public information, which represents a state at the time of completion of a print job. This example represents a state in which \u201cCompleted\u201d that represents normal completion of a print job is set. A <wprt:JobCompletedStateReasons> element  is public information, which includes one or a plurality of reasons when a print job is complete.","A <wprt:JobCompletedStateReason> element  is public information, which represents a reason of a state when a print job is complete. This example represents a state in which \u201cJobCompletedSuccessfully\u201d which indicates normal completion of a print job is set. A <wprt:JobName> element  is public information, in which a print job name of a print job is set. This print job name is the same as that set in a <wprt:JobName> element in the request issued by the PC .","A <wprt:JobOriginatingUserName> element  is public information, in which a user name who issued a print job is set. This user name is the same as that set in a <wprt:JobOriginatingUserName> element (not shown) in the request issued by the PC .",{"@attributes":{"id":"p-0150","num":"0149"},"figref":["FIGS. 18A to 18E","FIGS. 18A and 18B","FIGS. 18C to 18E"],"b":["1","5"]},"In , the print job  is issued by the PC  to the printer . As can be seen from , since \u201cPrinting\u201d is displayed in a Status field of the print job , the print processing of the print job  is in progress in the printer .",{"@attributes":{"id":"p-0152","num":"0151"},"figref":["FIG. 18B","FIG. 18A","FIG. 18B","FIG. 18A","FIG. 18B"],"b":["144","3","144","1","1","1","144","3","144","1","3","144","1"]},"In , the print job  is issued by the PC  to the printer . As can be seen from , since \u201cPrinting\u201d is displayed in a Status field of the print job , the print processing of the print job  is in progress in the printer .",{"@attributes":{"id":"p-0154","num":"0153"},"figref":["FIG. 18D","FIG. 18C","FIG. 18D"],"b":["145","3","5","145","3","145","3","145","32","5"]},{"@attributes":{"id":"p-0155","num":"0154"},"figref":["FIG. 18E","FIG. 18D","FIG. 18E"],"b":["145","32","5","32"]},{"@attributes":{"id":"p-0156","num":"0155"},"figref":["FIG. 12","FIG. 12","FIG. 12"],"b":["36","202","201","204"]},"When the spooler  calls the LM_WritePort( ) function of the language monitor  in step S in , the language monitor  starts processing of the LM_WritePort( ) function in  (S). The language monitor  calls the PM_WritePort( ) function of the port monitor , and substitutes the return value of that function in lmRet (S). The language monitor  confirms the value of lmRet in step S. If lmRet=TRUE, the process advances to step S; otherwise (lmRet=FALSE), the process jumps to step S.","In step S, the language monitor  calls the GetPrinterElements( ) function of the WSDAPIs required to control the WSD by setting wprt:PrinterDescription in its argument. In this function, the PC  issues a WSD print service request (GetPrinterElementsRequest) to the printer  (S, S in ). In response to this request, the printer  returns a response (GetPrinterElementsResponse) to the PC  (S, S in ). Upon reception of this response, the PC  substitutes \u201cTRUE\u201d in the return value of the GetPrinterElements( ) function, and the control returns to the language monitor  as a call source (S, S in ).","When the PC  does not receive any response within a predetermined time period since it issued the request to the printer , \u201cFALSE\u201d is substituted in the return value of the GetPrinterElements( ) function. Then, the control returns to the language monitor  as a call source (S, S in ). The language monitor  substitutes the return value of the GetPrinterElements( ) function in lmRet (S, S in ).","Note that in this embodiment, a description of an error case in which \u201cFALSE\u201d is returned as the return value of the GetPrinterElements( ) function will not be given. Details of the request issued by the PC  and the response which is returned by the printer  in response to that request in step S are shown in .","The language monitor  acquires a value set in the <ans:EventControl> element  in the response passed as the argument of the GetPrinterElements( ) function (S). The language monitor  confirms in step S whether or not this value is \u201cfalse\u201d. If the acquired value is \u201cfalse\u201d, the process advances to step S; otherwise (the acquired value is \u201ctrue\u201d), the process advances to step S.","In step S, the language monitor  substitutes \u201cTRUE\u201d in lmDeleteJob, and the process advances to step S. In step S, the language monitor  calls the GetActiveJobs function of the WSDAPIs required to control the WSD (S in ). In this function, the PC  issues a WSD print service request (GetActiveJobsRequest) to the printer  (S, S in ).","In response to this request, the printer  returns a response (GetActiveJobsResponse) to the PC  (S, S in ). Upon reception of this response, the PC  substitutes \u201cTRUE\u201d in the return value of the GetActiveJobs function, and the control returns to the call source (S, S in ).","When the PC  does not receive any response within a predetermined time period since it issued the request to the printer , it substitutes \u201cFALSE\u201d in the return value of the GetActiveJobs function, and the control returns to the call source (S, S in ). The language monitor  substitutes the return value of the GetActiveJobs function in lmRet (S, S in ).","Note that in this embodiment, a description of an error case in which \u201cFALSE\u201d is returned as the return value of the GetActiveJobs function will not be given. Details of the request issued by the PC  and the response returned by the printer  in response to the request in step S are shown in .","The language monitor  acquires a value set in the <wprt:JobId> element  in the GetActiveJobsResponse passed as the argument of the GetActiveJobs function (S, S in ). The language monitor  substitutes the acquired value in lmJobId (S, S in ), and the process advances to step S. In step S, the language monitor  returns lmRet as the return value of the LM_WritePort( ) function to the spooler , thus ending the processing of the LM_WritePort( ) function. Then, the control returns to the spooler  as a call source.",{"@attributes":{"id":"p-0167","num":"0166"},"figref":["FIG. 13","FIG. 13","FIG. 13"],"b":["36","202","201","204"]},"In a case in which the PC executes print processing by issuing a print job to the printer , when the PC has sent all print data of that print job to the printer , the spooler  calls the LM_EndDocPort( ) function. Then, the language monitor  starts the processing of this LM_EndDocPort( ) function.","When the spooler  calls the LM_EndDocPort( ) function in step S in , the language monitor  starts the processing of the LM_EndDocPort( ) function (S). The language monitor  calls the GetPrinterElements( ) function of the WSDAPIs required to control the WSD by setting wprt:PrinterDescription in its argument (S). In this function, the PC  issues a WSD print service request (GetPrinterElementsRequest) to the printer  (S, S in ).","In response to this request, the printer  returns a response (GetPrinterElementsResponse) to the PC  (S, S in ). Upon reception of this response, the PC  substitutes \u201cTRUE\u201d in the return value of the GetPrinterElements( ) function, and the control returns to the language monitor  as a call source (S, S in ).","When the PC  does not receive any response within a predetermined time period since it issued the request to the printer , it substitutes \u201cFALSE\u201d in the return value of the GetPrinterElements( ) function. Then, the control returns to the language monitor  as a call source (S, S in ). The language monitor  substitutes the return value of the GetPrinterElements( ) function in lmRet (S, S in ).","Note that in this embodiment, a description of an error case in which \u201cFALSE\u201d is returned as the return value of the GetPrinterElements( ) function will not be given. Details of the request issued by the PC  and the response which is returned by the printer  in response to that request in step S are shown in .","The language monitor  acquires a value set in the <wprt:DeviceId> element  in the response passed as the argument of the GetPrinterElements( ) function in step S. Then, the language monitor  acquires information INF:xxx (xxx assumes one of values \u201c000\u201d and \u201c001\u201d) indicating a status of the printer  included in the acquired value (S). The language monitor  confirms INFO:xxx. If the language monitor  determines that INFO:xxx is \u201cINFO:000\u201d which represents that the printer  is online and in the standby state, the process advances to step S. If the language monitor  determines that INFO:xxx is not \u201cINFO:000\u201d (it is \u201cINFO:001\u201d), the process returns to step S. In this case, when the printer  is online and in the standby state, this means that print processing is complete.","That is, the language monitor  follows up whether or not print processing in the printer  is complete, by repeating the series of processes in steps S, S, and S. After the print processing is complete, the process advances to step S.","In step S, the language monitor  calls the PM_EndDocPort( ) function of the port monitor , and substitutes the return value of that function in lmRet. The language monitor  confirms the value of lmDeleteJob. If lmDeleteJob=TRUE, the process advances to step S; otherwise (lmDeleteJob=FALSE), the process jumps to step S. In step S, the language monitor  confirms a setting value of the \u201cleave document after printing\u201d function of the printer queue . If the setting value is ON, the process jumps to step S; if the setting value is OFF, the process advances to step S.","In step S, the language monitor  deletes that print job from the printer queue . At this time, for example, using a SetJob( ) function provided by the OS, the language monitor  sets a value \u201cJOB_CONTROL_RELEASE\u201d in \u201cCommand\u201d of a fifth argument of that function, and calls that function, thereby deleting the print job from the printer queue .","This is because the port monitor  uses the SetJob( ) function at the beginning of print processing, sets a value \u201cJOB_CONTROL_RETAIN\u201d in \u201cCommand\u201d of the fifth argument of that function, and then calls that function.",{"@attributes":{"id":"p-0178","num":"0177"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"BOOL SetJob("]},{"entry":[{},"_in HANDLE hPrinter,"]},{"entry":[{},"_in DWORD JobId,"]},{"entry":[{},"_in DWORD Level,"]},{"entry":[{},"_in LPBYTE pJob,"]},{"entry":[{},"_in DWORD Command"]},{"entry":[{},");"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"Command [in]: The print job operation to perform. This parameter can be one of the following values.","JOB_CONTROL_RETAIN: Keep the job in the queue after it prints.","JOB_CONTROL_RELEASE: Release the print job.","JOB_CONTROL_RESTART: Restart the print job. A job can only be restarted if it was printing.","Note that values to be set in the first to fourth arguments upon using the SetJob( ) function include general information. Since this information is that described at the Microsoft Developer Network (MSDN) site, a description thereof will not be given.","In step S, the language monitor  initializes lmDeleteJob by substituting \u201cFALSE\u201d in it, and initializes lmJobId by substituting \u201c0\u201d in it (S). The language monitor  returns lmRet to the spooler  as the return value of the LM_EndDocPort( ) function, and ends the processing of the LM_EndDocPort( ) function. Then, the control returns to the spooler  as a call source (S).","If the \u201cleave document after printing\u201d function of the printer queue  is ON in step S, the language monitor  does not delete the print job from the printer queue . Thus, this function normally operates, and this print job is left in the printer queue  even after printing.","In this manner, in the case shown in , even when the printer  cannot return any print end event to the PC , the print-ended print job can be automatically deleted from the printer queue. Therefore, high user's operability is assured.","A case will be examined below wherein when the language monitor incorporates processing for deleting a given print job from the printer queue for all print jobs, the printer can return a print end event to the PC. In such case, the port monitor deletes that print-ended print queue from the printer queue in the JobEndStateEvent notification waiting process, and the language monitor also deletes that print job from the printer queue. For this reason, the print job which has already been deleted by either the port monitor or language monitor is to be deleted again. As a result, processing for deleting the print job which has already been deleted from the printer queue over again occurs, and this processing may cause unexpected malfunctions in the OS, thus posing a problem.","Hence, in this embodiment, in steps S and S in , the language monitor  acquires the <ans:EventControl> element  using the GetPrinterElements operation. Only when the acquired value is \u201cfalse\u201d, the language monitor  substitutes \u201cTRUE\u201d in lmDeleteJob. Only when the value set in lmDeleteJob is \u201cTRUE\u201d, a print job is deleted from the printer queue  in step S in .","In this way, when the language monitor  executes control using the <ans:EventControl> element , the aforementioned problem can be prevented from occurring, thus implementing a secure peripheral apparatus control system free from any malfunctions in the OS.","In this example, after the port monitor  executes the CreatePrintJob operation in step S in , that is, after a print job request is issued, the language monitor  executes the GetPrinterElements operation in step S. Then, the language monitor  acquires the <ans:EventControl> element . The reason for such operations will be described below.","The language monitor  also acquires a Device ID shown in  by the GetPrinterElements operation in step S. After the first print control command included in the print job issued by the CreatePrintJob operation is sent from the PC , the language monitor  confirms whether or not two-way communications can be made with the printer . For this purpose, the language monitor  attempts to acquire a Device ID, thereby discriminating whether or not data sent from the printer  can be received.","In step S, the language monitor  issues the GetPrinterElements operations so as to acquire the Device ID in the same manner as in the related art. In this embodiment, using this GetPrinterElements operation in step S, the Device ID and <ans:EventControl> element  are simultaneously acquired. Thus, the chance of issuance of the GetPrinterElements operation by the language monitor  for the purpose of acquiring only the <ans:EventControl> element  is never increased. Furthermore, traffics on the network  can be suppressed to minimum required traffics, thus preventing the PCs and devices on the network  from being adversely influenced.","Note that when the language monitor  need not confirm whether or not two-way communications can be made, the present invention is not limited to this example. In such case, before the port monitor  executes the CreatePrintJob operation, that is, before it issues a print job request, the language monitor  executes the GetPrinterElements operation. Then, the language monitor  acquires the <ans:EventControl> element  in advance. In this way, this embodiment can also be implemented, thus obtaining the same effects.","In this case, the confirmation processing of the setting value of the \u201cleave document after printing\u201d function of the printer queue , which is executed by the language monitor , may be executed before execution of the aforementioned GetPrinterElements operation. This confirmation processing corresponds to step S in  or step S, which will be described later using . In this case, only when the setting value of the \u201cleave document after printing\u201d function is OFF, the language monitor  can execute the GetPrinterElements operation so as to acquire the <ans:EventControl> element .","In this way, an unnecessary GetPrinterElements operation can be prevented from being executed. As a result, an unnecessary request (GetPrinterElementsRequest) and response (GetPrinterElementsResponse) can be prevented from being exchanged, thus preventing an increase in traffic on the network .",{"@attributes":{"id":"p-0196","num":"0195"},"figref":["FIG. 20","FIG. 20"],"b":["3","16","17","15"]},"When the PC (PC ) issues the CreatePrintJobRequest (for example, the request shown in ) to the printer  in step S in , step S is started. The printer  receives this request (S). Next, the printer  acquires a print job name set in the <wprt:JobName> element  and a user name set in the <wprt:JobOriginatingUserName> element  (S). Next, the printer  acquires a computer name (Computer Name) of the PC  (S). In this embodiment, the printer  acquires an IP address from a TCP reception socket at an HTTP POST addressed to a WSD print service, and acquires the computer name based on this IP address.","Note that respective processes are executed by acquiring the computer name from the IP address, and specifying the PC (PC ) using this computer name, for the sake of simplicity. Alternatively, respective processes may be executed by specifying the PC  using the IP address.","The printer  temporarily saves the acquired print job name, user name, and computer name (S). Then, the printer  confirms the presence\/absence of a print job request whose print processing is in progress with reference the print queue database  shown in  (S). If it is determined that there is a print job request whose print processing is in progress, the process advances to step S; otherwise, the process advances to step S (S). In step S, the printer  assigns a job ID to the print job request requested from the PC (PC ), and registers this print job request in the print queue database  to have a Status \u201cNot Accepted\u201d. Then, the printer  returns Fault (ServerErrorNotAcceptingJobs) which indicates that the print job request cannot be accepted to the PC  (S), thus ending this processing (S).","In step S, the printer  assigns a job ID to the print job request requested from the PC , and registers this print job request in the print queue database  to have a Status \u201cProcessing\u201d. Then, the printer  sets the job ID in the <wprt:JobId> element  (S). Next, the printer  prepares a response (CreatePrintJobResponse) indicating that this print job is accepted and processed, for example, that shown in . The printer  sets the <wprt:JobId> element  set in step S and various other kinds of information in the response, and returns the response to the PC  (S), thus ending this processing (S).",{"@attributes":{"id":"p-0201","num":"0200"},"figref":["FIG. 9","FIG. 9","FIG. 9"],"b":["3","16","17","15"]},"When the PC issues the GetPrinterElementsRequest to the printer , the printer  executes the processing shown in  in response to this request. A most desirable issuance timing of this request in the present invention corresponds to a timing when the PC has sent all print data of a given print job to the printer . Note that, for example, this processing may be executed at other timings such as a print start timing of that print job or during print processing of the print job.","When the PC  issues the request (GetPrinterElementsRequest) to the printer  in step S in , for example, when the request shown in  is issued, and step S is started. The printer  receives the request (S). Then, the printer  confirms a value set in a <wprt:Name> element (for example, the element ) from this request, and temporarily saves that value (S). If the request includes a plurality of <wprt:Name> elements, the printer  temporarily saves values set in all the elements.","Next, if the printer  finds wprt:PrinterDescription as the value set in the <wprt:Name> element, the process advances to step S; otherwise, the process jumps to step S (S). The printer  confirms in step S with reference to the event management database  shown in  whether or not a WSD event can be returned to the PC as a request source. As a result, if a WSD event can be returned to the PC , the process advances to step S; otherwise, the process advances to step S (S).","In step S, the printer  sets \u201ctrue\u201d in the <ans:EventControl> element , and the process advances to step S. In step S, the printer  sets \u201cfalse\u201d in the <ans:EventControl> element , and the process advances to step S. In step S, the printer  generates a Device ID. At this time, the printer  confirms a status of itself, and sets a value according to the status at that time in information INFO which is included in the Device ID and represents the status of itself. In this case, \u201c000\u201d which represents that the printer is online and in a standby state or \u201c001\u201d which represents that print processing is in progress (Processing) is set.","Next, the printer  sets the Device ID generated in step S in the <wprt:DeviceId> element , and the process advances to step S (S). In step S, the printer  returns a response (GetPrinterElementsResponse) in which respective pieces of information are set in steps S, S, and S, to the PC  as a response to the request received in step S. Then, the printer  ends this processing (S).",{"@attributes":{"id":"p-0207","num":"0206"},"figref":["FIG. 21","FIG. 21"],"b":["3","16","17","15"]},"The PC  issues the request (GetActiveJobsRequest), for example, that shown in , to the printer  in step S in  or step S in , and step S is started. The printer  receives this request (S), and then confirms the presence\/absence of a print job request whose print processing is in progress with reference to the print queue database  shown in  (S). If it is determined that there is a print job request whose print processing is in progress, the process advances to step S; otherwise, the process jumps to step S (S). In step S, the printer  sets following pieces of information associated with the print job request whose print processing is in progress in the <wprt:JobSummary> element .",{"@attributes":{"id":"p-0209","num":"0208"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<wprt:JobId> element 1402"]},{"entry":[{},"<wprt:JobState> element 1404"]},{"entry":[{},"<wprt:JobName> element 1405"]},{"entry":[{},"<wprt:JobOriginatingUserName> element 1406"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"For example, when the printer  includes a print queue which can simultaneously accept and process a plurality of print job requests, and print processes of these print job requests are in progress at the same time, the printer  prepares for <wprt:JobSummary> elements for all these print job requests. Then, the printer  sets, in these elements, respective pieces of information associated with each of these print job requests.","The printer  sets the <wprt:JobSummary> element  prepared in step S in the <wprt:ActiveJobs> element  (S). In step S, the printer  returns a response (GetActiveJobsResponse) in which the <wprt:ActiveJobs> element  set in step S and other kinds of information are set to the PC  as a response to the request. Then, the printer  ends this processing (S).","The peripheral apparatus control system described in the first embodiment supports paper jam error recovery processing, which recovers a jam of a recording sheet during print processing, and re-prints from a page where the jam has occurred, and the print processing has failed.","Details of this paper jam error recovery processing are as follows. The language monitor  periodically acquires a page number, which is being printed, and error presence\/absence information from the printer  during print processing of a certain print job at time intervals of, for example, once per 5 sec. Then, the language monitor  saves the acquired information in a print control structure (not shown; physically corresponding to the RAM ) required to save print control-related information. When a jam of a recording sheet has occurred, the language monitor  acquires paper jam error information from the printer , and saves that paper jam error information in the print control structure.","In this state, the print control structure saves the paper jam error information and a page number where the paper jam error has occurred. In the LM_WritePort( ) function, the language monitor  uses the SetJob( ) function, and sets a value \u201cJOB_CONTROL_RESTART\u201d in \u201cCommand\u201d in its fifth argument. Then, in order to restart the print job, the language monitor  calls this function, and then ends the LM_WritePort( ) function. Then, the process returns to the spooler  as a call source.","The spooler  generates a new print job required to re-print the print job, stacks the new print job in the print queue , and calls the LM_EndDocPort( ) function of the language monitor . The language monitor  executes the processing of the LM_EndDocPort( ) function shown in , and sends a reset command to the printer  at a timing between steps S and S. After that, the language monitor  executes processes in step S and subsequent steps, and the process returns to the spooler  as a call source.","Upon reception of the reset command, the printer  discards the remaining print data, which are temporarily stored in the RAM , of the print job that has caused the paper jam error, and releases the error status. At this time, the printer  sets \u201c000\u201d which indicates that the printer is online and in a standby state in information INFO: which is included in a Device ID and represents a status of the printer . The spooler  ends the print job which has caused the paper jam error, and starts the new print job for re-printing.","In the LM_WritePort( ) function, the language monitor  receives print data of the new pint job for re-printing, and then refers to the print control structure. In this case, when the paper jam error information is set, the language monitor  refers to the page number where the paper jam error has occurred, and discards print data up to pages before that page number without sending them to the printer . Then, the language monitor  sends print data of the page where the paper jam error has occurred, and subsequent pages to the printer .","The printer  executes print processing according to the print data, and re-prints from the page where the paper jam error has occurred. During the paper jam error recovery processing, the language monitor  executes the processing of the LM_EndDocPort( ) function, and when the printer  cannot notify any print end event, the language monitor  deletes the print job which has caused the paper jam error from the printer queue  in step S.","In this manner, during the paper jam error recovery processing, the language monitor  deletes the print job whose print processing has failed due to the paper jam error from the printer queue  in step S. In this manner, the print job whose print processing has failed due to the paper jam error can be prevented from being left in the printer queue  to have a Status \u201cSent to printer\u201d, thus implementing the peripheral apparatus control system with excellent operability.","This embodiment has exemplified the printer  as an example of a peripheral apparatus, but the present invention is also effective to a multi-function printer (MFP) which includes a printer, FAX, scanner, storage, and the like. In case of the MFP which incorporates the WSD, the following WSD Services can be respectively assigned to the printer, FAX, and scanner functions.",{"@attributes":{"id":"p-0221","num":"0220"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"84pt","align":"left"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]},{"entry":[{},"Function","WSD service","Remarks"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Printer","Print service","for printer function"]},{"entry":[{},"FAX","Print service","for FAX function"]},{"entry":[{},"Scanner","Scan service"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]}}}}},"In this case, \u201cServiceId\u201d data assigned to the services of the respective functions are as follows.",{"@attributes":{"id":"p-0223","num":"0222"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Printer: <wsdp:ServiceId>"]},{"entry":[{},"http:\/\/schemas.abc.xxx\/Printer<\/wsdp:ServiceId>"]},{"entry":[{},"FAX: <wsdp:ServiceId>"]},{"entry":[{},"http:\/\/schemas.abc.xxx\/Fax<\/wsdp:ServiceId>"]},{"entry":[{},"Scanner: <wsdp:ServiceId>"]},{"entry":[{},"http:\/\/schemas.abc.xxx\/Scanner<\/wsdp:ServiceId>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"To both the printer and FAX functions, the print service is assigned, and the \u201cServiceId\u201d data are different for the printer and FAX functions. For this reason, \u201cServiceType\u201d data of both the printer and FAX functions are \u201cPrinterServiceType\u201d.","As described above, the language monitor  issues the GetPrinterElementsRequest from the PC  to the printer  using the GetPrinterElements( ) function of the WSDAPIs. Then, the language monitor  can receive the GetPrinterElementsResponse which is returned from the printer  to the PC . At this time, the GetPrinterElements operation can be used by designating \u201cServiceType\u201d data in the GetPrinterElements( ) function as follows, and then calling this function.",{"@attributes":{"id":"p-0226","num":"0225"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<portType name=\u201cPrinterServiceType\u201d"]},{"entry":[{},"wse:EventSource=\u201ctrue\u201d>"]},{"entry":[{},"\u2002<operation name=\u201cGetPrinterElements\u201d>"]},{"entry":[{},"\u2003<input message=\u201cwprt:GetPrinterElementsRequestMsg\u201d"]},{"entry":[{},"\u2003\u2003wsa:Action=\u201chttp:\/\/schemas.yyyy.xxx\/YYYY\/"]},{"entry":[{},"\u2003\u2003MM\/wdp\/print\/GetPrinterElements\u201d \/>"]},{"entry":[{},"\u2003<output message=\u201cwprt:GetPrinterElementsResponseMsg\u201d"]},{"entry":[{},"\u2003\u2003wsa:Action=\u201chttp:\/\/schemas.yyyy.xxx\/YYYY\/MM\/"]},{"entry":[{},"\u2003\u2003wdp\/print\/GetPrinterElementsResponse\u201d \/>"]},{"entry":[{},"\u2003<\/operation>"]},{"entry":[{},"<\/portType>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"However, in case of the MFP, the \u201cServiceType\u201d data of both the printer and FAX functions indicate the same type, that is, \u201cPrinterServiceType\u201d. For this reason, we confront the following problem. That is, even when the aforementioned function is called by designating \u201cServiceType\u201d, information associated with the printer or FAX function cannot be acquired while distinguishing the printer and FAX functions from each other. Hence, in case of the MFP, the language monitor  calls the function by designating \u201cServiceID\u201d to designate the printer or FAX function, and can acquire information associated with the designated function using the GetPrinterElements operation. Thus, even for the MFP which includes the printer and FAX functions, the peripheral apparatus control system which can prevent malfunctions and allows accurate control can be implemented.","The first embodiment has exemplified the case in which a printer  cannot simultaneously accept and process a plurality of print jobs, but it can accept and process only one print job. The second embodiment will explain a method in which a language monitor  follows up whether or not print processing, in the printer , of a print job issued (sent) by itself is complete, and deletes that print job from a printer queue  as needed.","However, for example, when the printer  includes a print queue that can simultaneously accept and process a plurality of print job requests, a print job issued (sent) by the language monitor  is not always immediately printed in the printer . For example, there is a case in which that print job is merely stacked in a print queue in the printer , and its print processing is not started.","In this case, the following example will be examined. That is, when the printer  can simultaneously accept and process  print jobs, a PC  issues a print request of a print job , and a PC  simultaneously issues a plurality of print requests while the printer  executes print processing of the print job request issued from the PC . Then, a plurality of print jobs are stacked in the printer queue  in the PC .","In the PC , when a spooler  starts print processing of a first print job  stacked in the printer queue , the PC  issues a print job request of this print job  to the printer . Since the printer  has accepted the print job request issued from the PC  and is executing its print processing, it stores print data sent from the PC  in the print queue in itself, but cannot start print processing of the print job request issued from the PC .","When the PC  (language monitor ) has sent all print data of the print job  to the printer , the language monitor  repeats steps S, S, and S in . Then, the language monitor  confirms (follows up) whether or not print processing of the print job  in the printer  is complete. However, the language monitor  monitors a print status of the print job  whose print processing has not been started yet in the printer , and follows up until that print processing is complete. For this reason, the language monitor  cannot return the control to the spooler , and the PC  (spooler ) cannot issue the next print job (not shown). A solution to such problem will be described below with reference to .",{"@attributes":{"id":"p-0233","num":"0232"},"figref":["FIG. 15","FIG. 15","FIG. 15"],"b":["36","202","201","204"]},"In a case in which the PC issues a print job to the printer  to execute print processing, after the PC sends all print data of that print job to the printer , the spooler  calls the LM_EndDocPort( ) function. Then, the language monitor  starts processing of this LM_EndDocPort( ) function.","When the spooler  calls the LM_EndDocPort( ) function of the language monitor  in step S in , the language monitor  starts the processing of this function in  (S). The language monitor  calls a PM_EndDocPort( ) function of a port monitor , and substitutes a return value of that function in lmRet (S). The language monitor  confirms a value of lmDeleteJob. If lmDeleteJob=TRUE, the process advances to step S; otherwise (lmDeleteJob=FALSE), the process jumps to step S (S).","In step S, the language monitor  confirms a setting value of a \u201cleave document after printing\u201d function of the printer queue . If the setting value is ON, the process jumps to step S; if the setting value is OFF, the process advances to step S. In step S, the language monitor  launches an independent process, and executes processing for monitoring and deleting a print job shown in  in that process.","In step S, the language monitor  initializes lmDeleteJob by substituting \u201cFALSE\u201d in it, and also initializes lmJobId by substituting \u201c0\u201d in it (S). The language monitor  returns lmRet to the spooler  as a return value of the LM_EndDocPort( ) function, and ends the processing of the LM_EndDocPort( ) function. Then, the control returns to the spooler  as a call source (S).",{"@attributes":{"id":"p-0238","num":"0237"},"figref":["FIG. 16","FIG. 16","FIG. 16"],"b":["36","202","201","204"]},"When the language monitor  executes the processing for monitoring and deleting a print job by launching the independent process in step S in , it starts the processing for monitoring and deleting a print job in  (S). The language monitor  calls a GetActiveJobs function of WSDAPIs required to control the WSD (S). In this function, the PC  issues a WSD print service request (GetActiveJobsRequest) to the printer . In response to this request, the printer  returns a response (GetActiveJobsResponse) to the PC  (S). Upon reception of the response, the PC  substitutes \u201cTRUE\u201d in a return value of the GetActiveJobs function, and the control returns to the call source (S).","When the PC  does not receive any response within a predetermined time period after it issued the request to the printer , it substitutes \u201cFALSE\u201d in the return value of the GetActiveJobs function, and the control returns to the call source (S). In step S, the language monitor  substitutes the return value of the GetActiveJobs function in lmRet. Note that in this embodiment, a description of an error case in which \u201cFALSE\u201d is returned as the return value of the GetActiveJobs function will not be given.","Details of the request issued by the PC and the response returned by the printer  in response to the request in step S will be described using FIGS. A and B. The language monitor  acquires pieces of information set in respective <wprt:JobSummary> elements in a <wprt:ActiveJobs> element  in the response passed as an argument of the GetActiveJobs function in step S (S). Then, the language monitor  acquires values set in <wprt:JobId> elements in the respective <wprt:JobSummary> elements, and confirms the presence\/absence of a print job which has the same number as in lmJobId, and whose print processing is in progress (S). If the language monitor  determines that the same value as in lmJobId is found in the <wprt:JobId> elements included in the respective <wprt:JobSummary> elements in the <wprt:ActiveJobs> element , the process returns to step S.","If the language monitor  determines that the same value is not found, the process advances to step S, and the language monitor  deletes the print job of the job ID set in lmJobId from the printer queue . Then, the language monitor  ends the processing for monitoring and deleting a print job, thus ending this process accordingly (S).","In step S in , the language monitor  executes the processing for monitoring and deleting a print job by launching the independent process. Thus, the processes in steps S, S, and S in  are executed without waiting for completion of the processing for monitoring and deleting a print job shown in , and the control can return to the spooler  as a call source.","Hence, even when the printer  includes the print queue that can simultaneously accept and process a plurality of print job requests, the print job can be processed without being influenced by print processing statuses of other print job requests in the printer . That is, the PC  (spooler ) can sequentially issue a plurality of print jobs stacked in the printer queue  to the printer .","Furthermore, in a case shown in , even when the printer  cannot return a print end event (JobEndStateEvent) to the PC , a print-ended print job (print job ) can be deleted. That is, as shown in , the print-ended print job can be automatically deleted from the printer queue  in the PC , thus assuring excellent user's operability.","Note that the case has been exemplified wherein the language monitor  executes the processing for monitoring and deleting a print job by launching the independent process in step S in . However, the present invention is not limited to such specific example. For example, the present invention can also be implemented by executing the processing for monitoring and deleting a print job shown in  by a status monitor , which is already running in another process, thus obtaining the same effects.","Alternatively, for example, a printer management application (not shown), which displays states of a plurality of printers on a network  and statuses of print jobs, and allows the user to manipulate the printers and print jobs, executes the processing for monitoring and deleting a print job shown in . Thus, the present invention can also be implemented, and the same effects can be obtained.","The second embodiment has explained the example in which the printer  actually processes a print job, and at the time of completion of print processing, that print job is deleted from the printer queue  (first example). In addition to this example, the present invention is applicable.","When the PC  sends all print data of a certain print job to the printer , and the printer  receives all these print data, that print job may be deleted from the printer queue  (second example). That is, when the Status of that print job changes to \u201cSent to printer\u201d, that print job is deleted from the printer queue . In this example, in a case in which a PC  issues a print job to the printer , the printer  notifies the PC  of a print end event when it receives all print data of that print job.","In the PC , upon reception of this event, the port monitor deletes that print job from the printer queue. In a case in which the PC  issues a print job to the printer , the printer  cannot notify the PC  of a print end event when it receives all print data of that print job. For this reason, the language monitor executes the processing for monitoring and deleting a print job using the GetActiveJobs operation shown in , thereby deleting that print job from the printer queue .","However, in , the language monitor  confirms the presence\/absence of that print job in step S, and deletes the print job from the printer queue  in step S if that print job is not found. Alternatively, the language monitor  executes the following processing.","If the print job is found, the language monitor  confirms whether or not \u201cJobState\u201d of that print job is \u201cPending\u201d, and \u201cJobStateReason\u201d is \u201cJobIncoming\u201d. As a result of confirmation, if YES is determined, the process advances to step S, and the language monitor  deletes that print job from the printer queue . Otherwise, the process returns to step S. In this manner, a plurality of examples of the method of controlling the language monitor  to delete a print job from the printer queue  are available depending on the types of printers  and peripheral apparatus control systems.","The first example described in the second embodiment is most popular. The second example described in the second embodiment has an effect of allowing the user to easily view displayed contents of the printer queue in the PC in a case in which the printer  has a high processing performance and reliability, that is, nearly no print failure occurs or nearly no time is spent for printing.","Now, a case will be examined below wherein a printer which can accept and process only one print job, as described in the first embodiment, and a printer which can simultaneously accept and process a plurality of print job requests, as described in the second embodiment, are controlled by one printer driver .","After step S in , the language monitor  initializes lmMultipleJobs by substituting \u201cFALSE\u201d in it in an LM_StartDocPort( ) function. Also, after step S in , the language monitor  initializes lmMultipleJobs by substituting \u201cFALSE\u201d in it in the LM_EndDocPort( ) function. This lmMultipleJobs is a flag used in the language monitor , and is set with \u201cFALSE\u201d when the printer  is a printer which can accept and process only one print job. When the printer  is a printer which can simultaneously accept and process a plurality of print job requests, lmMultipleJobs is set with \u201cTRUE\u201d.","In steps S and S, the language monitor  calls a GetPrinterElements( ) function of the WSDAPIs required to control the WSD by setting wprt:PrinterDescription in its argument. Then, the language monitor  acquires a value set in an <ans:EventControl> element . At this time, the language monitor  also acquires a value set in an <ans:MultipleJobsControl> element . If this value is \u201ctrue\u201d, the language monitor  sets \u201cTRUE\u201d in lmMultipleJobs.","Assume that step S in  and step S in  are identical function pointers. In step S in , the language monitor  confirms the value set in lmMultipleJobs immediately after it starts the processing of the LM_EndDocPort( ) function (before step S). If lmMultipleJobs=FALSE, the process advances to step S in ; if lmMultipleJobs=TRUE, the process advances to step S in .","In this manner, the printer driver  can automatically discriminate and control the printer described in the first embodiment and that described in the second embodiment, thus implementing the first and second embodiments of the present invention.","As described in the first embodiment, control of events of which a printer notifies a PC is generally seriously influenced by limitations of hardware resources of that printer. A practical example will be described below. For example, in an example shown in  of the first embodiment, a printer  can notify PCs  and  of events, but cannot notify a PC  of any event.","The third embodiment will explain an example, which can solve this problem and can also achieve the object of the present invention, with reference to  and .  shows an event management database used to manage WSD events of which the printer  notifies the PCs.  is one of the drawings, which best illustrate characteristic features of the present invention.","The third embodiment proposes a method of increasing the number of PCs, to which the printer can notify events, by limiting the number of events to be notified to the PCs. An event management database  shown in  is configured as follows.","A Subscribed Event column saves registration requests of respective WSD events issued from the PCs. A next ans:EventControl2 column saves information which represents whether or not the printer  permits registration of the registration requests of the respective events. In this column, \u201ctrue\u201d represents that the registration request of that event is permitted, and \u201cfalse\u201d represents that the registration request of that event is refused. Also,  shows an example in which the printer  notifies the PCs of only the following two out of six events defined in the WSD print services, and does not notify the PCs of the remaining four events.","JobStatusEvent (an event which represents a processing status)","JobEndStateEvent (an event which represents that print processing is complete).","These two events are used when a spooler controls print jobs in a printer queue in each PC. This example shows a state in which the printer  can notify the PCs , , and  of two events. Therefore, in response to a print job request from the PC  of a management number (No.) , as shown in , the printer  can notify the PC  of an event representing its processing status, and a print end event.",{"@attributes":{"id":"p-0266","num":"0265"},"figref":["FIG. 17A","FIG. 17B","FIGS. 17A and 17B","FIGS. 17A and 17B","FIGS. 8A and 8B"],"b":["801","806","803","805","804"]},{"@attributes":{"id":"p-0267","num":"0266"},"figref":"FIG. 17A","b":["5","3","1701","3"]},"In an <ans:PrinterElementsChangeEvent> element , a value is set as follows. When the printer  can notify the PC of a PrinterElementsChangeEvent, \u201ctrue\u201d is set. When the printer  cannot notify the PC of this event, \u201cfalse\u201d is set. This example represents a state in which \u201cfalse\u201d is set, and the printer  cannot notify that PC of this event.","In an <ans:PrinterStatusSummaryEvent> element , a value is set as follows. When the printer  can notify the PC of a PrinterStatusSummaryEvent event, \u201ctrue\u201d is set. When the printer  cannot notify the PC of that event, \u201cfalse\u201d is set. This example represents a state in which \u201cfalse\u201d is set, and the printer  cannot notify that PC of this event.","In an <ans:PrinterStatusConditionEvent> element , a value is set as follows. When the printer  can notify the PC of a PrinterStatusConditionEvent, \u201ctrue\u201d is set. When the printer  cannot notify the PC of that event, \u201cfalse\u201d is set. This example represents a state in which \u201cfalse\u201d is set, and the printer  cannot notify that PC of this event.","In an <ans:PrinterStatusConditionClearedEvent> element , a value is set as follows. When the printer  can notify the PC of a PrinterStatusConditionClearedEvent, \u201ctrue\u201d is set. When the printer  cannot notify the PC of that event, \u201cfalse\u201d is set. This example represents a state in which \u201cfalse\u201d is set, and the printer  cannot notify that PC of this event.","In an <ans:JobStatusEvent> element , a value is set as follows. When the printer  can notify the PC of a JobStatusEvent event, \u201ctrue\u201d is set. When the printer  cannot notify the PC of that event, \u201cfalse\u201d is set. This example represents a state in which \u201ctrue\u201d is set, and the printer  can notify that PC of this event.","In an <ans:JobEndStateEvent> element , a value is set as follows. When the printer  can notify the PC of a JobEndStateEvent, \u201ctrue\u201d is set. When the printer  cannot notify the PC of that event, \u201cfalse\u201d is set. This example represents a state in which \u201ctrue\u201d is set, and the printer  can notify that PC of this event.","The third embodiment achieves the object of the present invention using the <ans:JobEndStateEvent> element  in place of an <ans:EventControl> element  of the first embodiment.","In steps S and S in , the <ans:JobEndStateEvent> element  is used in place of the <ans:EventControl> element . In steps S and S in , the <ans:JobEndStateEvent> element  is used in place of the <ans:EventControl> element . In steps S and S in , the <ans:JobEndStateEvent> element  is used in place of the <ans:EventControl> element .","As described above, in the case shown in , even when the printer  cannot return a print end event in response to a print job request from a PC , a print-ended print job can be deleted from a printer queue in the PC . Thus, the user's operability is excellent.","In the embodiments of the present invention, the color ink-jet printer is used as an example of a printer. However, the present invention is not limited to such specific example. For example, arbitrary printers such as a monochrome LBP can be used.","In the embodiments, the personal computer is assumed as an information processing apparatus. However, the present invention is not limited to this. For example, the present invention can be effectively implemented for arbitrary information processing apparatuses (terminals) such as DVD players, game machines, set-top boxes, Internet home electric appliances, and the like, which allow similar use methods.","In the embodiments of the present invention, the printer has been exemplified as a peripheral apparatus. However, the present invention is also applicable to a copying machine, facsimile apparatus, scanner, digital camera, digital video camera, and apparatus including their multiple functions as a peripheral apparatus in addition to the printer.","In the embodiments of the present invention, as interfaces between the PCs , , , and  and the printer , for example, arbitrary interfaces such as a wireless LAN, IEEE1394, and Bluetooth\u00ae may be used.","In the embodiments of the present invention, the WSD has been exemplified as a Web service protocol. However, the present invention is not limited to such specific example. For example, arbitrary protocols such as IHV native protocols may be used.","In the embodiments of the present invention, an IP address is acquired from a TCP reception socket at an HTTP POST addressed to a WSD print service, a computer name is acquired based on this IP address, and the PC is specified using this computer name. However, the present invention is not limited to this example. For example, the PC may be specified using other methods. That is, an IP address may be acquired from a TCP reception socket at an HTTP POST addressed to a WSD print service, and the PC may be specified using this IP address.","Using the IP address in this way, since the need for a care of handling 2-byte codes in the WSD protocol can be obviated, programs can be simplified and coding errors can be minimized, thus improving the quality.","The embodiments of the present invention have exemplified the case in which the <ans:EventControl> element and <ans:JobEndStateEvent> element are acquired using the GetPrinterElements operation. However, the present invention is not limited to such example. In place of the operation for acquiring information associated with the printer, an operation for acquiring information associated with a print job may be used. Such operation includes those which are defined by the WSD Print Service Definition such as a GetJobElements operation.","The embodiments of the present invention have exemplified the following case. That is, the PC refers to information (INFO:xxx) which represents a printer status included in the Device ID set in the <wprt:DeviceId> element  acquired from the printer. Then, the PC determines based on the value set in this information whether or not print processing in the printer is complete, and the printer is online and in a standby state (\u201c000\u201d) or the print processing is in progress (\u201c001\u201d). However, the present invention is not limited to such example. For example, the printer status may be acquired using another protocol such as SNMP or commands, and a processing status of a print job request in the printer may be checked based on the acquisition result.","According to the present invention, the following effects can be obtained.","(1) In a case in which an information processing apparatus issues a print job request to a peripheral apparatus, and the peripheral apparatus cannot notify the information processing apparatus of a print end event in association with that print job request, that print job can be deleted from a printer queue in the information processing apparatus. Thus, a processing status of a print job is reflected in real time in the printer queue, thus assuring excellent user's operability.","(2) Since a print-ended print job is automatically deleted from the printer queue in the information processing apparatus, malfunctions of the operating system and erroneous operations of the user can be prevented.","(3) Assuming a case in which the printer cannot notify any event, a time interval required for the OS to periodically issue a GetActiveJobs operation to the printer need not be shortened, thus assuring excellent user's operability.","(4) When the \u201cleave document after printing\u201d function is set in the printer queue, a print-ended print job is not deleted from the printer queue. Hence, this function can also normally operate without being malfunctioned.","(5) Even when the peripheral apparatus can simultaneously accept and process a plurality of print job requests, the information processing apparatus can sequentially issue a plurality of print jobs stacked in the printer queue to the peripheral apparatus without being influenced by print processing statuses of other print job requests. Thus, the user's operability can be improved.","(6) Even when the peripheral apparatus can simultaneously accept and process a plurality of print job requests, a print-ended print job can be automatically deleted from the printer queue in the information processing apparatus, thus assuring excellent user's operability.","Aspects of the present invention can also be realized by a computer of a system or apparatus (or devices such as a CPU or MPU) that reads out and executes a program recorded on a memory device to perform the functions of the above-described embodiment(s), and by a method, the steps of which are performed by a computer of a system or apparatus by, for example, reading out and executing a program recorded on a memory device to perform the functions of the above-described embodiment(s). For this purpose, the program is provided to the computer for example via a network or from a recording medium of various types serving as the memory device (for example, computer-readable medium).","While the present invention has been described with reference to exemplary embodiments, it is to be understood that the invention is not limited to the disclosed exemplary embodiments. The scope of the following claims is to be accorded the broadest interpretation so as to encompass all such modifications and equivalent structures and functions.","This application claims the benefit of Japanese Patent Application No. 2010-189988, filed Aug. 26, 2010, which is hereby incorporated by reference herein in its entirety."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIGS. 2A and 2B"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0032","num":"0031"},"figref":["FIGS. 8A and 8B","FIG. 8A","FIG. 8B"]},{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 9","b":"3"},{"@attributes":{"id":"p-0034","num":"0033"},"figref":["FIGS. 10A to 10D","FIG. 10B","FIG. 10C"]},{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIG. 12","b":"36"},{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIG. 13","b":"36"},{"@attributes":{"id":"p-0038","num":"0037"},"figref":["FIGS. 14A and 14B","FIG. 14A","FIG. 14B"]},{"@attributes":{"id":"p-0039","num":"0038"},"figref":"FIG. 15"},{"@attributes":{"id":"p-0040","num":"0039"},"figref":"FIG. 16"},{"@attributes":{"id":"p-0041","num":"0040"},"figref":["FIGS. 17A and 17B","FIG. 17A","FIG. 17B"]},{"@attributes":{"id":"p-0042","num":"0041"},"figref":"FIGS. 18A to 18E"},{"@attributes":{"id":"p-0043","num":"0042"},"figref":["FIGS. 19A and 19B","FIG. 19A","FIG. 19B"]},{"@attributes":{"id":"p-0044","num":"0043"},"figref":"FIG. 20","b":"3"},{"@attributes":{"id":"p-0045","num":"0044"},"figref":"FIG. 21","b":"3"},{"@attributes":{"id":"p-0046","num":"0045"},"figref":"FIG. 22"}]},"DETDESC":[{},{}]}
