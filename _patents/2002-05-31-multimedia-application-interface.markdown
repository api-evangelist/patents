---
title: Multimedia application interface
abstract: An improved application programming interface (API) as described can control media resources in numerous Internet multimedia applications. The API may be independent of the application itself and the media resources underneath. The API may be referred to as a multimedia subsystem (MSS) interface.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07917639&OS=07917639&RS=07917639
owner: Nokia Corporation
number: 07917639
owner_city: Espoo
owner_country: FI
publication_date: 20020531
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","BACKGROUND TO THE INVENTION","SUMMARY OF THE INVENTION","DESCRIPTION OF PREFERRED EMBODIMENTS"],"p":["The present invention relates to IP multimedia applications for controlling media, and particularly to the connection of the control and media parts thereof.","Multimedia applications are increasingly utilised, particularly in mobile wireless applications.","It is necessary for any multimedia application to control media resources via an interface, termed an application programming interface (API).","A problem with controlling media is that the interface is usually implemented with a very different API in different applications. This adds to the cost of development and maintenance of multimedia applications, and also reduces the flexibility of multimedia applications.","It is an object of the present invention to provide an improved multimedia application interface.","In accordance with the present invention there is provided a method of controlling the provision of media resources to a media application, in which said method is independent of the media application and the media resources.","Preferably, the provision of media resources is dependent upon characteristics of the media session.","Preferably, there is further provided an interface between the media application and the media resources.","The method may further comprise receiving, at said interface, a signal identifying the characteristics of the media session.","Responsive to said signal, the media resource preferably determines if the media session is to be supported. The media resource preferably determines the characteristics of the support for the media session. The characteristics of said support may be determined by the characteristics of the media session in the received signal, and the characteristics of the media resource capability.","The signal identifying the characteristics of the media session may be based on a session description protocol (SDP).","Said signal may be generated by said media application responsive to a request for a media session from a remote media application.","Said request may be based on a session description protocol (SDP).","Said signal may be generated by said media application responsive to a media session being initiated by the media application.","Communication between the media application and the media resources may be based on any one of: a session description protocol; an extended mark-up language, or a real-time stream protocol.","The media resources configurations and objects may be identified using a hierarchical naming scheme.","The media session may be one of either a multicast session or a unicast session.","The media application may be associated with a Windows or a Linux operating system, or any other operating system. The invention is not operating system dependent.","The present invention also provides an interface for controlling media resources provided to a media application, in which said interface is independent of the application or the media resources.","The interface is preferably adapted to receive a signal from the media application identifying characteristics of a media session.","The media resources are preferably adapted to be responsive to said signal to determine if the media session is to be supported.","The media resource may be adapted to determine the characteristics of the support required for the media session.","The characteristics of said support may be determined by the characteristics of the media session in the received signal, and the characteristics of the media resource capability.","The signal identifying the characteristics of the media session may be based on a session description protocol (SDP).","Said signal may be generated by said media application responsive to a request for a media session from a remote media application.","Said request may be based on a session description protocol (SDP).","Said signal may be generated by said media application responsive to a media session being initiated by the media application.","The API in accordance with the present invention thus allows multimedia applications to control media resources via a common interface. The interface is suitable for different applications, ranging from handheld terminals providing voice-over-IP service, to streaming servers and PSTN gateways.","The inventions allows for general media control in various applications. Advantageously, this reduces the cost of development and maintenance.","The interface can be used in a similar fashion to control very different kinds of media services. For, example, the interface may be used to control Public Switched Telephone Network (PSTN) gateway and media sessions of Surf audio\/video terminal. These two applications are opposite extremes considering their respective application requirements.","The present invention is described herein with reference to a particular, advantageous embodiment. However, the invention is not limited in its applicability to such an embodiment, and may be more generally applied.","The invention is described herein with particular reference to an implementation in a software for internet applications (SOFIA) implementation. A block diagram of an exemplary SOFIA architecture is shown in , including a multimedia subsystem adapted in accordance with a preferred embodiment of the present invention.","It is assumed in the following discussion that the skilled reader is familiar with the well-known session initiation protocol (SIP), session description protocol (SDP) and other signalling protocols as discussed hereinbelow. The implementation of such protocols does not form part of the present invention in so far as such implementations are not described herein.","Referring to , the SOFIA architecture includes a set of applications , a signalling subsystem , a media subsystem , and an operating system abstraction layer .","The applications  include, in the example shown, a proxy server application , a registrar\/presence server application , a simple ubiquitous rich-call facilitator (SURF) server application , and media server applications such as announcement server  and conference server application .","The signalling subsystem  includes iptres, iptsec, and nea blocks ,  and  respectively, a Nokia user agent API (NUA) , a Nokia Transaction API (NTA) , a nth , a ntr , a transport block , an IP telephony utility library (IPT) , a http block , a SIP block , a RTSP block , and a protocol independent message block (MSG) . The nea block  is a Nokia event API block. The NTA module  implements the SIP dialogs and transactions. The tport module  implements message transport. The sip module  provides syntax and encoding for different SIP headers. The msg module  provides generic SMTP-like abstract syntax and encoding primitives. The tport  and msg  modules can be shared by other protocols, like RTSP or HTTP.","The elements of the media subsystem  include a multimedia subsystem block , which realises the interface with the signalling subsystem , an SDP block  for defining session, media and codec descriptions, an RTP block  for transporting media over IP, and including a jitter buffer, packet video module  for video conferencing and an audio module . The audio module is further associated with an audio device , a codec , and an RTP block . The video module  is further associated with a codec , a video device , and an RTP block .","The operating system abstraction layer  includes an SU block  containing an SU library.","In , the signalling subsystem  may be considered to be a control part of the application, and the media subsystem may be considered to be a media part of the application.","A detailed description of a preferred embodiment of the present invention is given hereinbelow.","The NTA block  is an application programming interface (API) between an IPT application and a transaction-layer session initiation protocol (SIP) protocol engine. It should be noted that although the present invention is described by way of reference to a specific implementation which utilises the Nokia Transaction API, the skilled person reading the following description will appreciate that the functionality provided by the present invention may be more broadly applied.","A detailed description of a preferred embodiment of the present invention is given hereinbelow.","Internet multimedia applications may have several active media sessions. These sessions may include, for example, audio, video, whiteboard and other media. The multimedia applications, for example a voice over IP (VoIP) terminal, an announcement server, a conferencing server, or a public switched telephone network (PSTN) gateway, use and control media resources in the media sessions. Each of these applications needs to control the media resources by some means.","The present invention provides an improved application programming interface (API) to control media resources in numerous Internet multimedia applications. The API is independent of the application itself and the media resources underneath. For the purposes of the present description, the API is called a multimedia subsystem (MSS) interface.","Referring further to , there are illustrated two multimedia applications between which a multimedia session is established. A first multimedia application is provided by a VoIP terminal , and a second multimedia application is provided by a server , such as a conferencing server.","In accordance with the present invention, each of the multimedia applications is provided with a control part and a media part. The first multimedia application  is provided with a control part  comprised of a session initiation protocol (SIP) user agent (UA), and media part  comprised of a media subsystem (MSS). The second multimedia application  is provided with a control part  comprised of a SIP UA, and media part  comprised of a MSS. Each of the multimedia applications  and  is also provided with a multimedia subsystem application programming interface (MSSAPI) between the respective control and media parts. The first multimedia application  includes a MSSAPI , and the second multimedia application includes a MSSAPI .","The SIP UAs of each of the first and second multimedia applications establish a SIPDialog there between, represented in  by communication . The MSSs  and  of the first and second applications establish a multimedia session there between, represented in  by communication .","As illustrated in , in accordance with the present invention the MSSAPI interfaces  and  provide a clean and consistent interface to the media resources for the control part of each multimedia application. Multimedia sessions can be created, copied, modified and terminated using the MSS API. The media API can follow different modes of operation: for multicast conferences (e.g. SAP) or unidirectional, non-negotiated (RTSP\u2014real time stream protocol) media connections, in accordance with preferred embodiments of the present invention it is possible to specify a media session contents by giving a media description to the MSS. For negotiated peer-to-peer connections, the MSS may follow an offer-answer model semantics.","An Internet call may contain multiple mediums and connections. In accordance with a preferred embodiment of the present invention, the call components are described and negotiated using session description protocol (SDP) session descriptions. A session description protocol is basically a description language. There is an application of SDP known as the offer-answer model (RFC 3 mmm), which SIP user agents follow when they exchange SDP descriptions and negotiate the call contents.","The main elements of the multimedia subsystem  are shown in block diagram form in , and briefly described hereinabove.","Speech is carried over the Internet using a real-time transport protocol (RTP). Apart from speech, RTP can be used to carry other media, like video or high-quality audio. Real-time transport control protocol (RTCP) is used to monitor media delivery, synchronize different streams and provide minimal control and identification for multimedia streams.","The RTP is not a complete protocol by itself, but provides fundamental end-to-end delivery services for real-time data. The usage of the RTP feature greatly depends on the application profile and the media transmitted. The SOFIA RTP module follows an object-oriented approach, and it is designed to provide a virtual interface for the actual media-specific implementation.","The audio codec interface  and the audio device abstraction layer  are designed to interoperate smoothly with various RTP features. They are combined with RTP by a MSS audio stream implementation, termed mss_audio.","The multimedia subsystem  or media part is accompanied, as shown in , by a signalling subsystem  or control part, including a suitable signalling protocol such as SIP, RTSP, or SAP. For the media subsystem and the signalling subsystem to work together, some application logic (not shown) is also required.","The multimedia subsystem  is provided with the MSSAPI interface  in accordance with the invention for accessing media services. The interface methods and semantics are preferably based on RTSP. The interface is designed to be flexible, extensible, and easy to use. The interface preferably implements SDP semantics for different protocols, for example: bi-directional offer-answer model for unicast SIP, unicast streaming for RTSP, multicast for SAP as well as multicast SIP and multicast RTSP.","Despite different semantics, in accordance with the present invention the interface to the MSS always looks the same from the signalling protocol point of view.","The interface can also be used in a similar fashion to control very different kinds of media services. For example, the interface may be used to control both SURF audio\/video terminal media sessions and the audio mixer and media sessions of a multipoint control unit. These two applications are in the opposite extremes on the basis of the application requirements. Again, the interface to the MSS looks the same from the signalling protocol point of view in either case. Using the MSS API features, such as the \u2018named parameters\u2019 feature discussed below, the application can control media semantics in a way transparent to the signalling protocol.","The MSS API allows both distributed or integrated implementation for media. Part of the media session can be implemented remotely. For instance, a separate video camera can be controlled via MSS API. Thus the interface does not apply just to connecting control and media parts of a single device, but may also apply to connecting a control device to a media device. The control protocol underneath the MSS API may be RTSP with some proprietary extensions.","In a preferable embodiment, the MSS interface may implement the SDP offer\/answer model negotiation. The subsystem logic preferably takes care of configuring, creating and destroying multimedia sessions and media streams. The MSS sessions are described using SDP.","A preferred example implementation of the present invention is now described, in relation to an example using session description protocol (SDP) and further using the offer\/answer model.","First, the MSS interface methods or primitives for this preferred example are shown in Table 1. All the event methods\/primitives of Table 1, with the exceptions discussed hereafter, are obtained from RTSP. The event methods (event_bind,event_send) are additional to the RTSP methods\/primitives. Further the pause method has been extended so that it can handle pausing separate splay or record) data streams. Otherwise, the methods work the same way as RTPS methods.",{"@attributes":{"id":"p-0069","num":"0068"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"105pt","align":"left"}}],"thead":{"row":[{"entry":[{},"TABLE 1"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Method","Description"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"mss_create","create a mss object"]},{"entry":[{},"mss_destroy","destroy a mss object"]},{"entry":[{},"mss_get_status","get status"]},{"entry":[{},"mss_announce","set local SDP"]},{"entry":[{},"mss_describe","get local SDP"]},{"entry":[{},"mss_setup","setup a session with"]},{"entry":[{},{},"local and remote SDP"]},{"entry":[{},"mss_play","start playing"]},{"entry":[{},"mss_record","start recording"]},{"entry":[{},"mss_pause","stop play\/record"]},{"entry":[{},"mss_teardown","destroy a session"]},{"entry":[{},"mss_setparams","set parameters"]},{"entry":[{},"mss_getparams","get parameter values"]},{"entry":[{},"mss_event_bind","bind the event handler"]},{"entry":[{},"mss_event_send","send an event"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"The MSS module  implements the MSS interface and the subsystem logic. The MSS module includes, in the preferred example, a SDP negotiation implementation according to the offer\/answer model. The subsystem logic takes care of configuring, creating and destroying sessions. Each of these sessions is described with SDP.","As the interface of the preferred embodiment closely resembles RTSP semantics, implementing an RTSP server and client on top of the interface is trivial. Almost a one-to-one mapping can be used. This trait of the interface thus allows remote control of the media. This feature may be utilized with a distributed gateway in which the media gateway controller (MGC) controls the media gateway (MG) remotely via an RTSP protocol. Within the media gateway the RTSP protocol would be directly mapped to the MSS interface.","Using and configuring MSS is straightforward. In the following paragraphs the basic functionality of the interface in the preferred illustrative example is described.","The mss_setup( ) function is used to create a session from a predefined configuration. The configurations are identified by a path and thus several configurations can exist at the same time. The initial configuration is read from a local file, but can be altered afterwards with the mss_announce( ) function. The mss_announce( ) function can take a new local SDP as an argument. The SDP containing the active configuration can be fetched from the MSS with an mss_describe( ) function call. The local configuration can include mss-specific SDP parameters. These parameters are usually removed from the SDP as it is fetched with the mss_describe( ) function, so the active configuration can directly be used as an SDP offer.","A media session is created by calling mss setup( ). The function returns a session pointer ms_t, which is used in the subsequent calls. If the remote SDP is known, it is included in the creation call to mss_setup( ). mss_describe( ) is used to get the current local SDP from the MSS. If the remote SDP has been passed to the MSS, the local SDP is matched to that following the offer\/answer model rules.","The MSS configurations advantageously preferably form a hierarchical tree (like a file system). The branch configurations may inherit features from trunk configurations. The configuration name may be a path like \u201c\/ipv6\/loopback\/audio-only\u201d.","Likewise, it is possible to address specific components within a session using hierarchical names. Audio RTP parameters may be accessed, for example, using the name prefix \u201caudio\/rtp\u201d, e.g., the RTP reception statistics can be accessed using path \u201caudio\/rtp\/quality_info\u201d.","Using hierarchical naming schemes for configurations and objects beneath API facilitates building and adding new configuration objects in the API, and advantageously does not require changes in the application or MSS core.","Each MSS method can be accompanied with a list of parameters. Parameters are strings in form of: name \u201c=\u201d value. Parameters can modify or augment the semantics of MSS methods. For instance, a MCU application can provide the signalling protocol engine with a parameter telling the MSS to create a mixer session instead of an ordinary session associated with actual audio hardware. The SIP signalling protocol engine need not to be modified as the MSS does not do anything special from an SIP point of view. The MSS just creates a media session and returns an SDP offer or answer as required by SIP protocol semantics.","The setup and configuration of the multimedia subsystem for any multimedia application is illustrated by the signalling chart of , in which the local user agent (UA) is considered to be the UA  of the VoIP terminal  of , and the MSS is the MSS  of the VoIP terminal .","For every application, the method mss_create is initially called, as represented by signal  in . This signal creates an MSS object. As represented by clock , responsive to the method mss_create the local configuration of the local UA is read.","Responsive to a method mss_describe  from the control part of the local UA to the media part, the media part then returns the details of the local configuration previously read. The details of this local configuration may include information such as the codecs available to the application. Thus parameters are returned to the control part of the local UA.","The control part of the local UA  may then generate an mss_announce method, as represented by signal , to instruct the MSS to change certain parameters.","Thereafter, the application is in a ready state, as represented by block . In the ready state the application is ready to initiate a call, or to receive a call.","Turning to , there is illustrated an example message sequence illustrating how an incoming SIP call is mapped to the MSS . In , a star \u2018*\u2019 signifies a parameter that is returned by the call. In  the SIP UA  of the second multimedia application , the remote UA for the purposes of this description, is also illustrated.","An inbound INVITE SDP message  is received by the SIP UA  from the SIP US , which includes an SDP offer. This is an offer from the remote UA to establish a communication. Responsive to this offer, the local UA  transmits a TRYING signal  back to the remote UA, indicating that the offer is being processed.","The offer is passed to the MSS  by the SIP UA  as the media session is created by way of a call to mss_setup( ) method . The mss_setup method provides the SDP of the remote UA . That is, the local UA control part provides the local UA media part with a description of the session requested by the remote UA.","As described hereinabove with reference to , the local SDP is configured during setup, and is thus known by the MSS. The MSS  therefore compares the offered SDP to the local SDP. Thereafter, the MSS  effectively performs the negotiation of the offer answer. The MSS  identified those parts of the remote SDP and local SDP which are common, and responsive to the mss_describe method  returns the common SDP together with the local SDP to the local UA , as parameters.","Thus an answer is fetched from the MSS with a call to mss_describe( ) . Responsive to mss_describe, parameter(s) are returned to the local UA .","Responsive to receipt of the parameters, which effectively constitute agreement to the offer by the MSS, the local UA initiates an mss_play method . The mss_play method activates the MSS ready for a media communication.","The mss_play( ) method  is preferably issued straight away, since the MSS is preferably prepared to receive a media stream.","Thereafter, the local UA further communicates with the remote UA. The local UA  returns a RINGING SDP signal  to the remote UA , including the session description determined by the MSS and returned responsive to the mss_describe method. A  OK signal  is also sent to the remote UA .","Thereafter, the remote UA performs similar steps to that described above, and which are further described hereinafter with reference to . Once the remote UA determines that the session description is satisfactory, the remote UA returns an acknowledgement signal ACK  to the local UA . Responsive thereto, the local UA invokes a mss record method to the MSS , and the MSS is thus fully enabled to receive the inbound call.","All of the above communication between the local UA  and the remote UA  takes place on the SIPDialog link  (see ). Once this control exchange is complete, as represented by block  in  the call is active, and communication takes place between the media subsystems  and  on link .",{"@attributes":{"id":"p-0094","num":"0093"},"figref":["FIG. 5","FIG. 4"],"b":["210","206","210","208","220"]},"As with the case of an incoming call shown in , in the case of outbound call the first communication between the local UA  and its associated MSS  is an mss_setup method . However in this instance, mss_setup( ) is called without receipt of a remote SDP. Responsive to the mss_setup, the MSS gets the current local SDP information, and such information is fetched by the local UA responsive to an mss_describe method . The local SDP information forms the basis of the offer in making the call.","The local UA then makes an offer to the remote UA by transmitting an INVITE (SDP) signal . The mss_play( ) method  is preferably called at this point, in order to activate the MSS ","As described in , responsive to the INVITE signal , the other party responds with a provisional response such as a TRYING message .","The remote UA  then follows a simple set of steps as described above with reference to , and issues a RINGING message . Responsive to the RINGING message , which includes the SDP (the negotiated session description provided by the remote UA), the local UA provides the session description to the MSS  by invoking a mss_setup method, including the necessary SDP description.","Thereafter, the local UA receives the  OK message , equivalent to the message  in . The  OK message indicates that the call can be established, and responsive thereto the local UA  issues a mss_record method  to the MSS, to fully activate for communication on link .","The exchange of control is completed by the local UA generating an acknowledgement message ACK  to the remote UA, equivalent to the message  in .","As discussed with relation to , the SDP module implements a SDP protocol parser. This module is also utilized in the signalling subsystem .","It will be apparent from the description of the above example scenarios that various modifications to the invention are possible. The invention, and embodiments thereof, provides several advantages, some of which are stated hereinafter.","In preferred embodiments, the invention advantageously provides for RTSP-like interface primitives. Advantageously, semantics may be compatible with signalling protocols such as SIP, RTSP, or SAP.","The invention provides a simple mapping from signalling protocol to media API.","The invention supports an offer\/answer negotiation model.","Advantageously, parameters are used to modify the basic functionality, which parameters are preferably transparent to the signalling engine.","The event delivery between the application and media sessions is advantageously transparent and extensible without modifications to the MSS. Events are preferably identified by a hierarchical text formatted path that can be easily processed by applications. Event data type is transparent to the API.","The suitability of the interface in accordance with the present invention to several application types reduces cost, as it is suitable for terminals, servers, and gateways.","Maintaining single media API for several applications also provides cost reductions.","Use of a simple and straightforward API also provides cost reductions.","The application and signalling protocol does not need to differentiate between unicast and multicast sessions.","The same interface can be used on various operating systems, such as Windows and Linux, thus saving cost.","Adding new media processing capabilities underneath the API does not require changes in: the application; the signalling protocol implementation; or the API itself.","The invention enables media processing capability to be supplied as a library utilizing this interface. This media-processing library can be distributed and updated independent of the application, thus saving cost.","It should be understood that whilst the examples described hereinabove relate to an offer-answer type scenario, the invention is not limited to such a scenario. The invention may be used in an offer only type scenario, for example, and there may be further scenarios within which the invention would be applicable.","Furthermore, the invention has been described herein by way of reference to particular examples using SDP. The invention is not limited to SDP, and other protocols may be used. SDP is advantageously used in preferred embodiments because it represents an efficient way for communicating information descriptive of a session.","The use of SDP for configuration is advantageous, as it allows named configurations. No special configuration editor is thus needed, reducing complexity of any implementation, and cost.","An alternative implementation may, for example, be a high-level language such as extensible mark-up language (XML).","The invention is also not limited, as discussed above, to scenarios where the control or signalling subsystem and the media subsystem are part of the same device. The invention is applicable to scenarios where the control and media parts are provided as separate devices, or part of separate devices.","Whilst the present invention has been described herein by way of reference to particular examples, it is not limited to those examples. The scope of the invention is defined by the attached claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE FIGURES","p":["The invention is now described by way of example with reference to the accompanying figures in which:",{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIG. 5"}]},"DETDESC":[{},{}]}
