---
title: Dynamically setting the optimal base addresses of process components
abstract: Processes are monitored to determine if all of their components are loaded from persistent storage into memory at their preferred base addresses. Each of the components is examined to determine if that component's in-memory base address matches the preferred base address of its on-disk representation. If a base address collision is detected, the on-disk representation of the preferred base address is updated to reflect the new in-memory base address.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06950916&OS=06950916&RS=06950916
owner: RTO Software, Inc.
number: 06950916
owner_city: Alpharetta
owner_country: US
publication_date: 20020131
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["RELATED APPLICATION","FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF EXEMPLARY EMBODIMENTS"],"p":["The present application claims the benefit of U.S. Provisional Patent Application Ser. No. 60\/265,684 filed Jan. 31, 2001, which is hereby incorporated by reference as if set forth fully herein.","The present invention relates generally to the elimination of base address collisions in computer software programs. More particularly, the present invention relates to dynamically setting the optimal base address of process components in order to eliminate base address collisions.","A computer's operating system, such as the Microsoft Windows operating system (\u201cWindows\u201d), may be configured to specify that each process have its own private virtual address space. By way of example, Windows uses a technique known as memory-mapping to load the components of a process (such as the executable file and any associated dynamic link libraries) from persistent storage (e.g., disk or tape) into memory (e.g., random access memory (\u201cRAM\u201d)). In order to allow memory-mapping to operate more efficiently, each component of a process may be assigned what is known as a preferred base address within the memory. As is known in the art, it is possible to set the base address of a component at design time.","While many developers do set base addresses at design time, this process does not ensure that a component will always load at its preferred base address. For example, an operating system may not be able to load a component of a process at its preferred base address if the operating system has already loaded some other process component at that address. If any component of the process cannot be loaded at its preferred base address, the operating system must perform additional logic to relocate that component to a different location in memory. The process of relocating a component consumes valuable time and memory resources.","Thus, there remains a need for ensuring that each component of a process loads at its preferred base address. There further remains a need for optimally determining the correct preferred base addresses of a component prior to run time.","The present invention meets the needs described above by providing systems and methods for attempting to ensure that all components of a process load at their preferred base addresses. In one embodiment, the present invention detects that a process has been loaded from persistent storage into memory. The present invention then determines if any of the components of the process have been relocated by the operating system to a memory address other than that component's preferred base address. In response to determining that a component's in-memory base address is not equivalent to the component's on-disk representation of the preferred base address, the present invention updates the on-disk representation to reflect the in-memory base address. The components of the process should thus load at their updated base addresses the next time the process is executed.","These and other aspects, features and advantages of the present invention may be more clearly understood and appreciated from a review of the following detailed description of the disclosed embodiments.","The present invention is directed to systems and methods for monitoring the initialization of a software process in order to determine if all of the components of the process load at their preferred base addresses. Should any component of the process load at a new base address, as opposed to its preferred base address, the on-disk representation of that component is updated to reflect the new base address.","The following description will hereinafter refer to the drawing, in which like numerals indicate like elements throughout the several figures. FIG.  and the following discussion are intended to provide a brief and general description of a suitable computing environment for implementing the present invention. Although the system shown in  represents a conventional personal computer system , those skilled in the art will recognize that the invention also may be implemented using other types of computer system configurations. The computer system  includes a processing unit , a system memory  and a system bus  that couples the system memory  to the processing unit . The system memory  includes read only memory (ROM)  and random access memory (RAM) . A basic input\/output system  (BIOS), containing basic routines that help to transfer information between elements within the personal computer system , such as during start-up, is stored in ROM .","The personal computer system  further includes a hard disk drive , a magnetic disk drive , e.g., to read from or write to a removable disk , and an optical disk drive , e.g., for reading a CD-ROM disk  or to read from or write to other optical media. The hard disk drive , magnetic disk drive , and optical disk drive  are connected to the system bus  by a hard disk drive interface , a magnetic disk drive interface , and an optical drive interface , respectively. The drives and their associated computer-readable media provide nonvolatile storage for the personal computer system . Although the description of computer-readable media above refers to a hard disk, a removable magnetic disk and a CD-ROM disk, it should be appreciated by those skilled in the art that other types of media that are readable by a computer system, such as magnetic cassettes, flash memory cards, digital video disks, Bernoulli cartridges, and the like, may also be used in the exemplary operating environment.","A number of program modules may be stored in the persistent storage devices (e.g., hard disk drive ) and the memory  (e.g., RAM ), including an operating system , one or more application program modules , and other program modules  and . Program modules  and  may comprise components of the application program module . An application program module is also referred to generally as a process. The methods of the present invention may also be implemented as a program module, referred to herein as Base Address Collision Monitoring Program Module , and comprising computer-executable instructions stored on a computer-readable medium of the computer system .","Other input devices (not shown) may include a microphone, joystick, game pad, satellite dish, scanner, or the like. These and other input devices are often connected to the processing unit  through a serial port interface  that is coupled to the system bus , but may be connected by other interfaces, such as a game port or a universal serial bus (USB). A display device  is also connected to the system bus  via an interface, such as a video adapter . In addition to display device, personal computer systems typically include other peripheral output devices (not shown), such as speakers or printers.","The personal computer system  may operate in a networked environment using logical connections to one or more remote computer systems, such as a remote computer system . The remote computer system  may be a server, a router, a peer device or other common network node, and typically includes many or all of the elements described above relative to the personal computer system , although only a storage device  has been illustrated in FIG. . The logical connections depicted in  include a local area network (LAN)  and a wide area network (WAN) . Such networking environments are commonplace in offices, enterprise-wide computer networks, intranets and the Internet.","When used in a LAN networking environment, the personal computer system  is connected to the LAN  through a network interface . When used in a WAN networking environment, the personal computer system  typically includes a modem  or other means for establishing communications over the WAN , such as the Internet. The modem , which may be internal or external, is connected to the system bus  via the serial port interface . In a networked environment, program modules depicted relative to the personal computer system , or portions thereof, may be stored in the remote memory storage device. It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computer systems may be used. It will be further appreciated that the invention could equivalently be implemented on host or server computer systems other than personal computer systems, and could equivalently be transmitted to the host computer system by means other than a CD-ROM, for example, by way of the network connection interface .",{"@attributes":{"id":"p-0019","num":"0018"},"figref":["FIG. 2","FIG. 1"],"b":["200","200","201","100","136","1","202","135","100","122","204","202","206"]},"At step , a first component is selected from the list of components in the process. Then at step , a determination is made as to whether the in-memory base address of the selected component is equivalent to the on-disk representation of its preferred base-address. If the in-memory base address of the selected component is equivalent to the on-disk representation of its preferred base-address, the method advances to step  for a determination as to whether the selected component is the last component in the process. However, if at step  the in-memory base address of the selected component is determined not to be equivalent to the on-disk representation of its preferred base-address (i.e., the selected component has been relocated to a new in-memory base address due to a conflicting component having previously been loaded at the preferred base address of the selected component), the name of the conflicting component is determined at step .","From step , the method moves to step , where the name of the conflicting component, the relocated component's file name, the new in-memory base address of the relocated component and the original on-disk representation of the relocated component's preferred base address are persisted to a file for further processing and for reporting purposes (see FIG. ). Next, at step  a determination is made as to whether the selected component is the last component in the process. If the selected component is not the last component in the process, the method returns to step  for selection of the next component. The method is repeated from step  to step , as previously described, until the selected component is determined to be the last component in the process. When the selected component is determined at step  to be the last component in the process, the method returns to step  to await detection that another process has been loaded into memory.",{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 3","b":["300","301","302","304","306"]},"For example, while a component is loaded into memory, it is possible to rename the on-disk representation of the component, make a copy of the renamed on-disk representation of the component and then rename the copy back to the original component name. This technique causes the in-memory component and its associated on-disk representation to be assigned a new component name, while the original component name is assigned to a \u201cnew\u201d on-disk representation of that component. The new on-disk representation of the component should no longer have an associated in-memory component, meaning that the preferred base address of the new on-disk representation can be modified. Subsequent calls by the operating system for the original component name, will cause the new on-disk representation to be loaded into the modified base address location.","Those skilled in the art will appreciate that other techniques may be employed to modify the preferred base address of an on-disk representation of a component. By way of example, a \u201ccopy-on-reboot\u201d method may be employed. However, such a method may not be desirable because it requires that the computer system be restarted. In addition, the process(es) to which the component belongs may be terminated so that the on-disk representations can be modified.","Returning to , if it determined at step  that the selected relocated component is not still in memory, the method can proceed directly to step . At step , the on-disk representation of the relocated component's preferred base address is changed to match the new in-memory base address of that component (as determined from the file loaded at step ). However, if it is determined at step  that the selected component is still in memory, the method proceeds to step . At step , the on-disk representation of the selected component is renamed to a back-up component name. Then at step , a copy is made of the renamed on-disk representation. Next at step , the copy of the renamed on-disk representation is renamed back to the original relocated component name. At step , a determination is made as to whether original relocated component name is still associated with an in-memory component. If the original relocated component name is still associated with an in-memory component, the renaming \u201ctrick\u201d of steps - is deemed to have failed and the selected relocated component is momentarily skipped as the method advances to step  to determine if there are any other relocated components of the process.","However, if it is determined at step  that the original relocated component name is no longer associated with an in-memory component, the renaming \u201ctrick\u201d of steps - is deemed to have succeeded and the method proceeds to step  where the preferred base address of the on-disk representation having the original (i.e., selected) relocated component name is changed to match the new in-memory base address of that component (as determined from the file loaded at step ). Those having ordinary skill in the art will know that the Microsoft Windows operating system provides the Application Programming Interface (API) call \u201cRebaseImageEx\u201d for the purpose of changing on-disk representations of base addresses. Other operating systems may provide similar API calls. Also familiar to those having ordinary skill in the art will be the necessity to bind the selected relocated component to its updated on-disk representation of its preferred base address. Windows provides the API call \u201cBindImageEx\u201d for the purpose of binding components to base addresses and other operating systems may provide similar API calls. At step , the selected relocated component is bound to its new preferred base address.","At step , a report file is written out for auditing purposes. Then, at step , a determination is made as to whether the selected relocated component is the last relocated component of the process. If the selected relocated component is not the last relocated component of the process, the method returns to step  for selection of the next relocated component. The method is repeated from step  to step , as previously described, until it is determined that the selected relocated component the last relocated component of the process. When the selected relocated component is determined at step  to be the last relocated component of the process, the method ends at step .","As may be seen from the foregoing, the present invention provides systems and methods for dynamically setting the optimal base address of a component of a process. After the optimal base address is set, the process may be loaded from persistent storage into memory without base address collisions. Those skilled in the art will appreciate that the foregoing description of the invention was provided by way of example only and that many other modifications, features, embodiments and operating environments of the present invention are possible. It should also be appreciated that the exemplary aspects of the present invention as described above are not intended to be interpreted as required or essential elements of the invention, unless explicitly stated otherwise."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 3"}]},"DETDESC":[{},{}]}
