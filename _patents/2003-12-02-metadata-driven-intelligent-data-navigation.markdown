---
title: Metadata driven intelligent data navigation
abstract: A system is provided for enabling a user to extract useful information from a collection of business data. Relationships that connect various data elements are analyzed in order to identify intelligent data navigation paths. The intelligent data navigation paths are utilized as a basis for enabling the user to move between related sets of data.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07634478&OS=07634478&RS=07634478
owner: Microsoft Corporation
number: 07634478
owner_city: Redmond
owner_country: US
publication_date: 20031202
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF ILLUSTRATIVE EMBODIMENTS"],"p":["The present invention relates to data analysis tools provided to a user of a business application. More specifically, the present invention relates to the identification and user-utilization of navigation paths between related data elements.","When designing software applications involving business transactions, application developers conventionally use a model-driven architecture and focus on domain specific knowledge. The model driven architectures often include business objects (or business entities) involved in underlying business transactions, such as business entities corresponding to customers, orders and products. These entities are modeled as objects following the paradigm of object orientation.","Each object encapsulates data and behavior of the business entity. For example, a Customer object contains data such as name, address and other personal information for a customer. The Customer object also contains programming code, for example, to create a new Customer, modify the data of an existing Customer and\/or save the Customer to a database.","The object model also enables a description of relationships among modeled business entities. For example, a number of Order objects can be associated with a Customer object representing the customer who makes those orders. This is known as an association relationship. Other types of relationships can also be defined, such as compositions. An Order, for example, can be \u201ccomposed of\u201d a collection of OrderLines. These OrderLines typically do not exist independently of the Order they belong to.","Application developers apply the business logic associated with the object-relational model to their applications. Data that corresponds to objects in the object-relational model is typically stored in a database. Data is commonly retrieved from the relational database utilizing on-line transaction processing (OLTP).","Business applications designed to operate in association with the described model-driven architecture are often linked to a considerable amount of data. The quantity of data can be overwhelming to a user of such applications such that the user has difficulty in deriving or extracting useful information. The relationships that connect various data sets are not necessarily obvious to a user, and are therefor susceptible to being lost analytical and organizational opportunities.","The present invention provides a system for enabling a user to extract useful information from a collection of business data. In accordance with one aspect of the invention, the relationships that connect various data elements are analyzed in order to identify intelligent data navigation paths. The intelligent data navigation paths are utilized as a basis for enabling the user to move between related sets of data.","In accordance with one embodiment, to accomplish intelligent navigation of a collection of business data, a user first provides a data context to a navigation service layer. The navigation service layer supplies the data context to a plurality of providers that are each associated with a particular type of data navigation. In light of its particular type of data navigation, each provider analyzes the data context in association with a metadata store that reflects relationships between data elements comprised within the collection of business data. Each provider then supplies the navigation service layer with a list of intelligent navigation links. The navigation service layer submits the received links to the user. To intelligently navigate through the collection of business data, the user traverses a desired link.","I. Illustrative Computing Environments","Various aspects of the present invention pertain to a system for enabling a user to extract useful information from a collection of business data. However, prior to describing the present invention in greater detail, embodiments of illustrative computing environments in which the present invention can be used will be described.",{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 1","b":["100","100","100","100"]},"The invention is operational with numerous other general purpose or special purpose computing system environments or configurations. Examples of well known computing systems, environments, and\/or configurations that may be suitable for use with the invention include, but are not limited to, personal computers, server computers, hand-held or laptop devices, multiprocessor systems, microprocessor-based systems, set top boxes, programmable consumer electronics, network PCs, minicomputers, mainframe computers, distributed computing environments that include any of the above systems or devices, and the like.","The invention may be described in the general context of computer-executable instructions, such as program modules, being executed by a computer. Generally, program modules include routines, programs, objects, components, data structures, etc. that perform particular tasks or implement particular abstract data types. The invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment, program modules may be located in both local and remote computer storage media including memory storage devices.","With reference to , an exemplary system for implementing the invention includes a general purpose computing device in the form of a computer . Components of computer  may include, but are not limited to, a processing unit , a system memory , and a system bus  that couples various system components including the system memory to the processing unit . The system bus  may be any of several types of bus structures including a memory bus or memory controller, a peripheral bus, and a local bus using any of a variety of bus architectures. By way of example, and not limitation, such architectures include Industry Standard Architecture (ISA) bus, Micro Channel Architecture (MCA) bus, Enhanced ISA (EISA) bus, Video Electronics Standards Association (VESA) local bus, and Peripheral Component Interconnect (PCI) bus also known as Mezzanine bus.","Computer  typically includes a variety of computer readable media. Computer readable media can be any available media that can be accessed by computer  and includes both volatile and nonvolatile media, removable and non-removable media. By way of example, and not limitation, computer readable media may comprise computer storage media and communication media. Computer storage media includes volatile and nonvolatile, removable and non-removable media implemented in any method or technology for storage of information such as computer readable instructions, data structures, program modules or other data. Computer storage media includes, but is not limited to, RAM, ROM, EEPROM, flash memory or other memory technology, CD-ROM, digital versatile disks (DVD) or other optical disk storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other medium which can be used to store the desired information and which can be accessed by computer . Communication media typically embodies computer readable instructions, data structures, program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term \u201cmodulated data signal\u201d means a signal that has one or. more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example, and not limitation, communication media includes wired media such as a wired network or direct-wired connection, and wireless media such as acoustic, RF, infrared and other wireless media. Combinations of any of the above should also be included within the scope of computer readable media.","The system memory  includes computer storage media in the form of volatile and\/or nonvolatile memory such as read only memory (ROM)  and random access memory (RAM) . A basic input\/output system  (BIOS), containing the basic routines that help to transfer information between elements within computer , such as during start-up, is typically stored in ROM . RAM  typically contains data and\/or program modules that are immediately accessible to and\/or presently being operated on by processing unit . By way of example, and not limitation,  illustrates operating system , application programs , other program modules , and program data .","The computer  may also include other removable\/non-removable volatile\/nonvolatile computer storage media. By way of example only,  illustrates a hard disk drive  that reads from or writes to non-removable, nonvolatile magnetic media, a magnetic disk drive  that reads from or writes to a removable, nonvolatile magnetic disk , and an optical disk drive  that reads from or writes to a removable, nonvolatile optical disk  such as a CD ROM or other optical media. Other removable\/non-removable, volatile\/nonvolatile computer storage media that can be used in the exemplary operating environment include, but are not limited to, magnetic tape cassettes, flash memory cards, digital versatile disks, digital video tape, solid state RAM, solid state ROM, and the like. The hard disk drive  is typically connected to the system bus  through a non-removable memory interface such as interface , and magnetic disk drive  and optical disk drive  are typically connected to the system bus  by a removable memory interface, such as interface .","The drives and their associated computer storage media discussed above and illustrated in , provide storage of computer readable instructions, data structures, program modules and other data for the computer . In , for example, hard disk drive  is illustrated as storing operating system , application programs , other program modules , and program data . Note that these components can either be the same as or different from operating system , application programs , other program modules , and program data . Operating system , application programs , other program modules , and program data  are given different numbers here to illustrate that, at a minimum, they are different copies.","A user may enter commands and information into the computer  through input devices such as a keyboard , a microphone , and a pointing device , such as a mouse, trackball or touch pad. Other input devices (not shown) may include a joystick, game pad, satellite dish, scanner, or the like. These and other input devices are often connected to the processing unit  through a user input interface  that is coupled to the system bus, but may be connected by other interface and bus structures, such as a parallel port, game port or a universal serial bus (USB). A monitor  or other type of display device is also connected to the system bus  via an interface, such as a video interface . In addition to the monitor, computers may also include other peripheral output devices such as speakers  and printer , which may be connected through an output peripheral interface .","The computer  may operate in a networked environment using logical connections to one or more remote computers, such as a remote computer . The remote computer  may be a personal computer, a hand-held device, a server, a router, a network PC, a peer device or other common network node, and typically includes many or all of the elements described above relative to the computer . The logical connections depicted in  include a local area network (LAN)  and a wide area network (WAN) , but may also include other networks. Such networking environments are commonplace in offices, enterprise-wide computer networks, intranets and the Internet.","When used in a LAN networking environment, the computer  is connected to the LAN  through a network interface or adapter . When used in a WAN networking environment, the computer  typically includes a modem  or other means for establishing communications over the WAN , such as the Internet. The modem , which may be internal or external, may be connected to the system bus  via the user-input interface , or other appropriate mechanism. In a networked environment, program modules depicted relative to the computer , or portions thereof, may be stored in the remote memory storage device. By way of example, and not limitation,  illustrates remote application programs  as residing on remote computer . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.","II. Illustrative Data Processing Environments",{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIG. 2A","b":["209","209","201","210"]},"The first type of data store depicted in  is database . Database , which is illustratively a relational database, contains transactional business data in generally non-aggregated form. Database  is illustratively configured to recognize on-line transaction processing (OLTP) at least to facilitate the storage and retrieval of data. In accordance with one embodiment, database  is an MS SQL Server system as is available from Microsoft Corporation of Redmond, Wash. Other database systems can be incorporated without departing from the scope of the present invention.","The other type of data store depicted in  is data warehouse . Data warehouse  illustratively contains data from database  arranged in a generally aggregated form. Data warehouse  may also contain data aggregations derived based on other aggregations or based on data in database . The data in data warehouse  is generally organized to enhance the performance and speed of data retrieval and processing executed in association with business application . The fundamental underlying transaction data, however, is typically retrieved from database  as necessary for the performance various functions including aggregation manipulations. At least some of the data in data warehouse  is illustratively the same, or directly related to, data in database . Data warehouse  is illustratively configured to recognize on-line analytical processing (OLAP). In accordance with one embodiment, data warehouse  is an MS OLAP Server system as is available from Microsoft Corporation of Redmond, Wash. Other systems can be incorporated without departing from the scope of the present invention.","In accordance with one aspect of the present invention, an application developer implements business logic for application use through development of an object-relational (O-R) model.  illustrates an application of business logic in association with data warehouse . The application developer has illustratively implemented an O-R model here-to-forth identified as object model . Object model  includes a plurality of different business entities, including a Customer entity , an Order entity  and an OrderLine entity .","The illustrated object model  incorporates notation that is commonly known as unified modeling language (UML). The notation shows a composition relationship between Order  and OrderLine . Thus, it indicates that the Order entity  is composed of one or more OrderLine entities . Object model  also shows that Order  has an association with Customer . Transactional data, such as values that correspond to the illustrated field properties for each object, is stored in database  and retrieved as necessary. It is to be recognized that object model  is a simple example for the purpose of illustration only.","In accordance with one aspect of the present invention, an OLAP model is generated based on the O-R model to create a multi-dimensional data model and\/or business intelligence (BI) entities that encapsulate object-to-object relationship information and other metadata. The creation and storage of a multi-dimensional model, BI entities and metadata will be discussed in greater detail below in Section V.","III. Intelligent Data Navigation Paths","Various aspects of the present invention pertain to a system for enabling a user to extract useful information from a collection of business data. The foundation underlying the system is based upon the identification and user-utilization of navigation paths between related data elements. The general nature of five specific navigation paths will now be described in the context of the data processing environments described in relation to . Detailed data relationships that enable these data navigation paths will be described in Section V.","A. The First Data Navigation Path","As was discussed above in relation to , data warehouse  illustratively contains data aggregations corresponding to transaction data stored in database . The first data navigation path relates to the process of traversing from an OLAP data element to corresponding transaction data. For the purpose of illustration, this navigation path will here-to-forth be referred to as \u201cdrill down\u201d navigation (also can be referred to as \u201cdrill through\u201d navigation).","An example will help to describe the nature of a drill down navigation.  is a screen shot demonstrating a presentation of aggregated data (e.g., OLAP data) to a user of a business application. The screen shot shows a graph illustrating the fact that a company's sales for calendar 1996 in the U.S. was $5,949.00. Assuming the user is interested in figuring out all of the U.S. customers that purchased the associated product in 1996, he can illustratively use a drill down navigation. Through a drill down navigation, the user is able to drill down to a customer transaction table.  is an example of a screen shot demonstrating the result of the drill down navigation, which is a customer transaction table showing U.S. customers who purchased the relevant product in calendar 1996.","B. The Second Data Navigation Path","The second data navigation path involves moving from transactional data to an associated aggregated collection of data (e.g., from transactional data to corresponding OLAP data, or from database  data to data warehouse  data). For the purpose of illustration, this process of moving from transactional data to aggregated data is here-to-forth referred to as \u201cdrill up\u201d navigation.","An example will help to describe the nature of a drill up navigation. The customer transaction table illustrated in the screen shot of  is an appropriate starting point for illustrating a drill up navigation. Each customer in the table has illustratively been assigned a city, as well as an ID category. If a user is interested in determining the aggregated total sales order quantity for all customers under the ID category \u201cALFKI\u201d, a drill up navigation can be utilized to produce such information.  is a screen shot illustrating the result of the drill up navigation and shows a graph showing that the sales order quantity for the customer ID \u201cALFKI\u201d is 225.58.","C. The Third Data Navigation Path","It is common for the data in data warehouse  to be aggregated into a hierarchical scheme. For example, the following scheme is typical of organization within the data warehouse:",{"@attributes":{"id":"p-0052","num":"0051"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"CUSTOMER"]},{"entry":[{},"\u2003-->LOCATION"]},{"entry":[{},"\u2003\u2003-->Region"]},{"entry":[{},"\u2003\u2003\u2003-->City"]},{"entry":[{},"\u2003\u2003\u2003\u2003-->Customer Name"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"Accordingly, an example set of data warehouse data is orgainized as follows:",{"@attributes":{"id":"p-0054","num":"0053"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"CUSTOMER"]},{"entry":[{},"\u2003-->LOCATION"]},{"entry":[{},"\u2003\u2003-->Northwest"]},{"entry":[{},"\u2003\u2003\u2003-->Seattle"]},{"entry":[{},"\u2003\u2003\u2003\u2003-->Boeing"]},{"entry":[{},"\u2003\u2003\u2003-->Portland"]},{"entry":[{},"\u2003\u2003\u2003\u2003-->Starbucks"]},{"entry":[{},"\u2003\u2003-->Midwest"]},{"entry":[{},"\u2003\u2003\u2003-->Minneapolis"]},{"entry":[{},"\u2003\u2003\u2003\u2003-->Target"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"Hierarchical schemes are utilized within the data warehouse because they are a relatively natural way to organize data. Given such organization, it becomes relatively simple to query data based on obvious aggregation patterns. For example, in accordance with the above example scheme, a user could easily query to find out what customers are in Portland, or to find out what customers are located in the Northwest, etc.","The third data navigation path involves moving through collections of data that are hierarchically organized. For the purpose of illustration, the third data navigation path will here-to-forward be referred to as \u201cdrill to detail\u201d navigation. A drill to detail navigation enables a user to move through certain levels of data based on inherent hierarchial organization.","An example will bring light to the nature of a drill to detail navigation.  is an example of a screen shot that provides aggregated information (e.g., data warehouse  data) to a user of a business application. The screen shot includes a chart showing that U.S. sales for a company in calendar 1997 was $15,072.00. Assuming the user wants to see the monthly sales for calendar 1997, he\/she can perform a drill to detail navigation. In other words, he\/she can drill to the monthly sales for 1997. The ability to move between data sets in this manner is illustratively suported by the hierarchical organization of data warehouse .  is a screen shot example showing a graph that represents monthly sales for 1997. The user is illustratively able to drill from the  aggregation to the narrower  aggregation.","D. The Fourth Data Navigation Path","It is possible for data, such as data in data warehouse , to be organized in association with a framework that includes a multi-dimensional star-oriented schema, a simple example of which is illustrated in . Within , Sale  is associated with two dimensions, namely, customer  and product . Shipment  is associated with the same two dimensions. It should be noted that Sale  could just as easily be associated with dimensions that are different than the dimensions of Product . In accordance with one embodiment, Sale  and Shipment  are each independent object entities, similar to those described in relation to . In accordance with another embodiment, however, Sale  and Shipment  are independent data warehouses.","When dimensions are shared as they are in , the stage is set for the fourth data navigation path. For the purpose of illustration, the fourth data navigation path will here-to-forward be referred to as \u201cdrill across\u201d navigation. With a drill across navigation, a user is able to navigate from a first object (or data warehouse) to an object (or data warehouse) that is similarly situated in terms of having a related dimension. For example, with reference to , if a user is looking at a collection of data related to Sale , he\/she can drill across and view data pertaining to Product . A drill across navigation enables the user to switch between sets of inherently related data.","An example will help shed light on the nature of a drill across navigation.  is an illustration of a sample screen shot that contains a portion of a graph that is viewed by a user of a business application. The graph generally presents sales information. More specifically, the graph presents sales order quantity to product relationship data for a company. To simplify the illustration, only a few rows of the graph are shown. A complete graph will include additional rows. It is assumed that the data organization scheme supporting the graph includes a sales data warehouse and a product data warehouse that share the same dimension, namely a product dimension. Accordingly, assuming the user is interested in determining a stock value for a product underlying the graph of , he\/she can drill across from the  graph to view stock value information.  is an example of a screen shot having a graph containing a stock value for a product.","In accordance with one aspect of the present invention, the described fourth navigation path is based on an analysis of a data organizatin scheme called a dimensional model, or based on an analysis of a data organization scheme called a BI entity model. The generation of dimensional and BI entity models will be described below in greater detail in relation to . Suffice it to now say that it is common for a dimensional and BI entity models to be organized into a series of facts (e.g., sales, product, etc.) that are associated with one or more dimensions (e.g., customer, product, etc.), similar to the organization scheme described in relation to . In accordance with one aspect of the present invention, a fact-to-fact drill across navigation is available in instances where dimensions are shared.","E. The Fifth Data Navigation Path","The fifth data navigation path is called an ad hoc logic association navigation, here-to-forth referred to as a \u201clogic association\u201d navigation. This navigation path is essentially a user-defined shortcut between two sets of related data. In one embodiment, a user applies his\/her business knowledge to identify properties within a first data collection that are related to properties in a second data collection. The related properties are then utilized as the basis for a data navigation path between the first and second collections of data.","An example will help to describe the fifth navigation path. A user illustratively creates a \u201cCustomer\u201d object within a data warehouse  (). The same user also illustratively creates a \u201cCustomer-Related-Information\u201d object. It is assumed that the user has a fundamental understanding of his\/her business. In accordance with the fifth navigation path, the user applies his\/her business knowledge to identify a property within the Customer object that is related to a property in the Customer-Related-Information object. The user is allowed to identify the related property relationship ad hoc at run time to enable data navigation between their associated objects. As opposed to the previously described four data navigation paths, the fifth path is generally not based on an underlying physical relationship, but instead is based on a user's understanding of his\/her business.","IV. Identifying the Data Navigation Paths","In accordance with one aspect of the present invention, a metadata store is created to catalog relationships between data elements. The above-described data navigation paths are illustratively defined and implemented through analysis of the relationship data in the metadata store.",{"@attributes":{"id":"p-0067","num":"0066"},"figref":"FIG. 11","b":["1101","1100","1104","1100","1102","1104","1102","1104","1102"]},"In accordance with one embodiment, the analysis of metadata store  and the identification of navigation paths are performed at run time. Accordingly, with the possible exception of input required for logic association navigations, user knowledge is generally not required to enable utilization of the navigation paths. The navigation paths are identified and provided to the user simply based on data relationships reflected in the data processing system.","V. Population of the Metadata Store","Population of metadata store  with data relationship information  will now be described in greater detail. It should be noted, however, that the specific type of relationship data stored within metadata store  can be customized to support a particular navigation path. For example, it is within the scope of the present invention to develop a new navigation path and configure the system to store corresponding relationship data within metadata store , if such data is not already being stored. For the purpose of illustration, examples of relationship data that is stored within metadata store  to support the above-described and other data navigation paths will be described in detail.","A. Relationship Data From O-R Model","It is common for data warehouse  () to be organized in accordance with a framework that enables a user to define objects and relationships. An example of such a framework was illustrated and described in relation to . In accordance with one aspect of the present invention, at least some of the relationships underlying the object-relational framework represent potential navigation paths, and are therefore utilized to populate metadata store . For example, based on a UML object diagram, the relationships between objects (e.g, associations and compositions) represent potential navigation paths and are therefore illustratively identified and cataloged in metadata store . Other known object relationships, such as inheritance relationships, also represent potential navigation paths and are therefore also illustratively cataloged in metadata store .","B. Relationship Data From Other Sources","In accordance with one embodiment, relationship data representing potential navigation paths is captured from the process of creating derivative informational models based at least in part on an object-relational model.",{"@attributes":{"id":"p-0074","num":"0073"},"figref":["FIG. 12A","FIG. 12A"],"b":["1250","1252","1254","1256","1250","1258","1260","1262","1258"]},"Focal points  represent certain data in the object model that is marked by the user as being a focal point of analysis. Object description  is an input which describes the object orientation relationships corresponding to a set of objects. This can take the form of, for example, a UML class diagram. Persistent data store mappings , which illustratively take the form of a map file, map the data referred to by the object model to the persistent data store (e.g., database  shown in ).",{"@attributes":{"id":"p-0076","num":"0075"},"figref":["FIG. 12B","FIG. 12A","FIG. 12B","FIG. 2B","FIG. 2A","FIG. 12B","FIG. 8","FIG. 12B","FIG. 12B","FIG. 12B"],"b":["200","1254","1256","1254","1264","201","1258","1258","1266","1268","1270","1262","1262","1270","1272","1274","1272","1274","1270"]},"In accordance with one aspect of the present invention, some of the data relationships  stored in metadata store  are related to mappings , dimensional model  and\/or BI entity object model .","Through model services  and BI entity generator , an object model is translated into a BI entity object model, which can also be referred to as a data warehouse object model. Generally speaking, the translation involves a transition from an OLTP UML object model to a multi-dimensional OLAP data warehouse object model. In accordance with one embodiment, relational mappings of the transition from the regular object model to the BI entity object model represent potential navigation paths, and are therefore added to metadata store . For reference, the regular object model objects can be referred to as business entities, while the objects associated with the OLAP data warehouse object model can be referred to as BI entities.","The mappings between the business entities and the BI entities are illustratively saved to metadata store . The mappings ultimately enable report navigation between the OLAP and OLTP domains. Also, navigation paths between BI entities are enabled for report navigation, including the ability to look across BI entities and to review transaction data associated with a BI entity.",{"@attributes":{"id":"p-0080","num":"0079"},"figref":["FIG. 13","FIGS. 12A and 12B"],"b":["1301","1250","1302","1304"]},"C. Relationship-NavPath Correlations","Exemplary correlations between specific data relationships and navigation paths will now be described, however, the present invention is not limited to the described examples.","In accordance with one aspect of the present invention, drill up and drill down navigation paths are derived based on the relationships between BI entities and their corresponding business entities. As has been described, the mappings generated during the generation of BI entities are cataloged to the metadata store. These mappings are illustratively the foundation that enables drill up and drill down navigations.","In accordance with another aspect of the present invention, model service system  is configured to identify the manner in which two UML models are related, and to generate shared dimensions for corresponding dimensional model cubes. Then, BI entities become the natural reflection of the star-oriented model, wherein for each dimension there will be generated one non-primary BI entity. To enable drill across navigation paths, the mappings between non-primary BI entities and their corresponding dimensions are illustratively cataloged to the metadata store. The relationships between BI entities are also identified. Accordingly, when two BI entities refer to the same shared dimension, a drill across is possible.","In accordance with another aspect of the present invention, to enable the foundation for drill to detail navigation paths, hierarchical relationships are cataloged to the metadata store when the BI entity model  is generated from the UML model  by model service .","VI. Navigation Service Architecture","With reference to  it was described that navigation service  analyzes the data in metadata store  in order to identify and implement navigation paths . In accordance with additional aspects of the present invention, illustrative architectural characteristics and functional methodology will now be described with regard to navigation service .",{"@attributes":{"id":"p-0087","num":"0086"},"figref":["FIG. 14","FIG. 11","FIG. 11"],"b":["1104","1401","1402","1100","1401"]},"In accordance with step , the navigation service provides a plurality of links to the user. The links, which are displayed to the user, represent data navigation paths that are available for execution. The links are identified based on the review of the metadata. As is represented by step , the user selects a link and communicates the selection to the navigation service. In accordance with step , the navigation service retrieves data corresponding to the user's selection. Finally, in accordance with step , the result of the navigation is returned to the user, thereby providing him\/her with the desired data set.",{"@attributes":{"id":"p-0089","num":"0088"},"figref":"FIG. 15","b":["1502","1504","1506","1508"]},"Examples of the clients are now discussed, but these are examples only and do not limit the scope of the invention. Client  is illustratively a client based in the Microsoft Business Framework (MBF) but could be any other framework as well. The Microsoft Business Framework is a set of developer tools and software classes offered by Microsoft Corporation of Redmond, Wash. Client  is illustratively a client based in Windows, an operating system offered by Microsoft Corporation, but could be based on any other operating system as well. Client  is illustratively based in Microsoft Office, a software package offered by Microsoft Corporation, but could be based on any other software package as well. Client  is a more generic identifier representing a web-based client.","In accordance with one embodiment, at least one of the illustrated clients are BAPI clients in that they are configured to support object-oriented programming via an interface defined in terms of objects and method based in what is known as the Business Application Program Interface (BAPI). In other words, a BAPI client application navigates information using BAPI. To support the BAPI clients, the illustrated architecture includes a BAPI provider manager and an MBF BIPath API .","Provider manager  is illustratively configured to operate in conjunction with a plurality of providers. A few specific providers, to which the present invention is not limited, are illustrated in . Providers , ,  and  are configured to support different types of navigation, such as navigation based on analysis of BI Entity data, as described herein. Provider  illustratively provides navigation via analysis of metamodel data. Provider  is a generic block indicating other providers that the architecture can easily be extended to support (e.g., navigation based on other sources). At least one provider is illustratively a BAPI provider configured to operate in conjunction with the other BAPI components of the architecture.","In accordance with one aspect of the present invention, one of the BAPI clients sends a navigation Request to BAPI provider manager  through BAPI. The BAPI provider manager then either delegates the Request to a set of specific providers or broadcasts to all providers. The BAPI provider manager  then aggregates results returned from different providers and sends them back to the requesting BAPI client.","In accordance with one embodiment, when a new BAPI provider is implemented, it will implement the BAPI API and extend the Request\/Response objects if necessary to provide additional functionality. The new BAPI provider will then be plugged into the BAPI provider manager  and make itself available for requests. After this, the BAPI client will be able to request the service from the new BAPI provider to obtain any additional offered functionality.","Accordingly, a BAPI client includes an application that navigates information using BAPI. The BAPI, which will illustratively be exposed, is the principle interface implemented by a BAPI provider. A BAPI providers is an implementation of BAPI API: a BAPI client navigates to obtain a different information perspective via a BAPI provider. The framework can then be extended through implementation of future\/other providers through the similar Request\/Response object exchange format. There therefor can be type specific BAPI providers (Hypermedia providers, BIPath providers, etc.). This can be done through implementation of BAPI in a provider specific manner to support custom Request\/Response objects. The BAPI provider plugs itself into the BAPI provider manager and is used by the BAPI client in a delegation (if type is specified)\/broadcasting pattern.","It should be emphasized that the client systems involved can be web services or non-web services. The submitted Requests illustratively, although not necessarily, include a data context used by a provider in the creation of a Response. In accordance with one embodiment, certain providers are associated with their own particular type of data navigation path. For its type of path, the navigation provider is configured to identify corresponding navigation paths based on a received Request.","In accordance with one embodiment, when a new type of data navigation path is desired, a corresponding new provider is simply registered and integrated. Accordingly, any entity can illustratively develop a navigation path provider to expand on the types of navigations available to client users. In other words, the provider layer is essentially plug-and-play with the service layer to enable relatively simple extensions of service functionality.","Within , the providers are generically listed as providers  (e.g., providers that provide navigation paths based on business entity information), providers  (e.g., providers that provide navigation paths based on BI Entity information), and providers  (e.g., other ISV providers including providers that provide navigation paths based on \u201cother\u201d sources).","Within , the providers are generically listes as providers  (e.g., providers that provide navigation paths based on business entity information), providers  (e.g., providers that provide navigation paths based on BI Entity information ), and providers  (e.g., other ISV providers including providers that provider navigation paths based on \u201cother\u201d sources).","As is illustrated, requests are delegated (or broadcast) to providers ,  and , which respond with a response. In accordance with block , the responses are then provided to BAPI client  in an aggregated form (aggregation is optional). In accordance with one embodiment, the responses are provided to client  in the form of a collection of links. A link is selected by a user of the client and a corresponding \u201cTraverseLink( )\u201d command is sent to API . A corresponding navigation command is then sent to one or more providers so as to produce a data result, which is provided to client .","It should be emphasized that the Request\/Response objects can be extended by users. For example, each provider is configured to generate potentially different Requests\/Responses (e.g., exemplified in  by the different sizes of response circles).","As was described above in relation to , the process of intelligent data navigation includes generation of a plurality of data navigation links available for a data context received from the user. , in accordance with one aspect of the present invention, is a combination block-flow diagram illustrating the process of collecting available navigation links in association with the described system archetecture.","The process illustratively begins when a user  interacts with a data navigation program (e.g., a plug-in navigation application implemented within a main application such as Microsoft Exel). Through the interaction, the user illustratively passes to a navigation service  a data context and request for navigation links. Navigation service  illustratively delegates (or broadcasts) a request for links to each of a plurality of navigation providers -. Each navigation provider - is illustratively configured to support a different type of data navigation path. Each navigation provider interacts with metadata service  to review information within metadata store  (e.g., store  in ) based on the data context provided by the user to service  to identify navigation paths of its own respective type. Each navigation provider - then returns a list of links to service , the list of links corresponding to navigation paths available for the provider's respective navigation type. Service  illustratively aggregates all available navigation links and provides them to the user .","In accordance with one aspect of the present invention, as has been alluded to, as opposed to delegating a request for links to a suitable navigation provider, the request can instead be broadcast to multiple providers. In accordance with one embodiment, no navigation type is specified by a client in a broadcast request object. The clients do not specify a type so that the request will be broadcast to multiple providers (e.g., all registered providers). The providers that know about the request will illustratively respond while other providers will not. This is different than the \u201cdelegating\u201d scenario.","As was described above in relation to , the described process of intelligent data navigation also includes a user executing or traversing one particular link from the received aggretated list of links. , in accordance with one aspect of the present invention, is a combination block-flow diagram illustrating the process of traversing one particular navigation link in association with the described system architecture.","The  process begins with user  selecting one of the available navigation links returned in response to his\/her request for navigation. The selected link is provided to the navigation provider - to which it corresponds. In the illustrated example, the link is provided to drill across provider . The provider that receives the link passes criterion related to the link to either data service  or database service . Service  serves providers that will provide data warehouse (e.g., data warehouse ) information to the user, while service  services providers that will provide database (e.g., database ) information to the user. Based on the received criterion, service  or  will interact with either data warehouse  or database , respectively, to obtain the information that corresponds to the navigation destination associated with the link. The information, which is illustratively the executed navigation, is provided to user  through service layer .","VII. Serialized or XML Interfaces","In accordance with one aspect of the present invention, the metadata in the metadata store (e.g., store  in ) is maintained in an XML format.","In accordance with one embodiment, the interface with which navigation providers interact to provide the described intelligent navigation capability can illustratively be described as follows:",{"@attributes":{"id":"p-0109","num":"0108"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"<<interface>>"},{"entry":"Navigation Service Provider"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"+GetProviderInfo ([in]providerInfoRequest:XmlElement):XmlElement"},{"entry":"+GetDrillPath ([in]DrillPathRequest:XmlElement):XmlElement"},{"entry":"+TraverseLink([in]TraversReuest:XmlElement):XmlElement"},{"entry":"+Navigate (NavigateRequest : XmlElement) : XmlElement"},{"entry":". . ."},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"Finally, in accordance with one aspect of the present invention,  is an exemplary request\/response class diagram that pertains to the processes associated with acquiring links in response to a user request for intelligent data navigation, and to the process of traversing one of the links selected by the user. As is illustrated, the processes are routed through a serialization base associated with an XML interface. It should be noted that the configuration of  is but one example of a system that is suitable to support the described intelligent navigation capabilities.","VIII. Exemplary Code","In accordance with one aspect of the present invention, following are a listing of code snippets that illustrate an implementation of the described extensible system.","The first code snippet (a) describes in code an example process of acquiring a listing of navigation links, and then traversing a navigation link. Comments denoted within the code snippet with \u201c\/\/\u201d explain the functionality of each line of code.",{"@attributes":{"id":"p-0113","num":"0112"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"294pt","align":"center"}},"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"a. Get Links and Traverse Link"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"294pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\/\/init INavigateProxy"},{"entry":"INavigateProxy navigateProxy= . . .;"},{"entry":"\/\/create get links request"},{"entry":"GetLinksRequest getLinksRequest = new GetLinksRequest( );"},{"entry":"\/\/set containment key"},{"entry":"getLinksRequest.ContainmentKey = . . .;"},{"entry":"\/\/add data context"},{"entry":"getLinksRequest.DataContext.Add(\u201cMicrosoft.EntityTests.Customer.CustomerID\u201d, 01963656\u201d);"},{"entry":"\/\/create a link filter"},{"entry":"getLinksRequest.InclusiveFilters.Add(typeof(Microsoft.EntityTests.Sales), \u201cTurnOver\u201d, \u201cProfit\u201d) ;"},{"entry":"\/\/set link categories"},{"entry":"getLinksRequest.LinkCategoryCollection.Add(\u201cMicrosoft.BusinessFramework.IntelliDrill.DrillUp\u201d);"},{"entry":"\/\/send get links request"},{"entry":"GetLinksResponse getLinksReponse = navigateProxy.GetLinks(getLinksRequest);"},{"entry":"\/\/traverse the link if a link is returned"},{"entry":"TraverseLinkRequest traverseLinkRequest = new TraverseLinkRequest( );"},{"entry":"traverseLinkRequest.Link = getLinksReponse.Links[0];"},{"entry":"traverseLinkRequest.ContainmentKey = . . .;"},{"entry":"traverseLinkRequest.SecurityDescriptor = . . .;"},{"entry":"\/\/send traverse link request"},{"entry":"NavigateResponse navigateResponse = navigateProxy.TraverseLink(traverseLinkRequest);"},{"entry":"\/\/get dataset back"},{"entry":"DataSet dataset = (DataSet) navigateResponse.Result;"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"The code snippet listed in part (a) assumes a scenario wherein, in response to a Request, a user is provided with a plurality of links. In accordance with one embodiment, the user simply asks for a link (or a type of link) and is directly provided a result. In essence, the GetLinks and TraverseLink processes are combined into a consolidated function. This consolidated function is illustratively called a Navigate function. Snippet (b) described a Navigate function.",{"@attributes":{"id":"p-0115","num":"0114"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"294pt","align":"center"}},"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"b. Navigate"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"294pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\/\/init INavigateProxy"},{"entry":"INavigateProxy navigateProxy= . . .;"},{"entry":"\/\/create navigate request"},{"entry":"NavigateRequest navigateRequest = new NavigateRequest( );"},{"entry":"\/\/set containment key"},{"entry":"navigateRequest.ContainmentKey = . . .;"},{"entry":"\/\/add data context"},{"entry":"navigateRequest.DataContext.Add(\u201cMicrosoft.EntityTests.Customer.CustomerID\u201d, \u201c01963656\u201d);"},{"entry":"\/\/create a link filter"},{"entry":"navigateRequest.InclusiveFilters.Add(typeof(Microsoft.EntityTests.Sales), \u201cTurnOver\u201d, \u201cProfiit\u201d)"},{"entry":"\/\/set link categories"},{"entry":"navigateRequest.LinkCategoryCollection.Add(\u201cMicrosoft.BusinessFramework.IntelliDrill.DrillUp\u201d);"},{"entry":"\/\/set security descriptor"},{"entry":"navigateRequest.SecurityDescriptor = . . .;"},{"entry":"NavigateResponse navigateResponse = navigateProxy.Navigate(navigateRequest);"},{"entry":"\/\/get dataset back"},{"entry":"DataSet dataset = (DataSet) navigateResponse.Result;"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"In accordance with one aspect of the present invention, in order to support new providers, a flexible architecture is provided wherein Request\/Response objects are extensible. For example, a user can define tailored instances of GetLinks and other elements so as to extend the base class for new providers. Snippet (c) demonstrates the flexible architecture.",{"@attributes":{"id":"p-0117","num":"0116"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"c. Request\/Response Extensibility"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"Note: Request\/Response Extensibility can illustratively"},{"entry":"be implemented by either"},{"entry":"extending the base class or using property bag."},{"entry":"public class MyGetLinksRequest : GetLinksRequest"},{"entry":"{"},{"entry":"public MyGetLinksRequest(XmlElement request) : base(request) { . . . }"},{"entry":"public String MyProperty { . . . }"},{"entry":"}"},{"entry":"public class MyTraverseLinkRequest : TraverseLinkRequest"},{"entry":"{"},{"entry":". . ."},{"entry":"}"},{"entry":"public class MyNavigateRequest : NavigateRequest"},{"entry":"{"},{"entry":". . ."},{"entry":"}"},{"entry":"public class MyNavigateResponse : NavigateResponse"},{"entry":"{"},{"entry":". . ."},{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"In accordance with one aspect of the present invention, the extensible architecture extends to provider functionality. Snippet (d) is an example.",{"@attributes":{"id":"p-0119","num":"0118"},"tables":{"@attributes":{"id":"TABLE-US-00007","num":"00007"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"d. Provider Extensibility"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"public class MyNavigateProvider : INavigateProvider"]},{"entry":[{},"{"]},{"entry":[{},"public XmlElement GetLinks(XmlElement request)"]},{"entry":[{},"{"]},{"entry":[{},"\/\/get object model from xml element"]},{"entry":[{},"MyGetLinksRequest getLinksRequest ="]},{"entry":[{},"new MyGetLinksRequest(request);"]},{"entry":[{},"\/\/do whatever with the request object"]},{"entry":[{},". . ."]},{"entry":[{},"}"]},{"entry":[{},"public XmlElement GetLinks(XmlElement request)"]},{"entry":[{},"{"]},{"entry":[{},". . ."]},{"entry":[{},"}"]},{"entry":[{},"public XmlElement GetLinks(XmlElement request)"]},{"entry":[{},"{"]},{"entry":[{},". . ."]},{"entry":[{},"}"]},{"entry":[{},"public String LinkCategory"]},{"entry":[{},"{"]},{"entry":[{},"Get"]},{"entry":[{},"{"]},{"entry":[{},"return \u201cMicrosoft.BusinessFramework.IntelliDrill.MyDrillType\u201d;"]},{"entry":[{},"}"]},{"entry":[{},"}"]},{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"Snippet (e), in accordance with one aspect of the present invention, demonstrates how the extended architecture is implemented within the original system to enable extended functionality for new providers.",{"@attributes":{"id":"p-0121","num":"0120"},"tables":{"@attributes":{"id":"TABLE-US-00008","num":"00008"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"287pt","align":"center"}},"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"e. Extensibility usage"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"287pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\/\/init INavigateProxy"},{"entry":"INavigateProxy navigateProxy= . . .;"},{"entry":"\/\/create get links request"},{"entry":"MyGetLinksRequest getLinksRequest = new MyGetLinksRequest( );"},{"entry":"\/\/set containment key"},{"entry":"getLinksRequest.ContainmentKey = . . .;"},{"entry":"\/\/add data context"},{"entry":"getLinksRequest.DataContext.Add(\u201cMicrosoft.EntityTests.Customer.CustomerID\u201d, \u201c01963656\u201d);"},{"entry":"\/\/create a link filter"},{"entry":"getLinksRequest.InclusiveFilters.Add(typeof(Microsoft.EntityTests.Sales), \u201cTurnOver\u201d, \u201cProfit\u201d) ;"},{"entry":"\/\/set link categories"},{"entry":"getLinksRequest.LinkCategoryCollection.Add(\u201cMicrosoft.BusinessFramework.IntelliDrill."},{"entry":"MyDrillType\u201d);"},{"entry":"\/\/set property for the extended request"},{"entry":"getLinksRequest.MyProperty = . . .;"},{"entry":"\/\/send get links request"},{"entry":"GetLinksResponse getLinksReponse = navigateProxy.GetLinks(getLinksRequest);"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"Although the present invention has been described with reference to particular embodiments, workers skilled in the art will recognize that changes may be made in form and detail without departing from the spirit and scope of the invention."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 2A"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 2B"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIGS. 3-7"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIGS. 9 and 10"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIGS. 12A and 12B"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 13"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 14"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 15"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 16"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 17"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 18"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 19"}]},"DETDESC":[{},{}]}
