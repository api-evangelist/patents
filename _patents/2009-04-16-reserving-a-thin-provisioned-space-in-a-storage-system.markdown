---
title: Reserving a thin provisioned space in a storage system
abstract: A storage system includes a storage space provisioning system coupled to a primary storage server and a secondary storage server to resize a thin provisioned secondary volume on the secondary storage server. The storage space provisioning system detects data stored on a primary volume that is to be transferred to a secondary volume and obtains a point-in-time copy of the data stored on the primary volume. The storage provisioner determines a maximum transfer size of the data to be transferred using the point-in-time copy, and compares the maximum transfer size to a difference between the thin provisioned size of the secondary volume and a used size of the secondary volume. The storage space provisioning system increases the thin provisioned size of the secondary volume to be greater than the used size of the secondary volume plus the maximum transfer size when the maximum transfer size is greater than the difference.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08108640&OS=08108640&RS=08108640
owner: Network Appliance, Inc.
number: 08108640
owner_city: Sunnyvale
owner_country: US
publication_date: 20090416
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","COPYRIGHT NOTICE\/PERMISSION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION"],"p":["This invention relates generally to reserving a thin provisioned space in a storage system, and more particularly to resizing a secondary volume on a secondary storage server.","A portion of the disclosure of this patent document contains material which is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure as it appears in the Patent and Trademark Office patent file or records, but otherwise reserves all copyright rights whatsoever. The following notice applies to the software and data as described below and in the drawings hereto: Copyright\u00a9 2008, NetApp, Inc., All Rights Reserved.","As the capacity of storage devices increases and as I\/O operations get faster, the ability to manage data storage operations in line with data transfers is getting weaker. Historically, when data was transferred (e.g., during a backup operation) from a primary storage server to a secondary storage server, administrators determined the size of a secondary volume on the secondary storage server to handle the transfer by predicting or estimating the rate of change of the data. For example, an administrator may have estimated that it was extremely unlikely that 20% of the data would have changed between backup operations. Therefore, an administrator would set the size of the secondary volume on the secondary storage server to be 20% larger than the primary volume on the primary storage server. The danger in making such estimations lies where the estimations are wrong, resulting in failed backup operations. Estimating the size of the secondary volume can have provided a solution in environments having a small amount of data to manage, but such a solution is insufficient for managing large amounts of data (e.g., the data of an enterprise).","One attempt at managing large amounts of data and data storage operations was to not try to predict the rate of change of the data, but to actually adjust the size of the secondary volume in line with the write operations of the data transfer. However, the size of the secondary volume could not grow on demand in the middle of a data transfer because the ability to resize the secondary volume could not keep up with the write operations. Another attempt at managing large amounts of data and data storage operations involved thin provisioning every secondary volume to the largest possible size. Those skilled in the art will appreciate that thin provisioning is a way of presenting more storage space to the hosts or servers connecting to the storage system than is actually physically available. This solution proved successful in environments where there were a small number of thin provisioned secondary volumes (e.g., 10, 12, 14 thin provisioned secondary volumes). However, many storage system background processes scaled linearly with the thin provisioned size of the secondary volumes. Consequently, in storage systems that pushed the limits of the storage system (e.g., environments having 500 thin provisioned secondary volumes), thin provisioning a great number of volumes to the largest possible size proved disastrous. For example, thin provisioning  secondary volumes to be the size of an entire pool of storage translated into a 500\u00d7 increase in time taken by certain storage system background processes.","One way to provision the necessary size of the secondary volume is to determine the size of the data that is to be transferred. However, transfer engines typically do not determine the amount of data to be transferred until the transfer is actually complete. In addition, traversing an active file system to determine the size of the data to be transferred can be an expensive and intensive operation that can significantly impact the load on a storage system's CPU.","A storage system includes a storage space provisioning system coupled to a primary storage server and a secondary storage server to resize a thin provisioned secondary volume on the secondary storage server before the primary storage server transfers data to the secondary storage server. The storage space provisioning system detects data stored on a primary volume on the primary storage server that is to be transferred to a secondary volume on the secondary storage server and obtains a point-in-time copy of the data to be transferred. The storage space provisioning system determines a maximum transfer size of the data to be transferred using the point-in-time copy and compares the maximum transfer size to a difference between the thin provisioned size of the secondary volume and a used size of the secondary volume. The storage space provisioning system increases the thin provisioned size of the secondary volume to be greater than the used size of the secondary volume plus the maximum transfer size when the maximum transfer size is greater than the difference and initiates the data transfer.","The present invention is described in conjunction with systems, clients, servers, methods, and computer-readable media of varying scope. In addition to the aspects of the present invention described in this summary, further aspects of the invention will become apparent by reference to the drawings and by reading the detailed description that follows.","In the following detailed description of embodiments of the invention, reference is made to the accompanying drawings in which like references indicate similar elements, and in which is shown by way of illustration specific embodiments in which the invention may be practiced. These embodiments are described in sufficient detail to enable those skilled in the art to practice the invention, and it is to be understood that other embodiments may be utilized and that logical, mechanical, electrical, functional, and other changes may be made without departing from the scope of the present invention. The following detailed description is, therefore, not to be taken in a limiting sense, and the scope of the present invention is defined only by the appended claims.","Rapid growth of data storage requirements coupled with relatively static information technology staffing levels is leading toward replacing manual provisioning processes with automated provisioning processes. The provisioning architecture of the present invention can provide storage administrators the ability to automatically manage some of their secondary storage provisioning without causing significant impact on a storage system's CPU load or adversely affecting space utilization.",{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 1","b":["100","100","110","200","140","150","160","140","150","160","170","170","1","170","110","130","130","110","100"]},"Storage of data in storage units  (- to -N) is managed by storage servers ,  and . Storage servers ,  and  receive and respond to various read and write requests from clients  and storage manager , directed to data stored in or to be stored in storage units . Storage units  are comprised of mass storage devices which can include, for example, flash memory, magnetic or optical disks, or tape drives. The storage devices in storage units  can further be organized as a Redundant Array of Inexpensive Disks\/Devices (RAID), whereby the storage servers ,  and  access the storage units  using one or more RAID protocols known in the art.","It will be appreciated that certain embodiments of the present invention may be implemented with solid-state memories including flash storage devices constituting storage array (e.g., storage server ,  or ). For example, a storage server (e.g., storage server ,  or ) may be operative with non-volatile, solid-state NAND flash devices which are block-oriented devices having good (random) read performance, i.e., read operations to flash devices are substantially faster than write operations. Data stored on a flash device are accessed (e.g., via read and write operations) in units of pages, which in the present embodiment are 4 kB in size, although other page sizes (e.g., 2 kB) may also be used.","When the flash storage devices are organized as one or more parity groups in a RAID array, the data is stored as stripes of blocks within the parity groups, wherein a stripe may constitute similarly located flash pages across the flash devices. For example, a stripe may span a first page 0 on flash device 0, a second page 0 on flash device 1, etc. across the entire parity group with parity being distributed among the pages of the devices. Note that other RAID group arrangements are possible, such as providing a RAID scheme wherein every predetermined (e.g., 8th) block in a file is a parity block.","Storage server ,  or  can be a file-level service such as used in a network-attached storage (NAS) environment, a block-level service such as used in a storage area network (SAN) environment, or a service which is capable of providing both file-level and block-level service. Although storage servers ,  and  are illustrated as single units in , a storage server can, in other embodiments, be comprised of a physically separate network module (an \u201cN-Module\u201d not shown) and disk module (a \u201cD-Module\u201d not shown). In one embodiment, the D-Module (not shown) includes data processing and storage access components. In contrast, the N-Module (not shown) includes functionality that enables a client access to storage access components (e.g. the D-Module) and includes protocol components, such as Common Internet File System (CIFS), Network File System (NFS), or an Internet Protocol (IP) module, for facilitating such connectivity. It should be noted that there may be different numbers of N- and D-Modules constituting a storage server in accordance with various aspects of the present invention. For example, there may be a number of N-Modules and D-Modules that do not reflect a one-to-one correspondence between the N- and D-Modules for a storage server. As such, the description of a storage server comprising one N-Module and one D-Module should be taken as illustrative only.","A network storage system  can include a number of storage servers. In certain embodiments, storage servers ,  and  are referred to as network storage subsystems. A network storage subsystem provides networked storage services for a specific application or purpose. Examples of such applications include database applications, web applications, Enterprise Resource Planning (ERP) applications, etc. Examples of such purposes include file archiving, backup, mirroring, etc. A network storage subsystem can also be implemented with a collection of networked resources provided across multiple storage servers and\/or storage units.","It should be noted that there may be a number of data replication relationships between storage servers in accordance with various embodiments of the present invention. For example, storage unit - may represent one storage object from a dataset A (not shown) that is backed up onto storage unit - in backup storage server . In addition, storage unit - may represent one storage object from a dataset A that is mirrored onto another storage object from dataset A in storage unit-5 in mirror storage server . Further, storage unit - may be a storage object from a dataset B (not shown) that is backed up onto another storage object from dataset B in storage unit-4 in backup storage server . Moreover, storage unit - may represent one storage object from a dataset B that is mirrored onto another storage object from dataset B in minor storage server . As such, the description of a single data replication relationship between storage servers ,  and  should be taken as illustrative only.","During normal operations, one storage server (e.g. primary storage server ) functions as a primary provider of data to a client (e.g. client ). A second storage server (e.g. backup storage server ) takes on a standby role in the data redundancy setup, replicating data in the primary storage server  as, for example, a backup storage server, but not servicing client requests intended for disks accessible via the primary storage server. A third storage server (e.g., mirror storage server ) can mirror the data of the backup storage server . In another embodiment, the third storage server  can mirror the data of the primary storage server . In disaster recovery, client requests intended for the primary storage server  can then be serviced using data in the secondary storage server (e.g., backup storage server ) if the secondary storage server stores a backup. This hand-off occurs in a \u201cfailover\u201d operation, wherein client requests are redirected from the primary storage server  to the secondary storage server (e.g., backup storage server ). In one embodiment, storage manager  controls and causes the failover operation. In other embodiments, the primary and secondary storage servers themselves coordinate the failover. Thus, even in the event of a disaster, a client  may continue to access its data.","For example, primary storage server  manages storage units (e.g., storage unit- (-) and storage unit- (-)). Storage unit- and storage unit- may be physical disks. The client machines  can store and access data in storage unit- and storage unit-. The primary storage server  can protect the data in storage unit- and storage unit- by backing up the data to the backup storage server  in storage unit- (-) and storage unit- (-). In addition, the backup storage server  can further mirror storage unit- and storage unit- onto the storage unit- (-) and storage unit-N (-N) managed by the mirror storage server . In some embodiments, the client machine  stores data in an internal storage device (not shown) such as a disk and backs up the internal disk to another storage device such as storage unit- and storage unit- managed by the backup storage server . It should be noted that \u201cdata transfer\u201d will be used to describe data being backed up from one storage server (e.g., primary storage server ) to another storage server (e.g., backup storage server ) and data being mirrored from one storage server (e.g., backup storage server ) to another storage server (e.g., mirror storage server ). It should also be noted that the term \u201cprimary storage server\u201d will be used to describe a storage server storing data that is to be transferred (e.g., data to be backed up to a secondary storage server or data to be mirrored to a secondary storage server). The term \u201csecondary storage server\u201d will be used to describe a storage server storing the data transferred from the primary storage sever. Therefore, when data is transferred (e.g., backed up) from the primary storage server  to the backup storage server , the primary storage server  can be referred to as a primary storage server and the backup storage server  can be referred to as a secondary storage server. Likewise, when data is transferred (e.g., mirrored) from the backup storage server  to the mirror storage server , the backup storage server  can be referred to as a primary storage server and the mirror storage server  can be referred to as a secondary storage server.","Storage manager  is operative to communicate instructions via network  to storage servers ,  and  regarding what data to replicate, how to replicate data (backup vs. mirror), where to replicate data, when to replicate, etc. The replication relationship between storage servers ,  and  is managed by storage manager  and is indicated by data replication relationship . The storage manager  can be implemented as a server, client machine, personal computer (PC), special-purpose computing machine, etc.","The storage manager  can initiate data to be transferred (e.g., backed up) from the primary storage server  to the backup storage server  by sending instructions (e.g., a backup request) to the secondary storage server . When storage manager  sends a request to backup a volume on the primary storage server , the primary storage server  generates a backup image that includes all of the point-in-time copies (\u201csnapshots\u201d) of a volume. A snapshot will be described in greater detail in connection with  and .","In one embodiment, storage manager  implements a storage space provisioning system  in network storage system  for provisioning space on a secondary storage server (e.g., backup storage server ). In another embodiment, the storage provisioning system  can be implemented on a storage server (e.g., backup storage server ). Details of one embodiment of a machine usage to implement the storage provisioning system  are shown in .","The storage space provisioning system  monitors data transfers (e.g., data being backed up from primary storage server  to backup storage server ) to ensure that the backup storage server  has the available storage capacity to store the data before the data is transferred (e.g., backed up). The storage manager  can also initiate data transfers from the backup storage server  to the mirror storage server . The storage space provisioning system  can monitor the data transfers to ensure that the mirror storage server  has the available storage capacity to store the data before the data is transferred.","One should appreciate that as the numbers of storage servers and storage devices grow in the networked data storage system , the workload of data management as well as the complexity of data management increases. Thus, it becomes more difficult for an administrator to manually manage data in the system . In order to improve efficiency and to reduce the risk of making errors, the storage space provisioning system  monitors the data to be transferred from a primary storage server to a secondary storage server and automatically reserves a thin provisioned space in the secondary storage server before the data is transferred. Details of automatically reserving a thin provisioned space on a secondary storage server are discussed below.",{"@attributes":{"id":"p-0031","num":"0030"},"figref":["FIG. 2","FIG. 1"],"b":["200","300","200","140","150","160","200","200","110"]},"In , storage manager  includes one or more processors  and memory  connected via an interconnect . Interconnect  represents any one or more separate physical buses, point to point connections, or both connected by appropriate bridges, adapters, or controllers. Interconnect , therefore, may include, for example, a system bus, a Peripheral Component Interconnect (PCI) bus, a HyperTransport or industry standard architecture (ISA) bus, a small computer system interface (SCSI) bus, a universal serial bus (USB), IIC (I2C) bus, or an Institute of Electrical and Electronics Engineers (IEEE) standard 1394 bus, sometimes referred to as \u201cFirewire.\u201d","Processor(s)  may include central processing units (CPUs) of storage manager  and thus controls the overall operations of storage manager . In certain embodiments, processor(s)  accomplish this by executing firmware or software stored in memory . Processor(s)  may be, or may include, one or more programmable general-purpose or special-purpose microprocessors, digital signal processors (DSPs), programmable controllers, application specific integrated circuits (ASICs), programmable logic devices (PLDs), or the like, or a combination of such devices.","Memory  is or includes the main memory of storage manager . Memory  represents any form of random access memory (RAM), read-only memory (ROM), or the like. In use, memory  may contain a set of computer-executed instructions which, when executed by processor(s) , causes processor(s)  to perform operations to implement aspects of the present invention. In one embodiment, storage space provisioning system  resides in memory  to enable storage manager  to provision space on a secondary storage server as further discussed herein. Storage space provisioning system  may be implemented in computer-executable software, firmware, hardware or some combination thereof, and is discussed further in reference to .","Memory  also includes computer-executable instructions for implementing a protection policy on the network storage system, including instructions for directing a storage server to replicate data on another storage server. In one embodiment, referring to , instructions in memory  enables storage manager  to direct storage server  to establish a relationship with storage server  and backup data to storage server  via network .","Also connected to processor(s)  through interconnect  is a network adapter . Network adapter  provides storage manager  with the ability to communicate with remote devices, such as clients  over network  of , and may be, for example, an Ethernet adapter or Fibre Channel adapter. In one embodiment, network adapter  is connected to the network to process messages sent from storage servers  and  to storage manager .","In some embodiments, storage manager  is implemented in the same processing environment as a storage server (e.g. storage server ,  or ). In these cases, storage manager  also includes a storage adapter  connected to processor  via interconnection . Storage adapter  allows processor(s)  to access mass storage devices (e.g. storage units ), and may be, for example, a Fibre Channel adapter or a SCSI adapter, for servicing client requests received via network adapter .","In certain embodiments, a user interface  is coupled to storage manager  for a storage administrator to interface with storage manager . User interface  may include command line interfaces or other means for receiving inputs from a storage administrator. In other embodiments, inputs from a storage administrator may be supplied to storage manager  by client  via network .","Storage space provisioning system  for reserving a thin provisioned space in a secondary storage server is now discussed in accordance with one embodiment of the invention as shown in . Those skilled in the art will appreciate that thin provisioning is a way of presenting more storage space to the hosts or servers connecting to the storage system than is actually physically available. Storage space provisioning system  can be implemented by hardware (e.g., circuitry, dedicated logic, programmable logic, microcode, etc.), computer-implemented software (such as instructions run on a processing device), or a combination thereof. In one embodiment, the storage space provisioning system  can be located on storage manager  in . In another embodiment, one or more components of the storage space provisioning system  can be located on one or more storage servers, such as backup storage server  in .","Primary storage server  can have the data stored on its physical disks organized in logical storage containers called volumes and aggregates. An \u201caggregate\u201d is a logical container for a pool of storage, combining one or more physical mass storage devices (e.g., disks) or parts thereof into a single logical storage object, which contains or provides storage for one or more other logical data sets (e.g., volumes) at a higher level of abstraction. A \u201cvolume\u201d is a set of stored data associated with a collection of mass storage devices, such as disks, which obtains its storage from (i.e., is contained within) an aggregate, and which is managed as an independent administrative unit. A volume includes one or more file systems, such as an active file system and, optionally, one or more persistent point-in-time images (\u201cpoint-in-time copies\u201d or \u201csnapshots\u201d) of the active file system captured at various instances in time. A \u201cfile system\u201d is an independently managed, self-contained, hierarchal set of data units (e.g., files, blocks, or logical unit numbers (LUNs)). An \u201cactive file system\u201d is a file system to which data can be both written and read or, more generally, responds to both read and write I\/O operations. Although a volume or file system (as those terms are used herein) can store data in the form of files that is not necessarily the case. That is, a volume or file system can store data in the form of other units of data, such as blocks or LUNs. Logical volumes can be organized into smaller data management entities called \u201cqtrees.\u201d A qtree is a subset of a volume used to allocate storage. A system administrator can set the size of a qtree and the size of the amount of data that can be stored in it, but the size of the qtree may not exceed the size of the volume that contain the qtree.","In this example, the primary storage server  has a single volume \u201c\/vol\/privault\u201d (also referred to as \u201cprimary volume\u201d ) that holds two qtrees, qtree_ A and qtree_ B. The client machines  and  can access data managed by the primary storage server  via network . Note that the data can be stored in storage containers of different forms and\/or structures, such as qtrees, directories, volumes, etc. For example, the client machine  stores data in the qtree_ A, while the client machine  stores data in the qtree_ B. The primary storage server  can protect the data in qtree_ A and qtree_ B by backing up the data to the secondary storage server .","The secondary storage server  has a single volume \u201c\/vol\/secvault\u201d (also referred to as \u201csecondary volume\u201d ). The secondary volume  can be a thin provisioned volume. Those skilled in the art will appreciate that thin provisioning is a way of presenting more storage space to the hosts or servers connecting to the storage system than is actually physically available. With thin provisioning a storage administrator can combine one or more disks (or parts thereof) and create volumes for different applications to use, but does not actually allocate any space upfront to those volumes. The space may be allocated when the host application needs it. The unused space is available for the existing thin provisioned volumes to expand or for use in creation of new volumes.","An example of thin provisioning is when a network storage subsystem (e.g., storage server) contains 5,000 GB of useable storage capacity but the storage administrator has mapped LUNs (logical unit number) of 500 GB each to 15 hosts. In this example, the storage administrator makes 7,500 GB of storage space visible to the hosts even though the storage system has only 5,000 GB of useable space.  illustrates the secondary volume  shows a 500 GB volume allocated with only 400 GB of actual data. In this example, the thin provisioned size  of the secondary volume  is 500 GB and the used sized  of the secondary volume  is 400 GB. The secondary storage server  can respectively store a backup copy of the data in qtree_ A and qtree_ B on the primary volume  in its secondary volume  in qtree_A and in qtree_B.","In the embodiment shown in , the storage space provisioning system  includes a data transfer manager , a data transfer monitor , a point-in-time copy obtainer , a transfer size determinator , a secondary size obtainer , a size calculator , a size comparator , a secondary resizer  and a database . This division of functionality is presented by way of example for sake of clarity. One skilled in the art would understand that the functionality described could be combined into a monolithic component or sub-divided into any combination of components.","Data transfer manager  can send a backup request to secondary storage server  to backup data stored on primary volume  on a primary storage server  to a secondary volume  on secondary storage server . The data transfer manager  can be implemented as hardware, computer-implemented software, firmware or a combination thereof. In one embodiment, the data transfer manager  comprises instructions stored in memory  executable by processor  in  for carrying out the functions of the data transfer manager .","Data transfer monitor  can detect data to be transferred (e.g., backed up) from a primary storage server  to a secondary storage server . For example, the data transfer monitor  can monitor for when the data transfer manager  sends a backup request to the secondary storage server  to back up data stored on the primary volume  to a secondary volume . The data transfer monitor  can be implemented as hardware, computer-implemented software, firmware or a combination thereof. In one embodiment, the data transfer monitor  comprises instructions stored in memory  executable by processor  in  for carrying out the functions of the data transfer monitor .","If data transfer monitor  detects data stored on the primary volume  is to be backed up to the secondary volume , a point-in-time copy obtainer  can obtain a point-in-time copy of the primary volume  from the primary storage server . The point-in-time copy obtainer  can be implemented as hardware, computer-implemented software, firmware or a combination thereof. In one embodiment, the point-in-time copy obtainer  comprises instructions stored in memory  executable by processor  in  for carrying out the functions of the point-in-time copy obtainer .","In one embodiment, when data on a primary volume on a primary storage server (e.g., primary storage server ) is to be backed up to a secondary volume on a secondary storage server, the primary storage server generates a backup image that includes all point-in-time copies (\u201csnapshots\u201d) of the active file system. In another embodiment, a storage server can automatically and periodically generate a point-in-time copy of the active file system. One embodiment of a snapshot of a volume will be described in greater detail in connection with  and . In this example, the primary storage server  can generate a backup image having all point-in-time copies of the active file system. In one embodiment, the backup image includes a point-in-time copy of the active file system that is generated at the time the backup request is received. Point-in-time copy obtainer  can obtain the point-in-time copy generated by the primary storage server .","A transfer size determinator  uses the point-in-time copy to determine a maximum transfer size of the data to be transferred (e.g., backed up) from the primary volume  to the secondary volume . The determination of the maximum transfer size of the data to be transferred using the point-in-time copy is described in greater detail below in conjunction with . A determination of the maximum transfer size is made because the cost of determining the exact transfer size can be prohibitive. The transfer size determinator  can be implemented as hardware, computer-implemented software, firmware or a combination thereof. In one embodiment, the transfer size determinator  comprises instructions stored in memory  executable by processor  in  for carrying out the functions of the transfer size determinator . The point-in-time copy can be used to determine the maximum size of the data to be transferred (e.g., backed up).","A secondary size obtainer  obtains the thin provisioned size  of the secondary volume  and the used size  of the secondary volume . The secondary size obtainer  can be implemented as hardware, computer-implemented software, firmware or a combination thereof. In one embodiment, the secondary size obtainer  comprises instructions stored in memory  executable by processor  in  for carrying out the functions of the secondary size obtainer . The secondary size obtainer  can obtain the data from a management interface  on the secondary storage server . The management interface  can be implemented as hardware, computer-implemented software, firmware or a combination thereof. In one embodiment, the management interface  comprises instructions stored in memory (not shown) executable by processor (not shown) in backup storage server  in  for carrying out the functions of the management interface .","A size calculator  calculates the difference between the thin provisioned size  of the secondary volume  and the used size  of the secondary volume . The size calculator  can be implemented as hardware, computer-implemented software, firmware or a combination thereof. In one embodiment, the size calculator  comprises instructions stored in memory  executable by processor  in  for carrying out the functions of the size calculator . The storage space provisioner  can store the maximum transfer size, the thin provisioned size of the secondary volume, the used size of the secondary volume, and the difference calculated by the size calculator  in data structure such as a database , for example.","A size comparator  compares the maximum transfer size of the data to be transferred (e.g., backed up) to the difference between the thin provisioned size  of the secondary volume  and the used size  of the secondary volume  and determines whether the maximum transfer size is greater than the difference. The size comparator  can be implemented as hardware, computer-implemented software, firmware or a combination thereof. In one embodiment, the size comparator  comprises instructions stored in memory  executable by processor  in  for carrying out the functions of the size comparator .","A secondary resizer  causes the thin provisioned size  of the secondary volume  to be increased. The secondary resizer  can be implemented as hardware, computer-implemented software, firmware or a combination thereof. In one embodiment, the secondary resizer  comprises instructions stored in memory  executable by processor  in  for carrying out the functions of the secondary resizer . The secondary resizer  can send instructions to the management interface  on the secondary storage server  to increase the thin provisioned size  of the secondary volume . The secondary resizer  can request the size increase by calling an application programming interface (API) (not shown) on the secondary storage server . In one embodiment, the secondary resizer  can receive an acknowledgement from the management interface  that the thin provisioned size  of the secondary volume  has been increased and interface with the data transfer manager  to perform the data transfer.",{"@attributes":{"id":"p-0054","num":"0053"},"figref":"FIG. 4","b":["400","300","401","400","400"]},"At block , the method obtains a point-in-time copy of the data to be transferred (e.g., backed up). The method  can obtain a backup image that includes all of the point-in-time copies (\u201csnapshots\u201d) of a volume. In one embodiment, when data stored on a primary volume on a primary storage server is to be backed up to a secondary volume on a secondary server, the primary storage server generates a backup image that includes one or more point-in-time copies of the primary volume. In one embodiment, the method obtains a point-in-time copy of the data to be transferred from a primary storage server. In one embodiment, the image-based backup is a block-level incremental backup. A block-level incremental operation backs up only those blocks that have been changed since the last backup operation. Each block-level incremental operation generates a new backup image that includes only incremental snapshot(s). The backup image can store only the data blocks that have changed since an immediate-preceding snapshot.","At block , the method  uses the point-in-time copy (\u201csnapshot\u201d) to determine the maximum size of the data on the primary volume to be transferred to the secondary volume. Typically, a storage system organizes logical volumes into smaller data management entities called \u201cqtrees.\u201d A qtree is a special type of directory that acts as a \u201csoft\u201d partition, i.e., the storage used by the qtrees is not limited by physical space boundaries. For example, a storage system administrator may define backup relationships at the qtree level. However, a storage server, by default, does not track the size of the qtrees or how much data has changed in a qtree. It can be an expensive operation to determine how large a qtree is or how much of the data in a qtree has changed. However, certain features of the write-anywhere file layout system (such as the WAFL\u00ae file system as developed by NetApp, Inc. of Sunnyvale, Calif.), such as a snapshot operation, are logical volume attributes. Thus, when a storage server creates a snapshot, it creates a point-in-time copy of all qtrees in the volume, therefore enabling the size of a volume to be tracked.",{"@attributes":{"id":"p-0057","num":"0056"},"figref":"FIG. 5A","b":["530","530","512","520","510","510","510","510","512","520","530","512","520"]},{"@attributes":{"id":"p-0058","num":"0057"},"figref":["FIG. 5B","FIG. 5A"],"b":["600","512","520","530","600","530","510","530","601","601","510","530","601","602","512","520"]},{"@attributes":{"id":"p-0059","num":"0058"},"figref":"FIG. 6","b":["600","606","600","601","600","602","3","623","1","2","3","606","1","2","3","606","607","1","2","3","606"]},"Returning back to , the method  uses the size of the point-in-time copy (\u201csnapshot\u201d) of the volume to determine the maximum transfer size (e.g., a maximum size of the data to be transferred). By copying the qtrees grouped in the same primary volume on a primary storage server into a single secondary volume on the secondary storage server (also known as volume affinity), the block map and bitmaps in the point-in-time copy of the primary volume can be used to identify the maximum transfer size of the data to be transferred to a secondary volume. A determination of the maximum transfer size is made because the cost of determining the exact transfer size can be prohibitive. For example, the method  can determine from block map and bitmaps of the snapshot that the size of the primary volume is 150 GB. Therefore, in this example, the maximum size of the data to be transferred to the secondary volume is 150 GB. The method  can store the maximum transfer size in a database, for example.","At block , the method calculates the difference between the thin provisioned size of the secondary volume and the used size of the secondary volume. The method  can obtain the thin provisioned size of the secondary volume and the used size of the secondary volume from the secondary storage server and calculate the difference. For example, a secondary volume is thin provisioned at 500 GB and its used size is 400 GB. In this example, the method  calculates the difference as 100 GB. The method  can store the thin provisioned size of the secondary volume, the used size of the secondary volume, and the difference in a database, for example.","At block , the method  compares the maximum transfer size to the difference between the thin provisioned size of the secondary volume and the used size of the secondary volume. By comparing the maximum transfer size to the difference, the method  determines whether the secondary volume has reserved sufficient thin provisioned free space to store the maximum amount of data that could be transferred. At block , the method  determines whether the maximum transfer size is greater than the difference. If the maximum transfer size is not greater than the difference, the secondary volume has reserved an adequate amount of thin provisioned free space to store the data that is to be transferred and the method  completes. Otherwise, if the maximum transfer size is greater than the difference, the method  continues to block  to increase the thin provisioned size of the secondary volume. The method  can send instructions to the secondary storage server to increase the thin provisioned size of the secondary volume. For example, a storage space provisioning system can request the size of the secondary volume to be increased by calling an API on the secondary storage server. In the above example, the maximum transfer size of 150 GB is greater than a difference of 100 GB, so the method  increases the thin provisioned size of the secondary volume. By increasing the thin provisioned size of the secondary volume, the method  ensures that the container within which the qtree lives has enough capacity to store the data to be transferred. The method  can increase the thin provisioned size of the secondary volume to be greater than the used size of the secondary volume plus the maximum transfer size. Using the above example, where the used size of the secondary volume is 400 GB and the maximum transfer size is 150 GB, the method  increases the thin provisioned size of the secondary volume from its current thin provisioned size of 500 GB to be greater than 550 GB.","In one embodiment, at block , the method  receives a notification confirming that the thin provisioned size of the secondary volume has been resized. At block , the method  initiates the data transfer (e.g., the data on the primary volume on the primary storage server can be backed up on the secondary volume on the secondary server).","In one embodiment not illustrated, the method  does not resize the secondary volume every time data is to be transferred from a primary volume to a secondary volume. The method  can resize the secondary volume periodically (e.g., every 10 or 15 times a data transfer is to occur). However, to ensure that the thin provisioned free space of the secondary volume is sufficient to accommodate transfers before the next periodic resizing, when the method  does resize a secondary volume, it can resize the thin provisioned size of the secondary volume to be an additional percentage of the used size of the secondary plus the maximum transfer size. The percentage value can be a pre-defined value or a user configurable value. The percentage value can be stored in a database. The method  can obtain the value from the database to resize the secondary volume. For example, the method  increases the thin provisioned size an additional 10 percent of the sum of the used size of the secondary and the maximum transfer size. Using the above example, the method  resizes the secondary volume an additional 55 GB (i.e., 10 percent of 550 GB) to 605 GB instead of 550 GB.","In practice, the method  can constitute one or more programs made up of computer-executable instructions. Describing the method with reference to the flowchart in  enables one skilled in the art to develop such programs, including such instructions to carry out the operations (acts) represented by logical blocks  until  on suitably configured computers (the processor of the computer executing the instructions from computer-readable media). The computer-executable instructions can be written in a computer programming language or can be embodied in firmware logic or in hardware circuitry. If written in a programming language conforming to a recognized standard, such instructions can be executed on a variety of hardware platforms and for interface to a variety of operating systems. In addition, the present invention is not described with reference to any particular programming language. It will be appreciated that a variety of programming languages can be used to implement the teachings of the invention as described herein. Furthermore, it is common in the art to speak of software, in one form or another (e.g., program, procedure, process, application, module, logic . . . ), as taking an action or causing a result. Such expressions are merely a shorthand way of saying that execution of the software by a computer causes the processor of the computer to perform an action or produce a result. It will be further appreciated that more or fewer processes may be incorporated into the method illustrated in  without departing from the scope of the invention and that no particular order is implied by the arrangement of blocks shown and described herein.","A storage manager comprising a provisioning architecture has been described. Although specific embodiments have been illustrated and described herein, it will be appreciated by those of ordinary skill in the art that any arrangement which is calculated to achieve the same purpose can be substituted for the specific embodiments shown. This application is intended to cover any adaptations or variations of the present invention.","Moreover, the description of  and  is intended to provide an overview of computer hardware and other operating components suitable for performing the methods of the invention described above, but is not intended to limit the applicable environments. One of skill in the art will immediately appreciate that the invention can be practiced with other computer system configurations. The invention can also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network.","It will be readily apparent to one of skill, that input\/output devices, such as a keyboard, a pointing device, and a display, can be coupled to the storage manager. These conventional features have not been illustrated for sake of clarity.","The term \u201cmemory\u201d as used herein is intended to encompass all volatile storage media, such as dynamic random access memory (DRAM) and static RAM (SRAM). Computer-executable instructions can be stored on non-volatile storage devices, such as magnetic hard disk, an optical disk, and are typically written, by a direct memory access process, into memory during execution of software by a processor. One of skill in the art will immediately recognize that the term \u201ccomputer-readable storage medium\u201d includes any type of volatile or non-volatile storage device that is accessible by a processor.","Therefore, it is manifestly intended that this invention be limited only by the following claims and equivalents thereof."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIGS. 5A-5B"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 6"}]},"DETDESC":[{},{}]}
