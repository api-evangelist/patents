---
title: Policy driven autonomic computing-specifying relationships
abstract: An autonomic computing system and method determine policy definitions () and a set of available actions (); monitor resources distributed within the system; determine if the system is at a desired end state; and modify resource states by sending instructions for the resources to perform available actions. The policy definitions () specify: start order between resources, prioritization between resources, conditional activation of policies, desired end state of resources, and location limitation of resources. The system and method receive status information from available resources, and monitor and modify the system until it reaches the desired end state. The policy definitions () can be determined by specifying a user-defined system end state and resource relationships. The policy definitions () can further harvest implicit relationships between resources, via self-discovery, and underlying relationships among resources.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07451201&OS=07451201&RS=07451201
owner: International Business Machines Corporation
number: 07451201
owner_city: Armonk
owner_country: US
publication_date: 20030930
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF PREFERRED EMBODIMENTS","ALTERNATIVE EMBODIMENTS"],"p":["The present patent application is related to and commonly owned U.S. patent application Ser. No. 10\/674,996, entitled \u201cPolicy Driven Automation\u2014Specifying Equivalent Resources\u201d, filed on even date herewith, and is related to and commonly owned U.S. patent application Ser. No. 10\/675,001, entitled \u201cPolicy Driven Autonomic Computing Systems\u2014Programmatic Policy Definitions\u201d, filed on even date herewith, the entire teachings of which being hereby incorporated by reference.","1. Field of the Invention","The present invention relates to autonomic computing systems, and more specifically to a system and method for specifying relationships in a policy driven autonomic computing system.","2. Description of Related Art","With the proliferation of computer systems in everyday life, our reliance on the automation and availability of these systems has become increasingly evident. Today, computer systems control everything from our bank and commerce systems, to educational and health records, and even our entire power grids. The need for automation to reduce the complexity, and redundancy and robustness for these systems grows ever apparent. This need has given rise to a new class Of computer system known as automated high availability systems. Typically, these systems are structured with varying degrees of redundancy that can be configured by an administrator.","In traditional administrative environments, reactions to events are either driven by system operators reacting in real time, or by a very limited set of automation actions which must be predefined for each event that may occur. Traditional solutions generally fail to address the real world complexities in that it is difficult to impossible to predefine all of the events that may occur and the actions to be taken for them\u2014especially when one considers that sequences of events may occur which need to be reacted to. This generally creates an intractable exploding network of potential events, one proceeding from the other, all of which must be accounted for through defined actions.","There are some automated high availability products which encompass some limited state driven knowledge where a set of resources is managed with the simple rule that all must be active or none are. However, the relationships of these resources are not defined and the actions to be taken are all scripted for a given event. Other known solutions have limited definitional characteristics in that dependency relationships for ordering start\/restart may be defined but the full generality is not specifiable.","Therefore a need exists to overcome the problems with the prior art as discussed above, and particularly for a method of specifying relationships in a policy driven autonomic computing system.","An autonomic computing system and method determine policy definitions and a set of available actions; monitor resources distributed within the system; determine if the system is at a desired end state; and modify resource states by sending instructions for the resources to perform available actions. The policy definitions specify: start order between resources, prioritization between resources, conditional activation of policies, desired end state of resources, and location limitation of resources. The system and method receive status information from available resources, and monitor and modify the system until it reaches the desired end state. The policy definitions can be determined by specifying a user-defined system end state and resource relationships. The policy definitions can further harvest implicit relationships between resources, via self-discovery, and underlying relationships among resources.","Other objects, features, and advantages of the present invention will become apparent from the following detailed description. It should be understood, however, that the detailed description and specific examples, while indicating preferred embodiments of the present invention, are given by way of illustration only and various modifications may naturally be performed without deviating from the present invention.","As required, detailed embodiments of the present invention are disclosed herein; however, it is to be understood that the disclosed embodiments are merely exemplary of the invention, which can be embodied in various forms. Therefore, specific structural and functional details disclosed herein are not to be interpreted as limiting, but merely as a basis for the claims and as a representative basis for teaching one skilled in the art to variously employ the present invention in virtually any appropriately detailed structure. Further, the terms and phrases used herein are not intended to be limiting; but rather, to provide an understandable description of the invention.","The terms \u201ca\u201d or \u201can\u201d, as used herein, are defined as one or more than one. The term plurality, as used herein, is defined as two or more than two. The term another, as used herein, is defined as at least a second or more. The terms including and\/or having, as used herein, are defined as comprising (i.e., open language). The term coupled, as used herein, is defined as connected, although not necessarily directly, and not necessarily mechanically. The terms program, software application, and the like as used herein, are defined as a sequence of instructions designed for execution on a computer system. A program, computer program, or software application may include a subroutine, a function, a procedure, an object method, an object implementation, an executable application, an applet, a servlet, a source code, an object code, a shared library\/dynamic load library and\/or other sequence of instructions designed for execution on a computer system.","The present invention, according to a preferred embodiment, advantageously overcomes problems with the prior art by specifying relationships in a policy driven autonomic computing system. The information technology boom can only explode for so long before it becomes too cumbersome to manage by human intervention. Increasing processor might, storage capacity, and network connectivity, must report to some kind of systemic authority if we expect to take advantage of the full potential of these increasing capabilities. The human body's self-regulating nervous system presents an excellent model for creating the next generation of computing\u2014autonomic computing.","This new paradigm shifts the fundamental definition of the technology age from one of computing, to one defined by data. Access to data from multiple, distributed sources, in addition to traditional centralized storage devices will allow users to transparently access information when and where they need it. At the same time, this new view of computing will necessitate changing the industry's focus on processing speed and storage to one of developing distributed networks that are largely self-managing, self-diagnostic, and transparent to the user.","Policy driven autonomic computing allows the system to handle complex interdependencies between system resources, provide a reliable detection of status changes, and allow quick automation of failed resources. Preferred embodiments of the present invention will be described in detail herein below with reference to the attached drawings.","A preferred embodiment of the present invention allows an administrator to define through policy the desired end state of the elements of a system by defining the relationships among the various elements of the system. An administrator specifies policies\u2014what to start, when to start it, how long it should run, restrictions on where it should run, relative importance, etc. These statements ideally would be for the business applications that the administrator wants to run\u2014and do not deal with how these applications are to be brought up or down by the system.","These elements, or resources, can be software programs, hardware items, or compound resources that allow for arbitrary groupings of resources. The policy specifies how the system as a whole should operate, and the automation services take all of the necessary steps to drive the system towards the end state, reacting to any perturbation of that state or intermediate state as they occur. The policies are not limited to requiring full definition of resources but can also be automatically determined (\u201charvested\u201d) from the resources specified.","A resource may be any physical or logical entity that provides services to other components (e.g., Network adapter, service IP address, application). In a computing system, high availability (HA) is achieved by the automated system meeting a desired end state. Policies are used to describe how to manipulate the resources to keep them in desired end states. The relationship specification which embodies the requirements for meeting a specified end state policy contains generalized definitions of how various resources are grouped, how they relate to one another, and the desired state of the resources in relation to the system and other resources. In addition, the system can cooperate with the underlying operating environment to harvest relationships among classes of resources, and specific resource to resource relationships, in order to simplify the task of the administrator in specifying the policy required.","Someday it may be possible to derive implicitly from the applications exactly what they require in order to run, and then to extract iteratively from those supporting resources (e.g., middleware) what resources they require, and so on, until base level resources are reached. However, only a small portion of this vision is possible today. Thus, the user must specify the interrelations of the resources that support the user's application\u2014in some cases to the complete set, in others only until information can be harvested from that point down.","These interrelations are specified through a directed graph of relationships\u2014that determine what depends upon what, which resources can be used to support other resources, what is required to start after or before other resources. This specification of relationships tells the system how the various parts relate so that a failure anywhere along the chain can be handled and so that ordering of start and stop operations can be done correctly.","It is also possible to express some policy here as well (e.g., only this set of resources is to be considered, or to restrict the selection to a subset of nodes in the cluster, etc.). Conditionals can be used to drive recovery or start or stop decisions and priorities can be assigned to allow conflicts to be resolved. The administrator also configures the system by assigning values to resources\u2014such as an IP address to use for the application, or a file path in which to store data. This can be done at the application level, or can be done to specify what should be assigned to a resource, or even to create a given instance of a resource for the application to use.","An autonomic computing system  of an exemplary embodiment of the present invention is illustrated in . The autonomic computing system  of the exemplary embodiment is a network of systems containing a plurality of clusters of systems , , , . Each cluster , , ,  may be in communication with the World Wide Web  via a communications link . Additionally, any cluster can be in direct communications with any other cluster via an additional communications link . The communications links ,  could be a wired link, a wireless link, or any combination of wired and or wireless devices. In , cluster system A  is in communication with cluster system B . Likewise, cluster system C  is in communication with cluster system D . Each cluster may be heterogeneous in nature and distributed among various locations. Although the system illustrated is a network of systems , it would be obvious to one skilled in the art in view of the present discussion that the methods discussed herein will be equally applicable to individual cluster systems or even a single machine instance. Note that use of the term \u201ccluster\u201d, as known in the art, references a specific coupling of systems which is much tighter than the more general meaning of any set of computers, as we are using the term in the present text.",{"@attributes":{"id":"p-0038","num":"0037"},"figref":"FIG. 2","b":["104","104","104","204","206","208","210","216","218","201","202","104","102","212","214","201","204","206","208","210","212","214"]},"A more detailed block diagram of Server A  is shown in , according to a preferred embodiment of the present invention. The server  also includes one or more processors  which processes instructions, performs calculations, and manages the flow of information through the server . The server  also includes a program memory , a data memory , and preferably random access memory (RAM) (not shown). Additionally, the processor  is communicatively coupled with a computer readable media drive , network interface cards (NIC) , , and the program memory . The network interface cards ,  may be wired or wireless interfaces. Again, note that resources such as the NICs may be redundant to provide robustness for the system.","Included within the program memory , shown in more detail in , are a cluster resource manger  (to be discussed in more detail later), operating system platform , and glue software . The operating system platform  manages resources, such as the information stored in data memory , the scheduling of tasks, and processes the operation of the cluster resource manager  in the program memory . Additionally, the operating system platform  also manages many other basic tasks of the server  in a manner well known to those of ordinary skill in the art.","Glue software  may include drivers, stacks, and low-level application programming interfaces (API's) and provides basic functional components for use by the operating system platform  and by compatible applications that run on the operating system platform  for managing communications with resources and processes in the server .","Various software embodiments are described in terms of this exemplary computer system. After reading this description, it will become apparent to a person of ordinary skill in the relevant art(s) how to implement the invention using other computer systems and\/or computer architectures.","In this document, the terms \u201ccomputer program medium,\u201d \u201ccomputer-usable medium,\u201d \u201cmachine-readable medium\u201d and \u201ccomputer-readable medium\u201d are used to generally refer to media such as program memory  and data memory , removable storage drive, a hard disk installed in hard disk drive, and signals. These computer program products are means for providing software to the server . The computer-readable medium  allows the server  to read data, instructions, messages or message packets, and other computer-readable information from the computer-readable medium . The computer-readable medium , for example, may include non-volatile memory, such as Floppy, ROM, Flash memory, disk drive memory, CD-ROM, and other permanent storage. It is useful, for example, for transporting information, such as data and computer instructions, between computer systems. Furthermore, the computer-readable medium  may comprise computer-readable information in a transitory state medium such as a network link and\/or a network interface, including a wired network or a wireless network, that allow a computer to read such computer-readable information.","A more detailed block diagram of the cluster resource manager  is shown in . A user interface  allows an administrator to specify policy definitions  resource groups . In addition, a resource harvester  determines implicit relationships between recourses through self-discovery. An equivalency definer  outputs a set of equivalencies  that is stored in memory, such as a file or record, and are determined both from implicit discovery or explicit specification. The policy generator  is communicatively coupled to the user interface , the policy definitions , the equivalencies , and the resource groups , and uses the information from each of these elements to construct a system-wide graph  to find a set of available actions. A resource monitor  is communicatively coupled to each resource in the cluster and to the resource harvester , for communicating with each resource. An automation engine , is communicatively coupled to the system-wide graph of actions , the policy definitions , and the resource monitor , and relays desired actions to each resource via the resource monitor  in order for the system to establish and maintain a desired end state.","The automation policy definitions, according to a preferred embodiment of the present invention, specify the user-defined system end state and are defined through the use of four elements: resources, resource groups, equivalencies, and the relationships among the resources or resource groupings (such as Start\/Stop relationships, preferred priorities, or time of operation). A model for each resource has a set of attribute values, and all resources support a common set of operations (e.g. online, offline).","Each resource is typically globally accessible within a cluster, and can be one of three basic types\u2014serial fixed, serial floating, or concurrent, as shown in . A serial fixed resource is a resource of which there is only a single instance within the cluster. It is defined upon a single node and that is where it runs. It represents one entity such as a process, a mount point or a network adapter. A serial floating resource can run on several nodes in the cluster, but only one instance of the resource may be active at any time. It represents an automatable entity such as an application or service IP address that can run on several nodes. A concurrent resource is one that can run on multiple nodes in the autonomic cluster. Referring to , resource A  is fixed on node  ; resource B  and resource C  are fixed on node  ; resource E  is floating and currently active on node  , however it may be located on all the nodes; and resource F  is floating and currently active on node  , but it can only be located on node   or node  .","An exemplary operational flow diagram is shown in . The cluster resource manager  enters the process, at step , where it determines the user-defined end state. Note: the user in this instance is typically a system administrator. Next, the cluster resource manager , at step , determines the user-defined resource relationships. The administrator previously defines the desired policies, through a user interface  by specifying which resources are associated to which other resources\u2014by grouping resources into virtual resources that are collections of other resources. These collections\u2014resource groups , an example of which is shown in , are treated as one logical instance where the status of the group is the aggregation of all its members' status and a start\/stop attribute of a group affects all its members. Resource group  members can be resources or other resource groups . In , the resource group (RG1)  consists of a web server , a service IP , and a file system . Resource groups  may be nested, as shown in , and they may be located on different systems within the cluster, as shown in .","A managing relationship exists between a source resource and one or more target resources. The relationships among these resources are defined through a set of directed specifications such as Resource A--->dependsOn Resource B. Resource A-->isCollocated with Resource C, etc. which describe how the resources are related. In addition compound resources may be defined, such as ResourceGroup =(contains) {Resource A, Resource B}. Only the top most resources of the system are required to be defined by the administrator if the implicit relationships can be automatically determined (\u201charvested\u201d)\u2014otherwise the full set of relationships must also be determined by the administrator. The requirements and types of relationships will be discussed in more detail later.","At step , the resource harvester  of the cluster resource manager  finds and specifies implicit relationships through self discovery. Thus it may be discovered that Resource C-->dependsOn Resource D, and Resource D-->isLocated on Node , and Node  of a cluster.","Next, at step , the resource harvester  harvests a set of implicit relationships from the resources. These may come from relationships among the resources contained in a resource group , or from underlying system software such as the machine configuation, operating system, drivers, etc. In the case of ResourceGroup 1 above, all of its member resources (Resource A, Resource B) must be collocated and active or none may be. Thus a change in the state of Resource B may force the automation engine to drive recovery actions on Resource A in order to maintain the collocation requirement. Also note that if relationships are expressed from a compound resource on another resource (compound or not), such as ResourceGroup -->is Collocated with ResourceGroup  , that it may be implied that all of the members of ResourceGroup  must be collocated with ResourceGroup . A preferred embodiment of the present invention allows for default relationship specifications for defined compound resources (ResourceGroups) which may be different from other compound resources, and which allow the overall reduction in the policy statements that the administrator must specify. Thus for ResourceGroups all member resources are collocated by default, and all must be active or the other members must be stopped. It is of course possible to override these default relationships with administrator preferred relationships and for different compound resources to be defined with different implicit relationships among the members. Note that the underlying system software may also simplify the relationship definition by specifying classes of resources, such as IP addressees that contain implicit relationships on other resources. IP addresses, for example dependOn and must be collocated with a Network Interface resource.","Next, the cluster resource manager , at step , determines the policy definitions for resources, both those set by the administrator and implied from self-discovery, through the evaluation of the relationships to determine where resources should be allowed to operate, when they should operate, and the relative importance of the resources within a compound resource or between compound resources. Additionally, specification of the operational state of the resource (active\/inactive), the allowed locations of the resources (nodes in a cluster), and the relationships among the resources such as: IsStartable, StartsAfter, DependsOn. Location(canRunOn), Collocation, antiCollocation, and so on, allows the desired end state of the system to be described. These policies  are used to construct a system wide graph , at step , which the automation engine  can manipulate to define a set of actions (online, offline, reset, etc.) that are issued to the resources and activated by the resources themselves that will allow the desired state to be reached. The resource monitor , monitors each resource of the system, at step , and receives events reported by the underlying system software. If the desired end state has not been reached, at step , the automation engine  will take the necessary actions to modify the state of the resources that will allow the desired state or a subset of that state to be reached\u2014all without operator intervention. The resulting state changes (status of the actions) are reported back to the automation engine by the underlying system software in a feed back cycle  that allows the automation engine  to react to events as they occur.","This policy definition  is extendible as new types of relationships may be defined and implemented, new compound resources defined, automatic discovery of new or different underlying resources made by the system software, as the automation engine  evolves.","A concept utilized to simplify the relationship specification between resources is that of an equivalency of resources. The idea behind \u201cequivalency\u201d is that when a collection of resources provide the same services, one or more of these resources can be chosen to perform services. Basically, resources that have the same function (such as Network Interface Cards) but are distinct physical entities (e.g., two different physical cards), will be considered as the same, or equivalent, logically. Therefore, if a resource in an equivalency  fails, another resource in the equivalency  will be chosen to continue the services. Membership in an equivalency  can be specified by either statically numerating a membership list, or dynamically through discovery of resources with equivalent attributes.","This concept may be expanded to include nested equivalencies of resources, for instance, an IP address-->dependsOn Network Interface where the selection of the set of Network Interfaces that are usable depends on the connectivity of the interfaces. Network Interfaces connected to the same LAN with the proper subnet mask and base address may be deemed to be equally useful to satisfy the relationship, whether these Network Interfaces are attached to the same machine or to different machines in a cluster.","A preferred method for defining a set of equivalencies is shown in . The exemplary method shown in  can be called by the occurrence of one of three events, the method determining, at step , the appropriate branch for the process to follow: A) a resource class is specified, B) a new resource is discovered, or C) a resource deletion is discovered. If a resource class is specified, at step , all resources of the specified class are potential entries in an equivalency, and any resources of other classes are NOT potential entries. This resource class can be explicitly stated by the user or implicitly stated (e.g., if the user specifies a set of resources to be treated as \u201cequivalent\u201d they ALL normally will be of the same resource class). Alternatively, the system can implicitly determine the resource class to use during a harvest operation because each resource class definition also can contain the set of classes on which it \u201cdepends\u201d. These potential entries are then grouped, at step , according to the specified class.","Next, at step , a set of attributes that define the required functionality is specified. This attribute set can be viewed as a \u201cfilter\u201d mechanism for the universe of resources of the desired class. This can be explicitly stated by the user, or the system can implicitly determine the attribute selection during harvest. In a preferred embodiment, a \u201cselection\u201d string specifying the attributes and any matching pattern that is required can be configured (with standard wild card matches allowed) and, at step , all resources of the desired class whose attributes do not match the selection string are eliminated in the equivalency. At step , the equivalency set is defined as all resources that match the string. During automated relationship discovery (\u201charvesting\u201d), each resource discovered by the software can present a relationship which can express either a specific set of resources or a selection string to build an equivalency set.","If resources are dynamically discovered as new to the system\u2014either because they are newly defined or additional machines have been added, the process will follow path B, and the new resources, at step , are filtered through the select string, at step , (if one was specified), and added as required at step .","The reverse is also true. If resources are removed from the system, the process follows branch C, and the discovered resource deletion, at step , is checked against the equivalency set, at step . If it is determined to be in an equivalency, any such resource defined in an equivalency will be removed from the equivalency at step .","As an example, consider Network Interfaces connected to the same LAN with the proper subnet mask and base address. These resources would be grouped into an equivalency  that could be referenced wherever IP address resources needed to specify such a relationship. Such Equivalencies  may be generated automatically by the equivalency definer , or can be explicitly specified by the administrator among all of the available resources that meet the criteria. Through the attachment of a policy selection specification expressing a desired order, such as to proceed in a round robin fashion through the set, or to return to a previous resource in the set after recovery occurs, or other desired policy, the administrator can control which Network Interface is to be selected. Thus given the active state of the Network Interfaces and the resolution of any other constraints that the administrator might have specified will result in a subset of the resources in the equivalency set being useable\u2014and the application of the policy noted above will result in the selection of a single resource in the set as satisfying the requirements.","The above concept of equivalent resources, while self evident, is unique in the flexibility it provides for policy specification and the simplification of these resultant definitions. It becomes possible to define scenarios that allow for selections among subsets of available resources in a nested manner using this technique. Thus, if Adapter A, and Adapter B are both attached to a single hardware machine image (which is normally the case for availability reasons\u2014avoiding a single failure causing the termination of an entire solution), then Equivalency =(contains) {Adapter A, Adapter B}. If, likewise Adapter C and Adapter D are attached to another hardware machine image (which again is necessary to avoid single failure problems) Equivalency ={Adapter C, Adapter D} and so on.","It becomes possible to define a policy that specifies that an adapter failure should preferentially result in an adapter on the same machine being selected (in order to avoid the restart costs of higher level dependent software) and which states that the recovery of a machine should cause the resources to be restarted on the preferential location. This can be achieved by defining a compound resource Equivalency ={Equivalency , Equivalency } where the selection policy for Equivalency  is fall back (return to failed resource when recovery occurs) and the selection policy for Equivalency  and Equivalency  is ordered (highest priority first\u2014as specified from left to right in the membership list). This would cause the automation engine to select first from Equivalency \u2014highest priority in Equivalency , and if no adapter is active in Equivalency  to select a resource from Equivalency . Should the adapter chosen in Equivalency  fail, the automation engine  would attempt to select the other adapter in Equivalency , and if it was not available, would attempt to use an adapter in Equivalency . If the adapters in Equivalency  later become available (perhaps because the machine recovers) the automation engine could then select one of the adapters in Equivalency  and relocate the resources to that machine if a fall back policy had been specified by the administrator.","Another benefit of the preferred embodiment of the present invention is that specifying conditional relationships is allowed, which are evaluated in regard to the specific resource state when the relationship is applied, or which are activated when a specific resource state is reached. This allows the system to apply alternative policies when different resource states are present and allows for dynamic (\u201cruntime\u201d) adjustment of the administrator's policy specifications. Thus if it is necessary for a resources to be activated on the same node as another resource if that resource is not online (and thus for both to be activated on the same node), but to be activated on a different node if the resource is already active the usage of conditional statements such as \u201cif online\u201d or \u201cif offline\u201d will allow such dynamic policy evaluations.","Note that the full implementation of the administrator's desired policy may not be possible if all resources are not operational in the system. The specification of preferential end states is allowed through resource prioritization within a compound resource (Resource Group) or between resources (compound or otherwise), such that, if it is not possible to arrive at the total system end state specified by the administrator's policy an allowable substate may be reached for the preferred set of resources. Priority specifications such as Mandatory, NotMandatory, or priority ratings, allow the automation engine  to determine the desired end state among a conflicting set of end states which are possible from the policy definition . This allows a partial solution of the policy if the total desired end state cannot be met, and automatic action when resource events occur which enable other subsets of the desired state to be reached. Note that relationships may also have implicit prioritization\u2014hard relationships (Collocation) are Mandatory, soft relationships (Affinity) are Not Mandatory. In addition, prioritization via Non-Mandatory allows for the start or restart of resources (compound or otherwise) which might not otherwise be able to be activated or reactivated.","The relationships among the resources in the preferred embodiment of the present invention are from three basic types: start\/stop relationships, location relationships, and priority relationships. Start\/stop relationships are of three varieties: StartAfter, DependsOn, and DependsOnAny. A StartAfter relationship implies a startup sequencing; therefore, if Appl A\u2192StartAfter Service IP, then the Service IP must be running before Appl A may start. The main idea of A DependsOn relationship is that if Appl A\u2192DependsOn Appl B, then If B is gone, A does not work. For DependsOn there is an implicit collocation relationship for Appl A and Appl B, but note that for DependsOnAny relationships, the resources are not required to be collocated.","Location relationships define location constraints between resources. These may be hard constraints, such as: Collocated (resources must be on the same location) and AntiCollocated (resources must be on different locations), or soft constraints, such as: Affinity (resources should run on the same location) and AntiAffinity (resources should run on different locations). Other relationships may have implied location references as is the case with WhereStartable which restricts the available nodes to those that are allowable for the target resource or resources.","Prioritiy relationships allow for the selection of resources and relationships to be applied when conflicts arise. It is often the case, that conflicts are created when ALL of the desired resources (such as nodes within a cluster) are not available due to failure, maintenance, or the removal of resources while the system was off line. It is therefore important to allow the administrator to specify which among a subset of the total resources should be activated when it is impossible to reach the desired end state due to some outage event. For example (where ResourceGroup is a compound resource containing member resources which share certain implicit relationships), if ResourceGroup -->antiCollocated with ResourceGroup , and only one node of a two node cluster is currently active it is obviously impossible to reach the desired end state.","As can be seen any number of relationship possibilities can be defined and expressed by the preferred embodiment of the present invention. These relationships establish the definition of any association between any set of resources.","A scenario involving collocated resources is shown in . The system  is configured with the policy  App\u2192Collocated IP. A catastrophic failure occurs to node   wherein both the App and the IP become unavailable. If the automation engine  attempts to bring up the App and IP resources on node  , but one resource, such as the App, fails to start, IP cannot remain on node  . Instead, both the App  and the IP  must be must to the same location, in this case, node  .",{"@attributes":{"id":"p-0069","num":"0068"},"figref":"FIG. 12","b":["1200","1202","1","1204","2","1206","412","1212","3","1212","1214","4","1214"]},"It is possible to define relationships between resource groups, resources, and equivalencies in a variety of combinations in the preferred embodiment. The relationships can be defined between resources running on different systems within the heterogeneous cluster.","During the definition of the policy relationships among the resources in a system, such as Resource A-->DependsOn Resource B, the automation engine  can determine that the specified end state desired by the policy is in fact achievable (meaning that if all of the desired hardware is operational, there is a placement of the resources specified such that all of the resources can be activated without violating the relationship specifications).",{"@attributes":{"id":"p-0072","num":"0071"},"figref":["FIG. 13","FIG. 6","FIG. 6"],"b":["404","610","422","1301","304","612"]},"However, if it is impossible to achieve the desired end state, the policy generator  at step  evaluates substate possibilities using priority ratings and eliminating those soft relationships which prevent a solution. For example (where ResourceGroup is a compound resource containing member resources which share certain implicit relationships), if ResourceGroup \u2192AntiCollocated with ResourceGroup , and only one node of a two node cluster is currently active, it is obviously impossible to reach the desired end state. If, however, the administrator could specify that ResourceGroup 1 is Mandatory (MUST be active if at all possible) and ResourceGroup  is not, or if ResourceGroup  has a priority rating of 1 while ResourceGroup  has a priority rating of 3 (where 1 is the highest and n is the lowest), then the automation engine  can decide that ResourceGroup  should be activated due to the conflict with ResourceGroup . The specification of prioritization, and attributes such as Mandatory may allow such acceptable subsets to be found by determining a sequence for application of the policy definitions.","However, if an acceptable substate still cannot be found, at step , it is also desirable to allow the policy generator  to evaluate other conditional relationships specifications, at step , which take place when the state of a specified resource is known and the full set of relationships do not result in a solution at steps , . Conditional relationships allow policy definitions to be applied when the state of the specified resource meets a predetermined requirement. Thus If Resource A\u2192CollocatedWith Resource B if that resource is active, but can be placed elsewhere if Resource B is not active, it is necessary to specify a conditional operator on the relationship specified above. Thus, Resource A\u2192AntiCollocatedWith, IfOnline Resource B, forcing the location of Resource A ONLY if Resource B itself is active or can be activated. Additional conditionals can be defined (ifOnline, ifOnline, ifOnNodex) which provide the administrator with the ability to control the policy when a given state for the system occurs.","If an acceptable substate still cannot be achieved, at step , it is possible to evaluate alternative relationships which are applicable if the desired end state cannot be met and which therefore provide an alternative end state. Alternative relationships provide a policy definition or conditional relationship that can be applied when the required resource state of a first conditional relationship is not met. Thus, a conditional ifNotAchievable defines such alternate acceptable end states and can be used to modify relationships. ifNotAchievable (Resource C\u2192CollocatedWith, IfOnline Resource D); ifNotAchievable (Resource C\u2192AntiCollocatedWith, IfOnline Resource E), can be used to force certain location constraints to occur. Such programmatic relationships can be specified between resources and\/or compound resources and allow the fine tuning of the administrator's policies. If an acceptable substate still cannot be achieved, at step , this results in a system failure at step .","It is of course possible to define additional such relationships, and to provide what is essentially an interpreted policy with various \u201cIf, then, else\u201d clauses to allow the description in depth of arbitrary end state policies. The preferred embodiment of the present invention has defined programmatic policy verbs that allow various interactions to be described\u2014such as specifying which resource or resource sets MUST always be active, which ones can be ignored if they force a conflict with the desired end stale, which sets are more important (or less important) than others, and which resources or sets of resources should only be active or inactive when other resources are online or off line (IfOnline, or IfOffline specifications).","Turning now to , we examine an exemplary implementation of a high availability computing system which uses the techniques described herein. This is an example of the policy relationships to enable a HA server application system . This is a complex application that ensures a fast restart by maintaining state information in a backup server store on a different machine than the one where it currently is operating. Recovery is done by restarting the server application where its saved state store can be found and then restarting the state store on an alternate machine\u2014thus ensuring that state can be continuously saved and will be available following any subsequent failure.","The server application is constructed of several parts:\n\n","The recovery server  acts as a hot backup for the server  so that a failure can be quickly recovered from. As such it has several unique requirements:\n\n","The server  has the following characteristics:\n\n","These rules above produced the following set of relationships and conditionals:\n\n","There is one more thing to note: The recovery server  stops itself after it has completed refreshing the server  from its hot standby store. The relationships then come into play to restart it on another node (if possible).","Now, applying the above considerations to the present example:\n\n","If the Recovery Server  fails:\n\n","If the Server  fails: (Any of the elements\u2014the server , the message server , or the IP@ \u2014they are all collocated and mandatory and hence the grouping must be restarted if any fail).\n\n","The present invention can be realized in hardware, software, or a combination of hardware and software. Any kind of computer system\u2014or other apparatus adapted for carrying out the methods described herein\u2014is suited. A typical combination of hardware and software could be a general-purpose computer system with a computer program that, when loaded and executed, controls the computer system such that it carries out the methods described herein.","The present invention can also be embedded in a computer program product, which comprises all the features enabling the implementation of the methods described herein, and which\u2014when loaded in a computer system\u2014is able to carry out these methods. In the present context, a \u201ccomputer program\u201d includes any expression, in any language, code or notation, of a set of instructions intended to cause a system having an information processing capability to perform a particular function either directly or after either or both of the following: a) conversion to another language, code, or notation; and b) reproduction in a different material form.","Each computer system may include one or more computers and a computer readable medium that allows the computer to read data, instructions, messages, or message packets, and other computer readable information from the computer readable medium. The computer readable medium may include non-volatile memory such as ROM, Flash memory, a hard or floppy disk, a CD-ROM, or other permanent storage. Additionally, a computer readable medium may include volatile storage such as RAM, buffers, cache memory, and network circuits. Furthermore, the computer readable medium may include computer readable information in a transitory state medium such as a network link and\/or a network interface (including a wired network or a wireless network) that allow a computer to read such computer readable information.","While there has been illustrated and described what are presently considered to be the preferred embodiments of the present invention, it will be understood by those skilled in the art that various other modifications may be made, and equivalents may be substituted, without departing from the true scope of the present invention. Additionally, many modifications may be made to adapt a particular situation to the teachings of the present invention without departing from the central inventive concept described herein. Furthermore, an embodiment of the present invention may not include all of the features described above. Therefore, it is intended that the present invention not be limited to the particular embodiments disclosed, but that the invention include all embodiments falling within the scope of the appended claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0014","num":"0013"},"figref":["FIG. 3","FIG. 2"]},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":["FIG. 6","FIG. 1"]},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":["FIG. 10","FIG. 1"]},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":["FIG. 13","FIG. 1"]},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 14"}]},"DETDESC":[{},{}]}
