---
title: Method and system for managing documents
abstract: The present invention extracts common portions each composed of a structure and text character strings included commonly in both an original version and a revised version of a structured document, and difference portions specific to either the original version or the revised version. Based on the extraction results from the above two version documents, the present invention creates a multi-version document having version description tags attached thereto. When a further-revised version is created, the present invention performs the above process on the latest version included in the created multi-version document and the further-revised version to create a new multi-version document. By using the created multi-version document, it is possible to collectively display changes made to all the versions as well as to display the change history of a portion to which each change was made.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06931590&OS=06931590&RS=06931590
owner: Hitachi, Ltd.
number: 06931590
owner_city: Tokyo
owner_country: JP
publication_date: 20010118
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION"],"p":["The present invention relates to a method and a system for managing documents so as to indicate changes among a plurality of versions of a document by specifying and showing each difference between the versions.","Recently, documents to be widely distributed and reused, such as product manuals, have been written and stored in structured document formats, such as SGML (Standard Generalized Markup Language) in order to facilitate their distribution and reuse. As for frequently revised documents, a new version document (hereinafter simply referred to as a version) is generated each time a document is revised, and each new version is generally managed as a separate file. To intuitively grasp changes between versions, it is effective to employ a \u201cdifference indication\u201d method in which matching relationships between corresponding character strings in two files of different versions are extracted, and then portions (strings) which do not have corresponding matched portions (strings) are indicated as differences.","Japanese Laid-Open Patent Publication No. 9-319632 (1997) discloses a method for managing versions of structured documents, describing a technique of extracting differences between structured documents and indicating the extracted differences. Specifically, this version management method sets one of two versions written in a structured document format as a reference version, extracts difference information between the two versions (that is, extracts each change, and the portion to which the change has been made), and outputs an SGML document (hereinafter referred to as a \u201cdifference-embedded document\u201d), which is structurally described and embedded in the reference version. This difference-embedded document can be displayed by use of SGML document editing software available, etc. to highlight the changes from the reference version. Furthermore, each version can be restored by interpreting the structural description of the changes (difference information) embedded in the difference-embedded document, and converting the structure of the difference-embedded document based on the structural description. That is to say, a difference-embedded document is a document in which contents of two versions are efficiently described so that the contents of two versions are separable.","Further, in order to efficiently manage versions of a frequently revised documents, the method for managing versions according to the above patent publication sets a certain version as a reference version. And each time a new version is created, the method extracts difference information between the new version and the reference version. After that, the method outputs a \u201cdifference document\u201d in which only the obtained difference information is structurally described, and stores the output difference document as version management data in order to reduce the amount of data required for version management. In this case, it is possible to restore the two versions by interpreting the structural description of the changes (difference information) in each difference document, and converting the structure of the reference version based on the structural description.","Like HTML (Hyper Text Markup Language), XML (extensible Markup Language) is a structured document description language intended to be used on the Internet. XML is structurally a subset of SGML and can define a document structure freely as is the case with SGML. Not only can XML document data be displayed and printed out by use of an XML-aware Web browser, but also it can express various data based on a document structure defined for a specific application, which makes XML useful as a data exchange format on the Internet. Recently, various industries have been employing their industry-standard data exchange formats defined by use of XML.","A document body having a logical structure can be described in XML without using a prepared DTD (document type definition), which is not possible with SGML. However, it is necessary to mark up each element constituting the logical structure, instead, by sandwiching the element between a start tag and an end tag. To express an element \u201cparticipant name\u201d which is composed of elements \u201csurname\u201d and \u201cfirst name\u201d, for example, it is necessary to write a line such as: \u201c<participant name><surname>Hitachi<\/surname><first name>Taro<\/first name><\/participant name>\u201d. In SGML, on the other hand, if a DTD clarifies that the element \u201cparticipant name\u201d is composed of the elements \u201csurname\u201d and \u201cfirst name\u201d, the end tags \u201c<\/surname>\u201d and \u201c<\/first name>\u201d can be omitted by writing a line such as: \u201c<participant name><surname>Hitachi<first name>Taro<\/participant name>\u201d.","In XML, it is possible to write a document having a logical structure without necessarily preparing a DTD by sandwiching each element in the document between a start tag and an end tag, as described above. Capitalizing on this advantage, it is possible to freely combine various tag sets used for writing industry-standard data to write a document. The XML namespace is used to avoid \u201ccollision\u201d between element names (duplication of an element name), which may occur when a plurality of tag sets are used in a document. Consider a case in which a document including formulas and tables is written using three types of tag sets for writing the entire document body, the formulas, and the tables, respectively. Furthermore, suppose that the document body tag set includes a tag \u201c<title>\u201d for indicating a document title, and the table tag set also includes a tag \u201c<title>\u201d for indicating a table title. In such a case, the expression \u201c<title>XXX survey results<\/title>\u201d appearing in the document, for example, is vague as to which tag set the expression belongs to. To clarify which tag set each tag belongs to, a tag indicating a table title, for example, is expressed as \u201c<table: title>\u201d. In this case, the word \u201ctable\u201d indicates a namespace specifying a table tag set. Use of namespaces enables an application to discriminate each tag set even in an XML document including a plurality of tag sets. Furthermore, it is possible to regard only a tag set belonging to a specific namespace as a target for processing.","The following description exemplifies a case in which an application program is maintained up to date by referring to descriptions of APIs (Application Programming Interfaces) in versions of a programmer's guide written in a structured document format. It is assumed that a person in charge of the maintenance knows beforehand the version number of the programmer's guide corresponding to the APIs currently used in the program to be maintained (this version number is hereinafter referred to as \u201cthe earlier version number\u201d, or \u201cthe version number of the earlier version\u201d), and obtains changes made to the APIs by later versions to modify the program based on the changes.","To maintain an application program as described above, all APIs changed after the earlier version are extracted, and in which version (that is, when) each API change was made is specified. After that, it is necessary to determine the history of the changes indicating how changes were made on each version and obtain the contents of the latest version.","However, the conventional method for indicating difference information displays difference information obtained as a result of comparing only two versions: a reference version and each target version. Accordingly, when an earlier version is regarded as a reference version, and compared with the latest version to indicate their difference, the comparison results obtained indicate only the accumulated total difference (changes) between the reference version and the latest version. That is, it is not possible to obtain the information of how changes were made on each version between the reference and the latest versions. It may be possible to compare each newly revised version with its immediately previous version and extract the difference between them with regarding the immediately previous one as a reference version. However, when there are one or more versions generated between the earlier and the latest versions, it is necessary to trace the API change history from the earlier version to the latest version by checking changes between each version and its immediately previous version in between, and the portions to which the changes were made, resulting in time-consuming work.","A conventional difference-embedded document efficiently expresses the contents of two versions in a single document by using difference information derived from comparing the reference version and the target version. However, it is not possible to express the contents of more than two versions in one conventional difference-embedded document.","In order to solve the above problems, it is an object of the present invention to provide a method capable of expressing changes made to each version of a multi-version document.","To achieve the above object, a method of the present invention for generating a \u201cmulti-version\u201d document using a revised version and its immediately previous version of a structured document extracts: common portions each composed of a common structure and text character strings included in both the revised version and its immediately previous version of the structured document; difference portions each specific to either the revised version or its immediately previous version; and correlation between structures included in the revised version and structures included in its immediately previous version, and correlation between text character strings included in the revised version and those in its immediately previous version.","This method then creates the following multi-version document. In this multi-version document, each extracted common portion has a pair of version description tags attached thereto one of which includes the version identifiers of the revised version and its immediately previous version, and the node identifiers of this extracted common portion in the revised version and its immediately previous version. This multi-version document further includes each extracted difference portion having a pair of version description tags attached thereto one of which includes the version identifier of the version including this extracted difference portion, the node identifier of the extracted difference portion in the version including the extracted difference portion, and information indicating whether the extracted difference portion has been produced as a result of insertion or modification. This multi-version document further includes the correlation information described above. Thus, the above method of the present invention creates a multi-version document in which contents of two versions are efficiently expressed.","When a newly revised version has been created, the last version included in the multi-version document and the newly revised version are subjected to the above processing to produce a new multi-version document.","Based on this multi-version document, it is possible to display any arbitrary version. Furthermore, difference between a specific version and another version can be displayed also based on this multi-version document.","As described above, the present invention is capable of expressing changes made to a specific version selected from among a plurality of versions, using a single multi-version document.","A first embodiment of the present invention will be described below with reference to the accompanying drawings.",{"@attributes":{"id":"p-0049","num":"0048"},"figref":"FIG. 1","b":["1","8","2","1","2","1","1","3","4","5","6","7","6","61","62","63","65","66","67","61","2","9","10","11","12","12","121","64","65"]},{"@attributes":{"id":"p-0050","num":"0049"},"figref":"FIG. 2"},"The process of creating a new multi-version document proceeds as follows. First, the difference extraction program  for structured documents is executed on two versions (for example, an original version  and a revised version ) written in a structured document format. The difference extraction results are stored in the correlation table . Then, the program  for generating multi-version documents is executed to generate a multi-version document  of the XML format which expresses the contents of the two versions in a file, based on the difference extraction results stored in the correlation table .","The process of updating a multi-version document proceeds as follows. First, the program  for outputting a specific version is executed to output a latest version  as a specified version included in the multi-version document . Next, the difference extraction program  for structured documents is executed to compare the version  with a version to be added (for example, a further-revised version ). The difference extraction results are stored in a correlation table . Then, the program  for updating multi-version documents is executed to generate a multi-version document  to which the contents of the additional version has been added, based on the difference extraction results stored in the correlation table .","In the client , on the other hand, the program  for displaying multi-version documents performs multi-version document display controls such as switching of versions to be displayed, and cross-reference display, while the program  for outputting a specific version performs output control of multi-version documents.","Description will be made of structured document examples used for newly creating or updating a multi-version document. , , and  shows programmer's guides V, V, and V written in a structured document format as document examples which correspond to the original version , the revised version , and the further-revised version  in , respectively. The underlined portions in  indicate portions common to both the version V and the version V, while the italicized portions in  indicate portions common to both the version V and the version V. A tree structure (referred to as a \u201cdocument tree\u201d) as shown in  is generated by interpreting the structure of the structured document data shown in  node ID is assigned to each node to uniquely identify every node included in this document tree. In this embodiment, the node ID of the route node is set to \u201c1\u201d, and a node ID, such as \u201c_\u201d or \u201c_\u201d, obtained as a result of adding an additional number to the node ID of a parent node is assigned to its child node or a node lower than that. In , the node ID of each node of the document tree is indicated to the lower left of the node.","Description will be made of the process performed on the versions V and V by the difference extraction program  for structured documents.","First, data of the versions V and V is converted to data suitable for difference extraction processing. To make it easy to compare character strings in the difference extraction process, this embodiment replaces each tag included in a document by a symbol as shown in FIG. .","Next, a difference extraction process is performed on the above converted data for difference extraction processing by using a method of extracting difference between structured documents, disclosed in Japanese Laid-Open Patent Publication No. 8-329079 (1996). Difference extraction results as shown in  are obtained. In the figure, for example, the character string \u201cint exec_diff(char*fname, char*fname)\u201d of the node _ of the version V is divided into five portions such as a common portion \u201cint exec_diff (char*\u201d, a difference portion \u201cfname\u201d, another common portion \u201c, char*\u201d, another difference portion \u201cfname\u201d, and, finally, still another common portion \u201c)\u201d, for classification. These divided portions are hereinafter referred to as divided character strings. Furthermore, each divided character string is given a divided node ID obtained by adding an additional number to the node ID of the node including the divided character string. For example, the five divided character strings of the above node _ are given divided node IDs \u201c__\u201d, \u201c__\u201d, \u201c__\u201d, \u201c__\u201d, and \u201c__\u201d, respectively in the order of their occurrence.","Then, based on coincidence of two divided character strings extracted as common portions, the matching relationship between a pair of nodes each including the respective one of the two divided character strings is extracted. For example, a matching relationship between the node _ of the version V and the node _ of the version V, each node including the respective __ node is derived from the coincidence between the divided character string \u201cint exec_diff (char*\u201d of the divided node __ of the version V and the divided character string \u201cint exec_diff (char*\u201d of the divided node __ of the version V.","After that, relationships between difference portions included in two nodes which have a matching relationship are extracted. For example, the above node _ of the version V includes the divided nodes __ and __, which are portions common to the version V, and the divided node __ (\u201cfname\u201d), which is a different portion positioned between the two common portions (the divided nodes __ and __), whereas the node _ of the version V includes the divided nodes __ and __, which are portions common to the version V, and the divided node __ (\u201cstr\u201d), which is a different portion positioned between the common portions (the divided nodes __ and __). Therefore, the divided nodes __ in the versions V and V each occupy the same position in the respective version. Since these two difference portions both include the character \u201c1\u201d, it is determined that the two difference portions correspond to each other, and therefore one difference portion (\u201cfname\u201d of the version V) has been changed to the other (\u201cstr\u201d of the version V) between the two versions V and V. On the other hand, a divided node having no matching relationship between versions, such as the divided node ___ \u201c, then\u201d of the version V or the divided node ___ \u201c.\u201d of the version V is regarded as a deletion or an insertion, respectively.",{"@attributes":{"id":"p-0060","num":"0059"},"figref":["FIG. 9","FIG. 10"],"b":["67","1","1","67","2","2"]},{"@attributes":{"id":"p-0061","num":"0060"},"figref":"FIG. 11"},"The following description assumes that a multi-version document is to be generated using the above versions V and V.","First, a data normalization process is performed to normalize the contents of the version V based on the difference extraction results stored in the correlation table - at step .  shows the normalized contents of the version V. In the figure, all tags and text character strings included in the structured document are sandwiched between each pair of version description tags in units of common portions or difference portions. A pair of version description tags are used to discriminate each piece of data gathered and grouped for each version in a multi-version document. The pair of version description tags have attributes which hold version information and other information on data sandwiched by the pair of version description tags. This embodiment uses a type of version description tag to which the XML namespace is applied; specifically the tags starting with \u201c<diff:ver\u201d in FIG. . For example, the text character string of the divided node ___ of the version V is expressed as \u201c<diff:ver vnum=\u2018\u2019 node ID=\u2018___\u2019> It executes the difference comparison processing<\/diff:ver>\u201d. In the version description tag, \u201cvnum\u201d indicates the version attribute while \u201cnodeID\u201d indicates the node attribute. The entry line \u201c<function-list xmlns:diff=\u2018http:\/\/www.xxx.yyy\/diff\/\u2019>\u201d at the top of  is a namespace declaration which declares that the namespace \u201cdiff\u201d is applied to all structures following the phrase \u201cfunction-list\u201d. With this namespace declaration, it is possible to embed version description tags in a structured document having any structure without worrying about duplication of tag names. It should be noted that only processing systems which know the namespace \u201cdiff\u201d can process the above version description tags.","Next, based on information on the common portions included in the correlation table -, a version number of 2 is added to the version attribute of each pair of version description tags parenthesizing a common portion in the normalized data, and the value of the \u201ccorresponding divided node ID\u201d field  is added to the node attribute at step . For example, since the divided node ___ of the version V is a common portion, the entry line of the divided node ___ of the version V is rewritten by an entry line such as: \u201c<diff:ver vnum=\u2018\u2019 nodeID=\u2018______\u2019> It executes the difference comparison processing<\/diff:ver>\u201d.","Then, based on information on the difference portions included in the correlation table -, new difference portion structures are generated at step  by performing steps of: parenthesizing each difference portion with a pair of version description tags; setting its version attribute to the version number \u201c\u201d; setting its node attribute to the value of the divided node ID field ; and setting its difference class attribute to the value of the difference type field . For example, with respect to the difference portion \u201cto the user-specified file\u201d (the divided node ___) belonging to the node __ of the version V, a new difference portion structure (line) \u201c<diff:ver vnum=\u2018\u2019 nodeID=\u2018___\u2019 desc=\u2018insertion\u2019>to the user-specified file<\/diff:ver>\u201d is generated.","After that, the above generated new difference portion structures are inserted at proper positions determined based on relationships between the nodes included in the normalized data at step . For example, it can be seen from the values of the \u201ccorresponding divided node ID\u201d fields  in the correlation table - that the above difference portion \u201cto the user-specified file\u201d belonging to the node __ of the version V is inserted between the divided nodes ___ and ___ in the version V. Therefore, its new difference portion structure is inserted at a position immediately before the version description tag whose version attribute and node attribute are \u201c\u201d and \u201c___\u201d respectively in the normalized data.","A multi-version document as shown in  is generated by the above process. It may not be necessary to strictly manage node relationships between different versions depending on the type of a multi-version document to be created. If it is not necessary to strictly manage the node relationships, the node attribute and the difference class attribute may be omitted. For further simplification, version description tags common to both versions V and V may be omitted.",{"@attributes":{"id":"p-0068","num":"0067"},"figref":"FIG. 12"},"The following description assumes that the contents of the version V is to be normalized based on difference extraction results between the versions V and V.","If the process of newly creating a multi-version document is to be performed (step ), all tags and text character strings included in the document are parenthesized with each pair of version description tags, and its version attribute is set to \u201c1\u201d at step . Furthermore, a namespace declaration concerning version description tags is inserted with respect to the tag corresponding to the route node of the document tree at step . With this, the above entry line \u201c<para> It executes the difference comparison processing, then outputs the result.<\/para>\u201d of the node __ of the version V is rewritten by the entry line \u201c<diff:ver vnum=\u2018\u2019><para><diff:ver vnum=\u2018\u2019> It executes the difference comparison processing, then outputs the result.<\/diff:ver><\/para><\/diff:ver>\u201d, and the start tag \u201c<function_list>\u201d of the route node is also rewritten by the entry line \u201c<function list xmlns:diff=\u2018http:\/\/www.xxx.yyy\/diff\/\u2019>\u201d.","Next, referring to relationships between nodes included in the correlation table - (indicated by the node ID field  and the \u201ccorresponding node ID\u201d field ), it is determined whether, on each node belonging to the normalization-target version (in this case, the version V) (), it matches two or more nodes of the other version (in this case, the version V) at step . If there is a node of the version V which is associated with two or more nodes of the version V, the normalized entry line of the node is divided into the corresponding node Ys with the attribute of structure XX including the parenthesizing version description tags unchanged at step . For example, the node __ of the version V is associated with the two nodes __ and __ of the version V as shown in FIG. .","Therefore, the above normalized entry line (the node __ of the version V) is replaced by the two normalized entry lines \u201c<diff:ver vnum=\u2018\u2019><para><diff:ver vnum=\u2018\u2019> It executes the difference comparison processing<\/diff:ver><\/para><\/diff:ver>\u201d and \u201c<diff:ver vnum=\u2018\u2019><para><diff:ver vnum=\u2018\u2019>, then outputs the result.<\/diff:ver><\/para><\/diff:ver>\u201d, which are obtained as a result of dividing the above original normalized entry line at a position between the nodes __ and __.","Next, on the common portion and the difference portion relating to the version to be normalized in the correlation table - (), if the common portion and the difference portion coincide partially with the structure A parenthesized by version description tags wherein the structure A includes the version to be normalized as a version attribute (), they are divided into a coincided portion and the other, with the attribute of the structure AA unchanged wherein the attribute of the structure AA is held containing the version description tags which parenthesize the structure A (). For example, since the above normalized entry line \u201c<diff:ver vnum=\u2018\u2019>outputs the result. <\/diff:ver>\u201d includes a common portion \u201coutputs the result\u201d and difference portion \u201c.\u201d extracted separately in the correlation table -, the normalized entry line is replaced by two normalized entry lines \u201c<diff:ver vnum=\u2018\u2019>outputs the result <\/diff:ver>\u201d and \u201c<diff:ver vnum=\u2018\u2019>.<\/diff:ver>\u201d. Normalized data as shown in  is generated by the above process.",{"@attributes":{"id":"p-0074","num":"0073"},"figref":"FIG. 17"},"The following description assumes that the contents of a newly revised version V is to be added to a multi-version document generated from the versions V and V.","It is assumed that the difference extraction program for structured documents was already performed on both the latest version (in this case, the version V) included in the multi-version document to be updated and the version to be added (in this case, the version V), beforehand, to obtain the difference extraction results. It should be noted that  shows data (a tag-attached version V) obtained as a result of extracting the contents of the latest version (version V) including the version description tags incorporated in the multi-version document, and the tag-attached version Vis used as a comparison target, instead of the version V shown in FIG. .  shows an example of difference extraction results obtained by comparing Vwith V. In , each version description tag is the one replaced by a symbol different from that used to indicate each tag included in the original document so as to discriminate one from the other.","Description will be made of the process of updating a multi-version document based on the above difference extraction results.","First, based on information on common portions and difference portions included in the correlation table for the version V, a data normalization process is performed on the version Vincluded in the multi-version document at step . Next, based on information on common portions included in the correlation table for the version V, on each pair of version description tags parenthesizing common portions in the normalized data (), a version number of 3 is added to the version attribute and a corresponding divided node ID is added to the node attribute at step . Then, based on information on difference portions included in the correlation table for the version V, on each difference portion (), new difference portion structures are generated at step  by performing steps of: parenthesizing the difference portion with a pair of version description tags; setting its version attribute to the version number \u201c\u201d; setting its node attribute to the divided node ID; and setting its difference class attribute to the difference type. After that, above new difference structures are inserted at proper positions determined based on relationships between nodes included in the normalized data at step . A multi-version document as shown in  is generated by the above process.",{"@attributes":{"id":"p-0079","num":"0078"},"figref":"FIG. 19"},"First, the program for outputting a specific version receives the version number of a version to be output, and an instruction as to whether version description tags must be output at the time of outputting data at step . The program for outputting a specific version then checks whether the received version number is included in the version attributes of each pair of version description tags in a multi-version document at step , and outputs the structure belonging to each pair of version description tags which includes the received version number, if any, according to the above received instruction (as to whether version description tags must be output). If the received instruction instructs no version description tags to be output, only the internal structure parenthesized by each pair of version description tags which includes the received version number is output at step ; otherwise (if version description tags must be output) the structure belonging to each pair of version description tags which includes the received version number is output to a file including the pair of version description tags itself at step . That is, if the instruction requests that no version description tags be output, the original data of each version used to generate the multi-version document is output. If version description tags must be output, on the other hand, each tag-attached version is output.",{"@attributes":{"id":"p-0081","num":"0080"},"figref":"FIG. 20"},"First, the program for displaying multi-version documents receives an instruction as to which version must be displayed using which display pattern, at step . This embodiment uses two display patterns: the \u201cdisplay of specified version\u201d, in which the contents of a single version are displayed, and the \u201cdisplay of version cross-reference\u201d, in which a plurality of versions are displayed at the same time for comparison. The \u201cdisplay of version cross-reference\u201d provides two options: the text cross-reference display, in which version contents are displayed and compared using text, and the tree cross-reference display, in which version contents are displayed and compared using their document trees. Furthermore, the \u201cdisplay of specified version\u201d has display options such as the \u201cdifference display\u201d option, which highlights changes made to a specified range of versions such as a range from the version v through the version V, and the \u201cdisplay of modification history\u201d option, which displays the change history of the highlighted changes.","If the \u201cdisplay of specified version\u201d is specified as the display pattern, a specified version is displayed on the screen by referring to the version attribute of each pair of version description tags in a multi-version document in the \u201cdisplay processing of specified version\u201d ().","Further, if the \u201cdifference display\u201d is selected as an option of the above \u201cdisplay of specified version\u201d with a range of versions specified, the \u201cdifference display processing\u201d () highlights the structure belonging to each pair of version description tags whose version attribute satisfies the specified range of versions (that is, the version indicated by the first value of the version attribute is included in the specified range of versions) in the multi-version document to indicate the differences. Still further, if the \u201cdisplay of modification history\u201d is selected to display the change history of the above differences, the \u201cdisplay processing of modification history\u201d () generates a change history list of character stings obtained as a result of extracting the character string parenthesized by each pair of version description tags whose node attribute is the same as that of the pair of version description tags parenthesizing the above differences in the multi-version document, and displays the change history list in a pop-up window. FIG.  shows a screen example obtained as a result of selecting the above options \u201cdifference display\u201d and \u201cdisplay of modification history\u201d.","If the text cross-reference display option of the \u201cdisplay of version cross-reference\u201d is selected as the display pattern, the \u201cdisplay processing of text crossreference\u201d () obtains matching relationships between nodes in the multi-version document based on the version attribute and the node attribute of each pair of version description tags and displays a screen as shown in  using the obtained matching relationships.",{"@attributes":{"id":"p-0086","num":"0085"},"figref":["FIG. 22","FIG. 22"],"b":["1","221","2","222","1","221","1","222","392","6412","23"]},"This completes the description of the first embodiment.","The first embodiment extracts portions common to versions of a document, which are generated each time the document is revised, and adds portions specific to each version to the extracted common portions to generate a multi-version document of the XML format in which the contents of a plurality of versions are efficiently expressed, making it possible to reduce the amount of data necessary for version management, and facilitate exchange of data of a plurality of versions on a network. Furthermore, regarding all structures and text character strings included in a multi-version document, the first embodiment indicates the matching relationships of structures and text character strings belonging to one version with those belonging to another. By obtaining these matching relationships, it is possible to reproduce a given version, highlight changes (difference), and list the structures and text character strings in versions corresponding to a portion (a structure and text character strings) in a target version to which each change was made using the \u201cdisplay of modification history\u201d function, making it easy for the user to grasp changes made to a document and the times when these changes were made.","A second embodiment of the present invention will be described below.",{"@attributes":{"id":"p-0090","num":"0089"},"figref":"FIG. 24","b":["68","69"]},"The process of newly creating a multilingual document according to the second embodiment proceeds as follows. First, the program  for generating a correlation table is executed on an English version  and its Japanese version  to generate the correlation table . Then, the program  for generating multi-version documents is executed to generate a multi-version document  which expresses the contents of both versions in a single file based on the matching relationships stored in the correlation table .",{"@attributes":{"id":"p-0092","num":"0091"},"figref":["FIGS. 25 and 26","FIGS. 27 and 28","FIG. 29"],"b":["40","42","69","40","42"]},"The process of adding the contents of a French version  written in French and having the same document structure as those of the English and the Japanese versions to the above generated multilingual document (updating the multilingual document) proceeds as follows. After generating a correlation table  which stores the relationship between the French version  and one of the two versions included in the above multilingual document, the program for updating multi-version documents is executed. This execution generates a multilingual document including the English, the Japanese, and the French versions.","The client  obtains a multilingual document stored in the database  using a Web browser program , and carries out the same display and output controls as those employed by the first embodiment by regarding the obtained multilingual document as a multi-version document.","This completes the description of the second embodiment.","The second embodiment extracts portions common to versions of a document, which are generated each time the document is revised, and adds portions specific to each version to the extracted common portions to generate a multi-version document of the XML format in which the contents of a plurality of versions are efficiently expressed, making it possible to reduce the amount of data necessary for version management, and facilitate exchange of data of a plurality of versions on a network. Furthermore, regarding all structures and text character strings included in a multi-version document, the second embodiment indicates the matching relationships of structures and text character strings belonging to one version with those belonging to another. By obtaining these matching relationships, it is possible to reproduce a given version, highlight changes (difference), and list the structures and text character strings in versions corresponding to a portion (a structure and text character strings) in a target version to which each change was made using the \u201cdisplay of modification history\u201d function, making it easy for the user to grasp changes made to a document and the times when these changes were made.","Since the present invention can display a plurality of versions of a document by showing changes made to each version, the user can easily grasp changes in the contents of the versions."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 3","b":"1"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 4","b":"2"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 5","b":"3"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 6","b":"1"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 8","b":["1","2"]},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 9","b":"1"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 10","b":"2"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 13","b":"1"},{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 14","b":["1","2"]},{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 15","b":"2","i":"a; "},{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 16","b":["2","3"],"i":"a "},{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 17"},{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIG. 18","b":["1","2","3"]},{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIG. 19"},{"@attributes":{"id":"p-0038","num":"0037"},"figref":"FIG. 20"},{"@attributes":{"id":"p-0039","num":"0038"},"figref":"FIG. 21"},{"@attributes":{"id":"p-0040","num":"0039"},"figref":"FIG. 22"},{"@attributes":{"id":"p-0041","num":"0040"},"figref":"FIG. 23"},{"@attributes":{"id":"p-0042","num":"0041"},"figref":"FIG. 24"},{"@attributes":{"id":"p-0043","num":"0042"},"figref":"FIG. 25"},{"@attributes":{"id":"p-0044","num":"0043"},"figref":"FIG. 26"},{"@attributes":{"id":"p-0045","num":"0044"},"figref":"FIG. 27"},{"@attributes":{"id":"p-0046","num":"0045"},"figref":"FIG. 28"},{"@attributes":{"id":"p-0047","num":"0046"},"figref":"FIG. 29"}]},"DETDESC":[{},{}]}
