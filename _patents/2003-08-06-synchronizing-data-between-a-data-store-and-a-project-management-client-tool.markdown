---
title: Synchronizing data between a data store and a project management client tool
abstract: An embodiment of the present invention is a technique to synchronize data between a data store and a project management client tool. An element in a project file is updated according to an event generated by a project tool in a client. A server is communicated by a request to request synchronization of the element. The server has a data store which contains an object corresponding to the element. The request is processed to synchronize the element with the object in the data store.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07437739&OS=07437739&RS=07437739
owner: Unisys Corporation
number: 07437739
owner_city: Blue Bell
owner_country: US
publication_date: 20030806
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","BACKGROUND","SUMMARY OF THE INVENTION","DESCRIPTION"],"p":["This application is a continuation-in-part application of the following patent applications: \u201cCreating Customized Objects For Processes In Project Management\u201d, Ser. No. 10\/306,604, filed on Nov. 26, 2002; now U.S. Pat. No. 7,155,700 \u201cAutomated Process Execution For Project Management\u201d, Ser. No. 10\/306,601, filed on Nov. 26, 2002; now U.S. Pat. No. 7,159,206 \u201cCollaborating Activities Using Customized Objects For Project Management\u201d, Ser. No. 10\/306,602, filed on Nov. 26, 2002 now U.S. Pat. No. 7,174,348. This application claims the benefit of the provisional application entitled \u201cProject Management Using Customized Objects\u201d, Ser. No. 60\/456,376 filed on Mar. 20, 2003, and is related to the following patent applications: Ser. No. 10\/636,924 entitled \u201cGeneration Of Java Language Application Programming Interface For An Object-Oriented Data Store\u201d; Ser. No. 10\/636,959 entitled \u201cCapturing Traceability Information Between Artifacts Produced By A Project Management Software\u201d; Ser. No. 10\/636,955 entitled \u201cInstantiating A Project In A Project Management System\u201d; Ser. No. 10\/636,923 entitled \u201cAutomating Document Reviews In A Project Management System\u201d; Ser. No. 10\/636,961 entitled \u201cImplementing Web-Based Wizards In Distributed Web Applications\u201d; Ser. No. 10\/636,962 entitled \u201cImplementing Complex Client-Side Graphical User Interface Controls In Distributed Web Applications\u201d; Ser. No. 10\/636,852 entitled \u201cTracking Status Of Task In A Project Management Tool\u201d; Ser. No. 10\/636,953 entitled \u201cCustomizing And Automating Checklists In Project Management\u201d; Ser. No. 10\/636,952 entitled \u201cControlling Access To Projects In A Project Management System\u201d; Ser. No. 10\/636,945 entitled \u201cCustomizing And Automating Entry And Exit Criteria In A Project Management System\u201d; Ser. No. 10\/636,946 entitled \u201cSending Notifications To Project Members In A Project Management System\u201d, all filed on the same date and assigned to the same assignee as the present application, the contents of each of which are herein incorporated by reference.","1. Field of the Invention","Embodiments of the invention relate to the field of management software, and more specifically, to project management.","2. Description of Related Art","Project management is becoming more and more complex. In enterprise applications, the sizes of projects are typically quite large, including complex databases and involving a large number of participants. The complex interactions among the various team members, process flows, tools, and databases have created difficulties to project managers. The project manager has to keep track of the progress of the project, communicate with stake holders, during the initiation, planning, executing, controlling, and closing phases of a project. Team members have to use the tools of the trade, exchange ideas, generate and review project documentations and\/or reports, update information, communicate with the project manager regarding progress of their work, etc.","Existing techniques for project management have a number of drawbacks. First, most traditional techniques are not convenient to users or team members because of lack of support and\/or interface to Web-based information sharing. Second, the project information may not be well structured or organized. Users do not have a common format or platform to organize data or information and trace sources of data and information. Third, workflow\/process automation is non-existent.","Typically a project management tool is a part of the project management software. This tool generates and manages only a part of data such as tasks, resources, checklists, etc. in the data store. Other data are generated and managed by the rest of the project management system or application. To maintain data integrity, all of the data need to be synchronized not only when the project is first planned but also during the execution of the project as the project progresses.","An embodiment of the present invention is a technique to synchronize data between a data store and a project management client tool. An element in a project file is updated according to an event generated by a project tool in a client. A server is communicated by a request to request synchronization of the element. The server has a data store which contains an object corresponding to the element. The request is processed to synchronize the element with the object in the data store.","An embodiment of the present invention is a technique to synchronize data between a data store and a project management client tool. An element in a project file is updated according to an event generated by a project tool in a client. A server is communicated by a request to request synchronization of the element. The server has a data store which contains an object corresponding to the element. The request is processed to synchronize the element with the object in the data store.","In the following description, numerous specific details are set forth. However, it is understood that embodiments of the invention may be practiced without these specific details. In other instances, well-known circuits, structures, and techniques have not been shown in order not to obscure the understanding of this description.",{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 1A","b":["10","10","20","20","30","40"],"sub":["1 ","K"]},"The project members may include a project manager , a technical leader , a programmer , a scientist , and a consultant . A person may have one or more roles. Each member may be assigned one or more tasks in one or more phases of a project. Each member has access to a project management application to , respectively. The project management application may be located in the computer used by the member.","The network  may be any suitable network that links the project members to . The network  may be an Internet, intranet, extranet, wireless fidelity (Wi-Fi), local area network (LAN), wide area network (WAN), etc. The network  allows project members to communicate with each other and to access the project management application. The server  is connected to the network  and contains a project management system  that provides the tools for users to construct, create, or instantiate a project.",{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 1B","b":["100","100","110","120","130","140","150","155","170","180","180","100"],"sub":["1 ","K"]},"The processor  represents a central processing unit of any type of architecture, such as embedded processors, mobile processors, micro-controllers, digital signal processors, superscalar computers, vector processors, single instruction multiple data (SIMD) computers, complex instruction set computers (CISC), reduced instruction set computers (RISC), very long instruction word (VLIW), or hybrid architecture.","The processor bus  provides interface signals to allow the processor  to communicate with other processors or devices, e.g., the MCH . The host bus  may support a uni-processor or multiprocessor configuration. The host bus  may be parallel, sequential, pipelined, asynchronous, synchronous, or any combination thereof.","The MCH  provides control and configuration of memory and input\/output devices such as the system memory  and the ICH . The MCH  may be integrated into a chipset that integrates multiple functionalities such as the isolated execution mode, host-to-peripheral bus interface, memory control. The MCH  interfaces to the peripheral bus . For clarity, not all the peripheral buses are shown. It is contemplated that the system  may also include peripheral buses such as Peripheral Component Interconnect (PCI), accelerated graphics port (AGP), Industry Standard Architecture (ISA) bus, and Universal Serial Bus (USB), etc.","The system memory  stores system code and data. The system memory  is typically implemented with dynamic random access memory (DRAM) or static random access memory (SRAM). The system memory may include program code or code segments implementing one embodiment of the invention. The system memory includes a project management system  or application . Any one of the elements of the project management system  or application  may be implemented by hardware, software, firmware, microcode, or any combination thereof. The system memory  may also include other programs or data which are not shown, such as an operating system. The project management system  or application  may implement all or part of the project management functions. The project management system  or application  may also simulate the project management functions. The project management system  or application  contains instructions that, when executed by the processor , causes the processor to perform the tasks or operations as described in the following.","The ICH  has a number of functionalities that are designed to support I\/O functions. The ICH  may also be integrated into a chipset together or separate from the MCH  to perform I\/O functions. The ICH  may include a number of interface and I\/O functions such as PCI bus interface to interface to the peripheral bus , processor interface, interrupt controller, direct memory access (DMA) controller, power management logic, timer, system management bus (SMBus), universal serial bus (USB) interface, mass storage interface, low pin count (LPC) interface, etc.","The mass storage device  stores archive information such as code, programs, files, data, databases, applications, and operating systems. The mass storage device  may include compact disk (CD) ROM , a digital video\/versatile disc (DVD) , floppy drive , and hard drive , and any other magnetic or optic storage devices such as tape drive, tape library, redundant arrays of inexpensive disks (RAIDs), etc. The mass storage device  provides a mechanism to read machine-accessible media. The machine-accessible media may contain computer readable program code to perform tasks as described in the following.","The I\/O devices to may include any I\/O devices to perform I\/O functions. Examples of I\/O devices to include controller for input devices (e.g., keyboard, mouse, trackball, pointing device), media card (e.g., audio, video, graphics), network card such as Institute of Electrical and Electronics Engineers (IEEE) 802.3, IEEE-1394, IEEE-802.11x, Bluetooth, and any other peripheral controllers.","Elements of one embodiment of the invention may be implemented by hardware, firmware, software or any combination thereof. The term hardware generally refers to an element having a physical structure such as electronic, electromagnetic, optical, electro-optical, mechanical, electro-mechanical parts, etc. The term software generally refers to a logical structure, a method, a procedure, a program, a routine, a process, an algorithm, a formula, a function, an expression, etc. The term firmware generally refers to a logical structure, a method, a procedure, a program, a routine, a process, an algorithm, a formula, a function, an expression, etc that is implemented or embodied in a hardware structure (e.g., flash memory, ROM, EROM). Examples of firmware may include microcode, writable control store, micro-programmed structure. When implemented in software or firmware, the elements of an embodiment of the present invention are essentially the code segments to perform the necessary tasks. The software\/firmware may include the actual code to carry out the operations described in one embodiment of the invention, or code that emulates or simulates the operations. The program or code segments can be stored in a processor or machine accessible medium or transmitted by a computer data signal embodied in a carrier wave, or a signal modulated by a carrier, over a transmission medium. The \u201cprocessor readable or accessible medium\u201d or \u201cmachine readable or accessible medium\u201d may include any medium that can store, transmit, or transfer information. Examples of the processor readable or machine accessible medium include an electronic circuit, a semiconductor memory device, a read only memory (ROM), a flash memory, an erasable ROM (EROM), a floppy diskette, a compact disk (CD) ROM, an optical disk, a hard disk, a fiber optic medium, a radio frequency (RF) link, etc. The computer data signal may include any signal that can propagate over a transmission medium such as electronic network channels, optical fibers, air, electromagnetic, RF links, etc. The code segments may be downloaded via computer networks such as the Internet, Intranet, etc. The machine accessible medium may be embodied in an article of manufacture. The machine accessible medium may include data that, when accessed by a machine, cause the machine to perform the operations described in the following. The machine accessible medium may also include program code embedded therein. The program code may include machine readable code to perform the operations described in the following. The term \u201cdata\u201d here refers to any type of information that is encoded for machine-readable purposes. Therefore, it may include program, code, data, file, etc.","All or part of an embodiment of the invention may be implemented by hardware, software, or firmware, or any combination thereof. The hardware, software, or firmware element may have several modules coupled to one another. A hardware module is coupled to another module by mechanical, electrical, optical, electromagnetic or any physical connections. A software module is coupled to another module by a function, procedure, method, subprogram, or subroutine call, a jump, a link, a parameter, variable, and argument passing, a function return, etc. A software module is coupled to another module to receive variables, parameters, arguments, pointers, etc. and\/or to generate or pass results, updated variables, pointers, etc. A firmware module is coupled to another module by any combination of hardware and software coupling methods above. A hardware, software, or firmware module may be coupled to any one of another hardware, software, or firmware module. A module may also be a software driver or interface to interact with the operating system running on the platform. A module may also be a hardware driver to configure, set up, initialize, send and receive data to and from a hardware device. An apparatus may include any combination of hardware, software, and firmware modules.","One embodiment of the invention may be described as a process which is usually depicted as a flowchart, a flow diagram, a structure diagram, or a block diagram. Although a flowchart may describe the operations as a sequential process, many of the operations can be performed in parallel or concurrently. In addition, the order of the operations may be re-arranged. A process is terminated when its operations are completed. A process may correspond to a method, a program, a procedure, a method of manufacturing or fabrication, etc.",{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIG. 2","b":["25","45","25","45","210","230","260"]},"The client  includes an application accessible to the user or the project team member. The application is typically installed or located at the user's computer system. The client  includes a browser  and a project module . The browser  is a Web-based browser that allows the user to navigate the project management system to carry out tasks for project management. The project module  is a software or an application designed to provide basic tools for management of projects or workflow. The project module  may have any of the following features: creating reports, charts, schedules, calendars; sending and receiving information on project task status and assignment; viewing, editing, and grouping resources; integrating spreadsheets, databases; tracking project progress; etc. In one embodiment, the project module  is the Microsoft Project Central, Project 2000 software package.","The middle tier  may be implemented at the client  or the server  and includes a web-based portal  and an application server . The web-based portal  provides tools to manage links for navigation in a Web-based environment. The web-based portal  includes a portal management widget  and a community sidebar page . The portal management widget  is in essence a Hyper-Text Markup Language (HTML) file that contains HTML code. It is a set of related links that can appear on a user's portal page and provides links to other components, such as project frame set page when used for portal maintenance, and new project web wizard for initial project configuration. The community sidebar page  provides links to the project module database, and to the project frame set page when used for on-going project management. The application server  is an enterprise software that provides application infrastructure for the overall project management system such as CBDD. It serves as an interface layer between the user interface and the system databases and\/or other server components. In one embodiment, the application server  is the WebLogic server which provides basic application server functions and services such as transaction management, security, messaging, database connectivity, resource pooling, etc. Typically, the application server  is fully compliant with the industry standard, such as Java 2 Enterprise Edition (J2EE) version 1.3, and is portable across various hardware and operating systems including UNIX, Linux, Windows, etc. The application server  supports programming standards to build an application infrastructure, including eXtensible Markup Language (XML), Simple Object Access Protocol (SOAP), Web Services Definition Language (WSDL), etc. The CBDD web application  uses the services of the application server  to provide a user interface and application logic for the present invention.","The server  provides functions at the server side. The server  includes a web-based portal taxonomy , a process description file , a template importer , a universal repository (UREP) , a UREP database , a project file , a central project module , and a project database . The web-based portal taxonomy  provides tools to create or publish documents to any topic of the newly generated taxonomy. The taxonomy generation may include generation of elements for various phases in a project such as requirement phase, feasibility phase, design phase, development phase, integration and qualification phase, and support phase. The process description file  includes files that are created by user to describe elements of the project. The template importer  is a utility to import a process template into the UREP  and create the corresponding objects and references needed to represent that process in the UREP . The template importer  is also used to import global data which are not project-related. Examples of global data include module level notifications and global access control functions. In one embodiment, the process template data is expressed as a XML file. The UREP  is a metadata database, a data store, or repository information model that defines the information that can be stored in the repository database . It may also identify the services, tool, and technology models supported by the system. The UREP database  is a metadata database that stores the repository information. Note that the term repository refers to any type of data store, storage, database, etc.","The project file  is a directory that saves generated project files. The project file is used to manage tasks, assignments, and schedules inside the project module . The central project  is a project management software module that is located at the server. The project central database  stores files, information, and data used by the central project . In one embodiment, the central project  is the Microsoft Project Central.",{"@attributes":{"id":"p-0042","num":"0041"},"figref":"FIG. 3","b":["300","300","310","320","330","340","350","360","370","380","390","320","322","324","390","392","394"]},"The supertype Object  allows common features, such as name, to be defined once for its subtypes.","The type Process-Project  is a supertype of the Process  and the Project . It allows common features of these types to be defined once. The Process  represents a complete or entire process used to run a project. Usually, a process is defined once and is used for many projects. The Project  models a real-world project that the team is working on. Person  represents a person, a team member, a user, a project member, or an entity who is assigned to carry out a project task. The Role  models similar jobs or roles performed by various project members. Examples of roles are programmer, technician, project manager, draftsman, etc. The Node  represents a phase, a category, or an activity of a project. The Task  represents the actual work items that project members carry out. Examples of tasks are installation of test routines, verification of algorithm correctness, optimization of codes, etc. Tasks typically belong to a particular phase represented by the Node . CheckList  provides for lists of items that are checked off as a project is completed. The CriteriaList  provides for lists of entry and exit criteria that are accomplished before a project transitions from one phase to another phase. The Item  provides a supertype for the CheckList Item  and the CriteriaList Item . It allows common features of these types to be defined once. The CheckList Item  represents the individual checklist items contained in a checklist. The CriteriaList Item  represents the individual criteria contained in a criteria list. The criteria may include entry and exit criteria.","The project management system includes a project management tool to perform part of the generation and management of project elements. The project elements or objects in the UREP  and UREP database  shown in  need to be synchronized with the project elements managed by the project management tool in the project module  shown in  at the beginning of the project and during the course of the project development. Synchronization here refers to the process to keep track of changes or creations of files, documents, entities, etc. The result of the synchronization is that the project elements are updated on both the client side and the server side such that the elements in the repository, data store, or the UREP are the same as those maintained and managed by the project management tool. At the end of project instantiation, a project file is generated based on the project data in the data store or UREP database . The project file is then used in conjunction with the central project  to manage the project's assignments, schedule and resources. When changes are made to the project file in the project module , they need to be updated in the data store or UREP database  as necessary.",{"@attributes":{"id":"p-0046","num":"0045"},"figref":"FIG. 4","b":["400","400","410","450"]},"The server  includes a request processor , a repository API , and a repository or data store . The repository API  and the repository  are essentially similar to the UREP  and the UREP database , respectively. The client  is essentially equivalent to the project module  shown in . It includes an add-in module , a project management tool  and a project file . In one embodiment, the project management tool  is the Microsoft Project . The add-in module  provides the interface necessary to synchronize the data or project elements in the project file  with the data or objects in the repository .","The add-in module  performs two basic functions: (1) updating the project elements in the project file , and (2) communicating with the server. In one embodiment, it is a COM add-in to the Microsoft Project 2000. It is implemented as a COM DLL as required by the Project 2000 COM add-in architecture. Once the DLL is properly registered, it can be loaded into the MS Project 2000 GUI. The COM add-in module  can perform a wide range of tasks, including: (1) Add new menus and menu items, (2) Add new toolbars and toolbar buttons, (3) Listen for application events and register even handlers for those events, (4) Display custom forms and dialogs, and (5) Automate existing functions of MS Project through the MS Project COM API.","The add-in module  listens to the events generated by the project management tool . It accesses the project elements in the project file  and transform these into actions in an action list. It then communicates with the server  to send protocol requests which contain information for updating or synchronizing the project elements, including the action list.","The request processor  in the server  is responsible for processing the protocol requests sent by the add-in module . It calls methods in the repository API  to update objects in the repository  corresponding to the project elements that need to be synchronized in the action list. It includes a single JSP  and JavaBeans . All server side processing is implemented using JSP pages. The single JSP page  is implemented to receive and process the initial action request sent from the Add-in module . A separate JavaBean as part of JavaBeans  is implemented to perform the actual processing for each action. The JSP makes the appropriate method calls on the bean based on the type of action that was requested. When the bean finishes processing, the JSP returns any return data back to the add-in module .",{"@attributes":{"id":"p-0051","num":"0050"},"figref":"FIG. 5","b":["460","460","510","510","520","520","530","540","550"],"sub":["1 ","N","1 ","N"]},"The event listeners to listen for important application events. Examples of the application events are task created, task modified, resource created, and resource modified events. As these events occur, they are transformed into the actions to . The actions to are then saved in a global action list . When the user is ready to save the changes and update them to the server, the add-in module  goes through each action in the action list  and submits the action to the server side processing component via the protocol requester . The server side processing component performs the necessary processing to update the action in the repository. The data synchronization is completed when all actions are updated to the server successfully. In order to eliminate any redundant processing on the server, new actions can be merged with existing actions in the action list . For example, an action that changes the name of Task X can be merged with an existing action that creates Tasks X. In this case, instead of sending two processing requests to the server (a ChangeTaskName and a NewTask request), only one request is needed (a NewTask request).","The protocol requester  transforms the action list  into a protocol request. In one embodiment, the actions are transformed into Hypertext Transfer Protocol (HTTP) requests and sent to a specified server. The transformed HTTP requests are in the form of a Uniform Resource Locator (URL) query string:","http:\/\/servername:port\/..\/JSPpage?param1=value1&param2=value2 . . . .","The user specifies the server name and port number to be used as part of the add-in settings. Each attribute of an action is transformed as a parameter list and is appended to the end of the query string. The protocol requester  then sends this query string as an HTTP request via the Internet Transfer ActiveX Control. The server side JSP processes the request and sends back any return data to the add-in module  as HTTP responses. The parser  parses the HTTP response in order to determine the status of the request (successful or error) as well as obtain the necessary returned data.","A project element to be synchronized may be a task or a resource. There are two basic synchronizations: a task synchronization and a resource synchronization.","Tasks in the project file correspond to task objects in the repository. Summary tasks, or parent tasks, correspond to node objects in the repository. Any changes made to these two types of tasks in the project file are reflected accordingly in the repository.","All tasks that appear in the project file also store the identifier of their corresponding object in the repository, except newly created tasks, which will receive their identifier when they get synchronized to the repository. The initial project file is generated such that each original task in the project has their identifier stored in their Text1 attribute. The Text1 attribute is a user defined field of a project task, therefore it is not used by the project management tool and is free to be used by the user. There are three basic task operations: create task, delete task, and modify task.","Create Task: As tasks get created in the project file, the add-in module  keeps track of them and creates the corresponding task and node objects in the repository. Depending on the type of task that is created as well as the position of the task relative to the overall hierarchy, the add-in module  performs slightly different operations to be able to correctly reflect the new tasks in the repository model. There are three basic types of tasks: summary tasks, first level summary tasks, and sub tasks.","Summary tasks are tasks that have child sub tasks. Summary tasks are used to group related tasks and act as place holders in the overall task hierarchy. In the repository model, summary tasks correspond to node objects and are associated to other node objects and task objects. In order to create a summary task as a Node in the Repository, the Add-in requires: (1) The name of the new summary task, and (2) The identifier of the parent of the new summary task. The processing JSP uses the name to construct a new node object and links it to its parent node using the parent identifier. The JSP then returns the identifier of the newly construct node object back to the add-in module  as the response and the identifier is stored in the Text1 attribute of the new summary task.","First level summary tasks are summary tasks that do not have a parent. In the repository model, first level summary tasks correspond to node objects that are directly associated to the project object. Because of this, the add-in module  treats these summary task as a special case when updating them to the repository. In order to create a first level summary task as a node in the repository, the add-in module  requires the name of the new summary task and the identifier, or name, of the project. The processing JSP uses the name to construct a new node object and links it to its parent project using the project identifier or name. The JSP then returns the identifier of the newly constructed node object back to the add-in module  as the response and the identifier is stored in the Text1 attribute of the new summary task.","Sub tasks are tasks that do not have any children. Sub tasks correspond to task objects in the repository and are associated to a single node object which is the parent of the tasks (the summary task). In order to create a sub task as a task object in the repository, the add-in module  requires the name of the new sub task and the identifier of the parent of the sub task The processing JSP uses the name to construct a new task object in the repository and links it to its parent node object using the parent identifier. The JSP then returns the identifier of the newly constructed Task object back to the Add-in as the response and the identifier is stored in the Text1 attribute of the new sub task.","Delete Task: As tasks get deleted in the project file, the Add-in module  keeps track of the deleted tasks and delete their corresponding objects in the repository as well. When a sub task is deleted, the add-in module  deletes its corresponding task object in the repository. In order to delete a sub task in the repository, the add-in module  requires the identifier of the sub task. The processing JSP deletes the task object using identifier of the sub task. When a summary task is deleted, the add-in module  deletes its corresponding node object in the repository. In addition, when a summary task is deleted, Project 2000 also deletes all its children sub tasks; therefore the add-in module  also performs a delete task operation for each sub task that is deleted. In order to delete a summary task in the repository, the add-in module  requires the identifier of the summary task The processing JSP deletes the node object using the identifier of the summary task. The children sub tasks of the summary task are deleted according to the processing of deleting sub tasks as described in the section above.","Modify Task: When certain attributes of a task have been modified, the changes are also reflected in the repository. There are two situations for modifying tasks: when a task is renamed and is completed. Tasks that are renamed in the project file are also renamed in the repository. In order to rename a task in the repository, the add-in module  requires the new name of the task and the identifier of the task. The processing JSP renames the task (or node) object in the repository using the new name and identifier of the task. When tasks get completed (100% complete in Project terms) in the project file, their completion status may also be updated in the repository. This is needed because the Criteria and Checklists in the repository keep track of the completion status of their associated tasks and will take certain actions as their tasks are completed (send notification, etc. . . . ). In order to mark a task complete in the repository, the add-in module  requires the identifier of the completed task. The processing JSP changes the task object's status to complete in the repository and calls the processing function from Criteria and Checklist to perform their necessary operations when a task is completed.","Resources in the project file correspond to person objects in the repository. Changes made to resources in the project file are reflected accordingly in the repository. Note that in the project management tool, there may be many different types of resources. In one embodiment, the add-in module  is concerned with resources that represent the team members of the project. All resources that appear in the project file also store the identifier of their corresponding Person object in the repository (except newly created resources, which will receive their identifier when they get synchronized to the repository). The initial project file is generated such that each original resource in the project has their identifier stored in their Text1 attribute. The Text1 attribute is a user defined field of a project resource, therefore it is not used by the project management tool and is free to be used by the user.","Create Resource: As new resources get created in the project file, the add-in module  must keep track of them and update them to the repository to create their corresponding Person objects. In order to create a new resource in the repository, the add-in module  requires: the name of the new resource, the NT account name of the new resource, and the identifier (or name) of the project. The processing JSP uses the name to construct a new Person object in the repository and links it to its parent Project object using the project identifier. The JSP then returns the identifier of the newly constructed Person object back to the add-in module  as the response and the identifier is stored in the Text1 attribute of the new resource. By default, new Person objects created in the repository will not be assigned any roles. To assign roles to new Persons, the user may do so through the Project Management web interface.","Delete Resource: When resources get deleted in the project file, the add-in module  keeps track of them and delete their corresponding objects in the repository. In order to delete a resource in the Repository, the add-in module  requires the identifier of the resource.","Modify Resource: When certain attributes of a resource gets modified, the changes are also reflected in the repository. There are two situations that a resource may be modified: when it is renamed and when the NT account name is changed.","Resources that are renamed in the project file are also renamed in the repository. In order to rename a resource in the repository, the add-in module  requires the new resource name and the identifier of the resource. The processing JSP renames the Person object using the identifier and the new name.","Each Person object in the repository has an associated UrepUser object which stores the NT login ID of the Person. When the NT account name of a resource gets modified in the project file, the change must be reflected in the UrepUser object in the repository. To change the NT account name in the repository, the add-in module  requires the new NT account name and the identifier of the resource. The processing JSP finds the correct Person object and its associated UrepUser object in the repository using the identifier and renames the login id to the new NT account name.","Action Merging Rules: In order to eliminate redundant processing on the server, when multiple Actions are performed on the same task or resource, the add-in module  can merge various Actions together. The merging of Actions is based on a set of merging rules, as shown in Table 1.",{"@attributes":{"id":"p-0072","num":"0071"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"70pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 1"},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["New Action","Existing Action","Merged Action"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Operation: Rename Task","Operation Create Task","Operation Create Task"]},{"entry":["Name: New Name 2","Name: New Name","Name: New Name 2"]},{"entry":["Operation: Delete Task","Operation: Create Task","Cancelled"]},{"entry":["Operation: Rename","Operation: Create","Operation: Create"]},{"entry":["Resource","Resource","Resource"]},{"entry":["Name: New Name 2","Name: New Name","Name: New Name 2"]},{"entry":["Operation: Delete","Operation: Create","Cancelled"]},{"entry":["Resource","Resource"]},{"entry":["Operation: Modify","Operation: Modify","Operation: Modify"]},{"entry":["Resource","Resource","Resource"]},{"entry":["NT Account: New ","NT Account: New","NT Account: New"]},{"entry":["Account 2","Account","Account 2"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}}},{"@attributes":{"id":"p-0073","num":"0072"},"figref":"FIG. 6","b":"600"},"Upon START, the process  updates an element in a project file according to an event generated by a project tool in a client (Block ). The element may be a task or a resource, or any other element in a project. Then, the process  communicates with a server having a data store by a request to request synchronization of the element (Block ). The data store contains an object corresponding to the element. Next, the process  processes the request to synchronize the element with the object in the data store (Block ) and is then terminated.",{"@attributes":{"id":"p-0075","num":"0074"},"figref":"FIG. 7","b":"610"},"Upon START, the process  listens to a firing of the event affecting the element (Block ). Then, the process  transforms the event into an action (Block ). The action may be any one of a task creation, a task deletion, a task modification, a resource creation, a resource deletion, and a resource modification. Next, the process  saves the action in an action list (Block ) to be sent to the server and is then terminated.",{"@attributes":{"id":"p-0077","num":"0076"},"figref":"FIG. 8","b":"620"},"Upon START, the process  transforms the action list into a protocol request (Block ). The protocol request has a query string with a parameter list including an attribute of the action. Then, the process  sends the protocol request to the server according to a protocol (Block ). Next, the process  receives a response from the server (Block ). Then, the process  parses the response to determine status of the protocol request (Block ) and is then terminated.",{"@attributes":{"id":"p-0079","num":"0078"},"figref":"FIG. 9","b":"630"},"Upon START, the process  receives the protocol request (Block ). This may be implemented by a JSP. Next, the process  calls a method to perform a processing of the action (Block ). This may be performed by a JavaBean. Then, the process  returns a response to the client (Block ) and is next terminated. The response may be a status or any data that may be used by the client.","While the invention has been described in terms of several embodiments, those of ordinary skill in the art will recognize that the invention is not limited to the embodiments described, but can be practiced with modification and alteration within the spirit and scope of the appended claims. The description is thus to be regarded as illustrative instead of limiting."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The invention may best be understood by referring to the following description and accompanying drawings that are used to illustrate embodiments of the invention. In the drawings:",{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 1A"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 1B"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 9"}]},"DETDESC":[{},{}]}
