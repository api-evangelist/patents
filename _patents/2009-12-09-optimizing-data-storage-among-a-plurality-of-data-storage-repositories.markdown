---
title: Optimizing data storage among a plurality of data storage repositories
abstract: Machines and methods for optimizing data storage among a plurality of data storage repositories are provided. The method comprises processing a data request submitted for storing data on one or more data storage mediums; determining whether duplicate copies of the data are to be maintained on more than one storage medium so that established quality of service requirements are met; and managing duplicate copies of the data on said one or more data storage mediums to meet the established quality of service requirements while servicing the data request.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09191437&OS=09191437&RS=09191437
owner: International Business Machines Corporation
number: 09191437
owner_city: Armonk
owner_country: US
publication_date: 20091209
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["COPYRIGHT & TRADEMARK NOTICES","TECHNICAL FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION OF EXAMPLE EMBODIMENTS"],"p":["A portion of the disclosure of this patent document contains material, which is subject to copyright protection. The owner has no objection to the facsimile reproduction by any one of the patent document or the patent disclosure, as it appears in the Patent and Trademark Office patent file or records, but otherwise reserves all copyrights whatsoever.","Certain marks referenced herein may be common law or registered trademarks of third parties affiliated or unaffiliated with the applicant or the assignee. Use of these marks is for providing an enabling disclosure by way of example and shall not be construed to limit the scope of this invention to material associated with such marks.","The present invention relates generally to data storage and, more particularly, to optimizing data storage among a plurality of data storage repositories in a communication network.","In a data storage environment, more than one copy of the same data may be stored in different data repositories. Such redundancy is typically needed to support data mining and recovery (e.g., backup or archive services) or to promote system efficiency (e.g., the duplicate copies may be needed for the purpose of concurrent processing). Accordingly, the stability and the quality of service (QoS) in a system may be directly dependent on a structured data redundancy level.","On the other hand, maintaining the resources to support the storage and accessibility of redundant data is expensive. To control costs, optimization techniques such as deduplication are generally used to reduce the amount of redundant data. Duplicate data items may be reduced to single instances to save storage resources. Depending on QoS requirements and system implementation, however, several copies of the same data may need to be retained, despite of the desire to minimize duplication.","Thus, the challenge is to maintain the proper balance in storage optimization without affecting the QoS requirements. For example, where the QoS requirements for the same data across multiple computing platforms is not identical, the global application of a common deduplication technique will be counterproductive, and will adversely affect the QoS. As such, an optimization technique is needed that can support different data storage services across different platforms and help limit data storage costs, without compromising QoS for the provided services.","For purposes of summarizing, certain aspects, advantages, and novel features of the invention have been described herein. It is to be understood that not all such advantages may be achieved in accordance with any one particular embodiment of the invention. Thus, the invention may be embodied or carried out in a manner that achieves or optimizes one advantage or group of advantages without achieving all advantages as may be taught or suggested herein.","In accordance with one embodiment, a method for optimizing data storage among a plurality of data storage repositories is provided. The method comprises processing a data request submitted for storing data on one or more data storage mediums; determining whether duplicate copies of the data are to be maintained on more than one storage medium so that established quality of service requirements are met; and managing duplicate copies of the data on said one or more data storage mediums to meet the established quality of service requirements while servicing the data request.","In accordance with one aspect of the invention, a system comprising one or more logic units is provided. The one or more logic units are configured to perform the functions and operations associated with the above-disclosed methods. In yet another embodiment, a computer program product comprising a computer readable storage medium having a computer readable program is provided. The computer readable program when executed on a computer causes the computer to perform the functions and operations associated with the above-disclosed methods.","One or more of the above-disclosed embodiments in addition to certain alternatives are provided in further detail below with reference to the attached figures. The invention is not, however, limited to any particular embodiment disclosed.","Features, elements, and aspects that are referenced by the same numerals in different figures represent the same, equivalent, or similar features, elements, or aspects, in accordance with one or more embodiments.","In the following, numerous specific details are set forth to provide a thorough description of various embodiments. Certain embodiments may be practiced without these specific details or with some variations in detail. In some instances, certain features are described in less detail so as not to obscure other aspects. The level of detail associated with each of the elements or features should not be construed to qualify the novelty or importance of one feature over the others.","Referring to , an exemplary storage environment  is illustrated in which computing systems ,  and  communicate over a network . A client application  may be executed on computing system , wherein the client application  submits storage requests to store, remove or retrieve data from one or more data repositories  connected to network . A storage application  executed on computing system  may be utilized to service the storage requests submitted by client application . The storage application , for example, may function either individually or in conjunction with other storage applications (not shown in ) to service the submitted storage requests.","In one embodiment, a storage agent  is executed on computing system  or other computing system connected to network  to help process storage requests submitted to storage application  in an effort to optimize data storage on data repositories  as provided in further detail below. Depending on implementation a storage medium  and a meta data repository  may be connected to the network  or optionally to computing system  over which storage agent  is operational. To achieve low latency thresholds, it may be desirable for storage agent  to have a locally accessible storage medium  and meta data repository .","Meta data repository  may be configured to retain information about data items (e.g., data particles or data chunks) which are the subject of one or more storage requests submitted to the storage application . In other words, storage agent  may be utilized to intercept the storage requests submitted to the storage application  for the purpose of attaining system optimization. Optimization in this context, without limitation, refers to methods or mechanisms utilized to reduce data redundancy in the data repositories  in consideration to the respective QoS and costs associated with storing data in said data repositories  or the related storage resources.","Storage medium  may be configured as a minimal latency storage medium (e.g., a cache) accessible by storage agent  for temporary storage of data, which is the target of a submitted storage request, until the optimal location for storing the target data is determined. The target data may include data that is to be stored in a data repository  as provided via a data storage request submitted by client application  or data that is to be retrieved, moved or removed from a data repository  pursuant to a submitted storage request. Data repository  may be implemented over a distributed or non-distributed platform, depending on implementation.","In one or more embodiments, computing system  is configured to, optionally, provide a central point of service wherein an optimization directory  is maintained. The optimization directory may be implemented in the form of a table, a registry, a list, an array, a linked list, a B-tree or any other computational or relational data structure that may be utilize to hold and organize data. The data may be registered in the optimization directory  in a format suitable for tracking, mapping or indexing records and entries associated with submitted storage requests and the respective target data, based on information provided by the storage agent , for example. Optimization directory  may include a reference to the different locations where the target data is currently stored and also to the related QoS information for the target data or an application using the target data.","In the exemplary storage environment  illustrated in , a placement planner  may be implemented as an application or a process that is, optionally, executed on computing system  to determine the optimal storage location or locations for target data based on information stored in optimization directory , or based on information provided by storage agent , or a combination of the two. Placement planner  provides instructions to storage agent  on where to store or move copies of the target data. Based on the information provided by placement planner  and storage agent , the optimization directory  may be utilized to retain a mapping of QoS associated with the target data and the respective data items, and the storage location of the data items across the storage environment . Optimization directory  or placement planner  may be implemented over a distributed or non-distributed platform, depending on implementation.","Target data with redundant or similar data items may originate from different client applications  that have different QoS requirements. Placement planner  is configured to determine, in the most economical way, a data optimization solution that desirably satisfies a majority, if not all, of the QoS requirements. As provided in further detail below, the placement planner  may use information (e.g., meta data indicating QoS requirements) associated with the target data, or other information related to client application , storage application , or data repositories  to determine how and where to store the target data, and whether to move the target data from one data repository to another.","Depending on QoS requirements, for example, the target data may be stored in duplicate at different data repositories , and for example at different storage levels or resources such as local storage (e.g., memory, hard drive, solid state device), backup storage (e.g., local tape drive), archive storage (e.g., remotely located hard drives or tape drives), off-site disaster recovery storage (e.g., hard drives, tape drives, CD ROM, a combination of different storage mediums). Duplication of data provides for a more resilient and dependable data storage system.","In some embodiments, QoS guidelines may be defined for different types of data, or based on the type of client applications  that is to process said data. To meet said QoS requirements, duplicates of certain data may be stored at a plurality of storage resources or data repositories . For example, client applications for high priority customers or client applications with high sensitivity or low latency QoS requirements may store the data at multiple storage resources and in relationship with the access speed associated with each storage resource.","As noted earlier, to optimize data storage environment , it is desirable to minimize storage costs, by identifying the duplicate data and eliminate the duplication, without affecting the QoS level for one or more client applications . To accomplish this, storage agent  is implemented to intercept data storage requests received from client applications  to determine an optimal data storage and redundancy management strategy by referring to records in the optimization directory . Desirably, the records in optimization directory  track the data storage locations where duplicative data is stored and the QoS statistics associated with each location.","The functionality for determining or maintaining the optimum storage policy and redundancy management strategy may be implemented in a central or distributed manner. For example, in some embodiments, a central or distributed system (e.g., placement planner ) may be utilized to collaborate with the storage agent  to determine the most optimal data storage strategy based on information provided from the storage agent  and optimization directory . In this implementation, the placement planner  determines the most optimum storage strategy and informs the storage agent  of that strategy. In other words, the placement planner  determines which data storage resources are or are not pertinent for maintaining the QoS for target data based on optimization policies that are either pre-existing or are calculated or designated in real-time.","Depending on implementation, the instructions to retain, copy or remove data from different storage resources may be provided by way a vector mechanism. For example, if four storage resources are available in the global storage environment, then a vector having four bits can be used to identify the location in which the target data is to be stored for achieving optimal results. For instance, a vector with the value \u20181001\u2019 may indicate to the storage agent  that the duplicate data is to be copied to the first and fourth storage resources and removed, if any, from the second and third storage resources.","The mechanism or process for determining what is an effective optimization result may vary depending on how the QoS is defined for each client application , the type of the target data, the system bandwidth, the latency associated with accessing data on the storage resources, and so on. For example, if QoS is associated with maximizing data access speeds (i.e., reducing data access latency), the optimization mechanism or process may be configured to determine the smallest common denominator (i.e., the intersection) for the applicable data storage resources, such that the fastest storage resource retains a copy of the target data and the other copies are removed.","On the other hand, if the QoS is to preserve data reliability and system resilience, then the optimization mechanism or process may be configured to determine the largest common denominator (i.e., the union) of the corresponding storage resources to guarantee that data loss or corruption at one or more storage resources will not substantially affect the QoS for the entire system. Some implementations may utilize a mechanism or process configured to maintain the QoS for a combination of factors that may affect the availability of data. Such factors may include access speed, resilience, the associated optimization costs with respect to availability of bandwidth, storage capacity, or even electrical costs associated with retrieving, deleting, and copying data across the storage environment .","The optimization process may take place by temporarily storing the target data at storage medium , until the placement planner  has determined the most optimum configuration for storing the data across the storage platform illustrated in . Alternatively, the optimization process may take place in the background by allowing the storage agent  to, upon intercepting the data, take on a best efforts approach to store the target data at one of the more appropriate data storage repositories, and allowing the placement planner  to later change the storage location based on analyzing the data in the optimization directory  as provided in further detail below.","Referring to , storage agent  may intercept a storage request (e.g., a store or delete request) (S), in response to a storage request for target data submitted by client application . In one embodiment, it is determined if duplicate copies of the target data exist (S). If not, the storage request is submitted to storage application  for processing (S). If duplicate copies of the target data exist, however, storage agent  may temporarily store the related data items in storage medium , pending a determination of optimization strategy (S). In certain embodiments, storage agent  temporarily stores the related data items in storage medium  regardless of whether or not duplicate copies exists for target data.","Depending on implementation, storage agent  may add to or update the meta data repository  with the meta data associated with the target data. Storage agent  may further update optimization directory  with information about QoS requirements for a particular type of data (e.g., the target data to be serviced) or the data locations where duplicate copies of the target data are stored, based on the meta data associated with the target data. Storage agent  may also notify the placement planner  and submit a request to determine whether and how to remove, move or create duplicate copies of the target data to optimize data storage while maintaining the QoS (S). According to the guidance provided by the placement planner , the storage request may be serviced by the storage agent  or the storage application  (S).","Placement planner , in one embodiment, is configured to consult with optimization directory  and calculate one or more cost efficient locations to copy, move or remove the target data, according to a cumulative strategy that optimizes QoS, the storage cost, or storage efficiency of the data storage system either globally or by designation. Optionally, placement planner  may request that storage agent  copy, delete or move data items at different storage locations (e.g., data repositories) according to an optimization policy by way of using a vector mechanism, for example, as provided earlier.","In summary, in one embodiment, storage agent  stores the target data in a temporary storage medium  and notifies the placement planner  about the target data and the associated QoS. The QoS information may be provided, for example, by the client application  in the form of meta data associated with the target data. The placement planner  depending on an optimization policy and based on information in optimization directory  determines whether the existing storage status of the target data already satisfies respective QoS. If, for example, the QoS is not satisfied based on the existing number of data copies or locations where the data is stored, then the placement planner  determines the storage locations for the target data and the number of duplicate copies such that the QoS is best satisfied. Depending on the associated costs, placement planner  may issue a series of directives or suggestions to storage agent  or storage application , or both on how to meet the QoS by retrieving, removing or copying data in different storage locations across the storage platform.","In one embodiment, in addition to the costs of retrieving, deleting and copying data across the storage platform, retention cost are also considered. The retention cost refers to the cost of storing a data item at a certain storage location or medium. For example, storing a data item in a low latency disk drive (e.g., latency <100 ms) may cost $X per mega byte per day. If the QoS requirements or the retention costs change, placement planner  decides whether the retention policy may be modified so that the data storage is managed using a less expensive cost alternative. For example, one option may include considering the cost of the move operation while trying to meet other QoS requirements.","In one embodiment, QoS may be determined based on a combination of different factors that affect the QoS for a data item. For example, a data item may be stored in a set of different locations to comply with two factors simultaneously. For instance, a first QoS factor may be to support a retrieval latency of at most 100 ms for data type A, and a second QoS factor may be to support disaster recovery by having at least three locations from which backup copies of the data of type A may be retrieved. In such scenario, a QoS vector may be represented by [(latency <100 ms); (disaster recovery=1)], for example. To meet the first QoS factor, the data item may be stored in a first local low latency hard disk with relatively high retention cost, for example. And, to meet the second QoS factor, the data item may be stored in, for example, two or more other hard disks of equal or lower latency. As such, the associate retention costs are minimized while still satisfying the designated QoS requirements.","In one embodiment, information recorded in the optimization directory  about the QoS and the locations where certain data is stored may be updated after a storage request is serviced. It is noteworthy that in some embodiments the placement planner  is utilized to determine the optimal storage strategy about where and how to store the target data prior to servicing a storage request. In an alternative embodiment, the storage request may be serviced first and the placement planner  may determine the proper strategy for the placement and duplication of the target data at a later time. The latter implementation may be utilized where relatively long latencies for servicing a storage request are not tolerable. Some other factors which may be taken into consideration are the availability of bandwidth at the time a storage request is received. For example, if a request is received during a high traffic volume period, then it may be desirable to perform the optimization task in the background.","In the above disclosure, one or more aspects and features of an exemplary data storage optimization system are disclosed in general terms. Referring to , in the following, more detailed embodiments and features are disclosed for the purpose of full disclosure. It is noteworthy, however, that the general nature of the foregoing disclosure fully supports the broadest claim scope without the limitations associated with the exemplary detailed disclosure provided below. As such, the particular implementations referred to in the following shall not be construed to limit the scope of the claimed subject matter.","Storage Agent\u2014As noted above, the storage agent  intercepts incoming data transferred to a storage application  and maintains a meta data repository  which includes information about the costs to insert, retain and retrieve target data in a locally managed repository, as well as the method to retrieve the target data. In addition storage agent  uses the storage medium  to store the target data before the target data is processed by the storage application . The storage agent  may be specific to the type of storage application  (e.g., TSM, Diligent, HardDisk, etc.). An exemplary storage agent  manages or performs the events provided below, without limitation.","Interception of an external storage request: the storage agent  intercepts the incoming request submitted by a client application  (i.e., the requester), calculates the related deduplication hashes, stores the data temporarily in a storage medium  and updates the meta data repository . Storage agent  then updates optimization directory  and notifies placement planner  that a data item was added to the storage medium .","Interception of an external retrieval request: the storage agent  intercepts data retrieval requests sent to the storage application  and reads the requested data from the storage application . Before passing the data to the requester, storage agent  determines whether stubs that identify the data are to be replaced. Within the context of this disclosure the term stub refers to an identifier that points to a location where the data is stored. The identifier may be calculated by way of a pseudo-random identification mechanism (e.g., a hash value), an indexing mechanism, or other suitable method. For each stub, the storage agent  consults with the optimization directory  to determine the storage location or locations of a data item. Depending on the QoS specified by the requester, storage agent  selects one or more appropriate locations to retrieve the data of each stub and replaces the stubs and returns the data to the requester.","Interception of an external deletion request: the storage agent  intercepts delete requests sent to the storage application . The storage agent  retrieves the data to be deleted from the storage application  and copies the items containing data (excluding the stubs) to the storage medium . Then storage agent  deletes the data from the storage application  and updates the meta data repository . The storage agent  then updates optimization directory  and notifies placement planner  that data items were added to the storage medium .","Placement planner copy instruction: the placement planner  asks the storage agent  to copy a data item. The request may comprise the id of the data item, the source location and the desired storage locations. The storage agent  reads the data from the source and stores the data into the specified locations (e.g., FS, disk, tape, off-line tape). The storage agent  updates the meta data repository  and optimization directory  with the new locations for the data item.","Placement planner removal instruction: the placement planner  asks the storage agent  to remove a data item from a given location. If the location corresponds to the storage agent  storage medium  then the data item is deleted. Otherwise, the data item is replaced with a stub. Finally storage agent  updates the internal meta data repository  and optimization directory  to remove the corresponding location for the data item.","Placement planner costs request: the placement planner  asks the storage agent  for a vector of costs to insert, retain and retrieve data from the supported storage types. The placement planner  sends back the requested vector. Storage agent  may also push vector data periodically or upon modification.","Data item retrieval request by another storage agent: Consider a scenario where a storage agent requests a data item from a storage agent . Storage agent resolves the data item location and retrieval method consulting the internal meta data repository . Storage agent then retrieves the data and returns it to storage agent .","Optimization Directory\u2014The optimization directory  provides services to query and update the information stored therein. The optimization directory  may be implemented as a centralized component or a distributed component.","Placement Planner\u2014The placement planner  is utilized to optimize the location of data items according to a calculated QoS across a storage platform. Placement planner  acts upon 3 events:\n\n","The placement planner  consults the optimization directory  and calculates one or more cost efficient locations (e.g., the most cost effective location) for each data item preserving the compound QoS by employing a variety of techniques (e.g., based on operational research). The placement planner  relocates data items using the copy and removes storage agent  mechanisms. The placement planner  may also consider the cost of operations needed to optimize storage costs (e.g. cost to remove, add or move a data item).","In the exemplary embodiment disclosed in further detail below, certain identifiers (e.g., DataItemId) are disclosed by way of example as utilizing a hash value referred to as a deduplication hash (i.e., dedup hash). It is noteworthy, however, that such identifiers may be implemented in the form of a pseudo-random value, an indexing value, or other suitable unique value generator.","Interfaces and Data Formats\u2014Storage Agent APIs","Interception:","In one embodiment, there is no specific application programming interface (API). The storage agent  implementation intercepts the requests sent to the storage application  and forwards them when needed.","CopyDataItem\n\n","RemoveDataItem\n\n","RetrieveDataItem\n\n","GetCosts\n\n","Interfaces and Data Formats\u2014Optimization Directory API","QueryDataItemBystorage Agent \n\n","QueryDataItemByplacement Planner \n\n","AddDataItemLocation\n\n","RemoveDataItemLocation\n\n","Interfaces and Data Formats\u2014Placement Planner API","DataItemAdded\n\n","MDR (Meta Data Record)","MDRs are stored in the storage agent  meta data repository . Each record may comprise the following fields:\n\n","Storage Data Record (SDR)","SDRs are stored in the storage agent  storage medium . Each record may comprises the following fields:\n\n","Optimization Directory Record\n\n","Terminology","QoS vector: a vector in which each field is a different QoS aspect.",{"@attributes":{"id":"p-0074","num":"0118"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"8"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"6","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"7","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"8","colwidth":"28pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"8","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Power","MIPS\/","Memory","Band-","Compliance","LTDP","Money","Latency"]},{"entry":[{},"CPU",{},"width","Support","Support","($)","(ms)"]},{"entry":{"@attributes":{"namest":"1","nameend":"8","align":"center","rowsep":"1"}}}]}}}},"br":[{},{},{},{}],"b":"124"},"In different embodiments, the claimed subject matter may be implemented as a combination of both hardware and software elements, or alternatively either entirely in the form of hardware or entirely in the form of software. Further, computing systems and program software disclosed herein may comprise a controlled computing environment that may be presented in terms of hardware components or logic code executed to perform methods and processes that achieve the results contemplated herein. Said methods and processes, when performed by a general purpose computing system or machine, convert the general purpose machine to a specific purpose machine.","Referring to , a computing system environment in accordance with an exemplary embodiment may be composed of a hardware environment  and a software environment . The hardware environment  may comprise logic units, circuits or other machinery and equipments that provide an execution environment for the components of software environment . In turn, the software environment  may provide the execution instructions, including the underlying operational settings and configurations, for the various components of hardware environment .","Referring to , the application software and logic code disclosed herein may be implemented in the form of computer readable code executed over one or more computing systems represented by the exemplary hardware environment . As illustrated, hardware environment  may comprise a processor  coupled to one or more storage elements by way of a system bus . The storage elements, for example, may comprise local memory , storage media , cache memory  or other computer-usable or computer readable media. Within the context of this disclosure, a computer-usable or computer readable storage medium may include any recordable article that may be utilized to contain, store, communicate, propagate or transport program code.","A computer readable storage medium may be an electronic, magnetic, optical, electromagnetic, infrared, or semiconductor medium, system, apparatus or device. The computer readable storage medium may also be implemented in a propagation medium, without limitation, to the extent that such implementation is deemed statutory subject matter. Examples of a computer readable storage medium may include a semiconductor or solid-state memory, magnetic tape, a removable computer diskette, a random access memory (RAM), a read-only memory (ROM), a rigid magnetic disk, an optical disk, or a carrier wave, where appropriate. Current examples of optical disks include compact disk, read only memory (CD-ROM), compact disk read\/write (CD-RAY), digital video disk (DVD), high definition video disk (HD-DVD) or Blue-ray\u2122 disk.","In one embodiment, processor  loads executable code from storage media  to local memory . Cache memory  optimizes processing time by providing temporary storage that helps reduce the number of times code is loaded for execution. One or more user interface devices  (e.g., keyboard, pointing device, etc.) and a display screen  may be coupled to the other elements in the hardware environment  either directly or through an intervening I\/O controller , for example. A communication interface unit , such as a network adapter, may be provided to enable the hardware environment  to communicate with local or remotely located computing systems, printers and storage devices via intervening private or public networks (e.g., the Internet). Wired or wireless modems and Ethernet cards are a few of the exemplary types of network adapters.","It is noteworthy that hardware environment , in certain implementations, may not include some or all the above components, or may comprise additional components to provide supplemental functionality or utility. Depending on the contemplated use and configuration, hardware environment  may be a desktop or a laptop computer, or other computing device optionally embodied in an embedded system such as a set-top box, a personal digital assistant (PDA), a personal media player, a mobile communication unit (e.g., a wireless phone), or other similar hardware platforms that have information processing or data storage capabilities.","In some embodiments, communication interface  acts as a data communication port to provide means of communication with one or more computing systems by sending and receiving digital, electrical, electromagnetic or optical signals that carry analog or digital data streams representing various types of information, including program code. The communication may be established by way of a local or a remote network, or alternatively by way of transmission over the air or other medium, including without limitation propagation over a carrier wave.","As provided here, the disclosed software elements that are executed on the illustrated hardware elements are defined according to logical or functional relationships that are exemplary in nature. It should be noted, however, that the respective methods that are implemented by way of said exemplary software elements may be also encoded in said hardware elements by way of configured and programmed processors, application specific integrated circuits (ASICs), field programmable gate arrays (FPGAs) and digital signal processors (DSPs), for example.","Referring to , software environment  may be generally divided into two classes comprising system software  and application software  as executed on one or more hardware environments . In one embodiment, the methods and processes disclosed here may be implemented as system software , application software , or a combination thereof. System software  may comprise control programs, such as an operating system (OS) or an information management system, that instruct one or more processors  (e.g., microcontrollers) in the hardware environment  on how to function and process information. Application software  may comprise but is not limited to program code, data structures, firmware, resident software, microcode or any other form of information or routine that may be read, analyzed or executed by a processor .","In other words, application software  may be implemented as program code embedded in a computer program product in form of a computer-usable or computer readable storage medium that provides program code for use by, or in connection with, a computer or any instruction execution system. Moreover, application software  may comprise one or more computer programs that are executed on top of system software  after being loaded from storage media  into local memory . In a client-server architecture, application software  may comprise client software and server software. For example, in one embodiment, client software may be executed on a client computing system that is distinct and separable from a server computing system on which server software is executed.","Software environment  may also comprise browser software  for accessing data available over local or remote computing networks. Further, software environment  may comprise a user interface  (e.g., a graphical user interface (GUI)) for receiving user commands and data. It is worthy to repeat that the hardware and software architectures and environments described above are for purposes of example. As such, one or more embodiments may be implemented over any type of system architecture, functional or logical platform or processing environment.","It should also be understood that the logic code, programs, modules, processes, methods and the order in which the respective processes of each method are performed are purely exemplary. Depending on implementation, the processes or any underlying sub-processes and methods may be performed in any order or concurrently, unless indicated otherwise in the present disclosure. Further, unless stated otherwise with specificity, the definition of logic code within the context of this disclosure is not related or limited to any particular programming language, and may comprise one or more modules that may be executed on one or more processors in distributed, non-distributed, single or multiprocessing environments.","As will be appreciated by one skilled in the art, a software embodiment may include firmware, resident software, micro-code, etc. An embodiment including hardware or software or combining software and hardware aspects may generally be referred to herein as a \u201ccircuit,\u201d \u201cmodule\u201d or \u201csystem.\u201d Furthermore, the subject matter disclosed may be implemented as a computer program product embodied in one or more computer readable storage medium(s) having computer readable program code embodied thereon. Any combination of one or more computer readable storage medium(s) may be utilized. The computer readable storage medium may be a computer readable signal medium or a computer readable storage medium. A computer readable storage medium may be, for example, but not limited to, an electronic, magnetic, optical, electromagnetic, infrared, or semiconductor system, apparatus, or device, or any suitable combination of the foregoing.","In the context of this document, a computer readable storage medium may be any tangible medium that can contain, or store a program for use by or in connection with an instruction execution system, apparatus, or device. A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein, for example, in baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms, including, but not limited to, electro-magnetic, optical, or any suitable combination thereof. A computer readable signal medium may be any computer readable storage medium that is not a computer readable storage medium and that can communicate, propagate, or transport a program for use by or in connection with an instruction execution system, apparatus, or device.","Program code embodied on a computer readable storage medium may be transmitted using any appropriate medium, including but not limited to wireless, wire line, optical fiber cable, RF, etc., or any suitable combination of the foregoing. Computer program code for carrying out operations for aspects of the present invention may be written in any combination of one or more programming languages, including an object oriented programming language such as Java, Smalltalk, C++ or the like and conventional procedural programming languages, such as the \u201cC\u201d programming language or similar programming languages.","The program code may execute entirely on the user's computer, partly on the user's computer, as a stand-alone software package, partly on the user's computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario, the remote computer may be connected to the user's computer through any type of network, including a local area network (LAN) or a wide area network (WAN), or the connection may be made to an external computer (for example, through the Internet using an Internet Service Provider).","Certain embodiments are disclosed with reference to flowchart illustrations and\/or block diagrams of methods, apparatus (systems) and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and\/or block diagrams, and combinations of blocks in the flowchart illustrations and\/or block diagrams, can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer, special purpose computer, or other programmable data processing apparatus to produce a machine, such that the instructions, which execute via the processor of the computer or other programmable data processing apparatus, create means for implementing the functions\/acts specified in the flowchart and\/or block diagram block or blocks.","These computer program instructions may also be stored in a computer readable storage medium that can direct a computer, other programmable data processing apparatus, or other devices to function in a particular manner, such that the instructions stored in the computer readable storage medium produce an article of manufacture including instructions which implement the function\/act specified in the flowchart and\/or block diagram block or blocks.","The computer program instructions may also be loaded onto a computer, other programmable data processing apparatus, or other devices to cause a series of operational steps to be performed on the computer, other programmable apparatus or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions\/acts specified in the flowchart and\/or block diagram block or blocks.","The flowchart and block diagrams in the figures illustrate the architecture, functionality, and operation of possible implementations of systems, methods and computer program products according to various embodiments of the present invention. In this regard, each block in the flowchart or block diagrams may represent a module, segment, or portion of code, which comprises one or more executable instructions for implementing the specified logical function(s). It should also be noted that, in some alternative implementations, the functions noted in the block may occur out of the order noted in the figures.","For example, two blocks shown in succession may, in fact, be executed substantially concurrently, or the blocks may sometimes be executed in the reverse order, depending upon the functionality involved. It will also be noted that each block of the block diagrams and\/or flowchart illustration, and combinations of blocks in the block diagrams and\/or flowchart illustration, can be implemented by special purpose hardware-based systems that perform the specified functions or acts, or combinations of special purpose hardware and computer instructions.","The claimed subject matter has been provided here with reference to one or more features or embodiments. Those skilled in the art will recognize and appreciate that, despite of the detailed nature of the exemplary embodiments provided here, changes and modifications may be applied to said embodiments without limiting or departing from the generally intended scope. These and various other adaptations and combinations of the embodiments provided here are within the scope of the disclosed subject matter as defined by the claims and their full set of equivalents."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["Embodiments of the present invention are understood by referring to the figures in the attached drawings, as provided below.",{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIGS. 4A and 4B"}]},"DETDESC":[{},{}]}
