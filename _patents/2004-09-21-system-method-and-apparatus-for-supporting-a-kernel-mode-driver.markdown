---
title: System, method and apparatus for supporting a kernel mode driver
abstract: An invention is disclosed that provides a set of common software routines that may be accessed by device drivers in support of the Windows Management Instrumentation system. The set of common routines includes typical routines that would ordinarily be executed by device drivers designed in accordance with WMI. The common routines may reside in a library, dynamically accessible by the device drivers. When a device driver receives a message from the WMI system, the device driver may pass the message to the library to be handled in a common manner. In this manner, the developers of device drivers in accordance with the WMI system need only develop so much code as is necessary to support any unique features or data storage of its associated hardware. The result is shortened development time and fewer programming errors. In addition, the overall system performance may be improved because fewer instances of similar code are loaded in memory to support the WMI system.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07421711&OS=07421711&RS=07421711
owner: Microsoft Corporation
number: 07421711
owner_city: Redmond
owner_country: US
publication_date: 20040921
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATION","FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","Background of WBEM","Identification of the Problem","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENT","Exemplary Operating Environment"],"p":["This application is a continuation of application Ser. No. 09\/361,371, filed Jul. 26, 1999, now abandoned, priority from the filing date of which is hereby claimed under 37 U.S.C. \u00a7 120.","The present invention generally relates to management instrumentation systems, and more specifically relates to computer systems having instrumented hardware devices.","Corporations and other enterprises have a need to monitor the performance and status of elements of their computer networks to prevent data loss and to maximize resource efficiency. The computer industry is addressing that need by putting together the concept of Web-Based Enterprise Management (\u201cWBEM\u201d). WBEM is an industry initiative to develop a standardized, nonproprietary means for accessing and sharing management information in an enterprise network. The WBEM initiative is intended to solve the problem of collecting end-to-end management and diagnostic data in enterprise networks that may include hardware from multiple vendors, numerous protocols and operating systems, and a legion of distributed applications","The founding companies of the WBEM initiative developed a prototype set of environment-independent specifications for how to describe and access any type of management instrumentation, including existing standards such as Simple Network Management Protocol and Desktop Management Interface. A core component of the specification is a standard data description mechanism known as the Common Information Model (\u201cCIM\u201d). The CIM specification describes the modeling language, naming, and mapping techniques used to collect and transfer information from data providers and other management models. The Windows Management Instrumentation (\u201cWMI\u201d) system is a Windows-based implementation of the CIM specification and is fully compliant with the WBEM initiative.","One component of WMI is the Extensions to the Windows Driver Model (\u201cWDM\u201d) provider (the \u201cWMI provider\u201d) for kernel component instrumentation. The WMI provider interfaces with a kernel mode driver, coded in accordance with the Extensions to WDM specification, to pass WMI data between user mode and kernel mode. WMI uses the WMI provider to publish information, configure device settings, and supply event notification from device drivers.","Although the WMI provider is a key component in making the WMI system work, it is not without disadvantages. First, manufacturers must add substantial additional code to their device drivers to support the WMI system. At present, each manufacturer must independently develop software methods and functions to incorporate in their device drivers to support the WMI Extensions to WDM specification. This creates a burden shared by every developer of device drivers intended to be used with the WMI system. It takes additional time for each developer to produce both the code specific to the developer's device, and the code specific to the WMI system. Second, because similar code is used in each device driver to support WMI, many instances of functionally-identical code are loaded in memory by the several drivers. The result is an inefficient operating state containing more system overhead than needed to support WMI. Overall system performance may suffer. Third, the likelihood of coding errors, or \u201cbugs,\u201d is increased when many disparate vendors develop code to perform substantially the same function.","Accordingly, a need exists for a mechanism that allows disparate device drivers intended to interface with the WMI system to share code designed to operate with the WMI system.","The present invention addresses the above described needs and disadvantages by providing a set of common software routines that may be accessed by device drivers in support of the WMI system. The set of common routines includes typical routines that would ordinarily be executed by device drivers designed in accordance with WMI. The common routines may reside in a library, dynamically accessible by the device drivers. When a device driver receives a message from the WMI system, the device driver may pass the message to the library to be handled in a common manner. In this manner, the developers of device drivers in accordance with the WMI system need only develop so much code as is necessary to support any unique features or data storage of its associated hardware. The result is shortened development time and fewer programming errors. In addition, the overall system performance may be improved because fewer instances of similar code are loaded in memory to support the WMI system.","While the preferred implementation of the present invention provides a dynamically linked library, some driver standards, such as the Small Computer Systems Interface (\u201cSCSI\u201d) miniport standard, do not allow for accessing code in a dynamically linked library. For those drivers, the library may be included as a static part of the driver at link-time. Although this solution may still result in multiple instances of the same code in memory, the development time is still shortened, and the typicality of the code results in a more stable WMI and Windows system. Also, the use of the library allows the underlying WMI infrastructure to be modified without affecting the developer's driver so long as the interface to the library is maintained.","The present invention is directed to a system and method for supporting a system of kernel mode device drivers that share common code by moving that common code to a software library. The present invention may be embodied in a management instrumentation system, such as the WMI system promoted by the Microsoft Corporation of Redmond, Washington.",{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 1"},"Referring to , an exemplary system for implementing the invention includes a conventional personal computer , including a processing unit , a system memory , and a system bus  that couples the system memory to the processing unit . The system memory  includes read only memory (ROM)  and random access memory (RAM) . A basic input\/output system  (BIOS), containing the basic routines that help to transfer information between elements within the personal computer , such as during start-up, is stored in ROM . The BIOS  may additionally store AML code for use in conjunction with an associated ACPI device. The personal computer  further includes a hard disk drive , e.g. to read from or write to a hard disk , a magnetic disk drive , e.g., to read from or write to a removable disk , and an optical disk drive , e.g., for reading a CD-ROM disk  or to read from or write to other optical media. The hard disk drive , magnetic disk drive , and optical disk drive  are connected to the system bus  by a hard disk drive interface , a magnetic disk drive interface , and an optical drive interface , respectively. The drives and their associated computer-readable media provide nonvolatile storage for the personal computer . Although the description of computer-readable media above refers to a hard disk, a removable magnetic disk and a CD-ROM disk, it should be appreciated by those skilled in the art that other types of media which are readable by a computer, such as magnetic cassettes, flash memory cards, digital video disks, Bernoulli cartridges, and the like, may also be used in the exemplary operating environment.","A number of program modules may be stored in the drives and RAM , including an operating system , one or more application programs , a driver library  constructed in accordance with one embodiment of the present invention, and program data . A user may enter commands and information into the personal computer  through a keyboard  and pointing device, such as a mouse . Other input devices (not shown) may include a microphone, joystick, game pad, satellite dish, scanner, or the like. These and other input devices are often connected to the processing unit  through a serial port interface  that is coupled to the system bus, but may be connected by other interfaces, such as a game port or a universal serial bus (USB). A monitor  or other type of display device is also connected to the system bus  via an interface, such as a video adapter . In addition to the monitor, personal computers typically include other peripheral output devices (not shown), such as speakers or printers.","The personal computer  may operate in a networked environment using logical connections to one or more remote computers, such as a remote computer . The remote computer  may be a server, a router, a peer device or other common network node, and typically includes many or all of the elements described relative to the personal computer , although only a memory storage device  has been illustrated in . The logical connections depicted in  include a local area network (LAN)  and a wide area network (WAN) . Such networking environments are commonplace in offices, enterprise-wide computer networks, intranets and the Internet.","When used in a LAN networking environment, the personal computer  is connected to the LAN  through a network interface . When used in a WAN networking environment, the personal computer  typically includes a modem  or other means for establishing communications over the WAN , such as the Internet. The modem , which may be internal or external, is connected to the system bus  via the serial port interface . In a networked environment, program modules depicted relative to the personal computer , or portions thereof, may be stored in the remote memory storage device. It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.",{"@attributes":{"id":"p-0025","num":"0024"},"figref":["FIG. 2","FIG. 1"],"b":["20","200","201","203","200"]},"Interfacing with the management applications  is a WMI agent . The WMI agent  maintains and provides access to a WMI store , which is a database containing the management information exposed by the management system . The management information contained in the WMI store  comes from multiple providers, such as components , , and . The providers act as intermediaries between the WMI agent  and one or more managed objects. When the WMI agent  receives a request from a management application  for information that is not available from the WMI store , or for notification of events that are unsupported, the WMI agent  forwards the request to an appropriate provider. That provider then supplies the information or event notification requested.","One such provider is the WMI Extensions to Windows Driver Model (\u201cXWDM\u201d) provider (the \u201cWMI provider\u201d) . The WMI provider  includes two parts: a user mode component (\u201cUM component\u201d)  and a kernel mode component (\u201cKM component\u201d) . The UM component  communicates with the KM component  to pass messages between the user mode  and the kernel mode . The WMI provider  allows instrumented devices to make management information available to the management system , and hence management applications , by providing a pipeline between the user mode  and the kernel mode .","In kernel mode , several device drivers, such as driver  and driver , support their associated devices, such as device  and device , respectively, and pass information to the management system  via the WMI provider . The drivers operate in conjunction with the management system  to allow the management applications to query or set management information within the several instrumented devices. In addition to queries and sets, the management system allows WMI method calls, which are functionally equivalent to an I\/O control (\u201cIOCTL\u201d) call to a device.","The WMI provider  and the device drivers ,  communicate by passing I\/O Request Packets (\u201cIRP\u201d) . The IRPs  are instructions to perform actions related to the operation of the management system . For instance, a particular IRP  may instruct the driver  to begin collecting data on its associated device . Another IRP  may instruct the driver  to end collecting that data. Several of the IRPs used by the WMI management system are detailed in the attached appendix, and are incorporated herein by reference for illustrative purposes only.","Also illustrated is a driver library  constructed in accordance with the present invention. The driver library , named \u201cWMILIB\u201d in this example, is a kernel mode software library that includes software routines that would ordinarily be included in each of multiple device drivers, such as both in driver  and driver . The kernel mode device drivers, such as driver , may call the driver library  to request that many routine functions be performed by the driver library  rather than by the individual device drivers. The driver library  may also call back to the kernel mode drivers and request certain device-specific information, performance or request a specific action. The interaction of the WMI provider , the kernel mode device drivers, and the driver library  is illustrated in  and described in detail below.",{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 3","b":["214","37","214","301","221","301","223","221","221","223","301","302","222","302","37","301","221","301","37","37"]},"In this manner, the driver library  may perform many functions that otherwise would be performed by the several kernel mode device drivers. However, the device drivers may also require some unique code, such as the unique code  associated with the driver  or the unique code  associated with the driver . It should be noted that unique code  is different from unique code . For example, unique code  may provide access to data registers or other features associated with the device , but which are inapplicable to another device, such as device . Consequently, each device driver maintains that software code necessary for interfacing to its associated device.","To handle the IRP , the driver library  may require access to the unique code ,  maintained by the device drivers. For example, to handle the IRP , the driver library  may require access to data stored in a register on the device  itself. In that case, the driver library  may call back to the driver  to execute the unique code  and retrieve the requested data or perform an action. Exemplary callback routines used in connection with the WMI management system are described in detail in the attached appendix, and are incorporated herein by reference for illustrative purposes only.",{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 4","b":["222","222","224","401","403","403","401","224","401","35","403"]},"As is known to those skilled in the art, the SCSI miniport driver  cannot call code other than the SCSI port driver , and, for that reason, is unable to access the driver library  dynamically. Moreover, if the SCSI miniport driver  were modified to call the SCSI port driver  for functions similar to those provided by the driver library , then the SCSI miniport driver  would be unable to interface with earlier versions of the SCSI port driver . For those reasons, this embodiment of the invention provides a static driver library \u2032, rather than a dynamic library, that is incorporated into the SCSI miniport driver  at link time. The code from the driver library  is included in the SCSI miniport driver  as a static driver library \u2032, and the SCSI miniport driver  may directly access any necessary routines from the static driver library \u2032.","As depicted in , the management system  issues to the driver  an IRP . The SCSI port driver  receives the IRP  and first determines whether the IRP  is intended for it. If the SCSI port driver  is intended to handle the IRP , then it does so. If not, then the SCSI port driver  translates the IRP  to a SCSI Request Block (\u201cSRB\u201d) , which is a message format used with SCSI drivers, and passes the SRB  to the SCSI miniport driver . If the SRB  includes instructions that involve executing code related to the management system , the SCSI miniport driver  may call the static driver library \u2032 incorporated in the SCSI miniport driver . That configuration allows the SCSI miniport driver  to take advantage of the driver library  even though the SCSI miniport driver  cannot dynamically link to the driver library .",{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIG. 5","b":["200","501","200","221","221","502","221","221","200"]},"At step , the management system  may issue a second IRP to the driver . Unlike the first IRP, the second IRP may require additional input beyond the scope of the code within the driver . In that case, at step , the driver  passes a message to the driver library  identifying the particular IRP. In this case, it is possible that the driver library  can handle the second IRP without further intervention by the driver , and consequently, at step , the driver library  performs the action requested by the IRP on behalf of the driver and without further assistance of the driver. For example, the driver library  may return any data requested by the management system . Alternatively, the return may be simply an indication that the IRP has been handled.","At step , the management system  issues a third IRP to the driver . As with the second IRP, the driver  does not handle the particular IRP. Accordingly, as with the second IRP, the driver  passes the IRP to the driver library . However, unlike the second IRP, to handle the third IRP, the driver library  requires some subaction from the driver . For example, the IRP may request data stored within the device  and which must be retrieved using unique code  within the driver . Accordingly, at step , the driver library  may issue a callback to the driver  requesting that it perform some subaction, such as retrieving the data stored on the device . At step , the driver  performs the requested subaction. For instance, the driver  may execute the unique code  to retrieve the requested data and return, at step , that data to the driver library . The driver library  may then format that data in a way that the management system  expects, and finally complete the requested action at step . In this example, completing the requested action may involve returning the retrieved data to the management system .",{"@attributes":{"id":"p-0040","num":"0039"},"figref":"FIG. 6","b":["37","601","200","223","602"]},"At block , the management system  issues an IRP to the first driver in a driver stack. As mentioned above, a single device, such as device , may be serviced by a driver stack containing more than one device driver working in conjunction (called a \u201cdriver stack\u201d). When an IRP is directed at information associated with a particular device, the IRP may actually be intended for a particular device driver in a driver stack, and should identify for which device driver in the stack the IRP is intended. Consequently, the. management system  issues the IRP to the highest level driver (identified here as the first driver) in the driver stack, and processing continues at decision block ","At decision block , the current driver identifies whether the IRP is intended for that driver. The current driver may make that determination by comparing an identifier stored in the IRP to an identifier associated with the driver. If the IRP is not intended for the current driver, processing proceeds to block  where the IRP is passed to the next driver in the stack and decision block  is repeated. It should be noted that there may be only a single driver in the stack, in which case the IRP should be intended for that driver. If the IRP is intended for the current driver, processing proceeds to block .","At block , after the intended driver has been determined, that driver may pass the IRP to the driver library . As discussed above, it is not necessary to the proper operation of the present invention that a driver pass all IRPs to the driver library . As discussed above, developers of device drivers may choose to include code in the driver to handle particular IRPs, while calling the driver library  for others. Therefore, at block , it is envisioned that any IRPs not chosen to be handled directly by the driver be passed to the driver library . Processing then proceeds to decision block .","At decision block , the driver library  identifies whether the particular IRP requires data from or further action by the calling driver. For example, if the IRP is a request for particular data only available through the driver, the driver library  may decide to call back to the driver for that information. At block , if any such information or input is required, the driver library  calls the driver for that information, and at decision block , the driver library  again determines whether further information is required. After receiving from the driver any additional information required to service the IRP, processing proceeds to block .","At block , the driver library  executes the routines necessary to service the particular IRP. Many varying routines and functions may be performed to handle the particular IRP. For example, an IRP may be issued requesting that data values be changed. However, if the driver does not support changing data values then the driver library  may return an error without the involvement of the driver. Another IRP may be issued requesting the driver library  to return all data associated with a driver, or a single instance of data associated with a particular device, such as device . As mentioned above, servicing the IRP may require actions from the driver in the form of data queries or sets related to the device. Likewise, the IRP may be a request to execute a method associated with data exposed by the driver. These examples are provided to illustrate the nature of the functionality of the driver library , and those skilled in the art will appreciate that many other functions and routines may be provided within the driver library . When the IRP has been handled, processing terminates at block .",{"@attributes":{"id":"p-0046","num":"0045"},"figref":"FIG. 7","b":["37","701","223","223","223","20","703"]},"At block , the device  issues a notification of the occurrence of the event to the driver . The notification of the event may take the form of an interrupt or other acceptable notification mechanism. Processing proceeds to block .","At block , the driver  passes to the driver library  the notification of the event with a request to handle that notification. For example, handling the event may include generating a properly-formatted message for issuance to the management system . In addition, handling the event may include retrieving from the device  certain data associated with the event. Accordingly, to simply the burden on the driver  of handling the event, common functions for data formatting and message generation may be stored within the driver library  and called to assist in handling the event. Processing continues at block .","At block , the driver library  may optionally call back to the driver  to retrieve any data associated with the event, such as a temperature value from a register within the device . The unique code  within the driver  may be invoked to retrieve and pass that data to the driver library . Any function provided by the unique code  may be invoked by the driver library . Processing continues at block .","At block , the driver library  may format any retrieved data in a buffer to be passed to the management system  along with an event notification message. For example, the management system  may expect data to be in a common format when passed with an event notification method. Code for constructing that common format may reside within the driver library , and therefore the data passed from the driver  may be raw, unformatted data. Processing continues at block .","At block , the driver library  issues to the management system  the event message constructed at block . Processing then terminates at ending block .","While the preferred embodiment of the invention has been illustrated and described, it will be appreciated that various changes can be made therein without departing from the spirit and scope of the invention."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The foregoing aspects and many of the attendant advantages of this invention will become more readily appreciated as the same becomes better understood by reference to the following detailed description, when taken in conjunction with the accompanying drawings, wherein:",{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":["FIG. 4","FIG. 3"]},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 7"}]},"DETDESC":[{},{}]}
