---
title: Method and system for controlling use of a dynamically linked software library
abstract: A method for authenticating a software library, including inserting an encrypted checksum into a software library, and in response to loading the software library calculating a checksum of the software library, requesting the encrypted checksum from the library, decrypting the encrypted checksum, and checking whether or not the decrypted checksum agrees with the calculated checksum. A system is also described and claimed.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07155743&OS=07155743&RS=07155743
owner: Finjan Software, Ltd
number: 07155743
owner_city: South Netanya
owner_country: IL
publication_date: 20020723
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS REFERENCES TO RELATED APPLICATIONS","FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF A PREFERRED EMBODIMENT"],"p":["This application is a continuation-in-part of assignee's application U.S. Ser. No. 09\/774,236, filed on Jan. 29, 2001, entitled \u201cMethod and System for Copy Protection of Data Content,\u201d which is a continuation-in-part of U.S. Ser. No. 09\/397,331, filed on Sep. 14, 1999 now U.S. Pat. 6,298,446, entitled \u201cMethod and System for Copyright Protection of Digital Images Transmitted over Networks,\u201d which is a continuation-in-part of U.S. Ser. No. 09\/313,067, filed on May 17, 1999 now U.S. Pat. No. 6,209,103, entitled \u201cMethods and Apparatus for Preventing Reuse of Text, Images and Software Transmitted via Networks\u201d, each of which is incorporated by reference herein.","The present invention relates to copy protection of data content, including content that is displayed by a computer on a display device.","Content protection systems often operate by encrypting protected content on server computers, and by using special client viewers to decrypt the encrypted content on client computers. Such a client viewer may be designed as a dynamic link library (DLL) that loads into viewer applications. Using such a DLL, application developers may design their own application interfaces for accessing encrypted content.",{"@attributes":{"id":"p-0005","num":"0004"},"figref":"FIG. 1","b":["110","120","130","140","110","150","140"]},"Content viewer application  is intended to be a trusted application, having access permission to the protected content. However, although decoder DLL  is not published, it is nevertheless possible for a hacker to reverse engineer the application programming interface (API) for decoder DLL , and to program his own rogue viewer application to load and run decoder DLL .","The ability to develop a rogue application running decoder DLL  defeats the purpose of a content protection system.","The present invention provides a method and system for a software library, such as a dynamically linked library (DLL) to verify whether or not an application loading it is a trusted application. Upon determination that the application is trusted, the software library can run normally. However, upon determination that the application is not trusted, the software library refuses to load.","Using the present invention, content protection systems, such as the system illustrated in , can ensure that rogue applications do not run DLLs required to decrypt encrypted content.","More generally, the present invention provides a method and system to verify that a software library or application is authentic. In a preferred embodiment, the present invention, a checksum of an authentic software library or application is embedded within the library or application, respectively. To prevent forgery, the embedded checksum is first encrypted, preferably using a private\/public key encryption. That is, the checksum is encrypted using a private key that is not included within the software library or application, but the encrypted checksum is decrypted using a public key. The encrypted checksum is embedded within the library or application.","To verify that a software library or application is authentic, one directly calculates its checksum, and compares the calculated checksum with the checksum embedded therewithin.","There is thus provided in accordance with a preferred embodiment of the present invention a method for authenticating a software library, including inserting an encrypted checksum into a software library, and in response to loading the software library calculating a checksum of the software library, requesting the encrypted checksum from the library, decrypting the encrypted checksum, and checking whether or not the decrypted checksum agrees with the calculated checksum.","There is further provided in accordance with a preferred embodiment of the present invention a method for controlling use of a software library, including identifying a caller application that is calling a software library, calculating a checksum of the caller application, retrieving an encrypted checksum from the caller application, decrypting the encrypted checksum, and checking whether or not the decrypted checksum agrees with the calculated checksum.","There is yet further provided in accordance with a preferred embodiment of the present invention a system for authenticating a software library, including a data processor inserting an encrypted checksum into a software library, a checksum calculator calculating a checksum of the software library, an interface for obtaining the encrypted checksum from the library upon request, a decoder decrypting the encrypted checksum, and a comparator determining whether or not the decrypted checksum agrees with the calculated checksum.","There is additionally provided in accordance with a preferred embodiment of the present invention a system for controlling use of a software library, including a system processor identifying a caller application that is calling a software library, an interface for obtaining an encrypted checksum from the caller application, a decoder decrypting the encrypted checksum, a checksum calculator calculating a checksum of the caller application; and a comparator determining whether or not the decrypted checksum agrees with the calculated checksum.","The present invention provides a method and system for authenticating a software library or application. In a preferred embodiment, the present invention calculates a checksum of an authentic software library or application, and embeds the checksum within the library or application, respectively. To prevent forgery, the checksum is first encrypted, preferably using a private\/public key encryption, and the encrypted checksum is embedded within the library or application.","To verify whether or not the library or application is authentic, the present invention directly calculates the checksum of the library or application, respectively, and compares the calculated checksum with the embedded checksum. If they agree, then the library or application is authentic. Otherwise, the library or application is not authentic.","An n-bit checksum of a sequence of bits is typically a module 2 sum of the n-bit blocks within the sequence. More generally, an n-bit checksum can be a function of the bits, such as a sum of different multiples of the bits where only the n least significant bits of the summands are calculated. Checksums were originally used in data link control for error detection in packet transmission. A well-known checksum used in the prior art is a cyclic redundancy check (CRC32) bit sequence.","Preferably checksums used with the present invention are secure checksums, also referred to as one-way functions or cryptographic checksums. Such checksums are characterized in that it is computationally infeasible to find a message having a given checksum, or to find two different messages that produce the same checksum. An example of such a checksum is the Secure Hash Algorithm, SHA-, a description of which is available on the Internet at http:\/\/www.itl.nist.gov\/fipspubs\/fip180-1.htm.","Private\/public key encryption is described in U.S. Pat. No. 4,405,829 to Rivest et al.","Reference is now made to , which is a simplified flowchart of a method for authenticating a software library, in accordance with a preferred embodiment of the present invention. At step , a checksum for an authentic software library, denoted CKSM1, is calculated. At step  CKSM1 is encrypted, preferably using a private\/public key encryption. At step  the encrypted CKSM1 is inserted into the software library. Steps ,  and  are preferably performed by a software library authenticator. The result of these steps is embedding of an encrypted CKSM1 into the authentic software library.","At step  a caller application, desiring to verify that a software library it uses is authentic, calculates its own checksum of the software library, denoted CKSM2. At step  the caller application requests the encrypted CKSM1 from the software library, preferably using a method of the library for retrieving the encrypted CKSM1. At step  the caller application decrypts the encrypted CKSM1 it receives from the software library, preferably using a public key. At step  the caller application determines whether or not CKSM1 equals CKSM2. If so, then at step  the caller application concludes that the software library is authentic and proceeds normally to use the library. Otherwise, at step  the caller application concludes that the software library is not authentic, and proceeds abnormally. Abnormal processing may include aborting, for example.","Reference is now made to , which is a simplified block diagram of a system for authenticating a software library, in accordance with a preferred embodiment of the present invention. Shown in  is an authentic software library  and a software library authenticator . Authenticator  includes a data processor  that (i) calculates a checksum of the software library, denoted CKSM1; (ii) encrypts the checksum, preferably using a private\/public key encryption; and (iii) embeds the encrypted checksum into the software library. After being processing by authenticator , software library  is generated. Software library  includes the encrypted CKSM1. Software library  also includes an interface for retrieving the encrypted CKSM1 therefrom.","A caller application  desires to verify whether or not a software library it loads is authentic. Caller application  includes an interface  for requesting the encrypted CKSMI from software library . Caller application  also includes its own checksum calculator , for calculating a checksum, denoted CKSM, directly from software library . A decoder  decrypts the encrypted CKSM, preferably using a public key, and a comparator  checks whether or not CKSMI equals CKSM. If so, then caller application  is assured that the software library it loads is authentic. Otherwise, caller application  has discovered that the software library it loads is not authentic.","Several advantages of the present invention can be noted from . Use of a private\/public key encryption ensures that only the creator of a software library, who knows the private key, is able to make his software library authentic; for unless the private key is known, CKSM1 cannot be encrypted. Moreover, the private key is preferably not embedded within the software library, so it does not reside on computers other than those of the creator.","An important feature of the present invention is that the method for authenticating a software library, as illustrated in , may be used in an opposite embodiment to authenticate an application that calls the software library. Using this opposite embodiment, a software library can refuse to load its interface unless the application calling it is a trusted application.","Reference is now made to , which is a simplified flowchart of a method for authenticating a calling application, in accordance with a preferred embodiment of the present invention. At step , a checksum for a trusted caller application, denoted CKSM1, is calculated. At step  CKSM1 is encrypted, preferably using a private\/public key encryption. At step  the encrypted CKSM1 is inserted into the trusted caller application. Steps ,  and  are preferably performed by a trusted caller application authenticator. The result of these steps is embedding of an encrypted CKSM1 into the trusted caller application.","At step , the software library, in response to being called for loading into a caller application, identifies the caller application from a system stack. Specifically, when the caller application calls one of the functions within the software library, the called function can look in the stack one layer up to find a pointer to the caller application.","At step  the software library, desiring to verify that the caller application is trusted, calculates its own checksum of the caller application, denoted CKSM2. At step  the software library requests the encrypted CKSM1 from the caller application. At step  the software library decrypts the encrypted CKSM1 it receives from the caller application, preferably using a public key. At step  the software library determines whether or not CKSM equals CKSM. If so, then at step  the software concludes that the caller application is trusted, and proceeds to load its interface and run. Otherwise, at step  the software library concludes that the caller application is not trusted, and preferably refuses to load its interface.","Reference is now made to , which is a simplified block diagram of a system for authenticating a calling application, in accordance with a preferred embodiment of the present invention. Shown in  is a trusted caller application  and a trusted calling application authenticator . Authenticator  includes a data processor  that (i) calculates a checksum of the calling application, denoted CKSM; (ii) encrypts the checksum, preferably using a private\/public key encryption; and (iii) embeds the encrypted checksum into the calling application. After being processing by authenticator , calling application  is generated. Calling application  includes the encrypted CKSM. Calling application  also includes an interface for retrieving the encrypted CKSM1 therefrom.","A software library  desires to verify whether or not a caller application loading it is trusted. Software library  includes an interface  for requesting the encrypted CKSM from caller application . Software library  also includes its own checksum calculator , for calculating a checksum, denoted CKSM, directly from caller application . A decoder  decrypts the encrypted CKSM, preferably using a public key, and a comparator  checks whether or not CKSM equals CKSM. If so, then software library  is assured that the caller application loading it is trusted. Otherwise, software library  has discovered that the caller application loading it is not trusted.","Implementation Details","Referring back to , checksum calculator  preferably skips over the encrypted CKSM embedded within software library  when determining its checksum. Otherwise, the checksum calculated by checksum calculator , based on software library , may not agree with the checksum calculated by data processor , based on software library . Additionally, there may be other portions where software libraries  and  disagree, which preferably are also skipped by checksum calculator .","In a preferred embodiment of the present invention, portions of software library  and software library  can be designated as \u201cto be skipped\u201d when calculating checksums thereof. Such designation may be accomplished by special bit patterns preceding and\/or following the designated portions. Checksum calculator  and data processor  are programmed to skip over the designated portions when calculating their checksums.","In a first embodiment of the present invention, the special bit patterns and encrypted CKSM1 are generated within software library  and software library  by software array definitions such as:\n\n","The above declarations are preferably included in the program that generates software library . Each of the above three arrays can store 128 bits. By filling special bits into the header and ender arrays, a checksum calculator can determine that it has to skip the three arrays when calculating its checksum. Moreover, data processor  can use the header and ender bits to locate a position in software library  where the encrypted CKSM is to be embedded.","In a second embodiment of the present invention, the three arrays above, header[ ], checksum[ ] and ender[ ], can be combined into a single array char checksum[];","In this second embodiment the first sixteen bytes of the array checksum[ ] are used as a header, and the last sixteen bytes of the array checksum[ ] are used as an ender. This embodiment is preferred over the first embodiment described hereinabove, since some compilers may not allocate contiguous memory locations for the three arrays header[ ], checksum[ ] and ender[ ].","In a third embodiment of the present invention, the header bytes include a length for the checksum, in which case the ender bytes are not required. Alternatively, the ender bytes may include a length for the checksum, in which case the header bytes are not required.","It is apparent to those skilled in the art that the specific lengths of sixteen bytes for a header, sixteen bytes for a checksum and sixteen bytes for an ender are not required, and other lengths may be used as well.","In a fourth embodiment of the present invention, the location of the checksum bytes is known, in which case both the header bytes and the ender bytes are not required and can be dispensed with.","Without the ability to skip over portions of software library  when calculating a checksum, the infamous circular \u201cchicken and the egg\u201d problem would arise, whereby the checksum of software library  cannot be calculated until the encrypted checksum is known.","Additional Considerations","In reading the above description, persons skilled in the art will realize that there are many apparent variations that can be applied to the methods and systems described.","The encrypted checksum need not be embedded within the software library or application, but can instead be included separately. Thus step  of  and step  of  may be replaced with respective alternative steps including the encrypted CKSM1 elsewhere.","In another variation, the checksum may be encrypted using a secret key, instead of a private key, and the secret key itself may be encrypted using the private key. The encrypted checksum and encrypted secret key may be embedded within the software or included elsewhere. Decryption is performed by first decrypting the secret key using a public key, and thereafter decrypting the checksum using the decrypted secret key.","In yet another variation, the checksum may be known in advance.","The present invention may also be used to authenticate in-memory versions of a software library; for example, to check whether or not an in-memory version has been patched in memory.","In another embodiment of the present invention, a protected software library may check itself before running, rather than being checked by a calling application.","The present invention may also be embodied such that multiple customers can run a client application loading a protected software library, without the need to share a common customer key. Specifically, in this embodiment a checksum of the client application is encrypted multiple times, each time using a different private\/public key encryption. Thus if a version of the client application is intended for use by a select group of customers, each customer is given a different key, and a checksum of the client application is encrypted with each of their keys, obviating the need for them to share a common key. Moreover, in this embodiment a customer is dropped without affecting other customers, by simply removing the copy of the checksum encrypted for his specific key.","The present invention may also be used for authenticating software resources such as document, image files, audio files and video files.","In the foregoing specification, the invention has been described with reference to specific exemplary embodiments thereof. It will, however, be evident that various modifications and changes may be made to the specific exemplary embodiments without departing from the broader spirit and scope of the invention as set forth in the appended claims. Accordingly, the specification and drawings are to be regarded in an illustrative rather than a restrictive sense."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The present invention will be more fully understood and appreciated from the following detailed description, taken in conjunction with the drawings in which:",{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 5"}]},"DETDESC":[{},{}]}
