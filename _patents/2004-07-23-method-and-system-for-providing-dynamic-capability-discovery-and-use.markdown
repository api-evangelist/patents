---
title: Method and system for providing dynamic capability discovery and use
abstract: A method of providing dynamic service discovery to a client application includes receiving a context specific request, from the client application or component, to discover services available from applications or components. Based on the request, at least one list of services corresponding to the context specific request is retrieved and provided to the client application.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07293021&OS=07293021&RS=07293021
owner: Microsoft Corporation
number: 07293021
owner_city: Redmond
owner_country: US
publication_date: 20040723
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF ILLUSTRATIVE EMBODIMENTS"],"p":["The present invention relates to methods of providing service discovery between software applications and software components. More particularly, the present invention relates to systems and methods which facilitate the sharing of functionality between independent software applications and loosely coupled components.","Current software applications are developed as islands\u2014largely independent of each other. A user or administrator purchases an application that provides a certain set of features, and manages a certain set of data. Frequently, this application will not use functions or services available from other applications unless it was originally designed to do so.","The ability to make two or more applications utilize each other's functionality has typically been achieved by essentially hard coding the applications together. Thus, in order to get the applications to utilize each other's functionality, the applications must typically be created with the knowledge of each other's available functions or services, and be designed to utilize these services. In other words, in order to utilize each other's functions or services, the applications are not typically created independently of each other. In the alternative, independent applications created without regard to each other's functionality can utilize each other's services if significant additional code is created to link the applications together. This is labor intensive, particularly given the large number of applications that would potentially need to be hard coded together in this manner.","Methods of discovering available services for use with an application or system are known. For example, the Universal Description, Discovery and Integration (UDDI) project resulted in a specification for distributed World Wide Web (WWW) based information registries of Web services. UDDI includes a publicly accessible set of implementations of that specification that allow businesses to register information about the Web services they offer so that other businesses can find them. Publication of Web services allows others to create programs which will interact with these published services. However, the services published by UDDI are not listed or accessible in a context specific manner, which creates difficulties in sharing of functionality between independent software applications and loosely coupled components. Although service discovery such as is provided using UDDI can be useful, the above-described problems of allowing independently created (i.e., created without knowledge of each other's services) software applications to access each other's functionality in a loosely coupled (i.e., not hard coded) manner still remain.","The present invention provides solutions to one or more of the above-described problems and\/or provides other advantages over the prior art.","A method of providing dynamic service discovery to a client application includes receiving a context specific request, from the client application, to discover services available from independent service providing applications. Based on the request, at least one list of services corresponding to the context specific request is retrieved and provided to the client application.","Other features and benefits that characterize embodiments of the present invention will be apparent upon reading the following detailed description and review of the associated drawings.",{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 1","b":["100","100","100","100"]},"The invention is operational with numerous other general purpose or special purpose computing system environments or configurations. Examples of well known computing systems, environments, and\/or configurations that may be suitable for use with the invention include, but are not limited to, personal computers, server computers, hand-held or laptop devices, multiprocessor systems, microprocessor-based systems, set top boxes, programmable consumer electronics, network PCs, minicomputers, mainframe computers, distributed computing environments that include any of the above systems or devices, and the like.","The invention may be described in the general context of computer-executable instructions, such as program modules, being executed by a computer. Generally, program modules include routines, programs, objects, components, data structures, etc. that perform particular tasks or implement particular abstract data types. The invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment, program modules may be located in both local and remote computer storage media including memory storage devices.","With reference to , an exemplary system for implementing the invention includes a general purpose computing device in the form of a computer . Components of computer  may include, but are not limited to, a processing unit , a system memory , and a system bus  that couples various system components including the system memory to the processing unit . The system bus  may be any of several types of bus structures including a memory bus or memory controller, a peripheral bus, and a local bus using any of a variety of bus architectures. By way of example, and not limitation, such architectures include Industry Standard Architecture (ISA) bus, Micro Channel Architecture (MCA) bus, Enhanced ISA (EISA) bus, Video Electronics Standards Association (VESA) local bus, and Peripheral Component Interconnect (PCI) bus also known as Mezzanine bus.","Computer  typically includes a variety of computer readable media. Computer readable media can be any available media that can be accessed by computer  and includes both volatile and nonvolatile media, removable and non-removable media. By way of example, and not limitation, computer readable media may comprise computer storage media and communication media. Computer storage media includes both volatile and nonvolatile, removable and non-removable media implemented in any method or technology for storage of information such as computer readable instructions, data structures, program modules or other data. Computer storage media includes, but is not limited to, RAM, ROM, EEPROM, flash memory or other memory technology, CD-ROM, digital versatile disks (DVD) or other optical disk storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other medium which can be used to store the desired information and which can be accessed by computer . Communication media typically embodies computer readable instructions, data structures, program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term \u201cmodulated data signal\u201d means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example, and not limitation, communication media includes wired media such as a wired network or direct-wired connection, and wireless media such as acoustic, RF, infrared and other wireless media. Combinations of any of the above should also be included within the scope of computer readable media.","The system memory  includes computer storage media in the form of volatile and\/or nonvolatile memory such as read only memory (ROM)  and random access memory (RAM) . A basic input\/output system  (BIOS), containing the basic routines that help to transfer information between elements within computer , such as during start-up, is typically stored in ROM . RAM  typically contains data and\/or program modules that are immediately accessible to and\/or presently being operated on by processing unit . By way of example, and not limitation,  illustrates operating system , application programs , other program modules , and program data .","The computer  may also include other removable\/non-removable volatile\/nonvolatile computer storage media. By way of example only,  illustrates a hard disk drive  that reads from or writes to non-removable, nonvolatile magnetic media, a magnetic disk drive  that reads from or writes to a removable, nonvolatile magnetic disk , and an optical disk drive  that reads from or writes to a removable, nonvolatile optical disk  such as a CD ROM or other optical media. Other removable\/non-removable, volatile\/nonvolatile computer storage media that can be used in the exemplary operating environment include, but are not limited to, magnetic tape cassettes, flash memory cards, digital versatile disks, digital video tape, solid state RAM, solid state ROM, and the like. The hard disk drive  is typically connected to the system bus  through a non-removable memory interface such as interface , and magnetic disk drive  and optical disk drive  are typically connected to the system bus  by a removable memory interface, such as interface .","The drives and their associated computer storage media discussed above and illustrated in , provide storage of computer readable instructions, data structures, program modules and other data for the computer . In , for example, hard disk drive  is illustrated as storing operating system , application programs , other program modules , and program data . Note that these components can either be the same as or different from operating system , application programs , other program modules , and program data . Operating system , application programs , other program modules , and program data  are given different numbers here to illustrate that, at a minimum, they are different copies.","A user may enter commands and information into the computer  through input devices such as a keyboard , a microphone , and a pointing device , such as a mouse, trackball or touch pad. Other input devices (not shown) may include a joystick, game pad, satellite dish, scanner, or the like. These and other input devices are often connected to the processing unit  through a user input interface  that is coupled to the system bus, but may be connected by other interface and bus structures, such as a parallel port, game port or a universal serial bus (USB). A monitor  or other type of display device is also connected to the system bus  via an interface, such as a video interface . In addition to the monitor, computers may also include other peripheral output devices such as speakers  and printer , which may be connected through an output peripheral interface .","The computer  may operate in a networked environment using logical connections to one or more remote computers, such as a remote computer . The remote computer  may be a personal computer, a hand-held device, a server, a router, a network PC, a peer device or other common network node, and typically includes many or all of the elements described above relative to the computer . The logical connections depicted in  include a local area network (LAN)  and a wide area network (WAN) , but may also include other networks. Such networking environments are commonplace in offices, enterprise-wide computer networks, intranets and the Internet.","When used in a LAN networking environment, the computer  is connected to the LAN  through a network interface or adapter . When used in a WAN networking environment, the computer  typically includes a modem  or other means for establishing communications over the WAN , such as the Internet. The modem , which may be internal or external, may be connected to the system bus  via the user input interface , or other appropriate mechanism. In a networked environment, program modules depicted relative to the computer , or portions thereof, may be stored in the remote memory storage device. By way of example, and not limitation,  illustrates remote application programs  as residing on remote computer . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.",{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 2","b":["200","200","202","204","206","208","210"]},"Memory  is implemented as non-volatile electronic memory such as random access memory (RAM) with a battery back-up module (not shown) such that information stored in memory  is not lost when the general power to mobile device  is shut down. A portion of memory  is preferably allocated as addressable memory for program execution, while another portion of memory  is preferably used for storage, such as to simulate storage on a disk drive.","Memory  includes an operating system , application programs  as well as an object store . During operation, operating system  is preferably executed by processor  from memory . Operating system , in one preferred embodiment, is a WINDOWS\u00ae CE brand operating system commercially available from Microsoft Corporation. Operating system  is preferably designed for mobile devices, and implements database features that can be utilized by applications  through a set of exposed application programming interfaces and methods. The objects in object store  are maintained by applications  and operating system , at least partially in response to calls to the exposed application programming interfaces and methods.","Communication interface  represents numerous devices and technologies that allow mobile device  to send and receive information. The devices include wired and wireless modems, satellite receivers and broadcast tuners to name a few. Mobile device  can also be directly connected to a computer to exchange data therewith. In such cases, communication interface  can be an infrared transceiver or a serial or parallel communication connection, all of which are capable of transmitting streaming information.","Input\/output components  include a variety of input devices such as a touch-sensitive screen, buttons, rollers, and a microphone as well as a variety of output devices including an audio generator, a vibrating device, and a display. The devices listed above are by way of example and need not all be present on mobile device . In addition, other input\/output devices may be attached to or found with mobile device .","In accordance with embodiments of the present invention, a capability manager component is provided which implements improved dynamic service discovery functions, enabling complying applications to utilize each others functionality in a loosely coupled way by describing the context needed for interaction.","A context is set of information about the user and what he\/she is working on and the surrounding environment. Context must contain type information (metadata) so that a capability manager (discussed below) can find relevant services. Context can contain other information such as: Actual Data, user Identification and any other type of information relevant for execution or discovery of services. If Context contains a \u201cCustomer type\u201d, when the client asks for a list of available services from the capability manager the result will be a list of services, using the inventive concepts described below, that can handle Customer data. For example, a service can register in the system as being able to handle the context of \u201cCustomer type\u201d where \u201ccountry=Iceland\u201d. The capability manager described below will only return a \u201cService information object\u201d (described later) to this service if the context is \u201cCustomer type\u201d and contains a data field named \u201ccountry\u201d and its value equals \u201cIceland\u201d.","As is described in detail below, the concepts of the present invention allow existing independently created applications to share functionality or services without the need for hard coding the specific integration functionality into the applications. Further, a number of advantageous dynamic discovery functions can be provided in accordance with the present invention to enhance the process of registering, searching and using services from other applications.","Referring now to  and -, shown are a capability manager , along with a service registering application  and a client or service using application . In , service providing application  is illustrated registering or publishing one or more capabilities, services or functions with the dynamic service discovery system provided or facilitated by capability manager . Service providing application  represents one of many such applications which publish their capabilities by describing the context of where the feature can be used.","An example of a service publishing application could be Microsoft Word. When installed on a computer, the Microsoft Word application could publish it's capability of \u201cWrite letter to customer\u201d. By publishing or registering this service, this example of a service registering application would notify the service discovery system provided at least in part by capability manager  that it has a service, named \u201cWrite letter to customer,\u201d that works with data of the type \u201ccustomer.\u201d This service registering application would also notify the capability manager of how the dispatcher  (shown in ) system can activate and bind to it (for example by Web service URL, etc.).","In , client application  is shown using capability manager  to discover or search for available services. As used herein, in some embodiments a client application is an independent application, created without knowledge of the services which have been registered by other service providing applications. In discovering available capabilities, client application  describes it's data context (for example using the Lookup(context) command) and asks for capabilities available which work with that context of data. Capability manager  returns a list of capabilities or services which can be provided by other applications for this particular context of data and how the dispatcher  can bind to them.","Each request to the capability manager will result in retrieval or return of zero or more \u201cService information objects\u201d. A service information object contains information about the service from which it is returned. Service information objects contain at least the binding information to the service, in other words, how the service can be activated\/executed\/called. This information is protocol specific. It may contain a label for displaying in a user interface (UI), and that label can be localized to the user language if that information is available in the context. Service information objects can also contain information on class of service, and where in the UI it could be placed. The UI placement is up to the caller.","Binding to a service is protocol specific so a protocol handler needs to be installed in the dispatcher to activate\/bind\/call a service. The caller will give the context information and the service binding information received from the service information object to the dispatcher. The dispatcher will then bind to and activate\/call the service.","As an example of a client application discovering a capability or service, an Enterprise-Resource-Planning (ERP) system application can describe it's needed data context and discover that \u201cWrite letter to customer\u201d capability is now available on the system. With the aid of capability manager , it can then show that feature to a user in form of button, menu item, or any other form that fits that client application. When the user decides to execute the capability, the context information is transferred to the service via the dispatcher . These and other features of the capability manager are described below in greater detail.","Referring now to , shown is a service discovery component  of capability manager . Service discovery component  is illustrated operating on a local computer or machine . Although other components of capability manager  are not shown in , these other components can also operate on the same local computer , as can client application . Further, publisher or service providing application  can reside on the same computer or system in some embodiments, though this need not be the case.","Service discovery component  provides interfaces for registering (publishing) and discovering (searching for) services. In addition, service discovery component  adds some very useful extra functionality that would be costly and time-consuming to implement in a series of applications. Service Discovery component  can be used to establish registration\/discovery between applications that agree upon some private and proprietary format of information. Service Discovery component  generalizes the steps involved in discovering and registering services, functions or capabilities for applications, and provides a uniform interface for the discovery and registration processes.","Again shown in  are client application  that seeks to discover services which it can utilize, and service or publisher application  that has or will register its services with capability manager  using service discovery component . Service discovery component  includes two public interfaces  and  for queries and for registration. The query interface  is used by clients for discovering services. The registration interface  is used by applications (\u201cPublishers\u201d) for registering (\u201cpublishing\u201d) services.","A repository  of services (labelled UDDI) can be any available services repository, but in some exemplary embodiments is a UDDI based repository of services. Active directory  can be included to allow, for example in large organizations, service discovery component  to query several UDDI repositories for available services. Local operating system registry , which can be for example a local Windows\u00ae registry, is a local repository for publishing services that is used by some applications, for example Microsoft Office\u00ae. In accordance with some exemplary embodiments of the present invention, service discovery component  merges this (local) information with information fetched from UDDI  (or other UDDI repositories using active directory ) or other similar service repositories. This does not mean that the local OS registry  is used to create a local replica of the general (UDDI-based) repository, but rather that the service discovery component can merge the services registered in these two registries or repositories. This allows a client application  to use service discovery component  to discover both services registered with an internet or other computer system based registry, and local services offered by other applications running on the local computer  on which service discovery component  (and optionally other components of capability manager ) is running. As mentioned above, this can also be the same computer on which the client application  is running.","The diagram illustrated in  shows a sequence of a search initiated by using the query interface . As shown at  in , the client application  initiates a search for services. The service discovery component  takes several actions in response to this initiated search. For example, as shown at  in , the service discovery component  retrieves a list of local services from local OS registry . These local services, which can be provided by other applications on the local computer  on which service discovery component  and\/or client application  are running, are included on the list only if they meet the context requirements of client application .","Also in response to the initiated search, service discovery component  can in some embodiments retrieve a list of UDDI type registries from active directory  as is illustrated in  at . As is illustrated at  in , the service discovery component  retrieves one or more lists of services from one or more UDDI type registries . Again, services are included on the list only if they meet the context requirements of client application . Then, as shown at , service discovery component  merges the local and non-local (e.g. UDDI type) lists of services and provides the merged lists of services to client application as shown at .","Service discovery component  and other components of capability manager  provide numerous benefits in various embodiments of the invention. One such benefit is that they enable easy decoupling of modules. By factoring service discovery out into a separate component with well-defined interfaces, it is made easy for client applications to implement service discovery and thus use web and other services. Furthermore, the service discovery component offers functionality over and above what is typically accomplished by discovering through direct requests to repositories such as UDDI. This includes the ability to register and discover services based on type (e.g. \u201cParty\u201d or \u201cOrder\u201d), based on a type with a filter (e.g. \u201cCustomers in Denmark\u201d), or based on an instance (e.g. the customer called \u201cJohn Doe Inc.\u201d, or the invoice with the number \u201c4711\u201d).","Another benefit provided is that service discovery component  and capability manager  enable runtime binding of modules. Services can be registered at runtime, and discovered at runtime, making a highly dynamic binding of modules possible. For example, an application can register a service on a processed order when that order is processed, and another application will discover this service the next time it asks for services for processed orders.","Another benefit is that there is little, if any, need for hard-coded service discovery logic in the application. Factoring the service discovery out in a separate component not only makes it much simpler for applications to use service discovery, it actually also makes it possible to change the implementation of the service discovery while keeping the interfaces stable. Further, using service discovery component  and capability manager , a function can be added to multiple clients applications. When an application registers a service, for example a service for an instance of an order that lets that order be confirmed, any application that has the necessary credentials can discover the service and execute it.","As is described further below with reference to , the present invention supports process-aware enabling and disabling of services. Depending upon the level of integration effort put into an application, the service discovery component or other components of capability manager  allow decisions to be made about enabling and disabling of services based on the state of a business process. For example, services that act on process orders can be enabled only at the point in the process where this is relevant.","Another benefit which can be realized using the capability manager and service discovery component of the present invention is due to the grouping of discovered services based on metadata in some embodiments. The consumer or client application may or may not use this information to enhance navigation in the result set of available services (e.g. by using this information to add services as menu items to the appropriate menus within the client application). Further, the names of services are localizable (can be presented in a language chosen by the consuming or client application), and can also be context-sensitive, so that the same service can have different names when used in different functional areas of a client application.","Referring now to , shown is a block diagram illustrating various service discovery related functions implemented by capability manager  in accordance with various embodiments of the present invention. While these various functions are discussed as components which interact with service discovery component , in other embodiments these functions can be implemented within service discovery component . Further, while these various functions are illustrated together in an embodiment of capability manager , the present invention is not limited to a capability manager or service discovery component configured to implement all of these functions. Instead,  is intended to represent various functions\/components that can be implemented together or independently of each other.","As shown in , embodiments of the capability manager  can include a service merging component  to merge services from service repositories  (such as one or more UDDI type or other repositories ) and from local service registries  (such as local OS registry ). This function was described above with reference to . Again, it is not necessary that the service merging function be implemented in a separate component from service discovery component , and illustration of component  (and other components in ) are also intended to represent capability manager functions that can be implemented as desired within or in conjunction with the general service discovery functions\/component .","Also illustrated in  is a service filtering component or function . Service filtering component or function  filters the list of services such that it includes only those which meet one or more filtering criteria based on the required data context of the client application. As noted above, and provided by way of example, this can include filtering out services such that services are discovered and provided to the client application only if they operate on a particular property or entity type (e.g. \u201cParty\u201d or \u201cOrder\u201d). This can further include filtering out services such that only those which meet a more specific criteria, such as having a particular property value, are discovered and provided to the client application. As an example of this more particular filtering, service filtering component  can filter the list of services such that not only are all listed services related to the \u201cCustomer\u201d type, but all listed services are more specifically related to \u201cCustomers in Denmark\u201d. As another example, service filtering component  can filter services based on an instance (e.g. the customer called \u201cJohn Doe Inc.\u201d, or the invoice with the number \u201c4711\u201d).","Service enable\/disable component  of capability manager  functions to determine which functions or services are to be enabled or disabled based on a state of a business process. As described above, and provided by way of example, service enable\/disable component  could be used to enable services only at the point in a business process where the service is relevant. This component thus supports process-aware enabling and disabling of services.","Service grouping component  can be included to implement the grouping functions described above. In other words, component or function  can group discovered services based on metadata or other parameters. The consumer or client application can then use this information to enhance navigation in the result set of available services (e.g. by using this information to add services as menu items to the appropriate menus within the client application).","In some embodiments of the invention, it is desirable to enable existing independent applications to use discovered services with no (or few) adaptations or modifications to the applications. Adapter  can be included in capability manager  to achieve this integration. In some embodiments, adapter  transforms data as found in client applications into business entities, for example using maps and map engines. The resulting, automatically generated, business entities are then used to query the service discovery component for services and to use these services. Resulting data from the service is also, transparently, mapped back into the data representation of the client application by adapter component . Doing these mappings or adaptations of data within capability manager , it became possible to add Web or other services to existing client applications, and to create context-aware menu items in the client applications.","Once a client application  has discovered a service provided by a service application  using capability manager , when the client application decides to execute or dispatch the capability or service, the context information or data required to execute the service (a service activation command) is transferred to the service or service application using a dispatcher component or function . This dispatcher component or function  can reside within capability manager , or it can be a separate component altogether. Further, in some embodiments, the context information provided to the service application by dispatcher  can be in an adapted or mapped form as generated by adapter . Thus, a connection between adapter  and dispatcher  is shown in dashed line to represent this optional configuration.","Although the present invention has been described with reference to particular embodiments, workers skilled in the art will recognize that changes may be made in form and detail without departing from the spirit and scope of the invention."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIGS. 3-1"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIGS. 3-2"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":["FIG. 4","FIGS. 3-1"],"b":["3","2"]},{"@attributes":{"id":"p-0014","num":"0013"},"figref":["FIG. 5","FIG. 4"]},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 6"}]},"DETDESC":[{},{}]}
