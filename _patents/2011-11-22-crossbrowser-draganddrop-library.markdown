---
title: Cross-browser “drag-and-drop” library
abstract: Technologies are described herein for implementing a cross-browser drag-and-drop library. The drag-and-drop library creates a draggable object corresponding to a drag source element and a droppable object corresponding to a drop target element defined in a webpage. The draggable object and droppable object are each assigned a link key value. A user-defined data structure populated with data regarding the drag source element may also be assigned to the draggable object. A browser event indicating a drag-and-drop operation between the drag source and the drop target is intercepted, and the drag-and-drop library determines whether the link key value assigned to the corresponding draggable and droppable objects are the same. If the link key values are the same, the drag-and-drop library generates an event associated with the droppable object to facilitate an application-related operation associated with the drag-and-drop operation using the data in the user-defined data structure.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09026931&OS=09026931&RS=09026931
owner: Microsoft Technology Licensing, LLC
number: 09026931
owner_city: Redmond
owner_country: US
publication_date: 20111122
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["Drag-and-drop has become a popular mental model for moving items, such as moving documents from one location to another, in the user interface of a software application, such as that presented in a webpage inside a Web browser. As Web browsers and other Web technologies change and evolve, however, implementing a drag-and-drop experience that is cross-browser compatible may become difficult and involve multiple implementations to achieve a unified experience across browsers. In addition, while the HTML 5 standard provides drag-and-drop capabilities, the standard has been implemented differently in different browsers and browser versions, especially in the areas of event types, behaviors, and properties.","Developers may implement a separate drag-and-drop solution for each browser (and version) for which they desire drag-and-drop support, or they may utilize a number of drag-and-drop libraries that offer limited support for the drag-and-drop capabilities available on the target browser platforms. Existing drag-and-drop libraries lack the ability of defining links of drag sources and drop targets and allow multiple groups of drag sources and drop targets. In addition, the transfer of data between drag sources and drop targets is limited by the W3C standards and each browser's implementation such that developers have no way of specifying custom data to be transferred between the drag source and drop target.","It is with respect to these considerations and others that the disclosure made herein is presented.","Technologies are described herein for implementing a cross-browser drag-and-drop library. Utilizing the technologies described herein, a drag-and-drop library may be provided that allows Web developers to easily and quickly include drag-and-drop functionality in their webpages without having to deal with the implementation details of drag-and-drop for different Web browsers and versions, saving implementation time and simplifying complexity, upgrading, and management of code. The drag-and-drop library further provides for the use of user-defined data structures to pass data between a drag source and a drop target, as well as facilities for grouping drag sources and targets together so that drag-and-drop operation are enabled between grouped pairs, with the user-defined data structure to be exchanged being defined at the group level.","According to embodiments, the drag-and-drop library may create a draggable object corresponding to a drag source element defined in a webpage and a droppable object corresponding to a drop target element defined in the webpage. The draggable object and droppable object are each assigned a link key value. In addition, a user-defined data structure populated with data regarding the drag source element may be assigned to the draggable object. The drag-and-drop library may intercept a browser event indicating that the drag source element was dropped onto the drop target element in the user interface defined by the webpage. Upon intercepting the browser event, the drag-and-drop library determines whether the link key value assigned to the draggable object and the link key value assigned to the droppable object are the same. If the link key values are the same, the drag-and-drop library generates an event associated with the droppable object that is configured to facilitate an application-related operation associated with the drag source element and\/or drop target element using the data in the user-defined data structure.","It should be appreciated that the above-described subject matter may be implemented as a computer-controlled apparatus, a computer process, a computing system, or as an article of manufacture such as a computer-readable medium. These and various other features will be apparent from a reading of the following Detailed Description and a review of the associated drawings.","This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter, nor is it intended that this Summary be used to limit the scope of the claimed subject matter. Furthermore, the claimed subject matter is not limited to implementations that solve any or all disadvantages noted in any part of this disclosure.","The following detailed description is directed to technologies for implementing a cross-browser drag-and-drop library. While the subject matter described herein is presented in the general context of program modules that execute in conjunction with the execution of an operating system and application programs on a computer system, those skilled in the art will recognize that other implementations may be performed in combination with other types of program modules. Generally, program modules include routines, programs, components, data structures, and other types of structures that perform particular tasks or implement particular abstract data types. Moreover, those skilled in the art will appreciate that the subject matter described herein may be practiced with other computer system configurations, including hand-held devices, multiprocessor systems, microprocessor-based or programmable consumer electronics, minicomputers, mainframe computers, and the like.","In the following detailed description, references are made to the accompanying drawings that form a part hereof and that show, by way of illustration, specific embodiments or examples. In the accompanying drawings, like numerals represent like elements through the several figures.",{"@attributes":{"id":"p-0015","num":"0014"},"figref":["FIG. 1","FIG. 1"],"b":["100","100","102","102","102","104","106","108","110"]},"The user  may utilize the user computer system  to view and interact with webpages served by a website  across a network . The website  may comprise a number of Web servers  that serve application webpages  to a browser client  executing on the user computer system  in order to provide interactive application services to the user  across the network . It will be appreciated that the website  may further include application servers, database servers, and other server computers, network devices, and the like that are operably connected to the Web servers  in order to provide the interactive application services to the user . The network  may be a local-area network (\u201cLAN\u201d), a wide-area network (\u201cWAN\u201d), the Internet, or any other networking topology known in the art that connects the user computer system  to the website .","The browser client  allows the user  to view and interact with the application webpages  served by the website  across the network . In one embodiment, the browser client  may comprise a Web browser application, such as the MICROSOFT\u00ae INTERNET EXPLORER\u00ae Web browser from Microsoft Corp. of Redmond, Wash. In another embodiment, the browser client  may be an embedded component of the operating system (\u201cOS\u201d) of the user computer system . The browser client  may exchange data with the Web server(s)  in the website  using the hypertext transfer protocol (\u201cHTTP\u201d) over the network . Additionally or alternatively, the browser client  may utilize any number of communication methods known in the art to communicate with the website  and Web servers  across the network , including remote procedure calls, SOAP-based web services, remote file access, proprietary client-server architectures, and the like.","The application webpages  may include at least one user interface (\u201cUI\u201d) comprising a drag-and-drop metaphor, as is known in the art, embodied in a drag-and-drop webpage . The drag-and-drop webpage  may be served by the Web servers  to the browser client , which presents the drag-and-drop metaphor UI to the user  on the display device  and provides for interaction with the UI by the user. The drag-and-drop webpage  may include hypertext markup language (\u201cHTML\u201d), extensible markup language (\u201cXML\u201d), JavaScript object notation (\u201cJSON\u201d), and the like that specify instructions regarding how the UI is to be rendered by the browser client  on the display device . According to embodiments, the drag-and-drop webpage  further includes script code, such as JavaScript, ECMAScript, JScript, VBScript, and the like, that specifies the parameters of the drag-and-drop UI and\/or directs the interactions between the drag-and-drop UI and the user  of the user computer system .","According to embodiments, the browser client  further includes a drag-and-drop library . The drag-and-drop library  comprises computer-executable code that defines objects and application programming interfaces (\u201cAPIs\u201d) that allow the script code in the drag-and-drop webpage  to define the parameters and user interactions for the drag-and-drop UI embodied in the drag-and drop webpage . In one embodiment, the objects and\/or APIs of the drag-and-drop library  may wrap existing objects and APIs offered by the browser client  in order to present a consistent interface to the script code in the drag-and-drop webpage  across different browser programs and versions, as well as to provide additional drag-and-drop features and functionality not natively supported by the browser client.","In one embodiment, the drag-and-drop library  may be served to the browser client  by the web server(s)  in the website  or by other web server(s) available across the network  upon the first access to the drag-and-drop webpage  by the browser client. For example, the drag-and-drop webpage  may include an HTML or XML tag or a script code instruction that instructs the browser client  to retrieve the drag-and-drop library  from the web server(s)  and to make the objects and APIs stored therein available to the script code in the drag-and-drop webpage. The browser client  may further store or \u201ccache\u201d the drag-and-drop library  on the user computer system  for subsequent use. In another embodiment, the drag-and-drop library  may be manually installed on the user computer system  by the user  and\/or an administrator of the user computer system, as part of an application support package or runtime, for example.",{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 2","b":["200","126","128","200","202","114","200","102","106","200","204","204","204","204","206","206","206","206","204","206","200","126"]},"According to embodiments, the drag sources  may be \u201cdragged\u201d around the UI by the user , through use of a mouse pointer  controlled by a mouse, for example. The UI may display a symbolic representation  of the drag source  during the drag operation, as further shown in . The user  may further \u201cdrop\u201d a drag source  on a drop target . For example, as shown in , the user  may drag the drag source A across the window  and drop it on the drop target A. This may cause the browser client  to execute an application-related operation associated with the drag source A and\/or drop target A, either locally or by sending a request back to the Web servers , for example.","As described above, script code in the drag-and-drop webpage  may utilize the objects and APIs provided by the drag-and-drop library  to specify which elements of the drag-and-drop UI  are drag sources  and drop targets , as well as specify features and parameters of these objects and the application-related operations to perform upon the drop of a drag source on a drop target. According to one embodiment, the drag-and-drop library  provides one or more APIs that allow the script code to define groups A, B (also referred to herein as group  and groups ) of drag sources  and drag targets . The groups  of drag sources  and drag targets  defined by the script code in the drag-and-drop webpage  may indicate to the drag-and-drop library  which drag sources  may be dropped onto which drop targets  through the drag-and-drop UI . The drag-and-drop library  and\/or browser client  may then allow drag-and-drop operations to be performed between pairs of drag sources  and drop targets  within the same group , while ignoring drops, hover-over, and other interactions between drag sources and drop targets not grouped together.","In one embodiment, each drag source  and\/or drop target  may belong to more than one group . For example, as shown in , drag sources A and B may be grouped with drop target A in a first group A, while drag sources B and C may be similarly grouped with drop target B in a second group B. In this example, the drag-and-drop library  and\/or browser client  will facilitate a drag-and-drop operation between drag source A and drop target A, for example, but not between drag source A and drop target B. However, the drag-and-drop library  and\/or browser client  may facilitate drag-and-drop operations between drag source B and both drop targets A and B.","According to another embodiment, the drag-and-drop library  further provides one or more APIs that allow the script code to define a user-defined data structure  to be exchanged between a drag source  and a drop target  upon the drag source being dropped on the drop target. The user-defined data structure  may be any data structure that allows context information regarding the drag source  and its representative element to be passed to the drop target  involved in the drag-and-drop operation. The context information from the user-defined data structure  regarding the drag source  may be utilized along with context information for the drop target  to execute the actual application-related operation resulting from the drag-and-drop operation.","The drag-and-drop library  may contain any number of objects and APIs defined based on any number of calling conventions or language structures. The objects and APIs of the drag-and-drop library  may be implemented in JavaScript, ECMAScript, .NET libraries, JAVA classes, or any other language\/platform that can present APIs to the script code in the drag-and-drop webpage . In one embodiment, the drag-and-drop library  may define a SPDraggable object, which is based on a DOM element. The script code in the drag-and-drop webpage  may create a SPDraggable object from the DOM element corresponding to each drag source  in the drag-and-drop webpage . Options and event handlers can be supplied at creation of the object, or at a later time. Once the SPDraggable object is created, the script code may call the methods of the object to specify various options and parameters and\/or to facilitate drag-and-drop operations for the corresponding drag source .","The drag-and-drop library  may add an \u201cms-draggable\u201d cascading style sheet (\u201cCSS\u201d) class to the DOM element corresponding to the drag source  indicating that it is a draggable element. Similarly the drag-and-drop library  may add an \u201cms-dragging\u201d CSS class to the DOM element while the drag source  is being dragged by the user. These CSS classes may further determine the way the drag source  is rendered in the drag-and-drop UI  by the browser client  during the interaction of the user  with the UI. The drag-and-drop library  may further add a DragId attribute to the DOM element corresponding to the drag source  with a unique numeric identifier as the value.","The SPDraggable object may be defined with one or more of the methods shown in Table 1 below.",{"@attributes":{"id":"p-0029","num":"0028"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"280pt","align":"center"}},"thead":{"row":{"entry":"TABLE 1"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Methods of SPDraggable object"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Name","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["GetElement( )","Returns the DOM element for this object."]},{"entry":["GetLinkKeys( )","Returns an array of LinkKeys for this object"]},{"entry":["AddLinkKey(\/*@type(String)*\/linkKey)","Add a LinkKey"]},{"entry":["RemoveLinkKey(\/*@type(String)*\/linkKey)","Remove a LinkKey"]},{"entry":["GetOption(\/*@type(String)*\/optionName)","Returns the value for an option"]},{"entry":["SetOption(\/*@type(String)*\/optionName,","Set an Option"]},{"entry":"\/*@dynamic*\/value)"},{"entry":["SetOptions(\/*@Array*\/options)","Set options provided in the array"]},{"entry":["Disable( )","Disable this object"]},{"entry":["Enable( )","Enable this object"]},{"entry":["Enabled( )","Returns whether this object is disabled or"]},{"entry":[{},"enabled"]},{"entry":["Remove( )","Remove this object and the draggable"]},{"entry":[{},"capability from the DOM element"]},{"entry":["AddEventListener(\/*@type(String)*\/eventType,","Add an event listener. The eventType have"]},{"entry":["\/*@function*\/listenerFunc)","to be one of the supported events."]},{"entry":["SetData(\/*@type(String)*\/dataKey,","Set and replace the data to be transferred for"]},{"entry":["\/*@dynamic*\/value)","the given key. The dataKey should have the"]},{"entry":[{},"same value as the LinkKey"]},{"entry":["AddData(\/*@type(String)*\/key,","Add to the data for the given key"]},{"entry":"\/*@dynamic*\/value)"},{"entry":["GetData(\/*@type(String)*\/key)","Retrieve the data for the given key"]},{"entry":["ClearData(\/*@type(String)*\/key)","Remove data for the given key"]},{"entry":["GetDragImage( )","Returns the dragging cursor image object"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"The AddLinkKey method may be used to assign one or more link keys to the SPDraggable object corresponding to the drag source  in order to facilitate the grouping described above in regard to . According to embodiments, drag sources  and drop targets  assigned the same link key value are grouped together in a corresponding group . In addition, the SetData method may be used to assign a user-defined data structure  to the SPDraggable object corresponding to the drag source  that will be provided to any drop targets  on which the drag source is dropped.","The SetOption and SetOptions methods may be used to set one or more property values for the SPDraggable object and\/or the corresponding DOM element of the drag source . Example options\/properties that may be set are shown in Table 2 below. Event handlers for supported drag-and-drop events may be specified using the AddEventListener method shown in Table 1. The events supported by the SPDraggable object may include one or more of the events shown in Table 3 below. Each event handler function may receive an SPDragEvent parameter, which contains the original drag-and-drop event from the browser client , the SPDraggable object corresponding to the drag source  involved in the drag-and-drop event, and an SPDroppable object corresponding to the drop target  involved in the drag-and-drop event (if any), as will be described in more detail below.",{"@attributes":{"id":"p-0032","num":"0031"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"294pt","align":"center"}},"thead":{"row":{"entry":"TABLE 2"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Options for SPDraggable object"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Name","Type","Default","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}},{"entry":["avoidClass","Boolean","true","Whether to avoid adding the \u2018SPDraggable\u2019 class when"]},{"entry":[{},{},{},"create the SPDraggable. Can be helpful for performance."]},{"entry":["containment","element,","false","Not Implemented yet. Constrains dragging to within the"]},{"entry":[{},"string",{},"bounds of the specified element. Possible value: \u201cparent\u201d,"]},{"entry":[{},{},{},"\u201cdocument\u201d, \u201cwindow\u201d"]},{"entry":["cursor","String","\u2018auto\u2019","The CSS cursor during the drag."]},{"entry":["cursorAt","Object","false","Sets the offset of the dragging helper relative to the mouse"]},{"entry":[{},{},{},"cursor. {top, left, right, bottom}"]},{"entry":["delay","Integer","0","Time in milliseconds after mousedown until dragging should"]},{"entry":[{},{},{},"start."]},{"entry":["distance","Integer","1","Distance in pixels after mounsedown the mouse must move"]},{"entry":[{},{},{},"before dragging should start."]},{"entry":["dragImage","String,","\u2018original\u2019","Allows for a helper element to be used for dragging display."]},{"entry":[{},"Function",{},"Possible values: \u2018original\u2019, \u2018clone\u2019, Function. If a function is"]},{"entry":[{},{},{},"specified, it must return a DOMElement."]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}}]}}},{"@attributes":{"id":"p-0033","num":"0032"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 3"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Events supported by SPDraggable object"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"105pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Event Name","Description"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"spDragStart","When the drag start"]},{"entry":[{},"spDrag","While dragging"]},{"entry":[{},"spDragEnd","When the drag ended."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}]}}},"The drag-and-drop library  may further define a SPDroppable object, which is also based on a DOM element. The script code in the drag-and-drop webpage  may create a SPDroppable object from the DOM element corresponding to each drop target  in the webpage. Once the SPDroppable object is created, the script code may call the methods of the object to specify various options and parameters and\/or to facilitate drag-and-drop operations for the corresponding drop target . The SPDroppable object may be defined with one or more of the methods shown in Table 4 below.",{"@attributes":{"id":"p-0035","num":"0034"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"294pt","align":"center"}},"thead":{"row":{"entry":"TABLE 4"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Methods of SPDroppable object"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"133pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Name","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["GetElement( )","Returns the DOM element for this object."]},{"entry":["GetLinkKeys( )","Returns an array of LinkKeys for this object"]},{"entry":["AddLinkKey(\/*@type(String)*\/ linkKey)","Add a LinkKey"]},{"entry":["RemoveLinkKey(\/*@type(String)*\/linkKey)","Remove a LinkKey"]},{"entry":["GetOption(\/*@type(String)*\/ optionName)","Returns the value for an option"]},{"entry":["SetOption(\/*@type(String)*\/optionName,","Set an Option"]},{"entry":"\/*@dynamic*\/value)"},{"entry":["SetOptions(\/*@Array*\/options)","Set options provided in the array"]},{"entry":["Disable( )","Disable this object"]},{"entry":["Enable( )","Enable this object"]},{"entry":["Enabled( )","Returns whether this object is disabled or enabled"]},{"entry":["Remove( )","Remove this object and the droppable capability from"]},{"entry":[{},"the DOM element"]},{"entry":["AddEventListener(\/*@type(String)*\/","Add an event listener. The eventType have to be one"]},{"entry":["eventType, \/*@function*\/listenerFunc)","of the supported events."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"The AddLinkKey method may be used to assign one or more link keys to the SPDroppable object corresponding to the drop target . As discussed above, drag sources  and drop targets  assigned the same link key value are grouped together in a corresponding group . As in the SPDraggable object, the SetOption and SetOptions methods may be used to set one or more property values for the SPDroppable object and\/or the corresponding DOM element of the drop target . Example options\/properties that may be set are shown in Table 5 below. Event handlers for supported drag-and-drop events may be specified using the AddEventListener method shown in Table 4. The events supported by the SPDroppable object may include one or more of the events shown in Table 6 below. Each event handler function may receive a SPDragEvent parameter, as will be described in more detail below.",{"@attributes":{"id":"p-0037","num":"0036"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"280pt","align":"center"}},"thead":{"row":{"entry":"TABLE 5"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Options for SPDroppable object"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Name","Type","Default","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}},{"entry":["activeClass","string","false","If specified, the class will be added to the droppable while"]},{"entry":[{},{},{},"an associated SPDraggable is being dragged"]},{"entry":["avoidClass","Boolean","false","Whether to avoid adding the \u2018ms-droppable\u2019 class when"]},{"entry":[{},{},{},"create the droppable. Can be helpful for performance."]},{"entry":["bubble","boolean","false","If true, will continue event propagation on nested"]},{"entry":[{},{},{},"Droppables"]},{"entry":["hoverClass","String","false","If specified, the class will be added to the droppable while"]},{"entry":[{},{},{},"an associated SPDroppable is being hovered."]},{"entry":["scope","String","\u2018default\u2019","Used to group sets of draggable and droppable items, in"]},{"entry":[{},{},{},"addition to droppable's accept option. A draggable with the"]},{"entry":[{},{},{},"same scope value as a droppable will be accepted."]},{"entry":["tolerance","String","\u2018intersect\u2019","Specifies which mode to use for testing whether a"]},{"entry":[{},{},{},"draggable is \u2018over\u2019 a droppable. Possible values: \u2018fit\u2019,"]},{"entry":[{},{},{},"\u2018intersect\u2019, \u2018pointer\u2019, \u2018touch\u2019."]},{"entry":[{},{},{},"fit: draggable overlaps the droppable entirely"]},{"entry":[{},{},{},"intersect: draggable overlaps the droppable at"]},{"entry":[{},{},{},"least 50%"]},{"entry":[{},{},{},"pointer: mouse pointer overlaps the droppable"]},{"entry":[{},{},{},"touch: draggable overlaps the droppable any"]},{"entry":[{},{},{},"amount"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}}]}}},{"@attributes":{"id":"p-0038","num":"0037"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 6"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Events supported by SPDroppable object"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Event Name","Description"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"spDragEnter","When the cursor enters the droppable element"]},{"entry":[{},"spDragOver","While dragging over the droppable element"]},{"entry":[{},"spDragLeave","When leaving the droppable element"]},{"entry":[{},"spDrop","When the Drop happens."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}]}}},"The drag-and-drop library  may also contain APIs that allows the script code in the drag-and-drop webpage  to create SPDraggable and\/or a SPDroppable object for a DOM element, retrieve an existing SPDraggable or SPDroppable object for a DOM element, enable\/disable drag-and-drop operations, and the like. These APIs may be embodied in a SPDragDropManager object defined by the drag-and-drop library . The methods of the SPDragDropManager object may be defined as shown in Table 7 below.",{"@attributes":{"id":"p-0040","num":"0039"},"tables":{"@attributes":{"id":"TABLE-US-00007","num":"00007"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 7"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Methods of SPDragDropManager object"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"112pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Name","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["InitDraggable(element, [linkKeys],","Creates and initialize a SPDraggable"]},{"entry":["[options], [eventHandlers])","object"]},{"entry":["InitDroppable(element, [linkKeys],","Creates and initialize a SPDroppable"]},{"entry":["[options], [eventHandlers])","object"]},{"entry":["GetDraggable(element)","Get an existing SPDraggable object"]},{"entry":["GetDroppable(element)","Get an existing SPDroppable object"]},{"entry":["Disable( )","Disable all drag drop operation"]},{"entry":["Enable( )","Enable all drag drop operation"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"The InitDraggable and InitDroppable methods specify the DOM element for the drag source  or drop target , respectively, along with the link keys for grouping the drag source  or drop target  into a group . These methods may also allow specification of option\/property values for the elements and their behavior during drag-and-drop operations. The drag-and-drop library  may properly bind events, set CSS classes, store the specified option values, and return the corresponding SPDraggable or SPDroppable object when these methods are called. The GetDraggable and GetDroppable methods return an existing SPDraggable or SPDroppable object for the specified DOM element, if it exists. The Enable and Disable methods may enable\/disable all drag-and-drop operations in the drag-and-drop UI .","As described above, each event handler function defined for an SPDraggable and SPDroppable object corresponding to a drag source  and drop targets  in the drag-and-drop UI  may receive an SPDragEvent object as a parameter, which contains the original drag-and-drop event from the browser client , the SPDraggable object corresponding to the drag source  involved in the drag-and-drop event, and the SPDroppable object corresponding to the drop target  involved in the drag-and-drop event. The properties and methods of the SPDragEvent object are provided below in Table 8.",{"@attributes":{"id":"p-0043","num":"0042"},"tables":{"@attributes":{"id":"TABLE-US-00008","num":"00008"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 8"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Properties and Methods of SPDragEvent object"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"112pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Member","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Properties",{}]},{"entry":["rawEvent","The browser event"]},{"entry":["Draggable","The SPDraggable object for this"]},{"entry":[{},"event"]},{"entry":["Droppable","The SPDroppable object for this"]},{"entry":[{},"event."]},{"entry":"Methods"},{"entry":["SetData(\/*@type(String)*\/","Set the data object for the event"]},{"entry":"dataKey, \/*@dynamic*\/data)"},{"entry":["GetData(\/*@type(String)*\/","Retrieve the data object."]},{"entry":"dataKey)"},{"entry":["ClearData(\/*@String, @optional*\/","Clear the data for the given dataKey"]},{"entry":"dataKey)"},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"According to further embodiments, the drag-and-drop library  takes care of cross-browser support of drag-and-drop operations in the drag-and-drop webpage . This may make enabling drag-and-drop operations in the webpage very straightforward for developers. For example, to enable drag-and-drop operations between the drag sources A-C and drop targets A-B in the drag-and-drop UI  shown in , script code may be added to the drag-and-drop webpage  to perform the following tasks. It will be appreciated that while the following script code examples are provided in JavaScript, other script languages may be used to enable drag-and-drop in a webpage through the drag-and-drop library , including ECMAScript, JScript, VBScript, and the like.","The first task may be to create custom string values to be used as link keys for the two groups A and B. As described above, the link key(s) assigned to SPDraggable and SPDroppable objects facilitate the grouping of the corresponding drag sources  and drop targets  into groups . The link keys may also be associated with the user-defined data structure  transferred from the drag source to the drop target in a drag-and-drop operation, as will be described in more detail below. The two link key values for the two groups A and B may be created as follows:\n\n","Next, a SPDraggable object may be created for each drag source  in the drag-and-drop UI. For example, an SPDraggable object may be created from the DOM element for the drag source B belonging to both the first group A and the second group B with the following script code:",{"@attributes":{"id":"p-0047","num":"0048"},"tables":{"@attributes":{"id":"TABLE-US-00009","num":"00009"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"var linkKeys = { };"},{"entry":"linkKeys[g_dndSquareKey] = \u201c\u201d;"},{"entry":"linkKeys[g_dndCircleKey] = \u201c\u201d;"},{"entry":"var \/*@type(SPDraggable)*\/draggable2 ="}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"SPDragDropManager.InitDraggable(DragSource2Element, linkKeys);"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}},"br":{},"b":"204"},"In addition, event handlers for the SPDraggable objects may be specified, such as:\n\n",{"@attributes":{"id":"p-0049","num":"0051"},"tables":{"@attributes":{"id":"TABLE-US-00010","num":"00010"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"ShapeDragData {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/*@type(Integer)*\/itemId ,"]},{"entry":[{},"\/*@type(String)*\/shapeType"]},{"entry":[{},"\/*@type(String)*\/shapeData,"]},{"entry":[{},"\/*@type(Boolean)*\/replace,"]},{"entry":[{},"\/*@type(String)*\/statusText"]},{"entry":[{},"..."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"};"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"The individual elements of the user-defined data structure  may be populated in the \u201cspDragStart\u201d event handler function for the drag source B and then set as the data structure for the corresponding link key(s) in the SPDraggable object:",{"@attributes":{"id":"p-0051","num":"0053"},"tables":{"@attributes":{"id":"TABLE-US-00011","num":"00011"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"function dndSourceItemDragStartHandler (\/*@dynamic*\/event)"},{"entry":"{"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"var \/*@ShapeDragData*\/dragData];"]},{"entry":[{},"\/\/ populate dragData with data corresponding to drag source 206B ..."]},{"entry":[{},"event.SetData(g_SquareKey, dragData);"]},{"entry":[{},"event.SetData(g_CircleKey, dragData);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}},"br":{},"b":["214","212","204","206","206","204"]},"In addition, a SPDroppable object may be created for each drop target  in the drag-and-drop UI. For example, an SPDroppable object may be created from the DOM element for the drop target A belonging to the first group A with the following script code:",{"@attributes":{"id":"p-0053","num":"0055"},"tables":{"@attributes":{"id":"TABLE-US-00012","num":"00012"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"var \/*@type(SPDroppable)*\/droppable1 ="]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"SPDragDropManager.InitDroppable(DropTarget1Element,"]},{"entry":[{},"g_dndSquareKey);"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}},"br":{},"b":["206","200","204"]},"In addition, event handlers for the SPDraggable objects may be specified, such as:\n\n",{"@attributes":{"id":"p-0055","num":"0060"},"tables":{"@attributes":{"id":"TABLE-US-00013","num":"00013"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"function dndSquareItemDropHandler (\/*@dynamic*\/event)"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"var \/*@dynamic*\/dragData = event.GetData(g_SquareKey);"]},{"entry":[{},"\/\/ perform application operation with dragData and context"]},{"entry":[{},"information for square drop target"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}},"br":{},"b":["206","212","204","214"]},"Referring now to , additional details will be provided regarding the embodiments presented herein. It should be appreciated that the logical operations described with respect to  are implemented (1) as a sequence of computer implemented acts or program modules running on a computing system and\/or (2) as interconnected machine logic circuits or circuit modules within the computing system. The implementation is a matter of choice dependent on the performance and other requirements of the computing system. Accordingly, the logical operations described herein are referred to variously as operations, structural devices, acts, or modules. These operations, structural devices, acts, and modules may be implemented in software, in firmware, in special purpose digital logic, and any combination thereof. It should also be appreciated that more or fewer operations may be performed than shown in the figures and described herein. The operations may also be performed in a different order than described.",{"@attributes":{"id":"p-0057","num":"0062"},"figref":"FIG. 3","b":["300","128","300","128","114","126","200","128","126","300","102"]},"The routine  begins at operation , where the drag-and-drop library  creates a SPDraggable object corresponding to a drag source  in the drag-and-drop webpage . This may be performed in response to a call to the InitDraggable method of the SPDragDropManager object by the script code in the drag-and-drop webpage , for example. The call to the to the InitDraggable method may specify the DOM element for the drag source  in the drag-and-drop webpage , as shown in the example script code described above in regard to . In addition, various options\/properties and event handler assignments may be specified for the SPDraggable object in the InitDraggable method call, or the SetOption, SetOptions, and\/or AddEventListener methods of the SPDraggable object may be called from the script code after the object has been created to set the options and event handler assignments for the SPDraggable object and\/or the corresponding DOM element of the drag source .","From operation , the routine  proceeds to operation , where the drag-and-drop library  assigns one or more link keys to the SPDraggable object corresponding to the drag source . As described above, the link key(s) assigned to SPDraggable and SPDroppable objects facilitate the grouping of the corresponding drag sources  and drop targets  into groups . The link keys may also be associated with the user-defined data structure  transferred from the drag source  to the drop target  in a drag-and-drop operation. As further shown in the example script code, the values for the link keys to be assigned to the SPDraggable object corresponding to the drag source  may be specified in the InitDraggable method that created the object. Alternatively or additionally, the AddLinkKey method of the SPDraggable object may be utilized to specify initial or additional link key values to be assigned to the object.","The routine  proceeds from operation  to operation  where the drag-and-drop library  further assign one or more user-defined data structures  populated with data regarding the drag source  to the corresponding SPDraggable object. As described above, the user-defined data structure  may be later retrieved at the drop event for use in the application-related operation associated with the drag-and-drop operation. According to one embodiment, the individual elements of the user-defined data structure  may be populated in the \u201cDrag Start\u201d event handler function for the SPDraggable object, then the data structure may be assigned to the SPDraggable object through the SetData method of the SPDragEvent object passed to the event handler function, as shown above in the example script code.","In another embodiment, the SetData method of the SPDraggable object may be utilized to assign the populated user-defined data structure  to the object. As further shown above in regard to , each user-defined data structure  assigned to the SPDraggable object may be further associated with a link key assigned to the object. The link key value associated with each user-defined data structure  may be specified in the SetData method calls assigning the data structure to the SPDraggable object, for example. It will be appreciated that different user-defined data structures  may be defined for each of the different link keys assigned to the SPDraggable object, or the same user-defined data structure may be associated with multiple link keys for the object.","From operation , the routine  proceeds to operation , where the drag-and-drop library  creates a SPDroppable object corresponding to a drop target  in the drag-and-drop webpage . This may be performed in response to a call to the InitDroppable method of the SPDragDropManager by the script code in the drag-and-drop webpage , for example. The call to the to the InitDraggable method may specify the DOM element for the drop target  in the drag-and-drop webpage , as shown in the example script code described above in regard to . In addition, various options\/properties and event handler assignments may be specified for the SPDroppable object in the InitDroppable method call, or the SetOption, SetOptions, and\/or AddEventListener methods of the SPDroppable object may be called after the object has been created to set the options and event handler assignments for the SPDroppable object and\/or the corresponding DOM element of the drop target .","The routine  proceeds from operation  to operation , where the drag-and-drop library  assigns one or more link keys to the SPDroppable object corresponding to the drop target . As further shown in the example script code, the values for the link keys to be assigned to the SPDroppable object corresponding to the drop target  may be specified in the InitDraggable method that created the object, in the AddLinkKey method of the SPDroppable object, or through another API provided by the drag-and-drop library .","From operation , the routine  proceeds to operation , where the drag-and-drop library  intercepts an event from the browser client  indicating that the drag source  and\/or the drop target  have been involved in a drag-and-drop operation. For example, when the SPDraggable and SPDroppable objects are created, the drag-and-drop library  may hook the browser events for the corresponding drag source  and drop target  DOM elements. If the drag source  is dropped on the drop target  through the drag-and-drop UI , the drag-and-drop library  will intercept the event generated by the browser client . The drag-and-drop library  may then evaluate the DOM elements implicated in the event as well as the properties, options, and event handlers defined for the corresponding SPDraggable and SPDroppable objects to determine how the event should be handled.","The routine  proceeds from operation  to operation , where the drag-and-drop library  determines if the SPDraggable and SPDroppable objects corresponding to the drag source  and the drop target , respectively, in the drag-and-drop operation have any assigned link keys in common. As described above, drag sources  and drop targets  assigned a common link key value are grouped together in a corresponding group . The drag-and-drop library  utilizes the groupings to determine if a drag-and-drop operation is supported between pairs of drag sources  and drop targets . If the SPDraggable and SPDroppable objects corresponding to the drag source  and the drop target  don't have a link key in common, the drag-and-drop library ignores the browser event and the routine  ends.","However, if the SPDraggable and SPDroppable objects corresponding to the drag source  and the drop target  do have a link key in common, the routine  proceeds from operation  to operation , where the drag-and-drop library  generates an event associated with the SPDroppable object to facilitate the application-related operation associated with the drag-and-drop operation. For example, as further shown in the sample script code, the drag-and-drop library  may call the \u201cDrop\u201d event handler function in the script code of the drag-and-drop web page  assigned to the SPDroppable object, passing a SPDragEvent object related to the event. The \u201cDrop\u201d event handler function may be where the application-related operation associated with the drag-and-drop operation is executed.","In addition, the drag-and-drop library  may make the user-defined data structure  assigned to the SPDraggable object corresponding to the drag source  available to the \u201cDrop\u201d event handler function in order to facilitate the application-related operation. For example, the \u201cDrop\u201d event handler function may utilize the GetData method of the SPDragEvent object or the SPDraggable object in order to retrieve the user-defined data structure , specifying the common link key value between the SPDraggable and SPDroppable objects associated with the user-defined data structure . From operation , the routine  ends.",{"@attributes":{"id":"p-0068","num":"0073"},"figref":["FIG. 4","FIG. 4"],"b":["400","102"]},"The computer architecture shown in  includes one or more central processing units (\u201cCPUs\u201d) . The CPUs  may be standard processors that perform the arithmetic and logical operations necessary for the operation of the computer . The CPUs  perform the necessary operations by transitioning from one discrete, physical state to the next through the manipulation of switching elements that differentiate between and change these states. Switching elements may generally include electronic circuits that maintain one of two binary states, such as flip-flops, and electronic circuits that provide an output state based on the logical combination of the states of one or more other switching elements, such as logic gates. These basic switching elements may be combined to create more complex logic circuits, including registers, adders-subtractors, arithmetic logic units, floating-point units, and other logic elements.","The computer architecture further includes a system memory , including a random access memory (\u201cRAM\u201d)  and a read-only memory  (\u201cROM\u201d), and a system bus  that couples the memory to the CPUs . A basic input\/output system containing the basic routines that help to transfer information between elements within the computer , such as during startup, is stored in the ROM . The computer  also includes a mass storage device  for storing an operating system , application programs, and other program modules, which are described in greater detail herein.","The mass storage device  is connected to the CPUs  through a mass storage controller (not shown) connected to the bus . The mass storage device  provides non-volatile storage for the computer . The computer  may store information on the mass storage device  by transforming the physical state of the device to reflect the information being stored. The specific transformation of physical state may depend on various factors, in different implementations of this description. Examples of such factors may include, but are not limited to, the technology used to implement the mass storage device, whether the mass storage device is characterized as primary or secondary storage, and the like.","For example, the computer  may store information to the mass storage device  by issuing instructions to the mass storage controller to alter the magnetic characteristics of a particular location within a magnetic disk drive, the reflective or refractive characteristics of a particular location in an optical storage device, or the electrical characteristics of a particular capacitor, transistor, or other discrete component in a solid-state storage device. Other transformations of physical media are possible without departing from the scope and spirit of the present description. The computer  may further read information from the mass storage device  by detecting the physical states or characteristics of one or more particular locations within the mass storage device.","As mentioned briefly above, a number of program modules and data files may be stored in the mass storage device  and RAM  of the computer , including an operating system  suitable for controlling the operation of a computer. The mass storage device  and RAM  may also store one or more program modules. In particular, the mass storage device  and the RAM  may store the browser client  and\/or the drag-and-drop library , both of which were described in detail above in regard to . The mass storage device  and the RAM  may also store other types of program modules or data.","In addition to the mass storage device  described above, the computer  may have access to other computer-readable media to store and retrieve information, such as program modules, data structures, or other data. It should be appreciated by those skilled in the art that computer-readable media may be any available media that can be accessed by the computer , including computer-readable storage media and communications media. Communications media includes transitory signals. Computer-readable storage media includes volatile and non-volatile, removable and non-removable media implemented in any method or technology for the storage of information, such as computer-readable instructions, data structures, program modules, or other data. For example, computer-readable storage media includes, but is not limited to, RAM, ROM, EPROM, EEPROM, flash memory or other solid state memory technology, CD-ROM, digital versatile disks (DVD), HD-DVD, BLU-RAY, or other optical storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other medium that can be used to store the desired information and that can be accessed by the computer .","The computer-readable storage medium may be encoded with computer-executable instructions that, when loaded into the computer , may transform the computer system from a general-purpose computing system into a special-purpose computer capable of implementing the embodiments described herein. The computer-executable instructions may be encoded on the computer-readable storage medium by altering the electrical, optical, magnetic, or other physical characteristics of particular locations within the media. These computer-executable instructions transform the computer  by specifying how the CPUs  transition between states, as described above. According to one embodiment, the computer  may have access to computer-readable storage media storing computer-executable instructions that, when executed by the computer, perform the routine  for providing drag-and-drop functionality in a webpage using the drag-and-drop library , described above in regard to .","According to various embodiments, the computer  may operate in a networked environment using logical connections to remote computing devices and computer systems through one or more networks , such as a LAN, a WAN, the Internet, or a network of any topology known in the art. The computer  may connect to the network  through a network interface unit  connected to the bus . It should be appreciated that the network interface unit  may also be utilized to connect to other types of networks and remote computer systems.","The computer  may also include an input\/output controller  for receiving and processing input from touch-sensitive screen  and\/or one or more traditional input devices , including a keyboard, a mouse, a touchpad, an electronic stylus, or other type of input device. Similarly, the input\/output controller  may provide output to a display device , such as a computer monitor, a flat-panel display, a digital projector, a printer, a plotter, or other type of output device. It will be appreciated that the computer  may not include all of the components shown in , may include other components that are not explicitly shown in , or may utilize an architecture completely different than that shown in .","Based on the foregoing, it should be appreciated that technologies for implementing a cross-browser drag-and-drop library are provided herein. Although the subject matter presented herein has been described in language specific to computer structural features, methodological acts, and computer-readable storage media, it is to be understood that the invention defined in the appended claims is not necessarily limited to the specific features, acts, or media described herein. Rather, the specific features, acts, and mediums are disclosed as example forms of implementing the claims.","The subject matter described above is provided by way of illustration only and should not be construed as limiting. Various modifications and changes may be made to the subject matter described herein without following the example embodiments and applications illustrated and described, and without departing from the true spirit and scope of the present invention, which is set forth in the following claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 4"}]},"DETDESC":[{},{}]}
