---
title: Mobile, PC, and web enhanced telecommunications environment
abstract: Methods and systems for providing enhanced telecommunications services are provided. Example embodiments provide a Enhanced Telecommunications System ETS, which provides less expensive calling and other services by initiating telephone requests using data request packets. In one embodiment, the ETS comprises a client communications device with client code, an ETS portal, an API server, one or more PABX servers, and various billing, payment, and accounting systems. Other systems, such as quality assurance and logging systems may also be available. These components cooperate to provide various telecommunications services. This abstract is provided to comply with rules requiring an abstract, and it is submitted with the intention that it will not be used to interpret or limit the scope or meaning of the claims.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08520823&OS=08520823&RS=08520823
owner: YaaZZ AS
number: 08520823
owner_city: Billingstad
owner_country: NO
publication_date: 20090630
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND","DETAILED DESCRIPTION","Example YaaZZ Communicator Mobile Client","Example YaaZZ Communicator PC Client","Example YaaZZ Communicator Web Client"],"p":["The present disclosure relates to methods and systems for performing telecommunications activities and, in particular, to methods and systems for using Internet capabilities in conjunction with a standard telecommunication network to offer highly accessible mobile, pc, and web telephony.","Mobile telecommunications devices, such as cellular telephones, have become increasingly popular worldwide. However, in typical subscription programs, user's cellular plans are associated with a particular one or set of geographic regions. Pricing is determined under such plans typically based upon whether the caller is calling with the designated \u201cplan\u201d region or outside. Typically rates for calls placed to locations outside of the plan region cost substantially more than rates \u201cin plan.\u201d In addition, rates for calls placed internationally are similarly determined and for some may even be cost prohibitive.","Embodiments described herein provide enhanced computer- and network-based methods and systems for offering enhanced telecommunications services. Example embodiments provide a Enhanced Telecomm System (\u201cETS\u201d), which enables, among other functions, mobile users to make less expensive phone calls by taking advantage of the lower rates typically available from bulk rate local telephone exchange systems. The ETS essentially provides its own exchange server, to which all ETS clients (PC phones, mobile phones, etc.) request certain services, for example, make a call, call from this number, make a conference call, etc. the ETS exchange server is then responsible for originating the respective phone call locally on behalf of the client user and then connecting the client user to the terminating phone number(s). Thus, the ETS is very beneficial for international customers (subscribers) who would otherwise incur very steep roaming charges when placing international calls. However, that the techniques of the ETS may be useful to create a variety of other telephony products.",{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 1","b":["100","102","102","102","102","110","111","112","103","104"],"i":["a","b","c"]},"An example embodiment of one such ETS, called \u201cYaaZZ\u201d is described in detail as follows. The components of YaaZZ and the various 3party systems that may be used to implement some of the them are illustrated in . Other components and other 3party services, systems, architectures, etc. may be substituted be used in place or in addition to the ones illustrated yet still achieve the functionality desired. The YaaZZ system has been developed for providing international as well as local telecommunications services.","As shown in , the components of YaaZZ  as an example ETS work together to provide low cost telecommunications to customers, in both prepaid and postpaid circumstances. Using the Internet, three different clients (communicators)  are provided (mobile , PC , and the web ) enabling users to make long distance phone calls without incurring long distance roaming charges. In summary, the communicator  initiates calls and other telecommunications services through a data request to the API server , which uses internal components, such as the PABX server , to cause calls (and other services) to occur at a bulk rate previously negotiated between and other carriers . In addition, advanced services and user interfaces to the same, such as extended conference call capabilities, are made available through the above architecture.","The main components of an example ETS such as YaaZZ  include:\n\n",{"@attributes":{"id":"p-0031","num":"0036"},"figref":"FIG. 2","b":["201","202","203","204","205","206","207","207","208","209","210"],"i":["a ","a ","b "],"sup":"th"},"Although the techniques of the Enhanced Telephony System and YaaZZ are generally applicable to any type of phone call and telephony messaging system it is possible to apply these techniques to other areas of telephony. Also, although the examples described herein often refer to a mobile call and the Internet, the techniques described herein can also be used by computer systems and other wide area networks other than the Internet, such as closed networking systems. In addition, the concepts and techniques described are applicable to other types of telephone devices even those not yet invented. Hence, the concepts and techniques described are applicable to other telephony and networking architectures.","Also, although certain terms are used primarily herein, other terms could be used interchangeably to yield equivalent embodiments and examples. In addition, terms may have alternate spellings which may or may not be explicitly mentioned, and all such variations of terms are intended to be included.","In the following description, numerous specific details are set forth, such as data formats and code sequences, etc., in order to provide a thorough understanding of the described techniques. The embodiments described also can be practiced without some of the specific details described herein, or with other specific details, such as changes with respect to the ordering of the code flow, different code flows, etc. Thus, the scope of the techniques and\/or functions described are not limited by the particular order, selection, or decomposition of steps described with reference to any particular routine.",{"@attributes":{"id":"p-0035","num":"0040"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Abbreviations"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["SOAP","Simple Object Access Protocol"]},{"entry":["PABX","Private Automatic Branch eXchange (PABX) "]},{"entry":[{},"is a telephone exchange"]},{"entry":["ASTERISK","A open source\/free software "]},{"entry":[{},"implementation of a telephone PABX"]},{"entry":["IVR","Interactive Voice Recognition - Technology "]},{"entry":[{},"that allows a computer to detect"]},{"entry":[{},"voice and touch tones using a normal phone call"]},{"entry":["ACD","Manages incoming calls and handles them "]},{"entry":[{},"based on the number called and"]},{"entry":[{},"an associated database of handling instructions"]},{"entry":["VOIP","Voice over Internet Protocol (VoIP) is a "]},{"entry":[{},"protocol optimized for the transmission of voice"]},{"entry":["SIP","Session Initiation Protocol (VoIP)"]},{"entry":["CDR","Call Data Record. Computer record "]},{"entry":[{},"produced by a telephone exchange"]},{"entry":[{},"containing details of a call that passed through"]},{"entry":["Postpaid","Postpaid refers to services where you pay after usage"]},{"entry":["Prepaid","Prepaid refers to services paid for in advance"]},{"entry":["SMS","Protocol for allowing the interchange of "]},{"entry":[{},"short messages between mobile telephone devices"]},{"entry":["MYSQL","Open source database management system"]},{"entry":["CTI","Technology that allows interactions on a "]},{"entry":[{},"telephone and a computer to be integrated or coordinated"]},{"entry":["AGI","Interface with which the Asterisk (PABX) "]},{"entry":[{},"communicates with user-created scripts"]},{"entry":["SYSLOGD","UNIX application used for security auditing"]},{"entry":["DIAL","List of expected number and pattern of "]},{"entry":["PLAN","digits for a telephone number"]},{"entry":["CHANNEL","Connection which brings in a call to the Asterisk PABX"]},{"entry":["NAGIOS","Network monitoring application software"]},{"entry":["TDM","Time Division Multiplexing"]},{"entry":["NTP","Network Time Protocol"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"Various telephony functions are made available through embodiments of an ETS.  summarizes the main use cases made available through the various communicators, for example, through mobile, PC, and web communicators. In a current implementation of the YaaZZ embodiment, not all of the functions are available using each client (YaaZZ Communicator). However, it is to be understood that these interfaces may be further developed over time to offer equivalent functionality. A short description of each use case (indicated as an oval in ) using a mobile YaaZZ Communicator follows. Erichsson capabilities are used to illustrate SMS function, although other equivalent providers could be substituted to provide SMS capability. Where possible, the descriptions refer to the detail flow charts that describe each function.  illustrate examples of a graphical user interface provided by a YaaZZ Mobile Communicator to provide some of these functions.  show examples of a graphical interface as provided on a YaaZZ PC Communicator to provide several of these functions.  show examples of a graphical interface as provided on a web version of the communicator to provide several of these functions.\n\n","In addition to the conferencing capabilities demonstrated in , in some embodiments, other conferencing functionality (not shown in the flow diagrams) is also provided. The following functions are provided to additionally enhance conference call capability on potentially all of the ETS Communicators, including mobile, PC, and web communicators.\n\n","In one of the example ETS embodiments of YaaZZ, the mobile client is distributed as a software application that can be downloaded from the YaaZZ portal and used on a mobile phone.  show an example user interface of an example embodiment of the YaaZZ mobile client of an Enhanced Telecomm System.","YaaZZ has currently developed several different versions: 1) a J2ME-MIDP Java application, which most cellular phones support, and 2) a C# application for Windows CE mobiles such as personal information managers (PIMS). A specialized version is planned to be available for (Phone\/(Pod Touch. Other specialized platforms, such as Blackberry devices are also supported.","The client uses regular HTTPS protocol to communicate with the YaaZZ API Server. On some cellular phones this means that a device can initiate this communication via WLAN, Bluetooth, Direct Cable, GPRS, EDGE, WiFi, GSM, CDMA, and 3G, depending on the phone's available technologies and J2ME implementation.","In one of the example ETS embodiments of YaaZZ, the PC client is distributed as a software application that can be downloaded from the YaaZZ portal and used on a personal computers, for example an Apple MAC or a Window's based PC.","This client has been developed in Java and hence is supported in all systems that have the latest compatible Java Runtime Environment. In an example deployment, the Linux version can come prepackaged for the Debian, Ubuntu and Mandriva operating systems, leaving room for more operating systems.","This client uses secure HTTPS communication with the YaaZZ API Server. The client is shipped with a public root and private client certificate for communication with the YaaZZ Server. It can use any available Internet connection.","The YaaZZ Communicator web client is available to a user through the web interface of the YaaZZ Portal (by logging in with username and password). Example screen displays are shown in . In other embodiments, the Web client screen displays are programmed to look like the other YaaZZ Communicators (PC and Mobile), for example, those shown in  and A-B.","An example embodiment of this client is implemented on the YaaZZ Portal (the web interface of YaaZZ), and is coded in Python inside the LimeCMS environment by Innoventure AS. This client will work in all normal web browsers and client side applications capable of XHTML and JavaScript. Other implementations are possible.","The example Web Communicator uses an HTTPS connection to the API Server on the local network. This means that this is a protected API only available behind the firewall of the ETS, where both the portal servers and API servers is located.","Example Telephony Functions","As described in overview with reference to , example embodiments of an ETS such as YaaZZ may be used to achieve a variety of telephony functions.  described an overview of how normal telephone calls are accomplished by the components of an ETS, using YaaZZ as an example.  described the basic types of telephony services that are offered through ETS communicator clients such as the mobile, PC, and web communicator client systems of YaaZZ. See, e.g., , A-I, and A-E to get a more detailed description of the functionality. Note that example detailed descriptions are presented for the postpaid solution. Similar diagrams may be constructed for the prepaid solution.",{"@attributes":{"id":"p-0048","num":"0075"},"figref":["FIG. 7","FIG. 7"],"b":["701","702","703","704","705","706","707"]},{"@attributes":{"id":"p-0049","num":"0076"},"figref":"FIG. 8","ul":{"@attributes":{"id":"ul0013","list-style":"none"},"li":{"@attributes":{"id":"ul0013-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0014","list-style":"none"},"li":["an isolated local accounting-database consisting of a user reference, and balance amount;","language specific warning messages played back when reaching low balance; later beeps when only a few seconds left;","automatic calculation of remaining time when user has several calls up at the same time, or has established a conference call;","automatic update of remaining time when balance is updated in the portal during calls."]}}}},"In the overview of call flow shown in , after the user initiates the call (block ) the ETS checks to see if the user is active (block ) and, if not, aborts the call (block ). Other, the ETS estimates the cost (block ) and checks to see if the user has enough balance (block ). If not, the call is aborted (block ). Otherwise, the call is established (block ), the maximum time the user can talk based upon the balance amount is set (block ), and the user talks until done. When the call is ended (block ), the Call Data Record (CDR) is updated (block ) and the user's balance is also immediately updated (block ). This helps in case the user has engaged in multiple calls at the same time.",{"@attributes":{"id":"p-0051","num":"0082"},"figref":["FIG. 9","FIG. 9"]},"1. When setting up a call, the user first originates the call using one of the three main YaaZZ Communicators: Mobile client, PC client or Web client. All three versions of the YaaZZ Communicator use the Internet as the medium for establishing a call, and all communication against the API server is typically through HTTPS. (When HTTPS is not available, HTTP with other URL validation schemes may be used.)","2. The server then talks to the billing real-time API, querying for the status of the calling user. If the user has neglected to pay his bills or the user has been forcibly disabled, the call will be dismissed.","3. The server then talks to the billing real-time API querying for the cost of a two legged call, between originator and destination. In the special case of a conference call, it will query the price for each leg of the conference call, retrieving both the setup fee, and per minute cost.","4. The API server then connects to the YaaZZ version of the Asterisk PABX (the YaaZZ PABX Server) using the Asterisk Manager API, to establish a call to originator (calling from number) and destination (calling to number). The PABX Server performs a call back to the \u201cfrom-number,\u201d and when this call is answered, the PABX Server will start calling the to-number. In this way, customers pay YaaZZ price on the call (each leg being initiated by the PABX Server) instead of the calling price of the customer's current mobile subscription (which may include high priced roaming charges).","5. The YaaZZ PABX Server will perform preliminary CDR alterations to identify the current user, and will save the current call pricing information.","6. The YaaZZ PBX Server will connect to the telecomm carrier (e.g., TATA), for example, via SIP. The carrier will then interconnect the calls over the standard telecommunications network, such as PSTN, GSM, CDMA, etc.","7. When the call is ended either manually by the user, or by the timeout, the YaaZZ PABX Server will save the billing time, save the call's total cost to the CDR, and mark the call as ended.",{"@attributes":{"id":"p-0059","num":"0090"},"figref":["FIG. 10","FIG. 10"]},"1. When setting up a call, the user first originates the call using one of the three main YaaZZ Communicators; Mobile client, PC client or Web client. All three versions of the YaaZZ Communicator use of Internet as medium for establishing a call. All communication against the API server are typically through HTTPS.","2. The server then talks to the billing real-time API, querying for the status of the calling user. If the user has been forcibly deactivated, the call will be dismissed.","3. The server then talks to the billing real-time API querying for the cost of a two legged call, between originator and destination. In the special case of a conference call, it will query the price for each leg of the conference call, retrieving both the setup fee, and per minute cost.","4. The API server then connects to the MySQL server (or whatever server or service is used to manage user\/account data, retrieving the balance of the user from the user-balance database). At this time, the amount of available call minutes is calculated, and the call is dismissed unless the amount of available minutes exceeds a lower limit.","5. The API server then connects to the YaaZZ version of the Asterisk PABX (the YaaZZ PABX Server) using the Asterisk Manager API, to establish a call to originator and destination. The PABX Server performs a call back to the \u201cfrom-number,\u201d and when this call is answered, the PABX Server will start calling the to-number. In this way, customers pay YaaZZ price on the call (each leg being initiated by the PABX Server) instead of the calling price of the customer's current mobile subscription (which may include high priced roaming charges). The YaaZZ PABX Server will perform preliminary CDR alterations to identify the current user, and will save the current call pricing information.","6. The YaaZZ PBX Server will connect to the telecomm carrier (e.g., TATA), for example, via SIP. The carrier will then interconnect the calls over the standard telecommunications network, such as PSTN, GSM, CDMA, etc.","7. A background process in the YaaZZ PABX Server will monitor all ongoing calls, recognizing simultaneous calls from the same user. Using the pricing information saved in the currently live CDR, the process combines the cost and compares the current cost of all the user's current calls against the user's current balance. The user balance is fetched with MySQL and cached with Memcached. The result of the determination will define the maximum duration of the calls. When only 2 minute is left, in one embodiment an audible tone will be played every 10second. When there are 5 seconds left, a 5 second long recorded message will play back before disconnecting the call. This message is meant to tell the user why the message is being disconnected, and will be played in the user's own registered language.","8. When the call is ended either manually by the user, or by the timeout; the YaaZZ PABX Server will save the billing time, save the call's total cost to the CDR, and mark the call as ended, and will also update the user's balance with the withdrawal of the total cost.","Example Computing Environment",{"@attributes":{"id":"p-0068","num":"0099"},"figref":"FIG. 14"},"The computing system  may comprise one or more server and\/or client computing systems and may span distributed locations. In addition, each block shown may represent one or more such blocks as appropriate to a specific embodiment or may be combined with other blocks. Moreover, the various blocks of the ETS  may physically reside on one or more machines, which use standard (e.g., TCP\/IP) or proprietary inter-process communication mechanisms to communicate with each other.","In the embodiment shown, computer system  comprises a computer memory (\u201cmemory\u201d) , a display , one or more Central Processing Units (\u201cCPU\u201d) , Input\/Output devices  (e.g., keyboard, mouse, CRT or LCD display, etc.), other computer-readable media , and one or more network connections . The ETS  is shown residing in memory . In other embodiments, some portion of the contents, some of, or all of the components of the ETS  may be stored on the other computer-readable media  and in some embodiments, transmitted over the other computer-readable media Y. The components of the Enhanced Telecommunications System  preferably execute on one or more CPUs  and manage the telecommunications services as described herein. Other code or programs  and potentially other data repositories, such as data repository , also reside in the memory , and preferably execute on one or more CPUs . Of note, one or more of the components in  may not be present in any specific implementation. For example, some embodiments embedded in other software many not provide means for user input or display.","In a typical embodiment, the ETS  includes one or more PABX Servers , one or more API Servers , one or more billing\/rating engines  and one or more quality assurance components . In at least some embodiments, the billing\/rating engine  is provided external to the ETS and is available, potentially, over one or more networks . Other and\/or different modules may be implemented. In addition, the ETS may interact via a network  with mobile application or client code , one or more client computing systems , and\/or one or more network client code such as one or more web browsers . Also, the ETS data repository  may be provided external to the ETS as well, for example in a accessible over one or more networks .","In an example embodiment, components\/modules of the ETS  are implemented using standard programming techniques. However, a range of programming languages known in the art may be employed for implementing such example embodiments, including representative implementations of various programming language paradigms, including but not limited to, object-oriented (e.g., Java, C++, C#, Smalltalk, etc.), functional (e.g., ML, Lisp, Scheme, etc.), procedural (e.g., C, Pascal, Ada, Modula, etc.), scripting (e.g., Perl, Ruby, Python, JavaScript, VBScript, etc.), declarative (e.g., SQL, Prolog, etc.), etc.","The embodiments described above use well-known or proprietary synchronous or asynchronous client-server computing techniques. However, the various components may be implemented using more monolithic programming techniques as well, for example, as an executable running on a single CPU computer system, or alternately decomposed using a variety of structuring techniques known in the art, including but not limited to, multiprogramming, multithreading, client-server, or peer-to-peer, running on one or more computer systems each having one or more CPUs. Some embodiments are illustrated as executing concurrently and asynchronously and communicating using message passing techniques. Equivalent synchronous embodiments are also supported by an ETS implementation. Also, other steps could be implemented for each flow (use case), and in different orders, and in different routines, yet still achieve the functions of the ETS.","In addition, programming interfaces to the data stored as part of the ETS  (e.g., in the data repositories  and ) can be available by standard means such as through C, C++, C#, and Java APIs, such as application programming interface (API) ; libraries for accessing files, databases, or other data repositories; through scripting languages such as XML; or through Web servers, FTP servers, or other types of servers providing access to stored data. The data repositories  and  may be implemented as one or more database systems, file systems, or any other method known in the art for storing such information, or any combination of the above, including implementation using distributed computing techniques. In addition, they may be implemented as stored procedures, or methods attached to \u201cobjects,\u201d although other techniques are equally effective.","Also the example ETS  may be implemented in a distributed environment comprising multiple, even heterogeneous, computer systems and networks. For example, in one embodiment, the PABX servers , the API servers , and the ETS data repository  are all located in physically different computer systems. In another embodiment, various modules of the ETS  are hosted each on a separate server machine and may be remotely located from the tables which are stored in the data repositories  and . Also, one or more of the modules may themselves be distributed, pooled or otherwise grouped, such as for load balancing, reliability or security reasons. Different configurations and locations of programs and data are contemplated for use with techniques of described herein. A variety of distributed computing techniques are appropriate for implementing the components of the illustrated embodiments in a distributed manner including but not limited to TCP\/IP sockets, RPC, RMI, HTTP, HTTPS, Web Services (XML-RPC, JAX-RPC, SOAP, etc.) etc. Other variations are possible. Also, other functionality could be provided by each component\/module, or existing functionality could be distributed amongst the components\/modules in different ways, yet still achieve the functions of an ETS.","Furthermore, in some embodiments, some or all of the components of the ETS may be implemented or provided in other manners, such as at least partially in firmware and\/or hardware, including, but not limited to one or more application-specific integrated circuits (ASICs), standard integrated circuits, controllers (e.g., by executing appropriate instructions, and including microcontrollers and\/or embedded controllers), field-programmable gate arrays (FPGAs), complex programmable logic devices (CPLDs), etc. Some or all of the system components and\/or data structures may also be stored (e.g., as software instructions or structured data) on a computer-readable medium, such as a hard disk, a memory, a network, or a portable media article to be read by an appropriate drive or via an appropriate connection, including wireless-based and wired\/cable-based mediums. Some or all of the system components and data structures may also be transmitted via generated data signals (e.g., as part of a carrier wave or other analog or digital propagated signal) on a variety of computer-readable transmission mediums, including wireless-based and wired\/cable-based mediums, and may take a variety of forms (e.g., as part of a single or multiplexed analog signal, or as multiple discrete digital packets or frames). Such computer program products may also take other forms in other embodiments. Accordingly, embodiments of this disclosure may be practiced with other computer system configurations.","ETS SMS Gateway","In one embodiment, SMS Gateway services are delivered to YaaZZ by Ericsson, although other providers could be used. Ericsson has SMS Gateways and interconnection in 90% of the world. YaaZZ is able to change CallerID on the SMS to the originating user in all countries except the USA.","In one embodiment, to deliver the Mobile Java client to the J2ME enabled mobiles, the YaaZZ system uses WAP Push messages through Ericsson's Gateway, although these messages could be distributed via alternative means. This simplifies the installation process of the Java client for the user.","Upon initialization of a call, a rating engine will be queried for the price of the call. This price is calculated by looking up both the caller's subscription type and the caller's geographical location. This means that a big company having a lot of subscriptions (physical users), will receive different pricing for their employees, according to what country code their subscriptions adhere to.","After rating, the rebate system will go through each known rebate function to figure out if the user making a call, or sending an SMS, is entitled to rebate. It will traverse through all the rebate possibilities, sum up the total rebate percent level, and compare it to a maximum rebate level, currently 40%.",{"@attributes":{"id":"p-0081","num":"0112"},"figref":"FIG. 15","b":["1501","1502","1503","1504"]},"Balance information can be stored in the master user balance database, for example, in MySQL. The total balance available can be incremented using a credit card in the YaaZZ Portal. In one embodiment, this functionality is implemented using BBS Netterminal. Each subscriber's balance is automatically decremented at the same moment that the corresponding CDR is being created for an ended call.","ETS Portal",{"@attributes":{"id":"p-0083","num":"0114"},"figref":"FIG. 16","b":["1601","1601","1600"]},"In one embodiment, the portal system consists of the Zope web server  for presenting dynamic content for rendering web pages, with a content management system (CMS) called LimeCMS developed by Innoventure Net Solutions. The system is programmed in Python. In front there is a web server apache2 and a caching system. There is a back-end transaction daemon (yTransd, the \u201cYaaZZ Transaction Daemon\u201d ) that handles transaction and integration between the portal and other systems. The integration server is a Linux server that basically runs a daemon process. All exchange of information is stored as transactions with unique transaction IDs. There are several tables in the database for handling this functionality. They keep information about the transaction, versions of the data for each transaction, logging of history and error messages in several languages, etc. Both LimeCMS and yTransd share the same MySQL database .",{"@attributes":{"id":"p-0085","num":"0116"},"figref":"FIG. 17","b":["1701","1702","8","1703"]},"yTransd Transaction Server","The yTransd (YaaZZ transaction daemon)  handles the communication between the ETS Portal and other surrounding systems\/components. All actions are logged into the operating system (OS) logging system, including log rotation, which is handled by the OS. The daemon starts automatically when the transaction server starts. All transactions are also archived, and there is a transaction log in the database to provide data for support. yTransd uses SIP to communicate with other components; however, other protocols could be used.","A transaction is stored into two tables in the database (e.g., the mySQL database  and  shown in , respectively). One table contains the transaction number and status, the other table contains the transaction data. In most cases the transaction data is stored in 2 rows. One row contains the transmitted data and one for the received data.","Table 1 below shows several examples of the different transactions which may be logged. It is not intended to be a complete list, but rather exemplary.",{"@attributes":{"id":"p-0090","num":"0121"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"49pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 1"},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}},{"entry":[{},"Transaction name","Init from","API"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"GenerateClient","yTrans\/Portal","YaaZZ"]},{"entry":[{},"addSIPUser","yTrans","YaaZZ"]},{"entry":[{},"callNumber","Portal","YaaZZ"]},{"entry":[{},"changeSIPUser","Portal","YaaZZ"]},{"entry":[{},"deleteSIPUser","Portal","YaaZZ"]},{"entry":[{},"NewCust","Portal","CMS"]},{"entry":[{},"sendSMS","Portal","YaaZZ"]},{"entry":[{},"CreditCheck","yTrans","Credit"]},{"entry":[{},"NewSubscr","yTrans","CMS"]},{"entry":[{},"ChangeSubscr","Portal","CMS"]},{"entry":[{},"ChangeCust","Portal","CMS"]},{"entry":[{},"GetCustData","Portal","CMS"]},{"entry":[{},"GetSubscrData","Portal","CMS"]},{"entry":[{},"GetInvoiceData","Portal","Invoice"]},{"entry":[{},"GetInvoiceDetailsData","Portal","Invoice"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}}}}},"A transaction is inserted into the transaction tables either by the Portal or generated from information in the mySQL database from the yTransd as a result of previous transactions. yTransd will handle the transaction according to a transaction status flag.","The following table explains example status codes used in the transaction status flag. The state-column indicates the lifespan of the status.\n\n",{"@attributes":{"id":"p-0093","num":"0127"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"126pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 2"},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}},{"entry":["Status","Name","State","Set by","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["0","Finished","Final","yTransd","The requested operation was"]},{"entry":[{},{},{},{},"completed successfully."]},{"entry":["1","New","Initial","Portal\/","Initial value for all transactions. Set"]},{"entry":[{},{},{},"yTransd","when the transaction is initiated by the"]},{"entry":[{},{},{},{},"end user."]},{"entry":["2","Error","Action","yTransd","An error occurred, indicating that the"]},{"entry":[{},{},{},{},"transaction could not be performed. It"]},{"entry":[{},{},{},{},"will have to be handled by the"]},{"entry":[{},{},{},{},"customer or an operator. An error"]},{"entry":[{},{},{},{},"message ID is set in the transaction"]},{"entry":[{},{},{},{},"table."]},{"entry":["3","Cancelled","Final","Portal\/","This is the final state for transactions"]},{"entry":[{},{},{},"yTransd","that have been cancelled by either the"]},{"entry":[{},{},{},{},"customer or an operator."]},{"entry":["4","Cancelled","Temp","Portal","The transaction has been cancelled by"]},{"entry":[{},"by user",{},{},"the customer. yTransd will read this"]},{"entry":[{},{},{},{},"transaction, perform necessary"]},{"entry":[{},{},{},{},"operations in other systems, and then"]},{"entry":[{},{},{},{},"set the status to Cancelled."]},{"entry":["5","Resubmit","Temp","Portal","When a transaction has failed, the"]},{"entry":[{},{},{},{},"customer or the operator can change"]},{"entry":[{},{},{},{},"the transaction data and resubmit the"]},{"entry":[{},{},{},{},"transaction if it is allowed by the error"]},{"entry":[{},{},{},{},"message. yTransd will then try to"]},{"entry":[{},{},{},{},"perform the operation once more. It"]},{"entry":[{},{},{},{},"can then end as Finished or Error."]},{"entry":["6","external","Temp","yTransd","Transactions with this status are"]},{"entry":[{},{},{},{},"finished by an external system. It is not"]},{"entry":[{},{},{},{},"used at this stage."]},{"entry":["7",{},"Action","Portal\/","This stage handles transactions that"]},{"entry":[{},{},{},"yTransd","fail in a manner that is not resolvable."]},{"entry":[{},{},{},{},"The cause is events that is not defined"]},{"entry":[{},{},{},{},"in the code, and has to be solved by a"]},{"entry":[{},{},{},{},"programmer."]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}}}}},{"@attributes":{"id":"p-0094","num":"0128"},"figref":"FIG. 18","b":["1","0","2","4","5"]},"Each time a transaction is resubmitted a new row is inserted into a transaction data table (stored, for example, in the MySQL database). The original transaction data will be kept for logging, support, debugging and error handling purposes. For each version of transaction data will have a version number. There is also a unique transaction number for each API type.","There is a chance that any transaction will fail due to the complex nature of this system. Each event that can lead to an error has an error code. This error code is set into the transaction table whenever an error occurs. Both the Portal and yTransd will handle the situation based upon the properties of each error code. All error codes are defined in a table in the database. This table contains all message texts for all languages. It also contains information of how the message can be handled by a user and by the yTransd. When an error occurs the portal displays an error message and a set of buttons. This is done by setting an error level for the error message.","In one embodiment, there are 6 different error levels. The status column in Table 3 shows the transaction status for each the error operation.",{"@attributes":{"id":"p-0098","num":"0132"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"5","colwidth":"112pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 3"},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}},{"entry":["Level","Description","Buttons","Status","Explanation"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["0",{},{},"0","Everything OK, no message to"]},{"entry":[{},{},{},{},"user."]},{"entry":["1","Info","OK","0","For messages where user can"]},{"entry":[{},{},{},{},"not interact."]},{"entry":["2","Check","OK, Cancel,","0, 4, 5","When user has to accept, change"]},{"entry":[{},{},"Edit",{},"data or cancel the request."]},{"entry":["3","Correct","Cancel, Edit","4, 5","When the system does not"]},{"entry":[{},{},{},{},"accept the transaction, but it is of"]},{"entry":[{},{},{},{},"a nature where it can be edited."]},{"entry":["4","Cancel","Cancel","4","When a transaction can only be"]},{"entry":[{},{},{},{},"canceled"]},{"entry":["5","Internal","OK","7","When a (temporary) error occurs"]},{"entry":[{},"error",{},{},"and the system is not able to"]},{"entry":[{},{},{},{},"handle the transaction."]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}}}}},"Integration and User Requests","The YaaZZ portal is heavily integrated with other systems. This is supported by the transaction daemon yTransd. When a customer wants to perform a task, like sending an SMS message, the portal writes a transaction to the MySQL database. Then the yTransd reads the transaction from the database and connects to the SMS Gateway API. When the transaction is finished, the yTransd writes a status code back to the transaction, and where applicable, the answer for the request. The portal then polls the transaction (for example, using a java script) to wait for the status. If a transaction fails, an error message will be presented to the customer.","User Registration","Since there is an exchange of personal information at the front page and most sub-pages, communication for the whole site is preferably encrypted (https). In a current embodiment, a user needs to register to fulfill some requirements. Other requirements may be added or some requirements subtracted.","1. The customer must pass a credit check.","2. The email-address can't be duplicate.","3. The phone number can't be duplicate.","4. The phone number has to belong to the country\/language from the URL. For example, a user can only register a Norwegian phone number on Yaazz.no and can only register Swedish phones from YaaZZ.se. The credit check from yaazz.no will be performed in Norway.","In a current embodiment, there are two usernames, one login name and one system username. The system username consists of 8 numbers or letters randomly generated. The system username is related to a login name. The login name can be changed, and is initially the same as the email-address. In some embodiments, the passwords are stored encrypted. If the password is forgotten, a new password is generated and sent to the customer via SMS or email.","Client Downloads","In one embodiment, for private customers, a mobile client (code) is sent by SMS automatically during registration. For corporate customers it is sent manually or in batches by the corporate manager\/administrator. The customer can also request a new mobile client by SMS (when logged in to the portal). A new mobile client is generated and sent by SMS. The download link for the client sent by SMS, can only be used once. The SMS sent is as a SMS PUSH message. When the mobile client is downloaded, the mobile phone make and model is stored for statistical purposes.","The PC client is generated with all of the necessary settings each time it is downloaded. Where it is not possible to detect the OS (Mac, linux, Windows), and where it is necessary to make a choice of OS version, the YaaZZ portal will prompt for the correct client to download. There are no limitations on how many PC clients that can be downloaded to ensure the availability of YaaZZ.","Prepaid Payments","In one embodiment, the YaaZZ prepaid solution consists of services provided by BBS. It consists of programs installed on local server provided by BBS and an API to the BBS Netterminal (net terminal). After installation, a security certificate is generated to ensure that payments only can come from the predefined server.","There are two ways of including Netterminal, either using a standard layout or a custom screen. The standard layout is in the English or Norwegian language only, but does not require a user to store credit card information. The custom screen makes it possible to provide a customer's information in any language, but then the credit card information must be handled locally. The service provides a D secure mechanism where available.","In one embodiment, predefined specific subscriptions are available for prepaid customers. All customers' balances are stored in a separate accounting database. When a user logs in to the YaaZZ Portal, the remaining balance for the user's subscription will be shown (for example, at the right menu between the Logout button and the rest of the menu). The currency of the amount displayed is the currency connected to the language of the site.","VAT (taxes) is not part of the portal, and will be handled in the rating\/billing system.",{"@attributes":{"id":"p-0116","num":"0150"},"figref":"FIG. 19","ul":{"@attributes":{"id":"ul0017","list-style":"none"},"li":{"@attributes":{"id":"ul0017-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0018","list-style":"none"},"li":["1. The customer chooses an amount to fill (limited by min, max and total max set by variables). The portal creates an internal transaction and provides a reference number and a transaction ID.","2. Customer enters bank card information in the Netterminal.","3. Customer press OK and is redirected back to the portal. If the transaction is canceled or fails, the transaction is aborted.","4. If OK, the card information is authorized and the amount is now reserved on the customer's account. If it fails, the transaction is aborted.","5. yTransd updates the amount on the customer's account in the back office. If the transaction fail, the transaction is rolled back and the reservation cancelled.","6. The reserved amount is now captured at BBS. If it fails, all related transactions are rolled back, including the amount in the back office.","7. The customer is informed of successful payment."]}}}},"In case of failure at any stage in this process, all transactions will be rolled back. All steps in a transaction are logged. If the system by any chance should fail to roll back, the support\/administration system may be used to rectify the error. All transactions are searchable by a standard customer search in the support system, but also by reference number. A list of all transactions is also provided, filtered by country and time span.","The support\/administration system also provides the ability to credit the total amount or parts of the amount paid within a transaction (by reference number). This can only be paid back to the originated account. This can't be misused by support personnel as only BBS has the reference to the account number.","In some embodiments, when the customer is terminating the subscription, the customer balance is checked, and an automatic refund is executed. This is a system setting for each country number prefix and may be changed at any time.","This same functionality may be used to pay invoices for post-pay customers.","Scalability and Performance","The PABX platform can be scaled by physically adding more PABX servers to the server farm. The API servers can then be configured to make use of the newly added PABX servers by specifying whether a new PABX server should be a conference server, or a regular PABX server. This is a seamless update, where the load balancer reads the configuration data from disk for each request. In one embodiment, this information is cached by the operating system's file cache.","The Web- and API Server platform can be scaled by physically adding more web servers to the server farm, and then updating the load balancer with new configuration on-the-fly. Other components may be scaled in similar manners.","API Server","This section describes an example embodiment of the YaaZZ internal API Server, used by the various YaaZZ clients to interoperate with the PABX servers with customer-authentication.","The YaaZZ internal API server interconnects the externally developed components with the internal components, using several internally developed APIs. Internal components controlled by these APIs are call, call from, conference, SMS and load balancing.","Whenever a regular or conference call is made, the YaaZZ API server (the API server) will balance the usage of each available PABX server. It will also choose which PABX to use based upon whether it is a regular call or a conference call.  is an example block diagram of an example API server connected to one or more PABX server computing systems to allow for load balancing.",{"@attributes":{"id":"p-0126","num":"0167"},"figref":"FIG. 21","b":["3","1901","1902","1903"]},"The API Server implements the following functions\/functionality, available potentially on all YaaZZ clients:\n\n","Of course, other functions may be made available as part of one or more of the API in the future. Although each function is not implemented in the initial release of each client API of the example embodiment of the YaaZZ product, it is contemplated that all three clients will offer all of the functionality in a similar fashion.","The PC (&MAC) client API uses HTTPS with a fixed YaaZZ certificate. This means that the client will only operate if both the server and the client have the right certificates. Authentication is by userID, passcode and obfuscation. The mobile client API uses HTTPS. The authentication is by userID, passcode and obfuscation. The Web Client API uses HTTPS with a fixed YaaZZ certificate. This means that the client will only operate if both the server and the client have the right certificates. Authentication is by userID, passcode and obfuscation.","The billing callback API (setSubscriptionStatus) will be used to update the status of the customer in the user database. This API is used by a billing system.","In an example embodiment, the API server is written in the scripting language PHP. The total platform used consists of Linux, Apache and PHP 5. Each API server can run on its own, and multiple API servers can be run in parallel to provide redundancy. The different YaaZZ Communicator clients connect to a cluster of API servers, and by means of load balancing on a number of active API servers, redundancy is achieved. Other methods for creating redundant capabilities are supported.","PABX Server","The PABX Server uses Open Source code\u2014Asterisk\u2014to implement its functionality. This section discusses the capabilities of Asterisk that are incorporated and the changes made thereto.","Asterisk is an Open Source hybrid TDM (time division multiplexing) and packet voice PABX (telephone exchange) and IVR (interactive voice recognition) platform with ACD functionality. Its name comes from the asterisk symbol, *, which in UNIX (including Linux) and DOS environments represents a wildcard, matching any filename. Similarly, the Asterisk PABX is designed to interface any piece of telephony hardware or software with any telephony application, seamlessly and consistently.","Traditionally, telephony products are designed to meet a specific technical need in a network. However, many applications of using telephony share a great deal of technology. Asterisk takes advantage of this synergy to create a single environment that can be molded to fit any particular application, or collection of applications, as the user sees fit. Asterisk is licensed and distributed under the GNU General Public License (GPL). Asterisk is designed to allow new interfaces and technologies to be added easily.","Asterisk Modules Deployed",{"@attributes":{"id":"p-0136","num":"0186"},"figref":"FIG. 22"},"a Real-time Data lookup\/rewrite (app_realtime.so)","Asterisk Real Time allows storage of users\/peers and other configuration data in database such as MySQL. This way, there is no need to perform manual configuration reload for the modified entries to take effect. With the introduction of Asterisk Real Time it is possible to add\/remove users or make call flow changes by entering data into appropriate database table(s). Once configured, the Asterisk Real Time engine will perform database lookup(s) on a per call basis allowing for run time configuration changes.","MySQL Real-time Configuration driver (app_mysql.so)","Asterisk generates a CDR (Call Detail Record) for each call. By default, records are stored in a comma-separated value file created in \/var\/log\/asterisk\/cdr-csv. With use of the cdr_addon_mysql, the CDRs are stored in a mySQL-database.","Meetme conference bridge (app_meetme.so)","The Asterisk system features simple conferencing functionality. This enables multiple callers to attend a phone conference and converse with all other callers in the conference. The Asterisk simple conference functionality allows users to increase\/decrease their speaking volume and listening volume (independently of each other and other users).","Asterisk Gateway Interface (agi_res.so)","The Asterisk Gateway Interface is an interface for adding functionality to Asterisk using many different programming languages. Perl, PHP, C, Pascal, Bourne Shell.","SIP Channel Module (chan_sip.so)","The SIP channel module enables Asterisk to communicate via VoIP (Voice Over IP), with SIP telephones and exchanges. In the case of YaaZZ, the system uses SIP for communicating with the Teleglobe exchange.","Asterisk Call Function","The Dial function is a so-called \u201cApplication\u201d in Asterisk terms. This application can connect two channels, where a channel consists of a driver name and a destination. An example of an address is SIP\/1881, which would try to use the SIP driver to call the number \u201c1881\u201d. The Dial application connects the current channel reading the command with the specified channel. If an error occurs, the dial application exits and lets the next line in the configuration (dial plan) execute. This way the system can support fail-safe function dialing via another driver\/channel.","YaaZZ Use of Asterisk","Postpaid Calls","In the postpaid system, for the voice system in YaaZZ (one to one calling) the basic calling engine in Asterisk and the standard SIP module are used. The calls are handled by YaaZZ, which also handles all of the network load. In other embodiments, the implementing system may let the carrier or another system handle the network load instead of YaaZZ.","Prepaid Calls","Different from postpaid calling, prepaid calls are monitored live by the YaaZZ PABX system to ensure that the call does not exceed the user's prepaid balance, even though the user might use several services at the same time.","SMS","SMS handling is performed by the YaaZZ API Server (see above). See this section also for a description of CDR handling for SMS CDRs.","Conferencing","To implement YaaZZ conferencing, YaaZZ uses the Asterisk SIP module. The conference call is hosted by YaaZZ, but uses the telco carrier (TATA\/TDC) via the SIP protocol to cause the call to be originated using the PSTN\/GSM (or other) network.","This is all handled using the MeetMe module in Asterisk. MeetMe is the Asterisk engine that joins calls to make a conference. MeetMe has lots of functionality, but YaaZZ is only using standard conference calling functionality from the Asterisk engine to implement its conferencing system. The additional conferencing features supported by YaaZZ are implemented using YaaZZ code.","Instead of the normal way of making the user manually call in to a conference, the YaaZZ system utilizes the YaaZZ API server to set up the conference calls from the PABX to the user's phone. This supports potentially cheaper conference calling, as the user is charged the PABX origination fee instead of the (roaming) charges that may be otherwise incurred if the user's (mobile) phone originated the call.","With the help of Asterisk Manager API, the YaaZZ API Server keeps track of the current state of each user in the conference call. This is then reflected to the users' client applications, on the portal, mobile, or pc client.","Call Data Records (CDRs)","All of the CDRs are in time zone GMT+1. YaaZZ uses a NTP (Network Time Protocol) client on the servers to ensure the YaaZZ clock stays accurate.","Voice will generate two CDRs\u2014one for Caller and one for Callee. These CDRs are joined in the rating engine (which figures out costs and routing), by comparing the JoinID on each leg, thereby avoid rating a call twice. An Example is shown in Table 4.",{"@attributes":{"id":"p-0164","num":"0214"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"84pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 4"},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"1. Caller Num","1. Callee Num"]},{"entry":[{},"2. Start time","2. Start time"]},{"entry":[{},"3. Billseconds","3. Billseconds"]},{"entry":[{},"4. Unique ID","4. Unique ID"]},{"entry":[{},"5. Subscriber ID","5. Subsciber ID"]},{"entry":[{},"6. JoinID","6. JoinID"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}}},"Conference calls will generate one CDR per attendee\/participant in the conference call. When sent to the rating system\/billing solution, every CDR containing Conference ID will be rated and joined. There are multiple CDRs for a conference call, one for each active participant. Each leg (referenced by a CDR containing the Conference ID) is sent to a rating engine to be priced before the leg is connected to the conference call. When sent to the rating system, each CDR containing the Conference ID is then joined in order to track a single cost for the conference call. See Table 5 below.",{"@attributes":{"id":"p-0166","num":"0216"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"140pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 5"},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"1. Callee Num"]},{"entry":[{},"2. Start time"]},{"entry":[{},"3. Billseconds"]},{"entry":[{},"4. Conference ID"]},{"entry":[{},"5. Subsciber ID"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"Asterisk Manager Interface (AMI)","The Asterisk Manager Interface allows a client program to connect to an Asterisk instance and issue commands or read PABX events over a TCP\/IP stream. Integrators find this particularly useful when trying to track the state of a telephony client inside Asterisk, and directing that client based on custom (and possibly dynamic) rules.","A simple \u201ckey: value\u201d line-based protocol is utilized for communication between the connecting client and the Asterisk PABX. Lines are terminated using CRLF (carriage return, line feed). For the sake of discussion below, the term \u201cpacket\u201d is used to describe a set of \u201ckey: value\u201d lines that are terminated by an extra carriage return.","The asterisk manager interface is the standard API in asterisk used to communicate between the YaaZZ API Server and Asterisk. YaaZZ uses this interface to perform origination of a call from a mobile and a PC YaaZZ communicator.","The protocol (as used by YaaZZ) has the following characteristics:\n\n","Example System Configuration","The operating system used by example embodiments of YaaZZ is Ubuntu. All of the PABX servers are running Asterisk software version 1.4. The servers are IBM Blades with Intel Quad Core 3 ghz CPUS and 4 GB of memory. The configuration files of PABX Servers and YaaZZ Conference PABX servers are different. Common for both installations is that the servers are configured automatically on startup and when migrating new releases.","Currently, Perl is the programming language used to develop the prepaid system in YaaZZ and is also used for some of the AGI scripts which retrieve information about customers when a customer is originating a call, etc. PHP is used for the conference monitoring system. The programming language \u201cC\u201d is mainly used to modify existent core modules in Asterisk PABX.","YaaZZ Internal PABX","The current architecture includes a separate PABX server to handle calls relating to customer support, invoicing, administration, etc. This PABX server is a stand-alone system from the Voice\/Conference platform of YaaZZ, but is integrated with the billing\/rating platform, customer database, and the prepaid databases to retrieve information which may be useful and\/or needed.","Security and Reliability","To have a secure connection for transferring SIP data between Asterisk and Teleglobe, a local connection with TATA (using a secure tunneling technique) is used. Preferably, one of more failover copies of the PABX hardware setup are available to take over if the system goes down.","Logging and Monitoring","In one example implementation, the alarms and PABX monitoring are controlled by a Nagios server. Every six months, Asterisk logs may be purged, as some implementations require this due to local laws. Monitoring Asterisk PABX Servers and reports on system setup may also be available.","All of the above U.S. patents, U.S. patent application publications, U.S. patent applications, foreign patents, foreign patent applications and non-patent publications referred to in this specification and\/or listed in the Application Data Sheet, including but not limited to U.S. Provisional Patent Application No. 61\/077,106 entitled \u201cMOBILE, PC, AND WEB ENHANCED TELECOMMUNICATIONS ENVIRONMENT,\u201d filed Jun. 30, 2008, is incorporated herein by reference, in its entirety.","From the foregoing it will be appreciated that, although specific embodiments have been described herein for purposes of illustration, various modifications may be made without deviating from the spirit and scope of the invention. For example, the methods and systems for performing telecommunications services discussed herein are applicable to other architectures. Also, the methods and systems discussed herein are applicable to differing protocols, communication media (optical, wireless, cable, etc.) and devices (such as wireless handsets, electronic organizers, personal digital assistants, portable email machines, game machines, pagers, navigation devices such as GPS receivers, etc.)."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0004","num":"0003"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0005","num":"0004"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0006","num":"0005"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIGS. 4A-4J"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIGS. 5A and 5B"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIGS. 6A-6C"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIGS. 11A-D"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIGS. 12A-12I"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":["FIGS. 13A-13E","FIGS. 11A and 11B"]},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 14"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 15"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 16"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 17"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 18"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 19"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 20"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 21"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 22"}]},"DETDESC":[{},{}]}
