---
title: Method, system, and program for updating records in a database when applications have different version levels
abstract: Provided is a method, system, and program for updating data in a database table in response to requests from a requesting application comprising one of a first application at a first version level and a second application at a second version level. The first application recognizes the table as including a subset of columns in the table that is less than all the columns in the table and the second application recognizes the table as including all the columns in the table. A request is received from the requesting application for specified columns from one record in the table and the requested record is accessed. A data structure is generated including data from the specified columns in the requested record. A determination is made as to whether the requesting application is capable of recognizing all the columns in the table. If so, data from each column in the table that is not one of the subset of columns is added to the data structure. The data structure is returned to the requesting application.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06901417&OS=06901417&RS=06901417
owner: International Business Machines Corporation
number: 06901417
owner_city: Armonk
owner_country: US
publication_date: 20020111
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE PREFERRED EMBODIMENTS","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS","ADDITIONAL IMPLEMENTATION DETAILS"],"p":["1. Field of the Invention","The present invention relates to a system, method, and program for updating records in a database when applications have different version levels.","2. Description of the Related Art","In a database system, an application program may attempt to access and manipulate rows of data in a database table. If the database table is upgraded to include additional columns of data, then an upgraded version of the application may write meaningful data to the additional columns. If the application is down level to a current version level such that the down level version recognizes less than all of the columns in the data base table, then certain of the down level application operations could corrupt or erase meaningful data in the additional columns not recognized by the downgraded application. The term \u201cdown level\u201d refers to a version of an application that was released before an \u201cupgraded\u201d version. Such down level applications typically include less functionality than the upgraded version.","For instance, a down level application may erase or corrupt meaningful data when updating a key column in an index record in an index on a database table, where the index provides a sorting of the table records according to the value(s) in the key column(s). The index key columns are comprised of selected columns of the table, and may include any of the values that are possible for that particular column. Columns that are used frequently to access a table may be used as key columns. The index may order the records according to their index column values in a B-tree data structure, or balanced tree. Moreover, the down level application may erase or corrupt meaningful data when updating a non-key column in the database.","When updating one index key column for the database table, the down level application must delete the affected row from the table so that the down level application may enter the modified data into the column at-issue. Upon updating the index key column, the down level application would provide the record to an index manager within the database engine to reinsert the updated record in the index according to the index ordering method, e.g., a B-tree index. In the prior art, the down level application would delete and update a record by first fetching the record, deleting the record, updating the columns and then reinserting the record. However, if the down level application does not provide data for all the columns, then the database engine would use default values for extended columns not recognized by the down level application in the inserted record, thereby erasing any meaningful data that was previously maintained in the extended columns by the upgraded version but unknown to the down level application.","For these reasons, there is a need in the art for improved techniques for allowing applications to update rows in a database table.","Provided is a method, system, and program for updating data in a database table in response to requests from a requesting application comprising one of a first application at a first version level and a second application at a second version level. The first application recognizes the table as including a subset of columns in the table that is less than all the columns in the table and the second application recognizes the table as including all the columns in the table. A request is received from the requesting application for specified columns from one record in the table and the requested record is accessed. A data structure is generated including data from the specified columns in the requested record. A determination is made as to whether the requesting application is capable of recognizing all the columns in the table. If so, data from each column in the table that is not one of the subset of columns is added to the data structure. The data structure is returned to the requesting application.","In further implementations, a request is received from the requesting application to delete the accessed record after returning the data structure to the requesting application. In response, the accessed record from the table is deleted.","Still further, the data structure returned to the requesting application including data updated by the requesting application is received and a table record is generated having columns including the data in the received data structure, including the data updated by the requesting application. The generated table record is inserted into the table.","In still further implementations, after deleting the table record, an index record in an index on the table corresponding to the deleted table record is deleted. One index record is added to the index for the inserted table record, wherein the data updated by the requesting application comprises at least one index key column used to sort the index records in the index.","Further provided is a method, system, and program updating data in a database table by a first application at a first version level. The first application recognizes the table as including a subset of columns in the table that is less than all the columns in the table. A second application at a second version level recognizes the table as including all the columns in the table. The first application transmits a request for specified columns from one record in the table to an application server managing access to the database table. In response to the request, the first application receives from the application server a data structure including data from the specified columns in the requested record and data from each column in the table that is not one of the subset of columns recognized by the first application.","The described implementations provide techniques for an application client program to interact with an application server when the application operates at a version level that is lower than the version level of the application server and database managed by the application server. In such cases, the database may include data columns that the down level application does not recognize. Described implementations provide mechanisms to allow the down level application to interact with the database in a manner that does not inadvertently affect data in the columns the down level application does not recognize.","In the following description, reference is made to the accompanying drawings which form a part hereof and which illustrate several embodiments of the present invention. It is understood that other embodiments may be utilized and structural and operational changes may be made without departing from the scope of the present invention.",{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 1","b":["2","2","2","4","4","4","6","8","10","4","4","4","4","4","4","6","6","12","14","16","6","12"],"i":["a","b ","n ","a","b ","n ","a","b ","n ","a","b ","n "]},"In response to receiving data requests from the application clients , . . . , the application server  would perform any requested operations. If the APIs from the application client , . . . request data from the database , then the application server  would generate database commands understood by a database engine . The database engine  accesses, stores, and modifies data in the database tables  and indexes  in a manner known in the art. The database requests from the application server  may comprise application specific APIs to access data in the tables  and indexes  or database APIs, such as the Open Database Connectivity (ODBC) interface, the DB2 Call Level Interface, etc. The database commands the application server  generates to implement the client application , . . . requests may comprise Structured Query Language (SQL) commands, or other database commands that are processed by the database engine  to execute against the database .","The client systems , . . . may comprise any computing device known in the art, including workstations, personal computers, personal digital assistant (PDA), server class machine, mainframe, telephony device, etc. The server system  comprises a server class machine capable of handling requests from multiple clients. The database engine  and database  may be implemented using database systems known in the art, such as DB2, MICROSOFT Access, Oracle Corporation's ORACLE 8,** etc. The network may comprise any network system known in the art, including a Local Area Network (LAN), Storage Area Network (SAN), Wide Area Network (WAN), Internet, an Intranet, etc.","**Microsoft is a registered trademarks of Microsoft Corporation; DB2 and Tivoli are registered trademarks of IBM; and Oracle8 is a trademark of Oracle Corporation.",{"@attributes":{"id":"p-0025","num":"0024"},"figref":["FIGS. 2","FIG. 2","FIG. 2","FIG. 2","FIG. 2"],"i":["a","b","c ","a","b","c","c"],"b":["2","2","1","50","52","1","5","1","5","52","62","62","52","2","60","62","1","7","6","7","2","60","1","50","50","2","2","62","1","50","1","5","6","7","2","1","50","2","1","5","1","52"]},"In a mixed version environment, the initial version application client  may attempt to update or modify data in a column of the table  that is a key column in the corresponding index for the table on which the index records are ordered. In such case, the update request from the application client , . . . to the application server  would require deleting the record having index key columns to update, updating the record, and then reinserting the record into the table , which would cause an index record for the reinserted table  record to be added to the index  for the table .",{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 3","b":["70","6","4","14","6","70","72","14","74","74","74"],"i":["b ","a","b ","n. "]},{"@attributes":{"id":"p-0028","num":"0027"},"figref":["FIG. 4","FIG. 1"],"b":["4","4","4","6","4","4","4","16","4","4","4","16","14","14","14","16","16","100","4","4","4","4","4","4","102","14","4","4","4","50","14","62","1","7","50","1","5","50","6","7","62","62","4","4","4","60","4","4","4","1","7","62","62"],"i":["a","b ","n ","a","b ","n ","a","b ","n ","a","b ","n ","a","b ","n ","a","b ","n ","a","b ","n ","a","b ","n "]},"At block , the application server  receives a request from the application client for data in the selected columns. In response, the application server  executes (at block ) the query to access the requested record. A record data structure  () is then generated (at block ) for each of the requested columns including data in the column fields , . . . and the record ID . The application server  determines (at block ) whether the application client , . . . requested all the columns from the table. This determination may be made by accessing information on the client version  or  provided when the session with the client was initiated. Client version information may indicate whether the particular client version recognizes less table columns than the current application version of the application server . Additionally, when establishing the session, the client application , . . . may communicate the table  columns the application , . . . recognizes. The application server  can then determine whether the number of client recognized table columns is less than the actual number of columns in the table . If (at block ), the requesting client application , . . . recognizes the same number of columns as currently implemented in the table , then the application server  returns (at block ) the generated record data structure  () to the requesting client application , . . . ","If (at block ), the application client , . . . is a lower version than the current version implemented by the application server  such that the application client , . . . recognizes fewer than all of the columns currently implemented in the table , then the application server  determines (at block ) the extended columns (C, C) in the table  not recognized by the application client , . . . . This determination may be made by subtracting the number of columns recognized by the requesting application client , . . . from the columns recognized by the application server , such that the difference indicates the number of extended columns in the subsequent version of the table  not recognized by the initial client application version (V.) . The application server  then adds (at block ) data for the extended columns to further column fields , . . . in the generated record data structure  and returns (at block ) the generated record data structure  to the requesting application client , . . . ","Upon receiving (at block ) the record data structure , the application client , . . . then issues (at block ) a delete data command to the application server  to delete the table record having the record ID  in the received record data structure  and then issues a command to modify (at block ) data in one or more of the column fields , . . . of the record data structure . The application server  would perform the operations specified by the issued command. To reinsert the modified record, the application client , . . . returns (at block ) the modified record data structure  to the application server  to reinsert into the table . Upon receiving (at block ) the modified record data structure  with an insert command, the application server  generates (at block ) a record to insert into the table  including the data in all of the column fields , . . . () and inserts (at block ) the record into the table .","In the event that the requesting client , . . . was operating at a version level that did not view the extended columns (C, C), then the data for the extended columns in the record the application client , . . . modified is provided from the record data structure  transferred between the application client , . . . and server , which is updated and resubmitted to reinsert the record into the table . In this way, the reinsert operation initializes the extended data columns to their value before the record was fetched and deleted by stashing the extended data columns (C, C) in the record data structure , where they are unavailable to the down level version (V.) of the application client . This allows the application client , . . . operating at the initial version level  to update records in a subsequent version table  by performing a fetch\/delete\/reinsert without clearing the data in the extended table columns (C, C) that the initial version (V.) application client  does not recognize. In the described implementations, the extended table columns (C, C) are returned to the application client , . . . operating at the initial version level in a manner that is opaque to the client, such that the lower version application client , . . . is not aware that the extended columns (C, C) exist in the record data structure . In this way, the data in the extended table columns remains unchanged in the reinserted record and available for use by the subsequent version (V.) application clients  that recognize and use the extended table columns (C, C).","In one implementation, the client\/server application may comprise a client\/server backup and archive program, such as the IBM Tivoli Storage Manager**.","**Microsoft is a registered trademarks of Microsoft Corporation; DB2 and Tivoli are registered trademarks of IBM; and Oracle8 is a trademark of Oracle Corporation.","In such implementations, the application client , . . . interfaces with the application server to backup data objects at the client system , . . . to the application server , which in turn may maintain data in various archive and backup storage devices. The application server  maintains databases  providing information about data objects archived by the application server , inventory resources, such as available storage resources, network resources, and information on the configuration of network resources accessible to the application server . Those skilled in the art will recognize that the described implementations for updating records in a database through a fetch\/delete\/insert combination can apply to any client\/server application.","The above described implementations for updating data objects in a database may be implemented using standard programming and\/or engineering techniques to produce software, firmware, hardware, or any combination thereof. The term \u201carticle of manufacture\u201d as used herein refers to code or logic implemented in hardware logic (e.g., an integrated circuit chip, Field Programmable Gate Array (FPGA), Application Specific Integrated Circuit (ASIC), etc.) or a computer readable medium (e.g., magnetic storage medium (e.g., hard disk drives, floppy disks, tape, etc.), optical storage (CD-ROMs, optical disks, etc.), volatile and non-volatile memory devices (e.g., EEPROMs, ROMs, PROMs, RAMs, DRAMs, SRAMs, firmware, programmable logic, etc.)). Code in the computer readable medium is accessed and executed by a processor. The code in which preferred embodiments of the configuration discovery tool are implemented may further be accessible through a transmission media or from a file server over a network. In such cases, the article of manufacture in which the code is implemented may comprise a transmission media, such as a network transmission line, wireless transmission media, signals propagating through space, radio waves, infrared signals, etc. Of course, those skilled in the art will recognize that many modifications may be made to this configuration without departing from the scope of the present invention, and that the article of manufacture may comprise any information bearing medium known in the art.","In the described implementations, the technique of providing the extended columns to the application at a lower level was applied when updating a key column. However, the described implementation for updating data can apply whenever a database record is deleted and re-inserted, including non-key column data.","In the described implementations, an application server returned a fetched data structure including information on the requested columns to an application client. In alternative implementations, the database related operations described as performed by the application server may be performed by a database engine and the operations described as performed by the application client may be performed by a database application or any other application interfacing with a database to update records by reinserting the records into the database.","In the implementation of , the application client, application server, and database are on separate machines. Alternatively, the client, application server, and database can be implemented on the same machine.","In the described implementations, the application client initiated actions, such as fetch, delete, and reinsert to update data in a record that are indexed by a key column of the record. In alternative implementations, certain of these operations may be performed by an application client when updating index key columns for an application client that does not recognize all the columns in the table. For instance, the application client may submit an API command to update at least one table column that is also an index key column. In response to this API, the application server would return the record data structure and delete both the table record and corresponding index record whose data was included in the record data structure. In response to receiving a returned data structure, the application server would then automatically generate a table and index records to include the data from the data structure, including data from the extended columns (C, C) not recognized by the application client, and insert the table and index records in the table and index, respectively.","The above described implementations set forth a technique to provide an application, operating at a lower version level, data from a table record including extended columns not recognized by the application, such that the application server will return less than all the columns to reinsert into the table. In alternative implementations, the data structure may be returned to update a table record without deleting the data in the record data structure. Moreover, the data structure including the extended columns may be returned to the application operating at the lower version for purposes other than updating data.","The described logic of  describes specific operations occurring in a particular order. In alternative implementations, certain of the logic operations may be performed in a different order, modified or removed. Morever, steps may be added to the above described logic and still conform to the described implementations. Further, operations described herein may occur sequentially or certain operations may be processed in parallel.","The foregoing description of the preferred embodiments of the invention has been presented for the purposes of illustration and description. It is not intended to be exhaustive or to limit the invention to the precise form disclosed. Many modifications and variations are possible in light of the above teaching. It is intended that the scope of the invention be limited not by this detailed description, but rather by the claims appended hereto. The above specification, examples and data provide a complete description of the manufacture and use of the composition of the invention. Since many embodiments of the invention can be made without departing from the spirit and scope of the invention, the invention resides in the claims hereinafter appended."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["Referring now to the drawings in which like reference numbers represent corresponding parts throughout:",{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIGS. 2","i":["a","b","c "],"b":["2","2"]},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 4"}]},"DETDESC":[{},{}]}
