---
title: Instructing management support software of a first software component to set up a communication channel between the first software component and a second software component
abstract: An apparatus in one example comprises a manager component that upon receipt of an indication of a need for a communication channel between a first software component and a second software component, instructs management support software of the first software component to set up the communication channel between the first software component and the second software component.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07627871&OS=07627871&RS=07627871
owner: Alcatel-Lucent USA Inc.
number: 07627871
owner_city: Murray Hill
owner_country: US
publication_date: 20040614
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","TECHNICAL FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["This application contains subject matter that is related to the subject matter of the following applications, which are assigned to the same assignee as this application. The below-listed applications are hereby incorporated herein by reference in their entireties.","\u201cSELECTING A PROCESSOR TO RUN AN EXECUTABLE OF A DISTRIBUTED SOFTWARE APPLICATION UPON STARTUP OF THE DISTRIBUTED SOFTWARE APPLICATION,\u201d by Buskins, et al., Ser. No. 10\/868,404, filed on Jun. 14, 2004;","\u201cSOFTWARE COMPONENT INITIALIZATION IN AN ORDERED SEQUENCE,\u201d by Buskins, et al., Ser. No. 10\/867,945, filed on Jun. 14, 2004, now U.S. Pat. No. 7,509,630;","\u201cSHUTTING DOWN A PLURALITY OF SOFTWARE COMPONENTS IN AN ORDERED SEQUENCE,\u201d by Buskins, et al., Ser. No. 10\/868,142, filed on Jun. 14, 2004, now U.S. Pat. No. 7,426,715;","\u201cDISTRIBUTED SOFTWARE APPLICATION SOFTWARE COMPONENT RECOVERY IN AN ORDERED SEQUENCE,\u201d by Buskins, et al., Ser. No. 10\/867,590, filed on Jun. 14, 2004, now U.S. Pat. No. 7,366,949;","\u201cMANAGER COMPONENT FOR CHECKPOINT PROCEDURES,\u201d by Buskins, et al., Ser. No. 10\/868,127, filed on Jun. 14, 2004;","\u201cMANAGER COMPONENT THAT CAUSES FIRST SOFTWARE COMPONENT TO OBTAIN INFORMATION FROM SECOND SOFTWARE COMPONENT,\u201d by Buskins, et al., Ser. No. 10\/868,469, filed on Jun. 14, 2004;","\u201cFIRST AND SECOND MANAGER COMPONENTS THAT COMMUNICATE TO INITIALIZE AND\/OR SHUT DOWN SOFTWARE COMPONENTS IN AN ORDERED SEQUENCE,\u201d by Buskins, et al., Ser. No. 10\/867,946 filed on Jun. 14, 2004;","\u201cMANAGER COMPONENT RESOURCE ADDITION AND\/OR RESOURCE REMOVAL ON BEHALF OF DISTRIBUTED SOFTWARE APPLICATION,\u201d by Gong, et al., Ser. No. 10\/868,144, filed on Jun. 14, 2004 now U.S. Pat. No. 7,406,678;","\u201cSUBSTITUTE MANAGER COMPONENT THAT OBTAINS STATE INFORMATION OF ONE OR MORE SOFTWARE COMPONENTS UPON FAILURE OF A FIRST MANAGER COMPONENT,\u201d by Buskins, et al., Ser. No. 10\/868,472, filed on Jun. 14, 2004 now U.S. Pat. No. 7,386,556.","The invention relates generally to distributed software applications and more particularly to management of distributed software applications.","In known distributed software applications, software components are distributed among a plurality of executables (i.e., software capsules or software entities). Each of the executables contains one or more software components that perform some portion of the functionality of the distributed software application. For distributed software applications to work, the software components need to interact with each other. For example, the communication between the software components occurs across communication channels between the software components.","To establish communication channels between the software components, software developers would need to write special software in each of the software components to handle setting up communication channels. Upon determination that a communication channel is needed to another software component, a software component negotiates with the other software component in attempt to set up the communication channel to the other software component.","As one shortcoming, the initiating software component that attempts to set up the communication channel may not be aware of the current state of other software components of the software application. If an initiating software component attempts to set up a communication channel with another software component that is not in a valid state for communication channel setup, then setting up the communication channel will fail. As another shortcoming, if software components at the other end of the communication channel fail, the initiating software component may not be aware of the failure at the other end. As yet another shortcoming, the software developers must write extra software for each software component to manage (i.e., setup and maintain) communication channels. The extra software may need to be customized for a specific software application or system. Creating software for each software component to manage communication channels increases the amount of effort required by the software developers to create the software components.","Thus, a need exists to alleviate software components of the responsibility of setting up and maintaining communication channels.","A distributed software application is distributed among a plurality of executables. Each of the executables contains one or more software components that perform some portion of the functionality of the distributed software application. A manager component of a management infrastructure for the distributed software application controls setup and teardown of communication channels between the software components. The manager component instructs management support software coupled with application software in the software components to set up, maintain, and tear down the communication channels for the software components.","In one embodiment, there is provided an apparatus comprising a manager component that upon receipt of an indication of a need for a communication channel between a first software component and a second software component, instructs management support software of the first software component to set up the communication channel between the first software component and the second software component.","In another embodiment, there is provided a method for: receiving an indication of a need for a communication channel between a first software component and a second software component; and passing identification information of the second software component to management support software of the first software component to instruct the management support software to set up the communication channel between the first software component and the second software component.","In yet another embodiment, there is provided a method for: inputting a configuration file into a code generator to create management support software for a management infrastructure, wherein the configuration file indicates that during operation of a distributed software application a first software component of the distributed software application needs to communicate with a second software component of the distributed software application; coupling the management support software with application software in the first software component; and configuring the management support software to set up a communication channel between the first software component and the second software component upon instruction from a manager component of the management infrastructure.","Turning to , an apparatus  in one example comprises a distributed software application  and a management infrastructure . The management infrastructure  performs one or more management operations on the distributed software application . The management infrastructure  comprises a manager component . For example, the manager component  may coordinate one or more of starting, stopping, initializing, shutting down, and monitoring the distributed software application , detecting failures of the distributed software application , recovering the distributed software application , propagating state changes about distributed software application , and the like.","The distributed software application  represents a software application divided among a plurality of executables (i.e., software capsules or software entities). For example, the distributed software application  comprises a plurality of executables  and . The distributed software application  may run on a single central processing unit (\u201cCPU\u201d) or may be divided between multiple CPUs. For example, the executable  may run on processor  and the executable  may run on processor . The processor  comprises an executable manager  and the processor  comprises an executable manager . The executable managers  and  in one example are part of the management infrastructure .","The executable managers  and  start, stop and monitor executables of the distributed software application  that run on the processors  and , such as the executables  and . To start or stop the executable , the executable manager  invokes operating system commands to start or stop the executable . The executable managers  and  monitor communication channels and\/or diagnostics on behalf of the executables  and . Should one or more of the executables  and  fail, the respective one of the executable managers  and  informs the manager component .","To detect failures of the executables  and  the executable managers  and  register with an operating system to receive notifications when the executables  and  terminate either abnormally or as a result of explicit commands sent to the executables  and . To detect failures of software components ,  and  within the executables  and , the executable managers  and  send status queries to the software components ,  and  and expect to receive status responses from the software components ,  and .","Each of the executable managers  and  comprise a communication interface  for communication with the manager component . The executable managers  and  receive instruction from the manager component . For example, the executable managers  and  may receive instructions at the communication interface  from the manager component . The executable manager  is encapsulated in an executable  running on the processor  and the executable manager  is encapsulated in an executable  running on the processor .","The executables  and  comprise one or more software components ,  and . For example, the executable  encapsulates the software components  and  and the executable  encapsulates the software component . Within each of the executables  and  may be tens, hundreds, or even thousands of other software components (e.g., analogous to the software components ,  and ).","The software components ,  and  represent software sub-entities of the executables  and . For example, the software components ,  and  represent logical blocks of software of the executables  and . The software components  and  in one example are developed independently and then put together within the executable . The software components ,  and  each perform some portion of the overall functionality of the distributed software application . The software components ,  and  work together to make the distributed software application  achieve the desired operation. The distributed software application  may provide any functionality for a computer system. The distributed software application  in one example comprises a call processing software application. For example, the distributed software application  sets up and\/or tears down telecommunication sessions in a telecommunication network.","In one embodiment, each of the software components ,  and  comprise application software , management support software , a management support software communication interface , and one or more application software communication interfaces . The software components ,  and  employ the management support software communication interface  to receive communications from the manager component . The software components ,  and  employ the application software communication interfaces  to receive communications from other software components of the software components ,  and . An application programming interface (\u201cAPI\u201d)  communicatively couples the application software  with the management support software  in each of the software components ,  and . The application software  and the management support software  can exchange information through the application programming interface .","The application software  is the portion of the software components ,  and  that performs some portion of the overall functionality of the distributed software application . The management support software  is the portion of the software components ,  and  that cooperates with the manager component  to perform management operations on the software components ,  and . For example, the management support software  communicatively couples the software components ,  and  to allow the application software  to perform some portion of the overall functionality of the distributed software application . The application software  is part of the distributed software application  and the management support software  is part of the management infrastructure .","An application developer creates the application software  of the software components ,  and  to achieve the designated functionality of the software components ,  and . For example, the application developer creates the application software  of the software components ,  and  to achieve the overall functionality of the distributed software application .","To alleviate the application developers from being required to write software into each of the software components ,  and  to interconnect the software components ,  and , a code generator in one example automatically generates the management support software . The management support software , under direction of the manager component , sets up any necessary communication channels between the software components ,  and . To create the management support software , a configuration file  in one example is input into the code generator. The configuration file  comprises connection information and\/or architecture information of the distributed software application . The code generator creates code for the management support software . The code for the management support software  is compiled and linked with the application software  in the software components ,  and . The management support software  may be different for each of the software components ,  and , as will be appreciated by those skilled in the art.","The manager component  comprises a communication interface  for receiving incoming communications. The communication interface  is employable for receiving the configuration file . The manager component  may employ other means to receive the configuration file , such as reading the configuration file  directly from a disk or file system. The communication interface  may receive communications from the executable managers  and , as well as communications from the software components ,  and .","The manager component  may also use the communication interface  for receipt of external system information from an external environment . In one example, the external environment  represents other components of the system that are in communication with the manager component . In another example, the external environment  represents another management infrastructure in communication with the management infrastructure .","The manager component  is encapsulated with zero or more other software components in an executable . The executable  that contains the manager component  may be run on either of the processors  and . The manager component  in one example is active and the apparatus  may have one or more standby manager components (e.g., analogous to the manager component ). If the manager component  fails, then one of the standby manager components becomes active and gains managerial control of the distributed software application .","One advantage to the manager component  controlling setup and teardown of communication channels is that the manager component  alleviates application developers from being required to write software into each of the software components ,  and  to set up, handle, and tear down communication channels. The manager component  controls communication channels between the software components ,  and  on behalf of the software components ,  and . For example, the manager component  interfaces with the management support software  coupled with the application software  in the software components ,  and  to set up, manage, and teardown the communication channels for the software components ,  and . Therefore, the manager component  saves the application developers effort of creating software to manage communication channels.","Another advantage of the manager component  controlling setup and teardown of communication channels is that the manager component  knows state information of the software components ,  and . The manager component  in one example wants to set up a communication channel from the software component  to the software component . The manager component  is able to wait for both of the software components  and  to be in a valid state for set up of the communication channel before instructing the management support software  of the software component  to set up the communication channel to the software component . Therefore, the manager component  serves to prevent wasted attempts to set up communication channels when one or more of the software components  and  are in invalid states.","The management infrastructure  provides management functionality as a reusable asset for distributed software applications. The management infrastructure  in one example comprises a portion of a high availability (\u201cHA\u201d) infrastructure. The manager component  in one example comprises a high availability manager component operating in a high availability infrastructure. The high availability infrastructure controls management operations on the software components ,  and  for the distributed software application . For example, the high availability infrastructure handles setting up and tearing down communication channels between the software components ,  and  for the software components ,  and . The high availability infrastructure is usable to control management operations for the distributed software application  or another distributed software application. The high availability infrastructure is able to continue processing while switching between active and standby components in the high availability infrastructure.","For the distributed software application  to work, the software components ,  and  need to interact with each other. The software components ,  and  interact by passing messages. Before the software components ,  and  can pass messages, the manager component  needs to set up communication channels for the software components ,  and . Each of the software components ,  and  may comprise a plurality of the application software communication interfaces , so each of the software components ,  and  are able to have a plurality of incoming communication channels.","Upon receipt of an indication of a need for a communication channel between a first one of the software components ,  and  and a second one of the software components ,  and , the manager component  instructs management support software  of the first one of the software components ,  and  to set up the communication channel to the second one of the software components ,  and . To begin the set up of communication channels, the manager component  imports the configuration file  that comprises connection information and architecture information of the distributed software application . The configuration file  indicates which of the software components ,  and  need communication channels to others of the software components ,  and . For example, the configuration file  in one example comprises a list of pairs of the software components ,  and  that need communication paths. The configuration file  may be appended to include new pairs of the software components ,  and  that need communication paths. The configuration file  may also be updated to change previously indicated pairs of the software components ,  and . To update the list of pairs, a developer would access the configuration file  and update the list of pairs to reflect any new changes to the distributed software application .","The configuration file  in one example may indicate a need for a communication channel between the software component  and the software component . The manager component , as part of the high availability service provided, will interact with the management support software  for software component  to automatically set up the communication channel on behalf of the software components  and . The executable manager components  and  will monitor the communication channel on behalf of the software components  and . Should the software components  and  fail and be recovered, the manager component  will be informed of the failure by one or more of the executable manager components  and , and will re-establish the communication channel between the software components  and .","To set up the communication channel, the manager component  instructs the management support software  of the software component  to set up the communication channel to the software component . The manager component  needs to relay instructions for setting up the communication channel to the management support software  of the software component . In one example, the manager component  sends the instructions in a message to the management support software communication interface  of the software component . In another example, the manager component  could pass the instructions via function call. In yet another example, the manager component  could pass the instructions by setting bits in shared memory. The management support software  of the software component  would access the bits from the shared memory to receive the instructions for setting up the communication channel. After setup of the communication channel, the management support software  sends a confirmation notification to the manager component  to indicate success of the setup.","Communication between the manager component  and the management support software  of the software components ,  and  is resilient to failure. For example, the messages may employ timeouts to handle dropped or delayed messages or confirmation notifications. Based on detection of a non-responsive software component of the software components ,  and , the manager component  may determine that non-responsive software component has failed. The manager component  may then initiate a recovery operation on the non-responsive software component.","In one example, the manager component  sends a message to the management support software  to instruct the management support software  to set up a single communication channel. In another example, the message instructs the management support software  to set up a plurality of communication channels. The manager component  may send the message to set up one or more communication channels and\/or close one or more channels. For example, the manager component  may send a single message that instructs the management support software  to close a first communication channel and set up a second channel.","The manager component  may also instruct the management support software  to tear down a communication channel. For example, the manager component  may determine or receive a request that indicates a desire or intent to tear down the communication channel. In one example, the manager component  may tear down the communication channel to end communication between any two of the software components ,  and . In another example, the manager component  may tear down the communication channel upon failure of one or more of the software components ,  and . In yet another example, the manager component  may tear down the communication channel to perform software upgrades to one or more of the software components ,  and .","To tear down the communication channel, the manager component  in one example instructs the management support software  of the software component  to tear down the communication channel to the software component . The manager component  needs to relay instructions for tearing down the communication channel to the management support software  of the software component . The manager component  relays the instructions to tear down the communication channel analogously to the relay of instructions for setting up the communication channel, as described herein. After teardown of the communication channel, the management support software  sends a confirmation notification to the manager component  to indicate success of the shutdown.","Turning to , an illustrative description of one exemplary operation of the apparatus  is now presented, for explanatory purposes. The manager component  comprises a high availability manager component operating in a high availability infrastructure. To begin operation of the apparatus , the distributed software application  is configured for control by the manager component , and the manager component  coordinates the initialization of the distributed software application . Exemplary logic  serves to allow the manager component  to set up and tear down communication channels between the software components ,  and . The logic  employs one or more steps, for example, STEPS , , , , , , and . An application developer, a system architect, or any other developer performs the STEPS , , and  of  and the manager component  performs the STEPS , ,  and  of .","At STEP , the configuration file  is created to store connection information and\/or architecture information of the distributed software application . The configuration file  indicates which of the software components ,  and  need to communicate with each other. For example, the configuration file  may indicate a need for a communication channel  from the software component  to the software component . The configuration file  may also indicate a need for a communication channel  from the software component  to the software component .","At STEP , after the configuration file  has been written to comprise a complete representation of the required connection information for the distributed software application , the configuration file  is run through a code generator to create code for the management support software . The code generator creates object reference tables that store communication channel information for each possible type of the application software communication interfaces  that are used by the software components ,  and .","An application developer writes code for the application software  to perform some portion of the overall functionality of the distributed software application . At STEP , to create the software component , the code for the application software  is compiled, the code for the management support software  is compiled, and then the management support software  is linked together with the application software . The software components  and  are created analogously to the software component , as described herein.","At STEP , upon startup of the manager component , the manager component  receives the configuration file . For example, the configuration file  is sent to the communication interface  of the manager component . At STEP , the manager component  analyzes the configuration file  to determine which of the software components ,  and  need to communicate with each other. For example, the manager component  determines that the software component  needs a communication channel  to the software component  and the software component  needs a communication channel  to the software component .","At STEP , to setup the communication channel , the manager component  instructs the management support software  of the software component  to set up the communication channel  to the software component . For example, the manager component  sends a message  to the management support software communication interface  of the software component . The message  in one example comprises identification and\/or location information of the software component  to instruct the management support software  of the software component  to set up the communication channel  to the software component . The message  indicates which one of the application software communication interfaces  of the software component  is the target for the communication channel . To setup the communication channel , the manager component  instructs the management support software  of the software component  to set up the communication channel  to the software component , analogously to the setup of the communication channel , as described herein.","Upon receipt of the messages  and  to set up the respective communication channels  and , the management support software  of the software components  and  begins to set up the communication channels  and . For example, the management support software  employs the identification information of the software components  and  from the messages  and  and local information about the operating system platforms and\/or communication mechanisms to create the communication channels  and .","At STEP , to tear down one of the communication channels  and , the manager component  instructs the management support software  of the appropriate one of the software components  and  to tear down the one of the communication channels  and . For example, the manager component  sends a teardown message to the management support software communication interface  of the software component . The teardown message in one example comprises an indication of the communication channel  to instruct the management support software  of the software component  to tear down the communication channel .","Upon completion of the setup or teardown of a communication channel, the management support software  may notify the application software . For example, once the management support software  has set up the communication channel , the management support software  employs the application programming interface  to notify the application software  of the existence of the communication channel . A single notification from the management support software  to the application software  may refer to a single communication channel or a plurality of communication channels.","If the communication channel  fails or is torn down, the management support software  may notify the application software  that the communication channel  is currently unavailable for communication. Upon failure of the communication channel , one or more failure detection components (e.g., one or more of the executable managers  and ) may alert the manager component  of the failure. The failure detection components may also alert the manager component  upon failure of the one or more of the software components ,  and , the executables  and , and\/or the processors  and , as will be appreciated by those skilled in the art. After any necessary recovery actions have taken place, the manager component  may then instruct the management support software  to reestablish the communication channel . Once the manager component  reestablishes the communication channel, the management support software  would then notify the application software  that the communication channel is again available for communication. If the software component  in one example becomes unavailable and it is desirable to not close the communication channel , then the management support software  could notify the application software  that the communication channel  is available, but in an invalid state since the software component  is unavailable.","Once the management support software  has set up the communication channel , the application software  of the software component  needs a logical identifier of the communication channel  to use the communication channel . The logical identifier of the communication channel  may comprise identification information of the software component , identification information of the application software communication interface  of the software component , and\/or identification information of the communication channel . The management support software  in one example assigns different logical identifiers to each of the communication channels  and . The management support software  in one example generates a specific type of logical identifier to match the type of application software communication interface . The logical identifiers must be known by the application software , and may be derived from a variety of sources, including information specified in the configuration file .","For the application software  of the software component  to be able use the communication channel , the application software  of the software components  and  can employ logical identifiers of the communication channels  and  to direct communications over the communication channels  and  to the software components  and , respectively. In one example, the application software  of the software components  and  employ Common Object Request Broker Architecture (\u201cCORBA\u201d) as a communication transport across the communication channels  and . In another example, the application software  employs Transmission Control Protocol\/Internet Protocol (\u201cTCP\/IP\u201d) as the communication transport across the communication channels  and . Other examples utilizing different communication transports are also possible, as will be appreciated by those skilled in the art.","The apparatus  in one example comprises a plurality of components such as one or more of electronic components, hardware components, and\/or computer software components. A number of such components can be combined or divided in the apparatus . An exemplary component of the apparatus  employs and\/or comprises a set and\/or series of computer instructions written in or implemented with any of a number of programming languages, as will be appreciated by those skilled in the art. The apparatus  in one example comprises any (e.g., horizontal, oblique, or vertical) orientation, with the description and figures herein illustrating one exemplary orientation of the apparatus , for explanatory purposes.","The apparatus  in one example employs one or more computer-readable signal-bearing media. The computer-readable signal-bearing media store software, firmware and\/or assembly language for performing one or more portions of one or more embodiments of the invention. Examples of a computer-readable signal-bearing medium for the apparatus  comprise recordable data storage medium of the manager component . The computer-readable signal-bearing medium for the apparatus  in one example comprise one or more of a magnetic, electrical, optical, biological, and atomic data storage medium. For example, the computer-readable signal-bearing medium comprises floppy disks, magnetic tapes, CD-ROMs, DVD-ROMs, hard disk drives, and electronic memory. In another example, the computer-readable signal-bearing medium comprises a modulated carrier signal transmitted over a network comprising or coupled with the apparatus , for instance, one or more of a telephone network, a local area network (\u201cLAN\u201d), a wide area network (\u201cWAN\u201d), the Internet, and a wireless network. The steps or operations described herein are just exemplary. There may be many variations to these steps or operations without departing from the spirit of the invention. For instance, the steps may be performed in a differing order, or steps may be added, deleted, or modified.","Although exemplary implementations of the invention have been depicted and described in detail herein, it will be apparent to those skilled in the relevant art that various modifications, additions, substitutions, and the like can be made without departing from the spirit of the invention and these are therefore considered to be within the scope of the invention as defined in the following claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"DESCRIPTION OF THE DRAWINGS","p":["Features of exemplary implementations of the invention will become apparent from the description, the claims, and the accompanying drawings in which:",{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":["FIG. 2","FIG. 1"]}]},"DETDESC":[{},{}]}
