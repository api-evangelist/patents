---
title: Activating streaming video in a blu-ray disc player
abstract: Techniques are described herein for using cryptographic elements of the Advanced Access Content System (AACS) in a client-server environment to cryptographically authenticate client applications that are executing on non-revoked AACS-compliant playback devices. The techniques described herein may be used to protect a server application from providing information to client applications executing in non-AACS-compliant or revoked environments. In one embodiment, the techniques are used to authenticate a Blu-ray Disc Java Application executing on a non-revoked AACS-compliant Blu-ray Disc Player.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08234715&OS=08234715&RS=08234715
owner: Netflix, Inc.
number: 08234715
owner_city: Los Gatos
owner_country: US
publication_date: 20090413
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","COPYRIGHT NOTICE","BACKGROUND","DETAILED DESCRIPTION","Functional Overview","Content Protection with AACS","AACS Permissions","AACS Layer","AACS Permission Validation","Revoking a Playback Device","Using AACS Permissions for Client Authentication","Generating an Authentication Permission","Authentication of Revoked Playback Devices","Exemplary Client-Server Environment","Subscriber Key Disc","Activating Streaming Video in a Blu-Ray Disc Player Using Subscriber Key Discs","Key Disc\/Device Subscriber Binding","Revocation Using Subscriber Key Discs","Pseudo-Code for BD-J Application","Hardware Overview"],"p":["The present disclosure relates generally to cryptographic-based authentication in a client-server environment, and more particularly to cryptographic-based authentication of a client application executing on an Advanced Access Content System (AACS) compliant device communicating with a server application.","A portion of the disclosure of this patent document contains material which is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure, as it appears in the Patent and Trademark Office patent file or records, but otherwise reserves all copyright rights whatsoever. Copyright \u00a9 2009 Netflix, Inc.","The Blu-ray Disc Association (BDA) is an industry consortium responsible for establishing format standards and specifications for the Blu-ray Disc media format. For example, the BDA has authored a format specification related to playback of pre-recorded audiovisual programs by Blu-ray Disc playback devices (BD-Players) known generally as the \u201cBlu-ray Disc Read-Only (ROM) Format\u201d. Other format specifications authored by the BDA include the \u201cBlu-ray Disc Recordable (R) Format\u201d and the \u201cBlu-ray Disc Rewritable (RE) Format\u201d. The BDA format specifications are referred to herein collectively as the Blu-ray Disc Specification, or BD-Specification.","An aspect of the BD-Specification facilitates the development of computer program logic or applications for the Blu-ray Disc Player platform that provide enhanced or interactive content to viewers. These applications are referred to in the BD-Specification as Blu-ray Disc Java Applications, or BD-J Applications. For example, a BD-J Application may be authored that provides, among other things, a picture-in-picture movie commentary or an interactive game to accompany the primary Blu-ray Disc content.","The version of the BD-Specification known as \u201cBD-Live\u201d requires compliant BD-players to implement networking functionality for connecting to a data network, such as the Internet. A BD-J Application executing on a compliant BD-player can use the network capability to download and play back content such as, for example, a full-length motion picture received from a remote server over the Internet. For example, a subscription based content provider may author a BD-J Application that, upon execution by a BD-Player, connects to a server and downloads a list of movie titles that are available for viewing on a pay-per-view basis or as part of a subscription service. The viewer may then select one of the titles from a menu presented on the viewer's television screen whereupon the BD-J Application will download successive portions of the selected movie title from a server and instruct the BD-Player to playback the portions as they are received. In this way, a BD-J Application executing on a BD-Player can provide playback of streaming video downloaded over the Internet or other network.","To protect against unauthorized access to copyrighted content downloaded over a network, BD-Players may implement the Advanced Access Content System (AACS) content protection system. The AACS is a standard for content distribution and digital rights management developed by an industry consortium with the aim of restricting unauthorized access to AACS protected content recorded on removable media (e.g., Blu-ray Discs) or downloaded over a network such as the Internet. The AACS standard includes the following specification books authored by the AACS consortium members: \u201cRevision 0.91 Feb. 17, 2007\u201d, \u201c-0.92 Nov. 29, 2008\u201d, and \u201c-0.921 Jun. 6, 2008.\u201d These books are referred to herein collectively as the AACS Specification.","Content providers that deliver AACS protected content over the Internet and network-enabled playback devices that download AACS protected content may implement a certain encryption\/decryption scheme to protect and access content. While AACS may be sufficient to protect against unauthorized access to AACS protected content, AACS does not provide explicit mechanisms for a content provider that delivers AACS protected content over a network to authenticate clients such as playback devices that request content or request other information such as, for example, subscription information like movie viewing history or billing information.","What is needed are techniques in a networked client and server for the server to reliably authenticate client applications that are executing in AACS compliant environments. Ideally, the solution should allow the server to reliably distinguish between client applications that are executing on non-revoked, AACS compliant platforms and client applications that are executing in revoked AACS environments or not executing within an AACS-compliant environment. Further, the solution should allow the server to reliably identify the client with whom the server is communicating such that the server can safely communicate private information to the client. These and other needs are addressed by the invention described herein.","The approaches described in this section are approaches that could be pursued, but not necessarily approaches that have been previously conceived or pursued. Therefore, unless otherwise indicated, it should not be assumed that any of the approaches described in this section qualify as prior art merely by virtue of their inclusion in this section.","In the following description, for the purposes of explanation, numerous specific details are set forth in order to provide a thorough understanding of the present invention. It will be apparent, however, that the present invention may be practiced without these specific details. In other instances, well-known structures and devices are shown in block diagram form in order to avoid unnecessarily obscuring the present invention.","Reference in the following description to \u201cone embodiment\u201d or \u201can embodiment\u201d means that a particular feature, structure, or characteristic described in connection with the embodiment is included in at least one embodiment of the invention. The appearances of the phrase \u201cin one embodiment\u201d or \u201cin an embodiment\u201d in various places in the following description are not necessarily all referring to the same embodiment.","Techniques are described herein for using cryptographic elements of the Advanced Access Content System (AACS) in a client-server environment to cryptographically authenticate client applications that are executing on non-revoked AACS-compliant playback devices. The techniques described herein may be used to protect a server application from providing information to client applications executing in non-AACS-compliant or revoked environments. In one embodiment, the techniques are used to authenticate a Blu-ray Disc Java Application executing on a non-revoked AACS-compliant Blu-ray Disc Player.","In general, to protect content such as a feature length movie using AACS, a content provider cryptographically encrypts the content using a secret cryptographic \u201cTitle Key\u201d associated with the content. The encrypted content and the Title Key are then provided to a non-revoked AACS-compliant playback device which then decrypts the content using the Title Key before playback.","To prevent access to the content by a revoked or non-compliant playback device, the Title Key itself is encrypted in a manner that allows only non-revoked AACS-compliant playback devices to access the unencrypted form of the Title Key. Specifically, the Title Key itself is cryptographically encrypted using a secret cryptographic \u201cVolume Unique Key. The Volume Unique Key is cryptographically derivable by a non-revoked AACS-compliant playback device based on a \u201cVolume ID\u201d and a secret cryptographic \u201cMedia Key\u201d.","Typically, the Volume ID and the Media Key are stored on recorded media such as, for example, a Blu-ray Disc, along with the encrypted content and the encrypted Title Key. The secret Media Key is typically contained with a \u201cMedia Key Block\u201d issued by the AACS Licensing Administrator (AACS LA). The AACS LA is responsible for licensing AACS technology to manufacturers who wish to market AACS-compliant playback devices to consumers.","The Media Key Block is a component of a subset difference tree key management system used in AACS. The Media Key Block is a data block that provides access to the secret Media Key. The secret Media Key in the MKB can be accessed by any AACS-compliant device having \u201cDevice Keys\u201d that have not been revoked by the AACS LA. Like the Media Key Block and secret Media Key, Device Keys are also assigned by the AACS LA to playback device manufacturers to include in each compliant playback device.","To generate the Volume Unique Key which can be used to decrypt the encrypted Title Key, a non-revoked AACS-compliant playback device uses its Device Keys to access the Media Key within the Media Key Block. One the Media Key is obtained from the Media Key Block, the playback device can generate the Volume Unique Key. In one embodiment, a non-revoked AACS-compliant playback device generates a Volume Unique Key by applying an Advanced Encryption Standard (AES)-based cryptographic one way function to a Volume ID obtained from the removable media inserted into the playback device and the Media Key obtained from the Media Key Block.","The Media Key Block is formatted in such a way that allows all compliant playback devices, each using their set of secret Device Keys, to calculate the secret Media Key using a known subset-difference tree approach. With the subset-difference tree approach, if a playback device is compromised in a way that threatens the integrity of the AACS, the AACS LA can issue an updated Media Key Block that causes the compromised playback device to be unable to use the Media Key Block to calculate the correct secret Media Key. In this way, a playback device or a set of playback devices can be \u201crevoked\u201d because without the current Media Key a playback device will not be able to access the unencrypted form of the Title Key necessary to decrypt AACS protected content.","While AACS may be sufficient to protect against unauthorized access to AACS protected content, AACS does not provide explicit mechanisms for a content provider that delivers AACS protected content over a network to reliably authenticate clients that request the content or other information. For example, there is no explicit mechanism provided by AACS that allows a content provider to reliably distinguish between an \u201cauthorized\u201d client application executing on a non-revoked AACS-compliant playback device and other \u201cunauthorized\u201d applications executing in non-compliant or revoked environments.","A mechanism to reliably authenticate clients would be useful to a content provider to ensure that it provides subscriber-specific information only to clients that can be reliably associated with a particular subscriber. For example, continuing the subscription based content provider example from above, in addition to developing a BD-J Application that allows a subscriber to select content to download from the content provider, the content provider may wish to develop a BD-J Application that also allows the subscriber to view, on his or her home television screen, private subscription information such as, for example, billing information or a listing of previously watched movies. In such a case, the content provider may wish to ensure that such private information is delivered only to a client that can be reliably associated with the particular subscriber to which the personal information belongs.","Further, a mechanism to reliably distinguish between these environments may also be useful to a content provider to ensure, for example, that the content provider provides AACS protected content only to non-revoked AACS-compliant playback devices.","Playback devices that support on-line connections and playback of downloaded AACS protected may implement \u201cAACS Permissions\u201d.","An AACS Permission is cryptographic data that specifies whether a playback device is allowed to playback a title that requires an on-line connection to download content associated with the title (also known as an \u201cenhanced title\u201d). As used herein, the term \u201ctitle\u201d, unless otherwise indicated, refers to a particular path through AACS protected content. AACS protected content such as a feature length movie may have more than one path through it and hence more than one title. For example, one title might correspond to the movie as shown in the theaters and another title might correspond to the full-featured version of the movie with some extra scenes.","In one embodiment, an AACS permission may be created by a server during communication between the playback device and the server. For example, the playback device may send a network request to the server that requests to play a certain title and also provides billing information. After verifying the billing information, the server may return an AACS Permission to the playback device which the playback device verifies before playing back the content of the requested title.","AACS-compliant playback devices that support playback of enhanced titles may implement a specified Application Programming Interface (API) in an AACS Layer of the playback device that allows a client application executing within the playback device to validate AACS Permissions generated by a server. The AACS Layer is a secure layer within a playback device that encapsulates AACS elements of the playback device such as secret Device Keys and cryptographic algorithms used by AACS. The AACS Layer is secure in the sense that client applications executing on the playback device, for example Blu-ray Disc Java Applications, do not have direct access to the AACS elements encapsulated by the layer and must use the AACS Layer API to access the elements.",{"@attributes":{"id":"p-0034","num":"0033"},"figref":["FIG. 1","FIG. 1"],"b":"100","ul":{"@attributes":{"id":"ul0001","list-style":"none"},"li":{"@attributes":{"id":"ul0001-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0002","list-style":"none"},"li":["1. The client application executing on an AACS-compliant playback device desires to play an enhanced title (being asked to do by user interaction with the playback device). The client application calls the AACS Layer passing an identifier (\u201cTitle ID\u201d) of the enhanced title it wants to play.","2. The AACS Layer generates a 128-bit random number (\u201cPermission Nonce\u201d) and returns the Permission Nonce to the client application. The client application sends the Permission Nonce to a server together with any other information needed by the server to determine whether permission to the play the enhanced title should be granted such as, for example, the Title ID and billing information.","3. If the server determines that permission should be granted, the server generates a permission using the following cryptographic formula, explained in greater detail below, and sends the permission to the client application.\n        \n        ","4. Upon receiving the permission from the server, the client application passes the permission to the AACS Layer which validates the permission by calculating its own copy of the permission using the formula in step 3 and comparing the calculated permission with the permission received from the server. If the permission received from the server and the permission calculated by the AACS Layer match, the AACS Layer indicates to the client application that the client application has permission to play the enhanced title."]}}}},"According to the formula in step 3 above, an AACS permission may be generated by applying the Advanced Encryption Standard (AES) symmetric block cipher algorithm in Electronic Codebook (ECB) mode of operation using a 128-bit Volume Unique Key (Kvu) to encrypt the bit-wise Exclusive-OR (XOR) of the Permission Nonce generated in step 2 and other Permission Data. The format and content of the other Permission Data is agreed upon by the AACS Layer and the server and may include, among other things, information exchanged between the client and the server as part of the permission validation process. In one embodiment, the Permission Data is the result of an XOR of a particular Title Key with the cryptographic hash of the bit-wise concatenation of a particular Volume ID and a particular Title ID. In one embodiment, the particular Title Key is the unencrypted form of a particular Title Key and the particular Volume ID and particular Title ID are obtained from the removable media currently inserted into the playback device such as, for example, a Blu-ray Disc inserted into an AACS-compliant Blu-ray Disc Player.","As explained above, the AACS Layer may obtain the secret Media Key by successfully processing the Media Key Block. Playback devices that have non-revoked Device Keys issued by the AACS LA can access the secret Media Key in the Media Key Block. Therefore, playback devices that have non-revoked Device Keys can generate the Volume Unique Key that is used in the AACS permission formula. Thus, playback devices that have non-revoked Device Keys can validate, in the AACS Layer, an AACS Permission using the AACS permission formula.","The Media Key Block may be used to revoke an AACS-compliant playback device's ability to decrypt encrypted title keys. The Media Key Block revocation mechanism can also revoke the playback device's ability to validate an AACS Permission. This is because, as explained previously, successfully validating an AACS Permission requires access to the secret Media Key contained in the Media Key Block.","In one embodiment, to revoke a particular playback device or a group of playback devices, the AACS LA issues a new Media Key Block containing a new secret Media Key. The new Media Key Block can be composed, using the subset difference tree key management system, in such a way that the set of Device Keys used by the particular playback device (or particular group of playback devices such as those made by a particular manufacturer) can no longer access the secret Media Key.","In one embodiment, when a new Media Key Block is issued by the AACS LA, thereafter a content provider generates AACS Permissions based on the new secret Media Key contained in the new Media Key Block. When a client application requests permission to play an enhanced title, the server responds with an AACS Permission generated using the new secret Media Key from the new Media Key Block. In one embodiment, the server also responds with the new Media Key Block so that the playback device can access the new Media Key (provided the playback device is not revoked by the new Media Key Block).","In one embodiment, the client application passes the new Media Key Block to the AACS Layer when validating an AACS Permission. If the playback device upon which the client application is executing has not been revoked by the new Media Key Block, then the AACS Layer can successfully validate the AACS Permission using the new Media Key Block. If, however, the new Media Key Block revokes the Device Keys of the playback device, then the AACS Layer cannot successfully validate the AACS Permission.","While the AACS Permission scheme described above may permit a server to grant or deny permission to an AACS-compliant playback device to play an enhanced title, it does not protect the server from communicating protected information to revoked playback devices or even to client applications developed to \u201cimpersonate\u201d an AACS-compliant playback device. For example, a client application could be developed to execute on a desktop computer that does not have an AACS Layer and that \u201cpretends\u201d to validate an AACS Permission before playing back an enhanced title. This application could then request AACS protected content or other information from the server under the guise that it is a non-revoked AACS-compliant playback device with \u201cpermission\u201d to play back an enhanced title. Before providing AACS protected content or private information to a client application, it would be useful for the server to authenticate that, in fact, the client application is executing on a non-revoked AACS-compliant playback device.",{"@attributes":{"id":"p-0042","num":"0051"},"figref":"FIG. 2","b":"200"},"Referring to , initially, server  assumes that any client application  that initiates a communication session with server  is unauthenticated. In one embodiment, process  is performed before client application  attempts to obtain permission from server  to play an enhanced title. Both server  and client application  may comprise one or more sequences of computer-executable instructions which when executed by a processor perform the server-side and client-side of process  respectively.","Steps , , , , and  of process  define a loop  that is repeated N times by the client application  and server  with the purpose of generating sufficient authentication data upon which server  can make an authentication decision in step . For the purpose of discussion, the data upon which server  makes an authentication decision in step  is referred to herein as \u201cclient authentication data.\u201d","Three approaches are described for generating client authentication data. However, process  is not limited to any particular approach for generating client authentication data and other approaches may be substituted within the spirit and scope of the invention. Further, the three approached described below are not exclusive of one another and may be combined in any combination within the spirit and scope of the invention.","In a first approach for generating client authentication data, server  sends a bogus authentication permission in step  in each of the first N-1 iterations of loop , where N is selected randomly by server  and is unknown to client application . Then, during the N-th iteration of the loop, server  sends a valid authentication permission in step . Server  authenticates client application  based on whether client application  ceases to send a Permission Nonce in step  following the N-th iteration of the loop. If client application  stops sending a Permission Nonce in step  prior to the N-th iteration of the loop or sends a Permission Nonce after the N-th iteration, then server  determines that the client application  is executing on a revoked or non-compliant playback device. If, however, client application  stops sending a Permission Nonce in step  immediately after the N-th iteration of loop , then the server  has authenticated client application  as executing in a non-revoked AACS-compliant environment. Server  makes this authentication decision on the assumption that only a non-revoked AACS-compliant playback device can tell, by validating the authentication permission using the API of AACS Layer , that the N-th authentication permission is a valid authentication permission.","In a second approach for generating client authentication data, the value of N is known to both server  and client application  and server  distributes sending bogus authentication permissions and valid authentication permissions in step  over the N iterations of loop  in a random manner. This effectively creates an N-bit random number that the client application  can decipher only by correctly determining when server  sent a bogus authentication permission and when server  sent a valid authentication permission during the N iterations of the loop.","Continuing the second approach, after the N iterations of loop , client application , in optional step , returns a bit pattern of N-bits representing when client application  determined it received a bogus authentication permission and when client application  determined it received a valid authentication permission. For example, client application  may return an N-bit datum in which the i-th bit is 0 if the client application  determined that is received a bogus authentication permission during the i-th iteration of loop  and in which the i-th bit is 1 if client application  determined that it received a valid authentication permission during the i-th iteration of the loop. Server  may authenticate client application  in step  by comparing the received bit pattern to when it actually sent bogus authentication permissions and valid authentication permissions during the N iterations of the loop.","In a third approach for generating client authentication data, loop  is performed once at regular time intervals, for example, once every 2 hours. This approach forces client application  to renew authentication over a period of time such as, for example, while the playback device executing client application  is powered on and connected to server .","In one embodiment, to prevent a malicious client application  from causing server  to \u201ctell\u201d which of the authentication permissions are valid authentication permissions and which are bogus authentication permissions, server  stores up to the last N Permission Nonces sent by client application  in step . If Client Application  repeats a permission nonce as indicated by the Permission Nonces stored by the server, then server  may to refuse to authenticate client application .","In each of the N iterations of loop  of process , server  generates, in step , either a valid authentication permission using the AACS Permission Formula or a bogus authentication permission. For example, during the i-th iteration of the loop, if server  determines that a valid authentication permission should be generated according to one of the three approaches described above, then server  generates a valid authentication permission using the AACS permission formula and the Permission Nonce received in step  during that iteration (i.e., the i-th iteration) of the loop. Alternatively, if server  determines that a bogus authentication permission should be generated, then server  generates a random number or pseudo-random number of length equal to the length of a valid authentication permission. In one embodiment, both the valid authentication permissions and the bogus authentication permissions are 16-bytes in length.","If the AACS Licensing Administrator (AACS LA) issues a new Media Key Block (MKB) that revokes Device Keys of an AACS-compliant playback device, server  can generate valid authentication permissions using the new Media Key of the new Media Key Block in step . In addition to generating authentication permissions using the new Media Key Block, server  may send the new Media Key Block containing the new Media Key to client application  in step . The AACS Layer  on an AACS-compliant device using Device Keys revoked by the new Media Key Block will be unable to verify valid authentication permissions sent from server . Thus, revoked playback devices will be unable to distinguish between valid authentication permissions and bogus authentication permissions.","In one embodiment, sever  sends the current Media Key Block each time it performs step  of process . In another embodiment, server  provides client application  with the current Media Key Block in a communication exchange prior to entering the loop of process . In one embodiment, client application  passes a new Media Key Block received from server  to AACS Layer  using the AACS Layer API. In one embodiment, client application  passes the new Media Key Block to AACS Layer  in step  when client application  requests the AACS Layer  to validate an authentication permission.","In some AACS-compliant playback devices, for example, Blu-ray Disc Players, the AACS Layer API does not provide an API so that a client application such as client application  can provide a new Media Key Block sent from a server such as server . These playback devices only obtain the Media Key Block from removable media currently inserted into the playback device. Accordingly, in one embodiment, when the AACS Licensing Administrator (AACS LA) issues a new Media Key Block, the content provider issues new removable media to content subscribers that include the new Media Key Block. Playback devices using the old Media Key Block and revoked playback devices will be unable to successfully authenticate with server .",{"@attributes":{"id":"p-0055","num":"0064"},"figref":"FIG. 3","b":["300","200","300","301","302","301","303","305","303","200","305","200","305","301"]},"Playback device  comprises client-side client authentication logic , AACS Layer Logic , local storage , and optionally, subscriber key disc  inserted into player . For the purpose of illustrating a clear example,  shows one playback device , but in a practical embodiment there may be many thousands of playback devices  concurrently served by server computer system . In one embodiment, playback device  is any AACS-compliant playback device that includes AACS Layer Logic . In one embodiment, playback device  is an AACS-compliant Blu-ray Disc Player.","Each of the server computer system , playback device , server-side client authentication logic , client-side client authentication logic , and AACS Layer logic  may be implemented in various embodiments using a computer, one or more application-specific integrated circuits (ASICs) or other digital electronic logic, one or more computer programs, modules, objects, methods, or other software elements. For example, in one embodiment, server computer system  and playback device  may each comprise a special-purpose computer having particular logic configured to implement the respective elements and functions described herein. In another embodiment, server computer system  and playback device  may comprise a general purpose computer as in , loaded with one or more stored programs with transform the general purpose computer into a particular machine upon loading and execution.","In one embodiment, playback device  may have a central processing unit (CPU) for executing instructions of client-side client authentication logic . In one embodiment, client-side client authentication logic  is implemented as a Blu-ray Disc Java Application. In one embodiment, client-side client authentication logic  comprises one or more sequences of computer executable instructions for performing the client-side steps of process . In addition, client-side client authentication logic  may also comprise instructions for providing various subscription services such as, for example, allowing a subscriber to select, download, and view AACS protected content or manage personal subscription information such as, for example, billing information, personal movie preferences, movie queue information, and the like.","In one embodiment, the instructions comprising client-side client authentication logic  are stored on a non-volatile memory of player  such as, for example, on a hard disk or flash memory of player . In another embodiment, instructions comprising client-side client authentication logic  may be read by player  from a removable non-volatile computer-readable storage medium inserted into player  such as, for example, a Blu-ray Disc. In another embodiment, instructions comprising client-side client authentication logic  may be received over data network from a server such as server computer system .","In one embodiment, client-side client authentication logic  is implemented as two applications: (1) a bootstrap application stored in the firmware of player  or on a Blu-ray Disc which, when executed by player , contacts a server to download the latest version of (2) the second application that comprises the most up-to-date instructions for performing the client-side steps of process .","In one embodiment, AACS Layer Logic  is a secure AACS-compliant sub-system of player  that provides the AACS Layer API as described in the AACS specification.","Local storage or memory  is a hard disk or flash memory for storing files; including AACS protected content downloaded from servers.","As explained above, AACS Layer Logic  uses a Volume ID when generating the Volume Unique Key. Also as explained above, the Volume Unique Key is used by both the server and client in the AACS permission formula when generating and validating permissions respectively. In one embodiment, the Volume ID is assigned by a content provider to AACS protected content to uniquely identify a title or a set of titles.","In one embodiment, to successfully validate a valid authentication permission, AACS Layer Logic  may use the same Volume ID that server-side client authentication logic  used to generate the valid authentication permission. AACS Layer Logic  in a Blu-ray Disc Player, when generating the Volume Unique Key, may obtain the Volume ID from the Blu-ray Disc currently inserted into the player such as, for example, subscriber key disc  inserted into player  of . Further, the Volume ID may be stored on the Blu-ray Disc in a way that cannot be duplicated by consumer Blu-ray recording devices so as to prevent indiscriminate copying of Blu-ray Discs. To prevent indiscriminate copying, the Volume ID may be stored in the Burst Cutting Area of the Blu-ray Disc. The Burst Cutting Area is a special area of a Blu-ray Disc that can only be recorded with data using a specialized expensive laser that is generally not commercially available.","In addition to the Volume ID, the Burst Cutting Area of Blu-ray Discs may also contain a Pre-recorded Media Serial Number (PMSN). The PMSN recorded on a Blu-ray Disc may be a 128-bit number of which  of those bits may be unique. The Volume ID may not be unique for each Blu-ray Disc as the Volume ID is typically associated with an AACS title or set of titles independent of the medium the content of the title or titles is stored on. However, the PMSN may be unique for each Blu-ray Disc. The AACS Layer API on AACS-compliant Blu-ray Players may provide an interface for a client application such as client-side client authentication logic  to obtain the Volume ID and the PMSN from the currently inserted Blu-ray Disc.","In one embodiment, a content provider uses information recorded in the Burst Cutting Area of Blu-ray Discs to aid the content provider in registering subscribers for services. In the embodiment, the content provider provides a Blu-ray Disc (\u201csubscriber key disc\u201d) to each subscriber. Each key disc contains a unique key disc identifier in the  bit portion of the PMSN. At least two particular features of the PMSN make using the PMSN especially suitable for use in registering subscribers. First, 104 bits of the 128-bit PMSN may contain a random number assigned by the content provider making guessing a subscriber identifier difficult as there would be 2or 2.02824096\u00d710different possible key disc identifiers. Second, since the PMSN is recorded in the Burst Cutting Area of a Blu-ray Disc which cannot be copied without specialized expensive equipment, a subscriber or other person in possession of a subscriber key disc cannot practically make indiscriminate copies of a key disc to gift or sell to others.",{"@attributes":{"id":"p-0067","num":"0076"},"figref":["FIG. 4","FIG. 2"],"b":["400","200","400","400"]},"In one embodiment, process  begins with the content provider generating one or more key discs  that include computer-executable instructions comprising a Blu-ray Disc Java (BD-J) Application or bootstrap code for obtaining instructions of BD-J Application from a server such as server  of . In addition, each key disc  contains in the Burst Cutting Area a Pre-Recorded Media Serial Number (PMSN) and a Volume Identifier (Volume ID). The Volume ID may or may not be unique for each key disc at the content provider's discretion.","For each key disc, a portion of the PMSN may contain a unique random number up to 104 bits in length. In one embodiment, the content provider places a unique key disc identifier in the 104 bit portion of the PMSN that uniquely identifies each generated key disc. In one embodiment, each unique key disc identifier comprises a disc identifying portion and a keying material portion. In another embodiment, the unique key disc identifier does not comprise a keying material portion and keying material data is stored in the Burst Cutting Area of the key disc separately from the PMSN. When communicating with server logic , client logic  sends the disc identifying portion to uniquely identify the key disc currently inserted into playback device . In one embodiment, the key material portion is used by client logic  for cryptographic message authentication (e.g., as a key for calculating a Hash Message Authentication Code) when communicating with server logic .","In step , a subscriber record is created in database  for generated key discs. Each subscriber record may be uniquely identifiable by the key disc identifier of the corresponding key disc. Further, when created, the subscriber record may be set to an initial state such as, for example, \u201cunregistered\u201d that indicates that no attempt has been made as of yet to use the corresponding key disc to activate streaming video in a Blu-ray Disc Player. Optionally, each subscriber record may contain data that is unique to, or is to be associated with, the key disc identifier recorded in the corresponding key disc. For example, if the content provider chooses to create key discs with unique Volume IDs, then each subscriber record in database  may contain the Volume ID recorded into the Burst Cutting Area of the corresponding key disc. In addition, any information that is useful to associate with the key disc identifier such as, for example, any information needed by server-side client authentication logic  to generate a valid AACS Permission for a particular key disc, may also be stored in a subscriber record to be associated with the particular key disc.","In step , a subscriber receives a key disc containing a unique key disc identifier. The subscriber inserts the key disc into playback device , and powers-on the player . This causes player  to begin execution of client logic .","While step  is shown in the embodiment depicted in  as being performed prior to step , in one embodiment, step  is performed after step . In particular, in one embodiment, a subscriber record is created when client  contacts server  in step  for the first time after receiving a key disc in step .","In step , client logic  invokes the AACS Layer API of AACS Layer Logic  to obtain the Pre-recorded Serial Number (PMSN) of the currently inserted key disc. The notation \u201cMediaAttribute.getPMSN( )\u201d of step  in  is pseudo-code that refers to a function call of the getPMSN( ) function on an instance of the MediaAttribute class of the object-oriented AACS Layer API in a Blu-ray Disc Player. The AACS Layer API of AACS Layer Logic  in Blu-ray Disc Players is described in detail in Chapter 4 of the --of the AACS Specification. Steps  and  of  contain similar notation to that of step  and also refer to a function call on an instance of a class of AACS Layer API of AACS Layer Logic .","Steps , , , , and  of process  generally correspond to steps , , , , and  of process  respectively except that in step , client logic  sends the PMSN (or the key disc identifying portion thereof) obtained from the inserted key disc to server  along with the Permission Nonce obtained from AACS Layer logic  in step . Step  corresponds generally to step  of process  and step  corresponds generally to step  of process .","In optional step , server-side client authentication logic  can use the PMSN (or the key disc identifying portion thereof) sent from BD-J Application  in step  to retrieve the subscriber record from database  that corresponds to the key disc identifier contained within the PMSN. In one embodiment, data in the retrieved subscriber record such as, for example, a Volume ID, is used by server-side client authentication logic  in step  to generate an authentication permission. In one embodiment, server-side client authentication logic  in step  retrieves the subscriber record during the first iteration of the client authentication loop  to determine whether the key disc as identified by the key disc identifier received in step  has already attempted to activate streaming video. In one embodiment, step  is performed once during the first iteration of loop .","In step , server-side client authentication logic  makes an authentication decision based on client authentication data generated by the execution of loop .","In step , server-side client authentication logic  updates the subscriber record based on the authentication decision made in step . For example, if in step  server-side client authentication logic  determines that client application  is not authenticated (e.g., is not executing on a non-revoked AACS-compliant Blu-ray Disc Player), then server-side client authentication logic  may update the subscriber record to indicate that BD-J Application  is not authenticated and should not receive other service data from server . Such service data may include, for example, history data about previously watched movies or billing information associated with a subscriber.","However, if in step  server-side client authentication logic  determines that client logic  is authenticated, then server-side client authentication logic  may update the subscriber record to indicate that client logic  is authenticated and is permitted to receive service data from server  such as, for example, streaming video content, content viewing history, billing information, and the like. Additionally, server-side client authentication logic  or other applications executing on server  may use the key disc identifier to ensure that sensitive subscriber-specific data such as, for example, billing information, is sent only to an authenticated client logic  that has proven ownership of a valid key disc identifier. In one embodiment, ownership of a valid key disc identifier is \u201cproven\u201d by client logic  having been successfully authenticated by server-side client authentication logic  according to process .","In process  depicted by , each subscriber is uniquely identified by a key disc identifier stored in the key disc issued to the subscriber. This implies that server  can authenticate client  executing on more than one playback device . For example, a subscriber might have multiple playback devices in a home such as, for example, one in the living room and one in the bedroom. The key disc may be used in any of the home's multiple playback devices to authenticate client  and obtain subscription services. However, the content provider may wish to restrict the number of playback devices that the subscriber may use. For example, a content provider may wish to prevent a subscriber from allowing non-subscribers to obtain subscription services by borrowing the subscriber's key disc to use in their own playback devices.","Accordingly,  is a flow diagram that illustrates a process  for activating streaming video in a Blu-ray Disc Player in which the subscriber record is bound to a key disc and a specified number of play back devices. Process  proceeds generally as process  depicted in  except that in new step  of process , client logic  calls the AACS layer API function \u201cDeviceAttribute.getBindingID( )\u201d which returns a value that uniquely identifies playback device . In one embodiment, the value is a random number  -bytes in length. Further, in step  of process , client logic  sends to server  the device binding value along with the PMSN (or the key disc identifying portion thereof) obtained from the inserted key disc and the Permission Nonce obtained from AACS Layer logic  in step .","Server  may use the unique device binding value to track the number of different playback devices  in which a particular key disc has been used to activate streaming video. Through this tracking, the content provider may limit the number of different playback devices  that can be activated to receive subscription services by the particular key disc. In one embodiment, the subscriber record created in step  is uniquely identified by the PMSN (or the key disc identifying portion thereof) and also stores one or more device binding identifiers received in step  to aid server  in tracking the number of different playback devices  for which a particular key disc has been used to activate streaming video.","In one embodiment, when the AASC LA issues a new Media Key Block, the content provider generates new key discs each with unique PMSNs containing the new Media Key Block and sends the new key discs to current subscribers and all future subscribers. Thereafter, server logic , in step  of process  and process , generates valid authentication permissions using the new Media Key Block. Players  using a key disc with an old Media Key Block will not be able to successfully authenticate with server  which is now using the new Media Key Block to generate valid authentication permissions. In one embodiment, server logic  refuses to authenticate any client  that presents in step  a PMSN (or the key disc identifying portion thereof) that indicates that a key disc with an old Media Key Block is inserted into the playback device .","In this section, a pseudo-code example is given of how a content provider might actually design client logic  as a Blu-ray Disc Java Application for activating streaming video in a Blu-ray Disc Player. However, it should be noted that the syntax, operators, etc. used in this example is merely exemplary. The actual language, format, syntax for designing client logic  may vary from implementation to implementation.","For the purpose of illustration, the pseudo-code illustrates how client logic  as a Blu-ray Disc Java Application would accomplish client authentication using AACS permissions according to one embodiment of the invention.",{"@attributes":{"id":"p-0085","num":"0094"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\/\/ get PMSN"},{"entry":"MediaAttribute mAttr = new MediaAttribute( );"},{"entry":"byte[ ] pmsn = mAttr.getPMSN( );"},{"entry":"\/\/ get Device Binding Nonce"},{"entry":"DeviceAttribute dAttr = new DeviceAttribute( );"},{"entry":"byte[ ] deviceBindingNonce = dAttr.getDeviceBindingID( );"},{"entry":"\/\/ loop until we get a success"},{"entry":"boolean ok = false;"},{"entry":"\/\/ TBD: deal with max retries"},{"entry":"while(! ok) {"},{"entry":"\u2003\u2003\u2003\/\/ create an AACS permission"},{"entry":"\u2003\u2003\u2003EnablePermission p = new EnablePermission(title_id);"},{"entry":"\u2003\u2003\u2003byte[ ] permissionNonce = p.getNonce( );"},{"entry":"\u2003\u2003\u2003\/\/ client retrieves permission from the server over HTTPS"},{"entry":"\u2003\u2003\u2003HttpsConnection conn = (HttpsConnection)Connector.open(url);"},{"entry":"\u2003\u2003\u2003\/\/ send POST containing: pmsn, deviceBindingNonce and"},{"entry":"\u2003\u2003\u2003permissionNonce"},{"entry":"\u2003\u2003\u2003\/\/ ..."},{"entry":"\u2003\u2003\u2003\/\/ get InputStream to read response"},{"entry":"\u2003\u2003\u2003InputStream is = conn.openInputStream( );"},{"entry":"\u2003\u2003\u2003\/\/ etc..."},{"entry":"\u2003\u2003\u2003byte[ ] permission = is.read( );"},{"entry":"\u2003\u2003\u2003\/\/ Bind using returned AACS permission"},{"entry":"\u2003\u2003\u2003p.setPermission(permission)"},{"entry":"\u2003\u2003\u2003ok = p.checkPermission( );"},{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"According to one embodiment, the techniques described herein are implemented by one or more special-purpose computing devices. The special-purpose computing devices may be hard-wired to perform the techniques, or may include digital electronic devices such as one or more application-specific integrated circuits (ASICs) or field programmable gate arrays (FPGAs) that are persistently programmed to perform the techniques, or may include one or more general purpose hardware processors programmed to perform the techniques pursuant to program instructions in firmware, memory, other storage, or a combination. Such special-purpose computing devices may also combine custom hard-wired logic, ASICs, or FPGAs with custom programming to accomplish the techniques. The special-purpose computing devices may be desktop computer systems, portable computer systems, handheld devices, networking devices or any other device that incorporates hard-wired and\/or program logic to implement the techniques.","For example,  is a block diagram that illustrates a computer system  upon which an embodiment of the invention may be implemented. Computer system  includes a bus  or other communication mechanism for communicating information, and a hardware processor  coupled with bus  for processing information. Hardware processor  may be, for example, a general purpose microprocessor.","Computer system  also includes a main memory , such as a random access memory (RAM) or other dynamic storage device, coupled to bus  for storing information and instructions to be executed by processor . Main memory  also may be used for storing temporary variables or other intermediate information during execution of instructions to be executed by processor . Such instructions, when stored in storage media accessible to processor , render computer system  into a special-purpose machine that is customized to perform the operations specified in the instructions.","Computer system  further includes a read only memory (ROM)  or other static storage device coupled to bus  for storing static information and instructions for processor . A storage device , such as a magnetic disk or optical disk, is provided and coupled to bus  for storing information and instructions.","Computer system  may be coupled via bus  to a display , such as a cathode ray tube (CRT), for displaying information to a computer user. An input device , including alphanumeric and other keys, is coupled to bus  for communicating information and command selections to processor . Another type of user input device is cursor control , such as a mouse, a trackball, or cursor direction keys for communicating direction information and command selections to processor  and for controlling cursor movement on display . This input device typically has two degrees of freedom in two axes, a first axis (e.g., x) and a second axis (e.g., y), that allows the device to specify positions in a plane.","Computer system  may implement the techniques described herein using customized hard-wired logic, one or more ASICs or FPGAs, firmware and\/or program logic which in combination with the computer system causes or programs computer system  to be a special-purpose machine. According to one embodiment, the techniques herein are performed by computer system  in response to processor  executing one or more sequences of one or more instructions contained in main memory . Such instructions may be read into main memory  from another storage medium, such as storage device . Execution of the sequences of instructions contained in main memory  causes processor  to perform the process steps described herein. In alternative embodiments, hard-wired circuitry may be used in place of or in combination with software instructions.","The term \u201cstorage media\u201d as used herein refers to any media that store data and\/or instructions that cause a machine to operation in a specific fashion. Such storage media may comprise non-volatile media and\/or volatile media. Non-volatile media includes, for example, optical or magnetic disks, such as storage device . Volatile media includes dynamic memory, such as main memory . Common forms of storage media include, for example, a floppy disk, a flexible disk, hard disk, solid state drive, magnetic tape, or any other magnetic data storage medium, a CD-ROM, any other optical data storage medium, any physical medium with patterns of holes, a RAM, a PROM, and EPROM, a FLASH-EPROM, NVRAM, any other memory chip or cartridge.","Storage media is distinct from but may be used in conjunction with transmission media. Transmission media participates in transferring information between storage media. For example, transmission media includes coaxial cables, copper wire and fiber optics, including the wires that comprise bus . Transmission media can also take the form of acoustic or light waves, such as those generated during radio-wave and infra-red data communications.","Various forms of media may be involved in carrying one or more sequences of one or more instructions to processor  for execution. For example, the instructions may initially be carried on a magnetic disk or solid state drive of a remote computer. The remote computer can load the instructions into its dynamic memory and send the instructions over a telephone line using a modem. A modem local to computer system  can receive the data on the telephone line and use an infra-red transmitter to convert the data to an infra-red signal. An infra-red detector can receive the data carried in the infra-red signal and appropriate circuitry can place the data on bus . Bus  carries the data to main memory , from which processor  retrieves and executes the instructions. The instructions received by main memory  may optionally be stored on storage device  either before or after execution by processor .","Computer system  also includes a communication interface  coupled to bus . Communication interface  provides a two-way data communication coupling to a network link  that is connected to a local network . For example, communication interface  may be an integrated services digital network (ISDN) card, cable modem, satellite modem, or a modem to provide a data communication connection to a corresponding type of telephone line. As another example, communication interface  may be a local area network (LAN) card to provide a data communication connection to a compatible LAN. Wireless links may also be implemented. In any such implementation, communication interface  sends and receives electrical, electromagnetic or optical signals that carry digital data streams representing various types of information.","Network link  typically provides data communication through one or more networks to other data devices. For example, network link  may provide a connection through local network  to a host computer  or to data equipment operated by an Internet Service Provider (ISP) . ISP  in turn provides data communication services through the world wide packet data communication network now commonly referred to as the \u201cInternet\u201d . Local network  and Internet  both use electrical, electromagnetic or optical signals that carry digital data streams. The signals through the various networks and the signals on network link  and through communication interface , which carry the digital data to and from computer system , are example forms of transmission media.","Computer system  can send messages and receive data, including program code, through the network(s), network link  and communication interface . In the Internet example, a server  might transmit a requested code for an application program through Internet , ISP , local network  and communication interface .","The received code may be executed by processor  as it is received, and\/or stored in storage device , or other non-volatile storage for later execution.","In the foregoing specification, embodiments of the invention have been described with reference to numerous specific details that may vary from implementation to implementation. Thus, the sole and exclusive indicator of what is the invention, and is intended by the applicants to be the invention, is the set of claims that issue from this application, in the specific form in which such claims issue, including any subsequent correction. Any definitions expressly set forth herein for terms contained in such claims shall govern the meaning of such terms as used in the claims. Hence, no limitation, element, property, feature, advantage or attribute that is not expressly recited in a claim should limit the scope of such claim in any way. The specification and drawings are, accordingly, to be regarded in an illustrative rather than a restrictive sense."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["In the drawings:",{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 6"}]},"DETDESC":[{},{}]}
