---
title: Method and system for dynamically associating type information and creating and processing meta-data in a service oriented architecture
abstract: A method for dynamically associating type information about extensible messages in a service-oriented architecture includes configuring a simple object access protocol (SOAP) message header to include message meta-data and semantics, thereby facilitating a dynamic exchange of semantic type information for open content message exchange between a sender and a receiver.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07631314&OS=07631314&RS=07631314
owner: International Business Machines Corporation
number: 07631314
owner_city: Armonk
owner_country: US
publication_date: 20030826
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DETAILED DESCRIPTION","EXAMPLE"],"p":["The present invention relates generally to computer architecture systems and, more particularly, to a method and system for dynamically associating type information and creating and processing meta-data in a service oriented architecture.","Most service oriented computer network systems use Simple Object Access Protocol (SOAP) as an encoding mechanism, and therefore Extensible Markup Language (XML) as the underlying message format. Normally, messages transferred between the client and the service and both parties follow a message format known to both of them such that they can determine the message type and map it to their type system. This determination is typically based on static information such a well-known schema (e.g., published by standard bodies), some previous agreement on the schema (e.g., published by the service provider in a service description such as WSDL), or using a standard set of application programming interfaces. There are also other cases wherein the XML schema information and types are embedded with the message, and the framework knows how to interpret the message. Such characteristics are acceptable for most of the presently utilized message exchange patterns where both the parties are familiar with one other and the message(s) exchanged therebetween.","On the other hand, it is also desirable to be able to support a message exchange pattern wherein both client and server are flexible such that messages may be sent without being bound to a previous agreement on the schema. Although \u201copen-content\u201d XML schemas are available by using the XML \u201cany\u201d type definition extension, there is still a semantic problem (i.e., meaning and use of the data) associated with flexible, open-content message data. This problem is driven by the static nature of the data and \u201ca priori\u201d agreements between both parties in the exchange pattern. Accordingly, it would be advantageous to be able to exchange semantic type information dynamically along with the message, but without disturbing the exchange pattern.","The foregoing discussed drawbacks and deficiencies of the prior art are overcome or alleviated by a method for dynamically associating type information about extensible messages in a service-oriented architecture. In an exemplary embodiment, the method includes configuring a simple object access protocol (SOAP) message header to include message meta-data and semantics, thereby facilitating a dynamic exchange of semantic and meta-data information for open content message exchange between a sender and a receiver.","In another aspect, a system for dynamically associating type information about extensible messages in a service-oriented architecture includes a simple object access protocol (SOAP) message header configured to include message meta-data and semantics, thereby facilitating a dynamic exchange of semantic and meta-data information for open content message exchange between a sender and a receiver.","In another aspect, a method for synthesizing and processing dynamically associated meta-data associated with extensible markup language (XML) messages in service-oriented computer architecture includes generating message meta-data within the header of a simple object access protocol (SOAP) message. The SOAP message is received, and semantic information and the meta-data from the SOAP header are retrieved. The semantic information and the meta-data are associated during processing of the body of the SOAP message.","In yet another aspect, a system for synthesizing and processing dynamically associated meta-data associated with extensible markup language (XML) messages in service-oriented computer architecture includes a send side framework for generating message meta-data within the header of a simple object access protocol (SOAP) message. A receive side framework receives the SOAP message and processes the semantics in the SOAP header, the receive side framework further configured for retrieving semantic information and the meta-data from the SOAP header, and associating the semantic information and meta-data during processing of the body of the SOAP message.","Disclosed herein is a system and method for dynamically associating type information (e.g., message schema type, location, message description and\/or other details including native object type mapping information, etc.) about extensible messages in a service-oriented architecture. Briefly stated, a SOAP header is configured so as to carry the message semantics, thereby allowing both parties to exchange the semantic type information dynamically along with the message without disturbing the message exchange pattern. The header information may include a schema of the \u2018any\u2019 type message, RDF description of the message and\/or object system types, or other information that can help the target to understand the data.","In addition, there is further disclosed a framework to synthesize and process the dynamically associated meta-data (e.g., message schema type, location, message description and\/or other semantic details including native object type mapping information, etc.) associated with extensible messages in service-oriented architecture. A send-side (message producer) framework is used to support passing type and other meta-data about the message extensions using SOAP headers, while a receive-side (message consumer) framework processes the semantics in the SOAP header, generates the corresponding semantic\/meta-data processors and associates the same with the SOAP and\/or XML processors. Furthermore, meta-data processors work, in conjunction with the SOAP and\/or XML processors, to validate and map the extensible XML messages to the native object systems and\/or native semantic processors.","As stated previously, in a service oriented architecture, messages (i.e., XML messages) are typically exchanged between the client and the service over a Simple Object Access Protocol (SOAP). ) is a schematic block diagram illustrating an existing SOAP message exchange pattern  between a client  and a service  over a SOAP message channel  in a service-oriented architecture. In the example illustrated, the data types (stockQuoteSymbol) are known by both client and service, and thus no type is associated with the message as shown by the XML mapping. In contrast, ) illustrates a flexible SOAP message exchange pattern  between client  and service  in a service-oriented architecture, wherein no data types are associated with the message.","Thus, some of these SOAP messages are flexible and extensible in nature. Normally, these messages are described using a XML schema for XML message type validation and conformance to the schema type system. In particular, a conventional framework supports a XML message extension scheme using the schema language \u2018any\u2019 construct (using xsd:any (for elements) and xsd:anyAttribute (for attributes) with xsd:##any for any namespace). This typeless data type construct provides the maximum flexibility to a message description by allowing an open content model, and also allows a message to contain any well-formed XML from any namespace. Unfortunately, this flexibility imposes a number of restrictions on the existing message processing frameworks.","There are a number of conventional approaches that have been implemented to deal with and validate this kind of extensible but un-typed message format (open-content model) using the \u2018any\u2019 type. One way is for the SOAP processors to simply ignore untyped messages and assemble them as a XML fragment, thus and leaving it to the service to handle the semantics. However, the service needs prior knowledge of the message in order to properly process and parse the message. Another approach is for a SOAP processor to utilize a type-mapping system to map a native object to an XML fragment, provided that this mapping is defined earlier. This approach is very much static in nature, since both parties know about the types. Still another approach is for the service and SOAP processors to use well-known schema information to map the XML fragment to the known schema and attempt to validate it. However, this may not work in all instances. Alternatively, a message body may be wrapped with some type information and passed to the processor. Although this approach lets the processor know about the details of how to interpret the type and semantics of the message, it is specific to the encoding of the message and thus not flexible for an open content model.","Therefore, in accordance with an embodiment of the invention, there is disclosed a dynamic and flexible method for providing the message type information for any extensible message fragments without changing the message format and without imposing any \u201ca priori\u201d knowledge on the message. A mechanism is defined to enhance the existing message exchange pattern by allowing the parties in the conversation to send runtime semantics (e.g., message schema type, description and other semantic information including type information) along with the messages rather than relying on the static information on the messages. This dynamic message type association, along with the support of an open-content model of the message, helps to define flexible and extensible message exchange pattern in a service-oriented architecture.","Accordingly,  is a block diagram illustrating a SOAP message  including a message header  and message body , wherein the header  includes message semantics information for a flexible XML schema, such as the \u2018any\u2019 data type. The header  also preferably contains a pointer to the <any> data that is carried within message body . The message body , in turn, includes the normal remote procedure call (RPC) and message parameters, as well as a namespace-qualified \u2018any\u2019 type XML fragment. As such, the present invention embodiments support a message exchange pattern where both client and server have the flexibility to send messages without being bound to a previous agreement, but that also overcomes the type safety and rigidity associated with an open content model.","An example of a SOAP message having the semantic information included in the message header is presented as follows:","XML Schema Definition","This is a flexible schema for subscribing to a news information service, wherein any information needed for the subscription information can be passed based on the particular need. Therefore, the schema is defined to be flexible with <xsd:any> element information.",{"@attributes":{"id":"p-0023","num":"0022"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<xsd:ComplexType name=\u201c SubscribeToNewsInformation\u201d>"},{"entry":"\u2003<sequence>"},{"entry":"\u2003\u2003<element name=\u201c subscription Info\u201d type=\u201csubscriptionInfoType \u201d\/>"},{"entry":"<\/sequence>"},{"entry":"<\/xsd:ComplexType>"},{"entry":"<xsd:ComplexType name=\u201c subscription InfoType\u201d>"},{"entry":"\u2003<xsd:sequence>"},{"entry":"\u2003\u2003<xsd:any namespace=\u201c##any\u201d\/>"},{"entry":"\u2003<\/xsd:sequence>"},{"entry":"<\/xsd:ComplexType>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}},"br":{}},"As described above, the schema is flexible and open ended. Thus, the client can submit desired subscription information to the server. In addition, the client can add type information (e.g., the schema type of the message or a native object type mapping information) about the subscription message through the SOAP header. Moreover, the server side processor can infer the type of the message by looking into the header and use that information to process the message. Simple type information can be a schema location about the message, or a java class to handle the message, for example.",{"@attributes":{"id":"p-0025","num":"0024"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<?xML version=\u201c1.0\u201d encoding=\u201cUTF-8\u201d?>"},{"entry":"<s: Envelope"},{"entry":"\u2003\u2003\u2003\u2003xmlns:s=http:\/\/schemas.xmlsoap.org\/soap\/envelope\/xmlns:xsd=\u201c"},{"entry":"\u2003\u2003\u2003\u2003http:\/\/www.w3.org\/2001\/XMLSchema\u201d"},{"entry":"xmlns:xsi=\u201c"},{"entry":"\u2003\u2003\u2003\u2003http:\/\/www.w3.org\/2001\/XMLschema-instance\u201c>"},{"entry":"<s: Header>"},{"entry":"\u2003\u2003<m:anyTypeSemantic"},{"entry":"\u2003\u2003\u2003\u2003xmlns:m =\u201c http:\/\/www.ibm.com\/2002\/AnyProcessor\u201d"},{"entry":"\u2003\u2003\u2003\u2003<m :anyTypePointer m reference=\u201c urn:ibm..any.local.1\u201d>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003<m:schemaLocation"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003value =\u201chttp:\/\/www.ibm.com\/grid\/mySchema.xsd\u201d \/>"},{"entry":"\u2003\u2003\u2003\u2003<\/m:anyTypePointer>"},{"entry":"\u2003\u2003\u2003\u2003<m:anyTypePointer m: reference=\u201c urn:ibm..any.local.2\u201d>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003<rdf:RDF"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003xmlns:rdf=http\/\/www.w3c.org\/199\/02\/22-rdf-syntax-ns#>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003<\/rdf: RDF>"},{"entry":"\u2003\u2003\u2003\u2003<\/m:anyTypePointer>"},{"entry":"\u2003\u2003<\/m :anyTypeSemantic>"},{"entry":"<\/s:Header>"},{"entry":"<s: Body>"},{"entry":"\u2003<subscribeToNews xmlns=\u201c http:\/\/ibm.com\/test\/subscribe \u201d>"},{"entry":"\u2003\u2003<ns1: subscribeToNewsInformation"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003xmlns: ns1 =\u201c http:\/\/ibm.com\/test\/types\u201d>"},{"entry":"\u2003\u2003\u2003\u2003<ns1:subscription Info>"},{"entry":"\u2003\u2003\u2003\u2003<ns4:any"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003xmlns:ns4=\u201curn:ibm..any.local.1\u201d>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003<ns5:address xmlns:ns5=\u201chttp:\/\/ibm .addrbook\u201d>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003<name>Joshy <\/name>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003<street> Cherry Hill<\/street>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003<zip> 12603<\/zip>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003<\/ns5 :address>"},{"entry":"\u2003\u2003\u2003\u2003<\/ns4:any>"},{"entry":"\u2003\u2003<\/ns1:subscriptionExpression>"},{"entry":"\u2003\u2003<\/ns1:subscribeToNews Information>"},{"entry":"<\/subscribeToNews>"},{"entry":"<\/s:Body>"},{"entry":"<\/s:Envelope>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"As illustrated in the exemplary SOAP message, the message semantics are passed along with the message but without changing the message by including the semantics in the header. This provides the ability to send an \u2018any\u2019 message and extend an \u2018any\u2019 message, wherein the message exchange pattern and the type of the message does not affect either the sender or receiver side of the service framework. Advantageously, there is no need for any prior agreement on extensible message types and service providers can define an open-content model XML message format wherein dynamic message semantics are exchanged for each message. The message types may be associated to a message exchange pattern at runtime, while programming hooks and policies can implement this association.","In conjunction with the above-described method for dynamically associating meta-data information about the XML message in a service-oriented architecture, a framework is also disclosed that can incorporate this semantic processing model with an XML and SOAP processor. More specifically, this disclosure provides a message producer and consumer framework to pass and interpret the meta-data about the message extensions defined at runtime. This framework is built on the SOAP message exchange pattern, and uses a SOAP header framework for meta-data information exchange.",{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 3","b":["300","300","302","304"]},"The send-side framework  includes a send-side SOAP handler  that is used to create the message meta-data about the message extension element. Again, the handler  uses SOAP headers as a placeholder for message meta-data, including Uniform Resource Identifier (URI) references to the SOAP body elements for which the semantics can be applied. A sender  may associate the meta-data during the runtime through runtime type and meta-data association about extended XML messages, using application programming interfaces (API). In other words, the message producers can use API to register runtime message type and other meta-data information about the extensible XML message with a SOAP message header, but without changing the existing SOAP message exchange pattern.","In addition, the meta-data may be associated based on policies defined for extensible XML messages in the message exchange pattern. That is, the send-side SOAP handler  can associate certain policies  with the message extension framework, wherein the framework (at runtime) can embed the meta-data with the SOAP header based on the policy defined for the extensible XML message.","Once a SOAP message  is received, a receiver  may process the SOAP message  (containing the meta-data about the extensible message) and retrieve the semantic information from the SOAP header with a receive-side SOAP handler . Thereafter, the receive-side handler  associates the semantic information with a SOAP processor  and\/or an XML (semantic) processor  at the time of the SOAP message body processing. This flexibility allows the runtime system to attach any meta-data information processor with the extensible XML message processor.","The receiver  may process the meta-data information using one or more framework models. First, the server-side SOAP message processing handler  can retrieve the SOAP header information, create the necessary meta-data processors, and associate that with the SOAP message body processors  and\/or XML processors  (simple API for XML (SAX) parser). This flexible framework will enable the SOAP engine to create meta-data processors based on the meta-data information in the SOAP header and associate that with the runtime system. For example, a processor that works with the current SOAP XML message parser can also load the XML schema needed to process the extended XML message from a URI location as specified in the SOAP header.","Second, the SOAP header XML data processor  can be used to directly process the header information. During the processing of the SOAP header XML fragments, the receive side handler  can create necessary meta-data processors  and associate that with the SOAP message body processors and\/or XML processors (SAX parser). This flexible framework will enable the SOAP engine to create meta-data processors based on the meta-data information in the SOAP header and associate that with the runtime system.","Third, the SOAP message processor , on parsing, may generate warning messages upon encountering XML elements or attributes that are not specified by the XML schema. These are extended XML messages. The runtime system can then use the meta-data from the SOAP header to process the XML message. For example, the XML processor can load the XML schema for the extensible message and attach that to the schema processor.","Finally, framework  includes one or more meta-data processors working in conjunction with the SOAP and XML processors ,  to validate and map the extensible XML messages. More specifically, a set of pluggable meta-data processors (denoted generally at ) are defined to process the meta-data information associated with a message. For example, a schema generator processor  is based on the XML schemaLocation attribute and namespace information associated with an extended XML message. These schema generators can work with the object type system to generate corresponding native objects. Also, an RDF processor  is used to understand the semantic of the extensible message, while native processors  manage the type system and type mapping information.","As will be appreciated, advantages of the above described framework architecture include the dynamic association of message type and meta-data for an extensible message, as well as the flexibility in the processing of dynamic meta-data in a service oriented architecture. In addition, compatible extensions are provided to existing SOAP based message exchange patterns, thereby enabling service providers to define an open-content model XML message format and provide the service clients the capability to dynamically associate the meta-data for the content and be able to process that content data based on the meta-data associated with data.","While the invention has been described with reference to a preferred embodiment or embodiments, it will be understood by those skilled in the art that various changes may be made and equivalents may be substituted for elements thereof without departing from the scope of the invention. In addition, many modifications may be made to adapt a particular situation or material to the teachings of the invention without departing from the essential scope thereof. Therefore, it is intended that the invention not be limited to the particular embodiment disclosed as the best mode contemplated for carrying out this invention, but that the invention will include all embodiments falling within the scope of the appended claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["Referring to the exemplary drawings wherein like elements are numbered alike in the several Figures:",{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 1(","i":"a"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 1(","i":"b"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 3"}]},"DETDESC":[{},{}]}
