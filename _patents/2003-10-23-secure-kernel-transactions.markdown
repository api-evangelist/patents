---
title: Secure kernel transactions
abstract: Kernel objects for implementing a transaction have a security descriptor applied thereto. The kernel objects include, at least, a transaction object, a resource management object, and an enlistment object. The security descriptor, otherwise known as an access control list, identifies at least one user, an operation to be performed on the kernel object to which the security descriptor is applied, and a right indicating that the identified user is permitted or prohibited to perform the operation.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07591015&OS=07591015&RS=07591015
owner: Microsoft Corporation
number: 07591015
owner_city: Redmond
owner_country: US
publication_date: 20031023
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION","DETAILED DESCRIPTION"],"p":["The present invention is directed towards secure kernel transactions.","Transactions have long been provided for by databases and transaction-processing systems. Transactions provide a simplified failure model, desirable to application programmers, by grouping together a number of operations into a single atomic operation, i.e., a group of operations of which the results of the individual operations stand or fall together. If just one operation fails, the effects of all operations in the group, regardless of the number of operations associated with the transaction, are \u201cundone\u201d or rolled back. This solidarity among operations is provided with regard to any number of failures, including failures that occur during the process of undoing operations, and eventually the respective transaction-processing system reaches one of two states whereby either all of the operations have been applied or none of the operations have been applied.","Transactional file systems, which define the directory structure for keeping track of files and the path syntax for applications, are now capable of driving transactions deep into an operating system (OS). Accordingly, secure transaction management services on a kernel level is desired.","Secure kernel transactions are described herein.","Transaction management functionality is implemented by kernel objects, each of which may have a respectively corresponding security descriptor applied thereto. The kernel objects include, at least, a transaction object, a resource management object, and an enlistment object. The security descriptor, which may include an access control list, identifies: at least one user, an operation that can be performed on the kernel object to which the security descriptor is applied, and a right indicating that the identified user is permitted or prohibited to perform the operation.","The scope of the present invention will be apparent from the following detailed description, when taken in conjunction with the accompanying drawings, and such detailed description, while indicating embodiments of the invention, is illustrative only, since various changes and modifications will become apparent to those skilled in the art from the following detailed description, in which:",{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 5"},"In the example network environment of , multiple client computing devices , , , and , which may also be referred to as client devices, are coupled to at least one server device  via network . Network  is intended to represent any of a variety of conventional network topologies and types, which may include wired and\/or wireless networks. Network  may further utilize any of a variety of conventional network protocols, including public and\/or proprietary protocols. Network  may include, for example, the Internet as well as possibly at least portions of one or more local area networks (LANs).","Client device  may include any of a variety of conventional computing devices, including, but not limited to, a desktop personal computer (PC), workstations, mainframe computers, Internet appliances, and gaming consoles. Further client devices associated with network  may include personal digital assistant (PDA) , laptop computer , and cellular telephone , etc., which may be in communication with network  by a wired and\/or wireless link. Further still, one or more of client devices , , , and  may include the same types of devices, or alternatively different types of devices.","Server device  may provide any of a variety of data and\/or functionality to computing devices , , , and . The data may be publicly available or alternatively restricted, e.g., restricted to only certain users or available only if an appropriate fee is paid, etc.","Server device  is at least one of a network server and an application server, or a combination of both. Server device  is any device that is the source of content, and client devices , , , and  include any devices that receive such content. Therefore, in a peer-to-peer network, the device that is the source of the content is referred to as the server device and the device that receives the content is referred to as the client device. Both types of devices are able to load and run software programs, including operating systems and applications, in accordance with the example embodiments described herein. Further, data and functionality may be shared among client devices , , , and . That is, service device  is not the only source of data and\/or functionality for the respective client devices.","At data source  or , software programs, including operating systems and applications, are prepared for and\/or provided to any one of server device  or client devices , , , and  for execution. For the sake of consistency, the discussion hereafter refers to \u201capplications\u201d which encompass anyone of, at least, software programs, operating systems, and applications, either singularly or in combination, as known in the art. Furthermore, the applications are disseminated to server device  either off-line as from data source , or on-line as from data source . Further still, the applications are typically disseminated to client devices , , , and  on-line from server device  or from data source . Means and methods for off-line dissemination thereof are known as well.","The dissemination of at least one of data and functionality both in and among devices , , , , and  may be implemented as a transaction. More particularly, a transaction is a group of operations that are executed synchronously or asynchronously as a single atomic operation, either within one of devices , , ,  and  or in a network environment, such as the example of . An example of transaction management is described beginning with reference to .","A group of operations that make up a particular transaction is to collectively have properties known, at least to those in the art, by the acronym \u201cACID,\u201d which includes \u201catomicity,\u201d \u201cconsistency,\u201d \u201cisolation,\u201d and \u201cdurability.\u201d More specifically: data updates resulting from the respective operations of a transaction are either all permanent or none are permanent (atomicity); a transaction leaves underlying data in a consistent state (consistency); the effects of a transaction update are not visible to other concurrently-running operations until the overall transaction is made permanent (isolation); and after an outcome for a transaction has been determined, the result is guaranteed never to change (durability).","The kernel-level transaction management example of  is directed towards an example of a distributed transaction, involving more than one device, and maintains the \u201cACID\u201d characteristics expected of a transaction. Further, whereas the example of  references kernel objects, the example is in no way limited to transactions implemented by kernel objects. More specifically, transactions, described herein, may be implemented by objected other than kernel objects.","In , a transaction corresponding to client application  utilizes, at least, transaction manager  on a first device, as well as client application B and transaction manager  on a second device. Client application B is associated with client application . Transaction managers  and , which are in communication with each other, may be aggregates of kernel objects that maintain state information about overall transactions and resources, and further coordinate interaction or protocol between client applications and associated resources managers (RM).","Resource managers, including RM  and RM  in the example of , maintain the state of at least one underlying resource that is capable of storing data in a durable state. Non-exclusive examples of such resources include databases and message queues. In a first device in the example embodiment of , RM  corresponds to resource ; RM  corresponds to resource ; and in a second device, RM  corresponds to resource .","As shown in , transaction manager  on a first device includes the following kernel objects: transaction object (TX) , resource manager object (RMO) , and enlistment object (EN) ; and transaction manager  on a second device includes the following kernel objects: TX , RMO , and EN . TX represents a particular transaction, and may be opened by a process participating in the transaction. Further, TX may or may not be durable since a failure of one process corresponding to one of the kernel objects causes the entire transaction to abort, i.e., be rolled back.","RMO represents a relationship between TX of a corresponding transaction manager and at least one resource that participates in a particular transaction. Participation by RMO in a transaction includes receiving two-phase commit messages, and therefore RMO serves as an end point for receiving a transaction notification from a corresponding RM. Further, RMO is persistent so that the corresponding transaction manager knows which transaction outcome is to be transmitted to a corresponding RM. Alternatively, RMO may be transient thus enabling client applications to subscribe to a stream of transaction notifications without managing a persistent RMO across failures.","EN represents the relationship between a transaction and a resource manager. A resource manager indicates that it will participate in a transaction by creating an enlistment on it. When RMO has been requested to perform an operation (such as Prepare, Commit, etc) on a particular transaction, it uses EN to indicate participation. A resource manager can have more than one EN on a particular Transaction.","Two-phase commit protocol, which is implemented to ensure that a transaction successfully updates all appropriate resources, is described for a kernel environment with reference to the examples of , as follows. In particular, after client application  opens kernel objects corresponding to transaction manager  on a first device and client application B opens kernel objects corresponding to transaction manager  on a second device, a \u201cprepare\u201d phase  commences with each RM in the transaction being sent  a \u201cprepare\u201d order from a corresponding transaction manager. Thus alerted, RM prepares  by rendering resource data in a durable state so that the data in the respective resources is capable of being \u201ccommitted\u201d or \u201crolled back.\u201d Upon preparing, RM transmits  a confirmation message to TX of the corresponding transaction manager.","The \u201ccommit\u201d phase  is performed upon a resolution of the transaction, whereby TX of the transaction manager transmits  a transaction outcome of either \u201ccommitted\u201d or \u201cabort\/rolled back\u201d to each associated RM. RM then records the outcome in an associated log, and the underlying resource data is either committed or rolled back, in accordance with the transaction outcome. Alternative embodiments may allow for volatile enlistments for which the data for the transaction is not durable, and therefore the data is not logged or recovered.","Transaction management on the kernel level may be implemented by utilizing application program interfaces (API) that are applicable to system architectures including, but not limited to, The Microsoft\u00ae Win32\u00ae application programming interface and The Microsoft\u00ae Windows\u00ae operating system. The APIs described herein are exposed via a handle-based interface, a \u201chandle\u201d referencing the API-intended object. Further, unless asynchronous operation is explicitly requested, operations on the respective kernel objects, particularly TX and RMO, are synchronous. Further still, the operations corresponding to different embodiments of a transaction may be implemented by various combinations of one or more of the APIs described herein. That is, some embodiments may use all of the APIs described herein, while other embodiments may use various combinations thereof.","APIs to implement operations on EN kernel objects, and a corresponding description of the functionality of the API are provided below (more detailed descriptions of the associated routines are provided even further below):\n\n","The PreprepareEnlistment and PrepareEnlistment indicate that Preprepare and Prepare processing are to be performed on a TX associated with EN.","APIs to implement operations on TX kernel objects, and a corresponding description of the functionality of the API, are provided below (more detailed descriptions of the associated routines are provided even further below):","CreateTransaction: opens a new TX;","OpenTransaction: opens an existing TX;","CommitTransaction: requests that TX be committed;","RollbackTransaction: requests that TX abort or rollback the transaction;","SavepointTransaction: requests that TX save the state of the transaction;","GetTransactionInfo: retrieve information about the TX; and","SetTransactionInfo: sets information about the TX.","APIs utilized to implement operations on RMO kernel objects, and a corresponding description of the functionality of the API, are provided below (more detailed descriptions of the associated routines are provided even further below):\n\n","APIs utilized to implement operations on TX kernel objects by an RMO kernel object after joining a transaction, and a corresponding description of the functionality of the API, are provided below (more detailed descriptions of the associated routines are provided even further below):\n\n","Unfortunately, APIs associated with kernel objects TX, RMO, and EN utilized to implement transaction management may expose one or more of the kernel objects to various security attacks. For instance, a malicious or invalid RM may enlist itself into a transaction to cause denial-of-service attacks by never responding to function calls or, alternatively, force transaction aborts. Therefore, a further illustrative example, also referring to , is directed towards secure, kernel-level, distributed transaction.","The example embodiment of  further provides a security solution for vulnerable kernel objects by applying a security descriptor, which may include an access control list (ACL), to at least one of the respective kernel objects.","In a first device ACL  is applied to TX , ACL  is applied to RMO , and ACL  is applied to EN . In a second device, ACL  is applied to TX , ACL  is applied to RMO , and ACL  is applied to EN .","An ACL defines the \u201crights\u201d that a particular user or user group is allowed or denied to exercise over a particular object. More specifically, as shown in the example ACL  of , an ACL that is applied or attached to a kernel object includes at least access control entry (ACE) that comprises a corresponding security identifier (SID) and a corresponding set of rights. ACE entries - in  include, respectively, corresponding SIDs - and corresponding RIGHTs -.","SIDs - identify either a user or a user group that may attempt to perform an operation, or a series of operations, on the kernel object to which the ACL is applied. RIGHTs - specify an operation or series of operations capable of being performed on the respective kernel object by the user or user group identified by the SID, and further specify the accessibility of such operation or operations to the identified user or user group. That is, RIGHTs - may indicate either that the identified user or user group is permitted to perform a specified operation, or that the identified user or user group is prohibited to perform a specified operation.","The following is a list of example operations that may be specified by RIGHTs - in an ACL applied to TX, followed by a description of the functionality of the operation. RIGHTs - further specify that the operation is permitted or denied on TX to the user or user group identified by the corresponding SID.\n\n","The following is a list of example operations that may be specified by RIGHTs - in an ACL applied to RMO, followed by a description of the functionality of the operation. RIGHTs - further specify that the operation is permitted or denied on RMO to the user or user group identified by the corresponding SID.\n\n","The following is a list of example operations that may be specified by RIGHTs - in an ACL applied to EN, followed by a description of the functionality of the operation. RIGHTs - further specify that the operation is permitted or denied on EN to the user or user group identified by the corresponding SID.\n\n","Accordingly, each of kernel objects TX, RMO, and EN may have an ACL respectively applied thereto. Thus, when an API attempts to initiate an operation on a respective one of the kernel objects, the ACL must be honored by determining whether the operation is permitted or denied to the user or user group from which the API originates.","More specifically, when a handle is opened for performing an operation, a user or user group corresponding to the API is checked against the SID in the ACL; a list of allowed operations is generated; and the operation specified by the API is checked against the allowed operations for the SID on a given handle.","Alternative embodiments for securing transaction management among kernel objects, and enforcing security parameters, includes applying security descriptors to kernel objects that may participate in a transaction in accordance with the security model for The Microsoft\u00ae Windows\u00ae operating system.","As set forth above, the APIs are exposed as a handle-based interface, which is utilized to implement the security model. The following includes a more detailed description of the APIs, listed above, to implement operations on either EN or TX kernel objects. The descriptions include a description of the routine, corresponding arguments, and return values.","PreprepareEnlistment","(IN PHANDLE EnlistmentHandle).\n\n","EnlistmentHandle: Supplies a handle indicating the Enlistment to be pre-prepared; this Enlistment indicates the Superior-TM\/CRM that is pre-preparing the transaction. Only this Superior-TM\/CRM will be able to call PrepareEnlistment, SuperiorCommitTransaction, and SuperiorRollbackTransaction on this transaction.\n\n","STATUS_SUCCESS","STATUS_ACCESS_DENIED","STATUS_INVALID_HANDLE","STATUS_INSUFFICIENT_RESOURCES","STATUS_TM_TOO_LATE","PrepareEnlistment","(IN PHANDLE EnlistmentHandle).\n\n","EnlistmentHandle: Supplies a handle for the Enlistment to be prepared; the transaction associated with this enlistment has been pre-prepared (via a call to PreprepareEnlistment), then ResourceManagerHandle matches the Superior-TM\/CRM that was used in the call to PreprepareEnlistment. Furthermore, only the Superior-TM\/CRM that calls this API will be allowed to call SuperiorCommittransaction and SuperiorRollbackTransaction on this transaction.\n\n","STATUS_SUCCESS","STATUS_ACCESS_DENIED","STATUS_INVALID_HANDLE","STATUS_INSUFFICIENT_RESOURCES","STATUS_TM_TOO_LATE","STATUS_RM_NOT_RECOVERABLE","CreateTransaction",{"@attributes":{"id":"p-0077","num":"0119"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"56pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"(OUT PHANDLE","TransactionHandle,",{}]},{"entry":[{},"IN ULONG","DesiredAccess","OPTIONAL;"]},{"entry":[{},"IN POBJECT_ATTRIBUTES","ObjectAttributes","OPTIONAL;"]},{"entry":[{},"IN ULONG","CreateOptions","OPTIONAL;"]},{"entry":[{},"IN PHANDLE","ResourceManagerHandle","OPTIONAL;"]},{"entry":[{},"IN NOTIFICATION_MASK","NotificationMask","OPTIONAL;"]},{"entry":[{},"IN LPVOID","TransactionKey","OPTIONAL)."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]}}}},"ul":{"@attributes":{"id":"ul0021","list-style":"none"},"li":{"@attributes":{"id":"ul0021-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0022","list-style":"none"},"li":["This routine creates a new Transaction object, and returns a handle to the new object.","In some embodiments (if the ResourceManagerHandle parameter is specified), this routine performs a \u201cJoin\u201d (CreateEnlistment) operation on the Transaction after it is successfully created.","Clients close the transaction handle using the CloseHandle API. If the last transaction handle closes without anyone calling CommitTransaction on the transaction, then the transaction is implicitly rolled back.","Arguments:","TransactionHandle: Supplies a pointer to the location that will receive a handle to the new Transaction;","DesiredAccess: Supplies the mask specifying the desired level of access. The valid access mask choices are:\n        \n        ","ObjectAttributes: Supplies a pointer to an optional object attributes structure;","CreateOptions Supplies optional transaction flags. Valid create flag choices include:\n        \n        ","ResourceManagerHandle: Supplies a handle to the ResourceManager that receives notifications about a specified transaction;","NotificationMask: Specifies the notifications that this ResourceManager would like to receive regarding this Transaction; and","TransactionKey: Specifies an opaque pointer value that the RM would like to receive along with any notifications for this Transaction. The RM may use this to associate notifications with some object in the RM's address space, thus obviating the need to perform a lookup each time a notification occurs.","Return Value:"]}}}},"STATUS_SUCCESS","STATUS_INVALID_PARAMETER","STATUS_OBJECT_NAME_COLLISION","STATUS_OBJECT_NAME_INVALID","STATUS_PRIVILEGE_NOT_HELD","STATUS_INSUFFICIENT_RESOURCES","OpenTransaction",{"@attributes":{"id":"p-0085","num":"0148"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"35pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["(OUT PHANDLE","TransactionHandle,",{}]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"35pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["IN","ACCESS_MASK","DesiredAccess,",{}]},{"entry":["IN","POBJECT_ATTRIBUTES","ObjectAttributes,"]},{"entry":["IN","PHANDLE","ResourceManagerHandle","optional,"]},{"entry":["IN","NOTIFICATION_MASK","NotificationMask","optional,"]},{"entry":["IN","LPVOID","TransactionKey","optional)."]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}}]}},"ul":{"@attributes":{"id":"ul0025","list-style":"none"},"li":{"@attributes":{"id":"ul0025-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0026","list-style":"none"},"li":["This routine looks up an existing Transaction object, and returns a handle to the Transaction. The caller specifies a string representation of a GUID in an ObjectName field of ObjectAttributes.","Alternatively (if the ResourceManagerHandle parameter is specified), this routine also performs a \u201cJoin\u201d operation on the Transaction after it is opened.","Clients close the transaction handle using a CloseHandle API. If the last transaction handle closes without anyone calling CommitTransaction on the transaction, then the transaction is implicitly rolled back the transaction.","Arguments:","TransactionHandle: Supplies a pointer to the location that will receive a handle to the Transaction if the open operation succeeds;","DesiredAccess: Supplies the mask specifying the desired level of access;","ObjectAttributes: Supplies a pointer to an optional object attributes structure;","ResourceManagerHandle: Supplies a handle to the ResourceManager that receives notifications about the specified Transaction;","NotificationMask: Specifies notifications that this ResourceManager may receive regarding this Transaction; and","TransactionKey: Optionally specifies an opaque pointer value that the RM would like to receive along with any notifications for this Transaction. The RM may use this to associate notifications with some object in the RM's address space, thus obviating the need to perform a lookup each time a notification occurs.","Return Value:"]}}}},"STATUS_SUCCESS","STATUS_INVALID_PARAMETER","STATUS_OBJECT_NAME_INVALID","STATUS_OBJECT_NAME_NOT_FOUND","STATUS_OBJECT_PATH_SYNTAX_BAD","STATUS_PRIVILEGE_NOT_HELD","STATUS_INSUFFICIENT_RESOURCES","CommitTransaction",{"@attributes":{"id":"p-0094","num":"0168"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"56pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"(IN PHANDLE","TransactionHandle",{}]},{"entry":[{},"IN ULONG","CommitOptions","Optional)."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]}}}},"ul":{"@attributes":{"id":"ul0027","list-style":"none"},"li":{"@attributes":{"id":"ul0027-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0028","list-style":"none"},"li":["This routine requests that the Transaction associated with TransactionHandle be committed. Any transaction handle that has been opened or created may be committed with Transaction_Commit Desired Access. Since there is no restriction stating that only the creator of a transaction is allowed to commit it.","If the Transaction in question has not been previously issued a PrepareEnlistment request, then a two-phase commit protocol may be initiated on all enlisted RMs. This call can be viewed as a single-phase commit request being issued by the client.","This routine is not called if the Transaction has previously been prepared via PrepareEnlistment. Only an RM that called PrepareEnlistment may resolve the transaction state using the routine SuperiorCommitTransaction.","Arguments:","TransactionHandle: Supplies a handle indicating the Transaction to be committed; and","CommitOptions: COMMIT_RETAINING Transaction will be committed.","Return Value:"]}}}},{"@attributes":{"id":"p-0095","num":"0176"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"STATUS_SUCCESS"]},{"entry":[{},"STATUS_ACCESS_DENIED"]},{"entry":[{},"STATUS_INVALID_HANDLE"]},{"entry":[{},"STATUS_INSUFFICIENT_RESOURCES"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"STATUS_TM_TRANSACTION_ABORTED","RollbackTransaction",{"@attributes":{"id":"p-0098","num":"0179"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"42pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["(IN","PHANDLE","TransactionHandle,",{}]},{"entry":["IN","SAVEPOINT","SavePoint","Optional,"]},{"entry":["IN","ROLLBACK_REASON","RollbackReason","Optional)."]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}}}},"ul":{"@attributes":{"id":"ul0029","list-style":"none"},"li":{"@attributes":{"id":"ul0029-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0030","list-style":"none"},"li":["This routine requests that the Transaction associated with TransactionHandle be rolled back. The rollback may be a partial rollback if the optional SavePoint is specified and is a valid savepoint. A NULL SavePoint argument indicates that the Transaction should be completely rolled back, or aborted. An optional RollbackReason structure may be supplied; this will be retained in the Transaction object, and may be retrieved by interested transaction participants via a call to GetInformationTransaction.","Arguments:","TransactionHandle: Supplies a handle indicating the Transaction to be rolled back;","SavePoint: Supplies a SavePoint name, indicating how far a state of a transaction should be rolled back; and","RollbackReason: Supplies a rollback reason.","Return Value:"]}}}},"STATUS_SUCCESS","STATUS_ACCESS_DENIED","STATUS_INVALID_HANDLE","STATUS_INSUFFICIENT_RESOURCES","STATUS_TM_TRANSACTION_COMMITTED","SavepointTransaction",{"@attributes":{"id":"p-0105","num":"0192"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"49pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"(IN PHANDLE","TransactionHandle,",{}]},{"entry":[{},"IN ULONG","SavepointFlags","Optional,"]},{"entry":[{},"OUT LPSAVEPOINT","SavePoint)."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]}}}},"ul":{"@attributes":{"id":"ul0031","list-style":"none"},"li":{"@attributes":{"id":"ul0031-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0032","list-style":"none"},"li":["This routine requests that a \u201csavepoint\u201d be generated for a Transaction associated with TransactionHandle; this savepoint is used as a target for subsequent rollback requests.","Arguments:","TransactionHandle: Supplies a handle indicating the Transaction for which a Savepoint should be established;","SavepointFlags: Optionally supplies a set of flags that affect the generation of the savepoint; and","SavePoint: Supplies a pointer to a location where a Savepoint identifier is stored.","Return Value:"]}}}},{"@attributes":{"id":"p-0106","num":"0199"},"tables":{"@attributes":{"id":"TABLE-US-00007","num":"00007"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"STATUS_SUCCESS"]},{"entry":[{},"STATUS_ACCESS_DENIED"]},{"entry":[{},"STATUS_INVALID_HANDLE"]},{"entry":[{},"STATUS_INSUFFICIENT_RESOURCES"]},{"entry":[{},"STATUS_TM_TRANSACTION_COMMITTED"]},{"entry":[{},"STATUS_TM_TRANSACTION_ABORTED"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"QueryInformationTransaction",{"@attributes":{"id":"p-0108","num":"0201"},"tables":{"@attributes":{"id":"TABLE-US-00008","num":"00008"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"140pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"98pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["(IN","HANDLE","TransactionHandle,"]},{"entry":["IN","TRANSACTION_INFORMATION_CLASS","TransactionInformationClass,"]},{"entry":["OUT","PVOID","TransactionInformation,"]},{"entry":["IN","ULONG","TransactionInformationLength,"]},{"entry":["OUT","PULONG","ReturnLength Optional)."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}},"ul":{"@attributes":{"id":"ul0033","list-style":"none"},"li":{"@attributes":{"id":"ul0033-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0034","list-style":"none"},"li":["This routine returns requested information about the Transaction object represented by TransactionHandle.","Arguments:","TransactionHandle: Supplies a handle indicating a Transaction for which information is being requested;","TransfactionInformationClass: Indicates what class of information about the Transaction object is being requested;","TransactionInformation: Supplies a pointer to a buffer where the transaction information requested is stored;","TransactionInformationLength: Indicates the length of the buffer pointed to by TransactionInformation; and","ReturnLength: Supplies a pointer to the location that will receive the length of the information written to the TransactionInformation buffer.","Return Value:"]}}}},{"@attributes":{"id":"p-0109","num":"0210"},"tables":{"@attributes":{"id":"TABLE-US-00009","num":"00009"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"STATUS_SUCCESS"]},{"entry":[{},"STATUS_ACCESS_DENIED"]},{"entry":[{},"STATUS_INVALID_HANDLE"]},{"entry":[{},"STATUS_INSUFFICIENT_RESOURCES"]},{"entry":[{},"STATUS_INVALID_INFO_CLASS"]},{"entry":[{},"STATUS_INFO_LENGTH_MISMATCH"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"SetInformationTransaction",{"@attributes":{"id":"p-0111","num":"0212"},"tables":{"@attributes":{"id":"TABLE-US-00010","num":"00010"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"140pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"98pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["(IN","HANDLE","TransactionHandle,"]},{"entry":["IN","TRANSACTION_INFORMATION_CLASS","TransactionInformationClass,"]},{"entry":["IN","PVOID","TransactionInformation,"]},{"entry":["IN","ULONG","TransactionInformationLength)."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}},"ul":{"@attributes":{"id":"ul0035","list-style":"none"},"li":{"@attributes":{"id":"ul0035-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0036","list-style":"none"},"li":["This routine sets the requested information about the Transaction object represented by TransactionHandle.","Arguments:","TransactionHandle: Supplies a handle indicating the Transaction whose information will be modified;","TransactionInformationClass: Indicates which class of information about the Transaction object is being requested;","TransactionInformation: Supplies a pointer to a buffer where the transaction information requested is stored;","TransactionInformationLength: Indicates a length of the buffer pointed to by TransactionInformation; and","ReturnLength: Supplies a pointer to a location that will receive the length of the information written to the TransactionInformation buffer.","Return Value:","STATUS_SUCCESS","STATUS_ACCESS_DENIED","STATUS_INVALID_HANDLE","STATUS_INSUFFICIENT_RESOURCES","STATUS_INVALID_INFO_CLASS","STATUS_INFO_LENGTH_MISMATCH"]}}}},"The following includes a more detailed description of the APIs, listed above, to implement operations on RMO kernel objects. The descriptions include a description of the routine, corresponding arguments, and return values.","CreateResourceManager",{"@attributes":{"id":"p-0114","num":"0229"},"tables":{"@attributes":{"id":"TABLE-US-00011","num":"00011"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"119pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"112pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["(OUT","PHANDLE","ResourceManagerHandle,"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"119pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"42pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["IN","ACCESS_MASK","DesiredAccess","Optional,"]},{"entry":["IN","POBJECT_ATTRIBUTES","ObjectAttributes,"]},{"entry":["IN","ULONG","CreateOptions","Optional,"]},{"entry":["IN","RM_NOTIFICATION_ROUTINE","NotificationRoutine","Optional)."]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}}]}},"ul":{"@attributes":{"id":"ul0037","list-style":"none"},"li":{"@attributes":{"id":"ul0037-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0038","list-style":"none"},"li":["This routine creates a new ResourceManager object to represent a resource.","A ResourceManager object also serves as an endpoint for TM notifications regarding Transactions that the RM has joined; an RMs requests these notifications by calling GetNotificationResourceManager.","A ResourceManager is normally a persistent object, i.e., the object must be re-opened and perform recovery after every failure (system or RM). An transient version of a ResourceManager object may be created by specifying the option RESOURCEMANAGER_NO_RECOVERY. A transient RM is not obligated or permitted to perform recovery. The non-recoverable RM option allows an application or an RM to receive notifications about transaction progress (e.g. PREPREPARE, PREPARE, COMMIT) without being required to implement the full complexity of logging prepares and performing recovery.","Arguments:","ResourceManagerHandle: Supplies a pointer to the location that will receive a handle to the new ResourceManager;","DesiredAccess: Supplies a mask specifying a desired level of access. Valid access mask choices are:\n        \n        ","ObjectAttributes: Specifies the attributes for the new RM object; this includes the RM name;","CreateOptions: Specifies options for the created object;","RESOURCEMANAGER_NO_RECOVERY: ResourceManager object is non-persistent, and does not perform recovery;","RESOURCEMANAGER_COMMUNICATION: ResourceManager knows how to communicate to other computers. ResourceManager may be used to marshall or unmarshall transactions;","RESOURCEMANAGER_CLUSTER_RECOVERY: ResourceManager knows how to read\/deliver outcomes to log files that may have failed over to other nodes in the cluster. ResourceManager may be used to recover transactions in a cluster; and","NotificationRoutine: Specifies a notification routine to be called when notifications are available for this ResourceManager.","Return Value:"]}}}},"STATUS_SUCCESS","STATUS_INVALID_PARAMETER","STATUS_OBJECT_NAME_COLLISION","STATUS_OBJECT_NAME_INVALID","STATUS_PRIVILEGE_NOT_HELD","STATUS_INSUFFICIENT_RESOURCES","OpenResourceManager",{"@attributes":{"id":"p-0122","num":"0254"},"tables":{"@attributes":{"id":"TABLE-US-00012","num":"00012"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"119pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"112pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["(OUT","PHANDLE","ResourceManagerHandle,"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"119pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"42pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["IN","ACCESS_MASK","DesiredAccess","Optional,"]},{"entry":["IN","POBJECT_ATTRIBUTES","ObjectAttributes,"]},{"entry":["IN","ULONG","OpenOptions","Optional,"]},{"entry":["IN","RM_NOTIFICATION_ROUTINE","NotificationRoutine","Optional)."]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}}]}},"ul":{"@attributes":{"id":"ul0040","list-style":"none"},"li":{"@attributes":{"id":"ul0040-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0041","list-style":"none"},"li":["This routine opens an existing ResourceManager object by name. If a target ResourceManager object is persistent but currently un-opened, the object is initially in a \u201crecovering\u201d state and must be recovered; after recovery is complete, RecoveryCompleteResourceManager must be called.","Arguments:\n        \n        ","Return Value:"]}}}},"STATUS_SUCCESS","STATUS_INVALID_PARAMETER","STATUS_OBJECT_NAME_INVALID","STATUS_OBJECT_NAME_NOT_FOUND","STATUS_OBJECT_PATH_SYNTAX_BAD","STATUS_PRIVILEGE_NOT_HELD","STATUS_INSUFFICIENT_RESOURCES.","DestroyResourceManager","(IN PHANDLE ResourceManagerHandle).\n\n","STATUS_SUCCESS","STATUS_ACCESS_DENIED","STATUS_INVALID_HANDLE","STATUS_INSUFFICIENT_RESOURCES","STATUS_TM_NEEDS_RECOVERY.","QueryInformationResourceManager",{"@attributes":{"id":"p-0138","num":"0284"},"tables":{"@attributes":{"id":"TABLE-US-00013","num":"00013"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"126pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"(IN HANDLE","ResourceManagerHandle,"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"IN RESOURCEMANAGER_INFORMATION_CLASS"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"ResourceManagerInformationClass,"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"OUT PVOID","ResourceManagerInformation,"]},{"entry":[{},"IN ULONG","ResourceManagerInformationLength,"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"63pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"OUT PULONG","ReturnLength","Optional)."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]}}]}},"ul":{"@attributes":{"id":"ul0047","list-style":"none"},"li":{"@attributes":{"id":"ul0047-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0048","list-style":"none"},"li":["This routine returns the requested information about RMO represented by ResourceManagerHandle.","Arguments:\n        \n        ","Return Value:"]}}}},"STATUS_SUCCESS","STATUS_ACCESS_DENIED","STATUS_INVALID_HANDLE","STATUS_INSUFFICIENT_RESOURCES","STATUS_INVALID_INFO_CLASS","STATUS_INFO_LENGTH_MISMATCH","SetInformationResourceManager",{"@attributes":{"id":"p-0146","num":"0300"},"tables":{"@attributes":{"id":"TABLE-US-00014","num":"00014"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"133pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"(IN HANDLE","ResourceManagerHandle,"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"IN RESOURCEMANAGER_INFORMATION_CLASS"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},{},"ResourceManagerInformationClass,"]},{"entry":[{},"IN PVOID","ResourceManagerInformation,"]},{"entry":[{},"IN ULONG","ResourceManagerInformationLength)."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}]}},"ul":{"@attributes":{"id":"ul0050","list-style":"none"},"li":{"@attributes":{"id":"ul0050-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0051","list-style":"none"},"li":["This routine sets the requested information about RMO represented by ResourceManagerHandle.","Arguments:\n        \n        "]}}}},"STATUS_SUCCESS","STATUS_ACCESS_DENIED","STATUS_INVALID_HANDLE","STATUS_INSUFFICIENT_RESOURCES","STATUS_INVALID_INFO_CLASS","STATUS_INFO_LENGTH_MISMATCH.","CreateEnlistment",{"@attributes":{"id":"p-0154","num":"0315"},"tables":{"@attributes":{"id":"TABLE-US-00015","num":"00015"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"105pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["(IN","PHANDLE","ResourceManagerHandle,"]},{"entry":["IN","PHANDLE","TransactionHandle,"]},{"entry":["IN","NOTIFICATION_MASK","NotificationMask,"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"42pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["IN","LPVOID","TransactionKey","Optional)."]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}}]}},"ul":{"@attributes":{"id":"ul0053","list-style":"none"},"li":{"@attributes":{"id":"ul0053-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0054","list-style":"none"},"li":["This routine causes RMO to \u201cjoin\u201d a particular transaction, and receive notifications relating to it.","An RM can call this routine multiple times in order to enlist more than once on a transaction. Subsequent calls to CreateEnlistment replace a notification mask and transaction key without creating a new enlistment on the transaction.","NotificationMask may be used to request that notifications be received multiple times. For example, an RM receiving a PREPREPARE notification may request another by calling JoinTransaction and specifying the PREPREPARE flag. Thus, an RM may receive multiple PREPREPARE requests. Such requests may be refused, which may be desirable if the transaction has proceeded past the point the requested notification would have been received. For example, requesting a PREPREPARE when some RM has already been notified to PREPARE cannot be granted.","Arguments:","ResourceManagerHandle: Supplies a handle to an RM to receive notifications about the specified Transaction;","TransactionHandle: Supplies a handle to the Transaction that the RM wishes to Join;","NotificationMask: Specifies the notifications that RM would like to receive regarding this Transaction. Valid masks are as follows, and can be OR-ed together:\n        \n        ","TransactionKey: Specifies an opaque pointer value that the RM would like to receive along with any notifications for this Transaction. The RM may use this to associate notifications with some object in the RM address space, thus obviating the need to perform a lookup each time a notification occurs.","Return Value:"]}}}},"STATUS_SUCCESS","STATUS_ACCESS_DENIED","STATUS_INVALID_PARAMETER","STATUS_INVALID_HANDLE","STATUS_INSUFFICIENT_RESOURCES","STATUS_TM_TOO_LATE.","GetNotificationResourceManager",{"@attributes":{"id":"p-0162","num":"0343"},"tables":{"@attributes":{"id":"TABLE-US-00016","num":"00016"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"119pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"77pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["(IN","PHANDLE","ResourceManagerHandle,"]},{"entry":["IN","PTRANSACTION_NOTIFICATION","TransactionNotification,"]},{"entry":["IN","PLARGE_INTEGER","Timeout Optional)."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}},"ul":{"@attributes":{"id":"ul0056","list-style":"none"},"li":{"@attributes":{"id":"ul0056-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0057","list-style":"none"},"li":["This routine queries for and returns an RM notification, if any are available.","Arguments:","ResourceManagerHandle: Supplies a handle indicating the ResourceManager for which a notification should be returned;","TransactionNotification: Supplies a pointer to a TRANSACTION_NOTIFICATION structure to be filled with the first available notification; and","Timeout: Supplies the time until which the caller wishes to block while waiting for a notification to become available. If none are available when this timeout expires, the caller returns with STATUS_TIMEOUT.","Return Value:"]}}}},"STATUS_SUCCESS","STATUS_TIMEOUT","STATUS_ACCESS_DENIED","STATUS_INVALID_HANDLE","STATUS_INSUFFICIENT_RESOURCES.","The following includes a more detailed description of the APIs, listed above, to implement operations on TX kernel objects by RMO kernel objects, or on EN kernel objects, after joining a transaction. The descriptions include a description of the routine, corresponding arguments, and return values.","PrePrepareComplete","(IN PHANDLE EnlistmentHandle).\n\n","STATUS_SUCCESS","STATUS_ACCESS_DENIED","STATUS_INVALID_HANDLE","STATUS_INSUFFICIENT_RESOURCES","STATUS_TM_NOT_REQUESTED","PrepareComplete","(IN PHANDLE EnlistmentHandle).\n\n","STATUS_SUCCESS","STATUS_ACCESS_DENIED","STATUS_INVALID_HANDLE","STATUS_INSUFFICIENT_RESOURCES","STATUS_TM_NOT_REQUESTED","RollbackComplete","(IN PHANDLE EnlistmentHandle).\n\n","STATUS_SUCCESS","STATUS_ACCESS_DENIED","STATUS_INVALID_HANDLE","STATUS_INSUFFICIENT_RESOURCES","STATUS_TM_NOT_REQUESTED","CommitComplete","(IN PHANDLE EnlistmentHandle).\n\n","STATUS_SUCCESS","STATUS_ACCESS_DENIED","STATUS_INVALID_HANDLE","STATUS_INSUFFICIENT_RESOURCES","STATUS_TM_NOT_REQUESTED.","In addition, propagation routines may be provided for the kernel objects. Example of such routines follow.","RegisterProtocolAddressInformation",{"@attributes":{"id":"p-0199","num":"0402"},"tables":{"@attributes":{"id":"TABLE-US-00017","num":"00017"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"119pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"(IN","HANDLE","ResourceManager,"]},{"entry":[{},"IN","PROTOCOL_ID","ProtocolId,"]},{"entry":[{},"IN","ULONG","ProtocolInformationSize,"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"42pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"IN","PVOID","ProtocolInformation","Optional)."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]}]}}]}},"ul":{"@attributes":{"id":"ul0066","list-style":"none"},"li":{"@attributes":{"id":"ul0066-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0067","list-style":"none"},"li":["This routine registers a resource manager as a communications resource manager for a particular protocol. It also associates a blob of information with this protocol. Only one resource manager can register for a protocol on a given machine.","Arguments:","ResourceManager: Supplies a handle to the resource manager that we are registering;","ProtocolId: The GUID identifying the protocol;","ProtocolInformationSize: The size of ProtocolInformation;","ProtocolInformation: Optional blob to associate with this protocol;","Return Values:"]}}}},"STATUS_SUCCESS","STATUS_INVALID_HANDLE","MarshallTransaction",{"@attributes":{"id":"p-0203","num":"0413"},"tables":{"@attributes":{"id":"TABLE-US-00018","num":"00018"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"91pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"(IN","PHANDLE","TransactionHandle,"]},{"entry":[{},"IN","ULONG","NumberOfProtocols,"]},{"entry":[{},"IN","PPROTOCOL_ID","ProtocolArray,"]},{"entry":[{},"IN","ULONG","BufferLength,"]},{"entry":[{},"IN","PVOID","Buffer,"]},{"entry":[{},"OUT","PULONG","BufferUsed\u2003Optional)."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]}}}},"ul":{"@attributes":{"id":"ul0068","list-style":"none"},"li":{"@attributes":{"id":"ul0068-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0069","list-style":"none"},"li":["This routine requests that a representation of the Transaction corresponding to TransactionHandle be serialized into a buffer.","Arguments:","TransactionHandle: Supplies a handle indicating the Transaction for which the commit operation has been completed;","NumberOfProtocols: Indicates the size of the protocol array;","ProtocolArray: An array of PROTOCOL_IDs (GUIDs) that specify the protocols that may be used to marshal this transaction. The array should be ordered by preference\u2014the first protocol in the array is the preferred protocol, the second protocol is the second-most-preferred protocol, etc.;","BufferLength: Supplies the length of the Buffer that is available;","Buffer: Supplies a pointer to a buffer where the serialization of the transaction should be stored; and","BufferUsed: Supplies a pointer to a location where the actual bytes written into buffer should be stored.","Return Values:"]}}}},"STATUS_SUCCESS","STATUS_ACCESS_DENIED","STATUS_INVALID_HANDLE","STATUS_INSUFFICIENT_RESOURCES","GetProtocolAddressInformation","(IN ULONG AddressBufferSize,","OUT PVOID AddressBuffer,","OUT PULONG AddressBufferUsed Optional).\n\n","STATUS_SUCCESS","STATUS_ACCESS_DENIED","STATUS_INVALID_HANDLE","STATUS_INSUFFICIENT_RESOURCES","PullTransaction",{"@attributes":{"id":"p-0217","num":"0442"},"tables":{"@attributes":{"id":"TABLE-US-00019","num":"00019"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"84pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"(OUT PHANDLE","TransactionHandle,"]},{"entry":[{},"IN ULONG","NumberOfProtocols,"]},{"entry":[{},"IN PCRM_PROTOCOL_ID","ProtocolArray,"]},{"entry":[{},"IN ULONG","BufferLength,"]},{"entry":[{},"IN PVOID","Buffer)."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}},"ul":{"@attributes":{"id":"ul0072","list-style":"none"},"li":{"@attributes":{"id":"ul0072-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0073","list-style":"none"},"li":["This routine requests that the transaction represented by the serialization in buffer be made available by the transaction manager. A handle to the new Transaction object is returned, after the transaction has been successfully propagated by one of the registered resource managers.","Arguments:","TransactionHandle: Supplies a pointer to where the handle representing the new Transaction should be stored;","NumberOfProtocols: Indicates the size of the protocol array;","ProtocolArray: An array of PROTOCOL_IDs (GUIDs) that specify the protocols that may be used to marshal this transaction. The array should be ordered by preference\u2014the first protocol in the array is the preferred protocol, the second protocol is the second-most-preferred protocol, etc.;","BufferLength: Supplies the length of the buffer that is available;","Buffer: Supplies a pointer to a buffer where the serialization of the transaction is stored.","Return Values:"]}}}},"STATUS_SUCCESS","STATUS_ACCESS_DENIED","STATUS_INVALID_HANDLE","STATUS_INSUFFICIENT_RESOURCES","PushTransaction",{"@attributes":{"id":"p-0223","num":"0456"},"tables":{"@attributes":{"id":"TABLE-US-00020","num":"00020"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"105pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"(IN HANDLE","TransactionHandle,"]},{"entry":[{},"\u2009IN ULONG","NumberOfProtocols,"]},{"entry":[{},"\u2009IN PCRM_PROTOCOL_ID","ProtocolArray,"]},{"entry":[{},"\u2009IN ULONG","DestinationInfoLength,"]},{"entry":[{},"\u2009IN PVOID","DestinationInfo,"]},{"entry":[{},"\u2009IN ULONG","ResponseBufferLength,"]},{"entry":[{},"\u2009OUT PVOID","ResponseBuffer,"]},{"entry":[{},"\u2009OUT PULONG","ResponseBufferUsed Optional,"]},{"entry":[{},"\u2009OUT PULONG","PushCookie Optional)."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}},"ul":{"@attributes":{"id":"ul0074","list-style":"none"},"li":{"@attributes":{"id":"ul0074-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0075","list-style":"none"},"li":["This routine requests that the transaction be propagated to the destination machine using push-style propagation. Protocols will be used in the order they are listed in the ProtocolArray, until one succeeds. If no protocol is successful in propagating to the destination machine, the routine will return failure.","Arguments:","TransactionHandle: Supplies a pointer to the transaction object that should be propagated to the remote machine;","DestinationInfoLength: Supplies the length of the DestinationInfoLength that is available;","DestinationInfo: Supplies a pointer to a buffer where the \u201cendpoint\u201d information for the destination is stored. This may be the output received from a call to GetProtocalAddressInformation on the destination machine;","ResponseBufferLength: Supplies the length of the ResponseBuffer that is available;","ResponseBuffer: Supplies a pointer to a buffer where the serialization of the transaction is stored; and","PushCookie: Supplies a pointer to a buffer a cookie representing this push request will be stored.","Return Value:"]}}}},"STATUS_SUCCESS","STATUS_ACCESS_DENIED","STATUS_INVALID_HANDLE","STATUS_INSUFFICIENT_RESOURCES","GetPushTransactionBuffer",{"@attributes":{"id":"p-0229","num":"0471"},"tables":{"@attributes":{"id":"TABLE-US-00021","num":"00021"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"119pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"(IN HANDLE","TransactionHandle,"]},{"entry":[{},"IN ULONG","PushCookie,"]},{"entry":[{},"IN ULONG","ResponseBufferLength,"]},{"entry":[{},"OUT PVOID","ResponseBuffer,"]},{"entry":[{},"OUT PULONG","ResponseBufferUsed Optional)."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}},"ul":{"@attributes":{"id":"ul0076","list-style":"none"},"li":{"@attributes":{"id":"ul0076-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0077","list-style":"none"},"li":["This call is used to retrieve the output of a call to PushTransaction, in the event that the initial call to PushTransaction received a STATUS_BUFFER_TOO_SMALL return code. In that event, the caller is to call GetPushTransactionBuffer, and pass in a sufficient buffer size.","Arguments:","TransactionHandle: Supplies a pointer to the location where the handle representing the new Transaction is to be stored;","BufferLength: Supplies the length of the buffer that is available; and","Buffer: Supplies a pointer to a buffer where the serialization of the transaction is stored.","Return Value:"]}}}},"STATUS_SUCCESS","STATUS_ACCESS_DENIED","STATUS_INVALID_HANDLE","STATUS_INSUFFICIENT_RESOURCES","PropagationComplete",{"@attributes":{"id":"p-0235","num":"0483"},"tables":{"@attributes":{"id":"TABLE-US-00022","num":"00022"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"98pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"(IN HANDLE","EnlistmentHandle,"]},{"entry":[{},"\u2009IN ULONG","RequestCookie,"]},{"entry":[{},"\u2009IN ULONG","BufferLength,"]},{"entry":[{},"\u2009IN PVOID","Buffer)."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}},"ul":{"@attributes":{"id":"ul0078","list-style":"none"},"li":{"@attributes":{"id":"ul0078-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0079","list-style":"none"},"li":["This routine is called by a CRM after it has successfully completed propagating a transaction.","Arguments:","TransactionHandle: Supplies a pointer to the location where the handle representing the new Transaction is to be stored;","RequestCookie: Supplies the RequestCookie that was received in the original PROPAGATE notification argument, to indicate which request has been completed;","BufferLength: Supplies the length of the Buffer that is available; and","Buffer: Supplies a pointer to a buffer where the serialization of the transaction is stored.","Return Value:"]}}}},"STATUS_SUCCESS","STATUS_ACCESS_DENIED","STATUS_INVALID_HANDLE","STATUS_INSUFFICIENT_RESOURCES","PropagationFailed",{"@attributes":{"id":"p-0241","num":"0496"},"tables":{"@attributes":{"id":"TABLE-US-00023","num":"00023"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"112pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"(IN HANDLE","ResourceManagerHandle,"]},{"entry":[{},"\u2009IN ULONG","RequestCookie,"]},{"entry":[{},"\u2009IN STATUS","PropStatus)."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}},"ul":{"@attributes":{"id":"ul0080","list-style":"none"},"li":{"@attributes":{"id":"ul0080-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0081","list-style":"none"},"li":["A CRM uses this routine to indicate that it has failed to propagate the transaction as requested.","Arguments:","TransactionHandle: Supplies a pointer to the location where the handle representing the new transaction is to be stored;","BufferLength: Supplies the length of the Buffer that is available; and","Buffer: Supplies a pointer to a buffer where the serialization of the transaction is stored.","Return Value:"]}}}},"STATUS_SUCCESS","STATUS_ACCESS_DENIED","STATUS_INVALID_HANDLE","STATUS_INSUFFICIENT_RESOURCES.",{"@attributes":{"id":"p-0246","num":"0507"},"figref":"FIG. 5","b":["500","500","500","500"]},"Computer environment  includes a general-purpose computing device in the form of a computer . The components of computer  can include, but are not limited to, one or more processors or processing units , system memory , and system bus  that couples various system components including processor  to system memory .","System bus  represents one or more of any of several types of bus structures, including a memory bus or memory controller, a peripheral bus, an accelerated graphics port, and a processor or local bus using any of a variety of bus architectures. By way of example, such architectures can include an Industry Standard Architecture (ISA) bus, a Micro Channel Architecture (MCA) bus, an Enhanced ISA (EISA) bus, a Video Electronics Standards Association (VESA) local bus, a Peripheral Component Interconnects (PCI) bus also known as a Mezzanine bus, a PCI Express bus, a Universal Serial Bus (USB), a Secure Digital (SD) bus, or an IEEE 1394, i.e., FireWire, bus.","Computer  may include a variety of computer readable media. Such media can be any available media that is accessible by computer  and includes both volatile and non-volatile media, removable and non-removable media.","System memory  includes computer readable media in the form of volatile memory, such as random access memory (RAM) ; and\/or non-volatile memory, such as read only memory (ROM)  or flash RAM. Basic input\/output system (BIOS) , containing the basic routines that help to transfer information between elements within computer , such as during start-up, is stored in ROM  or flash RAM. RAM  typically contains data and\/or program modules that are immediately accessible to and\/or presently operated on by processing unit .","Computer  may also include other removable\/non-removable, volatile\/non-volatile computer storage media. By way of example,  illustrates hard disk drive  for reading from and writing to a non-removable, non-volatile magnetic media (not shown), magnetic disk drive  for reading from and writing to removable, non-volatile magnetic disk  (e.g., a \u201cfloppy disk\u201d), and optical disk drive  for reading from and\/or writing to a removable, non-volatile optical disk  such as a CD-ROM, DVD-ROM, or other optical media. Hard disk drive , magnetic disk drive , and optical disk drive  are each connected to system bus  by one or more data media interfaces . Alternatively, hard disk drive , magnetic disk drive , and optical disk drive  can be connected to the system bus  by one or more interfaces (not shown).","The disk drives and their associated computer-readable media provide non-volatile storage of computer readable instructions, data structures, program modules, and other data for computer . Although the example illustrates a hard disk , removable magnetic disk , and removable optical disk , it is appreciated that other types of computer readable media which can store data that is accessible by a computer, such as magnetic cassettes or other magnetic storage devices, flash memory cards, CD-ROM, digital versatile disks (DVD) or other optical storage, random access memories (RAM), read only memories (ROM), electrically erasable programmable read-only memory (EEPROM), and the like, can also be utilized to implement the example computing system and environment.","Any number of program modules can be stored on hard disk , magnetic disk , optical disk , ROM , and\/or RAM , including by way of example, operating system , one or more application programs , other program modules , and program data . Each of such operating system , one or more application programs , other program modules , and program data  (or some combination thereof) may enact transactions, in accordance with the example embodiments described above, to implement all or part of the resident components that support the distributed file system.","A user can enter commands and information into computer  via input devices such as keyboard  and a pointing device  (e.g., a \u201cmouse\u201d). Other input devices  (not shown specifically) may include a microphone, joystick, game pad, satellite dish, serial port, scanner, and\/or the like. These and other input devices are connected to processing unit  via input\/output interfaces  that are coupled to system bus , but may be connected by other interface and bus structures, such as a parallel port, game port, or a universal serial bus (USB).","Monitor  or other type of display device can also be connected to the system bus  via an interface, such as video adapter . In addition to monitor , other output peripheral devices can include components such as speakers (not shown) and printer  which can be connected to computer  via I\/O interfaces .","Computer  can operate in a networked environment using logical connections to one or more remote computers, such as remote computing device . By way of example, remote computing device  can be a PC, portable computer, a server, a router, a network computer, a peer device or other common network node, and the like. Remote computing device  is illustrated as a portable computer that can include many or all of the elements and features described herein relative to computer . Alternatively, computer  can operate in a non-networked environment as well.","Logical connections between computer  and remote computer  are depicted as a local area network (LAN)  and a general wide area network (WAN) . Such networking environments are commonplace in offices, enterprise-wide computer networks, intranets, and the Internet.","When implemented in a LAN networking environment, computer  is connected to local network  via network interface or adapter . When implemented in a WAN networking environment, computer  typically includes modem  or other means for establishing communications over wide network . Modem , which can be internal or external to computer , can be connected to system bus  via I\/O interfaces  or other appropriate mechanisms. It is to be appreciated that the illustrated network connections are examples and that other means of establishing at least one communication link between computers  and  can be employed.","In a networked environment, such as that illustrated with computing environment , program modules depicted relative to computer , or portions thereof, may be stored in a remote memory storage device. By way of example, remote application programs  reside on a memory device of remote computer . For purposes of illustration, applications or programs and other executable program components such as the operating system are illustrated herein as discrete blocks, although it is recognized that such programs and components reside at various times in different storage components of computing device , and are executed by at least one data processor of the computer.","Various modules and techniques may be described herein in the general context of computer-executable instructions, such as program modules, executed by one or more computers or other devices. Generally, program modules include routines, programs, objects, components, data structures, etc. for performing particular tasks or implement particular abstract data types. Typically, the functionality of the program modules may be combined or distributed as desired in various embodiments.","An implementation of these modules and techniques may be stored on or transmitted across some form of computer readable media. Computer readable media can be any available media that can be accessed by a computer. By way of example, and not limitation, computer readable media may comprise \u201ccomputer storage media\u201d and \u201ccommunications media.\u201d","\u201cComputer storage media\u201d includes volatile and non-volatile, removable and non-removable media implemented in any method or technology for storage of information such as computer readable instructions, data structures, program modules, or other data. Computer storage media includes, but is not limited to, RAM, ROM, EEPROM, flash memory or other memory technology, CD-ROM, digital versatile disks (DVD) or other optical storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other medium which can be used to store the desired information and which can be accessed by a computer.","\u201cCommunication media\u201d typically embodies computer readable instructions, data structures, program modules, or other data in a modulated data signal, such as carrier wave or other transport mechanism. Communication media also includes any information delivery media. The term \u201cmodulated data signal\u201d means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. As a non-limiting example only, communication media includes wired media such as a wired network or direct-wired connection, and wireless media such as acoustic, RF, infrared, and other wireless media. Combinations of any of the above are also included within the scope of computer readable media.","Reference has been made throughout this specification to \u201cone embodiment,\u201d \u201can embodiment,\u201d or \u201can example embodiment\u201d meaning that a particular described feature, structure, or characteristic is included in at least one embodiment of the present invention. Thus, usage of such phrases may refer to more than just one embodiment. Furthermore, the described features, structures, or characteristics may be combined in any suitable manner in one or more embodiments.","One skilled in the relevant art may recognize, however, that the invention may be practiced without one or more of the specific details, or with other methods, resources, materials, etc. In other instances, well known structures, resources, or operations have not been shown or described in detail merely to avoid obscuring aspects of the invention.","While example embodiments and applications of the present invention have been illustrated and described, it is to be understood that the invention is not limited to the precise configuration and resources described above. Various modifications, changes, and variations apparent to those skilled in the art may be made in the arrangement, operation, and details of the methods and systems of the present invention disclosed herein without departing from the scope of the claimed invention."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The scope of the present invention will be apparent from the following detailed description, when taken in conjunction with the accompanying drawings, and such detailed description, while indicating embodiments of the invention, is illustrative only, since various changes and modifications will become apparent to those skilled in the art from the following detailed description, in which:",{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 5"}]},"DETDESC":[{},{}]}
