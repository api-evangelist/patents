---
title: Synchronizing database and non-database resources without a commit coordinator
abstract: A system to synchronize a database and a non-database resource includes an application to transmit a request to a service provider to perform an action. The service provider receives the request and performs the action, the action not being under commit coordination. The service provider further inserts an entry into an action-reversal table to reverse the action and makes the insertion permanent. The service provider, on behalf of the application, then deletes the entry from the action-reversal table. The application may then be configured to perform one of the following: (1) make the delete permanent by performing a COMMIT; and (2) roll back the delete by performing a ROLLBACK. At a later time, the service provider may reverse the action in the event the entry remains in the action-reversal table. Corresponding methods and articles of manufacture (i.e., computer-readable media) are also disclosed herein.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09020905&OS=09020905&RS=09020905
owner: International Business Machines Corporation
number: 09020905
owner_city: Armonk
owner_country: US
publication_date: 20091031
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY","DETAILED DESCRIPTION"],"p":["This invention relates to database and non-database resources, and more particularly to apparatus and methods for performing commit coordination for database and non-database resources.","A database transaction is a unit of work performed by a database management system (DBMS) or other application associated with a database. Transactions are generally performed using an \u201call-or-nothing\u201d approach, meaning that all work units associated with a transaction must complete or none must complete. A \u201ccommit coordinator\u201d built into a DBMS or application may ensure that a transaction completes in its entirety or not at all.","For example, consider a financial transaction where an application performs several steps using an \u201call-or-nothing\u201d approach. In particular, the application transfers funds from a checking account to a savings account using the following steps (listed in pseudo code):\n\n","A transaction may terminate in one of two different ways, namely with a COMMIT or a ROLLBACK statement. When a transaction ends with a COMMIT statement (hereinafter referred to as a \u201cCOMMIT\u201d), data modifications specified by the transaction are made permanent in the database. If, on the other hand, one or more data modifications in the transaction fail, a ROLLBACK statement (hereinafter referred to as a \u201cROLLBACK\u201d) may be used to undo the effects of all statements in the transaction. For example, if a disk drive were to crash during the \u201ccredit savings account\u201d step listed above, a ROLLBACK statement could be executed in order to undo the data modifications made by the \u201cdebit checking account\u201d statement. Although the transaction failed, data integrity would remain intact to keep the accounts balanced.","Unfortunately, an application may perform certain actions or cause certain actions to occur that fall outside of the application's normal \u201ccommit coordination.\u201d For example, consider an application that invokes, as part of a transaction, a service provider to perform some action, such as store a large image file in a file system. The service provider and file system may have no knowledge of the transaction. Thus, the actions performed by the service provider may fall outside the application's \u201ccommit coordination.\u201d In other words, the application may be unable to reverse actions performed by the service provider if the application ultimately performs a ROLLBACK. Likewise, the service provider may have no knowledge of the ROLLBACK and thus will also be unable to take actions to reverse the action. Using the above example, such a scenario may lead to orphaned files in the file system that were not reversed (i.e., deleted from the file system) in response to a ROLLBACK.","In view of the foregoing, what is needed is an apparatus and method to reverse actions performed by a service provider or other entity acting outside an application's normal commit coordination. Such an apparatus and method would ideally be implemented without the need to modify the application and\/or DBMS. Such an apparatus and method would also ideally leverage existing functionality in the application and\/or DBMS.","The invention has been developed in response to the present state of the art and, in particular, in response to the problems and needs in the art that have not yet been fully solved by currently available apparatus and methods. Accordingly, the invention has been developed to provide apparatus and methods for performing commit coordination for database and non-database resources. The features and advantages of the invention will become more fully apparent from the following description and appended claims, or may be learned by practice of the invention as set forth hereinafter.","Consistent with the foregoing, a system to synchronize a database and a non-database resource is disclosed herein. In certain embodiments, such a system includes an application to transmit a request to a service provider to store an object. The service provider receives the request and stores the object as a file, wherein the file is a non-database resource. The service provider further inserts an entry into a new file-deletion table to delete the file and makes the insertion permanent by performing a COMMIT. The service provider, on behalf of the application, is configured to delete the entry from the file-deletion table. The application may then perform one of the following: (1) make the delete permanent by performing a COMMIT; and (2) roll back the delete by performing a ROLLBACK. At a later time, the service provider is configured to delete the file in the event the entry remains in the file-deletion-table. In this way, a file system that is not under commit coordination may be synchronized with an application that is under commit coordination.","In another aspect of the invention, a system to synchronize a database and a non-database resource includes an application to transmit a request to a service provider to perform an action. The service provider receives the request and performs the action, the action not being under commit coordination. The service provider further inserts an entry into an action-reversal table to reverse the action and makes the insertion permanent by performing a COMMIT. The service provider, on behalf of the application, then deletes the entry from the action-reversal table. The application may then be configured to perform one of the following: (1) make the delete permanent by performing a COMMIT; and (2) roll back the delete by performing a ROLLBACK. At a later time, the service provider is configured to reverse the action in the event the entry remains in the action-reversal table.","Corresponding methods and articles of manufacture (i.e., computer-readable media) are also disclosed and claimed herein.","It will be readily understood that the components of the present invention, as generally described and illustrated in the Figures herein, could be arranged and designed in a wide variety of different configurations. Thus, the following more detailed description of the embodiments of the invention, as represented in the Figures, is not intended to limit the scope of the invention, as claimed, but is merely representative of certain examples of presently contemplated embodiments in accordance with the invention. The presently described embodiments will be best understood by reference to the drawings, wherein like parts are designated by like numerals throughout.","As will be appreciated by one skilled in the art, the present invention may be embodied as an apparatus, system, method, computer-readable medium, or computer program product. Furthermore, the present invention may take the form of a hardware embodiment, a software embodiment (including firmware, resident software, micro-code, etc.) configured to operate hardware, or an embodiment combining software and hardware aspects that may generally be referred to herein as a \u201cmodule\u201d or \u201csystem.\u201d Furthermore, the present invention may take the form of a computer program product embodied in any tangible medium of expression having computer-usable program code stored therein.","Any combination of one or more computer-usable or computer-readable medium(s) may be utilized to store the computer program product. The computer-usable or computer-readable medium may be, for example but not limited to, an electronic, magnetic, optical, electromagnetic, infrared, or semiconductor system, apparatus, or device. More specific examples (a non-exhaustive list) of a computer-readable medium may include the following: an electrical connection having one or more wires, a portable computer diskette, a hard disk, a random access memory (RAM), a read-only memory (ROM), an erasable programmable read-only memory (EPROM or Flash memory), an optical fiber, a portable compact disc read-only memory (CDROM), an optical storage device, or a magnetic storage device. In the context of this document, a computer-usable or computer-readable medium may be any medium that can contain, store, or transport a program for use by or in connection with the instruction execution system, apparatus, or device.","Computer program code for carrying out operations of the present invention may be written in any combination of one or more programming languages, including an object-oriented programming language such as Java, Smalltalk, C++, or the like, and conventional procedural programming languages, such as the \u201cC\u201d programming language or similar programming languages. The program code may execute entirely on a user's computer, partly on the user's computer, as a stand-alone software package, partly on the user's computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario, the remote computer may be connected to the user's computer through any type of network, including a local area network (LAN) or a wide area network (WAN), or the connection may be made to an external computer (for example, through the Internet using an Internet Service Provider).","Embodiments of the invention are described below with reference to flowchart illustrations and\/or block diagrams of methods, apparatus, systems, computer-readable mediums, and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and\/or block diagrams, and combinations of blocks in the flowchart illustrations and\/or block diagrams, can be implemented by computer program instructions or code. These computer program instructions may be provided to a processor of a general-purpose computer, special-purpose computer, or other programmable data processing apparatus to produce a machine, such that the instructions, which execute via the processor of the computer or other programmable data processing apparatus, create means for implementing the functions\/acts specified in the flowchart and\/or block diagram block or blocks.","These computer program instructions may also be stored in a computer-readable medium that can direct a computer or other programmable data processing apparatus to function in a particular manner, such that the instructions stored in the computer-readable medium produce an article of manufacture including instruction means which implement the function\/act specified in the flowchart and\/or block diagram block or blocks.","The computer program instructions may also be loaded onto a computer or other programmable data processing apparatus to cause a series of operational steps to be performed on the computer or other programmable apparatus to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions\/acts specified in the flowchart and\/or block diagram block or blocks.","Referring to , one example of an environment  where an apparatus and method in accordance with the invention may operate is illustrated. In this example, the environment  includes an application  configured to access a database comprising one or more database tables . This database may be accessed by way of a database management system  (e.g., DB2 or analogous DBMS ). In certain embodiments, the database tables  are stored on disk drives  or other suitable storage devices such as solid-state drives  (i.e., SSDs). The application  may be responsible for synchronizing the database tables  to maintain data integrity and ensure that the data contained in the tables  is consistent. Thus, the application  may initiate \u201ccommit coordination\u201d for data stored in the database tables .","In certain embodiments, the application  may communicate with a service provider  (such as \u201cObject Access Method\u201d (OAM) or other service provider) to provide one or more services. For example, the service provider  may enable the application  to store and retrieve \u201cobjects\u201d in one or more storage devices, such as disk drives , optical drives , or tape drives . As an example, the service provider  may enable the application to store one or more objects as files in a file system . The application  may communicate with the service provider  by way of an application programming interface  (such as the OSREQ API where the service provider is OAM).","An \u201cobject\u201d may, in certain embodiments, include any named sequence of bytes. For example, an object could be image data (such as a compressed scanned image) or coded data. The service provider  may have no knowledge of the content, format, and\/or structure of the sequence of bytes.","In certain embodiments, when the application  directs the service provider  to store an object in the storage devices , , , metadata for the object may be stored in a database table , such as an object directory table . This metadata may include information to locate and manage the object, among other information. When the application  stores the object (using the service provider API ), the service provider  may add a row (i.e., entry) to the object directory table  containing metadata for the stored object. However, the application  and not the service provider  may perform the COMMIT for that row. If the application ultimately performs a ROLLBACK, this will delete the entry for the object from the object directory table  but may leave the object orphaned in the file system . In other words, because the file system  is not under the \u201ccommit coordination\u201d of the DBMS , the object may continue to exist in the file system  even though the record for the object has been deleted from the object directory table . Furthermore, if the application  once again attempts to store the same specifically named object in the file system  (such as might occur in a \u201cstore-rollback-store\u201d scenario), the store operation may fail because the named object already exists in the file system .","Accordingly, it would be an advance in the art to provide an apparatus and method to reverse actions performed by a service provider  or other entity acting outside an application's commit coordinator. It would be a further advance to provide such an apparatus and method without modifying the application  and\/or DBMS . Such an apparatus and method would ideally leverage existing functionality in the application  and\/or DBMS .","To provide these features, in selected embodiments, a file-deletion table  is provided to act as a proxy for a resource residing outside a DBMS's commit coordination. The file-deletion table  is under the DBMS's commit coordination and therefore be used to keep non-database resources synchronized and consistent with database resources. The function and operation of the file-deletion table  as well as other functionality will be described in more detail in association with .","In the illustrated example, the application , DBMS , and service provider  run within the same host operating system  residing on a host system  (e.g., a mainframe computer or other computing system). However, the components , ,  do not necessarily need to run on the same operating system  or host system . For example, the components , ,  may operate in different operating systems  or run on different host systems . In certain embodiments, the components , ,  may operate on different computers that communicate with each other over a network (e.g., a LAN, WAN, the Internet, or the like). Thus, the illustrated hardware and software configuration is provided only by way of example and is not intended to be limiting.","Referring to , one embodiment of a method  for synchronizing a database and a non-database resource is illustrated. The method  of  shows a scenario where an application  performs a ROLLBACK of the work it has performed.  shows the states of various data structures at different points in time as the method  executes.","As illustrated in , the application  (operating under an application thread ) initially transmits  a request to a service provider  to store a named object. The service provider  (operating under a separate service thread ) then generates  a unique identifier for the named object in order to differentiate the instance of the object from other instances of the named object. This differentiation may be important since the contents of an instance of a named object can be different from the contents of another instance of the same named object.","Operating under the service thread , the service provider  then stores  the named object as a file with a unique identifier in the file system . For example, as shown in , at time T, an object named myfile with the unique identifier \u201c7\u201d is stored as myfile.7 in the file system .","In anticipation that the application  may decide to roll back the request to store the named object, the service provider  adds  a \u201cdelete\u201d entry to the file-deletion table  for the named object. The service provider may then perform  a COMMIT for this entry on the service thread  to make the entry permanent in the file-deletion table . For example, as shown at time T, the service provider  inserts the entry delete myfile.7 into the file-deletion table (FDT) . In essence, this makes the deletion of the file the default action to be performed by the service provider .","Operating under the application thread , the service provider  then adds  the named object to the object directory table , thereby indicating that the named object is stored in the file system . As shown at time T, the service provider  inserts metadata for the named object into the object directory table .","The service provider  then deletes  the entry from the file-deletion table  with the intent of eliminating the request to delete the named object. For example, as shown at time T, the service provider  removes the delete myfile.7 entry from the file-deletion table . The permanence of this deletion from the file-deletion table  will depend on the ultimate disposition of the transaction, and more specifically whether a COMMIT or ROLLBACK is ultimately executed by the application .","In this example, the application  eventually performs  a ROLLBACK, thereby reversing the work performed by the application . This will roll back the deletion of the delete myfile.7 entry, thereby adding it back to the file-deletion table . Thus, as shown at time T, the delete myfile.7 entry is restored to the file-deletion table  and the object's entry in the object directory table  is deleted. Note that the actual file remains in the file system . Further note that the service provider  is unaware that the application  has disposed of the transaction by performing a ROLLBACK.","In order to delete the file containing the named object from the file system , a cleanup thread  is executed by the service provider  at some future point in time. As shown, the service provider  initially retrieves entries from the file-deletion table  that are older than some interval n. The interval n may be selected such as to allow the application  enough time to dispose of the transaction (perform either a COMMIT or a ROLLBACK). This interval n may be on the order of seconds, minutes, hours, days, or weeks, depending on the application .","Once an entry older than some interval n has been retrieved, the service provider  deletes the file specified by the entry in the file-deletion table . This will synchronize the file system  with the object directory table , where the entry for the named object was already deleted by the ROLLBACK . As shown in , at time T, the file myfile.7 is deleted from the file system .","Finally, the service provider  deletes the entry from the file-deletion table  requesting the deletion of the named object. The service provider  performs a COMMIT for this change on the cleanup thread  to make it permanent. Thus, as shown at time T, the delete myfile.7 entry is deleted from the file-deletion table .","Due to the unique identifier associated with each named object, the application  may continue to perform actions for the same named object, even if the previous instance of the named object has still not been deleted from the file system . For example, if the application  were to attempt to store the same named object again before the previous instance had been deleted, the service provider  would generate a new unique identifier for the new instance (e.g., myfile.8). This instance could then be stored in the file system  without incurring an error due to a duplicate file name.","Referring to , another embodiment of a method  for synchronizing a database and a non-database resource is illustrated. The method  of  shows a scenario wherein the application  performs a COMMIT.  shows the states of various data structures at different points in time as the method  is executed. The method  is the same as the method  illustrated in  up until the time the application  performs  a COMMIT (instead of a ROLLBACK).","As shown in , the application  performs  a COMMIT, thereby making work performed by the application  permanent. This will permanently delete the delete myfile.7 entry from the file-deletion table . Thus, as shown at time Tin , the delete myfile.7 entry is removed from the file-deletion table . The entry in the object directory table , however, is retained. Like the previous example, the service provider  is unaware that the application  has performed the COMMIT.","Like the previous example, a cleanup thread  is executed by the service provider  at some future point in time. Because the entry for the named object has been removed from the file deletion table , the cleanup thread  will not delete the myfile.7 file from the file system . This will ensure that the file system  stays synchronized with the object directory table .","Referring to , in certain embodiments, a service provider  in accordance with the invention may be modified to implement the methods ,  illustrated in . Such a service provider  may include one or more modules to implement this functionality. These modules may be implemented in hardware, software or firmware executable on hardware, or a combination thereof. In selected embodiments, these modules include one or more of an ID generator module , a storage module , an add-row module , a commit module , an add-to-directory module , a delete-row module , and a cleanup module . These modules are presented only by way of example and are not intended to be limiting. In certain embodiments, more or fewer modules than those illustrated may be provided. In other embodiments, the functionality from certain modules may be combined into fewer modules or, conversely, be divided into several modules.","When the service provider  receives a request to store a named object, an ID generator module  generates a unique identifier for the named object in order to differentiate the instance of the object from other instances of the named object. A storage module  then stores the named object as a uniquely named file in the file system . Once the file has been stored, an add-row module  inserts a \u201cdelete\u201d entry into the file-deletion table  for the named object on the service thread . A commit module  makes this entry permanent in the file-deletion table . This will make the deletion of the file the default action to be performed by the service provider .","Once the add-row module  has added a \u201cdelete\u201d entry to the file-deletion table  and the entry has been committed, an add-to-directory module  adds  an entry associated with the named object to the object directory table  on the application thread . This will indicate that the named object is stored in the file system . A delete-row module  then deletes  the previously discussed \u201cdelete\u201d entry from the file-deletion table  with the intent of eliminating the request to delete the named object. The permanence of this deletion will depend on the ultimate disposition of the transaction. At this point, the application  is responsible for performing either a COMMIT or ROLLBACK to make permanent or reverse the work performed by the application .","At some future point in time, a cleanup module  removes files from the file system  that have been identified for deletion in the file-deletion table . For example, a delay module  is configured to retrieve entries from the file-deletion table  that are older than some interval n. A delete-file module  then deletes any files that are identified in the entries. This will synchronize the file system  with the object directory table . Once a file has been deleted from the file system , a delete-row module  deletes the associated \u201cdelete\u201d entry from the file-deletion table . A commit module  then performs a COMMIT to make the change permanent in the file-deletion table .","Referring to , although the apparatus and methods discussed herein have been discussed primarily in association with deleting files from a file system , the apparatus and methods discussed herein have much broader applicability. Indeed, deleting files from a file system  represents just one type of action that may be addressed by the apparatus and methods disclosed herein. In other embodiments, the apparatus and methods may be used to reverse a wide variety of actions that fall outside the normal \u201ccommit coordination\u201d of an application  or DBMS . More specifically, a database table  may be used as a proxy to reverse a wide variety of actions when an application  ultimately disposes of a transaction, such as by performing a ROLLBACK. A broader method , which encompasses the methods described in , is illustrated in .","As illustrated in , an application  (operating under an application thread ) initially transmits  a request to a service provider  to perform some action. This action could include virtually anything, such as storing a file, executing a program, generating an object or artifact, performing a service, or the like. In certain embodiments, the service provider  (operating under a separate service thread ) generates  a unique identifier for this action in order to differentiate the action from other actions. The service provider  then performs  the action with the unique identifier.","In anticipation that the application  may decide to roll back the request to perform the action, the service provider  adds  an entry to an action-reversal table (similar to the file deletion table ) for the action. The service provider  then, on the service thread , performs  a COMMIT for this entry to make the entry permanent in the table. This will make the reversal of the action the default task to be performed by the service provider .","Operating under the application thread , the service provider  then deletes  the entry from the action-reversal table, with the intent of eliminating the request to perform the action. The permanence of this deletion will depend on the ultimate disposition of the transaction, and more specifically whether a COMMIT or ROLLBACK is ultimately executed by the application .","If the application  eventually performs  a ROLLBACK, thereby reversing work performed by the application , the application  will roll back the deletion of the entry, thereby adding it back to the action-reversal table. Note that at this time the action will still have been performed and not reversed. Similarly, the service provider  will be unaware that the application  has disposed of the transaction by performing a ROLLBACK.","In order to reverse the action designated in the action-reversal table, a cleanup thread  is executed by the service provider  at some future point in time. As shown, the service provider  may initially retrieve  entries from the action-reversal table that are older than some interval n. The interval n may be selected such as to allow the application  enough time to dispose of the transaction by performing either a COMMIT or a ROLLBACK. Once an entry older than some interval n has been retrieved, the service provider  reverses  the action designated by the entry. Finally, the service provider  deletes  the entry from the action-reversal table requesting the reversal of the action. The service provider  then performs  a COMMIT to make this change permanent. In this way, any action falling outside an application's commit coordinator may be reversed.","The flowcharts and block diagrams in the Figures illustrate the architecture, functionality, and operation of possible implementations of systems, methods, and computer program products according to various embodiments of the present invention. In this regard, each block in the flowcharts or block diagrams may represent a module, segment, or portion of code which comprises one or more executable instructions for implementing the specified logical function(s). It should also be noted that, in some alternative implementations, the functions noted in the block may occur out of the order noted in the Figures. For example, two blocks shown in succession may, in fact, be executed substantially concurrently, or the blocks may sometimes be executed in the reverse order, depending upon the functionality involved. Other implementations may not require all of the disclosed steps to achieve the desired functionality. It will also be noted that each block of the block diagrams and\/or flowchart illustrations, and combinations of blocks in the block diagrams and\/or flowchart illustrations, may be implemented by special purpose hardware-based systems that perform the specified functions or acts, or combinations of special purpose hardware and computer instructions."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["In order that the advantages of the invention will be readily understood, a more particular description of the invention briefly described above will be rendered by reference to specific embodiments illustrated in the appended drawings. Understanding that these drawings depict only typical embodiments of the invention and are not therefore to be considered limiting of its scope, these embodiments will be described and explained with additional specificity and detail through use of the accompanying drawings, in which:",{"@attributes":{"id":"p-0013","num":"0017"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0014","num":"0018"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0015","num":"0019"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0016","num":"0020"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0017","num":"0021"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0018","num":"0022"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0019","num":"0023"},"figref":"FIG. 7"}]},"DETDESC":[{},{}]}
