---
title: Query workload statistics collection in a database management system
abstract: In various embodiments, a method, apparatus, and article of manufacture collect statistics in a database management system. A workload comprising a plurality of database queries is received. Query statistics for the database queries are identified. The query statistics for the database queries are consolidated to provide consolidated statistics. One or more statistics collection requests are generated based on the consolidated statistics.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07302422&OS=07302422&RS=07302422
owner: International Business Machines Corporation
number: 07302422
owner_city: Armonk
owner_country: US
publication_date: 20040414
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION"],"p":["1. Field of the Invention","This invention relates generally to database management systems, and more particularly to collecting statistics in database management systems.","2. Description of the Related Art","Relational database management systems allow large volumes of data to be stored and accessed efficiently and conveniently in a computer system. In a database management system, data is stored in database tables which organize the data into rows and columns. The relational database management system responds to user commands to store and access the data. To more quickly access the data in a database table, an index is generated based on one or more specified columns of the database table.","The user commands are typically Structured Query Language statements such as SELECT, INSERT, UPDATE and DELETE, to select, insert, update and delete, respectively, the data in the rows and columns. The SQL statements typically conform to a SQL standard as published by the American National Standards Institute (ANSI) or the International Standards Organization (ISO).","In some relational database management systems, a query processor receives a SQL statement. A query optimizer evaluates various alternative execution plans for the SQL statement and typically selects an execution plan having a lowest estimated cost, which may be in time, resources, or a combination thereof. The query processor executes the selected execution plan. The query optimizer uses a set of database statistics to evaluate an execution plan. The database statistics comprise information about the state of the data in the relational database management system. The relational database management system typically provides one or more tools to collect the database statistics.","In a relational database management system, timely statistics information can improve performance. INSERT, UPDATE and DELETE statements, in addition to various utilities, may change the data in the database. As the data changes in the database, the performance of the database management system may degrade because the statistics do not reflect the current state of the database. Hence, the amount of time to process queries may increase. Therefore, database administrators periodically re-collect the database statistics.","Database administrators typically collect nominal database statistics, such as single column cardinality, on all tables, columns of the tables and indexes. Collecting database statistics on all tables, columns and indexes can consume a large amount of time. However, database administrators typically do not have the time and\/or expertise to analyze the queries to determine what columns and column groups are most important and what database statistics would be most beneficial to improve performance.","Sometimes database statistics are collected for columns which have not been referenced in any SQL statement. When columns are not used as predicates or aggregates within a SQL statement, statistics on those columns are useless. Collecting database statistics that are not used wastes both processor and storage resources and consumes a large amount of processor time. Processor time is expensive and it is very expensive to spend valuable processor time collecting statistics rather than running business applications. Indeed, the expense of collecting database statistics for all columns and indexes often results in re-collecting statistics less frequently than is otherwise desirable to maintain desirable performance levels.","Various statistics collection tools examine the real-time statistics to trigger re-collection. For example, one statistics collection tool examines the growth in table size to trigger re-collection. If the table grows by, for example, fifteen percent, then database statistics are recollected. Another statistics collection tool monitors the number of INSERT, UPDATE and DELETE statements that were performed on the table. If the number of INSERT, UPDATE and DELETE statements exceeds a threshold, then recollecting database statistics is recommended. Some statistics collection tools examine the system throughput and schedule database statistics re-collection at off-peak times with a very low scheduling priority. However, these statistics collection tools do not address what statistics to collect, and the statistics re-collection can remain both inefficient because the re-collection consumes a large amount of time and ineffective because the re-collection may not be performed sufficiently often to reflect the state of the database.","Therefore, there is a need for an improved technique for statistics collection in a database management system.","To overcome the limitations in the prior art described above, and to overcome other limitations that will become apparent upon reading and understanding the present specification, various embodiments of a method, apparatus, and article of manufacture for collecting statistics are provided.","In one embodiment, statistics are collected in a database management system. A workload comprising a plurality of database queries is received. Query statistics for the database queries are identified. The query statistics for the database queries are consolidated to provide consolidated statistics. One or more statistics collection tasks are generated based on the consolidated statistics.","In another embodiment, the database management system also comprises one or more collection objects. Statistics collection tasks are generated for the respective collection objects. In yet another embodiment, the collection objects are table spaces.","In this way, an improved technique for collecting statistics in a database management system has been provided.","To facilitate understanding, identical reference numerals have been used, where possible, to designate identical elements that are common to some of the figures.","After considering the following description, those skilled in the art will clearly realize that the teachings of the various embodiments of the present invention can be utilized to collect statistics. In various embodiments, statistics are collected in a database management system. A workload comprising a plurality of database queries is received. Query statistics for the database queries are identified. The query statistics for the database queries are consolidated to provide consolidated query statistics. One or more statistics collection tasks are generated based on the consolidated query statistics.","In another embodiment, the database management system also comprises one or more collection objects. Statistics collection tasks are generated for the respective collection objects based on the consolidated statistics. In yet another embodiment, the collection objects are table spaces.",{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 1","b":["30","32","34","36","38","40","42","44","36","46","48","42","50","38","30","38","52","38","38"]},"The memory  generally comprises different modalities, illustratively semiconductor memory, such as random access memory (RAM), and disk drives. In some embodiments, the memory  stores an operating system , a relational database management system (RDBMS) , a workload  and an application .","The workload  comprises a set of queries. In various embodiments, the term \u201cquery\u201d refers to SQL select statements. In various other embodiments, the term \u201cquery\u201d refers to searched updates, searched deletes and inserts with subselects, in addition to SQL select statements. In some embodiments, the term \u201cquery\u201d refers to SQL select, insert, delete and update statements. In various embodiments, at least a subset of the queries of the workload are different from each other.","The application  comprises a query-based statistics identification module  which provides query-based statistics  for the queries of the workload. In various embodiments, the query-based statistics  comprise at least a subset of the table names, column names and column groups referenced in a query and at least a subset of the names of the indexes that are candidates for access. If a table, column or column group is not referenced by any query in a workload, that table, column or column group, respectively, is not part of the query-based statistics. A consolidation module  receives and consolidates the query-based statistics  to produce consolidated statistics which are stored, at least in part, in a consolidated statistics repository . In various embodiments, the consolidation module  also generates a score for the tables, columns, column groups, and in some embodiments, the indexes, of the query-based statistics and stores the scores as part of the consolidated statistics in the consolidated statistics repository . In some embodiments, the consolidation module generates a consolidated statistics file  which contains information, comprising the scores, for a workload from the consolidated statistics repository grouped by collection objects. A task generation module  receives the consolidated statistics file  and generates one or more statistics collection tasks .","In some embodiments, the RDBMS  is stored on one or more disk drives. In other embodiments, the RDBMS , or portions of the RDBMS , may be stored remotely from the application  on another computer system and is accessed via the network.","Typically, the specific software instructions, data structures and data that implement various embodiments of the present inventive technique are incorporated in the application . Generally, an embodiment of the present invention is tangibly embodied in a computer-readable medium, for example, the memory  and is comprised of instructions which, when executed by the processor , cause the computer system  to utilize the embodiment of the present invention. The memory  may store a portion of the software instructions, data structures and data for any of the operating system , application  and RDBMS  in semiconductor memory, while other portions of the software instructions and data are stored in disk memory.","The operating system  may be implemented by any conventional operating system, such as z\/OS\u00ae (Registered Trademark of International Business Machines Corporation), AIX\u00ae (Registered Trademark of International Business Machines Corporation), UNIX\u00ae (UNIX is a registered trademark of the Open Group in the United States and other countries), WINDOWS\u00ae (Registered Trademark of Microsoft Corporation) and LINUX\u00ae (Registered trademark of Linus Torvalds), Solaris\u00ae (Registered trademark of Sun Microsystems Inc.) and HP-UX\u00ae (Registered trademark of Hewlett-Packard Development Company, L.P.).","In various embodiments, the present invention may be implemented as a method, apparatus, or article of manufacture using standard programming and\/or engineering techniques to produce software, firmware, hardware, or any combination thereof. The term \u201carticle of manufacture\u201d (or alternatively, \u201ccomputer program product\u201d) as used herein is intended to encompass a computer program accessible from any computer-readable device, carrier or media. In addition, the software in which various embodiments are implemented may be accessible through the transmission medium, for example, from a server over a network. The article of manufacture in which the code is implemented also encompasses transmission media, such as a network transmission line and wireless transmission media. Thus the article of manufacture may also comprise the medium in which the code is embedded. Those skilled in the art will recognize that many modifications may be made to this configuration without departing from the scope of the present invention.","The exemplary computer system illustrated in  is not intended to limit the present invention. Other alternative hardware environments may be used without departing from the scope of the present invention.",{"@attributes":{"id":"p-0038","num":"0037"},"figref":["FIG. 2","FIG. 1"],"b":["100","62","100","102","104","1","2"]},"SELECT*FROM T, T,","WHERE T.C=T.C AND T.C=T.C and T.C=5 AND T.C>6.","In the query, columns C, C, C and C of table T are referenced and columns C and C of table T are referenced. For table T, there is one join-predicate-related column group (C, C) which is determined by two join predicates T.C=T.C and T.C=T.C, and one local-predicate-related column group (C, C) which is determined by two local predicates T.C=5 AND T.C>6.",{"@attributes":{"id":"p-0041","num":"0040"},"figref":["FIG. 3","FIG. 1","FIG. 1"],"b":["110","112","114","62","110","116","118","110","62","110"]},{"@attributes":{"id":"p-0042","num":"0041"},"figref":["FIG. 4","FIG. 1","FIG. 1","FIG. 1"],"b":["70","64","62","70","72","64","72","74","76","72"]},"The consolidation module  consolidates the query-based statistics  for the queries in the workload to produce consolidated statistics which are stored in the consolidated statistics repository  (). In various embodiments, the consolidated statistics comprise scores associated with the tables identified in the query-based statistics for the workload, scores associated with the columns and column groups identified in the query-based statistics for the workload, and scores associated with the indexes in the query-based statistics. In some embodiments, the scores for the identified tables, columns and column groups are based on a number of times those tables, columns and column groups are referenced by the queries in the workload. In various embodiments, the scores for the indexes are based on a number of times that the indexes identified in the query-based statistics for the workload are a candidate for access. In various embodiments, all indexes are candidates for access. In some embodiments, the consolidation module also generates a consolidated statistics file  with the consolidated statistics, comprising the scores, for a workload.","The task generation module  receives the consolidated statistics. In some embodiments, the task generation module  receives the consolidated statistics for a workload from the consolidated statistics file . The task generation module  generates one or more statistics collection tasks  based on the consolidated statistics. In some embodiments, the statistics collection tasks  are suggestions. A database administrator may execute all or a portion of the statistics collection tasks . Alternately, the statistics collection tasks  are executed automatically. In various embodiments, for a DB database management system, the statistics collection tasks  are RUNSTATS or DSTATS statements. However, the statistics collection tasks  can be of other forms and the various embodiments of the present invention may be applied to other database management systems and tools.","In various embodiments, one or more of the statistics collection tasks  are automatically executed, in some embodiments, by the statistics collection tools , to update the database statistics.",{"@attributes":{"id":"p-0046","num":"0045"},"figref":["FIG. 5","FIG. 1"],"b":["70","120","122","124","126","128","128","130","130","124"],"sub":["i","i "]},"When, in step , the application determines that all queries in the workload have been processed. in step , at least one statistics collection task is generated based on the consolidated statistics, and in various embodiments, the scores.",{"@attributes":{"id":"p-0048","num":"0047"},"figref":["FIGS. 6A","FIG. 1"],"b":["6","6","6","6","140","76","140","140"]},{"@attributes":{"id":"p-0049","num":"0048"},"figref":"FIG. 6A","b":["142","142","144","146","148","150","144","148","146","146","150","150"]},{"@attributes":{"id":"p-0050","num":"0049"},"figref":"FIG. 6B","b":["162","162","164","166","168","170","169","166","166","170"]},{"@attributes":{"id":"p-0051","num":"0050"},"figref":"FIG. 6C","b":["176","176","176","178","180","182","184","186","188","190","192","194","195","190","192","194","195","176","184","190","192","194","195"]},{"@attributes":{"id":"p-0052","num":"0051"},"figref":["FIG. 6D","FIG. 6C"],"b":["196","196","198","200","202","204","196","176","198","198","176","196","204","196"]},{"@attributes":{"id":"p-0053","num":"0052"},"figref":"FIG. 6E","b":["206","206","208","212","214","216","218","220","222","224","224","214","212","214","212","206","212","216","222","206","212","216","222","224"]},{"@attributes":{"id":"p-0054","num":"0053"},"figref":["FIGS. 7A","FIG. 1"],"b":["7","7"]},"The query-based statistics identification module may not provide the names of all tables, columns and column groups referenced in a query in the query-based statistics. In various embodiments, the query-based statistics identification module provides the names of a subset of tables referenced in a query. In other embodiments, the query-based statistics identification module provides the names of all tables referenced in a query. In some embodiments, not all columns and column groups referenced in a query are included in the query-based statistics from the query-based statistics identification module. In various embodiments, the query-based statistics comprise those columns and column groups which are referenced by some predicates whose filter factors can be reasonably estimated by the query optimizer, given sufficient statistics. In an alternate embodiment, all columns and column groups referenced in a query are included in the query-based statistics. Alternately, the query-based statistics identification module provides the names of all columns and column groups referenced in a query. In yet other embodiments, the query-based statistics identification module provides the names of a subset of indexes that are a candidate for access in a query in the query-based statistics. Alternately, the query-based statistics identification module provides the names all of the indexes that are a candidate for access in a query in the query-based statistics. In some embodiments, all indexes are candidates for access.","In various embodiments, as described above, the consolidated statistics repository stores scores for the tables, indexes, columns and column groups. The scores are used to prioritize the collection of query-based statistics. In some embodiments, the scores are based on the number of references for the tables, columns and column groups, a number of times that an index is a candidate for access, a number of executions of the query, and, in some embodiments, a cost of the query. For example, a query which is executed one million times with a low query cost can have a high score because it is executed many times.","In step , query-based statistics are received for a query from the workload. In various embodiments, the query-based statistics comprise a workload identifier, one or more table names, the creators of the tables, the creators of the indexes, single-query-table counts of a number of references to the respective tables in the query, zero or more index names for respective indexes and associated single-query-index counts of a number of times that an index is a candidate for access in the query. The query-based statistics may further comprise zero or more column names, associated column numbers, and associated single-query-column counts. When the query comprises certain predicates, as will be further described below, the query-based statistics may further comprise at least one or any combination of a first marker count, a second marker count, a blank count, and a null count. Alternately, the first marker count, the second marker count, the blank count, and the null count are omitted. The query-based statistics may also comprise for certain predicates of the form, \u201cColumn (op) literal\u201d, a type which is the operation (op), the literal value, and a literal count. In other embodiments, the query-based statistics comprise certain predicates, or alternately, an indicator associated with that predicate, and an associated count of a number of references to that predicate in the query. The query-based statistics may also comprise a join indicator, a single-query column count, and, in some embodiments, statistics characteristics for the column. Alternately, the join indicator is omitted. The query-based statistics may further comprise zero or more column group names, the number of columns in a column group, a join indicator, a single-query column group count, and, in some embodiments, statistics characteristics for the column groups. Alternately, the query-based statistics do not provide column numbers; and the column numbers are provided by the database management system. In other alternate embodiments, the creator is omitted. In another embodiment, the workload identifier is omitted. In yet another alternate embodiment, the statistics characteristics are omitted.","In various embodiments, a number of occurrences of the query is also provided in the query-based statistics. When a query from a workload is received, a value representing a number of occurrences of that query is also received. The number of occurrences of the query refers to a number of executions of that query during a predetermined period of time. For example, an inventory control system can generate daily, monthly, and quarterly reports via queries q, q and q. During the year, query q will be executed 365 times, query q will be executed twelve times, and query q will be executed four times. Therefore, the number of occurrences for queries q, q and q are , twelve and four, respectively. In various embodiments, the scores of the various tables of the repository are weighted by the number of occurrences of the query. For example, if a table is referenced once for query q, the associated the table score for that table will be incremented by 365, rather than one. In other embodiments, the number of occurrences of the query is not used.","In some embodiments, a database administrator can choose if estimated costs are to be included in the scores in the consolidated statistics repository. In other embodiments, estimated costs are automatically included in the various scores in the repository. In an environment in which database statistics are collected frequently, the estimated cost is more reliable than in environments in which database statistics are collected less frequently. In other embodiments, the estimated costs are omitted. The estimated cost of a query may be provided by the query optimizer.","As indicated by blocks, , ,  and , the consolidation module updates the consolidated statistics repository with at least one and any combination of the following query-based statistics associated with a query: table, index, column and column group, respectively. Although the flowchart shows that the consolidating is performed concurrently, in other embodiments, the query-based statistics for the table(s), index(es), column group(s) and column(s) are consolidated sequentially.","As indicated by block , the query-based statistics comprise, in various embodiments, a table name, workload identifier, the name of the creator of the table, and a single-query-table count. The single-query-table count represents the number of references to the table name for the query.","When consolidating query-based statistics for a table (block ), in step , a weighted table score is determined. In various embodiments, the weighted table score is set equal to the product of the single-query-table count and the number of occurrences of the query. In other embodiments, the weighted table score is set equal to the product of the single-query-table count, the number of occurrences of the query and an estimated cost of the query. In some embodiments, the weighted table score is set equal to the single-query-table count.","Step  determines whether the table is a new, that is whether, the table name is not stored in the table-score table  () of the consolidated statistics repository  (). In some embodiments, the table-score table  () is searched for the table name that is provided in the query-based statistics. When a row containing the table name is not found, the table is determined to be new. Alternately, the table-score table  () is searched for the workload identifier, table name, and creator that are provided in the query-based statistics. When a row containing the workload identifier, table name, and creator is not found, the table is determined to be new.","When, in step , the table is determined to be new, in some embodiments, in step , a row containing that table name and the weighted table score is inserted into the table-score table  (). The table name is stored in the table name column  () and the weighted table score is stored in the table score column  () of the row. In other embodiments, in step , the workload identifier, table name, and creator from the query-based statistics, and the weighted table score are inserted into the workload identifier  (), table name  (), creator  () and table score  (), respectively, of a row of the table-score table. The query-based statistics may refer to more than one table for a query. Therefore, for a single query, one or more rows may be inserted into the table-score table of the consolidated statistics repository, depending on the number of references to different tables in the query. Each table will be associated with its own weighted table score.","After the table, index, column and column group statistics for the query are consolidated into the consolidated statistics repository, step  determines whether more queries in the workload are to be processed, if so, step  proceeds, via continuator A, to step  to receive the query-based statistics for the next query in the workload.","When step  determines that the table is not new, a row for that table has been found in the table-score table. In step , the table score for that row in the table-score table is incremented by the weighted table score. Step  proceeds to step . In an alternate embodiment, when the query-based statistics contain a plurality of table names and associated single-query-table counts, steps ,  and one of steps  and  are repeated for each table name prior to proceeding to step .","As indicated by block , the query-based statistics may also comprise the index name, the creator of the index and a single-query-index count of a number of times the index is a candidate for access for a table.","When the query-based statistics comprise an index name, in step , a weighted index score is determined for that index name. The weighted index score is set equal to the product of the number of occurrences of the query and the single-query-index count. In another embodiment, the weighted index score is set equal to the product of the number of occurrences of the query, the single-query-index count and the estimated cost of the query. In another alternate embodiment, the weighted index score is set equal to the single-query-index count.","Step  determines whether the index is new, that is, whether the index name is new. In some embodiments, when the index name is not in the index-score table of the repository, that index name is determined to be new. In other embodiments, when the workload identifier, index name and creator are not in a row of the index-score table, that index name is determined to be new.","When step  determines that the index is new, in step , a row containing the index name and the weighted index score is inserted into the index-score table. The index name is stored in the index name column  () and the weighted index score is stored in the index score column  () of the index-score table. In some embodiments, in step , a row containing the workload identifier, index name, creator and weighted index score is inserted into the index-score table. The workload identifier is stored in the workload identifier column  (). The index name is stored in the index name column  (). The creator is stored in the creator column  (); and the weighted index score is stored in the index score column  (). Step  proceeds to step .","When step  determines that the index is not new, the index name is in a row of the index-score table. In some embodiments, the workload identifier and creator in addition to the index name are in the row of the index-score table. In step , the index score of that row in the index-score table is incremented by the weighted index score. Step  proceeds to step . In an alternate embodiment, when the query-based statistics contain a plurality of index names and associated single-query-index counts, steps ,  and one of steps  and  are repeated for each index name prior to proceeding to step .","The query-based statistics may contain information for zero or more columns. When the query-based statistics have column information, as indicated by block , the flowchart proceeds via continuator B to step  of .","In step , a weighted column-group score for the column is determined. Because the column-group-score table  () is used to store information for both columns and column groups, the weighted column-group score is used for both single columns and column groups. In various embodiments, the weighted column group score is set equal to the product of the single-query-column count and the number of occurrences of the query. In some embodiments, the weighted column group score is set equal to the product of the single-query-column count, the number of occurrences of the query and the estimated cost of the query. In another embodiment, the weighted column group score is set equal to the single-query-column count.","In some embodiments, a weighting factor is also applied to provide the weighted column group score. In some embodiments, the query-based statistics further comprise a local-equal indicator that is set to a first state when a local equal equal predicate has a literal in the right hand side of the predicate, is otherwise set to a second state. In one embodiment, the weighting factor is equal to 2.0 for join predicates, that is, when the join indicator of the query-based statistics indicates that the column was referenced in a join operation, and when local equal predicates have a literal in the right hand side of the predicate, as indicated when the local-equal indicator is in the first state, for example, the predicate is of the form \u201cColumn=Literal\u201d. In various embodiments, the query-based statistics further comprise a marker indicator which is set to a first state when a host variable, parameter marker, or special register is used in the query, otherwise the marker indicator is set to a second state. The weighting factor is set equal to 1.5 when the marker indicator is set to the first state. The weighting factor is equal to 1.0 otherwise. In other embodiments, different values for the weighting factor are used. In some embodiments, the weighted column group score is multiplied by the appropriate weighting factor. In other embodiments, the weighted column group score is set equal to the product of the single-query-column count, the number of occurrences of the query, and the weighting factor. In some embodiments, the weighted column group score is set equal to the product of the single-query-column count, the number of occurrences of the query, the estimated cost of the query, and the weighting factor. In other embodiments, the weighted column group score is set equal to the product of the single-query-column count and the weighting factor.","In step , predicate scores are determined. The predicate scores comprise a weighted first marker score, a weighted second marker score, a weighted blank score and a weighted null score. In some embodiments, the query-based statistics may provide various counts associated with certain predefined predicates, when those predicates occur in a query. In various embodiments, predicate scores are determined from those predicate counts and stored in the column table.","A weighted first marker score is set equal to the product of the number of occurrences of the query and the first marker count. The first marker count represents a number of references to the column in a \u201cColumn=?\u201d predicate in the query. The question mark \u201c?\u201d in the predicate refers to a parameter marker which represents a position in a dynamic SQL statement where the application will provide a value. In other embodiments, the weighted first marker score is set equal to the product of the number of occurrences of the query, the estimated cost of the query, and the first marker count. In other alternate embodiments, the weighted first marker score is set equal to the first marker count.","A weighted second marker score is set equal to the product of the number of occurrences of the query and the second marker count. The second marker count represents the number of references to the column in a \u201cColumn op ?\u201d predicate in the query, where \u201cop\u201d is an operator such as=, >, <, >=, <=, <>, and \u201cbetween.\u201d In other embodiments, the weighted second marker score is set equal to the product of the number of occurrences of the query, the estimated cost of the query, and the second marker count. In other alternate embodiments, the weighted second marker score is set equal to the second marker count.","A weighted blank score is set equal to the product of the number of occurrences of the query and the blank count. The blank count represents the number of references to the column in a \u201cColumn=\u2018\u2019\u201d predicate in the query. In other embodiments, the weighted blank score is set equal to the product of the number of occurrences of the query, the estimated cost of the query, and the blank count. In other alternate embodiments, the weighted blank score is set equal to the blank count.","A weighted null score is set equal to the product of the number of occurrences of the query and the null count. The null count represents the number of references to the column in a \u201cColumn IS NULL\u201d predicate in the query. In other embodiments, the weighted null score is set equal to the product of the number of occurrences of the query and the null count. In other alternate embodiments, the weighted null score is set equal to the null count.","In step , a weighted literal score is determined. In various embodiments, the weighted literal score is determined if a predicate is of the form \u201cColumn op literal\u201d, where op is an operator such as=, >, <, >=, <=, <> and between, a weighted literal score is determined. In some embodiments, when the join indicator does not indicate \u201cjoin\u201d, and the marker indicator is set to the second state, a predicate of the form \u201cColumn op literal\u201d has been identified in the query-based statistics. The query-based statistics may also provide a single-query-literal count, a type, that is, the operation (op), and the associated literal. The single-query-literal count is the number of times that the literal is referenced in the \u201cColumn op Literal\u201d predicate of the query for the column. In various embodiments, the weighted literal score is set equal to the single-query-literal count. In some embodiments, the weighted literal score is the product of the single-query-literal count, and the number of occurrences of the query to provide a weighted literal score. In some other embodiments, the weighted literal score is the product of the single-query-literal count, the number of occurrences of the query and the estimated cost of the query.","Step  determines whether the column is new. In some embodiments, the column-group-score table  () is searched for a matching column name in the column or column group name column, and when the column name is not found, the column is not new. Alternately, step  searches the column-group-score table  () for a matching workload identifier, table name, creator and column name, and when not found, that column is determined to be new. In another alternate embodiment, the column table  () is searched, rather than the column-group-score table  ().","When step  determines that a column is new, the column table  () is updated. In step , in various embodiments, the column name and the weighted first marker score, the weighted second marker score, the weighted blank score and the weighted null score are inserted into a row of the column table  (). In some embodiments, each column is associated with at least one unique column identifier. The application generates the column identifier. In various embodiments, the workload identifier, table name, creator, column name, column number, column identifier, weighted first marker score, weighted second marker score, weighted blank score and weighted null score are inserted into the workload identifier  (), table name  (), creator  (), column name  (), column identifier  (), first marker score  (), second marker score  (), blank score  () and null score  (), respectively, of a row of the column table  ().","In step , a row containing at least the column identifier and weighted literal score is inserted into the column value table  () for a column. In other embodiments, a row containing the column identifier, the type, the literal value and the weighted literal score is inserted into the column identifier column  (), type column  (), literal value column  () and literal score column  (), respectively, of the column value table for the column. In the query-based statistics, when multiple literal values are referenced for a column in the query, the column identifier may be associated with various literal values and may therefore be associated with multiple rows in the column value table, at least one row for each literal value.","In step , a row is inserted into the column-group-score table  (). In some embodiments, the row contains at least the column name and the weighted column-group score. In other embodiments, the workload identifier, table name, creator, column name, a number of columns equal to one, an indicator of whether the column is referenced in a join in the query, the weighted column group score, and statistics characteristics are stored in the workload identifier  (), table name  (), creator  (), column or column group name  (), number of columns  (), join  (), column-group score  () and statistics characteristics  (), respectively, in a row of the column-group-score table  (). Step  proceeds, via continuator C, to step  of .","When, in step , the column is not new, the column is associated with a row in at least the column and column-group-score tables,  ( (), respectively. In various embodiments, at least one of the column, column value and column-group-score tables,  (),  ( (), respectively, are updated. In step , in some embodiments, zero or more, or any combination of the first marker score  (), second marker score  (), and blank score  () and null score  () in the associated row in the column table  () are incremented by the weighted first marker score, the weighted second marker score, the weighted blank score and the weighted null score, respectively.","In step , the column value table  () is updated based on the column identifier of the column table when a predicate has a literal value, that is, when the predicate is \u201cColumn op Literal\u201d. The appropriate row of the column value table  () having the same column identifier, type and literal value as a predicate in a query is found. The literal score  () for that row is incremented by the weighted literal score. Alternately, if a row having the same column identifier, type and literal value is not found, a new row is inserted.","In step , the column-group-score table  () is updated. The row associated with the table name and column, or alternately, the workload identifier, predicate, table name, creator and column, is identified. The column-group score  () of the identified row is incremented by the weighted column group score for the column. When any column is associated with a join, the join column  () is set to indicate that the column is associated with a join operation. In addition the statistics characteristics are updated such that, when the query-based statistics indicate that non-uniform statistics were generated for that column, then the statistics characteristics are set to indicate that non-uniform statistics will be generated for that column; otherwise uniform statistics will be generated. Step  proceeds, via continuator C, to step  of .","Alternately, when the query-based statistics comprise a plurality of column names, in various embodiments, steps -, and one of the groups of steps - and - are repeated for each column name. In another alternate embodiment, the column value table is omitted, and steps ,  and  are omitted. In yet another alternate embodiment, the column table is omitted, and steps ,  and  are omitted.","When the query-based statistics comprise information for a column group as indicated by block , the flowchart proceeds via continuator D to step  of . In various embodiments, the query-based statistics comprise a workload identifier, table name, creator, column group, number of columns in the column group, and a single-query-column-group count. The single-query column group count contains the number of references to a column group in the predicate.","In step , a weighted column group score is determined. In various embodiments, the weighted column group score is set equal to the product of the single-query-column group count and the number of occurrences of the query. In some embodiments, the weighted column group score is set equal to the product of the single-query-column group count, the number of occurrences of the query and the estimated cost of the query. In another embodiment, the weighted column group score is set equal to the single-query-column group count. The weighting factor that was described above with respect to step  for columns may also be applied to the scores for column groups. In various embodiments, the weighted column group score is set equal to the product of the single-query-column group count, the number of occurrences of the query, the estimated cost of the query, and the weighting factor. In some embodiments, the weighted column group score is set equal to the product of the single-query-column group count, the number of occurrences of the query, and the weighting factor. In some embodiments, the weighted column group score is set equal to the product of the single-query-column group count and the weighting factor.","Step  determines whether the column group is a new column group, In some embodiments, column-group-score table  () is searched for a matching column group name, and when not found, the column group is determined to be a new column group. Alternately, step  searches the column-group-score table  () for a row containing a matching workload identifier, table name, creator and column group name, and when not found, that column group is determined to be a new column group.","When step  determines that a column group is new, in step , a row containing at least the column group name and weighted column group score is inserted into the column-group-score table  (). In some embodiments, the workload identifier, table name, creator, column group name, the number of columns in the column group, an indicator of whether the column group is referenced in a join in the query, the weighted column group score, and statistics characteristics are stored in the workload identifier  (), table name  (), creator  (), column or column group name  (), number of columns  (), column-group score  () and statistics characteristics  (), respectively, in a row of the column-group-score table  (). Step  proceeds to step .","When, in step , the column group name is not new, in step , the column-group score  () for that column group in the column-group-score table  () is incremented by the weighted column group score. Step  proceeds to step . Alternately, when the query-based statistics comprise information for a plurality of column groups, steps ,  and one of steps  and  may be repeated for each column group.","When step  determines that the queries of the workload have been processed, a row of the table-score table  () contains, in the table score column  (), a value representing the score for the table. The index-score table contains, in the index score column  (), a value representing the score for the index. In the column-group-score table, the column-group score column  () contains a value representing the score for the column or column group. In various embodiments, the column table  () contains a first marker score  (), second marker score  (), blank score  () and null score  () for the columns. In some embodiments, the column value table  () contains one or more values representing respective literal scores for some columns of the column table  ().","In various embodiments, collection object names are not stored in the consolidated statistics repository because the collection object names can be identified based on the table and index names by accessing a database management system catalog. In some embodiments, collection object names are also stored in the consolidated statistics repository.","In step , the consolidation module  () associates the table and index names of the consolidated statistics with collection object names. In some embodiments, the association between collection object names and the table and index names is stored in the system catalog. In some alternate embodiments, the collection object names are stored in the table-score and index-score tables in the consolidated statistics repository.","In various embodiments, in step , the consolidation module  () generates a consolidated statistics file  () that comprises the consolidated statistics for a workload, the associated collection object names and various scores. The consolidated statistics file comprises for each collection object associated with the tables and indexes of the workload, the names of the tables and, in some embodiments, the creator of the tables, and their respective table scores, and the name of the indexes, if any, and, in some embodiments, their creator, and their respective index scores. The consolidated statistics file also comprises, for each collection object, the name of each column and column group, and the score for the column or column group, that is, from the column-group score  (), and, in some embodiments, the statistics characteristics for the columns and column groups. The statistics characteristics are determined from the statistics characteristics  () for the columns and column groups of the column-group-score table  (). The statistics characteristics may comprise one or more indicators that uniform and\/or non-uniform statistics are to be requested in a statistics collection task for that column or column group. Uniform statistics, as indicated by a uniform statistics indicator, typically comprise cardinality statistics for a column or column group. In various embodiments, depending on the database management system, a non-uniform statistics indicator may indicate that frequency statistics are to be collected for that column or column group, and\/or that histogram statistics are to be collected for that column or column group. In addition, the file contains, for each table, the name of each column in each column group that was queried, the score for the column group, and an indicator of the type of statistics to be collected for that column group.","In other embodiments, the score for the column provided in the consolidated statistics file is equal to the sum of the column-group score for that column and at least one or any combination of the first marker score, the second marker score, the blank score, the null score, and the literal score(s) for that column.","In some embodiments, the consolidated statistics file  () is implemented as an XML file. In other embodiments, other types of files may be used. In yet other embodiments, a set of application programming interface calls are provided so that the desired statistics may be retrieved from the consolidated statistics repository. In another alternate embodiment, the task generation module  () accesses the consolidated statistics repository directly, rather than receiving the consolidated statistics file. In this embodiment, steps  and  are implemented in the task generation module  (). In another embodiment, step  is omitted.","In other embodiments, indexes are omitted. In some embodiments, when statistics on indexes are collected, the associated statistics will contain a single column or column group\u2014at which point those columns are dependent on both the table and the index.",{"@attributes":{"id":"p-0101","num":"0100"},"figref":["FIGS. 8A and 8B","FIG. 1","FIG. 1","FIG. 1","FIG. 1"],"b":["84","84","300","84","84"]},"In step , collection object scores are determined based on the scores in the consolidated statistics for the workload. A collection object score is determined for each collection object name associated with the table and index names of the workload. In various embodiments, the collection object score is equal to the sum of the scores for the tables, indexes, columns and column groups in that collection object for a workload. In some embodiments, the scores for the tables, indexes, columns and column groups are provided in the consolidated statistics file. In other embodiments, the scores for the tables are found in the table score column  () of the table-score table  (), the scores for the indexes are found in the index score column  () of the index-score table  (), and the scores for the columns and column groups are found in the column-group scores  () in the column-group-score table  (). In other embodiments, the predicate scores are included in the sum of the scores for the collection object. For example, the first marker score  (), the second marker score  (), the blank score  (), the null score  () and the literal score  () are also included in the score for the associated collection object. The collection object scores may be determined in various manners, depending on the embodiment. In some embodiments, the collection object score is equal to the sum of the table scores for the tables in the collection object. In some other embodiments, the collection object score is equal to the sum of the table scores and index scores for the tables and indexes in the collection object. In other embodiments, the collection object score is equal to the sum of the table scores, index scores, and column-group scores for the tables, indexes, columns and column groups in the collection object. In yet other embodiments, the collection object score is equal to the sum of the table scores, index scores, column-group scores, and at least one or any combination of the first marker scores, second marker scores, blank scores, null scores and literal scores for the tables, indexes, columns and column groups in the collection object.","In step , the collection object name with the highest score is retrieved. In step , at least a portion of a statistics collection task is generated for the collection object. In some embodiments, for those databases in which a statistics collection task is a RUNSTATS command, the following may be generated:\n\n","In step , a table name of a table within the collection object, specified by the collection object name, is retrieved from the consolidated statistics file. In some embodiments, the table names are retrieved in accordance with their table score so that a table with a higher score is processed prior to a table with a lower score. In step , the statistics collection task for the collection object name is updated to generate database statistics for that table. For example, the RUNSTATS command may be as follows:\n\n","In step , a column group name or column name for a column group or column, respectively, in the table, specified by the table name, is retrieved. In step , the statistics collection task for the collection object is updated to generate database statistics for the column group or column, specified the column or column group name. For example, the RUNSTATS command may be as follows:\n\n","In various embodiments, the statistics collection task is generated with a request to generate uniform and\/or non-uniform statistics in accordance with the statistics type indicators for the column or column group. Typically uniform statistics are requested in the statistics collection task for columns and column groups. In some embodiments, the consolidated statistics file contains one or more statistics characteristics that indicate whether uniform and\/or non-uniform statistics are to be generated for the column or column group. Alternately, the task generation module  () retrieves the statistics characteristics  () in the column-group-score table  () for the column or column group. The statistics collection task is generated in accordance with the statistics characteristics for the column or column group.","Step  determines if there are more column or column group names listed in the consolidated statistics file that are associated with the collection object for which to generate statistics. If so, the task generation module proceeds to step  to process another column or column group name.","When step  determines that no more columns or column group names are to be processed for the table, step  proceeds via continuator A to step  of . In step , an index name for the table is retrieved. In step , the statistics collection task for the collection object is updated to generate database statistics for the index. In various embodiments, the statistics collection task requests uniform statistics, such as multi-column cardinalities, on the indexed columns. Step  determines if there are more index names associated with the table to add to the statistics collection task. If so, step  proceeds to step  to process another index name.","When step  determines that all index names for the table name have been added to the statistics collection task, the flowchart proceeds to step . Step  determines if there are more table names in the collection object, specified by the collection object name, to process. If so, step  proceeds, via continuator B, to step  of  to process another table name. When step  determines that the statistics collection task comprises each table name in the consolidated statistics file for the collection object name, in other words, that all table names in the consolidated statistics file for the collection object have been processed, step  determines if there are more collection object names associated with any table names in the consolidated statistics file. If so, in step , the collection object name with the next highest score is retrieved, and step  proceeds, via continuator C, to step  of , to generate a statistics collection task for that collection object name. When step  determines that a statistics collection task has been generated for each collection object containing the table names in the file, in step , one or more database statistics tasks have been generated and the processing ends.","In this way, a set of statistics collection tasks in priority sequence in accordance with their score is provided. A higher score indicates a higher priority. A database administer may execute the entire set of statistics collection tasks, or a portion of the statistics collection tasks.","In some embodiments, after step , if a column or column group, specified by the column or column group name, respectively, is a prefix of an index, step  is modified to also generate an index portion of the statistics collection task to collect the statistics for that column or column group using an index. For example, suppose, for a table t in a table space ts, there are two indexes: index i comprises columns c, c and c, and index i comprises columns c, c and c. In addition, database statistics for index i and column cardinality statistics for columns c and c, and multi-column cardinality statistics for columns c and c are to be collected. The RUNSTATS command that is generated by collecting the column and column group statistics in an index portion of the statistics collection task, in the embodiment in which step  is modified to generate an index portion of the statistics collection task, is as follows:\n\n","The prefixes of an index (c, c, c, . . . , cn) are the column groups (c), (c,c), (c,c,c), (c,c,c, c), . . . (c, c, . . . , cn). In the above example, column c is the prefix of index i, and columns c and c are the prefix of index i. In various embodiments, index information contains the columns and the order of columns; and, in some embodiments, the index information can be found in catalog tables. When RUNSTATS collects index statistics, RUNSTATS collects the first and the last cardinality of the prefixes (c), (c, c, . . . , cn). If a KEYCARD keyword is supplied in the RUNSTATS command, then the cardinality for the other prefixes will also be collected. Collecting statistics on INDEX is more efficient than collecting on COLUMN and COLGROUP. In the embodiment in which step  is modified to generate an index portion of a statistics collection task, step  of  is also modified to check for an existing index portion of the statistics collection task, and if the index portion exists, then adds additional indexes to the existing index portion.","Various embodiments for determining scores for the tables, indexes, columns, column groups and collection objects have been described. However, other techniques for determining the scores for the tables, indexes, columns, column groups and collection objects may be used by the consolidation module and\/or task generation module.","The foregoing description of the preferred embodiments of the inventions has been presented for the purposes of illustration and description. It is not intended to be exhaustive or to limit the invention to the precise form disclosed. Many modifications and variations are possible in light of the above teaching. It is intended that the scope of the invention be limited not by this detailed description, but rather by the claims appended thereto."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The teachings of various embodiments of the present invention can be readily understood by considering the following detailed description in conjunction with the accompanying drawings, in which:",{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0020","num":"0019"},"figref":["FIG. 3","FIG. 1"]},{"@attributes":{"id":"p-0021","num":"0020"},"figref":["FIG. 4","FIG. 1"]},{"@attributes":{"id":"p-0022","num":"0021"},"figref":["FIG. 5","FIG. 1"]},{"@attributes":{"id":"p-0023","num":"0022"},"figref":["FIGS. 6A","FIG. 1"],"b":["6","6","6","6"]},{"@attributes":{"id":"p-0024","num":"0023"},"figref":["FIGS. 7A","FIG. 1"],"b":["7","7"]},{"@attributes":{"id":"p-0025","num":"0024"},"figref":["FIGS. 8A and 8B","FIG. 1"]}]},"DETDESC":[{},{}]}
