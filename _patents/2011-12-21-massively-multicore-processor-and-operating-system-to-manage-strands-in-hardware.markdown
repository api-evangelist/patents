---
title: Massively multicore processor and operating system to manage strands in hardware
abstract: A computing apparatus and corresponding method for operating are disclosed. The computing apparatus may comprise a set of interconnected central processing units (CPUs). Each CPU may embed an operating system including a kernel comprising a protocol stack. At least one of the CPUs may further embed executable instructions for allocating multiple strands among the rest of the CPUs. The protocol stack may comprise a Transmission Control Protocol/Internet Protocol (TCP/IP), a User Datagram Protocol/Internet Protocol (UDP/IP) stack, an Internet Control Message Protocol (ICMP) stack or any other suitable Internet protocol. The method for operating the computing apparatus may comprise receiving input/output (I/O) requests, generating multiple strands according to the I/O requests, and allocating the multiple strands to one or more CPUs.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08607086&OS=08607086&RS=08607086
owner: IOTA Computing, Inc.
number: 08607086
owner_city: Palo Alto
owner_country: US
publication_date: 20111221
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS REFERENCES TO RELATED APPLICATIONS","TECHNICAL FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["This application is a continuation of U.S. patent application Ser. No. 13\/224,938, filed on Sep. 2, 2011, entitled \u201cMassively Multicore Processor and Operating System to Manage Strands in Hardware,\u201d which is incorporated by reference in its entirety. This application is also related to U.S. patent application Ser. No. 13\/277,111, filed on Oct. 19, 2011, entitled, \u201cTCP\/IP Stack-Based Operating System,\u201d which is a continuation of U.S. patent application Ser. No. 12\/938,290, filed on Nov. 2, 2010, entitled, \u201cTCP\/IP Stack-Based Operating System,\u201d both of which are incorporated by reference in their entirety.","The application generally relates to computing devices having multiple processors and, more specifically, to a multicore processor and operating system based on a protocol stack.","Computing devices such as desktop computers, laptop computers, cell phones, smartphones, personal digital assistants (PDA), and many other electronic devices are widely deployed. The primary element of such computing devices is a central processing unit (CPU), or a processor, which is responsible for executing instructions of one or more computer programs. The CPU executes each program instruction in sequence to perform the basic arithmetical, logical, and input\/output operations of the computing device. Design and implementation of such devices in general, and CPUs in particular, may vary; however, their fundamental functionalities remain very similar.","Traditionally, in a computing device, the CPU is coupled to a memory and an Input\/Output (I\/O) subsystem, directly or through a bus, to perform the main functions of computing devices such as inputting and outputting data, processing data, and so forth. The memory may embed an operating system (OS), computer programs, applications, and so forth.","Conventional operating systems are quite similar in architecture, in that each tends to have conventional file and memory operations, storage and graphical user interface operations, and so forth. Architectures of conventional operating systems include a layered design, device drivers, and Application Programming Interfaces (APIs).","In conventional operating systems, a core kernel essentially has master control over all the operations of the overlying software, components, device drivers, applications, and so forth. Traditionally, operating systems implement \u2018multi-tasking\u2019 through time slicing and sequential allocation of computer resources to various threads and processes. A thread generally runs within a process and shares resources, e.g., memory, with other threads within the same process, whereas a process generally runs \u2018self-contained\u2019 within its own right and completely independently of any other process. In multi-tasking, when a computing device includes a single processor, the operating system instructs the processor to switch between different threads and implement them sequentially. Switching generally happens frequently enough that the user may perceive the threads (or tasks) as running simultaneously.","Many conventional computing devices utilize multiprocessors, or multicore processors, which may truly allocate multiple threads or tasks to run at the same time on different cores. However, conventional multicore processor architectures involve a small number of cores (typically 2, 4, 6, or 8 cores) due to the design limitations of traditional hardware and traditional operating systems. In the case of a conventional multicore processor, the computing device still must implement time slicing and switching between different threads on each of its cores when performing several tasks involving multithreading allocated through the cores. In other words, even conventional multicore processors cannot implement true multitasking.","Traditional processor architectures are also known to experience hanging, cycling, or crashing of the threads when applications are poorly written or purposely malicious. In many instances, a thread crash may bring the whole processor down and result in time-division multiplexing of various threads or processes.","Conventional processor designs use a fixed-frequency, continuously running crystal as the timing mechanism for clocking through microprocessor execution cycles. Thus, the crystal and the processor may continue running even if nothing is being accomplished in the computing device, uselessly cycling around and waiting for a process to actually perform an action. This timing paradigm results in wasted energy. First, the crystal and processor transistors typically execute at their maximum speed at all times, thereby consuming excess power and generating excess heat. Secondly, it is inefficient to continue running clock cycles if no substantive process is actually running. However, these inefficiencies are unavoidable in the conventional operating system design.","Furthermore, conventional operating systems require various modifications and enhancements each year, such as incorporation of new communications layers for Ethernet drivers, Transmission Control Protocol\/Internet Protocol (TCP\/IP) stacks, Web browsers, and the like. Generally, these new layers are added on top of the conventional operating system, thereby increasing complexity, decreasing performance, and often leading to software crashes and security flaws.","This summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This summary is not intended to identify key features or essential features of the claimed subject matter, nor is it intended to be used as an aid in determining the scope of the claimed subject matter.","In accordance with various embodiments disclosed herein, a computing device having multiple CPUs interconnected to each other is provided. Each CPU embeds an operating system of an entirely new architecture. This operating system may be based fundamentally around an Internet stack, for example, the TCP\/IP stack (instead of including a TCP\/IP layer as in a conventional core operating system) and may utilize a conventional interface or similar extensions of the standard Berkeley Sockets (or WinSock) APIs.","In accordance with various embodiments disclosed herein, a computing apparatus is provided. The computing apparatus may comprise a set of interconnected central processing units. Each CPU may embed an operating system (OS) comprising an operating system kernel, the operating system kernel being a state machine and comprising a protocol stack. At least one of the CPUs may further embed executable instructions for allocating multiple strands to one or more other CPUs of the set of interconnected CPUs. It will be understood that a strand, as used herein, is a hardware oriented process and is not necessarily similar to a conventional unit of processing (i.e., a thread) that can be scheduled by an operating system. The Internet stack is a set of communication protocols used for the Internet and other similar networks. In one example embodiment, the Internet stack may comprise a TCP\/IP stack such that the OS kernel is a TCP\/IP stack state machine with proprietary extensions that can be used to change or access internals of the TCP\/IP stack state machine. In another example embodiment, the Internet stack may comprise a User Datagram Protocol\/Internet Protocol (UDP\/IP) stack such that the OS kernel is a UDP\/IP stack state machine with proprietary extensions that can be used to change or access internals of the UDP\/IP stack state machine. The CPU may comprise a processing unit, a memory and an I\/O interface. Executable instructions for the operating system may be stored within one or more types of storage media, such as for example, Read-Only Memory (ROM), Programmable Read-Only Memory (PROM), Field Programmable Read-Only Memory (FPROM), One-Time Programmable Read-Only Memory (OTPROM), One-Time Programmable Non-Volatile Memory (OTP NVM), Erasable Programmable Read-Only Memory (EPROM), and Electrically Erasable Programmable Read-Only Memory (EEPROM or Flash ROM).","The computing apparatus may further comprise at least one asynchronous clock to serve as an internal clock for the operating system. The asynchronous clock may be configurable to automatically stop when clock cycles are no longer needed. A time reference for the operating system kernel may be based, for example, on a Network Time Protocol (NTP), Simple Network Time Protocol (SNTP), or other suitable time protocol from a remote time server. In an example, the operating system may utilize a Sockets style API of sockets and ports on IP addresses for handling I\/O requests. The set of CPUs may be interconnected through a bus. Executable instructions for the operating system may be executed through a Sockets API. The at least one CPU that embeds executable instructions for allocating multiple strands may further comprise instructions for generating multiple strands.","According to another embodiment, a method for operating a computing apparatus is provided. The method may comprise receiving I\/O requests, generating multiple strands according to the I\/O requests, allocating the multiple strands to one or more CPUs of a set of CPUs, and processing the multiple strands. Each CPU may embed an operating system (OS) having a kernel comprising a protocol stack.","According to various embodiments, the I\/O requests may be received by a CPU, which embeds executable instructions for allocating multiple strands through multiple CPUs. Allocating multiple strands may comprise communicating data via a network interface.","In one embodiment, the method may further comprise assembling results of multiple strands processing. Executable instructions for the operating system may be stored in a memory and executed through a Sockets API.","According to some embodiments, a non-transitory computer-readable storage medium is provided having embodied instructions thereon, instructions executable by a processor in a computing device to perform a method. The method may comprise receiving an input\/output (I\/O) request, generating one or more strands according to the I\/O request, allocating the one or more strands and\/or processes to one or more central processing units (CPUs) of a set of CPUs, wherein each CPU of the set embeds an operating system (OS) having a kernel comprising a protocol stack, and processing the one or more strands and\/or processes.","Various aspects of the subject matter disclosed herein are now described with reference to the drawings, wherein like reference numerals are used to refer to like elements throughout. In the following description, for purposes of explanation, numerous specific details are set forth in order to provide a thorough understanding of one or more aspects. It may be evident, however, that such aspects may be practiced without these specific details. In other instances, well-known structures and devices are shown in block diagram form in order to facilitate describing one or more aspects.","Various embodiments disclosed herein relate to computing devices comprising a set of interconnected CPUs. The number of the CPUs is not limited, and may be more than 100, or even more than 10,000, depending on specific application of the computing devices. The CPUs may be interconnected (e.g., through one or more buses) so that multiple strands, processes, and tasks can be allocated among a few or even all CPUs, thereby implementing parallelism or true multi-tasking. According to some embodiments, each of some or all of the CPUs is allocated a respective strand.","As used herein, the term \u201ccentral processing unit\u201d relates to a processor, a microprocessor, a controller, a microcontroller, a chip, or other processing device that carries out arithmetic and logic instructions of an operating system, a computer program, an application, or the like. According to various embodiments disclosed herein, the CPU comprises a processing unit (typically including an arithmetic logic unit and a control unit) and a memory (also known as \u201cregisters,\u201d or Read Only Memory (ROM)). In some embodiments, the CPU may further comprise an I\/O Subsystem (Interface) to allow data transfer between the CPU and any other devices such as another CPU or I\/O devices such as a keyboard, mouse, printer, monitor, network controller, and so forth.","The CPU memory may store an operating system based entirely on a protocol stack. A protocol stack, as used herein, is a particular software implementation of a computer networking protocol suite. The protocol stack may be a TCP\/IP stack, UDP\/IP stack, Internet Control Message Protocol (ICMP) stack, combinations thereof, or other protocols. The operating system embedded in the CPU is fundamentally a state machine. The kernel of the operating system is fundamentally a protocol stack.","Such an operating system is inherently Internet-oriented and all Internet type functionality is natural and inherent in its protocol stack-based processor design and implementation. In addition, such an operating system may operate within small hardware, be run by very compact and efficient software, possess minimal clock cycles for execution, have a natural Internet connectivity model and ultra low power consumption.",{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 1","b":["100","100","100","110"]},"The memory  may store one or more modules. Exemplary modules, which may be stored in the memory , include an I\/O request receiver module , a protocol handling module , an I\/O request processing module , and an optional network interface module . It will be appreciated by one skilled in the art that the technology described herein encompasses those embodiments where one or more of the modules may be combined with each other or not included in the memory  at all.","The CPU  may further include a processing unit  for executing various instructions and running modules stored in the memory . The processing unit  may comprise an arithmetic logic to carry out mathematical functions, and a control unit to regulate data flow through the processing unit  and the CPU . Those skilled in the art would understand that any suitable architecture of the processing unit  is applicable.","A module should be generally understood as one or more applications (routines) that perform various system-level functions and may be dynamically loaded and unloaded by hardware and device drivers as required. The modular software components described herein may also be integrated as part of an application specific component.","According to various embodiments, the modules may each include executable instructions for the operating system embedded into CPU  and may be executed through a Sockets API.","The I\/O request receiver module  may be configured to receive I\/O requests. The requests may be from an application residing in an application layer of a computing device (as described in further detail with respect to ).","The protocol handling module  may be configured to handle a specific protocol for the protocol stack state machine implementation. For example, the protocol may be a TCP\/IP stack such that the operating system is a TCP\/IP stack state machine. In some embodiments, the protocol stack may include a different protocol stack (e.g., a UDP\/IP stack or ICMP stack which may be used in addition to or in place of the TCP\/IP stack).","The operating system may utilize Sockets style API of sockets and ports on IP addresses for handling I\/O requests. The I\/O request processing module  may be configured to process the I\/O requests from an application according to the network protocol using the operating system.","The optional network interface module  may be included and is configured to provide an interface between the protocol stack state machine and a network interface. The corresponding network interface may be a hardware unit or a \u201csoft\u201d Ethernet controller.","The CPU  may also comprise a clock. The CPU  may require a clock to drive the state transitions as the CPU , for instance, reads and decodes opcodes. Conventionally this is done by some external oscillator circuitry, typically driven by a fixed-frequency crystal. However, clocking may also be done by more than one crystal, e.g. a high frequency crystal (e.g., 50 MHz) one for the main CPU core, and other (lower frequency) crystals for other uses, e.g., programmable timers, watchdog timers etc. Also, a system comprising for instance a Universal Asynchronous Receiver\/Transmitter (UART) and a Network Interface Controller (NIC) also typically require clock inputs of some sort. For instance, a UART may need a reliable clock source all the way from perhaps 300 baud up to 921,600 baud. A NIC running 100 MBit Ethernet would typically need a clock source of 50 MHz or 25 MHz.","Typically, a computer system needs to keep track of time, and can do so using internal counters to keep track of its internal clocks. However, in the case of an Internet-connected device, such as in various embodiments described herein, the device is connected to the Internet and thus has readily available external time sources, for instance from Network Time Protocol (NTP), Simple Network Time Protocol (SNTP), or other suitable time protocols from a remote server (i.e., time protocol servers). For CPU , the processing unit  that may be included may utilize a time reference using the NTP, SNTP, or other suitable time protocol from a remote time server. Alternatively, the Precision Time Protocol (PTP) can be used for synchronization within a Local Area Network (LAN).","According to some example embodiments, an asynchronous (variable) clock may serve as an internal clock for the operating system for the CPU . The asynchronous clock may be configurable to automatically stop when clock cycles are no longer needed. The asynchronous system clock may be restarted by a wake-up \u201cdaemon\u201d signal from the SNMP daemon (for example, an incoming data packet).","Furthermore, a combination of the above-mentioned clocking approaches can be used. For example, in the initial phases, the internal clock may be used to trigger the CPU . The internal clock may be utilized until the CPU  is fully active, at which time most or all of the clock requirements may be transitioned to external time protocols, e.g., using Internet time servers using NTP, SNTP, or other suitable time protocols from a remote time server, or using PTP and SNMP to take over the control of the clocking operations. This would mean that internal clock circuitry for CPU  could be turned off, thus conserving power.","Executable instructions for the CPU  may be optimized to be more efficient than conventional CPUs so that much lower clock rates are used. A self-adjusting cycle rate may be provided depending on the load and function to be performed. In addition, self-learning or predetermined algorithms for expected scenarios may be utilized to put the CPU  into a \u2018sleep\u2019 or \u2018doze\u2019 mode. An expected external event may cause the CPU  to exit the doze mode, resume full speed operation to execute necessary operations and handle the external event, and return back to doze. In a doze or a deep sleep mode, the CPU register contents may be read and stored in special registers with long deep-sleep data maintaining capabilities. Such clock saving measures may yield substantial power savings.",{"@attributes":{"id":"p-0046","num":"0045"},"figref":"FIG. 2","b":["200","210","220","232","236","240","230","234","238","232","236","240","250","260","262","264","270"]},"The API for all operations of the operating system may include the conventional Berkeley Sockets style API of sockets and ports on IP addresses. The Berkeley Sockets may specify the data structures and function calls that interact with the network subsystem of the operating system. The kernel may handle the normal Sockets APIs. The Sockets API  may also include some optimized APIs.","Any non-conventional functions (i.e., outside the normal functions used to communicate over the Internet) may be handled in a similar manner (e.g., by opening sockets and binding to ports). Thus, accessing of local input and output (e.g., keyboards, mice, and display screens) may be accomplished through socket\/port operations. Consequently, it is quite transparent as to whether a device is local or remote. A keyboard could be at a local host at, for example, 127.0.0.1, or remote at another IP address. Though this transparency may be an aspect of other operating systems, it may not be inherent in the operating system design from the outset. Accordingly, the size of a basic kernel may be very small in a minimal configuration, perhaps as small as a few hundred bytes. It will be understood that the Windows Sockets technology above is mentioned merely for the purpose of providing an example. In contrast to the present technology, in the Windows Sockets technology communications with a display device over the Internet may be cumbersome.",{"@attributes":{"id":"p-0049","num":"0048"},"figref":"FIG. 3","b":["300","300","310","210","320","320"]},"In operation , the I\/O request may be processed according to the network protocol. The processing may be performed by the state machine that is the operating system (e.g., a TCP\/IP stack state machine operating system). The operating system may utilize a Sockets style API of sockets and ports on IP addresses for handling I\/O requests. The conventional Berkeley Sockets style API of sockets and ports on IP addresses may be used. The Berkeley Sockets may specify the data structures and function calls that interact with the network subsystem of the operating system.",{"@attributes":{"id":"p-0051","num":"0050"},"figref":"FIG. 4","b":["400","400","410","412","414","416","418","400"]},"The CPUs , , , , and  may all be coupled to a bus line  so that they may communicate data amongst each other. According to various embodiments disclosed herein, each CPU embeds an operating system based on a protocol stack. The protocol stack may be a TCP\/IP protocol stack, UDP\/IP stack, combinations thereof (i.e., hybrid stack), or other appropriate protocols. One particular example of the CPU embedding a TCP\/IP stack-based operating system is described with reference to .","Although not shown in , the CPUs , , , , and  may each include a memory storing an operating system and\/or any further executable instructions and\/or data. The memory can be implemented within the CPU or externally. In one example, all CPUs , , , , and  may share a single memory coupled to the bus . As used herein, the term \u201cmemory\u201d refers to any type of long term, short term, volatile, nonvolatile, or other storage devices and is not limited to any particular type of memory or number of memories, or type of media upon which memory is stored.","The CPUs , , , , and  in the example in  may further comprise an I\/O Interface (not shown) implemented as software and\/or hardware. One particular example of software implementation of the I\/O Interface is shown as optional Network Interface Module  in . Alternatively, a hardware implementation may comprise an I\/O controller, a Network Interface Controller (NIC) as an Ethernet controller, or the like. It will be apparent to those skilled in the art that the I\/O interface may support any communication standards and provide communications over a serial connection, parallel connection, firewire connection, Ethernet connection, and so forth.","Each of the CPUs may further comprise a clock (not shown), which can be implemented within each CPU or externally. According to various embodiments, a single clock may be shared by all CPUs.","One or more of the CPUs may embed a Master Control Program (MCP) . According to the example in , the CPU  embeds the MCP . The MCP  is an application or a routine for managing operations of the remaining CPUs , , , and  and, therefore, the CPU  may be considered a \u201cMaster Core.\u201d More specifically, the MCP  may be configured to receive I\/O requests from outside devices, generate multiple strands (processes, tasks) according to the I\/O requests, and allocate these strands (processes) to the other CPUs , , , and  so that the overall computational load is selectively distributed among the CPUs , , , and . However, in some embodiments, strands may be allocated to some of the CPUs , , , and , or to just one CPU. According to some embodiments, each of a number of CPUs (i.e., one, some, or all of the CPUs) is each allocated a respective strand. After execution of all strands and\/or processes allocated to different CPUs, the results of the computations may be assembled in the Master Core for further outputting. Alternatively, the CPUs , , , and  may deliver results directly to corresponding external devices. According to some embodiments, the computing device  may comprise several Master Cores for processing different types of I\/O requests. In yet another embodiment, one Master Core may process all incoming I\/O requests, while other Master Cores may be utilized for assembling the output of multiple CPUs, and transmitting of the assembled output results to corresponding outside devices. Those who are skilled in the art would readily understand that any possible number of Master Cores is possible, and each Master Core may implement the same or different functions.","According to various exemplary embodiments, whenever a strand or process is \u2018created\u2019 (e.g., by a typical \u2018C\u2019 \u2018CreateThread( . . . ) function call), the MCP physically allocates a hardware core stack to the strand (or process). An allocated core stack\/strand combination may also be referred to as a \u201ccore strand\u201d. The cores (or core strands) may form a massive array in which core strands may be wired as a block to share resources (e.g., memory), or allowed to share the resources over their interconnects. Cores in the (massive) array of cores may be connected to each other, e.g., interconnected by a web-like structure. Cores may be allocated processes in some embodiments, i.e., cores which are processes or \u201cprocess cores\u201d. Such exemplary process cores are naturally isolated from other process cores since processes run independently of other processes, each process containing their own resources, in contrast to strands where resources may be shared therebetween.","The computing device  allows only a certain number of CPUs to operate while the remaining CPUs, not involved in the processing, are turned off. For example, the computing device  may comprise 1,000 CPUs and a single Master Core. In response to the I\/O request, the Master Core may generate 600 strands (variously within a number of processes) and allocate them to 600 CPUs. The remaining 400 CPUs may be turned off to conserve power. If another 100 strands later become needed, 100 of the 400 CPUs may be turned on in response to the allocating of the 100 strands to them so that the total number of the CPUs executing instructions becomes 700. As clearly shown in this example, the overall power consumption is reduced compared to the traditional system where all processors run all the time, even if there is no process or strand to execute.","The computing device  may facilitate greater stability of operations when compared to conventional multicore processors. When one of the strands crashes, for example, due to a poorly written routine or for some other reason, only the CPU running the strand is affected, while other CPUs remain unaffected. This is in contrast to conventional systems where the entire multicore processor may become affected by a single strand crash.",{"@attributes":{"id":"p-0060","num":"0059"},"figref":["FIG. 5","FIG. 4"],"b":["500","500","510","520","530","540","550"]},"The memory  may include any memory configured to store and retrieve data. Some examples of the memory  include storage devices, such as a hard disk, magnetic tape, any other magnetic medium, a CD-ROM disk, digital video disk (DVD), any other optical medium, any other physical medium with patterns of marks or holes, a RAM, a ROM, a PROM, an EPROM, an EEPROM, a FLASHEPROM, OTPROM, OTP NVM, Flash ROM or any other memory chip or cartridge, or any other medium from which a computer can read instructions. The memory  may comprise a data structure configured to hold and organize data. The memory  may comprise executable instructions of the operating system and\/or other routines and applications. The memory  may also comprise a MCP, as described above with reference to .","The clock  may serve as an asynchronous clock for the operating system for one or more CPUs of the computing device . The asynchronous clock may be configured to automatically stop when clock cycles are not needed.","Communication ports  represent a connection interface that allows asynchronous transmission of data between the computing environment  and any edge devices such as a keyboard, mouse, monitor, printer, CD-ROM drive, network controller, and so forth.","The computing environment  may be implemented as a desktop computer, a laptop computer, a mobile telephone, a smartphone, a PDA, and many other consumer electronic devices.",{"@attributes":{"id":"p-0065","num":"0064"},"figref":"FIG. 6","b":"600"},"The method may commence in operation , when a CPU embedding a MCP (i.e., a Master Core) receives an I\/O request. In optional operation , the network protocol may be determined. According to various embodiments, the protocol is TCP\/IP, UDP\/IP, a combination thereof, or the like. In operation , the Master Core may generate multiple strands (e.g., within processes) according to the I\/O requests and the determined (optional in operation ) network protocol. In operation , the Master Core may schedule and allocate the multiple strands among one or more CPUs , , ,  (see ) and other CPUs of the computing device. The allocation of multiple strands may include communicating data via a network interface (e.g., via a bus using I\/O interfaces of the CPUs).","In operation , the strands (or alternatively the processes which contain strands) may be processed in the one or more CPUs. According to various embodiments, the processing at each CPU is performed by the state machine that is the operating system, e.g., a TCP\/IP stack state machine operating system. The operating system may utilize Sockets style API of sockets and ports on IP addresses for handling these strands.","In optional operation , processing results (e.g., arithmetical or logic results) from multiple CPUs may be assembled by the Master Core for further outputting. According to another example, assembling may be performed within a different CPU, or, alternatively, processing results may be directly transmitted to a corresponding edge device.","The following provides an overview of the functionalities facilitated by protocol stack-based multiple processors, which can be used in different computing devices according to various embodiments disclosed herein.","A conventional operating system may manage internal tasks and external programs in a dictatorial manner, wherein the appearance of multitasking is achieved through rapid allocation of time slices among multiple strands and processes. Such a system may be flexible and of a general purpose. However, applications and unknown driver components have little or no control over their scheduling in such a system.","In contrast to a conventional operating system, the operating system according to the various embodiments disclosed herein is essentially a state machine. This results in the whole environment being inherently cooperative and friendly to the operating system as a state machine model. All systems and application components are built together in an open and symbiotic relationship. Only components actually required in a target system are built into the environment.","In a conventional operating system, the kernel and other systems components include all the normal functions of file and memory management, timers, input and output, TCP\/IP, and the like. There are numerous strands and processes going on, such as kernel executive cycles around all the running processes, updating clocks, checking communication ports, updating displays, checking on Ethernet traffic, and so forth. As such, the conventional operating system provides a highly sophisticated and flexible system, but with the downside of a tremendous number of activities (and hence clock cycles and, therefore, energy) going on all the time.","In contrast, an implementation according to various embodiments disclosed herein may include only the required components. As a result, execution times and code sizes may be optimized, resulting in fewer energy cycles. Such computing device may have a number of state machines handling the operations at a lower level and forwarding data packets up through the TCP\/IP stack. When no tasks need to be performed, the state machines are idle. Therefore, the protocol stack-based CPUs according to various embodiments disclosed herein eliminate unnecessary internal clock cycles through the use of intelligent tasking, in contrast to conventional multi-tasking.","The ultra-low power aspect of the computing device according to the embodiments disclosed herein may provide greatly improved battery life for various devices. Boot up time for devices may be greatly reduced by executing instructions from the ROM, saving general state information in battery-backed SRAM, and saving crucial microprocessor register setting and other state information in special registers in custom application-specific integrated circuits (ASICs), for example.","A full IP stack typically includes an application layer, transport layer, Internet layer, and link layer. The basic operating system for the computing device may not normally have all the components of a full IP stack. A basic kernel may have, for example, just HTTP on top of TCP on top of IP on top of Ethernet. Alternatively, the kernel may be built with SNMP on UDP on IP on Ethernet. Those who are skilled in the art would readily understand that various possible implementations are possible.","The computing device may also attempt to identify which sub-processes in a larger process need to be executed sequentially and which sub-processes may be executable in parallel. The computing device may provide a model of a set of simple state machines. In complex systems, a State Machine Manager (SMM) may be provided to regulate and control the run flow. In operation, applications register priority and execution parameter requests with the SMM, which in turn handles them accordingly in a fair manner.","Conventionally, multicore processors are designed first, and thereafter an operating system is designed to run on such processors. As a result, the operating system design is limited by compromises dictated by the multicore processor design. The applications are then designed to run on the operating system. The design of the applications is limited by all the limitations dictated by the particular operating system design.","In contrast to this conventional design process, an operating system may be designed first according to the embodiments described herein. Any unnecessary aspects may be removed for the design. A computing device having multiple CPUs may then be designed. The design process may be iterated to make still further reductions down to the essential components.","According to various embodiments, the operating system code executes within a ROM. While saving register contents during a deep sleep, execution within the ROM and as a state machine provide an \u201cinstant-on\u201d capability where it may take just milliseconds for the system to resume execution. A RAM memory may be used for only truly read-write data that requires it, while the execute-only code may be stored in the ROM. The slower access times of ROM devices versus RAM devices may not cause an issue, because the instruction cycle times for the system are generally slow, albeit for a reduced number of cycles.","The terms \u201ccomputer-readable storage medium\u201d and \u201ccomputer-readable storage media\u201d as used herein refer to any medium or media that participate in providing instructions to a CPU for execution. Such media can take many forms, including, but not limited to, non-volatile media, volatile media and transmission media. Non-volatile media include, for example, optical or magnetic disks, such as a fixed disk. Volatile media include dynamic memory, such as system RAM. Transmission media include coaxial cables, copper wire, and fiber optics, among others, including the wires that comprise one embodiment of a bus. Common forms of computer-readable media include, for example, a floppy disk, a flexible disk, a hard disk, magnetic tape, any other magnetic medium, a CD-ROM disk, DVD, any other optical medium, any other physical medium with patterns of marks or holes, a RAM, a PROM, an EPROM, an EEPROM, a FLASHEPROM, any other memory chip or cartridge, or any other medium from which a computer can read.","Various forms of computer-readable media may be involved in carrying one or more sequences of one or more instructions to a CPU for execution. A bus may carry the data to system ROM (or RAM), from which a CPU retrieves and executes the instructions. The instructions received by system ROM (or RAM) may optionally be stored on a fixed disk either before or after execution by a CPU.","The above description is illustrative and not restrictive. Many variations of the embodiments will become apparent to those of skill in the art upon review of this disclosure. The scope of the subject matter should, therefore, be determined not with reference to the above description, but instead should be determined with reference to the appended claims along with their full scope of equivalents.","While the present embodiments have been described in connection with a series of embodiments, these descriptions are not intended to limit the scope of the subject matter to the particular forms set forth herein. It will be further understood that the methods are not necessarily limited to the discrete steps or the order of the steps described. To the contrary, the present descriptions are intended to cover such alternatives, modifications, and equivalents as may be included within the spirit and scope of the subject matter as disclosed herein and defined by the appended claims and otherwise appreciated by one of ordinary skill in the art."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["Embodiments are illustrated by way of example and not limitation in the figures of the accompanying drawings, in which like references indicate similar elements.",{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 6"}]},"DETDESC":[{},{}]}
