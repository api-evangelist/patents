---
title: Speech recognition and speaker verification using distributed speech processing
abstract: Processing a speech utterance by communicating between a local computer and a remote computer using a hyper text communication session. The local computer sends a recording of a speech utterance to the remote computer in the session, and receives a result from the remote computer, the result based on a processing of the recording at the remote computer.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07571100&OS=07571100&RS=07571100
owner: Speechworks International, Inc.
number: 07571100
owner_city: Boston
owner_country: US
publication_date: 20021203
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["This invention relates to distributed speech processing.","Computer-based interactive speech applications are designed to provide automated interactive communication, for example, for use in telephone-based voice-portals to answer incoming calls. A voice portal can take calls and perform various tasks based on the caller's speech. The tasks may include gathering information from callers, providing information to callers, and directing callers to appropriate parties.","Some speech applications are implemented using Voice Extensible Markup Language (VoiceXML 1.0 as defined by the World Wide Web Consortium) technology. Using VoiceXML technology, the flow of an automated dialog with a caller is controlled using one or more VoiceXML documents. Each document essentially specifies a part of the interaction between the computer and the caller in the form of a script. When a caller interacts with a system, a VoiceXML document is processed by a \u201cbrowser\u201d application to implement the specified dialogue, for example, to elicit information from a user and perform tasks based on user responses.","A VoiceXML document defines the flow of a portion of the dialogue, which may include forms and menus. A form defines an interaction for collecting values for a set of field items. For example, the field items may include credit card type, name of credit card holder, and expiration date of the card. Each field may specify a grammar that defines the allowable inputs for that field (e.g., a credit card number can only include numbers and not alphabets). A menu defines choices selectable by a user and tasks to be performed when a choice is selected. For example, a menu may contain a list of the names of stores that can be selected by the user, and universal resource locators (URL's) of additional VoiceXML documents maintained by the stores selected by the user. In response to a user selection, the web browser loads the VoiceXML document of the selected store, and performs additional dialogue tailored to the services provided by that store.","The VoiceXML documents are typically stored remotely from the computer hosting the browser application, and are retrieved by the browser application as they are needed. During the flow of a dialog, references (e.g., in a menu or form) in one VoiceXML document indicate to the browser application to retrieve other related documents. Based on the contents of the VoiceXML documents, the browser application invokes text-to-speech procedures or plays prompts to generate voice prompts based on instructions in the VoiceXML document and invokes a speech recognition procedure to recognize speech uttered by the user.","Text-to-speech procedures and speech recognition procedures are not necessarily hosted on the same computer that hosts the browser interpreting the VoiceXML script. For example, dedicated servers may host programs implementing these procedures, and whenever the browser needs the services of one of these procedures, it communicates with an appropriate server to invoke the procedure. In some systems, there may be multiple servers, for example, multiple speech recognition servers.","VoiceXML also provides a method for recording and sending the recorded audio from the browser to a server by using a <submit> tag in the VoiceXML document using a Hypertext Transfer Protocol (HTTP) POST command to send an audio recording as Multipurpose Internet Mail Extension (MIME)-encoded messages to the server. An audio recording may also be sent from a server to a browser by using a <submit> tag and a HTTP POST command. One application of this mechanism is to store and retrieve voice messages on the server.","In general, in one aspect, the invention is directed towards a method for processing a speech utterance. The method includes communicating between a local computer and a remote computer using a hyper text communication session, including sending a recording of a speech utterance from the local computer to the remote computer in the session, and receiving a result from the remote computer, the result based on a processing of the recording at the remote computer.","Implementations of the invention may include one or more of the following features. The result characterizes a similarity of voice characteristics. The result indicates that a speaker who made the speech utterance is a known person. The result indicates a match of stored voice characteristics of a speaker. The method includes prompting the user. The method includes recording a speech utterance from the user using the local computer. The method includes using the local computer to receive a script that includes an instruction that instructs the local computer to prompt the user. The method includes using the local computer to receive a script that includes a universal resource locator of an application program that is run by the remote computer to process the recording. The script includes an instruction that instructs the local computer to perform a task based on the result received from the remote computer. The script includes extensible markup language tags. The script includes voice extensible markup language tags. The method includes processing the recording to determine a similarity of voices. The method includes processing the recording to indicate a likelihood that the speaker is a known person. The method includes processing the recording to indicate a match of stored voice characteristics. The method includes using the local computer to prompt a user to make the speech utterance. The hyper text communication session follows a hyper text transfer protocol. The hyper text transfer protocol is an HTTP protocol defined by World Wide Web Consortium.","In general, in another aspect, the invention is directed towards a method for processing a speech utterance. The method includes receiving a dialog file at a web browser, controlling a speech dialog using the received dialog file, receiving the speech utterance from a user as part of the speech dialog, encoding the speech utterance to generate an encoded speech utterance, sending a request containing the encoded speech utterance from the web browser to a web server, and receiving a response containing a result based on a processing of the encoded speech utterance from the web server.","Implementations of the invention may include one or more of the following features. The request contains an identifier to an application used to process the speech utterance. Receiving the dialog file includes receiving the dialog file from the web server. The dialog file includes a VoiceXML document. The encoded speech utterance comprises an MIME-encoded message. The request is sent from the web browser to the web server according to Hypertext Transfer Protocol. The response is sent from the web server to the web browser according to the Hypertext Transfer Protocol. The application includes a speech recognizer. The application is a speech recognizer and the result characterizes a similarity of voice characteristics.","In general, in another aspect, the invention is directed towards a method for processing a speech utterance. The method includes sending a dialog file from a server to a client, the dialog file containing statements for processing by the client to control a speech dialog; receiving at a server a request from the client in response to the client processing one of the statements, the request containing an encoded speech utterance; processing the encoded speech utterance by using the server; and sending a response from the server to the client, the response containing a result based on processing of the encoded speech utterance.","Implementations of the invention may include one or more of the following features. The dialog file includes a VoiceXML document. The encoded speech utterance includes an MIME-encoded message. The request is sent from the client to the server according to the Hypertext Transfer Protocol. The response is sent from the server to the client according to the Hypertext Transfer Protocol. Processing the encoded speech utterance includes applying a speech recognition application to process the encoded speech. Processing the encoded speech utterance includes applying a speaker verification application to process the encoded speech. The result characterizes a similarity of voice characteristics.","In general, in another aspect, the invention is directed towards a method for processing a speech utterance. The method includes receiving a speech utterance from a user, encoding the speech utterance to generate an encoded speech utterance; sending a request through a network to a server in a hyper text communication session, the request containing the encoded speech utterance and an identifier to an application used to process the speech utterance; and receiving a response from the server that contains a result based on a processing of the encoded speech utterance.","Implementations of the invention may include one or more of the following features. The request includes an HTTP POST request. The hyper text communication session includes a series of related HTTP requests and responses.","In general, in another aspect, the invention is directed towards an apparatus for processing a speech utterance. The an apparatus includes means for communicating with a remote computer using a hyper text communication session; means for sending a recording of a speech utterance to the remote computer in the session; and means for receiving a result from the remote computer, the result based on a processing of the recording at the remote computer.","Implementations of the invention may include one or more of the following features. The apparatus includes means for receiving the speech utterance from a user and converting the speech utterance into a recording. The means for sending the recording includes means for converting the recording to a Multipurpose Internet Mail Extension (MIME)-encoded message. The means for sending the recording includes means for sending the MIME-encoded message using a Hypertext Transfer Protocol (HTTP) POST command. The apparatus includes means for receiving a script that includes an instruction that instructs the apparatus to prompt a user. The script includes extensible markup language tags. The apparatus includes means for interpreting the extensible markup language tags.","In general, in another aspect, the invention is directed towards software stored on computer-readable media for causing a computer system to perform functions that include communicating between a local computer and a remote computer using a hyper text communication session, including sending a recording of a speech utterance from the local computer to the remote computer in the session, and receiving a result from the remote computer, the result based on a processing of the recording at the remote computer.","In general, in another aspect, the invention is directed towards software stored on computer-readable media for causing a computer system to perform functions that include receiving a dialog file at a web browser; controlling a speech dialog using the received dialog file; receiving a speech utterance from a user as part of the speech dialog; encoding the speech utterance to generate an encoded speech utterance; sending a request from the web browser to a web server, the request containing the encoded speech utterance; and receiving a response from the web server, the response containing a result based on a processing of the encoded speech utterance.","In general, in another aspect, the invention is directed towards software stored on computer-readable media for causing a computer system to perform functions that include sending a dialog file from a server to a client, the dialog file containing statements for processing by the client to control a speech dialog; receiving at a server a request from the client in response to the client processing one of the statements, the request containing an encoded speech utterance; processing the encoded speech utterance by using the server; and sending a response from the server to the client, the response containing a result based on processing of the encoded speech utterance.","In general, in another aspect, the invention is directed towards software stored on computer-readable media for causing a computer system to perform functions that include receiving a speech utterance from a user; encoding the speech utterance to generate an encoded speech utterance; sending a request through a network to a server in a hyper text communication session, the request containing the encoded speech utterance and an identifier to an application used to process the speech utterance; and receiving a response from the server that contains a result based on a processing of the encoded speech utterance.","In general, in another aspect, the invention is directed towards an apparatus that includes an input port to receive a speech utterance from a user as part of a speech dialog; and a web browser to receive a dialog file and control the speech dialog using the received dialog file, the web browser being configured to encode the speech utterance to generate an encoded speech utterance, to send a request containing the encoded speech utterance to a web server, and to receive a response containing a result based on a processing of the encoded speech utterance from the web server.","In general, in another aspect, the invention is directed towards a server computer that includes a storage to store a dialog file containing statements for processing by a client to control a speech dialog; an input\/output port to send the dialog file to the client and to receive a request from the client in response to the client processing one of the statements, the request containing an encoded speech utterance; and an application to process the encoded speech utterance and to send a response containing a result based on processing of the encoded speech utterance to the client.","In general, in another aspect, the invention is directed towards a voice-enabled device that includes an input\/output interface to receive a speech utterance from a user; a voice-enabled application configured to encode the speech utterance to generate an encoded speech utterance and send a request through a network to a server in a hyper text communication session, the request containing the encoded speech utterance and an identifier to an application used to process the speech utterance, the voice-enabled application further configured to receive a response from the server that contains a result based on a processing of the encoded speech utterance and to perform a function based on the result.","In general, in another aspect, the invention is directed towards a telephone call center that includes a call manager to receive a speech utterance of a user transmitted through a telephone network, the call manager configured to determine a telephone number dialed by the user to connect the user to the telephone call center, the call manager further configured determine a universal resource locator (URL) based on the telephone number; and a computer to run a speech browser application that performs the functions of retrieving a script based on the URL provided by the call manager, encoding the speech utterance into an encoded speech utterance, sending a request through a network to a server in a hyper text communication session, the request containing the encoded speech utterance and an identifier to an application used to process the speech utterance, and receiving a response from the server that contains a result based on a processing of the encoded speech utterance.","The details of one or more embodiments of the invention are set forth in the accompanying drawings and the description below. Other features, objects, and advantages of the invention will be apparent from the description and drawings, and from the claims.","Like reference symbols in the various drawings indicate like elements.","Voice Application Systems","Referring to , a voice application system  (enclosed in dashed lines) interacts by voice with a caller  to solicit information from the caller and\/or provide services to the caller. System  includes a client side  and a server side  connected by a network (not shown). Client side  includes a browser module  that communicates with caller  by presenting audio prompts to and receiving audio responses from the caller. Browser  includes a VoiceXML interpreter  that processes speech dialogs expressed in scripts, such as VoiceXML documents. The VoiceXML documents contain statements that control the flow of a dialog. Browser  obtains VoiceXML documents it requires from server side , which includes an HTTP server . HTTP server  receives requests for particular VoiceXML documents or VoiceXML content generation operations from browser  and retrieves the VoiceXML documents from a storage module  or by executing program instructions which results in the generation of VoiceXML content.","When browser  is invoked by a call from caller , browser  uses a root VoiceXML document that specifies the flow of an initial dialog. For instance, the URL (Uniform Resource Locator) of the root document is pre-configured in browser . Browser  sends a request containing the URL of the root VoiceXML document to HTTP server . In response, HTTP server  sends the root VoiceXML document to browser . Browser  uses VoiceXML interpreter  to interpret the root VoiceXML document and controls the flow of an initial dialog based on statements in the VoiceXML document.","During the course of a dialog, browser  typically requests additional VoiceXML documents based on the input from caller .","Some statements in a VoiceXML document cause browser  to send a sequence of text to a text-to-speech (TTS) module , which results in a text being read to caller . Some statements cause browser  to request a pre-recorded audio prompt from a remote server and to play the audio prompt to caller . Some statements in the VoiceXML document cause browser  to receive audio signals representing speech spoken by caller . The audio signals are passed to a speech recognizer  under the control of a browser . The recognizer processes the audio signal and passes a recognized text back to browser . The recognized text may affect the further flow of the dialog. For example, a statement in a VoiceXML document may prompt caller  to make a selection from a menu list. Then, based on the caller's selection, the dialog may branch to different subdialogs.","One type of statement is a \u201cform\u201d statement, which has one or more fields. The form statement defines an interaction that collects values for each of the fields in the form. Each field may specify a prompt, the expected input, and evaluation rules to determine whether the input is valid. An example of a form statement is a request for a personal identification number (PIN). Upon being prompted to provide a PIN, caller  utters a PIN, and the speech utterance containing the spoken PIN is received by browser  as an audio signal.","System  may process an audio signal using different modes of operation. In one mode of operation, the audio signal is converted by speech recognizer  into text. Browser  sends the text to HTTP server  as part of an HTTP request sent to the server. The requests may be HTTP POST or GET requests. In a second mode of operation, browser  records the audio signal and then sends an encoding of the recorded audio signal as part of an HTTP request to HTTP server . In response to the request, the HTTP server may provide a document used to control a subdialog. HTTP server  may use the text or audio signal to select one document from a list of documents. When the encoded audio signal is sent as part of the request, the request may also contain an URL that identifies an application, such as a speech recognition application or a speaker verification application, at server side  that is used to process the encoded audio recording.","In the two modes of operation, the recognized text and the encoded recordings are sent to the HTTP server as part of requests sent from the browser to the HTTP server. Prior to sending the requests, the browser and the HTTP server establish a hyper text communication session, and the requests are sent in the communication session. The communication session may include a series of related requests and responses. The hyper text communication session may follow a predetermined protocol, such as the Hypertext Transfer Protocol defined by the World Wide Web Consortium. The hyper text communication session allows the browser to send requests containing ASCII or binary information to the HTTP server. The ASCII information may contain links to other application programs used to process information related to the dialog. The binary information may include audio recordings in the form of MIME-encoded messages. The hyper text communication session allows the HTTP server to transfer to the browser documents that contain scripts for controlling speech dialogs and links to other documents used to control subdialogs.","HTTP server  performs functions in addition to retrieving VoiceXML documents from storage module . HTTP server  is coupled to applications that process data sent from browser , and generate responses to requests from browser  in the form of VoiceXML documents. The VoiceXML documents may provide information requested by caller , or include statements that prompt caller  to provide additional information.","As an illustration, server side  includes applications  and , both of which relate to verifying the identity of a caller. Application  is used in the first mode of operation and processes text sent from the browser, while application  is used in the second mode of operation and processes recorded audio that is sent from the browser.","In this illustration, in a user interaction that makes use of application , caller  is prompted to speak a personal identification number (PIN). Caller  utters the PIN, e.g., \u201cone-two-three-four.\u201d Browser  passes the audio of the caller's speech to speech recognizer , and speech recognizer  converts the speech utterance into a text string \u201c1234.\u201d Speech recognizer  sends the recognized text to browser . Browser  then sends a HTTP POST or GET request containing the text string \u201c1234\u201d to HTTP server . The request also contains an identification of application . Based on the request, HTTP server  identifies application  as being responsible for handling the request and passes it to application . Application  matches the recognized PIN \u201c1234\u201d with a PIN number stored in a database corresponding to the name of the caller (this assumes that the name of the caller has already been given to application ). If a match is found, application  passes a VoiceXML document back to HTTP server , which passes it to browser . The VoiceXML document is sent from HTTP server to browser  in the hyper text communication session previously established when the browser requests the root VoiceXML document from the HTTP server. VoiceXML interpreter  processes the response indicating that the PIN is correct and grants access to caller .","Continuing with the illustration, in a user interaction that makes use of application , caller  is again prompted to speak a PIN. Caller  utters a PIN, e.g., \u201cone-two-three-four.\u201d Rather than using speech recognizer  to recognize the utterance, browser  stores the waveform of the utterance as an audio recording in a storage . Browser  then sends a request that includes the encoding of the audio recording to HTTP server  through a hyper text communication session using an HTTP POST request. The request also includes an identification of application . Based on the request, HTTP server  identifies application  as being responsible for handling the request and passes the request with the encoded audio to application . Application  passes the encoded audio recording to a speech processing module , which analyzes the speech utterance in the received audio recording to determine whether the utterance should be accepted.","In this illustration, speech processing module  performs a speech recognition function to determine the digits spoken by the caller. The module also performs a speaker verification function based on voice characteristics in the recorded utterance. In this illustration, we assume that browser  has already communicated the purported identity of the caller to module , and that the module has stored data representing that caller's voice characteristics. The speaker verification is done by comparing characteristics of the speech utterance in the audio recording with stored characteristics of the spoken PIN of the caller. As an example, if speech processing module  determines that the spoken PIN does not belong to the purported caller, application  passes a VoiceXML document back to HTTP server  which passes it to browser  indicating that the PIN is incorrect and denies access to the caller. The VoiceXML document is sent from HTTP server to browser  in the hyper text communication session previously established when the browser requests the root VoiceXML document from the HTTP server.","In other examples, sending a combination of text and audio recordings to application  may be used. For example, basic personal information, such as name and date of birth, may be recognized by speech recognizer . Text containing recognized name and date of birth, along with an audio recording containing the spoken password may be sent to application . Application  then uses both the text and the audio recording to verify identity of caller .","Referring to , a timeline  shows an example of a sequence of interactions in which a speech response is interpreted by speech recognizer  and a text representation of the speech response is communicated from the browser  to the HTTP server . In this example, caller  sends a PIN to application  to obtain access to a service.\n\n","Referring to , a timeline  shows an example of a sequence of interactions in which a speech response is saved as an audio recording and sent from browser  to HTTP server . In this example, caller  sends a PIN to application  to obtain access to a service.\n\n","Referring to , an example of a system that makes use of the approach described above is in a telephone call center . Telephone call center  is an example of a voice application system that receives calls from callers and provides service based on the telephone numbers dialed by the callers. Call center  includes a computer  connected to a VoiceXML document server  through an Internet Protocol (EP) network . Computer  runs one or more instances of a speech browser . VoiceXML document server  includes a storage for storing VoiceXML documents. The speech browser  retrieves VoiceXML documents from server , and controls dialogs with one or more callers  based on the VoiceXML documents. Speech browser  receives speech utterances from callers  that are received by computer  as audio signals. Call center  may operate in two modes. In the first mode of operation, the audio signals are processed locally by computer . In the second mode of operation, the audio signals are stored as audio recordings, encoded, and sent in the form of encoded messages and as part of requests through the IP network  to other servers.","In the second mode of operation, browser  sends requests containing the encoded recordings to specialized speech-processing servers, such as a speech recognition server  and a speech verification server . Browser  may also send requests to servers (such as TTS server ) and receive encoded audio recordings through IP network . Speech browser  sends the requests through a hyper text communications session. An HTTP POST request may be used to send an audio recording as an MIME-encoded message to the speech processing servers. To service the request, the speech-processing servers process the encoded recording and send the process result back to speech browser  in the form of a VoiceXML page. By communicating encoded recordings between a local computer and remote speech-processing servers using standard hyper text communication sessions, the speech processing capabilities of the local computer may be expanded in a convenient manner. The speech processing servers process speech from the callers  faster than the local computer, allowing the call center to respond faster to callers . This reduces awkward pauses while callers  wait for a response from the call center , resulting in more natural dialogs between callers  and call center .","The speech browsers and speech processing applications can be run in different computers. For example, it is possible to integrate speech browsers and speech processing applications that run under different operating systems, or on different computers. A speech browser can then invoke the service of a speech processing application by sending requests to the application using standard hyper text communication sessions and receive responses containing results of the processing by the applications.","Speech recognition server  runs instances of speech recognizers to recognize speech utterances from the caller. The TTS server  runs instances of TTS engines to synthesize audio used to greet the callers or prompt the callers. Speech recognition server  and TTS server  interact with speech browser  in a client-server manner.","Telephone call center  includes a call manager  that serves as a gateway between a telephone network  and the computer . When one of the callers  dials a telephone associated with the call center , the call is routed through the telephone network  to the call manager . Call manager  can be a private branch exchanges (PBX) or an automatic call distributor (ACD) with appropriate interfaces to connect computer . Each time call manager  receives a new call from a caller, call manager  invokes a new instance of speech browser  to process the call.","Call manager  uses an automatic number identification (ANI) service or a dialed number identification service (DNIS) to determine the number dialed by a caller, and passes this information to the speech browser . Call manager  also uses a DNIS to URL mapping table to determine a URL of a root VoiceXML document corresponding to the number dialed by the caller. Call manager sends the URL to the speech browser , which then sends a request to the VoiceXML document server  for the root VoiceXML document based on the URL. Document server  sends the root VoiceXML document back to the speech browser , which then initiates a dialog with the caller based on the VoiceXML document. For example, the speech browser  may send a greeting message to the caller, and prompt the caller to request information. When the caller utters a speech response, the response is interpreted by the speech browser . Based on the interpretation, the speech browser  may request additional documents from document server . The combination of the call manager, the speech browsers, speech processing servers, and document server enable callers to access a wide variety of services provided on the Internet.","Referring to , document server  includes an application and web server  that interfaces with IP network  and sends and receives documents according to HTTP protocols. Web server  can be linked to one or more applications  that are used to process requests or to provide information to the callers. Application and web server  accesses a database  that stores VoiceXML content, such as Dialog Modules\u2122 , grammars , pre-recorded audio , and text . Dialog Modules\u2122  are building blocks for speech applications, and can be used to manage error-recovery logic and call flow. Application and web server  provides Dialog Modules\u2122 , grammars , pre-recorded audio , and text  to service requests from speech browser , which use the VoiceXML content to control dialogs with callers .","Referring to , each instance of speech browser  includes an operations, administration, and maintenance (OA&M) module , an OpenVXI module , platform components , and telephony services . OA&M module  includes a collection of tools responsible for system management and error reporting. OpenVXI module  interprets VoiceXML documents and calls the platform components module  to control dialogs based on the VoiceXML documents. Platform components  provide high-level services necessary to implement the speech browser, such as providing a recognition engine, a prompt engine, an Internet fetch library, and an ECMAScript engine. Telephony services  provide functions required to interface with call manager , for example, to receive information about the progress of the telephone call (such as whether the caller has hung up).","Speech recognition server  and TTS server  interact with platform components  in a client-server manner. Speech signals pass between call manager  and the speech-processing servers under the control of platform components . For example, the speech signals may pass through speech browser , or may pass through a separate data path for audio data.","In operation, when a caller  dials a telephone number associated with call center , call manager  causes an instance of a speech browser  to be created and notifies platform components  that there is an incoming call. Platform components  send an event to OpenVXI module , which causes a subroutine Run( ) to be executed to start processing of the phone call.","Call manager  determines the telephone number dialed by caller  and passes this information as a sessionArgs argument to the Run( ) call. Call manager  also determines the URL of a root VoiceXML document corresponding to the telephone number dialed by the caller and sends the URL as a name argument to the Run( ) call. OpenVXI toolkit  sends a request to document server  for the root VoiceXML document based on the URL. Document server  sends the root VoiceXML document back to interpreter . OpenVXI toolkit  controls platform components , for example, to send a greeting message to caller  and prompt the caller to request information. When the caller utters a speech response, an audio signal representing the speech response is sent to platform components , and is then recognized by OpenVXI module . The interpretation may result in the OpenVXI module  making additional document requests to the document server .","OpenVXI module  recognizes speech from caller  by invoking a voice recognition process local to computer , or by sending the audio signal to recognition server  for processing. The VoiceXML document that controls the current dialog specifies how the voice recognition is performed.","Referring to , an example of OpenVXI module  of speech browser  includes a VXI interpreter interface  and an XML parser API . VXI interpreter interface  is used to interpret VoiceXML markup tags. VXI interpreter interface  implements VoiceXML 1.0 language and supports most of the features in VoiceXML 2.0. XML parser API  calls open source application programming interfaces (APIs) (e.g., Apache Xerces API) to parse XML markup tags. Platform components  include an ECMA script interface  that provides access to ECMAScript execution services using the open source Mozilla SpiderMonkey engine. Platform components  include an Internet interface  that provides access to application documents through hyper text communications sessions. Data is sent to remote servers as part of HTTP POST or GET requests. Remote servers service the requests by processing the data and sending additional data back to browser  through Internet interface . Internet interface  is implemented using modules from the open source W3C Libwww library. Platform components  include a logging interface  that is used to report errors, events, and diagnostic messages to system operators. Logging interface  logs the events to a file and optionally to a standard output device.","Platform components  include a speech detector , a telephony API , a speech recognizer API , and a text-to-speech (TTS) API . Speech detector  is used to detect the start and end of a speech within the audio stream. Telephony API  is used as the interface to the telephony services . Recognizer API  is used as the interface to a speech recognizer  that runs in the recognition server . TTS API  is used as the interface to a TTS engine  that runs in the TTS server .","Recognizer API  communicates with speech recognizer  through a speech server module. The speech server module includes a client-side unit  that is part of platform components  and a server side unit  that resides in the recognition server . Likewise, TTS API  communicates with a TTS engine  through a speech server module . Speech server module  includes a client-side unit  that is part of platform components  and a server-side unit  that resides in the TTS server . Different speech recognizers (e.g., ) may specialize in recognizing different types of speech, and different TTS engines (e.g., ) may have particular pre-recorded audio segments suitable for certain types of prompts. By using a client-server model, speech browser  may utilize several TTS engines and speech recognizers, depending on their availability and functionality.",{"@attributes":{"id":"p-0072","num":"0093"},"figref":"FIG. 8","b":["231","104","220","232","231","238","231","240","234","240","231","242","236","242"]},"Airline Automated Answering Application",{"@attributes":{"id":"p-0073","num":"0094"},"figref":["FIG. 9","FIG. 10"],"b":["282","283","282","283","198","284","198"]},"The following describes the steps for processing a call from a caller  directed to the airline automated answering application  using the VoiceXML document .\n\n","Referring to , if the caller responds by saying \u201cno,\u201d indicating he\/she is not a member, browser  loads a VoiceXML document  to perform a dialog that requests personal information from the caller, including name and password. The following steps are used to enroll the caller as a new member of the club.\n\n","Referring to , if the caller responds by saying \u201cyes,\u201d indicating that he\/she is a member, browser  loads a VoiceXML document  to perform a dialog that requests the name and password from the caller. The following steps are used to verify the identity of the caller.\n\n","Referring to , in another example of the airline automated answering application , TTS server  and speech recognition server  can connect to ports of call manager  directly. In this case, when browser  needs to prompt a caller, browser  sends the text of the prompt and the port number of call manager  to TTS server . After synthesizing the audio waveform of the prompt, TTS server  sends the audio waveform directly to the designated port of call manager . If there are pre-recorded audio  stored in document server  that can be used in the synthesis of speech, browser  may also provide the URL of the pre-recorded audio  to TTS server , which then retrieves the pre-recorded audio  directly from document server . This reduces the time that the caller has to wait before he\/she hears the prompt.","After synthesizing the prompt, browser  sends a message that includes a port number of call manager  and the URL of a grammar file  to speech recognition server . Speech recognition server  retrieves the grammar file  from document server  based on the URL. Speech recognition server  then receives audio stream from the designated port of call manager . By receiving the audio directly from call manager , the speech recognition process can be performed faster, reducing the time the caller has to wait for browser  to respond.","In the password verification process described above, the password audio recording is sent from browser  to verification server  in a standard hyper text communication session, i.e., the recording is attached to a standard request from the browser to the server. There is no need to setup a separate audio stream between browser  and verification server . The speech verification process may require a large amount of computation, and may require several seconds if performed by computer , especially if computer  is processing several incoming calls at the same time. This would require the caller to wait several seconds before he or she can access the services provided by call center  or airline automated answering application . By distributing the speech processing workload to a dedicated verification server, the speech verification process can performed in a shorter amount of time, reducing the caller's wait time. Browser  can be implemented with less hardware requirements while still being capable of providing complicated speech related services.","Referring to , a voice-enabled device  running a voice-enabled application  may process speech utterances from a user  using the processing capabilities of remote servers without necessarily using a VoiceXML controlled dialog, while nevertheless passing audio to servers using a hypertext communication session. Application program  may be written in any computer language, as long as application can send requests in a hyper text communication session with the remote servers, and receive responses to the requests from the remote servers.","An I\/O interface  converts speech utterances from the user  to an audio signal, which is encoded by application . Application sends the encoded audio signal through an IP network  to remote servers. The remote servers process the encoded audio signals and sends the processed results to device  so that the processed results can be used by application .","For example, device  may be a wireless device, and application  may be a program that provides information based on the user's commands. When device  is turned on, device  connects to the IP network  through a network interface . When the user utters a voice instruction, the instruction is captured by I\/O device , which generates an audio signal that is sent to application . Application  encodes the audio signal (e.g., as an MIME encoded message), and sends the encoded audio signal as part of a request in a hyper text communication session. The hyper text communication session may be a series of related requests and responses. The hypertext communication session uses the HTTP protocol, or alternatively uses another similar protocol. The request is directed to the server and identifies the application that is run on the server for processing the encoded audio signal.","In one example, application  sends the encoded audio signal as part of a request (e.g., an HTTP POST request) to verification server  to verify identity of the user. In response to the request, server  processes the encoded audio signal, and sends back a message containing the processed result. The message may be a plain text string indicating whether the driver's identity is verified. The result may also contain formatted text, such as HTML- or XML-encoded messages, or uses another markup approach.","After the user's identity is verified, application  may send an encoded audio signal representing the driver's voice instruction to recognition server . The encoded audio signal is sent as part of a request (e.g., an HTTP POST request) to server . In response, server  processes the encoded audio signal to generate text representing recognized speech. The text is sent in a message from server  to device . The message may also contain markup tags. Application  then provides information to the driver based on the recognized speech.","When application  needs to prompt the driver, the text of the prompt is sent to TTS server  as part of a request (e.g., HTTP POST or HTTP GET). In response, server  generates an audio signal or a binary representation of the text, and sends the audio signal or binary representation to device . Application  then sends the audio signal (or converts the binary representation into an audio signal) to I\/O interface , which plays the audio message to the driver.","Speech browser  in  may be implemented in hardware, software, or a combination of the two. Browser  may be implemented in computer programs executing on programmable computers or other machines that each include a processor, a storage medium readable by the processor (including, but not limited to, volatile and non-volatile memory and\/or storage components).","Each such program may be implemented in a high level procedural or object-oriented programming language to communicate with a computer system. However, the programs can be implemented in assembly or machine language. The language may be a compiled or an interpreted language.","Each computer program may be stored on a storage medium\/article (e.g., CD-ROM, hard disk, or magnetic diskette) that is readable by a general or special purpose programmable computer for configuring and operating the computer when the storage medium or device is read by the computer to implement the arithmetic logic circuits. Browser  may also be implemented as a machine-readable storage medium, configured with a computer program, where, upon execution, instructions in the computer program cause a machine to operate to process speech dialogs.","A number of embodiments of the invention have been described. Nevertheless, it will be understood that various modifications may be made without departing from the spirit and scope of the invention. Accordingly, other embodiments are within the scope of the following claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"DESCRIPTION OF DRAWINGS","p":[{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIGS. 2 and 3"},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0038","num":"0037"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0039","num":"0038"},"figref":"FIG. 13"},{"@attributes":{"id":"p-0040","num":"0039"},"figref":"FIG. 14"}]},"DETDESC":[{},{}]}
