---
title: Web-based interface to access a function of a basic input/output system
abstract: A web-based interface in an electronic device receives a request to access a function of a Basic Input/Output System.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09448810&OS=09448810&RS=09448810
owner: Hewlett-Packard Development Company, L.P.
number: 09448810
owner_city: Houston
owner_country: US
publication_date: 20111021
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATION","BACKGROUND","DETAILED DESCRIPTION"],"p":["This application is a national stage application under 35 U.S.C. \u00a7371 of PCT\/US2011\/057263, filed Oct. 21, 2011.","An electronic device, such as a computer or other type of device, can include a Basic Input\/Output System (BIOS) that is responsible for starting up the electronic device. During startup, the BIOS initializes and configures components of the electronic device, and loads an operating system in the electronic device. In addition, the BIOS can also provide other services, such as a power management service, a thermal management service, a BIOS update service, and so forth.","A Basic Input\/Output System (BIOS) is usually the first code executed by an electronic device when the electronic device starts. Examples of the electronic device include a computer (e.g. desktop computer, notebook computer, tablet computer, server computer, etc.), a handheld device (e.g. personal digital assistant, smartphone, etc.), an electronic appliance, a gaming console, or any other type of electronic device. The BIOS initializes and configures various hardware components of the electronic device, and loads and starts an operating system (OS) of the electronic device. Code for the BIOS is usually stored on a non-volatile memory, such as a flash memory device or other type of programmable read-only memory (ROM).","The BIOS also provides other functions that can be invoked in the electronic device. Many of such other functions of the BIOS are often executed in the electronic device by entering a system management mode (SMM), which is an operating mode in which OS execution is suspended. Also, in an electronic device having multiple processors or processor cores, all but one of the processors or processor cores may be disabled in SMM mode. To enter SMM mode, a system management interrupt (SMI) is asserted, and an SMI handler (which is part of the BIOS) is executed, often in a relatively high privilege mode, to perform the respective function(s).","There can be various issues with entering SMM mode to perform BIOS functions. First, because OS execution is suspended, normal electronic device operation cannot proceed. Also, in an electronic device in which processor(s) or processor core(s) are disabled during SMM mode, a part of the processing capacity of the electronic device is temporarily deactivated, which means that such part of the processing capacity is unavailable to perform other tasks. Moreover, it can be difficult to predict how long SMM processing may take, which can cause uncertainty in electronic device operation. Moreover, since certain BIOS functions can take a relatively long period of time to complete (e.g. on the order of minutes), status information may not be available to a user of the electronic device, which can result in a disconcerting experience to the user since the user is unable to ascertain whether the electronic device is functioning properly or not.","Security may also be an issue, since malware may attack during SMM operation, which can lead to system corruption. Security measures that are taken to avoid any such attacks against SMM operation can result in increased complexity in the design of an electronic device. Examples of such security measures include locking certain storage areas, including registers and\/or a portion of non-volatile memory such as a flash memory device or other type of programmable read-only memory, which can provide protection against unwanted or unauthorized alteration of the BIOS. These security measures however, may impose constraints on the performance of certain BIOS functions, such as BIOS code update, which can force such BIOS functions to be performed only at certain times, such as system restart.","Examples of various functions that are often performed in SMM can include any one or a combination of the following: a service to update BIOS code; a service to access or modify a setting of the BIOS; a thermal management service to perform thermal management (e.g. control cooling devices such as fans in the electronic device); a power management service (removing or restoring power to specific hardware components); a service to transition the electronic device between different power states (e.g. hibernation state, sleep state, fully on state, and so forth); a service to process activation of a button or button sequence (that includes activation of some combination of multiple buttons) of the electronic device (e.g. a button to turn on\/off a wireless interface component, a hot-key sequence to perform some predefined task, and so forth); a service associated with an ambient light sensor of the electronic device (for detecting ambient light around the electronic device); a service to modify a setting of the BIOS; a service to modify a setting of a hardware component in the electronic device; a service to change a boot order of bootable devices of the electronic device; a service for handling a certain type of call between the OS and the BIOS (e.g. an interrupt 15 call); a service to execute a command of an embedded controller; and a service to support a legacy peripheral device (e.g. a Universal Serial Bus device) under a certain condition.","Although various example BIOS functions are listed above, it is noted that other or alternative BIOS functions can be used in other implementations.","In accordance with some implementations, for more robust system behavior, functions of the BIOS can be provided in a domain that allows the BIOS functions to be accessible without the electronic device having to enter SMM mode. The domain can be located outside the electronic device, or the domain can be located inside the electronic device. Generally, the BIOS can be considered a \u201cBIOS in a cloud,\u201d also referred to as \u201cBIOS.v.\u201d The cloud can be located either in the electronic device or external of the electronic device.","To access the BIOS in a cloud, a web-based interface is provided. Generally, a \u201cweb-based interface\u201d can refer to an interface that allows for a requestor to access a resource using messaging that is sent over a network, such as the Internet or other type of network. A web-based interface can provide a modern interface for accessing the BIOS, where the interface can be independent of or have less dependence upon the underlying platform, including an operating system and a chipset (discussed further below).  is a simplified block diagram of an electronic device , in accordance with some implementations. The electronic device  includes a requesting entity  (e.g. a virtual machine monitor, a guest virtual machine, or some other entity), which is able to submit a BIOS access request . The BIOS access request  is submitted to a web-based interface . A function that provides the web-based interface  is then able to direct the BIOS access request  to a corresponding BIOS function  in a cloud , where the cloud  can be internally in the electronic device , or in an external location accessible over a network. Although the ensuing discussion refers to \u201cBIOS function\u201d in the singular sense, it is noted that \u201cBIOS function\u201d can refer to a single BIOS function or multiple BIOS functions.","A virtual machine monitor (VMM), also referred to as a hypervisor, manages the sharing, by virtual machines, of the physical resources, including the hardware components, of the electronic device. The VMM virtualizes the physical resources. Each virtual machine has an associated virtualized physical resources managed by the VMM. The VMM processes requests for physical resources.","A \u201cvirtual machine\u201d (also referred to as a \u201cvirtual appliance\u201d or \u201cvirtual partition\u201d) refers to some partition or segment of a physical machine (the electronic device) that is provided to virtualize or emulate a physical machine. From the prospective of a user or application, a virtual machine looks like a physical machine. A virtual machine includes an operating system (referred to as a guest operating system) and at least one application program. A \u201cguest virtual machine\u201d can refer to a virtual machine that includes a guest operation system and an application. A guest virtual machine is different from a domain 0, which is often the first domain (or virtual machine) started by a virtual machine monitor.","As examples, the web-based interface  can be a web services interface. A web service refers to a mechanism designed to support interoperable machine-to-machine interaction over a network. Note that in some implementations, the web services interface can also allow for interaction between entities in the electronic device . The web services interface can be according to a format described by a Web Services Description Language (WSDL), as defined by the World Wide Web Consortium (W3C). Alternatively, the web services interface can be according to a Simple Object Access Protocol (SOAP) (also defined by the W3C), which is a protocol for exchanging structured information in the implementation of web services over networks.","As yet another alternative, the web-based interface  can be according to a Representational State Transfer (REST) architecture, which includes clients and servers, where clients can submit requests to servers, and servers can provide responses to clients. Requests and responses are built around the transfer of representations of resources. A resource can be any coherent and meaningful concept that may be addressed. A representation of a resource is typically a document that captures the current or intended state of a resource. In the REST architecture, a request submitted by a client can be a Hypertext Transfer Protocol (HTTP) Get request, in some examples. The server can provide an HTTP response to the HTTP Get request. Note that the client and server can be coupled over a network, or alternatively, the client and server can be inside the electronic device .","In the web-based interface , a resource (e.g. an internal BIOS function or external BIOS function) can be accessed by issuing a BIOS access request that contains an address of the requested resource. The address can be a web address, such as a Uniform Resource Locator (URL), an Internet Protocol (IP) address, or some other address that can uniquely identify the requested resource.","In response to the BIOS access request containing the address that is received at the web-based interface , the request can be directed to an appropriate one of the internal and external BIOS functions. In some cases, the request can be directed to both the internal and external BIOS functions.","Provision of a BIOS function at an external location can provide certain benefits. For example, a service provider associated with an external server computer can perform automatic checks of BIOS updates without involving client devices such as the electronic device . The service provider can also control rollback of a BIOS to a previous version, such as upon detection of a fault or corruption. There can be other further services with respect to the BIOS that can be performed at the external server computer in a more efficient and effective manner.","Another benefit of providing a web-based interface is that there can be reduced dependency on the specific chipset or operating system architecture for communications involved in accessing BIOS functionality. For example, in some systems that employ a WINDOWS\u00ae operating system from Microsoft, a WMI (Windows Management Instrumentation) mechanism, which is an implementation of WBEM (Web Based Enterprise Management), can be used for accessing BIOS functions from the operating system. However, support for WMI may not be available or may be sparse in other operating environments, such as environments using the Linux or other operating systems. As further examples, specific interrupt mechanisms, such as int15 or int1A, can be used with specific types of chipsets. Using a more open interface, such as a web-based interface according to some implementations, reduces dependency on specific chipset and operating system architectures. Furthermore, the command format for accessing BIOS functions using WMI or other schemes mentioned above can be archaic and may lack flexibility. A web-based interface allows use of commands according to more widely used standards, such as XML (Extensible Markup Language) or other standards, for communications to invoke BIOS functionality, which can allow for more open and extensible command formats, and which allows standards based validation mechanisms (e.g. XML-based validation mechanisms) to be employed.",{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 2","b":["100","202","106","204","106","110","108"]},"In some implementations, the cloud  in which the BIOS function  is provided is a privileged domain of the electronic device , where the privileged domain is a domain of the electronic device that is relatively secure and that has certain predefined privilege(s) not available to other entities in the electronic device. Generally, a \u201cprivileged domain\u201d refers to a domain that has predefined privilege(s) that allows an entity in the domain to perform functions in the electronic device that other entities (e.g. OS, application programs, etc.) are not allowed to perform. Also, a privileged domain also has a security mechanism to protect the privileged domain from unauthorized access or attack.","By moving functions of the BIOS to the privileged domain, the electronic device  may not have to enter SMM mode to perform such BIOS functions that have been moved into the privileged domain. In some implementations, SMM operation can be eliminated altogether. In other implementations, SMM operation can still be enabled to perform certain BIOS functions, while the remaining BIOS functions are performed through the privileged domain. In the latter case, the idea is that SMM is enabled for just a small group of BIOS functions, such that effective measures can be taken to provide security and\/or improve efficiency.","Examples of a privileged domain include any or some combination of the following: domain 0, which is often the first domain started by a virtual machine monitor (also referred to as a hypervisor) to perform management tasks; a portion of the virtual machine monitor (or hypervisor); a guest virtual machine that has predefined settings to provide the guest virtual machine with enhanced privileges and\/or security; or another type of domain in the electronic device with a predefined special privilege and\/or security mechanism.",{"@attributes":{"id":"p-0027","num":"0026"},"figref":["FIG. 3","FIG. 1"],"b":["300","300","302","304","306","304","106","306","304","106"]},"In some examples, the privileged domain  is domain 0, which is an administrative domain started by the VMM  upon system startup, and which has enhanced privileges and security mechanisms. Examples of tasks performed by domain 0 include creating and configuring guest domains. Each of domain 0 and guest domains is considered a corresponding virtual machine.","In other implementations, the privileged domain  can be another type of virtual machine, such as a guest virtual machine. The privileged domain  can be separate from the VMM , such as according to the  arrangement. In alternative implementations, the privileged domain  can be part of the VMM . In such alternative implementations, the BIOS function  and the web-based interface  is part of the VMM .","The BIOS function  is accessible by an entity  in the electronic device . In some examples, the entity  that is able to access the BIOS function  in the privileged domain  is part of a guest virtual machine . For example, such entity  can be a guest operating system or another type of entity in the guest virtual machine . In other examples, the entity  can be external of any guest virtual machine , such as in scenarios where a host operating system (not shown in ) or an application program desires to access the BIOS function . A \u201chost operating system\u201d differs from a \u201cguest operating system\u201d in that a guest operating system is part of a virtual machine, whereas a host operating system is not part of a virtual machine.","There are two alternative mechanisms for the entity  to access the BIOS function  in the privileged domain . A first mechanism involves the entity  directly sending a request () to the web-based interface  to access the BIOS function  in the privileged domain . As discussed further below, this can be enabled by the presence of a virtual BIOS in the guest virtual machine .","According to a second mechanism, a request () to access the BIOS function  is intercepted by the VMM , and routed by the VMM  (along path ) to the web-based interface  in the privileged domain . In some implementations, the VMM  is able to intercept and route a request to access the BIOS function  (from the entity ) to the privileged domain  without having to configure the VMM  with a virtual BIOS. This reduces complexity in the design of the VMM .",{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 3","b":["316","300","316","316","310","302"]},{"@attributes":{"id":"p-0034","num":"0033"},"figref":["FIG. 4","FIG. 4","FIG. 3","FIG. 1 or 3"],"b":["402","306","302","308"]},"The process routes (at ) the request to the privileged domain . Such routing can be performed by the VMM , or alternatively, the routing can be performed by a virtual BIOS in the guest virtual machine . In implementations with a virtual BIOS, an entity (e.g. ), which can be a guest operating system, in the guest virtual machine  that wishes to access a BIOS (such as the BIOS function ) issues the access request to the virtual BIOS in the guest virtual machine . The virtual BIOS then routes the access, request to the privileged domain .","The privileged domain  then determines (at ) whether or not to execute the requested BIOS function based on identifying a source of the request, or identifying a context of the request, or identifying both the source and context of the request. In implementations where the privileged domain makes the determination () based on identifying the source of the request, then if the privileged domain  determines that the source of the request is authorized to access the requested BIOS function, the requested BIOS function is executed. On the other hand, in such implementations, if the privileged domain  determines that the source of the request is not authorized to access the requested BIOS function (such as in a scenario where malware has issued the request), then the privileged domain  can deny access of the requested BIOS function. In this manner, the privileged domain  is able to securely execute the BIOS function.","Alternatively or additionally, the privileged domain  makes the determination () based on identifying the context of the request. The \u201ccontext\u201d of the request refers to the current state or environment of the electronic device (or a portion of the electronic device) at the time the request is to be processed. The privileged domain  determines whether the request can be executed based on whether the request is contextually correct (in other words, based on whether the current state or environment of the electronic device (or electronic device portion) satisfies a rule or rules for execution of the request). For example, assume that the electronic device can legally proceed, in sequence, from state S1, to state S2, to state S3, and to state S4. Also assume that executing the requested BIOS function would place the electronic device in state S4. In such an example, the privileged domain  would allow the request to execute the BIOS function only if the electronic device is in state S3 (in other words, the context of the request is correct). On the other hand, if the electronic device were in state S2, then the privileged domain  would not allow execution of the request, since that would be an illegal transition (the context is incorrect).","Another example of whether the context of a request to execute a BIOS function is correct or not is as follows. Assume the system provides that a command to perform an action involves the following sequence of commands: (1) Lock System, (2) Perform Action, and (3) Unlock System. The request to execute the BIOS function would be contextually correct if the request were received for execution after a command to lock the system. However, if the request were received prior to receiving the command to lock the system, then the request would be contextually incorrect, and the request cannot be executed by the privileged domain.","In accordance with some implementations, the requested BIOS function is performed without having to enter SMM\u2014in other words, SMM can be bypassed to perform certain BIOS function(s) which are traditionally performed in SMM by SMI BIOS handlers. By using techniques or mechanisms according to some implementations, the BIOS functions that traditionally would be performed in SMM can be instead performed in a trusted runtime environment provided by a privileged domain.","Additionally, overall design of an electronic device can be simplified since security mechanisms traditionally used, such as locking of registers or portions of non-volatile memory, can be omitted, since it is the privileged domain that now controls whether a request to a BIOS function is allowed to proceed.","In addition to executing the requested BIOS function, the privileged domain  is also able to perform certain tasks prior to execution of the BIOS function. As examples, the privileged domain  can determine if a request to access or perform a BIOS function is properly formed, or if the data to be written (such as in the case of BIOS code update) or a setting of a BIOS policy is correct (e.g. correct size, correct verification code, etc.). This can provide protections against cases where malware can use a malformed request to access BIOS functions, in an attempt to cause BIOS malfunctions as a result of processing the malformed command request. The privileged domain  can also determine if a backup of data to be modified (e.g. BIOS code) can be performed prior to performing the BIOS function. The privileged domain  can further determine if there is sufficient battery charge to complete the requested BIOS function. In general, the privileged domain can first validate a request to invoke a BIOS function inputs associated with the request, and a context of the request and its input, before the privileged domain begins to actually process or route the request to the actual physical BIOS for further processing.","In the context of updating BIOS code, the privileged domain  is also able to handle metadata and\/or metacode associated with the BIOS update. The metadata can provide policies or descriptions regarding what part(s) of the BIOS code is to be updated, and condition(s) associated with performing the update (such as a condition relating to ensuring that an update code image for updating the BIOS code has a correct signature, a condition relating to rollback to an older BIOS code version in case of update failure, and so forth). The metacode can define procedure(s) regarding how variables and settings of the BIOS are to be updated. The privileged domain  can implement an interpreter to handle the metadata and\/or metacode.",{"@attributes":{"id":"p-0043","num":"0042"},"figref":["FIG. 5","FIG. 5"],"b":["500","500","502","502","502","502"]},"Each guest virtual machine A or B includes a respective guest operating system A or B, as well as a respective application program A or B. In some implementations, each guest virtual machine A or B further includes virtual BIOS A or B. A guest operating system A or B designed to access services of a BIOS would make a call to the respective virtual BIOS A or B (instead of an actual BIOS). In some implementations, the virtual BIOS A or B can then directly route this request to a privileged domain , which includes the BIOS function . As with implementations according to , the privileged domain  can be implemented with domain 0 or another virtual machine, or can be implemented in the VMM .","In alternative implementations, the virtual BIOS A or B can instead route the request to access a BIOS function through the VMM . In yet further alternative implementations, the virtual BIOS A or B can be omitted from the guest virtual machine A or B\u2014in such implementations, a request to access a BIOS function can be intercepted by the VMM .","The electronic device  further includes hardware resources  and a firmware layer  that has machine-readable instructions including an actual BIOS  (referred to as a \u201cphysical BIOS\u201d in the ensuing discussion), A \u201cphysical BIOS\u201d or \u201cactual BIOS\u201d refers to BIOS code that resides in non-volatile memory such as flash memory or other programmable read\/only memory, and which is to be executed upon startup of the electronic device . The physical BIOS  can be a reduced (simplified) version of a typical physical BIOS, since one or multiple functions of the BIOS may have been moved to the privileged domain , such that these functions are executed from the privileged domain  so that access of the physical BIOS  does not have to be performed. However, there are certain functions of the physical BIOS  that remain with the physical BIOS \u2014access of such BIOS functions involves invoking the physical BIOS . Such invocation can be accomplished from the privileged domain  through the VMM , as indicated by the path  in .","Also note that traditionally, data exchanged between an operating system and the BIOS is not protected, and as a result, some systems may employ various proprietary schemes to provide some level of protection for data exchanged between the operating system and the BIOS. Such protection is performed because the data transferred between an operating system and the BIOS can include sensitive information such as a user name, a password, an authentication hash, and\/or an authentication policy. One example general protection scheme used is to encrypt the information exchanged between the operating system and the BIOS. Since protection using encryption would involve use and storage of a key in the BIOS (and the operating system), and because there are usually insufficient protection for this key, the protection afforded the information exchanged between the operating system and BIOS can be weak. Since communication with the physical BIOS  is performed through the privileged domain , traditional mechanisms for protecting the confidentiality and\/or integrity of data (such as by encrypting the data) communicated with the physical BIOS  would not have to be implemented. This provides simplicity and performance enhancements in the solution while providing higher protection for data communicated to the physical BIOS without actually having to provide specific proprietary protection mechanisms.","In addition to the guest virtual machines A and B and the privileged domain , the electronic device  can also include a service domain virtual machine  that includes user interface (UI) code  executable to provide a user interface. The user interface provided by the UI code  in the service domain virtual machine  can be used by a user to monitor a status of the privileged domain , such that the user can be provided with feedback during execution of the BIOS function . Also, the user interface can be used to configure settings of the privileged domain .","As further depicted in , the privileged domain  also includes the web-based interface  to allow access of the BIOS function  in the privileged domain . The access of the BIOS function  can be from an entity in the electronic device . In further examples, the web-based interface  allows web access from an entity  that is external of the electronic device  over a secure connection . A \u201csecure connection\u201d refers to a network connection in which a security mechanism is applied (e.g. encryption of data, establishment of a secure tunnel, etc.) to prevent unauthorized access of the data communicated over the network connection. For example, in an enterprise environment (where an enterprise can be a business, educational organization, or government agency), the secure connection  allows the electronic device  to establish communication with a trusted server (), such as a server configured to provide predefined services. An example of the predefined services that can be provided by the server  can include a service to update the physical BIOS  or the BIOS function . In other examples, other services can be provided by the server . The use of the trusted privileged domain  allows calls of a BIOS function to originate from outside the electronic device .","In some implementations, BIOS in a cloud is based on the following premises of a VMM-based architecture: the physical BIOS knows and trusts the main runtime entity (VMM  in ) that the physical BIOS is booting, and the BIOS-trusted VMM has the ability to trap and turn off all I\/O requests (to access BIOS functionality) other than those coming from the privileged domain. In some implementations, a BIOS verification mechanism can be provided to authenticate the origin of the VMM that is to be booted by the electronic device. Examples of such a verification mechanism are described in U.S. Patent Application No. PCT\/US2011\/022814. Such verification mechanisms allow an administrator or other user to specify that only an authorized VMM can be booted in the electronic device  or . The verification mechanism assures that the VMM image that is in the electronic device has not been modified maliciously, and that the VMM can be trusted. The physical BIOS can visually verify the VMM image, and ensure that the VMM is booted with a known set of controlled operational settings that have previously been specified.","After verifying that an authorized VMM has been booted, the physical BIOS can then defer or omit execution of various security measures that the physical BIOS would normally perform to prevent corruption by unauthorized or malicious code. For example, the physical BIOS can choose to not lock BIOS flash registers and\/or portions of flash memory.",{"@attributes":{"id":"p-0052","num":"0051"},"figref":"FIGS. 3 and 5","b":["306","300","500"]},{"@attributes":{"id":"p-0053","num":"0052"},"figref":["FIG. 6","FIG. 6"],"b":["600","602","604","606","600","608","610","610","611","612","608","614","616","604","602","611","610"]},"In some implementations, the network  is a secure network implemented with a secure mechanism to prevent unauthorized access of information communicated between network elements over the network .","The external BIOS function  can be part of a trusted environment  in a server computer . In some implementations, the trusted environment  can also be implemented in a privileged domain (e.g. domain 0, secure guest virtual machine, virtual machine monitor, etc.) in the server computer . The server computer  has one or multiple processors , storage media , and a network interface  to communicate over the network  with the electronic device .","Various modules, such as those depicted in , can be implemented as machine-readable instructions that can be executed on one or multiple processors. A processor can include a microprocessor, microcontroller, processor module or subsystem, programmable integrated circuit, programmable gate array, or another control or computing device.","The machine-readable instructions can be stored in machine-readable or computer-readable storage media, which can be implemented as one or multiple computer-readable or machine-readable storage media. The storage media can include different forms of memory including semiconductor memory devices such as dynamic or static random access memories (DRAMs or SRAMs), erasable and programmable read-only memories (EPROMs), electrically erasable and programmable read-only memories (EEPROMs) and flash memories; magnetic disks such as fixed, floppy and removable disks; other magnetic media including tape; optical media such as compact disks (CDs) or digital video disks (DVDs); or other types of storage devices. Note that the instructions discussed above can be provided on one computer-readable or machine-readable storage medium, or alternatively, can be provided on multiple computer-readable or machine-readable storage media distributed in a large system having possibly plural nodes. Such computer-readable or machine-readable storage medium or media is (are) considered to be part of an article (or article of manufacture). An article or article of manufacture can refer to any manufactured single component or multiple components. The storage medium or media can be located either in the machine running the machine-readable instructions, or located at a remote site from which machine-readable instructions can be downloaded over a network for execution.","In the foregoing description, numerous details are set forth to provide an understanding of the subject disclosed herein. However, implementations may be practiced without some or all of these details. Other implementations may include modifications and variations from the details discussed above. It is intended that the appended claims cover such modifications and variations."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["Some embodiments are described with respect to the following figure:",{"@attributes":{"id":"p-0005","num":"0004"},"figref":"FIGS. 1, 3, 5, and 6"},{"@attributes":{"id":"p-0006","num":"0005"},"figref":"FIGS. 2 and 4"}]},"DETDESC":[{},{}]}
