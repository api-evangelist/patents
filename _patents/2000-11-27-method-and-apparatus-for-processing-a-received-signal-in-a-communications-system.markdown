---
title: Method and apparatus for processing a received signal in a communications system
abstract: A receiver unit includes a first buffer that receives and stores digitized samples at a particular sample rate and a data processor that retrieves segments of digitized samples from the first buffer and processes the retrieved segments with a particular set of parameter values. The data processor is operated based on a processing clock having a frequency that is (e.g., ten or more times) higher than the sample rate. Multiple instances of the received signal can be processed by retrieving and processing multiple segments of digitized samples from the first buffer. The receiver unit typically further includes a receiver that receives and processes a transmitted signal to provide the digitized samples and a controller that dispatches tasks for the data processor. The data processor can be designed to include a correlator, a symbol demodulation and combiner, a first accumulator, and a second buffer, or a combination thereof. The correlator despreads the retrieved segments of digitized samples with corresponding segments of PN despreading sequences to provide correlated samples, which are further processed by the symbol demodulation and combiner to provide processed symbols. The second buffer stores the processed symbols, and can be designed to provide de-interleaving of the processed symbols.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06985516&OS=06985516&RS=06985516
owner: QUALCOMM Incorporated
number: 06985516
owner_city: San Diego
owner_country: US
publication_date: 20001127
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE SPECIFIC EMBODIMENTS"],"p":["I. Field of the Invention","The present invention relates to data communications. More particularly, the present invention relates to method and apparatus for efficiently processing a received signal in a communications system.","II. Description of the Related Art","In a typical digital communications system, data is processed at a transmitter unit, modulated, conditioned, and transmitted to a receiver unit. The data processing may include, for example, formatting the data into a particular frame format, encoding the formatted data to provide error detection\/correction at the receiver unit, channelization (i.e., covering) of the encoded data, spreading the channelized data over the system bandwidth, and so on. The data processing is typically specifically defined by the system or standard being implemented.","At the receiver unit, the transmitted signal is received, conditioned, demodulated, and digitally processed to recover the transmitted data. The processing at the receiver unit is complementary to that performed at the transmitter unit and may include, for example, despreading the received samples, decovering the despread samples to generate decovered symbols, decoding the decovered symbols, and so on. Due to multipath and other phenomena, the transmitted signal may reach the receiver unit via multiple signal paths. For improved performance, the receiver unit is typically designed with the capability to process multiple (and strongest) instances of the received signal.","To perform the required signal processing, some conventional receiver units are designed with a number of processing elements, with each processing element being designed especially for, and dedicated to perform, a specific function. For example, a receiver unit may be designed with a searcher element and a number of data processing elements. The searcher element searches the received signal for strong signal instances, and the data processing elements are assigned to process specific signal instances of sufficient signal strength. Implementation of multiple parallel processing elements results in increased circuit complexity and costs. The processing elements are also typically of fixed designs, and no programmability is typically provided (e.g., to process the received signal with different sets of parameter values to perform, for example, pilot processing, signal searches, and data demodulation). Moreover, the number of signal instances that can be processed is limited to the number of processing elements implemented.","To reduce complexity, some other conventional receiver units are designed with a number of parallel front-end units coupled to a common datapath processor. Each front-end unit performs partial processing (e.g., despreading and decovering) of an assigned signal instance. The common datapath processor then performs the remaining processing (e.g., demodulation with the pilot, energy calculation, and so on) on the partially processed data. Again, a limited number of signal instances can be processed based on the number of front-end units implemented, and no programmability is typically provided.","For a user terminal, the ability to process many instances of a received signal can provide improved performance. For a base station, multiple signal instances for multiple users are typically required to be processed concurrently, thus further highlighting the need for efficient signal processing techniques. The ability to process signals for multiple users using a small number of signal processing elements is economically and technically desirable for various reasons such as, for example, higher board density, fewer component count, lower costs, and so on. Programmability in the signal processing elements is also desirable in communications systems that can transmit data using various parameter values (e.g., different channelization codes of various lengths) depending on various factors such as, for example, the data rate of the transmission.","As can be seen, techniques that can allow for efficient processing of a received signal in a communications system are highly desirable.","The invention provides an elegant demodulator design having numerous advantages over conventional designs. In accordance with certain aspects of the invention, a data processor is provided to perform many of the computationally intensive operations and a controller is provided to perform remaining tasks needed to process (e.g., demodulate) a received signal. This architecture allows the controller to manage the processing of many signal instances and to support many users concurrently. In certain designs, a micro-controller can be provided to perform the \u201cmicro-management\u201d of the data processor and to relieve the controller of some of the management duties associated with the low-level sequencing of the data processor. These various features allow for a simplified design having improved performance over conventional designs.","The data processor and controller can be designed to operate with processing clocks that may be asynchronous to, and are typically much faster than, the sample rate of the received samples. The faster processing clock allows for processing of more instances of the received signal with no additional increase in circuit complexity, and further allows the processing throughput to scale with the clock frequency. The data processor can also be designed to process data based on programmable parameter values, which provides increased flexibility and functionality. For example, the search time interval, the channelization (e.g., Walsh) codes, the time offset, and other parameters may be made programmable. The data processor can further be designed such that the processing elements can be shared to reduced circuit complexity and costs.","An embodiment of the invention provides a receiver unit for use in either a user terminal or a base station of a wireless communications system (e.g., a CDMA system). The receiver unit includes a first buffer coupled to a data processor. The first buffer receives and stores digitized samples at a particular sample rate (and may also store PN samples used for despreading the digitized samples). The data processor retrieves segments of digitized samples from the first buffer and processes the retrieved segments with a particular set of parameter values. The data processor is operated based on a processing clock having a frequency that is higher (e.g., ten or more times higher) than the chip rate. Multiple instances of the received signal can be processed by retrieving and processing multiple segments of digitized samples from the first buffer.","The receiver unit typically further includes a receiver and a controller. The receiver receives and processes a transmitted signal to provide the digitized samples. The controller dispatches tasks for the data processor and processes signaling information from the data processor.","The data processor can be designed to include a correlator, a symbol demodulation and combiner, a first accumulator, and a second buffer, or a combination thereof. The correlator despreads the retrieved segments of digitized samples with corresponding segments of PN despreading sequences to provide correlated samples. The symbol demodulation and combiner receives and further processes the correlated samples to provide processed symbols. The second buffer stores the processed symbols, and can be designed to provide de-interleaving of the processed symbols. In such design, the second buffer may be partitioned into two or more sections, with one section storing processed symbols for a current packet and another section storing processed symbols for a prior processed packet. The second buffer may also be designed to store fractions of packets. The symbols for the current packet can be processed while the symbols for the prior packet are provided to the subsequent signal processing element.","The correlator can be designed to include a despreader, a second (sample) accumulator, and an interpolator, or a combination thereof. The despreader includes a set of K multipliers that can concurrently despread sets of up to K complex digitized samples. The sample accumulator includes a set of K summers coupled to the set of K multipliers, with each summer receiving and summing samples from a respective set of multipliers. The interpolator receives and interpolates despread samples to generate interpolated samples.","The symbol demodulation and combiner can be designed to include a decover element, a pilot demodulator, and a third (symbol) accumulator, or a combination thereof. The decover element receives and decovers the correlated samples with one or more channelization codes to provide decovered symbols. The channelization codes may be Walsh codes having a length that is programmable and defined by the parameter values. The pilot demodulator demodulates the decovered symbols with pilot symbols to provide demodulated symbols. And the symbol accumulator accumulates the demodulated symbols from multiple signal instances to provide the processed symbols.","The decover element can be implemented with a fast Hadamard transform (FHT) element having L stages, and can be designed to receive and process inphase and quadrature correlated samples on alternating clock cycles. The FHT element can be designed to perform decovering with one or more Walsh symbols of a (programmable) length of 1, 2, 4, 8, 16, 32, 64, or 128, or some other length.","The first accumulator receives and processes the correlated samples to provide accumulated results. The first accumulator can be designed to accumulate the correlated samples over a programmable time interval to provide pilot signal estimates. The first accumulator may include a number of accumulate elements, with each accumulate element operated to provide pilot signal estimate for a particular time offset.","The sample rate can be asynchronous with the processing clock. In such case, the controller can be designed to implement a delay locked loop that tracks a chip rate of the digitized samples and provides a reset value, which is used to generate a signal that is then used to write packets of digitized samples to the first buffer starting at designated locations.","The controller can be designed to maintain a timing state machine for each signal instance being processed. Each timing state machine can be maintained using DSP (digital signal processor) firmware, and may include a time tracking loop used to (1) track movement of the signal instance being processed and (2) generate a time offset corresponding to the signal instance. The time offset can be used to retrieve the proper segment of samples from the first buffer to process. The controller can further receive a timing signal, which is used to initiate processing of the segments of samples. The timing signal can be generated based on a comparison value provided by the controller.","The receiver unit may further include a micro-controller that receives tasks dispatched by the controller and generates a set of control signals to direct the operation of the elements in the receiver unit. The micro-controller can instantiate a task state machine for each task being processed, and may include a sequencing controller that receives one or more indicator signals and the dispatched tasks and generates the set of control signals.","Another embodiment of the invention provides a method for processing a received signal in a wireless communications system. In accordance with the method, a transmitted signal is received, processed, and digitized to provide digitized samples at a particular sample rate. The digitized samples are then buffered in a first buffer, and segments of digitized samples are retrieved from the first buffer and processed with a particular set of parameter values, some of which may be programmable. The processing is performed based on a processing clock having a frequency that is higher than the sample rate.","The processing can include a combination of the following (1) despreading the retrieved segments of digitized samples with corresponding segments of PN despreading sequences to provide correlated samples, (2) decovering the correlated samples with one or more channelization codes to provide decovered symbols, (3) demodulating the decovered symbols with pilot symbols to provide demodulated symbols, and (4) accumulating the demodulated symbols from multiple signal instances to provide processed symbols.",{"@attributes":{"id":"p-0043","num":"0042"},"figref":"FIG. 1","b":["100","110","112","114","116","118"]},"At a receiver unit , the transmitted signal is received by an antenna  and provided to a receiver (RCVR) . Within receiver , the received signal is amplified, filtered, downconverted, quadrature demodulated to baseband, and digitized to provide inphase (I) and quadrature (Q) samples. The samples are provided to a receive (RX) data processor  and decoded and processed to recover the transmitted data. The decoding and processing at receiver unit  are performed in a manner complementary to the encoding and processing performed at transmitter unit . The recovered data is then provided to a data sink .","The signal processing described above supports transmissions of packet data, messaging, voice, video, and other types of communication in one direction. A bi-directional communications system supports two-way data transmission. However, the signal processing for the other direction is not shown in  for simplicity.","Communications system  can be a code division multiple access (CDMA) system or other multiple access communications system that supports voice and data communication between users over a terrestrial link. The use of CDMA techniques in a multiple access communications system is disclosed in U.S. Pat. No. 4,901,307, entitled \u201cSPREAD SPECTRUM MULTIPLE ACCESS COMMUNICATION SYSTEM USING SATELLITE OR TERRESTRIAL REPEATERS,\u201d and U.S. Pat. No. 5,103,459, entitled \u201cSYSTEM AND METHOD FOR GENERATING WAVEFORMS IN A CDMA CELLULAR TELEPHONE SYSTEM.\u201d Another specific CDMA system is disclosed in U.S. patent application Ser. No. 08\/963,386, entitled \u201cMETHOD AND APPARATUS FOR HIGH RATE PACKET DATA TRANSMISSION,\u201d filed Nov. 3, 1997, now U.S. Pat. No. 6,574,211, issued Jun. 3, 2003 to Padovani et al. These patents and patent application are assigned to the assignee of the present invention and incorporated herein by reference.","CDMA systems are typically designed to conform to one or more standards such as the \u201cTIA\/EIA\/IS-95-A Mobile Station-Base Station Compatibility Standard for Dual-Mode Wideband Spread Spectrum Cellular System\u201d (hereinafter referred to as the IS-95-A standard), the \u201cTIA\/EIA\/IS-98 Recommended Minimum Standard for Dual-Mode Wideband Spread Spectrum Cellular Mobile Station\u201d (hereinafter referred to as the IS-98 standard), the standard offered by a consortium named \u201c3rd Generation Partnership Project\u201d (3GPP) and embodied in a set of documents including Document Nos. 3G TS 25.211, 3G TS 25.212, 3G TS 25.213, and 3G TS 25.214 (hereinafter referred to as the W-CDMA standard), and the \u201cTR-45.5 Physical Layer Standard for cdma2000 Spread Spectrum Systems\u201d (hereinafter referred to as the CDMA-2000 standard). New CDMA standards are continually proposed and adopted for use. These CDMA standards are incorporated herein by reference.",{"@attributes":{"id":"p-0048","num":"0047"},"figref":["FIG. 2","FIG. 1","FIG. 1"],"b":["200","200","130","212","214","214","222","214","216","134"],"sub":["ADC","ADC"]},"Depending on the particular design of receiver unit , ADCs  may provide Iand Qsamples at a high sample rate and corresponding to signals received from one or more antennas. Data interface circuit  may decimate (i.e., remove) unnecessary samples, arrange (i.e., sort) samples corresponding to each antenna, and assemble the samples into words suitable for efficient storage to a buffer . In a specific embodiment, each word comprises 32 bits of data, each Ior Qsample comprises 4 bits of data, and four pairs of Iand Qsamples are arranged into each word. Other word widths (e.g., 16 bits, 64 bits, 128 bits, and so on) may also be used and are within the scope of the invention. When a word is available for storage, a data write address DWADDR is generated by an address generator , and the word is written to buffer  at the location identified by the generated data write address.","A data processor  then retrieves samples from buffer , processes the retrieved samples as directed by a controller , and provides processed symbols to a buffer\/de-interleaver . Data processor  may subsequently retrieve symbols from buffer\/de-interleaver  and accumulate symbols from multiple signal instances to provide accumulated symbols that are then provided back to buffer\/de-interleaver . When a demodulated symbol is available for retrieval from buffer\/de-interleaver , a symbol read address SRADDR is generated by an address generator  and used to provide the symbol to a decoder . Data processor  may also provide processed signaling data directly to controller . Decoder  decodes the demodulated symbols in accordance with a decoding scheme that is complementary to the encoding scheme used at the transmitter unit and provides decoded data to a data sink .","Data processor  typically includes a correlator, an accumulator, a symbol demodulator (multiplier) and combiner, or a combination thereof, depending on the particular design of the data processor. Data processor  performs many of the functions required to demodulate the received samples. Data processor  can be designed to provide demodulated symbols directly to decoder  for decoding and processed signaling data to controller  for further processing. Such processed signaling data may include, for example, accumulations of the pilot reference and data rate control (DRC) symbols for the reverse link processing, and power control symbols for the forward link processing.","Controller  can be designed to perform various functions such as, for example, the pilot filtering, finger lock detection, time tracking for each signal instance being processed, finger time offset maintenance, frequency tracking (for a forward link processing by a remote terminal), or a combination thereof. Controller  further directs the operation of data processor  and buffer\/de-interleaver  to achieve the desired functions.","In some designs, a micro-controller  is provided to direct the operation of data processor . In such designs, micro-controller  receives directives or commands from controller  to perform particular tasks (e.g., perform correlation for one or all assigned fingers). Micro-controller  then directs operation of data processor  and other units (e.g., buffer , buffer\/de-interleaver ) to execute the tasks. Micro-controller  can reduce the amount of supervision required by controller  and the interaction between controller  and other elements. Micro-controller  can thus free up controller  and allow it to support additional channels\/users.","For the design shown in , the number of users that can be supported generally scales with the frequencies of the clock signals provided to data processor  and controller . These two clocks are independent and, depending on their particular frequencies, one of the clocks typically limits the number of signal instances\/users that can be supported.","A clock generator  generates the sampling clock SCLK for ADCs  and other clocks for other elements within receiver unit . In an embodiment, clock generator  includes a free-running clock source that generates a master clock signal and one or more real-time clock counters (and\/or phase locked loop) that generate other clock signals used by the elements within receiver unit . The free-running clock source can be implemented with a voltage controlled crystal oscillator or some other type of oscillator. The real-time clock counters are triggered by the master clock signal and generate clock signals having lower frequencies but synchronous to the master clock signal. Such clock signals include the ADC sampling clock SCLK, the data processor clock PCLK, the clocks for address generators  and , and so on. In a specific embodiment, the sample clock SCLK is derived from the master clock signal and has a frequency that is closely related to (but not necessarily phased locked to) the chip rate of the received signal.","In an embodiment, address generator  includes a data write address generator that generates the data write address DWADDRESS and a data read address generator that generates a data read address DRADDR. Address generator  may further include address generators for other data (PN sequences) that may also be stored in buffer . In an embodiment, address generator  includes a symbol write address generator that generates the symbol write address SWADDRESS and a symbol read address generator that generates the symbol read address SRADDR. Address generators  and  are described in further detail below.","The implementation and operation of the elements of receiver  are described in further detail below.","In accordance with the invention, data processor  and controller  are designed with a set of features that provides improved performance and efficiency over conventional data processing units. Some of these features are described briefly below.","First, data processor  performs many of the computationally intensive operations and thus allows controller  to support many users concurrently. Data processor  can be designed to perform the required processing on the received data and to provide demodulated symbols directly to decoder . Controller  can thus be relieved of the intensive data processing (e.g., dot product computation), which typically equates to the need for a more complicated controller in conventional designs and traditionally prevents the controller from concurrently supporting a number of users or processing a number of signal instances. Moreover, micro-controller  can be provided to perform the \u201cmicro-management\u201d of data processor  and to relieve controller  of some of the mundane management duties.","Second, data processor  and controller  can each be operated with a clock signal that may be asynchronous to, and is typically much faster than, the sample rate of the samples stored in buffer . For example, the sample rate may be selected to be twice the chip rate of the received signal (i.e., f\u22482.4 Msps) and the clock signal PCLK may be selected to be more than an order of magnitude faster than the sample rate (e.g., F>50 MHz). If data processor  and controller  are used at a user terminal, the faster clock signals allow for processing of more instances of the received signal. In this case, data processor  and controller  can be used to instantiate and support more fingers of a rake receiver with no additional increase in circuit complexity. And if data processor  and controller  are used at a base station, the faster clock signals allow for processing of the received signals from a greater number of users and\/or more instances of the received signals.","Third, data processor  and controller  can each be designed to process data based on programmable parameter values. For example, the number of samples to be accumulated during a search operation may be selected by controller  and provided to data processor . As another example, data processor  may be configured to decover the samples with one or more channelization codes of programmable length. In contrast, conventional receiver designs typically include dedicated hardware elements that perform a specific set of tasks with little or no programmability. The programmability feature of the invention can allow for improved performance over conventional designs.","Fourth, data processor  and controller  can be designed such that the processing can be shared for reduced circuit complexity and costs. Each of data processor  and controller  typically includes a set of processing elements that performs various required functions (e.g., despreading, decovering, accumulation, and pilot demodulation for data processor , and pilot recovery and time tracking for controller ). To perform a particular task on a segment of samples, only the processing elements required for that task are enabled and the remaining elements can be disabled or bypassed. The processing elements within each of data processor  and controller  are typically not duplicated, except in instances where parallel processing is desired to further improve performance. In contrast, conventional receiver designs typically include duplication of many functions, which can lead to increased circuit complexity and costs.","Data processor  can be designed to process a data transmission in accordance with various CDMA standards and systems. For clarity, the invention is now described for the specific CDMA system described in the aforementioned U.S. patent application Ser. No. 08\/963,386, hereinafter referred to as the high data rate (HDR) CDMA system.",{"@attributes":{"id":"p-0064","num":"0063"},"figref":"FIG. 3","b":["302","302","302","304","304","306","306","302","304","306"],"i":["a","b","c","a ","b","a ","b"]},"In accordance with the HDR CDMA system, prior to transmission, the traffic data is covered with Walsh codes corresponding to the channels used for the data transmission, and the power control data for each user terminal is covered with the Walsh code assigned to the user terminal. The pilot reference, covered traffic, and power control data are then spread with a complex PN spreading sequence generated by multiplying the short PN spreading sequences assigned to the particular transmitting base station with the long PN sequence assigned to the user terminal.",{"@attributes":{"id":"p-0066","num":"0065"},"figref":["FIG. 4","FIG. 4"],"b":["400","410","410","410","410"],"sub":["ADC ","ADC "]},"Within data correlator , the Iand Qsamples are provided to a complex multiplier  that also receives a complex PN despreading sequence from multipliers and . The complex PN despreading sequence is generated by multiplying the short PNI and PNQ sequences corresponding to the base station from which the signal is received with the long PN sequence assigned to receiver unit . The PN sequences have time offsets corresponding to the particular signal instance being processed by data correlator .","Multiplier  performs a complex multiply of the complex Iand Qsamples with the complex PN despreading sequence and provides complex despread Iand Qsamples to Walsh decover elements  and . The despread Isamples are also provided to a Walsh decover element .","Walsh decover element  decovers the despread Iand Qsamples with the Walsh codes used to cover the data at the base station and generates a number of streams of decovered samples, one stream for each channel used for the data transmission. The sample streams are then provided to a symbol accumulator  that accumulates samples in each stream based on the data rate of the channel used for transmitting the stream. For each stream, symbol accumulator  accumulates a number of decovered samples to generate a decovered symbol. The decovered symbols are then provided to a pilot demodulator .","Walsh decover element  decovers the despread Isamples with the particular Walsh code W(e.g., Walsh code 0) used to cover the pilot reference at the base station. The decovered pilot samples are then provided to an accumulator  and accumulated over a particular time interval (e.g., the duration of a pilot reference, or pilot reference period) to generate a pilot symbol. The pilot symbols are then provided to a pilot filter  and used to generate a recovered pilot signal. The recovered pilot signal comprises estimated or predicted pilot symbols for the time durations between pilot references and is provided to pilot demodulator .","Pilot demodulator  performs coherent demodulation of the decovered data symbols from symbol accumulator  with the pilot symbols from pilot filter  and provides demodulated data symbols to a symbol combiner . Coherent demodulation is achieved by performing a dot product and a cross product of the decovered data symbols with the pilot symbols, as described below. The dot and cross products effectively perform a phase demodulation of the data and further scale the resultant output by the relative strength of the recovered pilot. The scaling with the pilots effectively weighs the contributions from different instances of the received signal in accordance with the quality of the received signal instances for efficient combining. The dot and cross products thus perform the dual role of phase projection and signal weighting that are characteristics of a coherent rake receiver.","Symbol combiner  receives the demodulated data symbols from each assigned data correlator , coherently combines the symbols, and provides recovered data symbols to a de-interleaver . De-interleaver  reorders the symbols in a manner complementary to that performed at the base station. The data symbols from de-interleaver  is then decoded by a decoder  and provided to a data sink.","The design and operation of a rake receiver for a CDMA system is described in further detail in U.S. Pat. No. 5,764,687, entitled \u201cMOBILE DEMODULATOR ARCHITECTURE FOR A SPREAD SPECTRUM MULTIPLE ACCESS COMMUNICATION SYSTEM,\u201d and U.S. Pat. No. 5,490,165, entitled \u201cDEMODULATION ELEMENT ASSIGNMENT IN A SYSTEM CAPABLE OF RECEIVING MULTIPLE SIGNALS.\u201d Pilot carrier dot product and the (optimal) weighting of the rake receiver finger paths are described in further detail in U.S. Pat. No. 5,506,865, entitled \u201cPILOT CARRIER DOT PRODUCT CIRCUIT.\u201d The patents are assigned to the assignee of the present invention and incorporated herein by reference.","In the HDR CDMA system, power control data for a particular user terminal is covered with a particular Walsh code assigned to the terminal and transmitted in each slot. Thus, within data correlator , the despread Iand Qsamples are decovered by Walsh decover element  with the assigned Walsh code. The decovered power control samples are then provided to an accumulator  and accumulated over the duration of a power control burst to generate a power control bit for the signal instance being processed. The power control bits from all assigned data correlators  may be coherently combined (not shown in  for simplicity) to generate a combined power control bit that is then used to adjust the transmit power of the user terminal.",{"@attributes":{"id":"p-0075","num":"0074"},"figref":["FIG. 5","FIG. 4"],"b":["230","230"]},"Referring back to , the Iand Qsamples from ADCs  are formatted by input data interface  and stored to buffer . In an embodiment, buffer  is implemented as a circular, two-dimensional buffer having a size that is selected based on a number of factors such as, for example, the input sample rate, the resolution of the input samples, the output sample rate, and so on. Buffer  is designed with the capability to store data samples received over a particular time period (e.g., two frames of samples, or some other period). The time period is selected to be large enough to allow for the collection of a sufficient amount of data for all signal paths to be processed, but short enough to prevent the writing of new samples over old, unprocessed samples. The time period over which samples are collected and stored may be programmable.","In an embodiment, for ease of writing data into buffer , each row of the buffer has a width that is matched to the width of the output word of input data interface  (e.g., 32 bits). As a word becomes available for writing to buffer , a data write address generator generates a data write address DWADDR corresponding to the next available row in buffer . The word is then written to buffer  in the row indicated by the generated address. Thereafter, the stored samples are available for retrieval and processing by data processor .","Data processor  can be directed to process the data samples in accordance with a particular set of parameter values. For traffic data processing, data processor  may be directed to: (1) despread and decover a particular instance of the received signal at a particular time offset, (2) perform pilot demodulation of the decovered symbols, and (3) coherently combine demodulated symbols corresponding to different signal instances, and so on. For signaling (e.g., pilot and power control) data processing, data processor  may be directed to: (1) despread and\/or decover a particular instance of the received signal, (2) accumulate the decovered samples over a particular time interval, (3) combine accumulated symbols from various signal instances, and so on. Data processor  may also be operated to search for strong instances of the received signal. Data processor  can be designed and operated to perform various signal processing, depending on the particular CDMA standard or system and the particular (forward or reverse link) data transmission being supported.","Buffer\/de-interleaver  provides storage for the processed symbols from data processor . As a symbol is processed by data processor  and becomes available for writing to buffer\/de-interleaver , a symbol write address generator generates a symbol write address SWADDR corresponding to the proper location in buffer\/de-interleaver . The processed symbol is then written to buffer\/de-interleaver  to the location indicated by the generated symbol write address. Thereafter, the stored symbols may be provided back to data processor  for further processing (e.g., accumulation with the processed symbols for another signal instance). Buffer\/de-interleaver  thus stores the results of the pilot demodulation for the first signal instance, and further stores the results of the accumulation of the pilot demodulation for subsequent signal instances.","By generating the proper symbol read and write addresses, buffer\/de-interleaver  can be operated to reorder the symbols in accordance with a particular de-interleaving scheme. When symbols are ready to be provided to decoder , controller  initiates the read process at the appropriate time. Symbol address generator then generates the proper read addresses to achieve the desired symbol de-interleaving. The de-interleaved (i.e., demodulated) symbols are provided to decoder  for decoding.","In the embodiment shown in , the I and Q samples from buffer  are provided to a correlator  within data processor . Correlator  further receives the complex PN despreading sequence, which may also be stored in buffer  or generated by a PN generator (not shown in ). For traffic data processing, correlator  despreads the I and Q samples with the complex PN despreading sequence to provide despread samples. Correlator  thus performs the despreading function performed by complex multiplier  in . Correlator  may also be designed to perform other functions such as, for example, accumulation of multiple despread samples for each chip interval, interpolation of the despread samples, and so on. The despread samples are provided to a symbol demodulator and combiner .","Symbol demodulator and combiner  can be configured to perform decovering, coherent demodulation with the pilot, symbol combining for multiple signal instances, symbol accumulation for repeated symbols in a packet, or a combination thereof. For decovering, symbol demodulator and combiner  receives the despread samples from correlator  and performs decovering with a set of Walsh symbols. In an embodiment, the length of the Walsh symbols is programmable and can be selected as 1, 2, 4, 8, 16, or some other length (e.g., 32, 64, 128, and so on).","For coherent demodulation, symbol demodulator and combiner  receives and coherently demodulates the decovered data symbols with the recovered pilot symbols to generate demodulated symbols that are stored to buffer\/de-interleaver . For symbol combining, symbol demodulator and combiner  receives and combines demodulated symbols corresponding to various signal instances to generate recovered symbols that are stored back to buffer\/de-interleaver . Symbol demodulator and combiner  can thus perform the functions performed by data correlator  and symbol combiner  in .","Buffer\/de-interleaver  stores the intermediate and final results of the symbol accumulation. The processed symbols from symbol demodulator and combiner  are written to buffer\/de-interleaver  at locations identified by a symbol write address generator within address generator . Stored symbols are retrieved from buffer\/de-interleaver  from locations identified by a symbol read address generator . Buffer\/de-interleaver  can be operated to perform symbol de-interleaving in a manner complementary to that performed at the transmitter unit by generating the proper symbol read addresses. The retrieved symbols from buffer\/de-interleaver  comprise the demodulated symbols that are provided to decoder .","For signaling data processing, correlator  can be configured to despread the I and Q samples with the complex PN despreading sequence and provide the despread samples to an accumulator . Accumulator  may be configured to decover the despread samples with one or more Walsh codes, accumulate the despread or decovered samples over a particular time period (e.g., a pilot reference period), and provide the recovered (e.g., pilot or power control) data to controller . Accumulator  may also be configured to provide processed samples used to search for strong instances of the received signal at various time offsets, as described below.","In an embodiment, controller  processes the pilot symbols from accumulator  and generates the recovered pilot that is used for coherent demodulation of the data symbols. In other embodiments, a pilot processor can be implemented within data processor  to filter the pilot symbols and generate the recovered pilot. Other designs to process the pilot reference can also be contemplated and are within scope of the invention.","In the embodiment shown in , a data bus  interconnects various elements of receiver unit , such as address generator , data processor , micro-controller , and controller . Data bus  supports efficient transfer of data and other information between the elements coupled to the data bus. For example, data bus  can be used by controller  to dispatch tasks to micro-controller  and to send processed pilot symbols to data processor . Other mechanisms to interconnect the elements of receiver unit  can also be contemplated and are within the scope of the invention.",{"@attributes":{"id":"p-0088","num":"0087"},"figref":"FIG. 6A","b":"224","sub":["C ","C"]},"In an embodiment, the received samples are written to buffer  starting at a designated address, which may be arbitrarily selected (e.g., an address of zero, as shown in ). In an embodiment, a data write address pointer is initialized to the designated address upon the occurrence of a reset event (e.g., power up) and samples are written to buffer  starting at the location identified by the pointer. An arbitrary offset or phase shift thus exists between the write address pointer and the actual boundary of the over-the-air frame represented by the samples. The frame boundary can correspond to any address in buffer . During the process of acquisition, this offset is calculated by controller . Subsequent data retrievals are compensated by the computed offset, by adding the offset to the read address pointer.","The data write address generator generates the data write address DWADDR that points to the next available location in buffer . In an embodiment, samples are written to buffer  is sequential locations and the data write address DWADDR is incremented after each write operation. In an embodiment, buffer  is implemented as a circular buffer that wraps around. By selecting the size of buffer  to be a power of 2, a binary counter can be used to provide the required write (or read) address. This counter naturally wraps around and resets to zero when the end of buffer  is encountered.","After a sufficient number of samples have been stored to buffer , a particular segment of samples can be retrieved from the buffer and processed. The segment can include data samples for an entire packet or a portion of a packet. In a specific embodiment, each segment of data samples corresponds to a separate pilot reference, and the size of the segment is limited by the duration of time in which the channel is coherent over the pilot reference. In an embodiment, as part of the pilot processing within controller , a pilot vector corresponding to the pilot reference is phase rotated according to a frequency error estimate to generate pilot estimates that are then provided to data processor  for the pilot demodulation. Controller  thus samples the pilot reference at the beginning of a segment and uses this pilot reference to generate pilot estimates for the duration of the segment. The phase error in the pilot estimates accumulates across the length of the segment, and thus the segment length is limited to reduce the amount of accumulated phase error in the pilot estimates. This design avoids a need for a dedicated complex chip rate multiplier to rotate the samples themselves, which can increase the complexity of the data processor.","Segments of data samples corresponding to different signal instances (or multipaths) can be sequentially processed. For example, samples corresponding to the first multipath having a time offset of zero may be retrieved from buffer  and processed by data processor . Upon completion of the processing for the first multipath, another segment of samples (e.g., corresponding to the second multipath) can be retrieved from buffer  and processed. For each segment to be processed, the data read address generator is loaded with an initial address that takes into account (1) the arbitrary offset between zero offset alignment of the samples and the write address pointer, (2) the address of the segment relative to the start of the packet, and (3) the time offset associated with the particular multipath being processed.",{"@attributes":{"id":"p-0093","num":"0092"},"figref":"FIG. 6B","b":["224","224","224"]},"A PN write address generator is used to generate the PN write address PWADDR that points to the next available location in buffer , and a PN read address generator is used to generate the PN read address PRADDR for reading a segment of PN samples. For each data segment to be processed that requires PN samples, the PN read address generator is loaded with the address of the first PN sample in the segment. The PN write and read address generators are each appropriately incremented after each PN write or read operation.","The number of PN samples to store in buffer  can be based on a number of factors and can be matched to the number of data samples being stored. For example, two slots of PN samples can be stored for two slots of data samples. The number of PN samples to store may also be dependent on, for example, the size of buffer , the amount of multipath deskew to be supported, and so on.",{"@attributes":{"id":"p-0096","num":"0095"},"figref":["FIG. 6C","FIGS. 2 and 5"],"sub":["ADC ","ADC "],"b":["222","612","614","510","612","612","224","220"]},{"@attributes":{"id":"p-0097","num":"0096"},"figref":"FIG. 6C","b":["220","224","220","512","512","512","512","514","514","514","514","512","512","622","512","224"],"i":["a","b","c","d ","a","b","c","d","a ","d "]},"Each latch  stores a value indicative of the first address to be generated by address generator  for the segment to be processed. For example, to read a particular segment of data samples from buffer , the address of the first data sample in the segment is provided to latch at the appropriate time. Data read address generator loads the value stored in latch and uses this value as the starting address. Subsequent data read addresses can be generated, for example, by incrementing a counter within data read address generator ","As described above, the data samples can be stored to buffer  starting at an arbitrarily designated buffer location (e.g., zero). Also, buffer  is designed with the capacity to hold a particular number of samples. In an embodiment, buffer  has a size that is a power of two. A binary counter can then be used to generate the write (or read) address for buffer . The binary counter naturally wraps around to zero when the end of the buffer is reached.","In an embodiment, since data samples are written to buffer  in sequential order, data write address generator can also be used as the sample counter that counts the number of samples stored to buffer . The data write address from address generator is provided to a comparator  and compared against a comparison value provided by controller . The comparison value is indicative of the storage of a particular number of samples (e.g., one packet) that controller  would like to be notified. If the data write address equals the comparison value, comparator  provides a timing signal indicative of this condition. This timing signal is used by controller  to initiate the processing of the stored samples.",{"@attributes":{"id":"p-0101","num":"0100"},"figref":["FIG. 6C","FIG. 6C"],"b":["240","630","630","230","240","630","224"]},"In an embodiment, each state machine  includes a time tracking loop  that tracks the movement of the multipath. The time tracking can be achieved by processing samples (e.g., corresponding to the pilot reference) at +\u00bd and \u2212\u00bd chip offsets, determining the difference in the pilot accumulations at the +\u00bd and \u2212\u00bd chip offsets, and filtering the difference value to generate a correction factor. Thus, as the multipath moves over time, time tracking loop  determines the amount of movement and updates the time offset with the correction factor accordingly. The time offset is provided to a data\/PN address calculation unit  and used to compute the starting address of each data segment to be processed. The computed starting address is then provided to latch via data bus  at the appropriate time.","As noted above, the samples are stored to buffer  starting at a designated location in memory at an arbitrary point in time. As a result, the starting samples for each signal instance being processed can correspond to any location in buffer . In an embodiment, the time tracking loop  is used to determine the starting location of the received data packet for each signal instance being processed. The time tracking loop  processes the received samples to determine a particular time offset for the received signal instance. This time offset is then used to generate the starting address for each segment of samples to be processed.","State machines  can be implemented by controller  using DSP firmware and with a basic set of processing elements. For example, a single time tracking loop  and a single data\/PN address calculation unit  can be time division multiplexed and used to implement all instantiated state machines . Controller  can maintain a separate register to store the time offset associated with each instantiated state machine .","In an embodiment, for the forward link processing in a remote terminal, controller  also maintains a frequency tracking loop  that locks the frequency of the clock source to the data rate of the data samples. The frequency tracking loop can be designed to determine the amount of phase rotation in the pilot references, use the phase information to determine whether the sampling clock is fast or slow relative to the chip rate, and adjust the frequency of the clock source accordingly. If the sampling clock is frequency locked to the chip rate, a particular number of data samples (e.g., 2048) are provided for each frame. Thus, when the frequency is locked, a frame of samples can be deemed to be received by counting the number of samples being written to buffer .",{"@attributes":{"id":"p-0106","num":"0105"},"figref":"FIG. 6C","b":["236","234","236","542","542","544","544","542","542","546","542","542","234"],"i":["a ","b ","a ","b","a ","b ","a ","b "]},"Each latch  stores a value indicative of the first address to be generated by address generator  for the segment being processed. The initial values provided to latches  are generally related to the values provided to latches , but are provided in a manner to account for various factors such as, for example, the processing delay of data processor . Symbol read address generator loads the value stored in latch and uses the loaded value as the starting address. Subsequent symbol read addresses can be generated, for example, by incrementing a counter within symbol read address generator ","In an embodiment, buffer\/de-interleaver  is used to store intermediate and final results of the symbol accumulation for multiple multipaths. Initially, samples for a particular multipath is processed, and the resultant symbols are stored to particular locations in buffer\/de-interleaver . To simplify the addressing, the symbols for a particular multipath (e.g., the first to be processed) may be stored in buffer\/de-interleaver  starting at a designated location (e.g., address of zero, N, and so on). For each subsequent multipath, the demodulated symbols for that multipath can be combined with the corresponding stored symbols for prior processed multipaths. The combined symbols are then stored back to the same locations in buffer\/de-interleaver . Thus, symbols for multiple processed multipaths are combined \u201cin place\u201d with the corresponding prior-accumulated symbols. When symbols for multiple multipaths are to be combined, address generator  generates the proper symbol read and write addresses, as determined by the values stored in latches and ","In many communications systems including the HDR CDMA system, interleaving is used to provide temporal diversity in the transmitted data. The interleaving reduces the likelihood of receiving a string of consecutive errors due to, for example, impulse noise. At the receiver unit, the received symbols are reordered. The reordering can effectively spread a string of symbols received in error over an entire frame, which can improve the likelihood of correct decoding of the received symbols. The interleaving is performed at the transmitter unit such that temporal diversity is achieved prior to the decoding at the receiver unit.","In an embodiment, buffer\/de-interleaver  is also operated to provide de-interleaving of the processed symbols. In an embodiment, the processed symbols are written to buffer\/de-interleaver  in sequential order but are read out in a pseudo-random but deterministic order defined by the particular interleaving scheme being implemented. Because the symbols are read out in non-sequential order, buffer\/de-interleaver  is first filled with the symbols corresponding to the duration over which interleaving is performed. For example, in the HDR CDMA system, interleaving is performed on each frame of data. Thus, at the receiver unit, a complete frame of symbols is processed and stored to buffer\/de-interleaver . After the entire frame has been processed, the symbols for the frame are read out to the subsequent decoder. In an embodiment, data processing is performed on one frame of data at a time. In this manner, as the current frame is being processed and stored to one section of buffer\/de-interleaver , the prior processed frame can be retrieved from another section of buffer\/de-interleaver .","Symbol read address generator includes the necessary circuitry to generate the proper addresses for the symbols to be provided to symbol demodulator and combiner  for symbol accumulation, and the symbols to be provided to the subsequent decoder  for decoding. The symbol read addresses for these two destinations can be generated in a time division multiplexed manner. For example, symbols can be provided to symbol demodulator and combiner  and decoder  on alternative symbol read cycles. Alternatively, a group of symbols can be provided to symbol demodulator and combiner  followed by a group of symbols to decoder .",{"@attributes":{"id":"p-0112","num":"0111"},"figref":"FIG. 7A","b":["522","230","522","522","522"]},"In an embodiment, for each data read cycle, four pairs of digitized Iand Qsamples (i.e., four complex data samples) are retrieved from buffer  and latched by latches through . On the next data read cycle, the samples from latches through are further latched by latches through , respectively, and the next four pairs of digitized Iand Qsamples are latched by latches through . In an embodiment, two data samples are provided for each chip period (i.e., doubled sampled) and the double latching by latches  and  allows for processing of either the on-time (OT) sample or the late (LT) sample of each chip.","Multiplexers through receive the latched samples from latches through , respectively, and the latched samples from latches through , respectively. Each multiplexer  provides one of the received samples, depending on whether the processing is to be performed on the on-time or late sample, to a respective AND gate . AND gates and also receive the control signal ZERO0, and AND gates and also receive the control signal ZERO1. Each AND gate  provides either the received sample or a value of zero (\u201c0\u201d) to a respective multiplier , depending on the control signal ZEROx.","In a specific embodiment, buffer  is designed and operated to also store the IPN and QPN sequences used for despreading the data samples. In an embodiment, for each PN read cycle, a 16-chip segment of the complex PN despreading sequence, corresponding to the data samples being processed, is retrieved from buffer , latched by a latch , and provided to a multiplexer . Multiplexer  selects a portion (e.g., a 2-chip portion) of the latched complex PN segment and provides the selected portion to a barrel shift register . Register  then provides the proper IPN and QPN samples to each of multipliers through ","In a specific embodiment, the data samples are oversampled by the ADCs, possibly decimated, and provided at twice the chip rate (i.e., the sample rate is twice the chip rate). The oversampling allows for detection of strong instances of the received signal with finer time resolution, which can provide improved performance. For the correlator architecture shown in , four parallel processing paths are provided and up to four complex data samples corresponding to two chips worth of data can be concurrently processed for each cycle of the processing clock. As shown in , multipliers and perform despreading of two complex data samples (e.g., the on-time and late samples) corresponding to chip index n, and multipliers and perform despreading of two complex data samples corresponding to chip index n+1. Barrel shift register  provides the IPN and QPN samples corresponding to chip index n to multipliers and , and the IPN and QPN samples corresponding to chip index n+1 to multipliers and ","Each multiplier  performs a complex despread of the complex data samples with the complex PN samples. In the HDR CDMA system, at the transmitter unit, the complex data to be transmitted is spread with the complex PN sequence. The complex spreading can be expressed as:\n\n=() (). Eq\u2003\u2003(1)\n\nAt the receiver unit, the data can be recovered by performing the complementary complex despreading, which can be expressed as:\n\n=() (),\u2003\u2003Eq (2)\n\nwhere I=I+noise, Q=Q+noise, I=I+noise, and Q=Q+noise.\n",{"@attributes":{"id":"p-0118","num":"0117"},"figref":"FIG. 7B","b":["720","720","762","762","764","764","762","762","762","766","766","766","768","768","768","768","768"],"sub":["ADC ","ADC","ADC ","ADC ","\u2014","\u2014","DES ","DES "],"i":["a ","b","a ","b","a ","b ","a ","b","a ","b "]},"Referring back to , the despread Iand Qsamples from multipliers through are selectively combined by summers through to generate a set of combined Iand Qsamples. Specifically, summer combines the despread Isamples from multipliers and to generate the first combined Isample corresponding to the first half of a chip, summer combines the despread Isamples from multipliers and to generate the second combined Isample corresponding to the second half of a chip, summer combines the despread Qsamples from multipliers and to generate the first combined Qsample, and summer combines the despread Qsamples from multipliers and to generate the second combined Qsample. Summers  can be used to combine half samples from different chips before the interpolation, to simplify the design of the interpolator. AND gates  and the ZERO0 and ZEROsignals can be used to disable the summing of samples from two chips when this is not applicable, such as in the forward link symbol demodulation where each chip may contain a complex or higher order modulated symbol.","In the specific embodiment shown in , correlator  includes an interpolator  that can be configured to generate sample values at various time offsets. For example, if two complex data samples are provided for each chip (i.e., at time offset of 0Tand 0.5T, where Tis the period of a chip), interpolator  can be used to generate interpolated samples at other time offsets such as, for example, 0.125T, 0.25T, 0.375T, 0.625T, 0.75T, 0.875T, and so on. The time resolution of the interpolation is dependent on the particular design of interpolator . Interpolator  can be used, for example, to identify a multipath with a finer time resolution than the sample period (e.g., finer than 0.5T).",{"@attributes":{"id":"p-0121","num":"0120"},"figref":["FIG. 7C","FIG. 7C"],"b":"2"},{"@attributes":{"id":"p-0122","num":"0121"},"figref":"FIG. 7D","b":["730","730","730"]},"The combined I, I, Qand Qsymbols from summers through are provided to scaling elements through , respectively. Within each scaling element , the sample is provided to an X1 input of a multiplexer , an input of a times-two element , and an input of a summer . Times-two element  scales the received sample by a factor of two and provides the scaled output to an X2 input of multiplexer  and to the other input of summer . Summer  sums the input sample and the X2 scaled sample and provides the summed output to an X3 input of multiplexer . Multiplexer  also receives a zero (\u201c0\u201d) at its X0 input. Multiplexer  than selects a sample at one of its inputs, based on a control signal OFFSET, and provides the selected sample to a latch .","As shown in , scaling elements and are configured in a complementary manner, and scaling elements and are also configured in a complementary manner. For a particular time offset of 0.25, 0.50, or 0.75 (as expressed by the control signal OFFSET), the value of 3I, 2I, or 1I, respectively, is provided from scaling element to latch , and the value of I, 2I, or 3I, respectively, is provided from scaling element to latch . The samples from latches and are then provided to a summer , and the samples from latches and are provided to a summer . The output from summer comprises the interpolated I sample, and the output from summer comprises the interpolated Q sample. The interpolated samples from summers and are provided as the correlated Iand Qsamples from correlator . The outputs from latches through also comprise the (non-interpolated) correlated I, I, Q, and Qsamples, respectively.","Interpolator  can be operated in one of a number of different configurations. For example, as noted above, interpolator  can be configured to zero out the outputs, feed through the received samples, provide interpolated samples, or a combination of the above. The zero value at the X0 input of multiplexers  is selected to zero out the output, and the sample at the X1 input is selected to feed through the received samples. And to perform interpolation, the X1, X2, or X3 value is selected by one multiplexer  and the complementary X3, X2, or X1 value is selected by the other multiplexer  in the complementary pair.","In an embodiment and as noted above, two data samples are provided for each chip period and processed (e.g., despread) by correlator . The two samples for each chip can be combined within interpolator  to provide a single despread sample for each chip period. To combine the I samples for each chip, the samples at the X1 inputs of the multiplexers for scaling elements and are selected and summed by summer to provide the combined I sample. Similarly, to combine the Q samples for each chip period, the samples at the X1 inputs of the multiplexers for scaling elements and are selected and summed by summer to provide the combined Q sample.","In the HDR CDMA system, the transmitted traffic data is partitioned into a number of data streams, and each data stream is covered by a particular Walsh code. As defined by the HDR CDMA system, each Walsh code corresponds to a respective Walsh symbol having a length of (up to) 16 chips. To channelize the data, each data bit is covered with the 16-chip Walsh symbol assigned to the channel on which the bit is transmitted. For each Walsh symbol period, up to 16 Walsh symbols for up to 16 data bits to be transmitted on up to 16 channels are generated and combined. The 16 Walsh symbols are orthogonal to one another and, in the absence of distortion, can be individually recovered at the receiver unit because the cross correlation between orthogonal sequences is (ideally) zero.",{"@attributes":{"id":"p-0128","num":"0127"},"figref":["FIG. 8A","FIG. 5"],"b":["524","230","522","820","850","870","870","234"]},"Symbol demodulator and combiner  can be designed to operate on a number of samples (e.g., four, eight, sixteen, and so on) per clock cycle. The number of samples that can be processed concurrently by symbol demodulator and combiner  is typically dependent on a number of factors such as, for example, the rate at which the samples can be provided to symbol demodulator and combiner , the width of the elements within symbol demodulator and combiner , and so on.",{"@attributes":{"id":"p-0130","num":"0129"},"figref":"FIG. 8B","b":["820","820","820"],"sub":["COR ","COR "]},"FHT element  can be designed to operate in one of a number of different configurations. For example, FHT element  can be configured to decover the input samples with a particular Walsh symbol of a particular length N. In this configuration, FHT element  receives a block of N Isamples and N Qsamples (i.e., the N-chip Iand Qvector pair) and performs an N-chip Walsh decovering on the received sample block with the particular Walsh symbol to generate a pair of decovered Iand Qsymbols.","Alternatively, FHT element  can be configured to decover the received samples with all N Walsh symbols. In this configuration, FHT element  performs the equivalent function of multiplying the N-by-N Hadamard matrix (corresponding to the N Walsh symbols, with each Walsh symbol having a length of N chips) by a vector comprising the N pairs of Iand Qsamples to generate N pairs of decovered Iand Qsymbols. Decovering with all N Walsh symbols is especially advantageous, for example, in the HDR CDMA system in which data may be transmitted over more than one channel to a particular terminal.","In an embodiment, to expedite the processing of the Iand Qsamples and to minimize the amount of required circuitry, FHT element  is configured to process the Iand Qsamples on alternate clock cycles. This allows a single FHT element  to provide decovered Iand Qsymbols to the subsequent processing unit on alternate clock cycles, with the Qsymbols delayed from the corresponding Isymbols by a single clock cycle. The subsequent processing unit can then be designed to operate on the decovered Iand Qsymbols as they are provided from the FHT element , without having to wait for all Isymbols in the block to be processed and then the Qsymbols to be processed. FHT element  can be configured to operate on alternating Iand Qsamples by properly managing the memory elements within FHT element .","FHT element  is a serial processing engine that receives samples serially, one sample per clock cycle, and after a particular processing delay provides a decovered symbol for each clock cycle. The decovered symbols for a particular block of samples are delayed by a particular number of clock cycles, with the delay being determined in part by the length of the Walsh symbol. For each block of N data samples, FHT element  serially provides N decovered symbols corresponding to the N Walsh symbols. The decovered symbols from FHT element  are the correlations between the input samples and the Walsh symbols.","A fast Hadamard transform element can perform decovering for Walsh symbols of length N=2using L bufferfly transform elements. In the specific embodiment shown in , to decover 16-chip Walsh symbols, FHT element  includes four bufferfly transform elements through coupled in series. Each bufferfly transform element  performs a subset of the required sum and difference operations. Each successive bufferfly transform element  further performs the cross coupling of the results from the preceding butterfly transform.","Within each bufferfly transform element , the input sample is provided to an input of a multiplexer , a subtracting input of a summer , and a first summing input of a summer . Multiplexer  also receives the output of summer  and alternately provides the output from summer or the input sample to a memory element . The output from memory element  is provided to a summing input of summer , a second summing input of summer , and one input of a multiplexer  that also receives the output from summer . Multiplexer  alternately provides the output from memory element  and the output from summer  to a latch . The output of latch  is provided to the input of the next bufferfly transform element . The output of the last bufferfly transform element comprises the decovered symbol.","A design and operation of a FHT element is described in further detail in U.S. Pat. No. 5,561,618, entitled \u201cMETHODS AND APPARATUS FOR PERFORMING A FAST HADAMARD TRANSFORM,\u201d issued Oct. 1, 1996, assigned to the assignee of the present invention and incorporated herein by reference.","In the embodiment shown in , FHT element  can be programmed to perform a fast Hadamard Transform (i.e., decovering) of variable length (e.g., 1, 2, 4, 8, or 16). The maximum FHT length supported by FHT element  is determined by the number of bufferfly transform elements  employed, and shorter length FHT can be performed by bypassing one or more bufferfly transform elements . Longer length FHT can also be performed by employing additional bufferfly transform elements .","In the embodiment shown in , the Iand Qsamples are provided to FHT element  on the same bus in alternating clock cycles. The time division multiplexing is achieved by a Walsh counter (not shown in ) that is cleared when the first correlated sample reaches the front of FHT element . The time division multiplexing allows for sharing of the hardware such that FHT element  can perform decovering of both Iand Qsamples. In another embodiment, the Iand Qsamples are provided in parallel to two FHT elements, with each FHT element configured to perform decovering of a respective block of Ior Qsamples.",{"@attributes":{"id":"p-0140","num":"0139"},"figref":"FIG. 8C","b":["850","820","850"],"sub":["DEC ","DEC ","I ","Q "],"maths":{"@attributes":{"id":"MATH-US-00001","num":"00001"},"math":{"@attributes":{"overflow":"scroll"},"mtable":{"mtr":{"mtd":[{"mrow":{"mo":"\u2003","mtable":{"mtr":[{"mtd":{"mrow":{"mrow":[{"msub":{"mi":["I","DEM"]},"mo":"+","mrow":{"mi":"j","mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}},"msub":{"mi":["Q","DEM"]}}},{"mrow":[{"mo":["(",")"],"mrow":{"msub":{"mi":["I","DEC"]},"mo":"+","mrow":{"mi":"j","mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}},"msub":{"mi":["Q","DEC"]}}}},{"mo":["(",")"],"mrow":{"msub":{"mi":["P","I"]},"mo":"-","mrow":{"mi":"j","mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}},"msub":{"mi":["P","Q"]}}}}],"mo":"\u2062"}],"mo":["=","\u2062"],"mi":{}}}},{"mtd":{"mrow":{"mo":["=","\u2062"],"mi":{},"mrow":{"mrow":{"mo":["(",")"],"mrow":{"mrow":[{"msub":[{"mi":["I","DEC"]},{"mi":["P","I"]}],"mo":"\u2062"},{"msub":[{"mi":["Q","DEC"]},{"mi":["P","Q"]}],"mo":"\u2062"}],"mo":"+"}},"mo":"+"}}}},{"mtd":{"mrow":{"mi":{},"mo":"\u2062","mrow":{"mi":"j","mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"mrow":[{"mrow":{"mo":"-","msub":{"mi":["I","DEC"]}},"mo":"\u2062","msub":{"mi":["P","Q"]}},{"msub":[{"mi":["Q","DEC"]},{"mi":["P","I"]}],"mo":"\u2062"}],"mo":"+"}}}}}},{"mtd":{"mrow":{"mo":["=","\u2062"],"mi":{},"mrow":{"mrow":{"mo":["[","]"],"mrow":{"mrow":[{"mi":"dot","mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"mi":["IQ","P"],"mo":","}}},{"mi":"j","mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}},"mrow":{"mi":"cross","mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"mi":["IQ","P"],"mo":","}}}}],"mo":"-"}},"mo":"."}}}}]}}},{"mrow":{"mi":"Eq","mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},"mrow":{"mo":["(",")"],"mn":"3"}}}]}}}}},"The demodulated Iand Qsymbols can be expressed as:\n\nI=(IP+QP,\u2003\u2003and Eq (4)\n\nQ=(\u2212IP+QP)\u2003\u2003Eq (5)\n","Within demodulator , the decovered Iand Qsymbols are provided (e.g., on alternating clock cycles) to latches and , respectively. The output from latch is further latched by a latch to time-align the Iand Qsymbols. The outputs from latches and comprise complex data symbols. Similarly, the Pand Ppilot symbols are latched by latches and , respectively. The outputs from latches and are provided to each of multiplexers and . Each multiplexer  selects either the PI or PQ pilot symbol, depending on whether a dot or cross product is being performed. The complex pilot symbols from multiplexers and are provided to multipliers and , respectively, which also receive the complex data symbols from latches and , respectively. Each multiplier  performs a multiply of one component (i.e., Ior Q) of the complex data symbol with one component (i.e., Por P) of the complex pilot symbol and provides the resultant product to a respective latch .","The output from latch is provided to an exclusive-OR gate  that also receives a control signal CROSS. The output from latch and the output from exclusive-OR gate  are provided to a summer  that sums the symbols and provides the summed outputs to symbol accumulator .","From equation (4), the demodulated Isymbol can be generated by multiplying the Idata symbol with the Ppilot symbol by multiplier , multiplying the Qdata symbol with the Ppilot symbol by multiplier , and combining the results from multipliers and by summer .","Similarly, from equation (5), the demodulated Qsymbol can be generated by multiplying the Idata symbol with the Ppilot symbol by multiplier , multiplying the Qdata symbol with the Ppilot symbol by multiplier , inverting the result from multiplier , and combining the result from multiplier and the inverted result from exclusive-OR gate  by summer . Thus, to generate the demodulated Qsymbol, multiplexers and swap the Pand Ppilot symbols provided to multipliers and , and exclusive-OR gate  inverts the result from multiplier ",{"@attributes":{"id":"p-0146","num":"0145"},"figref":"FIG. 8C","b":["870","850","872","234","874","876","874","878","878","878","878","872","872","234"],"sub":["DEM ","DEM ","PRE ","PRE ","PRE ","PRE ","DEM ","DEM ","PRO ","PRO "]},{"@attributes":{"id":"p-0147","num":"0146"},"figref":"FIG. 9","b":["526","230","526","526"]},"In the specific embodiment shown in , the correlated Iand Qsamples from correlator  are provided to a set of eight decover and accumulate elements through . Different number of decover and accumulate elements  can be used and are within the scope of the invention. Within each decover and accumulate element , the correlated Ior Qsamples are provided to an exclusive-OR gate  that also receives a Walsh symbol from a Walsh generator . Walsh generator  can be programmed to generate a particular Walsh symbol by loading the corresponding Walsh code in an associated latch . Thus, the eight decover and accumulate elements through can be programmed to perform decovering on a particular block of Iand Qsamples with eight different Walsh symbols.","On the forward link, one decover element can be used to process power control data. On the reverse link, eight decover elements can be used for demodulating data rate control (DRC) data and performing the FHT as a DFT (i.e., non-fast).","Within each decover and accumulate element , exclusive-OR gate  performs the decovering of the data samples with the Walsh symbol and provides the decovered samples to one input of a multiplexer . The other input of multiplexer  receives respective correlated samples (i.e., I, I, Q, or Q) from correlator . Depending on the particular task being performed, multiplexer  provides either the decovered samples from exclusive-OR gate  or the correlated samples to a summer . Summer  also receives a previously latched sample from an AND gate , sums the received samples, and provides the accumulated output to a first set of registers and (coupled in series) and a second set of registers and (also coupled in series). The latched output from latch and a control signal FLUSH\/are provided to the inputs of AND gate , which provides a value of zero to summer  if the control signal FLUSH\/is low and the latched output if the control signal FLUSH\/is high. The latched output from latch comprises the accumulated symbol, and is provided to one input of a multiplexer .","Multiplexer  receives the accumulated symbols from all eight decover and accumulate elements through and provides the received symbols sequentially to a latch  that further couples to data bus . The accumulated symbols can then be retrieved from latch  by controller .","As shown in , the correlated Iand Qsamples are also provided to a squarer  within decover and accumulate element . Squarer  squares the received samples and provides the squared samples to one input of a multiplexer , which also receives the decovered samples from exclusive-OR gate . Multiplexer  then provides either the squared samples or the decovered samples to multiplexer , depending on a control signal SQUARE. Squarer  supports the computation of a pilot carrier-to-interference energy estimate, which is used to estimate the quality of the signal link.","Accumulator  can be programmed to perform a number of tasks. For example, accumulator  can be programmed to simultaneously decover up to eight different channels. In the embodiment shown in , the correlated Iand Qsamples are provided to each decover and accumulate element  in a time division multiplexed manner (i.e., I, Q, Q, Qand so on). The two latches and in the first set of latches support time division multiplexed accumulation of the Iand Qsamples.","Accumulator  can also be programmed to assist in the search for strong instances of the received signal. For example, accumulator  can be configured to accumulate I, Q vectors for different offsets in each of eight accumulators for subsequent energy squaring. If the pilot reference is covered with Walsh code zero, decovering is not necessary at the receiver unit. In the embodiment shown, accumulator  can be programmed to concurrently process up to four different time offsets, with each time offset being processed by a respective pair of decover and accumulate elements .","In certain embodiments of the invention, micro-controller  is provided to receive tasks dispatched by controller  and to direct the operation of various elements of receiver unit  to execute the dispatched tasks. Each task can be defined to include a series of steps of operation or a number of other tasks. For example, a task may be dispatched to process a particular multipath at a particular time offset, to search for a strong signal instance within a particular time window, and so on. The search task may be achieved by directing correlator  and accumulator  to correlate a pilot signal over a particular time interval (e.g., 96 chips) at a specified PN offset. A task may also be dispatched to process all assigned multipaths, to search for strong signal instances at multiple time offsets, and so on. In an embodiment, micro-controller  instantiates an appropriate task state machine for each received task and maintains the task state machine for the duration of the task. Depending on the particular task being processed, micro-controller  may further instantiate one or more additional task state machines for a lower hierarchical task. Micro-controller  may be configured to inform controller  when a particular task is completed.","The processing to be performed for search tasks, data processing tasks, signaling processing tasks, and other tasks are described in further detail in the following patents and patent applications, all of which are assigned to the assignee of the present invention and incorporated herein by reference in their entirety:\n\n",{"@attributes":{"id":"p-0157","num":"0163"},"figref":"FIG. 10","b":["232","200","224","230","232","1012","1014","1016","1016","1014","1016","1016","1016","510"],"i":["a ","b","a ","c ","d"]},"Latch stores the state of micro-controller , and can be integrated within sequencing controller . Latch receives from data bus  a word descriptive of the task dispatched by controller . Latch receives from data bus  one or more parameter values to be applied for the dispatched task. Such parameter values may specify, for example, the time interval over which a search function is to be performed. During execution of the task, counter  counts down the designated time interval and provides to sequencing controller  a signal indicative of the end of the time interval.","In an embodiment, to simplify the design and reduce circuit complexity and costs, sequencing controller  is implemented using combinatorial logic. The logic implements the required task state machines used to sequence through the dispatched tasks. Each task state machine provides the appropriate control signals that direct the operation of various elements within receiver unit  such as, for example, buffer , correlator , symbol demodulator and combiner , accumulator , and buffer\/de-interleaver . The control signals sequence through various functions and control the buffers and processing elements in order to perform the dispatched task. For example, the control signals control various multiplexers in  (e.g., multiplexers , , and ) to select the proper inputs to the multiplexers to be provided to buffer  and buffer\/de-interleaver . Sequencing controller  further directs the operation of various address generators  and  to generate the required addresses.",{"@attributes":{"id":"p-0160","num":"0166"},"figref":"FIG. 11A","b":["230","224"]},"In the first clock cycle, the complex PN samples for eight chips are retrieved from buffer  and provided to latch  within correlator  (see ). In the second clock cycle, the data samples for the first two chips corresponding to time offsets of 0.0, 0.5, 1.0, and 1.5 are retrieved from buffer  and latched by latches , , , and , respectively. In the third clock cycles, the samples in latches  are re-latched by latches , and the data samples for the next two chips corresponding to time offsets of 2.0, 2.5, 3.0, and 3.5 are retrieved from buffer  and latched by latches , , , and , respectively. In the fourth clock cycle, the data samples for the first chip corresponding to time offsets of 0.0 and 0.5 are correlated by multipliers and , respectively, within correlator . In the fifth clock cycle, correlator  is idle. In the sixth clock cycle, the data samples for the second chip corresponding to time offsets of 1.0 and 1.5 are correlated by multipliers and , respectively. The processing performed for clock cycles seven through ten is similar to the processing performed for clock cycles three through six. The data processing further continues in similar manner until the next set of PN samples are needed and retrieved.",{"@attributes":{"id":"p-0162","num":"0168"},"figref":"FIG. 11B","b":["230","224"]},"As shown in , the PN samples and data samples are retrieved from buffer  in similar manner as for the time offset of zero. However, in the third clock cycle, the data processing is performed on the data samples corresponding to the time offset of 1.5. Specifically, the data samples for the time offsets of 1.5 and 2.0 are correlated by multipliers and , respectively. Similarly, in the fifth clock cycle, the data samples for the time offsets of 2.5 and 3.0 are correlated by multipliers and , respectively. The data processing then continues in similar manner.","The receiver unit described above can be advantageously used in a user terminal or a base station of a communications system. The signal processing for the forward and reverse links may be different and is typically dependent on the particular CDMA standard or system being implemented. Also, the requirements for the user terminal may be different from those for the base station. For example, the user terminal is typically required to process a single transmission from one base station or redundant transmissions from multiple base stations, whereas a base station is typically required to concurrently process multiple (and different) transmissions from multiple user terminals. Thus, the receiver unit is typically designed especially for the particular application for which it is used.","The elements described above for receiver unit  (e.g., address generator , input data interface , buffer , data processor , micro-controller , controller , and so on) can be implemented within one or more application specific integrated circuits (ASICs), digital signal processors, controllers, micro-controllers, microprocessors, other electronic units designed to perform the functions described herein, or a combination thereof. Buffer  and buffer\/de-interleaver  can be implemented within one or more random access memories (RAMs), dynamic RAMs (DRAMs), FLASH memories, or devices of other memory technologies. Also, buffer  and buffer\/de-interleaver  may also be implemented within the same integrated circuit used to implement other elements of receiver unit .","For clarity, many aspects and embodiments of the invention have been described specifically in the context of the forward link data transmission in the HDR CDMA system. However, the invention may also be used for the reverse link data transmission and for other communications systems (e.g., the IS-95 CDMA system, the W-CDMA system, and so on).","The foregoing description of the preferred embodiments is provided to enable any person skilled in the art to make or use the present invention. Various modifications to these embodiments will be readily apparent to those skilled in the art, and the generic principles defined herein may be applied to other embodiments without the use of the inventive faculty. Thus, the present invention is not intended to be limited to the embodiments shown herein but is to be accorded the widest scope consistent with the principles and novel features disclosed herein."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The features, nature, and advantages of the present invention will become more apparent from the detailed description set forth below when taken in conjunction with the drawings in which like reference characters identify correspondingly throughout and wherein:",{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIGS. 6A and 6B"},{"@attributes":{"id":"p-0032","num":"0031"},"figref":["FIG. 6C","FIGS. 2 and 5"]},{"@attributes":{"id":"p-0033","num":"0032"},"figref":["FIG. 7A","FIG. 5"]},{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 7B"},{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 7C"},{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIG. 7D"},{"@attributes":{"id":"p-0037","num":"0036"},"figref":["FIG. 8A","FIG. 5"]},{"@attributes":{"id":"p-0038","num":"0037"},"figref":"FIG. 8B"},{"@attributes":{"id":"p-0039","num":"0038"},"figref":"FIG. 8C"},{"@attributes":{"id":"p-0040","num":"0039"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0041","num":"0040"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0042","num":"0041"},"figref":"FIGS. 11A and 11B"}]},"DETDESC":[{},{}]}
