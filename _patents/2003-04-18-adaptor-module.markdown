---
title: Adaptor module
abstract: An adaptor module for use with a service manager adapted to functionally lie between a service application operable to provide a service and a network layer of a telecommunication network service entity, the adaptor module being operable to; receive from the service manager a service output message generated by the service application, map the service output message to a corresponding network input message accepted by the network layer, and pass the network input message to the service manager for transmission to the network layer.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07573899&OS=07573899&RS=07573899
owner: Hewlett-Packard Development Company, L.P.
number: 07573899
owner_city: Houston
owner_country: US
publication_date: 20030418
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS"],"p":["This invention relates to an adaptor module for a service manager for a telecommunication network service entity, a service manager and a method of generating an adaptor module.","With the development of telecommunication networks, it has become increasingly desirable for the network operators to offer additional services to network users in addition to the provision of voice and data calls. Such services include such functions as 0800 numbers, call forwarding, virtual private networks, and conference calls. Such services offer a greater range of functions to users of the network and consequently increase use and revenue for the operator.","Such services may be provided by appropriate service applications operating at appropriate network entities in a communication network, for example at a service control point (SCP) in an SS public switched telephone network (PSTN) or at a soft switch in a packet network, for example a VoIP network. Such entities are hereinafter referred to as \u201ctelecommunication network service entities\u201d. The service may be performed by a service application distributed across a number of entities.","In the following specification, the software required to provide network functions for a network entity will be referred to as the \u201cnetwork layer\u201d The network layer communicates with other network entities to provide call control functionality, call establishment, routing and so forth. The network layer is provided by a developer who publishes an application programming interface (API) for the network layer to enable third parties to write applications, particularly service applications, to sit on top of the network layer. Such an API is conventionally at a relatively low level, that is, it defines a large number of relatively simple input messages or instructions accepted by the network layer and will publish a large number of information elements, that is output messages relating to individual aspects of the call status and call and network parameters, in accordance with an appropriate protocol. A service application can be written using the published API and can be implemented in conjunction with a service manager which is functionally located between the network layer and service application. However, such a service application will then not be fully portable across different network layers and service managers provided by different developers. To encourage the development of service applications, it is desirable to these service applications be portable that is useable across a range of network entities and network layers from different suppliers.","To provide for portable service applications, it is known to provide a further API which sits on top of the network layer to provide a network layer independent API. An example is JAIN-CC (TM). An example of a stack for JAIN-CC is shown at . Referring to , the stack  comprises at its lowest level the network layer , provided with the vendor specific API, hereinafter referred to as a protocol API . To provide a higher level of abstraction, JAIN-CC  sits on top of the protocol API  and provides a defined generic call processing API. At its lower edge, JAIN-CC  is provided with an appropriate adaptor  to convert messages to and from the relatively high level call processing API to appropriate specific input or output messages for the protocol API . A service is provided by a service application, shown at . In the example of JAIN-CC, the relatively high level abstraction is performed by defining four \u201cobject\u201d types which make up a call and which are addressed by a service application  using Java message calls. The service application  detects network events by establishing listener \u201cobjects\u201d which trap Java events generated by the call processing API in response to underlying network events which have been notified to JAIN-CC by the network layer  via the protocol API .","While the JAIN-CC API is highly flexible, the level of abstraction provided by the API may be too high for some service applications. In particular, a service application may not be able to access service-specific information required from the network layer .","An aim of the present invention is to provide an appropriate level of abstraction for a service application which is independent of the network layer.","According to a first aspect of the invention, we provide an adaptor module for use with a service manager adapted to functionally lie between a service application operable to provide a service and a network layer of a telecommunication network service entity, the adaptor module being operable to receive from the service manager a service output message generated by the service application, map the service output message to a corresponding network input message accepted by the network layer, and pass the network input message to the service manager for transmission to the network layer.","The content of the message comprises one or more information elements, where an information element is a self contained piece of information. The step of mapping one message to another may encompass the steps of selecting one or more information elements from one or more messages and generating a further message as appropriate, and it is intended that the terms \u201cmap\u201d and \u201cmapping\u201d should be read in this manner.","The network layer may be operable to receive a plurality of network input messages and the adaptor module may be operable to map the service output message only to a corresponding one of a defined subset of the plurality of network input messages.","The adaptor module may be operable to receive from the service manager a network output message generated by the network layer, map the network output message to a corresponding service input message accepted by the service application, and pass the service input message to the service manager for transmission to the service application.","The adaptor module may be operable to generate a plurality of network output messages and wherein the adaptor module is operable to map the network output message to a corresponding service input message only if the network output message comprises one of a defined subset of the plurality of network output messages.","The adaptor module may be operable to pass the network input message or service input message to the service manager in a format accepted by the network layer or service application respectively.","The adaptor module may be operable to receive a plurality of service output messages or network output messages and combine the plurality of output messages into a single network input message or service input message respectively.","According to a second aspect of the invention, we provide a service manager and comprising an adaptor module according to the first aspect of the invention wherein the service manager is adapted to functionally lie between a service application operable to provide a service and a network layer of a telecommunication network service entity, the service manager being operable to receive a service output message generated by the service application and pass the service output message to the adaptor module, receive a corresponding network input message from the adaptor module and pass the corresponding network input message to the network layer.","The service manager may be operable to receive a network output message generated by the network layer and pass the network output message to the adaptor module, receive a corresponding service input message from the adaptor module and pass the corresponding service input message to the service application.","The service manager may comprise a plurality of adaptor modules, where the service manager is to interact with a plurality of service applications.","According to a third aspect of the invention, we provide a method of operating an adaptor module according to the first aspect of the invention comprising the steps of taking as an input a service application finite state machine and service application message set of the service application, taking as an input a network layer finite state machine and a network layer message set of the network layer, comparing the service application finite state machine and the network layer finite state machine to identify states of the network layer finite state machine corresponding to states of the service application finite state machine, and to identify required transitions in the network layer finite state machine corresponding to transitions in the service application finite state machine, identifying the messages of the service application message set corresponding to the transitions of the service application state message, and defining a subset of the network layer message set wherein the subset of the network layer message set correspond to the required transitions in the network layer finite state machine, and comparing the service application message set and the subset of the network layer message set to identify corresponding messages of the service application message set the subset the network layer messages.","Referring now to , a simplified telecommunication network is generally illustrated at , comprising a PSTN  and a packet network . In conventional manner, in accordance with the SS protocol, the PSTN network comprises service switching points (\u2018SSP\u2019s) , service transfer points (\u2018STP\u2019s) , a service control point (\u2018SCP\u2019)  and an intelligent peripheral (\u2018IP\u2019) . The SSP's , STP , SCP  and IP  are all connected by SS signalling links . The SSP's  and user telephones  are connected by appropriate voice links . The packet network  comprises a soft switch  which provides a call control function, a plurality of routers , a plurality of media gateways  and an application server . The soft switch  is connected to the routers  and media gateways  through appropriate signalling packet links , and the routers , media gateways , application server , user telephones  and user computers  are interconnected by voice packet links . To connect the networks , , the PSTN network  is provided with an SS gateway  which is connected by an appropriate signalling link  to the soft switch , for example using the SIGTRAN protocol, whilst an SSP  is connected to a media gateway  via an appropriate TDM voice link .","In the telecommunication network , it is known to provide services as may be desired at any appropriate entity. For example services may be provided at the SCP  or IP  of the PSTN network  and at the soft switch  or application server  of the packet network . It is also possible to provide service applications elsewhere on the network, for example at an SSP  if appropriate. Further, to provide a service, the service application need not be provided at one entity but may be provided distributed across a number of entities, for example on the SCP  and IP  and implemented by signalling between the two entities through the appropriate signalling links .","In the present specification the term \u201cnetwork entity\u201d is intended to be broadly understood to refer to any appropriate entity whether physically or logically distributed or otherwise where call control functionally is provided, and \u201cnetwork layer\u201d to the control software running on that entity.","Referring now to , a stack  is shown provided with a network layer  as discussed hereinbefore provided with a protocol API  which is operable to receive network input messages comprising instructions to the network layer  and pass network output messages comprising information relating to the call status and network layer and call parameters. Located above the protocol API  is a service manager . The service manager  is provided with a plurality of adaptor modules . Running on top of the stack  is a plurality of service applications , which similarly are each operable to generate service application output messages comprising instructions to the network layer  and receive service application input messages comprising call status information. The content of the messages comprises information elements, where an information element is a self contained piece of information. Each message may comprise a plurality of information elements. The service application message set comprising all possible information elements, service application input messages and service application output messages , and the network layer message set comprising all possible information elements, network input messages and all possible network layer output messages will not have a one-to-one correspondence, nor need message sets be necessarily in a common format accepted by both the service application  and the network layer .","The service manager  is operable to provide ail intermediate layer which functionally lies between the network layer  and one or more service applications . In particular, the service manager is operable to route messages to and from the correct service applications  and the network layer  and ensure that the service applications  can implement only well defined and bounded instructions or features provided by the network layer  to ensure the reliability and stability of the stack . The service manager  also provides a resource management service, where several service applications are running in the stack . Other function may be provided as desired, for example database and information logging services.","The service manager  in this embodiment is generic between network layers and services, that is may be used in a selected one of a number of different combinations of service applications  and network layers . To enable the service manager  to be used with a desired combination of a service application  and a network layer , the service manager  is provided with an adaptor module  which is intended for use with that combination of service application  and network layer . As will be described in more detail below, in the present example an adaptor module  is produced by comparing the finite state machine and message set of the service application  with the finite state machine and message set of the network layer .","When a service application  is run on the stack , the service application  identifies the required adaptor module  as part of an initial \u201chandshaking\u201d procedure. The service manager  will then check the availability of the adaptor module  and load it. Where a plurality of service applications  are running on the stack , a different adaptor module  may be provided for each service application  or a single adaptor  may be used-by more than one service application  if the service applications  have the same requirements of the network layer . It might also be envisaged that an adaptor module  is operable to be usable with more than one different service application required.","On receipt of a service application output message , the service manager  will pass the service application output message to the appropriate adaptor module  as shown by arrow . The adaptor module  will process the service application output message . In particular, the adaptor module  will identify the corresponding network layer input message and may perform other steps such as providing any information included in the service application output message in the right format in the network layer input message . The adaptor module  will then pass the message to the service manager  as shown by arrow and the service manager  will pass the network layer input message to the protocol API . Similarly, when a network layer output message is received by the service manager , it will pass the message to the adaptor module  which will generate the corresponding service application input message and pass it to the service manager  to be published to the service application . The adaptor module  may also be operable at the information element level, that is the adaptor module  is able to select appropriate information elements from one or more output messages and copy the or each information element into an appropriate input message in an appropriate format.","Each adaptor module  is only operable to generate a network layer input message from a defined subset of all possible network layer input messages, and only pass on a network layer output message which falls within a defined subset of all possible network layer output messages. The only information elements passed to and from the service application  are those required by the service application  to offer the service and so may be optimised for that particular service. The adaptor module  likewise need only accept and generate a subset of the network layer messages, i.e. only those required for to pass the necessary information elements for operation of the corresponding service application . The service application  thus interacts with what will appear to the service application  to be a specific, optimised, API designed for that service, providing an appropriate level of abstraction from the protocol API  for that service application . Because the mapping between the message sets of the service application  and the network layer  is performed at the adaptor module , the service application  is minimally dependent on the network layer , and is hence easily portable to other stacks with other network layers by the provision of an appropriate adaptor module .","The present invention thus provides a generic service manager, and allows the operation of a plurality of service applications  with message sets which may be mutually incompatible as well as incompatible with the message set of the network layer  to be run on the same stack  by the provision of an appropriate adaptor module  for each service application . Because the adaptor module  in only mapping a defined subset of the network layer output messages to corresponding service application input messages, performs in effect a filtering function, no extraneous or unnecessary information is passed to the service application .","A method embodying the present invention of providing adaptor module  embodying the present invention will now be described by way of example with reference to ,  and .","In broad terms, it is required that the adaptor module  is operable to map service application output messages to corresponding network layer input messages and similarly map network layer output messages to corresponding software application input messages. The network layer input messages and network layer output messages corresponding to messages in the service application message set will be only a subset of all possible messages in the network layer message set, and so to optimise the adaptor module  it is desirable that it is only operable to process network layer messages within that subset.","To identify the subset of the network layer message set corresponding to the software application message set, and to produce a mapping between corresponding messages, the first step as shown at  in  is to take as inputs the finite state machines and message sets of the network layer  and service application . At step , the finite state machines are mapped to identify which states of the network layer finite state machine correspond to states of the service application finite state machine.","In operation, it is of course desirable that the network layer  and service application  be in corresponding states of their respective state machine. Thus, where the service application  undergoes a transition between states, it is desirable for a message to be passed to the network layer  to cause a corresponding transition. Similarly, when the network layer  undergoes a transition, for example as a result of a network event, and publishes an appropriate message, the service application  must undergo a similar transition in response to that message. At step  therefore, those transitions in the service application service application which are required and are initiated by the state machine are identified and the corresponding service application output messages identified. At step , the equivalent transitions in the network layer state machine and the equivalent network layer input messages are identified. Similarly, at step  those transitions in the network layer state machine which are initiated by the network layers are identified and the corresponding network layer output messages are identified, and at step  the corresponding transitions in the service application state machine service application input messages are identified. At step , the mapping between network layer output messages and service application input messages, and service application output messages and network layer input messages is established. These steps may of course be combined or performed in any desired order as appropriate or convenient.","It will be apparent that each input message must correspond to at least one output message, but that some aggregation of messages may occur. For example, where the network layer undergoes a series of transitions and generates a plurality of network layer output messages which correspond to a single transition and single service application input message in the service application state machine, the adaptor module  may aggregate all the network layer output messages into a single service application input message.","The method will now be described with reference to  to illustrate the example of mapping a finite state machine for a virtual private network, shown in  to a finite call machine for a network layer shown in . In each case, the finite state machine is simplified for illustrative purposes. Input messages associated with a state machine transition have the prefix \u201cIn:\u201d and output messages the prefix \u201cout:\u201d","Referring now to , a simplified finite state machine (\u201cFSM\u201d) for a network layer  is generally shown at . The finite state machine  has two kinds of states, point in call (\u201cPIC\u201d) states where an action is performed by the network layer, and detection point (\u201cDP\u201d) states where network and call information is transmitted and passed by the network layer  to the service manager  in the form of network layer output messages. Further, a trigger may be set at appropriate states in the FSM  so that the network  waits for a response before transiting to the next state. The FSM in  has been simplified for illustrative purposes, and in practise the FSM for a network layer may be more complex.","In , the network layer is initially in a null state  where no call is being handled. On receipt of a call attempt, for example digits being dialled, at detection point  a network layer output message is generated indicating that an attempt is being made to originate the call and including appropriate information. At PIC  the call is authorised. Where an appropriate trigger is set in this state, the network layer  then makes an external authorisation request, for example to a service application . In response to an input message the network layer may either transit to an \u201cException\u201d state  in which the network layer is reset and an error message transmitted before returning the null state  if the call is not authorised or, if the call attempt is authorised, then at detection point  an output message is generated indicating that the attempt has been authorised and at step  the network layer collects further information, for example additional digits as required. The network layer transitions to detection point  where an output message indicating information has been collected is generated and at PIC  the collected information, if any, is analysed. At detection point , an output message is generated indicating that the collected information has been analysed and including other appropriate information and at PIC  a route is selected to connect to the desired number. In the event of a failure, the network layer passes to detection point  where an output message is generated indicating a route failure and then passes to PIC . When a route is selected, the network layer moves to PIC  where the call is set up. If a message is received from the network at the network layer  indicating that the called party is busy, the network layer  undergoes a transition to detection point  where it generates an output message that the called party is busy and then passes to PIC . If the called party is not busy, at detection point  an output message is generated indicating that the called number is being alerted and the network layer then passes to PIC  where the network layer  waits for an answer. If there is no answer, for example within a timed period, then at detection point  an output message is generated indicating that no answer has been received, and the network layer passes to PIC . If in PIC  or  the selected route cannot be established, then the network layer returns to state  to select a further route.","When the call is answered, at DP  an output message is generated indicating that the call has been answered and the network layer moves to the \u201cactive\u201d PIC  where the call is established an-d answered. When the call is disconnected by a calling party, then on receipt of an input message the network layer transitions to detection point  which generates a message indicating that the call is being disconnected, and then returns to the null PIC . If the called number attempts to disconnect, in response to a corresponding input message the network layer moves from PIC  to detection point  where an output message indicating that the call has been suspended is generated, and then moves to PIC  where the call is suspended. The call may then be reconnected and, in response to an input message, the network layer  moves to detection point  where an output message is generated indicating that the call has been reconnected and returns to the active PIC . Alternatively, as a result of a time out, the network layer may move to detection point  and generate an output message that the call has been disconnected as before.","Referring now to , a finite state machine for a service application providing a virtual private network (\u201cVPN\u201d) as generally shown at . In state , the service application is in an idle state, where no call is being handled. In response to an input message, that a call is being requested and including the dialled number and a caller identification, the service application is moved to the initiating state . In this state the service application can reject the request in which case an output message comprising a disconnect request is generated and the application generates transitions to the disconnected states . Alternatively, the service application can accept the request and, in the case of a virtual private network, returns a call confirm message including the actual call number corresponding to the virtual private network number dialled and included in the call request message. The service application  then moves to the alerting state  where it is waiting for the call to be connected. In response to a connect notification message confirming that the call has been connected, the service application  moves to the connected state . In response to a input message comprising a call disconnected notification or by generating an output message comprising a disconnection request the service application undergoes a transition to the disconnected state . In the alerting state , if an input message comprising a disconnection notification is received the service application  moves to the disconnected state , or if a input message is received that the call has been rejected, the service application  moves to the busy state  and will then transition to the disconnected state . In the disconnected state  the service application may perform administrative functions such as logging the call destination and time, recording, charging information etc.",{"@attributes":{"id":"p-0047","num":"0046"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 1"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"mapping states of VPN FSM and network layer FSM"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"VPN FSM","Network Layer FSM"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Idle 91","Null 61"]},{"entry":[{},"Initiating 92","DP \u201cOut: origination attempt\u201d 62"]},{"entry":[{},"Alerting 94","Select Route 70"]},{"entry":[{},"Busy 96","DP \u201cOut: route selection failure\u201d 71"]},{"entry":[{},"Connected 95","DP \u201cOut: answer\u201d 76"]},{"entry":[{},"Disconnected 93","DP \u201cOut: disconnect\u201d 79\u2003Exception 64"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}]}}},"The mapping of the states of the VPN FSM  to equivalent states of the network layer FSM  is shown in Table 1. It is then possible to match the message sets to identify service application output messages which correspond to transitions in the VPN FSM  and identify the corresponding network layer input messages to cause corresponding transitions in the network layer FSM . Similarly, where a transition occurs in the network layer FSM  and there is a corresponding transition which should occur in the VPN FSM , it is possible to match the network layer output message to the corresponding service application input message. The table mapping the VPN message set to the subset of the network layer message set is shown at Table 2 below. Table 2 provides the basis for the adaptor module  so that output messages from the service application  are matched to the input messages accepted by the network layer  and vice versa.",{"@attributes":{"id":"p-0049","num":"0048"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 2"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"mapping message set of VPN FSM and network layer FSM."}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"105pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"VPN Message Set","Network Layer Message Set"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"In: call request","Out: origination attempt"]},{"entry":[{},"Out: disconnection request 1","In: authorisation denied"]},{"entry":[{},"Out: call confirm","In: call authorised"]},{"entry":[{},"In: connect notification","Out: answered"]},{"entry":[{},"In: disconnect notification","Out: no answer,"]},{"entry":[{},{},"Out: route selection failure"]},{"entry":[{},"In: call reject","Out: called party busy"]},{"entry":[{},"In: call disconnect","Out: disconnect"]},{"entry":[{},"Out: disconnect request 2","In: calling party disconnect,"]},{"entry":[{},{},"In: calling number disconnect."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}]}}},"It will be apparent that about half of the network layer message set and a subset of the message content or information elements is not relevant to the service application as is apparent from considering the mapping of the finite state machines, and so the Table 2 only contains a subset of the message set of the network layer finite state machine. It will also be apparent that although each state in Table 1 and each message in Table 2 is matched with at least one other state or message, there is not necessarily a one-to-one mapping between states and between messages. The states of the network layer FSM state machine  which are of no relevance to the VPN FSM , or multiple states in the network layer FSM which are equivalent to a simple state in the VPN FSM , are masked from the service application. For example, the transition in the VPN FSM  from alerting state  to connected state  requires the network layer FSM  to pass through a number of intermediate states between the equivalent states , . These intermediate states are not apparent to the service application . Those messages in the network layer FSM message set which are of no relevance to the service application  are similarly masked.","Although in this example the service described is a virtual private network, it will be apparent that the invention may be used with a service application implementing any desired service. It is envisaged in the present example that the adaptor module comprises a library of C routines called by the service manager in accordance with the received messages from the service application or network layer, but the adaptor module may be implemented in any appropriate manner as desired. The adaptor module may be optimised for a particular service application, or may recognise a generic service message set if desired. The service manager is thus generic across all network layers and service applications, and may be used with any combination of service application network layer providing an appropriate adaptor module is provided.","In the present specification \u201ccomprises\u201d means \u201cincludes or consists of\u201d and \u201ccomprising\u201d means \u201cincluding or consisting of\u201d.","The features disclosed in the foregoing descriptions or the following claims, or the accompanying drawings, expressed in their specific forms or in terms of a means for performing the disclosed function, or a method or process for attaining the disclosed result, as appropriate, may, separately, or in any combination of such features, be utilised for realising the invention in diverse forms thereof."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["An embodiment of the present invention will now be described by way of example only with reference to the accompanying drawings wherein;",{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 6"}]},"DETDESC":[{},{}]}
