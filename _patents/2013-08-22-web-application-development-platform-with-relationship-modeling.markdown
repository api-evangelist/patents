---
title: Web application development platform with relationship modeling
abstract: A system and method for dynamically creating web applications from data is described. Simple data is transformed into a declarative application data model that is then parsed by a server and compiled into a functional web application. Application functionality is partly determined by rules applied to web application objects in response to user actions. These rules are triggered by various cues, including user actions and relationships among objects in the web applications. A web application is considered an n-dimensional problem space, and relationships among application objects can be modeled using set theory. The status of a particular relationship among objects and user actions can trigger specific application behavior. Additionally application behavior can be triggered in other ways, like conditions in arbitrary scripts or combinations of multiple triggers combined using logical connectives.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09513885&OS=09513885&RS=09513885
owner: 
number: 09513885
owner_city: 
owner_country: 
publication_date: 20130822
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION","DEFINITIONS"],"p":["This patent application relates to computer-implemented software and networked systems, according to one embodiment, and more specifically to a system and method for web application development with relationship modeling.","With the maturation of web technology, more functionality is being delivered to users via web applications that run inside browsers. A web application can be any piece of functionality that executes in a browser. Applications that once ran as locally-installed software on a desktop computer are now often accessed remotely from the cloud (remotely hosted internet services) via a web browser. Applications like Gmail and Google Docs are perfect examples. Instead of using an installed email client, people use a web browser to access their email. Instead of locally-installed spreadsheet or word processing software, people use a web browser to access Google Docs to create spreadsheets and word documents online.","The web applications, sometimes called Rich Internet Applications (RIA), often leverage web technologies like JavaScript, JavaScript libraries (like jQuery), Ajax, HTML5, CSS3, and others to provide a graphically-rich, responsive interface for a user via a web browser. Web applications can be simple as well and be composed of more standard HTML, CSS, and JavaScript.","As more and more software is delivered via the web, the need for tools to enable easy creation of web applications has grown. One tool developed to meet this need is the Google Web Toolkit (GWT). The GWT is a Java to JavaScript compilation tool that leverages professional Java development and debugging tools to facilitate development of web applications. It also helps alleviate cross-browser compatibility issues and performs optimizations on the compiled JavaScript. Basically, GWT is a tool for more easily writing JavaScript applications using custom code. GWT requires developers to write Java code that is compiled into Javascript GWT is essentially a Java to JavaScript compiler and is broadly applicable for creating many kinds of web applications. GWT is not a declarative application modeling language and has no declarative mechanism for managing rules and relationships among objects and dynamically updating the user interface in response to user actions and selections. GWT also does not transform basic xml data into application data that can be parsed on a server and delivered to users as a fully-functional web application. In other words, GWT is a tool that helps facilitate the creation of JavaScript applications, but GWT does not offer the novel elements of the embodiments described and claimed herein.","Many HTML and CSS frameworks have also been constructed to help ease the burden of creating web sites and web applications. These frameworks are building blocks for web development and facilitate building an invention like the one described here. However, like GWT, these frameworks are not specifically designed to rapidly build and update the type of rules-based applications described herein. Specifically the frameworks do not provide a declarative application modeling language with support for roles that dynamically manage the web application interface based on a user's selections.","Additionally, a particular class of applications that depend on managing complex product relationships and intricate internal logic, often called configurators, has conventionally been delivered as client\/server applications where the logic is executed on the server. The client\/server interaction introduces latency and processing delays because the client has to send a request to the server for every action taken on the client and then wait for the response from the server.","The various embodiments of this invention provide an application development platform for creating, deploying, and updating web applications. The embodiments take advantage of advances in client-side\/browser functionality to deliver applications that run primarily on the client, which improves responsiveness and performance.","The platform of an example embodiment uses a declarative application language to describe web application data and functionality. Using a declarative language simplifies application creation and maintenance.","Functionality that falls outside the bounds of the declarative application language can be provided via custom code. The example embodiment offers hooks for external code to be triggered based on events in the web application, and also provides an Application Programming Interface (API) that external code can use to interact with the web application.","The declarative application data is compiled into ready-to-serve web application content that can be cached and delivered to user browsers reliably and scalably. Using pre-compiled, cached content minimizes server load by only compiling the web application once, when the application is deployed to the server, and not compiling the application every time it is requested by a user. Pre-compiling the content results in minimal server processing to service requests and also enables use of caches and global content delivery networks.","Simple, base data is transformed into declarative application data before being deployed to the platform server. The intermediate transformation process provides several of advantages:\n\n","Some of the options for data and transformation reuse include:\n\n","Datasets and transformations can be mixed and matched in many ways to maximize reuse of existing assets. Datasets and transformations can also be dynamically\/automatically created and invoked to generate web applications without any manual intervention.","Embedding web applications into client web pages is primarily performed by the platform server, which makes embedding very simple for a client. A client simply inserts a token into their host page and provides the URL of their host page to the platform. The platform server manages retrieving the host page, embedding the web application into the host page, and delivering the resulting complete web page.","The web application can also be integrated with various third party systems, like e-commerce platforms, via custom scripts that are included in the embedding process.","To enable web applications wish complex product compatibilities and intricate business logic, the described example embodiment supports several mechanisms for specifying and enforcing relationships among application objects, including: position-based relationships, script-based relationships, and Boolean combinations of relationships (grouping relationships via logical operators like \u201cand\u201d, \u201cor\u201d, \u201cnot\u201d, etc.). These relationships are structured to trigger appropriate actions (application behavior) in response to user selections, gestures, or behavior.","An action in combination with an action trigger can be considered a rule. Rules can be specified to perform certain actions under certain conditions. These actions can include: showing and hiding application objects, selecting and deselecting application, objects, showing message dialogs, adjusting the application UI (e.g. changing a product view or moving to a new selection area), etc.","A key feature of the described example embodiment is the maintenance of application state in a state identifier (which can easily be expressed in a URL\u2014a \u201cstateful URL\u201d). Web applications are not dependent on sequential application of operations in order to arrive at the correct state. A web application can accurately parse and represent its current state from the data contained in a single URL. Using stateful URLs of course does not prevent the system from using other state representation techniques, State identifiers enable state caching, transmission of state information among web applications, and social\/sharing functionality","In the following description, for purposes of explanation, numerous specific details are set forth in order to provide a thorough understanding of the various embodiments. It will be evident, however, to one of ordinary skill in the art that the various embodiments may be practiced without these specific details.","In the various embodiments described herein, a system and method for web application development with relationship modeling are disclosed. The various embodiments provide a system and method for dynamically creating web applications from data. The described example embodiment capitalizes on the improved processing power of client computers and improved web technologies to provide a solution that is easier to build and update and is more flexible and more responsive than previous approaches. Simple data is transformed into a declarative application language that is then parsed by a server and compiled into a functional web application. Data from any source can be aggregated into a simple structured dataset. This simple structured dataset is then processed to transform it into a declarative application format. This application data is then compiled into the HTML, JavaScript, and web components needed to deliver a fully-functional web application to a requesting browser. The application is responsive to user actions and dynamically updates its interface as a user interacts with the application. The user interface updates are based on: user actions, directives contained in the declarative application language, and relationships among objects specified via the modeling systems described.","Application Client (also Client)\u2014a person, group or entity that uses the described web application platform to provide web applications for their users. Not to be confused with \u201cclient\u201d when used in the context of client\/server computing architecture.","Application Data\u2014Data that conforms to the schema defined by the application data language. Application data is data that is ready to be compiled into a web application by a server.","Application Developer (also Developer)\u2014a person, group or entity that uses the described web application development platform to create web applications on behalf of an Application Client.","Application Manager (also Manager)\u2014a person, group or entity that uses the described web application development platform to manage and maintain web applications on behalf of an Application Client.","Application Web Page\u2014the complete HTML page that includes the Host HTML Page as well as the embedded web application and all resources required by the web application.","Base Data\u2014simple, structured data that is transformed into Application Data.","Host HTML Page\u2014the HTML into which a web application will be embedded.","Resources\u2014Any files, code, data, information used by the platform to enable its functioning.","Web Application\u2014A set of web resources that, when combined with a Host HTML Page, provide the desired web functionality.","Description of an Example Embodiment of the Declarative Application Language","A declarative web application language simplifies application development by allowing web application developers to create applications by defining what the applications do, not how they do it. Similar to creating an HTML web page, the declarative web application language lets developers build applications by specifying the data and behavior of a web application using declarative tags. A completely custom web application can be created without any custom coding at all.","A declarative application file could be as simple as:",{"@attributes":{"id":"p-0049","num":"0053"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<application>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<app_id>"]},{"entry":[{},"<client_id>clientA<\/client_id>"]},{"entry":[{},"<model_id>modelA<\/client_id>"]},{"entry":[{},"<\/app_id>"]},{"entry":[{},"<flow><question_pool \/><\/flow>"]},{"entry":[{},"<ui>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<basic_ui>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/ui>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/application>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"This application simply serves as a shell into which other applications can be nested. What is important is that there is no code involved, just a simple, declarative model of the application. The same declarative approach can be used to create far more elaborate applications. An example of a more complex application is shown below in Appendix A.","Customization","The platform of an example embodiment also offers many hooks triggered by events in the application so that any functionality not provided by the existing language tag set can be created with custom code. The platform also provides a JavaScript API accessible to external JavaScript.","Pre-Compilation","When application data files are sent to the platform server, the server parses the declarative data and compiles it into serialised, optimized web applications that are ready to be embedded into client web pages and served to user browsers. Because the user interaction with the application is all managed on the browser, the server only needs to provide the browser with static web application content. The platform server does not need to manage state, sessions, cookies, or deliver any dynamic application content.","Using static, pre-compiled resources allows the platform to run with minimal server load. Additionally utilizing static, pre-compiled resources allows the platform to leverage proxy caches and content delivery networks for high scalability and resiliency.","Data Transformations","Overview","Base data is transformed into declarative application data before being uploaded or deployed to the platform server. Using a data transformation to transform simple, base data into the declarative application language offers ease-of-use and flexibility. The base data can be formatted to a particular client's needs and nomenclature. It can contain only the data that a client wants to manage. All of the other declarative application tags\/elements can be hidden inside the data transformation. The client, can be shielded from any complicated, confusing, or unneeded information. Providing a client-specific data format offers ease-of-use for the client by eliminating any unnecessary information from, the base data and by tailoring the names of the data elements to exactly what the client is comfortable with. Offering the client a simple data format containing only client-relevant information means clients can more quickly and easily manage their data and business logic. It also means that business managers and domain experts can update their own web applications as business logic changes, and the need for IT middlemen is eliminated, resulting in huge cost savings.","The base data can be assembled from any source, or even multiple sources. It can be pulled from spreadsheets, databases, flat files, entered manually, etc. The base data is a collection of data that is in a format that a data transformation can correctly process. Base datasets have schema that define their structure. A schema can be unique for a particular dataset, or one schema can be more general and applicable to many datasets.",{"@attributes":{"id":"p-0057","num":"0061"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0058","num":"0062"},"figref":["FIG. 2","FIG. 1"]},"In one embodiment of the invention, the base data is described in Extensible Markup Language (XML) and linked with XML Schema Definition (XSD) files to provide validation tools to application managers and developers. Validation tools make it easier for managers and developers to manage data. The base data is then transformed into application data using Extensible Stylesheet Language (XSL) tools.","This base data is transformed into the application data language understood by the platform server. Converting base data into a fully-functional web application ready for delivery to browsers is called \u201cdeploying\u201d. The act of deploying is automated and can be triggered by a client or web application developer with a single click of a button on a web page or a single call to the platform web service. Deploying new web applications can be automated or scheduled as well.",{"@attributes":{"id":"p-0061","num":"0065"},"figref":"FIG. 3"},"Transformation Options","The mechanism of transforming base data into application data enables data and transformations to be mixed and matched in various ways to provide for reuse and repurposing of existing data and transformations.","Single Dataset\/Multiple Transformations","For example, a single base dataset can be transformed in multiple ways to create multiple, different web applications. A use case might be a product manufacturer who wants to use the same data to create a web application for internal employees and a web application for external resellers. The same data can be used with two different transformations to create the two separate applications. Being able to reuse the single dataset means an application manager only needs to manage data in a single place, which is more efficient and eliminates data synchronization problems.","A single dataset can also be used with multiple transformations to create multiple applications based on the same data to use for A\/B testing. Clients can then test multiple versions of an application to determine which functionality is more effective.","A dataset can also be channeled through multiple separate transformations (a transformation pipeline) to arrive at the final application data file. In other words base data can be transformed by transform ; the output of transform  is transformed by transform ; the output of transform  is transformed by transform ; the output of transform  is the application data. Any number of transformations can occur between the base data and the resultant application data.",{"@attributes":{"id":"p-0068","num":"0072"},"figref":"FIG. 4"},"Base Dataset  is transformed, via Transform  to yield Application Data 1. Application Data 1 is then, deployed and embedded to produce Web Application 1.","Base Dataset  is transformed via Transform  to yield Application Data 2. Application Data 2 is then deployed and embedded to produce Web Application 2.","Multiple Datasets\/Single Transformation","Another example is using multiple datasets with a single transformation. In this way, multiple web applications can be created that exhibit common functionality but use different underlying data. A use case might be a retailer who wants to offer a product line with many products, for example a furniture maker who sells couches and chairs. The retailer would like end users to be able to view separate web applications for each of the products, couches and chairs. Since the application functionality is common to both applications, the retailer would like to re-use the same functionality for both applications (i.e. both applications show images of the product and allow users to select fabrics and trim pillows, etc.). To do so, the retailer would like to create the two datasets, one for each product, and have a single transformation generate the two different applications. The single transformation would turn the base data for couches and the base data for chairs into two separate web applications that behave similarly but present the end user with different options that reflect the different underlying datasets.",{"@attributes":{"id":"p-0073","num":"0077"},"figref":"FIG. 5"},"Base Dataset  is transformed via Transform  to yield Application Data 1, Application Data 1 is then deployed and embedded to produce Web Application 1.","Base Dataset  is transformed via Transform  to yield Application Data 2. Application Data 2 is then deployed and embedded to produce Web Application 2.","Automatic Applications","Creation of a web application using the described platform is done by uploading declarative application data to the platform server. How this application data is generated is irrelevant to the server. The application data can be generated manually, via a data transformation pipeline, or generated via a scheduled automated process that dynamically creates application data files without any manual intervention.","Simple Embedding\/Integration","The technique utilized by the described web application platform enables simple integration with client web sites and provides flexibility in allowing web applications to be repurposed for use in multiple web pages, even with different behavior defined by each web page. Conventionally, embedding external web applications into a web page (or \u201chost page\u201d, the page into which the web application gets embedded) requires that JavaScript or HTML tags be added directly to the web page. This approach introduces the potential for error in adding the required elements and also introduces a maintenance burden if the external application provider needs to update code or tags. Often the external application provider requests that all users of their system make manual updates to the host pages using their applications, which is obviously a hassle for both the application provider and its users.","Rather than require clients to insert custom JavaScript or tags into their host pages, this example embodiment moves the onus of integration almost completely to the platform, which simplifies client integration and removes the maintenance burden from clients. All clients have to do to embed a web application into a web page is add a simple HTML tag to their host page at the location where the web application should be embedded.","For example, in the sample host html page below the \u201c<!\u2014app.embed\u2014>\u201d tag tells the platform server where to embed the web application:",{"@attributes":{"id":"p-0081","num":"0085"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<html>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<body>"]},{"entry":[{},"Embed application here:"]},{"entry":[{},"<!-- app.embed -->"]},{"entry":[{},"<\/body>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/html>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"A key to this process is delivering the web application directly from the web application platform and not from, the client web site. As shown in , to deliver a complete web application a Browser requests a particular Web Page from the Web Application Server. The Server then:\n\n","This finalized application web page can be cached to eliminate the need to fetch the client host page and re-create the application web page on every web application request.","Cookies and HTTP request headers can be forwarded along to the client host html server when fetching the client host HTML page.","Additionally the URL of the web page can be masked via reverse proxy, custom subdomains, or alternative techniques to make the URL match that of the client web site or domain. Reverse proxy is a mechanism for delivering content from a remote server via an intermediate server so that the content appears as if it originated from the intermediate server.","This approach enables very simple embedding for the client, but also oilers flexibility in reusing the same web application in multiple web pages. A complete application web page includes the host HTML, the web application, and can also include different CSS for styling, different scripts for different functionality, different back-end integration, like connecting with different e-commerce systems, etc. A complete application web page contains all information that is used in displaying and executing a web application in a client browser.","As shown in , a single web application can be embedded in multiple web pages to yield multiple web applications with potentially different behavior, styling, integration with third party systems, etc. In , Application Object 1 is embedded into Host HTML 1. Host HTML 1 includes specific styling information, CSS 1, and specific functionality via Custom JavaScript 1. When combined, with the Application Object the resulting Web Application 1 has styling and functionality defined by CSS 1 and Custom JavaScript 1. This example with CSS and JavaScript is simply illustrative; other web resources can be included in the web page to affect the behavior of the web application. Also Custom JavaScript 1 can include multiple JavaScript files from various sources.",{"@attributes":{"id":"p-0088","num":"0095"},"figref":"FIG. 7"},"Web Page 1 and Web Page 2 can use the same application object to fulfill various needs. The key benefit is the ability to reuse and repurpose existing data and application functionality, which saves time and minimizes data maintenance problems.","For example a product manufacturer might have a main web site with a web application for direct access by customers. The manufacturer might have resellers who also want to offer customers the ability to interact with the same web application on the reseller web site. The embedding technique described above allows a single web application to be embedded in both the manufacturer main site and the reseller site, each with different styling and connections to different e-commerce systems.","Another key element of this approach is ease of maintenance. Any changes to the embedding approach can be done once in a centralized location on the web application platform server and disseminated globally and instantly to all web applications on the platform. The need for a change might occur if the application platform changes its preferred social\/sharing or analytics code or any other change affecting how an application is embedded into host HTML. If the embedding were managed on the clients' servers, any changes would need to be propagated, separately to each client's host page and would entail a large manual updating effort.","Integration with third party systems, like e-commerce or CRM software, can also be managed via the web context (or application web page), which consists of the host HTML page, the embedded web application, and all included web resources. A web application can leverage integration scripts or functionality provided in its web context to communicate with, third, party systems. This approach also allows a single web application, when used in multiple contexts, to Integrate with different third party systems. For example the same web application can be used in a manufacturer web page as well as that manutacturer's reseller's web pages, and can integrate with different e-commerce systems in each case.","Relationship Modeling","Applications that manage complex product compatibilities and complicated internal logic have a special need to be able to model relationships among application elements in a simple, easy-to-manage format. Applications with such, needs include: configuration, troubleshooting, diagnostics, bundling, guided selling, data navigation, sales quote generation, expertise automation, recommendation engines, customization\/design, personalization, etc., basically any application that provides logical direction or guidance to a user based on user selections.","Such applications continually evolve as the underlying business logic changes. Maybe new parts or products are introduced, fabrication rules change, retailer discounts are updated. Being able to accommodate the continually evolving business logic that forms the foundation of these applications is critical. Web applications built with this example embodiment will be updated regularly and often by people without any specialized, technical knowledge. The platform provides a simple. Intuitive approach that lets even non-technical users manage and update their application business logic.","Additionally this web application development platform needs to accommodate applications as varied as custom bike saddle builders to data center configurators, wine pairing recommendation tools to online event planners. The relationship modeling system needs to manage relationships for a wide spectrum of applications and functionality.","To provide the required simplicity and flexibility, this example embodiment offers several mechanisms for modeling the business logic that underlies web applications.","User Selections","As a user interacts with a web application, the user's actions are recorded as \u201cselections\u201d. These selections can be used to update the application state based on internal logic specified in the web application. User selections can be treated as a position (or positions) and used in position-based modeling described below. User selections can also be exposed to custom scripts for use in script-based modeling, also described below.","Rules\/Action Triggers","To reflect the business logic specified by clients in the underlying data and transformations, the platform provides a mechanism to update the state of the web application based on user selections and user behavior. The application state can be updated via actions. Actions can be triggered based on events or input that occur in the web application. An action is any behavior necessary to provide the desired web application functionality. Actions can include: showing or hiding application objects, selecting or deselecting application objects, showing a message dialog, or any other application behavior.","These actions can be triggered in a number of different ways, outlined below. The combination of a given action with a given action trigger can be considered a \u201crule\u201d. Rules can have explicit or implicit action targets. An action target is the application object that is the recipient of the behavior specified by a given action.","For example, a rule could declaratively be specified as follows:",{"@attributes":{"id":"p-0103","num":"0110"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<rule>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<action><select \/><\/action>"]},{"entry":[{},"<trigger>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<on_update>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<match>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<object_id>objectA<\/object_id>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/match>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/on_update >"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/trigger>"]},{"entry":[{},"<targets>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<object_id>objectB<\/object_id>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/targets>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/rule>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"This rule indicates that objectB (defined as the target of the rule) should be selected (defined in the rule action) if when the application updates its state (defined in the trigger), objectA is included in the user's selections (objectA \u201cmatches\u201d the user's selections via the default \u201cis included\u201d set comparison\u2014more on set comparisons below). The example embodiment accommodates rule chaining, where the action triggered in one rule can in turn trigger another action, which in turn triggers another, etc.","Position-Based","Position-based relationship modeling derives from the insight that all elements\/objects in a web application can be construed as comprising an n-dimensional problem space. Each object in a web application is a position within a dimension. Dimensions can be nested hierarchically and infinitely. At the top level a web application can be considered a dimension as well as a position (a location inside its own dimension). Inside the application can be any number of other dimensions and positions, including nested web applications, which are themselves dimensions within their parent dimension (application). Within this framework, any set of objects inside a web application can be considered a position and compared against any other set of objects (also a position) using set theory.",{"@attributes":{"id":"p-0107","num":"0114"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0108","num":"0115"},"figref":"FIG. 9"},"Using this framework, relationships among application objects can be established using simple set theory operators like includes, intersects, union, etc. Based on the configuration in , the following questions can be answered. Does Dimension 1 include the set of Position 3 and Position 4? Yes. Does the set of Position 3 and Position 9 Intersect with Position 10? No, is the set of Position 9 and Position 10 included in Position 5? Yes.",{"@attributes":{"id":"p-0110","num":"0117"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0111","num":"0118"},"figref":"FIG. 10"},"These position-based comparisons can be used to trigger specific behaviors in a web application.","For example to express a product compatibility rule, an application developer might specify that a given product option (option B) should only be available to the user if another given option (option A) has already been selected. Such a rule can be expressed by saying option B should only be visible if option A has been selected by the user. The trigger for this rule could be a position-based rule that states: \u201cif the user selections include option A, then, show option B\u201d.","Such a rule could be written declaratively like this:",{"@attributes":{"id":"p-0115","num":"0122"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<option>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<option_id>A<\/option_id>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/option>"]},{"entry":[{},"<option>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<option_id>B<\/option_id>"]},{"entry":[{},"<match>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<option_id_ref>A<\/option_id_ref>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/match>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/option>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"The above rule is effectively saying \u201cshow option B if the set of user selections includes the set of option A\u201d. The action triggers can be evaluated in any order and are activated based on a set comparison with the current application state. Triggered rules that change application state can cause the set of rules to be re-evaluated for further triggers. Such an approach accommodates rule chaining as described above.","In code, application objects can be treated as positions by having the application objects provide a specific set of functionality. In Java, this functionality can be described as an Interface that might look like the code below.",{"@attributes":{"id":"p-0118","num":"0125"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"public interface Position extends Serializable, Comparable<Position> {"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"public boolean includes(Position otherPosition);"]},{"entry":[{},"public boolean includes(Position otherPosition, Dimension"]},{"entry":[{},"dimension);"]},{"entry":[{},"public boolean isIncludedIn(Position otherPosition);"]},{"entry":[{},"public boolean intersects(Position otherPosition);"]},{"entry":[{},"public Position getPosition(Dimension dimension);"]},{"entry":[{},"public boolean matches(Position otherPosition);"]},{"entry":[{},"..."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"Script-Based","The example embodiment also provides another method for relationship modeling: script-based relationship modeling. An action trigger can be specified as arbitrary custom code. When the action trigger is being evaluated, the custom code is executed and returns a value indicating whether or not the action should be triggered. Allowing arbitrary code to determine relationships provides unlimited flexibility in what conditions trigger an action. Application objects can also be marked with arbitrary custom attributes that can be used in script-based relationship evaluation. These custom attributes can be used to enforce attribute-based constraints and provide flags for any other processing. User selections can be retrieved via an API which allows script-based modeling against the user selections or against attributes or characteristics of the user selections.","Using an example similar to the position-based one above, a script-based rule could be written like this:",{"@attributes":{"id":"p-0122","num":"0129"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"<option>"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<option_id>A<\/option_id>"]},{"entry":[{},"<attribute>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<name>attr<\/name>"]},{"entry":[{},"<value>11<\/value>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/attribute>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<\/option>"},{"entry":"<option>"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<option_id>B<\/option_id>"]},{"entry":[{},"<attribute>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<name>attr<\/name>"]},{"entry":[{},"<value>9<\/value>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/attribute>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<\/option>"},{"entry":"<option>"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<option_id>C<\/option_id>"]},{"entry":[{},"<script_match>"]},{"entry":[{},"<![CDATA[return selections_api.getAttributeValue(\u2018attr\u2019) < 10;]]>"]},{"entry":[{},"<\/script_match>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<\/option>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"In this example, the script trigger for option C will be triggered when the user's selected option has an attribute value of less than 10. In other words, the script trigger will be triggered when the user has selected option B but will not be triggered when the user has selected option A. This example assumes that options A and B are mutually exclusive (i.e. cannot be selected at the same time). Setting up a rule for mutual exclusion is a capability of the described rule system as well.","More practically, the example above could be applied in a case where a user is selecting computer hardware components that each has a certain amount of memory. A rule could be specified to show new options to the user in the case where the user's selected amount of memory exceeds a certain threshold. Alternatively a ride could be specified to eliminate certain options if the total memory associated with the user's selections exceeds a certain threshold.","Another example is creating a rule to automatically select a given option if a sum total of the user's current selections exceed a certain amount.","Or an application developer might want to use custom logic, based on interaction with external data, to determine whether a certain product option is in stock or sold out and not show to the user any products that are out of stock.","Combinations","Position-based and script-based triggers can be combined via Boolean operators; and, or, not, etc. The Boolean operators allow logical evaluation of multiple action triggers to provide a single result value. The Boolean expressions can be nested. For example:\n\n","Just-in-Time Downloading","Application functionality can be spread across multiple nested or linked sub-applications. Sub-applications are not downloaded by the executing web application until they might be needed. In other words, web applications will download any sub-applications that are immediate children but not any sub-applications further down the descendant path. For example if Application 1 contains Application 2 which contains Application 3, upon initialization Application 1 will download Application 2, but will not download Application 3. Only if\/when Application 2 is actually invoked will Application 3 be downloaded. Using such an approach makes the system very responsive, only pulling down data that a user is likely to use.",{"@attributes":{"id":"p-0131","num":"0139"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0132","num":"0140"},"figref":["FIG. 12","FIG. 11"]},"In , a User requests a particular Web Page in their Web Browser. The Web Browser fetches the Web Page and, as part of preparing the web page for display to the User, retrieves Application 1 from the Web Application Server. Then the Browser initializes Application 1, Application 2 and Application 3 are immediate children of Application 1, so Application 1 requests Application 2 and Application 3 from the Web Application Server. The just-in-time downloading for Application 1 is now complete and the Web Browser displays Application 1 to the User. The User then selects Application 2 by interacting with the Web Browser user interface. The Web Browser transmits this selection event to Application 1. Application 2 has already been downloaded, so Application 1 initializes Application 2 and displays an updated user interface to the User. The User now selects Application 3. The Web Browser transmits this selection event to Application 2. Application 3 has already been downloaded, so Application 2 initializes Application 3. Application 3 sees that it has a child application. Application 4, which has not been downloaded. Application 3 then downloads Application 4 to be prepared in case the User selects Application 4.","Data Partitioning","Data partitioning enables massive amounts of data to be broken down into manageable parts (or sub-applications). These manageable parts can be downloaded as needed by the web application using just-in-time downloading. Data partitioning combined with just-in-time downloading makes it feasible for web application users to traverse vast amounts of data in a stepped, organized, and responsive manner.","Application State","State identifiers are strings that contain all information necessary to re-create a particular application state. State identifiers can be represented in a URL, POST data, flat files, databases, etc. When a state identifier is used, inside a URL, the URL is called a stateful URL. The key element is that application state can be represented concisely and definitively. State identifiers enable state caching, lookahead or pre-caching, and social or sharing features.","State Caching","Because application state is uniquely and definitively represented in a state identifier, a web application can cache the state for a particular state identifier and not have to redundantly perform the calculations used to arrive at that state the first time it: was accessed by a user. Any rules or relationships used to specify the appropriate state for a given state identifier only need to be executed once and can then be cached, which minimizes processing and enhances performance.","Lookahead\/Pre-Caching","Since states can be cached, the described application platform can also calculate the state in advance for particular states a user might access. With this technique, application states can be evaluated and cached one time on the server and leveraged by all clients\/browsers that use that web application, lit this way state calculation processing can be eliminated entirely from the user browser, resulting in better application responsiveness. Web application developers can specify what kind of caching\/lookahead (if any) the system should perform and to what depth.","Social\/Sharing","Stateful URLs also provide a convenient mechanism for enabling web application state sharing. If a user builds a particular product configuration in a web application and wants to share it, he can do so simply by transmitting the appropriate URL to another user. Since all state is contained in a URL, web application states can also be shared via standard sharing mechanisms, like posting to Facebook\u2122, Pinterest\u2122, emailing, bookmarking, etc.","Application Nesting\/Linking","Web applications are designed to be nested to an arbitrary depth aid also linked. The distinction between nesting and linking is one of state maintenance. The mechanism for passing state information among web applications is state identifiers. In a nested application, all state for the nested application is reflected in its parent application. In a linked application, the slate is wiped clean, and application state for the linking application does not reflect the state of the linked application. Although, the act of linking to a linked application can include transmitting the linking application's state to the linked application.","Other Features","Post Processing Directives","The declarative application language includes post processing directives that can perform general behaviors to generate the desired application state. These post processing directives can include behaviors like:\n\n","Offline Application Cache","A web application can be downloaded, cached, and subsequently run without a network connection. The HTML5 \u201cApplication Cache\u201d feature easily enables this functionality via a manifest file.","Platform Versioning","The system is designed to allow different versions of the platform to be hosted on different domains or sub-domains, which allows staged migration to newer versions. Old versions of the platform can co-exist alongside newer versions, and application clients can choose if and when to upgrade to newer versions of the platform. Migration to a newer version can be done by simply changing a domain name.","Analytics","Analytics are built in to the platform and collect usage data for particular web applications and global data for all applications in aggregate. Having a view of aggregate analytics for all web applications served by the platform offers a better assessment of global application usage by providing more data points.","Installation Options","The platform can run as a cloud-based system with no installation requirements for application clients, run in a virtual private cloud (VPC) with configurable access via a corporate VPN and\/or the Internet, or the system can be locally-installed as a standalone system inside a client network.","Security","The system can be secured via known security mechanisms like HTTP authentication\/authorization, signed URLs, TLS\/SSL, VPN with IPSec and other techniques.","Mobile-Ready","Using standard web technologies like HTML, CSS, and JavaScript enables web applications created by the platform to work without modification on mobile devices as well as desktop, laptop, and other conventional devices.",{"@attributes":{"id":"p-0159","num":"0169"},"figref":"FIG. 13"},{"@attributes":{"id":"p-0160","num":"0170"},"figref":"FIG. 14","b":"700"},"The example computer system  includes a data processor  (e.g., a central processing unit (CPU), a graphics processing unit (GPU), or both), a main memory  and a static memory , which communicate with each other via a bus . The computer system  may further include a video display unit  (e.g., a liquid crystal display (LCD) or a cathode ray tube (CRT)). The computer system  also includes an input device  (e.g., a keyboard), a cursor control device  (e.g., a mouse), a disk drive unit , a signal generation device  (e.g., a speaker) and a network interface device .","The disk drive unit  includes a machine-readable medium  on which is stored one or more sets of instructions (e.g., software ) embodying any one or more of the methodologies or functions described herein. The instructions  may also reside, completely or at least partially, within the main memory , the static memory , and\/or within the processor  during execution thereof by the computer system , The main memory  and the processor  also may constitute machine-readable media. The instructions  may further be transmitted or received over a network  via the network interface device . While the machine-readable medium  is shown in an example embodiment to be a single medium, the term \u201cmachine-readable medium\u201d should be taken to include a single non-transitory medium or multiple non-transitory media (e.g., a centralized or distributed database, and\/or associated caches and servers) that store the one or more sets of instructions. The term \u201cmachine-readable medium\u201d can also be taken to include any non-transitory medium that is capable of storing, encoding or carrying a set of instructions for execution by the machine and that cause the machine to perform any one or more of the methodologies of the various embodiments, or that is capable of storing, encoding or carrying data structures utilized by or associated with such a set of instructions. The term \u201cmachine-readable medium\u201d can accordingly be taken to include, but not be limited to, solid-state memories, optical media, and magnetic media.",{"@attributes":{"id":"p-0163","num":"0173"},"figref":"FIG. 15"},"The Abstract of the Disclosure is provided to comply with 37 C.F.R. \u00a71.72(b), requiring an abstract that, will allow the reader to quickly ascertain the nature of the technical disclosure. It is submitted with the understanding that it will, not be used to interpret or limit the scope or meaning of the claims. In addition, in the foregoing Detailed Description, it can be seen that various features are grouped together in a single embodiment for the purpose of streamlining the disclosure. This method of disclosure is not to be interpreted as reflecting an intention that the claimed embodiments require more features than are expressly recited in each claim. Rather, as the following claims reflect, inventive subject matter lies in less than all features of a single disclosed embodiment. Thus, the following claims are hereby incorporated into the Detailed Description, with each claim standing on its own as a separate embodiment."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The various embodiments are illustrated by way of example, and not by way of limitation, in the figures of the accompanying drawings in which:",{"@attributes":{"id":"p-0021","num":"0025"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0022","num":"0026"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0023","num":"0027"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0024","num":"0028"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0025","num":"0029"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0026","num":"0030"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0027","num":"0031"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0028","num":"0032"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0029","num":"0033"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0030","num":"0034"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0031","num":"0035"},"figref":["FIG. 11","FIG. 12"]},{"@attributes":{"id":"p-0032","num":"0036"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0033","num":"0037"},"figref":"FIG. 13"},{"@attributes":{"id":"p-0034","num":"0038"},"figref":"FIG. 14"},{"@attributes":{"id":"p-0035","num":"0039"},"figref":"FIG. 15"}]},"DETDESC":[{},{}]}
