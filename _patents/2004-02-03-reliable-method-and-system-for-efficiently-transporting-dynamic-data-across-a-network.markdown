---
title: Reliable method and system for efficiently transporting dynamic data across a network
abstract: A data networking system designed to provide efficient, yet reliable, transportation of data across a time division multiplexed network. This invention allows for redundantly sending data segments wherein if bad data segments are received, they can be resent in a dynamic manner depending on the network condition and segments can be fragmented, resized and sent with low overhead due to dynamic header sizes, segment sizes, forward error correction, and cyclic redundancy checks. The result is a very adaptive network that meets the demanding requirements of networks such as power line and wireless while still being able to transport data for voice, audio, video, computer, control, and the like.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07451381&OS=07451381&RS=07451381
owner: Phonex Broadband Corporation
number: 07451381
owner_city: Midvale
owner_country: US
publication_date: 20040203
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION"],"p":["1. Field of the Invention","This invention relates to electronic communications systems. More specifically this invention relates to fault tolerant transportation, fragmentation, and reassembly of segments within a communications system.","2. Description of Related Art","A variety of schemes have been used to provide reliable transportation of data across a network. Typically, protocols provide for guaranteed delivery of information and fragmentation of packets to send information across a network. However, these mechanisms are not typically designed for the dynamic environments of time division multiplexed power line networks which require efficient data transportation coupled low packet overhead and strong data protection. For a general background material, the reader is directed to the following United States patents, each of which is hereby incorporated by reference in its entirety for the material contained therein: U.S. Patent Numbers and Patent Application Numbers: 2002\/0174399, 2001\/0037481, U.S. Pat. Nos. 6,154,780, 5,896,374, 5,815,516, 5,742,592, 5,638,384, 5,608,396, 5,497,371, 5,414,650, 5,410,546, 5,375,119, 4,941,144, 4,858,017, and 4,823,345.","It is desirable to provide a system for reliably sending data across a network which is efficient yet adaptable to changing network conditions.","Therefore it is the general object of an embodiment of this invention to provide a system for reliably sending data across a network by acknowledging segments based on the segment length.","It is a further object of an embodiment of this invention to provide a system for reliably sending data across a network by not sending an acknowledgment segment which indicates an error.","It is a further object of an embodiment of this invention to provide a system for reliably sending data across a network by sending a negative acknowledgement segment.","It is a further object of an embodiment of this invention to provide a system for reliably sending data across a network by sending a positive acknowledgement segment.","It is a further object of an embodiment of this invention to provide a system for reliably sending data across a network based on a resend value.","It is a further object of an embodiment of this invention to provide a system for reliably sending data across a power line network, a wireless network, a light frequency network and a wired network.","It is a further object of an embodiment of this invention to provide a system for reliably sending data across a network by sending the same packet multiple times based on a send value.","It is a further object of an embodiment of this invention to provide a system for reliably sending data across a network by sending broadcast segments multiple times based on a send value.","It is a further object of an embodiment of this invention to provide a system for reliably sending data across a network by sending non-broadcast segments multiple times based on a send value.","It is a further object of an embodiment of this invention to provide a system for sending and receiving variable length segments and error correcting information based on a preamble and a variable length error detecting field.","It is a further object of an embodiment of this invention to provide a system for sending and receiving variable length segments and error correcting information across a power line network, a wireless network, a light frequency network, and a wired network.","It is a further object of an embodiment of this invention to provide a system for sending and receiving variable length segments and error correcting information where the error detecting field's length is based on the preamble.","It is a further object of an embodiment of this invention to provide a system for sending and receiving variable length segments and error correcting information where the segment's length is based on the preamble.","It is a further object of an embodiment of this invention to provide a system for sending and receiving variable length segments and error correcting information where the error detecting field is a cyclic redundancy check, a checksum, or parity.","It is a further object of an embodiment of this invention to provide a system for sending and receiving variable length segments and error correcting information where the preamble is 40 bits in length.","It is a further object of an embodiment of this invention to provide a system for sending and receiving variable length segments and error correcting information where the cyclic redundancy check is 30 bits.","It is a further object of an embodiment of this invention to provide a system for sending and receiving variable length segments and error correcting information where the cyclic redundancy check is 10 bits.","It is a further object of an embodiment of this invention to provide a system for sending and receiving variable length segments and error correcting information where the preamble is dynamically changed based on conditions within the network.","It is a further object of an embodiment of this invention to provide a system for sending and receiving variable length segments and error correcting information where the preamble is dynamically changed based on cyclic redundancy errors.","It is a further object of an embodiment of this invention to provide a system for sending and receiving segments using different forward error correction methods based on a preamble and a forward error correction method.","It is a further object of an embodiment of this invention to provide a system for sending and receiving segments using different forward error correction methods across a power line network, a wireless network, a light frequency network, and a wired network.","It is a further object of an embodiment of this invention to provide a system for sending and receiving segments using different forward error correction methods where the forward error correction method's size is based on the preamble.","It is a further object of an embodiment of this invention to provide a system for sending and receiving segments using different forward error correction methods where the segment size is based on the preamble.","It is a further object of an embodiment of this invention to provide a system for sending and receiving segments using different forward error correction methods where the forward error correction methods are Hamming codes, Convolutional codes, Reed-Solomon codes, Low Density Parity Check Codes, Trellis codes, Block Turbo codes or Walsh codes.","It is a further object of an embodiment of this invention to provide a system for sending and receiving segments using different forward error correction methods where the forward error correction method uses 22 out of 32 bits.","It is a further object of an embodiment of this invention to provide a system for sending and receiving segments using different forward error correction methods where the preamble indicates no forward error correction.","It is a further object of an embodiment of this invention to provide a system for sending and receiving segments using different forward error correction methods where the preamble is dynamically changed based on network conditions.","It is a further object of an embodiment of this invention to provide a system for sending and receiving segments using different forward error correction methods where the preamble is dynamically changed based on cyclic redundancy check errors.","It is a further object of an embodiment of this invention to provide a system for sending and receiving converted data on a network where binary data is sent across non-binary time slots.","It is a further object of an embodiment of this invention to provide a system for sending and receiving converted data on a power line network, a wireless network, a light frequency network, and a wired network.","It is a further object of an embodiment of this invention to provide a system for sending and receiving converted data on a network where the time slot width is 10 bits.","It is a further object of an embodiment of this invention to provide a system for sending and receiving converted data on a network where the binary data is a power of two.","It is a further object of an embodiment of this invention to provide a system for sending and receiving segments on a network by breaking upper-layer packets into segments.","It is a further object of an embodiment of this invention to provide a system for sending and receiving segments on a power line network, a wireless network, a light frequency network, and a wired network.","It is a further object of an embodiment of this invention to provide a system for sending and receiving segments on a network where the segment contains a MAC field, a last segment field, a socket field, a segment data length field, a version number, Forward Error Correction field, an encryption field, a segment number field, an ARQ field, a source network number field, a destination network number field, a segment number, a source node number, or a destination node number.","It is a further object of an embodiment of this invention to provide a system for sending and receiving segments on a network where the upper-layer packets use protocols such as: Internet Protocol, User Datagram Protocol, Transmission Control Protocol, Integrated Services Digital Network, Hyper Text Markup Language, Secure Sockets Layer, X.10, Common Application Language, Simple Control Protocol, or LonTalk.","It is a further object of an embodiment of this invention to provide a system for sending and receiving segments on a network where segments are resent based on segment errors.","It is a further object of an embodiment of this invention to provide a system for sending and receiving segments on a network where segments are sent in order.","It is a further object of an embodiment of this invention to provide a system for sending and receiving segments on a network where segments are sent out of order.","It is a further object of an embodiment of this invention to provide a system for sending and receiving segments on a network where a segment is sent on a single time slot.","It is a further object of an embodiment of this invention to provide a system for sending and receiving segments on a network where a segment is sent on multiple time slots.","It is a further object of an embodiment of this invention to provide a system for sending and receiving segments on a network where duplicate packets are dropped.","These and other objects of this invention will be readily apparent to those of ordinary skill in the art upon review of the following drawings, detailed description, and claims. In the preferred embodiment of this invention, the system for data transportation across a network makes use of a novel mechanism for reliably sending and acknowledging segments across a network. In addition, other novel methods are used to allow the system to dynamically adjust segment size, error detection, and forward error correction based on network conditions to increase throughput on the network. The system uses novel methods for converting data size to fit into time slots.","Reference will now be made in detail to the present preferred embodiment of the invention, examples of which are illustrated in the accompanying drawings.",{"@attributes":{"id":"p-0092","num":"0091"},"figref":"FIG. 1","i":"a ","b":["304","142","140","141","140","141","142","120","136"]},{"@attributes":{"id":"p-0093","num":"0092"},"figref":"FIG. 1","i":"b ","b":["142","142","142","120","136","120","136","136","142","120","135","142","137","120","124","138","126","128","133","139","140","137","138","139","142","140"]},{"@attributes":{"id":"p-0094","num":"0093"},"figref":"FIG. 2","b":["214","304","142","304","900","142","900","304","900","304","304","214","304","900","141","200","304","201","304","900","141","900","141","900","202","140","141","140","141","202","304","203","141","304","302","303","208","204","214","141","214","205","304","206","141","304","206","207","141","141","900","208","304","303","209","140","210","141","211","900","304","211","900","212","140","213","141"]},{"@attributes":{"id":"p-0095","num":"0094"},"figref":"FIG. 3","b":["304","303","304","141","305","304","304","141","214","208","141","203","302","302","140","301","141","302","302","303","303","305","141","303","302","302","141","303","141","303","214","208","141","303","140","303","140","402","303","303","402","140","140","303","141","304","141","304","302"]},{"@attributes":{"id":"p-0096","num":"0095"},"figref":"FIG. 4","i":"a ","b":["303","303","400","303","303","303","401","304","303","141","304","304","304","304","304","402","303"]},{"@attributes":{"id":"p-0097","num":"0096"},"figref":"FIG. 4","i":"b ","b":["304","142","450","141","214","301","140","203","451","452","214","301","304","453","214","301","302","454","304","455","456","303","203","457","402","303","458","459","460","455","461","458","303","461","459","303","460"]},{"@attributes":{"id":"p-0098","num":"0097"},"figref":"FIG. 4","i":"c ","b":["304","142","470","304","302","471","302","471","472","304","473","483","302","471","474","474","204","475","480","475","207","480","476","476","304","206","480","477","304","477","478","480","480","304","480","303","401","481","304","482","483","471","474","477","478","303","141","304","304","477","479","483"]},"In order to ensure reliable sending of data segments , another method is needed to send data segments  such as broadcast or multi-cast data segments . A broadcast or multi-cast data segment is a data segment  with broadcast address or multi-cast address. Since broadcasts data segments  go to every node on the network, it would be difficult to acknowledge the broadcast data segment  from each network node , on the network . When a broadcast data segment  is sent, some of the nodes may receive the data segment  correctly, while others may not. To ensure that there is a greater chance that all the nodes on the network  will see a data segment , redundant segment sending was developed to ensure that broadcast and multi-cast data segments  will have a greater chance of being sent reliably across the network . Each data segment  is sent based on a segment send value. is a diagram of the present preferred method for sending data segments  redundantly across a network . illustrates an example of where the segment send value is three. When segment N is sent, segment N sent three times -. Segment N+1 is also sent three times -. Typically, these are broadcast data segments , but they can be non-broadcast data segments  such as multi-cast or uni-cast data segments . When the receiving network node  receives the duplicate data segments , , ,  and the CRC is validated, the receiving network node  drops the duplicate segments and only passes one of each individual data segment , , or  and , , or  up to the upper layer for processing. Redundant segment sending can be used in conjunction with sending of acknowledgement segments  and the needs of the system. A data segment  can be sent with both redundant segment sending and an acknowledgement segment . On the other hand, data segments  can be sent with redundant segment sending while others use the acknowledgement segment .",{"@attributes":{"id":"p-0100","num":"0099"},"figref":"FIG. 5","i":"b ","b":["304","142","550","304","551","304","552","553","554","552","555"]},{"@attributes":{"id":"p-0101","num":"0100"},"figref":"FIG. 5","i":"c ","b":["304","142","304","570","571","207","207","207","304","207","304","304","575","304","574","207","571","572","304","573","574"]},{"@attributes":{"id":"p-0102","num":"0101"},"figref":"FIG. 6","i":"a ","b":["304","304","142","140","600","141","304","600","600","600","602","600","602","601","600","602","601","600","141","601","203","601","602","600","602","601","601"]},{"@attributes":{"id":"p-0103","num":"0102"},"figref":"FIG. 6","i":"b ","b":["304","140","1","654","1","654","651","651","652","304","653","1","654","671","402","303","302","304","1","654","655","1","654","653","1","657","2","658","659","142","1","657","1","654","1","662","1","654","1","660","1662","1","656","304","662","654","656","656","659","304","304","662","654","1","656","140","142","141","141","654","1","662","1","656","665","669","656","1","656","1","654","1","662","1","667","1","667","1","654","1","654","666","141","1","654","1","654","665","670"]},"In addition to sending variable length error detection in each segment, dynamic forward error correction (FEC) can be sent as well. is a diagram of the present preferred segment structure for dynamic forward error correction on a per segment basis. The preamble  is again used to identify the start of the segment data . In this method, the preamble  is used to indicate which type of FEC is being used to encode the segment data . The preferred embodiment uses a Walsh forward error correction method, but other methods like Hamming codes, Convolutional codes, Reed-Solomon, Low Density Parity Check Codes, Trellis codes, Block Turbo codes, and the like can be used. The preamble  can also indicate that there is not a FEC method used to encode the segment data . This process can use an optional data segment error detection mechanism (CRC)  or some other error detection mechanism. The preamble  can be used to indicate both the FEC used to encode the segment data  and the length and type of data segment error detection mechanism (CRC) . By being able to dynamically change the FEC or turn off FEC on a per data segment  basis, the throughput of the system can be increased on networks where less or no FEC is needed due to low error rates on the network . A receiving network node  can monitor the number of corrected FEC errors and increase or decrease the amount of FEC required dynamically.",{"@attributes":{"id":"p-0105","num":"0104"},"figref":["FIG. 7","figure 7"],"i":["b ","b"],"b":["140","1","754","1","754","751","751","752","1","771","142","1","757","2","759","1","754","1","1","762","1","1","756","1","762","140","142","141","762","1","756","141","765","769","1","1","769","1","762","1","767","1","754","1","754","766","141","1","754"]},"In the present preferred embodiment the time slots - are 10 bits wide, data must be converted from bytes, words, longs, and the like into 10 bit chunks in order to be sent across a network .  is a diagram of the present preferred process for converting binary data to non-binary data for use in time slots -. In the preferred method, the sending network node's  transmit data converter  takes bytes - and converts them to dectets -. A dectet is a 10 bit chunk of data which is used to fill up a time slot -. The preferred embodiment uses dectets, but the bytes can be converted to some other non binary format such as 7 bits, 11 bits, and the like sizes for transfer in like time slot sizes. To make dectets -, the bytes - are broken up to make the larger dectets -. The dectets - are put in time slots  and .  depicts the time slots and  and time slots and  as the same time slot over time. The time slots - transfer the data across the network  to the receiving network node . The receiving network node's  receiving data converter  takes each dectet out of the time slots - and converts them back to into bytes -. The bytes are passed up to the next layer for processing on the receiving network node .",{"@attributes":{"id":"p-0107","num":"0106"},"figref":"FIG. 9","b":["900","142","900","902","904","906","140","902","904","906","901","903","905","907","909","907","909","910","907","909","120","135","907","909","911","912","142","907","909","913","914","914","907","909","120","135","907","909","901","903","905","902","904","906","907","909","900"]},{"@attributes":{"id":"p-0108","num":"0107"},"figref":"FIG. 10","b":["900","1000","140","1001","900","900","304","900","141","900"]},"1) Ownership\u2014Identifies which layer still has the ability to modify the descriptor.","2) Buffer Address\u2014The address of the upper layer packet in memory.","3) Segment Offset\u2014A number indicating how many bytes of the segment have been segmented.","4) Active Channel ID\u2014Identifies the active channel the upper layer packet is to be transmitted in.","5) Destination Network Address\u2014The address of the destination network.","6) Destination Node Address\u2014The destination address of the node for which the segment is being sent.","7) Source Network Address\u2014The network address of the sending network node.","8) Source Node Address\u2014The source node address.","9) Packet ID\u2014A unique identifier for the upper layer packet.","10) Packet Length\u2014The number of bytes in the upper layer packet.","11) Socket\u2014The socket number pertaining to the upper layer packet.","12) Cipher Flag\u2014Flag is set if the upper layer packet's segments are to be encrypted.","13) Acknowledgement Type\u2014Specifies the acknowledgement protocol used for each segment that is a part of the upper layer packet.","14) Transmit Attempts\u2014The number of transmit attempts that are allowed for each segment of the upper layer packet.","If at test  the process owns the descriptor, the process flows to . Otherwise, the process waits till the upper layer grants the process ownership of the descriptor. The node determines  the segment count. The process for determining the segment count  is further defined in . Test  checks to see if the segment count is valid. If not, the process updates  the packet transmit descriptor. If test  is yes the loop variable y is set  to zero. Variable y is used to count how many data segments  have been created. The data segment  is processed . Step  is further refined in . If the data segment  was successfully created , the process increments  variable y to indicate the creation of another data segment . Otherwise, the packet descriptor is updated . Test  checks to see if all the data segments  for this upper layer packet  have been processed. If so, the packet transmit descriptor is updated . Otherwise, the segment is processed . In step , the transmit packet descriptor is updated and ownership is given back to the packet transmit layer. This can be done because the data segments  are sent and the memory in the descriptor is no longer needed.",{"@attributes":{"id":"p-0124","num":"0123"},"figref":["FIG. 11","FIG. 11"],"b":["1002","1100","1101","140","141","142","142","140","141","140","141","142","1101","1102","203","1103","203","1104","203","1106","600","203","1106","1105","1107"]},{"@attributes":{"id":"p-0125","num":"0124"},"figref":["FIG. 12","FIG. 12"],"b":["304","1005","1200","1201","304","304"]},"1) Ownership\u2014Identifies which layer still has the ability to modify the descriptor.","2) Segment Header Buffer Address\u2014The address in memory of the data segment header  for a data segment .","3) Segment Buffer Address\u2014The address of the buffer containing the data segment  to transmit.","4) Channel ID\u2014Identifies the active channel the segment is to be transmitted in.","5) Destination Network Address\u2014The address of the destination network.","6) Destination Node Address\u2014The destination address of the node for which the segment is being sent.","7) Source Network Address\u2014The network address of the sending network node .","8) Source Node Address\u2014The source node address.","9) Packet ID\u2014A unique identifier for the upper layer packet .","10) Segment ID\u2014A unique identifier for a data segment .","11) Segment Payload Length\u2014The number of bytes in the data segment payload .","12) Socket\u2014The socket number pertaining to the data segment .","13) Cipher Flag\u2014Is set if the data segment  is to be encrypted.","14) Acknowledgement Type\u2014Specifies the acknowledgement protocol used for the data segment .","15) Transmit Attempts\u2014The number of transmit attempts that are allowed for each data segment  of the upper layer packet .","16) Payload Checksum\u2014A checksum of the segment payload  data before any encryption is performed.","17) Status\u2014The status of the transmit data segment  (i.e. has it been sent and the like).","If in test  the process owns the PSEG descriptor, the process goes on and defines  the data segment . Otherwise, the process waits in test  until the process receives ownership. In step  the data segment  is defined. The process of how the data segment  is defined  is shown in greater detail in . The data segment  is encrypted  if necessary. A packet segment (PSEG) descriptor is built  for the data segment . The process of how the descriptor is build  is shown in greater detail in . The data segment header  is built . How the data segment header  is build  is shown in greater detail in . The PSEG descriptor is given  to the MAC transmit layer to send the  segment on the network. The process waits in test  for ownership of the PSEG descriptor to transfer back. Ownership will transfer back when the MAC layer transmits the data segment  and the process completes .",{"@attributes":{"id":"p-0144","num":"0143"},"figref":"FIG. 13","b":["301","1202","1300","1301","1302","304","900","1303","1304","1305","1306","1307","304","1308"]},{"@attributes":{"id":"p-0145","num":"0144"},"figref":"FIG. 14","b":["1204","1400","1401","1402","1403","1404","1405","1406","304","1407","1408","1409","1410"]},{"@attributes":{"id":"p-0146","num":"0145"},"figref":["FIG. 15","FIG. 2"],"b":["214","1205","214","301","142","214","1500","203","1501","213","1502","1503","1503","209","1505","209","1504","1508","206","1505","209","213","1506","212","1507","206","1508","211","1509","207","202","1511","208","1512","1513"]},{"@attributes":{"id":"p-0147","num":"0146"},"figref":"FIG. 16","b":["900","1600","304","1602","304","900"]},"1) Ownership\u2014Identifies which layer still has the ability to modify the descriptor.","2) Data segment header Buffer Address\u2014The address of the buffer containing the receive data segment header .","3) Segment Buffer\u2014Address of the buffer containing the receive data segment .","4) Channel ID\u2014Identifies the active channel that the data segment  was received in.","5) Source Network Address\u2014The network address of the sending network node .","6) Source Node Address\u2014The source node address.","7) Packet ID\u2014A unique identifier for the upper layer packet .","8) Segment ID\u2014A unique identifier for the data segment .","9) Payload Length\u2014The number of bytes in the data segment payload .","10) Socket\u2014The socket number pertaining to the data segment .","11) Cipher Flag\u2014Flag is set if the data segment  is encrypted.","12) Acknowledgement Type\u2014Specifies the acknowledgement protocol used for the data segment .","13) Payload Checksum\u2014Checksum of the data segment payload  data after any decryption is performed.","If in test  the process owns the PRSM descriptor, the process checks to see if the process owns the packet receive descriptor in test . Otherwise, the process waits in test  until PRSM descriptor is owned. The packet receive descriptor contains buffers and information to create the upper layer packet. The packet receive descriptor contains the following fields:","1) Ownership\u2014Identifies which layer still has the ability to modify the descriptor.","2) Packet Buffer\u2014Address of the buffer containing the reassembled upper layer packet.","3) Segment Offset\u2014A number indicating how many bytes of the upper layer packet  have been reassembled.","4) Channel ID\u2014Identifies the active channel that the upper layer packet was received in.","5) Source Network Address\u2014The network address of the sending network node .","6) Source Node Address\u2014The source node address.","7) Packet IDA unique identifier for the upper layer packet .","8) Packet Length\u2014The number of bytes in the upper layer packet .","9) Socket\u2014The socket number pertaining to the upper layer packet .","10) Cipher FlagFlag is set if the upper layer packet  was encrypted.","11) Redundant Segment Count\u2014The number of redundant segments received while processing the packet.","12) CRC Error Count\u2014The number of CRC errors which occurred while processing the upper layer packet .","13) Segment Mask\u2014This field is used to mask bits which allows the process to keep track of the last data segment  received.","If the process does not own the packet receive buffer in test , it will wait until one is freed for the process to use. The process may send a negative acknowledgement packet  to indicate that the receiving network node  is backed up and cannot process the data segment  immediately. Once the process owns a packet receive buffer, data segments  are processed . Step  is defined in further detail in . If in test  the data segment  was received successfully the process checks to see if a new source network number  and source node number , or packet number  were detected . If so a new process is started to reassemble the new upper layer packet . If test  was not successful, the process checks for missing data segments  so the process can keep track of the missing data segments  later . Ownership of the PRSM descriptor is returned  to the MAC layer for handling additional data segments  because processing of the data segment  is complete. Test  checks to see if all the data segments  in the upper layer packet  have been received. If all the data segments  have not been received, the process checks to see if the process owns  a PRSM descriptor. If the upper layer packet  has been fully received in test , the packet receive descriptor is updated  to indicate that the packet is complete. The packet receive descriptor's ownership is changed  so the upper layer can process the upper layer packet . The process for that upper layer packet  completes . The process repeats for the next upper layer packet  to reassemble .",{"@attributes":{"id":"p-0176","num":"0175"},"figref":["FIG. 17","FIG. 17","FIG. 18","FIG. 19","FIG. 20","FIG. 21"],"b":["900","304","1604","1700","1701","304","1701","1704","304","1702","1","703","1706","1704","304","1705","1704","1706","211","1707","0","1708","1704","304","1708","1708","1708","304","304","1710","1711","1717","1708","1709","1709","1709","304","304","304","1709","1713","304","304","304","1712","1716","1713","301","1714","1715","1716","1717"]},{"@attributes":{"id":"p-0177","num":"0176"},"figref":"FIG. 18","b":["900","304","1701","1800","1801","304","900","1802","1803","1806","1808","1803","1803","1807","1808","1803","1804","1807","1808","1806","1808","1805","1807","1808"]},{"@attributes":{"id":"p-0178","num":"0177"},"figref":"FIG. 19","b":["900","1704","1900","1901","1902","1904","1903","1905"]},{"@attributes":{"id":"p-0179","num":"0178"},"figref":"FIG. 20","b":["1708","2000","2001","304","900","2004","2003","2005"]},{"@attributes":{"id":"p-0180","num":"0179"},"figref":"FIG. 21","b":["1709","2100","2101","2102","2105","304","2102","2103","304","2104","2106"]},{"@attributes":{"id":"p-0181","num":"0180"},"figref":"FIG. 22","b":["4142","4140","4141","4140","4142","4120","4136"]},{"@attributes":{"id":"p-0182","num":"0181"},"figref":"FIG. 23","b":["4142","4142","4142","4120","4136","4120","4136","142","4136","4142","4120","4135","4137","4139","4142","4137","4139","4137","4120","4124","4138","4126","4128","4133","4139","4134","4137","4139","4140","4137","4138","4139","4140","4141","4143","4142","4140"]},"To transfer data between nodes, the user or application creates a Virtual Channel (VC) and creates an Active Channel (AC) -. However, the virtual channel is not necessary if an active channel - does not need to be persistent. A virtual channel is a grouping of devices that eventually need to communicate with each other and can use the same service type. A service type is unique identifier that represents the type of data being transferred across a network . Virtual channels contain persistent information about how to setup an active channel - when bandwidth is needed. Active channels - are created and destroyed by a network node  that is responsible for bandwidth allocation called a bandwidth master control node . A bandwidth master control node  can control but is not limited to one or more distinct networks  using the same physical medium by using a network number to identify each network . An active channel  is instantiated when a network node  responsible for the active channel  needs to create an active channel , to pass data between network nodes , ,  in a active channel . An active channel  will typically exist only as long as the network nodes ,  need bandwidth to transfer data while a virtual channel can exists permanently (or until the user or application no longer needs it). On the other hand, an active channel may stay up permanently if necessary. Virtual channels and active channels - are created via a signaling channel (which is an active channel) which is used to exchange information between nodes.","Once the network  is created, virtual channels can be created. For example, virtual channels can be created for, but are not necessarily limited to Internet connections, alarm systems, appliances, home control systems, stereo systems, voice systems, and the like. This can occur from, but is not limited to an administrative console or an application going out and identifying which network nodes ,  need to be apart of the virtual channel. A Virtual Channel Structure (VCS) is created which contains all the information necessary to create an active channel . This allows network nodes , ,  to recreate an active channel  that existed when power was lost on the network . The virtual channel structure also keeps the network  and the active channel  secure by storing the encryption key information. The process is the same whether new network node , ,  is being added to an existing virtual channel or creating a new virtual channel.",{"@attributes":{"id":"p-0185","num":"0184"},"figref":"FIG. 24","b":["4141","4139","4200","4201","4140","4141","4143","4139","4202","4141","4139","4203","4204","4140","4141","4143","4142","4140","4141","4143","4140","4141","4143","4140","4141","4143","4205","4140","4141","4141","4206","4207","4208","4207","4139","4209","4210","4210","4211","4140","4141","4143","4213","4212","4140","4141","4143","4213","4140","4141","4143","4205","4214","4212","4215","4140","4141","4143","4215","4214","4216","4217"]},{"@attributes":{"id":"p-0186","num":"0185"},"figref":["FIG. 25","FIG. 24"],"b":["4140","4141","4143","4140","4141","4143","4300","4140","4141","4143","4301","4140","4141","4143","4302","4301","4303","4139","4304","4305","4306","4307","4308","4306","4308"]},{"@attributes":{"id":"p-0187","num":"0186"},"figref":"FIG. 26","b":["4139","4400","4140","4141","4143","4401","4402","4140","4141","4143","4140","4141","4143","4140","4141","4143","4140","4141","4143","4403","4140","4141","4143","4404","4140","4141","4143","4139","4140","4141","4404","4402","4405","4140","4141","4143","4140","4141","4143"]},"In the present preferred embodiment, here are two types of active channels that can be created: A control node active channel, and a peer active channel. A control node active channel is an active channel  where there is one network node  called a control node  responsible for setting up and controlling an active channel . A peer active channel is where network nodes ,  can come and go and there is no central control node ,  or  responsible for creating an active channel . The control node responsible for a control node active channel or any node responsible for a peer active channel can be any network node  or  on the network  including the bandwidth master control node . In a control node active channel, there is one network node  that is responsible for creating, adding nodes to, and deleting nodes from an active channel . If the control node  is not active, the active channel  cannot be established.",{"@attributes":{"id":"p-0189","num":"0188"},"figref":"FIG. 27","b":["4500","4501","4140","4140","4502","4140","4141","4143","4139","4140","4141","4143","4503","4140","4140","4141","4143","4139","4504","4505","4140","4506","4508","4507","4520","4140","4141","4143","4139","4502","4506","4140","4141","4143","4508","4140","4141","4143","4139","4140","4141","4143","4140","4141","4143","4509","4140","4141","4143","4139","4140","4141","4510","4140","4141","4143","4140","4141","4143","4139","4140","4141","4143","4140","4140","4141","4143","4139","4510","4511","4141","4513","4141","4512","4141","4139","4514","4141","4513","4141","4515","4139","4141","4516","4139","4141","4518","4140","4141","4143","4139","4139","4520","4517","4141","4519","4520"]},"For peer networks, the process happens differently. This is because in a peer network, any network node  or group of network nodes , ,  can be up at any time. For this reason, any network node , ,  can initiate the process that creates an active channel . A network node ,  or  can request to be added to an active channel , but an active channel  will not be created until at least two network nodes ,  have requested to be added to the active channel .  is a flow diagram of the present preferred active channel  creation process for a peer active channel. On a peer active channel, a network node  or  can optionally go out  and see if the active channel  is up . In test  if the response is unsuccessful, the network node , ,  can decide if the network node , ,  wants to continue in test  or quit. If the network node , ,  wants to quit, the process completes . If the network node , ,  wants to continue, network node , ,  calls  the Application Programming Interface Add Me to a Channel. Step  is also called if test  is successful. If test  is unsuccessful the process completes . Otherwise, if test  is successful, the network node ,  or  starts a timer  in which the network node ,  or  looks  for the channel is up packet. If the network node , ,  receives this message the network node , ,  joins  the active channel  and the process completes . Otherwise, if there is a timeout , the network node , ,  removes  the network node's , ,  request to be added from the request queue and ends the process . This process works the same for a network node ,  or  being added after an active channel  is up. To remove an active channel , a network node ,  or  can call the remove a channel API. The bandwidth master control node  will inform each network node , ,  that is currently apart of the active channel  that the active channel  is being torn down.",{"@attributes":{"id":"p-0191","num":"0190"},"figref":["FIG. 29","FIG. 29"],"b":["4650","4140","4650","4651","4650","4650","4650","4120","4135","4650","4651","4125","4135","4651","4125","4135","4651","4120","4135","4650","4651","4650","4651","4651","4650","4650","4651","4650","4650","4650","4652","4650","4120","4135","4650","4142","4650","4650","4650","4653","4120","4124","4651","4651","4120","4135"]},{"@attributes":{"id":"p-0192","num":"0191"},"figref":"FIG. 30","b":["4651","4700","4140","4701","4120","4135","4651","4651","4120","4135","4651","4702","4140","4703","4650","4704","4120","4135","4651","4650","4650","4651","4650","4706","4651","4707","4120","4125","4651","4650","4120","4135","4650","4120","4135","4704","4120","4135","4705","4703","4705","4708","4708","4651","4709","4651","4710","4141","4711","4712","4713","4713","4711","4713","4714","4709","4651","4712","4715","4120","4135","4705","4120","4135","4716","4120","4135","4651","4713","4651","4717","4140","4650","4120","4135","4718","4650","4719","4650","4120","4135","4651","4719","4720","4650","4721","4650","4722"]},{"@attributes":{"id":"p-0193","num":"0192"},"figref":"FIG. 31","b":["4800","4140","4141","4143","4801","4802","4810","4802","4803","4804","4141","4805","4141","4806","4802","4141","4805","4807","4807","4141","4143","4808","4810","4807","4809","4802"]},{"@attributes":{"id":"p-0194","num":"0193"},"figref":"FIG. 32","b":["4141","4143","4140","4141","4143","4140","4141","4143","4140","4140","4900","4140","4141","4140","4901","4140","4141","4902"]},{"@attributes":{"id":"p-0195","num":"0194"},"figref":"FIG. 33","b":["41000","4140","4141","4143","41001","41002","41010","41002","41003","41004","4141","4143","4141","4143","41005","41006","41002","4141","4143","41005","41007","41007","4141","4143","41008","4141","4143","41010","41007","41009","41002"]},"These data transportation methods are designed so that they will run over a variety of networks, but are not limited to such types of networks as AC power line, DC power line, light frequency (fiber, infrared, light, and the like), Radio Frequency (RF) networks (wireless such as 802.11b, and the like), and wired (coax, twisted pair, and the like.).","In addition, these data transportation methods can be implemented using a variety of process, but are not limited to computer hardware, microcode, firmware, software, and the like.","The described embodiments of this invention are to be considered in all respects only as illustrative and not as restrictive. Although specific flow diagrams and segment formats are provided, the invention is not limited thereto. The scope of this invention is, therefore, indicated by the claims rather than the foregoing description. All changes, which come within the meaning and range of equivalency of the claims, are to be embraced within their scope."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF DRAWINGS","p":["In order to show the manner that the above recited and other advantages and objects of the invention are obtained, a more particular description of the preferred embodiments of this invention, which is illustrated in the appended drawings, is described as follows. The reader should understand that the drawings depict only present preferred and best mode embodiments of the invention, and are not to be considered as limiting in scope. A brief description of the drawings is as follows:",{"@attributes":{"id":"p-0051","num":"0050"},"figref":"FIG. 1","i":"a "},{"@attributes":{"id":"p-0052","num":"0051"},"figref":"FIG. 1","i":"b "},{"@attributes":{"id":"p-0053","num":"0052"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0054","num":"0053"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0055","num":"0054"},"figref":"FIG. 4","i":"a "},{"@attributes":{"id":"p-0056","num":"0055"},"figref":"FIG. 4","i":"b "},{"@attributes":{"id":"p-0057","num":"0056"},"figref":"FIG. 4","i":"c "},{"@attributes":{"id":"p-0058","num":"0057"},"figref":"FIG. 5","i":"a "},{"@attributes":{"id":"p-0059","num":"0058"},"figref":"FIG. 5","i":"b "},{"@attributes":{"id":"p-0060","num":"0059"},"figref":"FIG. 5","i":"c "},{"@attributes":{"id":"p-0061","num":"0060"},"figref":"FIG. 6","i":"a "},{"@attributes":{"id":"p-0062","num":"0061"},"figref":"FIG. 6","i":"b "},{"@attributes":{"id":"p-0063","num":"0062"},"figref":"FIG. 7","i":"a "},{"@attributes":{"id":"p-0064","num":"0063"},"figref":"FIG. 7","i":"b "},{"@attributes":{"id":"p-0065","num":"0064"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0066","num":"0065"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0067","num":"0066"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0068","num":"0067"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0069","num":"0068"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0070","num":"0069"},"figref":"FIG. 13"},{"@attributes":{"id":"p-0071","num":"0070"},"figref":"FIG. 14"},{"@attributes":{"id":"p-0072","num":"0071"},"figref":"FIG. 15"},{"@attributes":{"id":"p-0073","num":"0072"},"figref":"FIG. 16"},{"@attributes":{"id":"p-0074","num":"0073"},"figref":"FIG. 17"},{"@attributes":{"id":"p-0075","num":"0074"},"figref":"FIG. 18"},{"@attributes":{"id":"p-0076","num":"0075"},"figref":"FIG. 19"},{"@attributes":{"id":"p-0077","num":"0076"},"figref":"FIG. 20"},{"@attributes":{"id":"p-0078","num":"0077"},"figref":"FIG. 21"},{"@attributes":{"id":"p-0079","num":"0078"},"figref":"FIG. 22"},{"@attributes":{"id":"p-0080","num":"0079"},"figref":"FIG. 23"},{"@attributes":{"id":"p-0081","num":"0080"},"figref":"FIG. 24"},{"@attributes":{"id":"p-0082","num":"0081"},"figref":"FIG. 25"},{"@attributes":{"id":"p-0083","num":"0082"},"figref":"FIG. 26"},{"@attributes":{"id":"p-0084","num":"0083"},"figref":"FIG. 27"},{"@attributes":{"id":"p-0085","num":"0084"},"figref":"FIG. 28"},{"@attributes":{"id":"p-0086","num":"0085"},"figref":"FIG. 29"},{"@attributes":{"id":"p-0087","num":"0086"},"figref":"FIG. 30"},{"@attributes":{"id":"p-0088","num":"0087"},"figref":"FIG. 31"},{"@attributes":{"id":"p-0089","num":"0088"},"figref":"FIG. 32"},{"@attributes":{"id":"p-0090","num":"0089"},"figref":"FIG. 33"}]},"DETDESC":[{},{}]}
