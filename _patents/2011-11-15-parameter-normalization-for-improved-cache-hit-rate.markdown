---
title: Parameter normalization for improved cache hit rate
abstract: A normalized caching system may receive a data request from a requestor, the request associated with a requested service. The normalized caching system may generate a normalized request by modifying one or more parameters of the request. A normalized response is typically useful for servicing a wider range of subsequent requests than is a non-normalized response. The system may then check whether an entry is cached for the normalized request. If no cached entry is found, the normalized request may be submitted to the requested service, and response received in return. The normalized response may be cached using the normalized request. The response may be denormalized in order to generate a response which is provided to the requestor. When a subsequent request is received, if that subsequent request normalizes to the same normalized request, it may be fulfilled using the response stored in cache, rather than using the requested service.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08856022&OS=08856022&RS=08856022
owner: Amazon Technologies, Inc.
number: 08856022
owner_city: Reno
owner_country: US
publication_date: 20111115
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","DETAILED DESCRIPTION OF SPECIFIC EMBODIMENTS","CONCLUSION"],"p":["Many electronic services request data from other services. This may be accomplished by transmitting data in the form of a request. A request may include one or more parameters which may be used by the requested service in fulfillment of that request. Requests may occur in one or more manners, for example: (1) over an electronic network, (2) as a call to an application programming interface, (3) by writing data to a socket, file, or data store, (4) through some other data transmission, or (5) through some combination thereof. Commonly, a requested service may reply to a request with a data response. A data response may occur, for example, in one or more of the manners identified above for requests.","The transmission and fulfillment of a request may be associated with one or more costs, including time, bandwidth, processing, monetary and\/or other costs. For example, the formation, transmission, and receipt processing of a response and\/or request may result in such costs. The requested service's process of fulfilling a received request in order to create a response may additionally or alternatively result in such costs. For example, fulfillment may entail access to a slow data store, extensive use of a central processing unit, and\/or a resulting request to one or more other services.","An electronic service may occasionally have reason to make a request that is identical to one it has previously made. To reduce costs associated with the transmission and fulfillment of duplicate requests, some electronic systems store responses in cache. A system may fulfill subsequent requests which are identical to an earlier request using a cached response associated with the earlier request. However, a request which is not identical to an earlier request may not be capable of being satisfied with a cached response.","Overview","A normalized caching system may fulfill data requests using normalization and caching. In one embodiment, a normalized caching system receives a request with a plurality of parameters and normalizes one or more of the parameters in order to generate a normalized request. The system may query a cache to determine whether there is a cache hit for the normalized request. If there is a cache hit, the cached value may be used to satisfy the request. If there is no cache hit, the system may transmit the normalized request to a service and receive a response back, referred to as a normalized response. The system may cause a cache to store a value associated with the normalized response and may fulfill a subsequent request using that cached value. By normalizing requests, a normalized cache system may achieve a higher cache hit rate than a typical cache system. The normalization process typically produces a response that is useful for servicing a wider range of subsequent responses than would be a cached, non-normalized response.","Referring to , an embodiment of a system for fulfilling data requests using normalized caching is shown. For purposes of illustration, the system will be described in the context of a request for tax information. As will be recognized, the illustrated architecture and process are also applicable to requests for other types of information, such as location identification from a phone number.","As depicted in , a requestor  transmits a data request  for a sales tax amount, the parameters of the request  shown in box . A normalized caching system  receives the request  and generates a normalized request  based on it. The normalized request  includes a fixed, large, prime price amount , and address and timestamp values  which are shortened versions of corresponding values in the original request . The normalized caching system determines whether a cache  stores a value associated with the normalized request . If so, that value may be used as a normalized response to the normalized request . In , the cache  does not currently contain such a value, so the normalized caching system  transmits the normalized request  to the requested service . A normalized response ,  is received in return\u2014corresponding to a tax amount for a sale in Italy on the identified date, for the normalized price. The normalized response is cached , and denormalized by calculating a tax rate based on the normalized price and corresponding normalized tax amount. Denormalization further involves applying that calculated tax rate of 8.200000% to the request's price ,  in order to generate a response ,  which is transmitted  to the requestor .","Referring to , the same embodiment is shown when a subsequent request  is received by the normalized caching system . The subsequent request  includes some parameters  different from those of the first request  of . The normalization process in  generates a normalized request ,  equivalent to the normalized request  corresponding to the first request  of . The normalized caching system in  determines that a normalized response value ,  is cached for that normalized request , , and uses that cached value to generate a response , , .","Request","Certain components of the illustrated embodiments are now described in greater detail. Referring to , the requestor  is shown transmitting a request . The requestor may be, for example, some software service running on computer hardware. The transmission of the request  may occur by one or more means such as (1) over an electronic network (2) as a call to an application programming interface (3) by writing data to a socket, file, or data store, (4) through some other data transmission, or (5) through some combination thereof. The request  is received by a normalized caching system . In one embodiment, the normalized caching system is a collection of software services running on the same computer hardware that runs a service associated with the requestor . In another embodiment, the normalized caching system  runs on different hardware than that of the requestor . For example, the normalized caching system  may be implemented on a proxy server that acts as an intermediary between the requester  and one or more services; such a proxy server may, but need not, be local to the requestor .","In some embodiments, the normalized caching system  may serve as a proxy between the requestor  and the requested service . Furthermore, the normalized caching system  may serve as a proxy between multiple requestors and a requested service , such that normalized responses cached as a result of fulfilling a request from a first requestor may be used in fulfilling a request from a second requestor. The normalized caching system  may also perform load balancing such that a request  which it receives from a requestor  may be fulfilled by alternative services, and the normalized caching system  selects the particular service which may be used to fulfill the request , if the normalized caching system  cannot itself fulfill the request using a cache .","In the embodiment of , a single requested service  is shown. The request  may identify the requested service  which the requestor is requesting to fulfill the request . For example, the request may include a destination field with a value associated with the requested service . In another embodiment, the request does not identify, and is not associated with, any particular requested service at the time that it is transmitted by the requestor . In such an embodiment, the request  may be routed by some other service so that it reaches a service capable of fulfilling the request. In the illustrated embodiment, the request  is targeted for a requested service  which is capable of determining a sales tax amount based on the parameters of a request.","The request  is described in greater detail in box , which depicts the request's parameters as including (1) a description of the request as a request for a determination of a tax amount for a sale, (2) a sale price, of  19.95, for which a tax determination is being requested, (3) an address for the purchaser associated with the sale, 3 Via Filippo, 56126 Pisa, Italy, (4) a timestamp of 2011-10-29 15:28:34.87, corresponding to Oct. 29, 2011 at 3:28 p.m. and 34.87 seconds, the time at which the sale was made, and (5) a tax registration number of a seller associated with the sale. The request may include additional parameters. In other embodiments, requests for other types of service and\/or information may additionally or alternatively be made. Also, a request of the same description type may include different parameters and\/or parameter values as the request  of this embodiment. Another example of a request is for the name of the city corresponding to a phone number.","Normalized Caching System","As shown in , the request  transmitted by the requestor  is received by the normalized caching system . The normalized caching system  caches requests in a normalized manner such that some future requests may be fulfilled by the cache even if those future requests are not identical to any prior requests.","Normalization","A request normalization service  of the present embodiment receives the request  and, if appropriate, generates a normalized version of the request  in response. The normalized request includes one or more normalized parameters as shown in box . Some of the normalized parameters may be calculated based on one or more parameters of the request , . For example, the request normalization service  normalizes the address parameter by shortening it from a specific street address (3 Via Filippo, 56126 Pisa, Italy) to the country (Italy) contained in the street address. In the illustrated embodiment, this normalization is performed because sales tax rates vary between different European countries, but not within Italy itself. In another example, where a shipping address was located within the United States, address normalization may leave the normalized address at a more granular level, such as identifying a state and country, or zip code. In some embodiments, the normalized caching system  may access data indicating the degree of granularity necessary for various types of normalizations. For example, such data may indicate that, for Italian addresses, country identification is sufficiently descriptive for purposes of calculating a sales tax amount.","Similarly, the timestamp value of the request ,  is normalized by making it less specific. The timestamp of the request indicates the date, hour, minute, second, and fraction of a second when the relevant sale was made. However, in this embodiment sales tax amounts are treated as potentially changing between days, but not within a day. Accordingly, the request normalization service  normalizes the timestamp by generating a date-only timestamp value for the normalized request . Normalization may additionally or alternatively omit parameters from the normalized request  which were present in the request . For example, the tax registration number may not affect the sales tax amount and may therefore be omitted from the normalized request. Other parameters not shown in the request  may be similarly omitted. The description parameter of the request  remains unchanged in the normalized request .","The price parameter is normalized to the large, prime value of  15,485;863, to which the present embodiment normalizes all price amounts. In this embodiment, a large prime price is used so that the tax amount received in response will be detailed, for example by having a high degree of numeric resolution. This process of using a fixed normalization value for price may be used in the present embodiment because sales tax in the relevant region is calculated purely by applying a rate to an amount. A sales tax amount response from the requested service  may therefore be fully descriptive for calculating sales tax for other purchase amounts, as long as sufficient numeric resolution is obtained. For example, suppose the sales tax in Italy is 8.2%. The sales tax for a  1 sale would be the rounded value of 8.2% of  1, which is  0.082 rounded to  0.08. Based on a resulting  0.08 sales tax response, a service attempting to calculate a sales tax rate may calculate that an 8% sales tax was applied. If this calculated rate was used to fulfill future requests, inaccurate responses could be returned. The use of a large number may increase numeric resolution by reducing the effects of rounding. For example, the use of a normalized price amount which is as large as the largest price amount expected in responses may provide a numeric resolution sufficiently high to avoid such rounding issues. The use of a prime number may also improve numeric resolution by avoiding rounding ambiguities resulting from even division amounts. The number 15,485,863 is the one-millionth prime number and is larger than any price amount for which sales tax is expected to be calculated for in the illustrated embodiment.","In the present embodiment, all requests made on a particular day, from Italy, will be normalized to a normalized request  containing the same values. When describing a response provided by the requested service  in response to receiving a normalized request, such a response will be referred to as a normalized response . The description of the response as normalized refers to its having been provided in response to a normalized request . No normalization need be performed on the response itself for it to be considered a normalized response  in this context. Because the requested service  is expected to provide a response strictly determined by the parameters of the corresponding request, many different requests may have the same corresponding normalized request and therefore the same corresponding normalized response. In some embodiments, this mapping of different requests to a common normalized response may facilitate improved caching and response fulfillment.","Cache","Referring to , the request normalization service  provides the normalized request  to a response cache lookup service , which is in communication with a cache data store . In some embodiments, the cache  may store data on electronic hardware shared by the normalized caching system . In another embodiment, the cache  may be external to hardware hosting the normalized caching system . Additionally or alternatively, the cache  may be provided as a cloud-based service. The response cache lookup service  checks whether the cache  contains a value associated with the normalized request . For example, in , the cache  is shown as storing a normalized response of  1,497,482.95, which is keyed in the cache based on the combination of the normalized request parameters: (1) Description=Determine Tax for Sale, (2) Price= 15,485,863, (3) Address=Spain, and (4) Timestamp=2011-10-29. However, the cache  does not have a storage entry keyed by the parameters of the normalized request  associated with Italy. The response cache lookup service  therefore receives an indication from the cache  that no cache entry exists for the normalized request  provided. The normalized caching system  determines that the cache  cannot be used to satisfy the present request  and will therefore communicate with the requested service  in order to satisfy the request .","Requested Service","Referring to , A request submission service  of the normalized caching system  transmits the normalized request  to the requested service . In the illustrated embodiment, the requested service  runs on separate hardware from the normalized caching system . In another embodiment, the requested service runs on at least some hardware used by the normalized caching system. The transmission of the normalized request  may occur by one or more means such as (1) over an electronic network (2) as a call to an application programming interface (3) by writing data to a socket, file, or data store, (4) through some other data transmission, or (5) through some combination thereof.","The request submission service  is shown as receiving a normalized response , which has been explained as being a response to the normalized request  and not necessarily a value which was itself normalized. The contents of the normalized response  are shown in box . The normalized response ,  includes a sales tax amount value of  1,269,840.77. In another embodiment, a response, such as a normalized response , may include a plurality of values. For example, it may identify a national sales tax amount, a state sales tax amount, and a city sales tax amount. In the illustrated example, a single sales tax amount  is provided.","The normalized request and normalized response  are provided to a response caching service  which transmits both to the cache . The cache in  is illustrated before the cache records the normalized request and normalized response which are transmitted to it for caching . The request submission service  also provides the normalized response to a response denormalization service .","Denormalization","The response denormalization service  of the present embodiment reverses the effects of normalization such that a non-normalized response  can be provided to the request  received by the normalized caching system . The response denormalization service  calculates the tax rate for the sale as the quotient of the normalized response tax amount , over the normalized request price amount , which is  (1,269,840.77\/ 15,485,863)=8.200000%. The response denormalization service  applies that calculated rate to the request's price amount of  19.95 and calculates a response value of  19.95*8.200000%= 1.64.","The response denormalization service  may access normalization data  in performing denormalization. For example, normalization data  may store the fixed normalization price amount  used during normalizing a request's price parameter. The normalization data  may also store the pre-normalization price amount for a received request's price amount . The denormalization service may then calculate a response's  price amount using the three values (1) normalized request price amount, (2) received normalized response tax amount, and (3) pre-normalization request price amount. In other embodiments, other denormalization processes and\/or calculations may be used.","The response denormalization service  provides the response sales tax amount as part of a response . In the illustrated embodiment, a response transmission service  receives the response  provided by the response denormalization service  and formats and\/or processes the response  into a form which is transmitted  to the requestor . For example, the response transmission service  may cause the response  to adhere to one or more protocols associated with transmission to the requestor . As another example, the response transmission service  may provide the response  in the form of a return value associated with a SOAP interface.","Subsequent Request Fulfillment","Referring to , the same embodiment of  is shown at a later point in time. The requestor  transmits another request , which has parameter  indicating a different price, address, timestamp, and tax registration number than the request  of . The request normalization service  normalizes the second request  to a normalized request ,  equivalent to the normalized request for the first request. In this example, the normalized requests are equivalent because their corresponding requests both have address parameters within Italy, and timestamps for the same date. Each request's price parameter is replaced with the fixed, large, prime value of  15,485,863.","The response cache lookup service  queries the cache  for a normalized response value associated with the normalized request . The cache stores a response value  of  1,269,840.77, which is keyed by the parameters: (1) Description=Determine Tax for Sale, (2) Price= 15,485,863, and (3) Timestamp=2011-10-29. Because all three of these cache key parameters equal the parameters of the normalized request  submitted for a cache lookup, the cache  returns the normalized response amount keyed by those parameters . In this example, that value was placed in cache during the process described in reference to . The response cache lookup service  illustrated in  provides the normalized response  received from the cache  to the response denormalization service .","The response denormalization service  calculates the tax rate for the sale as the quotient of the normalized response tax amount , over the normalized request price amount , which is  (1,269,840.77\/ 15,485,863)=8.200000%. The response denormalization service  applies that calculated rate to the request's price amount of  30,681.72, which it may retrieve from the normalized data store . The resulting amount of  30,681.72*8.200000%= 2,515.90 is provided to the requestor  in the form of a response , the contents of which are shown in box .","The normalized caching system  of the illustrated embodiment is thereby capable of fulfilling some subsequent requests using a cache, even when those subsequent requests are not equivalent to previously received requests. By avoiding some subsequent transmissions to the requested service , the normalized caching system  may reduce resource costs associated with request fulfillment.","Associated Value Caching","In another embodiment, a normalized caching system  fulfills data responses using normalization and caching, but stores a value associated with a normalized response instead of, or in addition to, caching the normalized response itself. Referring to , an embodiment of such a normalized caching system  is shown. The cache  caches a tax rate  keyed by one or more normalized request parameters. The cached tax rate  may have been calculated in the manner described in reference to  for denormalizing a response value. For example, referring to , a request  is received which has the same values as the request  described in reference to . The request normalization service  of  performs the same normalization process as previously discussed for the request , resulting in an equivalent normalized request .","The rate cache lookup service  of  performs a query of a cache  in order to determine a rate to apply to a price amount. The cache query is based on a normalized partial-request . The normalized partial request  has a description of \u201cSales Tax Rate,\u201d corresponding to the sales tax rate values cached by the cache . The normalized partial request  does not include a price amount parameter because the sales tax rate in this embodiment is not affected by the amount of a sale. At the time illustrated by , the cache  stores a single cache entry, which has a set of normalized partial-request parameters as its key: (1) Description=Sales Tax Rate, (2) Address=Spain, and (3) Timestamp=2011-10-29. The sales tax rate value cached under this key is 9.670000%.","The rate cache lookup service receives a response  that no cache entry was found corresponding to the queried normalized partial-request . The request submission service  then transmits the normalized request ,  to the requested service , and receives a normalized response , . The response denormalization service  receives the normalized response , , and denormalizes it in the same manner described with reference to . The resulting response is transmitted to the requestor , as with . However, the response denormalization service  of  provides the rate caching service  with different information to cache as compared to the response denormalization service  of .","In the embodiment of , the response denormalization service provides the calculated sales tax rate of 8.200000% to a rate caching service , in addition to the parameters associated with a normalized partial-request. The rate caching service  causes the cache  to store a new entry, with a sales tax rate value of 8.200000%, keyed by the parameter set: (1) Description=Sales Tax Rate, (2) Address=Italy, and (3) Timestamp=2011-10-29. The cache in  is shown before that new entry is stored by the cache .","Referring to , the same embodiment of  is shown at a later point in time. The cache  stores the tax rate entry  which was described as being calculated and submitted for caching with reference to . Referring to , a new request ,  is received, having the same parameters as the request ,  described in reference to . The normalized caching system  normalizes the request ,  to create a normalized request , . The rate cache lookup service  queries the cache  to determine whether an entry is stored under the key (1) Description=Sales Tax Rate, (2) Address=Italy, and (3) Timestamp=2011-10-29. The rate cache lookup service  receives the sales tax rate of 8.200000% in response  to the query .","The response denormalization service  uses the rate obtained from the cache  in order to determine the response value . In this embodiment, the denormalization service applies the rate to the request price  which is associated with the normalized partial-request  under which the rate was keyed in the cache . The denormalization in this embodiment therefore does not require the manipulation of normalized value. The response denormalization service  calculates that the response  has a sales tax amount equal to the product of the request price  and the sales tax rate . That is, the response is equal to  30,681.72*8.200000%= 2,515.90. A response  which includes this sales tax amount is transmitted to the requestor .","In some embodiments, a cache data store  may store only some portions of a normalized response , or data associated with one or more portions of a normalized response . Additionally or alternatively, a normalized caching system  may cache some normalized responses for which a corresponding value is not already cached, but may also not cache other normalized responses for which a corresponding value is not already cached. For example, caching may be performed for normalized requests associated with books, but not for normalized requests associated with computers. In another embodiment, whether a normalized caching service normalizes a request may be affected by the contents of that request. For example, a request for the determination of a tax amount might not be normalized if an address value in that request corresponds to a tax jurisdiction which uses a non-linear tax rate.","Request Fulfillment","Referring to , an illustration of one embodiment of a process for fulfilling data requests using parameter normalization and caching is shown. The process begins when a data request for a service is received . The received request includes a plurality of parameters. . A normalized request is generated, the normalized request including one or more normalized parameters . The process next performs a cache lookup for an entry corresponding to the normalized request . A determination is made as to whether the cache lookup was successful . If the cache lookup was not successful, the normalized response is submitted to an associated service . A determination is made whether a return value was received from the associated service . If no such return value was received, a failure response is transmitted in response to the data request for service . If a return value was received from the associated service, that return value is cached with the normalized response as its key . The returned value is used as a normalized response , which is denormalized in order to generate a response . If the earlier cache lookup had been successful, the cached value would have been used as the normalized response , and would be denormalized in order to generate a response . The response is then transmitted in response to the request for data service .","Normalization Verification and Training","In one embodiment, a normalized caching system performs normalization verification by submitting both a request and a corresponding normalized request, to a service for fulfillment. The normalized caching system may receive a response to the request, and a normalized response to the normalized request. The system may perform denormalization on the normalized response in order to generate a denormalized response. It may then compare the denormalized response to the response in order to verify the normalization and denormalization process. If the denormalized response is not equivalent to the response, normalization and\/or denormalization may be determined to be faulty and may be adjusted and\/or ceased for certain circumstances. For example, normalization verification may be used in combination with systematically altering certain parameters which are being normalized in order to determine which parameter normalization is responsible for the general normalization fault.","Alternatively or additionally, an embodiment may perform normalization training in order to adjust the extent to which it normalizes various request parameters. For example, a normalized caching system may train the extent to which it normalizes an address parameter value. The training process may involve selecting a certain extent of normalization, such as removing a street address and leaving in place a city, state, and country. A plurality of requests and their corresponding normalized requests may be submitted and the corresponding responses and normalized responses received. Normalized responses may be denormalized. The system may determine whether the normalization was accurate based on whether some denormalized responses are equivalent compared to their corresponding responses. If no fault is detected, the normalization process may be adjusted by increasing the extent of normalization\u2014for example, by removing street address and city information from requests. The same submission and determination process may be followed, and repeated, until an extent of verification is reached which introduces fault. The most recent verification adjustment may be reversed in order to revert back to the last fault-free normalization level. Normalization training may thereby seek to maximize the extent of normalization which may be implemented without introducing fault, and may thus improve the benefits of normalized caching.","Certain embodiments have been described in which cache entries are keyed according to, at least in part, a timestamp and\/or date value. In some examples, a cache cleanup service may remove cache entries which are considered expired. For example, in an embodiment where request normalization includes normalizing a timestamp to a date field, a cache cleanup service may run at regular intervals and remove cache entries which are keyed according to values more than a day or two old. This may occur because the normalized caching system  in such an embodiment may expect that most requests which it receives will be for recently completed purchases, and cache entries keyed by an old date will rarely be queried for.","The normalized caching system  may be implemented as computing system that is programmed or configured to perform the various functions described herein. The computing system may include multiple distinct computers or computing devices (e.g., physical servers, workstations, storage arrays, etc.) that communicate and interoperate over a network to perform the described functions. Each such computing device typically includes a processor (or multiple processors) that executes program instructions or modules stored in a memory or other non-transitory computer-readable storage medium. The various functions disclosed herein may be embodied in such program instructions, although some or all of the disclosed functions may alternatively be implemented in application-specific circuitry (e.g., ASICs or FPGAs) of the computer system. Where the computing system includes multiple computing devices, these devices may, but need not, be co-located. The results of the disclosed methods and tasks may be persistently stored by transforming physical storage devices, such as solid state memory chips and\/or magnetic disks, into a different state. A normalized caching system may be implemented as part of an online marketplace or store that processes orders place by users over the Internet. In such an embodiment, the requestor may be an order processing component associated with the online marketplace. A normalized caching system may include a request receipt service which receives incoming requests from requestors. For example, a request receipt service may comprise software for processing one or more protocols associated with the request, or may provide a Simple Object Access Protocol (\u201cSOAP\u201d) interface associated with the normalized caching system. The request receipt service may process and\/or reformat a request and provide the request in a format capable of being received by a request normalization service. In other embodiments, a normalized a normalization service is the first point at which a request is received and\/or processed by a normalized caching system.","Each of the services shown in  may be implemented in an appropriate combination of computer hardware and software, or in application-specific circuitry. For example, each such service may be implemented in service code executed by one or more physical servers or other computing devices. The service code may be stored on non-transitory computer storage devices or media. The various data repositories , ,  may include persistent data storage devices (hard drives, solid state memory, etc.) that store the disclosed data, and may include associated code for managing such data.","Although the inventions have been described in terms of certain preferred embodiments, other embodiments will be apparent to those of ordinary skilled in the art, including embodiments that do not include all of the features and benefits set forth herein. Accordingly, the invention is defined only by the appended claims. Any manner of software designs, architectures or programming languages can be used in order to implement embodiments of the invention. Components of the invention may be implemented in distributed, cloud-based, and\/or web-based manners.","Conditional language used herein, such as, among others, \u201ccan,\u201d \u201cmight,\u201d \u201cmay,\u201d \u201ce.g.,\u201d and the like, unless specifically stated otherwise, or otherwise understood within the context as used, is generally intended to convey that certain embodiments include, while other embodiments do not include, certain features, elements and\/or states. Thus, such conditional language is not generally intended to imply that features, elements and\/or states are in any way required for one or more embodiments or that one or more embodiments necessarily include logic for deciding, with or without author input or prompting, whether these features, elements and\/or states are included or are to be performed in any particular embodiment."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The accompanying drawings, which are incorporated in and form a part of this specification, illustrate example embodiments of the inventive subject matter, and in no way limit the scope of protection. Other embodiments are contemplated using alternate hardware and\/or software platforms. The accompanying drawings illustrate embodiments wherein:",{"@attributes":{"id":"p-0006","num":"0005"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0007","num":"0006"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":["FIG. 4","FIG. 2"]},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 5"}]},"DETDESC":[{},{}]}
