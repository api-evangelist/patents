---
title: Persistent authorization context based on external authentication
abstract: Methods and systems are provided to allow users that are authenticated by a trusted external service to gain controlled levels of access to selected local computing resources without requiring the user to also have conventional access control capabilities for the resources.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07401235&OS=07401235&RS=07401235
owner: Microsoft Corporation
number: 07401235
owner_city: Redmond
owner_country: US
publication_date: 20020510
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["RELATED PATENT APPLICATIONS","TECHNICAL FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION","SUMMARY"],"p":["The present patent application is related to U.S. patent application Ser. No. 09\/886,146, titled \u201cMethods And Systems For Controlling The Scope Of Delegation Of Authentication Credentials\u201d, filed Jun. 20, 2001, which is hereby incorporated by reference.","This invention relates generally to computer access control, and more particularly to methods and systems for providing a local system authorization context for a user based on an external authentication of the user.","Access control is paramount to computer security. To protect the integrity of computer systems and the confidentiality of important data, various access control schemes have been implemented to prevent unauthorized users and malicious attackers from gaining access to computer resources.","To ensure the comprehensiveness of computer security, access control is often implemented on various levels. For instance, on the level of one computer, a user is typically required to go through a logon procedure in which the computer determines whether the user is authorized to use the computer. In addition, on the level of a computer network, a user is commonly required to go through a user-authentication process for purposes of controlling the user's access to various network services. Even after a network access control server has authenticated the user, the user may still have to request a permit for a specific server in order to access that service. Various schemes based on different protocols, such as the Kerberos 5 protocol, have been proposed and implemented for controlling network access control by means of user authentication.","Generally, the user logon for a computer and the user authentication for network access control are two separate procedures. Nevertheless, to minimize the burden on a user in dealing with the different access control schemes, the user logon and the user authentication for network access are sometimes performed together. For example, in the case where the user authentication is implemented under the Kerberos protocol, when the user logs on the computer, the computer may also initiate a Kerberos authentication process. In the Kerberos authentication process, the computer contacts a Kerberos Key Distribution Center (KDC) to first obtain a ticket-granting ticket (TGT) for the user. The computer can then use the TGT to obtain, from the KDC, a session ticket for itself. As networks have evolved, there has been a trend to have multiple tiers of server\/service computers arranged to handle client computer requests. A simple example is a client computer making a request to a World Wide Web website via the Internet. Here, there may be a front-end web server that handles the formatting and associated business rules of the request, and a back-end server that manages a database for the website. For additional security, the web site may be configured such that an authentication protocol forwards (or delegates) credentials, such as, e.g., the user's TGT, and\/or possibly other information from the front-end server to a back-end server. This practice is becoming increasingly common in many websites, and\/or other multiple-tiered networks.","Delegation and other like techniques are useful when all of the servers\/services and the client agree to use the same authentication process. There is not, however, just one authentication process in use today. Co-pending U.S. patent application Ser. No. 09\/886,146 presents improvements for controlling the delegation.","If the user is authenticated for a network\/system, then there is usually one or more additional authorization access control checks to prevent the user from accessing resources that he\/she is not authorized to access. Once a user has been authenticated and passed the applicable access control checks, the user is said to be \u201cauthorized\u201d. In certain systems, for example, access control is based on having access control lists (ACLs) for the various services and resources (i.e., objects). An ACL usually includes access control entries (ACEs), in which zero or more security identifiers (SIDs) may be included. SIDs may be associated with one user or groups of users allowed to access the object. If there are no SIDs in the ACL, then no user will have access to the object. If there are SIDs in the ACL, then users that can produce at least one matching SID will be allowed to access the object.","Thus, when an authenticated user logs on, an authentication context is created for the user, for example, by generating a token (e.g., an access token) that is associated with the user. The token typically includes SIDs that are associated with the user. For example, the user's token may include a unique SID assigned to the user plus a group SID assigned to the user's business department. When the user attempts to access an object the object's ACL is compared to the user's token. If the user's token includes at least one SID that matches a SID within the object's ACL, then the authenticated user is authorized to access the object in some manner. For example, the user may have read and write permissions for a file generated by other members of his\/her business department (i.e., another group member).","Such authorization schemes tend to work very well for systems that are carefully controlled and managed. For example, an enterprise level computer network within a corporation usually provides a cohesive environment wherein the users and ACLs can be carefully controlled by a centralized and\/or distributed authentication and access control system. On the other hand, for very large networks, e.g., the Internet, and\/or otherwise significantly non-cohesive networks, authentication and access control can be much more difficult, especially when there is a desire to serve as many of the users as possible, including users that do not have local access control accounts. As software programs and resources migrate towards network-based services, the need to be able to authorize user activity associated with such network services will further increase.","Consequently, there is a need for improved authorization methods and systems. Preferably the methods and systems will allow users that are authenticated by a trusted external resource to gain some controlled level of access to certain objects without requiring the user to also have a unique user account associated with the object. Moreover, the methods and systems should not significantly degrade the scalability of arrangements that are capable of providing access to objects for very large numbers of users.","Improved methods and systems are provided herein, which allow users that are authenticated by a trusted external resource to gain controlled levels of access to selected objects without requiring the user to also have a unique local user account. The methods and systems can be implemented without significantly degrading the scalability of computer system and\/or network arrangements that are configured to provide access to various resources for very large numbers of users.","The above stated needs and others may be satisfied, for example, by a method for providing access control to at least one computing resource. The method includes receiving a unique identifier that is associated with a user seeking access to the computing resource(s). Preferably, the unique identifier has been generated by another computing resource that is deemed trustworthy and\/or serves and often authenticates the user in some manner. The method includes translating the received unique identifier into a security identifier (SID) that is suitable for use with the access control mechanism protecting the computing resource(s). The method further includes determining if the SID matches at least one other SID that was previously stored by the access control mechanism and is associated with the computing resource(s). In certain exemplary implementations, the unique identifier includes a pair wise unique identifier (PUID), such as, e.g., that used by Passport services provided by Microsoft Corp., and the access control mechanism uses an access control list (ACL) to establish users or groups of users allowed to access the computing resource(s)","In accordance with certain other implementations of the present invention, a method is provided for establishing access control permissions to at least one computing resource. Here, the method includes receiving at least one electronic mail (e-mail) address for at least one user that is to be granted at least limited access to the computing resource(s). For example, a user that is authorized by the access control mechanism may input an e-mail address of another user and specify the computer resource(s) to be accessed and\/or privileges that this other user will have when accessing the computer resource(s). The method further includes providing the e-mail address to a trustworthy service capable of returning a unique identifier associated with the user based on the e-mail address. The method includes receiving the unique identifier and then setting at least one access control permission based on the unique identifier. This may include, e.g., translating the unique identifier into a SID and associating the SID with at least one access control list ACL for the computing resource(s).","In accordance with still other aspects of the present invention, a method for translating a PUID into a corresponding SID is provided. The method includes receiving the PUID, subdividing it into at least one sub authority identifier portion and at least one member identifier portion, and arranging the sub authority identifier portion and the member identifier portion to form the SID.","A system for controlling access to at least one computing resource is also provided, in accordance with certain implementations of the present invention. The system includes logic and memory that are configurable to receive a unique identifier associated with a user that is to be provided access to the computing resource(s), translate the unique identifier into a security identifier (SID), and determine if the SID matches at least one other SID that is stored in the memory and associated with the computing resource(s).","Certain exemplary systems are provided for setting access control permissions for the computing resource(s). One system includes a communication network connecting a first device and at least one other device. The first device is configured to accept an e-mail address for at least one user that is to be granted at least limited access to the computing resource(s), provide the e-mail address to the other device over the network, receive from the other device over the network a corresponding unique identifier associated with the e-mail address, and set at least one access control permission associated with the computing resource(s) based on the unique identifier. The other device is configured to receive the e-mail address over the network, convert the e-mail address to the unique identifier, and output the unique identifier to the first device over the network.","Overview","Some exemplary methods and systems are described herein that can be implemented in authenticating users\/resources and\/or providing an authorization context for users attempting to gain access to certain resources.","The next section describes an exemplary computing environment. The sections after that briefly describe exemplary S4U2proxy and S4U2self techniques that are the subjects of co-pending U.S. patent application Ser. No. 09\/886,146.","Thereafter, techniques are described and shown in the accompanying drawings for providing a novel authorization scheme in accordance with certain aspects of the present invention. Improved methods and systems are provided, for example, which allow client services (e.g., users) that are authenticated by a trusted external service to gain controlled levels of access to selected local server resources without requiring the client service to also have a local access control capability. As will become apparent, the authorization schemes described herein can be employed in a variety of ways to improve the security of computing resources and the ability of users to gain access to services provided by the computing resources.","Exemplary Computing Environment","Turning to the drawings, wherein like reference numerals refer to like elements, the invention is illustrated as being implemented in a suitable computing environment. Although not required, the invention will be described in the general context of computer-executable instructions, such as program modules, being executed by a personal computer. Generally, program modules include routines, programs, objects, components, data structures, etc. that perform particular tasks or implement particular abstract data types. Moreover, those skilled in the art will appreciate that the invention may be practiced with other computer system configurations, including hand-held devices, multi-processor systems, microprocessor based or programmable consumer electronics, network PCs, minicomputers, mainframe computers, and the like. The invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment, program modules may be located in both local and remote memory storage devices.",{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 1","b":"120"},"Exemplary computing environment  is only one example of a suitable computing environment and is not intended to suggest any limitation as to the scope of use or functionality of the improved methods and systems described herein. Neither should computing environment  be interpreted as having any dependency or requirement relating to any one or combination of components illustrated in computing environment .","The improved methods and systems herein are operational with numerous other general purpose or special purpose computing system environments or configurations. Examples of well known computing systems, environments, and\/or configurations that may be suitable include, but are not limited to, personal computers, server computers, thin clients, thick clients, hand-held or laptop devices, multiprocessor systems, microprocessor-based systems, set top boxes, programmable consumer electronics, network PCs, minicomputers, mainframe computers, distributed computing environments that include any of the above systems or devices, and the like.","As shown in , computing environment  includes a general-purpose computing device in the form of a computer . The components of computer  may include one or more processors or processing units , a system memory , and a bus  that couples various system components including system memory  to processor .","Bus  represents one or more of any of several types of bus structures, including a memory bus or memory controller, a peripheral bus, an accelerated graphics port, and a processor or local bus using any of a variety of bus architectures. By way of example, and not limitation, such architectures include Industry Standard Architecture (ISA) bus, Micro Channel Architecture (MCA) bus, Enhanced ISA (EISA) bus, Video Electronics Standards Association (VESA) local bus, and Peripheral Component Interconnects (PCI) bus also known as Mezzanine bus.","Computer  typically includes a variety of computer readable media. Such media may be any available media that is accessible by computer , and it includes both volatile and non-volatile media, removable and non-removable media.","In , system memory  includes computer readable media in the form of volatile memory, such as random access memory (RAM) , and\/or non-volatile memory, such as read only memory (ROM) . A basic input\/output system (BIOS) , containing the basic routines that help to transfer information between elements within computer , such as during start-up, is stored in ROM . RAM  typically contains data and\/or program modules that are immediately accessible to and\/or presently being operated on by processor .","Computer  may further include other removable\/non-removable, volatile\/non-volatile computer storage media. For example,  illustrates a hard disk drive  for reading from and writing to a non-removable, non-volatile magnetic media (not shown and typically called a \u201chard drive\u201d), a magnetic disk drive  for reading from and writing to a removable, non-volatile magnetic disk  (e.g., a \u201cfloppy disk\u201d), and an optical disk drive  for reading from or writing to a removable, non-volatile optical disk  such as a CD-ROM\/R\/RW, DVD-ROM\/R\/RW\/+R\/RAM or other optical media. Hard disk drive , magnetic disk drive  and optical disk drive  are each connected to bus  by one or more interfaces .","The drives and associated computer-readable media provide nonvolatile storage of computer readable instructions, data structures, program modules, and other data for computer . Although the exemplary environment described herein employs a hard disk, a removable magnetic disk  and a removable optical disk , it should be appreciated by those skilled in the art that other types of computer readable media which can store data that is accessible by a computer, such as magnetic cassettes, flash memory cards, digital video disks, random access memories (RAMs), read only memories (ROM), and the like, may also be used in the exemplary operating environment.","A number of program modules may be stored on the hard disk, magnetic disk , optical disk , ROM , or RAM , including, e.g., an operating system , one or more application programs , other program modules , and program data .","The improved methods and systems described herein may be implemented within operating system , one or more application programs , other program modules , and\/or program data .","A user may provide commands and information into computer  through input devices such as keyboard  and pointing device  (such as a \u201cmouse\u201d). Other input devices (not shown) may include a microphone, joystick, game pad, satellite dish, serial port, scanner, camera, etc. These and other input devices are connected to the processing unit  through a user input interface  that is coupled to bus , but may be connected by other interface and bus structures, such as a parallel port, game port, or a universal serial bus (USB).","A monitor  or other type of display device is also connected to bus  via an interface, such as a video adapter . In addition to monitor , personal computers typically include other peripheral output devices (not shown), such as speakers and printers, which may be connected through output peripheral interface .","Computer  may operate in a networked environment using logical connections to one or more remote computers, such as a remote computer . Remote computer  may include many or all of the elements and features described herein relative to computer .","Logical connections shown in  are a local area network (LAN)  and a general wide area network (WAN) . Such networking environments are commonplace in offices, enterprise-wide computer networks, intranets, and the Internet.","When used in a LAN networking environment, computer  is connected to LAN  via network interface or adapter . When used in a WAN networking environment, the computer typically includes a modem  or other means for establishing communications over WAN . Modem , which may be internal or external, may be connected to system bus  via the user input interface  or other appropriate mechanism.","Depicted in , is a specific implementation of a WAN via the Internet. Here, computer  employs modem  to establish communications with at least one remote computer  via the Internet .","In a networked environment, program modules depicted relative to computer , or portions thereof, may be stored in a remote memory storage device. Thus, e.g., as depicted in , remote application programs  may reside on a memory device of remote computer . It will be appreciated that the network connections shown and described are exemplary and other means of establishing a communications link between the computers may be used.","Summary of Exemplary S4U2Proxy and S4U2Self Delegation Techniques","This description will now briefly focus on certain techniques for controlling the scope of delegation of authentication credentials in a client-server network environment. In this example, a Kerberos based system is described. These S4U2Proxy and S4U2Self techniques and the subsequently described authorization techniques may or may not be implemented in the same systems and a may also be implemented in other certificate-based authentication systems.","As mentioned above, having possession of a client's ticket granting ticket (TGT) and associated authenticator allows the holder to request tickets on behalf of the client from the trusted third-party, e.g., a key distribution center (KDC). Such unconstrained delegation is currently supported in certain implementations of Kerberos that have forwarded ticket delegation schemes.","With this in mind, U.S. patent application Ser. No. 09\/886,146 describes methods and systems to constrain or otherwise better control the delegation process. The delegation process can be controlled through a service-for-user-to-proxy (S4U2proxy) technique that allows a server or service, such as, e.g., a front-end server\/service, to request service tickets on behalf of a client for use with other servers\/services. The S4U2proxy protocol advantageously provides for constrained delegation in a controllable manner that does not require the client to forward a TGT to the front-end server. Another technique is a service-for-user-to-self (S4U2self) protocol that allows a server to request a service ticket to itself, but with the client's identity being provided in the resulting service ticket. This allows, for example, a client that has been authenticated by other authentication protocols to receive a service ticket that can be used with the S4U2proxy protocol to provide constrained delegation. There are two exemplary forms to the S4U2self technique, namely a \u201cno evidence\u201d form and an \u201cevidence\u201d form. In the no evidence form, the server is trusted to authenticate the client, for example, using another security\/authentication mechanism that is private to the server. In the evidence form, the KDC (or a trusted-third-party) makes the authentication based on information (evidence) provided about the client obtained when the client authenticated to the server.","A client may therefore access servers\/services within a Kerberos environment regardless as to whether the client has been authenticated by Kerberos or some other authentication protocol. Consequently, back-end and\/or other servers\/services can be operated in an essentially Kerberos only environment.","Reference is now made to the block diagram in , which depicts an S4U2proxy protocol\/process within a client-server environment . As shown, a client  is operatively coupled to a trusted third-party  having an authentication service , e.g., a KDC, a certificate granting authority, a domain controller, and\/or the like. Authentication service  is configured to access information maintained in a database . Client  and trusted third-party  are further operatively coupled to a server, namely server A . Note, as used herein, the terms server and service are used intermixable to represent the same or similar functionality.","In this example, server A  is a front-end server to a plurality of other servers. Thus, as depicted, server A  is operatively coupled to server B  and server C . As illustrated, server B  may be a replicated service. Also, server C  is further operatively coupled to a server D .","In response to a user logging on at client , an authentication request (AS_REQ) message  is sent to authentication service , which responds with an authentication reply (AS_EP) message . Within AS_REP message , is a TGT associated with the user\/client. The same or similar procedure (not illustrated) is followed to authenticate server A .","When client  wants to access server A , client  sends a ticket granting service request (TGS_REQ) message  to authentication service , which returns a ticket granting service reply (TGS_REP) message . TGS_REP message  includes a service ticket associated with client  and server A . Subsequently, to initiate a communication session, client  forwards the service ticket to server A , in an application protocol request (AP_REQ) message . Such processes\/procedures are well known, and as such are not disclosed herein in greater detail.","In certain systems, to support delegation the client would need to provide server A  with the client's TGT to allow server A  to request additional service tickets on behalf of client . This is not necessary with the S4U2proxy protocol. Instead, when server A  needs to access another server on behalf of client , for example, server C , then server A  and authentication service  operate according to the S4U2proxy protocol.","Server A  sends a TGS_REQ message  to authentication service . TGS_REQ message  includes the TGT for server A  and the service ticket received from client , and identifies the desired or targeted server\/service to which client  is seeking access, e.g., server C . In Kerberos, for example, there is a defined extensible data field, which is typically referred to as the \u201cadditional tickets\u201d field. This additional tickets field can be used in the S4U2proxy protocol to carry the service ticket received from client , and a KDC options field can include a flag or other indicator that instructs the receiving KDC to look in the additional tickets field for a ticket to be used to supply a client identity. Those skilled in the art will recognize that these or other fields and\/or data structures can be used to carry the necessary information to authentication service .","In processing TGS_REQ , authentication service  determines if client  has authorized delegation, for example, based on the value of a \u201cforwardable flag\u201d established by client . Thus, delegation per client is enforced by the presence of the forwardable flag in the client's service ticket. If client  does not want to participate in delegation, then the ticket is not flagged as forwardable. Authentication service  will honor this flag as a client initiated restriction. Authentication service  may access additional information in database  that defines selected services that server A  is allowed to delegate to (or not delegate to) with respect to client .","If authentication service  determines that server A  is allowed to delegate to the targeted server\/service, then a TGS_REP message  is sent to server A . TGS_REP message  includes a service ticket for the targeted server\/service. This service ticket appears as if client  requested it directly from authentication service , for example, using the client's TGT. However, this was not done. Instead, authentication service  accessed the similar\/necessary client information in database  after being satisfied that the authenticated client is essentially involved in the request based on the service ticket that authenticated server A  received from client  and included in TGS_REQ message . However, since the client information is carried in the client's ticket, the server only needs to copy the data from the ticket.","In certain implementations TGS_REP message  identifies the targeted server\/service and client , and further includes implementation-specific identity\/user\/client account data, e.g., in the form of a privilege attribute certificate (PAC), a security identifier, a Unix ID, Passport ID, a certificate, etc. A PAC, for example, may be generated by authentication service , or simply copied from the client's service ticket that was included in TGS_REQ message . The use of a Passport ID will be further described in the exemplary authorization context generating schemes presented below.","PAC or other user\/client account data may also be configured to include information relating to the scope of delegation. Thus, for example,  is an illustrative diagram depicting selected portions of a Kerberos message  having a header  and a PAC . Here, PAC  includes delegation information . As illustrated, delegation information  includes compound identity information  and access restriction information .","Compound identity information  may, for example, include recorded information about the delegation process, such as, e.g., an indication regarding the fact that server A  requested the service ticket on behalf of user\/client . Here, a plurality of such recorded information may be provided that can be used to string together or otherwise identify the history over multiple delegation processes. Such information may be useful for auditing purposes and\/or access control purposes.","Access restriction information  may be used, for example, in conjunction with an access control mechanism to selectively allow access to certain servers\/services provided that client  has either directly or indirectly through server A  sought to access the serer\/service, but not if the server\/service is being indirectly sought through server B . This feature adds additional control over the delegation of authentication credentials.","In the above examples client  was authenticated by authentication service . However, it is recognized that other clients may not be so authenticated. An example of such a situation is depicted in . Here, a client  has been authenticated using a different authentication protocol mechanism . For example, authentication protocol mechanism  may include Passport, secure sockets layer (SSL), NTLM, Digest, or other like authenticating protocols\/procedures. Here, in this example, it is assumed that client  chooses to access a targeted service, which just so happens to be provided by server C . This choice can be satisfied using the above-described S4U2proxy protocol, but only after server A  has completed\/followed an S4U2self protocol\/procedure.","One basic premise with the S4U2self protocol is that the server, e.g., server A , is able to request a service ticket to itself for any user\/client that is accessing the server and which the server has authenticated. The exemplary S4U2self protocol described herein is configured to support clients that have authenticating \u201cevidence\u201d and clients that do not have such authenticating evidence.","In the absence of authentication evidence that can be evaluated by authentication service , server A  will need to come to \u201ctrust\u201d client . Thus, for example, if client  has an authentication certificate or like mechanism  that server A  is able to validate, then the client  may be determined to be \u201ctrusted\u201d. Hence, server A  is essentially authenticating client .","Next, server A  sends a TGS_REQ message  to authentication service  requesting a service ticket to itself for client . In response, authentication service  generates a TGS_REP message  that includes the requested service ticket. The received service ticket is then used in a subsequent S4U2proxy protocol\/procedure to request a service ticket to server C  for client . In certain Kerberos implementations, for example, this requires that a forwardable flag in the TGS_REP message  be set to allow forwarding of the service ticket. The trusted third-party may also build a PAC for client , which can then be included in the resulting service ticket If evidence of the authentication does exist for a client \u2032, then server A  can include such evidence in a TGS REQ message  as additional pre-authentication data. This is illustratively depicted in environment \u2032 in . Here, evidence information  is provided by client \u2032 to server A . Evidence information  may include, for example, a challenge\/response dialog, or other, information generated by another \u201ctrusted\u201d entity. Upon receipt of evidence information  and subsequent validation, authentication service  will grant the requested service ticket to server A  itself. It is noted, that in certain implementations, with the use of evidence it may be possible for the server to obtain a restricted TGT for the client.","In certain Kerberos implementations, the forwardable flag in the TGS_REP message  will be set to allow forwarding of the service ticket. If a PAC was provided in TGS_REQ message , then it can be used in the service ticket; otherwise, a PAC may be generated by authentication service  (here, a KDC) based on evidence information . For example, in S4U2self, the identity of the client is included in the pre-authentication data. This identity can be used in the construction of the PAC for that client and added to the issued service ticket to the server (for the client).","Exemplary Authorization Context Generating Techniques","The description will now focus on exemplary methods and systems in accordance with certain implementations of the present invention. These methods and systems may be implemented with or without the use of the S4U2proxy and\/or S4U2self protocols. These methods and systems may be implemented with or without the use of Kerberos. These methods and systems may be implemented with or without the use of Passport services (provided by Microsoft Corp. of Redmond, Wash.). Those skilled in the art will recognize that the techniques may be implemented using a variety of other protocols and\/or services. Nevertheless in these examples, it will be assumed that these protocols and services are available to support the authorization context generating techniques, if needed.","Reference is now made to , which is an illustrative block diagram depicting certain features\/functions\/processes relating to a client-server network arrangement  that is capable of providing an authorization context for users that would not otherwise have authorization to access certain resources.","As shown, a server X  is operatively coupled to a server Y , a first client  associated with user #1 (U1), and a second client  associated with user #2 (U2). In this example, there are several trust relationships between these devices, as represented by dashed line boxes ,  and . Thus, client  and server X  are configured to form trust relationship  when U1 logons to client  and server X , for example, to access a resource provided by server X , such as, object . This logon procedure may include authentication and access control. Similarly, client  and server Y  are configured to form trust relationship  when U2 logons to client  and server Y. Further, in this example, server X  and server Y  are able to form trust relationship  via trusted third party . Notice, however, that at this point there is no trust relationship between client  and server X .","A process will now be described using  and later  to illustrate certain aspects of the present invention that allow client  to have an authorization context with server X  that allows U2 to gain access to object . Arrows next to sequential numerical identifiers within a small circle illustratively represent the process acts. Some of the acts may occur in a different order in other implementations.","Act #0 is the creation of trust relationships , , and  as described above. Such trust relationships may be selectively created as needed for certain operations.","In this example, it is assumed that U1 desires to allow U2 to access object . While U1 is authorized through trust relationship  to access object , U2 is not authorized to access object  at this time. Moreover, there is a further desire to avoid adding U2 as another authorized user to the access control system of server X . This situation can arise, for example, when U1 desires to allow U2 to access U1's online planning calendar that is hosted or otherwise provided through U1's employer. Here, the employer does not want to add a new authorized user account to its system.","Reference is made to , which is a block diagram  showing certain representative features associated with a graphical user interface (GUI) provided to U1 through client . In this example, a web page  or like screen is displayed for U1 after logging on to server X . Within web page  object  presents a calendar GUI  that displays information about U1. U1 is able to open up an entry form  that includes an identifier entry field  and (optionally) one or more selectable permission settings . This is where U1 will initiate the process that will eventually allow U2 to gain access to object . U1 enters an identifier for U2. In this example, the identifier includes the unique World Wide Web electronic mail address for U2, namely, user2@hotmail.com. The identifier entered here is for a registered user of the hotmail.com services provided by Microsoft Corp. As a registered user of hotmail.com, U2 is presumed to also have a corresponding Passport account with Microsoft Corp. U1 may also define one or more permission settings  for U2 with regard to the access granted to object  (here, e.g., an online planning calendar application). Currently, U1 has set permissions for U2 to have read permission. Returning now to , this user identification process is represented by act #1 between client  and server X .","Server X  recognizes that U1 has provided a hotmail.com identifier for U2, and in act #2, communicates with server Y , which in this case is presumed to be a well-known Passport server. Here, server X  provides the identifier user2@hotmail.com to server Y  and requests that server Y  provide a corresponding universally unique Passport user identity (PUID) (also often referred to as a Pair wise Unique ID). In act #3, server Y  returns the PUID () for U2. If trust relationship  is a Kerberos based relationship, then the PUID can be returned, for example, in a PAC as previously mentioned.","Server X  now has the PUID for U2. In act #4, server X  translates the PUID into a corresponding SID  suitable for use with the native authentication system of server X . As illustrated, object  is associated with an ACL , having at least one ACE  that includes SID .","The 64-bit PUID is actually composed of a 16-bit Passport domain authority identifier and a 48-bit member identifier. To form a SID it is desirable to maintain the domain authority as a separate value. To do this, the MemberIDHigh is separated into two parts and the parts are formed as separate sub authorities, for example, as shown below:\n\nS-1-10-21-(HIWORD (MemberIDHigh))-(LOWORD (MemberIDHigh))-MemberIDLow-0\n\nIn this example, \u201cS-1-10-21\u201d is a new identifier authority defined by ntseapi.h. In this exemplary implementation, ntseapi.h is a header file used to build the Microsoft\u00ae Windows\u00ae operating system that contains the definition for this SID value used to construct the PUID-SID. Note that this header would not usually be not directly exposed to developers. However, the declarations in ntseapi.h are published publicly in the Platform SDK in winnt.h.\n","Thus, an exemplary SID that is created from the PUID or other like identifier returned from a \u201ctrusted\u201d source, essentially identifies the well-known sub authority and the member user in a unique combination and in a format compatible with the native authorization system.","In act #5, U2 logons (is authenticated) to server Y  and in doing so receives PUID . In act#6, U2 connects to server X  using a default (e.g., unknown or anonymous) user account and provides information (e.g., in the PAC) including PUID  in a request or other like message. In act #7, server X  recognizes that a PUID has been provided by this default user (U2) and in response builds a corresponding SID  that is then placed in a token  associated with the default user (U2) who is seeking access to object . In certain implementations, a SID is built by passing the PUID to an application programming interface (API) called LsaLogonUser. This API returns the SID.","In act #8, server X  determines if this default user (U2) has appropriate access permission(s) to access object  by comparing one or more SID(s) in the default user's token  with those in ACL . Here, SID  from token  would match SID  in ACE . Consequently, in act #9, an authentication context  is created for U2, which allows U2 to access object  in accordance with the applicable permission settings. Hence, for example, U2 could view (read) the planning calendar of U1 and determine if U1 and U2 might be able to have lunch together next week. U2 did not logon to server X ; indeed U2 cannot logon to server X  since U2 does not have an account, as does U1. Authentication of U2 in this case is essentially based on trust relationships ,  and , and the initial authentication of U2 using client  and server Y . Access control of U2 to server X  is granted based essentially on the trusted authorization of U1 (through client  and server X  in Act #0) and trust relationship with server Y  in providing PUID  in act #3.","One of the benefits to using the PUID is that the resulting SID will be globally unique and persistent based on the controlled assignment of PUIDs by Passport.","Although some preferred implementations of the various methods and systems of the present invention have been illustrated in the accompanying Drawings and described in the foregoing Detailed Description, it will be understood that the invention is not limited to the exemplary embodiments disclosed, but is capable of numerous rearrangements, modifications and substitutions without departing from the spirit of the invention as set forth and defined by the following claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["A more complete understanding of the various methods and systems of the present invention may be had by reference to the following detailed description when taken in conjunction with the accompanying drawings wherein:",{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 3A"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 3B"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":["FIG. 6","FIG. 5"]}]},"DETDESC":[{},{}]}
