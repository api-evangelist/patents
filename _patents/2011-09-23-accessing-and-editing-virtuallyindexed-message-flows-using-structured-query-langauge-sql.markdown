---
title: Accessing and editing virtually-indexed message flows using structured query langauge (SQL)
abstract: At least one message flow file that stores a message flow is read by a processor. The message flow stored within the at least one message flow file is parsed. The message flow is organized within a memory as a message flow database structure. Entries within the message flow database structure represent nodes, connections, and properties used by the message flow. The message flow database structure is edited in response to receipt of a structured query language (SQL) statement that specifies a change to the message flow database structure.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09372902&OS=09372902&RS=09372902
owner: INTERNATIONAL BUSINESS MACHINES CORPORATION
number: 09372902
owner_city: Armonk
owner_country: US
publication_date: 20110923
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","BRIEF SUMMARY","DETAILED DESCRIPTION"],"p":["The present invention relates to message flows. More particularly, the present invention relates to accessing and editing virtually-indexed message flows using structured query language (SQL).","A message flow file is used to describe a message flow. The message flow described within the message flow file includes nodes that are used to process a message via the message flow, properties of the nodes, and connections between the nodes. The message flow file may also describe other objects in a message flow, such as sticky notes or other objects.","A method includes reading, via a processor, at least one message flow file that stores a message flow; parsing the message flow stored within the at least one message flow file; organizing the message flow within a memory as a message flow database structure, where entries within the message flow database structure represent nodes, connections, and properties used by the message flow; and editing the message flow database structure in response to receipt of a structured query language (SQL) statement that specifies a change to the message flow database structure.","A system includes a memory and a processor programmed to read at least one message flow file that stores a message flow; parse the message flow stored within the message flow file; organize the message flow within the memory as a message flow database structure, where entries within the message flow database structure represent nodes, connections, and properties used by the message flow; and edit the message flow database structure in response to receipt of a structured query language (SQL) statement that specifies a change to the message flow database structure.","A computer program product includes a computer readable storage medium including computer readable program code, where the computer readable program code when executed on a computer causes the computer to read at least one message flow file that stores a message flow; parse the message flow stored within the at least one message flow file; organize the message flow within a memory as a message flow database structure, where entries within the message flow database structure represent nodes, connections, and properties used by the message flow; and edit the message flow database structure in response to receipt of a structured query language (SQL) statement that specifies a change to the message flow database structure.","The examples set forth below represent the necessary information to enable those skilled in the art to practice the invention and illustrate the best mode of practicing the invention. Upon reading the following description in light of the accompanying drawing figures, those skilled in the art will understand the concepts of the invention and will recognize applications of these concepts not particularly addressed herein. It should be understood that these concepts and applications fall within the scope of the disclosure and the accompanying claims.","The subject matter described herein provides for accessing and editing of virtually-indexed message flows using structured query language (SQL). The present subject matter provides a virtual index of message flows. The virtual index of message flows is accessible using SQL statements. As such, the structure and contents of message flows may be queried and edited using a language-based approach rather than text editing the message flow files. Requests to process message flows are detected. A virtually-indexed message flow database structure is created, either directly or using a database connectivity driver. The virtually-indexed message flow database structure is created from a message flow that is either stored within one or more message flow files in a workspace storage location or from a message flow that is deployed within a message broker runtime environment. SQL statements are processed against the virtually-indexed message flow database structure, and any updates are applied to the virtually-indexed message flow database structure. The original message flow may be overwritten either within the workspace storage location or within a message broker runtime environment, or one or more new message flow files may be created in response to any changes to the message flow.","The present subject matter provides a message flow processing tool that may be executed either by a command line invocation or within a graphical user interface (GUI). A message flow or set of message flows are detected and received as inputs (e.g., in response to selection by a user) to the message flow processing tool. The message flow or set of message flows may be specified by reference to one or more message flow files. The message flow processing tool reads in the message flow(s), parses the message flow(s), and arranges the objects within the message flow into a database structure. The database structure may be created within an actual database or may be a \u201cvirtual\u201d database structure that allows message flows to be accessed from message flow files stored within a workspace without loading the message flows into an actual database.","As such, for purposes of the present description, the database structure will be referred to as a \u201cvirtual database\u201d or \u201cvirtual database structure\u201d because there is no requirement for the database structure formed from the message flow files to be instantiated or installed into an actual database for access and editing of message flows. Additionally, the phrase \u201cvirtual database structure\u201d is used for convenience of reference to SQL processing. As such, the phrase \u201cvirtual database structure\u201d should not be considered limiting and may be considered one possible example implementation of a \u201cvirtual index\u201d of message flows. Accordingly, these phrases may be considered interchangeable for purposes of the present description. It should be understood that other formats for a virtual index of message flows are possible and all are considered within the scope of the present subject matter. It is further understood that the \u201cvirtual database,\u201d \u201cvirtual database structure,\u201d and \u201cvirtual index\u201d of message flows will exist and be operated upon within a memory device.","The virtual database structure is arranged with linked tables for flows, nodes, nodes properties, and other aspects of the respective message flow(s). The entries in the virtual database structure are linked such that the nodes in a given flow are linked to the respective entry for the flow in the respective flow table. For example, a node may be represented as a table, with properties represented as columns and connections represented as relationships between nodes.","With the virtual database structure created that links elements of the message flow, SQL statements may be processed against the virtual database structure. Users may input SQL syntax commands to perform queries on the data contained within the represented message flow(s). The user may select objects from the tables, and processing may be performed to provide information about the respective objects. SQL statements may be received and processed to update or insert rows into the tables. These update or insert commands may be processed to modify or add objects to the respective message flow(s). In response to an indication that the user has made all intended changes to the message flow(s) using SQL statement(s), the message flow processing tool will use the tables in the virtual database structure to update the original message flow file(s) or create one or more new message flow files that include the message flow(s) and changes to the message flow(s).","It should be understood that a virtual database structure may be organized within an actual database without departure from the scope of the present subject matter. The virtual database structure may alternatively be implemented within any memory device appropriate for a given implementation.","It should be noted that using SQL processing to access and edit message flows provides a stable platform for message flow editing that may reduce message flow editing complexity while improving user message flow editing efficiency. For example, an SQL expression may be executed that queries all queue names from all MQInput nodes in all message flows (e.g., using a SELECT statement). Equally, an SQL expression may be executed that adds a prefix to all input queue names across all message flows (e.g., using an UPDATE statement). As such, a user may rapidly modify message flows without concern for syntactic errors at the message flow level because the message flow processing tool manages message flow syntax changes in response to SQL commands received from the user. Many other examples of use of SQL to access and edit virtually-indexed message flows are possible and all are considered within the scope of the present subject matter.","As such, the present subject matter provides a variety of technological approaches for accessing and editing virtually-indexed message flows using SQL. As one example, a virtual database driver may be used to access and edit message flows within message flow files stored within an underlying workspace using SQL. Because the message flow files are accessed within the underlying workspace, the message flows do not have to be loaded into a temporary database to allow execution of SQL statements within this example implementation. Alternatively, message flows may be loaded from message flow files into a temporary\/virtual database for execution of the SQL statements.","As another alternative, message flows deployed within a message broker runtime environment may be queried and directly manipulated within the runtime environment using SQL statements. In such an implementation, the present subject matter may be implemented, for example, as an open database connectivity (ODBC) driver or a Java\u2122 programming language database connectivity (JDBC) database driver by using an operational management application programming interface (API) within a message broker application (e.g., CMP API). Within this form of implementation, the respective database driver may be considered a \u201cvirtual\u201d database driver that actually accesses files in the underlying workspace. One parameter that may be passed to the virtual database driver may include a workspace location where the message flow(s) are stored. The message flow processing tool may process the files, against which the SQL expressions may be executed, without loading the message flows into a temporary database.","As such, message flows may be accessed in a variety of formats and environments. Further, message flows may be queried and edited using SQL independently of the particular format or environment associated with the message flow.","It should be noted that conception of the present subject matter resulted from recognition of certain limitations associated with editing message flows stored within one or more message flow files. Conventional message flow editing requires a user to utilize a text editor or a toolkit associated with a message flow creation package to edit message flow files. However, certain aspects of a message flow, such as connections between nodes, are difficult to identify and edit using these conventional methods. Additionally, message flow toolkits are only available for certain operating system platforms. Additionally, an advanced user may not wish to install a message flow toolkit even if their operating system supports the toolkit application. The present subject matter improves message flow and message flow file access and editing by utilizing a structured query language (SQL) to access and edit virtually-indexed message flows within one or more message flow files. It was additionally recognized that SQL provides an intuitive syntax that may be used for message flow editing. As such, new message flow users may directly perform operations on a message flow without having to learn how to use a message flow software application or toolkit. As such, improved message flow and message flow file access and editing may be obtained via accessing and editing of virtually-indexed message flows using SQL as described herein.","The accessing and editing of virtually-indexed message flows using structured query language (SQL) described herein may be performed in real time to allow prompt access and editing of message flows. For purposes of the present description, real time shall include any time frame of sufficiently short duration as to provide reasonable response time for information processing acceptable to a user of the subject matter described. Additionally, the term \u201creal time\u201d shall include what is commonly termed \u201cnear real time\u201d\u2014generally meaning any time frame of sufficiently short duration as to provide reasonable response time for on-demand information processing acceptable to a user of the subject matter described (e.g., within a portion of a second or within a few seconds). These terms, while difficult to precisely define are well understood by those skilled in the art.",{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 1","b":["100","1","102","104","106","1","108","110","1","102","104","1","108","110"]},"The respective devices may implement the automated accessing and editing of virtually-indexed message flows using structured query language (SQL) locally within a local memory of the respective device(s) using a virtual database or virtual database driver, as described in more detail below. Alternatively, the respective devices may implement the automated accessing and editing of virtually-indexed message flows using structured query language (SQL) using an actual database, such as the database .","As will be described in more detail below in association with  through , the automated accessing and editing of virtually-indexed message flows using structured query language (SQL) is based upon formation of virtual indexes of message flows stored in message flow files and the use of SQL to access and edit the message flow. The present subject matter alleviates a learning curve that may be associated with message broker applications and alleviates complexity that may be associated with text editing of message flow files.","It should be noted that the computing device_  through the computing device_N  may be portable computing devices, either by a user's ability to move the respective computing device to different locations, or by the computing device's association with a portable platform, such as a plane, train, automobile, or other moving vehicle. It should also be noted that the respective computing devices may be any computing device capable of processing information as described above and in more detail below. For example, the computing device_  through the computing device_N  may include devices such as a personal computer (e.g., desktop, laptop, etc.), or any other device capable of processing information as described in more detail below.","The network  may include any form of interconnection suitable for the intended purpose, including a private or public network such as an intranet or the Internet, respectively, direct inter-module interconnection, dial-up, wireless, or any other interconnection mechanism capable of interconnecting the respective devices.","The server_  through the server_M  may include any device capable of providing data for consumption by a device, such as the computing device_ , via a network, such as the network . As such, the server_  through the server_M  may each include a web server, application server, or other data server device.",{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 2","b":["200","200","1","102","104","1","108","110","200"]},"As such, for any of the examples herein, it is understood that any aspect of functionality described with respect to any one device that is described in conjunction with another device (e.g., sends\/sending, etc.) is to be understood to concurrently describe the functionality of the other respective device (e.g., receives\/receiving, etc.).","A central processing unit (CPU)  provides computer instruction execution, computation, and other capabilities within the core processing module . A display  provides visual information to a user of the core processing module  and an input device  provides input capabilities for the user.","The display  may include any display device, such as a cathode ray tube (CRT), liquid crystal display (LCD), light emitting diode (LED), electronic ink displays, projection, touchscreen, or other display element or panel. The input device  may include a computer keyboard, a keypad, a mouse, a pen, a joystick, or any other type of input device by which the user may interact with and respond to information on the display .","A communication module  provides interconnection capabilities that allow the core processing module  to communicate with other modules within the system . The communication module  may include any electrical, protocol, and protocol conversion capabilities useable to provide the interconnection capabilities. Though the communication module  is illustrated as a component-level module for ease of illustration and description purposes, it should be noted that the communication module  may include any hardware, programmed processor(s), and memory used to carry out the functions of the communication module  as described above and in more detail below. For example, the communication module  may include additional controller circuitry in the form of application specific integrated circuits (ASICs), processors, antennas, and\/or discrete integrated circuits and components for performing communication and electrical control activities associated with the communication module . Additionally, the communication module  may include interrupt-level, stack-level, and application-level modules as appropriate. Furthermore, the communication module  may include any memory components used for storage, execution, and data processing for performing processing activities associated with the communication module . The communication module  may also form a portion of other circuitry described without departure from the scope of the present subject matter.","A memory  includes a message flow storage area  that stores one or more message flow files for processing within the core processing module . The message flow storage area  may also operate as a message flow virtual index processing area, as described above and in more detail below. As will be described in more detail below, message flows stored within the message flow storage area  may be formed into a virtual index for access and editing using SQL statements.","A virtual database area  provides virtual database capabilities for virtual indexing of message flows stored within the message flow storage area  for implementations where the message flows within the message flow file(s) are accessed and editing using a virtual database driver. As such, the virtual database area  represents a memory area for processing of message flows using a virtual database driver.","A message broker runtime environment  provides execution space for a message broker application. The message broker application may be executed within the message broker runtime environment  by the CPU .","It is understood that the memory  may include any combination of volatile and non-volatile memory suitable for the intended purpose, distributed or localized as appropriate, and may include other memory segments not illustrated within the present example for ease of illustration purposes. For example, the memory  may include a code storage area, an operating system storage area, a code execution area, and a data area without departure from the scope of the present subject matter.","A message flow processing module  is also illustrated. The message flow processing module  provides virtually-indexed message flow processing capabilities for the core processing module , as described above and in more detail below. The message flow processing module  implements the automated accessing and editing of virtually-indexed message flows using structured query language (SQL) of the core processing module . The message flow processing module  represents one possible implementation of the message flow processing tool described herein.","Though the message flow processing module  is illustrated as a component-level module for ease of illustration and description purposes, it should be noted that the message flow processing module  may include any hardware, programmed processor(s), and memory used to carry out the functions of this module as described above and in more detail below. For example, the message flow processing module  may include additional controller circuitry in the form of application specific integrated circuits (ASICs), processors, and\/or discrete integrated circuits and components for performing communication and electrical control activities associated with the respective devices. Additionally, the message flow processing module  may include interrupt-level, stack-level, and application-level modules as appropriate. Furthermore, the message flow processing module  may include any memory components used for storage, execution, and data processing for performing processing activities associated with the module.","It should also be noted that the message flow processing module  may form a portion of other circuitry described without departure from the scope of the present subject matter. Further, the message flow processing module  may alternatively be implemented as an application stored within the memory . In such an implementation, the message flow processing module  may include instructions executed by the CPU  for performing the functionality described herein. The CPU  may execute these instructions to provide the processing capabilities described above and in more detail below for the core processing module . The message flow processing module  may form a portion of an interrupt service routine (ISR), a portion of an operating system, a portion of a browser application, or a portion of a separate application without departure from the scope of the present subject matter.","The database  is also shown associated with the core processing module  within  to show that the database  may be coupled to the core processing module  without requiring external connectivity, such as via the network .","The CPU , the display , the input device , the communication module , the memory , the message flow processing module , and the database  are interconnected via an interconnection . The interconnection  may include a system bus, a network, or any other interconnection capable of providing the respective components with suitable interconnection for the respective purpose.","While the core processing module  is illustrated with and has certain components described, other modules and components may be associated with the core processing module  without departure from the scope of the present subject matter. Additionally, it should be noted that, while the core processing module  is described as a single device for ease of illustration purposes, the components within the core processing module  may be co-located or distributed and interconnected via a network without departure from the scope of the present subject matter. For a distributed arrangement, the display  and the input device  may be located at a kiosk or other location, while the CPU  and memory  may be located at a local or remote server. Many other possible arrangements for components of the core processing module  are possible and all are considered within the scope of the present subject matter. Accordingly, the core processing module  may take many forms and may be associated with many platforms.",{"@attributes":{"id":"p-0049","num":"0048"},"figref":["FIG. 3","FIG. 3"],"b":["300","300","212"]},"As described above, several variations of technological approaches for accessing and editing virtually-indexed message flows using SQL are possible. As one example, a virtual database driver may be used to access and edit message flows within message flow files stored within an underlying workspace, such as within the message flow storage area  of the memory , using SQL. Because the message flow files are accessed within the underlying workspace, the message flows do not have to be loaded into a temporary database, such as the database , to allow execution of SQL statements within this example implementation. Alternatively, message flows may be loaded from message flow files into a temporary\/virtual database, such as a virtual database formed within the virtual database area , for execution of the SQL statements.","As another example\/alternative, message flows deployed within a message broker runtime environment, such as the message broker runtime environment , may be queried and directly manipulated within that runtime environment using SQL statements. In such an implementation, the present subject matter may be implemented, for example, as an open database connectivity (ODBC) driver or a Java\u2122 programming language database connectivity (JDBC) database driver by using an operational management application programming interface (API) within a message broker application (e.g., CMP API) executed by the CPU . Within this form of implementation, the respective database driver may be considered a \u201cvirtual\u201d database driver that actually accesses files in the underlying workspace. One parameter that may be passed to the virtual database driver may include a workspace location where the message flow(s) are stored, such as the message flow storage area . The message flow processing module  may process the files, against which the SQL expressions may be executed, without loading the message flows into a temporary database, such as the database .","As such, message flows may be accessed in a variety of formats and environments. Further, message flows may be queried and edited using SQL independently of the particular format or environment associated with the message flow.","Returning to the description of the example message flow  of , a message queue input (MQ Input) node  is shown interconnected with a compute node  via a connection . The connection  connects an output terminal  of the MQ Input node  to an input terminal  of the compute node .","The compute node  is interconnected with a message queue output (MQ Output) node  via a connection . The connection  connects an output terminal  of the compute node  to an input terminal  of the MQ Output node .","The compute node  is also interconnected with a File Output node  via a connection . The connection  connects the output terminal  of the compute node  to an input terminal  of the File Output node .","As described above, the example message flow  of  may be captured and represented syntactically for storage and processing of SQL statements against the message flow . As such, for purposes of the present example, the message flow  is represented within the following example pseudo syntax that may be stored in a file, such as within the message flow storage area  of the memory . A graphic file named \u201cPatent_flow.gif\u201d represents the message flow  as described above and as illustrated within .","Node names are represented within the following example pseudo syntax (e.g., \u201cMQ Input\u201d for the MQ Input node ) as captured by a computing device from the entered graphic format shown within . Each node is given a node identifier (ID) assigned by the syntactic capture process (e.g., \u201cFCMComposite_1_1\u201d for the MQ Input node  and \u201cFCMComposite_1_3\u201d for the compute node ).","Each connection is also assigned a connection ID (e.g., \u201cFCMConnection_1\u201d for the connection ). The node IDs are used within the connections syntax area to define the connections between the respective nodes (e.g., where the connection  is represented by xmi:id=\u201cFCMConnection_1\u201d and the target compute node  is represented as targetNode=\u201cFCMComposite_1_3\u201d and the source MQ Input node  is represented as sourceNode=\u201cFCMComposite_1_1\u201d). The source and target terminals are also represented within the connection syntax (e.g., sourceNode=\u201cFCMComposite_1_1\u201d for the output terminal  and targetTerminalName=\u201cInTerminal.in\u201d for the input terminal ). It should additionally be noted that a compute expression is identified within the example pseudo syntax for the compute node  (e.g., computeExpression=\u201cesql:\/\/routine\/#Patent_flow_Compute.Main\u201d). The remainder of the node and connection syntax capture may be properly understood in view of the examples described above.","Comment blocks\/tags are added to identify the node and connection sections within the following example pseudo syntax for ease of location of these syntax areas. The following pseudo syntax illustrates one possible capture of a syntactic representation of the example message flow .",{"@attributes":{"id":"p-0060","num":"0059"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<?xml version=\u201c1.0\u201d encoding=\u201cUTF-8\u201d?>"},{"entry":"<ecore:EPackage xmi:version=\u201c2.0\u201d"},{"entry":"\u2003xmlns:xmi=http:\/\/www.domain.org\/XMI"},{"entry":"\u2003\u2003\u2003xmlns:ComCompanyCompute.msgnode=\u201cComCompanyCompute.msgnode\u201d"},{"entry":"\u2003\u2003\u2003xmlns:ComCompanyFileOutput.msgnode=\u201cComCompanyFileOutput.msgnode\u201d"},{"entry":"\u2003\u2003\u2003xmlns:ComCompanyMQInput.msgnode=\u201cComCompanyMQInput.msgnode\u201d"},{"entry":"\u2003\u2003\u2003xmlns:ComCompanyMQOutput.msgnode=\u201cComCompanyMQOutput.msgnode\u201d"},{"entry":"\u2003\u2003\u2003xmlns:ecore=\u201chttp:\/\/www.eclipse.org\/emf\/2002\/Ecore\u201d"},{"entry":"\u2003\u2003\u2003xmlns:eflow=\u201chttp:\/\/www.Company.com\/wbi\/2005\/eflow\u201d"},{"entry":"\u2003\u2003\u2003xmlns:utility=\u201chttp:\/\/www.Company.com\/wbi\/2005\/eflow_utility\u201d"},{"entry":"\u2003\u2003\u2003nsURI=\u201cPatent_flow.msgflow\u201d"},{"entry":"\u2003\u2003\u2003nsPrefix=\u201cPatent_flow.msgflow\u201d>"},{"entry":"<eClassifiers xmi:type=\u201ceflow:FCMComposite\u201d name=\u201cFCMComposite_1\u201d>"},{"entry":"\u2003\u2003<eSuperTypes href=\u201chttp:\/\/www.Company.com\/wbi\/2005\/eflow#\/\/FCMBlock\u201d\/>"},{"entry":"\u2003\u2003<translation xmi:type=\u201cutility:TranslatableString\u201d key=\u201cPatent_flow\u201d"},{"entry":"\u2003\u2003\u2003\u2003\u2003bundleName=\u201cPatent_flow\u201d pluginId=\u201cMainFlowOnly\u201d\/>"},{"entry":"\u2003\u2003<colorGraphic16 xmi:type=\u201cutility: GlFFileGraphic\u201d"},{"entry":"\u2003\u2003\u2003\u2003\u2003resourceName="},{"entry":"\u2003\u2003\u2003\u2003\u2003\u201cplatform:\/plugin\/MainFlowOnly\/icons\/full\/obj16\/Patent_flow.gif\u201d\/>"},{"entry":"\u2003\u2003<colorGraphic32 xmi:type=\u201cutility: GIFFileGraphic\u201d"},{"entry":"\u2003\u2003\u2003\u2003\u2003resourceName="},{"entry":"\u2003\u2003\u2003\u2003\u2003\u201cplatform:\/plugin\/MainFlowOnly\/icons\/full\/obj30\/Patent_flow.gif\u201d\/>"},{"entry":"\u2003\u2003<!-- Comment: BEGINNING OF MESSAGE FLOW COMPOSITION -->"},{"entry":"\u2003\u2003<composition>"},{"entry":"\u2003\u2003\u2003\u2003\u2003<!-- Comment: BEGINNING OF NODE DEFINITIONS -->"},{"entry":"\u2003\u2003\u2003\u2003\u2003<nodes xmi:type=\u201cComCompanyMQInput.msgnode:FCMComposite_1\u201d"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003xmi:id=\u201cFCMComposite_1_1\u201d location=\u201c125,121\u201d"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003queueName=\u201cIn\u201d>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003<translation xmi:type=\u201cutility:ConstantString\u201d"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003string=\u201cMQ Input\u201d\/>"},{"entry":"\u2003\u2003\u2003\u2003\u2003<\/nodes>"},{"entry":"\u2003\u2003\u2003\u2003\u2003<nodes"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003xmi:type=\u201cComCompanyMQOutput.msgnode:FCMComposite_1\u201d"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003xmi:id=\u201cFCMComposite_1_2\u201d location=\u201c458,62\u201d"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003queueName=\u201cOut\u201d>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003<translation xmi:type=\u201cutility:ConstantString\u201d string=\u201cMQ Output\u201d\/>"},{"entry":"\u2003\u2003\u2003\u2003\u2003<\/nodes>"},{"entry":"\u2003\u2003\u2003\u2003\u2003<nodes xmi:type=\u201cComCompanyCompute.msgnode:FCMComposite_1\u201d"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003xmi:id=\u201cFCMComposite_1_3\u201d location=\u201c278,121\u201d"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003computeExpression=\u201cesq1:\/\/routine\/#Patent_flow_Compute.Main\u201d>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003<translation xmi:type=\u201cutility:ConstantString\u201d string=\u201cCompute\u201d\/>"},{"entry":"\u2003\u2003\u2003\u2003\u2003<\/nodes>"},{"entry":"\u2003\u2003\u2003\u2003\u2003<nodes"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003xmi:type=\u201cComCompanyFileOutput.msgnode:FCMComposite_1\u201d"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003xmi:id=\u201cFCMComposite_1_4\u201d location=\u201c453,182\u201d>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003<translation xmi:type=\u201cutility:ConstantString\u201d string=\u201cFile Output\u201d\/>"},{"entry":"\u2003\u2003\u2003\u2003\u2003<\/nodes>"},{"entry":"\u2003\u2003\u2003\u2003\u2003<!-- Comment: BEGINNING OF CONNECTION DEFINITIONS -->"},{"entry":"\u2003\u2003\u2003\u2003\u2003<connections xmi:type=\u201ceflow:FCMConnection\u201d"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003xmi:id=\u201cFCMConnection_1\u201d targetNode=\u201cFCMComposite_1_3\u201d"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003sourceNode=\u201cFCMComposite_1_1\u201d"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003sourceTerminalName=\u201cOutTerminal.out\u201d"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003targetTerminalName=\u201cInTerminal.in\u201d\/>"},{"entry":"\u2003\u2003\u2003\u2003\u2003<connections xmi:type=\u201ceflow:FCMConnection\u201d"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003xmi:id=\u201cFCMConnection_2\u201d targetNode=\u201cFCMComposite_1_2\u201d"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003sourceNode=\u201cFCMComposite_1_3\u201d"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003sourceTerminalName=\u201cOutTerminal.out\u201d"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003targetTerminalName=\u201cInTerminal.in\u201d\/>"},{"entry":"\u2003\u2003\u2003\u2003\u2003<connections xmi:type=\u201ceflow:FCMConnection\u201d"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003xmi:id=\u201cFCMConnection_3\u201d targetNode=\u201cFCMComposite_1_4\u201d"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003sourceNode=\u201cFCMComposite_1_3\u201d"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003sourceTerminalName=\u201cOutTerminal.out1\u201d"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003targetTerminalName=\u201cInTerminal.in\u201d\/>"},{"entry":"\u2003\u2003\u2003\u2003\u2003<\/composition>"},{"entry":"\u2003\u2003\u2003\u2003\u2003<propertyOrganizer\/>"},{"entry":"\u2003\u2003\u2003\u2003\u2003<stickyBoard\/>"},{"entry":"\u2003<\/eClassifiers>"},{"entry":"<\/ecore:EPackage>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},{"@attributes":{"id":"p-0061","num":"0060"},"figref":["FIGS. 4A-4B","FIG. 4A","FIG. 4B"],"b":["400","214","210","400","400"]},"Due to space constraints within the drawing area, the syntax of the compute expression shown within the example pseudo syntax above for the compute node  (e.g., computeExpression=\u201cesql:\/\/routine\/#Patent_flow_Compute.Main\u201d) is abbreviated (e.g., computeExpression=X). It is understood that the variable X is equivalent to \u201cesql:\/\/routine\/#Patent_flow_Compute.Main\u201d for purposes of the present examples. It is also understood that the syntax within the example pseudo syntax above is considered to be stored within the virtual database structure  for purposes of the present example.","Additionally, the portions of the identifiers that are represented as \u201cComCompany\u201d (e.g., ComCompanyMQInput.msgnode:FCMComposite_1) are also abbreviated (e.g., MQInput.msgnode:FCMComposite_1) to omit the \u201cComCompany\u201d portion of the respective identifiers due to space constraints within , but are understood to be represented as shown within the example pseudo syntax above and are entered in abbreviated form within .","It should additionally be noted that certain fields shown within  are directly copied into the respective data fields of the virtual database structure  from the example pseudo syntax above with certain modifications for space limitations, such as those described above. The content of these fields may be identified by comparison with the example pseudo syntax above. As such, a detailed description of the mapping is self-documenting by reference to the example pseudo syntax above and is not described in detail herein for brevity.","Within , three example tables are illustrated. It should be noted that other tables may be used and that additional tables may be generated from the example pseudo syntax. These additional tables may include, for example, a higher-level database table that includes a connections row, a flow properties row, a flows row, a node properties row, and a nodes row. The three example tables of  are provided for purposes of presenting the technique described herein for creating the virtual database structure . It is understood that a person of ordinary skill may create all tables from the example pseudo syntax based upon the three tables that are detailed within , and as such, the remaining tables are not illustrated for brevity.","With reference to , a node table  is shown created within the virtual database area  of the memory  from the example pseudo syntax above, and stores, within a virtual database format, node information for the nodes defined within the node definitions portion of the example pseudo syntax. A first column titled \u201cID\u201d stores a numeric node identifier of the respective nodes. A last column (far right) titled \u201cNODE ID\u201d stores the node identifier from the example pseudo syntax for each of the respective nodes. As such, the \u201cID\u201d column in conjunction with the \u201cNODE ID\u201d column form a mapping between the example pseudo syntax and the virtual database structure  for purposes of node identification and correlation with the example pseudo syntax.","A \u201cNODE NAME\u201d column stores a numeric node name for the respective nodes. A \u201cNODE TYPE\u201d column stores a type identifier that is referenced for the respective nodes within the example pseudo syntax described above. A \u201cNODE PROPERTY\u201d column is also populated with node property information from the example pseudo syntax above for each of the respective nodes. The File Output Node  represented in the last row does not have any properties listed because there are no properties listed within the example pseudo syntax for this node. A \u201cNODE LOCATION\u201d column includes graphical coordinates for the respective nodes within the representation of . However, it is understood that  is not drawn to scale and the represented location information is based upon the contents of the example pseudo syntax above.","A connection contents table  is illustrated that includes connection information. A column titled \u201cID\u201d stores a connection identifier for the respective connections that are represented. A column titled \u201cFLOW USING CONNECTION\u201d stores an identifier (ID) of the flow with which the connection table  is associated in the \u201cflow\u201d table (not shown). However, it is understood that a flow table may include a row for each flow, with columns that reference the respective node, connection, and properties tables of the respective flows. A \u201cCONNECTION SOURCE NODE\u201d column and a \u201cCONNECTION TARGET NODE\u201d column represent the respective node identifiers from the \u201cID\u201d column of the node table  for the respective nodes. A \u201cCONNECTION SOURCE TERMINAL\u201d and \u201cCONNECTION TARET TERMINAL\u201d column store terminal names represented and copied from the example pseudo syntax above.","With reference to , a node properties table  is shown created within the virtual database area  of the memory  from the example pseudo syntax above, and stores, within a virtual database format, node property information for the nodes defined within the node definitions portion of the example pseudo syntax. A first column titled \u201cID\u201d stores an identifier that represents a property identifier for the respective node properties. A \u201cNODE USING PROPERTY\u201d column stores node identifiers from the node table  for the respective nodes that have the respective node properties. A \u201cNODE PROPERTY NAME\u201d column stores a property name for the respective properties. Two options are possible for this column, \u201cnodes\u201d and \u201ctranslation.\u201d Reference to the example pseudo syntax above shows the node property via a \u201cnodes\u201d tag pair for each node and shows a translation property via a \u201ctranslation\u201d tag pair for each node. A \u201cNODE PROPERTY VALUE\u201d column stores the content associated with the respective tag pairs for each node referenced within the node properties table . It should be noted that the fields of the \u201cNODE PROPERTY VALUE\u201d column are also cross referenced within the node table  described above.","As such,  provide example tables within a virtual database format that are a part of the virtual database structure . It is understood that additional tables may be created from the example pseudo syntax above. As such, each such additional table is considered within the scope of the present subject matter. It is also understood that SQL statements may be issued against the virtual database structure  and that values of the respective column\/row combinations may be returned and\/or modified by the SQL statements. As such, the virtual database structure  provides an improved technique for editing message flows. Further, as described above, any changes to the message flow represented within the virtual database structure  may be written to one or more message flow files, and the changed message flow may be implemented or modified within a runtime environment.",{"@attributes":{"id":"p-0071","num":"0070"},"figref":["FIG. 5","FIG. 6B"],"b":["200","218","202"]},{"@attributes":{"id":"p-0072","num":"0071"},"figref":"FIG. 5","b":["500","502","500","504","500","506","500","508","500"]},{"@attributes":{"id":"p-0073","num":"0072"},"figref":["FIGS. 6A-6B","FIG. 6A"],"b":["600","600","602","600"]},"In response to determining to process a message flow, the process  makes a determination as to whether the request to process the message flow is a request to process the message flow using a virtual database driver at decision point . In response to determining at decision point  that the request to process the message flow is a request to process the message flow using a virtual database driver, the process  makes a determination at decision point  as to whether the request to process the message flow includes a request to process the message flow within a message broker runtime environment within which the message flow is deployed or whether the request to process the message flow includes a request to process the message flow from a workspace storage location.","In response to determining at decision point  that the request to process the message flow includes a request to process the message flow within a message broker runtime environment within which the message flow is deployed, the process  identifies the message broker runtime environment at block . In response to determining at decision point  that the request to process the message flow includes a request to process the message flow from a workspace storage location, the process  identifies the workspace storage location where one or more message flow files that include the message flow are stored at block .","In response to either identifying the message broker runtime environment at block  or identifying the workspace storage location at block , the process  invokes a database connectivity driver to process a structured query language (SQL) statement against the message flow and passes at least one parameter to the database connectivity driver that represents\/identifies either the workspace storage location or the message broker runtime environment where the message flow is stored or deployed, respectively, at block . As described above and in more detail below, the message flow may be organized as a message flow database structure without requiring the message flow database structure to be loaded into an actual database or temporary database. Additionally, the database connectivity driver may include a driver, such as an open database connectivity (ODBC) driver or a Java database connectivity (JDBC\u00ae) driver. For purposes of the present description, the database connectivity driver may be considered any database connectivity driver, such as a database connectivity driver programmed using an object-oriented programming language.","At block , the process  accesses the workspace storage location or the message broker runtime environment via the database connectivity driver. At block , the process  reads, via the database connectivity driver, at least one message flow file that stores a message flow from the workspace storage location or from the message broker runtime environment where the message flow is stored or deployed, respectively. As described above, the parameter passed to the database connectivity driver at invocation is used to identify the location of the stored message flow files or the message broker runtime environment.","At block , the process  organizes the message flow as a virtually-indexed message flow database structure within a memory location, such as the virtual database area  of the memory . Organizing the message flow within a memory as a virtually-indexed message flow database structure may include organizing the message flow within a memory as a message flow database structure, where entries within the message flow database structure represent nodes, connections, and properties used by the message flow. Additionally, organizing the message flow within a memory as a virtually-indexed message flow database structure may include creating tables linked based upon message flow connections that represent relationships between message processing nodes of the message flow. Additionally, the linked tables may each represent one message flow processing node of the message flow and columns of each linked table may each represent one property of the respective message flow processing node. Additional processing for this branch of the process  will be described in more detail further below.","Returning to the description of decision point , in response to determining that the request to process the message flow is not a request to process the message flow using a virtual database driver, the process  reads one or more message flow files that store the message flow at block . At block , the process  parses the message flow stored within the message flow file(s). At block , similar to the processing described above, the process  organizes the message flow as a virtually-indexed message flow database structure within a memory location, such as the virtual database area  of the memory . Organizing the message flow within a memory as a virtually-indexed message flow database structure may include organizing the message flow within a memory as a message flow database structure, where entries within the message flow database structure represent nodes, connections, and properties used by the message flow. Additionally, organizing the message flow within a memory as a virtually-indexed message flow database structure may include creating tables linked based upon message flow connections that represent relationships between message processing nodes of the message flow. Additionally, the linked tables may each represent one message flow processing node of the message flow and columns of each linked table may each represent one property of the respective message flow processing node.","At decision point , the process  makes a determination as to whether to store the virtually-indexed message flow database structure to a temporary database for processing SQL statements against the virtually-indexed message flow database structure. As such, it should be noted that loading the virtually-indexed message flow database structure into an actual database is considered optional processing.","In response to determining to store the virtually-indexed message flow database structure to a temporary database for processing SQL statements against the virtually-indexed message flow database structure, the process  stores the virtually-indexed message flow database structure to a temporary database at block . The temporary database may include any memory device, such as a temporary database organized within the database  or within the memory , as appropriate for the given implementation. Structured query language (SQL) statements may be processed against the message flow database structure stored within the temporary database.","In response to determining not to store the virtually-indexed message flow database structure to a temporary database for processing SQL statements against the virtually-indexed message flow database structure at decision point , or in response to storing the virtually-indexed message flow database structure to a temporary database at block , or in response to organizing the message flow as a virtually-indexed message flow database structure within a memory location at block , the process  transitions to decision point  and the processing shown and described in association with .",{"@attributes":{"id":"p-0083","num":"0082"},"figref":"FIG. 6B","b":["600","630","600"]},"In response to determining that an SQL statement to process against the virtually-indexed message flow database structure has not been detected, the process  makes a determination at decision point  as to whether processing to detect SQL statements is completed. In response to determining that processing to detect SQL statements is not completed, the process  returns to decision point  and iterates as described above.","In response to determining at decision point  that an SQL statement to process against the virtually-indexed message flow database structure has been detected, the process  makes a determination at decision point  as to whether the detected SQL statement is an SQL \u201cSELECT\u201d statement. In response to determining that the detected SQL statement is an SQL \u201cSELECT\u201d statement, the process  issues the SELECT query against the virtually-indexed message flow database structure (either via the database connectivity driver or directly, and either within a memory or within a temporary database) and returns the message flow element(s) referenced by the SQL SELECT statement at block . The process  returns to decision point  and iterates as described above until a determination is made that processing of SQL statements is completed.","Returning to the description of decision point , in response to determining that the detected SQL statement is not an SQL \u201cSELECT\u201d statement, the process  makes a determination at decision point  as to whether the detected SQL statement is an SQL \u201cUPDATE\u201d or SQL \u201cINSERT\u201d statement. In response to determining that the detected SQL statement is not an SQL \u201cUPDATE\u201d or SQL \u201cINSERT\u201d statement, the process  returns to decision point  and iterates as described above until a determination is made that processing of SQL statements is completed.","In response to determining at decision point  that the detected SQL statement is an SQL \u201cUPDATE\u201d or SQL \u201cINSERT\u201d statement, the process  issues the SQL statement against the virtually-indexed message flow database structure (again either via the database connectivity driver or directly, and either within a memory or within a temporary database) to edit the virtually-indexed message flow database structure according to the SQL UPDATE or SQL INSERT statement that specifies the change to the message flow database structure at block . Editing the virtually-indexed message flow database structure may include modifying\/changing at least one of the linked tables of the message flow database structure in response to the SQL UPDATE statement and adding at least one message flow object in response to the SQL INSERT statement. As such, a user may select objects from the tables to get information about the objects and may also update or insert rows into the tables, which will modify or add objects to edit the message flow. In response to completion of processing of the SQL statement at block , the process  returns to decision point  and iterates as described above until a determination is made that processing of SQL statements is completed.","In response to determining at decision point  that processing of SQL statements is completed, such as via a user input or closing of an application that processes the SQL statements, the process  makes a determination at decision point  as to whether any changes to the virtually-indexed message flow database structure have resulted from the processing of the SQL statements against the virtually-indexed message flow database structure. In response to determining that at least one change to the virtually-indexed message flow database structure has not resulted from the processing of the SQL statements against the virtually-indexed message flow database structure, the process  returns to the processing described in association with  at decision point  and iterates as described above.","In response to determining at decision point  that at least one change to the virtually-indexed message flow database structure has resulted from the processing of the SQL statements against the virtually-indexed message flow database structure, the process  makes a determination at decision point  as to whether to update the existing\/current message flow, either within the workspace storage location or within the message broker runtime environment, based upon the virtually-indexed message flow database structure changes. In response to determining to update the existing message flow in response to the virtually-indexed message flow database structure changes, the process  updates the existing message flow (e.g., message flow files or deployed message flow) based upon the changes to the virtually-indexed message flow database structure at block .","In response to determining not to update the existing message flow at decision point , the process  creates at least one new message flow file based upon the virtually-indexed message flow database structure and the changed at least one of the linked tables of the message flow database structure at block . It should be noted that the user may also be prompted to overwrite the previous message flow file(s) and the respective message flow file(s) may be overwritten rather than creating new message flow files as appropriate for a given implementation. At block , the process  stores the new message flow file(s). Storage of the new message flow files may include deploying the new message flow within the message broker runtime environment without departure from the scope of the present subject matter.","In response to either updating the existing message flow at block  or in response to storing the created message flow file(s) at block , the process  returns to the processing described in association with  at decision point  and iterates as described above.","As such, the process  detects requests to process message flows and creates a virtually-indexed message flow database structure, either directly or using a database connectivity driver, from a message flow that is either stored within one or more message flow files in a workspace storage location or from a message flow that is deployed within a message broker runtime environment. Additionally, the virtually-indexed message flow database structure is either stored and processed within a memory, or is stored and processed within a temporary database. SQL statements are processed against the virtually-indexed message flow database structure, and any updates are applied to the virtually-indexed message flow database structure. The original message flow may be overwritten either within the workspace storage location or within a message broker runtime environment, or one or more new message flow files may be created in response to any changes to the message flow. Any created or updated message flow files may be stored within the respective storage location(s).","It should be noted that certain SQL statements have been described in association with the process  for purposes of example and that many other SQL statements are possible. As such, any SQL statement may be processed against a virtually-indexed message flow database structure as described herein and as appropriate for a given implementation. Accordingly, all such SQL statements are considered within the scope of the present subject matter.","As described above in association with  through , the example systems and processes provide for accessing and editing of virtually-indexed message flows using structured query language (SQL). Many other variations and additional activities associated with accessing and editing of virtually-indexed message flows using structured query language (SQL) are possible and all are considered within the scope of the present subject matter.","Those skilled in the art will recognize, upon consideration of the above teachings, that certain of the above examples are based upon use of a programmed processor, such as the CPU . However, the invention is not limited to such example embodiments, since other embodiments could be implemented using hardware component equivalents such as special purpose hardware and\/or dedicated processors. Similarly, general purpose computers, microprocessor based computers, micro-controllers, optical computers, analog computers, dedicated processors, application specific circuits and\/or dedicated hard wired logic may be used to construct alternative equivalent embodiments.","As will be appreciated by one skilled in the art, aspects of the present invention may be embodied as a system, method or computer program product. Accordingly, aspects of the present invention may take the form of an entirely hardware embodiment, an entirely software embodiment (including firmware, resident software, micro-code, etc.) or an embodiment combining software and hardware aspects that may all generally be referred to herein as a \u201ccircuit,\u201d \u201cmodule\u201d or \u201csystem.\u201d Furthermore, aspects of the present invention may take the form of a computer program product embodied in one or more computer readable medium(s) having computer readable program code embodied thereon.","Any combination of one or more computer readable medium(s) may be utilized. The computer readable medium may be a computer readable signal medium or a computer readable storage medium. A computer readable storage medium may be, for example, but not limited to, an electronic, magnetic, optical, electromagnetic, infrared, or semiconductor system, apparatus, or device, or any suitable combination of the foregoing. More specific examples (a non-exhaustive list) of the computer readable storage medium would include the following: an electrical connection having one or more wires, a portable computer diskette, a hard disk, a random access memory (RAM), a read-only memory (ROM), an erasable programmable read-only memory (EPROM or Flash memory), a portable compact disc read-only memory (CD-ROM), an optical storage device, a magnetic storage device, or any suitable combination of the foregoing. In the context of this document, a computer readable storage medium may be any tangible medium that can contain, or store a program for use by or in connection with an instruction execution system, apparatus, or device.","A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein, for example, in baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms, including, but not limited to, electro-magnetic, optical, or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate, propagate, or transport a program for use by or in connection with an instruction execution system, apparatus, or device.","Program code embodied on a computer readable medium may be transmitted using any appropriate medium, including but not limited to wireless, wireline, optical fiber cable, RF, etc., or any suitable combination of the foregoing.","Computer program code for carrying out operations for aspects of the present invention may be written in any combination of one or more programming languages, including an object oriented programming language such as JAVA\u2122, Smalltalk, C++ or the like and conventional procedural programming languages, such as the \u201cC\u201d programming language or similar programming languages. The program code may execute entirely on the user's computer, partly on the user's computer, as a stand-alone software package, partly on the user's computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario, the remote computer may be connected to the user's computer through any type of network, including a local area network (LAN) or a wide area network (WAN), or the connection may be made to an external computer (for example, through the Internet using an Internet Service Provider).","Aspects of the present invention have been described with reference to flowchart illustrations and\/or block diagrams of methods, apparatus (systems) and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and\/or block diagrams, and combinations of blocks in the flowchart illustrations and\/or block diagrams, can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer, special purpose computer, or other programmable data processing apparatus to produce a machine, such that the instructions, which execute via the processor of the computer or other programmable data processing apparatus, create means for implementing the functions\/acts specified in the flowchart and\/or block diagram block or blocks.","These computer program instructions may also be stored in a computer-readable storage medium that can direct a computer or other programmable data processing apparatus to function in a particular manner, such that the instructions stored in the computer-readable storage medium produce an article of manufacture including instructions which implement the function\/act specified in the flowchart and\/or block diagram block or blocks.","The computer program instructions may also be loaded onto a computer, other programmable data processing apparatus, or other devices to cause a series of operational steps to be performed on the computer, other programmable apparatus or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions\/acts specified in the flowchart and\/or block diagram block or blocks.","The flowchart and block diagrams in the Figures illustrate the architecture, functionality, and operation of possible implementations of systems, methods and computer program products according to various embodiments of the present invention. In this regard, each block in the flowchart or block diagrams may represent a module, segment, or portion of code, which comprises one or more executable instructions for implementing the specified logical function(s). It should also be noted that, in some alternative implementations, the functions noted in the block may occur out of the order noted in the figures. For example, two blocks shown in succession may, in fact, be executed substantially concurrently, or the blocks may sometimes be executed in the reverse order, depending upon the functionality involved. It will also be noted that each block of the block diagrams and\/or flowchart illustration, and combinations of blocks in the block diagrams and\/or flowchart illustration, can be implemented by special purpose hardware-based systems that perform the specified functions or acts, or combinations of special purpose hardware and computer instructions.","A data processing system suitable for storing and\/or executing program code will include at least one processor coupled directly or indirectly to memory elements through a system bus. The memory elements can include local memory employed during actual execution of the program code, bulk storage, and cache memories which provide temporary storage of at least some program code in order to reduce the number of times code must be retrieved from bulk storage during execution.","Input\/output or I\/O devices (including but not limited to keyboards, displays, pointing devices, etc.) can be coupled to the system either directly or through intervening I\/O controllers.","Network adapters may also be coupled to the system to enable the data processing system to become coupled to other data processing systems or remote printers or storage devices through intervening private or public networks. Modems, cable modems and Ethernet cards are just a few of the currently available types of network adapters.","The terminology used herein is for the purpose of describing particular embodiments only and is not intended to be limiting of the invention. As used herein, the singular forms \u201ca,\u201d \u201can\u201d and \u201cthe\u201d are intended to include the plural forms as well, unless the context clearly indicates otherwise. It will be further understood that the terms \u201ccomprises\u201d and\/or \u201ccomprising,\u201d when used in this specification, specify the presence of stated features, integers, steps, operations, elements, and\/or components, but do not preclude the presence or addition of one or more other features, integers, steps, operations, elements, components, and\/or groups thereof.","The corresponding structures, materials, acts, and equivalents of all means or step plus function elements in the claims below are intended to include any structure, material, or act for performing the function in combination with other claimed elements as specifically claimed. The description of the present invention has been presented for purposes of illustration and description, but is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the invention. The embodiment was chosen and described in order to best explain the principles of the invention and the practical application, and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE SEVERAL VIEWS OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 4A"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 4B"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 6A"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 6B"}]},"DETDESC":[{},{}]}
