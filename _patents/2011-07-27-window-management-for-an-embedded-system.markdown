---
title: Window management for an embedded system
abstract: Methods and apparatus are provided for providing a window management system for an embedded system. In one embodiment a method includes configuring an operating system of an embedded system based on a protocol provided between one or more application windows and a window manager, each application window associated with an application executed by the operating system, storing display content of the one or more application windows in a buffer, and compositing the one or more application windows in the buffer. The method may further include outputting data of the buffer for display of the one or more application windows based on the compositing, wherein an application programming interface is specified for the application to directly access graphics hardware of the embedded system.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09396001&OS=09396001&RS=09396001
owner: Sony Corporation
number: 09396001
owner_city: Tokyo
owner_country: JP
publication_date: 20110727
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS REFERENCE TO RELATED APPLICATION","FIELD","BACKGROUND","BRIEF SUMMARY OF THE EMBODIMENTS","DETAILED DESCRIPTION OF THE EXEMPLARY EMBODIMENTS","Overview and Terminology","Exemplary Embodiments"],"p":["This application claims priority to U.S. Provisional Patent Application Ser. No. 61\/411,102, Filed Nov. 8, 2010 entitled \u201cNAF, The SNAP graphics subsystem\u201d, the disclosure of which is hereby fully incorporated by reference.","The present disclosure relates generally to electronic device and display applications, and more particularly to an application framework to provide window management for an embedded system.","The configuration of many electronic devices is often associated with the framework of a particular developer or manufacturer of the device processor. For example, it is widely known that certain desktop systems or operating systems employ a particular framework for an application to operate with the operating system. Few open source solutions, however, allow for embedded multi-process window systems to scale from low-end to high end graphics systems. There exists a need for an improved solution to provide a window system for embedded systems, and in particular for open source solutions. Three convention solutions include the X11, DirectFB, and Wayland frameworks.","The X11 project started in 1984 out of Project Athena. Much of the original design remains and is generally considered an awkward fit for modern graphics systems. Regarding embedded systems, X11 is generally considered as a bad fit because of its size and complexity. With current embedded systems, size may no-longer be a big issue, but systems problems stemming from the complexity of X11 remain an issue.","DirectFB 1.x is designed to unify access to Linux frame-buffer devices. It provides a drawing application programming interface, unique to DirectFB, which is a superset of unique accelerate graphics application programming interface exposed by each Linux frame-buffer device driver. Support for DirectFB by open standard drawing application programming interfaces is weak, and DirectFB implements its own graphics buffer management. Although improved graphics are proposed for later versions of DirectFB, an incompatible re-write will most likely result in the framework and depreciate the application programming interface.","Wayland provides many desirable requirements for window management, but development of Wayland is not mature enough to provide a window management system. Its dependencies are difficult to implement on an embedded system that a network application program is likely to be run on. In additional, Wayland uses existing technologies in the Linux kernel mode-setting (KMS) and the Graphics Execution Manager (GEM) batchbuffer in order to provide a minimal display server.","Accordingly, there is a desire for a graphics framework and embedded windowing system for an network application program to provide useful technological solutions and functionality that may improve graphics quality.","Disclosed and claimed herein are methods and apparatus for providing a window management system for an embedded system. In one embodiment, a method includes configuring an operating system of an embedded system based on a protocol provided between one or more application windows and a window manager, each application window associated with an application executed by the operating system, and storing, by a device, display content of the one or more application windows in a buffer. The method further includes compositing, by the device, the one or more application windows in the buffer, and outputting data of the buffer for display of the one or more application windows based on the compositing, wherein an application programming interface is specified for the application to directly access graphics hardware of the embedded system.","Other aspects, features, and techniques will be apparent to one skilled in the relevant art in view of the following detailed description of the embodiments.","One aspect of the of the disclosure relates to a window management system for a network application framework. The window management system may be provided for an embedded system to allow for a multi-process graphics hardware accelerated design. Methods and apparatus are provided for configuring an operating system of an embedded system based on a protocol provided between one or more application windows and a window manager. The protocol may include a plurality of layers for framework adaption of an application programming interface, surface compositing and surface management. In another embodiment, a device is provided which may be configured to present one or more windows of an application based on a window management system framework.","As used herein, the terms \u201ca\u201d or \u201can\u201d shall mean one or more than one. The term \u201cplurality\u201d shall mean two or more than two. The term \u201canother\u201d is defined as a second or more. The terms \u201cincluding\u201d and\/or \u201chaving\u201d are open ended (e.g., comprising). The term \u201cor\u201d as used herein is to be interpreted as inclusive or meaning any one or any combination. Therefore, \u201cA, B or C\u201d means \u201cany of the following: A; B; C; A and B; A and C; B and C; A, B and C\u201d. An exception to this definition will occur only when a combination of elements, functions, steps or acts are in some way inherently mutually exclusive.","Reference throughout this document to \u201cone embodiment,\u201d \u201ccertain embodiments,\u201d \u201can embodiment,\u201d or similar term means that a particular feature, structure, or characteristic described in connection with the embodiment is included in at least one embodiment. Thus, the appearances of such phrases in various places throughout this specification are not necessarily all referring to the same embodiment. Furthermore, the particular features, structures, or characteristics may be combined in any suitable manner on one or more embodiments without limitation.","In accordance with the practices of persons skilled in the art of computer programming, one or more embodiments are described below with reference to operations that are performed by a computer system or a like electronic system. Such operations are sometimes referred to as being computer-executed. It will be appreciated that operations that are symbolically represented include the manipulation by a processor, such as a central processing unit, of electrical signals representing data bits and the maintenance of data bits at memory locations, such as in system memory, as well as other processing of signals. The memory locations where data bits are maintained are physical locations that have particular electrical, magnetic, optical, or organic properties corresponding to the data bits.","When implemented in software, the elements of the embodiments are essentially the code segments to perform the necessary tasks. The code segments can be stored in a processor readable medium, which may include any processor readable, or non-transitory, medium that can store or transfer information. Examples of the processor readable mediums include an electronic circuit, a semiconductor memory device, a read-only memory (ROM), a flash memory or other non-volatile memory, a floppy diskette, a CD-ROM, an optical disk, a hard disk, non-transitory medium, etc.","Referring now to the figures,  depicts a graphical representation of a window management system which may be employed by one or more embodiments described herein. Window management system  may be an application framework to provide a window system for an embedded system and can be configured for multi-process, graphics hardware accelerate, scalable, extensible, and portable windowing system according to one or more embodiments. Window management system  may relate to a framework developed for an open source operating system, such as Linux based operating systems, to allow for high performance windowing. One advantage of window management system  may be to provide direct access to graphics application programming interfaces (API's). Window management system  may similarly provide for specialized presentation and management of one or more windows associated with external application frameworks. Window management system  may additionally relate to a network application framework that is multi-process, and that handles keyboard, mouse, and multi-touch input.","Window management system  can allow for window management of one or more applications.  depicts applications , the display of which may be managed by window management system . Each application managed by window management system  can include one or more windows for display. Window management system  allows for presentation of applications windows which are not provided by an embedded operating system. By way of example, some devices running embedded operating systems, such as open source operating systems, may not provide a rich or interesting presentation of applications. Other conventional frameworks are either difficult to implement or lacking one or more desired capabilities. However, window management system  can provide presentation of application windows to allow for high performance modern windowing on such embedded systems. The window management system  allows for framework adapter implementation  (e.g., a port layer) to allow an embedded operating system to execute one or more programs. Framework adapter implementation  allows for an application to run on a device and may provide one or more libraries. Applications and libraries can have direct access to hardware accelerated graphics APIs including EGL, OpenGL-ES, and OpenVG. The multi-process applications may communicate with a window server of window management system  through inter process communication of the embedded system that can be extended to support a remote use interface. The window server of window management system  may support two or more window management modes including full 3D window management, and emulated 3D window management that only requires 2D hardware. The window manager composition can be extended by the window manager plug-in that has direct access to window system APIs.","Window management system  provides access of each application to access to graphics API's and window system events from the applications and application libraries to graphics hardware elements. Window management system  includes framework adapter API , surface compositor , context\/surface management API , and driver layer . Window management system  can specify a drawing API for the presentation of one or more windows. As depicted in , applications may have direct access to graphics hardware provided by driver layer  based on the specified drawing API. In one exemplary embodiment, window management system  specifies the Kronos open API (e.g., the EGL, OpenGL-ES, and Open VG graphics standards). The specified API may be embedded into graphics chips employed by devices utilizing window management system . The specified API may be employed for presenting windows for applications . As depicted in , applications relate to application , widget , and settings . Each of applications may include one of more windows for display by a device having embedded operating system. Applications may relate to one or more applications for a device including but not limited to games, widgets (weather, new, traffic, etc.), remote controls, social applications, media sharing applications, communication devices, media players, entertainment devices, home automation, etc.","Framework adapter implementation layer  may relate to a framework for applications executed by the embedded operating system, such as a port layer. Elements of framework adapter implementation layer  are depicted as including GNUstep , NGF , flash , widget , and GTK . GNUstep is a native object-oriented application programming interfaces (APIs). NGF relates to a network game framework for presenting a gaming application. Flash relates to cross-platform browser plug-in. Widget relates to an application for providing a interactive virtual tool to a provide single-purpose services or user desired applications. GTK relates to multi-platform toolkit for creating graphical user interfaces. It should also be appreciated that framework adapter implementation layer  of window management system  may include one or more other, or different application adapters relative to elements depicted in .","Framework adapter API , surface compositor , context\/surface management API , and driver layer  may be configured to allow for direct access to graphics hardware for applications to allow for presentation of windows associated with applications .","Framework adapter API  provides specific libraries to run applications . As depicted in , framework adapter API  includes framework adapters for event routing , graphics control , and surface buffer . The framework adapters allow applications which already provide for a specific API, such as their own API, to run with window management system . For example, widget applications with their own API's may be adapted by framework adapter API .","Surface compositor  may act as a meta-abstraction layer and may aid developers for presentation of windows and includes libraries. Surface compositor  may further act as a window manager to display application windows in a 3D space, an emulated 3D windowing mode, or 2D mode. As depicted in , surface compositor  includes scene engine , scene graph , drawing manager , and router . Surface compositor  may utilize lower layers of window management system  like OpenGL to drawings windows on a screen. Surface compositor may draw applications windows into a buffer while context\/surface management API  draws windows on a display screen.","Context\/surface management API  may be configured to provide a scene engine for windows. As depicted in , context\/surface management API  includes EGL , OpenVG , OpenGL , and OpenMax . Context\/surface management API  may be provided by specifying an API. For example, context\/surface management API  may specify the Kronos API.","Driver layer  may be the implementation of the standards of the EGL to allow for access to graphics hardware of applications via one or more drivers depicted as .","Referring now to , a process is depicted for window management of an embedded operating system according to one or more embodiments. Process  may be employed by an embedded system for presentation of one or more applications to a user.","Process  may be initiated by configuring an operating system of an embedded system based on a protocol provided between one or more application windows and a window manager at block . Each application window is associated with an application executed by the operating system. The embedded system may be multi-process graphics system.","According to one embodiment, the embedded system may operate based on a protocol, such as the window management system of . The protocol may expose a specified application programming interface to each layer of the protocol including application and application libraries of the embedded system. In that fashion, direct access may be provided to graphics hardware from applications and application libraries to provide quality graphical output. The protocol may additionally allow for a remote procedure call (RPC) protocol between application client window, and a window server of the embedded system.","Window management system  may be configured to host external application frameworks such as GNUstep, Java JDK, Yahoo widgets, GTK, X2, X11, etc. This may be accomplished through a specialization of an abstract adapter module which sits between the application framework, and the window system. This adapter provides and adapts access to graphics API's and window system events.","Window management system  may be applied to a Linux PC platform, the Sigma, the Beagle board, and other embedded systems.","According to one embodiment, process  may be based on the window management system of . Process  may be based on a protocol that provides framework adaption to adapt display framework of an application for display by the window manager, surface management to provide drawing of application windows, and\/or a framework adapter to provide application libraries.","At block , process  may continue by storing display content of the one or more application windows in a buffer. An application window may relate to a viewing area for display of a graphical user interface of an application. The buffer may relate to a screen buffer for providing graphic and video output. The application windows in the buffer may be composited at block . In one embodiment, application windows may be composited by double buffering and may provide tear free window content. Compositing may provide one or more of full three dimensional (3D), emulated 3D and two-dimensional (2D) content.","At block , data of the buffer of the one or more application windows may be output for display based on the compositing, wherein an application programming interface is specified for the application to access graphics hardware of the embedded system.","Referring now to , a simplified block diagram is depicted of a device according to one embodiment. Device  may relate to an embedded device system configured to provide graphical content. Device  may relate to one or more of a display device, personal communication device, media player, gaming device, etc. In certain embodiments, device  may relate to a peripheral device configured to interface with a display device, such as a media player, etc. As depicted in , device  includes processor , memory controller hub (MCH) , input\/output controller hub (ICH) , memory , input\/output (I\/O) interface , display , and communication interface . Elements of device  may be configured to communicate and interoperate by a communication bus.","Processor  may be configured to control operation of device  based on one or more computer executable instructions stored in memory . In one embodiment, processor  may be configured to control display of image, graphics and video content. Processor  may also provide a plurality of user control features. Processor  may be configured to interoperate with MCH  and ICH  to provide a window management system. MCH  may be configured as a communication interface between processor  and memory . ICH  may be configured to connect with and control one or more peripheral devices. Memory  may relate to one of RAM and ROM memories and may be configured to store one or more files, and computer executable instructions for operation of device . Although depicted as a single memory unit, memory  may relate to one or more of internal device memory and removable memory. Memory  may store one or more applications and application libraries.","I\/O interface  may be employed to control operation of device  including controlling selection of content for display and controlling operation of device . I\/O interface  may include one or more buttons for user input, such as a such as a numerical keypad, volume control, menu controls, pointing device, track ball, mode selection buttons, and playback functionality (e.g., play, stop, pause, forward, reverse, slow motion, etc). Buttons of I\/O interface  may include hard and soft buttons, wherein functionality of the soft buttons may be based on one or more applications running on device . Display  may be employed to display image data, such as video data, and display one or more applications executed by processor . In certain embodiments, display  may relate to a touch screen display.","MCH  may include a buffer configured to drive display of image and graphic data. In one embodiment, a buffer of MCH  may be configured to store image data prior to display. In certain embodiments, processor  may be configured to analyze image data stored by a buffer of MCH  may to for window management.","Communication interface  may include one or more elements to allow for communication of device  by wired or wireless communication. Communication interface  may include one or more ports for receiving data, including ports for removable memory. Communication interface  may be configured to allow for network based communications including but not limited to LAN, WAN, Wi-Fi, etc.","Referring now to , a graphical representation is depicted of a user interface of an operating system of an embedded device. User interface  may be displayed by a display of an embedded device, or a display electrically coupled to the embedded device. User interface  includes windows  and . Windows  and  may be associated with one or more applications, such as games, widgets (weather, new, traffic, etc.), remote controls, social applications, media sharing applications, communication devices, media players, entertainment devices, home automation, etc. In certain embodiments, user interface  may output multiple windows for a single application. User interface  additionally includes a graphical representation of a widget depicted as . Widget  may include one or more graphical elements which may be selected by a user of the embedded device. Window content may be composited double buffered, and tear free. In certain embodiments, the window management system may provide window content on a per pixel basis and per-window alpha blended.","According to one embodiment, graphical representation of user interface  may be based on a window management system of . The window management system may be based on a protocol to allow for direct access of applications to graphics hardware. The window management system may control presentation of one or more of window , window  and widget . Multi-process functionality may be provided by a remote procedure call protocol between application client window, and a window server of a window management system. To allow for a multi-process graphics system extensions in an EGL specification may be employed. As such, the window manager may be configured to be specialized for multiprocessing on each platform in situations where an EGL specification is not provided, a graphics RPC wire protocol may be integrated using protocol buffers or by integrating open source components with their own graphics wire protocol. The window manager may support two windowing modes\u2014full 3D and emulated 3D. Window content may be stored in off-screen buffers, and the window manager may composite those buffers to the screen. Each mode may use a hierarchical scene graph to composite the windows to the screen. The hierarchy of the scene-graph may be determined on the parent child relationship of windows, where child windows are located relative to parent windows. The 3D window manager may display windows in full 3D space from a movable camera position. In the emulated 3D windowing mode, the camera, and the windows are also located in a 3D space, but the windows are always oriented, screen aligned, facing the camera.","According to another embodiment, a window management system may control transition of display windows for an embedded device. Referring now to , a graphical representation of a display windows  and  and depicted according to one or more embodiments. Display of window  and window  may be based on the window management system of . Window  may relate to a home or desktop view of the embedded device to include one or more selectable elements depicted as  and control bar . Based on user commands, the device may display window  of an application including graphical elements  and control bar . Content of display window  and display window  may be stored in a buffer and may be displayed by a window management system of the embedded system. According to one embodiment, display of window  or window  may be displayed using the process of .","While this disclosure has been particularly shown and described with references to exemplary embodiments thereof, it will be understood by those skilled in the art that various changes in form and details may be made therein without departing from the scope of the embodiments encompassed by the appended claims."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The features, objects, and advantages of the present disclosure will become more apparent from the detailed description set forth below when taken in conjunction with the drawings in which like reference characters identify correspondingly throughout and wherein:",{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 5"}]},"DETDESC":[{},{}]}
