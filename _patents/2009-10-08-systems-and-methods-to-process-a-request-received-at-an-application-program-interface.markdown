---
title: Systems and methods to process a request received at an application program interface
abstract: Methods and systems to process a request received at an application program interface are described. The system receives a request from a client machine that includes a job that is associated with data. The request is received at an application program interface. Next, a peer-to-peer network of processing nodes generates a plurality of sub-jobs based on the job. The peer-to-peer network of processing nodes schedules the plurality of sub-jobs for parallel processing based on an availability of resources that are respectively utilized by the sub-jobs and parallel processes the plurality of sub-jobs before generating task results that are respectively associated with the plurality of sub-jobs.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09043401&OS=09043401&RS=09043401
owner: eBay Inc.
number: 09043401
owner_city: San Jose
owner_country: US
publication_date: 20091008
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","RELATED ART","DETAILED DESCRIPTION"],"p":["This disclosure relates to the technical field of data communications. More particularly, systems and methods to process a request received at an application program interface are described.","A system may include an application programming interface that is utilized to receive a request from a client machine. The request may include a job that prompts the system to communicate data to the client machine. Yet another request may include a job that prompts the system to retrieve data from the client machine. In some instances the quantity of data may be so large that the time to complete the job may be prohibitive.","In the following description, for purposes of explanation, numerous specific details are set forth in order to provide a thorough understanding of some example embodiments. It will be evident, however, to one of ordinary skill in the art that embodiments of the present disclosure may be practiced without these specific details.","As described further below, according to various example embodiments of the disclosed subject matter described and claimed herein, systems and methods to process a request received at an application program interface are provided. Various embodiments are described below in connection with the figures provided herein.",{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 1","b":["3","3","5","11","7","9","9","13","15","17","17","19","5","19","9","5"]},"Broadly speaking, the application program interface module  may asynchronously process the request by storing the job  in a scatter gather logical database  for parallel processing by a scatter gather peer-to-peer network . For example, the scatter gather peer-to-peer network  may scatter the job  by generating sub-jobs  based on the job , schedule the sub-jobs  for processing based on an availability of local and remote resources, independently parallel process the sub-jobs  to completion, gather the job-results from each sub-job , and communicate the results of the job  to the client machine . Accordingly, a request may include a job  that is directed at large data sets. Such a job  may be scattered into sub-jobs  for parallel processing by a peer-to-peer network  that optimally utilizes local and remote resources before asynchronously responding to the request.","The application program interface server  may further include a monitor module  for collecting, storing, accessing and reporting job  and sub-job  statistics. The monitor module  may be utilized by a monitor machine  that communicates commands and receives statistical and trace information in the form of user interfaces and reports.","Scatter Gather Logical Database","The scatter gather logical database  includes a job table , a job queue , a job retry queue , a sub-job table , a sub-job queue , a sub-job retry queue , local resource information , remote resource information , and statistical information .","Jobs","The job-table  may be used to initially store a job  that is received in a request. Further in response to receiving the request, a job event  may be generated for the job  and stored on the job queue . The job event  may cause the scatter gather peer-to-peer network  to process the job . For example, the job event  may be retrieved by the scatter gather peer-to peer network  and the corresponding job  may be processed for a predetermined period of time after which the job event  is stored on the job retry queue  with an associated time-out. Responsive to expiration of the timeout, the job  may again be retrieved by the scatter gather peer-to peer network  for further processing. Accordingly, the job event  may be repetitively retrieved from the job retry queue , processed, and stored back on the job retry queue  until the job  is completed. The scatter gather peer-to-peer network  may process the job  to generate sub-jobs  that are stored in the sub-job table . For example, the scatter gather peer-to-peer network  may process a particular job  to generate twenty sub-jobs  that are stored in the sub-job table . The scatter gather peer-to-peer network  may further schedule a sub-job event  on the sub-job queue  in response to identifying remote resources that are available for the corresponding sub-job ","Sub-Jobs","Sub-jobs  may be parallel processed by the scatter gather peer-to-peer network . Sub-jobs  may respectively correspond to sub-job events  that are stored on the sub-job queue . The sub-job event  may be retrieved from the sub-job queue  and the corresponding sub-job  may be initially processed by the scatter gather peer-to peer network  until completion or until the sub-job  is interrupted causing the sub-job event  to be stored on the sub-job retry queue  with an associated time-out. Responsive to expiration of the timeout, the sub-job event  may be retrieved by scatter gather peer-to peer network  for further processing. Accordingly, the sub-job event  may be repeatedly retrieved from the sub-job retry queue , processed, and stored back on the sub-job retry queue  until the corresponding sub-job  is completed. Each sub-job  may include one or more tasks  that specify operations to be performed, as described further below.","Scatter Gather Peer to Peer Network","The scatter gather peer-to-peer network  may include multiple processing nodes  that respectively utilize the scatter gather logical database  to process jobs  and sub-jobs . Accordingly, the processing power and storage capacity of the scatter gather peer-to-peer network  may be scaled by adding processing nodes  or diminished by removing processing nodes .","The processing node(s) , as described above, may initially process a job  by scattering the job  into sub-jobs . For example, the processing node  may generate sub-jobs  based on the job , store the sub-jobs  in the sub-job table , and store a sub-job event  in the sub-job queue . The sub-jobs may include tasks . Typically the tasks  include instructions that may be executed to process a portion of the data partitioned to the sub-job . Next, the processing node  may identify whether one or more sub-jobs  may be scheduled for execution. The processing node  may schedule one or more sub-jobs  for execution based on the availability of local and remote resources , as respectively utilized by the sub-jobs . For example, the processing node  may move a sub-job event  to the sub-job retry queue  in response to identifying available local and remote resources . Movement onto the sub-job retry queue  makes the corresponding sub-job  visible to other processing nodes  in the scatter gather peer-to-peer network . Accordingly, a processing node  in the scatter gather peer-to-peer network  may subsequently identify the sub-job event  on the sub-job retry queue  and process the sub-job . Conversely, the sub-jobs  may not be scheduled for execution because local and remote resources  are not available. In such a case, the processing node  may wait until sufficient resources are available to schedule the sub-job  for execution.","In one embodiment the processing nodes  may utilize local resource information  to identify whether local resources are available to process the sub-jobs . For example, the local resources may include memory and processors associated with a pool of processing nodes . In one embodiment the local resources for a pool of processing nodes  may be normalized into a single value, as described further below. Accordingly, a particular processing node  may identify whether sufficient local resources are available in its pool before processing a sub-job .","In one embodiment the processing nodes  may utilize remote resource information  to identify whether remote resources  are available to process sub-jobs . In one embodiment, the remote resources  may include a database server resource pool  and an API server resource pool . The database server resource pool  may include multiple database servers that provide access to databases . The API server resource pool  may include multiple API servers that provide network access to the client machine  and other machines.","Other Components","The statistical information  may be used to store statistical data, raw data, tracing data, and other types of data to facilitate the management of jobs  and sub-jobs .","The competing processes  may compete with the scatter gather peer-to-peer network  for allocation of the remote resources . In one embodiment, the scatter gather peer-to-peer network  may be throttled back to limit the use of the remote resources  based on the anticipated or actual utilization of the remote resources  by the competing processes . For example, the competing processes  may exhibit a maximum (e.g., peak) and minimum utilization of the remote resources  over a period of time. The scatter gather peer-to-peer network  may be throttled back to limit the use of the remote resources  during peak utilization of the remote resources  by the competing processes . Conversely, the scatter gather peer-to-peer network  may not be throttled back to limit the use of the remote resources  during low or minimum utilization of the remote resources  by the competing processes .","In one embodiment the processing nodes  in the scatter gather peer-to-peer network  may utilize a retry mechanism to access a remote resource . Accordingly, the processing nodes  may distinguish between a recoverable error and a non-recoverable error. In the event of identifying a recoverable error, the processing node  may retry accessing the remote resource  (e.g., database, application programming interface). In the event of identifying a non-recoverable error, the processing node  may register the job as failed.","It will be appreciated by one having ordinary skill in the art that the processing of a job  may span multiple processing nodes  at different times. To facilitate diagnosing failures and tracing the operation of the multiple processing nodes , the monitor module  may be utilized to centrally collect and display such information and to further generate user interfaces including such information that are viewable at the monitor machine . The user interfaces may include selectable user interface elements that may be utilized to drill down from a job  to sub-jobs , from a sub-job  to tasks , from a task  to a machine (e.g., processing node )\/thread that worked on the task , and from the processing node  that worked on the task  to a log that may include log events that chronicle the execution of the task .",{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIG. 2A","b":["19","19","60","61","63","60","61","19","9","19","60","63","19","19","19","20","19"]},{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIG. 2B","b":["26","26","71","73","71","75","75","71","77"]},"The distributed application program interface applications  include a scatter gather framework  (e.g., modules) and job modules . Each job module  corresponds to an application program interface  in the application program interface module  (not shown) and a job-module identifier  in the job . Accordingly, the processing nodes  in the scatter gather framework  may be equipped to process a new job  by adding a job-module  to the distributed application program interface applications  and by adding an application program interface  to the application program interface module  (not shown). The scatter gather framework  may utilize the job identifier  in the job  to invoke the appropriate job module  to process the job . Accordingly, the functions that may be performed by the scatter gather framework  remain constant for all jobs . In contrast, the functions that may be performed by the appropriate job module  are specific to the job  and the corresponding application program interface .","The scatter gather framework  may include a controller module . The controller module  may include components in the form of a job executor , a scheduler , and a sub-job executor . The controller module  and its components may invoke components of the job module  to process the job . The job module  includes components in the form of a job pre-processor , a job parser , a job post-processor  and a task processor .","The controller module  may coordinate the interaction with other modules that execute in the processing node  and identify whether local resources on the processing node  are available to process jobs . For example, the controller module  may identify whether an adequate number of processors  and memory  are available on the processing node .","The job executor  may invoke the appropriate job pre-processor  based on the job module identifier  in the job . The job pre-processor  may perform pre-processing activities to prepare the job  for further processing. For example, the job pre-processor  may calculate the priority of the job . In one embodiment, the priority of the job  may be high, medium, or low. Further, the job pre-processor  may extract the name of a user from the job  and map the name of the user to user profile information for the user. In another embodiment, the job pre-processor  may extract the name of a user from the job  and map the name of the user to items offered for auction or sale by the user. In another embodiment, the items or user may further be mapped to transactions associated with the items, feedback associated with the items, and other types of information. In some embodiments, the job pre-processor  may map one type of information to another type of information by making a call to a database server. The job executor  may further invoke the appropriate job parser  based on the job module identifier  in the job . The job parser  may break the job  into sub-jobs  that include tasks . In one embodiment the job parser  may break the job  into sub-jobs  according to equal quantities of work. For example, sub-jobs  may be identified based on equal quantities of items, transactions, quantity of data, etc. Finally, the job executor  may invoke the job post processor  to gather the results from the sub-jobs .","The scheduler  may utilize the job priority and remote resource information  (not shown) to identify whether remote resources  (not shown) are available for the sub-jobs . For example, the scheduler  may move a sub-job event  for a sub-job  to the sub-job queue  based on the priority of the job  (e.g., high, medium, low), the remote resources  to execute the sub-job , and an identification that the remote resources  are available. In addition, the scheduler  may move the job  to the job retry queue  responsive to identifying the processing time for the job  has expired. In one embodiment the scheduler  operates by a concept of fairness. For example, the scheduler  may ensure fairness by allocating remote resources to jobs  such that two jobs that are of the same size (e.g., quantity of data to process) and same priority will finish at the same time if they are started at the same time.","The sub-job executor  may identify the sub-job  on the sub-job queue  and invoke the appropriate task processor  based on the job module identifier  to execute the tasks  in the sub-job .",{"@attributes":{"id":"p-0044","num":"0043"},"figref":"FIG. 3A","b":["55","55","26","55","110","112","110","20","26","110","51","53","20","20","63","19"]},{"@attributes":{"id":"p-0045","num":"0044"},"figref":"FIG. 3B","b":["33","33","41","33","43","33","45","33","111","113","111","20","51","53","20","20","63","19"]},{"@attributes":{"id":"p-0046","num":"0045"},"figref":"FIG. 4","b":["113","113","115","117","115","117","41","23","41","23","41","49","41","23","41","49","41","23","41","49","23","41","41","49"]},{"@attributes":{"id":"p-0047","num":"0046"},"figref":["FIG. 5","FIG. 1","FIG. 5"],"b":["201","201","3","203","7","205","207","11","5"]},"An application program interface (API) server  and a web server  are coupled to, and provide programmatic and web interfaces respectively to, one or more application servers . The application servers  host one or more marketplace applications  and payment applications . The application servers  are, in turn, shown to be coupled to one or more database servers  that facilitate access to one or more databases . The application servers  may further include the scatter gather peer-to-peer network , as previously described.","The marketplace applications  may provide a number of marketplace functions and services to users that access the network-based marketplace . The payment applications  may likewise provide a number of payment services and functions to users. The payment applications  may allow users to accumulate value in accounts and then to later redeem the accumulated value for products (e.g., goods or services) that are made available via the marketplace applications . The value may be accumulated in a commercial currency, such as the U.S. dollar, or a proprietary currency, such as \u201cpoints.\u201d While the marketplace applications  and payment applications  are shown in  to both form part of the network-based marketplace , it will be appreciated that, in alternative embodiments, the payment applications  may form part of a payment service that is separate and distinct from the network-based marketplace .","Further, while the networked system  shown in  employs a client-server architecture, embodiments of the present disclosure are of course not limited to such an architecture and could equally well find application in a distributed, or peer-to-peer, architecture system, for example. The various marketplace applications  and payment applications  could also be implemented as standalone software programs, which do not necessarily have networking capabilities.","The web client  and mobile programmatic client  access the various marketplace applications  and payment applications  via the web interface supported by the web server . Similarly, the programmatic client  accesses the various services and functions provided by the marketplace applications  and payment applications  via the programmatic interface provided by the API server . The programmatic client  may, for example, be a seller application (e.g., the TurboLister application developed by eBay Inc., of San Jose, Calif.) to enable sellers to author and manage listings on the network-based marketplace  in an off-line manner, and to perform batch-mode communications between the programmatic client  and the network-based marketplace . The API server  is shown to include the application program interface module , the scatter gather logical database , the monitor module , and API server resource pool , each as previously described.",{"@attributes":{"id":"p-0052","num":"0051"},"figref":"FIG. 5","b":["28","30","201","13","28","203","201"]},"Marketplace and Payment Applications",{"@attributes":{"id":"p-0053","num":"0052"},"figref":["FIG. 6","FIG. 5","FIG. 5"],"b":["213","215","201","213","215","47","217"]},"The network-based marketplace  may provide a number of publishing, listing and price-setting mechanisms whereby a seller may list (or publish information concerning) goods or services for sale; a buyer can express interest in or indicate a desire to purchase such goods or services; and a price can be set for a transaction pertaining to the goods or services. To this end, the marketplace applications  are shown to include at least one publication application  and one or more auction applications  which support auction-format listing and price setting mechanisms (e.g., English, Dutch, Vickrey, Chinese, Double, Reverse auctions, etc.). The various auction applications  may also provide a number of features in support of such auction-format listings, such as a reserve price feature whereby a seller may specify a reserve price in connection with a listing, and a proxy-bidding feature whereby a bidder may invoke automated proxy bidding.","A number of fixed-price applications  support fixed-price listing formats (e.g., the traditional classified advertisement-type listing or a catalogue listing) and buyout-type listings. Specifically, buyout-type listings (e.g., including the Buy-It-Now (BIN) technology developed by eBay Inc., of San Jose, Calif.) may be offered in conjunction with auction-format listings and may allow a buyer to purchase goods or services, which are also being offered for sale via an auction, for a fixed-price that is typically higher than the starting price of the auction.","Store application(s)  allows a seller to group listings within a \u201cvirtual\u201d store, which may be branded and otherwise personalized by and for the seller. Such a virtual store may also offer promotions, incentives and features that are specific and personalized to a relevant seller.","Reputation applications  allow users that transact, utilizing the network-based marketplace , to establish, build and maintain reputations, which may be made available and published to potential trading partners. Consider that where, for example, the network-based marketplace  supports person-to-person trading, users may otherwise have no history or other reference information whereby the trustworthiness and credibility of potential trading partners may be assessed. The reputation applications  allow a user to establish a reputation within the network-based marketplace  over time, for example, through feedback provided by other transaction partners. Other potential trading partners may then reference such a reputation for the purposes of assessing credibility and trustworthiness.","Personalization applications  allow users of the network-based marketplace  to personalize various aspects of their interactions with the network-based marketplace . For example a user may, utilizing an appropriate personalization application , create a personalized reference page at which information regarding transactions to which the user is (or has been) a party may be viewed. Further, a personalization application  may enable a user to personalize listings and other aspects of their interactions with the networked system  and other parties.","The networked system  may support a number of marketplaces that are customized, for example, for specific geographic regions. A version of the networked system  may be customized for the United Kingdom, whereas another version of the networked system  may be customized for the United States. Some of these versions may operate as an independent marketplace, or may be customized (or internationalized) presentations of a common underlying marketplace. The networked system  may accordingly include a number of internationalization applications  that customize information (and\/or the presentation of information) by the networked system  according to predetermined criteria (e.g., geographic, demographic or marketplace criteria). For example, the internationalization applications  may be used to support the customization of information for a number of regional websites that are operated by the networked system  and that are accessible via respective servers  and .","Navigation of the networked-based marketplace  may be facilitated by one or more navigation applications . For example, a receiving module may receive search information to search for items on the network-based marketplace , and a processing application may process that request. A browse application may allow users to browse various category, catalogue, or inventory data structures according to which listings may be classified within the networked system . Various other navigation applications may be provided to supplement the search and browsing applications.","In order to make listings available via the networked system  as visually informing and attractive as possible, the marketplace applications  may include one or more imaging applications  with which users may upload images for inclusion within listings. An imaging application  also operates to incorporate images within viewed listings. The imaging applications  may also support one or more promotional features, such as image galleries that are presented to potential buyers. For example, sellers may pay an additional fee to have an image included within a gallery of images for promoted items.","Listing creation applications  allow sellers to conveniently author listings pertaining to goods or services that they wish to transact via the network-based marketplace , while the listing management applications  allow sellers to manage such listings. Specifically, where a particular seller has authored and\/or published a large number of listings, the management of such listings may present a challenge. The listing management applications  provide a number of features (e.g., auto-relisting, inventory level monitors, etc.) to assist the seller in managing such listings.","One or more post-listing management applications  may also assist sellers with a number of activities that may typically occur post-listing. For example, upon completion of an auction facilitated by one or more auction applications , a seller may wish to leave feedback regarding a particular buyer. To this end, a post-listing management application  may provide an interface to one or more reputation applications , so as to allow the seller conveniently to provide feedback regarding multiple buyers to the reputation applications .","Dispute resolution applications  may provide mechanisms whereby disputes arising between transacting parties may be resolved. For example, the dispute resolution applications  may provide guided procedures whereby the parties are guided through a number of steps in an attempt to settle a dispute. In the event that the dispute cannot be settled via the guided procedures, the dispute may be escalated to a third party mediator or arbitrator.","A number of fraud prevention applications  may implement fraud detection and prevention mechanisms to reduce the occurrence of fraud within the network-based marketplace .","Messaging applications  may be responsible for the generation and delivery of messages to users of the network-based marketplace , with such messages, for example, advising users regarding the status of listings at the network-based marketplace  (e.g., providing \u201coutbid\u201d notices to bidders during an auction process or providing promotional and merchandising information to users). Respective messaging applications  may utilize any one of a number of message delivery networks and platforms to deliver messages to users. For example, messaging applications  may deliver electronic mail (e-mail), instant message (IM), Short Message Service (SMS), text, facsimile, or voice (e.g., Voice over IP (VoIP)) messages via the wired network (e.g., the Internet), Plain Old Telephone Service (POTS), or wireless (e.g., mobile, cellular, WiFi (e.g., IEEE 802.11 technologies including 802.11n, 802.11b, 802.11g, and 802.11a)), Worldwide Interoperability for Microwave Access (e.g., WiMAX-IEEE 802.16) networks.","Merchandising applications  support various merchandising functions that are made available to sellers to enable sellers to increase sales via the network-based marketplace . The merchandising applications  may also operate the various merchandising features that may be invoked by sellers and may monitor and track the success of merchandising strategies employed by sellers.","The network-based marketplace  itself, or one or more parties that transact via the network-based marketplace , may operate loyalty programs that are supported by one or more loyalty promotions applications . For example, a buyer may earn loyalty or promotions points for transactions established and\/or concluded with a particular seller, and then be offered a reward for which accumulated loyalty points can be redeemed.","The network-based marketplace  may further include distributed application program interface applications , as previously described.","Data Structures",{"@attributes":{"id":"p-0070","num":"0069"},"figref":"FIG. 7","b":["301","303","47","213","215","305","203","203","203"]},"The tables  also include an items table  in which item records are maintained for goods and services that are available to be, or have been, transacted via the network-based marketplace . Item records within the items table  may furthermore be linked to one or more user records within the user table , so as to associate a seller and one or more actual or potential buyers with an item record.","A transaction table  contains a record for each transaction (e.g., a purchase or sale transaction) pertaining to items for which records exist within the items table .","An order table  may be populated with order records, with each order record being associated with an order. Each order, in turn, may be associated with one or more transactions for which records exist within the transaction table .","Bid records within a bids table  may relate to a bid received at the network-based marketplace  in connection with an auction-format listing supported by an auction application . A feedback table  may be utilized by one or more reputation applications , in one example embodiment, to construct and maintain reputation information concerning users. A history table  may be used to maintain a history of transactions to which a user has been a party. One or more attributes tables  record attribute information pertaining to items for which records exist within the items table . Considering only a single example of such an attribute, the attributes tables  may indicate a currency attribute associated with a particular item, with the currency attribute identifying the currency of a price for the relevant item as specified in by a seller.","A search table  may store search information that has been entered by a user (e.g., buyer) who is looking for a specific type of listing. A scatter gather logical database  may further be used as previously described.","Methods of Operation",{"@attributes":{"id":"p-0076","num":"0075"},"figref":["FIG. 8","FIG. 8"],"b":["401","5","13","26","79","83"]},"The method  commences, at operation , with the client machine  communicating a request that includes a job  to the API server . In one embodiment, the job  may include a request to add listings on a network-based marketplace  by retrieving listing information from the client machine .","At operation , the API server  receives the request and stores the job  in the job table , generates a job event  and stores the job event  on the job queue .","At operation , at the processing node , the controller module  may identify that sufficient local resources are available to process the job . For example, the controller module  may determine, according to an embodiment, that an adequate number of processors  and memory  are available to process the job . Next, the controller module  may invoke the job executor .","At operation  the job executor  may invoke the job pre-processor  based on the job type in the job , and at operation  the job pre-processor  may pre-process the job . For example, the job pre-processor  may identify that the job  includes a request to add listings on a network-based marketplace  and attempt to identify whether the user that is making the request has an account on the network-based marketplace . For example, the job pre-processor  may request the user be looked up in the user table . At operation , the job executor  may invoke the job parser . At operation , the job parser  parses the job  into sub-jobs  that include tasks . In one embodiment, the job parser  may parse the job  and generate sub-jobs  along with the appropriate tasks  according to categories on the network-based marketplace  that are to receive the listings. For example, the job  may specify that ten listings are to be added to the toys category, five listings are to be added to the book category, and three listings are to be added to the IPod category. Accordingly, the job parser  may create three sub-jobs  that respectively include similar tasks  for the toys, books, and IPods categories. For example, each sub-job  may include tasks  to retrieve listing data for listings to be added to the appropriate category from the client machine  and a task to add the listings to the appropriate category responsive to receiving the listing data from the client machine .","At operation , the scheduler  may schedule sub-job events  on the sub-job queue  and\/or sub-job events  on the sub-job retry queue  provided that adequate local and remote resources  are available to process the sub-jobs , as described in more detail later.","At operation , the sub-job executor , at the same or different processing node , may retrieve a sub-job event  from the sub-job queue  or the sub-job retry queue  and invoke the appropriate task processor  based on the job type in the corresponding job . It will be appreciated that operation  may be performed by multiple processing nodes  in parallel. The processing nodes  may continue to process the sub-job events  until all of the sub-job events  associated with the job  are completed. At operation , the task processor  may execute the tasks  in the sub-job . In the present example, the task processor  may execute a task  that utilizes an API server  from the API server resource pool  to request listing data from the client machine , as illustrated by the dashed line to operation , where the client machine  receives a request for listing data. In response to the request, the client machine  may communicate the listing data to the task processor  on the processing node . Further, at operation , the task processor  may execute a task that utilizes a database server in the database server resource pool  to add the listings to the items table  on the network-based marketplace . At operation , the job executor  which determines that all of the sub-jobs  associated with the job  are completed and invokes the job post-processor . At operation , the job post-processor  may gather the task results from each of the sub-jobs  and communicates the job results to the client machine .","At operation , the client machine  may receive the job results. For example, the job results may include job result information that indicates whether the request to add the listings was successful or whether the request failed.","The above example relates the job  as being processed through to completion without interruption. Nevertheless, it will be appreciated by one skilled in the art that the job  may have been interrupted for lack of local resources  or for some other reasons. In such cases, the job event may be moved to the job retry queue  and a timeout may be set which upon expiration may result in further processing of the job , as previously described.",{"@attributes":{"id":"p-0085","num":"0084"},"figref":["FIG. 9A","FIG. 8"],"b":["451","20","451","419","451","453","89","20","89","41","20","41","89","15","27","455","89","20","457","89","20"]},{"@attributes":{"id":"p-0086","num":"0085"},"figref":["FIG. 9B","FIG. 9A"],"b":["475","20","475","453","455","457","475","477","89","71","20","71","63","20","479","89","71","20","71","20","110","481","89","71","20","71","112","483","89","20","71","20","71","20","71","20","89","20","71","89","20","485","495"]},"At operation  the scheduler  identifies whether sufficient remote resources  are available as utilized by the sub-job .","At operation  the scheduler  identifies the remote resources  required to execute a sub-job . In one embodiment the quantity of remote resources  for the sub-job  may be determined via the job information  for the corresponding job . At operation , the scheduler  identifies a quantity of remote resources  that are currently being utilized to process sub-jobs . For example, remote resources  that are currently being utilized to process sub-jobs  may be identified in the current utilization information . At operation , the scheduler  may identify the maximum utilization of remote resources  that may be utilized to process sub-jobs . For example, the maximum utilization of remote resources  may be identified in the maximum utilization information . At decision operation , the scheduler  may determine to schedule the sub-job  based on the remote resources  required to execute the sub-job , the remote resources  currently utilized to process sub-jobs , and the maximum utilization of remote resources  to process sub-jobs . For example, the scheduler  may identify that scheduling the sub-job  may bump the current utilization to an amount that is less than the maximum acceptable utilization of remote resources . If the scheduler  determines there is sufficient capacity for processing the sub-job , then a branch is made to operation . Otherwise a branch is made to operation .","At operation  the scheduler  schedules the sub-job . For example, the sub-job  is moved to the sub-job queue , the job  is moved to the job queue  and the process ends.","At operation , the scheduler  moves the job  to the job-retry queue  and the sub-job  to the sub-job table  and the process ends. The above method  may be iterated for other sub-jobs  of similar priority on the sub-job queue .",{"@attributes":{"id":"p-0091","num":"0090"},"figref":"FIG. 10A","b":["501","20","501","503","75","99","5","99","5","505","75","507","75","203","75"]},"At operation , at a second processor , the task processor  communicates a request for listing data for a second plurality of listings to the client machine . The second processor  is illustrated as being located on the same processing node  as the first processor ; however, it will be appreciated by one having ordinary skill in the art that the second processor  may be located on a different processing node . For example, the task processor  may communicate a request for listing data for listings to be added to the book category. At operation , the second processor  may receive the listing data for a second plurality of listings (e.g., listings to be added to the book category). At operation , the second processor  may automatically add the second plurality of listings to the network-based marketplace . For example, the second processor  may add the second plurality of listings in the book category.",{"@attributes":{"id":"p-0093","num":"0092"},"figref":"FIG. 10B","b":["521","521","523","75","99","5","99","20"]},"At operation , at a second processor , the task processor  communicates transaction data for a second plurality of listings to the client machine . For example, the task processor  may communicate transaction data in the form of transactions for listings in the book category that are associated with a particular user, and the sub-job  ends.",{"@attributes":{"id":"p-0095","num":"0094"},"figref":"FIG. 11","b":["531","19","531","19","531","533","535","537","541","19","533","81","22","81","535","19","537","26","19","26","537","26","539","539","18","34","540"]},"The user interface  provides another approach to activate and suspend a recurring job . The user interface element  may be used to receive a job identifier to identify a particular reoccurring job . In response to the selection, the monitor module  may identify the reoccurring job  and displays the reoccurring job  in the display area .","The display area  includes columns , , , , , ,  and . The column  displays a recurring job identifier that is associated with a particular job  that uniquely identifies the job  from other jobs . The column  displays the job state, as previously described. The column  displays a period type for job execution. For example, the period type may include a standard unit of time such as a day, week, month, bi-monthly, etc. The column  displays a period interval for job execution. The period interval identifies a particular moment to initiate the job  during the period type. The column  may display the start time for the job . The column  may display job information that may be collected for a job . The information collected may be defined by the author of the job module . In one embodiment, a row in the column  may be selected to display a pop-up window  that includes job information associated with the corresponding job . The column  may be used to display a creation date of the job . The column  may be used to display a date that the job  was last updated on the user interface .",{"@attributes":{"id":"p-0098","num":"0097"},"figref":"FIG. 12","b":["561","19","561","563","565","567","569","571","573","577","19","563","81","561","603","565","81","567","569","81","571","26","573","19","561","575","575","18","19","34","19","576"]},"The user interface  further provides for displaying information for a particular job . For example, the user interface element  may receive a scatter gather job identifier to identify a particular job . In response to the selection of user interface element , the monitor module  receives the search parameter in the form of the scatter gather job identifier, identifies the requested job  in the statistical information  and displays the job  the display area .","The display area  includes columns , , , , , , , , , , , , , ,  and . The column  displays a scatter gather framework job identifier that is associated with a particular job  and uniquely identifies the job  from other jobs . The column  displays a job module identifier that is associated with a particular job  that uniquely identifies the job  from other jobs  processed by the particular job module . The column  displays a job type, as previously described. The column  displays a job state, as previously described. The column  displays a job priority, as previously described. The column  displays a task identifier of the last task  of the job  to execute during the identified window of time. The column  displays a time the job  started. The column  displays a date the job  was created. The column  displays a date and time the job  was last modified. The column  displays whether a service level objective (SLO) was reached for a job. For example, a service level objective may define performance standards that may be applied against the actual performance of the job  to determine whether execution of the job  exceeded or fell below the service level objective. The column  may display a recurring status for the job . For example, the job  may be reoccurring or non-reoccurring (e.g., one-time execution). The column  may display an elapsed time measured by the start and end of the job . The column  may display the total number of tasks  in the job . The column  may display the number of tasks  that are successfully completed by job . The column  may display tasks  that are finished by job . The column  may display a unique identifier for the underlying event.",{"@attributes":{"id":"p-0101","num":"0100"},"figref":"FIG. 13","b":["601","19","601","603","605","607","609","613","615","19","603","81","601","603","605","607","609","613","19","615","617","18","19","34","19","619"]},"The display area  includes columns , , , , , , , , , , ,  and . The column , , and  collectively identify an aggregate of jobs  according to a job type, a job priority, and a job state, respectively that are processed by the \u201cBDX\u201d job module . The column  may display a count of jobs  for the indicated aggregate of jobs . The column  may display a count of reoccurring jobs  for the indicated aggregate of jobs . The columns , , and  may respectively display counts of tasks, as previously described, for the indicated aggregate of jobs . The column  may display the minimum time elapsed for execution of a job  in the indicated aggregate of jobs . The column  may display the maximum time elapsed for execution of a job  in the indicated aggregate of jobs . The column  may display the average time elapsed for execution of a job  as computed for the aggregate of jobs . The column  may display a maximum service level objective for a particular job  in the indicated aggregate of jobs , and the column  may display an average service level objective for the aggregate of jobs .",{"@attributes":{"id":"p-0103","num":"0102"},"figref":"FIG. 14","b":["651","19","651","653","655","657","659","661","663","665","667","669","671","673","675","677","679","681","683","685","653","655","657","659","661","19","81","655","19","663","19","19","665","19","19","667","19","669","19","671","19","673","675","19","677","19","679","681","19","683","685","19"]},{"@attributes":{"id":"p-0104","num":"0103"},"figref":"FIG. 15","b":["689","689","691","693","694","695","696","697","698","699","691","693","694","695","39","41","696","39","697","41","698","699","19","39","41"]},{"@attributes":{"id":"p-0105","num":"0104"},"figref":["FIG. 16","FIG. 12"],"b":["701","20","19","701","703","705","707","709","34","703","19","22","703","579","561","705","707","20","709","709","18","34","710"]},"The display area  includes columns , , , , , , , , ,  and . The column  may display a sub-job identifier for the sub-jobs  associated with the identified job . Selecting any of the sub-job  identifiers may display a user interface with tasks for the selected sub-job , as described further below. The column  may be used to display a sub-job state, as previously described. The column  may display a resource name. The column  may be used to display a date the sub-job  was created. The column  may be used to display a date and time the sub-job  was last modified. The column  may display a local total cost for resources. The column  may be used to display a remote total cost for resources. The column  may be used to display a local current cost for resources. The column  may be used to display a remote current cost for resources. The column  may be used to display an invocation global user identifier. The column  may be used to display user interface element that may be selected",{"@attributes":{"id":"p-0107","num":"0106"},"figref":["FIG. 17","FIG. 16"],"b":["751","39","20","751","753","755","757","759","39","753","19","22","19","755","20","22","753","755","711","701","757","759","39","761","761","18","39","34","763"]},"The display area  may include columns , , , , , , , ,  and . The column  may be used to display a task identifier for a sub-job  associated with the identified job . The column  may be used to display a task state, as previously described. The column  may be used to display an action name (e.g., the name of an action made to a remote resource ). The column  may be used to display a retry count representing the number of retries executed by the task . The column  may display an order identifier. For example, the tasks in a job  may be ordered  to  for the purpose of identifying the respective tasks. The column  may display a date the task was created. The column  may display a date and time the task  was last modified. The column  may display a user interface element that is selectable to display a user interface that includes information that describes a machine (e.g., processing node )\/thread that worked on the task , as described further below. The column  may display a request and the column  may display a response. The request\/response fields may be customized by a user of the application to store values related to the request and response.",{"@attributes":{"id":"p-0109","num":"0108"},"figref":"FIG. 18","b":["780","26","39","781","782","785","787","789","791","793","795","797","782","39","785","19","20","39","787","26","39","789","39","791","793","795","39","797"]},{"@attributes":{"id":"p-0110","num":"0109"},"figref":["FIG. 19","FIG. 18"],"b":["799","26","39","799","795","781","799"]},"The above described user interfaces are illustrated to include user interface elements and columns for display. However, it will be appreciated by those skilled in the art that the user interfaces may also be embodied as a machine interface (e.g., Standard Generalized Markup Language\u2014SGML) including machine interface elements, an audio interface including audio interface elements, a kinetic interface including kinetic interface elements, or some other type of interface using some other type of interface elements.","In some embodiments, the methods described herein may be implemented in a distributed or non-distributed software application designed under a three-tier architecture paradigm, whereby the various components of computer code that implement this method may be categorized as belonging to one or more of these three tiers. Some embodiments may include a first tier as an interface (e.g., an interface tier) that is relatively free of application processing. Further, a second tier may be a logic tier that performs application processing in the form of logical\/mathematical manipulations of data inputted through the interface level and communicates the results of these logical\/mathematical manipulations to the interface tier and\/or to a backend, or storage, tier. These logical\/mathematical manipulations may relate to certain business rules or processes that govern the software application as a whole. A third, storage, tier may be a persistent storage medium or non-persistent storage medium. In some cases, one or more of these tiers may be collapsed into another, resulting in a two-tier architecture, or even a one-tier architecture. For example, the interface and logic tiers may be consolidated, or the logic and storage tiers may be consolidated, as in the case of a software application with an embedded database. This three-tier architecture may be implemented using one technology, or, as will be discussed below, a variety of technologies. This three-tier architecture, and the technologies through which it is implemented, may be executed on two or more computer systems organized in a server-client, peer-to-peer, or so some other suitable configuration. Further, these three tiers may be distributed between multiple computer systems as various software components.","Some example embodiments may include the above illustrated tiers, and processes or operations that make them up, as being written as one or more software components. Common to many of these components is the ability to generate, use, and manipulate data. These components, and the functionality associated with each, may be used by client, server, or peer computer systems. These various components may be implemented by a computer system on an as-needed basis. These components may be written in an object-oriented computer language such that a component oriented, or object-oriented programming technique can be implemented using a Visual Component Library (VCL), Component Library for Cross Platform (CLX), Java Beans (JB), Java Enterprise Beans (EJB), Component Object Model (COM), Distributed Component Object Model (DCOM), or other suitable technique. These components may be linked to other components via various APIs, and then compiled into one complete server, client, and\/or peer software application. Further, these APIs may be able to communicate through various distributed programming protocols as distributed computing components.","Some example embodiments may include remote procedure calls being used to implement one or more of the above illustrated components across a distributed programming environment as distributed computing components. For example, an interface component (e.g., an interface tier) may reside on a first computer system that is remotely located from a second computer system containing a logic component (e.g., a logic tier). These first and second computer systems may be configured in a server-client, peer-to-peer, or some other suitable configuration. These various components may be written using the above illustrated object-oriented programming techniques, and can be written in the same programming language, or a different programming language. Various protocols may be implemented to enable these various components to communicate regardless of the programming language used to write these components. For example, a component written in C++ may be able to communicate with another component written in the Java programming language by using a distributed computing protocol such as a Common Object Request Broker Architecture (CORBA), a Simple Object Access Protocol (SOAP), or some other suitable protocol. Some embodiments may include the use of one or more of these protocols with the various protocols outlined in the Open Systems Interconnection (OSI) model, or Transport Control Protocol\/Internet Protocol (TCP\/IP) protocol stack model for defining the protocols used by a network to transmit data.","Some embodiments may utilize the OSI model or TCP\/IP protocol stack model for defining the protocols used by a network to transmit data. In applying these models, a system of data transmission between a server and client, or between peer computer systems, is illustrated as a series of roughly five layers comprising: an application layer, a transport layer, a network layer, a data link layer, and a physical layer. In the case of software having a three-tier architecture, the various tiers (e.g., the interface, logic, and storage tiers) reside on the application layer of the TCP\/IP protocol stack. In an example implementation using the TCP\/IP protocol stack model, data from an application residing at the application layer is loaded into the data load field of a TCP segment residing at the transport layer. This TCP segment also contains port information for a recipient software application residing remotely. This TCP segment is loaded into the data load field of an IP datagram residing at the network layer. Next, this IP datagram is loaded into a frame residing at the data link layer. This frame is then encoded at the physical layer, and the data transmitted over a network such as an internet, Local Area Network (LAN), WAN, or some other suitable network. In some cases, internet refers to a network of networks. These networks may use a variety of protocols for the exchange of data, including the aforementioned TCP\/IP, and additionally asynchronous transfer mode (ATM), system network architecture SNA, SDI, or some other suitable protocol. These networks may be organized within a variety of topologies (e.g., a star topology) or structures.",{"@attributes":{"id":"p-0116","num":"0115"},"figref":"FIG. 20","b":"800"},"The example computer system  includes one or more processors  (e.g., a central processing unit (CPU), a graphics processing unit (GPU), or both), a main memory  and a static memory , which communicate with each other via a bus . The computer system  may further include a video display unit  (e.g. a liquid crystal display (LCD) or a cathode ray tube (CRT)). The computer system  also includes an input device  (e.g., a keyboard), a cursor control device  (e.g., a mouse), a disk drive unit , a signal generation device  (e.g., a speaker) and a network interface device .","The disk drive unit  includes a machine-readable medium  on which is stored one or more sets of instructions (e.g., software)  embodying any one or more of the methodologies or functions described herein. The instructions  may also reside, completely or at least partially, within the main memory , the static memory , and\/or within the processor  during execution thereof by the computer system . The main memory  and the processor  also may constitute machine-readable media. The instructions  may further be transmitted or received over a network  via the network interface device .","Applications that may include the apparatus and systems of various embodiments broadly include a variety of electronic and computer systems. Some embodiments implement functions in two or more specific interconnected hardware modules or devices with related control and data signals communicated between and through the modules, or as portions of an application-specific integrated circuit. Thus, the example system is applicable to software, firmware, and hardware implementations. In example embodiments, a computer system (e.g., a standalone, client or server computer system) configured by an application may constitute a \u201cmodule\u201d that is configured and operates to perform certain operations as described herein. In other embodiments, the \u201cmodule\u201d may be implemented mechanically or electronically. For example, a module may comprise dedicated circuitry or logic that is permanently configured (e.g., within a special-purpose processor) to perform certain operations. A module may also comprise programmable logic or circuitry (e.g., as encompassed within a general-purpose processor or other programmable processor) that is temporarily configured by software to perform certain operations. It will be appreciated that the decision to implement a module mechanically, in the dedicated and permanently configured circuitry, or in temporarily configured circuitry (e.g. configured by software) may be driven by cost and time considerations. Accordingly, the term \u201cmodule\u201d should be understood to encompass a tangible entity, be that an entity that is physically constructed, permanently configured (e.g., hardwired) or temporarily configured (e.g., programmed) to operate in a certain manner and\/or to perform certain operations described herein.","While the machine-readable medium  is shown in an example embodiment to be a single medium, the term \u201cmachine-readable medium\u201d should be taken to include a single medium or multiple media (e.g., a centralized or distributed database, and\/or associated caches and servers) that store the one or more sets of instructions. The term \u201cmachine-readable medium\u201d shall also be taken to include any medium that is capable of storing, encoding or carrying a set of instructions for execution by the machine and that cause the machine to perform any one or more of the methodologies of the present description. The term \u201cmachine-readable medium\u201d shall accordingly be taken to include, but not be limited to, solid-state memories, optical media and magnetic media. As noted, the software may be transmitted over a network using a transmission medium. The term \u201ctransmission medium\u201d shall be taken to include any medium that is capable of storing, encoding or carrying instructions for transmission to and execution by the machine, and includes digital or analogue communications signal or other intangible medium to facilitate transmission and communication of such software.","The illustrations of embodiments described herein are intended to provide a general understanding of the structure of various embodiments, and they are not intended to serve as a complete description of all the elements and features of apparatus and systems that might make use of the structures described herein. Many other embodiments will be apparent to those of ordinary skill in the art upon reviewing the above description. Other embodiments may be utilized and derived therefrom, such that structural and logical substitutions and changes may be made without departing from the scope of this disclosure. The figures provided herein are merely representational and may not be drawn to scale. Certain proportions thereof may be exaggerated, while others may be minimized. Accordingly, the specification and drawings are to be regarded in an illustrative rather than a restrictive sense.","Thus, methods and systems to process a request received at an application program interface are disclosed. While the present disclosure has been described in terms of several example embodiments, those of ordinary skill in the art will recognize that the present disclosure is not limited to the embodiments described, but may be practiced with modification and alteration within the spirit and scope of the appended claims. The description herein is thus to be regarded as illustrative instead of limiting."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["Embodiments illustrated by way of example and not limitation in the figures of the accompanying drawings, in which:",{"@attributes":{"id":"p-0005","num":"0004"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0006","num":"0005"},"figref":"FIG. 2A"},{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 2B"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 3A"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 3B"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 9A"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 9B"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 10A"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 10B"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIGS. 11-19"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 20"}]},"DETDESC":[{},{}]}
