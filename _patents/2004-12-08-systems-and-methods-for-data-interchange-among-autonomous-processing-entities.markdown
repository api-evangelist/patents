---
title: Systems and methods for data interchange among autonomous processing entities
abstract: Data element values are shared between a first software component and a second software component of a document processing framework. The components can capture, process, or route a digital image of a document and access a configuration file that is generated for the image. A data element attribute and value pair is placed in the configuration file. The value of the data element is a tag that includes an identifier identifying the first software component and a tag name. The first software component is executed on the image, produces a tag value corresponding to the tag name, searches the configuration file for the tag by the identifier, replaces the tag with the tag value in the configuration file, and terminates. The second software component is executed on the image after the first software component has terminated and reads the data element attribute and value pair.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07752603&OS=07752603&RS=07752603
owner: Notable Solutions, Inc.
number: 07752603
owner_city: Rockville
owner_country: US
publication_date: 20041208
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATION","BACKGROUND OF THE INVENTION","BRIEF SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION"],"p":["This application claims the benefit of U.S. Provisional Patent Application Ser. No. 60\/527,297 filed Dec. 8, 2003, which is herein incorporated by reference in its entirety.","1. Field of the Invention","Embodiments of the present invention relate to systems and methods of sharing data among autonomous processing entities under a common framework. More particularly, embodiments of the present invention relate to systems and methods for specifying shared data in an software application as a replaceable tag that is replaced at runtime by another software application.","2. Background Information","Sharing data among software applications is a common problem. Numerous solutions to this problem exist. One solution is an application programming interface (API). An API of a first application allows a second application to access its data via a defined set of routines, which the second application can call. An API can be a very efficient method of sharing data, especially for large and complex applications. Considerable effort, however, is required to develop and learn an API. As a result, it is less efficient method for large numbers of smaller applications.","Another method of sharing data is messaging. In this method, one application sends data to another application in the form of a message. The format of the message is understood by both applications. Messaging is advantageous for large numbers of autonomous applications, because only one format, or set of rules, needs to be understood by all applications. Messaging, however, becomes very complex when large numbers of applications share data. Message contention, is one of the many problems that arise in this instance.","Other methods of sharing data among software applications include but are not limited to Software Development Kit (SDK) integration, communication through a central repository, and file sharing. All methods of sharing data have advantages and disadvantages for particular types of applications.","Software applications that share simple information are a particularly hard problem. Simple information is, for example, a name or telephone number. It is usually a single piece of data. Most methods for sharing data among these applications are time consuming, manually intensive, and require an intense knowledge of a programming interface.","In view of the foregoing, it can be appreciated that a substantial need exists for systems and methods that can advantageously provide for data sharing among autonomous software applications that share simple information.","One embodiment of the present invention is a system for sharing data element values among software components of a document processing framework that capture, process, and route a digital image of a document. The system includes a configuration file, a first software component, and a second software component. The configuration file is generated for the digital image and is used to store the data element values of the software components. The configuration file is accessible to the first software component and the second software component. At least one data element attribute and value pair is placed in the configuration file to be read by the second software component. The value of the data element is a tag that includes a start tag delimiter, an identifier identifying the first software component, an identifier and tag name separator, a tag name, and an end tag delimiter. The first software component is executed on the digital image, produces a tag value corresponding to the tag name, searches the configuration file for the tag by the identifier, replaces the tag with the tag value in the configuration file, and terminates. The second software component is executed on the digital image after the first software component has terminated and reads the at least one data element attribute and value pair, which includes the tag value.","Another embodiment of the present invention is a method for sharing data element values among software components of a document processing framework that capture, process, and route a digital image of a document. A configuration file corresponding to the digital image is created. A first software component of the document processing framework to be executed on the digital image is selected. A second software component of the document processing framework to be executed on the digital image is selected. The second software component is selected to be executed sequentially after the first software component. At least one data element attribute and value pair is placed in the configuration file to be read by the second software component. The value of the data element is a tag that includes a start tag delimiter, an identifier identifying the first software component, an identifier and tag name separator, a tag name, and an end tag delimiter. The first software component is executed on the digital image. The first software component produces a tag value corresponding to the tag name. The first software component searches the configuration file for the tag by the identifier. The first software component replaces the tag with the tag value in the configuration file and terminates. The second software component is executed on the digital image. The second software component reads the at least one data element attribute and value pair including the tag value.","Another embodiment of the present invention is a system for sharing information among autonomous processing entities that manipulate an instance of digital content. The system includes a shared memory space corresponding to the instance, a first autonomous processing entity, and a second autonomous processing entity. At least one attribute and value pair is placed in the shared memory to be read by the second autonomous processing entity. The value of the at least one attribute and value pair is a tag that includes an identifier identifying the first autonomous processing entity and a tag name. The first autonomous processing entity is executed on the instance, produces a tag value corresponding to the tag name, searches the shared memory space for the tag by the identifier, replaces the tag with the tag value in the shared memory, and terminates. The second autonomous processing entity is executed on the instance after the first autonomous processing entity has terminated and reads the at least one attribute and value pair. The value of the at least one attribute and value pair includes the tag value.","Another embodiment of the present invention is a method for sharing information among autonomous processing entities that manipulate an instance of digital content. A shared memory space corresponding to the instance is allocated. A first autonomous processing entity to be executed on the instance is selected. A second autonomous processing entity to be executed on the instance is selected. The second autonomous processing entity is executed sequentially after the first autonomous processing entity. At least one attribute and value pair is placed in the shared memory to be read by the second autonomous processing entity. The value of the at least one attribute and value pair is a tag including an identifier identifying the first autonomous processing entity and a tag name. The first autonomous processing entity is executed on the instance. The first autonomous processing entity produces a tag value corresponding to the tag name. The first autonomous processing entity searches the shared memory space for the tag by the identifier. The first autonomous processing entity replaces the tag with the tag value in the shared memory and terminates. The second autonomous processing entity is executed on the instance. The second autonomous processing entity reads the at least one attribute and value pair. The value of the at least one attribute and value pair includes the tag value.","Before one or more embodiments of the invention are described in detail, one skilled in the art will appreciate that the invention is not limited in its application to the details of construction, the arrangements of components, and the arrangement of steps set forth in the following detailed description or illustrated in the drawings. The invention is capable of other embodiments and of being practiced or being carried out in various ways. Also, it is to be understood that the phraseology and terminology used herein is for the purpose of description and should not be regarded as limiting.","Capture, Process, and Route",{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 1","b":["100","100","110","100","120","130","120"]},"Each step of system  includes of one or more independent software components. For example,  shows data being read from fax , multifunctional peripheral , and scanner  in capture step . In order to read data from all three devices, system  includes at least three independent capture software components. Independent software components can also be required for specific device manufacturers and specific device models. Similarly, independent software components are need for interfaces to software applications.  shows data being routed to printer , computer , and database application  in routing step . In order to route data to these two devices and one software application, routing step  requires at least three independent software components.","Exemplary capture software components include but are not limited to a digital sender reader, an address book manager exporter, an extensible markup language (XML) reader, a Hewlett-Packard\u2122 multifunctional peripheral 4100 and 9000 interface, a Hewlett-Packard LaserJet\u2122 multifunctional peripheral 9055 and 9065 interface, a poll directory software component, a content management queue software component, a batch importer, a post office protocol 3 (POP3) email importer, and a Hewlett-Packard\u2122 Digital Sender 9100c application extractor.","A digital sender reader component decrypts header page files and image files, reads and processes header page files, and maps digital sender soft keys to a process component's attributes. An address book manager exporter exports entries from a device address book to a file. An XML reader reads XML files, encapsulated images, encapsulated index files, and files with XML schema. A Hewlett-Packard\u2122 multifunctional peripheral 4100 and 9000 interface is designed to read data from Hewlett-Packard\u2122 model 4100 and 9000 Chay .JAR menu enabled Hewlett-Packard\u2122 devices and communicates with these devices by using XML to create and update application function keys, by receiving scanned document and indexing data, and by providing simple mail transfer protocol (SMTP) gateway functionality. A Hewlett-Packard\u2122 multifunctional peripheral 9055 and 9065 interface is designed to read data from Hewlett-Packard\u2122 model 9055 and 9065 Chay .JAR menu enabled Hewlett-Packard\u2122 devices and communicates with these devices by using XML to create and update application function keys, by receiving scanned document and indexing data, and by providing simple mail transfer protocol (SMTP) gateway functionality.","A poll directory software component allows files to be batch loaded. The poll directory software component, imports documents of any format from any shared network drive, processes the content, and stores the content in a supported document within a database management system. The poll directory software component is designed to poll a input directory for files and then move all of the files from the input directory to the working directory before introducing them into the remainder of the process. A content management queue software component reads files from a variety of sources including multifunction peripherals, digital copiers, and fax servers. The content management queue software component performs post-capture functions including indexing and validation, document conversion, and document form recognition. The content management queue software component utilizes open database connectivity (ODBC) for storing and retrieving document from queues.","A batch importer reads and imports American standard code for information interchange (ASCII) delimited files for processing. The imported index fields can also contain one or more file path names for importing associated image files. The batch importer defines the delimiter, field orders, field names, and the image file field designation. The batch importer can import ASCII delimited index files, import one or multiple image files, and replace field values. A POP3 email importer retrieves email messages from a mail server that supports the POP3 protocol, including any attachments from the designated mailbox. The content of each email message can be either text or hypertext markup language (HTML). The content of each email message, including any attachments, is retrieved and processed as a single job, and the email message is, in turn, removed from the designated mailbox. The POP3 email importer must be supplied with a POP3 account name and its associated password for any specific email. A Hewlett-Packard\u2122 Digital Sender 9100c application extractor extracts field definitions from the Microsoft SharePoint\u2122 Portal Server Version 1.0 and automatically creates the matching profile definitions in the digital sender device. The Hewlett-Packard\u2122 Digital Sender 9100c application extractor is designed to synchronize the digital sender application function keys with Microsoft SharePoint\u2122 document profiles. The Hewlett-Packard\u2122 Digital Sender 9100c application extractor creates a batch file that is used for loading function key definitions into the Hewlett-Packard\u2122 Digital Sender 9100c.","Exemplary process components include but are not limited to an XML processing software component, an optical character recognition (OCR) software component, a basic image management utility, an encryption and decryption software component, a portable datafile (PDF) barcode reader, a file options utility, a notification software component, a professional image management utility, an ODBC interface, a data interchange software component, a watermark creation software component, and a Visual Basic\u2122 and Java\u2122 scripting software component.","An XML processing software component unpacks an XML document and determines whether or not to send the field values of the XML document to the next component in the process. An OCR software component provides font-independent character recognition on an image file. A basic image management utility cleans up black-and-white multi-page images, splits an image into multiple pages, and provides barcode recognition. An encryption and decryption software component allows captured data to be encrypted or decrypted. All encrypted files are appended with the cryptography (CRY) file extension. A PDF 417 barcode reader reads two dimensional barcodes from image files. After a barcode has been read, other components can use the barcode information within system . A file options utility captures processed files into a directory for rerouting to multiple destinations. The file options utility is useful in eliminating expensive and repetitive processor intensive tasks. The file options utility can determine how to treat a variety of files, depending on whether or not the files have been successfully captured.","A notification software component alerts a user to the status of a job. A job is the processing of a single instance of digital content in system . Job status can be a success or failure. The notification software component can be configured to send email messages, with or without attachments, about the job status. The notification software component uses SMTP for sending email. A professional image management utility is used to enhance the quality and appearance of black-and-white images. The professional image management utility enhances scanned or faxed documents by performing operations that remove imperfections. The professional image management utility can also split images into several documents based on a predefined set of criteria. The professional image management utility provides image-processing options including de-skew, de-speckle, smooth text, trim edges, remove dots, remove lines, remove borders, and remove empty pages.","An ODBC interface allows images, files, or data to be written directly into database tables of database applications including but not limited to Microsoft Access\u2122 or Visual Fox Pro\u2122. The ODBC interface can update structured query language (SQL) tables with images and data elements, or to create an archival system. A data interchange software component enables data to be interchanged among components when no mapping components are present within system . A watermark creation software component allows documents to be permanently watermarked with images, such as company logos, or text, such as \u201cConfidential\u201d and \u201cDo Not Copy.\u201d A Visual Basic\u2122 and Java\u2122 scripting software component allows a user to build a custom-built capture software component. The Visual Basic\u2122 and Java\u2122 scripting software component also allows a user to write scripts to gain access to external databases, manipulate internal files, or validate indexing data fields.","Exemplary route software components include but are not limited to a send to fax software component, a send to a directory software component, a send to printer software component, a Microsoft SharePoint\u2122 Portal Server interface, an interface to enterprise content management software, an ODBC interface, and an interface to a relational database.","A send to fax software component routes processed digital content to a fax. A send to a directory or folder software component routes processed processed digital content to a location in a file system. A send to printer software component routes processed processed digital content to a printer. A Microsoft SharePoint\u2122 Portal Server interface is used to store files in the Microsoft SharePoint\u2122 Portal Server. The Microsoft SharePoint\u2122 Portal Server is a centralized, unified repository for enterprise users, which provides highly flexible deployment options. An interface to enterprise content management software routes processed digital content to enterprise content management software applications. An ODBC interface routes processed digital content to any ODBC compliant database. An interface to a relational database routes processed digital content to a specific relational database.","A large number of capture, process, and route software components are required for a system that supports a significant number of devices and software applications. As the number of software components increases, so does the need for systems and methods for sharing data elements among software components.","Data Sharing Among Capture Process, and Route Components",{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 2","b":["200","200","210","220","230","220","230","220","230","210"]},"XYZ application  is, for example, a character recognition application that reads the shoe size from a sales receipt that is scanned into system . ABC application  is, for example, an interface to an inventory control program. ABC application  adds the shoe size of shoes sold to an inventory control program by obtaining the shoe size from XYZ application .","For example, in system  data element values are shared between XYZ application  and ABC application  using runtime replacement tags (RRTs). RRTs are tags placed within configuration file  for replacement by data element values during execution time.  shows how data element values are shared using RRTs by displaying the contents of configuration file  over time. At time , a data element attribute \u201cSize\u201d and value \u201c\u02dcXYZ::%Shoe Size%\u02dc\u201d are placed in configuration file . This attribute and value pair is placed in configuration file  at the time the software components to be executed are selected, for example. The value of the attribute \u201cSize\u201d at time  is an RRT. The RRT includes a start tag delimiter, an identifier identifying the software component that will replace the RTT, an identifier and tag name separator, a tag name, and an end tag delimiter. The start tag delimiter is a tilde, \u2018\u02dc\u2019, character. The identifier is a three character identifier, \u201cXYZ\u201d, of XYZ application . The identifier and tag name separator is a string of two colons, \u201c::.\u201d The tag name is \u201c%Shoe Size%.\u201d Finally, the end tag delimiter is also a tilde, \u2018\u02dc\u2019, character.","The purpose of the RRT placed in configuration file  at time  is to share a data element between XYZ application  and ABC application . At time , it is known that ABC application  will read a value for the attribute \u201cSize\u201d, that XYZ application  will be executed before ABC application , and that a value for the attribute \u201cSize\u201d can be obtained from the attribute \u201cShoe Size\u201d used or generated by application XYZ .","At time , XYZ application  is executed, for example, on a digital image of a bar code that contains a shoe size of fourteen inches. XYZ application  uses character recognition to recognize the shoe size and places the attribute value pair \u201cShoe Size=14 inches\u201d in configuration file . Before XYZ application  terminates, it searches configuration file  for any RTTs containing its \u201cXYZ\u201d identifier. XYZ application  find the RRT \u201c\u02dcXYZ::%Shoe Size%\u02dc\u201d by the identifier \u201cXYZ\u201d. XYZ application  attempts to replace the tag name \u201c%Shoe Size%.\u201d The percent, \u2018%\u2019, characters on either side of the tag name identify the tag name as a field tag name. XYZ application  searches its attributes in configuration file  for the \u201cShoe Size\u201d attribute. From the \u201cShoe Size\u201d attribute, XYZ application  obtains the tag value \u201c14 inches.\u201d","At time , XYZ application  replaces the RRT \u201c\u02dcXYZ::%Shoe Size%\u02dc\u201d with the tag value \u201c14 inches\u201d in configuration file . To complete the data sharing between XYZ application  and ABC application , ABC application  reads its attribute \u201cSize\u201d and obtains the value \u201c14 inches.\u201d In one embodiment of the present invention, the attributes of a software component are located by name. In another embodiment of the present invention, the attributes of a software component are found by searching a specific section of the configuration file.",{"@attributes":{"id":"p-0041","num":"0040"},"figref":"FIG. 3","b":["300","310","320","330","340","330","350","340","340","350"]},"There are at least three types of replacement tag names. A first type of replacement tag name is a reserved replacement tag name. Each software component is allowed to create and maintain a set of reserved replacement tag names. Within the boundaries of each software component reserved replacement tag names have special meaning. Each software component defines a list of reserved replacement tag names.","A second type of replacement tag name is a field replacement tag name. Software components that support field names allow the fields to be referenced using a special enclosure character, \u201c%\u201d, on either side of the replacement tag name. An example field name used within an RRT is shown in . In this example, the field replacement tag name is \u201c%Shoe Size%\u201d and the field name is \u201cShoe Size.\u201d","A third type of replacement tag name is a special set replacement tag name. Special set replacement tag names are special sets of characters that provide useful information on a job, including but not limited to a document date and a document creation time. For example, the RRT \u201c\u02dcM49::%Y\u02dc contains the special set replacement tag name \u201c%Y\u201d, which causes the software component \u201cM49\u201d to replace the RRT with a year of creation of a document, or \u201c2004.\u201d Not all software components support special set replacement tag names.","The RRT shown in  is a static RRT. The RRT contains a static replacement tag name that is used to locate a value to replace the RRT. An RRT can also be active. In another embodiment of the present invention, an active RRT contains an executable script in the replacement tag name area of the RRT rather than the replacement tag name. A software component identified by the identifier of an active RRT executes the executable script to produce a tag value that replaces the active RRT.","An executable script of an active RRT can include but is not limited to variables, variable assignments, conditional statements, loops, conditional loops, functions, operators, arithmetic operators, input functions, and output functions. The syntax used by an executable script of an active RRT is preferably the syntax of a known programming scripting language. Known programming scripting languages include but are not limited to Visual Basic\u2122 and Java\u2122.",{"@attributes":{"id":"p-0047","num":"0046"},"figref":"FIG. 4","b":"400"},"In step  of method , a configuration file corresponding to the digital image is created.","In step , a first software component of the document processing framework to be executed on the digital image is selected.","In step , a second software component of the document processing framework to be executed on the digital image is selected. The second software component is selected to be executed sequentially after the first software component.","In step , at least one data element attribute and value pair is placed in the configuration file to be read by the second software component. The value of the data element is a tag that includes a start tag delimiter, an identifier identifying the first software component, an identifier and tag name separator, a tag name, and an end tag delimiter.","In step , the first software component is executed on the digital image.","In step , the first software component produces a tag value corresponding to the tag name.","In step , the first software component searches the configuration file for the tag by the identifier.","In step , the first software component replaces the tag with the tag value in the configuration file and terminates.","In step , the second software component is executed on the digital image.","In step , the second software component reads the at least one data element attribute and value pair including the tag value.","In another embodiment of method , at least one data element attribute and value pair is placed in the configuration file to be read by the second software component. The value of the data element is an active tag that includes a start tag delimiter, an identifier identifying the first software component, an identifier and executable script separator, an executable script, and an end tag delimiter. The first software component is executed on the digital image. The first software component searches the configuration file for the tag by the identifier. The first software component executes the executable script to produce a tag value. The first software component replaces the tag with the tag value in the configuration file and terminates. The second software component is executed on the digital image. The second software component reads the at least one data element attribute and value pair including the tag value.","The executable script of the active tag can include but is not limited to variables, variable assignments, conditional statements, loops, conditional loops, functions, operators, arithmetic operators, input functions, and output functions. The syntax used by the executable script of the active tag is preferably the syntax of a known programming scripting language. Known programming scripting languages include but are not limited to Visual Basic\u2122 and Java\u2122.","Data Sharing Among Autonomous Processing Entities",{"@attributes":{"id":"p-0060","num":"0059"},"figref":"FIG. 5","b":"500"},"System  includes shared memory space  corresponding to the instance of digital content, first APE , and second APE . Shared memory space  can include but is not limited to a configuration file or a location in volatile memory. At least one attribute and value pair is placed in shared memory  to be read by second APE . Example attribute and value pair \u201cATTR1=\u02dcAP1::NAME1\u02dc\u201d is shown in shared memory . The value of the at least one attribute and value pair is a tag, \u201c\u02dcAP1::NAME1\u02dc\u201d, that includes an identifier identifying first APE , \u201cAP1\u201d, and a tag name, \u201cNAME1.\u201d The tag can include but is not limited to an RRT as shown in shared memory . First APE  is executed on the instance of digital content, produces a tag value corresponding to the tag name, searches the shared memory space for the tag by the identifier, replaces the tag with the tag value in shared memory , and terminates. Second APE  is executed on the instance of digital content after first APE  has terminated and reads the at least one attribute and value pair. The value of the at least one attribute and value pair includes the tag value. Arrows  show the order of execution of the APEs and depict the movement of the instance of digital content through system .","Another embodiment of system  utilizes active tags. At least one attribute and value pair is placed in shared memory  to be read by second APE . The value of the at least one attribute and value pair is an active tag that includes an identifier identifying first APE  and an executable script. The tag can include but is not limited to an active RRT. First APE  is executed on the instance of digital content, searches the shared memory space for the tag by the identifier, executes the executable script to produce a tag value, replaces the tag with the tag value in shared memory , and terminates. Second APE  is executed on the instance of digital content after first APE  has terminated and reads the at least one attribute and value pair. The value of the at least one attribute and value pair includes the tag value.","The executable script of the active tag can include but is not limited to variables, variable assignments, conditional statements, loops, conditional loops, functions, operators, arithmetic operators, input functions, and output functions. The syntax used by the executable script of the active tag is preferably the syntax of a known programming scripting language. Known programming scripting languages include but are not limited to Visual Basic\u2122 and Java\u2122.",{"@attributes":{"id":"p-0064","num":"0063"},"figref":"FIG. 6","b":"600"},"In step  of method , a shared memory space corresponding to the instance is allocated. The shared memory space can include but is not limited to a configuration file or a location in volatile memory.","In step , a first APE to be executed on the instance is selected.","In step , a second APE to be executed on the instance is selected. The second APE is executed sequentially after the first APE.","In step , at least one attribute and value pair is placed in the shared memory to be read by the second APE. The value of the at least one attribute and value pair is a tag including an identifier identifying the first APE and a tag name. The tag can include but is not limited to an RRT.","In step , the first APE is executed on the instance.","In step , the first APE produces a tag value corresponding to the tag name.","In step , the first APE searches the shared memory space for the tag by the identifier.","In step , the first APE replaces the tag with the tag value in the shared memory and terminates.","In step , the second APE is executed on the instance.","In step , the second APE reads the at least one attribute and value pair. The value of the at least one attribute and value pair includes the tag value.","In another embodiment of method , active tags are used. At least one attribute and value pair is placed in the shared memory to be read by the second APE, wherein the value is an active tag including an identifier identifying the first APE and an executable script. The first APE is executed on the instance. The first APE searches the shared memory space for the tag by the identifier. The first APE executes the executable script to produce a tag value. The first APE replaces the tag with the tag value in the shared memory and terminates. The second APE is executed on the instance. The second APE reads the at least one attribute and value pair. The value of the least one attribute and value pair includes the tag value.","The executable script of the active tag can include but is not limited to variables, variable assignments, conditional statements, loops, conditional loops, functions, operators, arithmetic operators, input functions, and output functions. The syntax used by the executable script of the active tag is preferably the syntax of a known programming scripting language. Known programming scripting languages include but are not limited to Visual Basic\u2122 and Java\u2122.","In accordance with an embodiment of the present invention, instructions configured to be executed by a processor to perform a method are stored on a computer-readable medium. The computer-readable medium can be a device that stores digital information. For example, a computer-readable medium includes a compact disc read-only memory (CD-ROM) as is known in the art for storing software. The computer-readable medium is accessed by a processor suitable for executing instructions configured to be executed. The terms \u201cinstructions configured to be executed\u201d and \u201cinstructions to be executed\u201d are meant to encompass any instructions that are ready to be executed in their present form (e.g., machine code) by a processor, or require further manipulation (e.g., compilation, decryption, or provided with an access code, etc.) to be ready to be executed by a processor.","Systems and methods in accordance with an embodiment of the present invention disclosed herein can advantageously improve the speed at which APEs can be made to share data. As long as a destination APE integrates into a framework that allows search and replacement of its parameters, little time is needed to integrate the destination APE with other APEs in the framework.","Another advantage of an embodiment of the present invention is that it allows standardization of \u201cpushing\u201d data elements available from a source APE. This is different from messaging definitions used within the industry. An exemplary messaging definition used within the industry is XML.","A third advantage of an embodiment of the present invention is that it provides an open framework in which all APEs can participate. Each APE can define and publish it's own RRTs without having to inform or integrate with others. As long as the destination APE's configuration parameters are open and available for search and replacement within a the framework, APEs can communicate and integrate.","The foregoing disclosure of the preferred embodiments of the present invention has been presented for purposes of illustration and description. It is not intended to be exhaustive or to limit the invention to the precise forms disclosed. Many variations and modifications of the embodiments described herein will be apparent to one of ordinary skill in the art in light of the above disclosure. The scope of the invention is to be defined only by the claims appended hereto, and by their equivalents.","Further, in describing representative embodiments of the present invention, the specification may have presented the method and\/or process of the present invention as a particular sequence of steps. However, to the extent that the method or process does not rely on the particular order of steps set forth herein, the method or process should not be limited to the particular sequence of steps described. As one of ordinary skill in the art would appreciate, other sequences of steps may be possible. Therefore, the particular order of the steps set forth in the specification should not be construed as limitations on the claims. In addition, the claims directed to the method and\/or process of the present invention should not be limited to the performance of their steps in the order written, and one skilled in the art can readily appreciate that the sequences may be varied and still remain within the spirit and scope of the present invention."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 6"}]},"DETDESC":[{},{}]}
