---
title: Universal protocol for enabling a device to discover and utilize the services of another device
abstract: A method and apparatus for enabling any of a variety of devices to communicate with each other over a common or universal protocol. In general, a client device and a server device communicate with each other over a communications link utilizes the common protocol. Initially, once a communications link is established, the server device identifies itself to the client device by sending a tag line message over the communications link. Upon receiving the tag line message, the client then determines that the server is capable of using the common protocol. The client device may then initiate several requests including a service request, a type request or a use request. If the client device initiates a service request, the client simple uses the common protocol to request the service. In response to receiving the service request, the server device performs the requested service and provides a confirmation to the client device. If the client device initiates a type request, the service device will respond by providing information regarding the services the server device provides and the device types supported by the server device. If the client device initiates a use request for a particular service, the server device will provide information to the client device that describes the necessary parameters for invoking the particular service.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06952715&OS=06952715&RS=06952715
owner: Amazon.com, Inc.
number: 06952715
owner_city: Seattle
owner_country: US
publication_date: 20031212
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["RELATED APPLICATIONS","TECHNICAL FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["This application is a continuation of U.S. Patent application Ser. No. 09\/369,118, filed on Aug. 5, 1999, now U.S. Pat. No. 6,673,196, which claims the benefit of U.S. Provisional Application No. 60\/115,106 filed Jan. 8, 1999, and is related to U.S. application Ser. No. 09\/639,114 entitled \u201cHidden Agent Transport Protocol\u201d and filed Aug. 5, 1999. U.S. patent application Ser. No. 09\/369,118 is hereby incorporated by reference in its entirety.","This invention relates to the field of data transfer protocols and, more particularly, relates to simple data transfer protocols capable of being used to facilitate communication between a wide variety of consumer devices.","Data transfer protocols are used to facilitate communication between electronic devices by providing a common set of rules by which data may be exchanged between one device and another. A universal protocol could theoretically allow one device to communicate with any other device, from simple devices like the lights in a room to complex devices like personal computers. However, to approach such an ideal, the protocol itself has to be usable with at least a significant proportion of the devices. Different types of devices have different characteristics such as microprocessor abilities, free memory, and accompanying costs. In addition, consumer devices are produced by a wide variety of manufacturers. Coordination and cooperation in interfacing a wide variety of electronic devices is very difficult. Thus, the need exists for a universal protocol that may be implemented by a large variety of device types produced by various manufacturers.","Many times in the past, manufacturers have made attempts to allow consumer level devices to be able to communicate meaningful data or commands to one another. Many protocols define data links between standard small devices. However, this also meant that usually the \u201cstandard\u201d became only a standard for that genre of device. Further, while these protocols provide a data link, they do not provide a standard method to allow simple relevant information transfer between two small devices. For example, a typical pager cannot send control information to any particular cellular telephone requesting the cellular telephone to initiate a call to a certain number; a \u201ccaller-ID\u201d box is not able to instruct a PDA to display all the contact information for the person who is calling; and a PDA cannot print or fax (without a modem or special drivers). Thus, a need exists for a universal protocol which can provide a simple data link between a wide variety of devices.","The present invention includes a protocol and a method for facilitating communication between various electronic devices and the sharing of features, functionality and information between these devices. In general, the present invention is directed towards a protocol by which one device (the \u201cclient device\u201d) can discover what services are offered by another device (the \u201cserver device\u201d). Utilizing this protocol, the client device can take advantage of the services of the server device. Advantageously, the present invention is simple enough to be used by nearly any type of electronic device, but at the same time it is robust enough to allow a user to author high-level applications utilizing multiple different services available from multiple devices without requiring the user to have any knowledge of any particular device interface or how the device works. The present invention is capable of use by a wide range of devices including, but not limited to, pagers, cellular telephones, wired telephones, caller-ID (\u201cCID\u201d) boxes, printers, facsimile machines, personal data assistant (\u201cPDA\u201d), personal computers, information sources, time pieces, stereo equipment, video equipment, thermostats, weather stations, doors, lights, and security systems. The present invention allows these devices to interact, by standardizing many of the normal tasks associated with these devices. Convergence Corporation, the assignee of the present invention, has developed a universal protocol, referred to as the Service Discovery Transport Protocol (\u201cSDTP\u201d), which embodies many of the aspects of this invention. Thus, embodiments of the present invention include a universal protocol that can be implement in a wide variety of device types produced by various manufacturers. In addition, embodiments of the present invention provide a simple data link between these devices.","The operation of a protocol implementing aspects of the present invention actually begins when the server device sends a message to the client device to inform the client device that it is capable of communicating using the protocol. In an exemplary embodiment, this message and all subsequent messages may be sent using standard 8-bit ASCII characters. Once the client device determines that the server device is capable of communicating using the protocol, the client device may request the server device to identify what kinds of services the server provides. This request is performed by transmitting a type-command to the server device.","Upon receiving the type-command, the server device responds by transmitting one or more device\/service identifiers back to the client device. Each device\/service identifier is unique, and represents either a specific device type, such as a thermostat, a door, a pager, a PDA or many others, or a specific service type, such as the ability to raise the temperature of the thermostat or to transmit the messages stored in the pager. Finally, the server device transmits a standard ASCII sequence to signal the last of the device\/service identifiers.","After the server device identifies itself as being capable of using the protocol, the client device may issue commands to the server device using the unique service identifiers just described. Any necessary parameters may be passed along as well. If everything operates correctly, the service identified by the command is then provided by the server device. Finally, the server device responds to each such command by sending a status code back to the client device. The status code denotes that either: (a) the requested service was unavailable; (b) the server device was unable to complete the operation; (c) the command contained a syntax error; or (d) that the operation completed successfully.","The protocol also supports \u201clearning\u201d new services with which the client is not previously familiar. To invoke this capability, the client device transmits a use-command to the server device to identify the service that the client wishes to learn. Upon receiving the use-command, the server device transmits a service identifier corresponding to the new service and any available parameters. The client device may then invoke the service by sending the service identifier and the requisite parameters.","Another feature of the present invention is the ability to drop into a different, proprietary protocol. By issuing the native-command, the client device can instruct the server device to utilize the existing link to communicate in whatever proprietary protocol is utilized for that link.","Thus, the present invention includes at least four aspects. One aspect of the present invention is a protocol that allows a client device to request a server device to identify what services are provided by the server device and then allows the client device to request one or more of those services to be provided.","Another aspect of the present invention involves the ability of a client device to determine whether any of a wide variety of server devices are capable of communicating with the client device using a standard protocol and then commanding a particular device to carry out a particular function.","A third aspect of the present invention is the structure of the data packets that are transmitted by a server device to uniquely identify the device types emulated by the server device and the services the server device is capable of performing.","A fourth aspect of the invention involves the ability of a client device to determine whether a particular server device is capable of communicating using the SDTP protocol by first establishing communication using any appropriate technology and then determining if further communication is possible using SDTP.","Therefore, it can be seen that these aspects of the present invention may be utilized within a protocol, operable within a variety of device types, that facilitates communication between the variety of device types over a simple data link. These and other aspects, features, and advantages of the present invention will be set forth in the description that follows and possible embodiments thereof, and by reference to the appended drawings and claims.","Before describing the details of the current invention, some terminology used herein is described. The term \u201cprotocol\u201d generally refers to a set of formal rules or conventions describing how data is treated in an electronic system. In electronic communications, protocols define the electrical and physical standards to be observed, such as bit-ordering and byte-ordering and the transmission and error detection and correction of the bit messages, the client-server dialog, character sets, and sequencing of messages. Link protocols define the basics of how communication is established and maintained between two devices. Data protocols define how meaningful data is exchanged between the two devices using the link protocol as the underlying communication layer. Unless otherwise indicated, the term \u201cprotocol,\u201d as used below, refers to the data protocol employed by a given connection between two devices to communicate meaningful data, such as the discovery of information about one device and the issuance of commands by one device to the other.","Referring now to the drawings, in which like numerals represent like elements throughout the several figures, aspects of the present invention and exemplary operating environments will be described.",{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 1","b":"1"},"Those skilled in the art will appreciate that the system illustrated in  may take on many forms and may be directed towards performing a variety of functions. Examples of such forms and functions include mainframe computers, mini computers, servers, work stations, personal computers, hand-held devices such a personal data assistants and calculators, consumer electronics, note-book computers, lap-top computers, and a variety of other applications, each of which may serve as an exemplary environment for embodiments of the present invention. The invention may also be practiced in a distributed computing environment where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment, program modules may be located in both local and remote memory storage devices.","The exemplary system illustrated in  includes a computing device that is made up of various components including, but not limited to, a processing unit , non-volatile memory , volatile memory , and a system bus  that couples the non-volatile memory  and volatile memory  to the processing unit . The non-volatile memory  may include a variety of memory types including, but not limited to, read only memory (ROM), electronically erasable read only memory (EEROM), electronically erasable and programmable read only memory (EEPROM), electronically programmable read only memory (EPROM), electronically alterable read only memory (EAROM), and battery backed random access memory (RAM). The non-volatile memory  provides storage for power on and reset routines (bootstrap routines) that are invoked upon applying power or resetting the computing device . In some configurations the non-volatile memory  provides the basic input\/output system (BIOS) routines that are utilized to perform the transfer of information between the various components of the computing device .","The volatile memory  may include a variety of memory types and devices including, but not limited to, random access memory (RAM), dynamic random access memory (DRAM), FLASH memory, EEROM, bubble memory, registers, or the like. The volatile memory  provides temporary storage for program modules or data that are being or may be executed by, or are being accessed or modified by the processing unit . In general, the distinction between non-volatile memory  and volatile memory  is that when power is removed from the computing device  and then reapplied, the contents of the non-volatile memory  is not lost, whereas the contents of the volatile memory  is lost, corrupted, or erased.","The computing device  may access one or more external display devices  such as a CRT monitor, LCD panel, LED panel, electro-luminescent panel, or other display device, for the purpose of providing information or computing results to a user. The processing unit  interfaces to each display device  through a video interface  coupled to the processing unit over system bus .","The computing device  may have access to one or more external storage devices  such as a hard disk drive, a magnetic disk drive for the purpose of reading from or writing to a removable disk, and an optical disk drive for the purpose of reading a CD-ROM disk or to read from or write to other optical media, as well as devices for reading from and or writing to other media types including but not limited to, FLASH memory cards, Bernoulli drives, magnetic cassettes, magnetic tapes, or the like. The processing unit  interfaces to each storage device  through a storage interface  coupled to the processing unit  over system bus . The storage devices  provide non-volatile storage for the computing device .","The computing device  may receive input or commands from one or more input devices  such as a keyboard, pointing device, mouse, modem, RF or infrared receiver, microphone, joystick, track ball, light pen, game pad, scanner, camera, or the like. The processing unit  interfaces to each input device  through an input interface  coupled to the processing unit  over system bus . The input interface may include one or more of a variety of interfaces, including but not limited to, an RS-232 serial port interface or other serial port interface, a parallel port interface, a universal serial bus (USB), an optical interface such as infrared or IRDA, an RF or wireless interface such as Bluetooth, or other interface.","The computing device  may send output information, in addition to the display , to one or more output devices  such as a speaker, modem, printer, plotter, facsimile machine, RF or infrared transmitter, or any other of a variety of devices that can be controlled by the computing device . The processing unit  interfaces to each output device  through an output interface  coupled to the processing unit  over system bus . The output interface may include one or more of a variety of interfaces, including but not limited to, an RS-232 serial port interface or other serial port interface, a parallel port interface, a universal serial bus (USB), an optical interface such as infrared or IRDA, an RF or wireless interface such as Bluetooth, or other interface.","The computing device  may operate in a networked environment using logical connections to one or more remote systems, such as a remote computer . The remote computer  may be a server, a router, a peer device or other common network node, and typically includes many or all of the components described relative to the computing device . When used in a networking environment, the computing device  is connected to the remote system  over a network interface . The connection between the remote computer  and the network interface  depicted in  may include a local area network (LAN), a wide area network (WAN), a telephone connection, or the like. These types of networking environments are commonplace in offices, enterprise-wide computer networks, intranets and the Internet.","It will be appreciated that program modules implementing various embodiments of the present invention may be stored in the storage device , the non-volatile memory , the volatile memory , or in a networked environment, in a remote memory storage device of the remote system . The program modules may include an operating system, application programs, other program modules, and program data. The processing unit  may access various portions of the program modules in response to the various instructions contained therein, as well as under the direction of events occurring or being received over the input interface  and the network interface .",{"@attributes":{"id":"p-0036","num":"0035"},"figref":["FIG. 2","FIG. 2. A"],"b":["200","205","200","202","203","204","205","200","202","203","202"]},"As illustrated in , a particular device - may be both a server device and a client device such as client\/server devices -. The client\/server devices - may be capable of instructing other server devices to carry out a designated function while, at the same time, may carry out a function itself. For example, in its client role, a laptop computer might need to retrieve data from a PDA carried by a user, and then in its server role, the laptop might be called on by the user to provide a telephone number directly to a cellular telephone. Thus, the laptop functions as both a client device and a server device. However, in the following description, each device will be discussed only in its role as either a client device or a server device.",{"@attributes":{"id":"p-0038","num":"0037"},"figref":"FIG. 3"},"As shown in , use of the protocol of the present invention does not begin until communication between a client device and a server device is already established at Step  using a link protocol, also referred to as a link layer. The protocol of the present invention does not require the use of a specific link layer, but in an exemplary embodiment, the protocol may impose certain requirements such as: 1) allowing for serial ASCII data transfer; and 2) if binary data is to be sent, using standard UUEncode\/UUDecode routines to provide the proper conversions to and from ASCII data. Existing link layers which meet these requirements include, but are not limited to, serial cable, IrDA, Bluetooth and TCP\/IP sockets.","If a device provides a service, it must be running a protocol server. Once a connection  using the link layer is complete, the server will identify itself as being capable of communicating using the protocol of the present invention by issuing a tag line message . The issuance of the tag line message  signals the actual start of the operation of the protocol of the present invention. In an exemplary embodiment, the tag line message  and all subsequent messages are sent using standard 8-bit ASCII characters. In the illustrated embodiment, the tag line message  is in the following format:\n\n","Once the server device issues the tag line message , the client device may request the server device to identify the device types it supports and the services the server device provides. This request is performed by transmitting a type-command  to the server device. The type-command could be implemented in a variety of forms, but in the illustrated embodiment, the type-command  comprises the word \u201cTYPE.\u201d Although it is common for the client device to send the type-command , it should be understood that sending the type-command is not a required step. For example, a client device may already be aware that a particular service is available from the server device. Advantageously, this may save time in the communication process.","If the server device receives the type-command , the server device transmits to the client device a data packet - describing the devices and services provided by the server device. The data packet - contains several data fields. Among the data fields are one or more device\/service identifiers -, each of which represents either a specific device type or a specific service type. For example a device type may include a thermostat, a door, a pager, a PDA or the like. A service type may include the ability to raise the temperature of a thermostat or to transmit the messages stored in a pager. Although the device\/service identifier may be implemented in a variety of forms, in the illustrated embodiment, the device\/service identifier subsists in the following form:\n\n","A SDTP server must be able to provide the functionality of at least one device to be classified as a SDTP server. Thus, the data packet - sent by the server device must include at least one device identifier . In the example shown in , the device identifier is XXX-THRMST. In addition, because most server devices support a variety of services, the device identifier  is usually followed by multiple service identifiers -. In the example shown in , the service identifiers are XXX-TMPHIGH  and XXX-TMPLOW . In addition, multiple device identifiers (not shown) may be sent if the server supports multiple device types. For example, a cellular telephone that may also function as a pager would send a device identifier for both the cellular telephone and the pager.","In an exemplary embodiment, each individual device\/service identifier - is sent as a single line of data and is limited to a maximum of 64 characters in length. Advantageously, this technique allows devices having a limited amount of RAM to receive and process a full line of data without facing an overflow condition. The end of a line of data is signaled by transmitting the ASCII <newline>character. Upon transmission of the final data packet - by the server device, the end of the response is signaled by transmitting an end of response message . In an exemplary embodiment, an end of response message  includes the ASCII characters \u201c.\u201d and \u201c<newline>\u201d. Thus, the basic structure of a server device data packet sent in response to a type-command would be as follows:",{"@attributes":{"id":"p-0045","num":"0048"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"ID:DEVICEID [COMMON NAME] [COMMENTS]<newline>"]},{"entry":[{},"SD:[SERVICEID1] [SD_COMMENTS1]<newline>"]},{"entry":[{},"SD:[SERVICEID2] [SD_COMMENTS2]<newline>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"|"]},{"entry":[{},"|"]},{"entry":[{},"|"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<newline>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}},"br":{},"ul":{"@attributes":{"id":"ul0005","list-style":"none"},"li":{"@attributes":{"id":"ul0005-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0006","list-style":"none"},"li":["DEVICEID uniquely identifies a particular type of device,","COMMON NAME uniquely identifies a particular device of the type DEVICEID,","COMMENTS contains additional meaningful information about the device,","SERVICEID1 and SERVICEID2 uniquely identify particular services, and","SD_COMMENTS1 and SD_COMMENTS2 contain meaningful information about the services SERVICEID1 and SERVICEID2, respectively."]}}}},"In an exemplary embodiment, the COMMON NAME field is no more than 16 characters in length to minimize device memory requirements. Additionally, in an exemplary embodiment the COMMON NAME field is user customizable at the SDTP server level. This field is utilized by the user of a client device to recognize which particular device of the type \u201cDEVICEID\u201d is involved. Examples of suitable names of devices include \u201cBobsPager,\u201d \u201cJeffsPDA,\u201d and \u201cCommonPrinter.\u201d","The contents and the use of the various comments fields are completely optional. For example, COMMENTS may include information such as \u201cLaser printer on 4th floor.\u201d Similarly, if the server device is a pager and the first service provided is the transmission to the client device of page information which has been stored in the pager, SD_COMMENTS1 might be \u201cPage Information.\u201d","To illustrate the use and meaning of the DEVICEID and SERVICEID data fields and their relationship with the operation of the protocol of the present invention, an exemplary server device will next be discussed. Referring again to , one device operable in accordance with the protocol of the present invention is a pager unit. The pager includes a processing unit, a memory, and a bus that couples the memory to the processing unit. The pager is capable of receiving pages via wireless signal transmission and storing page information in the memory. A user may enter commands and information into the pager through the use of a keypad. A LED or LCD display may be used to display page information when received or when retrieved from memory. A speaker is provided to indicate the reception of a page. In addition to being able to receive pages via traditional wireless signal transmission, a pager that includes an embodiment of the present invention is also able to communicate directly with other devices. The pager carries out this communication using one or more communications means selected from a wide variety of communications technologies. The communication means may be utilized by the pager to transmit to another device and to receive information from another device. Although current pagers may or may not be equipped with the appropriate communications means necessary for complete implementation of the protocol of the present invention, it should be understood that suitable communications technologies currently exist and that the selection and implementation of one or more of these technologies would be obvious to one of ordinary skill in the art.","According to an exemplary method of operation of the protocol of the present invention, the pager carries a unique device identifier (DEVICEID) such as xxx-1WAYPGR, where xxxis selected according to the previously-described criteria for uniqueness. Services provided by the pager may include a status check, a transmission of the last page received by the pager, a transmission of a specified page previously received by the pager, a transmission of a list of identifiers for pages currently stored in the pager's storage means, a transmission of a current clock reading and\/or an update of the clock. Each service carries a unique service identifier in the form xxx-NAME, as previously described. Thus, the pager may carry the services with service identifiers (SERVICEID's) xxx-STAT, xxx-PAGERX, XXX-PAGE, xxx-LIST, xxx-TIME and\/or xxx-TIMESET, corresponding respectively with the above-identified services.","A common one-way pager that supports page reception, time reporting, and time setting, might respond to a type-command with the following data packet:\n\n","As mentioned previously, other exemplary embodiments of server devices capable of using the protocol of the present invention include, without limitation, a two-way pager, a voice pager, a cellular telephone, a PDA, a personal computer, a wired telephone, a CID box, a printer, a fax machine, a clock, audio equipment, video equipment, a thermostat, an email device, a security system, and a generic information device. These devices and a non-exclusive list of services that might be offered by these devices are listed in Table 1, along with exemplary unique ids for the devices or services.",{"@attributes":{"id":"p-0052","num":"0065"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"63pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 1"},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}},{"entry":["Device","Device ID","Service","Service ID"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["One-way","xxx-","Status of the pager","xxx-STAT"]},{"entry":["pager","1WAYPGR","Last page received","xxx-PAGERX"]},{"entry":[{},{},"Displays a page","xxx-PAGE"]},{"entry":[{},{},"from a LIST"]},{"entry":[{},{},"command"]},{"entry":[{},{},"Register","xxx-REGSTR"]},{"entry":[{},{},"List pages","xxx-LIST"]},{"entry":[{},{},"Return the current","xxx-TIME"]},{"entry":[{},{},"time\/date"]},{"entry":[{},{},"Set the time","xxx-TIMESET"]},{"entry":["Two-way","xxx-","Status of the pager","xxx-STAT"]},{"entry":["pager","2WAYPGR","Last page received","xxx-PAGERX"]},{"entry":[{},{},"Displays a page","xxx-PAGE"]},{"entry":[{},{},"from a LIST"]},{"entry":[{},{},"command"]},{"entry":[{},{},"Transmits a page","xxx-PAGETX"]},{"entry":[{},{},"Register","xxx-REGSTR"]},{"entry":[{},{},"List pages","xxx-LIST"]},{"entry":[{},{},"Return the current","xxx-TIME"]},{"entry":[{},{},"time\/date"]},{"entry":[{},{},"Set the time","xxx-TIMESET"]},{"entry":["Voice","xxx-","Status of the pager","xxx-STAT"]},{"entry":["pager","VOCPGER","Last page received","xxx-PAGERX"]},{"entry":[{},{},"is played"]},{"entry":[{},{},"Play a page from a","xxx-PLYPAGE"]},{"entry":[{},{},"LIST command"]},{"entry":[{},{},"Register","xxx-REGSTR"]},{"entry":[{},{},"List pages","xxx-LIST"]},{"entry":[{},{},"Return the current","xxx-TIME"]},{"entry":[{},{},"time\/date"]},{"entry":[{},{},"Set the time","xxx-TIMESET"]},{"entry":["Cellular","xxx-","Status of the phone","xxx-STAT"]},{"entry":["phone","CELLULR","Dials a phone","xxx-DIAL"]},{"entry":[{},{},"number (or instructs"]},{"entry":[{},{},"to dial)"]},{"entry":[{},{},"Register","xxx-REGSTR"]},{"entry":[{},{},"List numbers in the","xxx-LISTNUM"]},{"entry":[{},{},"phone's number list"]},{"entry":[{},{},"Add a phone","xxx-ADDLIST"]},{"entry":[{},{},"number to the list"]},{"entry":[{},{},"Clears a list entry","xxx-CLRLIST"]},{"entry":[{},{},"Return the current","xxx-TIME"]},{"entry":[{},{},"time\/date"]},{"entry":[{},{},"Set the time","xxx-TIMESET"]},{"entry":["Personal","xxx-","PDA status","xxx-STAT"]},{"entry":["Data","PDA","Specifies a new","xxx-CALEVT"]},{"entry":["Assistant",{},"calendar event"]},{"entry":[{},{},"Lists upcoming","xxx-LISTCAL"]},{"entry":[{},{},"calendar events"]},{"entry":[{},{},"Lists contacts","xxx-LISTCON"]},{"entry":[{},{},"Adds a new contact","xxx-NEWCON"]},{"entry":[{},{},"Search for a contact","xxx-SEARCH"]},{"entry":[{},{},"Return the current","xxx-TIME"]},{"entry":[{},{},"time\/date"]},{"entry":[{},{},"Set the time","xxx-TIMESET"]},{"entry":["Personal","xxx-","PC status","xxx-STAT"]},{"entry":["Computer","PC","Specifies a new","xxx-CALEVT"]},{"entry":[{},{},"calendar event"]},{"entry":[{},{},"Lists upcoming","xxx-LISTCAL"]},{"entry":[{},{},"calendar events"]},{"entry":[{},{},"Lists contacts","xxx-LISTCON"]},{"entry":[{},{},"Adds a new contact","xxx-NEWCON"]},{"entry":[{},{},"Search for a contact","xxx-SEARCH"]},{"entry":[{},{},"Transmits a file","xxx-FILETX"]},{"entry":[{},{},"Receives a file","xxx-FILERX"]},{"entry":[{},{},"Return the current","xxx-TIME"]},{"entry":[{},{},"time\/date"]},{"entry":[{},{},"Set the time","xxx-TIMESET"]},{"entry":["Wired","xxx-","Phone status","xxx-STAT"]},{"entry":["Telephone","TELEPH","Dials a phone","xxx-DIAL"]},{"entry":[{},{},"number"]},{"entry":[{},{},"Register","xxx-REGSTR"]},{"entry":[{},{},"Lists the phones","xxx-LISTNUM"]},{"entry":[{},{},"number list"]},{"entry":[{},{},"Adds to the phones","xxx-ADDLIST"]},{"entry":[{},{},"number list"]},{"entry":[{},{},"Clears an entry in","xxx-CLRLIST"]},{"entry":[{},{},"the phones list"]},{"entry":[{},{},"Return the current","xxx-TIME"]},{"entry":[{},{},"time\/date"]},{"entry":[{},{},"Set the time","xxx-TIMESET"]},{"entry":["CID box","xxx-","Caller ID status","xxx-STAT"]},{"entry":[{},"CID","Register","xxx-REGSTR"]},{"entry":[{},{},"List all caller ID's","xxx-LISTNUM"]},{"entry":[{},{},"Last call received","xxx-LATEST"]},{"entry":[{},{},"Attempt to identify","xxx-CALLID"]},{"entry":[{},{},"a phone number"]},{"entry":[{},{},"Return the current","xxx-TIME"]},{"entry":[{},{},"time\/date"]},{"entry":[{},{},"Set the time","xxx-TIMESET"]},{"entry":["Printer","xxx-","Printer status","xxx-STAT"]},{"entry":[{},"PRINT","Print a file","xxx-PRINT"]},{"entry":[{},{},"Return the current","xxx-TIME"]},{"entry":[{},{},"time\/date"]},{"entry":[{},{},"Set the time","xxx-TIMESET"]},{"entry":["Fax","xxx-","Fax status","xxx-STAT"]},{"entry":["machine","FAX","Dials a phone","xxx-DIAL"]},{"entry":[{},{},"number"]},{"entry":[{},{},"Send a fax","xxx-FAX"]},{"entry":[{},{},"Register","xxx-REGSTR"]},{"entry":[{},{},"List fax numbers","xxx-LISTNUM"]},{"entry":[{},{},"Add to the fax","xxx-ADDLIST"]},{"entry":[{},{},"numbers list"]},{"entry":[{},{},"Clear an entry to the","xxx-CLRLIST"]},{"entry":[{},{},"list"]},{"entry":[{},{},"Return the current","xxx-TIME"]},{"entry":[{},{},"time\/date"]},{"entry":[{},{},"Set the time","xxx-TIMESET"]},{"entry":["Clock","xxx-","Clock status","xxx-STAT"]},{"entry":[{},"CLOCK","Return the current","xxx-TIME"]},{"entry":[{},{},"time\/date"]},{"entry":[{},{},"Set the time","xxx-TIMESET"]},{"entry":[{},{},"Last alarm","xxx-ALARM"]},{"entry":[{},{},"Set an alarm","xxx-"]},{"entry":[{},{},{},"ALARMSET"]},{"entry":[{},{},"Clear an alarm","xxx-"]},{"entry":[{},{},{},"ALARMDEL"]},{"entry":[{},{},"Lists alarm","xxx-LIST"]},{"entry":["Stereo","xxx-","Stereo status","xxx-STAT"]},{"entry":["Equipment","STEREO","Current tuned","xxx-FREQ"]},{"entry":[{},{},"frequency"]},{"entry":[{},{},"Set the frequency","xxx-FREQSET"]},{"entry":[{},{},"Tune up","xxx-FREQUP"]},{"entry":[{},{},"Tune down","xxx-FREQDWN"]},{"entry":[{},{},"Volume up","xxx-VOLUP"]},{"entry":[{},{},"Volume down","xxx-VOLDN"]},{"entry":[{},{},"Volume set","xxx-VOLSET"]},{"entry":[{},{},"On","xxx-ON"]},{"entry":[{},{},"Off","xxx-OFF"]},{"entry":[{},{},"Play media","xxx-PLAY"]},{"entry":[{},{},"Change track up","xxx-TRKUP"]},{"entry":[{},{},"Change track down","xxx-TRKDWN"]},{"entry":[{},{},"Set the track","xxx-TRKSET"]},{"entry":[{},{},"Fast forward","xxx-FF"]},{"entry":[{},{},"Rewind","xxx-REW"]},{"entry":[{},{},"Mute","xxx-MUTE"]},{"entry":[{},{},"Stop","xxx-STOP"]},{"entry":[{},{},"Pause","xxx-PAUSE"]},{"entry":[{},{},"Record","xxx-RECORD"]},{"entry":[{},{},"Lists media","xxx-LIST"]},{"entry":[{},{},"Return the current","xxx-TIME"]},{"entry":[{},{},"time\/date"]},{"entry":[{},{},"Set the time","xxx-TIMESET"]},{"entry":["Video","xxx-","Status","xxx-STAT"]},{"entry":["Equipment","VIDEO","Channel up","xxx-CHUP"]},{"entry":[{},{},"Channel down","xxx-CHDWN"]},{"entry":[{},{},"Current channel","xxx-CHNL"]},{"entry":[{},{},"Set channel","xxx-CHNLSET"]},{"entry":[{},{},"Volume up","xxx-VOLUP"]},{"entry":[{},{},"Volume down","xxx-VOLDN"]},{"entry":[{},{},"Set volume","xxx-VOLSET"]},{"entry":[{},{},"On","xxx-ON"]},{"entry":[{},{},"Off","xxx-OFF"]},{"entry":[{},{},"Switch video media","xxx-SWITCH"]},{"entry":[{},{},"Play media","xxx-PLAY"]},{"entry":[{},{},"Track up","xxx-TRKUP"]},{"entry":[{},{},"Track down","xxx-TRKDWN"]},{"entry":[{},{},"Set track","xxx"]},{"entry":[{},{},"Fast forward","xxx-FF"]},{"entry":[{},{},"Rewind","xxx-REW"]},{"entry":[{},{},"Mute","xxx-MUTE"]},{"entry":[{},{},"Stop","xxx-STOP"]},{"entry":[{},{},"Pause","xxx-PAUSE"]},{"entry":[{},{},"Record","xxx-RECORD"]},{"entry":[{},{},"Lists media","xxx-LIST"]},{"entry":[{},{},"Return the current","xxx-TIME"]},{"entry":[{},{},"time\/date"]},{"entry":[{},{},"Set the time","xxx-TIMESET"]},{"entry":["Thermostat\/","xxx-","Thermostat status","xxx-STAT"]},{"entry":["Thermometer","THERMO","Set the high","xxx-TMPHIGH"]},{"entry":[{},{},"temperature"]},{"entry":[{},{},"Set the low","xxx-TMPLOW"]},{"entry":[{},{},"temperature"]},{"entry":[{},{},"Force AC to be","xxx-ONAC"]},{"entry":[{},{},"turned on"]},{"entry":[{},{},"Force heat to be","xxx-ONHEAT"]},{"entry":[{},{},"turned on"]},{"entry":[{},{},"Force AC to be","xxx-OFFAC"]},{"entry":[{},{},"turned off"]},{"entry":[{},{},"Force heat to be","xxx-OFFHEAT"]},{"entry":[{},{},"turned off"]},{"entry":[{},{},"Force fan to be","xxx-ONFAN"]},{"entry":[{},{},"turned on"]},{"entry":[{},{},"Force fan to be","xxx-OFFFAX"]},{"entry":[{},{},"turned off"]},{"entry":[{},{},"Return the current","xxx-TIME"]},{"entry":[{},{},"time\/date"]},{"entry":[{},{},"Set the time","xxx-TIMESET"]},{"entry":["Generic","xxx-","Status of the","xxx-STAT"]},{"entry":["Information","GENERIC","information device"]},{"entry":["Device",{},"List information","xxx-LIST"]},{"entry":[{},{},"identifiers"]},{"entry":[{},{},"Display info from id","xxx-DISPL"]},{"entry":[{},{},"List sub-information","xxx-LISTID"]},{"entry":[{},{},"List possible query","xxx-LISTQ"]},{"entry":[{},{},"Make query","xxx-QUERY"]},{"entry":[{},{},"Return the current","xxx-TIME"]},{"entry":[{},{},"time\/date"]},{"entry":[{},{},"Set the time","xxx-TIMESET"]},{"entry":["Email","xxx-","Status of email","xxx-STAT"]},{"entry":["device","EMAIL","device"]},{"entry":[{},{},"Send email","xxx-SEND"]},{"entry":[{},{},"List emails","xxx-LIST"]},{"entry":[{},{},"Display emails","xxx-EMAIL"]},{"entry":[{},{},"Return the current","xxx-TIME"]},{"entry":[{},{},"time\/date"]},{"entry":[{},{},"Set the time","xxx-TIMESET"]},{"entry":["Security","xxx-","Security system","xxx-STAT"]},{"entry":["System","SECURTY","status"]},{"entry":[{},{},"Turn security","xxx-ON"]},{"entry":[{},{},"system on"]},{"entry":[{},{},"Turn security","xxx-OFF"]},{"entry":[{},{},"system off"]},{"entry":[{},{},"Register","xxx-REGSTR"]},{"entry":[{},{},"Return the current","xxx-TIME"]},{"entry":[{},{},"time\/date"]},{"entry":[{},{},"Set the time","xxx-TIMESET"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}}}}},"Referring again to , at any time after the server device issues the protocol tag line message , the client device may command the server device to carry out specific services using the unique service identifiers just described. For example, the client device may issue a service-command  XXX-TMPLOW . However, as shown in , service-commands are typically issued after the client device first determines what services are available by issuing the type-command . A service-command  may be issued by transmitting either the full device identifier (xxx-NAME) or just the unique three letter prefix (xxx). Any necessary parameters may be passed along as well. For example, the following command might be used to set a threshold temperature of 65 degrees Fahrenheit at which the thermostat turns on the heat:\n\n","Unless the communication between the client device and the server device using the protocol fails, the server device will provide some sort of status-response to a service-command  issued by the client device. As shown in , a successful-completion response  is sent to the server device to confirm the completion of the requested task. An exemplary successful-completion response  could be formatted as follows:\n\n","Other status responses are sent by the server device to indicate other conditions. For example in an exemplary embodiment, xxx-NOSERV could be sent when a requested service is unavailable. As another example, xxx-NOTDONE could be sent when a requested service is available, but the server device is unable to successfully complete the requested service. Likewise, xxx-SYNTAX could be sent when a service-command contains a syntax error. It should be obvious to one of ordinary skill in the art that other status-responses, in addition to, or in lieu of, the above-described ones, may be used as well and the present invention is not limited to any particular set.","In an exemplary embodiment, the server device signals the end of its status-response by sending the \u201c.\u201d and \u201c<newline>\u201d character. The client device ends further client-server communication by transmitting a quit-command  to the server device. In an exemplary embodiment, the quit-command may comprise the word \u201cQUIT\u201d or a similar indicator. In response to receiving a quit-command, the server closes the protocol connection using whatever method the server needs to disconnect the client, and the operation of the protocol is complete.",{"@attributes":{"id":"p-0057","num":"0073"},"figref":["FIG. 4","FIG. 3"]},"The learning capability is invoked by a client device which wishes to know how to use a particular service. In an exemplary embodiment, a client device invokes this process by issuing a use-command. An exemplary format for a use-command is as follows:\n\n","In response to receiving a use-command , the server transmits a use-response  to the client device explaining how the identified service is used. In an exemplary embodiment, the server device's use-response  to the use-command  is in the following format:\n\n",{"@attributes":{"id":"p-0060","num":"0078"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"126pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 2"},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["PARAMTYPE","DESCRIPTION"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["S","String \u2014 generic string input"]},{"entry":["C<CHOICE1|CHOICE2|...>","Choice \u2014 Where the client selects from a"]},{"entry":[{},"set of Choices described by"]},{"entry":[{},"<CHOICE1|CHOICE2|etc>"]},{"entry":["T","Time"]},{"entry":["B<FLAG1|FLAG2>","Boolean \u2014 Client can select from either"]},{"entry":[{},"FLAG1 or FLAG2"]},{"entry":["I","ID \u2014 Used in SDTP list ID's when a"]},{"entry":[{},"service lists ID's that are unique for this"]},{"entry":[{},"session only to identify an item from a"]},{"entry":[{},"LIST."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},{"@attributes":{"id":"p-0061","num":"0079"},"figref":["FIG. 5","FIG. 3"]},"The \u201cnative\u201d capability is generally controlled by the client device. When the client device using the SDTP protocol wishes to use the underlying communications link for another data protocol instead, the client device may send the native-command  to the server device. In an exemplary embodiment, the native-command comprises the word \u201cNATIVE.\u201d As shown in , the native-command may be issued at any time after the server device issues the tag line message . Upon receiving the native-command, the server may respond by sending a native-response . In an exemplary embodiment, the native-response corresponding to the native-command  may be formatted as follows:\n\n","In addition, the server will switch control over to the native protocol used for this link. Alternatively, the server may respond to the native-command by sending an error code response. In this case, further communication between the client and server continues to utilize the SDTP protocol rather than switching to the native protocol.","Once communication switches to the native protocol, further SDTP communications are dependent on the native protocol reinstalling the SDTP server on the link after the transfer is completed. However, the SDTP client is disconnected and will have to reestablish an SDTP connection to use SDTP services. Typically this is done by disconnecting the link altogether and then reconnecting. If the devices are permanently connected, however, then an application-level \u201creset\u201d could be executed to force the SDTP server to reinitialize and send the SDTP tag line message  once again.",{"@attributes":{"id":"p-0065","num":"0084"},"figref":"FIGS. 6-7"},"Transitions from one static state to the next occur in response to specific events. The events triggering such a transition vary from static state to static state, so an event triggering a transition when a device is in one state does not necessarily effect such a transition when the device is in another state. Once a device enters a particular static state, the device remains in that state until one of the triggering events associated with that state occur.","The events which trigger a transition are outside the control of the protocol. In a preferred embodiment, operation of the protocol is controlled by a higher-level application. Thus, the application controls when a particular triggering event occurs.","A transition between static states may result in passing through one or more transitional states. In a transitional state, a specific action is performed and the transitional state is automatically exited upon completing the action. The automatic transition from a transitional state is illustrated by a broken line. Thus, each event results in a transition from one static state to another static state with the possibility of passing through a transitional state.","As shown in , the operation of a client device using the protocol of the present invention includes seven static states (IDLE , LINKING , READY , WAIT\/TYPE , WAIT\/USE , WAIT\/SERVICE  and NATIVE ) and eight transitional states (TRY HOOKUP , TYPE , USE , SERVICE , NATIVE , QUIT , EXIT  and RESTART ). The static states are defined as follows:\n\n","The transitional states are shown as diamond boxes and represent a particular action taken by the client. The actions taken are defined as follows:\n\n","RESTART in some circumstances, the client device requests SDTP to be reestablished directly.","Initially, the IDLE state  is active. If communication with a target server device is desired, the IDLE state  is exited and at  the client transmits the appropriate signal or signals to the target server device before entering the LINKING state . Any communications between the client device and the target server device are being carried out using an underlying link protocol as described previously. While in the LINKING state , the client device may receive a tag line message  from the target server device indicating that the device is SDTP-enabled. When the tag line message is received 620, the READY state  is entered.","The READY state  is the basic operational state of the SDTP protocol on a client device. A transition out of the READY state  occurs in response to one of several events. In response to a type-request event , a type-command  is sent to discover the type and services of the target server device, now referred to as the server device. After sending the type-command  the WAIT\/TYPE state  is entered. If the client device receives a response to the type-command, the READY state  is re-entered. Another event that may occur in the READY state  is the occurrence of a use-request event . In response to a use-request event , a use-command  is sent to discover how to use a particular service. After sending a use-command  the WAIT\/USE state  is entered. If the client device receives a response to the use-command, the READY state  is re-entered. Another event that may occur is the occurrence of a service-request event . In response to a service-request event , a service-command  is sent to request that a particular service be performed by the server device. After sending a service-command  the WAIT\/SERVICE state  is entered. If the client device receives a response to the service-command, the READY state  is re-entered. Another event that may occur is the occurrence of a native-request event . In response to a native-REQUEST EVENT , a native-command is sent to halt communications using the SDTP protocol and initiate communications between the two devices using a native protocol. After sending the native-command  the NATIVE state  is entered. Another event that may occur is the occurrence of a quit-request event . In response to a quit-request event , a quit-command  is sent to halt communications between the two devices. After sending the quit-command  to the server device the IDLE state  is re-entered.","In the NATIVE state , the client device may continue communicating with the server device using some other data protocol, such as Simple Mail Transfer Protocol (\u201cSMTP\u201d) or HyperText Transfer Protocol (\u201cHTTP\u201d). Generally, when no further communication between the client device and the server device is desired, an exit procedure  is performed and the IDLE state  is re-entered. Communications using the SDTP protocol may then be reinitialized as described previously. As previously described, however, there are some cases in which a client device in the NATIVE state  can directly request SDTP communications to be renewed by issuing a restart signal  to the client device forcing a return to the LINKING state . After issuing a restart signal , the client device re-enters the LINKING state .","As shown in , operation of a server device using the protocol of the present invention includes three static states (IDLE , READY  and NATIVE ) and eight transitional states (TAG LINE , TYPE-RESPONSE , USE-RESPONSE , STATUS-RESPONSE , NATIVE-RESPONSE , DISCONNECT , EXIT  and RESTART ). The static states are shown as solid circles and represent the status of the server at a given time. The static states are defined as follows:\n\n","The transitional states are shown as diamond boxes and represent a particular action taken by the server. The actions that are included are defined as follows:\n\n","Initially, the IDLE state  is active. If another device attempts to communicate with the server device using the link protocol described previously, the IDLE state  is exited and a tag line message  is transmitted to the client device. After transmitting the tag line message , the READY state  is entered.","The READY state  is the basic operational state of the SDTP protocol on the server device. A transition out of the READY state  occurs in response to one of several events. One event is the reception of a type-command  from the client device. In response to a type-command event , the server device sends the device id of the server device and its available services type-response  to the client device and returns to the READY state . Another event that may occur is the reception of a use-command  from the client device. In response to a use-command event , the server device sends a use-response  to the client device and then returns to the READY state . Another event that may occur is the reception of a service-command . In response to a service-command event , the identified service is performed and a service-response is sent , and operation returns to the READY state . Another event that may occur is the reception of a native-command  ordering SDTP protocol communications to be halted so that communications between the two devices may be carried out using a native protocol. In response to a native-command event , the server sends a native-response  and then enters the NATIVE state . Another event that may occur is the reception of a quit-command  from the client device. In response to a quit-command event , the server device disconnects the client  and reenters the IDLE state .","Once the NATIVE state  is entered, the server device may continue communicating with the client device using some other data protocol as described previously. Generally, when no further communication between the client device and the server device is desired, an exit procedure  is performed and the server returns to the IDLE state . Communications using the SDTP protocol may then be reinitialized as described previously. However, there are some cases in which a server device in the NATIVE state  can respond to a request for the renewal of SDTP communications directly by issuing a restart signal at  and then resending the SDTP tag line message .","From the foregoing description, it will be appreciated that the present invention provides a protocol and a method for facilitating communication between various electronic devices and enabling the devices to share features, functionality and information. Although the present invention has been described using various examples and command formats, it will be appreciated that the present invention is not limited by these examples.","The present invention may be implemented and embodied in a variety of devices and may be implemented in software or hardware. In addition, the operation, steps and procedures of the present invention may be implemented in a variety of programming languages. The specification and the drawings provide an ample description of the operation, steps and procedures of the present invention to enable one of ordinary skill in the art to implement the various aspects of the present invention.","The present invention has been described in detail with particular reference to exemplary embodiments. It is understood that variations and modifications can be effected within the spirit and scope of the invention, as described herein before, and as defined in the appended claims. The corresponding structures, materials, acts, and equivalents of all means or step plus function elements in the claims below are intended to include any structure, material, or acts for performing the functions in combination with other claimed elements as specifically claimed."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 7"}]},"DETDESC":[{},{}]}
