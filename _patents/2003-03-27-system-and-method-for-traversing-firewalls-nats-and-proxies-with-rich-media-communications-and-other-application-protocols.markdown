---
title: System and method for traversing firewalls, NATs, and proxies with rich media communications and other application protocols
abstract: A tunneling system and method is described for traversing firewalls, NATs, and proxies. Upon a request from a device on the secure private network or on a public network such as the Internet, a connection to a designated or permitted device of the secure private network by way of the public network can be established, allowing selected devices of the private network to access devices on the public network. A bi-directional channel can be established where information such as rich multimedia and real-time voice and video can be accessed or communicated.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07979528&OS=07979528&RS=07979528
owner: Radvision Ltd.
number: 07979528
owner_city: Tel Aviv
owner_country: IL
publication_date: 20030327
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS REFERENCE TO RELATED APPLICATIONS","FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","BRIEF SUMMARY OF THE INVENTION","DETAILED DESCRIPTION"],"p":["This application is a non-provisional application claiming the benefits of provisional application No. 60\/367,826, filed Mar. 27, 2002, titled \u201cSystem and Method for Traversing Firewalls, NATs, and Proxies with Rich Media Communications and Other Application Protocols\u201d.","This invention relates generally to traversing communication network firewalls, NATs and proxies, and more particularly, relates to a novel tunneling approach using endpoint plug-ins that permit UDP-based or other connectionless-based protocol information from a public or private network to traverse firewalls, proxies and NATs emulated in real-time by encapsulating UDP-based information on a connection layer to appear as TCP-based or full duplex connection-based communication.","The Internet allows geographically and logically dispersed applications and nodes to easily communicate and exchange data. These data can range from simple text messages to encrypted or compressed high bandwidth real-time voice and video data. But with the ease of networking, also introduced are potential security threats to any computer publicly accessible on the Internet.","Traditionally, network security has been achieved simply by denying or restricting those outside a secure network access to data or devices within the secure network. Over time, common solutions have evolved, such as firewalls, NATs, and proxies. These approaches block or restrict unauthorized incoming data and unauthorized incoming requests from devices on a private network.","Firewalls isolate devices of a private network from public network devices. Firewalls are installed as security to protect data inside a private network from unsolicited connections. Firewalls can also restrict the way nodes inside a private network can access public sites, such as those on the Internet.","One technique for establishing a firewall is to maintain an \u201caccess control list.\u201d An access control list approach compares address information contained in a data packet from a remote device to determine whether the source from which the packet originated is on a list of allowed or disallowed addresses. If the address is on the list of disallowed addresses, the packet is not allowed to pass.","Another method of restricting access involves \u201cpacket filtering\u201d. Packet filtering examines data traversing a firewall to determine if the port or protocol (e.g. Internet Protocol (IP)) is subject to restrictions. If the port or protocol in use is restricted, the packet is not allowed to pass.","Another approach for providing network security uses a NAT (Network Address Translation) technique. NAT involves the translation of IP addresses used within one network to a different IP addresses known within another network.","Typical NAT techniques map local or private network addresses to one or more public IP addresses, and translate incoming global IP addresses into local IP addresses. NAT techniques provide added security since each outgoing or incoming request must go through a translation process to qualify or authenticate the request or match it to a previous request. To preserve the number of IP addresses needed, it is common for a private network use a single IP address in its communication outside the private network. Thus, external devices may not be able to identify or communicate with a specific local device because private addresses behind NATs are not directly accessible by entities on a public network.","Another approach for providing network security is based on proxies. Proxies, such as HTTP proxies, act as the only path out from a private network to the public domain. Proxies are generally done through one or two ports and may require authentication and\/or encryption to achieve secure connections. The proxy acts as an intermediary between the secure private network and the public.","For example, referring to , a local client  and a remote server  are coupled over a public network , such as the Internet. The proxy server  receives a request for an Internet service (such as a Web page request from a remote server ) from the client . If the request passes filtering requirements, the proxy server  processes the request and forwards the request to remote server . To the local user, the proxy server  is transparent, and all Internet requests and returned responses appear to be associated directly with the addressed remote server . The proxy server  acts as a firewall by preventing unauthorized incoming data requests from being processed.","A common theme for firewalls, NATs and proxies is that most bi-directional communication must be initiated from inside the private network towards a public IP address, potentially on restricted ports or with restricted protocols. Once connections or virtual circuits are created from the inside out, data may flow back on that same path from the public network to the private network.","However, for end-to-end rich media applications, such as videoconferencing, methods for initiating and maintaining a session through a gateway or firewall can be complex, requiring several channels to the same or different destinations just to establish a two-way or multi-way real-time conference. Standard protocols such as H.323, SIP and proprietary protocols such as First Virtual Communications' CUseeMe protocol are examples of protocols supporting these types of applications. For example, the International Telecommunications Union H.323 standard defines how real-time, bi-directional multimedia communications can be exchanged on packet-based networks. The H.323 protocol utilizes a User Datagram Protocol (UDP) for the transport of voice and video data. As opposed to a \u201creliable\u201d type of transmission, or so-called \u201cconnected\u201d stream-oriented protocol, such as Transmission Control Protocol\/Internet Protocol (TCP\/IP), the UDP is a connectionless packet-oriented transfer protocol. Some standards, such as H.323, use connection-based TCP\/IP for call or connection setup, but do not use TCP\/IP for audio and video data transmission. In contrast, TCP is used for reliable transfer of data and has built in packet loss detection and retransmission and thus is not appropriate for real-time audio and video data.","When a public network transmission utilizes a connectionless type of protocol, like UDP as a transport for the voice and video data packets, the incoming and outgoing packets are often blocked by the firewall security. As a result, connectionless type communications with third parties outside a private network are commonly disabled or blocked. For example, firewalls usually prevent incoming TCP and UDP connections. With firewalls, UDP may be blocked in both directions, while TCP may be blocked except for specific ports.","Internet communications standards and proprietary rich media applications usually require multiple communications channels via UDP and TCP on fixed or random ports. Particularly for real-time rich media communication like voice and video communication, there is a need for a system that allows the establishment of communication channels between computers protected by a firewall and outside third parties, but without compromising the firewall security measures set up to protect against unauthorized or non-permitted data transfers.","Therefore one objective of the present invention is to provide a method and computerized system for transmitting and receiving real-time voice, video and other data over the Internet when either an intended sender or recipient of data utilizes a computer device that is protected by a firewall that does not allow transmissions of data, including data using connectionless packet protocol.","A method and computerized system are provided for transmitting and receiving voice, video, and other data over the Internet and allowing the exchange of TCP\/IP and\/or UDP type data packets through tunnel connections created between devices on opposite sides of a firewall. The tunnels are created using TCP\/IP to a single destination port to encapsulate multiple channels of TCP and UDP data destined to various other ports, across a firewall, NAT or HTTP Proxy, as well as emulate real-time performance for UDP data channels.","The present invention provides plug-in solutions for applications over a client, server, desktop system or other endpoints. In an embodiment of the present invention a plug-in is installed on a device to establish and maintain a TCP\/IP tunnel between any two devices having a matched, or paired, plug-in; the tunnels are created over transport layers to support the exchange of TCP and UDP data, solicited or unsolicited, by encapsulating the UDP or TCP data and an additional header as the payload to the TCP stream. The present invention discloses a system and approach for tunneling any application port to a destination IP address once the tunnel is created. Virtually any packet blockage by a firewall, NAT or proxy can be avoided by the tunneling techniques disclosed herein.","In addition, the present invention discloses an approach that is OS and protocol independent but that also allows users to plug-in protocol specific logic for applications that do not perform or behave well through NATs.","The present invention provides plug-ins for download and install on client endpoints and external servers where separate gateways or proxy servers are not needed to connect devices behind a firewall with external devices on a public network.","Additionally, while user registrations can be supported, such registrations through a gateway or proxy server are not required. The plug-ins of the present invention can be automatically downloaded and installed concurrently upon a request to access an application. The plug-in operates transparently to the user and works with existing applications.","Moreover, this invention provides plug-ins for client endpoints in private networks to provide access to conferencing and multimedia services available over a public network and receive incoming calls and invitations from services outside a private network.","Further, the plug-in can be downloaded and installed on devices within corporate networks. Also, the plug-ins can be downloaded and installed by multiple users to generate multiple tunnels for on-line groups, conference calls, web-based presentations, etc. Users on a system can be differentiated even if multiple users are assigned the same private IP address and\/or have IP addresses that are translated by a NAT.","It is to be understood that both the foregoing general description and the following detailed description are exemplary and explanatory only and are not restrictive of the invention, as claimed.","Reference will now be made in detail to the present embodiments of the invention, examples of which are illustrated in the accompanying drawings.","Reference to any specific operating system architecture (such as Microsoft\u00ae Windows\u2122) is for demonstration purposes only as to how the present invention could be implemented. In addition, the terms \u2018client\u2019 and \u2018server\u2019 are for functional description only, since communication based on the tunneling approach disclosed supports bi-directional communication.","Network-based systems such as online conferences, online meetings, web seminars and application-sharing applications may depend on conditions associated with a client and server host system. Some components of a network-based application, including configuration information, may be previously installed on a client. Alternatively, the components and configuration information may be concurrently installed on the client as a network-based application is executing.","When a device behind a firewall attempts to make a connection over the Internet using a connectionless or connection-based packet-oriented protocol several issues may arise. For example, when an outside third party intends to establish data communication with someone behind a firewall using either protocol it is often not known at the time when a connection is desired or requested whether a two-way transfer of voice data using the protocol is allowed by the network security system.","Additionally, a firewall may restrict a device behind a network security device (e.g., firewall, NAT, or proxy) from originating connection to an outside device or network, or may prevent connections generated from an external device to a device behind network security device. Further, it is often difficult to implement an unreliable data channel, like UDP, inside a TCP connection due to the reliable nature of TCP (e.g., a reliable connection typically includes retransmit requests for missing or dropped data).","The present invention addresses these and other concerns through a novel tunneling protocol. Tunneling allows the establishment of bi-directional connections or tunnels, initiated from inside or from outside a private network. Tunneling is a technique used in network communications where a first protocol is \u201cwrapped\u201d or encapsulated within a second protocol. For example, a new header from a second protocol is attached to the first packet. The entire first packet of a first protocol becomes the payload of a second protocol. In this way, traffic of a first protocol can be carried over a network that does not support that first protocol directly.","\u201cTunneled data\u201d refers to data or packets from one protocol that are encapsulated within another protocol. A \u201ctunnel\u201d herein refers to a communication channel between two networked devices through which tunneled data are communicated.","Tunnels are created at the application level. One aspect of the present invention relies on UDP packets targeted for a predetermined or otherwise determinable destination port being intercepted and encapsulated in a TCP tunnel. The encapsulation happens at the driver level by inspection of IP headers of outgoing data, and repackaging them as payload data inside a TCP packet.","The method and system described involve using two plug-in components to create a bi-directional tunnel between a client application endpoint inside a network separated from a public server by a network security device. This public server may also be behind a firewall, but it must be reachable through a public address, whether it is a statically mapped address behind a NAT or not. Using the tunneling approach of the present invention, voice, video and other data communication may be initiated from within or outside a firewall on a transport layer using a connection-based full duplex protocol to encapsulate connection-based or connectionless data in real-time across a firewall, as well as provide other benefits and features as described below.","For purposes of this disclosure, the following definitions shall apply:","Automatic Firewall Detection (AFD)\u2014The process by which a plug-in at a client determines the best path of communication from it's network environment to the public domain.","Client\u2014In reference to a tunnel, the end of the tunnel that initiates the tunnel creation to the server.","Distributed Proxy (DPX)\u2014A tunneling proxy that may be associated with multiple endpoint. Also called a full proxy.","Personal Proxy (PPX)\u2014A component on a computer which can be configured to be associated with and a tunneling proxy for one single external endpoint for an application protocol.","Server or Service\u2014In reference to a tunnel, the end of the tunnel that receives a tunneled connection.","TCP Stack Plug-in (TSP)\u2014The TSP is a component of the TP installed just below the socket level which on the client side, intercepts TCP and UDP requests from an application, performs AFD and tunnel creation, and sends commands to the TDP to signal which subsequent TCP and UDP requests to tunnel. The TSP may also resolve any NAT issues which require translating application protocol-specific data, such as H.323 protocol. On the server side, the TSP listens for tunnel connections on a tunnel port (e.g. , the default tunnel port which is HTTPS), and signals the TDP with information necessary to identify the tunnel (source IP and port).","Tunnel Plug-in (TP)\u2014The TP is a full set of components in accordance with an embodiment of the invention needed for one endpoint to support and allow tunneling with another endpoint.","Tunneling Driver Plug-in (TDP)\u2014The TDP is a component of the TP installed at a driver level (e.g., NDIS Intermediate driver on Windows\u2122) that accepts commands from the TSP and manages the tunneling protocol (for example, managing the protocol includes bi-directional UDP emulation within a TCP tunnel). This component also snoops TCP\/IP protocol for information required to reconstruct data stream or datagrams on the receiving side of a tunneled session.","Tunnel Port\u2014The TCP\/IP port used to establish a tunnel between a client and server.","Tunneling Proxy (TPX)\u2014A component on a computer that routes tunneled data between an associated endpoint and a target endpoint.","Type I Data\u2014Connection-oriented data, such as TCP data.","Type II Data\u2014Connectionless data, such as UDP data. Generally Type II data will not be retransmitted as is typically done for Type I data.","Referring to , in a private network  an application endpoint  is protected by a firewall . The firewall may be a proxy server that blocks incoming TCP or UDP data on various ports from or to the internal application endpoint . The firewall may prevent voice, video and other data transmissions from unknown third parties outside the firewall, such as the computer system  or the application service endpoint , which transmit data over a WAN\/Internet  or other public network. In addition, the firewall  may also block outgoing UDP or TCP data packets that may be sent from application endpoint  to an application service endpoint . Computer system  may also be protected by its own firewall (not shown).","Connections ,  may include routers, switches and other transmission devices for communicating data packets and which support a wide variety of technologies, including dedicated wire connections, dial-up connections, DSL, cable, and satellite links.","Referring to , in one embodiment of the present invention, private network \u2032 is protected by a firewall \u2032 that blocks incoming UDP data packets to the internal application endpoint \u2032. Elements of correspond to similarly numbered elements of that differ only by a prime. For instance, firewall \u2032 interposed between the application endpoint \u2032 and application service endpoint \u2032 corresponds to the firewall  of ","The tunnel plug-ins (TP) \u2032 and \u2032 are key differences in the overall architecture of , as compared to . The TP \u2032, \u2032 are OS-independent components and may be implemented on a personal computer running Windows\u2122, Macintosh\u00ae OS, Linux, UNIX, etc. Device \u2032 may be a personal digital assistant, a laptop, web-enabled phone or network accessible device. The application endpoint \u2032 and service endpoint \u2032 may provide application content to and from devices such as a speaker, a display, a microphone and a camera (none shown).","The TP \u2032, \u2032 may be coupled to the firewall \u2032 or network \u2032 over connections \u2032, \u2032 using a wide variety of technologies, including dedicated wire connections, dial-up connections, DSL, cable, and satellite links. Connections \u2032, \u2032 may include routers, switches and other transmission devices for communicating data packets. WAN\/Internet  may comprise other nodes (not shown) which route communication between TP \u2032 and \u2032.","Each plug-in component \u2032 and \u2032 consists of two components: a Tunneling Driver Plug-in (TDP) and a TCP\/IP Stack Plug-in (TSP). In the case where an endpoint \u2032 or \u2032 is a server or service endpoint, the TSP comprises a tunneling listener module as part of the plug-in \u2032 which handles accepting and maintaining the tunnel connections at the application level, as well as responding to the UDP probes for the detection of a firewall \u2032. For example, the server listener can track where communications are coming from and going to and \u201clisten\u201d for communications received over predetermined TCP port(s).","The TDP components of TP \u2032, \u2032 are implemented at the network interface driver level (e.g. NDIS intermediate driver on Windows\u2122). A driver layer refers to a part of the operating system that interacts with a particular device or software and contains information about the device or software interface. For example, for PCs, a driver can be packaged as a .SYS file. Multiple connections may or may not be multiplexed over a single tunneled connection at a driver layer.","In the present embodiment, the TDP is responsible for tunneling two types of data: TCP (Type I) and UDP (Type II) data streams. On the client side, the TDP accepts commands from the TSP, which intercepts socket calls using specific ports to support tunnels to a destination server endpoint and manage the tunneling protocol.","In an embodiment where client or server receives tunneled data, the TDP inspects TCP\/IP protocol headers for information required to reconstruct data stream or datagrams. On the server side, the TSP listens on the currently configured tunnel port for incoming tunnel connections from a client endpoint. The TSP listens for and accepts tunnel connections; the TDP snoops incoming IP headers and reconstructs datastreams or datagrams if it finds a tunneled packet.","As noted, the TDP in accordance with the present invention is responsible for tunneling two types of data: Type I and Type II. Type I data refers to data normally sent by an application using the TCP\/IP protocol, which is a reliable connection based protocol.","Type II data is connectionless data such as UDP. For example, Type II data can refer to data normally sent by an application using the UDP\/IP protocol, which is an unreliable connectionless protocol. Since Type II data is sent with an unreliable protocol, it is assumed that the application does not want the implied overhead and potential latency introduced with a reliable connection-based protocol like TCP\/IP. Low overhead\/latency is accomplished by making sure no data is retransmitted, whether or not it makes it to the other end of the tunnel.","Turning to the other component of the TP of the present invention, the TSP component of the plug-in is inserted just below the socket layer of a TCP\/IP stack and monitors requests of TCP\/IP and UDP ports by applications. The TSP may be implemented in one of several ways. For example, the TSP may be implemented as a socket shim like a Winsock Layered Service Provider. This shim will watch all outgoing ports. If there is a TCP connection and\/or UDP datagram sent on a port of interest, the shim will perform an AFD (\u201cAutomatic Firewall Detection,\u201d described below), create a tunnel if necessary, and send commands to the TDP regarding which TCP and UDP port(s) to specific IPs will be tunneled.","Another approach for implementing the TSP component may be for an application to integrate TSP functionality directly into its logic and call the appropriate tunneling API for AFD, tunnel creation, and signaling to the TDP. In this approach, the application would be responsible for any packet translation necessary.","A plug-in may act both as a client and server on any endpoint, but generally a client TP refers to the initiator of communications that may require a tunnel, and the server TP refers to the receiver of that initial communication. Unless otherwise indicated, any reference to UDP or other connectionless protocol shall equally apply for any other connectionless protocol. Reference to TCP or other connection-based protocol shall equally apply to any full duplex or connection-based protocol. It should be noted that the present approach of encapsulating UDP in TCP is not a restriction on the protocol encapsulation, as a TP in accordance with the present invention can apply to other connection and connectionless protocols.","Regardless of whether data is Type I or Type II, the TP can tunnel through when necessary. When it is determined that a tunnel is necessary to complete the desired connection, a tunnel is created on a tunnel port and only connections and data signaled to the TDP from an application client to a server are wrapped in a tunneling header and sent through the tunnel connection.","Unlike TCP, UDP offers a limited amount of service when messages are exchanged between computers in a network. For example, while UDP can handle packet fragments and reassemble them if they come in the right order, UDP cannot handle missing or out of order packets. For example, UDP does not provide sequencing of the packets for arriving data. As a result, generally any application program that uses UDP must be able to make sure that the entire message has arrived and is in the right order. However, due to contemporaneous nature of applications as real-time voice and video transfer, it is not usually required or desirable to use resources for re-transmission of data if some information is not properly transferred. For example, in one embodiment of the present invention, identifier packets (e.g., dummy packets or packets of a known sequence) are sent in response to retransmission requests and where the receiving side knows to discard or ignore such packets. Further details and algorithms for addressing retransmission considerations are provided below.","In a full tunnel plug-in configuration, the TP is installed on both ends of a connection. For example, TP \u2032, \u2032 is installed with both TDP and TSP installed and having control over data sent over the connection between endpoints \u2032 and \u2032. In this mode, the TP emulates a TCP datastream for every packet. When it is determined that a tunnel is necessary to get UDP datagrams from one endpoint to another, a tunnel is created on a tunnel port and all data from the client to a server are wrapped in a Type I data tunneling header and sent through the tunnel. Multiple datastreams may or may not be multiplexed over a single tunneled connection, but there is only one header for both TCP and UDP with a field that indicates the type of data.","Referring now to , there is shown a communication system   also depicts the interaction of stacks layers involved in a communication link, for example between an application endpoint \u2032 and application service endpoint \u2032.","System  represents communication between a device  and destination device  on opposite sides of a firewall . TDP and TSP are deployed in system  and operate to exchange UDP data under the guise of TCP. Source device  and destination device  comprise network layers which perform different application endpoint functions and which communicate endpoint data through to other layers at the endpoint. For purposes of this disclosure, the source device will be described as layers for a client and the destination device will be described as a server. Other configurations are possible and can easily be implemented over the Internet in a manner understood by one skilled in the art based on the application of the teachings herein to each endpoint within a communication system.","The source device  includes a source application layer , a source socket layer , source TSP , source TCP\/IP stack  and source TDP . Destination device  includes a destination application layer , a destination socket layer , listener , destination TCP\/IP stack  and destination TDP . Various approaches for implementing and handling these layers of both devices are understood by those skilled in the art.","In the case of a server destination device , the TSP of the service-side TP is configured as a listener  to \u201clisten\u201d for TCP\/IP connections on a determinable tunnel port. Several methods to implement the server side functionality of the TSP (i.e., the listener functionality) are possible. For example, the tunnel port can be set by default as , the default connection-based HTTPS port. However, designation of port  as default could conflict with a standard web server (like Microsoft IIS) which may be listening on this port.","Alternatively, systems that do not have a web server that supports HTTPS, a server TSP can be implemented as a separate process or system service that listens on a determinable port and accepts tunnel connections thereupon. If there is a web server present, a servlet could accept and maintain a persistant HTTPS connection, signaling the server-side TDP when tunneled data arrives.","In either case, the server-side listener uses an OS transport stack to accept the initial tunnel connection.","If the stack layer  were being described for a client, the listener is not required, and the listener  would correspond to a TSP .","Application layers ,  are not necessarily the endpoint applications themselves but generally are the layers at which certain communication features are performed such as partner identification, user authentication and quality of service level establishment.","The socket layers ,  are used by the application layers ,  to communicate TCP or UDP-based data. The socket layers contain sets of programming requests, or \u201cfunction calls\u201d such as application programming interfaces (APIs). Common APIs include the Berkeley UNIX C interfaces for sockets.","The TSP layers ,  incorporate and implement TCP protocols, perform firewall detection and establish tunnels. In one embodiment, the tunnel is created by TCP  as the TCP  looks for an outgoing connection to the destination stack . Where a firewall  is present, UDP data links are not established between the client and server. Instead, the TSP layer  creates and maintains a tunnel  through the firewall . The TDP layers ,  incorporate and implement the TDP component described above. Tunnel  appears as TCP-based communication. Thus, data transmitted through tunnel  can traverse the firewall  via an open TCP port or TCP port of choice. Once a channel is created between source device  and destination device  based on the TP, Type I and Type II data can be exchanged. The tunneled data received by the destination device  can be unpackaged and sent up the stack as TCP or UDP data.","Tunnel  supports UDP and TCP data, as well even where an application endpoint port may be blocked or incoming connections to a client or host are not allowed. In this embodiment, any application port can be tunneled to a destination IP address once the tunnel  is created. In other words, virtually any protocol blocked by a firewall can be tunneled by the TP.",{"@attributes":{"id":"p-0090","num":"0089"},"figref":"FIG. 9","b":["800","300"]},"Reference is now made to , which depicts communication between devices on opposite sides of a firewall . In this embodiment, an HTTP proxy  is interposed between a source device  and destination device . Source device  and destination device  comprise network layers that perform application endpoint functions and that communicate data through to other layers. For purposes of this disclosure, the source device  is associated with a client and the destination device  is associated with a server. Other network configurations are possible, and such systems can easily be implemented in alternate configurations.","Source device  includes a source application layer , a source socket layer , source TSP , source TCP\/IP stack  and source TDP . Destination device  includes a destination application layer , a destination socket layer , destination TSP , destination TCP\/IP stack  and destination TDP . Various approaches for implementing and handling these layers of both devices are understood by those skilled in the art.","As described with respect to system , in the case of a server, the TSP of the service-side TP is configured to listen for TCP\/IP connections on a determinable tunnel port. The description of the server-side TSP in system  will apply to the destination TSP  in that if device  were a client and not a server, the listener functionality is not needed.","The descriptions for the various of the source and destination devices  and  equally apply to the corresponding devices for the source and destination devices  and , respectively. For example, socket layers ,  are used by the application layers ,  to communicate TCP or UDP-based data. The TSP layers ,  incorporate the TSP described above and perform firewall detection on a transport layer.","With reference still to , the presence of proxy  requires applications to simulate TCP connections, and the TP will only have control over one end of the connection at the stack level. TCP tunnels  support Type I and Type II data. UDP data tunneled within a TCP protocol can be communicated between the source device  and proxy .","During transmission, the proxy  may send back retransmit requests to the source device. Instead, the source device will send blank packets in place of the retransmission packets that can be easily identified as lost data so that the receiving side can discard it. To the proxy, this looks just like a normal retransmission of data and keeps traffic flowing. Further details are provided below.",{"@attributes":{"id":"p-0097","num":"0096"},"figref":"FIG. 10","b":["900","500"]},"A user using embodiments described above will not likely know whether a plug-in is required on the application endpoint of the user. Accordingly, the need of a plug-in should be transparent to the user, and the installation of a plug-in should be automatic or otherwise occur \u201con the fly\u201d and operate transparently with existing client applications.","When a user is invited to or wants to participate in a session for a particular application but has nothing installed for that application (e.g. a video conferencing application or other desktop or device application for communicating voice, video or other communication to the user), it is preferable that a dynamic and user-transparent plug-in download occur automatically. In one embodiment, the plug-in can be a browser plug-in. The TP will be configured using specific logic for the application and will look for the specific TCP ports of the application in question. Then the desired application is launched. To illustrate, consider a case where a user receives a URL either by email, instant message or link on a web page. When the user activates the URL, if the user does not already have an installed application plug-in, the user's device automatically downloads the tunnel plug-in as a browser plug-in, and the tunnel plug-in is installed and configured for that application. Once the plug-in is installed, tunneling in accordance with the present invention can occur.  depicts a representative and preferred data flow diagram  for a case where a client or client-side application establishes a persistent tunnel, receives an incoming call through a NAT\/FW.","Once a plug-in is installed, automatic firewall detection (AFD) can be used to determine a configuration for reaching a server. A firewall detection sequence for firewall, NAT and proxy detection normally occurs when the application client first tries to communicate with a server. The sequence may be as simple as an application endpoint registering with a server or an actual connection with the server for an application session.","When a client attempts a connection or tries to send data, the TSP monitors predetermined destination ports used by an application and triggers an AFD sequence when one of these requests happens. In one AFD sequence, several test procedures may be initiated by sending data to the server over various ports. For example, test procedures could test for system configuration such as whether the system supports incoming UDP data, outgoing UDP data on a port with incoming data received on the same port (i.e., pin-holing), incoming TCP data, or outgoing TCP data.","If communication is established with the other end through one of the test procedures, the client can determine whether or not it is behind a NAT. If the test procedure indicates that the client is behind a NAT, the TP tunnels everything through a tunnel port.","If test procedures indicate that the client cannot access the destination with UDP but can get through on the tunnel port with TCP; the client tunnels through the tunnel port. If the client cannot create a tunnel to a desired destination, the AFD sequence may look at the local proxy settings. In any event, once an appropriate tunnel type is determined, a tunnel supporting Type I and Type II data is created. In a system with an HTTP proxy, a handshake may be simulated by the client\/server to \u201cfool\u201d the proxy into thinking this is a true HTTPS (or TCP) connection. As a default, port  could be used.","Depending on how the tunnels are to be created, tunnel plug-ins will operate one of the appropriate tunnel modes described with respect to . It is also noted that for public networks such as the Internet, since the tunnel port could be the same port used by Web servers, one of the only ports opened through most firewalls, it is possible that protocols such as HTTP and HTTPS may be attempted from the client endpoint as well as other endpoints. If other endpoints that can reach the tunneling server without tunneling, with HTTP for example, the server must be able to differentiate this request from the tunneled requests.",{"@attributes":{"id":"p-0105","num":"0104"},"figref":["FIGS. 3 and 4","FIG. 3","FIG. 4"]},"In , a firewall  separates a private network  from a public network . Here, the TP  is installed on a desktop system or other web-enabled device . TP  is installed at the application service endpoint . System  is coupled to an application endpoint . This application endpoint can be a closed system such as an application endpoint appliance like a presentation projector system. In this configuration the desktop system  acts as a proxy to the application endpoint appliance for purposes of providing the plug-in to the endpoint appliance . In this way, endpoint  is coupled via a web-enabled device  and via network  to the application service endpoint .","In , a firewall  separates a private network or client side  from a public network or server side . The TP  is installed on a tunneling proxy server . TP  is installed at the application service endpoint . The private network comprises multiple systems or devices , , . The tunnel proxy server  can be used to selectively allow or control access of private network devices , ,  to the application service . Alternatively, proxy server  can enable all devices , ,  with the tunneling functionality without each device having to install TP .","A detailed technique used to enable real time traffic to be tunneled through a TCP connection and behave as close to a direct IP connection can be accomplished and described using the following tunnel plug-in techniques and steps: intermediate system determination, tunnel connection establishment, traffic encapsulation, manipulation of sequence numbers and windows, and retransmission algorithms and efficient acknowledgement algorithms. The goal achieved using this series of techniques is a TCP\/IP connection that does not inhibit the transmission of real time traffic by performing its normal reliable delivery and congestion avoidance algorithms. TCP\/IP was designed to efficiently pass information in reliably in sequence with out regard to timing jitter.","Intermediate System Determination. Before a connection can be established that will be used to tunnel traffic, it must be determined if a tunnel is necessary. This determination is accomplished by passing test traffic through to the remote host and determining if the remote host can be reached directly by sending a UDP probe packet. The server side tunneling components will attempt to return this packet to the UDP source port+1. If the client does not receive this packet within a reasonable amount of time (configurable, but typically on the order of a few hundred milliseconds) a TCP (Default is HTTPS port ) connection is established to the remote system.","Connection establishment. For TCP, a standard connection is typically established by intercepting a traffic request (such as an H.323 registration request) to a well-known (e.g. based on H.323) port. A TCP connection is defined by the port and address of both the originating endpoint (or its proxy) and the terminating endpoint (or its proxy). During this connection negotiation between the client and server tunneling components it is determined if an intermediate system is a firewall or an Internet proxy by passing TCP\/IP sequence number information of the packet inside the packet and comparing the sequence number with the one inside the packet received by a server side tunnel listener. In determining the intermediate system, the TDP intercepts some outgoing data in the tunnel connection and places the sequence number of the packet in the application payload section where a placeholder is inserted at the application layer. If sequence numbers match then the connection is not terminated, and the system does not require timely acknowledgements. TCP\/IP acknowledgements, described more fully below, insert acknowledgements (or ACKS) in the packets coming back in the reverse direction rather than sending just an ACK in a separate packet. This insertion is better than sending ACKS separately as a system would be forced to send twice as many packets.","Once a TCP tunnel is opened, the client side tunneler will not send any more traffic over the tunnel. Instead, the TCP tunnel will be used as a conduit to send tunneled traffic via the TDP. The TCP\/IP stack will not be used again until tunnel connection shutdown.","Traffic encapsulation. Traffic encapsulation is achieved by capturing UDP and TCP\/IP packets and wrapping them in a new header inside a TCP\/IP frame. The information about the original packet is maintained in a partial header that contains IP address and port information for a UDP packet and the IP address, port and sequence number information for a TCP\/IP packet. The new header is derived from an established connection and the resulting packet is then part of that connection. The data is piggybacked inside the connection making it possible for it to traverse firewalls, Internet proxies, etc., just as a HTTP\/S connection may do. Note that the connection is a TCP\/IP connection, and does not employ techniques that a normal connection would exhibit such as slow start, timer back off, round trip time estimation etc. These techniques are useful in the efficient operation of a connection-oriented protocol, but they are often counterproductive when trying to simulate a directly connected network.","Manipulation of Sequence Numbers. Sequence numbers are assigned as with any TCP\/IP connection. When sending traffic, sequence numbers are incremented as traffic passes. No acknowledgments need be received (e.g., from an \u201cACK\u201d flag in the TCP\/IP header) in order for the client to continue sending data as would be done with TCP\/IP. No timer back off is performed by the TCP stack since when data is ready, the data is sent immediately with the ACK and PUSH flags (which indicate if data is contained in a packet) set to ensure the data is immediately sent up the stack. The TCP\/IP window size is preferably set by the TDP to the maximum value to ensure the remote system continues to send as much data as it needs to. When data is received all previous data is acknowledged even if it has not been received (i.e. the last sequence number is sent). This acknowledgment is to make sure that traffic continues to flow as it would in a direct IP network. If necessary, missing data can be dealt with by the higher-level protocols or the application depending on its type.","Retransmission algorithms and efficient acknowledgement algorithms. The algorithms discussed above are sufficient if the tunneling connection does not get terminated by an intermediate system (e.g., Internet proxy). If the intermediate system does terminate the connection, then two issues arise. The first relates to acknowledgements where since the intermediate system is terminating the connection the intermediate system will perform normal acknowledgment algorithms and will not send any traffic until it has received complete transmissions of data. In order to deal with this situation a sender could hold on to traffic and resend it, but this would be cumbersome for the sender and would not aid in the goal of emulating a directly connected network. In a directly connected network lost traffic does not get retransmitted unless the higher-level protocol resends it. UDP packets for instance, generally do not get retransmitted if they are lost. Therefore, the present approach does not employ a retransmission algorithm. Instead, the present approach utilizes an alternating bit pattern in place of the retransmission that can be easily identified as lost data so that the receiving side can discard it. To the proxy, this looks just like a normal retransmission of data and keeps traffic flowing. In case of selective retransmission requests, only the lost parts are sent.","On the receiving side the highest sequence number received is always sent in an acknowledgment flag (ACK) in order to keep information flowing. Since an Internet proxy that terminates the connection cannot be expected to maintain the boundaries of the encapsulated packets, partial packets will be received. These partial packets are transformed into IP fragments and sent up the receiving side of the stack. These fragments are then reassembled by the IP stack. This fragment technique eliminates the need for the tunneling implementation to have to deal with the buffering and discarding of fragments.","Turning to the acknowledgement process, there are at least two techniques for sending acknowledgments in the present invention. One is to acknowledge every received packet, the other is to piggyback acknowledgments on data flowing in the opposite direction. In the latter case, when one end of a connection is receiving but not sending data, the technique must determine when to send an acknowledgment before the TCP\/IP window size is reached. Usually half a window size is used as a queue to send an acknowledgment so the other end will continue sending data. The percentage of the window size is preferably configurable at both ends.","Tunnels are shut down when no data has been sent through them for some period of time. Tunnels can be closed by sending a FIN (a standard TCP\/IP way of ending a session) to the remote system. When the tunneling driver receives the FIN it frees all state information associated with the connection.","In either case, when a request is made for a connection or datagram to send to a destination IP and port, the following things will happen:","The TSP starts the automatic firewall detection (AFD) process, described above. If the AFD indicates that the two endpoints can send unsolicited UDP to each other, the TP lets the connection proceed normally.","If the endpoint cannot send unsolicited UPD to the other, the TSP will attempt to connect via TCP\/IP to the configured tunnel port, which by default is the HTTPS port . If an HTTPS handshake can be performed or simulated then the TSP sends a tunnel connect message, formatted as a valid HTTPS connect for the ability to traverse an HTTP proxy. (For proxy traversal, the TSP must support the same browser based proxy detection, automatic, configuration script, or manual configuration). The tunnel connect messages contains the sequence number information mentioned in an earlier section. This message is used by the server side TDP to determine whether or not there is a proxy type device interposed between the application endpoint and application service endpoint, as well as a GUID (Globally Unique Identifier). The GUID is a string of bytes used to uniquely identify the client tunnel endpoint. A tunnel listener at an application service endpoint looks at the GUID and generates a unique IP address for the client. The GUID may be used later by the server to reuse the same IP address for that client.","If there is a proxy in between the client and server, the client will send a second connect message so it will make it all the way to the listener. Once this handshake is done, the connection stays up, but no more data is exchanged between the TSP or a tunnel listener. The TSP signals to the TDP which ports to tunnel and any data through those ports will get tunneled.  depicts a representative data flow diagram  initiated by a TP for the case where an HTTP proxy is interposed between a client and a server.","It is typical with some rich media communications protocols, for control and data to be exchanged through separate channels, as well as one or more separate destinations.","In system  of , firewalls  and  are configured so that only outgoing TCP connections are allowed and the gatekeeper is set to gatekeeper-routed mode. Tunnel plug-ins (not shown) are installed on endpoints - as well as the gatekeeper  and Multipoint Control Unit (MCU) . The MCU  and the gatekeeper  may be on separate machines with different IP addresses, but in any case communicate over channel . Tunnels are created from the endpoints - to the gatekeeper  when the endpoints - register with the gatekeeper .","In system , a client - registers with a gatekeeper . The registration does not necessarily require authentication but the client user provides some user name (e.g. Alf, Dave, Jay or Mike) and IP address (e.g. 10.0.0.1 and 10.0.0.2). When the tunnel listener or TSP on the gatekeeper's plug-in accepts a tunnel connection from the client, the listener will generate an alternate or \u201cfake\u201d IP address for the client side TP to use for packet translation, as well as to uniquely identify the tunnel for the server side application. In one embodiment, the gatekeeper will not see or keep track of the private IP addresses but will only see the \u201cfake\u201d addresses to associate with user names. If the gatekeeper needs to send data to a tunneled client, sending to the \u201cfake\u201d address will indicate to the TDP to tunnel the data to the appropriate client.","Once registered, a tunnel - will stay open as long as there is a packet transmission. Occasional activity as part of H.323 RAS messaging will keep a tunnel open.","Additionally, once the name and IP address are registered and tunnel created, an application service side server can initiate calls to a client - even if the client is behind a firewall at a private address. So long as a client - occasionally sends some data to the server side IP address, a tunnel - will stay open.","Once the tunnels to the gatekeeper are established, either an endpoint or the gatekeeper can initiate an H.323 call. Q.931 and H.245 control information is exchanged through the tunnel. These TCP-based tunnels are created as normal TCP connections but may multiplex one or more TCP connections requested by an application. All TCP connections requested by an application (i.e., H.323 control information like Q.931, T.120 channels, etc.) on a client or local machine are tunneled as Type I data connections.","A problem arises when the endpoints and the MCU want to exchange RTP-based (real-time transport protocol) media over channels -, and the gatekeeper  and MCU  are on separate IP addresses. Both the client (client numbers here) and MCU  may start sending media at the same time, so some of the packets sent from the MCU  to the client endpoints - will not go anywhere until an endpoint sends at least one packet to open the tunnel to the MCU . Since the IP\/ports match in each direction the tunnel plug-in on the MCU can easily find which tunnel to send the data on once it is opened. When a NAT is involved, however, the problem is more complicated.","RAS registrations register an IP with one or more aliases. The IP address that an endpoint will register is the local address, which generally will be a private address. This local address is typically unreachable from the outside a private network, as well as indistinguishable from private addresses from other private networks. When a call to a registered endpoint is placed, the gatekeeper  must resolve an alias to an IP address. In many cases, there would be multiple private addresses registered with different aliases with there being no way to distinguish one from the other.","To solve the problem of distinguishing addresses from one another, the TDP and TSP is configured to snoop some H.323 protocol messages and rewrite some of the address information embedded in the protocol.","When the TP server  detects a tunnel being opened from a NAT TCP client, the TP may be instructed to snoop the application protocol for that tunnel. This will activate a protocol specific module for the protocol in question. For H.323 from NAT clients, the following occurs.","First, RAS registrations , , ,  are monitored by the server , and for each tunnel from a NAT client several items are monitored and maintained by the TP. For example, the TP stores the source address the tunnel came from and the private IP and alias information in the RAS Registration Request (RRQ). The TP will also re-write the packet and substitute a fake non-routable IP address for the private address from a normally unusable range, such as 128.x.x.x.","When the MCU server , gatekeeper , or an endpoint , ,  or  tries to initiate a call, the call will be initiated with the generated address. Once the call gets to the gatekeeper TDP, the TDP will find the appropriate tunnel to match the generated address.","At some point before the RTP media channels are started, the TP server (gatekeeper  in this case) will have to send the generated address information back to TP client -. The MCU will receive the generated address information when the client's RTP data causes a tunnel to be opened to the MCU. When the MCU  tries to send RTP to the generated address, the MCU TP will match this with the recent incoming tunnel from the TP client and know where to send the media.","The system  is particularly useful in establishing various conferencing features. For example, suppose a user wishes to join or be invited in to an existing conference. Multiple tunnels may need to be generated to the gatekeeper  and the MCU server  (acting as a conferencing server) to support multiple communication tunnels. In one approach, clients - register with gatekeeper  and receives a \u201cfake\u201d IP address assigned to a client's TSP by the gatekeeper TP to use as an IP address.",{"@attributes":{"id":"p-0136","num":"0135"},"figref":"FIG. 12","b":["1100","1130","1110","1120","1140","1110","615","1120","620","1110","1120","1115"]},"Service is established to the gatekeeper and conference server by the client  through tunnels created and maintained by TP in accordance with the present invention. The client  can register with gatekeeper  over a tunnel established, for example, in accordance with the data flow diagram in . In such a case, the client  will receive back a generated \u201cfake\u201d IP for the TSP to of the client  to use as an IP address.","To join an existing conference, a client could connect directly to the conference through NAT\/firewalls as a client could do as described with respect to system . The server  receives the \u201cfake\u201d IP address from the client. This fake IP address is used by the gatekeeper TP to differentiate duplicate private addresses and associate specific clients with specific tunnels. The gatekeeper  and server  see the same IP address for any client.","In the case where a client is invited by the system to a conference, an invitation may come from the gatekeeper for which there would already be a tunnel allowing the incoming invitation through the firewall\/NAT\/proxy. The invitation could contain the destination server  to connect to so that the client would be establishing a tunnel similar to system . In the case of H.323 or SIP protocol, the client-side TSP must parse H.245 messages or SIP invites from the gatekeeper  or SIP proxy to find out the RTP and RTCP addresses the conferencing server  is expecting to use.","Another advantage of tunneling in accordance with the present invention is that one can deploy services with clients having different firewall protection. For example, the TP can be installed on different client endpoints even if some clients are behind a NAT\/firewall and others are configured with a proxy server. Additionally, on the application server side or a corporate network side, the TP can be easily installed on corporate sites. To highlight both of these advantages, reference is made to  where the present invention is deployed in a multi-site configuration .","A central office  is coupled to a plurality of sites ,  through network . A first site  contains a desktop client  coupled to TP . Site  is coupled to network  over connection , which such connection can be similar to connections \u2032, \u2032 described earlier. Site  contains a desktop client  coupled to TP . Site  is coupled to network  over connection , which such connection can be similar to connections \u2032, \u2032 described earlier.","Site  corresponds to system  in that client  is separated from a firewall  by HTTP proxy . Site  corresponds to system  in that plug-in  is coupled to a firewall  without an intervening HTTP proxy. The application of the TP of the present invention can be installed on each client endpoint (or, for example, on an external server serving multiple clients at a site, as in the case depicted in ) and support other multiple client configurations. However, depending on the corporate configuration, in accordance with the teachings provided herein, the desktop  may or may not need TP  installed. For example, we again refer to a case of a server already having the TP installed serving multiple clients at a site not having the TP installed, as in the case depicted in .","Central office side  may include one or more office desktops . TP  can be installed on desktop  to enable a desktop application to transmit and receive voice, video, and other data over the Internet  and allowing the exchange of HTTP, TCP\/IP and UDP type data packets through tunnel connections created between the desktop and devices on other sides of a firewall  or .","Proxy  and router  act as a DMZ network inserted between a company's private network  and the outside public network . The DMZ allows outside users to get access to a service. Corporate networks commonly utilize a DMZ network to deploy certain services but prevent external devices from accessing internal IP addresses. Since the DMZ is often separated from internal or external users by a proxy, firewall or NAT, TP  can be installed on devices in the DMZ.","Additionally, DMZs themselves are commonly separated from network  by a firewall . Connections , ,  and connections to the network  from firewall  are similar to connections \u2032, \u2032, described above. Corporate network  may be coupled to an external server, such as a MCU or conferencing server . MCU  is preferably similar in all respects to MCU  described above. Similarly, a gateway server  may be coupled to the corporate network  and similar in all respects to the server  described above. MCU  and server  may have TPs installed to support tunneling through a firewall (e.g., firewall ) proxy, or a NAT in accordance with the present invention. For example, tunnels may be created and maintained between TPs on servers ,  and the TP  for desktop  through firewall . Additionally, tunnels may be created and maintained between TPs on servers ,  and a TP  and\/or TP  on open HTTP ports on firewall .","In any event, the present invention adapts very well to a variety of private and corporate networks.","As previously described, a TP configuration in accordance with the present invention, such as TP ,  and  can be downloaded and installed only when needed (e.g., based on a test procedure), and such download and install will be transparent to the client or user.","Additionally, for any configuration a TP install can take place on each endpoint and\/or external server of a configuration to support tunneling without the requirement of a separate system gateway\/proxy or user registration process.","Further, the novel TP approach taught can support virtually any case of packet blockage by a firewall, proxy or NAT. For example, when either an intended sender or recipient of data utilizes a computer device that is protected by a firewall that does not allow transmissions of data using connectionless packet protocol and connection-based protocol, a tunnel can be created and maintained in accordance with the present invention by wrapping the connectionless and connection-based protocol in a connection-based protocol that is permitted to pass the firewall. The plug-in components interact and operate to emulate real-time or connection based transfer for both connection and connectionless protocol. In this way, UDP-like performance (i.e., unreliable datastream) can be supported over a TCP connection. For example, the driver and transport layer plug-ins can support tunnel path simulating a TCP connection in part by sending acknowledgment and appropriate synchronization packets to fool firewalls and other devices into responding to the packets as if the packets were TCP.","Additionally, for transmissions that do not perform or behave well through NATs, the plug-in can have specific logic for applications to translate packets and solve the NAT problems.","The invention can be implemented through computer program code operating on a programmable computer system or instruction execution system such as a personal computer or workstation, or other microprocessor-based platform.  illustrates details of a computer system that is implementing the invention. System bus  interconnects the major components. The system is controlled by microprocessor , which serves as the central processing unit (CPU) for the system. System memory  is typically divided into multiple types of memory or memory areas such as read-only memory (ROM), random-access memory (RAM) and others. The system memory may also contain a basic input\/output system (BIOS). A plurality of general input\/output (I\/O) adapters or devices  are present. Only three are shown for clarity. These connect to various devices including a fixed disk drive  a diskette drive , network , and a display . Computer program code instructions for implementing the functions of the invention are stored on the fixed disk . When the system is operating, the instructions are partially loaded into memory  and executed by microprocessor . Optionally, one of the I\/O devices is a network adapter or modem for connection to a network, which may be the Internet. It should be noted that the system of  is meant as an illustrative example only. Numerous types of general-purpose computer systems are available and can be used.","Elements of the invention may be embodied in hardware and\/or software as a computer program code (including firmware, resident software, microcode, etc.) Furthermore, the invention may take the form of a computer program product on a computer-usable or computer-readable storage medium having computer-usable or computer-readable program code embodied in the medium for use by or in connection with an instruction execution system such as those shown in . A computer-usable or computer-readable medium may be either a computer-usable or computer-readable storage medium or computer-usable or computer-readable transmission medium. A computer-usable or computer-readable storage medium can be any medium that can contain, store, or communicate the program, code, etc. and a computer-usable or computer-readable transmission medium an be any medium that can transport the program, code, etc., for use by or in connection with an instruction execution system. The computer-usable or computer-readable medium can be, for example, an electronic, magnetic, optical, electromagnetic, infrared, or semiconductor system. The medium may also be simply a stream of information being retrieved when the computer program product is \u201cdownloaded\u201d through a network such as the Internet.","Finally, although specific embodiments of the invention have been described and illustrated, the invention is not to be limited to the specific forms or arrangements of parts as described and illustrated herein. For instance, it should also be understood that throughout this disclosure, where a software process or method is shown or described, the steps of the method may be performed in any order or simultaneously, unless it is clear from the context that one step depends on another being performed first.","The present invention is directed to certain aspects within the communication exchange between endpoints. Other details not provided regarding other system hardware and software requirements are not required for implementing the present invention as the present invention can operate and is configurable with any OS or applications by one skilled in the art.","Although the invention has been described with reference to the specific embodiments, it will be apparent to one skilled in the art that variations and modifications are contemplated within the spirit and scope of the invention. The drawings and descriptions of the specific embodiments are made by way of example only, rather than to limit the scope of the invention, and it is intended to cover within the spirit and scope of the invention all such changes and modifications."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 2","i":"a "},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 2","i":"b "},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0038","num":"0037"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0039","num":"0038"},"figref":"FIG. 13"}]},"DETDESC":[{},{}]}
