---
title: Flexible architecture for notifying applications of state changes
abstract: Described is a method and system a unified mechanism for storing device, application, and service state, as well as a rich notification brokerage architecture. Clients register with a notification broker to receive notifications for changes to state properties. When a registered state property changes, a notification broker determines which clients to notify of the state change and provides the client with a notification regarding the change. Clients may be notified whenever a state changes, when a state change meets a predetermined condition, or based on a schedule. An application may also be launched in response to a state change. An application programming interface (API) is provided that provides a unified way of accessing state change information across different components within the device.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07644376&OS=07644376&RS=07644376
owner: Microsoft Corporation
number: 07644376
owner_city: Redmond
owner_country: US
publication_date: 20040622
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["RELATED APPLICATIONS","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENT","EXAMPLE 1","ISV Services","EXAMPLE 2","Corporate LOB (Line of Business) Applications","EXAMPLE 3","Phone Game","EXAMPLE 4","Device Management Client"],"p":["This utility patent application claims the benefit under 35 United States Code \u00a7119(e) of U.S. Provisional Patent Application No. 60\/513,723 filed on Oct. 23, 2003.","Today, mobile devices are designed to run a variety of applications and keep a user updated with current information. Some of these devices include personal digital assistants, wireless phones, and email devices. Mobile devices are now capable of connecting to the Internet and other networks thorough various means and thus exchange information over the networks. These mobile devices may update applications and send and receive information, such as emails, attachments to emails, and web page content. Providing all of this functionality requires applications on the mobile device to be notified of various events, such as when a new email is available, when a screen of the device is activated, when a phone call is received, and the like. It is difficult, however, to access all of the different state changes associated with the device.","Briefly described, the present invention is directed at unifying state and notification architecture across devices.","According to one aspect of the invention, clients register with a notification broker to receive notifications for changes to state properties. When a registered state property changes, a notification broker determines which clients to notify of the state change and provides the client with a notification regarding the change. For example, a client may register to receive notifications regarding changes to battery strength, network connectivity, memory usage, and the like. Whenever one of these registered state properties changes, the notification broker sends the client a notification message.","According to another aspect of the invention, clients may be notified whenever a state changes, when a state change meets a predetermined condition, or based on a schedule.","According to yet another aspect of the invention, an application may be launched in response to a state change or a schedule. For example, a client may register to have an application started when a certain event occurs, such as the mobile device receiving a message directed toward the application to be launched. The application may also be started based on a schedule configured by the client.","According to yet another aspect of the invention, an application programming interface (API) is provided that is directed to providing a unified way of accessing state change information across different components within the device. For example, an application may use the same function call to access state properties set by different components within the device.","According to still yet another aspect of the invention, the registered state properties may persist across device reboots.","Briefly described, the present invention is directed to providing a method and system a unified mechanism for storing device, application, and service state, as well as a rich notification brokerage architecture. Generally, clients register with a notification broker to receive notifications when certain state properties change. When a registered state property changes, the notification broker determines which clients to notify of the state change and provides the client with a notification regarding the change. Clients may be notified whenever a state changes, when a state change meets a predetermined condition, or based on a schedule. An application may also be launched in response to a state change or a schedule. An application programming interface (API) is also provided that is directed at providing a unified way of accessing state change information across different components within the device.","Throughout the specification and claims, the following terms take at least the meanings explicitly associated herein, unless the context clearly dictates otherwise. The meanings identified below are not intended to limit the terms, but merely provide illustrative examples for the terms. The meaning of \u201ca,\u201d \u201can,\u201d and \u201cthe\u201d includes plural reference, the meaning of \u201cin\u201d includes \u201cin\u201d and \u201con.\u201d","The term \u201cstate property\u201d refers to a \u201cstatus\u201d variable registered and stored with the notification system for maintenance and change-notifications.","The term \u201cnotification request\u201d refers to a request from a client to be notified of a state change.","The term \u201cnotification list\u201d refers to a collection of clients which have registered for state property change notifications.","The term \u201cnotification broker\u201d refers to an underlying driver responsible for adding, updating, and removing data from a data store.","The term \u201cstate change component\u201d refers to any component which adds, updates, or generally maintains State Properties in the data store.","The term \u201cclient\u201d refers to any component which registers for state property change notifications. A client may be a state change component as well as a state change component being a client.","The term \u201cstate property identifier\u201d refers to a \u201cfriendly\u201d string (name) representation of the State Property. This identifier may be hierarchical and is unique.","The term \u201cconditional notification\u201d refers to a notification that is sent when a state property changes and the new value of the state property meets the condition that was specified in the notification request.","Illustrative Operating Environment","With reference to , an exemplary system for implementing the invention includes a computing device, such as computing device . Computing device  may be configured as a client or a server. In a very basic configuration, computing device  typically includes at least one processing unit  and system memory . Depending on the exact configuration and type of computing device, system memory  may be volatile (such as RAM), non-volatile (such as ROM, flash memory, etc.) or some combination of the two. System memory  typically includes an operating system , one or more program modules , and may include program data . This basic configuration is illustrated in  by those components within dashed line .","Computing device  may have additional features or functionality. For example, computing device  may also include additional data storage devices (removable and\/or non-removable) such as, for example, magnetic disks, optical disks, or tape. Such additional storage is illustrated in  by removable storage  and non-removable storage . Computer storage media may include volatile and nonvolatile, removable and non-removable media implemented in any method or technology for storage of information, such as computer readable instructions, data structures, program modules, or other data. System memory , removable storage  and non-removable storage  are all examples of computer storage media. Computer storage media includes, but is not limited to, RAM, ROM, EEPROM, flash memory or other memory technology, CD-ROM, digital versatile disks (DVD) or other optical storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other medium which can be used to store the desired information and which can be accessed by computing device . Any such computer storage media may be part of device . Computing device  may also have input device(s)  such as keyboard, mouse, pen, voice input device, touch input device, etc. Output device(s)  such as a display, speakers, printer, etc. may also be included.","Computing device  also contains communication connections  that allow the device to communicate with other computing devices , such as over a network. Communication connections  are one example of communication media. Communication media may typically be embodied by computer readable instructions, data structures, program modules, or other data in a modulated data signal, such as a carrier wave or other transport mechanism, and includes any information delivery media. The term \u201cmodulated data signal\u201d means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example, and not limitation, communication media includes wired media such as a wired network or direct-wired connection, and wireless media such as acoustic, RF, infrared and other wireless media. The term computer readable media as used herein includes both storage media and communication media.","With reference to , one exemplary system for implementing the invention includes a mobile device, such as mobile device . The mobile device  has a processor , a memory , a display , and a keypad . The memory  generally includes both volatile memory (e.g., RAM) and non-volatile memory (e.g., ROM, Flash Memory, or the like). The mobile device  includes an operating system , such as the Windows CE operating system from Microsoft Corporation or other operating system, which is resident in the memory  and executes on the processor . The keypad  may be a push button numeric dialing pad (such as on a typical telephone), a multi-key keyboard (such as a conventional keyboard). The display  may be a liquid crystal display, or any other type of display commonly used in mobile devices. The display  may be touch-sensitive, and would then also act as an input device.","One or more application programs  are loaded into memory  and run on the operating system . Examples of application programs include phone dialer programs, email programs, scheduling programs, PIM (personal information management) programs, word processing programs, spreadsheet programs, Internet browser programs, and so forth. Application programs  may use a common API to perform actions on state properties associated with the device. For example, a phone dialer program may register with a notification system to receive notifications regarding changes to signal strength, phone state, battery strength, and the like. The mobile computing device  also includes non-volatile storage  within the memory . The non-volatile storage  may be used to store persistent information which should not be lost if the mobile computing device  is powered down. The applications  may use and store information in the storage , such as e-mail or other messages used by an e-mail application, contact information used by a PIM, appointment information used by a scheduling program, documents used by a word processing program, and the like.","The mobile computing device  has a power supply , which may be implemented as one or more batteries. The power supply  might further include an external power source, such as an AC adapter or a powered docking cradle that supplements or recharges the batteries.","The mobile computing device  may also include external notification mechanisms, such as an LED (not shown) and an audio interface . These devices may be directly coupled to the power supply  so that when activated, they remain on for a duration dictated by the notification mechanism even though the processor  and other components might shut down to conserve battery power. The audio interface  is used to provide audible signals to and receive audible signals from the user. For example, the audio interface  may be coupled to a speaker for providing audible output and to a microphone for receiving audible input, such as to facilitate a telephone conversation.","Mobile computing device  may also contain communication connections  that allow the device to communicate with other computing devices, such as over a wireless network. The mobile computing device  also includes a radio interface layer  that performs the function of transmitting and receiving radio frequency communications. The radio interface layer  facilitates wireless connectivity between the mobile computing device  and the outside world, via a communications carrier or service provider. Transmissions to and from the radio interface layer  are conducted under control of the operating system . In other words, communications received by the radio interface layer  and communication connections  may be disseminated to application programs  via the operating system , and vice versa.","Illustrative State Change Notification System",{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 3","b":["300","310","315","320","335","330","335","340","345","350"]},"Clients, such as client  or , register to receive notifications regarding changes to a state property with notification broker . Generally, a client may make a notification request with notification broker  that registers the client to receive notifications whenever a state property changes, when the change meets a conditional, or based upon a schedule. The notifications may be permanent or transient notifications.","Permanent notifications are kept in a data store (). According to one embodiment, the permanent notifications are maintained in a back-end data store, such as the registry, and hence are \u201cpersisted\u201d across reboots. As these notifications are persisted, these types of state properties have the same value before a soft-reset (or shutdown) as they do upon a restart (or boot). According to one embodiment, state properties are persistent by default.","Transient notifications are not permanent and are, therefore, not persisted across reboots. In other words, if a device is soft-reset (or rebooted) the notification request is deleted from notification list . In order to restore a transient notification, a client re-registers (sends another notification request to broker ) to receive notifications regarding changes to the state property.","A client may also register to have an application launched upon the occurrence of a state change and\/or according to a schedule. Generally, notification broker  issues a command to start an application specified by the client if the application is not already running when the state change or the scheduled time occurs. According to one embodiment, the client can specify command-line parameters to be passed into the application when it is launched. If the launched process creates a window then a message is sent to the window indicating the notification. If the target process is already running on the client, then the client simply receives the notification message.","Notifications sent to clients may also be batched. Batched state properties are intended for use by state properties which may undergo frequent value changes. A predetermined period of time is set that allows the state property value to \u201cstabilize.\u201d According to one embodiment, the predetermined period is set to 200 ms. If no changes are made to the state property value during the predetermined period, the notification is delivered to the registered clients. The batching predetermined period is configurable and is stored in data store .","Data store  is configured to store registered state properties, as well as other information. According to one embodiment, data store  is the registry provided with an operating system, such as the registry provided with the Windows XP operating system provided by Microsoft Corporation. Data store  may also be any other type of data store in which information may be set and accessed. Data store  may also comprise one or more data stores maintained at various locations within notification system .","Data store  may also be pre-loaded with a default set of state property data that may be accessed by clients  and . Pre-loading the state property data makes many of state properties available without the client having to add a state property. For example, according to one embodiment, the following states are available to clients without registering the state: Display Orientation (Resolution, Brightness); Undismissed reminders (Count, Subject, Date, Time; Location); Undismissed alarms (Count, Description, Date, Time); Battery (% remaining, State); Backup battery (% remaining, State); Memory (Program memory free, Program memory used, Storage memory free, Storage memory used); Storage card (Total memory free, Total memory used); Hardware (Flip-phone state (open\/closed), Keyboard enabled, Wifi enabled, Bluetooth enabled, Headphones present, Camera present); Messaging (Unread count, Total count, Drafts count, Outbox count); Tasks (High priority count, Due today count, Overdue count); Calendar (Next appointment, Name, Location, Date, Time, POOM ID); All day appointment (Name, Location, Date, Time, POOM ID); Current appointment (Name, Location, Date Time, POOM ID); Current free\/busy status; Instant Messenger (Status, Online contacts count; Offline contacts count); Connectivity (Speed, Wifi, Access point, Signal strength, Connection name, Connects to (work, internet), Status); Media player (Status, Playlist (Name, Mode (repeat, shuffle), Track count, Total duration), Track (Type (audio, video), Name, Album, Artists, Track #, Genre, Year, Duration, Play position, Filename, Bit rate)); Sync status; Telephony (Operator, Signal strength, Phone state, Profile, Roaming, Radio state, Active call (Caller name, Caller number), Missed call count, SIM toolkit message. As can be seen, the states span across many different applications.","According to one embodiment, the state property data is organized into a hierarchy. The hierarchy allows a client to specify a group of state properties by referencing the parent. The state property may be set to a data type, such as string, integer, float, and the like.","The client may identify the state property by a \u201cfriendly\u201d string (name) representation of the state property. For example, \u201cbattery\\a\u201d references the state property \u201ca\u201d under the parent \u201cbattery\u201d, and likewise there could be a \u201cbattery\\b\u201d which would be the state property \u201cb\u201d under the same parent. When referring to a group of state properties under a common parent, then the parent identifier may be used. For example to receive notifications based on changes to all of the battery states, then \u201cbattery\u201d would be provided in the registration, thereby referencing all of the battery state properties using a single name.","Broker  may be configured to control access to setting\/adjusting\/removing state property types within data store . For example, a restriction could be placed on a state property limiting the deletion of the property from the notification system to a predetermined list of clients. When a state property is deleted, clients that have registered for notifications relating to the property are notified of its deletion.","As discussed above, clients  and  register for the state properties they are interested in receiving notifications about when the state property changes. Clients may register to receive a notification whenever the state they registered changes, when a conditional applied to the state value meets a condition, or upon a predetermined schedule. A conditional notification may be based upon many different conditions. According to one embodiment, the conditionals include: all, equal, not equal, greater than, greater or equal than, less than or equal, less than, contains, starts with, and ends with. For example, client  may register with notification broker  to receive a notification when the missed call count state property is Greater than fifteen and when the caller name Contains \u201cJa.\u201d Conditionals allow a client to receive the state change information they are interested in without having to process state change information they do not care about.","The clients registered to receive notifications regarding changes to state properties are maintained in notification lists . Notification broker  accesses notification lists  to determine the clients that should receive notifications when a registered state property has changed.","Scheduler  may be configured to notify and\/or activate a client based on a schedule. The scheduled activation notification mode allows a client to receive a notification based on a simplified recurring schedule registered with notification broker . Schedules may be configured to occur at any interval, such as on the scale of seconds, minutes, hours, days, weeks, or months. According to one embodiment, schedules are defined by the date\/time of the first occurrence and the amount of time between occurrences. Additionally, schedules may be defined without a recurrence interval. When no recurrence interval is provided, the notification is only sent once and then the registration is removed from the notifications list. Additionally, when a notification arrives, if the specified application path (provided during the notification request) cannot be found, the scheduled notification registration is removed from the notification list .","State change component  updates the value of the state property within data store  when the state changes. State change component  may update the state directly in data store  or through notification broker . When the state is updated through data store , data store  communicates the change to notification broker . When the state is updated through notification broker  then notification broker  updates the state in data store . In either case, notification broker  determines which clients should be notified based on the state change. Notification broker  parses notification lists  and determines the clients that have registered for notifications regarding the state change. Notification broker  applies any conditionals to the value of the state property that has changed and notifies the client when the conditional is met. When there is not a conditional associated with the state change, the client is notified of the state change.","When a client, such as client  and client , receives a notification from notification broker , the client may call a function within a common API (see discussion below) to retrieve the new state of the state property. Alternatively, the property information may be directly delivered to the client along with the notification. When the client is no longer interested in receiving notifications relating to a particular state property, the client may un-register itself from receiving change notifications relating to the state property. Clients  and  may also directly query broker  at any time to find the state of a state property using the common API.","State property values may also be cached by notification broker  in cached properties . A state property value may be cached for many different reasons. For example, a state property value may be cached such that a previous value of the state property may be compared with a current value of the state property. Additionally, the cache may help to facilitate quick repeated lookups requesting the value of the state property.","According to one embodiment, notification system  supports NET (managed) clients for both additions to the store, as well as change notification registrations.","The following are some exemplary scenarios to further clarify state management notification system .","Norm the Newbie has built a C# application which keeps a complete database of the current season's Baseball statistics (e.g., teams, players, scores, stats, etc.). He has also built a simple XML web-services client which can connect to a sports website and pull-down updated daily statistics. Since the amount of data the application stores is relatively large, Norm only wants his application to sync data when a \u201cfat pipe\u201d (e.g., 802.1x) is available on the device (e.g., PPC). Norm then registers his application by sending a notification request to notification broker  for notifications when a high-bandwidth connection is available. Norm additionally specifies in the notification request to launch his application when the high-bandwidth connection is available. When the state change component associated with the connection updates the state of the connection, notification broker  activates Norm's app when the state indicates that it is a high-speed connection.","Elph the Enterprise developer has built a field-service form-based VB.Net application for insurance adjuster usage. The application allows an insurance adjuster to look-up part #s and costs, make notes, retrieve car schematics, and the like. Each day, the insurance adjuster takes his mobile computing device out in the field to service customers. The application persists all of its data for today's operation locally in a data store. Elph would like the application to synchronize the offline store with the company's main servers each time the device is cradled. Therefore, Elph registers his application for notifications on synchronization cradle events. Whenever the device is cradled, the application is notified and the application synchronizes its data.","Golem the phone game developer is building a next-generation multi-player RPG for a phone. He anticipates the game will be so very popular that it will last for weeks and months at a time. One of Golem's key concerns is the persistence of game state without user intervention. One of the game's neat features is the ability to save current state right before the phone runs out of batteries and ensure the user never loses any data. Golem registers his application to receive low battery notifications to ensure that the game information will be saved before the device runs out of batteries.","Eric the emerging Enterprise Management Client developer is looking to create the next generation mobile computing device and phone management client; able to handle client updates, virus scanning, policy enforcement, and more. Using C# he has built a power device-side client which can handle requests based on server-driven commands. Each night at 3 am, Eric would like his application \u201cwoken up\u201d so he can contact the server for updated policies, virus scanner signatures, and the like. In order to achieve this, he simply registers his application with notification broker  for a scheduled notification (each day at 3 am). Eric is now assured his app will run at the specified time.",{"@attributes":{"id":"p-0056","num":"0055"},"figref":"FIG. 4","b":["400","410"]},"Moving to block , a callback is registered with the notification system such that when a change is made to a registered state property, the notification system is made aware of the change. According to one embodiment, a notification broker registers a callback with the operating system registry for changes made to the state property value.","Flowing to block, , the client is added to a notification list to receive notification messages relating to the state property. Clients included in the notification list receive notifications regarding changes to the registered state property.","Transitioning to block , a callback is received when a change is made to any of the registered state properties. According to one embodiment, the callback includes an identifier identifying the state property changes, as well as the current value of the state property.","Moving to block , the state change information is processed. Generally, processing the state change information includes determining if any conditionals, schedules, batches, or application launching conditions, apply to each of the registered clients for the changed state property (See  and related discussion).",{"@attributes":{"id":"p-0061","num":"0060"},"figref":"FIG. 5","b":["500","510"]},"Moving to decision block , a determination is made as to whether the client has specified any conditionals that are to be applied to the state property before notifying the client.","When a conditional expression is associated with the notification request, the process flows to decision block  where a determination is made as to whether the condition is met. When the condition is met, or when the client has not specified any conditionals, the process moves to decision block , where a determination is made as to whether the client has specified to launch an application in response to a change to the state property. When the client has specified to launch the application, the process moves to block  where the application is launched if it is not already running. When the client has not specified to launch the application, or the application has been launched at block , the process moves to block  where the client is notified of the state change.","The process then flows to decision block , where a determination is made as to whether there are more clients registered to receive a notification regarding a change to the state property. When there is another client, the process returns to block . When there are no other clients, the process then moves to an end block and returns to processing other actions.","State Property Types and Modes","According to one embodiment of the invention, two APIs may be used to access the state information in the notification system. A native, or underlying API is provided and a managed API is provided to clients. The managed API accesses the native API to perform its operations.","The following is an exemplary native API, in accordance with aspects of the invention: \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","The above specification, examples and data provide a complete description of the manufacture and use of the composition of the invention. Since many embodiments of the invention can be made without departing from the spirit and scope of the invention, the invention resides in the claims hereinafter appended."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 5"}]},"DETDESC":[{},{}]}
