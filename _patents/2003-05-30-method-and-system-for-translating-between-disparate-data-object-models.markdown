---
title: Method and system for translating between disparate data object models
abstract: A method and system is provided for using an active server page program in a universal web-based active server page framework. The active server page program has associated recordset objects within an active server page framework. The universal web-based active server page framework has associated dataset objects with data structure requirements which are incompatible with data structure requirements associated with the recordset objects. The method and system communicate recordset objects from the active server page program to a recordset-dataset translation mechanism. The dataset objects communicate between the universal web-based active server page program environment and the recordset-dataset translation mechanism. Translating dataset objects to corresponding recordset objects occurs within the recordset-dataset translation mechanism for transmitting data within the dataset objects to the active server page program of the active server page framework.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08392894&OS=08392894&RS=08392894
owner: Hewlett-Packard Development Company, L.P.
number: 08392894
owner_city: Houston
owner_country: US
publication_date: 20030530
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD OF INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF PREFERRED EMBODIMENT"],"p":["The present invention relates to distributed component-based computer software applications, and more particularly relates to translating between disparate data object models in an object oriented computing environment.","In many information processing applications, a server application runs on a host or server computer in a distributed network. The server application provides processing services for client applications running on terminal or workstation computers operated by a multitude of users on the network. This is sometimes referred to as client\/server computing.","In a form of client\/server computing sometimes known as \u201cdistributed objects,\u201d the server application includes a set of components conforming to an object-oriented programming (OOP) model, such as the Microsoft Component Object Model (COM) and Distributed Component Object Model (DCOM), the IBM System Object Model (SOM), the Object \u2018Management Group\u2019s Common Object Request Broker Architecture (CORBA), and others. Object-oriented programming generally has advantages in ease of programming, extensibility, reuse of code, and integration of software from different vendors and (in some object-oriented programming models) across programming languages.","One type of OOP environment is that of Web-based services. These services, due to their wide-spread use and technological progress, have developed at least two generations of Web services technology. The first-generation of Web services includes the use of open standards, universal access, rapid development, and continuous deployment. The second-generation Web services environment uses execution environments and tools that take care of infrastructures and operations so developers may focus on creating applications. These tools include the use of XML for universal representation, exchange and storage of all kinds of data, as well as for describing and manipulating component interfaces. One type of second-generation Web services environment for programming is offered by Microsoft Corporation and is known as the \u201c.NET environment.\u201d The .NET environment aims to make component construction and reuse of Web services applications easier than they have been previously.","The benefits of using a Web services language such as .NET common language technology may be clear, but they are less immediate and less certain than many programmers desire. In fact, the .NET environment suffers from certain limitations. Moreover, because of these limitations, programmers now using Active Server Pages (ASP), Visual Basic Script, Visual Basic and C++ skills are likely to find transitioning to the .NET environment platform particularly challenging. For example, VB.NET, which is one example of a .NET environment Visual Basic language, departs dramatically from earlier Visual Basic versions. It approaches object orientation, components and exception handling more like the newer C# language than does any previous Visual Basic language.","Still another limitation with the .NET environment has to do with the presentation layers created within the .NET environment. These presentation layers use the .NET ASP application, ASP.NET, and are very different from the pages written in the classic ASP framework. The classic ASP framework provides for application development of user interfaces or presentation layers. The ASP framework permits creating interactive pages as part of a Web-based application. To a degree, the ASP framework enables developers to separate programming logic from page design through the use of components that are called from the page itself. The ASP framework allows developers to separate content generation from layout by accessing components from the page, using a combination of tags and scripting to create dynamic Web pages.","The existing software to support the presentation layers created in the classic ASP framework cannot effectively interface with the .NET data access environment, ADO.NET. This is due to the ADO.NET environment's not supporting ActiveX Data Objects Database RecordSets (also called \u201cADODB.RecordSets\u201d). The ADODB.RecordSet makes possible communication between a business tier and the data tier in database calls within the ASP framework. Unfortunately, ADODB.RecordSets are not supported in the ADO.NET environment, despite the fact that the classic ASP framework uses ADODB.RecordSets repeatedly for processing result sets from database calls. Many Internet applications have been developed using Microsoft ASP and Visual Basic version 6 (Visual Basic.6) components that employ ADODB.RecordSets. In fact, Microsoft ASP and Visual Basic.6 presently are somewhat ubiquitous languages for the Web services environment.","The newer .NET environment, which includes VB.NET (Visual Basic) and ASP.NET (Active Server Pages), do not support ADO.NET and ADODB.RecordSets equally. Instead of using ADODB.RecordSets, the ADO.NET framework uses an alternative structure, called the DataTable. Unfortunately, the DataTable does not directly interface with ADODB.RecordSets, and use of data within ADODB.RecordSets requires the use of a tool called \u201cCOM Interopt\u201d to allow .NET components to access an ADODB.RecordSet. This slows execution times with each interaction between the classic ASP framework page and VB.NET component due to the need to call COM Interopt three times. A first call occurs so that the classic ASP framework can call the VB.NET component. A second call occurs to supply the ADODB.RecordSet to VB.NET. Still a third call loads the ADODB.RecordSet from an ADO.NET DataTable. The speed reductions that these calls impose on ASP applications may require many internet applications written in the classic ASP framework to be re-written to use ASP.NET, VB.NET, and ADO.NET for them to operate properly. To make this conversion, however, is so time-consuming and labor-intensive that very few applications can economically migrate to the .NET environment.","In accordance with the present invention, a method and system for translating between a classic ASP framework and a next-generation ASP framework is provided that avoids or substantially eliminates problems and limitations associated with prior such methods and systems.","In one embodiment of the invention, there is provided a system that leaves unchanged the front end classic ASP framework, while changing the middle tier of business logic that communicates in the VB.NET language. The present invention achieves this result by use of a DataTable wrapper object that appears to be a RecordSet to the classic ASP framework.","According to another aspect of the present invention, a method and system are provided for translating between a first data object model and a second data object model, which data object models include incompatible data structures. The process includes the steps of receiving a recordset call from the first data object model. The process, in turn, translates the recordset call into a dataset call. Then, the process transmits the dataset call to the second data object model.","According to still another aspect of the invention, a method and system is provided for using an active server page program in a universal web-based active server page framework. The active server page program has associated recordset objects within an active server page framework. The universal web-based active server page framework has associated dataset objects with data structure requirements which are incompatible with data structure requirements associated with the recordset objects. The method and system communicate recordset objects from the active server page program to a recordset-dataset translation mechanism. The dataset objects communicate between the universal web-based active server page program environment and the recordset-dataset translation mechanism. Translating dataset objects to corresponding recordset objects occurs within the recordset-dataset translation mechanism for transmitting data within the dataset objects to the active server page program of the active server page framework.","The present invention allows leaving an existing classic ASP framework Internet application unchanged while changing a backend business tier VB.NET component. Because the presentation layer has been written in ASP and the presentation layer writing represents the bulk of the development work for web applications, the present invention avoids the need to readily convert an ASP application program to an ASP.NET application program. The present invention provides a device called a DataTableRecordSet through which the system calls a COM Interopt function only to communicate with VB.NET. Accordingly, execution times using the method of the present invention operate faster than when the original classic ASP framework communicates with Visual Basic.6. The present invention creates a DataTableRecordSet class of objects, which may be used in the classic ASP framework without any changes to the ASP screens as the application interfaces with the .NET environment framework.","The present invention avoids frequent and intensive use of the COM InterOpt function to limit the processing speed reduction associated with such use. By making the classic ASP framework presentation layer appear to be an ASP.NET application, the present invention provides a way to reduce the scope of even the most complex migration from the classic ASP framework to the ASP.NET platform.","Other technical advantages arising from the present invention will readily apparent to those skilled in the art from a careful reading of the following figures, description, and claims.","One embodiment of the present invention and its advantages are best understood by referring to  of the drawings, like numerals being used for like and corresponding parts of the various drawings.",{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 1"},"With reference to , an exemplary system for implementing the invention includes a conventional computer  (such as personal computers, laptops, palmtops, set tops, servers, mainframes, and other variety computers), including a processing unit , system memory , and system bus  that couples various system components including system memory  to the processing unit . Processing unit  may be any of various commercially available processors, including Intel x86, Pentium and compatible microprocessors from Intel and others, including Cyrix, AMD and Nexgen; Alpha from Digital; MIPS from MIPS Technology, NEC, IDT, Siemens, and others; and the PowerPC from IBM and Motorola. Dual microprocessors and other multi-processor architectures also can be used as the processing unit .","System bus  may be any of several types of bus structure including a memory bus or memory controller, a peripheral bus, and a local bus using any of a variety of conventional bus architectures such as PCI, VESA, AGP, Microchannel, ISA and EISA, to name a few. System memory  includes read only memory (ROM)  and random access memory (RAM) . A basic input\/output system (BIOS), containing the basic routines that help to transfer information between elements within the computer , such as during start-up, is stored in ROM .","Computer  further includes a hard disk drive , a floppy drive , e.g., to read from or write to a removable disk , and CD-ROM drive , e.g., for reading a CD-ROM disk  or to read from or write to other optical media. The hard disk drive , floppy drive , and CD-ROM drive  are connected to the system bus  by a hard disk drive interface , a floppy drive interface , and an optical drive interface , respectively. The drives and their associated computer-readable media provide nonvolatile storage of data, data structures, computer-executable instructions, etc. for computer . Although the description of computer-readable media provided above refers to a hard disk, a removable floppy and a CD, it should be appreciated by those skilled in the art that other types of media which are readable by a computer, such as magnetic cassettes, flash memory cards, digital video disks, Bernoulli cartridges, and the like, may also be used in the exemplary operating environment.","A number of program modules may be stored in the drives and RAM , including an operating system , one or more application programs , other program modules , and program data . A user may enter commands and information into the computer  through a keyboard  and pointing device, such as a mouse . Other input devices (not shown) may include a microphone, joystick, game pad, satellite dish, scanner, or the like. These and other input devices are often connected to the processing unit  through a serial port interface  that is coupled to the system bus, but may be connected by other interfaces, such as a parallel port, game port or a universal serial bus (USB). A monitor  or other type of display device is also connected to the system bus  via an interface, such as a video adapter . In addition to the monitor, computers typically include other peripheral output devices (not shown), such as speakers and printers.","Computer  may operate in a networked environment using logical connections to one or more remote computers, such as a remote computer . The remote computer  may be a server, a router, a peer device or other common network node, and typically includes many or all of the elements described relative to the computer , although only a memory storage device  has been illustrated in . The logical connections depicted in  include a local area network (LAN)  and a wide area network (WAN) . Such networking environments are commonplace in offices, enterprise-wide computer networks, intranets and the Internet.","When used in a LAN networking environment, the computer  is connected to the LAN  through a network interface or adapter . When used in a WAN networking environment, computer  typically includes a modem  or other means for establishing communications (e.g., via the LAN  and a gateway or proxy server) over the wide area network , such as the Internet. Modem , which may be internal or external, is connected to the system bus  via the serial port interface . In a networked environment, program modules depicted relative to the computer , or portions thereof, may be stored in the remote memory storage device . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.",{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 1"},"With reference now to , the COM+ component of the Microsoft Windows 2000 operating system provides run-time or system services to create a run-time object execution environment  on a server computer . The COM+ component is implemented as a dynamic link library (\u201cDLL\u201d), which is a well-known executable file format which allows dynamic or run-time linking of executable code into an application program's process. The COM+ DLL is loaded directly into application server process  that hosts component application objects, and runs transparently in the background of these processes.","The illustrated application server process  is a system process that hosts execution of component application objects. Each application server process  can host multiple component application objects that are grouped into the COM+ application. Also, multiple application server processes  can execute on server computer  under a multi-threaded, multi-tasking operating system (e.g., Microsoft Windows 2000 in the illustrated embodiment).","In a typical installation shown in , execution environment  is on server computer  (which may be an example of computer , described above) that is connected in a distributed computer network  comprising a large number of client computers  which access component application objects in execution environment . Alternatively, execution environment  may reside on a single computer and host component application objects accessed by client processes also resident on that computer. Client computer , in accessing objects in execution environment , uses client program  within client process .","Server computer  executes component applications that are developed as a .NET Assembly containing a group of component application objects. For example, component application objects that are hosted in execution environment  of application server process  may implement the business logic of a client\/server application, such as the code to manage class registrations in a university's registration application or orders in an on-line sales application. Typically, each component application comprises multiple components, each of which contains program code for a portion of the application's work.","The component application objects in execution environment  conform to the Microsoft Component Object Model (\u201cCOM\u201d) specification (i.e., are implemented as a \u201cCOM Object\u201d) and are executed using the COM+ services of the Microsoft Windows 2000 Server operating system, but alternatively may be implemented according to other object standards (including the CORBA (Common Object Request Broker Architecture) specification of the Object Management Group, and Java Beans by Sun Microsystems, Inc.) and executed under object services of another operating system. The COM specification defines binary standards for objects and their interfaces which facilitate the integration of software components into applications. (For a detailed discussion of COM and OLE, see Kraig Brockschmidt, Inside OLE, Second Edition, Microsoft Press, Redmond, Wash. (1995)).","Within execution environment , application server process  makes use of the ASP framework. These ASP components constitute middle or business rule layer components of relevant portions of application server process . This framework is responsible for encapsulating the majority of an application's transaction and database logic. For example, the logic for a complex calculation that requires access to several database tables may reside within a portion of the ASP framework that is part of application server process . The portion of the ASP framework would then be invoked by other portions of the ASP framework during execution of one or more of application server processes .","Within execution environment , the ASP framework executes ActiveX Scripts and ActiveX Components on server computer . The ASP framework allows creation of interactive and personalized web pages for a Web site or corporate intranet without program directly the internals of a Web server or complex application programming interfaces. In addition, the ASP framework is extensible via software components written using Microsoft's Component Object Model, thus making if possible to take advantage of software that may be already written using languages such as Visual Basic, C++ or Java.","The ASP framework provides a series of DLLs installed on a Web server by either a stand-alone installation program or as part of the Visual Studio  setup. These DLLs provide the ability to interpret and process information via the use of a script file (called an ASP script) that is resident in a Web application directory. The ASP framework permits a Web browser to request scripts containing ASP script, usually in the form of VBSCRIPT or JSCRIPT. When requested, these scripts execute in the ASP framework, instead of being simply returned to the browser and produce output for sending back to the requesting browser. The ASP framework establishes an environment having interactivity used to activate a Web site.","The Visual Basic.6 component within the ASP framework includes approximately fifteen (15) different classes or objects and includes simple business logic permitting requests from the presentation layer to interact with databases written in ASP.NET. The Visual Basic.6 component uses a RecordSet as the package within which to communicate with the presentation layer and the business tier. The RecordSet also communicates between the business tier and the data tier.","In the .NET environment, many of the functions of the ASP framework are performed by the ASP.NET framework. The ASP.NET framework provides compiled common language runtime code running on the server computer  (), for example. Unlike the classic ASP framework, the ASP.NET framework may take advantage of early binding, just-in-time compilation, native optimization, and caching services more readily than can the ASP framework. The ASP.NET framework defines an application as the sum of all files, pages, handlers, modules, and executable code that can be invoked or run in the scope of a given virtual directory (and its subdirectories) on a Web application server. Each ASP.NET framework application on a Web server is executed within a unique .NET environment application domain.",{"@attributes":{"id":"p-0043","num":"0042"},"figref":["FIG. 3","FIG. 3"],"b":["90","92","94","96","92","98","94","98","96","98","100","102","102","100","98"]},"Instead of transmitting the retrieved ADO.NET DataTable  directly to ASP  of ASP framework , business logic component  transmits the retrieved ADO.NET DataTable  to DataTableRecordSet object . DataTableRecordSet object  makes the retrieved ADO.NET DataTable  appear to be a RecordSet. Then, DataTableRecordSet  is returned to ASP  within ASP framework . Thus, ASP provides a presentation layer within classic ASP framework , which makes a call to a method within business logic component  that is written in VB.NET and makes a call to Database . VB.NET uses ADO.NET to send a query to the database to receive back DataTable  in the .NET environment. DataTable  is returned from Database  to business logic component . Business Logic Component  then transforms DataTable  into DataTableRecordSet . DataTableRecordSet  is a class that has been created in VB.NET, a class which includes a number of methods which are each of the signatures for the ADODB.RecordSet object. The DataTableRecordSet  provides a wrapper around DataTable  for handing the wrapped object back to classic ASP framework . So the wrapped DataTable  is within DataTableRecordSet  which possesses the methods and properties that are supported by the ADODB.RecordSet. Classic ASP framework  treats the DataTableRecordSet  object as an ADODB.RecordSet.",{"@attributes":{"id":"p-0045","num":"0044"},"figref":["FIG. 4","FIG. 3"],"b":["92","110","112","114","116","118","120","122","110","124","126","128","110","130","132","132","134"]},"Four primary objects in ADO object model  establish the ADO programming environment. These objects include Connection object  for establishing and managing connections to a database. RecordSet object  manages a collection of records. RecordSet object  contains navigational methods to move to a particular record. Fields object  provides the collection of fields associated with a record in RecordSet object . The values within the Field objects  change as different navigational methods are used to move around RecordSet object . Command object  is an object used to access stored procedures or parameterized SQL statements.",{"@attributes":{"id":"p-0047","num":"0046"},"figref":["FIG. 5","FIG. 4"],"b":["130","94","92","110","130","132","134","136","138","140"]},"Each of the primary objects includes one or more secondary objects. Connection object, therefore, includes Errors objects  and Properties objects . Command object  includes Parameters objects  and Properties objects . DataReader object  includes Stream object .","DataAdapter object  includes a number of secondary Connection and Command objects, including Connection object , SelectCommand object , UpdateCommand object , InsertCommand object , DeleteCommand object , and TableMappings objects .","DataSet object  of  includes Tables objects , which may further include other Table objects , as well as Columns objects , Constraints objects , and Rows objects . In addition, DataSet object  includes Relations objects .","Functions associated with these objects have not changed in the present invention from their original functions as provided in the ADO.NET framework as provided by Microsoft Corporation. However, their listing here is for further explanation of the associated context of the present invention. Accordingly, published literature and operations manuals relating to ADO and the ASP framework and ADO.NET and the ASP.NET framework are here expressly incorporated by reference.","DataSet object  is similar to the ADODB.RecordSet object , but with the important distinction that the DataSet object  is always disconnected. DataSet object  represents a cache of data, with database-like structures such as tables, columns, relationships, and constraints. However, though DataSet object  can and does behave much like a database, it is important to remember that DataSet objects  do not interact directly with databases, or other source data. This allows the developer to work with a programming model that is always consistent, regardless of where the source data resides. Data coming from a database, an XML file, from code, or user input can all be placed into DataSet objects . Then, as changes are made to DataSet object  they can be tracked and verified before updating the source data.","With DataSet object , the origin of data is immaterial. DataSet object  will always present a consistent programming model using a collection of data with relational database characteristics. While DataSet object  has no knowledge of the source of its data, the managed provider has detailed and specific information. The role of the managed provider is to connect, fill, and persist DataSet object  to and from data stores.","DataAdapter object  is the object that connects to the database to fill DataSet . Then, it connects back to the database to update the data there, based on operations performed while the DataSet  held the data. Whereas RecordSet object  is primarily connection-based, when using DataSet object , data processing is message-based and revolves around chunks of information. In this approach, the DataAdapter object  provides a bridge to retrieve and save data between DataSet object  and its source data store. It accomplishes this by means of requests to the appropriate SQL commands made against the data store.","Referring briefly to , DataTableRecordSet object  of the present invention provides a wrapper to the .NET environment DataTable  with properties and methods which behave like properties and methods of an ADODB.RecordSet. These members are New, Dispose, Fields, EOF, BOF, AbsolutePosition, AbsolutePage, RecordCount, PageSize, PageCount, MoveNext, MovePrevious, MoveFirst, MoveLast, and Move. To the classic ASP framework  pages, the .NET environment DataTableRecordSet object  looks and behaves like an ADODB.RecordSet even though it actually contains an ADO.NET DataTable . As a result, the present invention provides an ASP framework  application the ability to be used much more readily, while allowing a slower migration to VB.NET language. This eliminates the need to completely rebuild an ASP application program within the .NET environment using the ASP.NET framework.",{"@attributes":{"id":"p-0056","num":"0055"},"figref":"FIG. 6","b":["104","92","104","94","104","104"]},{"@attributes":{"id":"p-0057","num":"0056"},"figref":"FIG. 6","b":["104","100","124","174","104","100","104","100"]},{"@attributes":{"id":"p-0058","num":"0057"},"figref":"FIG. 6","b":["104","124","92","124","104"]},"Having described and illustrated the principles of our invention with reference to an illustrated embodiment, it will be recognized that the illustrated embodiment can be modified in arrangement and detail without departing from such principles. It should be understood that the programs, processes, or methods described herein are not related or limited to any particular type of computer apparatus, unless indicated otherwise. Various types of general purpose or specialized computer apparatus may be used with or perform operations in accordance with the teachings described herein. Elements of the illustrated embodiment shown in software may be implemented in hardware and vice versa.","In view of the many possible embodiments to which the principles of our invention may be applied, it should be recognized that the detailed embodiments are illustrative only and should not be taken as limiting the scope of our invention. Rather, we claim as our invention all such embodiments as may come within the scope and spirit of the following claims and equivalents thereto."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["For a more complete understanding of the present invention and advantages thereof, reference is now made to the following description taken in conjunction with the accompanying drawings in which like reference numbers indicate like features and wherein:",{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 6"}]},"DETDESC":[{},{}]}
