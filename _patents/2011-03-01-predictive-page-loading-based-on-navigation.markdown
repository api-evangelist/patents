---
title: Predictive page loading based on navigation
abstract: Disclosed are various embodiments for predictive network page loading. Content corresponding to a network request is obtained. A next network page associated with the obtained page content is predicted. If the prediction is confident relative to a predetermined confidence threshold, then a first network page is generated. The first network page includes the page content corresponding to the network request and a portion of content for the predicted network page. The generated first network page is provided to a client. A request for another network page is received. If the another network page in the request corresponds to the predicted next network page, a second network page is generated. The second network page includes the remainder of the content for the predicted page content.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09299030&OS=09299030&RS=09299030
owner: Amazon Technologies, Inc.
number: 09299030
owner_city: Seattle
owner_country: US
publication_date: 20110301
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","DETAILED DESCRIPTION"],"p":["Online shoppers interact with product search engines to find products of interest and obtain information about those products. The product search engine returns summary information for products that most closely match a user's search query. When the number of such products is relatively large, the search results may be divided into multiple pages, and the user navigates from one page to the next to view all the products. The entire web site is also divided into multiple pages, and the user navigates from one network page to another by performing searches, clicking links, and interacting with other website and browser controls.","The various embodiments described herein relate to transitioning between pages of search results or other website content within a series of multiple pages. Using data describing past user behavior in transitioning from one page to another, a prediction is made of the next page in the series that is likely to be viewed by a user. The first portion of the content on this predicted next page is downloaded to the browser before the user selects the next page, and rendered in a hidden portion of the browser window. When the user does view the predicted page, the pre-fetched content is made visible and the browser downloads the remainder of the page.","With reference to , shown is a networked environment  according to various embodiments. The networked environment  includes one or more computing devices  in data communication with one or more client devices  by way of a network . The network  includes, for example, the Internet, intranets, extranets, wide area networks (WANs), local area networks (LANs), wired networks, wireless networks, or other suitable networks, etc., or any combination of two or more such networks.","The computing device  may comprise, for example, a server computer or any other system providing computing capability. Alternatively, a plurality of computing devices  may be employed that are arranged, for example, in one or more server banks or computer banks or other arrangements. A plurality of computing devices  together may comprise, for example, a cloud computing resource, a grid computing resource, and\/or any other distributed computing arrangement. Such computing devices  may be located in a single installation or may be distributed among many different geographical locations. For purposes of convenience, the computing device  is referred to herein in the singular. Even though the computing device  is referred to in the singular, it is understood that a plurality of computing devices  may be employed in various arrangements.","Various applications and\/or other functionality may be executed in the computing device  according to various embodiments. Also, various data is stored in a data store  that is accessible to the computing device . The data store  may be representative of a plurality of data stores as can be appreciated. The data stored in the data store , for example, is associated with the operation of the various applications and\/or functional entities described below.","The components executed on the computing device  include, for example, a network page generation application  and a search engine . In some embodiments, the computing device  also includes an electronic commerce application  The components executed on the computing device  may also include other applications, services, processes, systems, engines, or functionality not discussed in detail herein. These components may communicate with each other using various mechanisms, including but not limited to any type of middleware framework. Though shown as logically separate components, the functionality of the network page generation application , the navigation-based prediction engine , and the search engine  can be combined and\/or distributed in various ways, as can be appreciated.","The data stored in the data store  includes, for example, network page data , rendering code , a catalog  of items , probability of selection data , and potentially other data. As used herein, the term \u201citem\u201d  may refer to a product, good, service, software download, multimedia download, social networking profile, or other item  that may be offered for sale, purchase, rental, lease, download, and\/or any other form of consumption, as may be appreciated. Associated with items  and stored in catalog  are data such as titles, descriptions, keywords, metadata, weights, customer reviews, multimedia, and other data relating to the items .","The optional electronic commerce application , if present, is executed in order to facilitate the online viewing and\/or purchase of items and products over the network . The electronic commerce application  also performs various backend functions associated with the online presence of a merchant in order to facilitate the online purchase of items, as should be appreciated. In embodiments which include the electronic commerce application , the catalog of items comprises a product catalog of items offered for sale, so that data associated with items  comprises product data.","The search engine  is executed to find items  in the catalog  using a search query. To provide content in response to user queries, content associated with item(s) retrieved by a query may be retrieved from the catalog data and encoded for display in a client device  by the network page generation application .","The network page generation application  is thus executed to generate network pages  that describe items. To this end, the network page generation application  uses network page data , which may include any type of data related to the generation of network pages . Such data may include, for example, templates, executable code, interpreted code, hypertext markup language (HTML), extensible markup language (XML), images, video, text, graphics, and any other type of data that may be used in network pages .","The network page generation application  may include a network page server and\/or other components. The network page server may comprise a commercially available hypertext transfer protocol (HTTP) server such as, for example, Apache\u00ae HTTP Server, Microsoft\u00ae Internet Information Services (IIS), and other servers.","Some network pages  generated by the network page generation application  may include references to a series of pages. For example, when a search query produces a list of results that includes a large number of items, the search results may be broken up into a series of pages, each referencing one or more of the other pages. When a generated network page  includes references to a series of pages, the network page generation application  may also add information about a predicted page within the series to the generated network page . Thus, the network page  may include partial predicted page data  and rendering code  as well as the requested page data . The combination of the partial predicted page data  and the rendering code  stored on the same network page  as the requested page data  allows the client device  to pre-load and to render more quickly a portion of a predicted network page which the user is deemed likely to visit, as will be described below. In some embodiments, the partial predicted page data  corresponds to the portion of the predicted network page  that is first seen by the user, a region sometimes referred to as \u201cabove the fold.\u201d","The network page generation application  may be configured to generate the rendering code  for a specific network page  and\/or client device  based on stored rendering code  in the data store . The specific rendering code  and the stored rendering code  may include, for example, Javascript, dynamic HTML (DHTML), Ajax, and any other type of code that may be executed in a client device  from within a network page . The specific rendering code  and the stored rendering code  may also include asynchronous exchange of data with the network page generation application , the navigation-based prediction engine , the search engine , or other applications using Ajax, simple object access protocol (SOAP), remote procedure call (RPC), and\/or other technologies.","As mentioned above, the network page generation application  may improve rendering by including partial predicted page data  along with the requested page data . A navigation-based prediction engine  is used to select the predicted page. The navigation-based prediction engine  predicts which network page a user is most likely to access next by using probability of selection data  stored in the data store . The probability of selection data  indicates the most likely object or link that will be clicked on a specific network page. More generally, the probability of selection data  indicates the most likely customer action taken with respect to a specific network page. The page probability of selection data  may be derived, for example, from historical user data collected by a search profiling service or another application based on previous search queries, page view data, and\/or other data. The probability of selection data  may be indexed for a particular user, or may be aggregated across users.","The probability of selection data  thus includes information that describes user behavior in navigating from one network page to another within a network site such as a web site. One example of navigation is moving between pages in a series of pages, and thus the page transition probability data  may include various probabilities for a user viewing one page in a multi-page series after viewing other page(s) in the series. For example, the probability of selection data  may include the probability of viewing the second page of a search results list after viewing the first page of the list, the probability of viewing the second and third pages after viewing the first page, the probability of viewing the third page after viewing the first page, and other such probabilities. Other examples of probability of selection data  include the probability that a user will select the very first item in a search result; and that a user will select a particular category choice in a navigation pane. The probability of selection data  may contain a non-zero probability for more than one prediction. For example, there may be a 80% probability that the user is likely to view the second page after the first, and a 40% probability that the user is likely to view the third page after the first. The navigation-based prediction engine  may select the page with the highest probability as the predicted page.","The navigation-based prediction engine  may use a confidence threshold in making a prediction. In such embodiments, if the probability associated with the predicted page does not exceed the threshold, the network page generation application  does not include partial predicted page data  when generating the page. Otherwise, the prediction is considered to be confident enough for the network page generation application  to include partial predicted page data  as well as the requested page data . It may be useful to take confidence into account because pre-loading the next page incurs some amount of resources, and incurring that cost may not be a wise trade-off if the probability of a correct prediction is low.","Having discussed the computing device , the client device  will now be considered. The client device  is representative of a plurality of client devices that may be coupled to the network . The client device  may comprise, for example, a processor-based system such as a computer system. Such a computer system may be embodied in the form of a desktop computer, a laptop computer, a personal digital assistant, a cellular telephone, a set-top box, a music player, a video player, a media player, a web pad, a tablet computer system, a game console, an electronic book reader, or other devices with like capability.","The client device  may be configured to execute various applications such as a browser  and other applications. The browser  may be executed in a client device , for example, to access and render network pages  or other network content served up by the network page generation application , thereby generating a rendered network page. The client device  may be configured to execute applications beyond the browser  such as, for example, email applications, instant message applications, and\/or other applications.","Turning to , a general description of the operation of the various components of the networked environment  is provided. To begin, at event  a user at a client device  interacts with the browser  to initiate a search of the catalog . The search may be, for example, based on keywords. As a result of the user interaction, at event  the browser  sends a network request to the computing device  over the network  (). This network request may take the form of a search query, but may also include other types of requests, such as a request for a network resource such as a network page. Examples of such requested network pages include a category page and a product detail page.","At block , the computing device  obtains content matching the network request and generates a network page  which includes this page content. At block , the computing device  sends the network page  to the client device  over the network . As described above, rendering code  and partial predicted page data  may be included on the page along with the requested page data .","At block , the network page  is processed and rendered by the browser . During this processing, the rendering code  on the network page  executes on the client device  to render the requested page data  in the visible portion of the browser  while rendering the partial predicted page data  in a hidden portion of the browser .","At event , the user takes an action which results in a request to view the predicted (and partially pre-fetched) network page , for example, requesting the second page of search results. In response, at block  the rendering code  on the network page  retrieved earlier at block  executes to make the hidden partial predicted page data  visible in the browser .","At block , the rendering code  requests the remaining portion of the predicted network page  from the network page generation application , and at block , the network page generation application provides the remaining portion. While block  (partial render) is shown before block  (download remainder), the order can also be reversed, or the two actions can run substantially concurrently.","At block , the remainder of the predicted network page  has finished downloading and the rendering code  renders an updated view of the predicted network page . In some embodiments, the updated view makes the entire new network page  visible. In other embodiments, the updated view includes an element such as a viewport, scroll bar, etc., which allows the user to take action to make the remainder visible. As described above, the user does not see the partial page content until the user action views the predicted network page . The browser embodiment described in connection with  accomplished this by rendering the partial predicted page content in a hidden portion of the browser window. Other browser embodiments accomplish this by locally storing the partial predicted page content when it is returned from the computing device , but delaying the display of the partial predicted page content until a user action causes the predicted network page  to be accessed.","In this manner, the user experience is enhanced by making a prediction about which page(s) the user will request next and pre-fetching those page(s), since the new pages can be rendered when the user requests the pages. Without this prediction, the download of the next network page  would be delayed until the user took action to specifically request the next network page  (e.g., by selecting \u201cNext Page\u201d). In some embodiments, this prediction mechanism is used repeatedly. To this end, when returning the remainder of a previously predicted page to the browser , the page generation application  may also include partial data for another predicted page. The navigation-based prediction engine  is used to obtain this subsequent prediction, using the prediction techniques described herein. The process of block  is thus analogous to the process of block . The page generation application  may decide on a page-by-page basis whether to include page data for a subsequent prediction along with the remainder data for the previous prediction. In some embodiments, the browser request at block  does not specifically encode a request for the remainder, but may instead generically encode a request for another network page. In this case, the network page generation application  uses stored context to determine that the requested page should include another prediction.","As described above, the user does not see the predicted page content until the user takes action to actually access the predicted page, i.e., until the prediction is a hit rather than a miss. The browser embodiment described in connection with  accomplished this by rendering the partial predicted page content in a hidden portion of the browser window. Other browser embodiments accomplish this by locally storing the partial predicted page content when it is returned from the computing device , but delaying the display of the partial predicted page content until a user action causes predicted page to be accessed. The operation of the rendering code  will now be described in the context of examples of network pages  that are rendered in a browser .",{"@attributes":{"id":"p-0036","num":"0035"},"figref":["FIGS. 3A-D","FIGS. 3A-D"],"b":["136","136","136","136","136","154","106","100","136","115"],"i":["a","b","c","d"]},"Referring to , the network page includes a search query component  and a list of search results . The network page also includes a pagination component . The pagination component  includes various options which allow the user to move from one page of search results to another, viewing a partial list each time. The pagination component  includes a previous page option , a next page option , and one or more specific page options . The search results list  includes items -. The pagination component  also includes a current page indicator  which indicates that this is the second page.","The rendered network page further includes the partial predicted page data , which represents a portion of the third page of the search results. As described earlier, this page is selected based on a prediction of which page the user is likely to view next. In other words, the retrieval of data for the predicted page occurs before, and is independent of, the user action which actually requests the page. Since the user has not yet requested the third page, this predicted data is stored in a hidden portion of the network page , and is not visible in the browser . In contrast, the search query component , the search results list , and the pagination component  appear in a visible portion of the network page , which is visible in the browser .","Moving on to , shown is the network page , which is rendered in response to a user interacting with the pagination component  to request the next page in the series of search results, the third page. In this example, the user has selected the third page, which could occur by selecting the specific page option  for the third page, or by selecting the next page option  since the user was viewing the second page in . The rendering code  uses the partial predicted page data  to display the first three items in the search results list in the visible portion . Since these three items were obtained before the user selected the third page and hidden, they are made visible without a delay while the remainder of the third page is retrieved as described above in connection with . While three items were pre-loaded in this particular example, the number of pre-loaded items may vary, as should be appreciated.","Turning now to , shown is another network page which is rendered by the rendering code  when the download of the predicted page is complete. All five items of the third page are now visible in the search results list ","In the embodiment described above, rendering of the partial predicted page data  in the visible portion  is triggered by the user selecting the predicted page. In another embodiment (not shown), viewability of the visible portion is controlled through a scroll bar or viewport control, and rendering of the partial predicted page data  is instead triggered by the user scrolling down to reveal the previously hidden portion of the viewport.","Having described the overall process of using navigation-based prediction to generate a network page  which includes additional pre-fetched results, the operation of the server side and client side components will now be described in more detail, starting with the server side. Turning now to , shown is a flowchart that provides one example of the operation of a portion of the network page generation application  () according to various embodiments. It is understood that the flowchart of  provides merely an example of the many different types of functional arrangements that may be employed to implement the operation of the portion of the network page generation application  as described herein. As an alternative, the flowchart of  may be viewed as depicting an example of steps of a method implemented in the computing device  () according to one or more embodiments.","Beginning at box , the network page generation application  receives a network request from a browser . Next, at box  the network page generation application  obtains page content matching the request. If the network request is a search query, this may be accomplished by passing the query on to the search query component . This page content may be identified by a handle, and this handle may be used later to further refine the search results. For example, the network page generation application  may pass the handle to the search query component  along with a request to select specific rows (items) of the result set in order to obtain other pages in the search results.","At box , the network page generation application  obtains a prediction for requested content, i.e., a prediction of which network page the user will navigate to next. At box , the network page generation application  determines whether the prediction is confident enough to be useful, by comparing it to a threshold. If at box  it is determined that the prediction is not confident enough to be used, then at box  the network page generation application  generates a network page  containing the initial page of the requested content, as requested page data . However, the generated network page  does not include partial predicted page data  or rendering code  in this instance.","If at box  it is determined that the prediction is confident enough to be used, then at box  the network page generation application  generates a network page  containing the requested content, as requested page data . The network page generation application  also adds partial predicted page data  to the page, as well as rendering code  which causes the client render the partial predicted page data  as described above.","Having generated the network page  at either block  or box , processing continues at block , where the generated network page  is provided to the browser . At block , the network page generation application  receives a request from the browser  for another network page, as a result of the user interacting with objects or links on the displayed network page .","At block , the network page generation application  uses state stored in blocks  through  to determine whether the requested page network is the predicted network page. If the network page requested in box  is not the predicted network page, then processing continues at block . At block , where a network page  is generated to include the requested network page. However, since the request network page is not the predicted network page, partial search results are not included or pre-fetched. The generated network page  is provided to the browser  at block , and the process of  is then complete. In some embodiments, block  may involve retrieving the requested page of search results from the search engine , while in other embodiments the request is fulfilled from a local cache.","If it is determined at block  that the network page requested at block  is the predicted network page, then processing continues at block . At block  the network page generation application  generates a network page that includes the remainder of the previously requested page content, excluding the first portion which was already provided as pre-fetched results. As noted above in connection with , this prediction mechanism may be used not only for an initially requested page, but repeatedly, in which case the page generation application  may also include partial data for another predicted page when returning the remainder of a previously predicted page. In some embodiments, the network page generation application  may request the next page from the search engine . In some embodiments, the network page generation application  caches internally the search results obtained at block , and uses the locally stored search results to fulfill the request. The generated network page  is provided to the browser  at block , and the process of  is then complete.","Having described the server side of the navigation-based prediction to generate pre-fetched results, the client side of the process will now be described in more detail. With reference now to , shown is a flowchart that provides one example of the operation of a portion of the browser  () according to various embodiments. It is understood that the flowchart of  provides merely an example of the many different types of functional arrangements that may be employed to implement the operation of the portion of the browser  as described herein. As an alternative, the flowchart of  may be viewed as depicting an example of steps of a method implemented in the browser  () according to one or more embodiments.","Beginning at box , a user-initiated network request is received in the browser  and the browser  provides the network request to a computing device . Next, at box  the browser  receives a network page  representing the requested page content. At box  the rendering code  parses the network page  to locate the initial portion of the requested content, then renders the initial portion in a visible portion of the browser . Next, at box  the rendering code  parses the same network page  to locate the partial results for the predicted network page, then renders the partial results in a hidden portion of the browser .","At box , the browser  receives a user request to view another network page, as a result of the user interacting with objects or links on the displayed network page . In this scenario, the request at box  corresponds to the predicted page of box . Operation when the user selects a network page other than the one predicted was described earlier in connection with , although it is not shown in .","At box , the rendering code  parses the current network page  to determine whether partial predicted page content is present and usable. For example, predicted page content may not have been provided by the network page generation application , or predicted content may have been provided but with an indication that the prediction is not usable (e.g., is stale or does not correspond to the selection made by the user).","If the rendering code determines at box  that the partial predicted page content is not present or is not usable, then handling of this particular user interaction is complete. The process of  then starts again to handle another network request from the user.","If the rendering code determines at box  that the partial predicted page content is present and is usable, then at box  the rendering code  re-renders the previously received partial page content, this time in the visible portion of the browser . At box , the browser  requests and receives the user-requested network page . At box , the rendering code  parses the newly received network page  to locate the remainder of the page content for the predicted page, then renders the remainder of the page content in the visible portion of the browser . At this point, all the content for the newly requested network page is visible, both the pre-loaded partial results and the just received remainder. The process of  is then complete.","As described above, the user does not see the partial page content until the user action views the predicted network page . The browser embodiment described in connection with  accomplished this by rendering the partial predicted page content in a hidden portion of the browser window. Other browser embodiments accomplish this by locally storing the partial predicted page content when it is returned from the computing device , but delaying the display of the partial predicted page content until a user action causes the predicted network page  to be accessed.","Moving on to , shown is a schematic block diagram of the computing device  according to an embodiment of the present disclosure. The computing device  includes at least one processor circuit, for example, having a processor  and a memory , both of which are coupled to a local interface . To this end, the computing device  may comprise, for example, at least one server computer or like device. The local interface  may comprise, for example, a data bus with an accompanying address\/control bus or other bus structure as can be appreciated.","Stored in the memory  are both data and several components that are executable by the processor . In particular, stored in the memory  and executable by the processor  are the network page generation application , the search engine , the electronic commerce application , the navigation-based prediction engine , and potentially other applications. Also stored in the memory  may be a data store  and other data. In addition, an operating system may be stored in the memory  and executable by the processor .","Turning now to , shown is a schematic block diagram of the computing device  according to an embodiment of the present disclosure. The computing device  includes at least one processor circuit, for example, having a processor  and a memory , both of which are coupled to a local interface . To this end, the computing device  may comprise, for example, at least one server computer or like device. The local interface  may comprise, for example, a data bus with an accompanying address\/control bus or other bus structure as can be appreciated.","Stored in the memory  are both data and several components that are executable by the processor . In particular, stored in the memory  and executable by the processor  are the browser , the rendering code , and potentially other applications. In addition, an operating system may be stored in the memory  and executable by the processor .","It is understood that there may be other applications that are stored in the memory ,  and are executable by the processor , , as can be appreciated. Where any component discussed herein is implemented in the form of software, any one of a number of programming languages may be employed such as, for example, C, C++, C#, Objective C, Java, Javascript, Perl, PHP, Visual Basic, Python, Ruby, Delphi, Flash, or other programming languages.","A number of software components are stored in the memory ,  and are executable by the processor , . In this respect, the term \u201cexecutable\u201d means a program file that is in a form that can ultimately be run by the processor , . Examples of executable programs may be, for example, a compiled program that can be translated into machine code in a format that can be loaded into a random access portion of the memory ,  and run by the processor , , source code that may be expressed in proper format such as object code that is capable of being loaded into a random access portion of the memory ,  and executed by the processor , , or source code that may be interpreted by another executable program to generate instructions in a random access portion of the memory ,  to be executed by the processor , , etc. An executable program may be stored in any portion or component of the memory ,  including, for example, random access memory (RAM), read-only memory (ROM), hard drive, solid-state drive, USB flash drive, memory card, optical disc such as compact disc (CD) or digital versatile disc (DVD), floppy disk, magnetic tape, or other memory components.","The memory ,  is defined herein as including both volatile and nonvolatile memory and data storage components. Volatile components are those that do not retain data values upon loss of power. Nonvolatile components are those that retain data upon a loss of power. Thus, the memory ,  may comprise, for example, random access memory (RAM), read-only memory (ROM), hard disk drives, solid-state drives, USB flash drives, memory cards accessed via a memory card reader, floppy disks accessed via an associated floppy disk drive, optical discs accessed via an optical disc drive, magnetic tapes accessed via an appropriate tape drive, and\/or other memory components, or a combination of any two or more of these memory components. In addition, the RAM may comprise, for example, static random access memory (SRAM), dynamic random access memory (DRAM), or magnetic random access memory (MRAM) and other such devices. The ROM may comprise, for example, a programmable read-only memory (PROM), an erasable programmable read-only memory (EPROM), an electrically erasable programmable read-only memory (EEPROM), or other like memory device.","Also, the processor ,  may represent multiple processors and the memory ,  may represent multiple memories that operate in parallel processing circuits, respectively. In such a case, the local interface ,  may be an appropriate network  () that facilitates communication between any two of the multiple processors , , between any processor ,  and any of the memories , , or between any two of the memories , , etc. The local interface ,  may comprise additional systems designed to coordinate this communication, including, for example, performing load balancing. The processor ,  may be of electrical or of some other available construction.","Although the network page generation application , the search engine , the electronic commerce application , the navigation-based prediction engine , the browser , the rendering code , and other various systems described herein may be embodied in software or code executed by general purpose hardware as discussed above, as an alternative the same may also be embodied in dedicated hardware or a combination of software\/general purpose hardware and dedicated hardware. If embodied in dedicated hardware, each can be implemented as a circuit or state machine that employs any one of or a combination of a number of technologies. These technologies may include, but are not limited to, discrete logic circuits having logic gates for implementing various logic functions upon an application of one or more data signals, application specific integrated circuits having appropriate logic gates, or other components, etc. Such technologies are generally well known by those skilled in the art and, consequently, are not described in detail herein.","The flowcharts of  show the functionality and operation of an implementation of portions of the network page generation application  and the browser . If embodied in software, each block may represent a module, segment, or portion of code that comprises program instructions to implement the specified logical function(s). The program instructions may be embodied in the form of source code that comprises human-readable statements written in a programming language or machine code that comprises numerical instructions recognizable by a suitable execution system such as a processor ,  in a computer system or other system. The machine code may be converted from the source code, etc. If embodied in hardware, each block may represent a circuit or a number of interconnected circuits to implement the specified logical function(s).","Although the flowcharts of  show a specific order of execution, it is understood that the order of execution may differ from that which is depicted. For example, the order of execution of two or more blocks may be scrambled relative to the order shown. Also, two or more blocks shown in succession in flowcharts of  may be executed concurrently or with partial concurrence. Further, in some embodiments, one or more of the blocks shown in  may be skipped or omitted. In addition, any number of counters, state variables, warning semaphores, or messages might be added to the logical flow described herein, for purposes of enhanced utility, accounting, performance measurement, or providing troubleshooting aids, etc. It is understood that all such variations are within the scope of the present disclosure.","Also, any logic or application described herein, including the network page generation application , the search engine , the electronic commerce application , the navigation-based prediction engine , the browser , and rendering code , that comprises software or code can be embodied in any non-transitory computer-readable medium for use by or in connection with an instruction execution system such as, for example, a processor ,  in a computer system or other system. In this sense, the logic may comprise, for example, statements including instructions and declarations that can be fetched from the computer-readable medium and executed by the instruction execution system. In the context of the present disclosure, a \u201ccomputer-readable medium\u201d can be any medium that can contain, store, or maintain the logic or application described herein for use by or in connection with the instruction execution system. The computer-readable medium can comprise any one of many physical media such as, for example, magnetic, optical, or semiconductor media. More specific examples of a suitable computer-readable medium would include, but are not limited to, magnetic tapes, magnetic floppy diskettes, magnetic hard drives, memory cards, solid-state drives, USB flash drives, or optical discs. Also, the computer-readable medium may be a random access memory (RAM) including, for example, static random access memory (SRAM) and dynamic random access memory (DRAM), or magnetic random access memory (MRAM). In addition, the computer-readable medium may be a read-only memory (ROM), a programmable read-only memory (PROM), an erasable programmable read-only memory (EPROM), an electrically erasable programmable read-only memory (EEPROM), or other type of memory device.","It should be emphasized that the above-described embodiments of the present disclosure are merely possible examples of implementations set forth for a clear understanding of the principles of the disclosure. Many variations and modifications may be made to the above-described embodiment(s) without departing substantially from the spirit and principles of the disclosure. All such modifications and variations are intended to be included herein within the scope of this disclosure and protected by the following claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["Many aspects of the present disclosure can be better understood with reference to the following drawings. The components in the drawings are not necessarily to scale, emphasis instead being placed upon clearly illustrating the principles of the disclosure. Moreover, in the drawings, like reference numerals designate corresponding parts throughout the several views.",{"@attributes":{"id":"p-0004","num":"0003"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0005","num":"0004"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0006","num":"0005"},"figref":["FIGS. 3A-C","FIG. 1"]},{"@attributes":{"id":"p-0007","num":"0006"},"figref":["FIG. 4","FIG. 1"]},{"@attributes":{"id":"p-0008","num":"0007"},"figref":["FIG. 5","FIG. 1"]},{"@attributes":{"id":"p-0009","num":"0008"},"figref":["FIG. 6","FIG. 1"]},{"@attributes":{"id":"p-0010","num":"0009"},"figref":["FIG. 7","FIG. 1"]}]},"DETDESC":[{},{}]}
