---
title: License management system and method for commuter licensing
abstract: A system for managing licenses for protected software on a communication network is disclosed. The system includes at least one client computer that is capable of being coupled to or decoupled from the communication network. While coupled to the communication network, a user of the client computer may request a commuter authorization to use the protected software. At least one license server is also coupled to the communication network. Each license server is programmed for managing a distribution of allocations to use the protected software. In addition, at least one of the license servers is programmed for granting a commuter authorization in response to a request for a commuter authorization from a client computer if there is an available authorization. After a commuter authorization is received by a client computer, the client computer stores a commuter authorization lifetime representing a time period for which the commuter authorization is valid. The client computer may then use the protected software while coupled to or decoupled from the communication network until the commuter authorization lifetime expires.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06968384&OS=06968384&RS=06968384
owner: Safenet, Inc.
number: 06968384
owner_city: Belcamp
owner_country: US
publication_date: 20000825
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","BACKGROUND OF THE INVENTION","SUMMARY OF THE DISCLOSURE","DETAILED DESCRIPTION OF PREFERRED EMBODIMENTS"],"p":["Embodiments of the present invention claim priority from Provisional Application Ser. No. 60\/152,785, filed Sep. 7, 1999, and are related to U.S. utility patent applications entitled \u201cLicense Management System And Method With Multiple License Servers\u201d, Ser. No. 09\/648,697, filed Aug. 25, 2000; \u201cLicense Management System And Method With License Balancing\u201d, Ser. No. 09\/648,720, filed Aug. 25, 2000; and \u201cSystem And Method For Selecting A Server In A Multiple Server License Management System\u201d, Ser. No. 09\/648,853, filed Aug. 25, 2000. The contents of each of these applications are incorporated by reference herein.","1. Field of the Invention","The present invention relates, generally, to license management systems and processes for managing licenses on a computer network and, in preferred embodiments, to such systems and processes involving a pool of license servers for managing software licenses among one or more users on the network, and for granting authorizations to use protected software programs to client computers that may become temporarily disconnected from the network.","2. Description of Related Art","The increasing popularity of computer usage in homes and businesses, as well as in governmental, research and education institutions, has brought about a world-wide demand for greater software variety and sophistication. Indeed, the software development industry in most industrialized countries has shown substantial growth in recent years and is expected to show continued growth through the next decade.","However, as software sophistication increases, development costs associated with such software also tend to increase. Modern software programs can require months or even years of development, often involving expensive resources and teams of highly skilled engineers and programmers, before a product may be readied for sale or license. Thus, software development companies are often required to make large investments early in the development of their products, in the hope that the products will provide a volume of sales or license revenues sufficient to cover their development investments and generate profits.","Illegal software usage and piracy have become a significant problem to software development companies. Because of the nature of computer software, illegal usage and illegal copying of proprietary software programs can be difficult to detect or deter. The increasing usage of computer networks has added to the problem. Computer networks can allow multiple users to access and copy software stored by a common network program server or copy and pass software between each other, over the network. A legitimately purchased or licensed copy of a software program available on a network could result in many illegitimate usages or copies by unauthorized or unlicensed users having access to the network.","Various forms of encryption techniques have been developed to inhibit usage of encrypted software by unauthorized users that do not possess a decryption program or key. However, such techniques typically require each authorized users to obtain or be passed a decryption program or key, in advance of usage of the encrypted program. Accordingly, such techniques can be prohibitively inconvenient for some computer and network environments, where it is difficult or impractical to supply each authorized user with a decryption program or key or to decrypt a program for each user or usage.","Other software protection techniques have required legitimate or authorized users to have a special hardware device or circuit installed in or plugged into their computer, prior to usage of the protected software. See, e.g., U.S. Pat. No. 4,446,519 to Thomas. Again, such techniques can be prohibitively inconvenient for some computer and network environments. For example, if the network environment is such that the authorized user must use multiple computers on the network, then each computer must be provided with the special hardware device. Moreover, if the environment is such that computers having the special hardware device are not located in secure facilities, then unauthorized users may be able to access the protected software by using the non-secure computer in which the special hardware device is installed.","Accordingly, more sophisticated license management software has been developed for managing software licenses for computer networks, which do not require encryption of the protected software or special hardware devices in each authorized user's computer. For example, the assignee of the present invention, Rainbow Technologies, Inc., has marketed versions of a license management system under the trademark, SENTINELLM\u2122. The SENTINELLM\u2122 systems operate with a license server connected to a network of users. The license server stores and manages software licenses for the network users, in accordance with a license management program stored on the server. Each copy of a protected software program on the network is accompanied by a program code corresponding to a shell (also known as \u201cwrapper\u201d) or library of Application Program Interface (API) functions, which communicates with the license management program on the server. When a user starts to run the protected software program, the shell code or library of API functions provided with the program communicates a request to use a license to the license server, over the network. The server, under the control of the license management software, responds to the request to determine whether it is storing an available license for the protected software program. If so, the server communicates an authorization message to the user and decrements a count of available licenses stored by the server. If not, the server communicates another message to the user, indicating that no licenses are available. In this manner, licenses are always stored and managed on a network license server. Each network user may have a copy of a protected software program, but must communicate with the license server for authorization to use the protected program.","License management systems which employ a license server, as discussed above, provide significant advantages with respect to the freedom to readily add, delete or change authorized users on the network, and the ability to readily control and alter licensing schemes (for example, to add or delete licenses or change conditions for licenses) by modifying only the license server files or programs. However, if all licenses are stored and managed in a single license server, failure of that server can result in a failure of the entire license management system. Accordingly, prior versions of the SENTINELLM\u2122 systems include multiple license server capabilities, wherein two or more license servers are provided on the network, each having a pre-loaded license file and a license management program. One of the servers may be designated as a primary license server, while the others are designated as backup servers. If the primary server cannot be reached by a user, for example, because the primary server has crashed or otherwise gone down, the user may then communicate with a backup server to obtain an authorization message. The backup server, having a pre-loaded copy of the license file and the license management program, may then take over the license management functions.","Alternatively, in other prior versions of SENTINELLM\u2122 systems, a shell program or library of API functions could be configured to send a general poll to all servers coupled to the communication channel on which the poll is sent. In response to a general poll, any server computer having a license file containing license information corresponding to the protected software program (whether or not the license information indicated that a license is available) would send a reply to the requesting client computer. The shell program or library of API functions associated with the requesting client computer would then respond to the first reply received from a license server having a license file storing license information for the protected software program. If the replying license server contains an available license for the protected software program, the replying license server provides an authorization message to the requesting client computer. If the replying license server does not contain an available license for the protected software program, the replying license server provides a message to the requesting client computer indicating that authorization to run the protected software program has not been granted. Such a system provides a degree of protection against system failure, in the event that one of the license servers crashes or goes down. The down server computer would not respond to the poll, but other server computers having appropriate license information in their license file would respond to the poll, thus, allowing the client computer to continue to seek authorization to run the protected software program, even though one of the servers was down.","While the above SENTINELLM\u2122 systems have operated well in many contexts, each license server operates somewhat independent of other license servers. Accordingly, there is a need in the industry for improvements in connection with management and coordination of multiple license servers (or a pool of license servers) in software license management systems for computer networks.","Therefore, it is an advantage of embodiments of the present invention to provide a license management system and method for more efficiently managing licenses on a network using a pool of multiple license servers.","It is a further advantage of embodiments of the present invention to provide a system and method for managing licenses on a network that allows a client computer to request and receive a commuter authorization from a license server while connected to the network, allowing the client computer to run a protected software program even if the client computer should become disconnected from the network.","It is a further advantage of embodiments of the present invention to provide a system and method for managing licenses on a network that allows a client computer to request and receive a commuter authorization from a license server while disconnected from the network, allowing the client computer to run a protected software program while disconnected from the network.","These and other advantages are accomplished according to a system for managing licenses for protected software on a communication network. The system includes at least one client computer that is capable of being coupled to or decoupled from the communication network. While coupled to the communication network, a user of the client computer may request a commuter authorization to use the protected software. At least one license server is also coupled to the communication network. Each license server is programmed for managing a distribution of allocations to use the protected software. In addition, at least one of the license servers is programmed for granting a commuter authorization in response to a request for a commuter authorization from a client computer if there is an available authorization. After a commuter authorization is received by a client computer, the client computer stores a commuter authorization lifetime representing a time period for which the commuter authorization is valid. The client computer may then use the protected software while coupled to or decoupled from the communication network until the commuter authorization lifetime expires.","These and other objects, features, and advantages of embodiments of the invention will be apparent to those skilled in the art from the following detailed description of embodiments of the invention, when read with the drawings and appended claims.","In the following description of preferred embodiments, reference is made to the accompanying drawings which form a part hereof, and in which is shown by way of illustration specific embodiments in which the invention may be practiced. It is to be understood that other embodiments may be utilized and structural changes may be made without departing from the scope of the preferred embodiments of the present invention.","Preferred embodiments of the invention relate to a system and process involving a pool of license servers for managing licenses to, for example, one or more protected software programs, files or other data structures, among one or more users on the network. Protected software may include, but is not limited to, for example, a software program, such as a word-processing program, a graphics program, a computer game, etc., a proprietary file or other data structure, such as a data-base or other form of data, as well as other software encoded information or instructions, for which the control of user access is desired. For purposes of simplifying the present disclosure, the protected software used in the following examples is one or more proprietary software programs.","According to a preferred embodiment of the present invention, the plurality of license servers are managed in accordance with a server pool scheme, as controlled by a license management program associated with each license server computer and the shell program or library of API functions associated with each copy of the protected software program. In preferred embodiments, the pool of license servers comprises three to 11 servers. However, it should be noted that alternative embodiments of the present invention are not limited to any particular maximum number of license servers. In addition, in further alternative embodiments, multiple pools of license servers can reside on a single network. In further alternative embodiments only a single license server is required for issuing commuter authorizations. However, for purposes of illustration only, embodiments of the present invention will be described herein with reference to a pool of three license servers.","An example hardware environment for an embodiment of the present invention is illustrated, generally, in . With reference to , a computer network  includes a plurality of user or client computers  and three license servers , each coupled for communication over a communication network link, generally referenced at . The plurality of client computers  are identified as \u201cClient 1\u201d, \u201cClient 2\u201d, and \u201cClient N\u201d, and the plurality of license servers  are labeled as \u201cLic. Server A\u201d, \u201cLic. Server B\u201d, and \u201cLic. Server C.\u201d Embodiments may employ any suitable number of client computers  and any suitable number of license servers . Also, while not shown in , the network  may include additional components, including one or more program or file servers, routers and\/or other well known network devices and resources.","Each client computer  preferably includes a suitable processor and associated transient memory, such as a RAM, for running a protected software program. The client computer may be part of a standard personal computer (PC), network terminal, workstation or the like. In one preferred embodiment, each client computer  is coupled to a persistent program storage memory device , which may include, but is not limited to, a hard disc drive, floppy disc drive, tape drive, CD-ROM or the like, having a computer readable medium on which the protected software program is stored. Also stored as part of the protected software program is additional program code, such as code corresponding to a shell or library of API functions as discussed above, for communicating with the server computers which are under control of a license management program, in accordance with communication functions discussed below.","Each license server  preferably includes a suitable processor and associated transient memory, such as an RAM, for running a license management program as described herein. In addition, each license server  is coupled to one or more persistent program storage memory devices , which may include, but is not limited to, a hard disc drive, floppy disc drive, tape drive, CD-ROM or the like, having a computer readable medium on which a license management program  and a redundant license file (RLF)  are stored.","An example embodiment of an RLF  is shown in  as containing license codes  for proprietary software programs A, B, C, etc. Each license code , in one example embodiment, comprises a string of data relating to license policy and the software program to which the license policy applies. In preferred embodiments, license codes  for software produced by more than one vendor may reside within the same RLF  of the same license server , and may be managed with a single process (execution of the license management software) running on a single license server . Thus, any given licenser server  does not need to have multiple license management processes running to manage licenses for multiple protected vendor applications. Instead, only one license management program needs to be running on a given license server , to manage licenses for protected vendor applications managed by that license server.","In the example embodiment of , a license code  comprises a data string defining multiple records or fields R, R, R . . . RN, wherein each record corresponds to an attribute associated with the license policy, the software program to which the license policy applies, or other information. In preferred embodiments, each license code  includes at least one attribute associated with a license policy, the number of allocations for using the protected software program, and at least one other attribute associated with the identity of the protected software program. The number of allocations for using the protected software program is the maximum number of users that can be running the protected software program at any one time, and is also referred to as the ceiling or hard limit. In preferred embodiments, license code  also includes a flag which determines if commuter licensing functionality, described herein, is enabled or disabled for the corresponding protected software program. This flag allows the software developer to make commuter licensing available only to selected customers. Data associated with a license policy preferably includes data representing the expiration date or expiration time of the license, as granted by the licensee (e.g., the protected software program's owner or developer).","For purposes of illustration only, in the example of  only one fictional license code , identified as \u201cApplication v1.0,\u201d is stored in the RLF  of a license server , with a hard limit of 100 total allocations distributable across all license servers  (see reference character ). In preferred embodiments, another attribute of the RLF  is the IP address  for each license server . Another attribute of the RLF  is the distribution of the 100 allocations across all the license servers . This distribution is identified as the initial distribution , and is configurable by the network administrator. In the example of , an initial distribution  of A:39, B:30, C:30, indicates that 39 allocations will initially be assigned to license server A, 30 allocations will initially be assigned to license server B, 30 allocations will initially be assigned to license server C, and one allocation will initially be assigned to the free pool . This initial distribution  also signifies that the pool will comprise three license servers.","In preferred embodiments of the present invention, each RLF  stored in each license server  is an exact copy of every other RLF  of license servers in the pool. Thus, attributes of the license code  such as the expiration date or number of allocations need not be passed between license servers  in response to a request for authorization to used a protected software program from a client computer , because an exact copy of the license code  has already been stored on the hard disk of each license server  prior to the startup of that license server .","Each license server  operates, under the control of its associated license management program , to perform license management functions in association with data contained in the RLF , as described herein. Thus, when a particular license server  is started, the license server  loads the contents of its RLF  into a license table  in RAM or other memory and reads the license table , which identifies that server as a license server . It should be noted that in preferred embodiments, the license table  is never modified. In addition, the contents of the RLF  is loaded into a distribution table  in RAM or other memory, and the initial distribution  is further copied into another record, distinct from the license code , identified as a current distribution . Unlike the license table , the distribution table  changes its current distribution  over time, to keep track of current allocations.","It should be noted that in the example of , only 99 of the 100 allocations have been initially assigned by the network administrator. If the network administrator makes an initial distribution that does not equal the hard limit of allocations (see reference character ), in preferred embodiments of the present invention the extra allocations will be put into a free pool  maintained within the distribution table . Thus, in the example of , one allocation is put into free pool . If, on the other hand, the network administrator makes no initial distribution  of allocations in the RLF , preferred embodiments will divide the allocations evenly over the number of servers in the pool, and any extras will be put in the free pool . For example (but not illustrated in ), if no initial distribution  was assigned by the network administrator, information representing an even distribution of A:33, B:33, and C:33 would be stored in the initial distribution attribute  of the RLF , and when a particular license server  is started, the RLF  would load an even distribution of A:33, B:33, and C:33 into the current distribution attribute  of distribution table , and would load a value of one into the free pool .","In preferred embodiments of the present invention, when the license servers  in the server pool are started up, one of the license servers is designated as a leader server. Selection of a leader server is described in a related U.S. utility application entitled \u201cSystem and Method for Selecting a Server in a Multiple Server License Management System,\u201d Ser. No. 09\/648,853, filed Aug. 25, 2000, the contents of which are incorporated by reference herein. Other license servers  are designated as follower servers. The leader server always maintains a global picture of the current distribution of allocations within every license server  the server pool.","For purposes of illustration only,  illustrates an example of the distribution tables  for a three server pool consisting of license servers A, B, and C. Assume, for this illustration, that all three license servers have been started up, and that license server A has been designated as the leader server, and B and C as the follower servers. Further assume that the hard limit of allocations for the software program Application v1.0 is 100, as indicated by the hard limit record  associated with the license code  for Application v1.0 within each distribution table . In addition, assume that the current distribution of allocations is 39 on leader server A, 30 on follower server B, 30 on follower server C, and one in the free pool, as indicated in the current distribution record  and the free pool  associated with the license code  for Application v1.0 within each distribution table .","Note also that in the embodiment of , associated with each license code  is a record for available allocations for each server in the pool (see reference character ), a record for available allocations for all servers in the pool (see reference character ), and a record for allocations currently in use for each server in the pool (see reference character ). The allocations in these records are values which are incremented or decremented as authorizations are issued, returned, or borrowed. It should be understood that the records identified by reference characters , , , , and  in  are associated with a particular license code , but are distinct from it.","As indicated in , in preferred embodiments of the present invention, the structure of the distribution tables  will be the same for both the leader server A and follower servers B and C, but only the distribution table  for leader server A (the leader distribution table) will reflect the allocation status of the other license servers  in the server pool. In contrast, the distribution tables  for follower servers B and C (the follower distribution tables) will only reflect the allocation status of that particular follower server, as indicated by the X (don't care) designations in portions of the follower distribution tables.","When a user at a client computer  desires to run Application v1.0 from a follower server, such as follower server B, for example, the client computer  may first load some or all of the protected program into the transient memory of the client computer , along with the program code corresponding to a shell or library of API functions. Alternatively, the protected program may remain in persistent memory  until and unless the server computer communicates an authorization signal to the shell program or library of API functions. Selection of a follower server from which to request authorization is described in a related U.S. utility application entitled \u201cSystem and Method for Selecting a Server in a Multiple Server License Management System,\u201d Ser. No. 09\/648,853, filed Aug. 25, 2000, the contents of which are incorporated by reference herein. Alternatively, the protected program may remain in persistent memory  until and unless the server computer communicates an authorization signal to the shell program or library of API functions. Loading of the shell program or library of API functions is preferably transparent to the user on the client computer  and, preferably, occurs in response to the user inputting a command to open the protected software (for example, by clicking a mouse button on an icon associated with the protected software).","As part of the function of the shell or library of API functions, a request is then sent from the client computer  to follower server B for one or more authorizations to run the protected program. For purposes of this example, assume that client computer  requested only one authorization. Follower server B, under the control of the license management software, responds to the request by looking at its distribution table  to determine whether it has available allocations for Application v1.0. In the example of , follower server B has 30 allocations available, as represented by the available allocations record for each server in the pool (reference character ) in the distribution table  for follower server B. Because it has available allocations, follower server B communicates an authorization message to the client computer . As illustrated in , once the authorization message is sent, the distribution table  is updated so that the available allocations record  for follower server B decreases to 29, and the allocations in use record  for follower server B increases to one. If an insufficient number of allocations are available to completely satisfy the request, no authorizations are sent, and follower server B communicates another message back to the client computer , denying the request. In preferred embodiments, follower server B will then issue a borrow request in an attempt to borrow available allocations from another source. Borrowing is described in a related U.S. utility application entitled \u201cLicense Management System and Method with License Balancing,\u201d Ser. No. 09\/648,720, filed Aug. 25, 2000, the contents of which are incorporated by reference herein.","As noted above, in preferred embodiments of the present invention the leader server always has a global picture of the distribution of allocations in the whole server pool. Thus, in the present example any changes to the distribution table of follower server B must be communicated to leader server A. In preferred embodiments, follower server B can determine the IP address for the leader server A from a leader priority list , which is configurable by the network administrator. It should be noted that in preferred embodiments, the IP address of all license servers  in the server pool are stored in the leader priority list , a data structure separate from the license codes , to facilitate faster lookup. However, in alternative embodiments the IP addresses may be stored in a record associated with the license codes . In any case, after determining the IP address of the leader server A, follower server B communicates the fact that its available allocations count has dropped to 29 to leader server A, and the distribution table of leader server A will be updated accordingly. Thus, as illustrated in , the distribution table  of leader server A reflects that the available allocations record  for follower server B has dropped to 29, the allocations in use record  for follower server B has increased to 1, and that the record for allocations available for all servers in the pool (see reference character ) has dropped to 99.","The preceding discussion described a client computer  requesting and receiving authorization for running a protected software program from a networked license server . In the operating environment described above, the client computer  must remain connected to the network to continue to run the protected software program. For purposes of distinguishing the above-described system from embodiments of the present invention, the authorizations described in the preceding discussion will be referred to hereinafter as \u201cnetwork\u201d authorizations.","Commuter licensing will be described next according to embodiments of the present invention. Commuter licensing departs from the concept of requesting and granting a network authorization between license server  and client computer , and instead is concerned with requesting and granting a \u201ccommuter\u201d authorization between license server  and client computer . While a network authorization is managed by the issuing license server  and the server pool, commuter authorizations, once granted to a particular client computer , are managed both by the client computer  and also by the issuing license server . It should be noted, however, that although embodiments of the present invention described herein include a pool or license servers , in alternative embodiments only a single license server  is required for issuing commuter authorizations.","One practical application of commuter licensing according to embodiments of the present invention is for networks employing laptop or notebook client computers  that can readily be disconnected from the network. For example, prior to leaving for a business trip or working at home, a user can request a commuter authorization for one or more protected applications from a client computer  connected to the network. Once a commuter authorization is granted, the client computer  can be disconnected from the network, and can independently instantiate the protected application one or more times using the commuter authorization. This is in contrast to network authorizations, where a client computer  must request and receive a network authorization for each instantiation of the protected application.","As described earlier and illustrated in , a developer of a software program  to be protected must link the software program to a corresponding shell program code or library of API functions, referred to hereinafter as a client library . The linked software program  and client library  are then loaded onto a client computer . In preferred embodiments of the present invention, a user can request a commuter authorization for a particular protected software program  by running a separate utility  on a client computer  networked to the server pool. In preferred embodiments, this utility  enables the user to specify the license server  from which the commuter authorization will be requested, and the requested time duration of the commuter authorization. The utility  invokes the client library  associated with the requested software program , which first makes a local check to determine if the client library  has already received a commuter authorization. If it has, the utility  terminates. If it has not, then the client library  sends a request for a commuter authorization to the specified license server  in the server pool. The request includes a \u201cfingerprint,\u201d information that uniquely identifies the client computer  from which the request is made.","In alternative embodiments of the present invention, a user can also request a commuter authorization for a particular protected software program  by attempting to open the protected software program . In preferred embodiments, the client library  associated with the requested software program  first makes a local check to determine if the client library  has already received a commuter authorization. If it has, the protected software program  is opened, as will be described in greater detail below. If it has not, then the client library  sends a request for a commuter authorization to the specified license server  in the server pool, and once a commuter authorization is received, the protected software program  is opened. In alternative embodiments, the client library  does not make a local check, but immediately sends a request for a commuter authorization to the specified license server  in the server pool.","In preferred embodiments of the present invention, commuter authorizations and network authorizations can be simultaneously received and managed. Thus, a commuter authorization can be requested and received by a client computer  even though the client computer  may already have a network authorization for the same protected software program .","When a license server  receives a request for a commuter authorization, the license server , under the control of the license management software , responds to the request by looking at its distribution table  to determine whether it has an available allocation for Application v1.0. Continuing the example of  for purposes of illustration only, assume that a request for a commuter authorization has been made to follower server C. In the example of , follower server C has 30 allocations available, as represented by the available allocations record for each server in the pool (reference character ) in the distribution table  for follower server C. Because it has an available allocation, follower server C sends a commuter authorization message to the client computer . As illustrated in , once the commuter authorization message is sent, the distribution table  is updated so that the available allocations record  for follower server C decreases to 29, and the allocations in use record  for follower server C increases to one. In so doing, one of the available allocations for a network authorization has been effectively transformed into a commuter authorization.","It should be noted that in preferred embodiments of the present invention, follower server C may receive multiple requests for commuter authorizations from client computers , and may grant as many commuter authorizations as there are available allocations. However, if an insufficient number of allocations are available, in preferred embodiments follower server C may then issue a borrow request in an attempt to borrow an available allocation from another license server . In alternative embodiments, the network administrator or software developer may limit the number of commuter authorizations that may be issued as a percentage of the hard limit of allocations stored in the hard limit record  for a particular protected software program .","When a commuter authorization is sent to the client computer , additional commuter authorization information is also encrypted and sent to the client computer . As illustrated in , this commuter authorization information includes fingerprint information  which uniquely identifies the client computer  authorized to receive the commuter authorization, and a commuter authorization lifetime , which in preferred embodiments of the present invention is set to 30 days from the granting of the commuter authorization. In alternative embodiments, however, the commuter authorization lifetime  can be set by the system administrator to any value less than the remaining time of the license, as limited by the overall expiration date of the license. The commuter authorization information also includes a check-in value , which indicates whether the commuter authorization has been returned to the server pool. The commuter authorization lifetime  and the check-in value  are stored in persistent memory in both the issuing license server  and the client computer .","Other commuter authorization information may include, but is not limited to, the feature name and version, which identifies the protected software program for which a commuter authorization is granted, and a clock tampering value which, when enabled, allows the client library to detect attempts to tamper with the client computer's clock and invalidate the commuter authorization if tampering is detected. In preferred embodiments of the present invention, the clock tampering value is enabled.","As noted above, in preferred embodiments of the present invention the leader server always has a global picture of the distribution of allocations in the whole server pool. Thus, in the present example any changes to the distribution table of follower server C must be communicated to leader server A. Follower server C will therefore communicate the fact that its available allocations count has dropped to 29 to leader server A, and the distribution table of leader server A will be updated accordingly. Thus, as illustrated in , the distribution table  of leader server A reflects that the available allocations record  for follower server C has dropped to 29, the allocations in use record  for follower server C has increased to 1, and that the record for allocations available for all servers in the pool (see reference character ) has dropped to 98. Until the commuter authorization is returned or otherwise canceled, the hard limit of available allocations in the server pool is effectively decremented by one.","In addition, in alternative embodiments, the commuter authorization lifetime and the check-in value are communicated from follower server C to the other license servers  in the server pool and stored in memory so that even if follower server C should go down, the other license servers  in the server pool can take over the management of the issued commuter authorization.","Referring again to , once the commuter authorization is sent by the license server , it is received by the client library  that initiated the commuter authorization request. Once received, the client computer  can be disconnected from the network, because the commuter authorization information received by the client library  allows it to independently perform a function similar to a license server . Upon receiving a subsequent or present request to run the protected software program , the client library  decides if it can authorize the client computer  to run the requested program  by decoding the commuter authorization information and comparing the fingerprint , commuter authorization lifetime , check-in value , and other information to parameters within the client computer . If authorization is permitted, then an instantiation of the protected software program  is opened. With a commuter authorization, the client library  can open the protected software program  multiple times, including multiple simultaneous instantiations. It should be noted that once a commuter authorization has been received by the client library , all subsequent requests to open the protected software program  will be managed by the client library  without resorting to a networked license server , even though the client computer  may still be connected to the network at that time.","The communication, or pinging, that occurs between a client computer  that has received a network authorization from a license server  is described in a related U.S. utility application entitled \u201cLicense Management System and Method with Multiple License Servers,\u201d Ser. No. 09\/648,697, filed Aug. 25, 2000, the contents of which are incorporated by reference herein. In contrast, pinging is disabled when a client computer  receives a commuter authorization from a license server . Because neither the client computer  nor the license server  will respond to the lack of pinging when pinging is disabled, communication between the client computer  and the server pool can cease for long periods of time.","At some point in time within the commuter authorization lifetime, the client computer  may be re-connected to the network. In preferred embodiments of the present invention, a user may then return the commuter authorization to the network by running a utility  that invokes the client library  associated with the requested software program  and selecting a check-in function. The client library  responds by sending a commuter authorization check-in message to the license server  that initially granted the commuter authorization. At that time, the check-in value  within both the client library  and license server  is set to indicate that the commuter authorization has been checked in. Thereafter, the commuter authorization is disabled. Furthermore, within the license server , the number of available allocations is incremented by one, and this change communicated to the leader server. If the granting license server is down at the time the client library sends the commuter authorization check-in message, this message will be sent to another license server in the pool, and check-in will be managed by that license server. In alternative embodiments, however, rather than checking in the commuter authorization, the commuter authorization is held by the client library  for the full term of the commuter authorization lifetime.","It is also possible that the client computer  may not be re-connected to the network and may not return the commuter authorization to the issuing license server  within the commuter authorization lifetime. As noted above, the commuter authorization lifetime and the check-in value  are stored in persistent memory in both the license server  and the client computer . Thus, if the commuter authorization lifetime ends prior to the return of the commuter authorization, the check-in value  within the client library  and license server  is automatically set to indicate that the commuter authorization has been checked in. Thereafter, the commuter authorization is disabled. Within the license server , the number of available allocations is incremented by one, and this change communicated to the leader server. If the granting license server is down and the commuter authorization lifetime ends prior to the return of the commuter authorization, another license server will manage the automatic check-in of the commuter authorization.","Situations may occur where a user operating a client computer  remote from the network may need to obtain a commuter authorization. In alternative embodiments of the present invention, this can be accomplished by communicating with the network administrator. A user desiring to obtain a commuter authorization for a particular client computer  disconnected from the network first invokes a utility which generates fingerprint information  for the client computer . This fingerprint information  is conveyed to the network administrator through non-networked communications such as by telephone, e-mail, or the like. In addition, other information such as the requested software program is communicated to the network administrator. Other information that may also be conveyed includes the license server  from which the commuter authorization will be requested, and the requested time duration of the commuter authorization.","The network administrator then runs a utility  on any of the license servers  in the server pool that effectively sends a request for a commuter authorization to the targeted license server . If, as described earlier, an available allocation is found, the distribution table  is updated so that the available allocations record  for the targeted license server is decreased by one, and the allocations in use record  is increased by one. The commuter authorization lifetime  and the check-in value  are stored in persistent memory in the license server . In so doing, one of the available allocations for a network authorization has been effectively transformed into a commuter authorization. The network administrator is then provided encrypted commuter authorization information as described above.","This encrypted commuter authorization information is conveyed to the user of the remote client computer  through non-networked communications such as by telephone, e-mail, or the like. The user then enters this information into the utility, which decodes and provides this information to the client library  linked to the requested software program . At this point, the commuter authorization has been received, and thereafter both the client computer  and the server pool manage the commuter authorization in the usual manner as described above.","Therefore, embodiments of the present invention provide an improved license management system and method for more efficiently managing licenses on a network using a pool of multiple license servers. Embodiments of the present invention provide a system and method for managing licenses on a network that allows a client computer to request and receive a commuter authorization from a license server while connected to the network, which allows the client computer to run a protected software program even if the client computer should become disconnected from the network. In addition, embodiments of the present invention provide a system and method for managing licenses on a network that allows a client computer to request and receive a commuter authorization from a license server while disconnected from the network, allowing the client computer to run a protected software program while disconnected from the network."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0022","num":"0021"},"figref":["FIG. 3","FIG. 2"]},{"@attributes":{"id":"p-0023","num":"0022"},"figref":["FIG. 4","FIG. 1"]},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":["FIG. 6","FIG. 5"]},{"@attributes":{"id":"p-0026","num":"0025"},"figref":["FIG. 7","FIG. 6"]},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 8"}]},"DETDESC":[{},{}]}
