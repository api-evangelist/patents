---
title: Externalized classloader information for application servers
abstract: A process and system for externalizing classloader information to non-application modules such as tool modules that do not reside within the same Application server virtual machine such as a J2EE AppServer JVM. Tools that read and display classloader information typically need to co-reside within the AppServer because of the virtual machine security mechanisms that prevent classes outside the virtual machine itself to introspect the classloaders. This presents a problem for tooling vendors because most server owners do not want anything other than their applications running within the AppServer virtual machine. The invention allows tooling vendors to create a classloader tool that is external to the AppServer virtual machine, and which is running in a completely separate virtual machine, thus having minimal overhead on production systems, but which allows classloading through standard or open (e.g. non-proprietary) interfaces.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07051324&OS=07051324&RS=07051324
owner: International Business Machines Corporation
number: 07051324
owner_city: Armonk
owner_country: US
publication_date: 20030116
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DESCRIPTION OF THE INVENTION"],"p":["1. Field of the Invention","This invention relates to technologies to allow program objects being executed by processes outside a virtual machine process to be accessed via standard or \u201cnormal\u201d class loading operations by program objects being executed inside the virtual machine process.","2. Background of the Invention","Object-oriented programming (\u201cOOP\u201d) methodologies are well known and widely adopted, as they promote efficient team development of software products, allow minimized maintenance activities, and provide abilities to easily and dependably integrate modules and objects from older designs, other designers, and new designs together.","In contrast to procedural programming methodologies, OOP allows programmers to define data types of data structures and types of operations or functions which can be performed on those data structures, which defines the data structure as an \u201cobject\u201d. Relationships between objects may be defined, as well, such that some objects may share or \u201cinherit\u201d characteristics from other objects, allowing variations of existing objects to be quickly and efficiently developed. Categories of objects are referred to as a \u201cclass\u201d of objects. Objects of a given class share common properties as defined by the class.","A number of companies have developed and marketed software development tools which support OOP programming languages (\u201cOOPL\u201d), including but not limited to Xerox Corporation's Smalltalk, Bell Laboratory's C++, Microsoft Corporation's Visual C++, Sun Microsystems' Java, and Open Management Group's (\u201cOMG\u201d) Unified Modeling Language (\u201cUML\u201d) are programming languages which, among others, implement OOP concepts and methodologies.","In particular, Sun Microsystem's Java language has gained widespread use for its support of Internet technologies, such as \u201capplets\u201d and embedded Java scripts in web pages, \u201cservlets\u201d which can be run by a web server or application program server, etc. Java is especially useful for its portability or non-machine-specific design, which enables Java code to be run or executed by any computing platform which is equipped with a Java interpreter. The \u201copen\u201d nature of Sun's Java specifications has also allowed many vendors to participate in the marketplace, whether by developing and providing application programs, administrative tools, or programming tools.","Java code is pseudo-compiled into \u201cbytecode\u201d, which is later executed by a machine-specific Java interpreter. The interpreter converts the bytecodes to machine-specific instructions which are executed by the particular computer on which the Java program is being executed. Java defines the virtual computer for which the bytecode is designed as a \u201cvirtual machine\u201d, and thus, programming is done as if it is to be executed by the theoretical virtual machine. During actual execution on a computer, one or more Java Virtual Machines (\u201cJVM\u201d) may be created by the computer's operating system, each JVM executing Java programs as if it were a real, independent computer. Java code can also be converted directly into machine-specific executable language using a special compiler, the results of which may also be executed within a JVM.","An enterprise server generally refers to a mainframe class computer which is suitable for running programs of a magnitude commensurate with an \u201centerprise\u201d, such as making bulk airline reservations online, tracking large real time trading and commodities, etc. Java 2 Platform Enterprise Edition (\u201cJ2EE\u201d), which was developed by Sun Microsystems with other notable partners such as International Business Machines (\u201cIBM\u201d), provides a Java-compliant platform for enterprise class computers, and is in many ways a subset of functionality of the Java 2 Platform Standard Edition (\u201cJ2SE\u201d).","J2EE provides several key features which make it useful in enterprise computing environments, including support for a \u201cthin client\u201d tiered arrangement between client computers and servers, as well as supporting platform-independence of modules and code (e.g. portability) so that vendors may easily target a wide array of enterprise computers with a single design of software.","Additionally, J2EE supports Common Object Request Broker Architecture (\u201cCORBA\u201d), and a more Java-specific and further evolved Enterprise Java Beans (\u201cEJB\u201d) concept. CORBA and EJB concepts allow objects to \u201cdiscover\u201d the existence and availability of other classes and objects which they may need for data or processing functions, and to utilize instances of those objects on an as-needed basis, whether running on the same computing platform or working together over a computer network. In particular, EJB is a server-based technology for the delivery of program components in an enterprise environment. EJB supports the Extensible Markup Language (XML) to define Java Beans (e.g. program modules which are designed conformant to the Java Component Architecture), and provides enhanced deployment and security features which have gained it rapid adoption by many enterprise server owners and operators.","Java Message eXtensions (\u201cJMX\u201d) is the Java specification which, if implemented by an vendor of a software product, allows software developers to easily integrate their new designs with existing network management solutions. To take advantage of JMX, objects are written compliant to the standard as \u201cMBeans\u201d (e.g. \u201cmanageable Java Beans\u201d). A JMX client can invoke methods and access attributes of MBeans via a JMX container in which they reside. Additionally, clients can \u201cregister\u201d with an MBean to receive notifications as needed.","The term \u201capplication server\u201d is used widely to refer to a program running on a computer which provides a function needed by a client computer, such as a web server as related to a web browser, or a banking database server as related to a Automated Teller Machine (\u201cATM\u201d). Application servers can be small, insubstantial programs executed by computing platforms with minimal resources, they may be substantial programs (e.g. groups of many objects) running on enterprise class computers, or any combination there between.","Application servers, clients, computer networks, OOP, OOP languages, Java, J2EE, JMX and MBeans are all well known in the art, and information regarding these concepts and specifications is openly available from the vendors mentioned.","Turning to , one possible arrangement () in an application server (\u201cAppServer\u201d) is shown in which multiple client or customer application modules (, , . . . ) are executed within the same AppServer process such as J2EE-compliant AppServer JVM process as a tool user interface (\u201cUI\u201d) module (). The application modules (, , . . . ) are represented in this example by Enterprise Archives (\u201cEAR\u201d), which are containers of multiple Java objects. The Tool UI () may directly access administrative information about the other modules within the same AppServer JVM process () using standard JMX application programming interface (\u201cAPI\u201d) calls, and thus the tool module may provide administrative functions such as console operations, statistical reports, etc. Because Java allows for easy integration and cooperation of modules by different vendors, the vendors of the tool module(s) and application modules may be many.","However, by running the Tool UI () module(s) in the same JVM () as the customer's application modules (, , . . . ), several undesirable issues arise. First, the JVM processing bandwidth is divided between all the modules running in it, so a tool module or process may negatively impact the performance of an application process. Additionally, the running of tool modules in the same AppServer as application processes may represent a security issue. As such, many owners of enterprise servers have adopted policies that only application modules may be run in their AppServer JVM's, and all other administrative and support modules must be run in other JVM's.","In addition, many enterprise server owners have experienced difficulties getting effective diagnosis and support of problems which arise when application modules from a wide variety of vendors are run inside the same JVM. So, many of them have adopted even stricter policies that only application modules from the same vendor or supplier may be run in an AppServer JVM.","So, tool vendors for such application servers are forced to design their modules for execution outside the AppServer JVM where application modules are running. However, J2EE AppServers do not allow modules which are running outside of an AppServer JVM to introspect into modules running inside the AppServer JVM, which prevents tool modules running outside the AppServer JVM from obtaining administrative information regarding modules running within the AppServer JVM.","One attempt to solve this problem is shown in . In this approach, the tool vendor may place a minimized module or servlet () into the AppServer JVM (). The Classloader Tooling EAR () exports information to a set of tools () running outside the AppServer JVM (). This approach, though, means that application modules must perform proprietary or non-J2EE-standard operations to load interface or class information about the tools from the tool module. This means that in order for the tools to be effective, the application modules must be designed to take advantage of non-standard interfaces, which makes the application modules less portable and less reusable in environments that have other configurations. Also, while minimizing the performance impact of placing an non-application module in the AppServer process, it still may produce a security problem and technically still violates the policies of many enterprise server owners and operators.","Therefore, there is a need in the art for a system and method which provides external access by tools for information regarding the performance and administration of application modules running within an application server process such as a J2EE AppServer JVM, without the need for the tools to run within the same JVM as the application modules, and without the need for the application modules to implement custom or proprietary application programming interfaces.","This invention externalizes classloader information for a virtual machine such as a Java Virtual Machine (\u201cJVM\u201d) by providing an interface to classloader runtime methods via a Java Management Extension (\u201cJMX\u201d) Management Bean (\u201cMBean\u201d). For flexibility, most Java 2 Platform Enterprise Edition (\u201cJ2EE\u201d) Application Servers (\u201cAppServers\u201d) have different granularities of classloader isolation levels. Therefore, to insure that the most granular isolation level is supported by this invention, the classloader information is externalized from a J2EE Module perspective, via a Module MBean. This allows external non-application objects such as Tooling and Administrative objects to be run in a separate JVM from the AppServer JVM, while avoiding the necessity for application objects running the AppServer JVM to implement a custom or proprietary interface. Instead, using this invention, the application objects may load the external classes as if they were running in the same AppServer JVM.","The present invention is preferrably realized in conjunction with a \u201cstandard\u201d enterprise-class web server suite such as IBM's WebSphere Version 4.0 or greater, executing on an server such as an IBM iSeries computer. According to the preferred embodiment, J2EE MBeans are used as an integral part of the solution to the problem of externalizing classloader information to a JVM. However, it will be recognized by those skilled in the art that other combinations of web server software and OOP programming technologies which achieve the same functionality may be employed without departing from the spirit and scope of the present invention.","Turning to , a generalized configuration of a web server computing platform is illustrated, including a central processing unit () (\u201cCPU\u201d), which is typically comprised of a microprocessor () associated with random access memory (\u201cRAM\u201d) () and read-only memory (\u201cROM\u201d) (). Often, the CPU () is also provided with cache memory () and programmable FlashROM (). The interface () between the microprocessor () and the various types of CPU memory is often referred to as a \u201clocal bus\u201d, but also may be a more generic or industry standard bus.","Many computing platforms are also provided with one or more storage drives (), such as hard-disk drives (\u201cHDD\u201d), floppy disk drives, compact disc drives (CD, CD-R, CD-RW, DVD, DVD-R, etc.), and proprietary disk and tape drives (e.g.,Iomega Zip [TM] and Jaz [TM], Addonics SuperDisk [TM], etc.). Additionally, some storage drives may be accessible over a computer network.","Many computing platforms are provided with one or more communication interfaces (), according to the function intended of the computing platform. For example, a computer is often provided with a high speed serial port (RS-232, RS-422, etc.), an enhanced parallel port (\u201cEPP\u201d), and one or more universal serial bus (\u201cUSB\u201d) ports. The computing platform may also be provided with a local area network (\u201cLAN\u201d) interface, such as an Ethernet card, and other high-speed interfaces such as the High Performance Serial Bus IEEE-1394.","Some specialized computing platforms such as wireless networked computers may also be provided with a radio frequency (\u201cRF\u201d) interface with antenna, as well. In some cases, the computing platform may be provided with an infrared data arrangement (\u201cIrDA\u201d) interface, too.","Computing platforms are often equipped with one or more internal expansion slots (), such as Industry Standard Architecture (\u201cISA\u201d), Enhanced Industry Standard Architecture (\u201cEISA\u201d), Peripheral Component Interconnect (\u201cPCI\u201d), or proprietary interface slots for the addition of other hardware, such as sound cards, memory boards, and graphics accelerators.","Additionally, many units, such as portable computers, are provided with one or more external expansion slots () allowing the user the ability to easily install and remove hardware expansion devices, such as PCMCIA cards, SmartMedia cards, and various proprietary modules such as removable hard drives, CD drives, and floppy drives.","Often, the storage drives (), communication interfaces (), internal expansion slots () and external expansion slots () are interconnected with the CPU () via a standard or industry open bus architecture (), such as ISA, EISA, or PCI. In many cases, however, the bus () may be of a proprietary design.","A computing platform is usually provided with one or more user input devices, such as a keyboard or a keypad (), and mouse or pointer device (), and\/or a touch-screen display (). Additionally, a microphone () is supplied with the computing platform, which may be used for a variety of \u201caudio enabled\u201d applications, such as recording audio and voice signals, making Internet telephone calls, voice navigation of web sites, dictating text and commands using voice recognition capabilities, etc. Some computing platforms are also equipped with a camera device (), such as a still digital camera or full motion video digital camera.","One or more user output devices, such as a display (), are also provided with most computing platforms. The display () may take many forms, including a Cathode Ray Tube (\u201cCRT\u201d), a Thin Flat Transistor (\u201cTFT\u201d) array, or a simple set of light emitting diodes (\u201cLED\u201d) or liquid crystal display (\u201cLCD\u201d) indicators.","One or more speakers () and\/or annunciators () are often associated with computing platforms, too. The speakers () may be used to reproduce audio and music, and annunciators () may take the form of simple beep emitters or buzzers.","These user input and output devices may be directly interconnected (\u2032, \u2033) to the CPU () via a proprietary bus structure and\/or interfaces, or they may be interconnected through one or more industry open buses such as ISA, EISA, PCI, etc.","A computing platform is also typically provided with one or more software and firmware () programs to implement the desired functionality of the computing platforms.","Turning to now , more detail is given of a generalized organization of software and firmware () on this range of computing platforms. One or more operating system (\u201cOS\u201d) native application programs () may be provided on the computing platform, such as word processors, spreadsheets, contact management utilities, address book, calendar, email client, presentation, financial and bookkeeping programs.","Additionally, one or more \u201cportable\u201d or device-independent programs () may be provided, which must be interpreted by an OS-native platform-specific interpreter (), such as a Java [TM] interpreter. Often, computing platforms are also provided with a form of web browser or micro-browser (), which may also include one or more extensions to the browser such as browser plug-ins ().","The computing device is often provided with an operating system (), such as Microsoft Windows [TM], UNIX, IBM OS\/2 [TM], LINUX, MAC OS [TM] or other platform specific operating systems. Smaller devices such as PDA's and wireless telephones may be equipped with other forms of operating systems such as real-time operating systems (\u201cRTOS\u201d) or Palm Computing's PalmOS [TM]. It is conceivable that the trend of increasing memory and processing capabilities will continue throughout the near future to a point where such small devices reach a utility level to operate a server platforms, and as such, the present invention may become applicable to such platforms.","A set of basic input and output functions (\u201cBIOS\u201d) and hardware device drivers () are often provided to allow the operating system () and programs to interface to and control the specific hardware functions provided with the computing platform.","Additionally, one or more embedded firmware programs () are commonly provided with many computing platforms, which are executed by onboard or \u201cembedded\u201d microprocessors as part of the peripheral device, such as a micro controller or a hard drive, a communication processor, network interface card, or sound or graphics card.","As such,  describe in a general sense the various hardware components, software and firmware programs of a wide variety of computing platforms, including but not limited to personal computers, PDAs, PIMs, web-enabled telephones, and other appliances such as WebTV [TM] units. As such, we now turn our attention to disclosure of the present invention relative to the processes and methods preferably implemented as software and firmware on such a computing platform. It will be readily recognized by those skilled in the art that the following methods and processes may be alternatively realized as hardware functions, in part or in whole, without departing from the spirit and scope of the invention.","According one embodiment, a J2EE JMX MBean is used to provide an external connection to another JVM process (e.g. a non-AppServer JVM), where the non-application object (e.g. tools and administrative objects) are running. JMX is employed in order to provide access to administrative information from and regarding the running application modules. This allows the application modules to load tool classes in a standard, well-understood manner, which makes the system more open to tool vendors and less dependent on proprietary methods and interfaces, while simultaneously maintaining the separation of JVMs for application modules and non-application modules (e.g. tool modules).","Using this system design, tools \u201cappear\u201d to the application modules to be running co-resident with the application modules in the same AppServer JVM, and the tool may introspect into the application modules. The standardized methods can be used by the application modules to use a well-known API (e.g. JMX in this implementation) to obtain administrative information from the AppServer JVM including the ClassLoader information, instead of interfacing in a proprietary manner to a special tooling servlet or module.","In our exemplary embodiment, there are two methods externalized via Module MBeans that provide the classloader information: getClassloaderDepth and getClassLoaderInfo.","The getClassloaderDepth method takes no input parameters, and returns the number of classloaders visible the module via an integer.","The getClassLoaderInfo method has four input parameters. The first input parameter is an integer level, which indicates the level of the classloader information to return, wherein 0 (zero) is the first classloader that will be checked when loading classes, and getClassLoaderDepth( )-1 is the last classloader that will be checked. The second input parameter is a Boolean value, atDepthOnly, which, when true, causes the getClassLoaderInfo method to only return the classloader information at the specified level. If atDepthOnly is false upon invocation of the getClassLoaderInfo method, all levels between 0 and level will be returned.","The third input parameter to the getClassLoaderInfo method is a Boolean value, showClasses, which if true, then loaded classes are returned. The fourth input parameter to the getClassLoaderInfo method is also a Boolean value, showCodeSource, which if true when showClasses is true, then the codeSource for each class will be returned.","The getClassLoaderinfo method returns a String which contains the classloader information in the form of extensible markup language (\u201cXML\u201d) in our exemplary embodiment. Table 1 presents a portion of our Module MBeans XML Descriptor, as just described.",{"@attributes":{"id":"p-0055","num":"0054"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"280pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 1"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Example MBean XML Descriptor"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"280pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<attribute description = \u201cNumber of classloaders in this module's classloading hierarchy\u201d"},{"entry":"\u2003getMethod=\u201cgetClasssLoaderDepth\u201d name=\u201cclassLoaderDepth\u201d type =\u201cint\u201d \/>"},{"entry":"<operation name=\u201cgetClassLoaderInfo\u201d"},{"entry":"\u2003description=\u201cInformation about classloaders for this module\u201d"},{"entry":"\u2003targetObectType=\u201cobjectReference\u201d impact=\u201cACTION\u201d role=operation\u201d"},{"entry":"\u2003type=\u201cjava.lang.String\u201d>"},{"entry":"\u2003<signature>"},{"entry":"\u2003\u2003\u2003<parameter name= \u201clevel\u201d type = \u201cint\u201d"},{"entry":"\u2003\u2003\u2003\u2003\u2003description=\u201cthe level of the classloader information to return. 0= the first"},{"entry":"\u2003\u2003\u2003\u2003\u2003classloader that will be checked when loading classes, getClassLoaderDepth ( ) \u22121"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003the last classloader that will be checked.\u201d\/>"},{"entry":"\u2003\u2003\u2003<parameter name = \u201catDepthOnly\u201d type = \u201cboolean\u201d description = \u201cif true, then only the"},{"entry":"\u2003\u2003\u2003\u2003\u2003classloader information at the specified level will be returned. If false, all levels"},{"entry":"\u2003\u2003\u2003\u2003\u2003between 0 and level will be returned.\u201d \/>"},{"entry":"\u2003\u2003\u2003<parameter name = \u201cshowClasses\u201d type = \u201cboolean\u201d description = \u201cif true, then loaded"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003classes will be returned\u201d\/>"},{"entry":"\u2003\u2003\u2003<parameter name = \u201cshowCodeSource\u201d type = \u201cboolean\u201d description = \u201cif true, and"},{"entry":"\u2003\u2003\u2003\u2003\u2003showClasses is true, then the codeSource for each class will be returned\u201d \/>"},{"entry":"\u2003<\/signature>"},{"entry":"<\/operation>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"Turning to , an AppServer process and exemplary implementation () of the invention is shown. When the AppServer JVM () is equipped with JMX, an administration client () is also provided which provides interfaces to the external Classloader Tooling vendor's code (). The JMX administration client () is provided with connectors, such as a Remote Machine Interface (\u201cRMI\u201d) connector () or a Simple Object Access Protocol (\u201cSOAP\u201d) connector ().","The JMX MBean Server (), which is a default component of the Java management extensions, manages the application module MBean(s) (). The MBean Factory () receives notification of a need by an application module to load the externalized class () during AppServer runtime, which then uses the XML descriptor () to register the MBean with the MBean server ().","As such, the externalized classes may be loaded as if they were actually running within the same AppServer process (e.g. within the same JVM) as the application modules). This provides the best of all possible previous solutions, and within a standard or open programming paradigm such as J2EE with JMX. The need to run the non-application class objects into the AppServer virtual machine is avoided, thus minimizing or eliminating the security and performance risks associated with running the non-application class objects into the AppServer virtual machine. Further, the application modules are allowed to load the externalized non-application modules' class information without need for implementation of a custom or proprietary interface.","It will be recognized by those skilled in the art that the scope of the present invention is not limited to the specific, detailed exemplary embodiment provided herein. Use of alternate programming languages, computing platforms, operating systems, enterprise server suites and models, and module descriptor languages is possible without departing from the spirit and scope of the invention. Therefore, the scope of the invention should be determined by the following claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The following detailed description when taken in conjunction with the figures presented herein provide a complete disclosure of the invention.",{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":["FIG. 5","FIG. 1"]}]},"DETDESC":[{},{}]}
