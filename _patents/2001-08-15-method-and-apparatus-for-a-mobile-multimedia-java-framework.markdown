---
title: Method and apparatus for a mobile multimedia java framework
abstract: An invention is provided for creating a mobile multimedia framework API capable of operation in mobile hardware devices is disclosed. All API component access parameters are set to utilize a synchronous programming model. Then, the API components are set to use a pull paradigm, and all master/slave functionality is removed. The resulting mobile multimedia framework API has a memory size of less than 100 kilobytes.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06928648&OS=06928648&RS=06928648
owner: Sun Microsystems, Inc.
number: 06928648
owner_city: Santa Clara
owner_country: US
publication_date: 20010815
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS REFERENCE TO RELATED APPLICATIONS","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS"],"p":["This application claims the benefit of U.S. Provisional Patent Application having Ser. No. 60\/285,568, filed on Apr. 20, 2001, entitled \u201cMethod and Apparatus For a Mobile Multimedia Java Framework,\u201d which is hereby incorporated by reference. This application is also related to U.S. patent application Ser. No. 09\/930,851 filed Aug. 15, 2001, and entitled \u201cMobile Multimedia Java Framework Application Program Interface,\u201d which is hereby incorporated by reference.","1. Field of the Invention","This invention relates generally to multimedia frameworks, and more particularly multimedia frameworks having a reduced footprint and capable of operating on mobile computing devices.","2. Description of the Related Art","Java, originally developed by Sun Microsystems, is an object-oriented, multithreaded, portable, platform-independent, secure programming environment used to develop, test and maintain software programs. Java programs have found extensive use on the World Wide Web, which is the Internet's multimedia information retrieval system. These programs include full-featured interactive, standalone applications, as well as smaller programs, known as applets, that run in a Java-enabled Web browser or applet viewer.","Recently, the computer industry has sought to add computer processing and communications capabilities to devices other than what would normally be considered a traditional computer. Such devices are quite varied and include, for example, personal digital assistants (PDAs), smartphones, cellular phones, desktop screen phones, in-vehicle devices, vehicle traffic lights, kiosks, business organizers (e.g., IBM WorkPadT.TM., PalmPilot.TM., and the like), computer peripherals (such as printers, fax machines, and the like), handheld or palmtop computing devices, and the like. For convenience, these devices, as a class, are referred to herein as \u201cpervasive computing\u201d clients as they are devices that are designed to be connected to servers in a computer network and used for computing purposes regardless of their location.","Palmtop computers and the like are now being proposed as pervasive computing devices for use in an automobile. In-vehicle navigation systems, of course, are well-known. Representative systems are described in U.S. Pat. Nos.: 5,121,326, 5,191,532 and 5,792,109. U.S. Pat. No. 5,121,326 describes a navigation system that displays a general map of the driver's location. As the driver approaches an intersection, the display provides a detailed map of the intersection to provide further guidance to the driver. In U.S. Pat. No. 5,191,532, a navigation system is disclosed where driving directions can be provided even though the user's exact destination is not listed in the systems database. Certain geographic features such as cities and landmarks are used to approximate the destination for purposes of providing directions. In U.S. Pat. No. 5,729,109, the inventors provide a vehicle navigation system that uses speech generation to give spoken directions when the driver is approaching an intersection.","However, these mobile devices are often unable to run many multimedia applications. Although desktop computers are designed to handle the large processing and memory requirements of multimedia applications, most mobile computing devices do not have the processing power or memory demanded by these applications.","One reason for the large processing and memory requirements for multimedia applications is the application program interface (API) required by the underlying multimedia framework called by the applications, often 2-3 megabytes in size. The API is a language and message format used by an application program to communicate with the operating system or some other system or control program such as a database management system (DBMS) or communications protocol. APIs are implemented by writing function calls in the program, which provide the linkage to the required subroutine for execution. Thus, an API implies that some program module is available in the computer to perform the operation or that it must be linked into the existing program to perform the tasks.",{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 1","b":["100","100","102","104","106","102","102","104"]},"In view of the foregoing, there is a need for systems and methods providing mobile multimedia frameworks capable of operating on mobile computing devices. The systems and methods should provide a multimedia framework capable of operating on mobile devices having reduced processing capability, such as cell phones, PDAa, and Java-enabled car \u201cTelematics\u201d.","Broadly speaking, the present invention fills these needs by providing a mobile multimedia framework having a reduced memory footprint. In one embodiment, a method for creating a mobile multimedia framework API capable of operation in mobile hardware devices is disclosed. All API component access parameters are set to utilize a synchronous programming model. Then, the API components are set to use a pull paradigm, and all master\/slave functionality is removed. The resulting mobile multimedia framework API has a memory size of less than 100 kilobytes. To provide additional flexibility, a push data delivery protocol and an asynchronous programming model can be utilized in an application layer executing above the mobile multimedia framework API.","In another embodiment, a mobile multimedia framework API capable of operation in mobile hardware devices is disclosed. The mobile multimedia framework API includes a codec, a data source in communication with the codec, and a media engine. The media engine includes a plurality of components in communication with the codec and the data source. Each component is accessible utilizing a synchronous programming model, and also utilizes a pull data delivery protocol. Further, each component can be set to exclude master\/slave functionality. As above, the resulting mobile multimedia framework API has a memory size of less than 100 kilobytes.","An additional method for creating a mobile multimedia framework API capable of operation in mobile hardware devices is disclosed in a further embodiment of the present invention. All API component access parameters are set to utilize a synchronous programming model. Then, the API components are set to use a pull paradigm, and all master\/slave functionality is removed. In addition, a specialized player that is designed to process a specific type of multimedia data, such as MPEG data, is provided. In this manner, the resulting mobile multimedia framework API has a memory size of less than 100 kilobytes.","Advantageously, the embodiments of the present invention provide a mobile multimedia framework having a greatly reduced footprint. Hence, the embodiments of the present invention can be efficiently used in mobile devices having reduced processing power and memory. The memory size of the embodiments of the present invention is less than 200 kilobytes, and often less than 30 kilobytes. The actual size depending upon the functionality provided. Other aspects and advantages of the invention will become apparent from the following detailed description, taken in conjunction with the accompanying drawings, illustrating by way of example the principles of the invention.","An invention is disclosed for a mobile multimedia Java Framework. The present invention provides a Java based multimedia framework capable of operating on mobile devices having reduced processing capability, such as cell phones, PDAa, and Java-enabled car \u201cTelematics\u201d. In the following description, numerous specific details are set forth in order to provide a thorough understanding of the present invention. It will be apparent, however, to one skilled in the art that the present invention may be practiced without some or all of these specific details. In other instances, well known process steps have not been described in detail in order not to unnecessarily obscure the present invention.",{"@attributes":{"id":"p-0032","num":"0031"},"figref":["FIG. 1","FIG. 2"],"b":["200","200","204","206","208","210","212"]},"The hardware layer  represents the physical hardware on which the multimedia framework operates, such as a PDA or cell phone. In operation, a user  of the mobile multimedia system  interacts with the application layer  of the mobile multimedia system , which can be written by a third party developer. Generally, the application layer  provides the user interface for the media application, such as the play, stop, and capture controls.","The mobile Java media framework module  can then be used to process commands received by the application layer . As described in greater detail subsequently, the Java media framework module  includes the media engine, codec, and other media processing modules that process the commands received by the application layer .","The Java virtual machine  is used as an interpreter to provide portability to Java applications. In general, developers design Java applications as hardware independent software modules, which are executed Java virtual machines . The Java virtual machine layer  is developed to operate in conjunction with the native operating system  of the particular hardware  on which the mobile multimedia framework system  is to run. In this manner, Java applications  can be ported from one hardware device to another without requiring updating of the application code.","Unlike most programming languages, in which a program is compiled into machine-dependent, executable program code, Java classes are compiled into machine independent byte-code class files which are executed by a machine-dependent virtual machine. The virtual machine provides a level of abstraction between the machine independence of the byte-code classes and the machine-dependent instruction set of the underlying computer hardware. A class loader is responsible for loading the byte-code class files as needed, and an interpreter or just-in-time compiler provides for the transformation of byte-codes into machine code.","More specifically, Java is a programming language designed to generate applications that can run on all hardware platforms, small, medium and large, without modification. Developed by Sun, Java has been promoted and geared heavily for the Web, both for public Web sites and intranets. Generally, Java programs can be called from within HTML documents or launched standalone. When a Java program runs from a Web page, it is called a \u201cJava applet,\u201d and when run on a Web server, the application is called a \u201cservlet.\u201d","Java is an interpreted language. The source code of a Java program is compiled into an intermediate language called \u201cbytecode\u201d. The bytecode is then converted (interpreted) into machine code at runtime. Upon finding a Java applet, the Web browser invokes a Java interpreter (Java Virtual Machine), which translates the bytecode into machine code and runs it. Thus, Java programs are not dependent on any specific hardware and will run in any computer with the Java Virtual Machine software. On the server side, Java programs can also be compiled into machine language for faster performance. However a compiled Java program loses hardware independence as a result.","Although the present invention is described based on the Java programming language, other programming languages may be used to implement the embodiments of the present invention, such as other object oriented programming languages. Object-oriented programming is a method of creating computer programs by combining certain fundamental building blocks, and creating relationships among and between the building blocks. The building blocks in object-oriented programming systems are called \u201cobjects.\u201d An object is a programming unit that groups together a data structure (instance variables) and the operations (methods) that can use or affect that data. Thus, an object consists of data and one or more operations or procedures that can be performed on that data. The joining of data and operations into a unitary building block is called \u201cencapsulation.\u201d","An object can be instructed to perform one of its methods when it receives a \u201cmessage.\u201d A message is a command or instruction to the object to execute a certain method. It consists of a method selection (name) and a plurality of arguments that are sent to an object. A message tells the receiving object what operations to perform.","One advantage of object-oriented programming is the way in which methods are invoked. When a message is sent to an object, it is not necessary for the message to instruct the object how to perform a certain method. It is only necessary to request that the object execute the method. This greatly simplifies program development.","Object-oriented programming languages are predominantly based on a \u201cclass\u201d scheme. A class defines a type of object that typically includes both instance variables and methods for the class. An object class is used to create a particular instance of an object. An instance of an object class includes the variables and methods defined for the class. Multiple instances of the same class can be created from an object class. Each instance that is created from the object class is said to be of the same type or class.","A hierarchy of classes can be defined such that an object class definition has one or more subclasses. A subclass inherits its parent's (and grandparent's etc.) definition. Each subclass in the hierarchy may add to or modify the behavior specified by its parent class.","To illustrate, an employee object class can include \u201cname\u201d and \u201csalary\u201d instance variables and a \u201cset_salary\u201d method. Instances of the employee object class can be created, or instantiated for each employee in an organization. Each object instance is said to be of type \u201cemployee.\u201d Each employee object instance includes the \u201cname\u201d and \u201csalary\u201d instance variables and the \u201cset_salary\u201d method. The values associated with the \u201cname\u201d and \u201csalary\u201d variables in each employee object instance contain the name and salary of an employee in the organization. A message can be sent to an employee's employee object instance to invoke the \u201cset_salary\u201d method to modify the employee's salary (i.e., the value associated with the \u201csalary\u201d variable in the employee's employee object).","An object is a generic term that is used in the object-oriented programming environment to refer to a module that contains related code and variables. A software application can be written using an object-oriented programming language whereby the program's functionality is implemented using objects. Examples of object-oriented programming languages include C++ as well as Java.",{"@attributes":{"id":"p-0046","num":"0045"},"figref":"FIG. 3","b":["300","300","204","206","208","210","212","206","302","304","306","308","310","206","312","314","316"]},"The a mobile Java multimedia framework module  is a set of multimedia APIs and implementations designed to playback multimedia in a variety of protocols and formats, such as a QuickTime Cinepak movie over the HTTP (Hypertext Transfer Protocol) protocol. The Java Media Framework specifies the concept of a \u201cplayer,\u201d a unit to playback multimedia data. As illustrated in , within the Java multimedia framework module  are implementations of the three main stages of the media processing pipeline: the parser , the decoder  and the renderer . The parser  transforms the media data into a compressed and\/or encoded media data file or stream. Decoder (codec)  transforms the compressed and\/or encoded media data into raw (decompressed and unencoded) media data  for use by renderer . Renderer  processes the raw media data into media output for display or presentation on an output device, such as a monitor for graphics or a speaker for audio.","The mobile Java multimedia framework module  of the embodiments of the present invention is an order of magnitude smaller than conventional media modules. As previously mentioned, prior art media frameworks are typically 2-3 megabytes in size. Advantageously, the embodiments of the present invention, however, are less than 200 kilobytes, often less than 30 kilobytes. The actual size depending upon the functionality provided.","To reduce the size of the mobile Java multimedia framework module , the embodiments of the present invention optimize the operation of the framework module. To this end, an embodiment of the present invention converts all push data deliver protocols to pull data delivery protocols. In a push data delivery protocol, data is constantly provided, without needing to be requested. An example of a push data delivery protocol is a television broadcast. The television broadcast is always available, without needing to be requested. Moreover, the rate of the data delivery is controlled by the server; or the broadcast station in this example. An example of a pull data delivery protocol is a World Wide Web site. When a user enters a URL in a web browser, the user is requesting the data from the web site to be sent to the user's computer. The rate of the data delivered in the pull scenario is controlled by the client and limited by the network bandwidth. A push data delivery protocol can almost always be converted to a pull protocol (and vice versa) by means of using data buffering and adding an additional processing thread to control the data flow. Hence the push data protocol can be eliminated from the framework as a size reduction measure without sacrificing any necessary functionalities. Thus, the embodiments of the present invention convert all data delivery to a pull data delivery protocol.","The embodiments of the present invention also remove the master\/slave paradigm to reduce the size of the mobile Java multimedia framework module . It should be noted, however, that master\/slave paradigms between program modules can still be created at the application level . Thus, the embodiments of the present invention move the master\/slave relationship functionality from the mobile Java multimedia framework module  to the application layer , resulting in a reduction of the mobile Java multimedia framework module  size. Moreover, most media content displayed using the mobile Java multimedia framework module  includes both audio and video if they are to be run together. In other words, most media is not separated. However, when the master\/slave paradigm is needed, such as when the audio and video are separated, the master\/slave paradigm can be provided at the application level .","The embodiments of the present invention further convert all asynchronous operations into synchronous operations to reduce the size of the mobile Java multimedia framework module . An example of an asynchronous operation is an email request. When a user sends email, the user can continue with other operations while awaiting a reply to the email. The user is not prevented from performing further operations on their computer until the reply is received. An example of a synchronous operation is a telephone call. During a telephone call the user waits for an immediate reply to the call.","From a programming point of view, if a start video function is called, two separate events occur under the asynchronous and synchronous models. Using an asynchronous model, the start video function would immediately return and a listener function would execute. The listener function would provide an event that informs the program that video has started. However, during the time the listener function is awaiting the video start, the module calling the start video function can continue executing other operations. Using a synchronous model, the start video call would stop operation of the calling module until the video is actually started.","The asynchronous model is appropriate when delays are expected during operation of the system, such as when setup operations are required to execute the modules. The synchronous model is appropriate when delays are not expected, or are of short duration. Since mobile devices are generally design to respond quickly with little delay, the embodiments of the present invention preferably do not utilize an asynchronous module to implement the mobile Java multimedia framework module . However, an asynchronous module can be used at the application layer , similar to the master\/slave paradigm.","As mentioned above the mobile Java multimedia framework module  includes a media engine  that uses the data sources , codec , renderer , and parser  to process media provided by the application layer . In addition, specialized players are included, such as an MPEG player , MIDI player , and FLASH player . It should be noted that other specialize players may be included in the mobile Java multimedia framework module , desired by the developer.","The media engine  is used as a generic media data processor, while the specialized players are used to process data specific to the particular specialized player. For example, in the system  of , all MPEG media is processed using the MPEG player . Each specialized player includes its own specialized media engine, parser, codec, and render optimized to process MPEG media.","Below the mobile Java multimedia framework module  is a Java virtual machine (JVM) . In some embodiments of the present invention portions of the mobile Java multimedia framework module , such as the codec , can bypass the JVM  and interface directly the native operating system , which interfaces with the native hardware . This allows for increased speed and efficiency when needed.",{"@attributes":{"id":"p-0057","num":"0056"},"figref":["FIG. 4","FIG. 4"],"b":["206","206","206","206","206"],"i":["a ","b. "]},"The mobile Java multimedia framework module  is developed in an independent piecewise manner by establishing the JMF light application programming interface (API) for components of the JMF light implementation module . The JMF light API refers to the methods of the JMF light implementation module that are accessible by the applications executing on the application layer. The JMF light API further defines the format by which those methods are invoked. The particular implementation of those methods is important only with respect to the design of the particular component. Each component of the JMF light implementation module is designed individually to implement the JMF light API and any internal functions, and to interface with the APIs of the other components of the application. Typically, these components comprise one or more objects forming the application.",{"@attributes":{"id":"p-0059","num":"0058"},"figref":"FIG. 5","b":["206","206","206","206","500","502","504","506","508","510","512","206","206"],"i":["a","a ","a","a ","b ","a "]},"The Playback interface  is the top-level entry point to the API. It provides functions to create a Player object and the implementation of the various media Players. The player implementations provide the methods to control the basic playback functions, such as start, stop, and set media time. The Control interface  provides objects to control other advance playback functions. Examples of such functions are controlling audio gain, data caching, and video frame stepping.","The Event Listener interface  provides the objects to receive update events from the players. The Error List interface  contains the definition of the error classes, and the Exceptions interface  contains the definition of the exception classes. The Events interface  contains the definition of the event classes, while the Protocol Handler interface  provides the classes to handle the data delivery protocols.",{"@attributes":{"id":"p-0062","num":"0061"},"figref":["FIGS. 6A-6G","FIGS. 6A-6G"],"b":"206","i":"a"},{"@attributes":{"id":"p-0063","num":"0062"},"figref":"FIG. 6A","b":"500"},{"@attributes":{"id":"p-0064","num":"0063"},"figref":"FIG. 6B","b":["502","502"]},{"@attributes":{"id":"p-0065","num":"0064"},"figref":"FIG. 6C","b":["504","504"]},{"@attributes":{"id":"p-0066","num":"0065"},"figref":["FIG. 6D","FIG. 6D","FIG. 6E"],"b":["506","506","508"]},{"@attributes":{"id":"p-0067","num":"0066"},"figref":"FIG. 6F","b":["510","510","510"]},{"@attributes":{"id":"p-0068","num":"0067"},"figref":"FIG. 6G","b":["512","512"]},{"@attributes":{"id":"p-0069","num":"0068"},"figref":"FIG. 7","b":["700","702"]},"In operation , a type of implementation requiring access to multimedia content is determined. To design the API, the general type of hardware on which the API will operate is determined. This includes determining the amount of memory and processing power that will be available for use by the API, the API implementation, and the application using the API.","Next, in operation , the API component access parameters are set to synchronous. As mentioned above, the embodiments of the present invention convert all asynchronous operations into synchronous operations to reduce the size of the mobile Java multimedia framework module. The asynchronous model is appropriate when delays are expected during operation of the system, such as when setup operations are required to execute the modules. The synchronous model is appropriate when delays are not expected, or are of short duration. Since mobile devices are generally design to respond quickly with little delay, the embodiments of the present invention preferably do not utilize an asynchronous module to implement the mobile Java multimedia framework module. However, an asynchronous module can be used at the application layer.","In operation , the API components are set to pull only. The embodiments of the present invention convert push data deliver protocols to pull data delivery protocols. In a push data delivery protocol, data is constantly provided, without needing to be requested. Thus, the embodiments of the present invention convert all data delivery to a pull data delivery protocol to further reduce the size of the JMF light API.","In operation , master\/slave functionality is removed from the components of the JMF API. The embodiments of the present invention also remove master\/slave paradigm to reduce the size of the mobile Java multimedia framework module. It should be noted, however, that master\/slave paradigms between program modules can still be created at the application level. Thus, the embodiments of the present invention move the master\/slave relationship functionality from the mobile Java multimedia framework module to the application layer, resulting in a reduction of the mobile Java multimedia framework module size. Moreover, most media content displayed using the mobile Java multimedia framework module includes both audio and video if they are to be run together. In other words, most media is not separated. However, when the master\/slave paradigm is needed, such as when the audio and video are separated, the master\/slave paradigm can be provided at the application level.","The controls for playback are then optimized in operation . Preferably the set of controls included in the framework is reduced to a small set of controls that are directly related to playback on small devices. These include audio gain, caching and video frame positioning controls.","Post process operations are performed in operation . Post process operations include installing the completed API on the native hardware and other post process operations that will be apparent to those skilled in the art. Advantageously, the embodiments of the present invention provide a mobile multimedia framework having a greatly reduced footprint. Hence, the embodiments of the present invention can be efficiently used in mobile devices having reduced processing power and memory.","Although the foregoing invention has been described in some detail for purposes of clarity of understanding, it will be apparent that certain changes and modifications may be practiced within the scope of the appended claims. Accordingly, the present embodiments are to be considered as illustrative and not restrictive, and the invention is not to be limited to the details given herein, but may be modified within the scope and equivalents of the appended claims."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The invention, together with further advantages thereof, may best be understood by reference to the following description taken in conjunction with the accompanying drawings in which:",{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 3","b":"300"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 6A"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 6B"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 6C"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 6D"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 6E"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 6F"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 6G"},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 7"}]},"DETDESC":[{},{}]}
