---
title: System and method for utilizing a common framework for portal administration tools
abstract: The present invention relates to systems, methods, and computer readable media for generating custom administrative tools. An administrative framework is provided that abstracts the implementation of certain administrative functions. A management Application Programming Interface (API) receives calls submitted in a preconfigured format from interface components generated by a developer or third party. The management API processes the calls and performs the functions associated with the calls. Multiple implementations are provided, through which an interface component can access the management API.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08065415&OS=08065415&RS=08065415
owner: Oracle International Corporation
number: 08065415
owner_city: Redwood Shores
owner_country: US
publication_date: 20041008
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["PRIORITY CLAIM","COPYRIGHT NOTICE","FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","DETAILED DESCRIPTION"],"p":["The present application is a nonprovisional of Application No. 60\/571,105, entitled: SYSTEM AND METHOD FOR UTILIZING A COMMON FRAMEWORK FOR PORTAL ADMINISTRATION TOOLS by Inventors: Robert Ritchy, et. al., filed May 14, 2004, the contents of which are hereby incorporated by reference in their entirety.","A portion of the disclosure of this patent document contains material which is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure, as it appears in the Patent and Trademark Office patent file or records, but otherwise reserves all copyright rights whatsoever.","The present invention relates to an architecture for generating administrative tools for web portals. The present invention relates more particularly to the creation and utilization of an architecture layer that abstracts certain functions to enable the easy creation of custom administrative tools.","Since its inception in 1995, the Java programming language has become increasingly popular. Java, which is an interpreted language, enabled the creation of applications which could be run on a wide variety of platforms. This ability to function across a variety of different client platforms and Java's relatively easy implementation of network applications has resulted in its use in endeavors as basic as personal webpages to endeavors as complex as large business-to-business enterprise systems.","As Java has become more commonplace, a wide variety of tools and development platforms have been created to assist developers in the creation and implementation of Java applications and portals, which provide a way to aggregate content and integrate applications, allowing a visitor to a Web site to access the content and applications via a user interface. Particularly, a number of products have arisen to assist in the design of customized web portals that provide tools for managing the portals and previously generated content that can be included in the portals. These products provide graphics, content, sample portlets (applications that run within a portal), and tools for interacting with and modifying the same. One such product is WebLogic Portal by BEA Systems.","One of the most significant features for any portal or group of portals is the ability to be easily modified and configured. While many portal-oriented products include packaged administrative tools, developers and administrators of portals often desire to use their own custom tools. However, doing so involves the replication of many layers of additional code for modifying and administering portals.","What is needed is a means for enabling the easy creation of portal administrative tools.","The present invention relates to systems, methods, and computer readable media for generating custom administrative tools. An administrative framework is provided that abstracts the implementation of certain administrative functions. A management Application Programming Interface (API) receives calls submitted in a preconfigured format from software components generated by a developer or third party. The management API processes the calls and performs the functions associated with the calls. Multiple implementations are provided, through which a software component can access the management API.",{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 1","b":["100","105","110","115","120","120","115","115","110","105","115","105","115","115"]},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 2","b":["225","220","215","210","115","105","115","215","220","210"]},"The JSP  can be a conventional java server page that includes Java code which controls the content viewed on the page. The code is processed by a server storing the JSP, which then presents the content to a remote user as a standard web page. In the present embodiment, the JSP is utilized by an administrator to administer a portal managed by the server . While in the present embodiment, a JSP is used to present an administrative interface, in alternate embodiments any number of arrangements can be used to generate the interface. By way of a non-limiting example, the user interface presented can include one or more of the following: 1) a graphical user interface (GUI); 2) an ability to respond to sounds and\/or voice commands; 3) an ability to respond to input from a remote control device (e.g., a cellular telephone, a personal digital assistant, or other suitable remote control); 4) an ability to respond to gestures (e.g., facial and otherwise); 5) an ability to respond to commands from a process on the same or another computing device; and 6) an ability to respond to input from a computer mouse and\/or keyboard.","The JSP  accepts commands through an interface for various administrative functions. These functions can include the modification, creation, and removal of portals, portlets, books, pages, or any other content, the creation and modification of user and group permissions, and any other functions that might be employed through a portal administrative interface.","The JSP , upon receiving a request through an interface, passes a command to the management API  directly, or through the page flow system  or the tag library . The mechanism through which the JSP  interacts with the API is configured in the JSP as described in . The page flow system  includes groups of files that implement a particular user interface feature. In one embodiment, each interface component implemented through the JSP  has an associated group of files. The page flow system performs tasks such as validating submitted form data or other information submitted from the JSP , submitting a call to the management API , handling flow possibilities that come from the call, and handling the presentation of the resulting page. For example, the page flow system, upon receiving a call from the JSP having particular parameters, such as the creation of a portal instance, verifies that the parameters are properly formatted before passing a call to the management API .","The tag library  stores groupings of common functions performed by applications in association with tags. The JSP  utilizes the tag library by including tags associated with particular functions in its source code. The tag library then utilizes the management API  to implement the functions accessed through the JSP. As indicated above, in some embodiments, the JSP  accesses the management API directly. In these embodiments, the JSP includes its own exception handling, flow management, and validation.","The commands generated through any of the above mechanisms are then passed to the management API , either directly, or through the appropriate intermediaries. The management API  includes a control facade that acts as a front-end for the API  and is configured to receive calls from the tag library , page flow , or JSP , and functional modules that perform the requested functions. The management API  includes functionality for accessing, creating, and modifying portal definitions and accessing, creating, and modifying portal instances. In some instances, upon implementing a call, the management API provides a response, which is then returned directly, or through the tag library  or page flow  to the java server page .",{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 3","b":["225","305","310","315","320","325","315","305","220"],"ul":{"@attributes":{"id":"ul0001","list-style":"none"},"li":["<PortalTools:addPageToBookInstance bookId=\u201d2\u201d","WebAppName=\u201dmyWebApp\u201d","portalPath=\u201dportalPath\u201d","desktopPath=\u201ddesktop Path\u201d\/>"]}},"The JSP may also submit calls through the page flow scripts . In one embodiment, the page flow scripts  are implemented through a page flow FormBean, the output of which is passed to the Page Flow . Shown below is one embodiment of a page flow FormBean. This FormBean would cause an interface element titled \u201cAddNewPageToBook\u201d to be shown and would add a new page to an existing book within a portal in response to a user accessing the interface element. The interface would also accept information for a book ID, a desktop path for the book, and a path for the portal storing the book.\n\n","Additionally, the JSP can access the management API  through direct access methods, where the JSP includes code for contacting the API directly. Shown below is one example of code for adding a page to a book instance that could be used in a JSP to access the management API directly. This code does not include error handling, form validation, or exception handling.\n\n","The implementations for error handling, form validation, flow management, and other functions are preferably provided by a designer of the administrative tools and may use a previously generated framework that includes its own implementation of error handling, form validation, flow management, and other functions.",{"@attributes":{"id":"p-0026","num":"0044"},"figref":"FIG. 4","b":["405","410"]},"In step , the interface is completed. This step entails associating the interface component with an existing interface framework. For example, this step could include placing a menu item or button in an existing portal.",{"@attributes":{"id":"p-0028","num":"0046"},"figref":"FIG. 5","b":["505","510","515","520","515","520"]},"If the call is formatted correctly, in step  the call is passed to the management API. In step  the management API performs the action associated with the call.","Other features, aspects and objects of the invention can be obtained from a review of the figures and the claims. It is to be understood that other embodiments of the invention can be developed and fall within the spirit and scope of the invention and claims.","The foregoing description of preferred embodiments of the present invention has been provided for the purposes of illustration and description. It is not intended to be exhaustive or to limit the invention to the precise forms disclosed. Obviously, many modifications and variations will be apparent to the practitioner skilled in the art. The embodiments were chosen and described in order to best explain the principles of the invention and its practical application, thereby enabling others skilled in the art to understand the invention for various embodiments and with various modifications that are suited to the particular use contemplated. It is intended that the scope of the invention be defined by the following claims and their equivalence.","In addition to an embodiment consisting of specifically designed integrated circuits or other electronics, the present invention may be conveniently implemented using a conventional general purpose or a specialized digital computer or microprocessor programmed according to the teachings of the present disclosure, as will be apparent to those skilled in the computer art.","Appropriate software coding can readily be prepared by skilled programmers based on the teachings of the present disclosure, as will be apparent to those skilled in the software art. The invention may also be implemented by the preparation of application specific integrated circuits or by interconnecting an appropriate network of conventional component circuits, as will be readily apparent to those skilled in the art.","The present invention includes a computer program product which is a storage medium (media) having instructions stored thereon\/in which can be used to program a computer to perform any of the processes of the present invention. The storage medium can include, but is not limited to, any type of disk including floppy disks, optical discs, DVD, CD-ROMs, microdrive, and magneto-optical disks, ROMs, RAMs, EPROMs, EEPROMs, DRAMs, VRAMs, flash memory devices, magnetic or optical cards, nanosystems (including molecular memory ICs), or any type of media or device suitable for storing instructions and\/or data.","Stored on any one of the computer readable medium (media), the present invention includes software for controlling both the hardware of the general purpose\/specialized computer or microprocessor, and for enabling the computer or microprocessor to interact with a human user or other mechanism utilizing the results of the present invention. Such software may include, but is not limited to, device drivers, operating systems, and user applications.","Included in the programming (software) of the general\/specialized computer or microprocessor are software modules for implementing the teachings of the present invention."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 5"}]},"DETDESC":[{},{}]}
