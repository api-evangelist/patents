---
title: Analysis of a sequence of data in object-oriented environments
abstract: A tool for analyzing a sequence of data in an object-oriented environment is disclosed. In an embodiment, the sequence of data may include time-indexed sequence of data (“time series data”). The tool may enable a user to generate a time series object for encapsulating the time series data in the object-oriented environment. The user may construct the time series object from data or mathematical expressions using a command line interface. The time series object may include a sequence of objects implementing APIs that supply an interface for analyzing the times series data in the time series object. The user may analyze the time series data encapsulated in the time series object using the APIs of the time series object.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08631392&OS=08631392&RS=08631392
owner: The MathWorks, Inc.
number: 08631392
owner_city: Natick
owner_country: US
publication_date: 20110923
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"p":["This Application is continuation of U.S. patent application Ser. No. 11\/475,320, which was filed on Jun. 27, 2006. The above-identified application is hereby incorporated by reference in its entirety as though fully set forth herein.","The present invention relates generally to a data analysis tool, and more particularly to a method, system and medium for analyzing a sequence of data in object oriented environments.","Data can be generated and analyzed in an indexed sequence of data. Time series data is a sequence of data measured at successive times spaced apart at time intervals. The time series data can be analyzed to make forecasts or predictions of future events based on known past events. In the financial industry, for example, time series data, such as equity price or interest fluctuations, can provide forecasts or predictions of a future price of a share of stock or interest rate based on the past data.","Non-uniformly sampled time series data may be difficult to analyze because most analytical methods or algorithms such as those used for forecasting, filtering or spectral analysis, assume that a uniform separation of data sample times. Similarly they can be difficult to combine and compare because comparable data will not necessarily occur at exactly the same times. Therefore it is desired to modify time series data through operations, such as re-sampling and interpolation, to overcome these problems. In particular, when data is generated from the multiple tests or simulations of a system, each test or simulation may produce data with it's own time index. Therefore, it is desired to provide a method for representing and analyzing time series data in an easy and efficient manner.","The present invention provides easy and efficient methods of linking time and data when processing and analyzing time series data. For example, operations, such as filtering, Fourier transforming or forecasting timed data, require knowledge of the time stamp of each data sample. Encapsulating the time, data and metadata within a single object simplifies the syntax of a programming language which performs these types of tasks on data by grouping all the required variables in a single entity. Furthermore, the probability of an error in analysis or programming is reduced by maintaining the time and data correctly synchronized at all times.","The present invention provides a data analysis tool for analyzing a sequence of data in an object-oriented environment. An object-oriented environment is a computing environment organized around \u201cobjects\u201d rather than procedures. In the object-oriented environment, programmers define the data type of a data structure and the types of operations and functions that can be applied to the data structure. The data structure becomes an object that includes both data and functions. In addition, programmers can create relationships between one object and another. One of the advantages of the object-oriented environment is that it enables programmers to create modules that do not need to be changed when a new type of object is added.","In an embodiment, the sequence of data may include a time-indexed sequence of data (\u201ctime series data\u201d). The tool may enable a user to generate a time series object for encapsulating the time series data in the object-oriented environment. The user may construct the time series object from data or mathematical expressions using a command line interface. The time series object may include a data array and a time array. The data and time arrays in the time series object may be a numeric array. Alternatively time and data may be represented by a sequence of objects implementing APIs that supply an interface for analyzing the time series data within the time series object. The user may analyze the time series data encapsulated in the time series object using the APIs of the time series object.","In another embodiment of the present invention, a user may create multiple time series objects for storing different sequences of time series data. The present invention may enable the user to create a time series collection object in which one or more time series objects can be grouped or wrapped. In this state the time series objects may store their time vectors in a common time array in the time series collection object. The methods of the time series collection object can be applied to the time series data of each time series object in the time series collection object simultaneously, and hence enable the user to analyze the ensemble of time series data within the time series collection with a single operation.","The data and time arrays of a time series object can be stored as references to external data using a data storage object to represent the connection to the external data source. The data storage object provides a wrapper with a consistent interface for data access APIs specific to each data source. When a user reads or writes data to the data or time arrays of the time series object, the data will be read from or written to the data storage object, which in turn reads or writes data to the data source via the data access API.","Abstraction of a data source can provide the option of storing the data of a time series object in an external data source, such as a database or file. The use of references to external data sources as an alternative to storing the data within the time series object can enable a user to manage memory more efficiently when working with large data sets or with large numbers of time series objects. Furthermore, managing the connection to external data within the time series eliminates the need for the user to manually read or write from an external data source. Abstracting data storage using data storage objects can also be used to optimize the method of storage within the time series object. For example, the storage object can store the data internally to the object-oriented environment in a compressed form using a lossless compression algorithm or mathematical expression to represent the data more succinctly.","In accordance with one aspect of the present invention, a system for analyzing a sequence of data in an object oriented environment. The system includes a constructor for constructing a series object encapsulating the sequence of data. The properties of the object include the sequence of data itself and the indices and metadata associated with the sequence of data. The system also includes an API for manipulating data in the series object to analyze the sequence of data.","In accordance with another aspect of the present invention, a system is provided for analyzing a plurality of sequences of data in an object oriented environment. The system includes a constructor for creating a collection object that includes a first object for encapsulating a first sequence of data and optionally additional objects for encapsulating additional sequences of data. The collection object has properties and methods, wherein the properties of the collection object includes an index vector that is shared by all included sequences of data. The system also includes an API for analyzing the included sequences of data.","In accordance with another aspect of the present invention, a computer-implemented method is provided for analyzing a sequence of data in an object oriented environment. The method provides a series object for encapsulating the sequence of data, wherein the object has properties and methods. The properties of the object include the sequence of data, and the indices and metadata associated with the sequence of data. The sequence of data is analyzed by using the methods of the object.","In accordance with another aspect of the present invention, a computer-implemented method is provided for analyzing a plurality of sequences of data in an object oriented environment. The method provides a collection object that includes a first object for encapsulating a first sequence of data and optionally additional objects for encapsulating additional sequences of data. The collection object has properties and methods, wherein the properties of the collection object includes an index vector that is shared by all included sequences of data. The included sequences of data are analyzed by using the methods of the collection object.","In accordance with another aspect of the present invention, a medium holding computer executable instructions is provided for analyzing a sequence of data in an object oriented environment. The instructions are executed to provide a series object for encapsulating the sequence of data. The object has properties and methods, wherein the properties of the object include the sequence of data, and the indices and metadata associated with the sequence of data. The sequence of data is analyzed by using the methods of the object.","In accordance with another aspect of the present invention, a medium holding computer executable instructions is provided for analyzing a plurality of sequences of data in an object oriented environment. The instructions are executed to provide a collection object that includes a first object for encapsulating a first sequence of data and optionally additional objects for encapsulating additional sequences of data. The collection object has properties and methods, wherein the properties of the collection object includes an index vector that is shared by the included sequences of data. The included sequences of data are analyzed by using the methods of the collection object.","Certain embodiments of the present invention are described below. It is, however, expressly noted that the present invention is not limited to these embodiments, but rather the intention is that additions and modifications to what is expressly described herein also are included within the scope of the invention. Moreover, it is to be understood that the features of the various embodiments described herein are not mutually exclusive and can exist in various combinations and permutations, even if such combinations or permutations are not made express herein, without departing from the spirit and scope of the invention.","The illustrative embodiment of the present invention provides a data analysis tool for analyzing time series data in an object oriented environment. Although the data is indexed with time in the illustrative embodiment, one of ordinary skill in the art will appreciate that the data can be indexed with different quantities, such as frequency and position, in other embodiments. The object-oriented environment may enable a user to create a time series object for encapsulating the time series data. The time series object may include a data array and a time array. The time array may contain the time index of each data in the data array. The time series object may implement APIs that provide an interface for analyzing the time series data in the time series object.","In illustrative embodiment of the present invention, the user may create multiple time series objects for storing different sequences of time series data. The object-oriented environment may enable the user to create a time series collection object in which one or more time series objects can be wrapped or contained. The time series objects may share a common time array in the time series collection. With the time series collection object, the user can analyze multiple sequences of time series data simultaneously.",{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 1","b":["2","2","4","6","4","4","6","4","6","4","4"]},"An exemplary object oriented environment  can be provided by MATLAB\u00ae from The MathWorks, Inc. of Natick, Mass. MATLAB\u00ae is an intuitive language and provides a technical computing environment. The MATLAB\u00ae environment integrates mathematical computing, visualization, and a powerful technical language. MATLAB\u00ae provides core mathematics and advanced graphical tools for data analysis, visualization, and algorithm and application development. MATLAB\u00ae provides a range of computing tasks in engineering and science, from data acquisition and analysis to application development. Built-in interfaces of MATLAB\u00ae enable users to access and import data from instruments, files, and external databases and programs. In addition, MATLAB\u00ae enables the users to integrate external routines written in the C, C++, Fortran, and JAVA programming languages with the MATLAB\u00ae applications.","MATLAB\u00ae supports dynamically typed programming. In a dynamically typed programming environment, types are assigned to each data value in memory at runtime, rather than assigning a type to a static, syntactic entity in the program source code. The dynamically typed programming environment catches errors related to the misuse of values at the time the erroneous statement or expression is executed. In contrast, types are assigned to sets of values based on the program's source code in a statically typed programming environment. Static type disciplines operate on program source code rather than on the program execution. Therefore, in the statically typed programming environment, certain kinds of errors are detected without executing the program.","The object-oriented environment  may provide a tool  for receiving time series data from the data source  and analyzing the time series data to provide a user with useful information on the time series data. The tool  may enable the user to create a time series object for encapsulating the time series data received from the data source . The tool  may also provide functions and methods to support the analysis of the time series data including plotting, descriptive statistics, correlation, interpolation, filtering, Fourier analysis, etc. The tool  is described below in more detail with reference to .","One of ordinary skill in the art will also appreciate that the data source  and the analysis tool  may be provided on the same device, which will be described below in more detail with reference to , or alternatively, the data source  and the object-oriented environment  may be coupled to each other via a communication network, which will be described below in more detail with reference to .",{"@attributes":{"id":"p-0040","num":"0039"},"figref":"FIG. 2","b":["10","10","10"]},"The computing device  may be electronic and include an execution unit , memory , storage , an input control , a modem , a network interface , a display , etc. The execution unit  controls each component of the computing device  to provide the data source , the object-oriented environment  and the analysis tool . The memory  temporarily stores instructions and data and provides them to the execution unit  so that the execution unit  operates the computing device  and runs the analysis tool .","Optionally, the computing device  may include multiple Central Processing Units (CPUs) for executing software loaded in the memory , and other programs for controlling system hardware. Each of the CPUs can be a single or multiple core processor. The code loaded in the memory  may run in a virtualized environment, such as in a Virtual Machine (VM). Multiple VM's may be resident on a single processor. Also, part of the application could be run in hardware, for example, by configuring a field programmable gate array (FPGA) or creating an application specific integrated circuit (ASIC).","The storage  usually contains software tools for applications. The storage  includes, in particular, code  for the operating system (OS) of the device , code  for applications running on the operation system including the object-oriented environment  and the analysis tool , and data  of the data source . Those of ordinary skill in the art will appreciate that the application can be stored in the memory  as well, much like the data, and even the OS, or they can be stored on the network described below with reference to .","The input control  may interface with a keyboard , a mouse , and other input devices. The computing device  may receive through the input control  input data, such as the input data for selecting analysis methods, which will be described below with reference to . The computing device  may display on the display  user interfaces  for generating the time series object and manipulating the time series data in the time series object.",{"@attributes":{"id":"p-0045","num":"0044"},"figref":"FIG. 3","b":["24","24","26","27","28","29","25","16","15","10","26","27","28","29","25","25"]},"In the network environment , the client  may include the data source  and send time series data to the server  for analysis. The server  may include the analysis tool  and perform the analysis of the time series data received from the client . The server  then returns the analysis results to the client  and the client  may subsequently display the data to the user with the analyzed information on the data.",{"@attributes":{"id":"p-0047","num":"0046"},"figref":"FIG. 4","b":["8","8","31","33","35","35","31","31","35","31","33","35","35"]},"Ts=timeseries; Creates an empty time series object","Ts=timeseries (data); Creates a time series object from the variable \u2018data\u2019 with a default time vector where \u2018data\u2019 is either a numeric array or a sequence of objects implementing APIs to access the data.","Ts=timeseries (data,time); Creates a time series object with the specified time vector where \u2018time\u2019 is a numeric array or a cell array of date strings representing the time vector.","Ts=timeseries (data, time, prop1, val1, prop2, val2, . . . ); Creates a time series object with properties assigned as specified where \u2018prop1\u2019, \u2018prop2\u2019, etc are strings describing properties of the time series objects and \u2018val1\u2019, \u2018val2\u2019, etc are the corresponding values of those properties.","Those of ordinary skill in the art will appreciate that the constructor syntax described above is illustrative and other syntaxes may be used in other embodiments of the present invention.",{"@attributes":{"id":"p-0053","num":"0052"},"figref":"FIG. 5","b":["35","33","35","35","36","37","39","38","40","35","36","37","36","41","38","39","40","38","39","40","38","35"]},"In particular, the user may encapsulate the status information  of the time series data in the time series object . These cases often arise if the data in the time series object  is derived from experimental data, databases, communication links etc., where there may a need to distinguish parts of the data using criteria which are not expressed in the numerical values of the data itself. For example, in a data set expressing the results of a sequence of experiments, there may be a need to identify the data associated with some of the experiments as being invalid or suspect without explicitly removing those records from the data set. In another example, if data is recorded from a communication channel, there may be a need to identify parts of the data as being compromised by transmission conditions.","The time series object  enables numeric data to be optionally \u2018tagged\u2019 with an array of integer status values. The status value array may be as large as the numeric data array in the time series object. The integer status values may be drawn from an enumerated list of integers which are paired with text descriptions of their meanings in a look-up table stored within the time series object in another metadata object. An advantage of tagging the status of each data point is that it enables the data to be processed conditionally by the dataset object methods, depending on the status of that data.",{"@attributes":{"id":"p-0056","num":"0055"},"figref":"FIG. 6","b":["51","53","55"]},"Referring back to , the time series object  may also include objects implementing APIs  for providing an interface that enables a user to manipulate and analyze the time series data in the time series object . The APIs  may include functions or methods for manipulating, analyzing, plotting, correlating, interpolating and filtering the data  and time  in the object . The APIs  may provide overloaded methods, such as descriptive statistical methods (mean, median, std, iqr, etc.) which compute statistics on time series data with options to weight data by time interval, signal processing methods (fft, filter, idealfilter, detrend) which process the time series data making explicit use of the encapsulated time vector, and overloaded base MATLAB methods (loadobj, size, end, transpose, isempty, length, plot) which are customized for time series objects.","The APIs  may include functions or methods that enable the user to combine and re-sample time series data in the time series object. Using the APIs , the time series data in the time series object can be re-sampled at different times. Processing of time series data may involve re-sampling operations frequently. For example, a non-uniformly time series may be re-sampled at a uniform rate in order to take a Fourier transform or perform a filtering operation. Two time series that are sampled at different times may be re-sampled onto the same time vector before they can be added together. When re-sampling operations involve adding new samples to the time series for time instants that were not in the original data set, the data corresponding to those new time instants may be estimated from the existing data by interpolating or extrapolating the data. The re-sampling may also apply to the analysis of multi-rate data logged from a simulation system.",{"@attributes":{"id":"p-0059","num":"0058"},"figref":"FIG. 7","b":["41","35","57","59"]},"Since the object  includes information on the interpolation method , the illustrative embodiment enables an automatic interpolation\/extrapolation operation of time series data when re-sampling time series data (step ). In the illustrative embodiment, the time series object stores a function handle defining the interpolation algorithm to be used when that time series is re-sampled by its methods or other calculations. An anonymous function handle or other representation of a mathematical formula can be used to represent the interpolation method to be used. The benefit of linking time series objects and their interpolation algorithms is that the syntax of combining time series objects using methods, such as overloaded arithmetic or re-sampling, is simplified by avoiding the need to specify the interpolation method to be used whenever calculations require resampling, extrapolation or interpolation.",{"@attributes":{"id":"p-0061","num":"0060"},"figref":"FIG. 8","b":["63","67","35","63","65"]},"Referring back to , the time series object may also include APIs for sub-selecting time series data. In many data analysis tasks the first step often selecting a period of interest for further analysis. The illustrative embodiment may provide methods to extract data from the time series object  using time intervals bounded by events . The methods may optionally interpolate time series data at the end points using the interpolation method specified in the time series object .",{"@attributes":{"id":"p-0063","num":"0062"},"figref":"FIG. 9","b":["35","71","73","35"]},"Referring back to , the time series object may also include APIs for sub-referencing time series data for extracting an interval of the time series data. The illustrative embodiment may provide a sub-referencing syntax for extracting time series data from a period of interest. For example the code:",">> ts2=ts1(1:10);","may create a time series object ts2 from the first 10 samples of the time series object ts1. The use of the colon operator for sub-selection is illustrative and other operators can be used for the sub-selection operation. The inverse operation is concatenation. For example:\n\n>> ts3=[ts1; ts2];\n\nmay create a new time series object ts3 by concatenating the samples of ts3 after ts2. The use of the semi-colon operator for the concatenation of time series objects is illustrative and other operators can be used for the concatenation operation.\n",{"@attributes":{"id":"p-0066","num":"0065"},"figref":"FIG. 10","b":["8","75","77","79","79","75","77","79","75","75","79","79"]},"Ts=tscollection(time); Creates a time series collection object with no member time series objects and a common time vector defined by the MATLAB numeric array or cell array or data stings \u2018time\u2019","Ts=tscollection(ts1); Creates a time series collection object based on the time series object \u2018ts1\u2019, i.e., the common time vector is defined by the time vector of \u2018ts1\u2019 and a copy of \u2018ts1\u2019 is the sole member time series of the time series collection.","Ts=tscollection (tscell); Creates a time series collection object based on the cell array of time series objects \u2018tscell\u2019 which have a common time vector, i.e., the tscollection object time vector is the common time vector and the member time series objects are copies of the contents of the cell array \u2018tscell\u2019.","Those of ordinary skill in the art will appreciate that the constructor syntax described above is illustrative and other syntaxes may be used in other embodiments of the present invention.",{"@attributes":{"id":"p-0071","num":"0070"},"figref":"FIG. 11","b":["79","77","79","35","81","83","79","81","83","85"]},"A common reason for assembling time series objects into a time series collection object is to enable time interval(s) to be selected by inspection or analysis of one time series object in the time series collection object, but to have that selection apply to all time series objects in the time series collection object simultaneously. For example, a flight test data set may consist of multiple time series collected from various channels all with a common time vector. The flight data analyst may be interested in only in data (from all time series) collected during the time period when the altitude member time series was between 10,000 ft and 10,500 ft.","Another benefit of using the time series collection object to store multiple member time series data with the same time vector is the memory economy associated with storing the time vector only once, rather than separately for each time series. This centralized time vector storage is implemented in a manner which enables the user\/developer to access and manipulate the time vector from any of the \u2018Time\u2019 properties of the time series collection object member time series objects without being aware of its storage within the time series collection.","The APIs  may provide methods for adding, removing, accessing and listing member time series objects. Examples of the APIs  may include delsamplefromcollection, getsampleusingtime and overloaded sub-referencing and sub-assignment methods provided in MATLAB\u00ae. The APIs  may provide a command line interface that enables time intervals to be used to extract data from all member time series in the time series collection object. The following syntax may be used at the command line (the command line is a string of text written in the command language and is passed to the tool  for execution) to identify a time interval and have the selection apply to all time series in the data set.",">> coll2=coll1(200:245);","The method may find the interval of interest consisting of samples 200-245 and create a new time series collection object coll2 representing all the time series members on the selected time vector coll1.Time(200:245). If the time series collection object coll1 contains time series objects ts1, ts2, etc., then the object coll2 will have the same member time series but restricted to this time interval. The ts1 time series object can be inspected by accessing it using the syntax coll1.ts1, coll2.ts1","In the illustrative embodiment, the data and time arrays of a time series object can be stored in a data storage object that represents a data source .  shows an exemplary object oriented environment that may provide a data storage object  for abstracting the data source . The data storage object  may represent the connection of the time series object data stored in internal or external files (MAT files, spreadsheets, text files), databases, or devices. The files can be MATLAB\u00ae memory mapped files. Abstraction of the data source can provide the option of storing the data of a time series object in an external data source, such as a database or file. The external data source enables a user to work more effectively with large data sets or with large numbers of time series, and can eliminate the need for the user to take explicit manual action to read or write from an external data source. Another advantage of the abstracted data source is the ability to store the data internally to the object-oriented environment in compressed form. The data storage object can be written so that internal data is stored using lossless compression or mathematical expressions in the form of MATLAB\u00ae function handles.",{"@attributes":{"id":"p-0077","num":"0076"},"figref":["FIG. 13","FIG. 12"],"b":["89","91","4","89","93","4","89","93","93","89"]},"The time series data may represent multitude of data, such as time varying ensemble data generated by stochastic simulators, video signals, sound signals, parameter scan data and sensitivity analysis data and mathematical functions of time, in other embodiments. Since the time sampling of each simulation run can be completely different in stochastic simulations, the tool  may re-sample the time series simulation data to a common time vector, usually one with the shortest end time. Once re-sampled, the tool analyzes time series simulation data at every time step of the common time vector to get the mean and standard deviation. This information is used to generate the probability distribution curve as a function of time. Based on how the mean, standard deviation and probability density varies with time, a 3D surface is draped over it by creating a triangulated mesh. The surface is rendered using the color map and the lighting scheme selected by the user. Such a plot provides important information visually like how the mean varies as a function of time, how the spread varies with time, for a given species amount within the spread what the corresponding probability density is. Users can look at the plot and quickly glean critical information like what the mean and standard deviations are at any time, how they vary as a function of time, how the probability density function is distributed at a given time and how it varies with time.","The tool  can also be used to show the results of parameter scan and sensitivity analysis in a single plot. In parameter scan, a parameter is varied from lower to upper limit within its range, to generate similar time varying data. In sensitivity analysis, sensitivity of a state with multiple parameters is computed at any given time, but the parameters themselves can be varying with time. The tool  may depict information on how sensitive the model is to a parameter value, how the sensitivity varies as a function of time and how varying parameters affects simulation results.","It will thus be seen that the invention attains the objectives stated in the previous description. Since certain changes may be made without departing from the scope of the present invention, it is intended that all matter contained in the above description or shown in the accompanying drawings be interpreted as illustrative and not in a literal sense. Practitioners of the art will realize that the sequence of steps and architectures depicted in the figures may be altered without departing from the scope of the present invention and that the illustrations contained herein are singular examples of a multitude of possible depictions of the present invention."],"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION"],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The aforementioned features and advantages, and other features and aspects of the present invention, will become better understood with regard to the following description and accompanying drawings, wherein:",{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":["FIG. 4","FIG. 1"]},{"@attributes":{"id":"p-0023","num":"0022"},"figref":["FIG. 5","FIG. 4"]},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":["FIG. 10","FIG. 1"]},{"@attributes":{"id":"p-0029","num":"0028"},"figref":["FIG. 11","FIG. 10"]},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0031","num":"0030"},"figref":["FIG. 13","FIG. 12"]}]},"DETDESC":[{},{}]}
