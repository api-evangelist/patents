---
title: Configurable rate limiting using static token buckets, and applications thereof
abstract: A system disclosed rate limits API requests. The system includes an API server that receives an API request from a developer application at an API server and a token bucket to rate limit API requests from the developer application. A token query translation module determines a number of tokens needed to process the API request based on a rate configured in predefined policy data for the developer application and a replenish rate of the token bucket. The number of tokens inversely corresponds to the rate configured in the predefined policy data. A token request module instructs the API server to process the API request if the token bucket has sufficient tokens and reduces the number of tokens in the token bucket for the developer application by the number of tokens needed to process the API request. In this way, the disclosed system effectively simulates buckets having configurable replenish rates.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08681630&OS=08681630&RS=08681630
owner: Google Inc.
number: 08681630
owner_city: Mountain View
owner_country: US
publication_date: 20110909
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"p":["This nonprovisional application claims priority to U.S. Provisional Patent Application No. 61\/385,018 filed Sep. 21, 2010, which is incorporated herein by reference in its entirety.","1. Field","This field is generally related to rate limiting.","2. Related Art","Servers provide application programming interfaces (APIs) available to software program code written by external developers, often over one or more networks such as the Internet. These servers may receive a request, such as a web service request, from a developer application and provide a response to the request. Example services available through network APIs include returning search results and translating between languages.","If developer applications send too many API requests, the API servers may be overwhelmed. For this reason, API service providers generally limit the rate at which a developer application can use an API. Verifying that an application's limit has not been exceeded generally must occur before an API request is processed. Thus, if this verification is not conducted rapidly, the API server's response time may be unacceptably slowed.","To enforce rate limits, many API service providers use token bucket algorithms. As an example, a token bucket algorithm may operate as follows to limit the number of requests processed each second. The token bucket algorithm maintains a bucket that includes between 0 and Y tokens. Every second, the algorithm may add X tokens (referred to herein as the replenish rate) back to the bucket, capping the number of tokens at Y. Every time a request is made, an attempt is made to remove a token from the bucket. If the bucket only includes zero tokens, the request is denied. The maximum request rate may be altered by changing the X and Y values. In this way, the token bucket algorithm may limit the number of requests from developer applications over a time period.","Embodiments enable configurable rate limiting of API accesses using static token buckets. In a first embodiment, a computer-implemented method rate limits API requests. In the method, an API request is received at an API server from a developer application. A number of tokens needed to process the API request is determined based on a rate configured in predefined policy data for the developer application and a replenish rate of a token bucket to rate limit API requests from the developer application. The number of tokens inversely corresponds to the rate configured in the predefined policy data. In response to receipt of the API request, a number of tokens in the token bucket for the developer application is reduced by the number of tokens needed to process the API request. Also, if a number of tokens in the token bucket for the developer application exceeds the number of tokens needed to process the API request, the API request is processed to return a response to the API request to the developer application","In a second embodiment, a system rate limits API requests. The system includes an API server that receives an API request from a developer application. The system further includes a token bucket to rate limit API requests from the developer application. A token query translation module determines a number of tokens needed to process the API request based on a rate configured in predefined policy data for the developer application and a replenish rate of the token bucket. The number of tokens inversely corresponds to the rate configured in the predefined policy data. A token request module instructs the API server to process the API request if a number of tokens in the token bucket for the developer application exceeds the number of tokens needed to process the request. The token request module also reduces the number of tokens in the token bucket for the developer application by the number of tokens needed to process the API request.","In a third embodiment, a computer-implemented method rate limits API requests. In the method, a first API request is received from a developer application at an API server. A first number of tokens needed to process the API request is determined based on a rate configured in predefined policy data for the developer application and a replenish rate of a token bucket to rate limit API requests from the developer application. The number of tokens inversely corresponds to the rate configured in the predefined policy data. In response to receipt of the API request, if a number of tokens in the token bucket for the developer application exceeds the first number of tokens needed to process the first API request, the first API request is processed to return a response to the first API request to the developer application. Also, the number of tokens in the token bucket for the developer application is reduced by the first number of tokens needed to process the API request. The rate configured in the predefined policy data for the developer application is altered. A second API request is received from the developer application. A second number of tokens needed to process the second API request is determined based on the altered rate and the replenish rate of the token bucket. The second number of tokens differs from the first number of tokens and inversely corresponding to the altered rate. In response to the second API request, if the number of tokens in the token bucket for the developer application exceeds the second number of tokens needed to process the request determined, the second API request is processed to return a result of the second API request to the developer application. Also, the number of tokens is reduced in the token bucket for the developer application by the second number of tokens.","In a fourth embodiment, a system rate limits API requests. The system includes an API server that receives an API request from a developer application. A token query translation module determines a number of tokens needed to process the API request based on a rate configured in predefined policy data for the developer application and a replenish rate of a token bucket. The number of tokens inversely corresponds to the rate configured in the predefined policy data. The token query translation module also sends a token request including the number of tokens to a token bucket server that returns whether the token bucket has greater than the determined number of tokens. The API server processes the API request to return a response to the API request to the developer application if the token bucket server indicates that the token bucket has greater than the determined number of tokens.","In a fifth embodiment, a system rate limits network requests. In the method, a request is receiving at a server from a developer application via a network. A number of tokens needed to process the request is determined based on a rate configured in predefined policy data for the developer application and a replenish rate of a token bucket to rate limit requests from the developer application. The number of tokens inversely corresponds to the rate configured in the predefined policy data. In response to receipt of the request, a number of tokens in the token bucket for the developer application is reduced by the number of tokens needed to process the request determined. Also, if the number of tokens in the token bucket for the developer application exceeds the number of tokens needed to process the request, the request is processed to return a response to the request to the developer application.","In this way, the developer application is rate limited according to the rate configured in the predefined policy data by determining a number of tokens needed to process the API request. Further, varying the first number of tokens for the first API request and the second number of tokens for the second API request effectively changes the rate limit for the developer application regardless of the replenish rate of the token bucket.","Further embodiments, features, and advantages of the invention, as well as the structure and operation of the various embodiments of the invention are described in detail below with reference to accompanying drawings.","The drawing in which an element first appears is typically indicated by the leftmost digit or digits in the corresponding reference number. In the drawings, like reference numbers may indicate identical or functionally similar elements.","Embodiments enable configurable rate limiting of API accesses using static token buckets. In examples, a user, such as a developer, may configure a rate at which a developer application may access the API. In an embodiment, instead of altering the bucket size to configure the API rate limit, the number of tokens requested for each API request from the may vary. In this way, the server that manages the token buckets does not need to incorporate the added complexity that would result from enabling the user to alter the token buckets. This reduced complexity may improve performance. This and other embodiments are described below with reference to accompanying drawings.",{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 1A","b":["100","100","100","102","104","106","116","118"]},"Customer servers  and  may have developer applications that utilize an API external to customer servers  and , such as an API provided by API server . In examples, customer servers  and  may provide websites that integrate services from the API server . For example, the customer servers  and  may provide websites that incorporate maps, search results, or advertisements retrieved from API server .","API server  may process any type of API. In examples, API server  may accept API requests over one or more networks, such as the Internet. The request may be formatted as a web service request utilizing, for example, extensible markup language (XML). Example applications that may be provided by API server  include, but are not limited to, a search API (e.g., a GOOGLE search API), a language translation API (e.g., a GOOGLE translator toolkit API), an API to retrieve advertisements (e.g., a GOOGLE ADSENSE API), geographic information system API (e.g., a GOOGLE maps API), a video player API (e.g., a YOUTUBE API), and a file server request for a file. API server  may service requests from developer applications located on remote servers, such as customer servers  and . In response to an API request, API server  may verify that a developer application has not exceeded its request quota and, if its quota is not exceeded, may service the request.","To verify that a developer application has not exceeded its request quota, API server  may implement policies using token buckets of varying size. API server  may maintain a bucket to track the usage of a developer application. The bucket may include a maximum number of tokens. During a particular time period, API server  may add a number tokens back to the bucket, as specified by a replenish rate of the bucket. However, each bucket may not be allowed to have more tokens than its maximum bucket size. Every time a request is made, API server  may attempt to remove a token from the bucket. If the bucket only includes zero tokens, API server  may deny an API request. To implement different policies for different developer applications, API server  may have token buckets with different sizes and replenish rates for each developer application, as illustrated with token buckets  and .","Token buckets  and  track API usage of developer applications at customer servers  and  respectively. As mentioned above, to process a request from a developer application, API server  may deduct a token from a token bucket for the developer application. For each request, API server  may deduct a single token. The diagram in  illustrates this in operation. Customer server  makes three API requests , and customer server  makes five API requests . To process these requests, API server  requests three tokens from token bucket  and five tokens from token bucket  respectively.","The developer applications may have subscribed to different levels of service for the API. For that reason, token buckets  and  have different replenish rates. Token bucket  has a replenish rate of 100 tokens per day, allowing an average of 100 requests per day, and token bucket  has a replenish rate of 20 tokens per day, allowing an average of 20 requests per day. In an example, the tokens may be added continuously. In that example, token bucket  may receive a new token every one hundredth of a day (or every 14.4 minutes), and token bucket  may receive a new token every one twentieth of a day (or every 1.2 hours).","While this approach has advantages, there are issues associated with varying the bucket size for different developers. For example, having different bucket sizes requires that tokens be added at different rates. This may require additional processing. Further, a user may want to change a service level for a developer application. This may also require additional processing. The additional processing may slow down verification of compliance with a developer's quota. API server  generally must verify that a developer application has not exceeded its quota before processing the API request and returning a result. Thus, slower verification may mean a slower response from API server  at customer servers  and .","At least in part to deal with these problems, embodiments do not vary the size of the token bucket to implement rate limits. Instead, embodiments vary the number of tokens requested from the token bucket. This embodiment is illustrated in .",{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 1B","b":["150","100","150","104","106","104","108","102","104","110","102","108","110"]},"In contrast to system , in system  API server  includes a token query translation module . Token query translation module  enforces a service level for a developer application by determining how many tokens needed to process an API request. Token query translation module  may, for example, use policy data to determine the number of requests allowed for a period. Token query translation module  may determine a number of requests by dividing the number of allowed requests by the replenish rate of the bucket. Token query translation module  may determine how many tokens are needed to process a single API request.","In system , API server  may have a token bucket for each developer application on customer server  and . Token bucket  may correspond to a developer application on customer server , and token bucket  may correspond to a developer application on customer server . Both token bucket  and  have the same replenish rate\u2014100 tokens per day. Having the same replenish rate may improve efficiency.","Despite having different replenish rates for their token buckets, systems  and  enforce the same API rate limits. In both system  and , the developer application on customer server  is allowed 100 requests per day, and the developer application on customer server  is allowed 20 requests per day. Because the replenish rate for token bucket  is the same as the API request rate for customer server , token query translation module  makes a request  to deduct one token to process each of the three API requests.","However, because the replenish rate for token bucket  (100 tokens\/day) is larger than API request rate for customer server  (20 request\/day), token query translation module  must request more than one token for each request. Specifically, to enforce the 20 request per day rate limit, token query translation module  must request five tokens for each API request. To service five API requests , token query translation module  makes request(s)  to deduct  tokens from token bucket . In this way, token bucket query translation module  effectively simulates a bucket with a replenish rate different from the rate of token bucket .","In the example in system , the API rate limit of customer server  (20\/day) is a factor of the replenish rate of token bucket  (100\/day). However, the same principle may apply when dividing the replenish rate by the API rate limit results in a remainder. In that embodiment, token query translation module  may divide the replenish rate by the API rate and round down. In other words, token query translation module  may determine the quotient of the replenish rate into the API rate and take the floor of the quotient.","For example, if the API rate limit was 30 requests per day, token query translation module  may divide the 100\/day replenish rate by the 30\/day API rate limit and round down the remaining tractional portion (floor(100\/30)). Thus, token query translation module  would request three (3) tokens for each API request. However, due to a rounding error, this would effectively allow the 33 requests per day, exceeding the policy limit of 30 requests\/day. However, the risk of allowing a few extra requests may be outweighed by the efficiency gains of having a constant bucket replenish rate.","Further, the rounding error may be reduced by increasing the ratio of the bucket replenish rate to the API rate limit. For example, if the bucket replenish rate is 1,000,000 times the maximum API rate limit, API server  may allow at most (the API rate limit)*1.000001 requests. In this way, potential rounding inaccuracies are reduced. Reducing rounding inaccuracies is discussed in further detail below.","Simulating buckets in this way may be particularly advantageous when the actual token buckets are managed by a server separate from token query translation module . In this way, the processing necessary to determine how many tokens are needed to process an API request may be separate from, and may not interrupt, the processing necessary to manage the token buckets. An example of this embodiment is illustrated in .",{"@attributes":{"id":"p-0043","num":"0042"},"figref":["FIG. 2","FIG. 1B","FIG. 2","FIGS. 3-5"],"b":["200","150","200","102","152","200","102","220","200","204","206","210","214","202"]},"Developer console server  enables a user to configure the policy data, including rate limits, for the developer application. Developer console server  may, for example, be a web server that offers an interface that enables a user to register a new developer application. The interface may also enable a user to alter API request rate limits for the developer application. Based on the user's selections, the developer console server  may send policy data to a policy database  for storage.","Once an API request policy for a developer application is configured, the developer application may be deployed for use on the customer server . Multiple customer servers  are shown in system  to illustrate that an API may be used by many different developer applications. With the developer application deployed, the developer application may send a request to API server  to invoke the API. Token query translation module  determines a number of tokens needed to process the API request based on a rate configured in predefined policy data for the developer application and a replenish rate of the token bucket. As described above, the number of tokens may correspond inversely to the rate configured in the predefined policy data and may correspond to the replenish rate of the token bucket. To retrieve the policy data, token query translation module  may first check policy cache .","Policy cache  caches policy data. If policy data for a developer application is not stored in policy cache , token query translation module  may request the policy data from policy server . Once policy server  retrieves the data from policy database  and returns the data, token query translation module  may use the policy data to determine how many tokens to request and may store the policy data in policy cache . In an embodiment, policy data in policy cache  may expire after a particular time period, such as five minutes. In this way, the data in policy cache  is never more than approximately five minutes out of sync with data in policy database .","Once token query translation module  determines how many tokens are needed to process the request, API server  requests the needed tokens from token bucket server . In response to the request, token bucket server  identifies which token bucket  corresponds to the request. Then, token bucket server  instructs API server  to process the API request if the number of tokens in the identified token bucket  exceeds the number of tokens in the request. Further, token bucket server  reduces the number of tokens in the identified token bucket  by the number of tokens needed to process the API request. In this way, token bucket server  uses token buckets  to rate limit API requests from a developer application.",{"@attributes":{"id":"p-0048","num":"0047"},"figref":["FIG. 3","FIG. 3","FIG. 2","FIGS. 4-5"],"b":["200","200","300","200","300","204","102","152","316","220","206","208","210","214","300","204","304","102","316","210","310","214","314"]},{"@attributes":{"id":"p-0049","num":"0048"},"figref":"FIG. 4","b":["400","300","400","300"]},"Developer console module  may enable a user to configure the policy data, including rate limits, for the developer application at step . Developer console module  may offer an interface that enables a user to register a new developer application and to alter API request rate limits for the developer application. The interface may enable a user to select a service level. Each service level may have three associated rate limits\u2014requests per second, request per day, and dollars per day. Different types of API requests may have different dollar values. At step , developer console module  receives the developer's service level selection for the developer application's use of the API.","Once developer console module  receives the user's service level selection, developer console module  stores policy data, including the API rate limits, in policy database . As mentioned above, in some embodiments, there may be three different rate limits associated with an API\u2014requests per second, request per day, and dollars per day. In another embodiment, a rate limit associated with an end user of a developer application may also be imposed. Each rate may be stored as policy data for the developer application in policy database.","In the event that the user is registering a new developer application, such as developer application , to use the API, developer console module  may instantiate new token buckets  for the developer application. The different replenish rates may vary exponentially (such as in orders of 10, e.g., 10, 10, 10, etc.) to simulate buckets of different replenish rates. In an embodiment, developer console module  may alter a size (as opposed to a replenish rate) of the token buckets  corresponding to developer application . In an example, developer console module  may set the size of token buckets  to be a factor of the replenish rate. For example, developer console module  may set the size of token buckets  to be 10 times the bucket's corresponding replenish rate. To avoid having to alter token buckets  each time a developer changes service level, the token buckets having a variety of different sizes (e.g., 10, 10, 10) may be instantiated in advance.","once a user has used the developer console module  to register developer application , the user may deploy developer application  on customer server . As mentioned above, developer application  may incorporate maps, search results, or advertisements retrieved from API server . In an embodiment, developer application  may call the API from customer server . For example, developer application  may run within a web server and call the API to determine what content to generate to respond to an HTTP request. In another embodiment, developer application  may be a client-side script or program, such as a Flash file, a mobile application, or a JavaScript program (e.g., an Asynchronous JavaScript and XML (AJAX) program). In that embodiment, developer application  may be downloaded to a client device, and developer application  may make API requests from the client device.","Irrespective of where the request is made from, an event of developer application  is initiated at step , requiring call to the API. Developer application  sends an API request  to API server . As mentioned above, API request  may be formatted as an HTTP or web service request.","On receipt of API request , API server  may verify that API request  is within a quota for developer application  at step . Step  is described in more detail with respect to . If API request  is within the allowed quota at decision block , API module  may process API request  and send an API response  back to developer application  at step . If API request  is not within the allowed quota at decision block , API module  may process API request  and send an API response  back to developer application  at step .",{"@attributes":{"id":"p-0056","num":"0055"},"figref":"FIG. 5","b":["500","300","500","300"]},"Method  begins at a step  when API server  receives an API request  from a developer application. In addition to any parameters necessary to use the API, API request  may include an identifier for the developer application. In some embodiments, API request  may also include an identifier for an end user of the developer application.","Once API request  is received, API server  checks to see if policy data needed to verify that API request  complies with request quotas is cached locally at step . In an example, API server  may query policy cache  using the developer application identifier received in API request . If policy cache  has the policy data, method  proceeds to step . Otherwise, method  proceeds to step  to send a policy request  to policy server .","At step , policy request module  receives policy request . Policy request module  retrieves policy data for developer application from policy database  and replies to policy request  with policy data . Policy data  may include various API rate limits for developer application . For example, as mentioned above, policy data  may include rate limits for requests\/day, requests\/second, and dollars\/day. In a further embodiment, policy request  may identify an end user of developer application , and policy data  may include a rate limit for that specific end user (e.g., requests by end user X\/day). For each rate limit, policy data  may be used to compute an associated bucket size. As set forth below, the associated bucket size may be used to identify which of several predefined token buckets  may be used to rate limit developer application . At step , policy server  returns policy data  to API server , and API server  caches policy data .","After receiving policy data (either from policy server  or from policy cache ), token query translation module  determines the token requests needed to enforce the policy data's rate limits at step . As described above, token query translation module  determines the number of tokens to simulate buckets as set forth in the policy data. To simulate token buckets as specified by the policy data, the number of tokens determined by token query translation module  corresponds to a replenish rate of the corresponding actual token bucket, and corresponds inversely to the API rate. As mentioned above, in an embodiment the policy data may include multiple API rate limits (e.g., requests\/day, requests\/second, and dollars\/day).","After determining the number of tokens needed to enforce each API rate limit, token query translation module  assembles and sends a token request  to token bucket server . For each API rate limit in the policy data, token request  may identify a token bucket  and a number of tokens to request from the identified token bucket . As mentioned above, in an embodiment, each API rate limit may have an number of predefined buckets of varying size (e.g., 10, 10, 10, etc.) In identifying a token bucket , token request  may indicate a size of the bucket to use. Thus, token request  may identify the developer application , an API requested by developer application  and, for each type of API rate limit, a number of tokens to request and a size of the token bucket. An example token request  for a developer application \u201cRealtor\u201d and an API \u201cMaps\u201d may be formatted as follows:","Developer=\u201cRealtor\u201d; API=\u201cMaps\u201d; Bucket Type=\u201cRequest\/Day\u201d; Size=10; Tokens: 30","Developer=\u201cRealtor\u201d; API=\u201cMaps\u201d; Bucket Type=\u201cRequest\/Second\u201d; Size=10; Tokens: 400","Developer=\u201cRealtor\u201d; API=\u201cMaps\u201d; Bucket Type=\u201cDollars\/Day\u201d; Size=10; Tokens: 6500.","Once token request  is received by token bucket server , token request module  determines whether the token bucket(s) specified in token request  have sufficient tokens at step . If the specified token bucket(s) have sufficient tokens, token request module  may deduct the needed tokens from the specified token bucket  at step , and may send a success notification in a token response  at step . The success notification indicates that a rate limit for developer application  has not been exceeded. In contrast, if any of the specified token buckets have insufficient tokens, token request module  may send a failure notification in token response . The failure notification indicates that a rate limit for developer application  has been exceeded.","In an example, token request module  may receive a token request  formatted as illustrated above. In that example, token request module  would identify three token buckets from token buckets . The first token bucket tracks the number of \u201cMaps\u201d API requests from the \u201cRealtor\u201d developer application per day and has a maximum bucket size of 10tokens. From the first token bucket, token request module  would deduct  tokens. The second token bucket tracks the number of \u201cMaps\u201d API requests from the \u201cRealtor\u201d developer application per second and has a maximum bucket size of 10tokens. From the second token bucket, token request module  would deduct  tokens. Finally, the third token bucket tracks the number of dollars worth of \u201cMaps\u201d API usage from the \u201cRealtor\u201d developer application per day and has a maximum bucket size of 10tokens. From the third token bucket, token request module  would deduct  tokens. Token request module  would send a success notification at step  only if each of the three token buckets had sufficient tokens (i.e., the first token bucket has at least 30 tokens; the second token bucket has at least 400 tokens; and the third token bucket has at least 6500 tokens.)","In response to a success notification in token response , an API module  may process API request  to provide API response .","In response to a failure notification in token response , an API module  may send message in API response  indicating that the developer application 's quota had been exceeded.","In this way, system  rate limits API calls from developer application  in an easily configurable way. However, the bulk of the processing to handle the configuration occurs outside of token bucket server , and, therefore, does not consume token bucket server 's computing resources, such as processor time and memory. As result, response times for token bucket server  may be improved. As result of the improved response times for token bucket server , API server  may respond to API requests more quickly as well.",{"@attributes":{"id":"p-0070","num":"0069"},"figref":["FIG. 6","FIGS. 1-3"],"b":["600","300","600"]},"Each of customer server , API server , token bucket server , policy server , and developer console server  may be implemented on any computing device. Such computing device may include one or more processors , one or more non-volatile storage mediums , one or more memory devices , a communication infrastructure , a display screen  and a communication interface . Processors  may include any conventional or special purpose processor, including, but not limited to, digital signal processor (DSP), field programmable gate array (FPGA), and application specific integrated circuit (ASIC). Non-volatile storage  may include one or more of a hard disk drive, flash memory, and like devices that may store computer program instructions and data on computer-readable media. One or more of non-volatile storage device  may be a removable storage device. Memory devices  may include one or more volatile memory devices such as but not limited to, random access memory. Communication infrastructure  may include one or more device interconnection buses such as Ethernet, Peripheral Component Interconnect (PCI), and the like. The computing device may also have multiple processors and multiple shared or separate memory components. For example, the computing device may be a clustered computing environment or server farm.","Typically, computer instructions are executed using one or more processors  and can be stored in non-volatile storage medium  or memory devices .","Display screen  allows results of the computer operations to be displayed to a user or an application developer.","Communication interface  allows software and data to be transferred between computer system  and external devices. Communication interface  may include a modem, a network interface (such as an Ethernet card), a communications port, a PCMCIA slot and card, or the like. Software and data transferred via communication interface  may be in the form of signals, which may be electronic, electromagnetic, optical, or other signals capable of being received by communication interface . These signals may be provided to communication interface  via a communications path. The communications path carries signals and may be implemented using wire or cable, fiber optics, a phone line, a cellular phone link, an RF link or other communications channels.","Embodiments also may be directed to computer program products comprising software stored on any computer-useable medium. Such software, when executed in one or more data processing device, causes a data processing device(s) to operate as described herein. Embodiments of the invention employ any computer-useable or readable medium. Examples of computer-useable mediums include, but are not limited to, primary storage devices (e.g., any type of random access memory), secondary storage devices (e.g., hard drives, floppy disks, CD ROMS, ZIP disks, tapes, magnetic storage devices, and optical storage devices, MEMS, nanotechnological storage device, etc.).","As described above, to determine the number of tokens to request R for an API rate limit of N and a replenish rate of S, the following equation may be used: R=floor(S\/N). However, due to rounding errors, this approach may allow more requests than is supposed to be allowed by rate limit R. This inaccuracy in allowing extra requests is defined by p in the equation S<NpR, where p is just greater than 1. In this equation, fewer than Np requests will succeed.","As described above, the inaccuracy may be reduced by increasing the ratio of the bucket replenish rate to the API rate limit. If an error rate of p=1.00001 is acceptable, that error rate may be satisfied by S\u226710N. This is shown by the following equations: R\u226710\u2192Rp\u2267R+1\u2192RpN>=(R+1)N>S (the last step since S\/N<floor(S\/N)+1).","In an alternative embodiment, to determine the number of tokens to request R, S\/N may not always be rounded down. To determine R, S\/N may be rounded up some of the time and rounded down other times. As an example, S=100\/N=30 may be computed using a random number generator to return three 70% of the time and to return four 30% of the time, so that the average return value is 3.3333. This embodiment may include a similar set of ascending bucket sizes, and some Chernoff bound techniques, to guarantee accurate performance in all cases. While this method may reduce the issues with allowing extra requests, its accuracy may vary widely across cases, and it may increase the processing requirements to make the token request. The increased processing requirements may slow API response time.","In examples above, one or three buckets are generally used for each API request. However, a person of skill in the art would recognize that embodiments are not limited thereto. Other numbers of buckets may be used, and those buckets may track different characteristics.","Finally, example embodiments above refer to API requests. However, embodiments are not limited thereto. A person of skill in the art would recognize that the rate limiting disclosed herein may be applied to other types of network requests.","The Summary and Abstract sections may set forth one or more but not all exemplary embodiments of the present invention as contemplated by the inventor(s), and thus, are not intended to limit the present invention and the appended claims in any way.","The present invention has been described above with the aid of functional building blocks illustrating the implementation of specified functions and relationships thereof. The boundaries of these functional building blocks have been arbitrarily defined herein for the convenience of the description. Alternate boundaries can be defined so long as the specified functions and relationships thereof are appropriately performed.","The foregoing description of the specific embodiments will so fully reveal the general nature of the invention that others can, by applying knowledge within the skill of the art, readily modify and\/or adapt for various applications such specific embodiments, without undue experimentation, without departing from the general concept of the present invention. Therefore, such adaptations and modifications are intended to be within the meaning and range of equivalents of the disclosed embodiments, based on the teaching and guidance presented herein. It is to be understood that the phraseology or terminology herein is for the purpose of description and not of limitation, such that the terminology or phraseology of the present specification is to be interpreted by the skilled artisan in light of the teachings and guidance.","The breadth and scope of the present invention should not be limited by any of the above-described exemplary embodiments, but should be defined only in accordance with the following claims and their equivalents."],"BRFSUM":[{},{}],"heading":["BACKGROUND","BRIEF SUMMARY","DETAILED DESCRIPTION OF EMBODIMENTS","Additional Examples and Alternatives"],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE FIGURES","p":["The accompanying drawings, which are incorporated herein and form a part of the specification, illustrate the present invention and, together with the description, further serve to explain the principles of the invention and to enable a person skilled in the pertinent art to make and use the invention.",{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 1A"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 1B"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":["FIG. 3","FIG. 2"]},{"@attributes":{"id":"p-0021","num":"0020"},"figref":["FIG. 4","FIG. 2"]},{"@attributes":{"id":"p-0022","num":"0021"},"figref":["FIG. 5","FIG. 2"]},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 6"}]},"DETDESC":[{},{}]}
