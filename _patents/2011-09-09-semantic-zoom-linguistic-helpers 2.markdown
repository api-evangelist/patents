---
title: Semantic zoom linguistic helpers
abstract: Semantic zoom techniques are described. In one or more implementations, techniques are described that may be utilized by a user to navigate to content of interest. These techniques may also include a variety of different features, such as to support semantic swaps and zooming “in” and “out.” These techniques may also include a variety of different input features, such as to support gestures, cursor-control device, and keyboard inputs. A variety of other features are also supported as further described in the detailed description and figures.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09557909&OS=09557909&RS=09557909
owner: Microsoft Technology Licensing, LLC
number: 09557909
owner_city: Redmond
owner_country: US
publication_date: 20110909
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DETAILED DESCRIPTION","Example Environment","Example Procedures","Example System and Device","CONCLUSION"],"p":["Users have access to an ever increasing variety of content. Additionally, the amount of content that is available to a user is ever increasing. For example, a user may access a variety of different documents at work, a multitude of songs at home, story a variety of photos on a mobile phone, and so on.","However, traditional techniques that were employed by computing devices to navigate through this content may become overburdened when confronted with the sheer amount of content that even a casual user may access in a typical day. Therefore, it may be difficult for the user to locate content of interest, which may lead to user frustration and hinder the user's perception and use of the computing device.","Semantic zoom techniques are described. In one or more implementations, techniques are described that may be utilized by a user to navigate to content of interest. These techniques may also include a variety of different features, such as to support semantic swaps and zooming \u201cin\u201d and \u201cout.\u201d These techniques may also include a variety of different input features, such as to support gestures, cursor-control device, and keyboard inputs. A variety of other features are also supported as further described in the detailed description and figures.","This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter, nor is it intended to be used as an aid in determining the scope of the claimed subject matter.","Overview","The amount of content that even casual users access in a typical day is ever increasing. Consequently, traditional techniques that were utilized to navigate through this content could become overwhelmed and result in user frustration.","Semantic zoom techniques are described in the following discussion. In one or more implementations, the techniques may be used to navigate within a view. With semantic zoom, users can navigate through content by \u201cjumping\u201d to places within the view as desired. Additionally, these techniques may allow users to adjust how much content is represented at a given time in a user interface as well as the amount of information provided to describe the content. Therefore, it may provide users with the confidence to invoke semantic zoom to jump, and then return to their content. Further, semantic zoom may be used to provide an overview of the content, which may help increase a user's confidence when navigating through the content. Additional discussion of semantic zoom techniques may be found in relation to the following sections.","In the following discussion, an example environment is first described that is operable to employ the semantic zoom techniques described herein. Example illustrations of gestures and procedures involving the gestures and other inputs are then described, which may be employed in the example environment as well as in other environments. Accordingly, the example environment is not limited to performing the example techniques. Likewise, the example procedures are not limited to implementation in the example environment.",{"@attributes":{"id":"p-0031","num":"0030"},"figref":["FIG. 1","FIGS. 19 and 20"],"b":["100","100","102","102","102"]},"Accordingly, the computing device  may range from full resource devices with substantial memory and processor resources (e.g., personal computers, game consoles) to a low-resource device with limited memory and\/or processing resources (e.g., traditional set-top boxes, hand-held game consoles). The computing device  may also relate to software that causes the computing device  to perform one or more operations.","The computing device  is also illustrated as including an input\/output module . The input\/output module  is representative of functionality relating to inputs detected by the computing device . For example, the input\/output module  may be configured as part of an operating system to abstract functionality of the computing device  to applications  that are executed on the computing device .","The input\/output module , for instance, may be configured to recognize a gesture detected through interaction with a display device  (e.g., using touchscreen functionality) by a user's hand . Thus, the input\/output module  may be representative of functionality to identify gestures and cause operations to be performed that correspond to the gestures. The gestures may be identified by the input\/output module  in a variety of different ways. For example, the input\/output module  may be configured to recognize a touch input, such as a finger of a user's hand  as proximal to a display device  of the computing device  using touchscreen functionality.","The touch input may also be recognized as including attributes (e.g., movement, selection point, and so on) that are usable to differentiate the touch input from other touch inputs recognized by the input\/output module . This differentiation may then serve as a basis to identify a gesture from the touch inputs and consequently an operation that is to be performed based on identification of the gesture.","For example, a finger of the user's hand  is illustrated as being placed proximal to the display device  and moved to the left, which is represented by an arrow. Accordingly, detection of the finger of the user's hand  and subsequent movement may be recognized by the input\/output module  as a \u201cpan\u201d gesture to navigate through representations of content in the direction of the movement. In the illustrated instance, the representations are configured as tiles that are representative of items of content in a file system of the computing device . The items may be stored locally in memory of the computing device , remotely accessible via a network, represent devices that are communicatively coupled to the computing device , and so on. Thus, a variety of different types of gestures may be recognized by the input\/output module , such a gestures that are recognized from a single type of input (e.g., touch gestures such as the previously described drag-and-drop gesture) as well as gestures involving multiple types of inputs, e.g., compound gestures.","A variety of other inputs may also be detected and processed by the input\/output module , such as from a keyboard, cursor control device (e.g., mouse), stylus, track pad, and so on. In this way, the applications  may function without \u201cbeing aware\u201d of how operations are implemented by the computing device . Although the following discussion may describe specific examples of gesture, keyboard, and cursor control device inputs, it should be readily apparent that these are but a few of a variety of different examples that are contemplated for use with the semantic zoom techniques described herein.","The input\/output module  is further illustrated as including a semantic zoom module . The semantic zoom module  is representative of functionality of the computing device  to employ semantic zoom techniques described herein. Traditional techniques that were utilized to navigate through data could be difficult to implement using touch inputs. For example, it could be difficult for users to locate a particular piece of content using a traditional scrollbar.","Semantic zoom techniques may be used to navigate within a view. With semantic zoom, users can navigate through content by \u201cjumping\u201d to places within the view as desired. Additionally, semantic zoom may be utilized without changing the underlying structure of the content. Therefore, it may provide users with the confidence to invoke semantic zoom to jump, and then return to their content. Further, semantic zoom may be used to provide an overview of the content, which may help increase a user's confidence when navigating through the content. The semantic zoom module  may be configured to support a plurality of semantic views. Further, the semantic zoom module  may generate the semantic view \u201cbeforehand\u201d such that it is ready to be displayed once a semantic swap is triggered as described above.","The display device  is illustrated as displaying a plurality of representations of content in a semantic view, which may also be referenced as a \u201czoomed out view\u201d in the following discussion. The representations are configured as tiles in the illustrated instance. The tiles in the semantic view may be configured to be different from tiles in other views, such as a start screen which may include tiles used to launch applications. For example, the size of these tiles may be set at 27.5 percent of their \u201cnormal size.\u201d","In one or more implementations, this view may be configured as a semantic view of a start screen. The tiles in this view may be made up of color blocks that are the same as the color blocks in the normal view but do not contain space for display of notifications (e.g., a current temperature for a tile involving weather), although other examples are also contemplated. Thus, the tile notification updates may be delayed and batched for later output when the user exits the semantic zoom, i.e., the \u201czoomed-in view.\u201d","If a new application is installed or removed, the semantic zoom module  may add or remove the corresponding tile from the grid regardless of a level of \u201czoom\u201d as further described below. Additionally, the semantic zoom module  may then re-layout the tiles accordingly.","In one or more implementations, the shape and layout of groups within the grid will remain unchanged in the semantic view as in a \u201cnormal\u201d view, e.g., one hundred percent view. For instance, the number of rows in the grid may remain the same. However, since more tiles will be viewable more tile information may be loaded by the sematic zoom module  than in the normal view. Further discussion of these and other techniques may be found beginning in relation to .","Generally, any of the functions described herein can be implemented using software, firmware, hardware (e.g., fixed logic circuitry), or a combination of these implementations. The terms \u201cmodule,\u201d \u201cfunctionality,\u201d and \u201clogic\u201d as used herein generally represent software, firmware, hardware, or a combination thereof. In the case of a software implementation, the module, functionality, or logic represents program code that performs specified tasks when executed on a processor (e.g., CPU or CPUs). The program code can be stored in one or more computer readable memory devices. The features of the semantic zoom techniques described below are platform-independent, meaning that the techniques may be implemented on a variety of commercial computing platforms having a variety of processors.","For example, the computing device  may also include an entity (e.g., software) that causes hardware of the computing device  to perform operations, e.g., processors, functional blocks, and so on. For example, the computing device  may include a computer-readable medium that may be configured to maintain instructions that cause the computing device, and more particularly hardware of the computing device  to perform operations. Thus, the instructions function to configure the hardware to perform the operations and in this way result in transformation of the hardware to perform functions. The instructions may be provided by the computer-readable medium to the computing device  through a variety of different configurations.","One such configuration of a computer-readable medium is signal bearing medium and thus is configured to transmit the instructions (e.g., as a carrier wave) to the hardware of the computing device, such as via a network. The computer-readable medium may also be configured as a computer-readable storage medium and thus is not a signal bearing medium. Examples of a computer-readable storage medium include a random-access memory (RAM), read-only memory (ROM), an optical disc, flash memory, hard disk memory, and other memory devices that may use magnetic, optical, and other techniques to store instructions and other data.",{"@attributes":{"id":"p-0047","num":"0046"},"figref":"FIG. 2","b":["200","202","204","206","202","102","108","102"]},"A user's hand  is illustrated at the first stage  as initiating a \u201cpinch\u201d gesture to \u201czoom out\u201d a view of the representations. The pinch gesture is initiated in this instance by placing two fingers of the user's hand  proximal to the display device  and moving them toward each other, which may then be detected using touchscreen functionality of the computing device .","At the second stage , contact points of the user's fingers are illustrated using phantom circles with arrows to indicate a direction of movement. As illustrated, the view of the first stage  that includes icons and metadata as individual representations of items is transitioned to a view of groups of items using single representations in the second stage . In other words, each group of items has a single representation. The group representations include a header that indicates a criterion for forming the group (e.g., the common trait) and have sizes that are indicative of a relative population size.","At the third stage , the contact points have moved even closer together in comparison to the second stage  such that a greater number of representations of groups of items may be displayed concurrently on the display device . Upon releasing the gesture, a user may navigate through the representations using a variety of techniques, such as a pan gesture, click-and-drag operation of a cursor control device, one or more keys of a keyboard, and so on. In this way, a user may readily navigate to a desired level of granularity in the representations, navigate through the representations at that level, and so on to locate content of interest. It should be readily apparent that these steps may be reversed to \u201czoom in\u201d the view of the representations, e.g., the contact points may be moved away from each other as a \u201creverse pinch gesture\u201d to control a level of detail to display in the semantic zoom.","Thus, the semantic zoom techniques described above involved a semantic swap, which refers to a semantic transition between views of content when zooming \u201cin\u201d and \u201cout\u201d. The semantic zoom techniques may further increase the experience by leading into the transition by zooming in\/out of each view. Although a pinch gesture was described this technique may be controlled using a variety of different inputs. For example, a \u201ctap\u201d gesture may also be utilized. In the tap gesture, a tap may cause a view to transition between views, e.g., zoomed \u201cout\u201d and \u201cin\u201d through tapping one or more representations. This transition may use the same transition animation that the pinch gesture leveraged as described above.","A reversible pinch gesture may also be supported by the semantic zoom module . In this example, a user may initiate a pinch gesture and then decide to cancel the gesture by moving their fingers in the opposite direction. In response, the semantic zoom module  may support a cancel scenario and transition to a previous view.","In another example, the semantic zoom may also be controlled using a scroll wheel and \u201cctrl\u201d key combination to zoom in and out. In another example, a \u201cctrl\u201d and \u201c+\u201d or \u201c\u2212\u201d key combination on a keyboard may be used to zoom in or out, respectively. A variety of other examples are also contemplated.","Thresholds","The semantic zoom module  may employ a variety of different thresholds to manage interaction with the semantic zoom techniques described herein. For example, the semantic zoom module  may utilize a semantic threshold to specify a zoom level at which a swap in views will occur, e.g., between the first and second stages , . In one or more implementations this is distance based, e.g., dependent on an amount of movement in the contact points in the pinch gesture.","The semantic zoom module  may also employ a direct manipulation threshold to determine at which zoom level to \u201csnap\u201d a view when the input is finished. For instance, a user may provide a pinch gesture as previously described to navigate to a desired zoom level. A user may then release the gesture to navigate through representations of content in that view. The direct manipulation threshold may thus be used to determine at which level the view is to remain to support that navigation and a degree of zoom performed between semantic \u201cswaps,\u201d examples of which were shown in the second and third stages , .","Thus, once the view reaches a semantic threshold, the semantic zoom module  may cause a swap in semantic visuals. Additionally, the semantic thresholds may change depending on a direction of an input that defines the zoom. This may act to reduce flickering that can occur otherwise when the direction of the zoom is reversed.","In a first example illustrated in the example implementation  of , a first high-end semantic threshold  may be set, e.g., at approximately eighty percent of movement that may be recognized for a gesture by the semantic zoom module . For instance, if a user is originally in a one hundred percent view and started zooming out, a semantic swap may be triggered when the input reaches eighty percent as defined by the first high-end semantic threshold .","In a second example illustrated in the example implementation  of , a second high-end semantic threshold  may also be defined and leveraged by the semantic zoom module , which may be set higher than the first high-end semantic threshold , such as at approximately eighty-five percent. For instance, a user may start at a one hundred percent view and trigger the semantic swap at the first high-end semantic threshold  but not \u201clet go\u201d (e.g., is still providing inputs that define the gesture) and decide to reverse the zoom direction. In this instance, the input would trigger a swap back to the regular view upon reaching the second high-end semantic threshold .","Low end thresholds may also be utilized by the semantic zoom module . In a third example illustrated in the example implementation  of , a first low end semantic threshold  may be set, such as at approximately forty-five percent. If a user is originally in a semantic view at 27.5% and provides an input to start \u201czooming in,\u201d a semantic swap may be triggered when the input reaches the first low end semantic threshold .","In a fourth example illustrated in the example implementation  of , a second low end semantic threshold  may also be defined, such as at approximately thirty-five percent. Like the previous example, a user may begin at a 27.5% semantic view (e.g., a start screen) and trigger the semantic swap, e.g., zoom percentage is greater than forty-five percent. Also, the user may continue to provide the input (e.g., button a mouse remains \u201cclicked\u201d, still \u201cgesturing,\u201d and so on) and then decide to reverse the zoom direction. The swap back to the 27.5% view may be triggered by the semantic zoom module  upon reaching the second low end semantic threshold.","Thus, in the examples shown and discussed in relation to , semantic thresholds may be used to define when a semantic swap occurs during a semantic zoom. In between these thresholds, the view may continue to optically zoom in and zoom out in response to direct manipulation.","Snap Points","When a user provides an input to zoom in or out (e.g., moves their fingers in a pinch gesture), a displayed surface may be optically scaled accordingly by the semantic zoom module . However, when the input stops (e.g., a user lets go of the gesture), the semantic zoom module  may generate an animation to a certain zoom level, which may be referred to as a \u201csnap point.\u201d In one or more implementations, this is based on a current zoom percentage at which the input stopped, e.g., when a user \u201clet go.\u201d","A variety of different snap points may be defined. For example, the semantic zoom module  may define a one hundred percent snap point at which content is displayed in a \u201cregular mode\u201d that is not zoomed, e.g., has full fidelity. In another example, the semantic zoom module  may define a snap point that corresponds to a \u201czoom mode\u201d at 27.5% that includes semantic visuals.","In one or more implementations, if there is less content than substantially consumes an available display area of the display device , the snap point may be set automatically and without user intervention by the semantic zoom module  to whatever value will cause the content to substantially \u201cfill\u201d the display device . Thus, in this example the content would not zoom less that the \u201czoom mode\u201d of 27.5% but could be larger. Naturally, other examples are also contemplated, such as to have the semantic zoom module  choose one of a plurality of predefined zoom levels that corresponds to a current zoom level.","Thus, the semantic zoom module  may leverage thresholds in combination with snap points to determine where the view is going to land when an input stops, e.g., a user \u201clet's go\u201d of a gesture, releases a button of a mouse, stops providing a keyboard input after a specified amount of time, and so on. For example, if the user is zooming out and the zoom out percentage is greater than a high end threshold percentage and ceases the input, the semantic zoom module  may cause the view to snap back to a 100% snap point.","In another example, a user may provide inputs to zoom out and the zoom out percentage is less than a high end threshold percentage, after which the user may cease the inputs. In response, the semantic zoom module  may animate the view to the 27.5% snap point.","In a further example, if the user begins in the zoom view (e.g., at 27.5%) and starts zooming in at a percentage that is less than a low end semantic threshold percentage and stops, the semantic zoom module  may cause the view to snap back to the semantic view, e.g., 27.5%.","In yet another example, if the user begins in the semantic view (at 27.5%) and starts zooming in at a percentage that is greater than a low end threshold percentage and stops, the semantic zoom module  may cause the view to snap up to the 100% view.","Snap points may also act as a zoom boundary. If a user provides an input that indicates that the user is trying to \u201cgo past\u201d these boundaries, for instance, the semantic zoom module  may output an animation to display an \u201cover zoom bounce\u201d. This may serve to provide feedback to let the user know that zoom is working as well as stop the user from scaling past the boundary.","Additionally, in one or more implementations the semantic zoom module  may be configured to respond to the computing device  going \u201cidle.\u201d For example, the semantic zoom module  may be in a zoom mode (e.g., 27.5% view), during which a session goes idle, such as due to a screensaver, lock screen, and so on. In response, the semantic zoom module  may exit the zoom mode and return to a one hundred percent view level. A variety of other examples are also contemplated, such as use of velocity detected through movements to recognize one or more gestures.","Gesture-Based Manipulation","Gestures used to interact with semantic zoom may be configured in a variety of ways. In a first example, a behavior is supported that upon detection of an input that causes a view to be manipulated \u201cright away.\u201d For example, referring back to  the views may begin to shrink as soon as an input is detected that the user has moved their fingers in a pinch gesture. Further, the zooming may be configured to \u201cfollowing the inputs as they happen\u201d to zoom in and out. This is an example of a manipulation-based gesture that provides real-time feedback. Naturally, a reverse pinch gesture may also be manipulation based to follow the inputs.","As previously described, thresholds may also be utilized to determine \u201cwhen\u201d to switch views during the manipulation and real-time output. Thus, in this example a view may be zoomed through a first gesture that follows movement of a user as it happens as described in an input. A second gesture (e.g., a semantic swap gesture) may also be defined that involves the thresholds to trigger a swap between views as described above, e.g., a crossfade to another view.","In another example, a gesture may be employed with an animation to perform zooms and even swaps of views. For example, the semantic zoom module  may detect movement of fingers of a user's hand  as before as used in a pinch gesture. Once a defined movement has been satisfied for a definition of the gesture, the semantic zoom module  may output an animation to cause a zoom to be displayed. Thus, in this example the zoom does not follow the movement in real time, but may do so in near real time such that it may be difficult for a user to discern a difference between the two techniques. It should be readily apparent that this technique may be continued to cause a crossfade and swap of views. This other example may be beneficial in low resource scenarios to conserve resources of the computing device .","In one or more implementations, the semantic zoom module  may \u201cwait\u201d until an input completed (e.g., the fingers of the user's hand  are removed from the display device ) and then use one or more of the snap points described above to determine a final view to be output. Thus, the animations may be used to zoom both in and out (e.g., switch movements) and the semantic zoom module  may cause output of corresponding animations.","Semantic View Interactions","Returning again to , the semantic zoom module  may be configured to support a variety of different interactions while in the semantic view. Further, these interactions may be set to be different from a \u201cregular\u201d one hundred percent view, although other examples are also contemplated in which the interactions are the same.","For example, tiles may not be launched from the semantic view. However, selecting (e.g., tapping) a tile may cause the view to zoom back to the normal view at a location centered on the tap location. In another example, if a user were to tap on a tile of the airplane in the semantic view of , once it zoomed in to a normal view, the airplane tile would still be close to a finger of the user's hand  that provided the tap. Additionally, a \u201czoom back in\u201d may be centered horizontally at the tap location while vertical alignment may be based on the center of the grid.","As previously described, a semantic swap may also be triggered by a cursor control device, such as by pressing a modifier key on a keyboard and using a scroll wheel on a mouse simultaneously (e.g., a \u201cCTRL +\u201d and movement of a scroll wheel notch), \u201cCTRL +\u201d and track pad scroll edge input, selection of a semantic zoom  button, and so on. The key combination shortcut, for instance, may be used to toggle between the semantic views. To prevent users from entering an \u201cin-between\u201d state, rotation in the opposite direction may cause the semantic zoom module  to animate a view to a new snap point. However, a rotation in the same direction will not cause a change in the view or zoom level. The zoom may center on the position of the mouse. Additionally, a \u201czoom over bounce\u201d animation may be used to give users feedback if users try to navigate past the zoom boundaries as previously described. The animation for the semantic transition may be a time based and involve an optical zoom followed by the cross-fade for the actual swap and then a continued optical zoom to the final snap point zoom level.","Semantic Zoom Centering and Alignment","When a semantic \u201czoom out\u201d occurs, the zoom may center on a location of the input, such as a pinch, tap, cursor or focus position, and so on. A calculation may be made by the semantic zoom module  as to which group is closest to the input location. This group may then left align with the corresponding semantic group item that comes into view, e.g., after the semantic swap. For grouped grid views, the semantic group item may align with the header.","When a semantic \u201czoom in\u201d occurs, the zoom may also be centered on the input location, e.g., the pinch, tap, cursor or focus position, and so on. Again, the semantic zoom module  may calculate which semantic group item is closest to the input location. This semantic group item may then left align with the corresponding group from the zoomed in view when it comes into view, e.g., after the semantic swap. For grouped grid views the header may align with the semantic group item.","As previously described, the semantic zoom module  may also support panning to navigate between items displayed at a desired level of zoom. An example of this is illustrated through the arrow to indicate movement of a finger of the user's hand . In one or more implementations, the semantic zoom module  may pre-fetch and render representation of content for display in the view, which may be based on a variety of criteria including heuristics, based on relative pan axes of the controls, and so on. This pre-fetching may also be leveraged for different zoom levels, such that the representations are \u201cready\u201d for an input to change a zoom level, a semantic swap, and so on.","Additionally, in one or more additional implementations the semantic zoom module  may \u201chide\u201d chrome (e.g., display of controls, headers, and so on), which may or may not relate to the semantic zoom functionality itself. For example, this semantic zoom  button may be hidden during a zoom. A variety of other examples are also contemplated.","Correction Animation",{"@attributes":{"id":"p-0088","num":"0087"},"figref":"FIG. 7","b":["700","702","704","706","702","108","108"]},"A pinch input may then be received to zoom out from the name \u201cArthur.\u201d In other words, fingers of a user's hand may be positioned over the display of the name \u201cArthur\u201d and moved together. In this case, this may cause a crossfade and scale animation to be performed to implement a semantic swap, as shown in the second stage . At the second stage, the letters \u201cA,\u201d \u201cB,\u201d and \u201cC\u201d are displayed as proximal to a point at which the input is detected, e.g., as a portion of the display device  that was used to display \u201cArthur.\u201d Thus, in this way the semantic zoom module  may ensure that the \u201cA\u201d is left-aligned with the name \u201cArthur.\u201d At this stage, the input continues, e.g., the user has not \u201clet go.\u201d","A correction animation may then be utilized to \u201cfill the display device \u201d once the input ceases, e.g., the fingers of the users hand are removed from the display device . For example, an animation may be displayed in which the list \u201cslides to the left\u201d in this example as shown in the third stage . However, if a user had not \u201clet go\u201d and instead input a reverse-pinch gesture, the semantic swap animation (e.g., crossfade and scale) may be output to return to the first stage .","In an instance in which a user \u201clet's go\u201d before the cross-fade and scale animation has completed, the correction animation may be output. For example, both controls may be translated so before \u201cArthur\u201d has faded out completely, the name would be displayed as shrinking and translating leftwards, so that the name remains aligned with the \u201cA\u201d the entire time as it was translated to the left.","For non-touch input cases (e.g., use of a cursor control device or keyboard) the semantic zoom module  may behave as if the user has \u201clet go\u201d, so the translation starts at the same time as the scaling and cross-fade animations.","Thus, the correction animation may be used for alignment of items between views. For example, items in the different views may have corresponding bounding rectangles that describe a size and position of the item. The semantic zoom module  may then utilize functionality to align items between the views so that corresponding items between views fit these bounding rectangles, e.g., whether left, center, or right aligned.","Returning again to , a list of scrollable items is displayed in the first stage . Without a correction animation, a zoom out from an entry on the right side of the display device (e.g., Arthur) would not line up a corresponding representation from a second view, e.g., the \u201cA,\u201d as it would align at a left edge of the display device  in this example.","Accordingly, the semantic zoom module  may expose a programming interface that is configured to return a vector that describes how far to translate the control (e.g., the list of scrollable items) to align the items between the views. Thus, the semantic zoom module  may be used to translate the control to \u201ckeep the alignment\u201d as shown in the second stage  and upon release the semantic zoom module  may \u201cfill the display\u201d as shown in the third stage . Further discussion of the correction animation may be found in relation to the example procedures.","Cross-Fade Animation",{"@attributes":{"id":"p-0097","num":"0096"},"figref":["FIG. 8","FIG. 2"],"b":["800","800","802","804","806","802","806","202","204"]},"At the first stage , representations of items in a file system are shown. An input is received that causes a crossfade animation  as shown at the second stage in which portioning of different views may be shown together, such as through use of opacity, transparency settings, and so on. This may be used to transition to the final view as shown in the third stage .","The cross fade animation may be implemented in a variety of ways. For example, a threshold may be used that is used to trigger output of the animation. In another example, the gesture may be movement based such that the opacity follows the inputs in real time. For example, different levels of opacity for the different view may be applied based on an amount of movement described by the input. Thus, as the movement is input opacity of the initial view may be decreased and the opacity of a final view may be increased. In one or more implementations, snap techniques may also be used to snap a view to either of the views based on the amount of movement when an input ceases, e.g., fingers of a user's hand are removed from the display device.","Focus","When a zoom in occurs, the semantic zoom module  may apply focus to the first item in the group that is being \u201czoomed in.\u201d This may also be configured to fade after a certain time out or once the user starts interacting with the view. If focus has not been changed, then when a user zooms back in to the one hundred percent view the same item that had focus before the semantic swap will continue to have focus.","During a pinch gesture in the semantic view, focus may be applied around the group that is being \u201cpinched over.\u201d If a user were to move their finger over a different group before the transition, the focus indicator may be updated to the new group.","Semantic Headers",{"@attributes":{"id":"p-0104","num":"0103"},"figref":"FIG. 9","b":"900"},"In one or more implementations, a cross-fade animation used to transition between the views may not involve group headers, e.g., during a \u201czoom out.\u201d However, once inputs have ceased (e.g., a user has \u201clet go\u201d) and the view has snapped the headers may be animated \u201cback in\u201d for display. If a grouped grid view is being swapped for the semantic view, for instance, the semantic headers may contain the item headers that were defined by the end developer for the grouped grid view. Images and other content may also be part of the semantic header.","Selection of a header (e.g., a tap, mouse-click or keyboard activation) may cause the view to zoom back to the 100% view with the zoom being centered on the tap, pinch or click location. Therefore, when a user taps on a group header in the semantic view that group appears near the tap location in the zoomed in view. An \u201cX\u201d position of the left edge of the semantic header, for instance, may line up with an \u201cX\u201d position of the left edge of the group in the zoomed in view. Users may also move from group to group using the arrow keys, e.g., using the arrow keys to move focus visuals between groups.","Templates","The semantic zoom module  may also support a variety of different templates for different layouts that may be leveraged by application developers. For example, an example of a user interface that employs such a template is illustrated in the example implementation  of . In this example, the template includes tiles arranged in a grid with identifiers for the group, which in this case are letters and numbers. Tiles also include an item that is representative of the group if populated, e.g., an airplane for the \u201ca\u201d group but the \u201ce\u201d group does not include an item. Thus, a user may readily determine if a group is populated and navigate between the groups in this zoom level of the semantic zoom. In one or more implementations, the header (e.g., the representative items) may be specified by a developer of an application that leverages the semantic zoom functionality. Thus, this example may provide an abstracted view of a content structure and an opportunity for group management tasks, e.g., selecting content from multiple groups, rearranging groups, and so on.","Another example template is shown in the example embodiment  of . In this example, letters are also shown that can be used to navigate between groups of the content and may thus provide a level in the semantic zoom. The letters in this example are formed into groups with larger letters acting as markers (e.g., signposts) such that a user may quickly locate a letter of interest and thus a group of interest. Thus, a semantic visual is illustrated that is made up of the group headers, which may be a \u201cscaled up\u201d version found in the 100% view.","Semantic Zoom Linguistic Helpers","As described above, semantic zoom may be implemented as a touch-first feature that allows users to obtain a global view of their content with a pinch gesture. Semantic zooms may be implemented by the semantic zoom module  to create an abstracted view of underlying content so that many items can fit in a smaller area while still being easily accessible at different levels of granularity. In one or more implementations, semantic zoom may utilize abstraction to group items into categories, e.g., by date, by first letter, and so on.","In the case of first-letter semantic zoom, each item may fall under a category determined by the first letter of its display name, e.g., \u201cGreen Bay\u201d goes under a group header \u201cG\u201d. To perform this grouping, the semantic zoom module  may determine the two following data points: (1) the groups that will be used to represent the content in the zoomed view (e.g. the entire alphabet); and (2) a first letter of each item in the view.","In the case of English, generating a simple first-letter semantic zoom view may be implemented as follows:\n\n","East Asian languages such as Chinese, Japanese, and Korean may be problematic for first letter grouping. First, each of these languages makes use of Chinese ideographic (Han) characters, which include thousands of individual characters. A literate speaker of Japanese, for instance, is familiar at least two thousand individual characters and the number may be much higher for a speaker of Chinese. This means that given a list of items, there is a high probability that every word may start with a different character, such that an implementation of taking the first character may create a new group for virtually each entry in the list. Furthermore, if Unicode surrogate pairs are not taken into account and the first WCHAR is used solely, there may be cases where the grouping letter would resolve to a meaningless square box.","In another example, Korean, while occasionally using Han characters, primarily uses a native Hangul script. Although it is a phonetic alphabet, each of the eleven thousand plus Hangul Unicode characters may represent an entire syllable of two to five letters, which is referred to as \u201cjamo.\u201d East Asian sorting methods (except Japanese XJIS) may employ techniques for grouping Han\/Hangul characters into 19-214 groups (based on phonetics, radical, or stroke count) that make intuitive sense to user of the East Asian alphabet.","In addition, East Asian languages often make sure of \u201cfull width\u201d Latin characters that are square instead of rectangular to line up with square Chinese\/Japanese\/Korean characters, e.g.:\n\n","Therefore, unless width normalization is performed a half-width \u201cA\u201d group may be immediately followed by a full-width \u201cA\u201d group. However, users typically consider them to be the same letter, so it will look like an error to these users. The same applies to the two Japanese Kana alphabets (Hiragana and Katakana), which sort together and are to be normalized to avoid showing bad groups.","Additionally, use of a basic \u201cpick the first letter\u201d implementation may give inaccurate results for many European languages. For example, the Hungarian alphabet includes of the following 44 letters:\n\n","In another example, the Swedish alphabet includes the following letters:\n\n","The semantic zoom module  may expose a variety of APIs for use in sorting. For example, alphabet and first letter APIs may be exposed such that a developer may decide how the semantic zoom module  addresses items.","The semantic zoom module  may be implemented to generate alphabet tables, e.g., from a unisort.txt file in an operating system, such that these tables can be leveraged to provide alphabets as well as grouping services. This feature, for instance, may be used to parse the unisort.txt file and generate linguistically consistent tables. This may involve validating the default output against reference data (e.g., an outside source) and creating ad hoc exceptions when the standard ordering is not what users expect.","The semantic zoom module  may include an alphabet API which may be used to return what is considered to be the alphabet based on the locale\/sort, e.g., the headings a person at that locale would typically see in a dictionary, phone book, and so on. If there is more than one representation for a given letter, the one recognized as most common may be used by the semantic zoom module . The following are a few examples for representative languages:\n\n","For East Asian languages, the semantic zoom module  may return a list of the groups described above (e.g., the same table may drive both functions), although Japanese includes kana groups as well as following:\n\n","Some languages consider two letters to be strongly different, but sort them together. In this case, the semantic zoom module  may communicate to users that the two letters are together using a composed display letter, e.g., for Russian \u201cE, \u00cb.\u201d For archaic and uncommon letters that sort between letters in modern usage, the semantic zoom module may group these letters with a previous letter.","For Latin letter-like symbols, the semantic zoom module  may treat these symbols according to the letters. The semantic zoom module , for instance, may employ \u201cgroup with previous\u201d semantics, e.g., to group \u2122 under \u201cT.\u201d","The semantic zoom module  may employ a mapping function to generate the view of the items. For example, the semantic zoom module  may normalize characters to an upper case, accents (e.g., if the language does not treat the particular accented letter as a distinct letter), width (e.g., convert full to half width Latin), and kana type (e.g., convert Japanese katakana to hiragana).","For languages that treat groups of letters as a single letter (e.g. Hungarian \u201cdzs\u201d), the semantic zoom module  may return these as the \u201cfirst letter group\u201d by the API. These may be processed via per-locale override tables, e.g., to check if the string would sort within the letter's \u201crange.\u201d","For Chinese\/Japanese, the semantic zoom module  may return logical groupings of Chinese characters based on the sort. For example, a stroke count sort returns a group for each number of strokes, radical sort returns groups for Chinese character semantic components, phonetic sorts return by first letter of phonetic reading, and so on. Again, per-locale override tables may also be used. In other sorts (e.g., non-EA+Japanese XJIS, which do not have meaningful orderings of Chinese characters), a single  (Han) group may be used for each of the Chinese characters. For Korean, the semantic zoom module  may return groups for the initial Jamo letter in the Hangul syllable. Thus, the semantic zoom module  may generate letters that are closely aligned with an \u201calphabet function\u201d for strings in the locale's native language.","First Letter Grouping","Applications may be configured to support use of the semantic zoom module . For example, an application  may be installed as part of a package that includes a manifest that includes capabilities specified by a developer of the application . One such functionality that may specified includes a phonetic name property. The phonetic name property may be used to specify a phonetic language to be used to generate groups and identifications of groups for a list of items. Thus, if the phonetic name property exists for an application, then its first letter will be used for sorting and grouping. If not, then the semantic zoom module  may fall back on the first letter of the display name, e.g., for 3rd-party legacy apps.","For uncurated data like filenames and 3rd-party legacy applications, the general solution for extracting the first letter of a localized string can be applied to most non-East Asian languages. The solution involves normalizing the first visible glyph and stripping diacritics (ancillary glyphs added to letters) which is described as follows.","For English and most other languages the first visible glyph may be normalized as follows:\n\n","A variety of different techniques may be employed to strip diacritics. For example, a first such solution may involve the following:\n\n","A second such solution may involve the following:\n\n","Additional solutions may also be utilized by the semantic zoom module , e.g., for first letter grouping of uncurated data in Chinese and Korean. For example, a grouping letter \u201coverride\u201d table may be applied for certain locales and\/or sort key ranges. These locales may include Chinese (e.g., simplified and traditional) as well as Korean. It may also include languages like Hungarian that have special double letter sorting, however these languages may use these exceptions in the override table for the language.","For example, override tables may be used to provide groupings for:\n\n","For Chinese, the semantic zoom module  may group by first pinyin letter for simplified Chinese, such as to convert to pinyin and use a sort-key table-based lookup to identify first pinyin character. Pinyin is a system for phonetically rendering Chinese ideographs in a Latin alphabet. For traditional Chinese (e.g., Taiwan), the semantic zoom module  may group by first Bopomofo letter for group by radical\/stroke count by converting to Bopomofo and use a stoke-key table based lookup to identify the first Bopomofo character. Bopomofo provides a common name (e.g., like ABC) for the traditional Chinese phonetic syllabary. A radical is a classification for Chinese characters, e.g., which may be used for section headers in a Chinese dictionary. For traditional Chinese (e.g., Hong Kong), a sort-key table-based lookup may be used to identify a stroke character.","For Korean, the semantic zoom module  may sort Korean file names phonetically in Hangul since a single character is represented using two to five letters. For example, the semantic zoom module  may reduce to a first jamo letter (e.g., 19 initial consonants equals nineteen groups) through use of a sort-key table-based lookup to identify jamo groups. Jamo refers to a set of consonants and vowels used in Korean Hangul, which is the phonetic alphabet used to write the Korean language","In the case of Japanese, file name sorting may be a broken experience in conventional techniques. Like Chinese and Korean, Japanese files are intended to be sorted by pronunciation. However, the occurrence of kanji characters in Japanese file names may make sorting difficult without knowing the proper pronunciation. Additionally, kanji may have more than one pronunciation. In order to solve this problem, the semantic zoom module  may use a technique to reverse convert each file name via an IME to acquire a phonetic name, which may be then used to sort and group the files.","For Japanese, files may be placed into three groups and sorted by the semantic zoom module:\n\n","Directional Hints","To provide directional hints to users, the semantic zoom module may employ a variety of different animations. For example, when a user is already in the zoomed out view and tries to zoom \u201cfurther out\u201d an under-bounce animation may be output by the semantic zoom module  in which the bounce is a scale down of the view. In another example, when the user is already in the zoomed in view and tries to zoom in further another over-bounce animation may be output where the bounce is a scale up of the view.","Further, the semantic zoom module  may employ one or more animations to indicate an \u201cend\u201d of the content is reached, such as a bounce animation. In one or more implementations, this animation is not limited to the \u201cend\u201d of the content but rather may be specified at different navigation points through the display of content. In this way, the semantic zoom module  may expose a generic design to applications  to make this functionality available with the applications  \u201cknowing\u201d how the functionality is implemented.","Programming Interface for Semantically Zoomable Controls","Semantic Zoom may allow efficient navigation of long lists. However, by its very nature, semantic zooming involves a non-geometric mapping between a \u201czoomed in\u201d view and its \u201czoomed out\u201d (a.k.a. \u201csemantic\u201d) counterpart. Accordingly, a \u201cgeneric\u201d implementation may not be well suited for each instance, since domain knowledge may be involved to determine how items in one view map to those of the other, and how to align the visual representations of two corresponding items to convey their relationship to a user during the zoom.","Accordingly, in this section an interface is described that includes a plurality of different methods that are definable by a control to enable use as a child view of a semantic zoom control by the semantic zoom module . These methods enable the semantic zoom module  to determine an axis or axes along which the control is permitted to pan, notify the control when a zoom is in progress, and allow the views to align themselves appropriately when switching from one zoom level to another.","This interface may be configured to leverage bounding rectangles of items as a common protocol for describing item positions, e.g., the semantic zoom module  may transform these rectangles between coordinate systems. Similarly, the notion of an item may be abstract and interpreted by the controls. The application may also transform the representations of the items as passed from one control to the other, allowing a wider range of controls to be used together as \u201czoomed in\u201d and \u201czoomed out\u201d views.","In one or more implementations, controls implement a \u201cZoomableView\u201d interface to be semantically zoomable. These controls may be implemented in a dynamically-typed language (e.g., dynamically-typed language) in a form of a single public property named \u201czoomableView\u201d without a formal concept of an interface. The property may be evaluated to an object that has several methods attached to it. It is these methods that one would normally think of as \u201cthe interface methods\u201d, and in a statically-typed language such as C++ or C#, these methods would be direct members of an \u201cIZoomableView\u201d interface that would not implement a public \u201czoomableView\u201d property.","In the following discussion, the \u201csource\u201d control is the one that is currently visible when a zoom is initiated, and the \u201ctarget\u201d control is the other control (the zoom may ultimately end up with the source control visible, if the user cancels the zoom). The methods are as follows using a C#-like pseudocode notation.","Axis getPanAxis( )","This method may be called on both controls when a semantic zoom is initialized and may be called whenever a control's axis changes. This method returns either \u201chorizontal\u201d, \u201cvertical\u201d, \u201cboth\u201d or \u201cnone,\u201d which may be configured as strings in dynamically-typed language, members of an enumerated type in another language, and so on.","The semantic zoom module  may use this information for a variety of purposes. For example, if both controls cannot pan along a given axis, the semantic zoom module  may \u201clock\u201d that axis by constraining the center of the scaling transformation to be centered along that axis. If the two controls are limited to horizontal panning, for instance, the scale center's Y coordinate may be set halfway between the top and bottom of a viewport. In another example, the semantic zoom module  may allow limited panning during a zoom manipulation, but limit it to axes that are supported by both controls. This may be utilized to limit the amount of content to be pre-rendered by each child control. Hence, this method may be called \u201cconfigureForZoom\u201d and is further described below.","void configureForZoom(bool isZoomedOut, bool isCurrentView, function triggerZoom( ), Number prefetchedPages)","As before, this method may be called on both controls when a semantic zoom is initialized and may be called whenever a control's axis changes. This provides the child control with information that may be used when implementing a zooming behavior. The following are some of the features of this method:\n\n","Regarding the last parameter, the \u201czoomed in\u201d control may visibly shrink during a \u201czoom out\u201d transition, revealing more of its content than is visible during normal interaction. Even the \u201czoomed out\u201d view may reveal more content than normal when the user causes a \u201cbounce\u201d animation by attempting to zoom even further out from the \u201czoomed out\u201d view. The semantic zoom module  may calculate the different amounts of content that are to be prepared by each control, to promote efficient use of resources of the computing device .","void setCurrentItem(Number x, Number y)","This method may be called on the source control at the start of a zoom. Users can cause the semantic zoom module  to transition between views using various input devices, including keyboard, mouse and touch as previously described. In the case of the latter two, the on-screen coordinates of the mouse cursor or touch points determine which item is to be zoomed \u201cfrom,\u201d e.g., the location on the display device . Since keyboard operation may rely on a pre-existing \u201ccurrent item\u201d, input mechanisms may be unified by making position-dependent ones a first set a current item, and then requesting information about \u201cthe current item\u201d, whether it was pre-existing or was just set an instant earlier.","void beginZoom( )","This method may be called on both controls when a visual zoom transition is about to begin. This notifies the control that a zoom transition is about to begin. The control as implemented by the semantic zoom module  may be configured to hide portions of its UI during scaling (e.g. scrollbars) and ensure that enough content is rendered to fill the viewport even when the control is scaled. As previously described, the prefetchedPages parameter of configureForZoom may be used to inform the control how much is desired.","Promise<{item: AnyType, position: Rectangle}> getCurrentItem( )","This method may be called on the source control immediately after beginZoom. In response, two pieces of information may be returned about the current item. These include an abstract description of it (e.g., in a dynamically-typed language, this may be a variable of any type), and its bounding rectangle, in viewport coordinates. In statically-typed language such as C++ or C#, a struct or class may be returned. In a dynamically-typed language, an object is returned with properties named \u201citem\u201d and \u201cposition\u201d. Note that it is actually a \u201cPromise\u201d for these two pieces of information that is returned. This is a dynamically-typed language convention, though there are analogous conventions in other languages.","Promise<{x: Number, y: Number}> positionItem(AnyType item, Rectangle position)","This method may be called on the target control once the call to getCurrentItem on the source control has completed and once the returned Promise has completed. The item and position parameters are those that are returned from the call to getCurrentItem, although the position rectangle is transformed into the coordinate space of the target controls. The controls are rendered at different scales. The item might have been transformed by a mapping function provided by the application, but by default it is the same item returned from getCurrentItem.","It is up to the target control to change its view to align the \u201ctarget item\u201d corresponding with the given item parameter with the given position rectangle. The control may align in a variety of ways, e.g., left-align the two items, center-align them, and so on. The control may also change its scroll offset to align the items. In some cases, the control may not be able to align the items exactly, e.g., in an instance in which a scroll to an end of the view may not be enough to position the target item appropriately.","The x, y coordinates returned may be configured as a vector specifying how far short of the alignment goal the control fell, e.g., a result of 0, 0 may be sent if the alignment was successful. If this vector is non-zero, the semantic zoom module  may translate the entire target control by this amount to ensure the alignment, and then animate it back into place at an appropriate time as described in relation to the Correction Animation section above. The target control may also set its \u201ccurrent item\u201d to the target item, e.g., the one it would return from a call to getCurrentItem.","void endZoom(bool isCurrentView, bool setFocus)","This method may be called on both controls at the end of a zoom transition. The semantic zoom module  may perform an operation that is the opposite of what was performed in beginZoom, e.g., display the normal UI again, and may discard rendered content that is now off-screen to conserve memory resources. The method \u201cisCurrentView\u201d may be used to tell the control whether it is now the visible view, since either outcome is possible after a zoom transition. The method \u201csetFocus\u201d tells the control whether focus on its current item is to be set.","void handlePointer(Number pointerID)","This method handlePointer may be called by the semantic zoom module  when done listening to pointer events and to leave a pointer to the underlying control to handle. The parameter passed to the control is the pointerID of the pointer that is still down. One ID is passed through handlePointer.","In one or more implementations, the control determines \u201cwhat to do\u201d with that pointer. In a list view case, the semantic zoom module  may keep track of where a pointer made contact on \u201ctouch down.\u201d When \u201ctouch down\u201d was on an item, the semantic zoom module  does not perform an action since \u201cMsSetPointerCapture\u201d was already called on the touched item in response to the MSPointerDown event. If no item was pressed, the semantic zoom module  may call MSSetPointerCapture on the viewport region of the list view to start up independent manipulation.","Guidelines that may be followed by the semantic zoom module for implementing this method may include the following:\n\n","The following discussion describes semantic zoom techniques that may be implemented utilizing the previously described systems and devices. Aspects of each of the procedures may be implemented in hardware, firmware, or software, or a combination thereof. The procedures are shown as a set of blocks that specify operations performed by one or more devices and are not necessarily limited to the orders shown for performing the operations by the respective blocks. In portions of the following discussion, reference will be made to the environment  of  and the implementations - of , respectively.",{"@attributes":{"id":"p-0173","num":"0216"},"figref":["FIG. 12","FIG. 1"],"b":["1200","1202","114","102","106"]},"Content that was specified by the application is mapped by the semantic zoom functionality to support a semantic swap corresponding to at least one threshold of a zoom input to display different representations of the content in a user interface (block ). As previously described, the semantic swap may be initiated in a variety of ways, such as gestures, use of a mouse, keyboard shortcut, and so on. The semantic swap may be used to change how representations of content in the user interface describe content. This change and description may be performed in a variety of ways as described previously.",{"@attributes":{"id":"p-0175","num":"0218"},"figref":"FIG. 13","b":["1300","1302"]},"Responsive to a determination that the input has not reached a semantic zoom threshold, a size is changed at which the representations of content are displayed in the first view (block ). The input, for instance, may be used to change a zoom level as shown between the second and third stages ,  of .","Responsive to a determination that the input has reached the semantic zoom threshold, a semantic swap is performed to replace the first view of the representations of content with a second view that describes the content differently in the user interface (block ). Continuing with the previous example, the input may continue to cause the semantic swap which may be used to represent content in a variety of ways. In this way, a single input may be utilized to both zoom and swap a view of content, a variety of examples of which were previously described.",{"@attributes":{"id":"p-0178","num":"0221"},"figref":"FIG. 14","b":["1400","1402","108","102","110"]},"A zoom gesture is identified from the recognized inputs to cause an operation to be performed to zoom a display of a user interface as following the recognized inputs (block ). As previously described in relation to the \u201cGesture-based Manipulation\u201d section above, the semantic zoom module  may be configured to employ manipulation based techniques involving semantic zoom. In this example, this manipulation is configured to follow the inputs (e.g., the movement of the fingers of the user's hand ), e.g., in \u201creal time\u201d as the inputs are received. This may be performed to zoom in or zoom out a display of a user interface, e.g., to view representations of content in a file system of the computing device .","A semantic swap gesture is identified from the inputs to cause an operation to replace the first view of representations of content in the user interface with a second view that describes the content differently in the user interface (block ). As described in relation to , thresholds may be utilized to define the semantic swap gesture in this instance. Continuing with the previous example, the inputs used to zoom a user interface may continue. Once a threshold is crossed, a semantic swap gesture may be identified to cause a view used for the zoom to be replaced with another view. Thus, the gestures in this example are manipulation based. Animation techniques may also be leveraged, further discussion of which may be found in relation to the following figure.",{"@attributes":{"id":"p-0181","num":"0224"},"figref":"FIG. 15","b":["1500","1502","114"]},"A zoom animation is displayed responsive to the identification of the zoom gesture, the zoom animation configured to zoom a display of the user interface (block ). Continuing with the previous example, a pinch or reverse-pinch (i.e., push) gesture may be identified. The semantic zoom module  may then output an animation that complies with the gesture. For example, the semantic zoom module  may define animations for different snap points and output animations as corresponding to those points.","A semantic swap gesture is identified from the inputs that are recognized as describing movement (block ). Again continuing with the previous example, the fingers of the user's hand  may continue movement such that another gesture is identified, such as a semantic swap gesture for pinch or reverse pinch gestures as before. A semantic swap animation is displayed responsive to the identifying of the semantic swap gesture, the semantic swap animation configured to replace a first view of representations of content in the user interface with a second view of the content in the user interface (block ). This semantic swap may be performed in a variety of ways as described earlier. Further, the semantic zoom module  may incorporate the snap functionality to address when a gesture is ceased, e.g., fingers of a user's hand  are removed from the display device . A variety of other examples are also contemplated without departing from the spirit and scope thereof.",{"@attributes":{"id":"p-0184","num":"0227"},"figref":"FIG. 16","b":["1600","1602","102"]},"An input is recognized to replace the first view with a second view that includes a second list of scrollable items in which at least one of the items in the second list represents a group of items in the first list (block ). The input, for instance, may be a gesture (e.g., pinch or reverse pinch), keyboard input, input provided by a cursor control device, and so on.","A vector is calculated to translate the second list of scrollable items such that the at least one of the items in the second list is aligned with the group of items in the first list as displayed by the display device (block ). The displayed first view is replaced by the second view on the display device using the calculated vector such that the at least one of the items in the second list is aligned with a location on the display device at which the group of items in the first list was displayed (block ). As described in relation to , for instance, the list shown in the second stage , if not translated, would cause an identifier of a corresponding group (e.g., \u201cA\u201d for the names beginning with \u201cA\u201d) to be displayed at a left edge of the display device  and thus would not \u201cline up.\u201d The vector, however, may be calculated such that the items in the first and second views align, e.g., an input received at a position on the display device  in relation to the name \u201cArthur\u201d and a position at which a representation of a group of the items relating to \u201cA\u201d is displayed in the second stage .","The second view is then displayed without using the calculated vector responsive to a determination that provision of the input has ceased (block ). A correction animation, for instance, may be configured to remove the effects of the vector and translate the list as would otherwise be displayed, an example of which is shown at the third stage  of . A variety of other examples are also contemplated without departing from the spirit and scope thereof.",{"@attributes":{"id":"p-0188","num":"0231"},"figref":"FIG. 17","b":["1700","1702","108"]},"A semantic swap gesture is identified from the inputs to cause an operation to replace the first view of representations of content in the user interface with a second view that describes the content differently in the user interface (block ). The semantic swap may involve a change between a variety of different views, such as involving different arrangement, metadata, representations of groupings, and so forth.","A crossfade animation is displayed as part of the operation to transition between the first and second views that involves different amounts of the first and second views to be displayed together, the amounts based at least in part on the movement described by the inputs (block ). For example, this technique may leverage opacity such that the both views may be displayed concurrently \u201cthrough\u201d each other. In another example, the crossfade may involve displacing one view with another, e.g., moving one in for another.","Additionally, the amounts may be based on the movement. For example, the opacity of the second view may be increased as the amount of movement increases where the opacity of the first view may be decreased as the amount of movement increases. Naturally, this example may also be reversed such that a user may control navigation between the views. Additionally, this display may respond in real time.","Responsive to a determination that provision of the inputs has ceased, either the first or second views is displayed (block ). A user, for instance, may remove contact from the display device . The semantic zoom module  may then choose which of the views to displayed based on the amount of movement, such as by employing a threshold. A variety of other examples are also contemplated, such as for keyboard and cursor control device inputs.",{"@attributes":{"id":"p-0193","num":"0236"},"figref":"FIG. 18","b":["1800","1802","1804"]},"As previously described, the interface may include a variety of different methods. For a dynamically-typed language, the interface may be implemented as a single property that evaluates to an object that has the methods on it. Other implementations are also contemplated as previously described.","A variety of different methods may be implemented as described above. A first such example involves panning access. For example, the semantic zoom module  may \u201ctake over handling\u201d of scrolling for a child control. Thus, the semantic zoom module  may determine what degrees of freedom child control is to use of perform such scrolling, which the child control may return as answers such as horizontal, vertical, none or both. This may be used by the semantic zoom module  to determine whether both controls (and their corresponding views) permit panning in the same direction. If so, then panning may be supported by the semantic zoom module . If not, panning is not supported and the semantic zoom module  does not pre-fetch content that is \u201coff screen.\u201d","Another such method is \u201cconfigure for zoom\u201d which may be used to complete initialization after it is determined whether the two controls are panning in the same direction. This method may be used to inform each of the controls whether it is the \u201czoomed in\u201d or \u201czoomed out\u201d view. If it is the current view, this is a piece of state that may be maintained over time.","A further such method is \u201cpre-fetch.\u201d This method may be used in an instance in which two controls are configured to pan in the same direction so that the semantic zoom module  may perform the panning for them. The amounts to pre-fetch may be configured such that content is available (rendered) for use as a user pans or zooms to avoid viewing cropped controls and other incomplete items.","The next examples involve methods that may be considered \u201csetup\u201d methods, which include pan access, configure for zoom, and set current item. As described above, pan access may be called whenever a control's axis changes and may return \u201chorizontal\u201d, \u201cvertical\u201d, \u201cboth\u201d or \u201cnone.\u201d Configure for zoom may be used to supply a child control with information that may be used when implementing a zooming behavior. Set current item, as the name implies, may be used to specify which of the items is \u201ccurrent\u201d as described above.","Another method that may be exposed in the programming interface is get current item. This method may be configured to return an opaque representation of an item and a bounding rectangle of that item.","Yet another method that may be supported by the interface is begin zoom. In response to a call to this method, a control may hide part of its UI that \u201cdoesn't look good\u201d during a zoom operation, e.g., a scroll bar. Another response may involve expansion of rendering, e.g., to ensure that larger rectangle that is to be displayed when scaling down continues to fill a semantic zoom viewport.","End zoom may also be supported, which involves the opposite of what occurred in begin zoom, such as to perform a crop and return UI elements such as scroll bars that were removed at begin zoom. This may also support a Boolean called \u201cIs Current View\u201d which may be used to inform the control whether that view is currently visible.","Position item is a method that may involve two parameters. One is an opaque representation of an item and another is a bounding rectangle. These are both related to an opaque representation of item and bounding rectangle that were returned from the other method called \u201cget current item.\u201d However, these may be configured to include transformations that happen to both.","For example, suppose a view of a zoomed in control is displayed and the current item is a first item in a list of scrollable items in a list. To execute a zoom out transition, a representation is request of a first item from a control corresponding to the zoomed in view, a response for which is a bounding rectangle for that item. The rectangle may then be projected into the other control's coordinate system. To do this, a determination may be made as to which bounding rectangle in the other view is to be aligned with this bounding rectangle. The control may then decide how to align the rectangles, e.g., left, center, right, and so on. A variety of other methods may also be supported as previously described above.",{"@attributes":{"id":"p-0204","num":"0247"},"figref":["FIG. 19","FIG. 1"],"b":["1900","102","1900"]},"In the example system , multiple devices are interconnected through a central computing device. The central computing device may be local to the multiple devices or may be located remotely from the multiple devices. In one embodiment, the central computing device may be a cloud of one or more server computers that are connected to the multiple devices through a network, the Internet, or other data communication link. In one embodiment, this interconnection architecture enables functionality to be delivered across multiple devices to provide a common and seamless experience to a user of the multiple devices. Each of the multiple devices may have different physical requirements and capabilities, and the central computing device uses a platform to enable the delivery of an experience to the device that is both tailored to the device and yet common to all devices. In one embodiment, a class of target devices is created and experiences are tailored to the generic class of devices. A class of devices may be defined by physical features, types of usage, or other common characteristics of the devices.","In various implementations, the computing device  may assume a variety of different configurations, such as for computer , mobile , and television  uses. Each of these configurations includes devices that may have generally different constructs and capabilities, and thus the computing device  may be configured according to one or more of the different device classes. For instance, the computing device  may be implemented as the computer  class of a device that includes a personal computer, desktop computer, a multi-screen computer, laptop computer, netbook, and so on.","The computing device  may also be implemented as the mobile  class of device that includes mobile devices, such as a mobile phone, portable music player, portable gaming device, a tablet computer, a multi-screen computer, and so on. The computing device  may also be implemented as the television  class of device that includes devices having or connected to generally larger screens in casual viewing environments. These devices include televisions, set-top boxes, gaming consoles, and so on. The techniques described herein may be supported by these various configurations of the computing device  and are not limited to the specific examples the techniques described herein. This is illustrated through inclusion of the semantic zoom module  on the computing device , implementation of which may also be accomplished in whole or in part (e.g., distributed) \u201cover the cloud\u201d as described below.","The cloud  includes and\/or is representative of a platform  for content services . The platform  abstracts underlying functionality of hardware (e.g., servers) and software resources of the cloud . The content services  may include applications and\/or data that can be utilized while computer processing is executed on servers that are remote from the computing device . Content services  can be provided as a service over the Internet and\/or through a subscriber network, such as a cellular or Wi-Fi network.","The platform  may abstract resources and functions to connect the computing device  with other computing devices. The platform  may also serve to abstract scaling of resources to provide a corresponding level of scale to encountered demand for the content services  that are implemented via the platform . Accordingly, in an interconnected device embodiment, implementation of functionality of the functionality described herein may be distributed throughout the system . For example, the functionality may be implemented in part on the computing device  as well as via the platform  that abstracts the functionality of the cloud .",{"@attributes":{"id":"p-0210","num":"0253"},"figref":["FIG. 20","FIGS. 1-11 and 19"],"b":["2000","2000","2002","2004","2004","2000","2000","2006"]},"Device  also includes communication interfaces  that can be implemented as any one or more of a serial and\/or parallel interface, a wireless interface, any type of network interface, a modem, and as any other type of communication interface. The communication interfaces  provide a connection and\/or communication links between device  and a communication network by which other electronic, computing, and communication devices communicate data with device .","Device  includes one or more processors  (e.g., any of microprocessors, controllers, and the like) which process various computer-executable instructions to control the operation of device  and to implement embodiments of the techniques described herein. Alternatively or in addition, device  can be implemented with any one or combination of hardware, firmware, or fixed logic circuitry that is implemented in connection with processing and control circuits which are generally identified at . Although not shown, device  can include a system bus or data transfer system that couples the various components within the device. A system bus can include any one or combination of different bus structures, such as a memory bus or memory controller, a peripheral bus, a universal serial bus, and\/or a processor or local bus that utilizes any of a variety of bus architectures.","Device  also includes computer-readable media , such as one or more memory components, examples of which include random access memory (RAM), non-volatile memory (e.g., any one or more of a read-only memory (ROM), flash memory, EPROM, EEPROM, etc.), and a disk storage device. A disk storage device may be implemented as any type of magnetic or optical storage device, such as a hard disk drive, a recordable and\/or rewriteable compact disc (CD), any type of a digital versatile disc (DVD), and the like. Device  can also include a mass storage media device .","Computer-readable media  provides data storage mechanisms to store the device data , as well as various device applications  and any other types of information and\/or data related to operational aspects of device . For example, an operating system  can be maintained as a computer application with the computer-readable media  and executed on processors . The device applications  can include a device manager (e.g., a control application, software application, signal processing and control module, code that is native to a particular device, a hardware abstraction layer for a particular device, etc.). The device applications  also include any system components or modules to implement embodiments of the techniques described herein. In this example, the device applications  include an interface application  and an input\/output module  that are shown as software modules and\/or computer applications. The input\/output module  is representative of software that is used to provide an interface with a device configured to capture inputs, such as a touchscreen, track pad, camera, microphone, and so on. Alternatively or in addition, the interface application  and the input\/output module  can be implemented as hardware, software, firmware, or any combination thereof. Additionally, the input\/output module  may be configured to support multiple input devices, such as separate devices to capture visual and audio inputs, respectively.","Device  also includes an audio and\/or video input-output system  that provides audio data to an audio system  and\/or provides video data to a display system . The audio system  and\/or the display system  can include any devices that process, display, and\/or otherwise render audio, video, and image data. Video signals and audio signals can be communicated from device  to an audio device and\/or to a display device via an RF (radio frequency) link, S-video link, composite video link, component video link, DVI (digital video interface), analog audio connection, or other similar communication link. In an embodiment, the audio system  and\/or the display system  are implemented as external components to device . Alternatively, the audio system  and\/or the display system  are implemented as integrated components of example device .","Although the invention has been described in language specific to structural features and\/or methodological acts, it is to be understood that the invention defined in the appended claims is not necessarily limited to the specific features or acts described. Rather, the specific features and acts are disclosed as example forms of implementing the claimed invention."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The detailed description is described with reference to the accompanying figures. In the figures, the left-most digit(s) of a reference number identifies the figure in which the reference number first appears. The use of the same reference numbers in different instances in the description and the figures may indicate similar or identical items.",{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 13"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 14"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 15"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 16"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 17"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 18"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 19"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":["FIG. 20","FIGS. 1-11 and 19"]}]},"DETDESC":[{},{}]}
