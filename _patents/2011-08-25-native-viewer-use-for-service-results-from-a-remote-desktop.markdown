---
title: Native viewer use for service results from a remote desktop
abstract: In one embodiment, a method includes establishing a session to a remote desktop determined for a user of a client device. The session allows the client device to remotely access the remote desktop to have one or more services performed for the user of the client device using resources of the remote desktop. The client device sends a request for a service in the one or more services to be performed on the remote desktop in the session and receives a result set determined from the service being performed by the remote desktop. A native viewer for the client device is determined based on a type of the result set. The native viewer is then invoked to display the result set.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09009219&OS=09009219&RS=09009219
owner: VMware, Inc.
number: 09009219
owner_city: Palo Alto
owner_country: US
publication_date: 20110825
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["This application claims priority to U.S. Provisional App. No. 61\/508,404 for \u201cNative Viewer Use for Service Results from a Remote Desktop\u201d filed Jul. 15, 2011, the contents of which is incorporated herein by reference in their entirety.","This application is related by subject matter to U.S. patent application Ser. No. 12\/694,358, filed Jan. 27, 2010 and entitled, \u201cIndependent Access to Virtual Machine Desktop Content;\u201d U.S. patent application Ser. No. 12\/694,368, filed Jan. 27, 2010 and entitled, \u201cAccessing Virtual Disk Content of a Virtual Machine Using a Control Virtual Machine;\u201d and U.S. patent application Ser. No. 12\/694,383, filed Jan. 27, 2010 and entitled, \u201cAccessing Virtual Disk Content of a Virtual Machine Without Running A Virtual Desktop;\u201d all of which are incorporated herein by reference in their entireties.","Server-based computing allows a networked client device, remotely situated with respect to a server computing system, to access computing resources on the server. For example, the client device may run desktop remoting client software (and\/or hardware) that uses a remote desktop protocol, such as Remote Desktop Protocol (RDP), Virtual Network Computing (VNC), or Personal Computer over Internet Protocol (PCoIP), to access a desktop remotely. The desktop remoting application displays an image of a graphical user interface generated by the operating system and applications running at the server computing system, e.g., in a virtual machine.","The term, \u201cdesktop\u201d can refer to the virtual machine or physical system accessed by an end user as local (to the user) desktop or workstation computer. Alternatively, the term \u201cdesktop\u201d may refer to the human interface environment through which users can launch, interact with, and manage applications, settings, and\/or data. The remote desktop is accessible by the user using the remote desktop protocol and a desktop remoting client. The client device transmits user input such as keyboard or mouse input to the remote system to be processed there, and receives display and other data, such as sound, for presentation to the user.","Virtual Desktop Infrastructure (VDI) is used to create a large number of independent computing environments for a large number of users using computer virtualization technologies. Users remotely access the virtual means running in the datacenter using software that remotes the user interface of the remote desktop. Users can login to the virtual desktop anytime from any device supporting a remote protocol to connect to the virtual desktop. A user may be accessing the remote desktop via client devices, such as smart phones, tablet devices, and cellular phones, which have a different form factor than desktop typical computer or laptop. As a result, the image of a graphical user interface may not be ideal for the end user to read due to the form factor of the client device.","For example, the client device may have a smaller screen resolution making the image hard to view or navigate, and precise pointing may be difficult or impossible. For example, touch sensitive screens may be leveraged by client devices to simplify how users interact with applications, and remote desktop solutions that convert the touch events into mouse\/keyboard events for the remote desktop may not provide a satisfactory user experience. Thus, displaying the image of the remote desktop may not be very convenient for accessing files on remote desktops from such devices.","Cloud based file synchronization services allow users to install client software on different devices to sync data in a cloud file system. The service is implemented by moving the files into a cloud file system and allowing access to the files from different client devices\/platforms. The file changes are synchronized into the \u201ccentral\u201d copy. This solution has limitations in that the remoting is not a desktop solution and can be inconvenient to administer. Also, enterprise customers may not want their employees to use 3party public cloud deployments for security reasons. The enterprises may want to permit employees to access personal files from various devices, but want any persistent copy to remain only in the enterprise's private datacenter(s). Also, the cloud based file synchronization service is inefficient, requiring extra storage to store the files in the cloud, resulting in additional costs.","In one embodiment, a method includes establishing a session to a remote desktop determined for a user of a client device. The session allows the client device to remotely access the remote desktop to have one or more services performed for the user of the client device using resources of the remote desktop. The client device sends a request for a service in the one or more services to be performed on the remote desktop in the session and receives a result set determined from the service being performed by the remote desktop. A native viewer for the client device is determined based on a type of the result set. The native viewer is then invoked to display the result set.","In another embodiment, a method includes establishing, at a remote desktop for a user, a session to a client device for the user, the session allowing the client device to remotely access the remote desktop to have one or more services performed for the user of the client device using resources of the remote desktop; receiving, at a service agent of the remote desktop, a request from the client device for a service in the one or more services to be performed in the session; causing the service to be performed by the remote desktop; determining a result set from the service being performed; and sending the result set to the client device, wherein the client device uses a native viewer to display the result set.","In another embodiment, a non-transitory computer-readable storage medium is provided and contains instructions for controlling a computer system to be operable to: establish a session to a remote desktop determined for a user of a client device, the session allowing the client device to remotely access the remote desktop to have one or more services performed for the user of the client device using resources of the remote desktop; send, from the client device, a request for a service in the one or more services to be performed on the remote desktop in the session; receive a result set determined from the service being performed by the remote desktop; determine a native viewer for the client device based on a type of the result set; and invoke the native viewer to display the result set.","The following detailed description and accompanying drawings provide a more detailed understanding of the nature and advantages of the present invention.","In the following description, for purposes of explanation, numerous examples and specific details are set forth in order to provide a thorough understanding of embodiments of the present invention. Particular embodiments as defined by the claims may include some or all of the features in these examples alone or in combination with other features described below, and may further include modifications and equivalents of the features and concepts described herein.",{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 1","b":["100","104","102","106","104","106","106"]},"Client device  may send service requests to remote desktop . As will be described below, proxy services agent  may provide multiple services. Proxy services agent  processes the request by having the service performed by remote desktop . A result set is generated by remote desktop  and proxy services agent  sends the result set to client device . A native viewer (not shown) on client device  may be invoked and used to display the result set. Thus, instead of using a remote desktop protocol to display an image of the user's remote desktop , the native viewer is used to display the result set. With client devices  having a different form factor than a user's desktop, the user may leverage certain features, such as touch-screen navigation and smooth scrolling provided by the native application that are available on client device , but may not be available by remoting desktop .","Remote desktop  may be a physical computer system or a virtualized computer system. Physical desktops may be actual physical machines being controlled remotely. Virtualized desktops may export user interfaces, e.g., keyboard and mouse input, audio and visual output, to the user from virtual machines running remotely (in the datacenter) or locally on client device , or, in some cases, using a hybrid.","Desktop management server  may be an interface layer that includes desktop management software with various functions. Desktop management server  (see ) includes a connection broker , which allows a remote user to select a type of remote desktop (e.g., remote desktop client or client services interface) and initiate a desktop session, or a connection to remote desktop  using client device . Client device  may be a mobile device, such as a cellular phone, smart phone, tablet, personal computer (PC), laptop or other computing device that may have a different form factor than a remote desktop. For example, remote desktop  may virtualize a screen size that is different from the size of the display provided by access device . Additionally, client device  may be running a different operating system (OS) with different application characteristics and application programming interfaces (APIs) than remote desktop . Client device  includes a desktop agent  that communicates with desktop management server  or directly to remote desktop , which may be hosted remotely or locally by a Type 2 hypervisor running on client device . Desktop agent  may send service requests to have services performed by the user's remote desktop . In one embodiment, a side channel for a remote desktop session may be used to send the requests and receive the result sets. This side channel may be used instead of a channel used to send an image of remote desktop  using a display protocol. Desktop management server  allows non-display traffic to be sent from desktop agent  to remote desktop  in the side channel. This process will be described in more detail below.","The service queries include file explorer services, web proxy services, and search services, all of which will be described in more detail below. Other services may also be performed. In one embodiment, proxy services agent  may only process service requests from client device . Other requests, such as remote desktop protocol requests, for the desktop may be processed by other agents in desktop management server .","Proxy services agent  outputs a result set. The result set may be representative of what would be output on an image of remote desktop . For example, the result set may include a list of files that can be displayed by client device . Any suitable protocol or API can be implemented for message transmission between client device  and desktop management server . For example, various web services protocols can be used, and the message payloads may be encrypted and\/or compressed. Desktop agent  uses a native renderer  to display the result set. Desktop agent  and native render  may be integrated into a single application (or \u201capp\u201d) that is installed onto the device. Native renderer  selects a native viewer and launches the native viewer to display the result set. The native viewer may be a component of the system software shipped with device , an add-on application or plug-in, or integrated with desktop agent  and\/or native renderer . Depending on the type of information in the result set, different native viewers may be used. In one example, native viewers are used to display documents of different file formats, such as PDF, PPT, XLS, and DOCx. The native viewer may be optimized for the screen size of client device , and includes features available to client device  that may not be available on remote desktop . For example, different views, options, and navigation ability (e.g., zoom-in, pan, and rotate features, touch screen, etc.) may be provided for locally viewed result sets. For example, a native file explorer application may be used to display a list of files.",{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 2","b":["104","106","201","106","202","108","110","106"]},"In one embodiment, a communication channel may be opened for displaying a remote bitmap representation of remote desktop . Various remote desktop protocols, such as RDP, VNC, or PCoIP, may be used to access remote desktop . Client device  receives over the communication channel display information using the display protocol, and displays a bitmap representation of the remote desktop. A side channel for the communication channel may be used to send service queries and receive result sets that operates inside the same network ports as the main display protocol communication but which logically segments \u2018side channel\u2019 data using a system of embedded content tagging. Desktop agent  may open ports on client device  that are used to connect to desktop management server  through the side channel. Accordingly, client device  is not required to communicate through the side channel for receiving the bitmap representation of remote desktop . Rather, an independent channel for sending service requests and receiving result sets may be used.","Depending on implementation, service request transmitter  and result set receiver  may be able to send and receive, respectively, communications in any suitable protocol either as an independent network channel or as a side channel to an established display protocol network channel. The protocols may be able to send metadata and result sets in text-based or binary formats. Additionally, the protocol may be used across different platforms, such as iOS\u2122, Android\u2122, WebOS\u2122, and Blackberry. In one embodiment, JavaScript object notation (JSON) is used. JSON is a text-based format used for sending data over a network connection for web services. Other protocols may also be used. For example, Apache \u201cThrift\u201d is an interface definition language that is used as a remote procedure call (RPC) framework. Apache Thrift is a binary communication protocol and provides object-level RPC abstractions using a binary wire protocol. \u201cGoogle protobuf\u201d may also be used for encoding of structured data in a binary format. In one embodiment, when files are selected by a user on client device  for retrieval, the above protocols may be used when the native application restricts a client view to a limited number of files per view and paging may be used where portions of files (e.g., pages) are downloaded at a time. Some of the protocols also allow compression of the files and also paging. For commonly used advanced formats like DOCx, PPTx and PDF where the file packaging format is open, the file can be downloaded in pages. In this case, the client services interface also needs to interface with the native viewer application in order to send pages on demand, e.g., when a user advances or scrolls beyond currently cached information.","The result set, upon being downloaded, may be stored in a memory , which may be local cache memory. Memory  (or the result set stored therein) may be encrypted and made accessible only after the user has been authenticated. Also, memory  may be protected from other applications on client device  when the user is not accessing remote desktop . For example, the data stored in memory  is not accessible by other applications other than via desktop agent . Known techniques for securing (e.g., encrypting) memory  may be used. Also, result sets stored in memory  may be persistent. For example, when client device  is offline, the result sets in memory may still be accessed. In one embodiment, memory  may be a fixed size. When memory  is of a fixed size, an eviction policy may be used to clear space in memory . Different methods to free up space in memory  are known in the art, such as a least recently used (LRU) policy. Also, although memory  is described as being a fixed size, memory  may be expandable via external memory devices.","In one example, when a service request is performed, memory  may be checked to determine if the result set already resides in memory . For example, when a file is requested, a \u201clast modified date\u201d time-stamp policy is used to determine if a file has been changed on remote desktop  before downloading the file again. If the file has not been changed, then the file may be retrieved from memory  and displayed.","After the result set is downloaded to memory , a native viewer  may be used to render the result set. Native viewers  are local to client device . That is, the applications, components, plugins, etc., comprising native viewers  are stored on client device  and are launched on client device . Typically, native viewers  are customized for the form factor of client device . In this case, native viewer  may have different features that leverage the form factor. For example, native viewers  may leverage touch screens and various touch commands. Also, native viewer  may have features that are not available on applications running on remote desktop . Additionally, the data may be displayed in a way that fits the form factor in client device . For example, mobile devices may have smaller screens and the data may be formatted in a way to optimize the viewing of the data.","A native viewer selector  is used to select the type of native viewer . Determining which native viewer  to use may be based on the type of data included in the result set. For example, metadata for the result set is used to determine which native viewer  to use. In one example, Multipurpose Internet Mail Extensions (MIME) types are used to determine the type of data and which native viewer  to use. For example, if a PDF file is being displayed, a local PDF \u201cIntent\u201d is launched. The \u201cIntent\u201d is a handler that can launch a local application for client device . In other examples, if a text document is being rendered, then a local word processing application is used to render the document. Most client devices  include built-in support for common file types, e.g., various Microsoft Office\u2122 files, PDF files, JPG files, etc.","A native viewer launcher  launches the selected native viewer  to display the result set. In one embodiment, the display the user sees would be the same as if native viewer  was launched to display the result set without connecting to remote desktop . In other embodiments, a combination of a bitmap display and native viewer  may be used. For example, a first frame may include a bitmap representation of remote desktop  and a second frame may include a view of the result set (or a portion of the result set) in native viewer .","In some embodiments, a local native viewer  may not be available to render the result set. In this case, a third-party application may be used. The third-party application may include a cloud-based application where the application is installed and maintained on a server (e.g., a server in a data center that also includes remote desktop ) that is accessible to client . In one example, native viewer launcher  opens an interface for the third-party application using a representational state transfer (REST) interface. Native viewer launcher  may connect to the server, such as an application publication server (e.g., such as a terminal server or similar technology), to download the result set and be provided with the user interface for edit\/view functionality over a desktop remoting protocol. In this case, remote desktop  may send the result set to the server instead of client device . Also, using the third party application may be efficient when the file size is large and the user is only interested in a portion of the file. In one embodiment, when the server and virtual machine running remote desktop  are in the same data center, sending the result set to the server may be faster due to the bandwidth being higher in the data center than sending the result set to client device .","The user may be authenticated before accessing remote desktop .  shows a more detailed example of system  for authenticating the user according to one embodiment. A remote desktop gateway  is used to authenticate the user. Remote desktop gateway  may be deployed in a demilitarized zone (DMZ) in the data center and may be included in a connection broker  in , which is described below. In one example, a new client services interface (shown in ) is launched by a user to have services performed. The client services interface may be similar to a remote desktop client in terms of establishing connectivity to remote desktop . Although the authentication is described with respect to establishing a remote desktop session, an independent authentication process may be used for establishing a session for having services performed. When the client services interface on client device  is launched, client device  provides credentials to remote desktop gateway . For example, enterprise credentials are provided to authenticate the access for the user to remote desktop . A gateway authenticator  authenticates the credentials. Gateway authenticator  may use different methods of authenticating the credentials. In one example, based on the administrative policy, the user may be asked to use a two-factor authentication. For example, the user may be required to first provide an RSA SecurID\u00ae or another token and then provides active directory credentials. This authentication process is known and need not be described further.","In one embodiment, in some cases where users are outside an enterprise network, once the user is authenticated, a tunnel initiator  determines a remote desktop  for the user. For example, a connection is initiated to a virtual machine running in the data center. The credentials are passed to the virtual machine. The virtual machine accessed could be the user's assigned virtual machine, or a generic virtual machine used just for mounting and accessing the user's virtual disk. This way, the user's virtual machine need not be running to access the user's data. A desktop authenticator  is used to authenticate the user and returns a token that can be used by client device  for communication with remote desktop . Tunnel initiator  then initiates a tunnel  between client device , gateway , and remote desktop . Tunnel  allows users from outside a firewall of the enterprise to access resources hosted in the enterprise (e.g., remote desktop ). It may not be necessary to establish a tunnel for users inside the enterprise network.","In one embodiment, a remote desktop session is also initiated to allow an image of the user's desktop to be displayed. Display protocol information, such as PCoIP\/RDP protocol display information, may be sent through tunnel . For example, Hypertext Transfer Protocol Secure (HTTPS) is used and the display information is encrypted using secure socket layer (SSL). Additionally, as discussed above, a side channel to the remote desktop session is used to send service requests and result sets through the tunnel. In one embodiment, client device  uses separate ports to have services performed than those used to send the display information.","Once client device  is authenticated, client device  can send service requests through tunnel . If the user on the same network as remote desktop , then communication may flow directly from client device  to remote desktop  without mediation through remote desktop gateway . In one example, client  may be provided an initial client services interface that provides various options to interact with remote desktop . For example, different services may be performed, such as the file explorer service, the search service, or the browser service. Client device  can generate and send a service request with the token through tunnel . Proxy services agent  verifies the token and can service the request.  depicts a more detailed example of proxy services agent  according to one embodiment. As described above, a service request may be received through a side channel from client device . Proxy services agent  responds to the service request and may maintain a record of all requests received from client device , which may be used in auditing of requests. For example, the audit trail is forwarded to desktop management server  for storage. In one embodiment, integration with industry accepted DLP (data leak prevention) products is provided. For example, every time a service request is handled audit logs are propagated to desktop management server . Because audit logs are kept, particular embodiments may comply with certain regulations that regulate the publishing of data. Additionally, a centralized copy of information (e.g., files) is kept in the data center. This may comply with company regulations. Also, edits made on client device  may be synchronized with the central copy.","Depending on the service request, proxy services agent  may leverage different service plug-ins . For example, a file explorer service agent -, a search service agent -, and a browser service agent - may be used to process different service requests. Other services may also be added as plug-ins and existing plug-ins may be removed. File explorer service agent - may perform requests associated with the files stored on or accessible to remote desktop . Search service agent - may perform searches of the local desktop at remote desktop . Browser service agent - may be a proxy for web browsing requests. For example, access to an intranet or the Internet is provided via browser service agent -.","Proxy services agent  receives service requests and performs the requested services, optionally by performing system calls into the operating system running on remote desktop . For example, files may be retrieved by accessing system functions of the operating system on remote desktop . Also, applications running on remote desktop  may also be queried to perform the services. A result set gathered by proxy service agent  and then returned to client device . The type of result set may depend on the service performed. For example, proxy services agent  may use file explorer service agent - to output a list of files. Browser service agent - may output a web page and search service agent - may output search results of the local desktop. The service may be performed without invoking a corresponding application on remote desktop . For example, if a web page is opened, a web browser on remote desktop  will generally not be launched to open the web page. Rather, a query is performed to determine the requested web page via APIs of the operating system to access the web page. The result set may include HyperText Transfer Markup Language (HTML) for the web page.","Once the service has been performed by remote desktop , the result set is prepared for transmission to client device . A data transmitter  may optimize the result set based on the type of data being sent. For example, some data may be compressed and\/or encrypted before sending. In one example, HTTP data from a web page may be compressed or files may be compressed and encrypted. The encryption may be secure socket layer (SSL) or other known encryption techniques. If the result set includes a file to send to client device , a hypertext transfer protocol (HTTP) chunked session is initiated and the file is divided into small binary chunks for transfer. Chunked transfer encoding is a data transfer scheme available in the HTTP WAN protocol and is leveraged to maintain a live connection to client device  to send variable sized chunks.","In a search example, search service agent - is used to performed searches of remote desktop  that might not be possible on client device . For example, a local email client on remote desktop  may be searched. The local email client may have access to an indexed version of the user's email on an email server. A user may enter a search query on client device  and the query is sent to proxy services agent . Search service agent - is used to perform the query. A result set is determined of emails that match the query based on a search of the indexed version of the user's email. Searching the indexed version is an efficient way to search through a user's email. The result set may then be sent back to client device . A native email application may then be used to display emails selected from the result set.","In a browser example, browser services agent - is used to perform web browsing of an internal enterprise intranet or the public Internet. Browsing of web pages may be more efficiently performed using remote desktop . For example, the bandwidth of a connection to the Internet in the data center may be faster than the bandwidth of a connection available to client device . In one example, a user may enter a uniform resource locater (URL) for a web page. The query is then sent to proxy services agent . Browser service agent - may access the web page using remote desktop . For example, the HTML of the web page is retrieved using APIs of the web browser on remote desktop . The web page is sent to client device , which launches a native web browser to display the web page. For example, the native web browser uses the HTML to display the web page. One way the browsing may be optimized is that the HTML for the web page may be compressed and sent to client device , which uses less bandwidth. Another way of optimization is link retrieval may be performed when the web page is retrieved. Link retrieval optimistically retrieves and caches web pages associated with the links on the web page sent to client device . Because bandwidth in the data center is usually faster, the web pages may be retrieved efficiently and stored at remote desktop . If a link is then selected by a user, then the newly selected page may be immediately sent to client device  without performing another web query.","In a file explorer example, a file system may be accessed using remote desktop .  depicts a simplified flowchart  of a method for processing file service requests according to one embodiment. In one example, a special handler\/service is provided by file explorer service agent - to handle incoming file service requests. File explorer service agent - may be a micro HTTP protocol handler on a configurable port that provides HTTP file explorer remoting application programmer interfaces (APIs) for mobile devices. In one example, a connection is opened on a file handler port on client device  to have file service requests performed using the APIs.","At , client device  sends a default directory request to show the default directory (e.g., a home directory) of files. The default directory may also be configurable by each user or an administrator. At , client  receives a list of files stored in the home directory. For example, file explorer service agent - may send a request to remote desktop  to retrieve the list of files in the home directory. The \u201clist of files\u201d may include file names and\/or folder names for files and folders in the directory. The list of files is returned as the result set to client .","At , client device  displays the list of files using native viewer . For example, the native file viewer application on client device  may be used to display the list of files. The user may then review the file list, navigate to other folders using additional directory requests, and perform a file request. At , client  generates and sends the file request. Different file requests may be sent, such as a metadata request or a file transfer request. File transfer requests are requests for file contents and metadata requests return information describing data about files that are stored at remote desktop . Examples of metadata requests include requests such as \u201cGetAllFiles\u201d for a default folder (e.g., a \u201cMy Documents\u201d folder in Windows), which retrieves a list of files stored in the folder. Additional requests may also be supported, such as \u201crecentlyUsedFiles\u201d, \u201csearchFilesInAFolder\u201d, and \u201cemailFiles\u201d. These requests retrieve recently used files, search for files in a folder, or email certain files.","At , it is determined whether the request is for a file transfer or a metadata transfer. If the request is a metadata request, at , client device  receives requested file information or list of files. At , the file information or list of files is stored in memory . If the request is a file transfer request, at , client  receives at least a portion of the contents of the file or files requested. For example, the file contents may be sent in chunks or pages. At , the file contents are stored in memory . The result set for either type of request may also contain metadata information about the files retrieved, such as \u201cisFileAFolder\u201d, \u201clastModified Timestamp\u201d, \u201cfileSize\u201d, and \u201cfileACL\u201d metadata. The \u201cis FileAFolder\u201d metadata indicates whether the file is a folder, the \u201clastModified Timestamp\u201d metadata indicates the time when the file was last modified, the \u201cfileSize\u201d metadata indicates the size of the file, and the \u201cfileACL\u201d metadata indicates the access rights to the file.","Whether the request was a metadata request or a file transfer request, at , native viewer selector  determines a native viewer  that can be used to render the requested information pertaining to the file(s) or list of files or contents. At , native viewer launcher  launches native viewer  to render the file(s) or list of files. shows a first view  of a native file explorer application for file viewing according to one embodiment. A native file explorer application may be used to display the list of file names. In a first view , an initial client services interface is shown. View  includes a \u201cLaunch File Explorer\u201d option , a \u201cLaunch Browser\u201d option , a \u201cConnect using PCoIP\u201d option , and a \u201cSearch\u201d option . Launch file explorer option  allows a user to perform file service requests. Launch browser option  allows a user to perform browser retrieval of web content. Connect using PCoIP option  allows the user to connect to a standard remote desktop protocol session. This is where a bitmap of the user's remote desktop  is displayed at client . Search option  allows local searches of remote desktop .",{"@attributes":{"id":"p-0052","num":"0051"},"figref":"FIG. 6","i":"b ","b":["607","607","602","607","104","206","104","607","104","106","112","3","608","1","608","3","610","1","610","4"]},"When a file or folder is selected by the user, e.g., by tapping it, the file may be downloaded to memory  and native viewer  may be launched to render the file contents or list of files. In one example of a metadata request, the \u201cMyPictures\u201d folder - may be selected. A metadata request for the list of files in the \u201cMyPictures\u201d folder - may then be generated and sent to remote desktop . File explorer service agent - then processes the request to determine the list of files in the \u201cMyPictures\u201d folder on the user's remote desktop . The list of files is sent to client device  and rendered in native viewer . For example, the list is shown using the local file explorer application, which leverages the form factor of client device . Also, in an example of a file transfer request, a selection from user is received for one of files , such as the \u201cGartnerHype.pdf\u201d file -. The request for the file is generated and sent to remote desktop . File explorer service agent - processes the request to have remote desktop  retrieve the file. The file is processed by data transmitter  for optimal transmission and then sent to client device . Client device  receives the content and result set receiver  performs any pre-processing of data such as decryption\/decompression. Client device  then determines that the type of the file is a PDF file and invokes the native PDF viewer. The native PDF viewer then displays the \u201cDocument.pdf\u201d file -. In one example, the native PDF viewer may be a different application (e.g., from a different vendor) than the PDF viewer on remote desktop . There may be no restriction as to the application used to view the result set on client device .",{"@attributes":{"id":"p-0054","num":"0053"},"figref":"FIG. 6","i":"c ","b":["613","112","3","614","1","614","2","614","3","614","1","614","2","614","3","614","2","106","112","3","106","104","402"]},"Accordingly, particular embodiments use native viewer  to display result sets from service requests. Using native viewer  leverages the form factor and ergonomics of client device . For example, if client device  has a small mobile phone form factor, a complete Windows\u2122 desktop folder view may not be intuitive for the user. Additionally, converting touch events to mouse\/keyboard events may not work correctly on mobile phones with small screen resolutions. Using native viewer  allows those touch events to be used without translation to mouse\/keyboard events. Additionally, the features of native viewers  may now be leveraged. For example, features such as zoom in, pan, and rotate on locally-rendered native viewers  for different file formats may be leveraged.","While file viewing has been described, file editing is also possible where the changes may be pushed back to remote desktop . In this case, changes may be sent back to remote desktop . The edits may be stored in the files at remote desktop . Different techniques may be used to store the changes, such as a binary \u201ccliff\u201d of files to push back only changes in a file.",{"@attributes":{"id":"p-0057","num":"0056"},"figref":["FIG. 7","FIG. 7"],"b":["206","705","705","106","746","710","746"],"i":["a ","b"]},"Remote access to remote desktops is generally provided to client devices through a desktop management server . Desktop management server  provides access to remote desktops by the remote user devices, and manages the corresponding virtual machines through communications with a software interface  of a Virtual Machine Management Server (VMMS) . The Virtual Machine Management Server (VMMS)  is responsible for provisioning and maintaining the multitude of Virtual Machines (VMs)  implemented across potentially a multitude of physical computers, such as computers , , and . When a user wishes to access an existing virtual machine, the user establishes a connection through the desktop management server , and a remote desktop is presented (as a user interface) on the user's client device, through which communications are made with the underlying virtual machine. Additionally, the virtual machine may include a proxy services agent  as described above with reference to  to perform service requests.","In the example embodiment shown, each physical computer, for example computer  contains the underlying hardware , virtualization software (here a hypervisor ), and one or more virtual machines, for example VM and VM , which each contain Agent Software (guest system software) labeled here as \u201cA\u201d in each VM box. The Agent Software is typically responsible for connecting each VM to the desktop management server  and manages each desktop connection. It typically notifies the desktop management server  upon each login, logoff, and disconnect. The Agent Software also provides support for remote devices such as USB devices, etc. The Agent Software may also be enhanced to include proxy services agent  and service plug-ins .","The VMMS  typically manages pools of compute resources used to run virtual machines on a set of clusters typically containing multiple servers with CPUs, memory, and communications hardware (network). A virtual computer (a virtual machine or VM), when active, consumes physical compute resources and is managed by a hypervisor layer, such as hypervisor  running on physical computer . The hypervisor manages physical resources as well as maintains virtual-to-physical hardware mappings. The Software Interface  running on the VMMS  communicates with these hypervisors (e.g., hypervisor ) to provision and manage each VM . For example, according to traditional virtualization techniques, when a remote user (e.g., user ) requests access to a particular existing desktop, the desktop management server  (through its software ), communicates with the VMMS through its software interface  to start the corresponding VM  executing on an appropriate physical computer, and to relay the user interface exported by the VM  to the remote user so that the user can interact with the remote desktop. In some instances (e.g., according to administrator policies), when the desktop is exited, or otherwise shutdown, the desktop management server  communicates with the VMMS  to save the VM image to the datastore  as appropriate and to de-allocate physical and VM system resources as needed.","In general, the VMMS Server  provides interfaces  to enable other programs, such as the Pool Manager , to control the lifecycle of the various virtual machines that run on a hypervisor. In one example embodiment of an existing virtualization infrastructure provided by VMware Inc., desktop management server  includes an Administrative Console , an Inventory Manager , a Connection Broker , and a Pool Manager . The Connection Broker  allows a remote user, such as remote user , through client device , to initiate a desktop session with an assigned VM  or to access an existing connection to VM . Connection Broker  may also be enhanced to include remote desktop gateway .","The Inventory Manager  maintains a mapping of different user belongings in the system. For example, user may be entitled to certain applications; may have access to more than one desktop, etc. The Inventory Manager  also keeps track of the running remote desktops in the system. The mappings may be stored using any number of mechanisms, including using one or more directory servers  accessible through network .","The Pool Manager  component manages the complete lifecycle of remote desktops. Desktops in a pool are grouped together based on similar software requirements. Desktop Administrators create logical desktops groups (desktop pools) that are provisioned typically from the same base image, including the Agent Software. For example, a desktop pool may include virtual machines that run the same set of software applications and run the same operating system. As yet another example, a desktop pool may contain a set of cloned virtual machines that are identical in every aspect but are customized to include unique identity that includes for example, a unique computer name, IP\/MAC Address, Domain membership, Software license serial numbers, OS specific security identifiers among other things. The base image can be a virtual machine or a template virtual machine that is created and\/or managed by the VMMS .","The software state of all the virtual machines  in a desktop pool may be persistent or non-persistent. Persistent desktops maintain the state of the files or applications stored inside the virtual machines. Non-Persistent desktops are stateless desktops; the desktop state is restored to the original state after every user session. In some cases, the Desktop Administrator can define how frequently the \u201crevert to golden state\u201d operation should be performed. The restore to pristine image or revert to golden state operation can also be scheduled to occur based on certain conditions.","The Administrative Console  typically provides a user interface for a Desktop Administrator to manage the configuration of desktop pools, define user access policies, manage ongoing maintenance, software installed in the desktops, etc.","The Directory Server  stores the persistent state required for managing the remote desktops. For example, the VMs in a desktop pool maybe associated with one or more users. The user identifiers for a pool may be stored in the directory server . The users may also be referenced through an external directory server such as\u2014Microsoft Active Directory, Novell eDirectory, IBM Tivoli Directory Server, etc.","Examples and details of variants of virtualization architectures, such as that described with reference to , can be found in U.S. patent application Ser. No. 12\/694,358, filed Jan. 27, 2010 and entitled, \u201cIndependent Access to Virtual Machine Desktop Content;\u201d U.S. patent application Ser. No. 12\/694,368, filed Jan. 27, 2010 and entitled, \u201cAccessing Virtual Disk Content of a Virtual Machine Using a Control Virtual Machine;\u201d U.S. patent application Ser. No. 12\/694,383, filed Jan. 27, 2010 and entitled, \u201cAccessing Virtual Disk Content of a Virtual Machine Without Running A Virtual Desktop;\u201d U.S. patent application Ser. No. 11\/395,012, entitled Virtualized Desktop Allocation System Using Virtual Infrastructure, filed Mar. 31, 2006; U.S. patent application Ser. No. 12\/058,269, entitled Synchronized Clones, filed Mar. 28, 2008; and in U.S. Patent Publication No. 2009\/0216975, entitled Extending Server-Based Desktop Virtual Machine Architecture to Client Machines, filed Feb. 23, 2009, all of which are incorporated by reference in their entireties for all purposes.","The various embodiments described herein may employ various computer-implemented operations involving data stored in computer systems. For example, these operations may require physical manipulation of physical quantities\u2014usually, though not necessarily, these quantities may take the form of electrical or magnetic signals, where they or representations of them are capable of being stored, transferred, combined, compared, or otherwise manipulated. Further, such manipulations are often referred to in terms, such as producing, identifying, determining, or comparing. Any operations described herein that form part of one or more embodiments may be useful machine operations. In addition, one or more embodiments also relate to a device or an apparatus for performing these operations. The apparatus may be specially constructed for specific required purposes, or it may be a general purpose computer selectively activated or configured by a computer program stored in the computer. In particular, various general purpose machines may be used with computer programs written in accordance with the teachings herein, or it may be more convenient to construct a more specialized apparatus to perform the required operations. The various embodiments described herein may also be practiced with other computer system configurations including hand-held devices, microprocessor systems, microprocessor-based or programmable consumer electronics, minicomputers, mainframe computers, and the like.","One or more embodiments may be implemented as one or more computer programs or as one or more computer program modules embodied in one or more computer readable storage media. The term computer readable storage medium refers to any data storage device that can store data which can thereafter be input to a computer system\u2014computer readable media may be based on any existing or subsequently developed technology for embodying computer programs in a manner that enables them to be read by a computer. Examples of a non-transitory computer readable medium include a hard drive, network attached storage (NAS), read-only memory, random-access memory (e.g., a flash memory device), a CD (Compact Discs)\u2014CD-ROM, a CD-R, or a CD-RW, a DVD (Digital Versatile Disc), a magnetic tape, and other optical and non-optical data storage devices. The computer readable medium can also be distributed over a network coupled computer system so that the computer readable code is stored and executed in a distributed fashion.","In addition, while described virtualization methods have generally assumed that virtual machines present interfaces consistent with a particular hardware system, persons of ordinary skill in the art will recognize that the methods described may be used in conjunction with virtualizations that do not correspond directly to any particular hardware system. Virtualization systems in accordance with the various embodiments, implemented as hosted embodiments, non-hosted embodiments or as embodiments that tend to blur distinctions between the two, are all envisioned. Furthermore, various virtualization operations may be wholly or partially implemented in hardware.","Many variations, modifications, additions, and improvements are possible, regardless the degree of virtualization. The virtualization software can therefore include components of a host, console, or guest operating system that performs virtualization functions. Plural instances may be provided for components, operations or structures described herein as a single instance. Finally, boundaries between various components, operations and data stores are somewhat arbitrary, and particular operations are illustrated in the context of specific illustrative configurations. Other allocations of functionality are envisioned and may fall within the scope of the invention(s). In general, structures and functionality presented as separate components in exemplary configurations may be implemented as a combined structure or component. Similarly, structures and functionality presented as a single component may be implemented as separate components.","These and other variations, modifications, additions, and improvements may fall within the scope of the appended claims(s). As used in the description herein and throughout the claims that follow, \u201ca\u201d, \u201can\u201d, and \u201cthe\u201d includes plural references unless the context clearly dictates otherwise. Also, as used in the description herein and throughout the claims that follow, the meaning of \u201cin\u201d includes \u201cin\u201d and \u201con\u201d unless the context clearly dictates otherwise.","The above description illustrates various embodiments of the present invention along with examples of how aspects of the present invention may be implemented. The above examples and embodiments should not be deemed to be the only embodiments, and are presented to illustrate the flexibility and advantages of the present invention as defined by the following claims. Based on the above disclosure and the following claims, other arrangements, embodiments, implementations and equivalents may be employed without departing from the scope of the invention as defined by the claims."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 6","i":"a "},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 6","i":"b "},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 6","i":"c "},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 7"}]},"DETDESC":[{},{}]}
