---
title: System for enhancing a query interface
abstract: A system for enhancing searching of a network has an architecture that supports a search tool component capable of soliciting a search query from a user and of invoking an instance of an Internet browser in which to display search results. A further embodiment of the invention providing at least one search option suggesting changing at least one search parameter and at least one option allowing the user to indicate that their search was successful.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07444348&OS=07444348&RS=07444348
owner: Microsoft Corporation
number: 07444348
owner_city: Redmond
owner_country: US
publication_date: 20020326
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["RELATED APPLICATIONS","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF ILLUSTRATIVE EMBODIMENTS"],"p":["This application is a divisional of application Ser. No. 09\/221,663 filed on Dec. 23, 1998 entitled SYSTEM FOR ENHANCING A QUERY INTERFACE.","The present application is related to three applications filed on Dec. 23, 1998 that are respectively entitled and have serial numbers of SYSTEM FOR IMPROVING SEARCH TEXT, application Ser. No. 09\/221,659; SYSTEM FOR IMPROVING SEARCH AREA SELECTION, application Ser. No. 09\/219,271; and COMPUTERIZED SEARCHING TOOL WITH SPELL CHECKING, application Ser. No. 09\/221,028.","The present invention relates to searching a network for information. In particular, the present invention relates to search tools used in computer searching.","Computer networks connect large numbers of computers together so they may share data and applications. Examples include Intranets that connect computers within a corporation and the Internet, which connects computers throughout the world.","A single computer can be connected to both an Intranet and the Internet. In such a configuration, the computer can use data and applications found on any of its own storage media such as its hard disc drive, its optical drive, or its tape drive. It can also use data and applications located on another computer in the Intranet or Internet. Given the large number of locations from which a computer can extract data and the increasing amount of storage capacity at each of these locations, users have found it increasingly difficult to isolate the information they desire.","In recent years, users have begun to use search engines to help them search the Internet. Typically, search engines accept a search query from the user and then look for the search query's terms in an indexed list of terms. The indexed list is generated by parsing text found on individual Internet pages and indexing the text by the page's Uniform Resource Locator (URL).","Since it is impossible to index every page on the Internet, each search engine selects a set of pages to index. Since each search engine is created by a different group of people, different search engines index different sets of pages. In fact, some search engines have become extremely specialized and only index pages related to a specific category of information such as sports or celebrities.","In addition, different search engines search through their index in different ways and are optimized using different query structures. Some search engines are optimized to accept free-text queries. Others are optimized to accept queries with logical operators such as \u201cAND\u201d and \u201cOR\u201d.","The differences between various search engines are largely unknown by average computer users. Therefore, they are not able to determine which search engine would best suit their searching goals. In addition, many of the specialized search engines that index specific categories of pages are unknown to average computer users. Therefore, users are not fully utilizing the variety of search engines available on the Internet.","Currently, there are no tools available to help computer users identify which search engines they should be using to optimize their search. There are also no tools that help searchers identify ambiguities in their search that may cause poor search engine performance.","In addition, there are no search tools that provide feedback to help searchers improve their search. If a searcher does not obtain the result they want, current search engines typically will not offer suggestions for improving the search.","In addition, most search engines provide a very technical display to the user that does not invite the user to interact with the search engines. For novice users, this increases their hesitancy to explore search engines. Therefore, a tool is needed that increases user interaction in the searching process and that makes the searching process more entertaining.","The present invention is a web companion. Under embodiments of the present invention a search tool balloon is displayed to provide search suggestions to the user. When the user submits a search to the search balloon, the invention invokes a network browser that displays the results of the search. Suggestions for improving the search are then provided in the balloon. In some embodiments, a selectable entry is added to the suggestions to allow the user to indicate that their search was successful.",{"@attributes":{"id":"p-0056","num":"0055"},"figref":"FIG. 1"},"With reference to , an exemplary system for implementing the invention includes a general purpose computing device in the form of a conventional personal computer , including a processing unit (CPU) , a system memory , and a system bus  that couples various system components including the system memory  to the processing unit . The system bus  may be any of several types of bus structures including a memory bus or memory controller, a peripheral bus, and a local bus using any of a variety of bus architectures. The system memory  includes read only memory (ROM)  and random access memory (RAM) . A basic input\/output (BIOS) , containing the basic routine that helps to transfer information between elements within the personal computer , such as during start-up, is stored in ROM . The personal computer  further includes a hard disk drive  for reading from and writing to a hard disk (not shown), a magnetic disk drive  for reading from or writing to removable magnetic disk , and an optical disk drive  for reading from or writing to a removable optical disk  such as a CD ROM or other optical media. The hard disk drive , magnetic disk drive , and optical disk drive  are connected to the system bus  by a hard disk drive interface , magnetic disk drive interface , and an optical drive interface , respectively. The drives and the associated computer-readable media provide nonvolatile storage of computer readable instructions, data structures, program modules and other data for the personal computer .","Although the exemplary environment described herein employs the hard disk, the removable magnetic disk  and the removable optical disk , it should be appreciated by those skilled in the art that other types of computer readable media which can store data that is accessible by a computer, such as magnetic cassettes, flash memory cards, digital video disks, Bernoulli cartridges, random access memories (RAMs), read only memory (ROM), and the like, may also be used in the exemplary operating environment.","A number of program modules may be stored on the hard disk, magnetic disk , optical disk , ROM  or RAM , including an operating system , one or more application programs , other program modules , and program data . A user may enter commands and information into the personal computer  through local input devices such as a keyboard , pointing device  and a microphone . Other input devices (not shown) may include a joystick, game pad, satellite dish, scanner, or the like. These and other input devices are often connected to the processing unit  through a serial port interface  that is coupled to the system bus , but may be connected by other interfaces, such as a sound card, a parallel port, a game port or a universal serial bus (USB). A monitor  or other type of display device is also connected to the system bus  via an interface, such as a video adapter . In addition to the monitor , personal computers may typically include other peripheral output devices, such as a speaker  and printers (not shown).","The personal computer  may operate in a networked environment using logic connections to one or more remote computers, such as a remote computer . The remote computer  may be another personal computer, a hand-held device, a server, a router, a network PC, a peer device or other network node, and typically includes many or all of the elements described above relative to the personal computer , although only a memory storage device  has been illustrated in . The logic connections depicted in  include a local area network (LAN)  and a wide area network (WAN) . Such networking environments are commonplace in offices, enterprise-wide computer network Intranets, and the Internet.","When used in a LAN networking environment, the personal computer  is connected to the local area network  through a network interface or adapter . When used in a WAN networking environment, the personal computer  typically includes a modem  or other means for establishing communications over the wide area network , such as the Internet. The modem , which may be internal or external, is connected to the system bus  via the serial port interface . In a network environment, program modules depicted relative to the personal computer , or portions thereof, may be stored in the remote memory storage devices. It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used. For example, a wireless communication link may be established between one or more portions of the network.","The present invention provides a web companion that acts as an interactive searching aid for searching a computer environment, especially an environment that includes an Intranet or the Internet. The web companion is interactive in the sense that it provides the user with searching options based on the search query provided by the user and previous searching options the user has selected. Some of the options provided by the web companion are possible search goals that the user may have, such as a person's e-mail address, or photographs of a celebrity. If the user selects one of the goals, the web companion can automatically select an appropriate search area and\/or adjust the user's search query to improve the likelihood that the user will find what they are looking for.","The web companion may be invoked in a number of different ways. In a Windows 95\u00ae, Windows 98\u00ae or Windows NT\u00ae based operating system provided by Microsoft Corporation, the web companion can be invoked by \u201cdouble-clicking\u201d on an icon appearing in the environment. In addition, the web companion can be invoked from within a browser such as Internet Explorer 4 (IE4) from Microsoft Corporation. In particular, the web companion can be registered with IE4 so that IE4 opens the web companion in the background when IE4 is opened. In such a configuration, the web companion does not display an interface while it is operating in the background. When the user enters a search in IE4, either through a search engine on the Internet or through the browser's search screen, the search is provided to the web companion. The web companion then processes the search through steps described below and determines possible suggestions that would aid the user. In some embodiments, the web companion then generates an interface to display the suggestions to the user as described below. In other embodiments, the web companion only displays an interface if the suggestions have a high probability of being helpful to the user. When the web companion is invoked through IE4 in this manner, the web companion display disappears if the user does not adopt a suggestion made by the web companion. The web companion may also be stored on a remote server and invoked through a network connection to the remote server.",{"@attributes":{"id":"p-0064","num":"0063"},"figref":["FIG. 2","FIG. 2"],"b":["200","200","202","200","204","202","202","204"]},"The instructions in DEFAULT.HTM  include requests for instances of three ACTIVE-X controls: SEARCH-AGENT , QUERYENG , and TRUEVOICE . Each ACTIVE-X control includes methods that can be invoked by DEFAULT.HTM  and each ACTIVE-X control is able to fire events that are trapped by DEFAULT.HTM .","QUERYENG  cooperates with DEFAULT.HTM  and WEB COMPANION  to perform most of the functions of the present invention. SEARCH-AGENT  generates, positions and animates a graphical character, shown as character  in , based on method calls from DEFAULT.HTM . SEARCH-AGENT  also allows the user to move the animated character using an input device. When the animated character is moved by the user, SEARCH-AGENT  fires an event indicating the new position of the character, which is trapped by DEFAULT.HTM .","TRUEVOICE  produces sounds based on method calls made by DEFAULT.HTM . Typically, these sounds are timed to coincide with the animation of the character produced by SEARCH-AGENT .","WEB COMPANION  generates a balloon, such as balloon  of . The balloon is positioned on the screen based on the location of the animated character, which is provided to WEB COMPANION  by QUERYENG . Based on instructions in DEFAULT.HTM  or alternatively, instructions in Active Server Pages (.ASP) called by DEFAULT.HTM , IE4 control  displays text and control buttons in the balloon. An example of text displayed by IE4 control  is shown in  as text  along with an example of a control button . Control button  may be activated by the user by positioning the cursor over the button and pressing an input device button.","The Active Server Pages called by DEFAULT.HTM include HTML instructions. Although only three ASP files ,  and  are shown in , those skilled in the art will recognize that any number of ASP files may be used in conjunction with DEFAULT.HTM .",{"@attributes":{"id":"p-0070","num":"0069"},"figref":["FIG. 3","FIG. 4A","FIG. 4A"],"b":["200","202","204","206","208","229","200","231","202","265","204","267","200","206","269"]},"If this is not the first invocation of WEB COMPANION , or after the display of the initial screen, the process continues at step  where a first selection display is produced by WEB COMPANION , DEFAULT.HTM  AND SEARCH-AGENT . An example of this display is shown in  with a character  produced by SEARCH-AGENT  shown next to a balloon  produced by WEB COMPANION  that contains text  and control buttons  produced by DEFAULT.HTM  and IE4 control . In the selection display of , the user may either choose to perform a new search or go to a previously visited site. Thus, depending on what the user selects, the process either continues at step  OR .","If the user chooses to go to a previous site, the computer-executable instructions follow step  to step , where they locate recently visited sites stored for this user. In one embodiment, the recently visited sites are stored in Registry  of , which is a memory location maintained by many of the operating systems produced by Microsoft Corporation. However, the recently visited sites may be stored in any suitable memory location on the local machine or a server. After locating the names of recently visited sites, the computer-executable instructions proceed to step , where the instructions locate the names of sites that the user frequently visits. In one embodiment, these sites are also stored in Registry .","At step , DEFAULT.HTM  causes IE4 control  to display a selectable list of recently visited sites and frequently visited sites. An example of such a selectable list is shown in  in balloon . The selectable list is accompanied by animated character , which is produced by SEARCH-AGENT .","The selectable list of balloon  includes selectable entries for five recently visited sites , , , , and , and selectable entries for five frequently visited sites , , , , and . The selectable list also includes an option to search the Internet. In many embodiments, the names of the sites that appear in balloon  are the common names for the sites. In other words, the Uniform Resource Locators (URLs) for the sites normally do not appear in balloon , since most users find it difficult to associate a site's URL with its contents. However, to accommodate users that want to see a site's URL, the present invention provides a pop-up window that appears if the user pauses the display caret over a site's name. An example of this is shown in , where URL window  has opened for entry . In , the caret is not shown so that entry  is not obscured.","While the selectable list of balloon  is displayed, DEFAULT.HTM  waits for the user to select one of the listed sites in a step . If the user selects a site, the computer-executable instructions follow step  to step .","In step , DEFAULT.HTM  calls a method in QUERYENG  to pass a message to WEB COMPANION , asking WEB COMPANION  to locate or instantiate an Internet browser such as IEXPLORE from Microsoft Corporation. If one or more Internet browsers are open, WEB COMPANION  selects the top browser. If there are no open browsers, WEB COMPANION  opens a browser. In , the opened browser is shown as IEXPLORE . DEFAULT.HTM  passes the URL of the selected site through QUERYENG  and WEB COMPANION  to IEXPLORE  at step .","IEXPLORE  uses the site's URL to locate the site's server over a network connection, such as the Internet, and to make a request from the server for the site's content. The located server, shown as server  in , returns the requested content to IEXPLORE . As those skilled in the art will recognize, the returned content can take many forms. IEXPLORE  determines the form of the content it receives from server  and displays the content in a browser window. IEXPLORE  remains open until the user closes the browser window. This allows the user to perform further Internet searching and viewing operations through the browser. Such operations are separate and independent of the operation of the web companion.",{"@attributes":{"id":"p-0078","num":"0077"},"figref":"FIG. 6","b":["300","304","306","306","300","304","300","304"]},"If at steps  or  of , the user selects to perform a new search, the computer-executable instructions continue at step . Step  leads to step  of an additional flow diagram shown in .","At step  of , DEFAULT.HTM  causes IE4 control  to display a search interface. An example of such a search interface is shown in , where the interface appears within a balloon  produced by WEB COMPANION  that appears adjacent animated character  produced by SEARCH-AGENT .","In addition to defining the search interface shown in , DEFAULT.HTM  establishes an instance of a spell checking object identified as SPELLCHECK  in . DEFAULT.HTM  assigns a text box  in balloon  to SPELLCHECK  so that text entries and cursor movements within text box  are passed directly to SPELLCHECK . This allows SPELLCHECK  to verify the spelling of words as they are entered by the user and to suggest alternative spellings when the user places the cursor over a word and activates a button on their mouse or track-ball.","The search interface found in balloon  of  includes a solicitation to the user to type in their search request in a natural language or free text format. In these formats, the user simply enters normal statements or questions and does not need to include logical operators to indicate the relationship between the terms of the search query. Text box  displays the user's search query as the user types and allows the user to modify their query. This search solicitation process is represented by step  of .",{"@attributes":{"id":"p-0083","num":"0082"},"figref":["FIG. 7B","FIG. 7A","FIG. 7B","FIG. 2"],"b":["250","250","251","252","252","222"]},"By recording the user's past searches and by allowing the user to review their past searches, the present invention improves searching efficiency by reducing the likelihood that the user will unknowingly reuse unsuccessful searches or waste time trying to remember past successful searches.","While the user is entering their search query, the query is spell checked by SPELLCHECK  at a step  of . If the search query includes a misspelled word, SPELLCHECK  provides a visual cue to the user that a word is misspelled. In many embodiments, this visual cue is a red line underneath the misspelled word.  shows an example of a visual cue  beneath the misspelled word \u201camercan\u201d. In further embodiments, SPELLCHECK  displays a list of properly spelled words when the user activates a button on their input device. An example of such a display is shown in  where a selectable list  is displayed by SPELLCHECK  in response to a button being activated on an input device while the cursor is positioned over the word \u201camercan\u201d. If the user selects one of the properly spelled words, SPELLCHECK  automatically replaces the misspelled word with the selected word.","Once the user has finished entering and modifying their query, they activate NEXT button  of  or NEXT button  of , which causes the instructions of DEFAULT.HTM  to request the query text from SPELLCHECK  and to initiate processing of the query text. Such processing begins at step  of , where the web companion performs a natural language parse (NLP) of the query text. The steps taken to perform the natural language parse are shown in detail in the flow diagram of .","The NLP process of  begins at step , where QUERYENG  of  replaces the spaces between words found in quotes in the user's query with underscores. At step , the search query is stored in a shared buffer  of . QUERYENG  then makes a call to invoke the NLP component at a step .","The steps required to make the call to invoke the NLP component are shown in the flow diagram of . The steps of  begin at step  where, as shown in , WEB COMPANION  starts an instance of IEXPLORE . WEB COMPANION  also passes a control file  to IEXPLORE . In step ,control file  causes IEXPLORE  to start a second instance of QUERYENG denoted as QUERYENG  in . QUERYENG  retrieves the search query stored in shared buffer  and packages the query to send it to the NLP component.","In step  of , IEXPLORE  routes the package created by QUERYENG  to the NLP component. If the NLP component is on client , the package is routed directly to the component. If the NLP component is located on a remote server, the package is routed to an Internet Server Application Programming Interface (ISAPI.DLL). The ISAPI.DLL then routes the package to the NLP component. In the embodiment of , NLP component  is located on a remote server , so the package is routed to an ISAPI.DLL , which routes it to NLP component . For clarity in the discussion below, NLP component  is used to describe the functions of the NLP component. However, it should be recognized that these functions are not dependent on the location of the NLP component and an NLP component with the same capabilities may alternatively be located on the client under the present invention.","In step , the NLP component  performs natural language parsing functions on the search query. NLP component  uses known logical and syntactic rules to identify respective parts of speech for each term in the search query. NLP component  also identifies words that modify other terms in the search query and how words modify each other. In addition, NLP component  reduces each term in the search query to its most basic form and creates inflected and plural forms from the most basic form. NLP component  is also able to identify the semantics of certain words and categorize them. For instance, NLP component  is capable of recognizing that the term \u201crecent\u201d is related to time. Other categories include city, state, country, continent, and proper name, etc","NLP component  can also group together multiple words that represent a single conceptual item. For instance, NLP is able to identify the constituent parts of a date as belonging to a single date construct. To identify these \u201cmulti-word entries\u201d, NLP component  utilizes \u201cfactoids\u201d and \u201ccaptoids\u201d. Factoids are rules that identify multi-word entries on the basis of known facts. For example, NLP component  identifies \u201cNew Jersey\u201d as a single multi-word entry because of the fact that New Jersey is a state. Captoids are rules that identify multi-word entries on the basis of the capitalization of terms in the query. For instance, if \u201cJack's Seafood Restaurant\u201d is found in a search query, NLP component  will identify it as a multi-word entry on the basis of its capitalization.","NLP component  returns a block of NLP data embedded in an HTML page that is routed back to IEXPLORE . This is shown in  as step . At step , IEXPLORE  replaces control file  with the HTML page returned by NLP component . This causes QUERYENG  to close. At step , the returned HTML page causes another instance of QUERYENG (QE) to start, which at step  places the returned NLP block in shared buffer . IEXPLORE  and QE then close at step . The final step in making the call to NLP component  is step  where original QUERYENG  retrieves the returned NLP information from shared buffer .","After the call to the NLP component the process of  continues at step , where the NLP block returned by the NLP component is parsed into its constituent parts. One embodiment of the NLP block structure is shown in , where NLP block  includes a data set for each NLP term. For example, NLP data for a first term is found in data set , which is followed by a new-line marker (\/N) . The NLP data for the terms are together positioned between matching markers  and  that include lines of dashes (\u201c-\u201d) that are terminated with new-line markers.","The NLP data for each term is normally of the form shown in  for data set . Data set  includes nine fields: WORD POSITION , WORD , PART-OF-SPEECH , WHAT-IT-MODIFIIES , HOW-IT-MODIFIES , \u2018AND\u2019 or \u2018OR\u2019 SET , PULRAL , INFLECTED FORMS , and NLP BITS . WORD POSITION  contains the word's numerical location in the query and is in the form of an integer. WORD  and PART-OF-SPEECH  provide the word itself and its part-of-speech in the query, respectively. WHAT-IT-MODIFIES  indicates the number of any word that the current word modifies in the query and HOW-IT-MODIFIES  indicates the manner in which it modifies these other words. Examples of entries in HOW-IT-MODIFIES  include noun-adjective (NADJ) relationships where an adjective modifies a noun. It can also include generic modifying relationships such as the case where a noun modifies another noun, rather than an adjective modifying a noun. An example of this would be \u201cWhitewater scandal\u201d or \u201cplant species\u201d. \u2018AND\u2019-or-\u2018OR\u2019 SET  indicates whether the term is part of a coordinating set based on \u2018AND\u2019 or \u2018OR\u2019. If the term is not part of such a set, the value in this field will be \u22121. If the term is part of an \u2018AND\u2019 set, the field will have a value between 0 and 99. If the term is part of an \u2018OR\u2019 set, this field will have a value greater than 100.","PLURAL  provides a plural form of the term if appropriate and INFLECTED FORMS  provides any inflected forms of the term, separated from each other by commas. NLP BITS  provides semantic markers that indicate semantic information about the term. Examples of such markers include: \u201c+tme\u201d for terms related to time, \u201c+city\u201d for terms identifying a city, \u201c+nme\u201d for a person's name, \u201c+neg\u201d for a term providing a negative meaning, \u201c+vulgar\u201d for vulgar terms, and \u201c+food\u201d for terms related to food. The list above is only provided as an example and those skilled in the art will recognize that other markers are possible.","Returning to the flow diagram of , the parsing function of step  parses the fields of each term into program variables used by QUERYENG  and DEFAULT.HTM . When the parse is complete, any parsed words in the WORD field of the NLP block that are \u201cstop words\u201d are deleted to form a set of keywords. \u201cStop words\u201d include words that occur so frequently in a language that they have no significance in a search query. Examples include articles such as \u201cthe\u201d and \u201ca\u201d, many prepositions, and common verbs such as \u201chave\u201d and \u201cbe\u201d. The removal of stop words is shown as step  in . In one embodiment, stop words found in quoted phrases in the user's query and stop words that appear in a multi-word entry identified by NLP component  are not removed.","At step  of , NLP data for each of the terms is checked to see if an inflected form returned by NLP matches the term itself or its plural form. If there is a match, the inflected form is deleted to remove redundancy in the NLP data. At step , underscores are removed from between multi-word entries that appear as a single term in the returned NLP block. After step  of , step  of  is complete and the conversion of the natural language parse data into keywords has been accomplished.","At step  of , the keywords formed in step  are, if desired, used to modify the behaviors or animations of the character. For instance, in one embodiment of the invention, if one of the keywords is associated with the NLP vulgar bit, the character is changed so that it blushes.","In step  of , the original search query, the keywords found in step  and their associated NLP bits are used to identify possible search topics. These search topics represent broad categories of information that the search query appears to be directed toward. The process of identifying these categories is shown in greater detail in the flow diagram of .","In first step  of , the keywords obtained in step  of  are stored in a shared buffer such as shared buffer  of . In one embodiment, phrases that are in quotes in the user's query appear unchanged and remain in quotes in shared buffer . A Topics Dictionary component is then called in step  using the technique described above for invoking the NLP component. To invoke the Topics Dictionary component using the technique described above, the control file  passed to IEXPLORE  is modified so that it causes the keywords to be passed to a Topics Dictionary component instead of the NLP component.","In the embodiment of , a Topics Dictionary  is shown on server . In other alternative embodiments, the Topics Dictionary is located on client  or on servers other than server . Regardless of its location, Topics Dictionary  receives a package of keywords from IEXPLORE  and as shown in step  of , performs functions on the terms in the package.","The operation of Topics Dictionary component  is shown through flow diagrams in  and a block diagram in . The block diagram of  shows the additional components utilized by Topics Dictionary component  to identify possible topics based on the keywords of the search text. The flow diagrams describe the process used by Topics Dictionary component  to identify the topics.","In an initial step  of , an executable denoted as WEB-PARSE  in , is initiated, which passes a URL list  to Topics Dictionary component . URL list  includes a set of Uniform Resource Locators for pages located on the Internet and\/or Intranet. In the list, each URL is associated with one or more topics and with a scripting function discussed further below. In step , a database server , which forms part of Topics Dictionary , uses URL list  to generate a source database  that represents the associations found in URL list .","At step , WEB-PARSE  uses database server  to sequentially access the URL records stored in source database . For each URL, WEB-PARSE  invokes a browser , such as Internet Explorer  from Microsoft Corporation. Browser  uses the URL to retrieve the URL's page from a remote server  and to store the page locally.","Once the page has been retrieved, WEB-PARSE  calls scripting functions  that are associated with the URL in source database . These scripting functions isolate desired information in the URL's page using dynamic object models of the HTML tags on the page. These object models are created by HTML object modeler  in response to method calls made by scripting functions .","The isolation functions performed by scripting functions  strip irrelevant information from a URL's page. Thus, if a page contains a header, some opening text, and a list of celebrity addresses, and the topic associated with the page is celebrity addresses, the scripting functions can isolate the celebrity addresses from the header and the opening text. This is accomplished using the HTML object models, which allow the scripting functions to manipulate the URL's page based on HTML tags in the page. For example, the scripting functions can retrieve all of the text lines associated with <anchor>HTML tags by calling an HTML object method that performs that function.","In most embodiments, the scripting functions treat the text string associated with an individual HTML tag as an individual entry. Thus, if a multi-word text string is associated with an HTML tag, the entire text string is considered one phrase. By storing text strings found on network pages as single units, the present invention improves the precision of the topics it returns. Thus, if \u201cJohn Glen's Address\u201d appears on a celebrity page and \u201cJohn's Apple Store\u201d appears on a shopping page, a search query for \u201cJohn Glen's Address\u201d will only return a hit for the celebrity page and not for the shopping page, even though both pages contain the word \u201cJohn\u201d. If the terms on the pages were stored individually, both pages would produce a hit resulting in an erroneous identification of the topic of the search.","For each entry isolated by scripting functions , WEB-PARSE  places the entry and its associated topics in index database  and\/or HTML files . The entries that are placed in index database  are placed there by making database calls to database server  and can be accessed later by making additional calls to database server . The entries that are placed in HTML files  are placed there by Topics Dictionary  so that they may be indexed by an Index server  to form Index server files . Whether an entry and its associated topics are added to the index database or the Index server files is controlled by a property in URL list . The topics for an entry may be any one of or all of the topics listed for this URL page in source database .","At step , WEB-PARSE  passes individual terms found in a term list  to Topics Dictionary component . Term list  includes a list of terms and phrases organized by topics and allows terms to be associated with certain topics in Index database  or Index server files  even though the terms do not appear in a URL's page. For each term or phrase in term list , database server  creates an additional entry in Index database  and\/or Topics Dictionary  creates an additional entry in HTML text file  to be indexed by Index server .","In one embodiment of the invention, all forms of the individual terms (e.g. plural, singular, past tense etc.) either from a URL page or the term list are derived before being stored. This derivation creates all of the linguistic forms of each individual term. For example, if the term \u201ctelevisions\u201d is found in the URL page, it is stemmed to provide both \u201ctelevision\u201d and \u201ctelevisions\u201d.","Once the isolated entries for each of the URL pages listed in source database  have been entered in Index database  and\/or Index server files , the process of  pauses at step  to wait for a search query. When a search query  is received, the process continues at step  of  where Topics Dictionary  divides the query into sub-queries. Specifically, each quoted phrase in the user's query and each multi-word entry designated by NLP component  are set as separate sub-queries. Once the phrase and multi-word entries have been grouped into sub-queries, the remaining terms in the user's query are grouped as a single sub-query.","Each sub-query found above is sequentially processed through the remaining steps of . In step , one of the sub-queries is selected and the number of terms in the sub-query is used to initialize a search length variable \u201cN\u201d. At step , N is compared to \u201c1\u201d to determine if there is more than one term in the sub-query. If there is more than one term, Topics Dictionary  uses database server  and\/or Index server  to search through Index Database  and\/or Index server files  for the entire sub-query at step . If one or more matches are found for the entire sub-query at step , the associated topics  are returned to IEXPLORE  at step . In one embodiment, the topics are returned in an HTML page. However, those skilled in the art will recognize that the topic may be returned in any suitable format. If a match cannot be found for the entire sub-query at step , the length variable N is reduced by one at step  and control returns to step . If N is again greater than one at step  the length variable N is reduced by one at step  and control returns to step .","If N is again greater than one at step , Topic Dictionary  searches for all phrases of length N found in the sub-query. Thus, if the initial query was (A B C D), where A, B, C, and D are each terms, the first reduction in size produces two search units (A B C) and (B C D) that are searched for individually in Index database . If either of these smaller units is found Index database  and\/or Index server files  at step , the associated topics  are returned at step  and the terms corresponding to the matching phrases are removed from the sub-query. If both of these smaller units are found in Index database  and\/or Index server files  at step , the associated topics  for both units are returned at step  and all of the terms of the sub-query are removed.","If neither of these smaller units is found in Index database  at step , the length variable N is again reduced by one at step . If N is still greater than one at step , Topics Dictionary  searches for all phrases of length N found in the search query. Using the example above, this produces three units (A B) (B C) and (C D), which are each searched for in Index database .","Steps , ,  and  are repeated until a query unit is found in Index database  or Index server files , or until N equals one.","When N equals one at step , or after topics have been returned at step , the process continues at step  where N is reset to equal the number of terms remaining in the sub-query. This number will be less than the number of terms originally in the sub-query if terms were removed in step  after a match was found. At step , only those terms that did not have a match are left in the sub-query.","At step , N is compared to one and if it is greater than one, Topics Dictionary  places a Boolean \u201cAND\u201d between each term of the sub-query at step . Continuing the example above, this produces a logical search string (A AND B AND C AND D). Topics Dictionary  then searches for strings that have each of the terms of the logical search string. Any string that has all of the search string's terms, regardless of the order of the terms in the string, will be considered a match at step . If there are no strings that match the logical search string at step , N is reduced by one at step  before being compared to \u201c1\u201d at step .","If N is greater than one at step , step  is repeated using only N terms in each combination. Using the example above with N reduced to \u201c3\u201d, Topic Dictionary  searches based on four logical search strings (A AND B AND C), (A AND B AND D), (A AND C AND D), and (B AND C AND D). If none of these logical search strings result in a match at step , then steps , , , and  are repeated until there is a match or until N equals one. If there is a match at step , Topics Dictionary  returns the matches to IEXPLORE  in a topic list embedded in an HTML page at step . Topics Dictionary  also removes the terms of the matching logical search string from the sub-query.","If N is equal to one at step , or after topics are returned at step , the process continues at step , where Topics Dictionary  searches for each remaining term of the sub-query on an individual basis. If there is at least one match at step , Topics Dictionary  determines if there are fewer matches than a maximum number at step . In the embodiment of , the maximum number is twenty but other numbers are possible. If there are fewer than the maximum number of matches, Topics Dictionary  returns the corresponding topics at step . If more than one term of the sub-query matches, the corresponding topics are returned for each term.","In one embodiment, the topic lists returned at steps ,  and  include lists of the matching topics, the number of matches for each topic, and weighting bits that indicate if the keywords match an entire string stored in Index database  or Index Server Files . Thus, if the user's query is \u201cTom Hanks in Saving Private Ryan\u201d, and \u201cSaving Private Ryan\u201d is stored under the MOVIE topic, a weighting bit would be returned with the topic MOVIE in the topic list.","After the topic list is returned at step  or if there are no matches at step  or if there are more than the maximum number of matches at step , Topics Dictionary  checks to see if there are more sub-queries to process at step . If there are more sub-queries, the process returns to step . If there are no more sub-queries, the process returns to step  of  to await a new user query.","The progressive reduction in size of the search units described above improves the precision of the topics returned by the present invention. Specifically, since a match on a multi-word part of the query is likely to be more relevant to the query than a match on a single word, the invention is more likely to return relevant topics than if searching was simply performed on the individual terms of the query.","To facilitate a dynamic database that includes the latest news events and latest additions to the network, the present invention periodically returns to step  from step  to retrieve updated versions of the pages on the network. The refreshed pages are then stripped to build an updated index as discussed above.","Through the processes described above in connection with Topics Dictionary , the present invention is able to automatically generate a list of indexed terms organized under topics. This list includes terms that have recently entered public discourse such as the names of people who were otherwise unknown to the general public one month earlier. This aspect of the present invention allows possible search goals to be identified based on search terms that are new to the public vocabulary. It also allows possible search goals to be identified based on new events. If there's a hurricane named Mitch in Florida and someone types in \u201churricane Mitch\u201d, the present invention can determine that the searcher might be interested in the recent news on the Florida hurricane.","Returning to , after the topics have been returned by database server  at step , the remaining steps of  are executed thereby finishing step  of . The process of  then continues at step  where the topic list returned by database server  is stored for later use.","At step  of , QUERYENG  generates a topic list based upon the NLP bits produced during the natural language parse of the search query. As noted above, many terms returned in the NLP block are associated with a set of NLP semantic bits or flags. The topics are selected based upon associations between the topics and the NLP semantic bits. Table 1 provides examples of such associations found in embodiments of the present invention.",{"@attributes":{"id":"p-0127","num":"0126"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"84pt","align":"left"}}],"thead":{"row":[{"entry":[{},"TABLE 1"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"NLP BIT","TOPIC"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"+Nme","First name"]},{"entry":[{},"+Compny","Business"]},{"entry":[{},"+Cty","City"]},{"entry":[{},"+Stte","State"]},{"entry":[{},"+Cntry","Country"]},{"entry":[{},"+Contnt","Continent"]},{"entry":[{},"+Url","URL"]},{"entry":[{},"+Email","E-mail"]},{"entry":[{},"+Wthr","Weather"]},{"entry":[{},"+Food","Food"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"Once topics have been identified for the NLP semantic bits returned by the NLP parse, the process of  continues at step  where the topics based on Topics Dictionary  and the NLP semantic bits are combined to identify the most likely topic for the search. In most embodiments, the topic lists produced by Topics Dictionary , and the NLP semantic bit process include the number of terms from the search query that have been found under each topic. To combine these types of topic lists, the number of hits under similar topics in different topic lists are added together in some embodiments. Thus, if the Topics Dictionary list included three hits under the topic Celebrity, and the NLP semantic bit list included two hits under the topic Celebrity, the combined topic list would include five hits under the topic Celebrity. In other embodiments, the topic lists remain separate and are used as independent clues to determine the user's goal.","When the topics are combined, the combined topic list is sorted at step  of . The sorting places the topic with the most hits at the top of the combined topic list. The combined topic list is then returned at step  to complete the process represented by box  of . If the topics are not combined, the individual topic lists are returned at step .","At step  of , QUERYENG  designates the keywords as the search terms to be used during searching. By reducing the users search query to just its keywords, the present invention improves the efficiency of the search performed by the selected search service. However, the original search query may also be used during the search.","At step , QUERYENG  selects a search area or repository where the search is to be performed. When operating on the searcher's initial search query the search area is a generic search engine. In particular, the search area is the best vector-space search engine available. A vector-space search engine is one that ranks documents on the number of times a term in the search query appears in the document, discounting those terms that are common to a large number of documents and giving priority to documents that have the term in the title or the first paragraph of the document. Each vector-space search engine has its own algorithm for weighting these different factors. In most embodiments, the initial search engine selected at step  is stored in Registry  of .","After the search area is selected in step , QUERYENG  determines if the search should be converted into a logical search query, also known as a logical function query, at step . Logical searches have logical operators between search terms that indicate the relationship between the terms. Examples of logical operators include \u201cAND\u201d to indicate that two terms should appear together in a document, \u201cOR\u201d to indicate that one of the terms or both of the terms should appear in the document, \u201cNOT\u201d to indicate that a term should not appear in the document, and quotes to indicate that the exact phrase found between the quotes should appear in the document.","For the initial query, a logical search is not constructed since the query is being submitted to a vector-space search engine and such search engines work better if they do not have to deal with logical operators. Later in the process, after possible search goals have been identified, the determination of whether to construct a logical search query is based largely on the user's search goal. For search goals that involve specific items, the present invention first attempts to locate a search area dedicated to the item. For example, if the user is looking for a celebrity's address, the present invention will look for a search area dedicated to celebrity addresses. If such a search area cannot be found, the present invention will convert the search query into a logical search query and will submit the logical search query to a search engine that supports such queries.","If a search area exists that is targeted at the user's goal, and the search area works better when it receives logical queries, the present invention will convert the query into a logical query. If the search area works better when it receives free text search queries, the query is not converted into a logical search query.","To determine if a particular search area is better suited to receiving logical search queries or free text search queries, QUERYENG  accesses a table that indicates the preferred search query form for a number of search areas. In most embodiments, this table is stored in default.htm.","Constructing a logical query is shown as step  of  and under embodiments of the present invention this step relies on the NLP data returned as a result of the natural language parse performed in step . The specific process for constructing the logical search is described in the flow diagram of , which begins with a step . In step , logical operators for the selected search area are identified by QUERYENG  because different search areas use different logical operators. For example, in some search areas the logical operator \u201cAND\u201d is represented by \u201c+\u201d. QUERYENG  keeps a list of the characters and\/or strings used by various search areas to represent the logical operators. This provides a significant advantage in the present invention because the user does not need to remember the specific operators used by a search area in order to efficiently use the search area. The present invention automatically inserts the proper operators for the search area.","For simplicity in the discussion below, the invention is described using the Boolean tags: \u201cAND\u201d, \u201cOR\u201d, \u201cNOT\u201d, \u201cNEAR\u201d, and \u201c( )\u201d. However, those skilled in the art will recognize that the present invention actually inserts the search area's character or string in the logical searches constructed below. Thus, if the term \u201cAND\u201d is used in the discussion below and the selected search area represents \u201cAND\u201d using the \u201c+\u201d character, a \u201c+\u201d will actually be inserted in the logical search instead of the \u201cAND\u201d.","In step  of , the NLP data is examined to group terms that are in a coordinating relationship into a coordinating (CRD) set. Terms in a coordinating relationship are connected together by the words \u201cor\u201d or \u201cand\u201d. For each CRD set at step , a set of operations is performed as shown in box  of .","The first operation in box  is actually a set of operations that are repeated for each CRD term in the CRD set. The operations performed for each CRD term are found in box  and the fact that these operations are repeated is represented in box .","The first operation in box  is step  where the current CRD term is inserted into the Boolean query along with any inflected forms of the CRD term returned by NLP. The CRD term and its inflected forms are separated from each other by \u201cOR\u201d, and the complete string is encased in parentheses to produce: (CRD-TERM OR INFLECTED-FORM-# OR INFLECTED-FORM-# . . . OR INFLECTED-FORM-#N), which is referred to as a base string.","At step , each of the terms in the search query that modify the current CRD term are identified by QUERYENG  based on the NLP data. For each modifying term, the operations in block  are repeated. Specifically, step  of block  is repeated where the modifying term is inserted in the Boolean query along with any allowed inflected forms of the modifying term. The modifying term and its allowed inflected forms are separated from each other by logical OR's and the entire string is encased in parentheses to produce:(MODIFYING-TERM OR INFLECTED-FORM-# OR INFLECTED-FORM-# . . . OR INFLECTED-FORM-#N), which is referred to as a modifying string.","Note that the present invention is able to discriminate between terms that should have their inflected forms included in the Boolean search and terms that should not have their inflected forms included in the Boolean search. Specifically, QUERYENG  filters inflected forms of modifying terms that are grammatically incorrect. Thus, a modifying term such as black, as in the phrase \u201cblack bird\u201d, would not have its inflected form \u201cblacks\u201d included in the Boolean query. In fact, under the present invention, most modifying terms will not have an inflected form included in the Boolean query. In addition, proper nouns, such as Seattle, are not inflected by the present invention. This avoids adding non-existent terms, such as Seattles, to the Boolean query.","In step , either a \u201cNEAR\u201d or an \u201cAND\u201d is placed between each of the modifying strings as well as between the base string and its neighboring modifying strings. The decision between using \u201cNEAR\u201d and \u201cAND\u201d is made on the basis of the phrase strength currently employed by the web companion and on whether the chosen search service supports NEAR. The phrase strength is initially set at a strong default setting that would cause \u201cNEAR\u201d to be inserted between the modifying strings. However, the user may change this phrase strength during the searching process so that \u201cAND\u201d is used instead of \u201cNEAR\u201d by accepting a suggestion from the Web Companion to make this change.","In step , the modifying strings, the base string and their connecting logical operators are encased in parentheses to produce in the default case: (Base-String AND MODIFYING-STRING-# . . . AND MODIFYING-STRING-#N), which is identified as a CRD term string.","In step , Boolean operators are placed between each of the CRD term strings. The Boolean operators are selected on the basis of the coordinating relationship of the current CRD set. If the coordinating relationship is based on \u201cor\u201d, an \u201cOR\u201d Boolean operator separates each CRD term string. If the coordinating relationship is based on \u201cand\u201d, an \u201cAND\u201d Boolean operator separates each CRD term string. Note that after the initial query has been searched, the query may be refined by the present invention by asking the user to clarify the meaning of \u201cand\u201d in the search query. This process is discussed below in connection with . Based on the clarification made by the user, an \u201cOR\u201d Boolean operator may be used between CRD strings that are based on \u201cand\u201d.","In step , the CRD term strings and their corresponding Boolean operators are encased in parentheses to produce: (CRD-term-string-# AND\/OR CRD-term-string-# . . . AND\/OR CRD-term-string-#N), which is referred to as a CRD set string.","In step , each CRD set string is separated from all other CRD set strings in the Boolean query by inserting the Boolean operator \u201cAND\u201d between each CRD set string.","At step , the remaining stand-alone terms in the search query are added to the Boolean query. This is accomplished by repeating the steps found in box  for each stand-alone term. The first step in box  is step , which inserts the stand-alone term after the last CRD set string. In addition, step  inserts any inflected forms of the stand-alone term. A Boolean \u201cOR\u201d is inserted between the stand-alone term and each inflected form. In step , the stand alone term, its inflected forms, and the Boolean \u201cOR\u201d operators are encased in parentheses to produce: (STAND-ALONE-TERM OR Inflected-form-# . . . OR Inflected-form-#N).","At step , the current stand-alone term's respective NLP bits are examined to determine if the term is associated with a +NEG bit. This bit indicates that in the original search query the current term was modified by another term in such a way that it appears the user wants to exclude documents that include the current term. If the current term is not associated with a +NEG bit, a Boolean \u201cAND\u201d is inserted before the open parentheses of the stand-alone string at step . If the current term is associated with a +NEG bit, a Boolean \u201cNOT\u201d is inserted before the open parentheses of the stand-alone string at step . As with CRD relationships, the query may be refined by asking the user to clarify what they intended a negative modifier to signify. This process is discussed further below in connection with . Based on the user's clarification, an \u201cAND\u201d may be used instead of \u201cNOT\u201d even though there is a negative modifier.","Once all of the stand-alone terms have been added, the process of constructing the Boolean search query is complete.","Note that in the discussion above, QUERYENG  treats multi-word entries returned by the natural language parse as a single term that is placed in quotes or is otherwise grouped as a Boolean phrase. Thus, the multi-word entry \u201cMicrosoft Corporation\u201d would be considered a single term in the discussion above and would appear within phrase markers in the constructed Boolean query.","After the Boolean search has been constructed at step  of  or if a Boolean is not to be constructed at step , the process continues at step  where QUERYENG  determines if the search query is to be modified. Typically, such modifications result from user selections made in response to web companion displays discussed further below. If the query is to be modified at step , the process continues at step  where the query is appropriately modified.","After the query is modified in step , or if the query is not to be modified in step , the search query, either logical or free text, is submitted to the selected search area at step . The process of submitting the search to a search area located on the Internet is shown in detail in the flow diagram of .","In step  of , QUERYENG  asks WEB COMPANION  to locate or establish a top instance of IEXPLORE, shown as IEXPLORE  in . QUERYENG  then generates a URL based on the selected search area and the search query, and passes the URL to WEB COMPANION  at step . At step , WEB COMPANION  passes the URL to IEXPLORE , which uses the URL to locate the server containing the desired search area and to pass the search query to the search area at step . When the search area completes its search, its respective server returns the search results to IEXPLORE  at step .","When the search results are returned to IEXPLORE , they are displayed by IEXPLORE  in an independent browser window. This step is represented in  as step .","After the search has been submitted at step , but before the results have been returned, QUERYENG  continues to operate at step , where it uses the possible topics determined in step , along with user profile clues, search scope clues and past web companion interactions to determine suggestions to be displayed in the next web companion screen produced by WEB COMPANION , QUERYENG , and DEFAULT.HTM . Thus, each of the items used to identify possible topics as well as user profile clues, search scope clues and past web companion interactions are all features of a clue stream for identifying search suggestions.","The user profile clues include such things as the user's age, their search history, their gender, things they have deemed as favorites, things in their browsing cache and their expertise level. The user profile may be constructed by asking the user for information or by tracking the user's interests based on the searches the user enters or the types of pages the user views.","The search scope clues provide an indication of what level of information the user is seeking. In other words, is the user looking for specific information or just a general overview? In one embodiment, the number of words in the user's initial search text provides a scope clue. Specifically, if the search text includes two or fewer words, the search is considered to have a broad scope. Other criteria for determining scope include broadly worded questions having phrases such as \u201ctell me all about . . . \u201d or \u201cgive me information about . . . \u201d that indicate a broad scope. Or narrowly worded questions such as \u201cwho was ______\u201d or \u201cwhen did ______\u201d, which indicate a narrow scope. In addition, the user's past searches may be used to determine scope since a searcher is more likely to want detailed information about a subject if they have searched it before.","The past web companion interactions are used to avoid presenting the user with the same suggestions more than once and to provide a logical progression in the types of suggestions provided to the user.","The user profile clues, search scope clues and past web companion interactions each provide interaction characteristics that indicate how the user wants to interact with the web companion. For example, based on the user profile, the web companion can determine whether the user is a child and thus whether the user expects the web companion to interact on a child's level. From the scope clues, the web companion can determine if the user is using the web companion for browsing or to find specific information. From the past web companion interactions, the web companion can identify the types of suggestions that the user is most likely to be interested in seeing next.","In most embodiments, the suggestions that are likely to be most helpful to the user are provided first, with less helpful suggestions provided in later screens. In accordance with this philosophy, some embodiments of the present invention try to provide suggestions based on a users possible search goals first.","To identify possible search goals, the present invention uses a support vector machine (SVM)  of  that treats each of the clue stream features as a component of a feature vector also known as a goal vector. The support vector machine compares the query's goal vector to a number of goal surfaces in an n-dimensional goal space defined by n features. Each n-dimensional goal surface separates the goal space into two sections. If a query's goal vector is in one section, the user has the particular search goal associated with the goal surface. If the query's goal vector is in the other section, the user does not have the particular search goal. For example, a \u201ccelebrity\u201d goal surface may divide the goal space into a first section that indicates that the user's goal concerns a celebrity and a second section that indicates that the user's goal does not concern a celebrity. In addition, based on the distances between the query's goal vector and a goal surface, the SVM is able to return the probability that the user has a particular search goal.","The training and use of SVM  is shown in the flow diagram of . The steps required to train SVM  are shown in training box . Through these steps, SVM  defines the goal vector space and populates it with goal surfaces. The training begins at step  where a person manually analyzes a corpus of queries to assign each query to between one and four potential goals. To do this, the person looks at each query and attempts to determine the user's search goal from the query.","The corpus of queries is then submitted to QUERYENG  at step . QUERYENG  generates a list of features for each query including NLP semantic bits, a list of topics, etc. Advanced embodiments include user profile features associated with the user who generated the training query. For each query, this list of features and the associated potential tasks for that query are then submitted to SVM  at step .","SVM  generates the goal vector space in step  by converting each set of features into a vector in the goal vector space. The resulting goal vector space is then divided by a set of goal surfaces based on the goals identified for each training vector. Techniques for generating these goal surfaces are discussed in greater detail in a pending patent application entitled METHODS AND APPARATUS FOR BUILDING A SUPPORT VECTOR MACHINE CLASSIFIER, filed on Apr. 6, 1998, and having Ser. No. 09\/055,477, which is hereby incorporated by reference. In most embodiments, the surfaces are represented by equations that define hyper-planes, which extend through the goal space.","After SVM  has been trained, it is ready to be used to identify possible goals of a new search query. The steps involved in using SVM  are shown within box  of .","In step , the new search query is submitted to QUERYENG , which identifies a set of features using the techniques described above. The features are submitted to SVM  at step  and SVM  converts the features into the query's goal vector.","At step , SVM  determines where the query's goal vector resides in the goal space relative to the goal surfaces. In particular, for each goal surface, SVM  determines if the query's goal vector is on the surface's \u201cpositive\u201d side indicating that the user's actual search goal is the search goal associated with the surface, or the surface's \u201cnegative\u201d side indicating that the user's search goal is not the search goal associated with the surface.","In addition, SVM  determines the distance between the query's goal vector and each of the goal surfaces in the goal space. The distance measurement can weight all features equally or can give additional weight to certain features, such as topics","Based on the relative distances between the query's goal vector and each of the goal surfaces, SVM  assigns probabilities to each goal. Thus, if the query's goal vector is located next to a number of goal surfaces, there is a low probability that any one goal is the user's actual goal. If the query's goal vector is far from a particular goal surface and is on the positive side of the goal surface, there is a high probability that the associated goal is the user's actual goal. In step , SVM  returns each of the calculated probabilities to QUERYENG  for further processing as described below.","In some embodiments, SVM  can be trained on a continuing basis using queries entered by the user. This training requires that the user select a goal that is presented to them as shown in step . Based on this selected goal, and the features associated with the user's query, SVM  adds an additional corpus goal vector to the vector space at step . Alternatively, SVM  can modify an existing corpus goal vector so that it moves closer to the query's goal vector.","The search goal probabilities returned by SVM  may also be generated using a simple rules-based engine comprised of a series of complex case statements that test combinations of search clues. The search goal probabilities may also be determined using a Bayes Net.","QUERYENG  uses the returned search goal probabilities to select a set of search suggestions. Thus, if there is a high probability that the user is looking for used car prices, QUERYENG  will suggest searching a site listing used car prices. If the probability of a search goal is too low, QUERYENG  does not make a suggestion based on that goal.","In addition to or instead of providing suggestions based on the possible search goals, embodiments of the invention can also provide scope-based suggestions, which are based almost entirely on scope clues. Examples of scope-based suggestions are shown in  discussed further below. Since scope-based suggestions tend to be less helpful than goal-based suggestions, many embodiments will show goal-based suggestions instead of scope-based suggestions if possible. QUERYENG  can also provide a suggestion to fine-tune the search query or to select a different search engine. However, since these suggestions are not as helpful, they are usually presented only if other suggestions cannot be made.","Once QUERYENG  has determined the suggestions it will display, the process continues at step  where the character's behavior changes or is modified based on the suggestions being displayed. For example, if suggestions relating to travel are displayed, the character can be modified so that it appears in travel clothes. Examples of such modifications to the character are described below in connection with the examples of screens displayed by the present invention.","At step , the next web companion screen is displayed, which contains text and control buttons that appear within a balloon produced by WEB COMPANION . The text and control buttons are produced by QUERYENG  and IE4 control , respectively. The screen also includes an animated character produced by Search Agent  of , which in one embodiment is implemented through Microsoft AgentX technology. Note that the web companion screen appears at around the same time that the search results from the last search are displayed in a browser window by IEXPLORE . Examples of the web companion screens are shown in , , , , , , and , which are each discussed below.","In , the present invention provides a web companion screen based on a search query that included the terms East Africa and Kenya. Based on these terms, QUERYENG  has identified possible topics of country and continent leading to possible goals , , , and  of planning a trip, booking a trip using Expedia, finding cheap flight information, and gathering general information about the continent of Africa, respectively. Note that in many embodiments these goals are shaped in part by the user's profile. If the user is only ten years old, the search goals would be limited to obtaining information about Africa since it is unlikely that a ten year old will be booking a trip to Africa.","In  the animated character  has been modified in step  of  in light of the displayed suggestions. In particular, character  is wearing a hat and carrying a camera to reflect the travel related suggestions in balloon .","Balloon  also includes a suggestion  that allows the user to indicate that they have found what they were looking for. If the user indicates that their search was successful by selecting suggestion , QUERYENG  makes a record of the user's search query and the final URL that produced the results the searcher wanted. In one embodiment, this record is kept in registry , but in other embodiments may be kept in any suitable memory location. QUERYENG  accesses this record each time a new search query is entered by the user so that it can determine if the user has made this search before. If it finds a record of a successful result for this search, QUERYENG  will suggest to the user that they use this past result. In other embodiments, this is implemented in SVM  by adding the URL as a corpus goal with the features associated with the search query forming the corpus goal vector. In further embodiments of the invention, QUERYENG  keeps track of the number of times the user selects this past result. If the number of times is greater than some chosen threshold, QUERYENG  automatically displays the result without making the suggestion to the user.","In , the user's search includes terms related to food and based on probabilities from SVM , QUERYENG  has identified possible search goals  and  that relate to recipes. QUERYENG  has also caused SEARCH-AGENT  to modify animated character  so that it is wearing a chef's hat.",{"@attributes":{"id":"p-0181","num":"0180"},"figref":"FIG. 20","b":["822","824","826"]},"In , the user's search text also included a person's name. However, the person's name was either indexed by URL index  or database server  of  as being a celebrity name. Based on the celebrity topic returned by one of these index components, along with other features, QUERYENG , using SVM  has provided a different set of suggestions from the suggestions shown in . Specifically,  includes suggestions , , , , , and  that respectively suggest, going to the most popular site concerning the celebrity, searching for photos and images of the celebrity, finding sound files of the celebrity, finding biographical information about the celebrity, finding everything possible about the celebrity, and seeing what CINIMANIA has to say about the celebrity.","In , the search entered by the user included a business name that produces a hit for the topic BUSINESS. Based on this topic, and other features, QUERYENG  determined that the user may be interested in the business's homepage (suggestion ), the business's address or phone number (suggestion ), or public info about the business, such as stock quotes (suggestion ).","In , the user's search appears to have included a URL. In response, QUERYENG  suggests going to the web site represented by the URL (suggestion ), and finding web site's that reference the URL (suggestion ).",{"@attributes":{"id":"p-0185","num":"0184"},"figref":["FIG. 24","FIG. 2"],"b":["208","227","208","208","859","861","863","865","867"]},{"@attributes":{"id":"p-0186","num":"0185"},"figref":"FIG. 25","b":["208","860","862"]},{"@attributes":{"id":"p-0187","num":"0186"},"figref":["FIGS. 26 and 27","FIG. 26","FIG. 2","FIG. 27"],"b":["208","239","208","208","868","870","872","208","239","208","874","876"]},{"@attributes":{"id":"p-0188","num":"0187"},"figref":["FIG. 28","FIG. 28","FIG. 28"],"b":["208","878","880","881","882"]},{"@attributes":{"id":"p-0189","num":"0188"},"figref":["FIG. 29","FIG. 29","FIG. 29"],"b":["883","884"]},{"@attributes":{"id":"p-0190","num":"0189"},"figref":["FIG. 30","FIG. 30"],"b":["888","889","208"]},"Depending on what the user selects from the displayed screen, the process of  continues along different paths. For example, if the user selects option  of  or option  of , thereby indicating that they want to perform a new search, the process continues at step  of  where QUERYENG  solicits the user for the new search text. The selection of the new search option is shown in  by NEW SEARCH box , which provides a path to step .","If the user selects the exit option in any of the screens, WEB COMPANION  closes all of the modules that it has invoked except IEXPLORE and closes itself. This option is indicated in  by EXIT box , which provides a path to end state .","If the user selects any other suggestion such as a search goal, a context based suggestion, a scope based suggestion, a suggestion to use a different search service, or a suggestion to fine-tune the search query, the process continues at step  where the user's selection is recorded for later use in step  to determine future screens to be displayed. The selections that lead to step  are shown representatively as GOALS box , CONTEXT BASED box , SCOPE BASED box , DIFFERENT SEARCH SERVICE box , and FINE-TUNE box . These boxes are shown only to illustrate some of the possible suggestions that may be provided to the user. Other suggestions are possible within the scope of the invention.","After the user's selection has been recorded in step , QUERYENG  determines at step  if the user's selection requires additional screens to be displayed before a new search can be submitted or before the present search can be submitted to a new search area. If additional screens need to be displayed, QUERYENG  displays those screens at step .","One suggestion that can lead to additional screens is suggestion  of , which suggests fine tuning the search query. If suggestion  is selected, QUERYENG  determines if the existing query includes any ambiguities. For each ambiguity it detects in the search query, QUERYENG  provides a disambiguation screen that requests additional information to disambiguate the query. Examples of such disambiguation screens are shown in , , and .",{"@attributes":{"id":"p-0196","num":"0195"},"figref":["FIG. 32","FIG. 31","FIG. 32"],"b":["208","208","900","902","900","904"]},{"@attributes":{"id":"p-0197","num":"0196"},"figref":["FIG. 33","FIG. 33","FIG. 33","FIG. 34"],"b":["208","227","208","910","910"]},{"@attributes":{"id":"p-0198","num":"0197"},"figref":["FIG. 35","FIG. 35","FIG. 36"],"b":["916","227","227","208","920","920"]},"If the user chooses to fine tune their search and there are no ambiguities in the search query, QUERYENG  generates display  shown in . Display  includes suggestions to use a different search engine, see a list of past searches, add, delete or change words, exclude words from the search, restrict the search to a range of dates, directly edit the Boolean query, see synonyms and hypernyms of terms in the search query, and change the phrase strength of the constructed Boolean. As noted above, the phrase strength of the Boolean determines whether modifying terms are connected to the terms they modify by a Boolean \u201cAND\u201d or a Boolean \u201cNEAR\u201d. Many of the suggestions shown in display  will lead to additional displays to solicit the specific information. For example, if the user wants to exclude a term, an additional display is presented to ask the user what term they want excluded.","After QUERYENG  has collected the additional information it needs to construct and submit a new search query, or if QUERYENG  did not need additional information, the process returns to step  where a search area is selected. The search area selected on return to step  is chosen in large part on the basis of the suggestion selected by the user. For example, each search goal suggested to the user is usually associated with a specific search area. Thus, if the user has selected a suggested search goal, QUERYENG  is able to directly identify a search area associated with that search goal.","The associated search area is often focused on providing information related to the search goal. For instance, suggestion  of  suggests a search goal of finding a person's email address. This search goal is associated with a search service that is dedicated to storing and searching through email addresses. Similarly, suggestion  of , which suggests the search goal of seeing what Chef BillG has for recipes, has Chef BillG's recipe page as its search area.","Search areas are also associated with context-based suggestions (also known as media type suggestions) and scope-based suggestions. Thus, if the user selects context-based suggestion  of , which suggests using BillyBoy's sound search to find sound files, QUERYENG  will select BillyBoy's sound search as the search area. Similarly, if the user selects scope-based suggestion  of , which suggest looking at the best sites about a topic, QUERYENG  will select a search engine that reviews all of the sites it includes in its database. Additionally, if the user selects a suggestion to look at an overview of a topic, QUERYENG  selects a search area that has excellent topic overview information.","In addition, if the user has adopted a suggestion to change their search service, QUERYENG  will select the search area based on the new search service chosen by the user.","Under the present invention, the user does not have to be familiar with the search area or the information it provides in order to utilize it. The user only needs to select a suggestion that they believe will advance their search. For example, if a user selects a suggestion to find a user's email address, they do not need to know about the email search area the present invention will search. In addition, since many of the suggestions are associated with relatively obscure search areas, the present invention allows users to utilize a broader range of search areas than they would otherwise use.","After the search area has been selected, QUERYENG  determines if a logical query should be constructed based on the selected search area and the present form of the search query. If the search query is already in logical form or if the search area works better with free text searches, a logical query would not be constructed.","After the logical search is constructed at step  or if at step  it is determined that a logical search query will not be constructed, QUERYENG  determines if the query should be modified. The modification of the query is based largely on the suggestion selected by the user. For example if the user has selected scope-based suggestion  of , which suggests looking at an overview of a topic, the search query is modified to include terms such as \u201coverview\u201d and \u201cofficial site\u201d. By adding these terms, QUERYENG  improves the likelihood that the search query will return pages of a general scope.","The search query is also modified if the user selects certain context-based suggestions, such as suggestion  of . In suggestion , the user is asked if they are interested in adding words to the query that relate to sound files. The selection of this suggestion causes QUERYENG  to modify the query to include these sound file terms.","Certain search goal suggestions also lead to modification of the search query. For example, if the search goal is to find information on antique cars, QUERYENG  displays a suggestion to add words like automobile, auto, and classic to the query.","The modification of the query can be more sophisticated than just adding terms. For example, if the user has fine tuned a search query that included an ambiguity, QUERYENG  can modify the search query to remove the ambiguity. Thus, QUERYENG  can change the coordinating relationship between two words from \u201cAND\u201d to \u201cOR\u201d and can change a connecting term such as \u201cNOT\u201d to \u201cAND\u201d to reflect the user's true searching intentions. In addition, if the search query included an ambiguity as to time, such as including the term \u201crecent\u201d, QUERYENG  can replace \u201crecent\u201d with a specific set of dates. For certain search areas, ones that include date range fields, QUERYENG  removes the term \u201crecent\u201d from the search query and adds instructions in the query to fill out the date range field of the search area with the date range selected by the user. By removing the term \u201crecent\u201d from the search query, the present invention keeps the search area from looking for pages that include the term \u201crecent\u201d and instead focuses the search area on looking for pages that were produced on certain dates. This better reflects the user's searching intention.","The process shown in the flow diagram of  continues to repeat the cycle of presenting search suggestions in parallel with search results, recording the user's suggestion, selecting a search area, constructing and\/or modifying a search and submitting the search to the search area until the user elects to exit the web companion program or start a new search. By keeping track of past web companion interactions, the present invention is able to present new suggestions to the user at each cycle, in a manner similar to the way a friend or librarian would suggest alternative searching techniques.","In , WEB COMPANION , IE4 control , SEARCH-AGENT , QUERYENG , and SPELLCHECK  are shown on a client , and NLP component , Topics Dictionary  are shown on a server . However, those skilled in the art will recognize that all of the components could appear on client  together. Furthermore, those skilled in the art will recognize that QUERYENG  could appear on server  along with NLP component , and Topics Dictionary . The particular configuration chosen, while affecting performance, is not critical to the basic operation of the invention.","Although the present invention has been described with reference to specific embodiments, workers skilled in the art will recognize that changes may be made in form and detail without departing from the spirit and scope of the invention."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 4A"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 4B"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 7A"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 7B"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 7C"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 13"},{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIGS. 14A and 14B"},{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 14C"},{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 15"},{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 16"},{"@attributes":{"id":"p-0035","num":"0034"},"figref":["FIG. 17","FIG. 2"]},{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIG. 18"},{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIG. 19"},{"@attributes":{"id":"p-0038","num":"0037"},"figref":"FIG. 20"},{"@attributes":{"id":"p-0039","num":"0038"},"figref":"FIG. 21"},{"@attributes":{"id":"p-0040","num":"0039"},"figref":"FIG. 22"},{"@attributes":{"id":"p-0041","num":"0040"},"figref":"FIG. 23"},{"@attributes":{"id":"p-0042","num":"0041"},"figref":"FIG. 24"},{"@attributes":{"id":"p-0043","num":"0042"},"figref":"FIG. 25"},{"@attributes":{"id":"p-0044","num":"0043"},"figref":"FIG. 26"},{"@attributes":{"id":"p-0045","num":"0044"},"figref":"FIG. 27"},{"@attributes":{"id":"p-0046","num":"0045"},"figref":"FIG. 28"},{"@attributes":{"id":"p-0047","num":"0046"},"figref":"FIG. 29"},{"@attributes":{"id":"p-0048","num":"0047"},"figref":"FIG. 30"},{"@attributes":{"id":"p-0049","num":"0048"},"figref":"FIG. 31"},{"@attributes":{"id":"p-0050","num":"0049"},"figref":"FIG. 32"},{"@attributes":{"id":"p-0051","num":"0050"},"figref":"FIG. 33"},{"@attributes":{"id":"p-0052","num":"0051"},"figref":"FIG. 34"},{"@attributes":{"id":"p-0053","num":"0052"},"figref":"FIG. 35"},{"@attributes":{"id":"p-0054","num":"0053"},"figref":"FIG. 36"},{"@attributes":{"id":"p-0055","num":"0054"},"figref":"FIG. 37"}]},"DETDESC":[{},{}]}
