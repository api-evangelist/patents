---
title: Method for providing authorized access to a service application in order to use a protected resource of an end user
abstract: The protected resource, typically an API, is exposed by endpoints of a plurality of administrative domains. The endpoints are previously unknown by said service application and the method further comprises:


url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09165134&OS=09165134&RS=09165134
owner: Telefonica, S.A.
number: 09165134
owner_city: Madrid
owner_country: ES
publication_date: 20111104
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS REFERENCE TO RELATED APPLICATIONS","FIELD OF THE ART","PRIOR STATE OF THE ART","DESCRIPTION OF THE INVENTION","DETAILED DESCRIPTION OF SEVERAL EMBODIMENTS","ACRONYMS","REFERENCES"],"p":["This application is a National Stage of International Application No. PCT\/EP2011\/005569, filed on Nov. 4, 2011, which claims priority from U.S. Provisional Patent Application Nos. 61\/450,376, filed on Mar. 8, 2011, and 61\/452,262, filed on Mar. 14, 2011, the contents of all of which are incorporated herein by reference in their entirety.","The present invention generally relates to a method for providing authorized access to a service application in order to use a protected resource of an end user, said protected resource typically being an API and being exposed by endpoints of a plurality of administrative domains, and said authorized access performed by means of an OAuth procedure, and more particularly to a method which comprises using an intermediate entity in order to route said OAuth procedure to the corresponding administrative domain, said administrative domain being the final issuer and controller of access authorizations, and providing, said administrative domain to said end user, a direct or proxy route in order to access to said API.","In the last years the Internet world has experienced an explosion of web APIs\/web services that open up service providers' functionalities to other sites and, in many cases, to individual developers, thus, allowing them to quickly build new services or enrich already existing ones through the inclusion and combination of remotely exposed functionalities. Nowadays, this is one of the major trends in the Internet and it is expected to keep growing and evolving, progressively addressing more sophisticated and dynamic scenarios.","Opening up APIs implies different issues that must be properly solved from a technical point of view in order to achieve really useful and suitable results. One of the main problems to be solved is security and, especially, end-user's privacy. Basically, Internet applications should only access service providers' functionalities after having correctly authenticated and after having received the explicit consent or authorization from the owner of the resources to be accessed, without the need for the resource owner (typically an end-user) to share his\/her identity or credentials with the application. As a solution to this problem, the new OAuth standard has emerged in the last years and now the Internet community and IETF are working in the second version of this standard.","OAuth provides all the details to satisfactorily address static scenarios where API endpoints are known by applications before actually accessing the APIs and where all the APIs belong to the same service provider\/administrative domain and, therefore, the access can be authorized and controlled from a single, central point. However, as the number of APIs grows in the Internet, there are new scenarios where the same API is exposed by different services providers or the same API is simply exposed from several locations by the same service provider, in order to improve the scalability and performance of the API exposure strategy.","The main current existing technologies are the OAuth 1.0 Protocol [1] that is standardized by the IETF and the OAuth 2.0 Protocol [2] which is under standardization process by the IETF.","Both OAuth 1.0 and 2.0 define an open protocol to allow secure API authorization in a simple and standard method from desktop and web applications, available both for Trusted and Non-Trusted Consumers (Clients). OAuth, as specified, is directly applicable to grant access to resources in REST services, but may also be used for example in SOAP-based web services.","The client, in order to access resources, it first has to obtain permission from the resource owner by means of the OAuth protocol. This permission is expressed in the form of a token and, optionally, a matching shared-secret. The purpose of the token is, as already explained, to make it unnecessary for the resource owner to share its credentials with the client. Unlike the resource owner credentials, tokens can be issued with a restricted scope and limited lifetime, and can be revoked independently.","In short, the main purpose of the OAuth protocol is to provide the means for the consumer to gain a valid AccessToken.","As it will be shown in , there are two tokens with crucial roles:\n\n","In OAuth 2.0, the Request Token concept disappears. Thus, the flow starts with the Authorization Request to the Service. In this request, instead of including the Request Token, the consumer identification is sent, as it will be shown in . There are several OAuth 2.0 scenarios:\n\n","Basic OAuth is a widely used standard and there are many implementations, such as the offered by BlueVia [4], Twitter [5], Google [6] or Yahoo [7]. OAuth 2.0 is still a draft, but many implementations are already available or are in plans to offer OAuth 2.0; examples are Facebook [8] and Google [9]. Existing implementations warn about the fact that OAuth 2.0 is still a draft and therefore may have variations until its final standardization.","There are also several solutions that cover the scenario where a central OAuth Service provides the OAuth to Service Provider offering access to protected resources. This is the case of Google or Yahoo, which are providing OAuth to be used by any service in the internet.","In addition and covering the same scenario, Google has also provided a solution consisting on the union of OAuth and OpenID [10], [11]. With this solution, Google allows third-party web sites and applications to let their visitors signing in using their user Google accounts. As they explain, this extension is useful for web developers who use both OpenID and OAuth, particularly in that it simplifies the process for users by requesting their approval once instead of twice.","Unlike standard OAuth, the OpenID OAuth Extension does not provision request tokens in a server-to-server request from the Combined Consumer to the request token endpoint at the Combined Provider. Instead, the Combined Provider returns an already-approved request token to the Combined Consumer as part of the OpenID authentication response.","The Combined Consumer then exchanges the request token for an Access Token at the Access Token endpoint of the Combined Provider, following standard OAuth practice.","The common point of all of these solutions is that they cover the scenario where there is a central OAuth Service shared by all the service providers. In other words, the centralized solution is responsible of issuing the Access Tokens.","On another note, several solutions exist where the concept of \u2018token\u2019 is used with routing purposes. For example, CISCO and Microsoft [12] have a solution that uses routing token information to redirect client sessions to Microsoft Terminal Servers. Other examples are Microsoft usage of token redirection for Connection Broker [13] or TransNexus redirection solution for NexTransit\u2122 signaling proxy [14].","However, none of these solutions are related with OAuth protocol, i.e.: the token used for routing is not an OAuth Access Token.","Regarding existing mechanisms for OAuth, as previously commented, there are solutions which cover two possible scenarios:\n\n","In addition, Google offers a combination of OAuth with OpenID, for a more advanced and more flexible usage of second scenario.","In short, in existing solutions either the Service Provider offers the Authorization endpoint or there is a central Authorization endpoint that authenticates and issues the accessTokens for several Service Providers.","There is a need to count on distributed scenarios where API endpoints are not known in advance by the applications and where there is not a single entity that can be used as centralized controller for issuing authorizations and controlling its later use. With these requirements in mind, the objective of the invention proposed in this document is to provide a detailed solution for the application of OAuth to highly distributed and potentially evolving API exposure scenarios, without having to modify the OAuth standard in any way. To do so, instead of modifying the interfaces, the invention is focused on how to solve the problem within the API exposure infrastructure itself.","The following scenario, covered by this invention, is not correctly addressed by existing solutions:\n\n","The present invention provides a method for providing authorized access to a service application in order to use a protected resource of an end user, said protected resource being exposed by endpoints of a plurality of administrative domains, each administrative domain within said plurality of administrative domains being responsible for issuing and controlling later use of authorizations to access to multiple protected resources as granted by end users belonging to said administrative domain On contrary to the known proposals, said endpoints are previously unknown by said service application and there is no centralized authorizations issuer\/controller and the method of the invention, in a characteristic manner it further comprises,\n\n","Other embodiments of the method of the first aspect of the invention are described according to appended claims  to , and in a subsequent section related to the detailed description of several embodiments.","The present invention provides a solution for applying OAuth 1.0 and\/or 2.0 to highly distributed and potentially evolving API exposure scenarios. According to the graphical representations of such scenarios, as shown in , the following requirements must be taken into consideration:\n\n","Firstly, since applications do not have any prior knowledge of the endpoints nor the administrative domains they have to contact, there needs to be static URLs where applications can initially trigger the OAuth process, therefore, OAuth protocol endpoints (URLs) are kept unique and valid for getting authorizations to access any of the underlying API endpoints. Additionally, as applications must be authenticated during the process, there must be a \u201cglobal infrastructure\u201d that supports application registration and credentials management. This provides an understandable mechanism for external consumers to register themselves and trigger the API access, without having to deal with the details of the underlying distributed architecture. The global infrastructure knows these details and hides them to external applications. It is out of the scope of the present invention to describe how the global infrastructure knows about local administrative domains and\/or API endpoints, but in principle there are different alternatives (static configuration, dynamic registration procedures, etc). In any case, it is very important to remark that the global infrastructure is not used as a centralized intermediary to later control API usage; it is just used to support the two main concepts of the solution as explained in the following:\n\n","Routing criteria may vary from one scenario to another. For example, an obvious routing decision may be routing the OAuth process to the service provider that the user belongs to, but the present solution does not preclude other criteria to be used as best applicable for the target scenario. The key point is to flexibly route the OAuth process to the appropriate local administrative domain based on the resource owner's information and preferences.\n\n","Based on this concept, as shown in , the access to the API endpoints can be distributed without relying on any centralized element, in either of the following two ways:\n\n","Distributed OAuth provides a simple and efficient approach to authorize and consume a service on behalf of a user, where the novelty lies in targeting the authorization as well as the resource server (i.e. the API endpoint) as dynamically decided by a routing decision, for example, targeting the user's service provider (more exactly, the adequate administrative domain within the service provider). For the sake of simplicity, in the following detailed descriptions it will be assumed that this is always the applied routing decision, but as previously stated, there is freedom to apply other routing criteria when deemed adequate for the specific scenario.","To describe the details of the proposed invention in an understandable way, a sequential order is followed:\n\n","Additionally, for OAuth 1.0 two parallel solutions are considered for each scenario: one assuming that the Request Token can be directly set towards the local service infrastructure, and another one considering that the above is not possible and Request Tokens are dynamically generated by the local service infrastructure on demand, following the standard OAuth 1.0 interface, which is fully exposed locally.","One Global Web Portal","Before consuming a protected resource, the application needs an Access Token which authorizes it to access to the resource on behalf of the user. This section considers a global web portal to interact with the final user in order to perform the authentication and authorization regardless of the underlying authorization server or the resource server associated to the user. This web portal may help to offer a unified user experience for every authorization and resource server. However, note that the authentication and authorization is actually performed by the local service infrastructure.","As shown in , this process is divided into the following steps:\n\n","In  it was depicted the above process for the case where request tokens are generated by the local infrastructure on demand. Within the flow CallBack2 is formed in the following way: AAPortalURL?rt1=RequestToken1&cb1=callBack1. This allows the AA portal to automatically recover the RequestToken1 and callBack1, which are to be used when coming back to the application once the authorization has been emitted.","OAuth 2.0 simplifies the overall process because the application does not need a request token any more. The application also includes a scope, in the HTTP redirection for the authentication step, which specifies the resources the user should authorize, as shown in .","Distributed Local Web Portals","In this case there is no global web portal to carry out the interactions with the end user in order to perform the authentication and authorization. Each local service infrastructure provides a web portal to perform both actions. Neither the authentication nor the authorization is intermediated by the global service infrastructure. As a result, an alternative approach is required to target the appropriate local service infrastructure. Several mechanisms might be used (e.g. by analysis of the user's IP address) to infer the local service infrastructure. This mechanism might be simplified by requesting the user to select it explicitly, as shown in , which describes the sequence to obtain the Access Token, assuming that request tokens can be directly set locally. This process is divided into the following steps:\n\n","In  it was depicted the above flow for the case where request tokens are generated by the local infrastructure on demand. Within the flow CallBack2 is formed in the following way: GlobalPortalURL?rt1=RequestToken1&cb1=callBack1. This allows the Global portal to automatically recover the RequestToken1 and callBack1, which are to be used when coming back to the application once the authorization has been emitted.","In OAuth 2.0, as shown in , the state is included by the global portal if not already included by the application. This is used to correlate the second redirection back from local portal, after user authorization.","Consuming a Protected Resource","Once the application has obtained an Access Token\u2014which is issued by the user's service provider as explained above\u2014in order to access a protected resource, the application's service request needs to target the user's resource server. Although the application is not aware of which resource server is associated to the user, the Access Token will help to find it out by the following alternatives:\n\n","As a result, the routing to the appropriate resource server is based on the Access Token. Two different approaches are considered:\n\n","The proxy mode has two advantages: a) the URL is unique; the same URL is valid to access the same protected resource in every resource server, and b) the application is simplified because it is not aware of the redirection concerns. On the other hand, the main disadvantage of this mode is that an intermediary increases the response latency and might become a bottleneck, which could be relieved by replicating and distributing geographically several proxies. As shown in , the proxy mode is split into two use cases:\n\n","The redirector mode is the most efficient approach because the application interacts directly with the appropriate resource server. However, the application logic is slightly more complicated because it needs to resolve the Access Token by means of the global Access Token directory, as shown in . The application would locally cache this mapping for further uses.","If the resource server endpoint is self-contained in the Access Token, the Access Token resolution could be performed in the global Access Token directory or directly in the proxy\/application.","Revoking an Access Token","The user needs mechanisms to revoke the authorization to an application, which means revoking the Access Token. The local service infrastructure might also revoke an Access Token due to specific policies (e.g., an Access Token of only one use, once the application consumed it).","The process to revoke an Access Token, as shown in , consists of:\n\n","Since that the revocation may also be made directly towards the local service infrastructure and since tokens may expire without having to be revoked, in order to have up-to-date information on valid Access Tokens at the global level, the global service infrastructure periodically retrieves the list of revoked Access Tokens from every local service infrastructure to update the Access Token cache. This synchronization is not time-critical, because there is no way to access the resources with an invalid Access Token, the synchronization just eliminates invalid entries from the global service infrastructure cache.","The telco operator market is the main focus of this invention. Each telco operator becomes the service provider and each user (or customer) belongs to an operator. Typically, an application market may offer applications built on top of the telco operator's services. However, the application developer would need to implement several variants of the same application to cover several telco operators unless the service interfaces, provided by each operator, are standardized.","The standardization of service interfaces will benefit the application developers because it broadens the market of potential users, the users as the number of applications is increased and their quality as well, and the telco operators because their revenue grows due to a higher number of transactions. All the actors involved in the use case profit from this approach.","Service providers (or telco operators) trust a higher, global entity for the authentication and authorization or provide a local web portal for such aim. The former case is valid if users trust this global entity with the same confidence than their telco operator.","However, other use cases cannot be based in this global entity. The Wholesale Application Community (WAC) [15] aims at setting up an application market valid for every operator and mobile phone. However, operators cannot open their users' information, which is vital for their business, to a different entity. The latter approach, where the authentication and authorization is performed locally, would serve to settle this constraint, and the users would profit from a broad set of applications which make use of telco services (for those services which have been standardized).","Advantages of the Invention","When compared against traditional approaches, Distributed OAuth presents several benefits, both for end-users and service providers. Some of them are highlighted next:\n\n","Distributed OAuth maintains full compatibility with OAuth 1.0 or 2.0 standards and does not require any special behavior from the application side. Thanks to Distributed OAuth, developers will be able to access distributed APIs, potentially belonging to different service providers, just by following standard OAuth, without having to worry about the underlying diversity.","More precisely, the applications won't need to do anything especial when using the proxy mode, if the redirector mode is used, the application will need to consume the global Access Token directory service. This is the only addition to the \u201cstandard\u201d operation on the application side.","A person skilled in the art could introduce changes and modifications in the embodiments described without departing from the scope of the invention as it is defined in the attached claims.","API Application Programming Interface","HTTP HyperText Transfer Protocol","IETF Internet Engineering Task Force","REST Representational State Transfer","SDP Service Delivery Platform","SOAP Simple Object Access Protocol","URL Uniform Resource Locator",{"@attributes":{"id":"p-0085","num":"0000"},"ul":{"@attributes":{"id":"ul0041","list-style":"none"},"li":["[1] OAuth 1.0, http:\/\/tools.ietf.org\/html\/rfc5849","[2] OAuth 2.0, http:\/\/tools.ietf.org\/html\/draft-ietf-oauth-v2-22","[3] http:\/\/www.sitepen.com\/blog\/2009\/02\/19\/introducing-oauth-in-dojox\/","[4] BlueVia developers OAuth guides, https:\/\/bluevia.com\/en\/knowledge\/APIs.API-Guides.OAuth","[5] Twitter developers information, http:\/\/dev.twitter.com\/pages\/auth","[6] Google information on OAuth, http:\/\/code.google.com\/p\/oauth\/","[7] Yahoo developers oauth information, http:\/\/developer.yahoo.com\/oauth\/","[8] Facebook developer information http:\/\/developers.facebook.com\/docs\/authentication\/","[9] Google information on OAuth 2.0, http:\/\/code.google.com\/intl\/es-ES\/apis\/accounts\/docs\/OAuth2.html","[10] Federated Login for Google Account Users, http:\/\/code.google.com\/intl\/es-ES\/apis\/accounts\/docs\/OpenID.html","[11] OpenID OAuth Extension, http:\/\/step2.googlecode.com\/svn\/spec\/openid_oauth_extension\/latest\/openid_oauth_extension.html","[12] Microsoft Session Directory Services Token Redirection Support in the Cisco Content Switching Module for the Cisco Catalyst 6500,","http:\/\/www.cisco.com\/en\/US\/prod\/collateral\/modules\/ps2706\/ps780\/product_solution_overview0900aecd806fc547.pdf","[13] About IP Address and Token Redirection, http:\/\/technet.microsoft.com\/en-us\/library\/cc732852.aspx","[14] NexTransit\u2122 Interconnect Proxy, http:\/\/www.transnexus.com\/Products\/NexTransit.htm","[15] WAC\u2014Wholesale Application Community, http:\/\/www.wacapps.net"]}}],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The previous and other advantages and features will be more fully understood from the following detailed description of embodiments, with reference to the attached drawing, which must be considered in an illustrative and non-limiting manner, in which:",{"@attributes":{"id":"p-0029","num":"0043"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0030","num":"0044"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0031","num":"0045"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0032","num":"0046"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0033","num":"0047"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0034","num":"0048"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0035","num":"0049"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0036","num":"0050"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0037","num":"0051"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0038","num":"0052"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0039","num":"0053"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0040","num":"0054"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0041","num":"0055"},"figref":"FIG. 13"},{"@attributes":{"id":"p-0042","num":"0056"},"figref":"FIG. 14"}]},"DETDESC":[{},{}]}
