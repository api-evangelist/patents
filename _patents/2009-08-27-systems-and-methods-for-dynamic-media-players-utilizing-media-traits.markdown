---
title: Systems and methods for dynamic media players utilizing media traits
abstract: A media player can identify one or more elements of a media presentation and select an element of the media presentation for generating output. The elements may be identified in a playlist or elsewhere. For example, the playlist may specify a composition of a plurality of visual, audio, or other elements for generating output or other behavior in parallel and/or in series over the course of the media presentation. The media player can comprise a playback component configured to utilize at least one selectively-enabled functional component of the media player to generate output based on evaluating the trait(s) exposed by the selected element. Traits may be determined based on analyzing media types or other data regarding the elements of the presentation.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09049472&OS=09049472&RS=09049472
owner: Adobe Systems Incorporated
number: 09049472
owner_city: San Jose
owner_country: US
publication_date: 20090827
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["CROSS REFERENCE TO RELATED APPLICATIONS","TECHNICAL FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["This application is related to U.S. patent application Ser. No. 12\/548,728, entitled \u201cSystems and Methods for Programmatically Interacting with a Media Player\u201d, which is filed the same day as the present application and is incorporated by reference herein in its entirety.","The present subject matter generally pertains to distribution of content, particularly to the configuration and use of media players.","Effective development and deployment of media players remains an ongoing challenge for content providers. For example, many proposals have been offered for monetizing web-based video distribution by subscription fees, advertisements, and\/or other methods. However, development costs can affect the success of a web-based video or other content distribution service. For example, a specialized video or other media player may need to be developed for different applications (e.g., a video player, an audio player, etc.). A media player can be constructed as a using rich internet applications such as the Flash\u00ae Player by Adobe Systems Incorporated of San Jose, Calif. However, construction of the media player can entail customization to support features of the distribution service, such as adding specialized playback controls and coding a video player to switch between content and advertisements. These customizations can represent a significant expense in time and funds.","Embodiments of the present subject matter can provide a media player that selectively enables media player behavior based on one or more traits exposed by components of a media presentation.","For example, a computing system can be configured to provide a media player that selects an element of the media presentation for generating output. For example, the element may comprise a single file, or the media player may comprise a playlist parsing module configured to parse a playlist. The playlist may specify a composition of a plurality of visual, audio, or other elements for generating output or other behavior in parallel and\/or in series over the course of the media presentation.","The media player can comprise a playback component configured to utilize at least one selectively-enabled functional component of the media player to generate output based on evaluating the trait(s) exposed by the selected element. Exposed traits can be determined by analyzing the type of media included in the selected element. For example, some elements may expose a \u201cvisible\u201d trait and a \u201ctemporal\u201d trait and, in response, the media player can selectively enable or disable aspects of a video playback component for output of those elements while disabling aspects of the video playback component when those traits are not present. As another example, other elements may be \u201cvisible\u201d but may not expose the \u201ctemporal\u201d trait, and so the media player can enable suitable components for rendering non-video content; other elements (e.g., audio) may be \u201ctemporal\u201d but not \u201cvisible.\u201d","Embodiments include a method comprising accessing data defining a plurality of elements of a media presentation, selecting at least one element of the media presentation for use in generating behavior of a media player, determining a trait applicable to the identified element, and based on the identified trait, identifying a functional component of the media player to generate media player behavior using the selected element. The functional component can be identified using data indicating which functional component(s) correspond to one or more particular traits.","Embodiments also include computing systems and computer-readable media embodying program code for providing a media player with functionality that can vary based on exposed traits. These illustrative embodiments are mentioned not to limit or define the limits of the present subject matter, but to provide examples to aid understanding thereof. Illustrative embodiments are discussed in the Detailed Description, and further description is provided there. Advantages offered by various embodiments may be further understood by examining this specification and\/or by practicing one or more embodiments of the claimed subject matter","Reference will now be made in detail to various and alternative exemplary embodiments and to the accompanying drawings. Each example is provided by way of explanation, and not as a limitation. It will be apparent to those skilled in the art that modifications and variations can be made. For instance, features illustrated or described as part of one embodiment may be used on another embodiment to yield a still further embodiment. Thus, it is intended that this disclosure includes modifications and variations as come within the scope of the appended claims and their equivalents.","In the following detailed description, numerous specific details are set forth to provide a thorough understanding of the claimed subject matter. However, it will be understood by those skilled in the art that claimed subject matter may be practiced without these specific details. In other instances, methods, apparatuses or systems that would be known by one of ordinary skill have not been described in detail so as not to obscure the claimed subject matter.",{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 1","b":["100","100","102","104","106","120","108","110","112","116","116","118","120","104"]},"Memory  embodies several program components that configure computing system  to function. Other components not illustrated here, such as an operating system, runtime environment, and other applications, may be embodied in memory as well. Computing device  can represent any device with media playback functionality, including, but not limited to, a personal computer, portable computer, tablet computer, cellular telephone\/PDA\/media player, or a home entertainment component (e.g., set-top box, video gaming device, DVD\/DVR, television, etc.). The media player may comprise a stand-alone application, a plug-in for another application, or may be representative of functionality of an application (e.g., a web browser) with built-in media playback functionality.","Memory  includes a playlist parsing module  configured to parse a playlist that identifies a plurality of elements of a media presentation. Additionally, memory  includes a group of modules  and  collectively acting as a playback component. The playback component is configured to utilize at least one functional component  of the media player to generate output using the selected element(s) based on evaluating the trait exposed by the selected element(s) based on analysis of the media type of the selected element(s). For example, the media data may be analyzed and compared to known patterns or an indicator of the media type may be included in the name or metadata for a file corresponding to the selected element.","Data  is included to represent working data used by the media player, one or more playlists, and the data defining elements of the media presentation; this and other data may be maintained locally and\/or remotely in various embodiments. For example, a client-side media player may download a playlist or composition data and then access content data and other elements from a remote server. As another example, the playlist and content data may be stored in locally-available media (e.g., a DVD or downloaded file).","In this example, module  comprises a trait identification module configured to identify a trait applicable to the selected element, while behavioral control module  is configured to direct one or more of functional components A, B, C, of the media player to generate output. For example, behavioral control module  may access data indicating which functional component(s)  correspond to the particular traits exposed by the selected element. As an example, video playback component A may be used when the element has the \u201cvisible\u201d and \u201ctemporal\u201d traits; audio playback component B may correspond to \u201caudible\u201d and \u201ctemporal\u201d traits; and UI generation component C may correspond to \u201cplayable\u201d traits.","When used, video playback component A can access data specified by the selected element and use the data to generate video output. For instance, one or more video codecs can be used as is known in the art. Similarly, audio playback component B can access data specified by the selected element and use the data to provide audio output. UI generation component C can access data specified by the selected element, if needed, in order to provide controls for the media player by rendering interface elements (e.g., buttons, sliders) linked to function calls to control the player.","For example, the selected element may expose the \u201cseekable\u201d trait which triggers the media player to provide standard seeking controls (e.g., play, rewind, fast-forward, scrub bar that is draggable, etc.). Object code for providing the UI elements may be included in the media player (i.e., as part of UI component C) and\/or may be referenced by or included in the selected element. For example, the selected element may specify certain UI features and also include a \u201cvisible\u201d trait for applying a skin referenced in the element data to change the appearance of the media player.","Any number or designation of traits can be specified for use in embodiments of the present subject matter and can be correlated to any number or type of functional components for the media player. In some embodiments, traits are specified positively\u2014i.e. positively describing media player behavior (e.g., an element is only \u201cplayable\u201d if it has the \u201cplayable\u201d trait). In alternative embodiments, negative traits nomenclature could be used (e.g., all elements could be considered \u201cseekable\u201d except for those exposing the \u201cnot seekable\u201d trait).","In some embodiments, at least the following traits are supported:",{"@attributes":{"id":"p-0029","num":"0028"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"161pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Trait","Use"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["audible","determining whether to utilize audio capabilities"]},{"entry":["bitrate switchable","determining whether to change bitrate to better take"]},{"entry":[{},"advantage of available bandwidth"]},{"entry":["bufferable","determining whether to enable buffer capability"]},{"entry":["data transferable","determining what portion of the media has been\/can be"]},{"entry":[{},"downloaded to a client"]},{"entry":["loadable","for use in initializing media before"]},{"entry":[{},"playback\/presentation"]},{"entry":["pausible","for enabling pause UI element"]},{"entry":["playable","for enabling playback of media content and\/or"]},{"entry":[{},"execution of non-media elements"]},{"entry":["seekable","for enabling seek controls"]},{"entry":["spatial","to indicate that the media has native\/intrinsic"]},{"entry":[{},"dimensions"]},{"entry":["temporal","to indicate that the media has a duration"]},{"entry":["viewable","to indicate that the media has a visible element"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"For instance, a number of traits can be mapped to use of certain functional components in consuming content data as noted below:",{"@attributes":{"id":"p-0031","num":"0030"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"91pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Functional Component","Trait(s)","Content Data Used"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["video player, no controls","temporal AND viewable AND","video data"]},{"entry":[{},"spatial"]},{"entry":["video player with all controls","temporal AND viewable AND","video data"]},{"entry":[{},"playable AND pausible AND"]},{"entry":[{},"seekable"]},{"entry":["audio player","temporal AND audible AND","audio data"]},{"entry":[{},"pausible AND seekable"]},{"entry":["graphic output or overlay","viewable AND spatial","raster\/vector\/other graphic"]},{"entry":["control overlay for sharing via","viewable AND spatial","(built in) or code referenced in"]},{"entry":["social network",{},"playlist"]},{"entry":["viewing beacon","playable","(built in) or referenced in"]},{"entry":[{},{},"playlist"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}}},"The examples of traits and mapping of trait combinations to functional components are provided for purposes of explanation only. In practice, other trait names and mappings to functional components can be used. For example, functional components included in a media presentation may expose a \u201cfunctional\u201d trait or some other trait that indicates use of a non-media element or, like the viewing beacon noted above, the functional element may simply be \u201cplayable.\u201d","As an example of handling a non-media element, the behavioral control module may direct a data handling component of the media player to access a resource separate from the media player and to perform at least one of receiving data in machine form from the resource or providing data in machine form to the resource. Accessing the resource may, for instance, comprise sending the tracking or viewing beacon to a server specified in the media element declaring the viewing beacon. As another example, accessing the resource can comprise loading a plugin to dynamically extend the functionality of the media player, such as by providing additional UI elements (e.g., for recommending a video to a social network contact) or providing a parser that enables the media player to recognize elements specified in a particular composition language. Dynamically extending the media player functionality may allow for new features to be added while a presentation is ongoing without the need to restart the player.","In some embodiments, the available traits and the mapping of media presentation elements to traits are extensible, and so the listing of traits in the examples herein should not be viewed as limiting.",{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 2","b":["200","202"]},"Block  represents selecting at least one element of the media presentation for use in generating behavior of a media player. For example, the playlist may be parsed to identify the first element or elements of an output sequence for the media presentation. As will be noted below, elements may be specified for output (or other media player behavior) to occur in parallel and\/or in series. As an example, a presentation may comprise a first and second segment to be presented in series. Each segment can include audio and video content presented in parallel.","Block  represents determining one or more traits applicable to the selected element or elements. For example, the elements of the media presentation may be specified in a structured format where file types or other information are explicitly included along with pointers or indicators of data comprising the elements. For example, the selected element may comprise an identifier of an audio file.","Traits may be determined to be applicable based on declaration alongside or in the selected element(s) and\/or based on analyzing the content of the selected element(s). As an example, a playlist may be specified using a composition language. Tags in the composition language may be mapped to one or more traits. For instance, a \u201c<video>\u201d tag may be treated as exposing the viewable, audible, playable, and seekable traits.","Additionally or alternatively, traits may be inherited based on a tree structure specified in the playlist. For example, the plurality of elements of the media presentation may include at least one child element nested inside a parent element. Determining a trait for a parent element can include identifying a trait determined as applicable to one or more of its children. For example, a serial element may define an element as part of a series of elements, with one or more of the elements having a nested video and audio element for output in parallel and having a respective \u201cvisible\u201d and \u201caudible\u201d trait. Both children can include a \u201ctemporal\u201d trait, and so the serial element can inherit the \u201ctemporal\u201d trait, along with the \u201cvisible\u201d and \u201caudible\u201d traits.","In some embodiments, an API is defined and includes rules for how traits can be mapped to elements of a media presentation. For example, a \u201ctemporal\u201d trait can have a duration property. The serial element can inherit the \u201ctemporal\u201d trait having a duration property equal to the sum of its children (if the children are parallel to one another) or the longest duration among parallel children.","Block  represents identifying and\/or using a functional component of the media player to generate media player behavior using the selected element(s), as needed. Particularly, the functional component (or components) can be identified based on the trait(s), such as by accessing data mapping traits or trait combinations to particular components.","Embodiments include \u201cplayback\u201d of both content (e.g., audio, visual content) along with causing media player behavior not directly related to output of video or audio content. For example, a segment can include traits to cause the media player to change configuration (e.g., available controls, appearance) and\/or operation (e.g., to submit a tracking beacon). Some such behaviors may not rely on content data of the selected element. For instance, a player may include code for generating user interfaces, providing tracking beacons, and the like without the need to access additional code or other data comprising the selected element.","Notwithstanding the above, embodiments also include players that support media presentations comprising content data along with code and other data that extend the functionality of the media player. For instance, code comprising a plug-in could comprise the selected element and could be used in response to exposure of a trait corresponding to the plug in. As an example, a media presentation may include an element with a \u201cloadable\u201d trait and referencing code available from a remote resource for generating customized controls or overlays. This may allow, for example, a custom interface for recommending a presentation or portion thereof to a social network or other data service. The content data may be specified in machine form, i.e., in a form other than audio or visual data. Examples of data in machine form include, but are not limited to, program code and data structures.","Depending upon the trait(s) exposed, some but not necessarily all content data of the selected element may be used. For example, a composer of the media presentation may specify an audiovisual clip as an element but may expose only the \u201cvisible\u201d trait and not the \u201caudible\u201d trait. For instance, different audio may be substituted by specifying a different audio component as \u201caudible\u201d during the same segment of the presentation. As another example, different bitrates may be selected during playback if the \u201cbitrate switchable\u201d trait is exposed.","Aspects of method  may occur over the course of the media presentation. For example, playlist parsing module  may select elements in accordance with a presentation scheme or schedule. As new elements are selected, corresponding new traits can be exposed and corresponding functional components enabled or used. Additionally, the method can include disabling a previously-enabled functional component of the media player or discontinuing use of the component if a trait corresponding to the previously-enabled functional component is not identified as applicable to the currently-used element(s) of the media presentation.","For example, an initial portion of the presentation may comprise an element that exposes the \u201cseekable\u201d trait along with other traits that cause behavioral control module  to provide video player functionality. While that element is among the currently-used elements, playback controls also can be available to the user. A following portion may include an element without the \u201cseekable\u201d trait, which leads behavioral control module  to disable the playback controls, with the controls re-enabled once another element that is seekable becomes the currently-used element.","A media presentation can be assembled in any suitable manner. For example, a user may be presented a timeline view for dragging, dropping, and arranging various audio, visual, and other components of the media presentation. Dialog boxes or other selection mechanisms can be provided for specifying other behavioral aspects of the presentation, such as use of tracking beacons, addition of or removal of user controls, and the like. The elements in the timeline may also include desired functional components for use during the media presentation. For example, a user may provide input specifying desired video player types or functions, such as tracking beacons, via a menu or other interface for use in playing back video content of an element.",{"@attributes":{"id":"p-0048","num":"0047"},"figref":"FIG. 3","b":["300","302","304","306","308","310","312","314","308","316","316","318","320","322","324","326","328","330","332"]},"As an example, segments  and  may comprise advertisements, while segments  and  comprise other programming. Segment  may include a video advertisement in video content  presented simultaneously to video content  and audio content . Tracking beacons  and  can be used to determine if users continue to view the presentation or navigate away when the advertisements are shown; more complex tracking could be enabled as well, such as tracking mouse activity, volume level, etc.","The composition for the media presentation may be expressed using a playlist specified in a structured markup language. For example, an XML file may be used. In some embodiments, syntax similar to that of a SMIL (Synchronized Multimedia Integration Language) document is used. A timeline view similar to  may be presented during the authoring process and then converted to suitable markup or packaged into a file for consumption by a media player.","For purposes of explanation, pseudo-code expressing a composition is shown below in conjunction with . In the hypothetical syntax below, the \u201cseq\u201d tag denotes a sequence while items with the \u201cpar\u201d tag are at least partially parallel, the \u201cdelay\u201d parameter is used to delay a component's appearance from the time the parallel structure begins. Additionally, full markup of a presentation can include more complex and detailed information such as component positions, durations, begin times, end times, and more complex resource identifiers (e.g., uniform resource locators, local files, etc.).",{"@attributes":{"id":"p-0052","num":"0051"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<presentation>"},{"entry":"\u2003<par>"},{"entry":"\u2003\u2003<seq>"},{"entry":"\u2003\u2003\u2003<image region=\u201clogo\u201d src=\u201chttp:\/\/philo-"},{"entry":"prog01.corp.adobe.com\/testing\/mod\/ads\/nbs_logo.jpg\u201d dur=\u201c400s\u201d\/>"},{"entry":"\u2003\u2003\u2003<image region=\u201clogo\u201d src=\u201chttp:\/\/philo-"},{"entry":"prog01.corp.adobe.com\/testing\/mod\/ads\/Pirates3.png\u201d dur=\u201c50s\u201d\/>"},{"entry":"\u2003\u2003<\/seq>"},{"entry":"\u2003\u2003<seq>"},{"entry":"\u2003\u2003\u2003<video region=\u201ccontent\u201d"},{"entry":"src=\u201chttp:\/\/philo-prog01.corp.adobe.com\/pirates3\/Pirates3-1.flv\u201d"},{"entry":"dur=\u201c210s\u201d \/>"},{"entry":"\u2003\u2003\u2003<video region=\u201ccontent\u201d"},{"entry":"src=\u201chttp:\/\/philo-prog01.corp.adobe.com\/pirates3\/ad.flv\u201d"},{"entry":"dur=\u201c30s\u201d >"},{"entry":"\u2003\u2003\u2003\u2003<param name=\u201ccontentType\u201d"},{"entry":"\u2003\u2003\u2003\u2003value=\u201cad\u201d\/>"},{"entry":"\u2003\u2003\u2003<video region=\u201ccontent\u201d"},{"entry":"src=\u201chttp:\/\/philo-prog01.corp.adobe.com\/pirates3\/Pirates3-2.flv\u201d"},{"entry":"dur=\u201c210s\u201d \/>"},{"entry":"\u2003\u2003<\/seq>"},{"entry":"\u2003\u2003<seq>"},{"entry":"\u2003\u2003\u2003<image region=\u201cbanner\u201d src=\u201chttp:\/\/philo-"},{"entry":"prog01.corp.adobe.com\/testing\/mod\/ads\/ad1.jpg\u201d dur=\u201c150s\u201d \/>"},{"entry":"\u2003\u2003\u2003<image region=\u201cbanner\u201d"},{"entry":"src=\u201chttp:\/\/philo-prog01.corp.adobe.com\/testing\/mod\/ads\/ad2.gif\u201d"},{"entry":"dur=\u201c150s\u201d\/>"},{"entry":"\u2003\u2003\u2003<image region=\u201cbanner\u201d src=\u201chttp:\/\/philo-"},{"entry":"prog01.corp.adobe.com\/testing\/mod\/ads\/ad3.jpg\u201d dur=\u201c150s\u201d \/>"},{"entry":"\u2003\u2003<\/seq>"},{"entry":"\u2003<\/par>"},{"entry":"<\/presentation>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"As can be seen in the timeline view of , three sequences are provided and displayed in parallel. A first sequence includes elements  and , which are presented in parallel with a second sequence -- and in parallel with a third sequence --. The first sequence may, for example, comprise a series of logos, the second sequence may comprise three video clips played in sequence, and the third sequence can comprise a series of banner ads.","In this example, the presentation begins at T by showing the \u201cNBS logo\u201d , \u201cPirates 3-1.flv\u201d video , and \u201cBanner ad 1\u201d  at respective locations in parallel. For instance, the \u201cNBS logo\u201d element specifies a \u201clogo\u201d region for display and a duration of \u201c400 s.\u201d Since element  is an \u201cimage,\u201d the media player can determine that it exposes the \u201cvisible\u201d and \u201cspatial\u201d traits. Accordingly, the media player can use a suitable rendering component to display the logo at its intended location and size.","Video element  may expose the \u201ctemporal,\u201d \u201cseekable,\u201d \u201cvisible,\u201d and \u201caudible\u201d traits. Accordingly, components for playing video element  at the \u201ccontent\u201d area can be enabled and used while those traits are exposed. At the same time, element  may also expose the \u201cvisible\u201d and \u201cspatial\u201d traits, which allow display of banner ad 1 in the play area.","Playback of elements , , and  can occur in parallel, with banner ad 1 being replaced by banner ad 2 as specified by element . Once T is reached, playback of element  can begin. As noted in the source code, although element  is defined as a video element, it also includes a parameter declaration \u201cad.\u201d This may cause the video element to be treated as not exposing the \u201cseekable\u201d trait. Thus, when point T is reached, the presentation will not expose the \u201cseekable\u201d trait and seek controls (e.g., fast-forward, rewind, etc.) may disappear during the duration of element . Once point T is reached, element  may again expose the \u201cseekable\u201d trait and controls can return.","This example did not feature a tracking beacon or other functional element. As was noted above, a media presentation can include non-media elements that are consumed by the media player according to specified traits. For example, the playlist may include a declaration recognized by the media player as referring to a tracking beacon along with a reference to source for code to generate the beacon and\/or attributes, such as a reporting server address to receive viewing\/activity data. As an example, a declaration such as \u201c<beacon target=\u201dhttp:\/\/www.example.com\/trackingServer\/> can be included. This element may be recognized as exposing a \u201cfunctional\u201d trait or other data that causes the media player to use components to send a ping to www.example.com\/trackingServer.",{"@attributes":{"id":"p-0058","num":"0057"},"figref":["FIG. 5","FIG. 1"],"b":["500","126","124","128","122"]},"Media element identification data  represents information exposing at least one well-defined trait. \u201cWell-defined traits\u201d are expressions in a form suitable for invoking API ; i.e., the traits are correctly expressed in some manner and include or reference any needed parameters.","In some embodiments, media element identification data  comprises a playlist having trait declarations in human-readable form (e.g., a markup file that includes traits). However, as was noted above, a playlist may identify various elements which are mapped to different traits or trait combinations by API . In some embodiments, the playlist includes declarations of media elements, with the media elements mapped to trait declarations by suitable code in the media player. For instance, a <video> tag can map to a \u201cvideo\u201d media element. The \u201cvideo\u201d media element would have the playable, pausible, etc. traits. As will be noted below, a media player may convert a media composition definition provided in one or more languages to a playlist with well-defined traits used internally by the media player.","As shown in , media element identification data  invokes one or more operations via API . In this example, several operations -, -, -, and -N are illustrated. Operations  are meant to represent any type or number of media player behaviors that can be invoked. For example, invoking respective operations for video playback component A, audio playback component B, and UI Generator component C of  can comprise providing appropriate function calls to execute code corresponding to those components. However, the API can invoke any number or type of methods, components, functions, or operations supported by the media player.","Further examples of media player functionality include accessing a remote resource to provide data to and\/or receive data from the remote resource. For example, the media player can include code that provides a ping to one or more tracking servers specified in parameters passed in the API. Another example of functionality can include loading plugins to extend the media player. As will be noted below, a media presentation may be specified in a composition definition file using a particular composition language such as SMIL that does not natively include traits. The composition definition file may be loaded and parsed to determine that the file identifies itself as a SMIL composition. This identification can be treated as a trait that triggers the API to load a plugin for converting the SMIL composition to a playlist with suitable trait declarations for use in playing back the file. If a composition definition file identifies itself using a different language, the identification can trigger the API to load a different plugin to recognize elements in the composition language as exposing various traits.",{"@attributes":{"id":"p-0063","num":"0062"},"figref":"FIG. 6","b":["600","602"]},"Block  represents selecting one or more elements specified in the media element identification data for use. For example, the objects of the playlist may be treated sequentially, subject to any parallel structures in a given sequence. When a first sequence ends, then the element corresponding to the next sequence can be selected for use at block .","Block  represents evaluating the traits exposed by the selected element or elements and invoking one or more corresponding operations via the API. For example, when a playlist is initially loaded, the first element may comprise a <graphic\/> and <audio\/> element to be presented in parallel. The exposed traits for the sequence can include \u201cspatial\u201d and \u201cvisible\u201d with regard to the graphic and \u201ctemporal\u201d and \u201caudible\u201d with regard to the audio component. Due to the exposed trait combinations, a suitable operation can be invoked via the API to use an imaging component to display the graphic and an audio playback operation can be invoked to provide the audio output.","Dashed line  is included to represent that method  can comprise an ongoing process during a media presentation. For instance, after all elements of the first sequence have been completed or after a first time marker has been reached, a new media player event can occur to signify that the next element or sequence of the media presentation is to be considered. The element or elements of that sequence can be selected at block  and at  the exposed traits can be used to invoke API operations. This process can continue until completion of the presentation.","As was noted above, use of an API dependent upon exposed traits can separate programmatic aspects of the media player from the underlying media objects. This can enhance the development process since the media player does not need to be customized for particular object formats. Since the playlist or other identification data provides a trait and a pointer to the object data, the playback components have no need to \u201cknow\u201d what they are playing back. Accordingly, the media player does not need to be coded to play back video of a specific format based on a particular file location or URL. Additionally, the same media player component can be used for multiple different presentation scenarios.","The use of a programmatic API additionally allows for non-media elements of the presentation to be treated on an equal footing with media elements (e.g., graphics, video, sound). As an example, in previous media players, tracking beacons are treated as secondary considerations\u2014in some cases, a script or other code is written to include a single-pixel image, with loading of the pixel-image acting as the tracking beacon.","On the other hand, embodiments configured in accordance with the present subject matter can support one or more tracking methods that can be invoked via the API in the same manner as a media playback methods are invoked. As a result, a developer can include a \u201ctracking\u201d element in the playlist and specify a particular time or duration for the tracking event (or events) to occur. For example, a tracking method may be called and passed a tracking server destination, tracking start time, and tracking end time. As another example, the method may simply be called and passed a tracking server destination when the tracking element is encountered in the playlist.","The API can support dynamic configuration of the media player as well. For example, a functional component may be specified as a media element. The media element may expose traits that are mapped to a method for loading a plugin and rule set for converting a composition data file into a playlist for further parsing. As another example, the media element may expose a \u201cloadable\u201d trait and specify a plugin for playing back content (e.g., a video codec).","Treatment of elements referencing functional components on equal footing as elements referencing media components can simplify the design process for a media presentation. For example, a media composition tool can present a timeline view similar to that shown in . In addition to audio, video, and visual components, a developer can drag and drop functional components such as beacons and other elements into the timeline. This data can then be used to generate a playlist or other media composition data.",{"@attributes":{"id":"p-0072","num":"0071"},"figref":["FIG. 7","FIG. 8"],"b":["700","800","702","702","704","706","706"]},"As shown at block  in flowchart , data specifying a composition can be accessed. For example, a .smi file in the SMIL format may be accessed by a web browser, media player, or other component that is to provide a media presentation. At block , the composition language is identified and the appropriate plugin is loaded. For example, as was mentioned above, the document-type declaration or other identifying information in the composition data may be treated as a \u201cmedia element\u201d that includes a trait that invokes a method for loading a plugin. As another example, the plugin may be identified and loaded in response to the file extension for the composition data.","Block  represents using the plugin to parse the composition data in order to determine the structure of the media presentation and assign appropriate traits. For example, parallel and series components can be identified using the native syntax for the composition data. Media types can be identified to determine corresponding elements to include in the playlist and appropriate trait types can be determined. For example, video content can be identified and used to generate one or more elements having \u201cvisual\u201d and \u201ctemporal\u201d traits.","Block  represents providing a playlist with well-defined traits for use in invoking the API. For example, the playlist may be made available to the behavioral control module or other components of the media player that parse the playlist and invoke methods via the API based on exposed traits. As another example, the playlist may be stored in memory for later use.","The API may support functionality that does not have a corresponding syntax in the native format for the media composition. For example, the API may support calling a tracking beacon method built into the media player as noted above. In some embodiments, the parser is configured to interpret predefined extensions to existing formats for invoking functionality of the API directly. For example, an addition to the SMIL standard can be supported for specifying the insertion of tracking beacons at one or more specified points in the presentation. As another example, existing features of the native format may be mapped to API calls. For instance, a single-pixel image included in a SMIL composition may be converted to an element calling the tracking beacon method in parallel to one of the other elements of the playlist.","General Considerations","Some portions of the detailed description were presented in terms of algorithms or symbolic representations of operations on data bits or binary digital signals stored within a computing system memory, such as a computer memory. These algorithmic descriptions or representations are examples of techniques used by those of ordinary skill in the data processing arts to convey the substance of their work to others skilled in the art. An algorithm is here and generally is considered to be a self-consistent sequence of operations or similar processing leading to a desired result. In this context, operations or processing involve physical manipulation of physical quantities.","Typically, although not necessarily, such quantities may take the form of electrical or magnetic signals capable of being stored, transferred, combined, compared or otherwise manipulated. It has proven convenient at times, principally for reasons of common usage, to refer to such signals as bits, data, values, elements, symbols, characters, terms, numbers, numerals or the like. It should be understood, however, that all of these and similar terms are to be associated with appropriate physical quantities and are merely convenient labels.","Unless specifically stated otherwise, as apparent from the foregoing discussion, it is appreciated that throughout this specification discussions utilizing terms such as \u201cprocessing,\u201d \u201ccomputing,\u201d \u201ccalculating,\u201d \u201cdetermining\u201d or the like refer to actions or processes of a computing platform, such as one or more computers and\/or a similar electronic computing device or devices, that manipulate or transform data represented as physical electronic or magnetic quantities within memories, registers, or other information storage devices, transmission devices, or display devices of the computing platform.","The various systems discussed herein are not limited to any particular hardware architecture or configuration. A computing device can include any suitable arrangement of components that provide a result conditioned on one or more inputs. Suitable computing devices include multipurpose microprocessor-based computer systems accessing stored software, that programs or configures the computing system from a general-purpose computing apparatus to a specialized computing apparatus implementing one or more embodiments of the present subject matter. Any suitable programming, scripting, or other type of language or combinations of languages may be used to implement the teachings contained herein in software to be used in programming or configuring a computing device.","Embodiments of the methods disclosed herein may be performed in the operation of such computing devices. The order of the blocks presented in the examples above can be varied\u2014for example, blocks can be re-ordered, combined, and\/or broken into sub-blocks. Certain blocks or processes can be performed in parallel.","As noted above, a computing device may access one or more computer-readable media that tangibly embody computer-readable instructions which, when executed by at least one computer, cause the at least one computer to implement one or more embodiments of the present subject matter. When software is utilized, the software may comprise one or more components, processes, and\/or applications. Additionally or alternatively to software, the computing device(s) may comprise circuitry that renders the device(s) operative to implement one or more of the methods of the present subject matter.","Examples of computing devices include, but are not limited to, servers, personal computers, personal digital assistants (PDAs), cellular telephones, televisions, television set-top boxes, and portable music players. Computing devices may be integrated into other devices, e.g. \u201csmart\u201d appliances, automobiles, kiosks, and the like.","The inherent flexibility of computer-based systems allows for a great variety of possible configurations, combinations, and divisions of tasks and functionality between and among components. For instance, processes discussed herein may be implemented using a single computing device or multiple computing devices working in combination. Databases and applications may be implemented on a single system or distributed across multiple systems. Distributed components may operate sequentially or in parallel.","When data is obtained or accessed as between a first and second computer system or components thereof, the actual data may travel between the systems directly or indirectly. For example, if a first computer accesses data from a second computer, the access may involve one or more intermediary computers, proxies, and the like. The actual data may move between the first and second computers, or the first computer may provide a pointer or metafile that the second computer uses to access the actual data from a computer other than the first computer, for instance. Data may be \u201cpulled\u201d via a request, or \u201cpushed\u201d without a request in various embodiments.","The technology referenced herein also makes reference to communicating data between components or systems. It should be appreciated that such communications may occur over any suitable number or type of networks or links, including, but not limited to, a dial-in network, a local area network (LAN), wide area network (WAN), public switched telephone network (PSTN), the Internet, an intranet or any combination of hard-wired and\/or wireless communication links.","Any suitable tangible computer-readable medium or media may be used to implement or practice the presently-disclosed subject matter, including, but not limited to, diskettes, drives, magnetic-based storage media, optical storage media, including disks (including CD-ROMS, DVD-ROMS, and variants thereof), flash, RAM, ROM, and other memory devices.","The use of \u201cadapted to\u201d or \u201cconfigured to\u201d herein is meant as open and inclusive language that does not foreclose devices adapted to or configured to perform additional tasks or steps. Additionally, the use of \u201cbased on\u201d is meant to be open and inclusive, in that a process, step, calculation, or other action \u201cbased on\u201d one or more recited conditions or values may, in practice, be based on additional conditions or values beyond those recited. Headings, lists, and numbering included herein are for ease of explanation only and are not meant to be limiting.","While the present subject matter has been described in detail with respect to specific embodiments thereof, it will be appreciated that those skilled in the art, upon attaining an understanding of the foregoing may readily produce alterations to, variations of, and equivalents to such embodiments. Accordingly, it should be understood that the present disclosure has been presented for purposes of example rather than limitation, and does not preclude inclusion of such modifications, variations and\/or additions to the present subject matter as would be readily apparent to one of ordinary skill in the art."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["A full and enabling disclosure is set forth more particularly in the remainder of the specification. The specification makes reference to the following appended figures.",{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIGS. 3 and 4"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 8"}]},"DETDESC":[{},{}]}
