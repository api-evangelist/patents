---
title: Malware detection by application monitoring
abstract: A method of detecting malware on a computer system. The method comprises monitoring the behavior of trusted applications running on the computer system and, in the event that unexpected behavior of an application is detected, identifying a file or files responsible for the unexpected behavior and tagging the file(s) as malicious or suspicious. The unexpected behavior of the application may comprise, for example, dropping executable files, performing modifications to a registry branch which is not a registry branch of the application, reading a file type class which is not a file type class of the application, writing portable executable (PE) files, and crashing and re-starting of the application.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08590045&OS=08590045&RS=08590045
owner: F-Secure OYJ
number: 08590045
owner_city: Helsinki
owner_country: FI
publication_date: 20091007
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["The present invention relates to a method of detecting potential malware by monitoring the behaviour of trusted applications.","Malware is short for \u201cmalicious software\u201d and is a term used to refer to any software designed to infiltrate or damage a computer system without the owner's consent. Malware includes computer viruses, worms, trojans, rootkits, adware, spyware and any other malicious and unwanted software.","When a computer device is infected by malware, most often in the form of a program or other executable code, the user may notice unwanted behaviour and degradation of system performance as the infection can create unwanted processor activity, memory usage, and network traffic. This can also cause stability issues leading to application or system crashes. Even if a malware infection does not cause a perceptible change in the performance of a device, the malware may be performing other malicious functions such as monitoring and stealing potentially valuable commercial or personal information, or hijacking a device so that it may be exploited for some illegitimate purpose.","Many end users make use of security and anti-virus software to detect and possibly remove malware. An example application is F-Secure\u2122 Internet Security produced by F-Secure Corp., Helsinki, Finland. In order to detect a malware file, an anti-virus application must have some way of identifying it from amongst all the other clean and trusted files present on a device. Typically, this requires that the anti-virus software has a database containing \u201csignatures\u201d or \u201cfingerprints\u201d that are characteristic of individual malware files. When the provider of the anti-virus software identifies a new malware threat, the threat is analysed and a unique signature is generated. The malware is then classed as \u201cknown\u201d and its signature can be distributed to end users as updates to their local anti-virus application databases, typically by distribution over the Internet.","Anti-virus applications may also make use of a database containing signatures of trusted files. These trusted files are those files published or authored by trusted sources. For example, those files that make up a piece of software distributed by a reputable software provider could be considered to be trustworthy such that, provided such files have not been modified since their publication\/release, these files need not be scanned for malware. Only the suspected files need to be scanned.","Signature scanning is only one of the \u201cweapons\u201d available to providers of anti-virus applications. For example, another approach, commonly used in parallel with signature scanning, is to use heuristics (that is rules) that describe suspicious behaviour, indicative of malware. This is particularly relevant to detect a \u201cZero-day\u201d exploit, which has not yet been identified by the anti-virus providers and for which no virus signature has been generated and distributed. Heuristics can be based on behaviours such as Application Programming Interface (API) calls, attempts to send data over the Internet, etc. Typically, heuristics may be combined, e.g. if target has feature 1 and feature 2 then it is malicious, or thresholds set, e.g. if target has more than 10 features it is malicious, in order to reduce the risk of false alarms.","A particular problem is the ability of malware to hijack trusted applications such as Microsoft\u2122 (MS) Office Suite, Adobe Acrobat Reader\/Writer\u2122, and web browsers. One of the ways to achieve this is the so-called \u201cbuffer overflow attack\u201d. The buffer overflow attack is an attack in which malware causes an otherwise trusted application to write information into a buffer which exceeds the actual size of the buffer causing a buffer overflow. This may cause the programme to crash and, when the programme restarts, the attacker's code is executed instead of the program's valid process code. When executed, the attacker's code might, for example, open a communication channel to a malicious website from which further malware is downloaded and executed.","Of course, once a particular piece of malware that hijacks trusted programmes has been identified by the anti-virus provider, a signature may be generated and distributed to client devices. However, this may not always be effective, e.g. in the case of so-called \u201cpolymorphic\u201d viruses which are able to mutate whilst maintaining the basic malware algorithm intact. Heuristic approaches remain significant for detecting such malware, and of course more importantly for detecting zero-day malware. Providers are continuously seeking to improve upon existing heuristic-based detection engines.","It is an object of the present invention to detect potential malware by monitoring the behaviour of trusted applications to detect any unexpected behaviours.","According to a first aspect of the present invention there is provided a method of detecting malware on a computer system. The method comprises monitoring the behaviour of trusted applications running on the computer system. In the event that one or more unexpected behaviours of an application is\/are detected, the method identifies a file or files responsible for the unexpected behaviour(s). It may further tag the file(s) as malicious or suspicious.","Whilst traditional heuristic approaches to malware detection monitor and detect the behaviour of untrusted files, the heuristic approach of the present invention looks at the behaviour of trusted applications. The present invention provides a further defence against malware attacks.","An unexpected behaviour of the trusted application may comprise one of:\n\n","The method may comprise receiving at the computer system, from a central server, a list of trusted application and respective sets of unexpected behaviours. Said step of monitoring may comprise monitoring for the occurrence of the behaviours listed for the application.","The method may comprise terminating the application in the event that an unexpected behaviour of the application is detected.","The method may comprise identifying other files written by the application exhibiting the unexpected behaviour and tagging those files as malicious or suspicious. Said step of tagging the file may comprise locking the file to prevent it from being accessed and\/or copied.","The method may involve tracing any external connections made by the application exhibiting the unexpected behaviour and blocking subsequent attempts to establish connections to the same destination.","According to a second aspect of the present invention there is provided a computer comprising an application monitor for monitoring the behaviour of trusted applications running on the computer. In the event that unexpected behaviour of an application is detected, the application monitor identifies a file or files responsible for the unexpected behaviour. It may tag the file(s) as malicious or suspiciou.","According to a third aspect of the present invention, there is provided a computer program for causing a computer to perform the steps of:\n\n","The program may cause the identified file\/s to be tagged as malicious or suspicious.","According to a fourth aspect of the present invention, there is provided a computer storage medium having stored thereon instructions for causing a computer to:\n\n","The medium may have stored thereon instructions for causing the computed to tag the identified file(s) as malicious or suspicious.","Malware detection is carried out in a client-server based computer architecture. An anti-virus application runs on a multiplicity of client computers whilst a backend system runs on a server typically operated by the provider of the anti-virus application. [Typically the backend system is distributed over a pool or \u201ccloud\u201d of servers in order to provide sufficient capacity.] The server stores all up to date data relating to malware detection and sends this to the client computers. The malware detection data includes both virus signatures and heuristics. The server is continuously updated with new virus signatures and heuristics for suspected files. This distribution architecture is known.","In accordance with an embodiment of the present invention, the server also stores heuristics for monitoring the behaviour of trusted applications such as Microsoft Word, Excel, Power Point, Acrobat Reader\/Writer etc and which are distributed to client computers. The anti-virus (AV) applications running in the client computers use these heuristics for malware detection. In particular, these heuristics identify, for a given trusted application, certain unexpected and therefore suspicious behaviour which, if detected in the trusted application, point to the fact that the trusted application has been hijacked.","A \u201ctrusted application\u201d in this context may be an application that is certified as trusted or \u201cclean\u201d by a provider of security software, e.g. an anti-virus application, either based on some certificate issued by the application provider or following an anti-virus scan of the application. Other definitions of \u201ctrusted\u201d may also be used. For example, a trusted application may be defined as such by a user who has created or installed an application on his or her own computer.","There is illustrated in  a computer architecture which comprises a server  connected to an example client computer  via a network . It will be appreciated that a multiplicity of client computers are also able to connect to the server  via the network . The network  is optionally the Internet or a LAN and the server  may belong to a pool of servers or to a server cloud. The client computer  may be a desktop personal computer (PC), laptop, personal data assistant (PDA) or mobile phone, or any other suitable computer system, and is configured to run a number of applications including a set of trusted applications  including, for example, applications of the Microsoft Office suite, Adobe Acrobat, web browsers, etc. The client computer  is additionally provided with an anti-virus application  and appropriate hardware resources for running the application, which together provide an application update receiver , a signature and heuristic database , an application monitor , and a reporting unit .","The application update receiver  is used to receive signatures and heuristics from the server . The virus signatures and heuristics are downloaded into the signature and heuristic database . The application monitor  accesses the database  during an application monitoring process. The reporting unit  is used for reporting a malware detection to the user and optionally to the AV application provider.","As already mentioned above, the server  stores heuristics for monitoring the behaviour of trusted applications. In particular, the server stores, for each of a set of trusted applications, a list of unexpected behaviours which may include, for example, one or more of the following:\n\n",{"@attributes":{"id":"p-0031","num":"0057"},"figref":"FIG. 2","b":"3"},"S. The process begins with the anti-virus application being launched immediately upon booting of the client computer, or upon demand by the user. The application runs as a background process on the computer, and is substantially \u201cinvisible\u201d to the user except in the event of malware detection.","S. The application monitor of the anti-virus application communicates with the signature and heuristic database to identify certain trusted applications which are at risk of being hijacked by malware. This list is downloaded into the signature and heuristic database from the server, and may be periodically updated.","S. The application monitor continuously checks to see when a trusted application is launched.","S. Once the launch of a trusted application is detected by the application monitor, the anti-virus application requests a list of unexpected behaviours for the launched application from the server.","S and . The application monitor monitors the behaviour of the launched trusted application, looking in particular for the occurrence of behaviours contained in the unexpected behaviours list.","S. In the event that an unexpected behaviour is detected at S, the application monitor immediately terminates the currently running trusted application that is exhibiting the unexpected behaviour. For example, when the application monitor detects that Microsoft Word has started to read a mail history and\/or browsing history, the application monitor terminates the Word application so as to prevent any further malicious activity. Other related processes may also be terminated, e.g. a web download.","S. After terminating the trusted application, the application monitor traces the file(s) responsible for the unexpected behaviour and tags them as malicious. For example, when the application monitor recognises that Microsoft Word has been hijacked, the application monitor traces the .doc file responsible and tags it as malicious. It may also be desirable to similarly tag all files created and handled by the hijacked application. Tagging of a file may comprise adding the file identity and\/or location to a list of suspected malware or corrupted files. Tagging of a file may comprise locking the file to prevent it from being opened, copied or transferred. The file(s) may also be deleted and or an attempt to repair it\/them made. The application monitor may identify other related suspicious activities. For example, if a hijacked application has connected to an unknown server, the corresponding IP address may be identified (and subsequently blocked at a firewall).","S. The application monitor takes a snapshot of the memory associated with the exploited application.","S. The application monitor reports to the user that the application has been terminated due to detection of a potential malware attack. The application monitor optionally reports to the anti-virus application provider via the Internet, providing details of the attack and identifying the malicious file(s) responsible, other affected files, and any related suspicious activities. The background monitoring processes continue operating in the client computer.","It will be appreciated that the lists of unexpected behaviours of the trusted applications can be stored in a cache memory of the client computer, e.g. in the signature and heuristic database. In this way, the client computer does not have to connect to the server each time a trusted application is launched. Updates of the behaviour lists may be pushed to the client computer (or pulled to it) together with other signature and heuristics updates.","It will be appreciated by the person of skill in the art that various modifications may be made to the above described embodiments without departing from the scope of the present invention. For example, it will be appreciated that, rather than apply a list of unexpected behaviours to detect potential malware, i.e. a black list of behaviours, a list of expected behaviours or white list may be used. In this case, for a given trusted application, occurrence of a behaviour not on the whitelist may be considered \u201cunexpected\u201d, resulting in termination of the application and tagging of the responsible file or files as malicious. Of course, both a black list and a white list may be used together, with other behaviours being considered suspicious rather than malicious. Black lists and white lists of behaviours are typically determined in a test environment operated by the anti-virus application provider, e.g. using clean applications running in a virtual system.","The content processed, viewed or displayed and which is responsible for hijacking a trusted application may be, for example, a document file (word document, PowerPoint or PDF), image file (JPEG), structured content (HTML or XML) or movie file (AVI, MPEG, DVD). A trusted application may be for example Microsoft Office software, PDF viewer, image viewer, web browser, movie player or similar application. Of course, these file and application types are only examples and many other types will be apparent to the skilled person."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0023","num":"0039"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0024","num":"0040"},"figref":["FIG. 2","FIG. 1"]}]},"DETDESC":[{},{}]}
