---
title: Incremental visual comparison of web browser screens
abstract: A method, media, and systems for performing incremental visual comparison of web browser screens are provided. Structured representations of a current state of an event-driven application are accessed, one with respect to a plurality of client-tier environments. Where the current state is not an initial state of the event-driven application, structured representations of a prior state of the event-driven application are accessed, with respect to each client-tier environment. A set of one or more pairwise equivalences between the current state and the prior state of the event-driven application are determined with respect to each client-tier environment. A set of one or more matched portions between the first and second sets of pairwise equivalences is determined. Finally, one or more differences in a first end-user experience in the first client-tier environment are determined with respect to a second end-user experience in the second client-tier environment.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08381094&OS=08381094&RS=08381094
owner: Fujitsu Limited
number: 08381094
owner_city: Kawasaki-shi
owner_country: JP
publication_date: 20110928
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["RELATED APPLICATIONS","INTRODUCTION","DESCRIPTION OF EXAMPLE EMBODIMENTS"],"p":["This application hereby incorporates by reference in its entirety and for all purposes, U.S. patent application Ser No. 13\/248,030, filed on 29 Sep. 2011, entitled \u201cUsing Machine Learning to Improve Visual Comparison\u201d, U.S. patent application Ser. No. 12\/723,568, filed on 12 Mar. 2010, entitled \u201cDetermining Differences in an Event-Driven Application Accessed in Different Client-Tier Environments\u201d and U.S. patent application Ser. No. 13\/026,899, filed on 14 Feb. 2011, entitled \u201cWeb Service for Automated Cross-Browser. Compatibility Checking of Web Applications.\u201d","The present disclosure relates generally to determining differences in an event-driven application accessed in different client-tier environments.","A web application follows a typical client-server computing model and usually consists of several server and client side components. Server side components get invoked when the web server receives a request (typically, from a remote user through a web browser). As a result of the server side execution, various client side components are dynamically generated and sent back to the web browser in the form of HTML (HyperText Markup Language) pages. These pages, which are rendered by the browser, reference or contain resources such as images, animations, style information (e.g., Cascading Style Sheets (CCS)) and scripts (e.g., JavaScript or VBScript).","A web browser consists of different subsystems that handle various functionality, such as processing the client side components and managing the interactions of these components with system resources (e.g., network, display, file system). In some subsystems of a browser, one of the main components is the layout engine, which is responsible for rendering a web page by parsing the HTML tags in the page and applying to the relevant elements the style information contained in the CSS stylesheets for the page. The browser also maintains a DOM (Document Object Model) representation of the web page in its memory to allow scripts associated with the page to query and modify web page elements. Although there is a standard definition for the DOM format (see http:\/\/www.w3.org\/DOMf), web browsers often deviate from the standard. Moreover, since most web pages have browser-specific code to make them work on different browsers and platforms, the DOM generated by different browsers can be very different. For this reason, simply comparing the DOM information in different web browsers may not be ideal when comparing web pages rendered in such browsers.","A basic technique for comparing two images is to compare their histograms, where an image histogram represents the distribution of the value of a particular feature in the image. In particular, a color histogram of an image represents the distribution of colors in that image, that is, the number of pixels in the image whose color belongs in each of a fixed list of color ranges (bins). Obviously, if two images are the same, their color distributions will also match. Although the converse is not true, and two different images can have the same histogram, this issue is again not particularly relevant in our problem domain.","Basic histogram-matching techniques find the difference between corresponding bins across two images, which can result in false positives in the case of small shifts. The use of the Earth Movers' Distance (EMD) can alleviate this issue. EMD is a measure of the distance between two distributions and, intuitively, consists of the minimum amount of \u201cwork\u201d required to make the two histograms identical by moving around the quantities in the different bins. Because it can ignore small changes in an image, EMD is widely used in computer vision. For the same reason, it is a suitable approach for the problem of comparing the graphical rendering across web browsers, where we want to be able to account for negligible variations while catching larger changes.","Event-driven applications typically may be accessed in different client-tier environments. However, in many cases, a first client-tier environment may provide a different end-user experience of the event-driven application than a second client-tier environment. These types of issues are far from rare because developers tend to use mostly one browser during development and then port the code to other browsers. Even in the case where multiple browsers are considered from the beginning, it is difficult to test for all possible browsers and versions. Moreover, such testing is performed in a mostly manual manner, and is thus extremely time consuming (and often neglected). In fact, cross-browser issues are notoriously considered to be a major problem by most web application developers.","Layout issues are very common in web applications and result in differences in rendering the web page across browsers that are visible to the user. These issues can be classified as differences in element position, size, visibility, or appearance. Differences in positions and size are self explanatory. Differences in visibility consist of an element not being visible in one or more browsers. Finally; we define as differences in appearance when the an element's style or content is different across browsers.","Functionality issues involve the functionality of a web application and are often due to differences in the way the script elements within a web page are executed by different browsers. Functionality issues typically limit the ability of a user to access specific web page elements, such as widgets. Although the users would identify the problem when they try to exercise the affected elements, these issues are sometimes more difficult to identify because they may not have any visible effect (e.g., a button may be displayed correctly even if it does not work).","Non-Compliant Browsers: Although the client side technologies have associated standards, they continue to evolve. At any point in time, there are thus features that are in the specification but are either not implemented or not implemented correctly in some browsers. These problematic features are often known, and there are web sites (e.g., http:\/\/quirksmode.org) that maintain a list of such features to help web developers be aware of them and provide suitable workarounds in their code. The check performed at line  by the script.js script in  is a typical example of one such workaround.","Extra Features in Browsers: Many browsers implement extra features that are not a part of the standard to provide more flexibility to developers. While web developers try to avoid using these features as much as possible, they do use them for convenience. For example, Internet Explorer supports conditional comments\u2014comments that allow the commented out code to conditionally run in Internet Explorer while being","In order to ensure a high-quality user experience, cross-browser testing and regression testing is typically undertaken. However, the conventional manner of performing such testing, which involves a high number of visual comparisons, may be not only time-consuming, but also error-prone.","Embodiments disclosed herein provide methods for reducing the number of visual comparisons required when performing cross-browser testing and regression testing of event-driven applications. In some embodiments, for each client-tier environment, a behavioral model of an event-driven application is extracted as a state graph; a structured representation (i.e., DOM tree) of the screen for each state\/node for a given client-tier environment is compared against a structured representation of a previously-compared state\/node in order to discern which portions changed and which did not. Unchanged portions are removed from the set of nodes for which subsequent visual differencing between client-tier environments is to be performed, thereby reducing the number of duplicative and costly visual comparisons performed.","System Overview",{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 1","b":["10","30","10","14","26","30","38","46"]},"A user  may interact with a client  to access one or more event-driven applications . As an example and not by way of limitation, a user  may include a person, a program, a device, an automation, any other suitable entity, or a combination of two or more of these.","A client  may send and receive signals to and from one or more servers  in order to allow a user  to access one or more event-driven applications . As an example and not by way of limitation, a client  may be an embedded computer system, a system-on-chip (SOC), a single-board computer system (SBC) (such as, for example, a computer-on-module (COM) or system-on-module (SOM)), a desktop computer system, a laptop or notebook computer system, an interactive kiosk, a mainframe, a mesh of computer systems, a mobile telephone, a personal digital assistant (PDA), a server, or a combination of two or more of these. A client  may send and receive any suitable type of signals for accessing an event-driven application . For example and not by way of limitation, a client  may send and receive hypertext transfer protocol (HTTP) signals, file transfer protocol (FTP) signals, or any other suitable signals.","A client  may further include an I\/O interface (not shown) that enables a user  to interact with a client . As an example and not by way of limitation, an I\/O device may include a keyboard, keypad, microphone, monitor, mouse, printer, scanner, speaker, still camera, stylus, tablet, touchscreen, trackball, video camera, another suitable I\/O device, or a combination of two or more of these. An I\/O interface of a client  may provide a user  with a viewable display  of an event-driven application . As an example and not by way of limitation, an I\/O device may be a monitor that provides a viewable display  to a user  by displaying an event-driven application  on the monitor. An I\/O interface of a client  may further allow a user  to interact with an event-driven application  by allowing a user  to perform one or more events . An event  may include any suitable type of user-initiated event. As an example and not by way of limitation, an event  may include clicking a mouse, moving a mouse, pressing one or more keys on a keypad, touching a touchscreen, moving a trackball, speaking into a microphone, any other event that may be initiated by a user , or any combination of two or more of these.","A client  may further include one or more client-tier environments (not shown). A client-tier environment of a client  may allow a user  to access one or more event-driven applications . As an example and not by way of limitation, a client-tier environment may include an operating system (OS) installed on a client , a web browser installed on a client , one or more settings of a client  (e.g., such as the screen resolution of a monitor of a client ), one or more variations in a web browser installed on a client  (e.g., the version and configuration of the web browser, including one or more web browser plug-ins and one or more web browser settings), or any combination of two or more of these.","An OS installed on a client  may run one or more web browsers installed on a client . As an example and not by way of limitation, the OS may include a Windows 95\/98\/NT\/XP\/Vista\/Mobile OS, an OS-X\u00ae OS, a UNIX\u00ae OS, a LINUX OS, or any other suitable OS. The web browser installed on a client  may allow a user  to access event-driven applications . For example and not by way of limitation, the web browser may include Microsoft\u00ae Internet Explorer, Mozilla\u00ae Firefox, Google\u00ae Chrome, Opera\u00ae, or any other suitable web browser. In particular embodiments, the web browser may initiate the transmittal of one or more server request signals  from a client  to one or more servers  over a network . A server request signal  may be based on one or more events  from a user  or web flow from an event-driven application . As an example and not by way of limitation, a user  may enter an address for an event-driven application  (e.g., such as a uniform resource locator (URL) or a uniform resource indicator (URI)) into an address box of the web browser, and the web browser may send a server request signal  to a server  to request content from an event-driven application . In particular embodiments, the server  may respond to the server request signal  by transmitting a server response signal  including content corresponding to an event-driven application  to the web browser in a client . After receiving the content, the web browser may render the content into a viewable form so that it may be displayed to a user  through the I\/O interface of a client .","An event-driven application  may provide one more media objects for a user  to interact with. As an example and not by way of limitation, an event-driven application  may include a web application, a web 2.0 application, an AJAX-based web application, or any other suitable application that provides media objects. In particular embodiments, an event-driven application  may be run on a server  and interacted with by a user  through a browser on a client . For example and not by way of limitation, content for an event-driven application  may be sent to the web browser in a programming language, and the web browser may render the programming language viewable on a display so that a user  may interact with the event-driven application . In particular embodiments, an event-driven application may include one or more contents that may be executed by the web browser.","The media objects provided by an event-driven application  may be changed (e.g., such as by adding, removing, or modifying the media objects) by one or more events  or web flow from the event-driven application . As an example and not by way of limitation, a user  may enter data using a keyboard, causing the event-driven application  to change the media objects provided to the user . In particular embodiments, when an event-driven application  changes the media objects, the altered media objects may be provided to a user  as a new a screen (or state). An event-driven application  may include any suitable programming language or combination of programming languages. In particular embodiments, an event-driven application  may include source code or object code. In particular embodiments, an event-driven application  may include a higher-level programming language, such as, for example, C, Perl, or a suitable extension thereof. In particular embodiments, an event-driven application  may include a lower-level programming language, such as assembly language (or machine code). In particular embodiments, an event-driven application  may include JAVA. In particular embodiments, an event-driven application  may include Hyper Text Markup Language (HTML), Extensible Markup Language (XML), Javascript (JS), Java Server Pages (JSP), Hypertext Preprocessor (PHP), or other suitable markup language.","A network  connects one or more clients  to one or more servers , transporting one or more signals to and from the one or more clients  and the one or more servers . A network  may refer to any interconnecting system capable of transmitting audio, video, signals, data, messages, or any combination of the preceding. A network  may comprise all or a portion of a public switched telephone network (PSTN), a public or private data network, a local area network (LAN), a metropolitan area network (MAN), a wide area network (WAN), a local, regional, or global communication or computer network such as the Internet, a wireline or wireless network, an enterprise intranet, other suitable communication link, or any combination of the preceding. A network  may transport any suitable signal for accessing an event-driven application  on one or more servers . For example and not by way of limitation, a network  may transport HTTP signals, FTP signals, or any other suitable signals.","A server  may store one or more event-driven applications , and may further send and receive signals to and from one or more clients  in order to allow a user  to access one or more event-driven applications  stored in the server . As example and not by way of limitation, a server  may be an embedded computer system, a system-on-chip (SOC), a single-board computer system (SBC) (such as, for example, a computer-on-module (COM) or system-on-module (SOM)), a desktop computer system, a laptop or notebook computer system, an interactive kiosk, a mainframe, a mesh of computer systems, a mobile telephone, a personal digital assistant (PDA), a server, or a combination of two or more of these. In particular embodiments, a server  may receive one or more server request signals  from a web browser installed on a client . In particular embodiments, a server  may respond to a server request signal  by transmitting a server response signal  that includes content corresponding to an event-driven application  to a web browser in a client . A server  may send and receive any suitable signals in order to allow a client  to access an event-driven application . For example and not by way of limitation, a server  may send and receive HTTP signals, FTP signals, or any other suitable signals.","In particular embodiments, an event-driven application  may be accessed in different client-tier environments. As example and not by way of limitation, an event-driven application  may be accessed in a first client-tier environment that includes a Microsoft Internet Explorer web browser, and the same event-driven application  may also be accessed in a second client-tier environment that includes a Mozilla Firefox web browser. In particular embodiments, although the event-driven application  may be accessed in both client-tier environments, an end-user experience of the event-driven application  may be different on each client-tier environment. In particular embodiments, such differences may be caused by an OS installed on a client , a browser installed on a client , any other numerous differences in the client-tier environments, or any combination of two or more of these.","Unfortunately, these different end-user experiences may cause problems because an event-driven application  may modify the content provided based on one or more events  that occur. As an example and not by way of limitation, an event-driven application  may modify its content based on a user scrolling over certain content in the event-driven application . However, if the content is displayed differently in certain client-tier environments (or not displayed at all) an event  may never occur, and the content may not be modified\u2014causing further differences in the end-user experience As such, even minor differences in an end-user experience may turn into much bigger differences.",{"@attributes":{"id":"p-0041","num":"0040"},"figref":["FIG. 2","FIGS. 12","FIG. 3"],"b":["204","212","216","216","216","12","216","2","2"],"i":["a ","b "]},"In some embodiments, for each matching pair of states, a structured representation (e.g., DOM tree)  of the state of the event-driven application for the corresponding client-tier environment is generated. If the identified states (S, S\u2032) are not the initial states, then for each matching state, structured representations of a previously-compared matching pair of prior states (S, S\u2032) are retrieved. The set of nodes  of the structured representations in S, S\u2032 that have not changed since S, S\u2032 are identified\u2014these nodes are pruned  from the following visual differencing steps, thereby increasing efficiency and reducing the number of costly visual comparisons required.","Visual differencing  is then performed upon the remaining nodes in S and S\u2032 to identify any meaningful differences between the behavior of the event-driven application in each client-tier environment. Such meaningful differences may then be identified as acceptable differences between the client-tier environments or as errors.",{"@attributes":{"id":"p-0044","num":"0043"},"figref":"FIG. 3","b":["200","216","204","216","204","212","208","216"]},"An event-driven application  of  may be similar to an event-driven application  of . As such, an event-driven application  may provide one or more media objects for a user to interact with.","A crawler  may dynamically crawl an event-driven application . In particular embodiments, the dynamic crawl of a crawler may allow a crawler  to dynamically analyze an event-driven application  in order to generate a behavioral model . As example and not by way of limitation, a crawler  may include Crawljax or any other suitable crawler. In particular embodiments, a crawler  may exercise code on a client (e.g., such as client  of ) in order to detect and execute one or more doorways (e.g., clickables) of an event-driven application . As such, in particular embodiments, a crawler  may dynamically analyze one or more screens of an event-driven application  that are rendered by the web browser on a client. Furthermore, a crawler  may analyze how the one or more executed doorways affect the one or more rendered screens of an event-driven application . In particular embodiments, this may involve initiating (or firing) one or more events, such as events  of  (e.g., clicking on a mouse, typing on a keyboard), in order to analyze how such events affect the dynamic DOM tree in a browser before and after the event is replicated. In particular embodiments, by analyzing and storing the effects that occur before and after each of the replicated events, a crawler  may incrementally build a behavioral model  for an event-driven application .","A client-tier environment  may allow one or more event-driven applications  to be accessed at a client. In particular embodiments, a client-tier environment may be similar to a client-tier environment of . As an example and not by way of limitation, a client-tier environment  may include an operating system (OS) installed on a client, a web browser installed on a client, one or more settings of a client (e.g., such as the screen resolution of a monitor of a client), one or more variations in the web browser installed on a client (e.g., the version and configuration of the web browser, including one or more web browser plug-ins and one or more web browser settings), or any combination of two or more of these.","According to the illustrated embodiment, system  includes three client-tier environments . In particular embodiments, each of the client-tier environments  may be different. For example and not by way of limitation, a client-tier environment may include a Windows\u00ae Vista OS and a Google\u00ae Chrome web browser; a client-tier environment may include a Windows\u00ae XP OS, a Microsoft\u00ae Internet Explorer web browser, and a particular screen resolution; and a client-tier environment may include a UNIX\u00ae OS, a Mozilla Firefox web browser, and one or more plug-ins for the web browser. Although system  illustrates three client-tier environments , system  may include more than three client-tier environments  or less than three client-tier environments . As an example and not by way of limitation, system  may include two or more client-tier environments .","According to the illustrated embodiment, a crawler  may dynamically crawl an event-driven application  in each of the client-tier environments  in order to analyze the event-driven application . Accordingly, a crawler  may generate a behavioral model  for each client-tier environment . In particular embodiments, the crawling conducted by a crawler  may be performed in an identical fashion for each client-tier environment . As an example and not by way of limitation, a crawler  may initiate the same events (and do so in the same order) while crawling the event-driven application  on each client-tier environment . As such, the only differences in the behavioral models  (if there are any at all) may be caused by the different client-tier environments . In particular embodiments, the crawling conducted by a crawler  may be automatic. As an example and not by way of limitation, a crawler  may be initiated for a particular event-driven application  in a particular client-tier environment , and the crawler  may perform the entire crawl (including the analysis and behavioral model  generation) for that particular event-driven application  in the particular client-tier environment  without any further prompting.","A behavioral model  may be generated based on the analysis conducted by a crawler  on an event-driven application . According to the illustrated embodiment, system  includes three behavioral models \u2014one behavioral model  for each client-tier environment .",{"@attributes":{"id":"p-0051","num":"0050"},"figref":["FIG. 4","FIG. 4","FIG. 3"],"b":["300","300","216"]},"In particular embodiments, a behavioral model  may be generated by dynamically crawling an event-driven application in a client-tier environment, as is discussed with respect to . For example, a behavioral model  may be generated by a crawler, such as a crawler  of .","In particular embodiments, a behavioral model  may be a finite state machine (FSM) with partial transition functions. As an example and not by way of limitation, a behavioral model  may include each of the states of the event-driven application, and each of the transitions that caused each of the states. In particular embodiments, a state of a behavioral model  may refer to a screen observed by a user when the event-driven application is accessed in a particular client-tier environment. In particular embodiments, a transition may refer to an event (e.g., clicking a mouse, moving a mouse, pressing one or more keys on a keypad) that caused the observed screen (or state) to change. A behavioral model  may include a state graph  and a set of one more state\/screen models  for one more states of the state graph . In the example shown in , state graph  includes three nodes , , and (S, S, and S), each of which correspond to a state\/screen model . Nodes , , and are connected within state graph  via edges .","A state graph  may include a graphical representation of the finite-state machine with the states represented as unnamed vertices. In particular embodiments, a state graph  captures the set of traces (e.g., alternating sequences of events and screen transitions caused by the events) without reference to the details of each state. In particular embodiments, a state graph  may be a labeled, directed graph, with a special designed start vertex. It may be denoted by a 5-tuple, G (V, E, o, \u03a3, L), where V is the set of vertices, E is the set of (directed) edges, o is the special designated start vertex, E is an alphabet of labels, and L:E\u2192\u03a3 is a labeling function that assigns a label from \u03a3 to each edge. According to the illustrated embodiment, each node  in a state graph  of a behavioral model  may represent a state of a screen of the event-driven application. Furthermore, each edge  in a state graph  of a behavioral model  may represent an event (e.g., such as a user-initiated interaction with an event-driven application) causing a transition from one of the screens to another. In particular embodiments, each edge  of a state graph  of a behavioral model  may be labeled (not shown) with the event that caused the transition between states. In the example shown in , node of state graph  corresponds to state\/screen model \u2014both represent aspects of state S.","A state\/screen model  may include a programmatic representation of each state (screen). In particular embodiments, state\/screen model  captures details of each screen without any knowledge of transitions leading up to or out of the screen. In particular embodiments, state\/screen model  may include a rooted, directed, labeled tree . This tree  may be denoted by a 5-tuple, T(Q, D, r, \u039b, \u03b4), where Q is the set of vertices, D is the set of directed edges, r\u03b5Q is the root vertex, \u039b is a finite set of labels and \u03b4:Q\u2192\u039b is a labeling function that assigns a label from \u039b to each vertex in Q. In particular embodiments, the tree T  may be an abstracted version of the DOM tree of a given state (screen) displayed on a web browser. Further, the screen model  may include a screen-shot image representation , of the state as viewed in a particular web browser or client-tier environment. In addition, the screen model  may contain, for each element E of the tree T , a list  of geometric and layout properties pertaining to the representation of element E within the image . These properties may include the Cartesian co-ordinates of the segment of  within which element E is represented, whether or not element E is currently visible in  (visibility attribute), whether or not element E is clickable in the screen represented by  (clickability attribute) and what layer of the image , element E is represented in (the z-index attribute). Although behavioral model  illustrates a single state\/screen model , a behavioral model  may include any suitable number of state\/screen models . As an example and not by way of limitation, a behavioral model  may include a state\/screen model  for every state (screen) of a state graph  of a behavioral model .",{"@attributes":{"id":"p-0056","num":"0055"},"figref":"FIG. 5","b":["400","400"]},"In step , behavioral models M and M\u2032 are accessed. Behavioral model M represents the event-driven application in a first client-tier environment, while behavioral model M\u2032 represents the event-driven application in a second client-tier environment. In step , state graph G is extracted from behavioral model M, and state graph G\u2032 is extracted from behavioral model M\u2032. In some embodiments, behavioral models M and M\u2032 and\/or state graphs G and G\u2032 represent portions of functionality provided by the event-driven application.","In step , a vertex vin G is identified, wherein vhas a matching vertex v\u2032 in G\u2032. Vertex vrepresents state S of the event-driven application in the first client-tier environment; vertex v\u2032 represents state S\u2032 of the event-driven application in the second client-tier environment. In particular embodiments, vertex vand vertex v\u2032 may have been identified as matching nodes during a trace-level comparison performed upon behavioral models M and M\u2032.","In step , a structured representation (D) of state S of the event-driven application in the first client-tier environment corresponds to the state (e.g., screen) represented by vertex v. Structured representation D\u2032 of state S\u2032 of the event-driven application in the second client-tier environment corresponds to the state (e.g., screen) represented by vertex v\u2032. In some embodiments, structured representations Dand D\u2032 may each comprise a DOM tree. In some embodiments, Dmay be retrieved from behavioral model M, and D\u2032 may be retrieved from behavioral model M\u2032. In some embodiments, a structured representation Dof state S of the event-driven application may comprise a partial representation of state S.","In step , if S is not the initial state of state graph G, then in step , previously-compared states S and S\u2032 are retrieved for both state graphs G and G\u2032. Structured representation Dof state S of the event-driven application in the first client-tier environment corresponds to the state (e.g., screen) represented by vertex v; structured representation D\u2032 of state S\u2032 of the event-driven application in the second client-tier environment corresponds to the state (e.g., screen) represented by vertex v\u2032. In some embodiments, Swas previously compared to S\u2032 and found to be pairwise equivalent\u2014by leveraging previously\u2014compared states S and S\u2032, unchanged portions of the DOMs D can be eliminated from the subsequent visual comparison operations. States S and S should share a substantial portion of their content, so that this similarity can be leveraged. There can be several methods of choosing states S and S\u2032, with varying trade-offs of computation cost versus the optimality of the choice (the optimal states S and S\u2032 would be those that have maximal overlap in terms of content, with S and S\u2032respectively). A simple and efficient heuristic to of choosing S and S\u2032 is to choose the states from which S and S\u2032 were explored during crawling. These are necessarily counterparts of each other and would have been compared before comparing S and S\u2032 and would typically have substantial (though not necessarily maximal) overlap with the content of S and S\u2032.","In step , a set of one or more pairwise equivalences between structured representations Dand Dis determined with respect to the first client-tier environment and projected onto the DOM Dto compute set \u0394:\u0394=Proj(D, D\u2248D). Proj(D, R) is the set of DOM nodes of DOM Dthat appear in some pair of the relation R, where R is a one-to-one symmetric relation between two DOMs Dand Dor portions thereof, i.e., RD\u00d7D.","In some embodiments, the relation D\u2248Drepresents a one-to-one, symmetric relation between Dand D, where a pair of DOM nodes (x,y)\u03b5D\u2248Dif and only if x\u03b5D, y\u03b5D, and MatchIndex(x,y)=1.","The value of MatchIndex(x,y) may vary between 0 and 1. MatchIndex represents a factor-based comparison of two DOM nodes. MatchIndex(x,y) is described in further detail in .","In step , a set of one or more pairwise equivalences between structured representations D\u2032 and D\u2032 is determined with respect to the second client-tier environment and projected onto the DOM D\u2032 to compute set \u0394\u2032: \u0394\u2032=Proj(D\u2032, D\u2032).","With respect to step , if state S is the initial state of the state graph G, then in step , both sets of DOM nodes \u0394 and \u0394\u2032 are determined to be empty sets \u00d8. Since there are no states in state graph G prior to S, there are no pairwise equivalences that can be assessed.","In step , a set M of one or more matched DOM nodes is determined, wherein each matched node in M represents a pairwise equivalence between one or more portions of the nodes in set \u0394 and one or more corresponding portions of the nodes in set \u0394\u2032 and these equivalences are projected onto the DOM Dto compute the set M:M=Proj(D, \u0394\u2248\u0394\u2032).","In step , the largest connected DOM sub-tree C of nodes in M is determined, starting with root of D:C=Cont(M). Given a DOM D corresponding to a web browser screen and a subset M of D (i.e., MD in the set interpretation of D and M), Cont(M) computes the largest connected sub-tree of D (under the structural interpretation of D) that can be formed by the nodes in M, starting from the root node. Note, if the root node of D is not part of M then Cont(M)=\u00d8 (empty tree or null set).","In step , sub-tree S is determined, wherein S=C\u2212(leaf nodes of C). This step computes those nodes of Dfor which screen-level, visual comparison is not deemed necessary, thereby reducing the overall number of costly visual comparisons that must be performed.","In step , the set of nodes in D\u2212S are submitted for visual, screen-level comparison (i.e., visual differencing) with corresponding nodes in D\u2032\u2212S. A screen-level comparison may determine one or more pairwise differences between screen models being compared. In particular embodiments, determining one or more pairwise differences between the behavioral models M and M may include performing a state-level (or screen-level) comparison between corresponding screens T from M and T from M. This correspondence may have been established previously through an graph isomorphism comparison on the state graphs of M and M. In particular embodiments, the screen-level comparison may include retrieving the DOM tree and Javascript state variables for both state\/screen model T and state\/screen model T, and attempting to compare them. In particular embodiments, this comparison may yield some differences between the DOMs of T and T as well as a pairwise matching between other DOM nodes of T and T. Such pairs of matched DOM nodes are then submitted for comparison through visual analysis.","Shown below is one example of an algorithm for performing the visual comparisons:",{"@attributes":{"id":"p-0071","num":"0070"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"char"}},{"@attributes":{"colname":"2","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/* CrossBrowserTest *\/"]},{"entry":[{},"Input : Map, SCfor browsers Br..Br,"]},{"entry":[{},"\u2003Br: reference browser"]},{"entry":[{},"\u2003VN: set of variable nodes in Br"]},{"entry":[{},"Output: Mismatchbetween Br, Br"]},{"entry":["1","begin"]},{"entry":["2","\u2003SC\u2190 grayOutNodes(SC, VN)"]},{"entry":["3","\u2003for i \u2192 1 to n do \/*for all browsers*\/ "]},{"entry":["4","\u2003\u2003Mismatch \u2190 \u2205"]},{"entry":["5","\u2003\u2003VN\u2190 getAllMappedNodes(VN, Map)"]},{"entry":["6","\u2003\u2003SC\u2190 grayOutNode(SC, VN)"]},{"entry":["7","\u2003\u2003foreach node\u2208 Map, \u2209 VNdo \/*Bottom-Up*\/"]},{"entry":["8","\u2003\u2003\u2003node \u2190 getMappedNode(nodes, Map)"]},{"entry":[{},"\u2003\u2003\u2003\/\/ Check for positional shifts"]},{"entry":["9","\u2003\u2003\u2003relDist1 \u2190 relDistToContainer(node)"]},{"entry":["10","\u2003\u2003\u2003relDist2 \u2190 relDistToContainer(node)"]},{"entry":["11","\u2003\u2003\u2003if dif f (relDist1, relDist2) then"]},{"entry":["12","\u2003\u2003\u2003\u2003parent1 = par ent(node)"]},{"entry":["13","\u2003\u2003\u2003\u2003parent2 = parent(node)"]},{"entry":["14","\u2003\u2003\u2003\u2003box1 \u2190 parent1.box"]},{"entry":["15","\u2003\u2003\u2003\u2003box2 \u2190 parent2.box"]},{"entry":["16","\u2003\u2003\u2003\u2003if not VChk(SC, SC,box1,box2) then"]},{"entry":["17","\u2003\u2003\u2003\u2003\u2003insert(Mismatch, parent2,"]},{"entry":["18","\u2003\u2003\u2003\u2003\u2003\u2003\u201ccontent shifted\u201d)"]},{"entry":["19","\u2003\u2003\u2003\u2003end"]},{"entry":["20","\u2003\u2003\u2003end"]},{"entry":["21","\u2003\u2003\u2003box1 E \u2190 node.box"]},{"entry":["22","\u2003\u2003\u2003box2 E \u2190 node.box"]},{"entry":["23","\u2003\u2003\u2003if visibilityDif f (node, node) then"]},{"entry":["24","\u2003\u2003\u2003\u2003insert(Mismatch, node,"]},{"entry":["25","\u2003\u2003\u2003\u2003\u201cvisibility changed\u201d)"]},{"entry":["26","\u2003\u2003\u2003else if size Dif f (node, node) then "]},{"entry":["27","\u2003\u2003\u2003\u2003insert(Mismatch, node, \u201cchanged size\u201d)"]},{"entry":["28","\u2003\u2003\u2003else if not VChk(SC,SC,box1, box2) then"]},{"entry":["29","\u2003\u2003\u2003\u2003insert(Mismatch, node,"]},{"entry":["30","\u2003\u2003\u2003\u2003\u2003\u201cchanged appearance\u201d)"]},{"entry":["31","\u2003\u2003\u2003end"]},{"entry":["32","\u2003\u2003end"]},{"entry":[{},"\u2003\u2003\/\/ Group Issue List"]},{"entry":["33","\u2003\u2003Mismatch\u2190 clusterNodes(Mismatch)"]},{"entry":["34","\u2003end"]},{"entry":["35 ","end"]},{"entry":[{},"\/* VChk -- Visual Check *\/"]},{"entry":[{},"Input : SC, SCfor browsers Br, Br"]},{"entry":[{},"\u2003\u2003Box, Box: Image co-ordinates to compare"]},{"entry":[{},"Output: Matches : Boolean value indicating a match or a mismatch"]},{"entry":["1","begin"]},{"entry":["2","\u2003image\u2190 crop(SC. Box)"]},{"entry":["3","\u2003image\u2190 crop(SC, Box)"]},{"entry":[{},"\u2003\/\/ average colors per 100 pximage area"]},{"entry":["4","\u2003\u03b1 \u2190 (numColors(image) \u00d7 100)\/area(Box)"]},{"entry":[{},"\u2003\/\/ threshold based on color density and size"]},{"entry":["5","\u2003threshold \u2190 chooseThreshold(\u03b1, Box)"]},{"entry":[{},"\u2003\/\/ Earth Movers\u2032 Distance (EMD)"]},{"entry":["6","\u2003emd \u2190 getE M D (image, image)"]},{"entry":["7","\u2003if emd \u2266 threshold then"]},{"entry":["8","\u2003\u2003return true"]},{"entry":["9","\u2003end"]},{"entry":["10","\u2003return false"]},{"entry":["11","end"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},{"@attributes":{"id":"p-0072","num":"0071"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE I"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"THRESHOLD VALUES CHOSEN BY CHOOSETHRESHOLD."}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"105pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"63pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Small CD (<1) ","Large CD (\u22671)"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"63pt","align":"char","char":"."}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Small Image (<10square pixels)","1","0.5"]},{"entry":["Large Image (\u226710square pixels)","2","1"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"CrossBrowserTest is the main function in the algorithm. It takes as input, for each browser Br, its mapping from the reference (Map), its screen capture information (SC), and the set of variable nodes in the reference browser (VN). As a preliminary step, the algorithm \u201cgrays out\u201d the areas corresponding to variable nodes in the screenshots for the reference browser to eliminate possible false positives caused by them (line ). It then processes the data from the different browsers. For each browser, the algorithm first finds the mapped variable nodes in it and grays out the corresponding areas as well (lines -). It then visits the DOM tree nodes from leaves to root (i.e., in a bottom-up fashion). For each DOM node (node), it gets the corresponding node node in the reference browser, according to the mapping (line ). The algorithm checks for positional shifts in the DOM node by comparing the relative distances of both node and nodefrom their DOM containers (lines -). If it finds such a shift, the technique verifies it in the areas of the screenshots that correspond to the DOM containers by invoking procedure VChk, described below (lines -). If the difference is confirmed by VChk, the relevant DOM node is added to set Mismatch, (line ).","Next, the algorithm compares the actual nodes, without considering their containers, for visibility, size, and appearance differences. Visibility and size differences are checked first, so as to limit the number of (more expensive) graphical comparisons. First, the algorithm checks for visibility differences by invoking procedure visibilityDiff and passing node and nodeas parameters (line ). Procedure visibilityDiff, not shown here for space reasons, mainly compares the visibility attributes of node and nodeand returns a value that indicates whether they match. If they do not match, the algorithm adds nodein the Mismatchset and specifies that the difference relates to visibility. If there is no visibility difference, the algorithm checks for size differences by invoking procedure sizeDiff on node and node(line ). Similarly to visibilityDiff, procedure sizeDiff compares the dimensional attributes of the two nodes and returns a value that indicates whether they match. In case of a mismatch, the algorithm records the difference and its reason (line ). If both visibility and position match, the algorithm compares the screenshots' graphical areas corresponding to node and nodeusing again procedure VChk (lines -).","Also in this case, a mismatch is recorded by adding nodeto set Mismatchand specifying that the difference relates to appearance. Finally, the algorithm clusters the information in the Mismatch, set by aggregating differences that occur in neighboring areas on the screen, so that they can be reported together to developers (line ). The clustering is performed in procedure clusterNodes using the visual coordinates of the nodes in the Mismatchset. Other details about clusterNodes are of limited relevance and are not reported for space reasons.","Procedure \u2032VChk performs the image comparison part of our technique. VChk takes as inputs two screen captures and two bounding boxes\u2014set of coordinates of the graphical areas that must be compared. First, the algorithm extracts the relevant parts of the images from the screen captures (lines -). It then compares the extracted images using the EMD metric. As a threshold for EMD, the algorithm uses different values based on size and color density of the images, where the color density (CD) is computed as the average number of colors per 100 square pixels.","In particular embodiments, the method  may be repeated for each pairing of screens from each pairing of behavioral models. As an example and not by way of limitation, if three behavioral models are generated by a crawler for an event-driven application in three different client-tier environments, the method  may be repeated in the context of each pairing of the three behavioral models. As such, each trace-level difference (or incompatibility) and each screen-level difference between each of the behavioral models may be determined and outputted. Furthermore, for each of the behavioral models, one or more pairwise equivalences with respect to one or more other ones of the behavioral models may be determined. In particular embodiments, the outputting of the trace-level differences and the screen-level differences may include sorting, classifying, and\/or filtering the differences before outputting them.",{"@attributes":{"id":"p-0078","num":"0077"},"figref":["FIG. 6","FIG. 6"]},{"@attributes":{"id":"p-0079","num":"0078"},"figref":["FIG. 7","FIG. 7"],"b":["1","2"]},"In some embodiments, for every DOM node, the following properties are collected (where we call DOM element the web page element associated with the DOM node):\n\n","Shown below is one example of an algorithm for MatchIndex (a.k.a. ComputeMatchIndex):",{"@attributes":{"id":"p-0082","num":"0089"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/* ComputeMatchIndex *\/"]},{"entry":[{},"Input : a, b where a \u2208 DOM, b \u2208 DOM"]},{"entry":[{},"Output: \u03c1 (Match Index)"]},{"entry":["1 ","begin"]},{"entry":["2","\u2003\u03b1 \u2190 0.9"]},{"entry":["3","\u2003\u03c1: \u03c1: \u03c1\u2190 0"]},{"entry":["3","\u2003if (a.id \u2260 \u201c\u201d)  \u2009a.id == b.id then"]},{"entry":["5","\u2003\u2003\u03c1 \u2190 1"]},{"entry":["6","\u2003end"]},{"entry":["7","\u2003else if a.tagname == b.tagname then"]},{"entry":["8","\u2003\u2003\u03c1\u2190 (1\u2014 TievenshteinDistance(a.xpath, b.xpath)\/"]},{"entry":[{},"\u2003\u2003\u2003max(length(a.xpath), length(b.xpath)))"]},{"entry":[{},"\u2003\u2003foreach prop in {\u201ccoord\u201d, \u201cclickable\u201d, \u201cvisible\u201d, \u201czindex\u201d,"]},{"entry":[{},"\u2003\u2003\u201chash\u201d} do"]},{"entry":["14)","\u2003\u2003\u2003if a.prop == b.prop then"]},{"entry":["11","\u2003\u2003\u2003\u2003\u03c1\u2190 \u03c1+ 1"]},{"entry":["12","\u2003\u2003\u2003end"]},{"entry":["13","\u2003\u2003end"]},{"entry":["14","\u2003\u2003\u03c1\u2190 \u03c1\/5"]},{"entry":["15","\u2003\u2003\u03c1 \u2190 (\u03c1* \u03b1 + \u03c1* (1 \u2212 \u03b1))"]},{"entry":["16","\u2003end"]},{"entry":["17","\u2003return \u03c1"]},{"entry":["18","end"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"MatchIndex computes the match index for each pair of nodes passed to it as parameters using these node properties. First, the algorithm checks whether (1) the id is defined, and (2) the two nodes have the same id. If so, it identifies the nodes as a perfect match, assigns 1 to the match index \u03c1 (line ), and returns the value. (Because ids are manually assigned by developers and are unique, two nodes with the same id are necessarily corresponding nodes in the two DOM trees.) If the ids do not match or are not defined, the algorithm compares the tagnames of the nodes (line ). Although different nodes can have the same tagname, corresponding nodes cannot have different tagnames. Therefore, if the tagnames are not equal, the default value of \u03c1, zero, is returned. Otherwise, the algorithm computes the matching index using some of the other properties of the nodes. First, the algorithm computes the normalized Levenshtein distance between the xpaths for the two nodes and assigns its ones complement to \u03c1(line ). Then, the algorithm computes the fraction of properties coord, clickable, visible, zindex, and hash that match between the two nodes, and assign the computed value to \u03c1(lines -). Finally, the algorithm computes the matching index by adding \u03c1and \u03c1, suitably weighted (line ). Because both \u03c1and \u03c1are values between zero and one, the value of the resulting matching index, \u03c1, is also between zero and one. The reason why \u03c1is weighted considerably more than \u03c1in the computation of \u03c1 is because two corresponding nodes should have the same, or at least a very similar, xpath. Intuitively, the other properties are only used to break a \u201ctie\u201d between two very likely matches. There may be only very rare cases in which \u03c1plays any role in deciding a match. In other words, in the absence of developer-defined ids for the nodes, the nodes' xpaths are a reliable indication of whether two nodes match.",{"@attributes":{"id":"p-0084","num":"0091"},"figref":["FIG. 8","FIG. 8"]},{"@attributes":{"id":"p-0085","num":"0092"},"figref":["FIG. 9","FIG. 9","FIG. 10","FIG. 9","FIGS. 9 and 10","FIG. 11"],"b":["1","2","2","1","1","2","2","1","1","1","1","2","1","2","1","1010","1","1020","2","1030","2","1040"]},{"@attributes":{"id":"p-0086","num":"0093"},"figref":["FIG. 12","FIG. 12"],"i":["a ","b "]},{"@attributes":{"id":"p-0087","num":"0094"},"figref":"FIG. 13","b":["1200","1200","1200","1200","1200"]},"This disclosure contemplates any suitable number of computer systems . This disclosure contemplates computer system  taking any suitable physical form. As example and not by way of limitation, computer system  may be an embedded computer system, a system-on-chip (SOC), a single-board computer system (SBC) (such as, for example, a computer-on-module (COM) or system-on-module (SOM)), a desktop computer system, a laptop or notebook computer system, an interactive kiosk, a mainframe, a mesh of computer systems, a mobile telephone, a personal digital assistant (PDA), a server, or a combination of two or more of these. Where appropriate, computer system  may include one or more computer systems ; be unitary or distributed; span multiple locations; span multiple machines; or reside in a cloud, which may include one or more cloud components in one or more networks. Where appropriate, one or more computer systems  may perform without substantial spatial or temporal limitation one or more steps of one or more methods described or illustrated herein. As an example and not by way of limitation, one or more computer systems  may perform in real time or in batch mode one or more steps of one or more methods described or illustrated herein. One or more computer systems  may perform at different times or at different locations one or more steps of one or more methods described or illustrated herein, where appropriate.","In particular embodiments, computer system  includes a processor , memory , storage , an input\/output (I\/O) interface , a communication interface , and a bus . Although this disclosure describes and illustrates a particular computer system having a particular number of particular components in a particular arrangement, this disclosure contemplates any suitable computer system having any suitable number of any suitable components in any suitable arrangement.","In particular embodiments, processor  includes hardware for executing instructions, such as those making up a computer program. As an example and not by way of limitation, to execute instructions, processor  may retrieve (or fetch) the instructions from an internal register, an internal cache, memory , or storage ; decode and execute them; and then write one or more results to an internal register, an internal cache, memory , or storage . In particular embodiments, processor  may include one or more internal caches for data, instructions, or addresses. The present disclosure contemplates processor  including any suitable number of any suitable internal caches, where appropriate. As an example and not by way of limitation, processor  may include one or more instruction caches, one or more data caches, and one or more translation lookaside buffers (TLBs). Instructions in the instruction caches may be copies of instructions in memory  or storage , and the instruction caches may speed up retrieval of those instructions by processor . Data in the data caches may be copies of data in memory  or storage  for instructions executing at processor  to operate on; the results of previous instructions executed at processor  for access by subsequent instructions executing at processor  or for writing to memory  or storage ; or other suitable data. The data caches may speed up read or write operations by processor . The TLBs may speed up virtual-address translation for processor . In particular embodiments, processor  may include one or more internal registers for data, instructions, or addresses. The present disclosure contemplates processor  including any suitable number of any suitable internal registers, where appropriate. Where appropriate, processor  may include one or more arithmetic logic units (ALUs); be a multi-core processor; or include one or more processors . Although this disclosure describes and illustrates a particular processor, this disclosure contemplates any suitable processor.","In particular embodiments, memory  includes main memory for storing instructions for processor  to execute or data for processor  to operate on. As an example and not by way of limitation, computer system  may load instructions from storage  or another source (such as, for example, another computer system ) to memory . Processor  may then load the instructions from memory  to an internal register or internal cache. To execute the instructions, processor  may retrieve the instructions from the internal register or internal cache and decode them. During or after execution of the instructions, processor  may write one or more results (which may be intermediate or final results) to the internal register or internal cache. Processor  may then write one or more of those results to memory . In particular embodiments, processor  executes only instructions in one or more internal registers or internal caches or in memory  (as opposed to storage  or elsewhere) and operates only on data in one or more internal registers or internal caches or in memory  (as opposed to storage  or elsewhere). One or more memory buses (which may each include an address bus and a data bus) may couple processor  to memory . Bus  may include one or more memory buses, as described below. In particular embodiments, one or more memory management units (MMUs) reside between processor  and memory  and facilitate accesses to memory  requested by processor . In particular embodiments, memory  includes random access memory (RAM). This RAM may be volatile memory, where appropriate Where appropriate, this RAM may be dynamic RAM (DRAM) or static RAM (SRAM). Moreover, where appropriate, this RAM may be single-ported or multi-ported RAM. The present disclosure contemplates any suitable RAM. Memory  may include one or more memories , where appropriate. Although this disclosure describes and illustrates particular memory, this disclosure contemplates any suitable memory.","In particular embodiments, storage  includes mass storage for data or instructions. As an example and not by way of limitation, storage  may include an HDD, a floppy disk drive, flash memory, an optical disc, a magneto-optical disc, magnetic tape, or a Universal Serial Bus (USB) drive or a combination of two or more of these. Storage  may include removable or non-removable (or fixed) media, where appropriate. Storage  may be internal or external to computer system , where appropriate. In particular embodiments, storage  is non-volatile, solid-state memory. In particular embodiments, storage  includes read-only memory (ROM). Where appropriate, this ROM may be mask-programmed ROM, programmable ROM (PROM), erasable PROM (EPROM), electrically erasable PROM (EEPROM), electrically alterable ROM (EAROM), or flash memory or a combination of two or more of these. This disclosure contemplates mass storage  taking any suitable physical form. Storage  may include one or more storage control units facilitating communication between processor  and storage , where appropriate. Where appropriate, storage  may include one or more storages . Although this disclosure describes and illustrates particular storage, this disclosure contemplates any suitable storage.","In particular embodiments, I\/O interface  includes hardware, software, or both providing one or more interfaces for communication between computer system  and one or more I\/O devices. Computer system  may include one or more of these I\/O devices, where appropriate. One or more of these I\/O devices may enable communication between a person and computer system . As an example and not by way of limitation, an I\/O device may include a keyboard, keypad, microphone, monitor, mouse, printer, scanner, speaker, still camera, stylus, tablet, touchscreen, trackball, video camera, another suitable I\/O device or a combination of two or more of these. An I\/O device may include one or more sensors. This disclosure contemplates any suitable I\/O devices and any suitable I\/O interfaces  for them. Where appropriate, I\/O interface  may include one or more device or software drivers enabling processor  to drive one or more of these I\/O devices. I\/O interface  may include one or more I\/O interfaces , where appropriate. Although this disclosure describes and illustrates a particular I\/O interface, this disclosure contemplates any suitable I\/O interface.","In particular embodiments, communication interface  includes hardware, software, or both providing one or more interfaces for communication (such as, for example, packet-based communication) between computer system  and one or more other computer systems  or one or more networks. As an example and not by way of limitation, communication interface  may include a network interface controller (NIC) or network adapter for communicating with an Ethernet or other wire-based network or a wireless NIC (WNIC) or wireless adapter for communicating with a wireless network, such as a WI-FI network. This disclosure contemplates any suitable network and any suitable communication interface  for it. As an example and not by way of limitation, computer system  may communicate with an ad hoc network, a personal area network (PAN), a local area network (LAN), a wide area network (WAN), a metropolitan area network (MAN), or one or more portions of the Internet or a combination of two or more of these. One or more portions of one or more of these networks may be wired or wireless. As an example, computer system  may communicate with a wireless PAN (WPAN) (such as, for example, a BLUETOOTH WPAN), a WI-FI network, a WI-MAX network, a cellular telephone network (such as, for example, a Global System for Mobile Communications (GSM) network), or other suitable wireless network or a combination of two or more of these. Computer system  may include any suitable communication interface  for any of these networks, where appropriate. Communication interface  may include one or more communication interfaces , where appropriate. Although this disclosure describes and illustrates a particular communication interface, this disclosure contemplates any suitable communication interface.","In particular embodiments, bus  includes hardware, software, or both coupling components of computer system  to each other. As an example and not by way of limitation, bus  may include an Accelerated Graphics Port (AGP) or other graphics bus, an Enhanced industry Standard Architecture (EISA) bus, a front-side bus (FSB), a HYPERTRANSPORT (HT) interconnect, an Industry Standard Architecture (ISA) bus, an INFINIBAND interconnect, a low-pin-count (LPC) bus, a memory bus, a Micro Channel Architecture (MCA) bus, a Peripheral. Component Interconnect (PCI) bus, a PCI-Express (PCI-X) bus, a serial advanced technology attachment (SATA) bus, a Video Electronics Standards Association local (VLB) bus, or another suitable bus or a combination of two or more of these. Bus  may include one or more buses , where appropriate. Although this disclosure describes and illustrates a particular bus, this disclosure contemplates any suitable bus or interconnect.","Herein, reference to a computer-readable storage medium encompasses one or more tangible computer-readable storage media possessing structure. As an example and not by way of limitation, a computer-readable storage medium may include a semiconductor-based or other integrated circuit (IC) (such, as for example, a field-programmable gate array (FPGA) or an application-specific IC (ASIC)), a hard disk, an HDD, a hybrid hard drive (HHD), an optical disc, an optical disc drive (ODD), a magneto-optical disc, a magneto-optical drive, a floppy disk, a floppy disk drive (FDD), magnetic tape, a holographic storage medium, a solid-state drive (SSD), a RAM-drive, a SECURE DIGITAL card, a SECURE DIGITAL drive, or another suitable computer-readable storage medium or a combination of two or more of these, where appropriate. Herein, reference to a computer-readable storage medium excludes any medium that is not eligible for patent protection under 35 U.S.C.\u00a7101. Herein, reference to a computer-readable storage medium excludes transitory forms of signal transmission (such as a propagating electrical or electromagnetic signal per se) to the extent that they are not eligible for patent protection under 35 U.S.C.\u00a7101.","This disclosure contemplates one or more computer-readable storage media implementing any suitable storage. In particular embodiments, a computer-readable storage medium implements one or more portions of processor  (such as, for example, one or more internal registers or caches), one or more portions of memory , one or more portions of storage , or a combination of these, where appropriate. In particular embodiments, a computer-readable storage medium implements RAM or ROM. In particular embodiments, a computer-readable storage medium implements volatile or persistent memory. In particular embodiments, one or more computer-readable storage media embody software. Herein, reference to software may encompass one or more applications, bytecode, one or more computer programs, one or more executables, one or more instructions, logic, machine code, one or more scripts, or source code, and vice versa, where appropriate. In particular embodiments, software includes one or more application programming interfaces (APIs). This disclosure contemplates any suitable software written or otherwise expressed in any suitable programming language or combination of programming languages. In particular embodiments, software is expressed as source code or object code. In particular embodiments, software is expressed in a higher-level programming language, such as, for example, C, Perl, or a suitable extension thereof. In particular embodiments, software is expressed in a lower-level programming language, such as assembly language (or machine code). In particular embodiments, software is expressed in JAVA. In particular embodiments, software is expressed in Hyper Text Markup Language (HTML), Extensible Markup Language (XML), Javascript (JS), Java Server Pages (JSP), Hypertext Preprocessor (PHP), or other suitable markup language.","The present disclosure encompasses all changes, substitutions, variations, alterations, and modifications to the example embodiments herein that a person having ordinary skill in the art would comprehend. Similarly, where appropriate, the appended claims encompass all changes, substitutions, variations, alterations, and modifications to the example embodiments herein that a person having ordinary skill in the art would comprehend."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 9","b":["1","2"]},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 10","b":["1","2"]},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 12","i":"a "},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 12","i":"b "},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 13"}]},"DETDESC":[{},{}]}
