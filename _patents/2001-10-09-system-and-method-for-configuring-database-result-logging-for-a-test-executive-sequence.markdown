---
title: System and method for configuring database result logging for a test executive sequence
abstract: A system and method for logging results for a test executive sequence to a database. The test executive software may be operable to receive user input to a graphical user interface (GUI) to specify desired database result logging criteria. In various embodiments, any of various result logging criteria may be specifiable. For example, the user input may specify a mapping of the results for the test executive sequence to the database tables. The user input may also specify criteria for limiting the amount of data logged to the database, e.g., by filtering the results that are logged in various ways. The test executive software may then log at least a portion of the execution results for the test executive sequence to a database, according to the specified result logging criteria.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07146572&OS=07146572&RS=07146572
owner: National Instruments Corporation
number: 07146572
owner_city: Austin
owner_country: US
publication_date: 20011009
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","DESCRIPTION OF THE RELATED ART","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS"],"p":["The present invention relates to the field of test executive software for organizing and executing test executive sequences. In particular, the invention relates to a system and method for configuring database result logging for a test executive sequence using a graphical user interface (GUI).","Test executive software is specialized software that allows a user to organize and execute sequences of reusable test modules to test units under test (UUTs). For example, the test modules may interact with one or more hardware instruments to test the UUT(s). The test modules often have a standard interface and typically can be created in a variety of programming environments. The test executive software operates as a control center for the automated test system. More specifically, the test executive software allows the user to create, configure, and\/or control test sequence execution for various test applications, such as production and manufacturing test applications. Text executive software typically includes various features, such as test sequencing based on pass\/fail results, logging of test results, and report generation, among others.","Test executives include various general concepts. The following comprises a glossary of test executive nomenclature, as used herein:","Code Module\u2014A program module, such as a Windows Dynamic Link Library (.dll), LabVIEW VI (.vi), ActiveX component, or other type of program module or component, that implements one or more functions that perform a specific test or other action.","Test Module\u2014A code module that performs a test of a UUT.","Step\u2014An action that the user can include within a sequence of other actions. A step may call a test module to perform a specific test.","Step Module\u2014The code module that a step calls.","Sequence\u2014A series of steps that the user specifies for execution in a particular order. Whether and when a step is executed can depend on the results of previous steps.","Sequence File\u2014A file that contains the definition of one or more sequences.","Sequence Editor\u2014A program that provides a graphical user interface for creating, editing, and debugging sequences.","Run-time Operator Interface\u2014A program that provides a graphical user interface for executing sequences on a production station. A sequence editor and run-time operator interface can be separate application programs or different aspects of the same program.","Test Executive Engine\u2014A module or set of modules that provide an API for creating, editing, executing, and debugging sequences. A sequence editor or run-time execution operator interface uses the services of a test executive engine.","Application Development Environment (ADE)\u2014A programming environment such as LabVIEW, LabWindows\/CVI, Microsoft Visual C++, Microsoft Visual Basic, etc., in which the user can create test modules and run-time operator interfaces.","Unit Under Test (UUT)\u2014The device or component that is being tested.","Thus, the user may use the sequence editor to construct a test executive sequence comprising a plurality of steps. The test executive sequence may then be executed to perform tests of a system or UUT.","In executing the test executive sequence to perform tests of the system or UUT, a set of results is typically produced. Users often desire to log the results for the test executive sequence to a database. Some prior art test executive systems have provided limited support for test executive sequence result logging, but these solutions have proved to be either too inflexible or too difficult to use for many users.","For example, the database logging solution for the TestStand . test executive system from National Instruments Corp. was implemented by a separate result logging sequence that included steps to log results for a test executive sequence to a database. To change aspects of the result logging, e.g., in order to customize the mapping of results to columns in the database, users were required to edit this result logging sequence. However, to make the desired changes, it was necessary for users to understand the operation of the result logging sequence, and many users found this to be difficult and\/or time-consuming.","It would be desirable to instead enable a test executive system to display a specialized user-friendly graphical user interface (GUI) that the user could interact with to configure the desired database result logging for a test executive sequence. The GUI would not only allow the user to more easily specify the desired database result-logging configuration, but would preferably also provide features enabling a high degree of customization of the result logging performed by the test executive system. For example, it would be desirable to enable the user to utilize the GUI to customize the mapping of results to columns in the database, specify filtering criteria to filter which results are logged to the database, etc.","One embodiment of the present invention comprises a system and method for logging results for a test executive sequence to a database. A computer system may execute a test executive sequence under control of test executive software, wherein the test executive sequence is operable to test a unit under test (UUT). For example, the test executive sequence may include various steps referencing code modules operable to analyze or measure the UUT, e.g., by interfacing with the UUT through one or more devices or instruments.","In testing the UUT, various results of the execution of the test executive sequence may be collected by the test executive software. For example, as the results are generated, the results may be stored in one or more data structures. In various embodiments, the results may be generated or structured in any of various ways. For example, in one embodiment, there may be one or more results for the unit under test (UUT) as a whole, as well as results for individual steps in the sequence. The results may vary in data type as well.","The test executive software may be operable to receive user input to a graphical user interface (GUI) to specify desired database result logging criteria. The test executive software may then log at least a portion of the execution results for the test executive sequence to a database, according to the specified result logging criteria.","According to one embodiment of the method, one or more database tables may first be created. The database tables may be associated with a database of any kind and may comprise one or more columns, such as are well known in the art. The database tables may be used to persistently store execution results for a test executive sequence. In one embodiment, default database tables may be created by the test executive software, e.g., at installation time or by executing a script provided by the test executive software. In another embodiment, the user may be able to modify default tables and\/or create new tables.","The graphical user interface (GUI) for specifying criteria for logging results for a test executive sequence to the database tables may then be displayed. For example, the GUI may be displayed in response to the user requesting, e.g., via a menu item, to specify result logging criteria. In various embodiments, the GUI may be a GUI of any kind. For example, the GUI may comprise a dialog or window, such as used in window-based user interface systems. In the preferred embodiment, the GUI is specialized for receiving result logging criteria for a test executive sequence and enables the user to specify the criteria easily and efficiently. It is noted that the GUI may not necessarily be a single window, but may comprise multiple windows or tabs.","User input specifying the desired result logging criteria may then be received to the GUI. In various embodiments, any of various result logging criteria may be specifiable. For example, the user input may specify a mapping of the results for the test executive sequence to the database tables. The user input may also specify criteria for limiting the amount of data logged to the database, e.g., by filtering the results that are logged in various ways. For example, the results may also be filtered based on data types of the results. The results may also be filtered based on properties that must exist before the test executive logs the results.","The results may also be filtered based on step types of the steps to which the results correspond. For example, the GUI may allow the user to specify different result logging criteria for steps of different step types. As one example, the user may specify a precondition expression for a first step type, wherein the precondition expression must evaluate to True before the test executive logs results for steps of the first step type. For a second step type, the user may not specify a precondition expression or may specify a different expression. As another example, the user may specify a set of expected properties for a first step type, wherein the expected properties must exist before the test executive logs results for steps of the first step type. For a second step type, the user may not specify any expected properties or may specify a different set of expected properties.","In one embodiment, the result logging criteria may be divided into multiple \u201cstatements\u201d. Each statement may comprise filtering criteria that specify a subset of the results for the test executive sequence, as well as criteria specifying how the subset of results should be mapped or logged to the database tables. Thus, the result logging performed by the test executive system may be viewed as a type of pattern matching, in that the entire result set is examined for results that match the filtering criteria of the statements. For the results to which each statement applies, those results are logged to the database or otherwise processed.","Thus, logging the results to the database according to the specified result logging criteria may comprise applying the one or more statements to the results. For the result subset to which a particular statement applies, the statement may operate on the result subset in various ways. For example, in one embodiment, a mapping of results in the result subset to columns in the database tables may be specified, and the test executive system may automatically log the result subset to the database according to this mapping. In another embodiment, the user may specify a SQL command to apply to the result subset, such as a SQL INSERT command to insert the results in the result subset into the desired tables and columns. In another embodiment, the user may specify a stored procedure of the database to apply to the result subset.","The statements may be applied to the results at various times relative to execution of the test executive sequence. For example, in one embodiment, the statements may be applied after the sequence has finished execution, when all the results have been collected. Thus, no results may be logged until the sequence finishes execution. In another embodiment, the statements may be applied during execution of the sequence. For example, after a step executes and results for the step have been collected, the statements may be applied to the results for the step. Thus, step results may be logged in parallel with execution of the sequence.","After the desired result logging criteria have been specified, a test executive sequence may be executed. Executing the test executive sequence may comprise executing test executive steps in the test executive sequence. As described above, various results for the test executive sequence may be collected as the sequence executes. The results for the test executive sequence may be logged to or stored in the database tables according to the specified result logging criteria.","Each result may have multiple fields or sub-results. For example, a result for a step may have a field indicating the amount of time it took to execute the step, a field indicating the amount of time it took to execute an external code module called by the step, a field indicating the number of times the step was executed, a field indicating a result status for the step (e.g., Pass or Fail), a field indicating an error message for the step, etc. Also, a result for a step may have multiple sub-results corresponding to multiple measurements performed by the step. In one embodiment, for a result with multiple fields or sub-results, only a subset of the fields or sub-results may be logged to the database, depending on the specified result logging criteria.","Also, the results may include values that are not strictly determined by executing the test executive sequence. For example, a result for a step may have a field indicating the name of the step and\/or a field indicating the name of the step type.","While the invention is susceptible to various modifications and alternative forms, specific embodiments thereof are shown by way of example in the drawings and are herein described in detail. It should be understood, however, that the drawings and detailed description thereto are not intended to limit the invention to the particular form disclosed, but on the contrary, the intention is to cover all modifications, equivalents and alternatives falling within the spirit and scope of the present invention as defined by the appended claims.","Incorporation by Reference","The following references are hereby incorporated by reference in their entirety as though fully and completely set forth herein.","U.S. patent application Ser. No. 09\/259,162 titled \u201cTest Executive System and Method Including Step Types for Improved Configurability,\u201d filed Feb. 26, 1999.","FIG. \u2014Instrumentation System",{"@attributes":{"id":"p-0047","num":"0046"},"figref":["FIG. 1","FIG. 1"],"b":["100","100","102","102","102","150","150"]},"As shown in , the system  may also include a database . The computer  may interface with the database  to log execution results for a test executive sequence. The database  may be a database of any type. In the preferred embodiment, the database  supports database tables having columns and rows, such as are well known in the art. In one embodiment, the database  may be located or stored on a separate computer system from the computer . For example, the computer  may communicate with a separate computer, e.g., a database server computer, via a network. In another embodiment, the database  may be located on the computer  itself.","The one or more instruments in the system  may include a GPIB instrument  and associated GPIB interface card , a data acquisition board  and associated signal conditioning circuitry , a VXI instrument , a PXI instrument , a video device  and associated image acquisition card , a motion control device  and associated motion control interface card , and\/or one or more computer based instrument cards , among other types of devices.","The GPIB instrument  may be coupled to the computer  via a GPIB interface card  provided by the computer . In a similar manner, the video device  may be coupled to the computer  via the image acquisition card , and the motion control device  may be coupled to the computer  through the motion control interface card . The data acquisition board  may be coupled to the computer , and optionally interfaces through signal conditioning circuitry  to the UUT. The signal conditioning circuitry  preferably comprises an SCXI (Signal Conditioning eXtensions for Instrumentation) chassis comprising one or more SCXI modules .","The GPIB card , the image acquisition card , the motion control interface card , and the DAQ card  are typically plugged in to an I\/O slot in the computer , such as a PCI bus slot, a PC Card slot, or an ISA, EISA or MicroChannel bus slot provided by the computer . However, these cards , ,  and  are shown external to computer  for illustrative purposes. The cards , ,  and  may also be implemented as external devices coupled to the computer , such as through a serial bus.","The VXI chassis or instrument  may be coupled to the computer  via a serial bus, MXI bus, or other serial or parallel bus provided by the computer . The computer  preferably includes VXI interface logic, such as a VXI, MXI or GPIB interface card (not shown), which interfaces to the VXI chassis . The PXI chassis or instrument is preferably coupled to the computer  through the computer's PCI bus.","A serial instrument (not shown) may also be coupled to the computer  through a serial port, such as an RS-232 port, USB (Universal Serial bus) or IEEE 1394 or 1394.2 bus, provided by the computer . In typical systems an instrument will not be present of each interface type, and in fact many systems may only have one or more instruments of a single interface type, such as only GPIB instruments.","The instruments are coupled to the unit under test (UUT) or process , or are coupled to receive field signals, typically generated by transducers. Other types of instruments or devices may be connected to the system, as desired.","The computer system  may include a memory medium on which test executive software according to one embodiment of the present invention is stored. The test executive software may allow a user to create or configure a test executive sequence, and\/or control test executive sequence execution for various test applications, such as production and manufacturing test applications. For example, the test executive sequence may be operable to perform one or more tests of the unit under test (UUT) or process .","In testing the UUT or process , various results of the execution of the test executive sequence may be collected by the test executive software. As described in detail below, the test executive software may be operable to receive user input to a graphical user interface (GUI) to specify desired database result logging criteria. The test executive software may then log at least a portion of the execution results for the test executive sequence to the database , according to the specified result logging criteria.","The term \u201cmemory medium\u201d is intended to include an installation medium, e.g., a CD-ROM, floppy disks , or tape device; a computer system memory or random access memory such as DRAM, SRAM, EDO RAM, Rambus RAM, etc.; or a non-volatile memory such as a magnetic media, e.g., a hard drive, or optical storage. The memory medium may comprise other types of memory as well, or combinations thereof. In addition, the memory medium may be located in a first computer in which the programs are executed, or may be located in a second different computer that connects to the first computer over a network, such as the Internet. In the latter instance, the second computer may provide program instructions to the first computer for execution. The host computer CPU executing code and data from the memory medium may comprise a means for implementing the methods described below.","FIG. \u2014Computer System Block Diagram",{"@attributes":{"id":"p-0058","num":"0057"},"figref":["FIG. 2","FIG. 1","FIG. 2","FIG. 1"],"b":"102"},"The computer  includes at least one central processing unit or CPU  that is coupled to a processor or host bus . The CPU  may be any of various types, including an x86 processor, e.g., a Pentium class, a PowerPC processor, a CPU from the SPARC family of RISC processors, as well as others. Main memory  is coupled to the host bus  by means of memory controller .","The main memory  may store software according to one embodiment of the present invention, such as test executive software with functionality as described above with reference to . The main memory  may also store operating system software, as well as other software for operation of the computer system, as well known to those skilled in the art.","The host bus  is coupled to an expansion or input\/output bus  by means of a bus controller  or bus bridge logic. The expansion bus  is preferably the PCI (Peripheral Component Interconnect) expansion bus, although other bus types can be used. The expansion bus  includes slots for various devices such as the data acquisition board  (of ) and a GPIB interface card  that provides a GPIB bus interface to the GPIB instrument  (of ). The computer  further comprises a video display subsystem  and hard drive  coupled to the expansion bus .","As shown, a reconfigurable instrument  may also be connected to the computer . The reconfigurable instrument  may include a functional unit, also referred to as configurable logic, such as a programmable logic device (PLD), e.g., an FPGA, or a processor and memory, which may execute a real time operating system. Program instructions may be downloaded and executed on the reconfigurable instrument . In one embodiment, at least a portion of the test executive software described herein may execute on the reconfigurable instrument . In various embodiments, the functional unit may be comprised on an instrument or device connected to the computer through means other than an expansion slot, e.g., the instrument or device may be connected via an IEEE 1394 bus, USB, or other type of port. Also, the functional unit may be comprised on a device such as the data acquisition board  or another device shown in .","Test Executive Software Components",{"@attributes":{"id":"p-0063","num":"0062"},"figref":["FIG. 3","FIG. 3","FIG. 3","FIG. 3","FIG. 3"],"b":["202","202","202"]},"The test executive software of  also includes a sequence editor  for creating and editing test executive sequences. The sequence editor  and the operator interface programs  interface to the test executive engine . One or more process models  couple to the test executive engine . The test executive engine  interfaces through an adapter interface  to one or more adapters . The adapters shown in  include the LabVIEW standard prototype adapter, the C\/CVI prototype adapter, the DLL flexible prototype adapter, and the sequence adapter. The LabVIEW standard prototype adapter interfaces to program modules having a .VI extension, i.e., LabVIEW graphical programs. The C\/CVI prototype adapter interfaces to program modules having a .dll, .lib, .obj, or .c extension. The DLL flexible prototype adapter interfaces to program modules having a .dll extension. The sequence adapter interfaces to sequence files.","The test executive engine  manages the execution of test executive sequences. Sequences comprise steps that may call external or user-supplied code modules. By using module adapters  that have the standard adapter interface , the test executive engine  can load and execute different types of code modules. Thus, the test executive may be independent from particular application development environments (ADEs) used to create the code modules. In one embodiment, the test executive may use a special type of sequence called a process model to direct the high-level sequence flow. The test executive engine  may implement an API used by the sequence editor  and run-time operator interfaces .","Test Executive Sequence Editor","The sequence editor  may be an application program in which the user creates, modifies, and\/or debugs test executive sequences. The sequence editor  may have a graphical user interface (GUI) enabling a user to efficiently create a test executive sequence for testing a system or unit under test. For example, the sequence editor  may provide the user with easy access to test executive features, such as step types, step properties, sequence parameters, step result collection, etc.",{"@attributes":{"id":"p-0067","num":"0066"},"figref":["FIG. 4","FIG. 4","FIG. 5","FIG. 5"],"b":"212"},"In one embodiment, the sequence editor  may also include an execution window that provides debugging tools, e.g., those found in application development environments such as LabVIEW, LabWindows\/CVI, Microsoft Visual C\/C++, Microsoft Visual Basic, etc. These may include features such as breakpoints, single stepping, tracing, a variable display, and a watch window.","In one embodiment, in the sequence editor , the user may start multiple concurrent executions. Multiple instances of the same sequence can be executed, and different sequences can be executed at the same time, e.g., as separate threads in a multithreaded system. Each execution instance may have its own execution window. In trace mode, the execution window may display the steps in the currently executing sequence. When execution is suspended, the execution window may display the next step to execute and provide single-stepping options.","Test Executive Engine","The test executive engine  may be used when creating, editing, executing, and debugging test executive sequences. The test executive engine  may also provide a test executive engine application programming interface (API) that enables another program to interface with the test executive engine  in order to perform these actions. In one embodiment, the test executive engine  may export an object-based or component-based API, which in one embodiment may be an ActiveX Automation API. The sequence editor  and run-time operator interfaces  may use the test executive engine API. The engine API may be called from any programming environment able to use the API. For example, where the API comprises an ActiveX Automation API, the engine API may be called from any programming environment that supports access to ActiveX Automation servers. Thus, in various embodiments, the engine API may be called from test modules written in various programming environments, including test modules that are written in LabVIEW, LabWindows\/CVI, Microsoft Visual C++, Microsoft Visual Basic, Java, etc.","One task performed by the test executive engine  is to manage the execution of test executive sequences. Executing a sequence may comprise executing steps included in the sequence. Not all steps in the sequence are necessarily executed. For example, the user may configure some steps to be skipped, e.g., depending on execution results of previous steps.","For a step that references a user-supplied code module, executing the step may comprise executing the respective code module. In addition to these user-supplied code modules being executed, for each step, additional program instructions may be executed, wherein these additional program instructions implement additional functionality specified for the step. These additional program instructions may be specified by the test executive software, rather than being defined by the respective user-supplied code module for the step. As one example, when including a step in a sequence, the user may configure execution results of the step to be collected. In this example, when the step is executed, program instructions to store the step results accordingly may be executed in addition to the program instructions of a user-supplied code module that the step references.","It is noted that not all steps may reference a user-supplied code module. For example, the test executive may provide some step types that primarily affect various aspects of sequence execution and are not designed to reference user-supplied code modules.","As a test executive sequence is executed, various results may be generated, and these results may be collected, e.g., may be stored in one or more data structures. In various embodiments, the results may be generated or structured in any of various ways. For example, in one embodiment, there may be one or more results for the unit under test (UUT) as a whole, as well as results for individual steps in the sequence. The results may vary in data type as well.","Variables and Properties","In one embodiment, the test executive system may support the use of variables and\/or \u201cproperties\u201d. As used herein, variables and properties comprise locations in which data can be stored. Each step in a test executive sequence may have properties. For example, a step might have an integer error code property. The type of a step may determine the set of properties which are included in the step. Step types are discussed below.","Values that are stored in variables and properties can be passed to code modules. The test executive API may be useable to access variable and property values directly from code modules. For example, when executing sequences, the test executive may maintain a \u201csequence context\u201d that contains references to variables and step properties in active sequences. The contents of the sequence context may change depending on the currently executing sequence and step. If the user passes a sequence context object reference to the code module, the test executive API can be used to access the variables and properties in the sequence context.","The values of variables and properties can be used in numerous ways, such as using a property value to determine whether to execute a step. Sometimes the user desires to use an \u201cexpression\u201d, which is a formula that calculates a new value from the values of multiple variables or properties. An expression can be used anywhere a simple variable or property value is used. In expressions, the user can access all variables and properties in the sequence context that is active when TestStand evaluates the expression. The following is an example of an expression:\n\nLocals.MidBandFrequency=(Step.HighFrequency+Step.LowFrequency)\/2\n","The test executive may support applicable expression operators and syntax that are used in programming languages such as C, C++, Java, Visual Basic, etc.","Categories of Properties","As described above, a property comprises a container of information. A property can contain a single value, an array of values of the same type, or no value at all. A property can also contain any number of sub-properties. Each property has a name. A value may have a data type, such as a Number, a String, a Boolean, etc. In one embodiment, the following categories of properties may be supported:","A \u201csingle-valued\u201d property contains a single value, such as a Number, String, or Boolean value, etc.","An \u201carray\u201d property contains an array of values. There may be Number Array properties, String Array properties, Boolean Array properties, etc.","A \u201cproperty-array\u201d property contains a value that is an array of sub-properties. In addition to the array of sub-properties, property-array properties can contain any number of sub-properties of other types.","An \u201cobject\u201d property contains no values. Typically, object properties contain multiple sub-properties. Object properties are analogous to structures in C\/C++ and to clusters in LabVIEW.","Standard and Custom Named Data Types","When the user creates a variable or property, the user specifies its data type. In some cases, a simple data type such as a Number or a Boolean is used. In other cases, the user can define his\/her own data type, by creating a named data type, in which sub-properties are added to create an arbitrarily complex data structure. When a named data type is created, the user can reuse the named data type for multiple variables or properties. Although each variable or property that the user creates with a named data type has the same data structure, the values they contain can differ.","The test executive may define certain standard named data types, such as and ","The user can define his\/her own custom named data types. The user must choose a unique name for each of the custom data types. Sub-properties in each custom data type can be added or deleted without restriction. For example, the user might create a \u201c\u201d data type that contains sub-properties such as \u201c\u201d and \u201c","When the user creates a variable or property, the user can select from among the simple property types and the named data types.","Built-In and Custom Properties","In one embodiment, the test executive may define various properties that are always present for objects such as steps and sequences. An example is a step \u201crun mode\u201d property. Such properties are referred to as built-in properties. The user can define new properties in addition to the built-in properties. Examples are high and low limit properties in a step or local variables in a sequence. Such properties are referred to as custom properties.","Steps","As described above, a test executive sequence comprises a plurality of steps. A step can do many things, such as initializing an instrument, performing a complex test, or making a decision that affects the flow of execution in a sequence. Steps can perform these actions through several types of mechanisms, including jumping to another step, executing an expression, calling a sub-sequence or calling an external code module. The term \u201cstep module\u201d is used to refer to the code module that a step calls.","Steps can have custom properties. For steps that call code modules, custom step properties are useful for storing parameters to pass to the code module for the step. They also serve as a place for the code module to store its results. The test executive API can be used to access the values of custom step properties from code modules.","Not all steps call code modules. Some steps perform standard actions that the user configures using a dialog box. In this case, custom step properties are useful for storing the configuration settings that the user specifies.","Built-In Step Properties","Steps may have a number of built-in properties that the user can specify. Exemplary built-in step properties include:","Preconditions that allow the user to specify the conditions that must be true for the test executive to execute the step during the normal flow of execution in a sequence.","Load\/Unload Options that allow the user to specify when the test executive loads and unloads the code modules or subsequences that each step invokes.","Run Mode that allows a step to be skipped or forced to pass or fail without executing the step module.","Record Results that allows the user to specify whether the test executive collects the results of the step.","Step Failure Causes Sequence Failure that allows the user to specify whether the test executive sets the status of the sequence to \u201cFailed\u201d when the status of the step is \u201cFailed\u201d.","Ignore Run-Time Errors that allows the user to specify whether the test executive continues execution normally after the step even though a run-time error occurs in the step.","Post Actions that allows the user to specify the execution of callbacks or jump to other steps after executing the step, depending on the pass\/fail status of the step or any custom condition.","Loop options that allow the user to cause a single step to execute multiple times before executing the next step. The user can specify the conditions under which to terminate the loop. The user can also specify whether to collect results for each loop iteration, for the loop as a whole, or for both.","Pre Expression that allows the user to specify an expression to evaluate before executing the step module.","Post Expression that allows the user to specify an expression to evaluate after executing the step module.","Status Expression that allows the user to specify an expression to use to set the value of a \u201cstatus\u201d property of the step automatically.","Step Types","In one embodiment, the test executive system may support the use of \u201cstep types\u201d. In a test executive sequence having a number of steps, in many instances the user will desire a number of steps that have some commonality of functionality and\/or properties. Thus, a step type may be implemented to define common properties and\/or operations associated with a plurality of steps, thereby eliminating the need for the user to define these common properties and\/or operations for each of the respective steps. Step instances of the step type incorporate this common functionality and\/or properties from the step type, and thus the user is not required to hard code that functionality and\/or properties in each instance or step.","In one embodiment, step types may define common functionality by defining pre and post sub-steps. When a first step in a test executive sequence of a given step type is executed, the pre and post sub-steps may execute before and after, respectively, the first step. Step types may also include pre and post expressions and status expressions for configurability, which may be executed at runtime.","A step type may have similar functionality to a type definition, in that once the user has configured a step type and created steps of that step type in a sequence, if the user later changes that step type, those changes may propagate through all of the steps which are based on that step type. In one embodiment, this functionality is not performed by copying or propagating changes. Rather, the information may be held within the step type, and during runtime the sequence may examine the step type to determine proper execution of a step of that step type.","As one example of a step type, a \u201cNumeric Limit Test\u201d step type may be defined. Steps of this step type may call a code module that returns a single measurement value. After the code module executes, the Numeric Limit Test step type may compare the measurement value to predefined limits. If the measurement value is within the bounds of the limits, the step type may set a status value for the step to \u201cPassed\u201d. Otherwise, the status value may be set to \u201cFailed\u201d.","As described above, the user may interact with a GUI to specify result logging criteria for results for a test executive sequence. In one embodiment, the GUI may allow the user to specify different result logging criteria for steps of different step types. As one example, the user may specify a precondition expression for a first step type, wherein the precondition expression must evaluate to True before the test executive logs results for steps of the first step type. For a second step type, the user may not specify a precondition expression or may specify a different expression. As another example, the user may specify a set of expected properties for a first step type, wherein the expected properties must exist before the test executive logs results for steps of the first step type. For a second step type, the user may not specify any expected properties or may specify a different set of expected properties.","FIGS.  and \u2014Logging Sequence Results",{"@attributes":{"id":"p-0109","num":"0108"},"figref":["FIG. 6","FIG. 6","FIG. 6"]},"In step , one or more database tables may be created. The database tables may be associated with a database of any kind and may comprise one or more columns, such as are well known in the art. As described below, the database tables may be used to persistently store execution results for a test executive sequence. In one embodiment, default database tables may be created by the test executive software, e.g., at installation time, and it may be unnecessary to perform step . In another embodiment, the user may want to modify default tables and\/or create new tables. The database tables may be created in any of various ways. For example, the user may execute a program or script, e.g., a SQL script, to create the tables, or the user may utilize an application to interactively create the tables (or modify existing tables). In one embodiment, a database viewer program is supplied with the test executive software, wherein the database viewer program allows the user to view contents of the database, as well as modify or create tables in the database.","In step , a graphical user interface (GUI) for specifying criteria for logging results for a test executive sequence to the database tables may be displayed. For example, the GUI may be displayed in response to the user requesting, e.g., via a menu item, to specify result logging criteria. In various embodiments, the GUI may be a GUI of any kind. For example, the GUI may comprise a dialog or window, such as used in window-based user interface systems. The dialog or window may comprise various user interface controls for receiving user input, such as check boxes, buttons, list boxes, etc. In the preferred embodiment, the GUI is specialized for receiving result logging criteria for a test executive sequence and enables the user to specify the criteria easily and efficiently. It is noted that the GUI may not necessarily be a single window, but may comprise multiple windows or tabs.","In step , user input specifying the desired result logging criteria may be received to the GUI. In various embodiments, any of various result logging criteria may be specifiable. For example, the user input may specify a mapping of the results for the test executive sequence to the database tables created in step . The user input may also specify criteria for limiting the amount of data logged to the database, e.g., by filtering the results that are logged in various ways. For example, the results may be filtered based on step types of the steps to which the results correspond, as described above. The results may also be filtered based on data types of the results. The results may also be filtered based on properties that must exist before the test executive logs the results. One particular embodiment of step  is described below with reference to . Also, an exemplary GUI for specifying the result logging criteria is described below.","In step , a test executive sequence may be executed. The test executive sequence may execute under control of test executive software to test one or more units under test (UUT). Executing the test executive sequence may comprise executing a plurality of test executive steps in the test executive sequence. As described above, various execution results for the test executive sequence may be collected as the sequence executes. There may be different classes of results. For example, there may be a result for the unit under test (UUT) and a result for every step in the test executive sequence. One or more of the steps in the test executive sequence may call a user-supplied or external code module, and for these steps, at least a portion of the result may be produced by execution of the user-supplied code module.","Each result may have multiple fields or sub-results. For example, a result for a step may have a field indicating the amount of time it took to execute the step, a field indicating the amount of time it took to execute an external code module called by the step, a field indicating the number of times the step was executed, a field indicating a result status for the step (e.g., Pass or Fail), a field indicating an error message for the step, etc. Also, a result for a step may have multiple sub-results corresponding to multiple measurements performed by the step. In one embodiment, for a result with multiple fields or sub-results, only a subset of the fields or sub-results may be logged to the database, depending on the specified result logging criteria.","Also, the results may include values that are not strictly determined by executing the test executive sequence. For example, a result for a step may have a field indicating the name of the step and\/or a field indicating the name of the step type.","In step , the results for the test executive sequence may be logged to or stored in the database tables according to the specified result logging criteria. As described above, this may comprise logging only a subset or portion of the results to the database tables.","In one embodiment, the result logging criteria may be divided into multiple \u201cstatements\u201d. Each statement may comprise filtering criteria that specify a subset of the results for the test executive sequence, as well as criteria specifying how the subset of results should be mapped or logged to the database tables. Thus, the result logging performed by the test executive system may be viewed as a type of pattern matching, in that the entire result set is examined for results that match the filtering criteria of the statements. For the results to which each statement applies, those results are logged to the database or otherwise processed.","Thus, logging the results to the database according to the specified result logging criteria in step  may comprise applying the one or more statements to the results. For the result subset to which a particular statement applies, the statement may operate on the result subset in various ways. For example, in one embodiment, a mapping of results in the result subset to columns in the database tables may be specified, and the test executive system may automatically log the result subset to the database according to this mapping. In another embodiment, the user may specify a SQL command to apply to the result subset, such as a SQL INSERT command to insert the results in the result subset into the desired tables and columns. In another embodiment, the user may specify a stored procedure of the database to apply to the result subset.","The statements may be applied to the results at various times relative to execution of the test executive sequence. For example, in one embodiment, the statements may be applied after the sequence has finished execution, when all the results have been collected. Thus, no results may be logged until the sequence finishes execution. In another embodiment, the statements may be applied during execution of the sequence. For example, after a step executes and results for the step have been collected, the statements may be applied to the results for the step. Thus, step results may be logged in parallel with execution of the sequence.",{"@attributes":{"id":"p-0120","num":"0119"},"figref":["FIG. 7","FIG. 6","FIG. 7"],"b":["305","351","305"]},"In step , for each statement, user input to the GUI may be received to specify filtering criteria for identifying results (or a result subset) for which the statement applies, as described above.","In step , for each statement, user input to the GUI may be received to specify columns or parameters to be logged for each result for which the statement applies, i.e., each result in the result subset.","Example GUI\u2014TestStand Test Executive Application","The remainder of this disclosure describes one particular implementation of the methods described above. An exemplary GUI for the TestStand test executive application from National Instruments Corp. is described. However, this description refers to various features specific to TestStand and is intended for illustrative purposes. Numerous alternative embodiments are contemplated.","The default process model relies on the automatic result collection capability of the TestStand engine to accumulate the raw data to log to a database for each UUT. The TestStand engine can collect the results of each step into a result list for an entire sequence automatically. The result list for a sequence contains the result of each step it runs and the result list of each subsequence call it makes. The default process model calls the main sequence in the client sequence file to test a UUT. Thus, the result list that the TestStand engine accumulates for the main sequence contains the raw data to log to a database for the UUT.","The Test UUTs and Single Pass entry points in the TestStand process models log the raw results to a database. The Test UUTs entry point logs results after each pass through the UUT loop.","The Configure>>Database Options menu item displays the Database Options dialog box where the user can set the following options:\n\n","The user may use the Database Options dialog box to enable database logging and to define a data link and schema for the default process model to use. The user access the Database Options dialog box by selecting Configure>>Database Options. In the Database Options dialog box, the user can customize the logging of results to a database. The settings the user chooses in the Database Options dialog box apply to all executions that use the Test UUTs and Single Pass entry points.","When the user selects Configure>>Database Options, TestStand executes the Config Database Options entry point in the default process model. Thus, while the dialog box is active in the sequence editor, the Running message appears on the left side of the status bar. The Database Options dialog box contains the following tabs: Logging Options, Data Link, Schemas, Statements, and Columns\/Parameters.","Logging Options Tab",{"@attributes":{"id":"p-0129","num":"0131"},"figref":"FIG. 8","ul":{"@attributes":{"id":"ul0002","list-style":"none"},"li":["Disable Database Logging\u2014The user enables this option if the user does not want TestStand to log data to a database.","Include Execution Times\u2014The user enables this option if the user wants to log the time that each step module takes to execute. This is the time that the subsequence, LabVIEW VI, or C function takes to execute.","Include Step Results\u2014The user enables this option if the user wants to log the results of each step. Disable this option if the user wants to include only information on each UUT that the user tests.","Include Measurements\u2014The user enables this option if the user wants to log the measurement values that steps acquire. The default schemas recognizes specific step properties as containing values to log. These include properties such as Result.Numeric, Result.String, and Result.Measurement. For the Numeric Limit Test built-in step type, Result.Numeric contains the numeric measurement the step acquires. For the String Value Test built-in step type, Result.String contains the measurement value the step returns in string form. For the Multiple Numeric Limit step type, Result.Measurement[].Data contains the numeric measurements the step acquires.","Include Test Limits\u2014The user enables this option if the user wants to log values that step types use as test limits. The default schemas recognize specific step properties as containing test limits. These properties include Limit.Low, Limit.High, Limit.String, and Comp. The Numeric Limit Test compares the measurement value it acquires against Limit.Low, Limit.High, or both, and uses Comp to select the type of comparison to make. The String Value Test compares the string it acquires against Limit.String and uses Comp to indicate whether to ignore the case in the comparison.","Result Filtering Expression\u2014Specifies which step results appear in the database. The user does so by specifying an expression that the database logger evaluates for each step result. The database logger includes the step in the database if the expression evaluates to True. The user can use any subproperty in the Result property of the step, but the user must use Logging.StepResult in place of Step.Result. For example, if the user wants to include only failing steps in the database, the user sets the expression to Logging.StepResult.Status==\u201cFailed\u201d. The user can use the menu ring to the right of the control to select predefined expressions for all steps, only failing steps, or only passing steps. The user can open the Expression Browser to build the expression by selecting the Browse button.\n\nData Link Tab\n"]}},"The Data Link tab specifies the data link information that the process model requires to connect to a database and to log data.  shows the Data Link tab of the Database Options dialog box. The Data Link tab contains the following controls:\n\n","The Schemas tab specifies the database schemas available and the default schema that the TestStand process model uses. A schema defines how TestStand logs results to a database. A schema comprises a list of statements, and each statement comprises a list of columns.  shows the Schemas tab of the Database Options dialog box. The Schemas tab contains the following controls:\n\n","The Statements tab defines the data that TestStand logs. Statements define the type of results the schema operates on and the conditions that must be true before TestStand logs the results. Statements also define the database action to perform. In addition, statements specify what database columns or parameters to log and the TestStand expressions to evaluate to determine the column or parameter values.  shows the Statements tab of the Database Options dialog box. The Statements tab contains the following controls:\n\n","The Columns\/Parameters tab specifies the columns or parameters that TestStand logs for each result for which the statement applies. For recordset statements, TestStand expects the recordset to return the specified column names, and the order of the columns in the list control is arbitrary. For command statements, TestStand creates a parameter for each item in the list. Depending on whether the parameter is an input or an output operation, TestStand will set or get the value, respectively. The name of the parameter is arbitrary, but the parameter list order must match the required parameters for the statement.  shows the Column\/Parameters tab of the Database Options dialog box. The Columns\/Parameters tab contains the following controls:\n\n","When the database logger starts, it creates a temporary property name Logging in the sequence context in which the database logger evaluates expressions. The Logging property contains subproperties that provide information about database settings, process model data structures, and the results that the logger processes. As logging processes the result list, the logger updates subproperties of Logging to refer to the UUT result, step result, and the step result subproperty the logger is processing. The user can reference the Logging subproperties in the precondition and value expressions that the user specifies for statements and column values.  shows the subproperties for the Logging property.","The following describes each subproperty of the Logging property:\n\n","The TestStand process model files define the structure of the DatabaseOptions, DateDetails, TimeDetails, UUT, and StationInfo custom data types that the logging properties use.","TestStand Database Result Tables","This section describes the default table schemas that TestStand uses. The default TestStand database schema require the following tables in the user's database:\n\n","The UUT_RESULT table contains information on each UUT that TestStand tests. The STEP_RESULT table contains information on each step that TestStand executes while testing each UUT. The other table names with the prefix \u201cSTEP\u201d contain information for each specific step type. The table names with the prefix \u201cMEAS\u201d contain information on sub-results that TestStand logs for a step type.","Each table contains a primary key column ID. The data type of the column is Number, String, or GUID, depending on the selected schema. Each table might contain foreign key columns. The data types of the columns must match the primary key that the data types reference.",{"@attributes":{"id":"p-0140","num":"0233"},"figref":"FIG. 14"},{"@attributes":{"id":"p-0141","num":"0234"},"figref":"FIGS. 15A and 15B"},{"@attributes":{"id":"p-0142","num":"0235"},"figref":"FIG. 16"},{"@attributes":{"id":"p-0143","num":"0236"},"figref":"FIG. 17"},{"@attributes":{"id":"p-0144","num":"0237"},"figref":"FIG. 18"},{"@attributes":{"id":"p-0145","num":"0238"},"figref":"FIG. 19"},{"@attributes":{"id":"p-0146","num":"0239"},"figref":"FIG. 20"},{"@attributes":{"id":"p-0147","num":"0240"},"figref":"FIG. 21"},{"@attributes":{"id":"p-0148","num":"0241"},"figref":"FIG. 22"},{"@attributes":{"id":"p-0149","num":"0242"},"figref":"FIG. 23"},{"@attributes":{"id":"p-0150","num":"0243"},"figref":"FIG. 24"},{"@attributes":{"id":"p-0151","num":"0244"},"figref":"FIG. 25"},"The default TestStand database schemas assume that result tables conform to the above table definitions. If the user wants to modify the table schema, the user must alter the tables in the user's database and create a new schema using the Database Options dialog box.","Database Viewer","TestStand includes the Database Viewer application for viewing data in a database, editing table information, and executing SQL commands.  shows the Database Viewer main window. The Database Viewer displays the following three types of windows:\n\n","The Database Viewer menu bar contains commands that apply to all windows and commands that apply to specific windows. The following describes the menu items in the menu bar:","The File menu contains the following commands:\n\n","The Options menu can contain the following items.\n\n","The SQL menu is available only when an Execute SQL window is active. The SQL menu has the following commands:\n\n","The Windows menu has the following commands:\n\n","Although the embodiments above have been described in considerable detail, numerous variations and modifications will become apparent to those skilled in the art once the above disclosure is fully appreciated. It is intended that the following claims be interpreted to embrace all such variations and modifications."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["A better understanding of the present invention can be obtained when the following detailed description of the preferred embodiment is considered in conjunction with the following drawings, in which:",{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0035","num":"0034"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0038","num":"0037"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0039","num":"0038"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0040","num":"0039"},"figref":["FIG. 7","FIG. 6"],"b":"305"},{"@attributes":{"id":"p-0041","num":"0040"},"figref":"FIGS. 8\u201313"},{"@attributes":{"id":"p-0042","num":"0041"},"figref":"FIGS. 14\u201325"},{"@attributes":{"id":"p-0043","num":"0042"},"figref":"FIG. 26"}]},"DETDESC":[{},{}]}
