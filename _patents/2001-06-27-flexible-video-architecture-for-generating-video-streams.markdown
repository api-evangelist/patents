---
title: Flexible video architecture for generating video streams
abstract: A graphics system comprising a series of calculation units. The calculation units comprise a first subset and a second subset of calculation units. A first calculation unit of the series generates a first digital video stream and a second digital video stream. Each calculation unit of the first subset: (a) passes the second digital video stream to a next calculation unit of the series unmodified; and (b) computes first pixel values, injects or mixes the first pixel values into the first digital video stream, and passes the modified first digital video stream to the next calculation unit. Similarly, each calculation unit of the second subset injects or mixes second pixel values into the second digital video stream, and passes the first digital video stream unmodified. A last calculation unit of the series drives one or more display devices in response to the first and second digital video streams.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06989835&OS=06989835&RS=06989835
owner: Sun Microsystems, Inc.
number: 06989835
owner_city: Santa Clara
owner_country: US
publication_date: 20010627
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF SEVERAL EMBODIMENTS"],"p":["This application claims benefit of priority to U.S. Provisional Application Ser. No. 60\/214,713 filed on Jun. 28, 2000 titled \u201cFlexible Video Architecture for Generating Video Streams\u201d.","1. Field of the Invention","This invention relates generally to the field of computer graphics and, more particularly, to a flexible system architecture for generating video signals in a graphics environment.","2. Description of the Related Art","A computer system may be used to drive one or more display devices (such as monitors or projectors). The computer system may provide analog or digital video signals to drive the display devices. The computer system may include a graphics system for the rendering and display of 2D graphics and\/or 3D graphics. The graphics system may supply the video signals which drive the display devices. In addition, the computer system may include a system unit, and input devices such as a keyboard, mouse, etc.","In general, prior art graphics systems do not have a scalable video architecture, i.e. they are not able to flexibly allocate hardware resources in proportion to the number of video signals to be generated and the respective pixel bandwidths of the video signals. Thus, graphics consumers are often forced to use a more powerful, and thus, more expensive graphics system than would be optimal for a given graphics scenario. Thus, there exists a need for a graphics system which can flexibly allocate hardware resources to video signals in proportion to their respective pixel bandwidths.","Furthermore, prior art graphics systems typically do not provide a mechanism enabling multiple hardware devices (e.g. graphics boards) to collaborate in generating one or more video signals. Thus, graphics consumers may be forced into the inefficient mode of using one hardware device (e.g. one graphics board) per video signal. In this case, some or all of the graphics boards may operate at significantly less than maximum capacity. Therefore, there exists a need for a graphics system and methodology which would enable multiple hardware devices to collaborate in the generation of one or more video signals.","The problems described above may be addressed in some embodiments by a graphics system according to the present invention. In one embodiment, the graphics system comprises a plurality of calculation units coupled together in a linear array (i.e. a series). The plurality of calculation units may include a first subset and a second subset. The first subset of calculation units includes a lead calculation unit which is configured to generate a first digital video stream. Similarly, the second subset of calculation units includes a lead calculation unit configured to generate a second digital video stream. Each calculation unit of the first subset is configured to compute pixel values for a corresponding column in a first display area, and to contribute (e.g. to blend or inject) the computed pixel values to the first digital video stream. Furthermore, each calculation unit of the second subset is configured to compute pixel values for a corresponding column in a second display area, and to contribute the computed pixel values to the second digital video stream. A last calculation unit in the linear array is configured to provide the first digital video stream and the second digital video stream to a first digital-to-analog conversion (DAC) unit and a second DAC unit respectively. The first DAC unit converts the first digital video stream into a first video signal for presentation to a first display device. The second DAC unit converts the second digital video stream into a second video signal for presentation to a second display device.","In some embodiments, the calculation units comprising the linear array are contained within a graphics board. The graphics board may also include rendering hardware and a sample buffer. The rendering hardware is configured to receive graphics data (e.g. graphics primitives such as triangles), and to render samples corresponding to the graphics data. The rendering hardware stores the rendered samples into the sample buffer. Each calculation unit of the linear array is configured to read samples from a corresponding region of the sample buffer, and to compute pixel values in response to the samples of the corresponding region.","In a second embodiment, the calculation units of the linear array are comprised within (i.e. distributed among) a plurality of graphics boards. Each graphics board comprises rendering hardware and a sample buffer, and is configured to render samples into the corresponding sample buffer in response to received graphics data. Each calculation unit in a given subset is configured to compute pixel values based on samples from the sample buffer of the graphics board in which it resides. It is noted that a subset of calculation units may span more than one graphics board.","Each calculation unit of the linear array comprises a local horizontal counter, a local vertical counter, local horizontal boundary registers and local vertical boundary registers. Each calculation unit of the first subset is configured to contribute its locally-computed pixel values to the first digital video stream in response to (a) a horizontal count value of the local horizontal counter falling between horizontal limits indicated by the local horizontal boundary registers, and (b) a vertical count value of the local vertical counter falling between vertical limits indicated by the local vertical boundary registers. The local horizontal boundary registers of each calculation unit of the first subset may be programmed with integer values corresponding to the left and right boundaries of the corresponding column of the first display area. The local vertical boundary registers of each calculation unit of the first subset may be programmed with integer values corresponding to the upper and lower boundaries of the corresponding column of the first display area. Similarly, each calculation unit of the second subset may use its local horizontal counter and local vertical counter to selectively contribute locally-computed pixel values to the second digital video stream.","The lead calculation unit of the first subset is configured to transmit dummy pixels into the first digital video stream in response to the horizontal count value of the local horizontal counter falling outside the horizontal limits indicated by the local horizontal boundary registers, or (i.e. logical OR), the vertical count value of the local vertical counter falling outside the vertical limits indicated by the local vertical boundary registers. These dummy pixels serve as timing place holders for the contribution of pixels by down-stream calculation units. In other words, the dummy pixels provide definite time-slots in which a down-stream calculation can contribute (i.e. blend or substitute) its locally computed image pixels to the gradually emerging video stream. Any dummy pixels which are not replaced by a down-stream calculation unit become pixels in a letter box region of the video display since the dummy pixels may be assigned a predefined color.","Each calculation unit of the second subset is configured to contribute the second locally-computed pixel values to the second digital video stream in response to (c) a horizontal count value of the local horizontal counter falling between the horizontal limits indicated by the local horizontal boundary registers, and (d) a vertical count value of the local vertical counter falling between vertical limits indicated by the local vertical boundary registers.","Each calculation unit of the second subset is further configured to receive and forward the second digital video stream without modifying pixel values of the second digital video stream in response to the horizontal count value of the local horizontal counter falling outside the horizontal limits indicated by the local horizontal boundary registers, or the vertical count value of the local vertical counter falling outside the vertical limits indicated by the local vertical boundary registers.","It is noted that the principles described herein for the generation of two simultaneous video streams in a series of calculation units naturally generalize to an arbitrary number L of simultaneous video streams, where L is any positive integer. Thus, each calculation unit may be configured to receive L video streams, and to conditionally contribute locally computed pixels to a selected one of the L video streams.","In a third embodiment, the graphics system comprises at least a first video router and a second video router. The first video router comprises a first local video buffer, a first color unit, a first blend unit, a first horizontal counter, and a first vertical counter. The second video router couples to the first video router, and comprises a thru-video buffer, a second local video buffer, a second blend unit, a second horizontal counter, and a second vertical counter.","The first local video buffer is configured to receive and store first local pixels computed for a first column of a display area. Similarly, the second local video buffer is configured to receive and store second local pixels computed for a second column of the display area. The first blend unit is configured to receive a first stream of dummy pixels having a predefined color from the first color unit, to conditionally replace the dummy pixels in the first video stream with first local pixels from the first local video buffer, thereby generating a second stream of second pixels, and to transmit the second stream to the second video router. In particular, the first blend unit is configured to contribute the first local pixels to the second stream in place of dummy pixels in the first stream in response to (a) a first horizontal count value of the first horizontal counter falling within the left and right boundaries of the first column, and (b) a first vertical count value of the first vertical counter falling within the top and bottom boundaries of the first column. The thru-video buffer in the second video router is configured to receive and temporarily store the second stream of second pixels.","The second blend unit is configured to receive the second stream of second pixels from the thru-video buffer, to conditionally contribute the second local pixels in place of the second pixels of the second stream, thereby generating a third stream of third pixels, and to transmit the third stream of third pixels. In particular, the second blend unit is configured to contribute the second local pixels to the third stream in place of the second pixels of the second stream in response to (c) a second horizontal count value of the second horizontal counter falling within the left and right boundaries of the second column and (b) a second vertical count value of the second vertical counter falling within the top and bottom boundaries of the second column.","The first blend unit is further configured to transmit the dummy pixels of the first stream so that the second pixels of the second stream correspond to the dummy pixels of the first stream in response to the first horizontal count value of the first horizontal counter falling outside the left and right boundaries of the first column, or the first vertical count value of the first vertical counter falling outside the top and bottom boundaries of the first column.","Similarly, the second blend unit is further configured to transmit the second pixels of the second stream so that the third pixels of the third stream correspond to the second pixels in response to the second horizontal count value of the second horizontal counter falling outside the left and right boundaries of the second column, or the second vertical count value of the second vertical counter falling outside the top and bottom boundaries of the second column.","The graphics system further comprises a first clock generator configured to generate a first pixel clock. The first local video buffer receives the first pixel clock and transmits the first local pixels to the first blend unit in response to transitions (e.g. rising edge transitions) of the first pixel clock and in response to conditions (a) and (b) being true. In addition, the first color unit receives the first pixel clock and transmits each of the dummy pixels comprising the first stream to the first blend unit in response to the transitions of the first pixel clock.","The first blend unit may embed a synchronous version of the first pixel clock into the second stream of second pixels. The thru-video buffer of the second video router stores the second pixels of the second stream in response to transitions of the synchronous embedded pixel clock. In addition, thru-video buffer transmits the second stream of second pixels in response to transitions of the first pixel clock. Because the synchronous embedded pixel clock and the first pixel clock have the same frequency, the thru-video buffer never underflows or overflows.","The first pixel clock drives the first horizontal counter and second horizontal counter. The first vertical counter increments in response to the first horizontal count value attaining a first maximum value corresponding to the right edge of the display area. Similarly, the second vertical counter increments in response to the second horizontal count value attaining a second maximum value corresponding to the right edge of the display area.","In another embodiment, the first blend unit is configured to embed a horizontal reset indication in the second stream in response to the first horizontal count value corresponding to the left edge of the display area. The second horizontal counter is configured to reset to a predefined value (e.g. zero) in response to receiving the horizontal reset indication from the thru-video buffer. Furthermore, the first blend unit is configured to embed a vertical reset indication in the second stream in response to the first vertical count value and the first horizontal count value corresponding to the top-left corner of the display area. The second vertical counter is configured to reset to a second predefined value (e.g. zero) in response to receiving the vertical reset indication from the thru-video buffer.","While the invention is susceptible to various modifications and alternative forms, specific embodiments thereof are shown by way of example in the drawings and will herein be described in detail. It should be understood, however, that the drawings and detailed description thereto are not intended to limit the invention to the particular form disclosed, but on the contrary, the intention is to cover all modifications, equivalents, and alternatives falling within the spirit and scope of the present invention as defined by the appended claims. Note, the headings are for organizational purposes only and are not meant to be used to limit or interpret the description or claims. Furthermore, note that the word \u201cmay\u201d is used throughout this application in a permissive sense (i.e., having the potential to, being able to), not a mandatory sense (i.e., must). The term \u201cinclude\u201d, and derivations thereof, mean \u201cincluding, but not limited to\u201d. The term \u201cconnected\u201d means \u201cdirectly or indirectly connected\u201d, and the term \u201ccoupled\u201d means \u201cdirectly or indirectly connected\u201d.",{"@attributes":{"id":"p-0067","num":"0066"},"figref":"FIG. 1","b":["80","80","82","84","84","82"]},"System unit  may also couple to various input devices such as a keyboard , a mouse , a video camera, a trackball, a digitizing tablet, a six-degree of freedom input device, a head tracker, an eye tracker, a data glove, body sensors, etc. Application software may be executed by computer system  to display 3-D graphical objects on display devices A and\/or B.",{"@attributes":{"id":"p-0069","num":"0068"},"figref":"FIG. 2A","b":["80","80","102","112","104","106","104","104"]},"Host CPU  may be realized by any of a variety of processor technologies. For example, host CPU  may comprise one or more general purpose microprocessors, parallel processors, vector processors, digital signal processors, etc., or any combination thereof. System memory  may include one or more memory subsystems representing different types of memory technology. For example, system memory  may include read-only memory (ROM) and\/or random access memory (RAM)\u2014such as static random access memory (SRAM), synchronous dynamic random access memory (SDRAM) and\/or Rambus dynamic access memory (RDRAM).","System bus  may comprise one or more communication buses or host computer buses (for communication between host processors and memory subsystems). In addition, various peripheral devices and peripheral buses may be connected to system bus .","In one set of embodiments, graphics system  is configured to generate up to two video signals. Graphics system  may comprise one or more graphics boards (also referred to herein as graphics pipelines) configured according to the principles of the present invention. The graphics boards may be coupled together in a linear chain as suggested by , and may collaborate in the generation of video signals Vand V. Video signals Vand Vdrive display devices A and B respectively. The number R of graphics boards comprising graphics system  may be chosen to match the combined pixel input bandwidth required by display devices A and B. The graphics boards may also couple to system bus  (e.g. by crossbar switches or any other type of bus connectivity logic). The first graphics board in the linear chain is denoted GB(), and the generic Kgraphics board in the linear chain is denoted GB(K).","It is noted the graphics boards may be programmed to allocate all their processing resources to the generation of a single video signal when needed or desired. For example, some users\/customers may have a single high bandwidth display device. In this situation, all the graphics boards in graphics system  may be dedicated to one video channel, e.g. the channel which drives video signal V.","In one embodiment, host CPU  may transfer data to and\/or receive data from each graphics board GB(K) according to a programmed input\/output (I\/O) protocol over system bus . In a second embodiment, each graphics board GB(K) may access system memory  according to a direct memory access (DMA) protocol or through intelligent bus-mastering. In yet another embodiment, the graphics boards may be coupled to system memory  through a direct port, such as an Advanced Graphics Port (AGP) promulgated by Intel Corporation.","One or more graphics applications conforming to an application programming interface (API) such as OpenGL\u2122 or Java 3D\u00ae may execute on host CPU . The graphics application(s) may control a scene composed of geometric objects in a world coordinate system. Each object may comprise a collection of graphics primitives (e.g. triangles). The graphics application may compress the graphics primitives, and transfer the compressed graphics data to one or more of the graphics boards GB(), GB(), GB(), . . . , GB(R-).","The first graphics board GB() generates digital video streams Xand Y. The second graphics board GB() receives digital video streams Xand Yfrom the first graphics board GB(), and transmits digital video streams Xand Yto the third graphics board GB(). In general, graphics board GB(K), for K between  and (R-) inclusive, receives digital video streams Xand Yfrom a previous graphics board GB(K\u22121), and transmits digital video streams Xand Yto a next graphics board GB(K+1).","Each graphics board is responsible for filling in a portion of first video signal Vand\/or the second video signal V. Thus, each digital video stream Xmay be more \u201cfilled in\u201d than its predecessor X. The same observation holds for the digital video streams Y, Y, . . . , Y. The last graphics board GB(R-) receives digital video streams Xand Yfrom the next-to-last graphics board GB(R-), and generates digital video streams Xand Y. In addition to filling in the pixels for which it is responsible, the last graphics board GB(R-) converts the digital video streams Xand Yinto analog video signals Vand Vrespectively for presentation to display devices A and B respectively. Thus, the last graphics board GB(R-) includes D\/A conversion hardware. In one embodiment, the graphics boards are interchangeable, and thus, each of the graphics boards includes D\/A conversion hardware. It is noted that display device A and\/or B may be configured to receive digital video data, in which case the D\/A conversion may be bypassed.","It is noted that the graphics boards comprising 3-D graphics system  may couple to one or more busses of various types in addition to system bus . Furthermore, some or all of the graphics boards may couple to a communication port, and thereby, directly receive graphics data from an external source such as the Internet or a local area network.","Graphics boards may receive graphics data from any of various sources including: host CPU , system memory  or any other memory, external sources such as a local area network, or a broadcast medium (e.g. television). While graphics system  is depicted as part of computer system , graphics system  may also be configured as a stand-alone device.","Graphics system  may be comprised in any of various systems, including a network PC, a gaming play-station, an Internet appliance, a television (including an HDTV system or an interactive television system), or other devices which display 2D and\/or 3D graphics.",{"@attributes":{"id":"h-0006","num":"0000"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0081","num":"0080"},"figref":"FIG. 3","b":["1","90","162","0","1","178","178"]},"Graphics processing unit  may comprise any combination of processor technologies. For example, graphics processing unit  may comprise specialized graphics processors or calculation units, multimedia processors, DSPs, general purpose processors, programmable logic, reconfigurable logic, discrete logic, or any combination thereof. Graphics processing unit  may comprise one or more rendering units such as rendering units A\u2013D. Graphics processing unit  may also comprise one or more control units such as control unit , one or more data memories such as data memories A\u2013D, and one or more schedule units such as schedule unit . Sample buffer  may comprise one or more sample memories A\u2013N.","Graphics board GB(K) may include two digital video input ports for receiving digital video streams Xand Y(e.g. from a previous graphics board GB(K\u22121) in the linear chain of graphics boards). Similarly, graphics board GB(K) may include two digital video output ports for transmitting digital video streams Xand Yto the next graphics board GB(K+1) in cases where graphics board GB(K) is not the last graphics board in the linear chain.","The principles described herein for the configuration of a two-channel graphics board naturally generalize to an arbitrary number of video channels. The present invention contemplates a graphics board GB(K) which supports L video channels, where L is any positive integer. Thus, graphics board GB(K) may have L input ports and L output ports, L digital-to-analog converters, etc. The parameter L is limited by fundamental design constraints such as cost, maximum power consumption, maximum board area, etc.","A. Control Unit ","Control unit  operates as the interface between graphics board GB(K) and computer system  by controlling the transfer of data between graphics board GB(K) and computer system . In embodiments of graphics board GB(K) that comprise two or more rendering units A\u2013D, control unit  may also partition the stream of data received from computer system  into a corresponding number of parallel streams that are routed to the individual rendering units A\u2013D. The graphics data may be received from computer system  in a compressed form. Graphics data compression may advantageously reduce the data traffic between computer system  and graphics board GB(K). In one embodiment, control unit  may be configured to split and route the received data stream to rendering units A\u2013D in compressed form.","The graphics data may comprise one or more graphics primitives. As used herein, the term graphics primitive includes polygons, parametric surfaces, splines, NURBS (non-uniform rational B-splines), sub-division surfaces, fractals, volume primitives, and particle systems. These graphics primitives are described in detail in the text book entitled \u201cComputer Graphics: Principles and Practice\u201d by James D. Foley, et al., published by Addison-Wesley Publishing Co., Inc., 1996.","It is noted that the embodiments and examples of the invention presented herein are described in terms of polygons for the sake of simplicity. However, any type of graphics primitive may be used instead of or in addition to polygons in these embodiments and examples.","B. Rendering Units","Rendering units A\u2013D (also referred to herein as draw units) are configured to receive graphics instructions and data from control unit  and then perform a number of functions which depend on the exact implementation. For example, rendering units A\u2013D may be configured to perform decompression (if the received graphics data is presented in compressed form), transformation, clipping, lighting, texturing, depth cueing, transparency processing, set-up, visible object determination, and virtual screen rendering of various graphics primitives occurring within the graphics data. Rendering units A\u2013D are intended to represent an arbitrary number of rendering units.","The graphics data received by each rendering unit  may be decompressed into one or more graphics \u201cprimitives\u201d which may then be rendered. The term primitive refers to components of objects that define its shape (e.g., points, lines, triangles, polygons in two or three dimensions, polyhedra, or free-form surfaces in three dimensions). Each rendering unit  may be any suitable type of high performance processor (e.g., a specialized graphics processor or calculation unit, a multimedia processor, a digital signal processor, or a general purpose processor).","Graphics primitives or portions of primitives which survive a clipping computation may be projected onto a 2-D viewport. Instead of clipping in 3-D, graphics primitives may be projected onto a 2-D view plane (which includes the 2-D viewport) and then clipped with respect to the 2-D viewport.","Virtual screen rendering refers to calculations that are performed to generate samples for projected graphics primitives. For example, the vertices of a triangle in 3-D may be projected onto the 2-D viewport. The projected triangle may be populated with samples, and values (e.g. red, green, blue and z values) may be assigned to the samples based on the corresponding values already determined for the projected vertices. (For example, the red value for each sample in the projected triangle may be interpolated from the known red values of the vertices.) These sample values for the projected triangle may be stored in sample buffer . A virtual image accumulates in sample buffer  as successive primitives are rendered. Thus, the 2-D viewport is said to be a virtual screen on which the virtual image is rendered. The sample values comprising the virtual image are stored into sample buffer . Points in the 2-D viewport are described in terms of virtual screen coordinates x and y, and are said to reside in \u201cvirtual screen space\u201d. See  for an illustration of the two-dimensional viewport  populated with samples.","When the virtual image is complete, e.g., when all graphics primitives corresponding to a frame have been rendered, sample-to-pixel calculation units CU() through CU(V-) may read the rendered samples from sample buffer , and filter the samples to generate pixel values. Each sample-to-pixel calculation unit CU(J) may be assigned a region of the virtual screen space, and may operate on samples corresponding to the assigned region. It is generally advantageous for the union of these regions to cover 2-D viewport  to minimize waste of rendering bandwidth. Sample-to-pixel calculation units CU() through CU(V-) may operate in parallel.","In the embodiment of graphics board GB(K) shown in , rendering units A\u2013D calculate sample values instead of pixel values. This allows rendering units A\u2013D to perform super-sampling, i.e. to calculate more than one sample per pixel. Super-sampling in the context of the present invention is discussed more thoroughly below. More details on super-sampling are discussed in the following books:\n\n","Sample buffer  may be double-buffered so that rendering units A\u2013D may write samples for a first virtual image into a first portion of sample buffer , while a second virtual image is simultaneously read from a second portion of sample buffer  by sample-to-pixel calculation units CU.","C. Data Memories","Each of rendering units A\u2013D may be coupled to a corresponding one of instruction and data memories A\u2013D. In one embodiment, each of memories A\u2013D may be configured to store both data and instructions for a corresponding one of rendering units A\u2013D. While implementations may vary, in one embodiment, each data memory A\u2013D may comprise two 8 MByte SDRAMs, providing a total of 16 MBytes of storage for each of rendering units A\u2013D. In another embodiment, RDRAMs (Ram-bus DRAMs) may be used to support the decompression and set-up operations of each rendering unit, while SDRAMs may be used to support the draw functions of each rendering unit. Data memories A\u2013D may also be referred to as texture and render memories A\u2013D.","D. Schedule Unit","Schedule unit  may be coupled between rendering units A\u2013D and sample memories A\u2013N. Schedule unit  is configured to sequence the completed samples and store them in sample memories A\u2013N. Note in larger configurations, multiple schedule units  may be used in parallel. In one embodiment, schedule unit  may be implemented as a crossbar switch.","E. Sample Memories","Super-sampled sample buffer  comprises sample memories A\u2013N, which are configured to store the plurality of samples generated by rendering units A\u2013D. As used herein, the term \u201csample buffer\u201d refers to one or more memories which store samples. As previously noted, samples may be filtered to form each output pixel value. Output pixel values may be provided to display device A and\/or display device B.","Sample buffer  may be configured to support super-sampling, critical sampling, or sub\u2013sampling with respect to pixel resolution. In other words, the average distance between samples (X,Y) may be smaller than, equal to, or larger than the average distance between pixel centers in virtual screen space. Furthermore, because the convolution kernel C(X,Y) may take non-zero functional values over a neighborhood which spans several pixel centers, a single sample may contribute to several output pixel values.","Sample memories A\u2013N may comprise any of various types of memories (e.g., SDRAMs, SRAMs, RDRAMs, 3DRAMs, or next-generation 3DRAMs) in varying sizes. In one embodiment, each schedule unit  is coupled to four banks of sample memories, where each bank comprises four 3DRAM-64 memories. Together, the 3DRAM-64 memories may form a 116-bit deep super-sampled sample buffer that stores multiple samples per pixel. For example, in one embodiment, each sample memory A\u2013N may store up to sixteen samples per pixel. 3DRAM-64 memories are specialized memories configured to support full internal double buffering with single buffered Z in one chip. The double buffered portion comprises two RGBX buffers, where X. is a fourth channel that can be used to store other information (e.g., alpha). 3DRAM-64 memories also have a lookup table that takes in window ID information and controls an internal 2-1 or 3-1 multiplexer that selects which buffer's contents will be output. 3DRAM-64 memories are next-generation 3DRAM memories that may soon be available from Mitsubishi Electric Corporation's Semiconductor Group. In one embodiment, 32 chips used in combination are sufficient to create a double-buffered 1280\u00d71024 super-sampled sample buffer with eight samples per pixel.","Since the 3DRAM-64 memories are internally double-buffered, the input pins for each of the two frame buffers in the double-buffered system are time multiplexed (using multiplexers within the memories). The output pins may be similarly time multiplexed. This allows reduced pin count while still providing the benefits of double buffering. 3DRAM-64 memories further reduce pin count by not having z output pins. Since z comparison and memory buffer selection are dealt with internally, use of the 3DRAM-64 memories may simplify the configuration of sample buffer . For example, sample buffer  may require little or no selection logic on the output side of the 3DRAM-64 memories. The 3DRAM-64 memories also reduce memory bandwidth since information may be written into a 3DRAM-64 memory without the traditional process of reading data out, performing a z comparison or blend operation, and then writing data back in. Instead, the data may be simply written into the 3DRAM-64 memory, with the memory performing the steps described above internally.","However, in other embodiments of graphics board GB(K), other memories (e.g., SDRAMs, SRAMs, RDRAMs, or current generation 3DRAMs) may be used to form sample buffer .","Graphics processing unit  may be configured to generate a plurality of sample positions according to a particular sample positioning scheme (e.g., a regular grid, a perturbed regular grid, etc.). Alternatively, the sample positions (or offsets that are added to regular grid positions to form the sample positions) may be read from a sample position memory (e.g., a RAM\/ROM table). Upon receiving a polygon that is to be rendered, graphics processing unit  determines which samples fall within the polygon based upon the sample positions. Graphics processing unit  renders the samples that fall within the polygon and stores rendered samples in sample memories A\u2013N. Red, green, blue, alpha, z depth, and other per-sample values may also be calculated in the rendering process.","F. Sample-to-pixel Calculation Units","Sample-to-pixel calculation units CU() through CU(V-) (collectively referred to as sample-to-pixel calculation units CU) may be coupled together in a linear succession as shown in . The first sample-to-pixel calculation unit CU() in the linear succession may be programmed to receive digital video streams Xand Yfrom a previous graphics board GB(K\u22121), and the last sample-to-pixel calculation unit CU(V-) in the linear succession may be programmed to transmit digital video streams Xand Yto the next graphics board GB(K+1).","If graphics board GB(K) is the first graphics board in the linear chain of graphics boards shown in , first sample-to-pixel calculation unit CU() may be programmed to disable its input FIFOs since there is no previous board driving input signals Xand Y. If graphics board GB(K) is the last graphics board in the linear chain, the last sample-to-pixel calculation unit CU(V-) may be programmed to provide the digital video streams Xand Yto digital-to-analog conversion units A and B respectively.","In one alternative embodiment, the first graphics board in the linear chain of graphics boards may be configured to receive one or more video streams from one or more digital cameras. The video streams may be provided to input ports Xand Y","In cases where J takes a value between 1 and V-2 inclusive, sample-to-pixel calculation unit CU(J) is configured to receive digital video input streams Aand Bfrom a previous sample-to-pixel calculation unit CU(J\u22121), and to transmit digital video output streams Aand Bto the next sample-to-pixel calculation unit CU(J+1). The first sample-to-pixel calculation CU() is configured to receive digital video streams Xand Yfrom a previous graphics board GB(K\u22121), and to transmit digital video stream Aand Bto the second sample-to-pixel calculation unit CU(). For notational uniformity, the digital video streams Xand Yare also referred to as digital video streams Aand Brespectively. The last sample-to-pixel calculation unit CU(V-) receives digital video streams Aand Bfrom the previous sample-to-pixel calculation unit CU(V-), and generates digital video streams Xand Y(which are also referred to herein as video streams Aand B). Sample-to-pixel calculation unit CU(V-) may be programmed to supply the digital video streams Xand Yto a next graphics board GB(K+1) and\/or to DAC units A\/B.","Video streams X, X, . . . , Xgenerated by the linear chain of graphics boards, and video streams A, A, . . . , Agenerated by the sample-to-pixel calculation units in each of the graphics boards are said to belong to video stream A. Similarly, video streams Y, Y, . . . , Ygenerated by the linear chain of graphics boards, and video streams B, B, . . . , Bgenerated by the sample-to-pixel calculation units in each of the graphics boards are said to belong to video stream B.","As described above, rendering units A\u2013D are configured to generate samples for graphics primitives, and to store the samples into sample buffer . As successive graphics primitives are rendered, a sampled virtual image accumulates in sample buffer . When the sampled virtual image is complete, i.e., when all graphics primitives comprising the virtual image have been rendered, each sample-to-pixel calculation unit CU(J) may access samples of the virtual image from sample buffer , and may filter the samples to generate pixel values. Each sample-to-pixel calculation unit CU(J) may operate on samples residing in a corresponding region of the virtual screen space. The region assigned to each sample-to-pixel calculation unit CU(J) may be programmed at system initialization time. Often, it is desirable for the union of the regions to cover 2-D viewport . Thus, the sample-to-pixel calculation units may partition the labor of transforming sample values into pixel values.","Sample-to-pixel calculation unit CU(J) may perform a spatial convolution of a portion of the sampled virtual image with respect to a convolution kernel C(x,y) to generate pixel values. For example, a red value Rfor a pixel P may be computed at a location (x,y) in virtual screen space based on the relation \n\n\nwhere the summation is evaluated at samples (x,y) in the vicinity of location (x,y). Since convolution kernel C(x,y) is non-zero only in a neighborhood of the origin, the displaced kernel C(x\u2212x, y\u2212y) may take non-zero values only in a neighborhood of location (x,y).\n","The value E is a normalization value that may be computed according to the relation\n\n(),\n\nwhere the summation is evaluated for the same samples (x,y) as in the red pixel value summation above. The summation for the normalization value E may be performed in parallel with the red pixel value summation. The location (x,y) may be referred to herein as a virtual pixel center or virtual pixel origin.  shows the support  (i.e. footprint) of a convolution kernel. In this case, the virtual pixel center (x,y) corresponds to the center of the support disk .\n","Similar summations may be performed to compute green, blue and alpha pixel values in terms of the green, blue and alpha sample values respectively. An adder tree may be employed to speed up the computation of such summations. Two or more adder trees may be employed in a parallel fashion, i.e. to concurrently perform two or more of the red, green, blue, alpha and normalization constant summations.","Sample-to-pixel calculation unit CU(J) mixes (e.g. blends or injects) the pixel values it computes into either video stream A or video stream B. The assignment of sample-to-pixel calculation unit CU(J) to video stream A or video stream B may be performed at system initialization time. For example, if sample-to-pixel calculation unit CU(J) has been assigned to video stream A, sample-to-pixel calculation unit CU(J) mixes its computed pixel values into video stream A, and passes video stream B unmodified to the next sample-to-pixel calculation unit CU(J+1), or next graphics board. In other words, sample-to-pixel calculation unit CU(J) mixes at least a subset of the dummy pixel values present in video stream Awith its locally computed pixel values. The resultant video stream Ais transmitted to the next sample-to-pixel calculation unit or graphics board.","In one embodiment, sample-to-pixel calculation units CU(J) may implement a super-sampled reconstruction band-pass filter to compute pixel values from samples stored in sample buffer . The support of the band-pass filter may cover a rectangular area in virtual screen space which is Mpixels high and Npixels wide. Thus, the number of samples covered by the band-pass filter is approximately equal to MNS, where S is the number of samples per pixel region. A variety of values for M, Nand S are contemplated. For example, in one embodiment of the band-pass filter M=N=5. It is noted that with certain sample positioning schemes (see the discussion attending , B and C), the number of samples that fall within the filter support may vary as the filter center (i.e. the virtual pixel center) is moved in the virtual screen space.","In other embodiments, sample-to-pixel calculation units CU(J) may filter a selected number of samples to calculate an output pixel value. The selected samples may be multiplied by a spatial weighting function that gives weights to samples based on their position with respect to the filter center (i.e. the virtual pixel center).","Any of a variety of filters may be used either alone or in combination, e.g., the box filter, the tent filter, the cone filter, the cylinder filter, the Gaussian filter, the Catmull-Rom filter, the Mitchell-Netravali filter, the windowed sinc filter, or in general, any form of bandpass filter or any of various approximations to the sinc filter. Furthermore, the support of the filters used by sample-to-pixel calculation unit CU(J) may be circular, elliptical, rectangular (e.g. square), triangular, hexagonal, etc.","Sample-to-pixel calculation unit CU(J) may also be configured with one or more of the following features: color look-up using pseudo color tables, direct color, inverse gamma correction, and conversion of pixels to non-linear light space. Other features of sample-to-pixel calculation unit CU(J) may include programmable video timing generators, programmable pixel clock synthesizers, cursor generators, and crossbar functions.","G. Digital-to-Analog Converters","Digital-to-analog converter (DAC) A receives digital video stream Xfrom last sample-to-pixel calculation unit CU(V-), and converts digital video stream Xinto an analog video signal Vfor transmission to display device A. Similarly, DAC B receives digital video stream Yfrom last sample-to-pixel calculation unit CU(V-), and converts digital video stream Yinto an analog video signal Vfor transmission to display device B. Digital-to-Analog Converters (DACs) A and B are collectively referred to herein as DACs . It is noted that DACs  may be disabled in all graphics boards except for the last graphics board GB(R-) which is physically coupled to display devices A and B. See .","In the preferred embodiment, last sample-to-pixel calculation unit CU(V-) provides digital video stream Xto DAC A without an intervening frame buffer. Similarly, last sample-to-pixel calculation unit CU(V-) provides digital video stream Yto DAC B without an intervening frame buffer. However, in one alternative embodiment, one or more frame buffers and\/or line buffers intervene between last sample-to-pixel calculation unit CU(V-) and DAC A and\/or DAC B.","DAC A and\/or DAC B may be bypassed or omitted completely in order to output digital pixel data in lieu of analog video signals. This may be useful where display devices A and\/or B are based on a digital technology (e.g., an LCD-type display, an LCOS display, or a digital micro-mirror display).","It is noted that various embodiments of graphics board GB(K) are contemplated with varying numbers of render units , and varying numbers of sample-to-pixel calculation units CU. Furthermore, alternative embodiments of graphics board GB(K) are contemplated for generating more than (or less than) two simultaneous video streams.",{"@attributes":{"id":"h-0007","num":"0000"},"figref":"FIGS. 5A\u2013C"},{"@attributes":{"id":"p-0128","num":"0130"},"figref":"FIG. 5A","b":["74","70","150"]},"Turning now to , an example of one embodiment of super-sampling is illustrated. In this embodiment, two samples are computed per pixel region. For example, samples A and B are located in pixel region  which is denoted in cross hatch. The samples are distributed according to a regular grid. Even though there are more samples than pixels in , output pixel values could be computed using one sample per pixel, e.g. by throwing out all but the sample nearest to the center of each pixel. However, a number of advantages arise from computing pixel values based on multiple samples.","A support region  is superimposed over the center pixel (corresponding to the center square) of , and illustrates the support (i.e. the domain of definition) of a convolution filter. The support of a filter is the set of locations over which the filter is defined. In this example, the support region  is a circular disc. The output pixel values (e.g. red, green, blue and alpha values) for the center pixel are determined only by samples C and D, because these are the only samples which fall within support region . This filtering operation may advantageously improve the realism of a displayed image by smoothing abrupt edges in the displayed image (i.e., by performing anti-aliasing). The filtering operation may simply average the values of samples C and D to form the corresponding output values for the center pixel. More generally, the filtering operation may generate a weighted sum of the values of samples C and D, where the contribution of each sample is weighted according to some function of the sample's position (or distance) with respect to the center of support region . The filter, and thus support region , may be repositioned for each output pixel being calculated. For example, the filter center may visit the center of each pixel region for which pixel values are to be computed. Other filters and filter positioning schemes are also possible and contemplated.","In the example of , there are two samples per pixel. In general, however, there is no requirement that the number of samples be related to the number of pixels. The number of samples may be completely independent of the number of pixels. For example, the number of samples may be smaller than the number of pixels.","Turning now to , another embodiment of super-sampling is illustrated. In this embodiment, the samples are positioned randomly. Thus, the number of samples used to calculate output pixel values may vary from pixel to pixel. Render units A\u2013D calculate color information at each sample position.",{"@attributes":{"id":"h-0008","num":"0000"},"figref":"FIGS. 6\u201312"},{"@attributes":{"id":"p-0133","num":"0135"},"figref":"FIG. 6","b":["350","352","352","140","150","152","154","350"]},"In addition to the vertex data, draw process  (which may be performed by rendering units A\u2013D) also receives sample position information from a sample position memory . The sample position information defines the location of samples in virtual screen space, i.e. in the 2-D viewport. Draw process  selects the samples that fall within the polygon currently being rendered, calculates a set of values (e.g. red, green, blue, z, alpha, and\/or depth of field information) for each of these samples based on their respective positions within the polygon. For example, the z value of a sample that falls within a triangle may be interpolated from the known z values of the three vertices. Each set of computed sample values are stored into sample buffer .","In one embodiment, sample position memory  is embodied within rendering units A\u2013D. In another embodiment, sample position memory  may be realized as part of data memories A\u2013D, or as a separate memory.","Sample position memory  may store sample positions in terms of their virtual screen coordinates (x,y). Alternatively, sample position memory  may be configured to store only offsets dx and dy for the samples with respect to positions on a regular grid. Storing only the offsets may use less storage space than storing the entire coordinates (x,y) for each sample. The sample position information stored in sample position memory  may be read by a dedicated sample position calculation unit (not shown) and processed to calculate sample positions for graphics processing unit . More detailed information on the computation of sample positions is included below.","In another embodiment, sample position memory  may be configured to store a table of random numbers. Sample position memory  may also comprise dedicated hardware to generate one or more different types of regular grids. This hardware may be programmable. The stored random numbers may be added as offsets to the regular grid positions generated by the hardware. In one embodiment, sample position memory  may be programmable to access or \u201cunfold\u201d the random number table in a number of different ways, and thus, may deliver more apparent randomness for a given length of the random number table. Thus, a smaller table may be used without generating the visual artifacts caused by simple repetition of sample position offsets.","Sample-to-pixel calculation process  uses the same sample positions as draw process . Thus, in one embodiment, sample position memory  may generate a sequence of random offsets to compute sample positions for draw process , and may subsequently regenerate the same sequence of random offsets to compute the same sample positions for sample-to-pixel calculation process . In other words, the unfolding of the random number table may be repeatable. Thus, it may not be necessary to store sample positions at the time of their generation for draw process .","As shown in , sample position memory  may be configured to store sample offsets generated according to a number of different schemes such as a regular grid (e.g. a rectangular grid, hexagonal grid, etc.), a perturbed regular grid, or a random (stochastic) distribution. Graphics board GB(K) may receive an indication from the operating system, device driver, or the geometry data  that indicates which type of sample positioning scheme is to be used. Thus, sample position memory  may be configurable or programmable to generate position information according to one or more different schemes.","In one embodiment, sample position memory  may comprise a RAM\/ROM that contains stochastically determined sample points or sample offsets. Thus, the density of samples in virtual screen space may not be uniform when observed at small scale. Two regions with equal area centered at different locations in virtual screen space may contain different numbers of samples.","An array of bins may be superimposed over the 2-D viewport  of , and the storage of samples in sample buffer  may be organized in terms of bins. Sample buffer  may comprise an array of memory blocks which correspond to the bins. Each memory block may store the sample values (e.g. red, green, blue, z, alpha, etc.) for the samples that fall within the corresponding bin. (See the exploded view of Bin #I in .) The approximate location of a sample is given by the bin in which it resides. The memory blocks may have addresses which are easily computable from the corresponding bin locations in virtual screen space, and vice versa. Thus, the use of bins may simplify the storage and access of sample values in sample buffer .","Suppose (for the sake of discussion) that the 2-D viewport  ranges from (0000,0000) to (FFFF,FFFF) in hexadecimal virtual screen coordinates. Also suppose that 2-D viewport  is overlaid with a rectangular array of bins whose lower-left corners reside at the locations (XX00,YY00) where XX and YY independently run from 0\u00d700 to 0\u00d7FF. Thus, there are 256 bins in each of the vertical and horizontal directions with each bin spanning a square in virtual screen space with side length of 256. Suppose that each memory block is configured to store sample values for up to 16 samples, and that the set of sample values for each sample comprises 4 bytes. In this case, the address of the memory block corresponding to the bin located at (XX00,YY00) may be simply computed by the relation BinAddr=(XX+YY*256)*16*4. For example, the sample S=(1C3B,23A7) resides in the bin located at (1C00,2300). The sample value set for sample S is then stored in the memory block residing at address 0\u00d78C700=(0\u00d7231C)(0\u00d740) in sample buffer .","The bins may tile the 2-D viewport in a regular array, e.g. in a square array, rectangular array, triangular array, hexagonal array, etc., or in an irregular array. Bins may occur in a variety of sizes and shapes. The sizes and shapes may be programmable. The maximum number of samples that may populate a bin is determined by the storage space allocated to the corresponding memory block. This maximum number of samples is referred to herein as the bin sample capacity, or simply, the bin capacity. The bin capacity may take any of a variety of values. The bin capacity value may be programmable. Henceforth, the memory blocks in sample buffer  which correspond to the bins in virtual screen space will be referred to as memory bins.","The specific position of each sample within a bin may be determined by looking up the sample's offset in the RAM\/ROM table, i.e., the sample's offset with respect to the bin position (e.g. the lower-left corner or center of the bin, etc.). However, depending upon the implementation, not all choices for the bin capacity may have a unique set of offsets stored in the RAM\/ROM table. Offsets for a first bin capacity value may be determined by accessing a subset of the offsets stored for a second larger bin capacity value. In one embodiment, each bin capacity value supports at least four different sample positioning schemes.","In one embodiment, sample position memory  may store pairs of 8-bit numbers, each pair comprising an x-offset and a y-offset. (Other offsets are also possible, e.g., a time offset, a z-offset, etc.) When added to a bin position, each pair defines a particular position in virtual screen space, i.e. in 2-D viewport . To improve read access times, sample position memory  may be constructed in a wide\/parallel manner so as to allow the memory to output more than one sample location per read cycle.","Once the sample positions have been read from sample position memory , draw process  selects the samples that fall within the polygon currently being rendered. Draw process  may then calculate per-sample values such as color, z depth and alpha for each of these interior samples and stores the per-sample values into sample buffer . In one embodiment, sample buffer  may only single-buffer z values (and perhaps alpha values) while double-buffering other sample components such as color. Unlike prior art systems, graphics system  may use double-buffering for all samples (although not all components of each sample may be double-buffered, i.e., the samples may have some components that are not double-buffered). In one embodiment, the samples are stored into sample buffer  in bins. In some embodiments, the bin capacity may vary from frame to frame. In addition, the bin capacity may vary spatially for bins within a single frame rendered into sample buffer . For example, bins on the edge of 2-D viewport  may have a smaller bin capacity than bins corresponding to the center of 2-D viewport . Since viewers are likely to focus their attention mostly on the center of a displayed image, more processing bandwidth may be dedicated to providing enhanced image quality in the center of 2-D viewport . Note that the size and shape of bins may also vary from region to region, or from frame to frame. The use of bins will be described in greater detail below in connection with .","For additional information on generating sample positions according to various sample positioning scheme, please refer to U.S. patent application Ser. No. 09\/251,840 filed on Feb. 17, 1999 entitled \u201cA Graphics System With A Variable-Resolution Sampler Buffer\u201d which is hereby incorporated by reference.","Filter process  represents the action of sample-to-pixel calculation units CU in generating digital video streams Xand Ywhich are transmitted to the next graphics board GB(K+1), or converted into video signals Vand Vfor presentation to display devices A and B. Thus, any description of sample-to-pixel calculation units CU may be interpreted as a description of filter process . Filter process  operates in parallel with draw process .","Generic sample-to-pixel calculation unit CU(J) is configured to (a) read sample positions from sample position memory , (b) read corresponding sample values from sample buffer , (c) filter the sample values, and (d) mix (e.g. blend or multiplex) the resulting pixel values into video stream A or B. Sample-to-pixel calculation unit CU(J) generates the red, green, blue and alpha values for an output pixel based on a spatial filtering of the corresponding data for a selected plurality of samples, e.g. samples falling in a neighborhood of a pixel center. In one set of embodiments, sample-to-pixel calculation unit CU(J) is configured to: (i) determine the distance of each sample from the pixel center; (ii) multiply each sample's attribute values (e.g., red, green, blue, alpha) by a filter weight that is a specific (programmable) function of the sample's distance; (iii) generate sums of the weighted attribute values, one sum per attribute (e.g. a sum for red, a sum for green, . . . ), and (iv) normalize the sums to generate the corresponding pixel attribute values.","In the set of embodiments just described, the filter kernel is a function of distance from the pixel center. However, in alternative embodiments, the filter kernel may be a more general function of x and y displacements from the pixel center. Also, the support of the filter, i.e. the domain of definition of the filter kernel, may not be a circular disk.",{"@attributes":{"id":"p-0151","num":"0153"},"figref":"FIG. 7","b":["354","354","354","354","354","354","354","354","354","354","360","354","354","354","352","354","360","354","354","352","360"]},"Yet another alternative embodiment may store tags with the sample values in super-sampled sample buffer . These tags may be used to look-up the offsets (i.e. perturbations) dx and dy associated with each particular sample.","FIG. \u2014Converting Samples into Pixels","As discussed earlier, 2-D viewport  may be covered with an array of spatial bins. Each spatial bin may be populated with samples whose positions are determined by sample position memory . Each spatial bin corresponds to a memory bin in sample buffer . A memory bin stores the sample values (e.g. red, green, blue, z, alpha, etc.) for the samples that reside in the corresponding spatial bin. Sample-to-pixel calculation units CU (also referred to as convolve units CU) are configured to read memory bins from sample buffer  and to generate pixel values from the sample values contained within the memory bins.",{"@attributes":{"id":"p-0154","num":"0156"},"figref":["FIG. 8","FIG. 8"],"b":["420","0","1","2","3","0","3","1","1","162"]},{"@attributes":{"id":"p-0155","num":"0157"},"figref":["FIG. 8","FIG. 8"]},"The amount of the overlap between columns may depend upon the horizontal diameter of the filter support for the filter kernel being used. The example shown in  illustrates an overlap of two bins. Each square (such as square ) represents a single bin comprising one or more samples. Advantageously, this configuration may allow sample-to-pixel calculation units CU to work independently and in parallel, with each sample-to-pixel calculation units CU(J) receiving and convolving samples residing in the memory bins of the corresponding column. Overlapping the columns will prevent visual bands or other artifacts from appearing at the column boundaries for any operators larger than a pixel in extent.","Furthermore, the embodiment of  may include a plurality of bin caches  which couple to sample buffer . In addition, each of bin caches  couples to a corresponding one of sample-to-pixel calculation units CU. Bin cache -I (where I takes any value from zero to three) stores a collection of memory bins from Column I, and serves as a cache for sample-to-pixel calculation unit CU(I). Bin cache -I may have an optimized coupling to sample buffer  which facilitates access to the memory bins for Column I. Since the convolution calculation for two adjacent convolution centers may involve many of the same memory bins, bin caches  may increase the overall access bandwidth to sample buffer .",{"@attributes":{"id":"p-0158","num":"0160"},"figref":"FIG. 9A","b":["162","400","406","400","176","402","404","176","400","400"],"sub":["L ","L ","V ","L ","V "]},"After completing convolution computations at a convolution center, convolution filter kernel  shifts to the next convolution center. Kernel  may be visualized as proceeding horizontally within Column I in the direction indicated by arrow . When kernel  reaches the right boundary  of Column I, it may shift down one or more bin rows, and then, proceed horizontally starting from the left column boundary . Thus the convolution operation proceeds in a scan line fashion, generating successive rows of output pixels for display.","In one embodiment, the cache line-depth parameter Nis set equal to N+1. In the example of , the filter support covers N=5 bins vertically. Thus, the cache line-depth parameter N=6=5+1. The additional bin row in bin cache -I allows the processing of memory bins (accessed from bin cache -I) to be more substantially out of synchronization with the loading of memory bins (into bin cache -I) than if the cache line-depth parameter Nwere set at the minimum value N.","In one embodiment, sample buffer  and bin cache -I may be configured for row-oriented burst transfers. If a request for a memory bin misses in bin cache -I, the entire bin row containing the requested memory bin may be fetched from sample buffer  in a burst transfer. Thus, the first convolution of a scan line may fill the bin cache -I with all the memory bins necessary for all subsequent convolutions in the scan line. For example, in performing the first convolution in the current scan line at the first convolution center , sample-to-pixel calculation unit CU(I) may assert a series of requests for memory bins, i.e. for the memory bins corresponding to those spatial bins (rendered in shade) which intersect the support of filter kernel . Because the filter support  intersects five bin rows, in a worst case scenario, five of these memory bin requests will miss bin cache -I and induce loading of all five bin rows from sample buffer . Thus, after the first convolution of the current scan line is complete, bin cache -I may contain the memory bins indicated by the heavily outlined rectangle . Memory bin requests asserted by all subsequent convolutions in the current scan line may hit in bin cache -I, and thus, may experience significantly decreased bin access time.","In general, the first convolution in a given scan line may experience fewer than the worst case number of misses to bin cache -I because bin cache -I may already contain some or all of the bin rows necessary for the current scan line. For example, if convolution centers are located at the center of each spatial bin, the vertical distance between successive scan lines (of convolution centers) corresponds to the distance between successive bin rows, and thus, the first convolution of a scan line may induce loading of a single bin row, the remaining four bin rows having already been loaded in bin cache -I in response to convolutions in previous scan lines.","If the successive convolution centers in a scan line are expected to depart from a purely horizontal trajectory across Column I, the cache line-depth parameter Nmay be set to accommodate the maximum expected vertical deviation of the convolution centers. For example, in , the convolution centers follow a curved path across Column I. The curved path deviates from a horizontal path by approximately two bins vertically. Since the support of the filter kernel covers a 3 by 3 array of spatial bins, bin cache -I may advantageously have a cache line-depth Nof at least five (i.e. two plus three).","As mentioned above, Columns 0 through 3 of 2-D viewport  may be configured to overlap horizontally. The size of the overlap between adjacent Columns may be configured to accommodate the maximum expected horizontal deviation of convolution centers from nominal convolution centers on a rectangular grid.",{"@attributes":{"id":"h-0010","num":"0000"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0165","num":"0167"},"figref":["FIG. 10","FIG. 10"],"b":["200","102","106","202","150","204","150","150","206","208"]},"If graphics board GB(K) implements variable resolution super-sampling, then the triangles may be compared with a set of sample-density region boundaries (step B). In variable-resolution super-sampling, different regions of 2-D viewport  may be allocated different sample densities based upon a number of factors (e.g., the center of the attention of an observer as determined by eye or head tracking). If the triangle crosses a sample-density region boundary (step ), then the triangle may be divided into two smaller polygons along the region boundary (step ). The polygons may be further subdivided into triangles if necessary (since the generic slicing of a triangle gives a triangle and a quadrilateral). Thus, each newly formed triangle may be assigned a single sample density. In one embodiment, graphics board GB(K) may be configured to render the original triangle twice, i.e. once with each sample density, and then, to clip the two versions to fit into the two respective sample density regions.","In step , one of the sample positioning schemes (e.g., regular, perturbed regular, or stochastic) is selected from sample position memory . The sample positioning scheme will generally have been pre-programmed into the sample position memory , but may also be selected \u201con the fly\u201d. In step , rendering units A\u2013D may determine which spatial bins contain samples located within the triangle's boundaries, based upon the selected sample positioning scheme and the size and shape of the spatial bins. In step , the offsets dx and dy for the samples within these spatial bins are then read from sample position memory . In step , each sample's position is then calculated using the offsets dx and dy and the coordinates of the corresponding bin origin, and is compared with the triangle's edges to determine if the sample is within the triangle.","For each sample that is determined to be within the triangle, one of rendering units A\u2013D draws the sample by calculating the sample's color, alpha and other attributes. This may involve a lighting calculation and an interpolation based upon the color and texture map information associated with the vertices of the triangle. Once the sample is rendered, it may be forwarded to schedule unit , which then stores the sample in sample buffer  (as indicated in step ).","The embodiment of the rendering method described above is used for explanatory purposes only and is not meant to be limiting. For example, in some embodiments, the steps shown in  as occurring serially may be implemented in parallel. Furthermore, some steps may be reduced or eliminated in certain embodiments of the graphics system (e.g., steps \u2013 in embodiments that do not implement geometry compression, or steps \u2013 in embodiments that do not implement a variable resolution super-sampled sample buffer).","FIG. \u2014Generating Output Pixel Values from Sample Values",{"@attributes":{"id":"p-0170","num":"0172"},"figref":["FIG. 11","FIG. 9A"],"b":["162","250","162","252","176","254","400"]},"Each sample in the selected bins (i.e. bins that have been identified in step ) is then individually examined to determine if the sample does indeed contribute (as indicated in steps \u2013) to the current output pixel. This determination may be based upon the distance (or position) of the sample from (with respect to) the filter center.","In one embodiment, sample-to-pixel calculation units CU may be configured to calculate this sample distance (i.e., the distance of the sample from the filter center) and then use it to index into a table storing filter weight values (as indicated in step ). In another embodiment, however, the potentially expensive calculation for determining the distance from the center of the pixel to the sample (which typically involves a square root function) may be avoided by using distance squared to index into the table of filter weights. In one embodiment, this squared-distance indexing scheme may be facilitated by using a floating point format for the squared distance (e.g., four or five bits of mantissa and three bits of exponent), thereby allowing much of the accuracy to be maintained while compensating for the increased range in values. In one embodiment, the table of filter weights may be implemented in ROM. However, RAM tables may also be used. Advantageously, RAM tables may, in some embodiments, allow sample-to-pixel calculation unit CU(J) to vary the filter coefficients on a per-frame or per-session basis. For example, the filter coefficients may be varied to compensate for known shortcomings of display devices A\/B or to accommodate the user's personal preferences.","The filter coefficients may also vary as a function of filter center position within the 2-D viewport , or on a per-output pixel basis. In one embodiment, specialized hardware (e.g., multipliers and adders) may be used to compute filter weights for each sample. Samples which fall outside the support of filter kernel  may be assigned a filter weight of zero (step ), or they may be excluded from the calculation entirely.","In one alternative embodiment, the filter kernel may not be expressible as a function of distance with respect to the filter center. For example, a pyramidal tent filter is not expressible as a function of Euclidean distance from the filter center. Thus, filter weights may be tabulated (or computed) in terms of x and y sample-displacements with respect to the filter center, or with respect to a non-Euclidean distance from the filter center.","Once the filter weight for a sample has been determined, the attribute values (e.g. red, green, blue, alpha, etc.) for the sample may then be multiplied by the filter weight (as indicated in step ). Each of the weighted attribute values may then be added to a corresponding cumulative sum\u2014one cumulative sum for each attribute\u2014as indicated in step . The filter weight itself may be added to a cumulative sum of filter weights (as indicated in step ). Step  may be performed in parallel with step  and\/or .","After all samples residing in the support of the filter have been processed, the cumulative sums of the weighted attribute values may be divided by the cumulative sum of filter weights (as indicated in step ). It is noted that the number of samples which fall within the filter support may vary as the filter center moves within the 2-D viewport. The normalization step  compensates for the variable gain which is introduced by this nonuniformity in the number of included samples, and thus, prevents the computed pixel values from appearing too bright or too dark due to the sample number variation. Finally, the normalized output pixels may be gamma corrected, and mixed (e.g. blended or multiplexed) into video stream A or video stream B as indicated by step .","FIG. \u2014Example Output Pixel Convolution",{"@attributes":{"id":"p-0177","num":"0179"},"figref":"FIG. 12","b":["288","288","288","296","294","292","290","290"]},"Example attribute values for samples \u2013 are illustrated in boxes \u2013. In this example, each sample comprises red, green, blue and alpha values, in addition to the sample's positional data. Block  illustrates the calculation of each pixel attribute value prior to normalization. As previously noted, the filter values may be summed to obtain a normalization value . Normalization value  is used to divide out the unwanted gain arising from the non-constancy of the number of samples captured by the filter support. Block  illustrates the normalization process and the final normalized pixel attribute values.","The filter presented in  has been chosen for descriptive purposes only and is not meant to be limiting. A wide variety of filters may be used for pixel value computations depending upon the desired filtering effect(s), e.g., filters such as a box filter, a tent filter, a cylinder filter, a cone filter, a Gaussian filter, a Catmull-Rom filter, a Mitchell-Netravali filter, or any windowed approximation of a sinc filter. It is a well known fact that the sinc filter realizes an ideal band-pass filter. However, the sinc filter takes non-zero values over the whole of the x-y plane. Thus, various windowed approximations of the sinc filter have been developed. Some of these approximations such as the cone filter or Gaussian filter approximate only the central lobe of the sinc filter, and thus, achieve a smoothing effect on the sampled image. Better approximations such as the Mitchell-Netravali filter (including the Catmull-Rom filter as a special case) are obtained by modeling the negative lobes which surround the central positive lobe of the sinc filter. The negative lobes allows a filter to more effectively retain spatial frequencies up to the cutoff frequency and reject spatial frequencies beyond the cutoff frequency. A negative lobe is a portion of a filter where the filter values are negative. Thus, some of the samples residing in the support of a filter may be assigned negative filter values (i.e. filter weights). In addition, the support of the filters used for the pixel value convolutions may be circular, elliptical, rectangular (e.g. square), triangular, hexagonal, etc.","The piecewise constant filter function shown in  with four constant regions is not meant to be limiting. For example, in one embodiment the convolution filter may have a large number of regions each with an assigned filter value (which may be positive, negative or zero). In another embodiment, the convolution filter may be a continuous function that is evaluated for each sample based on the sample's distance (or x and y displacements) from the pixel center. Also note that floating point values may be used for increased precision.","As mentioned above (see  and attending description) graphics system  may comprise one or more graphics boards (also referred to herein as graphics pipe-lines) coupled together in a linear chain. Each graphics board GB(K) includes a number Vof sample-to-pixel calculation units CU which form a linear succession. The union of all sample-to-pixel calculation units CU comprised within all graphics boards form a linear array. For example, in , the eight sample-to-pixel calculation units comprised within graphics board GB() and GB() form a linear array. The Jsample-to-pixel calculation unit on graphics board GB(I) is denoted CU(I,J). As described above, the graphics boards contain components other than the sample-to-pixel calculation units. However, in , these other components have been suppressed for the sake of diagrammatical simplicity.","The linear array of sample-to-pixel calculation units generates one or more video signals for presentation to a collection of one or more display devices. For example, the linear array of sample-to-pixel calculation units may generate two video signals Vand Vfor presentation to display devices A and B respectively. Each sample-to-pixel calculation unit CU(I,J) in the linear array may be assigned to either video stream A or video stream B. The sample-to-pixel calculation units assigned to a video stream are referred to as a video group. For example, in the example of , sample-to-pixel calculation units CU(,) and CU(,) belong to video group A, and sample-to-pixel calculation units CU(,), CU(,), CU(,), CU(,), CU(,), CU(,) belong to video group B. Such an assignment of resources may be appropriate when video signal Vhas a pixel bandwidth that is approximately three times larger than video signal V.","Sample-to-pixel calculation units CU(I,J) in video group A generate pixel values for video signal V. Similarly, sample-to-pixel calculation units CU(I,J) in video group B generate pixel values for video signal V. The two video streams are independent in their resolution and timing because they are driven by independent pixel clocks. Each sample-to-pixel calculation unit CU(I,J) in the linear array is configured to receive both pixel clocks, and may be programmed to respond to either of the pixel clocks.","Sample-to-pixel calculation unit CU(I,J) generates video stream Aand B, and passes these video streams on to the next sample-to-pixel calculation unit on the same graphics board or the next graphics board. Video streams Amay be interpreted as video stream A in varying stages of completion. Similarly, video streams Bmay be interpreted as video stream B in varying stages of completion.","The first sample-to-pixel calculation unit in a video group is referred to as the lead sample-to-pixel calculation unit. Second and subsequent sample-to-pixel calculation units in a video group are referred to herein as slave units. The sample-to-pixel calculation units in the video group cooperatively generate a video stream S (i.e. where S equals A or B). The video stream may originate inside the lead sample-to-pixel calculation unit as a stream of dummy pixels. The dummy pixels serve as timing place-holders, and may have a default color. Each sample-to-pixel calculation unit in the video group (including the lead unit) modifies the video stream, i.e. contributes locally generated image pixels to the video stream at appropriate times, and synchronously forwards the modified video stream to the next sample-to-pixel calculation unit in the video group. Each sample-to-pixel calculation unit in the video group receives a common pixel clock signal, and transmits a synchronous version of the pixel clock, embedded in the modified video stream, to the next sample-to-pixel calculation unit. Thus, the video signal S matures, in successive stages, from a signal comprising all dummy pixels to a signal comprising all (or mostly) image pixels as it passes through the sample-to-pixel calculation units of the video group.","Each sample-to-pixel calculation unit in the video group contributes its locally generated pixels to the video signal at times determined by a set of counters, boundary registers and boundary comparators internal to the sample-to-pixel calculation unit. The internal counters include a horizontal pixel counter and a vertical line counter. Each sample-to-pixel calculation unit (a) counts successive pixels and lines in the video stream in response to the synchronous pixel clock received in the video stream from the previous sample-to-pixel calculation unit, and (b) contributes locally generated pixels to the video stream when the local pixel count and line count reside within a predefined region as determined by the local boundary registers and boundary comparators. The regions assigned to the sample-to-pixel calculation units in the video group may be configured to tile a two-dimensional managed area.","In addition, the lead sample-to-pixel calculation unit (a) embeds a vertical reset pulse into the video stream when its local counters indicate the beginning of a frame, and (b) embeds a horizontal reset pulse into the video stream when its local counters indicate the beginning of a line. The reset pulses are treated like pixel data and passed from one sample-to-pixel calculation unit to the next with the video stream. Each slave unit may reset its horizontal pixel counter when it receives the horizontal reset pulse, and may reset both its horizontal pixel counter and its vertical line counter when it receives the vertical reset pulse. Thus, the lead unit controls video timing for the whole group.","A software program (e.g. a graphics application program) running on host CPU  may control a global managed area as shown in . Each video group is assigned a corresponding subregion of the global managed area. The subregion assigned to video group A is referred to as channel A, and the subregion assigned to video group B is referred to as channel B. The situation of channel A in the global managed area determines the video contents of video signal V. Similarly, the situation of channel B in the global managed area determines the video contents of video signal V. Often, channel A and channel B are chosen so that their union covers the global managed area.",{"@attributes":{"id":"p-0189","num":"0191"},"figref":"FIG. 14B","b":["84","84","84","84"]},{"@attributes":{"id":"p-0190","num":"0192"},"figref":"FIG. 14C","b":["84","84"]},"It is not required that a video channel be contained within the global managed area as suggested by . In this example, channel A extends outside the global managed area. The portion of channel A which lies inside the global managed area may be assigned image content. Portions of channel A which lie outside the global managed area (i.e. the left and right margins) are assigned dummy pixel values, e.g., pixel values having a predefined background color. This arrangement of channel A with respect to the global managed area illustrates one mechanism for performing \u201cletter boxing\u201d.","One or more software programs running on host computer  may set up two global managed areas as shown in . Typically, channel A is assigned so as to cover global managed area A, and channel B is assigned so as to cover global managed area B. The two global managed areas may contain independent video information.","To maximize the flexibility of the graphics system , it is desirable to assign sample-to-pixel calculation units CU(I,J) to video group A or video group B on a persession basis, rather than fixing the allocation in hard wiring. To facilitate such dynamic allocation, both video stream A and video stream B flow through all the sample-to-pixel calculation units comprising the linear array. In this fashion, it is easy to derive the local video timing, i.e. the video timing for each sample-to-pixel calculation unit CU(I,J), from either video stream, and to assign a particular sample-to-pixel calculation unit CU(I,J) to either video stream. Each calculation unit may include a configuration register. The state of the configuration register may determine whether a calculation unit belongs to video group A or video group B. An external processor may write to the configuration registers to initialize or modify the allocation of calculation units to video groups. For example, a configuration routine executing on host CPU  may write to the configuration registers at system initialization time. In one embodiment, the configuration registers may be modified dynamically, i.e. during operational mode of the graphics system. For example, the configuration routine may write the configuration registers to update the allocation of calculation units to video groups in response to a user turning on a new video stream or turning off an existing video stream.",{"@attributes":{"id":"p-0194","num":"0196"},"figref":"FIG. 15","b":["502","504","506","510","512","514","516","518","520","522","524","526","530"]},"Thru-video FIFO  stores the digital data presented in video stream A. Video stream Ais transmitted from a previous sample-to-pixel calculation unit (situated in the same graphics board or a previous graphics board). Similarly, thru-video FIFO  stores the digital data presented in video stream B. Video stream Bis transmitted from the previous sample-to-pixel calculation unit. Local video FIFO  temporarily stores the pixel values computed by earlier computational stages of sample-to-pixel calculation unit CU(I,J), e.g., the stages associated with steps \u2013 of .","The output of multiplexor  which comprises video stream Ais transmitted to the next sample-to-pixel calculation unit (situated on the same graphics board or the next graphics board). The output of multiplexor  equals the output of blend unit  or the output of multiplexor .","The output of multiplexor  which comprises video stream Bis similarly transmitted to the next sample-to-pixel calculation unit. The output of multiplexor  equals the output of blend unit  or the output of multiplexor .","Blend unit  is configured to mix (i.e. to blend or multiplex) the video output of multiplexor  and the locally generated pixels provided by local video FIFO . The term mixing as used herein includes alpha blending and\/or multiplexing. In the later case, blend unit  may be realized by a multiplexor which selects between the output of local video FIFO  and the output of multiplexor .","Blend unit  is controlled by video timing generator VTG(I,J). The output of multiplexor  may equal the output of multiplexor  if the multiplexor  resides in a slave sample-to-pixel calculation unit, or, the output of letterbox color unit  if multiplexor  resides in a lead sample-to-pixel calculation unit of a video group. The output of multiplexor  may equal the output of thru-Video FIFO  or the output of thru-Video FIFO . Thus, blend unit  may mix (or inject) locally computed pixel values into video stream A or video stream B in response to control signal(s) asserted by VTG(I,J). For the lead sample-to-pixel calculation unit in a video group, the blend unit  mixes (or injects) locally computed pixel values into the stream of dummy pixels originating from the letterbox unit . The term \u201cinject\u201d as used herein refers to the selective multiplexing of locally computed pixels into a video stream, i.e. the replacement of selected dummy pixels in the video stream with the locally computed pixels. The dummy pixels serve as timing place holders in the video stream. Each sample-to-pixel calculation unit in a video group mixes or replaces a subset of the dummy pixels with corresponding locally computed image pixels.","The output of multiplexor  may equal the output of letterbox color unit  or the output of multiplexor . The output of multiplexor  may equal the output of thru-Video FIFO  or the output of thru-Video FIFO .","Local video FIFO  stores pixel values (e.g. red, green, blue and alpha values) provided on input bus  by previous computational stages of sample-to-pixel calculation unit CU(I,J).","Video router VR(I,J) includes a vertical counter and a horizontal counter. In the preferred embodiment, these counters may be conveniently located inside video timing generator VTG(I,J). However, in an alternative embodiment, these counters may be located outside the video timing generator. Video router VR(I,J) may contain a second pair of counters which regenerate the values of the first set of counters at a second locality in the video router.","Video timing generator VTG(I,J) provides all timing and control signals necessary to support video routing in sample-to-pixel calculation unit CU(I,J). It may be programmed via the MCv-bus.","All the video timing generators VTG(I,J) for the sample-to-pixel calculation units CU(I,J) in a video group run in synchrony with one another. This is accomplished by programming them to respond to the same clock, and resetting their horizontal counters and vertical counters upon receipt of a horizontal reset pulse and vertical reset pulse respectively. For maximum flexibility in meeting video sync specifications, the horizontal sync (Hsync), vertical sync (Vsync) and Blank signals presented to DACs A and B (see ) are not the same as the horizontal reset (Hreset) signal and vertical reset (Vreset) signal which flow from one sample-to-pixel calculation unit to the next to accomplish the synchronization of the video timing generators. This allows the zero point of horizontal and vertical timing to be chosen independently of the placement of sync and blank edges in the video signal presented to external devices.","The blend units within the video routers of a video group do not alter the timing of the video stream which is established by the video timing generator in the lead calculation unit. Each blend unit waits until the current pixel position falls within a given column of the managed area, and initiates multiplexing or blending of locally computed image pixels into the received video stream. Thus, pixels in the received stream may be modified or replaced by the locally-computed image pixels.",{"@attributes":{"id":"p-0206","num":"0208"},"figref":["FIG. 16","FIG. 16"]},"color field-sequential multiplexor  (at the output of local video FIFO );","drawing synchronizer ;","cursor generator  (which feeds local video FIFO );","one or more bus interfaces ;","multiplexor  (which receives HresetA and VresetA inputs from thru-video FIFO , and HresetB and VresetB inputs from thru-video FIFO );","frame detector ;","multiplexor  (which couples to the outputs of multiplexor , frame detector  and gate );","buffers  and ;","multiplexor  at the output of the buffers;","flip-flops , , ; and","and gate .","Assigning sample-to-pixel calculation unit CU(I,J) to a video group implies that its video timing generator VTG(I,J) uses the pixel clock, horizontal reset and vertical reset signals of corresponding video stream. For example, if sample-to-pixel calculation unit CU(I,J) has been assigned to video group A, then video timing generator VTG(I,J) drives A\/B selection signal  to a first state which indicates that video stream A is chosen. Thus, multiplexor  selects the horizontal reset (Hreset) and vertical reset (Vreset) from video stream A instead of video stream B. Also, multiplexor  selects pixel clock A instead of pixel clock B.",{"@attributes":{"id":"p-0219","num":"0221"},"figref":"FIG. 17","b":["0","5","180","180","178","178","180","0","5","180","0","5"]},{"@attributes":{"id":"p-0220","num":"0222"},"figref":"FIG. 18","b":["0","1","178","180"]},"Sample-to-pixel calculation unit CU() may be configured to receive video streams W, X, Yand Zfrom a previous graphics board GB(K\u2212). Each of sample-to-pixel calculation units CU() through CU(N-) may be programmed to contribute its locally generated image pixels to one of the four video streams. Last sample-to-pixel calculation unit CU(N-) passes the modified video streams W, X, Yand Zto the next graphics board and\/or to DACs .","As described in the various embodiments above, the sample-to-pixel calculation units CU comprised within the graphics boards of graphic system  form a linear array. In addition, the sample-to-pixel calculation units in a video group comprise a chain. The sample-to-pixel calculation unit at the head of the chain is the leader of the video timing for the chain. All other sample-to-pixel calculation units in the chain (i.e. in the video group) synchronize themselves to the timing of the lead sample-to-pixel calculation unit (using synchronous horizontal and vertical resets), and thus, are referred to as slave units. For example, in  sample-to-pixel calculation unit CU(,) is the head of the A chain, and sample-to-pixel calculation unit CU(,) is the head of the B chain.","Video router VR(I,J) may be programmed to operate in leader mode or in slave mode. A software configuration routine may program each of the video routers in the linear chain with their corresponding group assignment and lead\/slave mode assignment.","In one alternative embodiment, specialized lead routers and slave routers are contemplated. Lead routers may be implemented without the thru-video FIFOs, and slave routers may be implemented without the letterbox color unit.","Video router VR(I,J) in sample-to-pixel calculation unit CU(I,J) is the basic building block of a scalable video architecture. The horizontal counters and vertical counters in the video timing generators VTG(I,J) of video group A may cover the extent of channel A as shown in any of . The horizontal counters and vertical counters in the video timing generators VTG(I,J) of video group B may cover the extent of channel B as shown in any of . The horizontal and vertical size in pixel dimensions of channel X may be programmed into each sample-to-pixel calculation unit of video group X at system initialization time, where X equals A or B.","Each sample-to-pixel calculation unit CU(I,J) of video group A is assigned a corresponding column of channel A, and each sample-to-pixel calculation unit CU(I,J) of video group B is assigned a corresponding column of channel B. Sample-to-pixel calculation unit CU(I,J) generates pixel values for its assigned column. Thus, video router VR(I,J) in sample-to-pixel calculation unit CU(I,J) contains boundary registers which define the left, right, top and bottom boundary values for the assigned column. The horizontal pixel count generated by the horizontal counter is compared to the left and right boundary values of the assigned column, and the vertical line count generated by the vertical counter is compared to the top and bottom boundary values of the assigned column.","When (a) the horizontal pixel count is between the left and right column boundaries, and (b) the vertical line count is between the top and bottom column boundaries, video router VR(I,J) of sample-to-pixel calculation unit CU(I,J) will route pixels from the local video FIFO  to blend unit , and blend unit  will mix the locally computed pixels with corresponding pixels (typically dummy pixels) presented in video stream S, where S equals A or B depending on the video group assignment of the video router. As used herein the term \u201cmix\u201d is intended to include alpha blending and pixel replacement. Thus, blend unit  may replace dummy pixels in video stream S with locally generated pixels when (a) and (b) are true. Additionally, video router VR(I,J) may sense whether or not the current field is the correct field of a video frame.","In the preferred embodiment, each sample-to-pixel calculation unit CU(I,J) includes boundary checking circuitry comprising one or more comparators. The boundary checking circuitry compares the horizontal pixel count CH to the left column boundary Nand right column boundary N, and the vertical line count Cto the top column boundary Nand bottom column boundary N. Sample-to-pixel calculation unit CU(I,J) may be configured to declare the current pixel as interior to the assigned column when its horizontal pixel count Cand vertical line count Cobey the constraints\n\nN\u2266C<N, and\n\nN\u2266C<N.\n\nBecause each sample-to-pixel calculation unit applies boundary checking in this fashion, with strict and permissive inequalities at opposing boundaries of the corresponding column, it is easy to configure the sample-to-pixel calculation units of a video group to tile (i.e. to completely cover without overlapping) a desired region of the managed area. For example, two columns which meet side by side without an intervening gap may be configured by writing the left and right boundary registers of a first video router with the values A and B respectively, and the writing the left and right boundary registers of the next video router with the values B and C respectively. If strict (or permissive inequalities) were used for both horizontal boundaries (or both vertical boundaries) the process of initializing the boundary registers would be more complicated.\n","Of course, it is not necessary that the strict inequality be used for the right and bottom boundaries as long as all the sample-to-pixel calculation units apply a consistent system of inequalities with the strict and permissive inequalities at opposing boundaries in each direction. Thus, any of the three following systems would equally suffice:\n\nN<C<I,\n\nN<C\u2266N;\u2003\u2003(1)\n\nN<C\u2266I,\n\nN\u2266C<N;\u2003\u2003(2)\n\nN<C\u2266I,\n\nN<C<N.\u2003\u2003(3)\n\nThe horizontal and vertical counts are said to \u201creside within\u201d or \u201cfall within\u201d the assigned column for a given sample-to-pixel calculation unit (and its associated video timing generator) when the horizontal and vertical counts obey the corresponding local set of inequalities. The horizontal and vertical counts are said to \u201creside outside\u201d or \u201cfall outside\u201d the assigned column when any of the inequalities (left, right, top or bottom) of the local set fails to be satisfied. Furthermore, the horizontal count is said to \u201cfall between\u201d, \u201cfall within\u201d, or \u201creside within\u201d the left and right column boundaries when the left and right inequalities of the local set are satisfied. Likewise, the vertical count is said to \u201cfall between\u201d, \u201cfall within\u201d, or \u201creside within\u201d the top and bottom column boundaries when the top and bottom inequalities of the local set are satisfied. The term \u201cvertical count\u201d may be equivalently referred to as the vertical pixel count or the vertical line count.\n","The columns assigned to the sample-to-pixel calculation units CU(I,J) of video group A may tile channel A vertically and\/or horizontally. Similarly, the columns assigned to the sample-to-pixel calculation units CU(I,J) of video group B may tile channel B vertically and\/or horizontally. In one alternative embodiment, two or more of the columns assigned to the sample-to-pixel calculation units of a video group may overlap partially or completely. Thus, it is possible for a downstream calculation unit to mix its locally computed image pixels with pixel images contributed by one or more upstream calculations units.","Graphics board GB(K) may be able to synchronize its video timing to a wide variety of external video timing formats. To attain such flexibility has been expensive in the past, and most computer graphics systems have not attempted it at all, or have simply provided an asynchronous frame-reset feature. The asynchronous frame reset may be sufficient for some applications, but it fails to adequately address the requirements of many emerging application areas such as virtual reality, multimedia authoring, many simulation applications, and video post-production. True line-rate genlock may be a requirement for these markets. Thus, graphics system  may, in some embodiments, provide improved performance relative to prior art graphics systems in these application areas. Furthermore, there are many applications which are not seen as traditional genlock applications, where, nevertheless, genlock capability is quite beneficial.","In video post-production, graphics system  synchronizes to one or more video sources in a production facility. A user-specified horizontal phase offset during genlock may be required for this application.","As described above in connection with , the sample-to-pixel calculation units CU(I,J) of video group A contribute pixel values to video stream A. The sample-to-pixel calculation units of video group B pass video stream A without modification, i.e. without modification of pixel values contained in video stream A. Thus, video stream A is routed digitally through the linear array, i.e. from first sample-to-pixel calculation unit CU(,) in the first graphics board GB() through the last sample-to-pixel calculation unit CU(R-, V-) in the last graphics board GB(R-). Video stream B is routed digitally through the sample-to-pixel calculation units CU(I,J) comprising video group B.","For example, in , video stream A is routed from sample-to-pixel calculation unit CU(,) through sample-to-pixel calculation unit CU(,), and video stream B is routed from sample-to-pixel calculation unit CU(,) through sample-to-pixel calculation unit CU(,). The video timing generator VTG(,) in sample-to-pixel calculation unit CU(,) is the lead video timing generator for video stream A. The video timing generator VTG(,) in sample-to-pixel calculation unit CU(,) is the lead VTG for video stream B.","Typical scanlines Land Lfor channel A and channel B respectively are shown in . Sample-to-pixel calculation unit CU(,) generates video stream Aas shown in . Pixels computed by sample-to-pixel calculation unit CU(,) are mixed (or injected) into video stream Awhen the horizontal count and vertical count of video router VR(,) reside within the boundaries of column (,) which may comprise a rectangular area of pixels. When the horizontal or vertical counts of video router VR(,) reside outside of column (,), video router VR(,) transmits dummy pixel values from its letterbox color unit  into video stream A. Video router VR(,), because it is the lead video router for video group A, embeds:\n\n","Video router VR(,) in the next sample-to-pixel calculation unit CU(,) uses the embedded clock signal to clock video stream Ainto its thru-video FIFO . Because the embedded clock signal travels along with the data in video stream A, the setup and hold relationships between clock and data signals are preserved unlike systems which clock all FIFOs with a clock distributed from a central source.","Video router VR(,) uses pixel clock signal A distributed from pixel clock A to clock data out of its thru-video FIFO . Because the embedded clock signal (in the received video stream) and the centrally distributed clock signal A have the same frequency, and because thru-video FIFO  is written on every clock and read on every clock, thru-video FIFO  never overflows or underflows. Thus, the flow of video data through the video routers is insensitive to the delays induced by the buffers in the chain.","Video router VR(,) may use the centrally distributed pixel clock signal A to drive its horizontal counter. Video router VR(,) may use the vertical reset pulse and horizontal reset pulse from video stream A(as they emerge from thru-video FIFO ) to reset its vertical counter and horizontal counter respectively. The vertical counter in video router VR(,) may increment once per horizontal scan line of channel A. In one embodiment, the vertical counter may increment in response to the horizontal reset. In another embodiment, the vertical counter may increment in response to the horizontal count value attaining a maximum value which corresponds to the right boundary of channel A.","When the horizontal and vertical counts of video router VR(,) reside within Column (,) of channel A as shown in , video router VR(,) clocks locally computed pixel values out of its local video FIFO , and mixes (or injects) the locally computed pixel values into the stream of dummy pixel values emerging from thru-video FIFO . The mixing is performed in blend unit . Blend unit  may use alpha values provided by the local pixel stream or alpha values provided in the thru-video pixel stream depending on a local\/thru selection signal provided by video timing generator VTG(,). The mixed output of blend unit  comprises the output video stream A.","When the horizontal or vertical counts of video router VR(,) reside outside of Column (,) of channel A, video timing generator VTG(,) commands the local blend unit  to pass the video stream emerging from thru-video FIFO  to the channel A output unmodified. In other words, the output of thru-video FIFO  is transmitted as output video stream A.","Because sample-to-pixel calculation unit CU(,) is the last sample-to-pixel calculation unit in video group A, the pixel values comprised in video stream Apass unmodified through sample-to-pixel calculation units CU(,) through CU(,). Sample-to-pixel calculation unit CU(,) in graphics board GB() may provide the completed video stream A to display device A (perhaps through a D\/A converter). Since video stream A is complete at the output of sample-to-pixel calculation unit CU(,), sample-to-pixel calculation unit CU(,), which is the last sample-to-pixel calculation unit in graphics board GB(), may present the completed video stream A to display device A. In other words, a video stream may be \u201charvested\u201d from the first graphics board in which it has reached a completed state.","Sample-to-pixel calculation unit CU(,) generates video stream Bas shown in . Pixels computed by sample-to-pixel calculation unit CU(,) are mixed (or injected) into video stream Bwhen the horizontal and vertical counts of video router VR(,) reside within the boundaries of Column (,) of channel B as shown in . When the horizontal or vertical counts of video router VR(,) reside outside of column (,), video router VR(,) transmits dummy pixel values from its letterbox color unit  into video stream B. Video router VR(,), because it is the lead video router of video group B, embeds:\n\n","Video router VR(,) uses pixel clock signal B distributed from pixel clock B to clock data out of the thru-video FIFO . Because the embedded clock signal (received with the video stream B) and the centrally distributed clock signal B have the same frequency, and because thru-video FIFO  is written on every clock and read on every clock, thru-video FIFO  never overflows or underflows. Thus, the flow of video data through the video routers of video group B is insensitive to the delays induced by the thru-video FIFOs.","Video router VR(,) uses the centrally distributed pixel clock signal B to drive its horizontal counter. The vertical counter in video router VR(,) may increment once per horizontal scan line of channel B. In one embodiment, the vertical counter may increment in response to the horizontal reset received from thru-video FIFO . In another embodiment, the vertical counter may increment in response to the horizontal count value attaining a maximum value which corresponds to the right boundary of channel B. Also, video router VR(,) uses the vertical reset pulse and horizontal reset pulse from video stream Bas they emerge from thru-video FIFO  to reset its vertical counter and horizontal counter respectively.","When the horizontal and vertical counts of video router VR(,) reside within Column (,) of channel B, video router VR(,) clocks locally computed pixel values out of its local video FIFO , and mixes (or injects) the locally computed pixel values into the stream of pixel values emerging from its thru-video FIFO . The mixing is performed in blend unit . The blend unit  may use alpha values provided by the local pixel stream or alpha value provided by the thru-video pixel stream depending on a local\/thru selection signal provided by video timing generator VTG(,). The mixed output of blend unit  is transmitted as the output video stream B.","When the horizontal or vertical counts of video router VR(,) reside outside of Column (,) of channel B, video timing generator VTG(,) commands the local blend unit  to pass the video stream emerging from thru-video FIFO  to the channel B output unmodified. Thus, the output of thru-video FIFO  becomes the output video stream B.","Each slave sample-to-pixel calculation unit CU(I,J) in video group B mixes (or injects) locally computed pixels into video stream B when its horizontal and vertical counter values reside within the corresponding column (I,J) of channel B. When its horizontal or vertical counter values reside outside the corresponding column (I,J), sample-to-pixel calculation unit CU(I,J) passes video stream B unmodified from its thru-video FIFO  to the next sample-to-pixel calculation unit in video stream B.","In general, each sample-to-pixel calculation unit CU(I,J) in a video group mixes (or injects) locally computed pixels into the corresponding video stream when its local horizontal and vertical count values reside in the corresponding column (I,J). Each slave sample-to-pixel calculation unit in a video group passes the corresponding video stream unmodified to its output when its local horizontal and vertical count values reside outside the corresponding column (I,J). The lead sample-to-pixel calculation unit in a video group sources dummy pixels (i.e. timing \u201cplace-holder\u201d pixels) when it is not sourcing locally generated pixels from its local video FIFO , i.e. when its local horizontal or vertical count values reside outside the corresponding column (I,J). These dummy pixels may be replaced by one of the slave sample-to-pixel calculation units CU(I,J) of the same video group before the video stream is finally displayed, after having passed through the final sample-to-pixel calculation unit in the linear array. Note that \u201cletterboxing\u201d occurs in those regions for which none of the sample-to-pixel calculation units contribute pixels. This is suggested in . In order to have well-defined colors in letterboxed areas, the lead sample-to-pixel calculation unit (at the head of each video chain) may send out its dummy pixels from a programmable RGB register in letterbox color unit  instead of from a thru-Video FIFO.","As noted above, the video router VR(I,J) contains a vertical counter. The vertical counter is compared with vertical limit registers (also referred to herein as vertical boundary registers) indicating the vertical extent of the assigned column (I,J). This is useful in multi-board collaborative video applications, where it is desirable to tile a single screen (i.e. channel) vertically as well as horizontally with the video output from multiple graphics boards GB(I).",{"@attributes":{"id":"p-0250","num":"0256"},"figref":"FIG. 20","b":["0","5","0","5","84"]},{"@attributes":{"id":"p-0251","num":"0257"},"figref":["FIG. 21","FIG. 20"],"b":["0","5","0","5","620","622","624","626"]},{"@attributes":{"id":"p-0252","num":"0258"},"figref":"FIG. 22A","b":["0","1","2","620","0","620","0","1","1","2","2","3","4","5","84"],"sub":["0 ","0","0 ","1","1 ","1 ","2","2 "]},{"@attributes":{"id":"p-0253","num":"0259"},"figref":"FIG. 22B","b":["0","1","2","3","622","0","0","622","1","1","1","2","2","2","3","3","3","4","5","5","5","622"],"sub":["0 ","0 ","1","1 ","2","2 ","3","3 "]},{"@attributes":{"id":"p-0254","num":"0260"},"figref":"FIG. 22C","b":["0","1","3","5","624","0","0","624","1","1","1","2","3","2","624","3","3","3","4","5","4","624","5","5","5","178","84"],"sub":["0 ","0 ","1","1 ","2 ","2 ","3","3 ","4 ","4 ","5","5 "]},"For scan line , graphics board GB() generates video stream Xcomprising dummy pixels. Graphics boards GB() and GB() pass the pixels of video stream Xunmodified because regions R and R do not intersect scan line . Graphics boards GB(), GB() and GB() mix (or replace) corresponding segments of the dummy pixels with their locally computed dummy pixels.","As shown in , video router VR(I,J) in sample-to-pixel calculation unit CU(I,J) includes a blend unit , a first set of multiplexors (i.e. multiplexors , ,  and ), and a second set of multiplexors (i.e. multiplexors  and ). These components support a very flexible video environment for video signal generation.  and  illustrate various ways video can be made to flow through video router VR(I,J). Video router VR(I,J) comprises an upper pathway and lower pathway. Blend unit  resides on the upper pathway. The first set of multiplexors allow video streams to exchange pathways prior to blending. Thus, either input video stream may experience blending. The second set of multiplexors allow video streams to exchange pathways after blending. Thus, the blended stream may be presented at either the upper or lower output port. The terms upper and lower are used for convenience of discussion.","In , video stream A is presented to thru-video FIFO  and video stream B is presented to thru-video FIFO . Video streams A and B exchange (upper and lower) pathway position through the first set of multiplexors. Thus, video stream B gets sent to blend unit . Blend unit  optionally (a) passes the video stream B through to its output, (b) mixes (i.e. blends) the video stream B with local pixel data from local video FIFO , or (c) replaces pixels from video stream B with local pixels data from local video FIFO . It is noted that (c) may be considered a subset of (b) because replacement is equivalent to mixing with alpha equal to zero. As shown, the optionally modified video stream B generated by blend unit  and the unmodified video stream A may be presented to the upper and lower output ports respectively.","The second set of multiplexors (i.e. multiplexors  and ) allow the optionally modified video stream B (generated by blend unit ) and unmodified video stream A to exchange up\/down pathway position, and thus, to be presented to the lower and upper output ports respectively. The flexibility of being able to present the video streams at either output port implies that a user may connect cables to display device A and B in an arbitrary fashion.","In , video stream A is presented to thru-video FIFO , and video stream B is presented to thru-video FIFO . The first set of multiplexors  and  pass the video streams without positional exchange. Thus, video stream A gets sent to blend unit , and optionally mixed with local pixel data. The second set of multiplexors  and  pass the optionally modified stream A and unmodified stream B to the upper and lower output ports respectively. Alternatively, the second set of multiplexors  and  may perform a positional exchange so that the optionally modified stream A is presented at the lower output port and the unmodified stream B is presented to the upper output port as shown in .","In one embodiment, the video router may be configured to support the generation of L video streams, where L is any desired positive integer value. The structure of such a video router may described in terms of a series of modifications of the video router of  as follows.\n\n","The pre-blend crossbar switch, the system of one or more multiplexors, and the post-blend crossbar switch allow the video router to flexibly route up to L simultaneous video streams. The pre-blend crossbar switch allows the video router to switch its topmost input (received from the topmost thru-video FIFO) to any one of its lower outputs (i.e. outputs other than the topmost output). Thus, a lead video router in a given video group may send a \u201ccompleted\u201d video stream from a previous video group from the topmost thru-video FIFO to one of its lower output paths. This action effectively \u201csaves\u201d the completed video stream since video streams in the lower output paths do not interact with the blend unit, and thus, remain stable until they are output to a DAC or display device.","It is noted that a completed video stream may also be transmitted to system memory  through the readback FIFO . Thus, video streams may be stored in system memory as they are being displayed on display devices. The time-lag between display and capture of video frames in system memory may be substantially reduced or eliminated.","The system of one or more multiplexors allows the video router to send the stream of dummy pixels from the letterbox unit  to the upper output path to experience the mixing operation of blend unit . This occurs when the video router is the lead video router of a video group.","The post-blend crossbar switch allows the video router to permute the order of the output video streams after the blend unit . Thus, any of the video streams may appear at any output. This may be particular useful at the final output stage where the completed video streams are presented to display devices.","Digital video streams A and B may be passed from one sample-to-pixel calculation unit to the next using source-synchronous signaling. In other words, a pixel clock is sent along with the data from one video router to the next, so that the setup-hold relationships between data and clock are maintained as the signals propagate. All signals are received with first-in first-out buffers (i.e. thru-video FIFOs  and ) whose inputs are clocked using the source-synchronous clock which came with the data, and whose outputs are clocked with a version of the clock which is supplied in parallel to all sample-to-pixel calculation units CU(I,J) (i.e. one clock per video group). See .","Several benefits are derived from source-synchronous clocking. First, input and output from the thru-video FIFOs \/ are insensitive to clock-skew, tolerating a full 360 degree phase shift between input and output clocks. Second, board-level lock distribution of a parallel clock (e.g. pixel clock A or B) to all sample-to-pixel calculation units CU(I,J) need not be phase-matched, i.e., propagation delays may be unmatched. Third, all clocking is point-to-point and unidirectional. Thus, termination is simplified and high-speed operation is assured. Fourth, the clock distribution method is insensitive to buffer delays. Thus, point-of-use clock phase locked loops (PLLs) are not needed.","Video router VR(I,J) in sample-to-pixel calculation unit CU(I,J) receives video stream A from a previous sample-to-pixel calculation unit. Video stream A comprises data signals denoted DataInA, and an embedded version of pixel clock A denoted ClkInA as shown in . The clock signal ClkInA is used to clock data signals DataInA into thru-video FIFO .","Similarly, video stream B comprises data signals denoted DataInB, and an embedded version of pixel clock B denoted ClkInB. The clock signal ClkInB is used to clock data signals DataInB into thru-video FIFO .","The embodiment of video router VR(I,J) shown in  does not include blend unit . Instead multiplexor  is used to selectively transmit pixels from either thru-video FIFO  or local video FIFO . Similarly, multiplexor  is used to selectively transmit pixels from either thru-video FIFO  or local video FIFO . However, the embodiment of  may be modified to use a blend unit in place of multiplexors  and .","Video router VR(I,J) receives pixel clock signals A and B (denoted PixClkA and PixClkB in the figure) which originate from genlocking pixel clocks A and B respectively. The pixel clock signals are provided to a 2-to-2 crossbar switch . A first output of the crossbar switch drives thru-video FIFO  and a corresponding output unit . The second output of the crossbar switch drives thru-video FIFO  and a corresponding output unit . The crossbar switch  allows either pixel clock to drive either data path. A multiplexor  receives the two clock outputs from the crossbar switch . The output of multiplexor , denoted Oclk, is presented to the video timing generator and local video FIFO . Multiplexor  selects one of the two pixel clock signals based on the video group assignment of the video router. The signal Oclk is used to clock data out of local video FIFO .","Multiplexor  couples to thru-video FIFO  and local video FIFO , and multiplexes the data streams received from these two sources into a single data stream in response to a selection signal controlled by the video timing generator. Output unit  receives and transmits the single data stream denoted DataOutA in response to one of the pixel clock signals. Observe that the output unit  transmits a synchronous version of the clock signal which is used to transmit data stream DataOutA. This synchronous clock is denoted ClkOutA.","Multiplexor  couples to thru-video FIFO  and local video FIFO , and multiplexes the data streams received from these two sources into a single data stream in response to another selection signal controlled by the video timing generator. Output unit  receives and transmits the single data stream denoted Data-OutB in response to one of the pixel clock signals. Again, observe that the output unit  transmits a synchronous version of the clock signal which is used to transmit data stream DataOutB. This synchronous clock is denoted ClkOutB.","A detailed diagram of a thru-video FIFO  (which is intended to be one possible embodiment of thru-video FIFOs  and ) is shown in . Thru-video FIFO  is designed to be insensitive to phase difference between ICLK and OCLK as long as the read pointer counter  and write pointer counter  are initialized far enough apart that their values cannot become equal during the time-skew, if any, between the removal of reset from the read pointer counter  and write pointer counter . This time-skew corresponds to the delay through synchronizer .","The output of the read pointer counter  comprises a read pointer which addresses a read location in register file . The output of write pointer counter  comprises a write pointer which addresses a write location in register file . In one embodiment, register file  may be a 8\u00d740 2-port asynchronous register file. Thus, the read pointer and write pointer may be 3 bit quantities to address the eight locations of register file . Input data signals DataIn are clocked into register file  using ICLK, and data signals DataOut are clocked out of register file  using OCLK. Write pointer counter  is driven by ICLK, and read pointer counter  is driven by OCLK.","In the embodiment shown, the synchronizer delay is nominally 2 clocks. Therefore, initializing read pointer counter  to 0\u00d70and write pointer counter  to 0\u00d76 should result, after both pointer counters are running, in a difference of about 4, i.e. approximately half the depth of the register file . In other words, the depth of register file  is chosen to be more than twice the worst-case synchronizer delay for synchronizing reset with ICLK.","In one embodiment, the reset signal provided to thru-video FIFO  is the logical OR of a chip reset and a software reset. The software reset is programmable via the MCv-bus, is activated by a chip reset, and remains active after the chip reset. The reset signal is synchronized with OCLK before being presented to the reset port of the thru-video FIFO .","Reset clears any horizontal reset (Hreset) and vertical reset (Vreset) bits in register file , so that when reset is removed, register file  should be approximately half-full of \u201csafe\u201d data. This ensures that the horizontal and vertical counters of the local Video Timing Generator VTG(I,J) will not be affected by \u201cgarbage\u201d in the thru-video FIFO  during or after reset.","Because ICLK and OCLK are distributed from a common source on the board, they have the same frequency. (Preferably, the distribution is done through buffers, and not via phase-locked loops.) Therefore, thru-video FIFO  will remain approximately half-full forever. Thru-video FIFO  is written and read each cycle. Hreset and Vreset are always valid in thru-video FIFO , as long as the video timing generator upstream is running. Hreset and Vreset will always be valid in the thru-video FIFO , even at times when there is no active video data flowing through thru-video FIFO , such as during horizontal and vertical retrace.","To guarantee ICLK\/OCLK phase insensitivity, the thru-video FIFOs in a video group (e.g. the thru-video FIFOs  in video group A) may be set running so as to preserve the half-full state of each thru-video FIFO and the integrity of the Hreset and Vreset stream in all thru-video FIFOs during every clock subsequent to the removal of reset from the thru-video FIFOs. A software configuration routine should program all video timing generators VTG(I,J) in a video group with the same video timing parameters, and the pixel clock generator (e.g. genlocking pixel clock A) for that video group. The pixel clock (e.g. pixel clock A) is set running, and the software configuration routine waits to ensure that the pixel clock is stable. Then, the software configuration routine may enable the video timing generators VTG(I,J) of the video group to run. Then, beginning at the lead sample-to-pixel calculation unit CU(I,J) and working down the chain to the last sample-to-pixel calculation unit in the video group, the software configuration routine removes reset from each thru-video FIFO, one at a time. This ensures that a valid stream of Hreset and Vreset is available at the input to each thru-video FIFO from the instant reset is removed from its write pointer counter. Note that, if the MCv-bus routing between sample-to-pixel calculation units is the same as that of the digital video routing between sample-to-pixel calculation units, it should be possible to remove reset \u201csimultaneously\u201d from all thru-video FIFOs by writing to the global address space associated with the video stream to which they belong. Because of the way global writes propagate on the MCv-bus, reset will be removed from each thru-video FIFO sequentially, beginning at the head of the video chain.","For safety, it may be preferable to make the video timing generator VTG(I,J) on the lead sample-to-pixel calculation unit CU(I,J) ignore any Hreset and Vreset from the thru-video FIFO. This feature is what differentiates leader and slave video timing modes in the video timing generators VTG(I,J).","The video timing generators VTG(I,J) in the video chain may be started in an asynchronous manner, and may initially have random horizontal and vertical phase with respect to one another. They will, within a video frame time, become correctly synchronized with one another, as their horizontal and vertical counters are reset by the receipt of Hreset and Vreset signals from the head of the video chain.","In the preferred embodiment, a software configuration routine waits for the pixel clock A to stabilize and for the video routers VR(I,J) of previous graphics boards GB(), GB(), . . . , GB(I-) to be completely initialized before removing reset from the thru-video FIFOs  on graphics board GB(I). This ensures a valid stream of horizontal reset and vertical reset flows into thru-video FIFO  in the first sample-to-pixel calculation unit CU(I,) of graphics board GB(I) when reset is removed from the thru-video FIFOs  on graphics board GB(I).","The present invention also contemplates a video signal integration system comprising a linear chain of video routers as described above. Each video router of the linear chain receives a corresponding stream of pixel values computed for a corresponding column of a global managed area. Each stream of pixel values may be computed by filtering hardware operating super-samples stored in one or more sample buffers. Alternatively, each stream of pixel values may arise from pixel rendering hardware which computes pixels values from graphics primitives without intervening super-samples.","It is noted that the method of integrating computed image pixels into a video stream through successive video router stages is independent of the method used to originate the video stream. In one application scenario, one or more of the video streams received by a graphics board (e.g. see input streams Xand Y) may arise from one or more digital cameras instead of from a previous graphics board. Thus, a chain of one or more graphics boards may be used to mix computed image pixels with video pixels generated by the digital camera(s). In other applications, the source video stream may originate from a VCR, a DVD unit, a received MPEG transmission, etc.","In the various embodiments above, the multiple video streams generated by the linear array of video routers have been interpreted as separate video signals intended for separate display devices. In one alternate set of embodiments, one or more of the multiple video streams may be integrated into a single video signal prior to D\/A conversion by a pixel line buffer PLB. One embodiment of a pixel line buffer is suggested by . Pixel line buffer PLB is configured to receive four video streams from the last video router in a linear array of video routers. (The linear array of video routers may span multiple graphics boards.) For example, pixel line buffer PLB may be coupled to the four video stream outputs of the last sample-to-pixel calculation unit CU(N-) of .","The video routers in the linear array may be partitioned into four video groups. Each group is responsible for generating one of the four video streams A\u2013D. Each video stream may correspond to a portion of a display field as suggested by . The display field represents the array of pixels in one frame (or field) of video signal output from the pixel line buffer. Pixel line buffer PLB may comprise two sets of segment buffers, i.e. a first set comprising segment buffers A, B, C and D, and a second set comprising segment buffers A, B, C and D. Each line of the display field may be partitioned into four segments (e.g. quarters). Segment buffers A, B, C and D are configured to store pixels for the first, second, third and fourth segments of the arbitrary line. Similarly, segment buffers A, B, C and D are configured to store pixels for the first, second, third and fourth segments of the arbitrary line. The first and second sets of segment buffers may be used in a double-buffered fashion, i.e. writing to the first set while reading from the second, and vice versa. The switching between the first and second set of segment buffers is controlled by the SELECT signal. The pixel data stored in the first set of segment buffers is dumped to the DAC  while video streams A\u2013D write into the second set of segment buffers. Conversely, pixel data stored in the second set of segment buffers is dumped to DAC  while video streams A\u2013D write into the first set of segment buffers. Pixel line buffer PLB includes multiplexors which support such double-buffered pixel reading and dumping as shown in .","Video streams A, B, C and D write into segment buffers Ak, Bk, Ck and Dk respectively, where k equals 1 or 2 depending on the select signal. Video streams A\u2013D are generated by four corresponding groups of sample-to-pixel calculation units. All four groups may be driven by a common pixel clock signal. Thus, the synchronous clock signals embedded in each of the video streams A\u2013D have the same frequency, and each of video streams writes into a corresponding one of the segment buffers at a common rate R. To maintain a buffer stability, pixels are clocked out of the segment buffers at a rate of 4R. In other words, the output pixel clock denoted \u201c4\u00d7 Dot Clock\u201d in  has a frequency equal to four times the frequency of the common pixel clock signal denoted \u201cDot Clock\u201d used by the sample-to-pixel calculation units in generation of the video streams.  also illustrates a write enable signal which controls the writing of a typical video stream into one of the segment buffers. The video steam is represented by the signal denoted \u201cVideo In\u201d. In addition, a typical video output signal is from the pixel line buffer is illustrated. Pixel line buffer PLB may also include a TTL-to-PECL converter (denoted CNV in the figure) on each video stream input.","Although the embodiments above have been described in considerable detail, other versions are possible. Numerous variations and modifications will become apparent to those skilled in the art once the above disclosure is fully appreciated. It is intended that the following claims be interpreted to embrace all such variations and modifications. Note that the headings used herein are for organizational purposes only and are not meant to limit the description provided herein or the claims attached hereto."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The foregoing, as well as other objects, features, and advantages of this invention may be more completely understood by reference to the following detailed description when read together with the accompanying drawings in which:",{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 1","b":"112"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":["FIG. 2A","FIG. 1"]},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 2B","b":"112"},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 4","b":"420"},{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 5A"},{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 5B"},{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 5C"},{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0038","num":"0037"},"figref":["FIG. 9A","FIG. 8"],"b":"400"},{"@attributes":{"id":"p-0039","num":"0038"},"figref":["FIG. 9B","FIG. 8"],"b":"400"},{"@attributes":{"id":"p-0040","num":"0039"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0041","num":"0040"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0042","num":"0041"},"figref":"FIG. 12","b":"420"},{"@attributes":{"id":"p-0043","num":"0042"},"figref":"FIG. 13","b":["0","1"]},{"@attributes":{"id":"p-0044","num":"0043"},"figref":"FIG. 14A"},{"@attributes":{"id":"p-0045","num":"0044"},"figref":"FIG. 14B"},{"@attributes":{"id":"p-0046","num":"0045"},"figref":"FIG. 14C"},{"@attributes":{"id":"p-0047","num":"0046"},"figref":"FIG. 14D"},{"@attributes":{"id":"p-0048","num":"0047"},"figref":"FIG. 14E"},{"@attributes":{"id":"p-0049","num":"0048"},"figref":"FIG. 15"},{"@attributes":{"id":"p-0050","num":"0049"},"figref":"FIG. 16"},{"@attributes":{"id":"p-0051","num":"0050"},"figref":"FIG. 17"},{"@attributes":{"id":"p-0052","num":"0051"},"figref":"FIG. 18"},{"@attributes":{"id":"p-0053","num":"0052"},"figref":"FIG. 19"},{"@attributes":{"id":"p-0054","num":"0053"},"figref":"FIG. 20","b":"84"},{"@attributes":{"id":"p-0055","num":"0054"},"figref":"FIG. 21","b":["0","5","0","5"]},{"@attributes":{"id":"p-0056","num":"0055"},"figref":["FIG. 22A","FIG. 21"],"b":["0","1","2","620"]},{"@attributes":{"id":"p-0057","num":"0056"},"figref":["FIG. 22B","FIG. 21"],"b":["0","1","2","3","622"]},{"@attributes":{"id":"p-0058","num":"0057"},"figref":["FIG. 22C","FIG. 21"],"b":["0","5","624"]},{"@attributes":{"id":"p-0059","num":"0058"},"figref":"FIGS. 23A and 23B"},{"@attributes":{"id":"p-0060","num":"0059"},"figref":"FIGS. 24A and 24B"},{"@attributes":{"id":"p-0061","num":"0060"},"figref":"FIG. 25"},{"@attributes":{"id":"p-0062","num":"0061"},"figref":"FIG. 26","b":"503"},{"@attributes":{"id":"p-0063","num":"0062"},"figref":"FIG. 27A"},{"@attributes":{"id":"p-0064","num":"0063"},"figref":"FIG. 27B"},{"@attributes":{"id":"p-0065","num":"0064"},"figref":"FIG. 28"}]},"DETDESC":[{},{}]}
