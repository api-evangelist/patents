---
title: Method, system, and program for executing a workflow
abstract: Provided is a method, system, and program for executing a workflow. A workflow class implement methods and objects to provide information on and control of workflows. A work list class implements methods and objects to provide information on and manipulate work items assigned to the workflows. A work item class implements methods and objects to provide information on and manipulate work items when executing one workflow.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07069536&OS=07069536&RS=07069536
owner: International Business Machines Corporation
number: 07069536
owner_city: Armonk
owner_country: US
publication_date: 20010628
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["RELATED APPLICATIONS","BACKGROUND OF THE INVENTION","SUMMARY OF THE PREFERRED EMBODIMENTS","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS","Object Oriented Workflow Architecture","Additional Implementation Details"],"p":["This application is related to the following copending and commonly assigned patent filed on the same date herewith, which are incorporated herein by reference in their entirety:\n\n","1. Field of the Invention","The present invention relates to a method, system, and program for executing a workflow.","2. Description of the Related Art","A workflow program allows businesses and other organizations to define their business operations as a computer model known as a workflow. A workflow defines a series of processes to be performed by users at a client computer. The user activities at the client computers may involve updating an electronic form, reviewing information, etc. After one user in the workflow performs a specified action, the work item or other information is then routed to one or more further nodes where further action may be taken. For instance, an on-line purchase of a product may involve numerous steps, such as receiving the customer order, routing the customer order to the credit department to process the bill and then routing the order to the shipment department to prepare the shipment. Once the shipment is prepared, the product may be shipped and information on the purchase is then transferred to the customer service department to take any further action. Each of these processes may be defined as nodes in a workflow. A workflow program would then route the customer order to the business agents designated to handle the job. For instance, the initial order would be received by the order department and then routed to a person in shipping and billing. Once the bill and package are prepared, a further invoice may be forwarded to shipping. After shipping sends the package, the shipping agent may then enter information into the invoice and forward the electronic invoice to customer service for any follow up action.","A workflow is designed using workflow software, such as the International Business Machines (IBM) MQSeries Workflow software product. A process modeler is a person that analyzes the business operations, determines how the information related to the operations is routed electronically to client computers, and then defines a workflow model of the operations. The workflow model may be coded in the FlowMark Definition Language (FDL). The workflow model is then imported into a Runtime program that verifies and translates the workflow model into a process template. An instance of the process template can then be invoked to automates the sequence of events defined by the model.","There is a continued need in the art to provide improved techniques for building and utilizing workflow models.","Provided is a method, system, and program for executing a workflow. Workflow classes implement methods and objects to provide information on and control of workflows. A work list class implements methods and objects to provide information on and manipulate work items assigned to the workflows. A work item class implements methods and objects to provide information on and manipulate work items when executing one workflow.","In further implementations, methods in the workflow class are called to begin and terminate an instance of one workflow comprising nodes. Methods in the work list class are called to obtain information on the work items and nodes in one workflow. Further, methods are called in the work item class to enable a user to perform actions associated with one work item in one workflow, wherein at least one work item is associated with each node in the workflow.","In further implementations, a workflow notification class includes methods and objects to provide information on notifications associated with the workflows. One notification is generated if an action associated with a work item is not performed in a specified time period. Methods in the workflow notification class are called to obtain information on one notification and control a state of the notification.","Further provided is a workflow service class including methods and objects to provide information on workflows associated with one workflow service. One method in the workflow service class is called to obtain a list of all workflows associated with one workflow service.","Still further, a workflow object maintaining information on one workflow is instantiated. The methods of the workflow class obtain information and control the workflow through the variables in the workflow object representing the workflow. A work list object maintaining information on work items and nodes in one workflow is instantiated. The methods of the work list class obtain information on work items and nodes in one workflow. One work item object for each work item in one workflow is instantiated. The methods of the work item class obtain information on work items from the work item objects. One work list object identifies one or more work items represented by work item objects and wherein one workflow object is associated with one or more work items.","The described implementations provide a class architecture to provide access to information on workflows and to execute and implement the operation of the workflow.","In the following description, reference is made to the accompanying drawings which form a part hereof and which illustrate several embodiments of the present invention. It is understood that other embodiments may be utilized and structural and operational changes may be made without departing from the scope of the present invention.","In the following description, reference is made to the accompanying drawings which form a part hereof and which illustrate several embodiments of the present invention. It is understood that other embodiments may be utilized and structural and operational changes may be made without departing from the scope of the present invention.",{"@attributes":{"id":"p-0024","num":"0025"},"figref":"FIG. 1","b":["2","4","6","6","10","8","4","4","4","4","2"]},"The workflow server  coordinates and manages the execution of processes for a defined process template . The workflow server  executes any programs associated with a process defined for the workflow, interprets the process definitions, creates process instances and manages their execution, manages processes and states, logs events, communicates with users as part of the workflow, etc. The workflow server  may include a database client program (not shown) to access and update records related to the workflow being processed maintained in the runtime database . The workflow server  processing may be distributed across multiple computers to achieve workload balancing.","The workflow clients represent the client computers that execute workflow application program interfaces (APIs) to perform workflow related actions and activities and return messages to the workflow server . The workflow clients thus comprise instances of the workflow code on the client computers that allow users to interface with the executing workflow and the workflow server . The workflow server  would execute activity programs as part of executing the workflow and transmit messages and data to the workflow client  to request user action to proceed with the workflow. The actions associated with the nodes and executed by the workflow server  may comprise Java servlets. The workflow client  may comprise a Web browser capable of executing Java scripts transferred from the Java servlet executing on the workflow server . Further, details on implementations and interactions of the workflow server  and client  are described in the IBM publication \u201cIBM MQSeries Workflow: Concepts and Architecture, Version 3.3\u201d, IBM document no. GH12-6285-03 (March, 2001), which publication is incorporated herein by reference in its entirety.","A workflow builder  comprises a system including a buildtime program  that implements a plurality of graphical user interface (GUI) panels in which a user may define the components of a workflow model . A workflow translator  converts the workflow model , with the defined workflow components, into a workflow definition language (WDL) file  that implements the workflow model . The workflow definition language (WDL) may comprise the FlowMark Definition Language (FDL), Workflow Process Definition Language (WPDL) or any other workflow definition language known in the art that is used to define workflows. The workflow translator  would transfer the WDL file  to the workflow server  to transform into a process template  in the runtime database  in a manner known in the art.","The workflow engine , and each of the program components therein, such as the runtime database  and workflow server , may be implemented in one or more computing machines. The workflow clients  which provide the workflow interface to users may be implemented on one or more client machines. The workflow builder , including the buildtime program  and workflow translator  programs, may be implemented on one or more computing machines. Any portion of the workflow engine , workflow builder , and\/or workflow client , and program components therein, may be implemented on the same computing machines or separate machines. The computing machines used to implement the workflow engine , workflow clients , and workflow builder  may comprise any computing device known in the art, such as a server, workstation, mainframe, personal computer, laptop computer, hand held computer, telephony device, etc.","As discussed, the buildtime program  generates a series of graphical user interface (GUI) panels through which the user may define a workflow. Before utilizing the buildtime program , the process modeler would plan the workflow and analyze the work the business performs, how it is performed, and by whom. The process modeler may then develop a workflow to generate a final product, which may comprise the result of the effort of a single business unit or the cumulative efforts of multiple users and units within an organization. To produce the final product, a workflow packet comprised of one or more documents would transfer through various user work stations in the company defined as nodes in the workflow to require the user associated with such node to handle and process and forward to another user to handle. A document is comprised of a multimedia item that has digital content.","For instance, an insurance company may have to process numerous documents related to an insurance claim, such as photographs, appraisals, expert reports, etc. Employees may spend a substantial amount of time sorting through documents and associating the documents with particular claims. In the workflow model, all the documents related to a single claim would be part of a work packet that may move through various user stations to review and process. The workflow would comprise the flow of work and actions that are performed on the documents or workflow packet by multiple users in the system.","The workflow defines the sequence and boundaries of how the work is performed with respect to the documents in the workflow packet, and any restrictions on the order in which documents in the workflow packet must be processed. For instance, before the claim can proceed to a further step, a claims adjuster might be required to ensure that certain documents are included in the workflow packet for the claim before the workflow packet can proceed to further nodes in the workflow, e.g., determining the amount of compensation.","In workflow terminology, a worklist is a queue of work items. Each work item comprises a unit of work for a node in the workflow that is performed by the users associated with that node. Each work item may be associated with one work packet, which comprises documents or objects that are processed during the work defined for that work item. When a user at one node accesses the work item to perform the work defined therein, that workitem is locked, thereby preventing others at that node from accessing the work item.","A worklist, which is a queue of work for the users of the organization to perform with respect to the workflow packet. The work items within the worklist can be handled by any of the employees\/users assigned to the worklist. An action list defines the actions that a user can perform on the work packet objects associated with the work item, such as selections or data that may be entered in the work packet. For example, an adjuster in the claim process workflow can select an option to continue consideration of the claim if it appears valid or select an option to reject the claim. The workflow further consists of the paths defined as the connections between nodes which indicate the order of execution of nodes in the workflow.",{"@attributes":{"id":"p-0034","num":"0035"},"figref":"FIG. 2","b":["50","22","52","50","52","54","56","54","56","52","24","54","56","58","60","62","52","58","60","62","64"]},"As mentioned, the start  and end  icons may be automatically added to the workflow  when the user starts a blank workflow model . The user may move the start  and end  icons to any location on the drawing surface. The user may select the control icons  and  to add work and user exit nodes, respectively, to the workflow. Control icon  is used to define a path between two nodes defining the sequence in which the nodes are processed, and the order in which the work items are processed. The path lines, which are shown as the arrows between the start , end , work and user exit icons , , , and  illustrate the operation flow from one node to another.","Once the process modeler has defined the general layout of a workflow using the control icons , , , and , as shown in the workflow  in , the process modeler may then use additional GUI panels shown in  of the buildtime program  to associate particular users, actions and work items with the nodes.",{"@attributes":{"id":"p-0037","num":"0038"},"figref":["FIG. 3","FIG. 1"],"b":["100","50","102","104","6","106","108","110"]},"After defining the properties for the new workflow and placing icons in the drawing area and path arrows to define the workflow, the user would then use the GUI panels shown in  to associate actions and a user with each node, where the associated user performs the associated action when the workflow server  processes the node according to the workflow.  illustrates a start node panel  in which the process modeler defines the action and user associated with the start node  in the workflow, i.e., the first user that will perform the action with respect to the item at the beginning of the workflow. The process modeler would select an action from the action list in the action field  and specify the user to perform the action at the start node in the user field . The enable notification of deadline checkbox  may be selected to notify the user associated with the start node that a deadline has passed during which the user designated action for that node was not completed. Anyone, such as an administrator, user associated with node, or other user on the access list may receive the notification of the missed deadline for the start node .",{"@attributes":{"id":"p-0039","num":"0040"},"figref":["FIG. 5","FIG. 2"],"b":["150","58","60","62"]},{"@attributes":{"id":"p-0040","num":"0041"},"figref":"FIGS. 6 and 7"},"Using all the above described panels shown in , the process modeler can design a workflow model specifying work nodes and the actions associated with the work nodes, as well as the paths between the work nodes. If two paths lead into a node, such as the case with work node  in , then the workflow will only proceed to the action specified for that next node once the actions associated with the two preceding nodes has completed. Before the user may use the buildtime program , the user must define the access control lists, users, user groups, actions, action lists and worklist in a manner known in the art using application programming interfaces (APIs). The worklist would provide those work items assigned to users, indicating the work items a user may access when performing actions at a node.",{"@attributes":{"id":"p-0042","num":"0043"},"figref":["FIG. 8","FIG. 2"],"b":["20","2","4","200","22","22","202","24","204","26","24","10","6","6","8","4","22"]},"In certain implementations, the workflow model  defined using the buildtime program  is document centric in that the actions performed at the node concern the processing of work packages that may comprise any content or object that is processed and routed through the workflow.  illustrates the logic performed by the workflow server  to execute the workflow logic generated using the buildtime program  GUI panel  shown in . When a user invokes a workflow stored in the runtime database , the workflow server  accesses (at block ) the start node of the invoked workflow by interacting with the runtime database  in a manner known in the art. From the properties defined for that node, the workflow server  determines (at block ) the actions and user associated with the node. The workflow server  further processes (at block ) the access list defined for the workflow to determine the work item for the accessed node. If (at block ) the determined work item currently accessed in the workflow is locked by another user at that node, then the workflow server  waits (at block ) for the lock on the work item(s) to be released. If the work item is not locked or after the lock is released, control proceeds to block  where the workflow server  places a lock on the determined work item. The workflow server  then executes (at block ) the action associated with the node and communicates data to the workflow client  of the determined user requesting user action.","If (at block ) notification is enabled for the current node and the deadline has passed (at block ) without receiving a response from the user, then the workflow server  notifies the user specified with the enable notification that the deadline has passed. Upon receiving (at block ) a response from the user, which may comprise entering information, modifying a work item, adding a work item to the work package, selecting an option, etc., the workflow server  unlocks (at block ) the work item(s) previously locked for the user. If (at block ) the current node is the stop node, then control ends; otherwise, if there are further nodes to process in the workflow, then the workflow server  determines (at block ) from the path from the current node the next node in the workflow and accesses (at block ) the next node. Control then proceeds back to block  to process the next node.","The workflow logic of  provides a document centric workflow in that the state of processing work items associated with the node controls the workflow because control cannot proceed to other subsequent nodes that process the locked work item until the node holding the lock completes execution and releases the lock on the work item. Thus, access to work items controls the flow through the workflow. The workflow builder  provides a GUI tool to allow the user to create a document centric workflow model and translate that workflow model , including the defined worklists, access lists, action lists, etc., into a workflow definition language (WDL) file  that can be maintained and utilized in a robust workflow engine software product known in the art.","With the described implementations, the workflow builder  generates a WDL file  that may be compatible with workflow engines from different vendors because different vendors may design their workflow engines to be compatible with the WDL format of the WDL file . This allows the workflow model defined in the WDL file  to be transportable across different vendor workflow engine platforms.",{"@attributes":{"id":"p-0047","num":"0048"},"figref":["FIG. 10","FIG. 10"],"b":"400"},"The WorkFlowService class  is the starting point for a user wanting to access a workflow. The WorkFlowService class  includes methods that allow users to access already defined workflow templates and executing workflows. The WorkFlowService class  is associated with the WorkFlowTemplate , WorkFlow , and WorkFlowList  classes. The WorkFlowTemplate class  provides methods that allow the user to manipulate workflow process template objects, e.g., process template  (), which comprise a defined workflow that is stored in the workflow engine . The WorkFlow class  provides methods that allow the user to access information and control an executing workflow. The WorkList class  includes methods that allow the user to access an executing work list object comprised of work items and information on the current state of the executing work list, i.e., information on work items being processed. The methods in the WorkFlowService class  are used to retrieve information on particular workflows, workflow templates, and workflow lists associated with a particular workflow service. The methods from the other classes, such as the WorkFlowTemplate , WorkFlow , and WorkFlowList  classes, can then be used to obtain specific information and control over those workflow templates, workflows, and workflow lists identified by the WorkFlowService class  methods.","The WorkFlowTemplate class  provides information on a workflow template. A workflow object from the WorkFlow class  represents an executing workflow. The WorkFlowContainer class  includes methods to instantiate a container object that includes information on one container used to transfer data between nodes. Users at nodes may access data in the container and update the container with additional data. The data in the container may be used by the action being executed at a node. The WorkFlow class  is associated with the WorkFlowNotification class , which is used to provide notifications, such as notifications if a user does not perform an action at a node within a predefined time period. There may be many notifications provided for one workflow. The WorkFlow class  is further associated with the WorkFlowItem class , such that one executing workflow may be associated with one or more work items indicating a unit of work to perform for a node within the workflow.","The WorkFlowItem class  is associated with the WorkFlowContainer class , such that one container may be used at a work item to provide data to the user executing the unit of work defined by the work item. The relationship between the WorkFlow class  and the WorkFlowItem class  indicates that there may be many work item objects associated with one executing workflow. The class architecture of  further illustrates that a workflow list of the WorkFlowList class  is an aggregate of the workflow from the WorkFlow  Item class and workflow notifications from the WorkFlowNotification  class.","The above object oriented architecture of  defines how the different classes interrelate in order to implement a workflow. Each of the above interrelated classes , , , , , , and  provides interfaces\/methods that may be used within a workflow computer program to implement the workflow and actions performed at a node. The workflow program would be executed by the workflow server  () in the workflow engine .","Following are examples of some methods of the WorkFlowService class , including:\n\n","Following are examples of some methods of the WorkFlowService class , including:\n\n","Following are examples of some methods of the WorkFlow class , including:\n\n","Following are examples of methods of the WorkFlowContainer class , which instantiates a container object used with a workflow to transport information among the nodes.\n\n","Following are examples of some methods of the WorkList class , where a work list object is a representation of a work list in the system. As discussed, a work list object comprises a collection of work items and notifications for an executing workflow.\n\n","Additional commands may be provided to access the information in the work list, such as filter commands to provide filters for accessing information from the work list, thresholds of the number of items that can be in the work list, etc.","Following are examples of some methods of the WorkFlowItem class , where a work item object represents a unit of work performed in the workflow. The following methods are used to create and modify work items, and obtain information thereon.\n\n","Following are examples of some methods of the WorkFlowNotification class , where a notification object represents a generated notification. The following methods are used to create and modify notifications, and obtain information thereon.\n\n","The above described methods and classes would be included in a workflow program executed by the workflow server  () to execute the workflow. The methods described above would be used to access and modify the workflow related objects, such as the workflow, work items, notifications, containers, etc. when running the workflow. The above described methods may also be used in other programs that can obtain information and status on a workflow.",{"@attributes":{"id":"p-0061","num":"0121"},"figref":["FIGS. 11\u201312","FIG. 1","FIG. 11"],"b":["6","450","452"]},"At block , user selection of a workflow to process is received. The workflow program then calls (at block ) the WorkFlow start method to start the workflow. The workflow program then calls (at block ) the listWorkItemsByNode method to obtain all the work items for the started workflow, and the nodes to which the one or more items are associated. The workflow program then performs a loop at blocks  through  for each node i in the workflow, as determined from the list of work items by node. For each node i, the workflow program performs a loop at block  to  for each work item j associated with node i. If (at block ) there is a notification for the work item and the user that is the owner of the item, as determined from the methods, then the workflow program retrieves (at block ) retrieves the notification and then starts a monitor to determine if the time period for the notification has elapsed without the work item completing. From block  or , the workflow program calls (at block ) the checkOut method to lock the work item j. The inContainer method is called (at block ) to access any container associated with the work item j. Once the work item j is locked, the workflow program then executes (at block ) the actions associated with the work item j.","Control then proceeds to block  in , where the workflow program calls container get and set methods to access or modify the data and variables in the container accessed for the work item j in response to executing actions assigned to that work item j. For instance, as part of performing actions for a work item, the user of the work item may read and write data to the container. The workflow program receives (at block ) indication from a user that the actions associated with the work item have completed. The workflow program further calls (at block ) the checkIn method to release the lock on the work item j and the outContainer method to generate a new container including any updates to provide to the user at the next node in the workflow. The handle to the new container would be used in the next called checkOut method to provide the container to the user at the next node of the workflow. If there are further work items for the node i, then control proceeds (at block ) back to block  to retrieve the next work item. After completing all the work items for node i, control proceeds (at block ) back to block  to process the next node in the work list.","The above described logic utilized workflow related classes and the methods therein to implement a workflow and obtain information thereon. The workflow server , or some other component in the workflow engine  (), would then translate the workflow objects and methods into application specific commands, such as Structured Query Language (SQL) commands to manipulate the data in the runtime database  and process template  to obtain information on the workflow and implement workflow operations.","The preferred embodiments may be implemented as a method, apparatus or article of manufacture using standard programming and\/or engineering techniques to produce software or code. The term \u201carticle of manufacture\u201d as used herein refers to code or logic implemented in a computer readable medium (e.g., magnetic storage medium (e.g., hard disk drives, floppy disks, tape, etc.), optical storage (CD-ROMs, optical disks, etc.), volatile and non-volatile memory devices (e.g., EEPROMs, ROMs, PROMs, RAMs, DRAMs, SRAMs, firmware, programmable logic, etc.). Code in the computer readable medium is accessed and executed by a processor. The code in which preferred embodiments are implemented may further be accessible through a transmission media or from a file server over a network. In such cases, the article of manufacture in which the code is implemented may comprise a transmission media, such as a network transmission line, wireless transmission media, signals propagating through space, radio waves, infrared signals, etc. Of course, those skilled in the art will recognize that many modifications may be made to this configuration without departing from the scope of the present invention, and that the article of manufacture may comprise any information bearing medium known in the art.","The workflow client and server may be implemented within any vendor workflow program known in the art.","In the described implementations, the actions were implemented as Java methods. Alternatively, the actions may be implemented in any programming language known in the art.","In the described implementations, particular icons were used to represent different information in the workflow, such as work nodes, exit nodes, etc. However, any icon design may be used to represent the workflow components. Further, additional graphical representations may be provided for different types of work nodes, e.g., collection work nodes, assign value node, decision point node, etc.","In the described implementations, the class architecture is implemented as an object oriented class architecture. Alternatively, non-object oriented programming techniques may be used to implement the described class architecture.","The foregoing description of the preferred embodiments of the invention has been presented for the purposes of illustration and description. It is not intended to be exhaustive or to limit the invention to the precise form disclosed. Many modifications and variations are possible in light of the above teaching. It is intended that the scope of the invention be limited not by this detailed description, but rather by the claims appended hereto. The above specification, examples and data provide a complete description of the manufacture and use of the composition of the invention. Since many embodiments of the invention can be made without departing from the spirit and scope of the invention, the invention resides in the claims hereinafter appended."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["Referring now to the drawings in which like reference numbers represent corresponding parts throughout:",{"@attributes":{"id":"p-0016","num":"0017"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0017","num":"0018"},"figref":"FIGS. 2\u20137"},{"@attributes":{"id":"p-0018","num":"0019"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0019","num":"0020"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0020","num":"0021"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0021","num":"0022"},"figref":["FIGS. 11 and 12","FIG. 10"]}]},"DETDESC":[{},{}]}
