---
title: Authenticating resource requests in a computer system
abstract: Systems and methods consistent with the present invention authenticate resource requests in a computer system having a resource controller and a bus. Such systems and methods may monitor the bus for resource requests made to the resource controller, intercept at least one resource request made to the resource controller, determine if the intercepted resource request is authentic, and allow the intercepted resource request to be fulfilled by the resource controller if the resource request is authentic, and otherwise, allow the request to time out.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07624439&OS=07624439&RS=07624439
owner: Seventh Knight
number: 07624439
owner_city: Vicksburg
owner_country: US
publication_date: 20020924
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS REFERENCE TO RELATED APPLICATIONS","FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION"],"p":["This application claims the benefit under 35 U.S.C. \u00a7 119(e) of U.S. Provisional Patent Application No. 60\/339,163, filed Dec. 13, 2001, and of U.S. Provisional Patent Application No. 60\/330,721, filed Oct. 29, 2001, each of which are incorporated herein by reference, in their entirety.","This invention relates to the field of computer resource security. More particularly, this invention relates to a method and apparatus for authenticating resource requests made to the operating system of a computer system.","A resource request is a request generated by a computer system entity, such as a software application or a hardware device, by which the entity requests the use of certain system resources. Such resources may include the use of a hardware resource such as the display screen for writing to the screen, a software resource such as opening a new window in a Windows based system, accessing a network resource, such as an internet address, or any other resource controlled by an operating system. Typically, such requests are made to the operating system of the computer, as the operating system is typically the entity charged with resource allocation. Theoretically, however, the request can be made to any computer system software or hardware entity charged with resource allocation.","One example of a resource request is an Application Programming Interface (API), used by the Windows\u2122 operating system. API's are function calls used by programmers to request the use of resources from the operating system. For example, in the case of Windows API's, a programmer need not program each new application to perform tasks such as drawing on the monitor, accessing a disk, writing to the printer, using an internet resource, or performing other functions. Instead, the API allows the programmer to request that the operating system perform these functions.","Resource requests are fulfilled whenever the device or resource requested is available. However, a computer user or administrator may wish to limit access to certain computer resources. For example, an administrator may wish to limit memory access to only those applications initiated on the same computer as the memory. This feature ensures that confidential files are accessed only by authorized individuals. In addition, many computer viruses utilize computer resource requests as the means of accessing or damaging computers. For example, a virus trying to access memory via an API request can destroy valuable files, or a virus accessing an internet connection can control or monitor email and other sensitive communications.","Process authentication is a means of assuring that a computer entity requesting a resource, and the user controlling it, have the proper authorization to use the desired resources. Process authentication introduces a layer of security, which monitors and filters out unwanted or un-permitted API calls, so that they will never be fulfilled by the operating system, or other entity in charge of resource allocation. As a result, the process authentication system can effectively lock out unpermitted user intrusions, unwanted applications or viruses, and prevent unauthorized access to system resources by users or applications.","Systems and methods consistent with the present invention authenticate resource requests in a computer system having a resource controller and a bus. Such systems and methods may monitor the bus for resource requests made to the resource controller, intercept at least one resource request made to the resource controller, determine if the intercepted resource request is authentic, and allow the intercepted resource request to be fulfilled by the resource controller if the resource request is authentic, and otherwise, allow the request to time out.","Additional benefits of the invention will be set forth in part in the description which follows, and in part will be obvious from the description, or may be learned by practice of the invention. The benefits of the invention will be realized and attained by means of the elements and combinations particularly pointed out in the appended claims.","It is to be understood that both the foregoing general description and the following detailed description are exemplary and explanatory only and are not restrictive of the invention, as claimed.","Reference will now be made in detail to exemplary embodiments of the invention, examples of which are illustrated in the accompanying drawings. Wherever possible, the same reference numbers will be used throughout the drawings to refer to the same or like parts.","A resource request is a request generated by a computer system entity, such as a software application or a hardware device, by which the entity requests the use of certain system resources. While different operating systems may provide a different set of resources available to applications or hardware devices, and may implement resource requests using different formats, in most systems the requests are transmitted to the operating system, or other resource controller, via the system bus. For example, the Windows\u2122 operating system allows computer system entities to request resources using API calls or declarations. The formats, protocols, procedures and details for using API declarations are openly published in Visual C++ editors, Visual Basic editors or other Windows programming tools for use by Windows-based application programmers. Operating systems or platforms other than Windows\u2122 may instead use different formats or procedures for their resource requests. One of ordinary skill in the art will recognize that the present invention is not limited to use with Windows-based computers and its associated API requests. For simplicity in explanation, however, the following discussion will refer to API requests used in Windows-based computers.",{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 1","b":["100","102"]},"In step , the requesting entity transmits an API request to the operating system by broadcasting a message across the system bus. The API request will contain the information required by the API's format or definition, as well as a header including certain identification information, such as the process ID of the sending application, and possibly other information. In Windows-based computers, the requests are broadcast by the requesting application across the system bus such that the operating system and all applications can \u201chear\u201d it. Each application and hardware device listening to the system bus will parse the request upon receipt to determine if the message is intended for it. When the operating system receives and parses an API request, it will identify the request as a resource request and proceed with fulfilling the request, as further described below by . All other applications and hardware devices will recognize that the message is not intended for it, and will ignore the API request.","The requesting application will then listen for a response to its request, step . The format of the response is similarly dictated by the operating system platform, and in Windows-based systems, is a standard command also disclosed in Visual C++ editors, Visual Basic editors, and other Windows\u2122 programming tools. Responses to API requests, which are also broadcast over bus, typically do not include header information identifying the sender of the message. Instead, the requesting application assumes that the operating system is the sender, because, in the typical course of processing, only the operating system would respond to a request. The response will notify the requesting application of the request's receipt and pending processing. If, at step , the requesting application does not receive the response, then the request times out, step . Applications are typically programmed to wait only a predetermined amount of time for a response in order to prevent processing from being suspended indefinitely (if no response was received). A \u201ctime out\u201d means that no response to the request was received in the allotted time. In response to a timeout, the requesting application may simply give up on the request or may generate an error message for the user, alerting the user that a specific function cannot be completed. In addition, the error-handling routines of the requesting application may facilitate a return to normal processing as if the request were never made.","If, however, at step , the requesting application received a response from the operating system, the requesting application will await the fulfillment of the request. In the meantime, it will be listening for additional (i.e. second, third, etc.) responses from the operating system, step . In Windows-based systems, a typical method for returning processing to the requesting application is to use a call-back request. If, at step , the requesting application received a second response to the resource request, before receiving the callback request, the requesting application will generate a software error. The error-handling routines of the requesting application will handle the error, and may do so by displaying an error message alerting the user that an error has occurred, step . The error-handling routines may also allow processing of the requested application to proceed on its normal course despite the error. Processing will then return to step , where the application continues to wait for the operating system to process the resource request and send the call back function. If the routine receives another subsequent response to the resource request, it will repeat step .","If, instead, at step , the requesting application receives a call-back function from the operating system indicating that the request has been fulfilled, the requesting application will continue processing on its normal course, step .",{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 2","b":["202","204","206"]},"When the processor begins processing the resource request, the operating system will send a response to the requesting application, step . This response communicates to the requesting entity that the request was received, and is being processed. The operating system can identify the sender of the request from the process identification, included in the header of the API message. The response will be sent to the process identified by the process identification and will take the form required by the operating system and by the request declaration. It is possible in Windows-based computers that the order of steps , , and  may change, in other words, the response may be sent to the requesting application upon receipt of the initial request and before the resource request is placed in the queue. One of ordinary skill will recognize that the ordering of the steps here is not important to the present invention.","The operating system may also receive a request to kill the processing of a resource request, step . For example, such a request may result from a user's attempt to shut down the computer or the requesting application. The kill request may be sent by the requesting application or by another application. If the operating system does not receive a termination request, then the operating system continues to process the resource request, step . In this case, the operating system's processing will terminate naturally (the request will be fulfilled) and the operating system will return processing to the application by sending a call back request to the requesting application.","If, however, the operating system does receive a kill request, then it will terminate the processing of the resource request. If the resource request is currently processing, step , then the operating system will terminate the processing of the request, step . If, however, the resource request is not currently processing, then the operating system will simply ignore the request, and never attempt to process it, step . In either case, the resource request will not be fulfilled.","Systems and methods consistent with the present invention introduce a layer of security to authenticate resource requests prior to fulfillment of the request by the operating system, otherwise referred to as process authentication. In this way, only permitted applications, hardware devices and users may be permitted access to certain system resources.","Process authentication may be implemented by computers organized in a conventional distributed processing system architecture.  is a block diagram that illustrates a computer system  upon which an embodiment of the invention may be implemented. Computer system  includes bus  or other communication mechanism for communicating information, and processor  for processing information coupled with bus . Computer system  also includes a main memory, such as random access memory (RAM)  or other dynamic storage device, coupled to bus  for storing information and instructions to be executed by processor . RAM  also may be used for storing temporary variables or other intermediate information during execution of instructions to be executed by processor . Computer system  may also include cache  for storing temporary variables and other information and instructions from RAM . It is possible that RAM  may not be able to store all information, instructions and variables necessary for processor  to run an application. In this case, the instructions, variables, and other information may be moved into cache  for temporary storage according to numerous well-known methodologies. This data can be stored in cache  until processor  requires the information or instructions. When needed, it can be accessed at speeds faster than if it were located in storage device  or another form of storage medium. Computer system  further includes a read only memory (ROM)  or other static storage device coupled to bus  for storing static information and instructions for processor . A storage device , such as a magnetic disk or optical disk, is provided and coupled to bus  for storing information and instructions.","Computer system  may be coupled via bus  to display , such as a cathode ray tube (CRT), for displaying information to a computer user. Input device , including alphanumeric and other keys, is coupled to bus  for communicating information and command selections to processor . Another type of user input device is cursor control , such as a mouse, a trackball or cursor direction keys for communicating direction information and command selections to processor  and for controlling cursor movement on display . This input device typically has two degrees of freedom in two axes, a first axis (e.g., x) and a second axis (e.g., y), which allow the device to specify positions in a plane.","Aspects of the invention involve the use of computer system  to authenticate resource requests made to an operating system. According to one implementation, a process authentication routine, running on computer system  intercepts and authenticates each resource request made to an operating system in response to processor  executing one or more sequences of one or more instructions contained in main memory . Such instructions may be read into main memory  from another computer-readable medium, such as storage device . Execution of the sequences of instructions contained in main memory  causes processor  to perform the process steps described herein. In an alternative implementation, hard-wired circuitry may be used in place of or in combination with software instructions to implement the invention. Thus, implementations consistent with the principles of the present invention are not limited to any specific combination of hardware circuitry and software.","The term \u201ccomputer-readable medium\u201d as used herein refers to any media that participates in providing instructions to processor  for execution. Such a medium may take many forms, including but not limited to, non-volatile media or volatile media. Non-volatile media includes, for example, optical or magnetic disks, such as storage device . Volatile media includes dynamic memory, such as main memory .","Common forms of computer-readable media include, for example, a floppy disk, a flexible disk, hard disk, magnetic tape, or any other magnetic medium, a CD-ROM, any other optical medium, punch cards, papertape, any other physical medium with patterns of holes, a RAM, PROM, and EPROM, a FLASH-EPROM, or any other memory chip or cartridge.","Various forms of computer-readable media may be involved in carrying one or more sequences of one or more instructions to processor  for execution. For example, the instructions may initially be carried on the magnetic disk of a remote computer. The remote computer can load the instructions into its dynamic memory and send the instructions over a telephone line using a modem. A modem local to computer system  can receive the data on the telephone line and use an infra-red transmitter to convert the data to an infra-red signal. An infra-red detector coupled to bus  can receive the data carried in the infra-red signal and place the data on bus . Bus  carries the data to main memory , from which processor  retrieves and executes the instructions. The instructions received by main memory  may optionally be stored on storage device  either before or after execution by processor .","Computer system  also includes a communication interface  coupled to bus . Communication interface  provides a two-way data communication coupling to a network link  that is connected to local network . For example, communication interface  may be an integrated services digital network (ISDN) card or a modem to provide a data communication connection to a corresponding type of telephone line. As another example, communication interface  may be a local area network (LAN) card to provide a data communication connection to a compatible LAN. Wireless links may also be implemented. In any such implementation, communication interface  sends and receives electrical, electromagnetic or optical signals that carry digital data streams representing various types of information.","Network link  typically provides data communication through one or more networks to other data devices. For example, network link  may provide a connection through local network  to host computer  and\/or to data equipment operated by Internet Service Provider (ISP) . ISP , in turn, provides data communication services through the Internet . Local network  and Internet  both use electric, electromagnetic or optical signals that carry digital data streams. The signals through the various networks and the signals on network link  and through communication interface , which carry the digital data to and from computer system , are exemplary forms of carrier waves transporting the information.","Computer system  can send messages and receive data, including program code, through the network(s), network link  and communication interface . In the Internet example, a server  might transmit a requested code for an application program through Internet , ISP , local network  and communication interface . In accordance with the present invention, one such downloaded application authenticates all resource requests made to a computer's operating system. The received code may be executed by processor  as it is received and\/or stored in storage device , or other non-volatile storage for later execution. In this manner, computer system  may obtain application code in the form of a carrier wave.","Although computer system  is shown in  as being connectable to one server, , those skilled in the art will recognize that computer system  may establish connections to multiple servers on Internet . Each such server includes an HTML-based Internet application, which may provide information to computer system  upon request in a manner consistent with the present invention.","Systems and methods consistent with the principles of the present invention provide a process authentication routine for authenticating all resource requests made to the operating system of computer . According to one aspect of the invention, process authentication routine ensures that it is processing whenever computer  is powered on and processing, in order to ensure that all resource requests are authenticated.",{"@attributes":{"id":"p-0040","num":"0039"},"figref":"FIG. 4","b":["400","300","306","304","402","310","306","324","322","330","328","326"]},"In addition, routine  registers itself as a shell extension, step . A shell extension is any application registered with, and recognized by the operating system, as part of the user's shell. Applications registered as shell extensions are afforded special treatment by the operating system in that they are never cached. In order to register as a shell extension, an application sends the registration API command to the operating system, and the operating system modifies the Window's system registry to identify the routine as a shell extension.","Process authentication routine , in operation, monitors system bus . Routine  will receive each message broadcast across system bus , step . For each message received, routine  determines if the request is a request to terminate process , i.e., a kill request, step . A kill request is a broadcast API request to the operating system requesting that a routine be terminated. If routine  is terminated, or killed, then the operating system will be free to process all resource requests made to it without authentication. Therefore, if the request is a kill request, then routine  will prevent its own termination, step . An exemplary method containing the steps taken by routine  to prevent termination are depicted in the flowchart in . Once the termination has been prevented, processing may then return to step , where routine  reloads into RAM to continue processing.","If, however, at step , the message is not a kill request, then routine  must determine if the broadcast message is an API request, step . Routine  parses all broadcast messages in order to identify any messages or resource requests (API declarations) made to the operating system. It identifies these broadcasts in the same manner as the operating system. If the message is not an API request, processing returns to step  where the routine awaits the next broadcast message.","If, at step , the message is an API request, then routine  authenticates the request, i.e., determines whether the request is authentic. In one configuration, routine  first intercepts the broadcast request, in order to provide time to authenticate the request. Routine , therefore, sends a response to the requesting application, step . This response to the requesting application mimics, i.e. is identical in all respects to, the response that the operating system would send to acknowledge the receipt of a resource request. In addition, process authentication routine  identifies the requesting application from the process identification in the header included with the API request. This response does not, however, include the process identification of the process authentication routine. This is done to insure that the response by the process authentication routine mimics any response that may have been sent by the operating system. The receipt of this response by the application will cause the requesting application to await the fulfillment of the request and the subsequent call back.","Routine  also sends a kill request to the operating system to terminate processing of the request, step . By requesting that the operating system terminate processing of the request, the process authentication routine has time to determine whether the request was authentic. Upon completion of step , routine  has intercepted the resource request, i.e., prevented the request from being fulfilled by the processor.","Processing then flows to step  at which routine  authenticates the request, i.e. determines if the request was authentic and\/or permitted. To determine if a request is authentic, routine  may, in one configuration, maintain a list of permissions which indicate whether a specific request is permitted. The permissions list may be created, set, maintained, modified, and protected using any known methodologies. For example, the permission to use a request may be granted to a specific user, a group of users, a specific application, or based on any other characteristic of the computer system or its users. For each user or group, the user or administrator may, for example, grant or deny permission a specific resource or group of resources, such as the resource(s) necessary to 1) run applications, 2) use administrative tools, such as any tool which may affect multiple users (i.e., a device driver), 3) self authenticate a resource request, 4) manage disk resources, such as the right to control access to files or folders, 5) log on to a host, such as whether the user can log on remotely (i.e., across a network), 6) use network resources, such as the right to block or grant access to a port or IP address, or 7) access internet resources such as the right to access a given internet address. In addition, routine  may provide the ability for a user or administrator to set or modify permissions.","The permissions list may be kept in the form of a database or other form resident in memory on computer , or on a networked computer such as host  or server . The permissions may, in one configuration, be encrypted, using for example, known public or private key methods, thereby preventing unauthorized access to the permissions list. In addition, access to the permissions list may be implemented to require the use of API requests to access or modify the permissions list. In order to protect the permissions list, the administrator may set the permissions such that no user has permission to utilize the API requests necessary to access or modify the permissions list. In this way, no user application can access an application because the authentication routine will intercept the API request to access the file, determine the request is unauthorized, and prevent it from being fulfilled.","Therefore, at step , routine  accesses the permissions list to determine if the request currently pending is permitted. If the request is not a permitted one, then routine  does nothing. Because processing of the request by the operating system has already been terminated, the request will never be fulfilled. In addition, the requesting application will eventually time out, because the operating system will never send a call back to it, step .","If, however, at step , routine  determine that the request currently pending is a permitted one, it rebroadcasts the original request to the operating system. In this case, the rebroadcast will contain the process identification in the header of the requesting application. In one configuration, the process authentication routine may cache the original request, maintaining a copy in memory so that it may be rebroadcast in a form identical to the original request. By rebroadcasting the request, the operating system will once again begin processing the request. In addition, the operating system will send a response to the requesting application (as shown at step , ). The requesting application, however, in this case will already be awaiting the processing of the request. Therefore, the receipt of this second response will be dealt with as a response received at step , . Namely, the request will be processed by the error handling of the requesting application, step , and the application will continue to await a call back from the operating system, step .","Regardless of whether the resource request was authentic, routine , in the exemplary configuration, audit the API request. Auditing requires making a record of the resource request intercepted by the process authentication routine. Such a record can be made by creating a log of all resource requests, either in storage device  of computer , or on the storage device associated with another networked computer, such as host  or server . In addition, the audit may be kept as a database. No matter the form of the audit, the routine may record such information as, the time of the request, the resource requested, the application making the request, the user logged onto the application, the machine's identification, the user group to which the user belongs, and whether or not the request was allowed. The audit may be kept either locally or on a networked computer, and in either case, a log may contain entries listed by one or more process authentication routines each running on different computers, although they may be networked together. Upon returning to step , routine  will listen for another broadcast.","Referring now to , there is shown a flowchart depicting the steps performed by process authentication routine  to prevent its termination independent of the computer on which it is processing, step , . Typically, in Windows-based computers, there are two ways for an application to be terminated. First, an application may be asked to die. One example of this occurs when shutting down the computer. During shut down, the operating system requests each program to terminate so that it may shut down the computer. Second, a program may be killed. An example of this type of kill request occurs when a user of a Windows-based machine types control-alt-delete. In either case, routine  preferably will prevent its own termination. Otherwise, an unauthorized user could circumvent the process authentication routine by simply killing the routine.","When process authentication routine  receives a termination request from the operating system, it will first reset all user permissions, step . Resetting user permissions may include resetting all registry settings to the default settings such as those loaded at initial boot-up. Such settings might include logging any users off of computer  by modifying the registry settings to indicate that no user is currently logged on, or it might include modifying the registry settings to indicate that no applications are currently processing. One of ordinary skill in the art will recognize that the acts required to reset the permissions on a computer are highly dependent on the operating system and platform upon which the applications are operating. As a result, the systems and methods of the present invention require only that the user permissions be reset in a manner dictated by the computer on which the process is running.","Routine  will then unload all processing applications, step . Unloading the processing applications refers to terminating all processing applications prior to rebooting the computer. In one configuration, this may be accomplished by sending a terminate request to the operating system for each processing application. In another configuration, this may be accomplished by requesting that the operating system reboot the computer. Typically, the operating system, upon a request to reboot, will automatically terminate all processing applications. Finally, the routine will broadcast to the operating system a request to reboot the computer, step . Once the computer is rebooted, the process authentication routine will again be loaded into RAM (step , ).","If the kill request is instead a hard kill, process authentication routine  will receive the request as an intercepted API request bound for the operating system. However, routine  may allow the hard kill request to reach the operating system, step . In one configuration, the routine intercepts, authenticates, and rebroadcasts the request to the operating system. In another configuration, if the process authentication routine detects a hard kill request, it may simply not intercept the request, instead allowing the request to reach and be processed by the operating system, without authentication.","In another configuration, routine  may merely deny the permission to all users and computer entities to request the termination of routine . In this case, routine  will intercept the request, checked the permissions list to determine whether it is a permitted request, determine that it is not a permitted request, and not rebroadcast as with other unauthorized API's, allowing the request to simply time out. However, routine  runs the risk that the operating system will respond to the request and terminate routine  before it can intercept the request.","In the cases where routine  allows the operating system to receive and process the kill request, routine  will continue as follows. Once the kill request reaches the operating system, the operating system will send a hard kill request to the process authentication routine, step . As part of its shut down routine, the systems and methods consistent with the present invention will then send a reboot request to the operating system, step . Upon reboot, the process authentication application will reload (step , ), thus preventing the computer from processing without the process authentication application running at all times.","A digital imprint may also be included as part of process authentication, consistent with the principles of the present invention. Digital imprinting ensures that any file being executed is an original document. A digital imprint consists of a segment of binary code, such as an individual line of code, written to a file that is unique for specific workstation. No two workstations will ever have the same digital imprint because the imprint code is generated randomly. A process authentication routine reads any file on a workstation (for example, using the API request for file input\/output) that is attempting to execute or request a resource, and looks for a digital imprint. If the imprint does not exist, access is denied.","Other embodiments of the invention will be apparent to those skilled in the art from consideration of the specification and practice of the invention disclosed herein. It is intended that the specification and examples be considered as exemplary only, with a true scope and spirit of the invention being indicated by the following claims."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The accompanying drawings, which are incorporated in and constitute a part of this specification, illustrate several embodiments of the invention and together with the description, serve to explain the principles of the invention.",{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 5"}]},"DETDESC":[{},{}]}
