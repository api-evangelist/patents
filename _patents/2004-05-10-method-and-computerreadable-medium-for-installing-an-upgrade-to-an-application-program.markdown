---
title: Method and computer-readable medium for installing an upgrade to an application program
abstract: A method and computer-readable medium for upgrading an application program, and making an installer program aware that an application has been upgraded is disclosed. The method recognizes that an upgrade to the application has been initiated. The upgrade includes an identifier for the application to be upgraded, as well as information required for the installer to perform the upgrade. The installer program accesses the upgrade information, which includes instructions necessary for installing the upgrade. The installer program also accesses information related to the installed state of the application and related applications. The installer program determines whether or not the upgrade should be performed. If the upgrade should be performed, the installer program performs the upgrade and stores the fact that the application has been upgraded. If the application should not be upgraded, the installer program stores information reflecting the fact that the upgrade is available but not installed.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07472385&OS=07472385&RS=07472385
owner: Microsoft Corporation
number: 07472385
owner_city: Redmond
owner_country: US
publication_date: 20040510
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATION","FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENT"],"p":["This application is a continuation of prior application Ser. No. 09\/261,863, filed Mar. 3. 1999, priority from the filing date of which is claimed under 35 U.S.C. \u00a7 120.","This invention relates generally to the installation of software applications on a computer system, and more specifically, to upgrading a software application program on a computer system.","Software application installation is an area of increasing importance. Unfortunately, existing installation technologies fail to address all of a computer user's needs. Most installation technologies are simply brute-force mechanisms for copying program files from one location to another. Only one known installer program, Microsoft Windows Installer, developed by Microsoft Corporation, Redmond, Wash., even comes close. For a description of Microsoft Windows Installer, see Kelly, Mike, \u201cGain Control of Application Setup and Maintenance with the New Windows Installer,\u201d , pp. 1527, Sep. 1998.","The one installer program that comes closes to addressing all of a computer user's needs manages the installation of an application so that information related to each of the application's resources is stored in a \u201cconfiguration database.\u201d The configuration database may be registry keys within a system registry, or it may be a stand-alone database. The stored information includes, but is not limited to, the installed state of the application, i.e., what features of the application are or are not installed, whether the application should be run locally or run from a source, paths to the program files of the application, whether features are \u201cadvertised\u201d (i.e., available but not installed), etc. The stored information is stored at install time and is used by the installer program to ensure that an application always has available the resources that it expects or that the user requests. For instance, one function of the installer program is to verify the existence of a resource needed by the application. When the application requests a path to a program file, the installer program verifies the existence of that program file at the expected location stored in the configuration database. If, for some unexpected reason, the program file does not exist at the expected location, the installer program installs the program file prior to returning its path to the application. The installer program continually updates the configuration database if any changes are made to the installed state of the application.","Once installed, there may be a need to change an application. Generally speaking, changes to an application may be minor, in which case a patch is desirable, or changes may be more significant, in which case an upgrade is desirable. For example, patching may be performed if an application is in need of a service release or update to remedy a programming bug or other infirmity, whereas an upgrade will be performed for a new release. The present invention is directed to upgrades, as opposed to patches. There are several problems with traditional methods of upgrading software applications.","First, traditional methods of upgrading software applications modify the resources of the application, but do not modify the configuration database maintained by the installer program to reflect those modifications. For example, an upgrade will often add a new program file to the application. However, the upgrade does not modify the configuration database to make the installer program aware of the existence of the new program file. In addition, the installer program is unable to update its configuration database to reflect the existence of the new file because the upgrade and new file were not installed by the installer program. The result is that the installer program is unaware that the new program file was added, so any additional functionality provided by the installer program is unavailable for that new program file. For example, the installer program is unable to verify the existence of the new program file if requested by the application.","Another problem with traditional methods of upgrading software applications is that they may not be able to properly upgrade an uninstalled or partially-installed application. At installation, the user may choose not to install all of the features of an application, but rather delay the installation of certain features until they are actually used. The installer program may provide an application with the ability to offer the feature as available although the feature is not installed (\u201cadvertising\u201d the feature). When the user or application attempts to access that feature for the first time, the installer program automatically installs the advertised feature. This reduces the amount of storage space consumed by features of an application that are not initially used.","Yet another problem with traditional upgrades is that there is not a standard. This forces authors to create custom upgrade logic. This in itself is a significant problem, however, the problem is compounded in that this custom logic trickles down to the user. This means that upgrades of different products may have different installation procedures from the perspective of a user.","Accordingly, there exists a need in the art for an improved method of upgrading a software program that provides standardization from the perspective of both the author of the upgrade and the user installing the upgrade. In addition, a need exists for a method of upgrading a software program that can determine if any older versions of the software program are installed and act accordingly. Furthermore, the actions taken, i.e., current install state of the software program, should be stored.","The present invention is directed to a method, and computer-readable medium for upgrading an application using an installer program. The installer program recognizes that an upgrade to the application has been initiated. The upgrade includes an identifier for the application to be upgraded, as well as information required for the installer to perform the upgrade. The installer program accesses the upgrade information, which includes instructions necessary for installing the upgrade. The installer program also accesses information related to the installed state of the application and related applications. The installer program determines whether or not the upgrade should be performed. If the upgrade should be performed, the installer program performs the upgrade and stores the fact that the application has been upgraded. Preferably, this is accomplished by unregistering the previously installed application and registering the upgrade, i.e., newly installed application.","In accordance with other aspects of the invention, the application is identified using a unique identifier known as a product code. Alternatively, the application is identified using a product-identifying triplet composed of an upgrade code, a version number, and a language code.","In accordance still other aspects of the invention, the installer program determines if there are newer versions of the product installed. If there are newer versions of the product installed, a default is set so that the upgrade is not installed. Preferably, this default can be overridden. If there are not newer versions of the application installed, the upgrade should be installed.","In accordance with further aspects of the invention, the installer program checks to see if there are previous versions of the product or related products installed. If there are previous versions of the product or related products installed, the installer program determines if the upgrade can coexist with the previous version or related products. If the upgrade can not coexist with previous versions of the product or related products, the previous version or related products that can not coexist with the application upgrade, are removed. Preferably, the installer program presents the user options based on this information. For example, if two products can not coexist, a message is displayed to the user. The user can decide whether to remove the installed version of the product and install the upgrade, or cancel the upgrade without removing the installed version of the product.","In accordance with still further aspects of the invention, the upgrade includes an upgrade table. The upgrade table includes a list of entries for products related to the application upgrade. Each entry provides directions specifying how the related product is to be treated. For example, whether previous products or related products can coexist with the upgrade. Preferably, each upgrade table entry includes: an upgrade code; a version number; a language code and an attribute field. An example attribute field is a coexist value.","The present invention is directed to a method and computer-readable medium for upgrading a software application and providing an installer program with notice of an upgrade's existence so that the installer program can modify a configuration database to reflect the upgrade. Simply stated, the present invention makes the installer program upgrade-aware so that should the user or application make or require any changes to the installed state of the application, the installer program will be able to operate on the system resources with knowledge that the application has either been upgraded, or that an upgrade is present for the application. Briefly described, the present invention provides a mechanism by which the launching of an upgrade file, is passed to the installer program and the installer program takes control of installing the upgrade. In this manner, the installer program is able to store information related to the upgrade to ensure the proper operation of the installer program and proper upgrading of the application.","Exemplary Operating Environment",{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 1"},"With reference to , an exemplary system for implementing the invention includes a conventional personal computer , including a processing unit , a system memory , and a system bus  that couples the system memory to the processing unit . The system memory  includes read-only memory (ROM)  and random access memory (RAM) . A basic input\/output system  (BIOS), containing the basic routines that help to transfer information between elements within the personal computer , such as during start-up, is stored in ROM . The personal computer  further includes a hard disk drive , a magnetic disk drive , e.g., to read from or write to a removable disk , and an optical disk drive , e.g., for reading a CD-ROM disk  or to read from or write to other optical media. The hard disk drive , magnetic disk drive , and optical disk drive  are connected to the system bus  by a hard disk drive interface , a magnetic disk drive interface , and an optical drive interface , respectively. The drives and their associated computer-readable media provide nonvolatile storage for the personal computer . Although the description of computer-readable media above refers to a hard disk, a removable magnetic disk and a CD-ROM disk, it should be appreciated by those skilled in the art that other types of media which are readable by a computer, such as magnetic cassettes, flash memory cards, digital video disks, Bernoulli cartridges, and the like, may also be used in the exemplary operating environment.","A number of program modules may be stored in the drives and RAM , including an operating system , one or more application programs , other program modules, such as an installer program  in accordance with an exemplary embodiment of the present invention, and program data, such as a configuration database  associated with the installer program . The operating system  may include a system registry . In this embodiment, the invention may reside within the installer program  and the configuration database . A user may enter commands and information into the personal computer  through a keyboard  and pointing device, such as a mouse . Other input devices (not shown) may include a microphone, joystick, game pad, satellite dish, scanner, or the like. These and other input devices are often connected to the processing unit  through a serial port interface  that is coupled to the system bus, but may be connected by other interfaces, such as a game port or a universal serial bus (USB). A monitor  or other type of display device is also connected to the system bus  via an interface, such as a video adapter . In addition to the monitor, personal computers typically include other peripheral output devices (not shown), such as speakers or printers.","The personal computer  may operate in a networked environment using logical connections to one or more remote computers, such as a remote computer . The remote computer  may be a server, a router, a peer device or other common network node, and typically includes many or all of the elements described relative to the personal computer , although only a memory storage device  has been illustrated in . The logical connections depicted in  include a local area network (LAN)  and a wide area network (WAN) . Such networking environments are commonplace in offices, enterprise-wide computer networks, intranets and the Internet.","When used in a LAN networking environment, the personal computer  is connected to the LAN  through a network interface . When used in a WAN networking environment, the personal computer  typically includes a modem  or other means for establishing communications over the WAN , such as the Internet. The modem , which may be internal or external, is connected to the system bus  via the serial port interface . In a networked environment, program modules depicted relative to the personal computer , or portions thereof, may be stored in the remote memory storage device . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.","Discussion of Terminology","Before discussing , a brief discussion of terminology is needed. In accordance with an exemplary embodiment of the present invention, the installer program module  recognizes three principal elements: products, features and components. A \u201cproduct\u201d represents a single, entire application program, such as the \u201cMICROSOFT WORD\u201d application program marketed by Microsoft Corporation of Redmond, Wash. Each product has a globally unique identifier known as a Product Code that allows each product to be distinguished. Each product is made up of one or more features. A feature is a granular piece of the product that a user may choose to install or execute. Features typically correspond roughly to the functional features of the product itself, such as a \u201cProofing Tools\u201d feature. Each feature is essentially a grouping of components and may also include other features. Features need not be globally unique, and therefore may be identified by any appropriate means, such as with a textual feature identifier.","A component is a collection of resources, such as files or registry keys, that are all installed or uninstalled as a unit. Components are the building blocks of the product that are not exposed to the user. A resource, such as a file or a registry key, may be part of only one component. Two components may not share the same resource whether they are part of the same product or parts of different products. Each component has a globally unique identifier known as a Component Code. One resource within the component is designated as a key file. The key file may be any resource, such as a file or registry key, within the component.","Authoring Upgrade Installation Data and Instructions",{"@attributes":{"id":"p-0036","num":"0035"},"figref":["FIG. 2","FIG. 2","FIG. 2"]},"The logic of  moves from a start block to decision block  where a test is made to determine if the application program module is a new program module. If so, the logic moves to block  where install data and instructions are authored. Included with the install data and instructions are a product code and a product-identifying triplet composed of an upgrade code, a version number, and a language code. The product code is a unique identifier that is used for identification of a product. For example, the product code is used to determine if a patch should be applied to the product. The product-identifying triplet also uniquely identifies the product, however, it also allows for products to be distinguished as groups. The product-identifying triplet is used during the upgrade process, for example to determine which related products should be removed. Use of the product-identifying triplet with respect to the installation of a product upgrade is discussed in more detail later. Install data and instructions, while very similar to upgrade data and instructions, are not the subject of the present invention, and are not discussed in further detail. Install data and instructions are included and\/or referenced in an installation file.","If the application program module is not new, the logic moves from decision block  to decision block  where a test is made to determine if the changes to the application program module are small. Generally speaking, small changes are implemented via a patch, while large changes are implemented via an upgrade. However, an author may implement a small change via an upgrade. It will also be appreciated that large changes can be implemented using a patch. However, this is not preferable, and is therefore not shown in . A distinction between patches and upgrades is that patches generally just make changes to the existing set of features and files, whereas an upgrade generally adds new features and components. If in decision block  it is determined that the changes to the program module are small, the logic moves to decision block  where a test is made to determine if an upgrade is desired. If so, the logic moves to block , which is described below. If not, the logic moves to block  where patch install data and instructions are authored. Patch install data and instructions, although similar to upgrade data and instructions as mentioned above, are not the subject of this invention, and are therefore not described in further detail. Patch install data and instructions are included in a patch package.","If in decision block  it is determined that changes to the application program are not small, or if changes are small, but the author desires an upgrade (yes in decision block ), the logic moves to block  where upgrade install data and instructions are authored. The logic of block  is illustrated in detail in , and discussed below. After installation data and instructions have been authored (block ), patch data and instructions have been authored (block ), or upgrade data and instructions have been authored (block ), the logic of  ends.","Install data and instructions are included in and\/or referenced by an installation file. The logic of authoring upgrade install data and instructions () moves from a start block to block  where an upgrade installation file is opened. An example of an upgrade installation file is illustrated in , and described below. Next, in block , a product code for the product to be upgraded is generated. Preferably, a facility is available for an author to generate a unique product code, such as through an application programming interface (API) call made available as part of a set of authoring tools used to create the upgrade install data and instructions. Alternatively, a product code may be selected from a list of reserved product codes. The logic then moves to a block  where a property table is created and stored in the upgrade installation file.","Referring to , the property table  includes a product code , an upgrade code , a version identifier , and a language code  for this particular product. The product code of  is the unique product code generated in block  of . The product code is equivalent to a product-identifying triplet consisting of an upgrade code, a version identifier, and a language code. The product code and product-identifying triplet allow other products to install subsequent patches and upgrades, respectively.","Returning to , after the property table has been stored in the upgrade installation file, a file identifier list is stored in the upgrade installation file in block . As shown in , the file identifier list  includes a file name  and a file version number  for each file that is to be installed for the upgrade.","Returning again to , registry information is stored in the upgrade installation file, in block . As shown in , the registry list  includes a registry key  and an associated registry value  for each registry key to be updated for the upgrade.","Returning once more to , after the registry list has been stored in the upgrade installation file, an upgrade table is generated and stored in the upgrade installation file. See block . The upgrade table  () includes instructions for removing existing products. An example of an upgrade table  is shown in detail in .","The upgrade table shown in  includes the following columns: an upgrade code , a version identifier , a language code , attributes , and a property . The author places entries for previous versions of the product and related products in the upgrade table. As will be described next, each entry in the upgrade table can identify a single product or multiple products. The upgrade table provides a list of products to search for and instructions for how to deal with any installed products that match an upgrade table entry. The upgrade code  identifies the family of related products referenced by each particular record in the upgrade table. This is a required field in the herein described embodiment of the invention and must be set for each entry in the upgrade table. The version identifier identifies the version of the product being searched for, e.g., 1.0. The version identifier may be a range of values, for example, 1.0-3.0, or <3.0. The version identifier can also be left blank. If it is blank, any version will be deemed a match (i.e., blank is equivalent to a wildcard). The language code  specifies which languages are being searched for. It cannot be a range, but, it can be a list of language codes. The language code can also be left blank, in which case it is treated as a wildcard. The \u201cNOT\u201d operator can also be used with the language code. For example, if the upgrade is for an English version of the product, an entry relating to the English version of the product may be desirable, as well as a different entry relating to all non-English versions of the product. The upgrade code , version identifier , and language code , constitute a product-identifying triplet. This product-identifying triplet is used to find matches, or \u201chits,\u201d against the upgrade table. If an installed product is a \u201chit\u201d based on the product-identifying triplet, the attributes column in the upgrade table is examined. Example attributes include: coexist; and feature list migration. Property  is a global variable that is specified for each entry in the upgrade table. When there is a \u201chit\u201d for an entry, property  is set.","Returning to , after the upgrade table is generated and stored in the upgrade installation file , an action list is generated and stored in the upgrade installation file. See block . The action list describes the steps to be performed by the installer program when performing the upgrade of the application program. The action list  () is a list of instructions for the upgrade installation. An example of an action list is shown in detail in , and described next.","The action list illustrated in  includes: an action to FindRelatedProducts , an action to InstallFiles , an action to MigrateFeatureSettings , and an action to RemoveExistingProducts . The FindRelatedProducts  action triggers the installer program to find installed products based on a \u201chit\u201d on an upgrade table entry. The InstallFiles action  instructs the installer program to install the files in the file identifier list ( of ). The MigrateFeatureSettings action  is an instruction to the installer program to search the update table for any \u201chits\u201d, and check the upgrade table for the feature state attribute. If the feature state attribute is set to true, the installer program queries the existing product for feature states. If the product being installed has any feature states that map identically (i.e., have the same name) to feature states of an installed product, the settings for the previously installed settings will be used as the default settings for the product being installed. Custom logic can also be employed by the author to migrate feature settings, if necessary. The RemoveExistingProducts action is used to remove previous versions and\/or related versions of the product being upgraded. A coexist attribute indicates that the previous or related products specified in the update table entry are not required to be removed. The RemoveExistingProducts action can come anywhere after the FindRelatedProducts and MigrateFeatureSettings actions. The author determines where to put this action. Placing this action prior to InstallFiles is safer but less efficient than placing this action after InstallFiles. Removing files prior to installing newer ones is safer because it essentially uninstalls the prior version before installing the upgrade. This is also less efficient because files that have not changed are removed and then installed again.","Referring again to , the logic next moves to block  where an upgrade installation package is created. The upgrade installation package includes the upgrade installation file shown in , as well as any application files to be installed. The upgrade installation package is then made available to users. See block . Making the upgrade installation package available to users can be done in a variety of way, for example, by placing the information on a CD-ROM, or by placing the information on a network disk drive. The logic of  of authoring upgrade data and instructions then ends and processing is returned to .","Overview of Upgrade Installation Procedure",{"@attributes":{"id":"p-0049","num":"0048"},"figref":["FIG. 5","FIG. 5"],"b":["37","20","37","38","35","27","207","208","208"]},"Also illustrated are a package file  and a source . The package file  and the source  may reside on a CD-ROM disk  accessible to the computer  via an optical disk drive  (see ). The package file  and the source  may also exist in any other location accessible by the computer . The package file  and the source  are discussed in further detail below. The functionality and construction of the installer program  is best described by example, through the upgrading of a product. It will be appreciated that the upgrading of a product is essentially the same as installing a product. When a product is installed, it is registered. In other words, the configuration database  is updated to include the installed product. If a product is already installed, the installed product is removed and unregistered, and the upgrade is installed and registered. The product-identifying triplet is used to find installed versions of the product or related products.","To begin, a user initiates the upgrade of the product, such as the Microsoft Word application program. Initiating the installation may constitute the act of inserting CD-ROM disk  in optical disk drive , or the act of executing a remote startup script over LAN , or any other means of initiating the installation. Once the upgrade is initiated, the installer program  assumes control of processing.","The installer program  begins the installation by reading the package file  into memory, such as RAM . The package file , also known as an upgrade installation file, is unique to the product and is essentially a database that describes, among other things, the relationships between the features, components, and resources of the product. The package file  may also include information defining several registry key values for entries in a system registry  maintained by the operating system .  illustrates an exemplary upgrade installation file, i.e., package file.","Still referring to , the installer program  reads the package file  and uses the information stored within to determine the upgrade operations that must be performed for the product. For instance, the installer program  may display a dialog box that presents the user with the option of canceling the upgrade and keeping the installed version of the product or removing existing versions of the product and related products and installing the upgrade. If the user opts to remove an installed version of the product, the installed version of the product is removed. Removal of a product includes updating or removing entries in the configuration database .","The source  contains the program files associated with the features of the application to be upgraded. Those program files making up the selected features are copied from the source  to an appropriate location on the computer , such as to the hard disk drive . If the user identifies a particular location within the file system of the hard disk drive  for a feature, the installer program  will write the program files associated with that feature to the identified location.","During the installation process, the installer program  creates several entries in both the system registry  and the configuration database . As discussed above, the configuration database  may be a portion of the system registry . When a program file is written to an appropriate location, the installer program  creates an entry in the configuration database  corresponding to the program file. The program file may be identified in that entry by a \u201ctoken.\u201d The term \u201ctoken\u201d as used herein refers to any identifier capable of uniquely distinguishing one program file or component from other program files or components. Also in the entry, the path to that program file within the file system is associated with the token.","In the disclosed example, the product upgraded may include a program file  named \u201cword.exe.\u201d The installer program  may copy the word.exe program file  from the source  to the location on the hard-disk drive  identified by the path \u201cC:\\Programs\\Office\\Word\\.\u201d The installer program  then creates an entry in the configuration database  including a token  identifying the word.exe program file  and the path  to that program file. In a similar manner, the speller.exe file  may be written to the path \u201cC:\\Programs\\Office\\Word\\Proofing Tools,\u201d and an entry in the configuration database  may be created with a token  identifying the speller.exe file , and a path  to the speller.exe file . In a like manner, the upgrade installation file is stored at an identified location, and the location of the upgrade installation file will be stored in the configuration database . Preferably, the upgrade installation file will replace the existing installation file, so that there is only one installation file for the product.","The installer program  continues with the upgrade installation process until all of the program files for the application are written to the appropriate locations on the computer . The installer program may also delete files as specified in the upgrade install instructions. When all of the program files are written, the upgrade is complete and the configuration database  is populated with an entry for each installed program file. In addition, the configuration database  includes summary information related to the installed state of the application, including which program files were installed, what version of the application is installed, and the like.","Installing An Upgrade",{"@attributes":{"id":"p-0058","num":"0057"},"figref":["FIG. 6","FIG. 6"],"b":["37","300","37","37","304","306","308"]},"If, however, it is determined that no newer products are installed (no in decision block ) or that even though newer products are installed, the upgrade should be installed (yes in decision block ), the logic moves to block  where the action list, such as the one shown in , is obtained. The actions of the action list are then processed. In that regard, the logic moves to decision block  where a test is made to determine if there are more actions to process. If so, the next action is processed in block , which is shown in detail in , and described below. If there are no more actions to process, the upgrade installation file of  is then stored. See block . In general, an upgrade is used to replace an installed version of a product, in which case the upgrade package file replaces the installation file that is currently associated with the installed version of the product. The configuration database is then updated to show that the application program has been upgraded. See block . After the configuration database has been updated in either block  or , the logic of  of performing a program upgrade ends.","The logic of processing an action in the action list  is illustrated in detail in .  illustrates a few of the key actions that can be included in an action list, such as the example shown in . However, it will be appreciated that there are many other actions that can be included in an action list for an upgrade. In order to avoid undue repetition and unnecessarily expand this application and because upgrade actions are well known to those skilled in this area of computer technology, all possible upgrade actions are not set forth here.","The logic of  moves from a start block to decision block  where a test is made to determine if the action is find existing products. If so, the logic moves to block  to find existing products. As described in connection with , this is accomplished by finding \u201chits\u201d in the upgrade table. If not, the logic moves to decision block  where a test is made to determine if the action is install files. If so, the logic moves to block  where files are installed based on the file identifier list ( in ). If not, the logic moves to block  where a test is made to determine if the action is to update the registry. If so, the registry is updated according to the registry list in the update table ( in ). If not, the logic moves to decision block  where a test is made to determine if the action is remove existing products. If so, existing products are removed in block . The logic of removing existing products is illustrated in detail in  and is described below. If the action is not remove existing products, the logic moves to block  where the requested action is performed. As previously stated, there are many actions that can be used in an action list during an upgrade, only a representative sample are described here. Block  represents other not described actions. After the appropriate action has been performed (i.e., find existing products , install files , update registry , remove existing products , or perform requested action not listed above ), the processing logic of  ends.","The logic of removing existing products  is illustrated in detail in , and moves from a start block to decision block  where a test is made to determine if there are more upgrade table entries. If so, the logic moves to decision block  where a test is made to determine if the property is set for the upgrade table. If the property is set, there was a \u201chit\u201d for the upgrade table entry. In other words, one or more products match the product-identifying triplet(s) of the upgrade table entry. If the property is set, the logic moves to decision block  where a test is made to determine if the coexist attribute is set to true for the upgrade table entry. If the coexist attribute is not set to true, the installed product or related product cannot coexist with the upgrade being installed, and must be removed. The logic then moves to block  where the installation file for the product to be removed is obtained. Next, in block  instructions for removing the produce are generated. When a product is installed, the installation file is saved. Similarly, when a product is upgraded the upgrade installation file is saved. Preferably, when an upgrade installation file is saved, it overwrites the existing installation file or upgrade installation file. Installation instructions for any subsequent patches are also stored. Thus, directions can be generated specifying how to remove any product that was installed, upgraded and patched using the installer program . The product is then removed in block . After the product is removed , or if the products can coexist (yes in block ), or if the property is not set (no in block ), the logic returns to block  to determine if there are more upgrade table entries. The logic of blocks  through  is repeated until it is determined in decision block  that there are no more upgrade table entries, at which point the logic of  of removing existing products ends, and processing returns to .","While the preferred embodiment of the invention has been illustrated and described, it will be appreciated that various changes can be made therein without departing from the spirit and scope of the invention."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The foregoing aspects and many of the attendant advantages of this invention will become more readily appreciated as the same become better understood by reference to the following detailed description, when taken in conjunction with the accompanying drawings, wherein:",{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 4A"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":["FIG. 4B","FIG. 4A"]},{"@attributes":{"id":"p-0022","num":"0021"},"figref":["FIG. 4C","FIG. 4A"]},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 8"}]},"DETDESC":[{},{}]}
