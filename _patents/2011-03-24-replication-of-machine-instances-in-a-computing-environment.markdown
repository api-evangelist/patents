---
title: Replication of machine instances in a computing environment
abstract: Disclosed are various embodiments for replication of machine instances in a computing environment. A clone machine instance is instantiated from a machine image associated with an original machine instance. A stored execution state of the original machine instance is applied to the clone machine instance. At least a portion of a series of stored events received by the original machine instance is applied to the clone machine instance.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08689214&OS=08689214&RS=08689214
owner: Amazon Technologies, Inc.
number: 08689214
owner_city: Reno
owner_country: US
publication_date: 20110324
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"p":["A system crash (i.e. \u201ccrash\u201d) in computing is a condition in which a computer or a program, either an application or part of the operating system, ceases to function properly, often resulting in the system being unusable. When computing systems undergo crashes, the user of the machine may have the option of rebooting the computer and\/or restarting the applications that were being executed. However, in doing so, the user may lose information about events that led up to the crash, thus hampering the ability to determine what caused the crash. The user may have another option, which is keeping the virtual machine offline or otherwise out of service such that events that led up to the crash can be examined. However, keeping the computing system out of service can have a negative impact on the user's productivity.","Various forms of shared computing resources have been implemented. As one example, a shared computing resource may include multiple networked computing devices executing instances of virtual machines, where each of these virtual machines are associated with a particular user. These users may be, for example, customers of a utility computing service. Each virtual machine may execute one or more applications, such as a web server, video encoder, load balancer, or database, among many other possibilities. The users may be capable of terminating machine instances or starting execution of new machine instances whenever they desire, sometimes incurring costs only for the time that they actually use the machine instance. This model thereby provides an elastic computing resource.","The present disclosure relates to replicating machine instances in a shared computing environment. The systems and methods can be used, among other reasons, to facilitate troubleshooting of computing system failures or computing anomalies. According to some embodiments, a clone machine instance is created from an original machine instance. The machine image of the original machine instance is used to create this clone, resulting in a copy of the original machine instance as it existed at boot time. The state of the clone machine instance is then moved forward in time by first applying a snapshot of the execution environment of the original machine instance as it existed at a particular point in time after boot time. The state of the clone machine instance is then moved forward again in time by applying to the clone machine instance the same inputs seen by the original machine instance during a particular period of time. These inputs may include transactions with a virtual block device (e.g., read, write, etc.), network traffic, and possibly other types of inputs.","In some embodiments an interface is provided to allow the user to control execution of the clone machine instance. This interface may allow the user to select different snapshots managed by the user and different series of inputs. This interface may allow the user to choose specific types of inputs to be applied. In the following discussion, a general description of the system and its components is provided, followed by a discussion of the operation of the same.","With reference to , shown is a networked environment  according to various embodiments. The networked environment  includes one or more computing devices , one or more utility computing resources , and one or more clients  in data communication by way of a network . The network  includes, for example, the Internet, intranets, extranets, wide area networks (WANs), local area networks (LANs), wired networks, wireless networks, or other suitable networks, etc., or any combination of two or more such networks.","The utility computing resource  includes a plurality of computing devices . . . , at least one virtual block device , a virtual private router , and a data store . Such components of the utility computing resource  may be in data communication with each other and\/or the computing device  by way of a network such as network . Such components of the utility computing resource  may be located in a single location (e.g. a building or cluster of buildings) or may be dispersed among many different geographical locations. Computing devices . . . may correspond to differing hardware platforms in various embodiments. Accordingly, computing devices . . . may have differing hardware configurations, for example, of central processing units (CPUs), system memory, data storage, network bandwidth, and\/or other hardware characteristics.","Each computing device . . . may execute one or more machine instances (MI) , where a machine instance  corresponds to an actual physical machine or to a virtual machine. In the example of , an original machine instance -O is executed on computing device while a clone machine instance -C is executed on computing device . However, in other embodiments, original machine instance -O and clone machine instance -C execute as virtual machines on the same computing device ","A virtual machine instance  is a virtualized computer system, or a software implementation of a computer system layered on top of a physical computing system, such as through a hypervisor. Virtual machines may provide for multiple and\/or different operating system environments to run concurrently on a single system having a processor circuit and a memory. As a non-limiting example, multiple instances of a Linux\u00ae operating system environment may execute concurrently with multiple instances of a Microsoft\u00ae Windows\u00ae operating system environment on a single computer system. Each machine instance may be controlled by different users, who may have administrative access only to their own instance(s) and no access to the instances of other users. Multiple machine instances may, in fact, execute concurrently on a computer system including parallel processors, although multiple instances may appear to execute concurrently on a multithreaded computer system with fewer processors than instances. In some cases, different machine instances run on a particular physical computing device  are controlled by two or more different users, while in other cases all of the machine instances are controlled by a single user.","Various applications and\/or other functionality may be executed in the computing devices . . . according to various embodiments. Also, various data is stored in the data store  that is accessible to the computing devices . . . . The data store  may be representative of a plurality of data stores as can be appreciated. The data stored in the data store , for example, is associated with the operation of the various applications and\/or functional entities described herein. The data stored in the data store  may include, for example, one or more machine images  used to start the execution of a machine instance . A machine image  includes one or more disk images of an operating system environment and may include additional software such as web servers, databases, load balancers, caches, among other possible application software possibilities.","In addition to the storage provided by the data store , one or more of the machine instances  may utilize a virtual block device  for storage. A virtual block device  appears to the machine instance  as a local block level device (e.g., an attached disk drive) but that can be attached to and unattached from the instance through a network. The virtual block device  may be implemented, for example, by one or more server computers with a disk drive or other block level data storage device, by a storage area network (SAN), or by any other system which provides storage capability and the appropriate virtual interface.","As discussed previously, the computing devices . . . which make up the utility computing resource  are attached to the network , which allows communication among computing devices , clients , and utility computing resources . In addition, network  can facilitate communications among individual components within these entities, such as among computing devices -. Although network  may include a number of physical networking devices (e.g. routers, switches, aggregators, etc.), a virtual private router  may further provide a virtual network overlay on top of the network . This virtual network overlay may be user-specific. With a user-specific virtual network overlay in place, machine instances  inside the utility computing resource  that are associated with a particular user appear to be in the same IP network as computing entities outside the utility computing resource  that are associated with the same user. The virtual private router  may be implemented, for example, by a router, a switch, a server computer with a network interface, or by any other computing system with a network interface and appropriate network overlay functionality. The virtual network overlay allows manipulation of network traffic so that two machines, or machine instances, can appear to use the same IP address. The virtual network overlay distinguishes between the two in order to deliver packets to the correct machine instance, using packet wrapping, tunneling techniques, or other approaches.","Turning now from the utility computing resource  to the computing device , the computing device  may comprise, for example, a server computer or any other system providing computing capability. Alternatively, a plurality of computing devices  may be employed that are arranged, for example, in one or more server banks or computer banks or other arrangements. For example, a plurality of computing devices  together may comprise, for example, a cloud computing resource, a grid computing resource, and\/or any other utility computing arrangement. Such computing devices  may be located in a single installation or may be distributed among many different geographical locations. For purposes of convenience, the computing device  is referred to herein in the singular. Even though the computing device  is referred to in the singular, it is understood that a plurality of computing devices  may be employed in the various arrangements as described above.","Various applications and\/or other functionality may be executed in the computing device  according to various embodiments. The components executed on the computing device , for example, include a replicator module , and may also include other applications, services, processes, systems, engines, or functionality not discussed in detail herein. The replicator module  is executed to clone or replicate machine instances. In doing so, the replicator module  reproduces the state of an original machine instance -O as it existed at a particular point in time on a clone machine instance -C. The replicator module  is further executed to take inputs which were received at the original machine instance -O and to apply those inputs to the clone machine instance -C such that the execution of the clone machine instance -C moves forward in time from the snapshot of the particular point in time.","In the embodiment illustrated in , the computing device  which executes the replicator module  is separate from, but in communication with, the utility computing resource . In other embodiments (not shown), the computing device  resides within the utility computing resource .","Various data is stored in a data store  that is accessible to the computing device . The data stored in the data store  includes, for example, execution state , one or more event capture buffers , and potentially other data which is associated with the operation of the replicator module . The data store  may be representative of a plurality of data stores as can be appreciated.","Turning now from the computing device  to the client , the client  is representative of a plurality of client devices that may be coupled to the network . The client  may comprise, for example, a processor-based system such as a computer system. Such a computer system may be embodied in the form of a desktop computer, a laptop computer, a personal digital assistant, a cellular telephone, a set-top box, a music player, a web pad, a tablet computer system, a game console, or other devices with like capability.","The client  may utilize web services to interact with the utility computing resource . These web services may be implemented via a variety of middleware frameworks, such as remote procedure calls, service-oriented architecture (SOA), representational state transfer (REST), and other frameworks. The client  may be configured to execute various applications such as a browser  and\/or other applications. The browser  may be executed in a client , for example, to access and render network pages, such as web pages, or other network content served by the computing device  and\/or other servers. The client  may be configured to execute applications beyond browser  such as, for example, email applications, instant message applications, and\/or other applications.","Next, a general description of the operation of the various components of the networked environment  is provided. To begin, a user at a client  configures one or more machine instances (MI)  for execution within the utility computing resource . The initiation of the execution of the machine instances  may be performed manually (e.g. through a browser or other user interface) by the user or programmatically. In configuring a machine instance , the user may specify a particular machine image  which can include a desired operating system and, potentially, one or more applications). Further, the configuring can include specifying a desired hardware platform (e.g. having a particular chipset, processor speed, memory size, etc.). In executing, the machine instances  thereby use computing resources of the utility computing resource .","The user initiates replication, or cloning, of an original machine instance -O by interacting (manually or programmatically) with the replicator module . As will be further described below, this replication performed by the replicator module  allows a user to investigate any sort anomalous behavior by \u201creplaying,\u201d on the clone machine instance -C, activity leading up to the anomalous behavior of the original machine instance -O. Such anomalous behavior may include, for example, an unresponsive system, a system that returns unexpected data, a crash, etc. The replication also enhances testing by allowing the user to execute the original machine instance -O, and then perform a series of replications, advancing the clone machine instance -C to a different execution state each time.","The replicator module  associates each replica or clone with a replay buffer size and\/or snapshot period. For example, a clone machine instance -C may be configured to take a snapshot of the original machine instance's -O execution state every five minutes, and then to buffer for five minutes after the snapshot. The replay buffer may include any events which originate from outside the original machine instance -O and interact with the original machine instance -O, for example, local and remote storage device transactions, network traffic, and environmental information. When the event data includes environmental information, environmental sensors associated with the original machine instance -O can be used to record the environmental information such as, but not limited to, temperature, humidity, vibration, voltage and\/or current supplied to various computing components hosting the original image. The events that trigger the recording of this information can be, for example, periodic samples or samples triggered by alarms. Thus, if the original machine instance -O crashes, the replicator module  can replay activity before the crash, up to five minutes. In some embodiments multiple clones can be used with staggered snapshot periods, for example, a first clone is created using a snapshot taken at time t, a second clone is created using a snapshot at t+5 minutes, a third clone is created using a snapshot at t+10 minutes, etc. Multiple clones also be created with different replay sizes, for example, a first clone is created from a snapshot at time t using a 5 minute replay buffer, and a second clone is also created at time t but using a 10 minute replay buffer.","In some embodiments, the clone machine instance -C utilizes the same IP address as the original machine instance -O. As noted above, the virtual network overlay takes care of distinguishing between the two machine instances and ensuring delivery to the correct machine instance. This capability, coupled with the replay buffer, allows the original machine instance -O to continue executing and to continue to send\/receive network traffic while the clone machine instance -C simultaneously receives virtual network traffic destined for the same address from the capture buffer.","The replicator module  may provide an event control interface that allows the user to start and stop replay of events into the clone by specifying particular timestamps or ranges of timestamps. In some embodiments, this event control interface allows the user to select a different snapshot from which to start execution by specifying a particular time at which the snapshot was taken. This interface may be programmatic or may be a graphical user interface.","Referring next to , shown is a flowchart that provides one example of the operation of a portion of the replicator module  () according to various embodiments. It is understood that the flowchart of  provides merely an example of the many different types of functional arrangements that may be employed to implement the operation of the portion of the replicator module  as described herein. As an alternative, the flowchart of  may be viewed as depicting an example of steps of a method implemented in the computing device  () according to one or more embodiments.","The process  of  begins with block , the replicator module  instantiates a clone machine instance -C from the machine image  used to instantiate a corresponding original machine instance -O (). As mentioned above, a machine image  is a stored image of an operating system, sometimes also including a particular set of software applications. In some embodiments, the instantiation in block  creates a virtual machine and boots the virtual machine from the machine image . In other embodiments, the instantiation in block  reserves or allocates a physical machine and boots the physical machine from the machine image . In either case, the result is the particular machine instance -C, which is a clone of the original machine instance -O as it existed at boot time.","In block , the replicator module  examines configuration settings and attaches a debugger to the clone machine instance -C, if the settings so indicate. These configuration settings may be provided by the user through a client  () (e.g., via a web services call, a network page, etc.), or may be default settings.","Next, in block , the replicator module  accesses execution state  in data store , which represents a snapshot of the execution state of the original machine instance -O at a particular point in time. The replicator module  applies the execution state  () to the clone machine instance -C, thus setting the execution state of the clone machine instance -C to the time the snapshot was taken. In some embodiments, this may be the most recent snapshot of the execution state. In other embodiments, if multiple snapshots are available, one snapshot is selected through the event controller interface described above.","The execution state  includes at least the contents of the memory of the original machine instance -O and the register contents of the processor of the original machine instance -O at the time of the last snapshot. The execution state  may also include the contents of block devices locally attached to original machine instance -O. The execution state  may also include the storage state of one or more virtual block devices that are remotely accessible to the original machine instance. The execution state  may have been stored by replicator module  or by another module.","In block , the replicator module  accesses an event capture buffer  () in data store , which contains a series of inputs or events received by the original machine instance -O after the snapshot. The event capture buffer  may have been stored by replicator module  or by another module. The replicator module  begins applying, or \u201cplaying back,\u201d some or all of the stored events to the clone machine instance -C. The individual events include timestamps, and the replicator module  may use these timestamps during playback to maintain the same timing relationship between events that was present at the time the events were captured. The replicator module  may also use these timestamps during playback to alter the timing, such that playback occurs slower than, or faster than, the original events. The playback in block  may occur in response to programmatic or user input through the event controller interface described above, or may occur automatically after the application of the execution state in block .","The number of events applied to the clone machine instance -C may be determined based on criteria supplied through the event controller interface. As one example, a criterion may specify that five minutes of the event capture buffer , or other time period, are played back. As another example, a criterion may specify that 33% of the event capture buffer , or other percentage, is played back. In some embodiments, the user may also specify which portion of the event capture buffer  is to be applied. The portion of the event capture buffer  may be, for example, the first five minutes of a buffer, or the middle third of a buffer, or some other portion. In some embodiments multiple capture buffers  are stored according to different configuration data. For example, the events may be included or excluded based on where the events originate from (e.g. a device, an IP address, etc.), a time they are received, the type of event, or a user from which the events are received, among other examples.","Since the original machine instance -O executes in the environment of the utility computing resource  (), the events applied can include virtual block device transactions between the original machine instance -O and the virtual block device , and\/or virtual network traffic between the original machine instance -O and the virtual private router . In some embodiments, the input events are restricted and do not include keystrokes, mouse movements, or other forms of user input, since the environment of the utility computing resource  is sometimes restricted in this manner. Some embodiments of the replicator module  allow specified types of events to be selectively included or excluded from playback to the clone machine instance -C. In one example, only virtual block device transactions are applied to the clone machine instance -C. In another example, virtual block device transactions are excluded from playback. In yet another example, only those virtual block device transactions which involve a specific device are applied. In yet another example, only virtual network traffic involving a particular source or destination address is applied. In addition to excluding some events, in some embodiments, entropic events can be injected into the events in order to observe how the cloned machine instance -C behaves. For example, various events (e.g. network traffic, hard drive failure events, etc.) may be applied at random times in conjunction with the original event data.","In some embodiments, the event capture buffer  used for playback may be the buffer with the most recent events. In other embodiments, if multiple capture buffers are available, one buffer can be selected based on criteria selected by the user associated with the original machine instance -O. In this way, a user can select from among various buffers that contain desired event data.","Once playback from the event capture buffer  has begun, the replicator module  waits at block  for a periodic timer or receipt of a debugger command. Although an event-driven model will now be described for buffer playback and debugger commands, a polling mechanism is also possible, as should be appreciated. On expiration of a periodic timer, the replicator module  moves to block . In block , the replicator module  plays back the next portion of the event capture buffer . If that portion is not the last, the replicator module  moves to block  to await another command or timer expiration. However, if this is the last portion of the buffer (playback is finished), the replicator module  moves to block .","When a debugger command is received, the replicator module  handles the command in block . Such handling may involve traditional debugger functions such as starting, stopping, or pausing execution of the clone machine instance -C. In addition, the replicator module  may provide more functions than those of a traditional debugger. For example, the replicator module  may allow the user to select a different snapshot from which to restart execution, to select a different portion of the capture buffer for playback, or to select a different capture buffer altogether. If the command handling involves starting from a different snapshot, the replicator module  continues processing at block . If the command handling involves starting from a different snapshot, the replicator module  continues processing at block . Otherwise, the replicator module  moves to block , where the next portion of the capture buffer is played back.","The embodiment described in connection with  utilizes a capture buffer and replays events from this capture buffer. However, other embodiments create a clone machine instance -C and then apply a snapshot of the execution state  to the clone machine instance -C, but do not store events to, or replay events from, a capture buffer. Even without a capture buffer, the cloning of an original machine instance -O allows forensic analysis to be performed while the original machine instance -O continues execution or is rebooted\/restarted.","With reference to , shown is a schematic block diagram of the computing device  according to an embodiment of the present disclosure. The computing device  includes at least one processor circuit, for example, having a processor  and a memory , both of which are coupled to a local interface . To this end, the computing device  may comprise, for example, at least one server computer or like device. The local interface  may comprise, for example, a data bus with an accompanying address\/control bus or other bus structure as can be appreciated.","Stored in the memory  are both data and several components that are executable by the processor . In particular, stored in the memory  and executable by the processor  are a replicator module  and potentially other applications. Also stored in the memory  may be a data store  and other data. In addition, an operating system may be stored in the memory  and executable by the processor .","It is understood that there may be other applications that are stored in the memory  and are executable by the processors  as can be appreciated. Where any component discussed herein is implemented in the form of software, any one of a number of programming languages may be employed such as, for example, C, C++, C#, Objective C, Java, Javascript, Perl, PHP, Visual Basic, Python, Ruby, Delphi, Flash, or other programming languages.","A number of software components are stored in the memory  and are executable by the processor . In this respect, the term \u201cexecutable\u201d means a program file that is in a form that can ultimately be run by the processor . Examples of executable programs may be, for example, a compiled program that can be translated into machine code in a format that can be loaded into a random access portion of the memory  and run by the processor , source code that may be expressed in proper format such as object code that is capable of being loaded into a random access portion of the memory  and executed by the processor , or source code that may be interpreted by another executable program to generate instructions in a random access portion of the memory  to be executed by the processor , etc. An executable program may be stored in any portion or component of the memory  including, for example, random access memory (RAM), read-only memory (ROM), hard drive, solid-state drive, USB flash drive, memory card, optical disc such as compact disc (CD) or digital versatile disc (DVD), floppy disk, magnetic tape, or other memory components.","The memory  is defined herein as including both volatile and nonvolatile memory and data storage components. Volatile components are those that do not retain data values upon loss of power. Nonvolatile components are those that retain data upon a loss of power. Thus, the memory  may comprise, for example, random access memory (RAM), read-only memory (ROM), hard disk drives, solid-state drives, USB flash drives, memory cards accessed via a memory card reader, floppy disks accessed via an associated floppy disk drive, optical discs accessed via an optical disc drive, magnetic tapes accessed via an appropriate tape drive, and\/or other memory components, or a combination of any two or more of these memory components. In addition, the RAM may comprise, for example, static random access memory (SRAM), dynamic random access memory (DRAM), or magnetic random access memory (MRAM) and other such devices. The ROM may comprise, for example, a programmable read-only memory (PROM), an erasable programmable read-only memory (EPROM), an electrically erasable programmable read-only memory (EEPROM), or other like memory device.","Also, the processor  may represent multiple processors  and the memory  may represent multiple memories  that operate in parallel processing circuits, respectively. In such a case, the local interface  may be an appropriate network  () that facilitates communication between any two of the multiple processors , between any processor  and any of the memories , or between any two of the memories , etc. The local interface  may comprise additional systems designed to coordinate this communication, including, for example, performing load balancing. The processor  may be of electrical or of some other available construction.","Although replicator module  and other various systems described herein may be embodied in software or code executed by general purpose hardware as discussed above, as an alternative the same may also be embodied in dedicated hardware or a combination of software\/general purpose hardware and dedicated hardware. If embodied in dedicated hardware, each can be implemented as a circuit or state machine that employs any one of or a combination of a number of technologies. These technologies may include, but are not limited to, discrete logic circuits having logic gates for implementing various logic functions upon an application of one or more data signals, application specific integrated circuits having appropriate logic gates, or other components, etc. Such technologies are generally well known by those skilled in the art and, consequently, are not described in detail herein.","The flowchart of  shows the functionality and operation of an implementation of portions of environment . If embodied in software, each block may represent a module, segment, or portion of code that comprises program instructions to implement the specified logical function(s). The program instructions may be embodied in the form of source code that comprises human-readable statements written in a programming language or machine code that comprises numerical instructions recognizable by a suitable execution system such as a processor  in a computer system or other system. The machine code may be converted from the source code, etc. If embodied in hardware, each block may represent a circuit or a number of interconnected circuits to implement the specified logical function(s).","Although the flowchart of  shows a specific order of execution, it is understood that the order of execution may differ from that which is depicted. For example, the order of execution of two or more blocks may be scrambled relative to the order shown. Also, two or more blocks shown in succession in  may be executed concurrently or with partial concurrence. Further, in some embodiments, one or more of the blocks shown in  may be skipped or omitted. In addition, any number of counters, state variables, warning semaphores, or messages might be added to the logical flow described herein, for purposes of enhanced utility, accounting, performance measurement, or providing troubleshooting aids, etc. It is understood that all such variations are within the scope of the present disclosure.","Also, any logic or application described herein, including replicator module , that comprises software or code can be embodied in any non-transitory computer-readable medium for use by or in connection with an instruction execution system such as, for example, a processor  in a computer system or other system. In this sense, the logic may comprise, for example, statements including instructions and declarations that can be fetched from the computer-readable medium and executed by the instruction execution system. In the context of the present disclosure, a \u201ccomputer-readable medium\u201d can be any medium that can contain, store, or maintain the logic or application described herein for use by or in connection with the instruction execution system. The computer-readable medium can comprise any one of many physical media such as, for example, magnetic, optical, or semiconductor media. More specific examples of a suitable computer-readable medium would include, but are not limited to, magnetic tapes, magnetic floppy diskettes, magnetic hard drives, memory cards, solid-state drives, USB flash drives, or optical discs. Also, the computer-readable medium may be a random access memory (RAM) including, for example, static random access memory (SRAM) and dynamic random access memory (DRAM), or magnetic random access memory (MRAM). In addition, the computer-readable medium may be a read-only memory (ROM), a programmable read-only memory (PROM), an erasable programmable read-only memory (EPROM), an electrically erasable programmable read-only memory (EEPROM), or other type of memory device.","It should be emphasized that the above-described embodiments of the present disclosure are merely possible examples of implementations set forth for a clear understanding of the principles of the disclosure. Many variations and modifications may be made to the above-described embodiment(s) without departing substantially from the spirit and principles of the disclosure. All such modifications and variations are intended to be included herein within the scope of this disclosure and protected by the following claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["Many aspects of the present disclosure can be better understood with reference to the following drawings. The components in the drawings are not necessarily to scale, emphasis instead being placed upon clearly illustrating the principles of the disclosure. Moreover, in the drawings, like reference numerals designate corresponding parts throughout the several views.",{"@attributes":{"id":"p-0005","num":"0004"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0006","num":"0005"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0007","num":"0006"},"figref":["FIG. 3","FIG. 1"]}]},"DETDESC":[{},{}],"heading":"DETAILED DESCRIPTION"}
