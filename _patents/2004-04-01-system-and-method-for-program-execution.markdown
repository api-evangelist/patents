---
title: System and method for program execution
abstract: The invention pertains to a method and system that uses similar functionalities of different components within a software application when executing the application and application components. In one embodiment, predefined structures are created for a component type, where each component type has a similar functionality when executed. Parameter information is received at a client and linked with the predefined to provide a script specific predefined structure. The component is executed by executing the script specific predefined structure. After a user exits the component, the script specific predefined structure is automatically deleted.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07685230&OS=07685230&RS=07685230
owner: Vaakya Technologies Private Limited
number: 07685230
owner_city: Bangalore, Karnataka
owner_country: IN
publication_date: 20040401
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION","Form PDS, Title Portion\u2014SCRIPT 1","Form PDS, Generic Structure Portion\u2014Script 2","Form PDS, Field Structure Portion\u2014Script 3","Form PDS, Foreign Link Portion\u2014Script 4","Form PDS, Grid Structure Portion\u2014Script 5","Form PDS, Grid Field Structure Portion\u2014Script 6","Menu PDS, Menu Structure Portion\u2014Script 7","Menu Component Script\u2014Script 8","Form Component Script\u2014Script 9","Token Object of Form Script\u2014Script 10","Result Object of Form Script\u2014Script 11"],"p":["1. Field of the Invention","The invention relates generally to the field of software programs. In particular, the invention relates to a system and method for executing a component of a program.","2. Background of the Invention","There are several methods and systems used to execute programs in both the client-server and stand alone environments. All have several shortcomings, such as platform dependence problems, burdening the server and the network bandwidth, garbage collection, fault tolerances, slow execution speed and other problems.","In some client\/server environments, a client is designed to be small so that most of the data processing takes place on the server. These clients are typically referred to as thin clients, and they are advocated by organizations such as Netscape and Sun Microsystems who support Java-based thin clients running on network computers. On the other hand, Microsoft and Intel are pushing larger applications that are run locally on desktop computers.","Software programs are typically developed using one of many high-level languages such as C, Java, C#, VB, Perl, and the like. The source code is compiled into machine code, which the processor can understand and use to execute a program. Generally, programs are compiled and executed using three different methods. High-level language is compiled into machine code by either compiling the program into: (a) a platform dependent executable (\u2018exe\u2019) or a dynamic link library (\u2018dlll\u2019); (b) a platform independent byte code that is executed by a virtual machine; or, (c) is interpreted and executed line by line.","The choice of which high-level language and method of program execution to utilize while preparing a software program depends on many factors, such as the ease of development, component reusability, ease of maintenance (which pertains to platform dependence) and faster program execution with minimum resources (which implicate memory and network bandwidth burdens). The scripting language and byte code options are typically used for ease of program maintenance (operating system and processor independence) rather than speed of execution.","Programs written in the C\/C++ language form a machine-readable, platform dependent executable when compiled. In the client-server environment, when a user at the client desires to execute a program, the client sends a request to the server and the entire executable is transferred to the client, i.e., a copy of the executable is transferred from a server to the client and executed on the client computer. This involves the use of substantial network bandwidth for sending information back and forth between the client and the server computer. Although most of the processing is done at the client computer, the information required needs to be sent on an ongoing basis.","Another shortcoming is the platform dependence of the program. A program compiled for a Windows operating system cannot be executed on a Linux operating system and vice-y-versa. As a result, the server maintains multiple versions of the executable to service clients running different operating systems.","Sun created Java to address several of these shortcomings. Programs written in Java are platform independent. The Java compiler converts the Java source code to byte code, which is understood by the Java Virtual Machine (JVM). The JVM is platform dependent and translates the program to machine-readable form for execution. The byte code, however, is dense and must be transmitted from the server to the client, thus causing network bandwidth clutter. Further, most of the programs written in Java are programmed such that the processing required is performed at the server computer. This limits the number of clients that can be serviced by the server at one time.","JavaScript and other similar languages are interpreted languages. In such languages, there is an interpreter at the client and the client receives the script in text form. The interpreter at the client interprets one or more lines at a time to execute the program. Because the actual text of the program script is sent, less network bandwidth is burdened than is burdened when C\/C++ executables or Java byte code is sent. One reason why less bandwidth is burdened is because the executable and byte code files are denser. JavaScript programs, however, require the entire script to be sent from the server to the client. This unnecessarily clogs up network bandwidth because, in many cases, the entire script need not be transmitted.","In databases used in the client-server environment, such as SQL and Oracle databases, the client sends queries to the server, which sends the requested information to the client. The intelligence required to display the information resides at the client and, hence, some processing relating to user interfaces is performed at the client computer. If expressions need to be solved, however, the server needs to be contacted. In such cases, the server retrieves the information from the database, calculates the result of the expression and sends back the information to the client. This requires the server processor to calculate the result and, thus, slows down and limits the other clients being serviced at the server.","When servers need to undergo regular maintenance procedures, crash or malfunction, the clients are disconnected and can only access the server once the server has been fixed. This problem particularly affects small companies because smaller companies cannot afford multiple servers to transfer client load while malfunctioning server computers are being fixed.","Garbage collection is another problem in the industry in standalone as well as client-server environments. Memory allocated in the Random Access Memory (RAM) needs to de-allocated after use to avoid cluttering the memory. When programs are written in the C\/C++ language, programmers must manually deallocate the memory. Programmers use a \u201cmalloc\u201d command to allocate space and a de-allocate command to free space. Programmers, however, often times neglect to deallocate memory space when writing software programs, resulting in memory clutter.","Java attempted to address this problem in its JVM. The JVM keeps track of memory that has not been referenced over a period of time and automatically de-allocates that memory. The device with the JVM, however, must incorporate precious processing power to constantly search for and delete the non-referenced objects. Further, the non-referenced objects use up precious memory while not in use and stored in the memory.","There remains a need to address the problems associated with executing programs, such as, network bandwidth and server processing burdens, platform independence, garbage collection, fault tolerances as well as others.","The present invention may be embodied in several forms, structures and manners. The description provided below and the drawings show an exemplary embodiment of the invention in the client-server environment. Those of skill in the art will appreciate that the invention may be embodied in other forms, structures and manners not shown below, including the stand alone environment. The invention shall have the full scope of the claims and is not to be limited by the embodiments shown below.","The present invention generally pertains to methods and systems to execute programs and program components. Many components of either one program or several programs have the same intended functionality, i.e., the functionality of the component when executed. For example, when a form is executed, the form has a functionality of having a graphical user interface, fields for data entry, buttons linking the form with other forms or components, interrelationship information showing how data entered into a form affects other forms or components, and expression solving capabilities to compute an expression. Most forms have the same intended functionality. Many components of either one program or several programs have the same intended functionality.","According to an embodiment of the invention, a predefined structure (PDS) is created that has the intended functionality of one of several component types. Thus, in the form example, the PDS includes a generic structure that includes the intended functionality of a user interface, fields, buttons, interrelationships, and expressions.","In one embodiment of the invention, PDSs are stored in a memory at a client, and in other embodiments, the PDSs are stored at both the client and a server. A client may request a specific component from a server so that the user can run the component, for example, run a form for a business program. In one embodiment, the server sends only the parameter information about the component to the client. Parameter information includes, for example, specific information about the particular component that the client intends to run. In the form example for instance, the parameter information may include specific information about user interfaces, field names and types, links between the form and other forms and to previously entered user data to be inserted into fields within the form, interrelationship information showing how data entered into the form affects data in another form, e.g., for instance information showing how a cost form affects data in a different profit form, and expression solving information, e.g., for instance information to instruct a processor to sum up several sub-costs to calculate a total cost.","The user receives this information at the client and links it to the corresponding predefined structure to provide a script specific predefined structure, and the client executes the script specific predefined structure. Because all of the intended functionalities of the form are stored at the client memory as a PDS, only the parameter information need be transmitted to the client for processing at the client. By transmitting only the parameter information in script format, much network bandwidth is saved as compared to sending more dense byte or machine code or to sending the entire script, which includes the basic structure of the form.","In another embodiment, the client automatically deletes the component after the user exits the component. For example, after the user closes the component. As a result, improved memory utilization is achieved and problems associated with garbage collection are alleviated. Other systems either require a programmer to manually include commands to deallocate memory for each program that is run on a system or require a processor to periodically scan memory and delete unused components. Programmer neglect and the periodic scanning result in memory clutter and processing power wastage.",{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 1","b":["102","104","106","108","111"]},{"@attributes":{"id":"p-0034","num":"0033"},"figref":["FIG. 1","FIG. 1"],"i":["a ","a"],"b":["108","108","114","112","110","116","114","114","128","127","120","120","122","126","125","124","112","108"]},"The processor  may comprise a microprocessor of a computer and is used to carry out several functions. The run time engine may instruct the processor  to carry out various procedures. In one embodiment, the server parser  instructs the processor  to search for a component requested by the client , and the server execution engine  instructs the server transceiver  to transmit the component script having parameter information to the client . In other embodiments, the server execution engine  also instructs the processor  to transmit to the client  the parameter information of previously entered user defined data that is associated with the requested component and stored in the user database . In alternate embodiments, the server linker  instructs the server processor  to link the component script to a PDS  to provide a script specific PDS; and, the server execution engine  instructs the server processor to temporarily store in the server short term memory  and execute the script specific PDS and to delete the script specific PDS after it is exited.","The server processor  also temporarily moves information, such as the run time engine , script  or data from the user database  from the long term  to the short term memory . The server's  transceiver  is used to transmit and receive information, such as transmitting script to the client and receiving requests from the user.",{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIG. 1","i":"b ","b":["102","102","136","132","130","146","136","136","138","138","140","144","143","142","132","130"]},"In one embodiment, the client parser  instructs the client processor  to search for identifiers (explained below in greater detail) within component script and predefined structures , the client linker  instructs the client processor  to link parameter information of the requested component to a corresponding PDS  to provide a script specific PDS, and the client execution engine  instructs the client processor  to temporarily store in the client short term memory  and execute the script specific PDS. When the user exits the requested component, the client execution engine  instructs the client processor  to automatically delete the script specific PDS.","The client processor  may also be used to temporarily move information, such as the run time engine  from the long term  to the short term memory . The client transceiver  may be used to transmit and receive information, for example, to transmit requests to the server  and to receive script from the server .","The client run time engine  may be stored on either one of or both of the client and server. Thus, the run time engine  can be configured to behave as a client , server , or a peer to peer or offline application. As both the server  and the client  have the same amount of intelligence, they can swap roles as server or client. Swapping increases the fault tolerance of the system, and hence, if any machine malfunctions, other machines in the network can efficiently support the malfunctioning machine's workload without disturbing the system. In addition to fault tolerance, this architecture reduces network traffic because each machine is capable of performing its own processing. Thus, continuous communication between the client and the server may not be required.","Note that, although the invention is shown in a client-server environment in , the invention may be embodied in other forms. For example, the invention may be embodied in a stand alone computer that comprises long and short term memories and a processor. In other embodiments, the invention may be stored on any media, such as, for example, magnetic tape, discs, including magnetic and optical discs, and memory chips. The invention may then be loaded from the media onto other devices having processing capabilities, such as a computer or hand held devices.","There is a PDS for each component type, and  shows an embodiment of the invention for creating PDSs. At step  the desired component types and their intended functionalities are identified. Most software programs comprise of several components, which comprise of one or more lines of script that, when executed, exhibit a particular functionality. The script may be in any programming language, for example, C, Fortran, Java, or, in a preferred embodiment of the invention, Vscript, which is described in greater detail below.","The components are divided into component types based on their intended functionalities, the functionality the components exhibit when executed; and, components are typically executed by a processor. Some component types that are found in programs include: programmer defined data types, programmer defined objects, form, view, report, programmer defined functions, menu and third party executables.","As explained above, each component has similar intended functionalities, such as how the user interface appears (where signs and symbols, for example, are located on the user interface), application models, such as the structure of the component and the interrelationships between the component and other components, and expression solving capabilities. For example, most forms exhibit one or more of the following functionalities when executed: having a graphical user interface, fields for data entry, buttons linking the form with other forms or components, interrelationship information showing how data entered into the form affects other forms or components, and expression solving capabilities to compute an expression. A menu component type, for example, exhibits a particular graphical display, includes drop down menus, and drop down menu selections, for linking to various other component types, when executed. Those of skill in the art will appreciate that there are other component types having other intended functionalities, and these other component types are within the scope of the invention.","At step , a PDS is created for each component type. The PDS comprises script that is written so that it has the intended functionality of its corresponding component type. Thus, the configuration of the PDS is dependent on its corresponding component type. Examples of PDSs for form and menu component types are provided below and are written in the C programming language. Note, however, that, in other embodiments, PDSs may be written in other languages, such as, for example, Fortran, Java and the like. Note also that PDSs are stored in machine code at the client and\/or server. The PDSs are precompiled according to the particular operating system and type of processor used at the client or server where the PDS is loaded. Thus, the parameter information that is sent to the client is platform independent and different types of script or code are not needed for different operating systems or processors.","A PDS for a form should have the intended functionality of the form. In the embodiment shown below, the form PDS includes a generic title portion (labeled \u201cstruct tag_VQL_FormInfo\u201d below), a generic structure portion (labeled \u201cstruct tag_VQL_Form\u201d below), a field structure portion (labeled \u201cstruct tag_VQL_Fieldinfo\u201d below), a foreign link portion (labeled \u201cstruct tag_VQL_ForeignLink\u201d below), a grid structure portion (labeled \u201cstruct tag_VQL_Grid\u201d below), and a grid field property portion (labeled \u201cstruct tag_VQL_BoundInfo\u201d below). These portions include the intended functionality of the form. Note that the form PDS shown below includes arrows to particular lines within the PDS. The arrows show where script for a particular form will be inserted into the PDS when the PDS is linked to a component. An example of the form script from one program will be provided and the linking process will be explained.","The generic title portion of the form PDS includes information showing how the title of the form should appear, and an example of such a title portion is shown below. The PDS script pertaining to title and object information is marked below by arrows. Further, the title, as provided in the form script (Script 9) is shown. This and\/or other form structures can be extended to capture additional properties of the form like screen size, display co-ordinates, background color, fonts to be used in all of the labels and fields in the form and the like. This information is used during the linking step explained below in greater detail.",{"@attributes":{"id":"p-0048","num":"0047"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"struct tag_VQL_FormInfo"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"VosText *menuLink;"]},{"entry":[{},"VqlSpec *vsForm;"]},{"entry":[{},"VosText *formTitle; <---- Form title"]},{"entry":[{},"VosText *objName;\u2003<----- TOKEN Object"]},{"entry":[{},"VosText *lblFontName;"]},{"entry":[{},"VosInt lblFontSize;"]},{"entry":[{},"VosText *inpFontName;"]},{"entry":[{},"VosText inpFontSize;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"};"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"The generic structure portion of the form PDS includes information about widgets, grid names and other information, and an example of such a generic structure portion is shown below. The PDS script showing information about the spacing between the list of fields and how the fields are used in the form is marked below by arrows.",{"@attributes":{"id":"p-0050","num":"0049"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"struct tag_VQL_Form"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"VosBool","\u2002\u2009remoteExec;"]},{"entry":[{},"void","*appContext;\u2003\/\/ VqlApp or VqlClient"]},{"entry":[{},"VqlDict","\u2002*objDict;"]},{"entry":[{},"VqlTblInfo","\u2003*vti;"]},{"entry":[{},"VosText","\u2003*recBuffer;"]},{"entry":[{},"VosSize","\u2003maxGrids;"]},{"entry":[{},"VqlGrid","\u2009\u2002*grids[VQL_MAX_FORM_GRIDS];"]},{"entry":[{},"SgiQuery","\u2003*query;"]},{"entry":[{},"SgiFont","\u2009\u2002*lblFont;"]},{"entry":[{},"SgiFont","\u2009\u2002*inpFont;"]},{"entry":[{},"VosText","\u2009\u2002*keyField;"]},{"entry":[{},"VosList","\u2002*widgetList; <\u2212 list of fields"]},{"entry":[{},"VosEnum","\u2009\u2003\u2002entryMode;\u2003<\u2212 append, update, delete"]},{"entry":[{},"VosInt","\u2002error;"]},{"entry":[{},"VdbRcdId","\u2003\u2009prevDataPos;"]},{"entry":[{},"VosList","\u2002*foreignLinks;"]},{"entry":[{},"VqlFieldSet","\u2003\u2009formFields;"]},{"entry":[{},"SgiWidget","\u2003\u2009*delButton;"]},{"entry":[{},"SgiWidget","\u2003\u2009*keyWidget;"]},{"entry":[{},"VosLookup","\u2009\u2003\u2002*vqlLookups;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"};"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"The field structure portion of the form PDS includes information about each field within the form, and an example of such a field structure portion is shown below. The PDS script showing information about the name, identification and size of fields used within the form is marked below by arrows. Further, the name, identification and size of a field, as provided in the form script (Script 9) is shown. This information is used during the linking step explained below in greater detail.",{"@attributes":{"id":"p-0052","num":"0051"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"struct tag_VQL_FieldInfo"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"VosEnum","\u2002\u2009fldType;"]},{"entry":[{},"VqlColSpec","\u2002\u2009*vqc;"]},{"entry":[{},"VosText","*label;\u2003<---- Bill NO"]},{"entry":[{},"VosText","*fldName; <---- TokenId"]},{"entry":[{},"VosText","*linkName;"]},{"entry":[{},"VqlTblInfo","*vti;"]},{"entry":[{},"VosEnum","\u2002\u2009vdtType;"]},{"entry":[{},"VosText","*recBuffer;"]},{"entry":[{},"VosSize","offset;"]},{"entry":[{},"VosSize","colSize;\u2003<----- 06"]},{"entry":[{},"VosSize","maxChars;"]},{"entry":[{},"VosSize","visChars;"]},{"entry":[{},"VosSize","precision;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"VqlForeignLink *helpLink;"]},{"entry":[{},"VqlForeignLink *srcLink;"]},{"entry":[{},"VqlBoundInfo\u2002boundInfo;"]},{"entry":[{},"SgiLabelSpace \u2002*lblSpace;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"VosText","*blanks;"]},{"entry":[{},"VqlForm","\u2009*parentForm; <----- tokform_clinic"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"};"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"If a form includes a link to another component, it will have a foreign link and, pursuant to an embodiment of the invention, there will be a foreign link portion of the form PDS, which includes information about links from the form to other components. An example of such a foreign link portion is shown below.",{"@attributes":{"id":"p-0054","num":"0053"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"struct tag_VQL_ForeignLink"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"VqlTblInfo*vti;"]},{"entry":[{},"VdbHelp\u2003*help;"]},{"entry":[{},"VdbFormat *keyFormatter;"]},{"entry":[{},"VosText \u2002*keySource;"]},{"entry":[{},"VosText \u2002*helpKey;"]},{"entry":[{},"VosText \u2002*recBuffer;"]},{"entry":[{},"VosEnum\u2003\u2009vdtType;"]},{"entry":[{},"VosSize\u2003\u2009offset;"]},{"entry":[{},"VosSize\u2003\u2009colSize;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"};"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"If a form includes a grid, pursuant to an embodiment of the invention, there will be a grid structure portion of the form PDS, which includes information about the size of the grid in rows and columns and other grid information. An example of such a grid structure portion is shown below.",{"@attributes":{"id":"p-0056","num":"0055"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"struct tag_VQL_Grid"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"VosText\u2003\u2002\u2009*alias;"]},{"entry":[{},"VosSize\u2003\u2002maxRows, maxColumns, loadedRecords;"]},{"entry":[{},"VosSize\u2003\u2002curRow, curCol;"]},{"entry":[{},"VqlTblInfo\u2002*vti;"]},{"entry":[{},"VosText\u2003\u2002\u2009*recBuffer;"]},{"entry":[{},"VdbRecset\u2003\u2002*vrs;"]},{"entry":[{},"VqlFieldSet gridFields;"]},{"entry":[{},"VqlFieldInfo *vfiCheck;"]},{"entry":[{},"SgiWidget\u2003\u2009*inpGrid;"]},{"entry":[{},"VosText\u2003\u2002\u2009*curRowData;"]},{"entry":[{},"VqlForm\u2003\u2002*parent;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"};"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"If a form includes a grid, pursuant to an embodiment of the invention, there will be a grid field structure portion of the form PDS, which includes information about the fields within a grid, such as the field and column ids and column sizes. An example of such a grid structure portion is shown below.",{"@attributes":{"id":"p-0058","num":"0057"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"struct tag_VQL_BoundInfo"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"VosBool\u2003\u2002exists;"]},{"entry":[{},"VosEnum\u2003\u2002funcId; \/\/ Aggregate Function"]},{"entry":[{},"VosSize\u2003\u2002\u2009gridId;"]},{"entry":[{},"VosSize\u2003\u2002\u2009columnId;"]},{"entry":[{},"VqlTblInfo\u2009\u2009*vti;"]},{"entry":[{},"VosText\u2003\u2002*recBuffer;"]},{"entry":[{},"VosEnum\u2003\u2002vdtType;"]},{"entry":[{},"VosSize\u2003\u2002\u2009offset;"]},{"entry":[{},"VosSize\u2003\u2002\u2009colSize;"]},{"entry":[{},"VqlExpSolver *solver;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"};"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"Thus, in the embodiment shown above, the form PDS includes the intended functionality of the form, such as information about how the title looks when displayed, how the graphical display of the form would appear when the form is executed, information pertaining to fields within the form, if a link (or button) on the form is present, information about what the link connects the form to and information of how data entered into the form might affect other forms or components, and, if the form includes a grid, information about the grid and fields within the grid.","A PDS for a menu should have the intended functionality of a menu. In the embodiment shown below, the menu PDS includes a menu structure portion (labeled \u201csruct tag_VQL_MenuInfo\u201d below). The menu structure portion includes information about the menu graphical display, drop down menus, and the links the drop down menus include.",{"@attributes":{"id":"p-0061","num":"0060"},"tables":{"@attributes":{"id":"TABLE-US-00007","num":"00007"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"struct tag_VQL_MenuInfo"},{"entry":"{"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"VosEnum\u2002exeType;","\u2009\u2009\u2009\/\/ Form, Report, View"]},{"entry":[{},"VosEnum\u2002vqlCommand;"]},{"entry":[{},"VosEnum\u2002uidMenu;"]},{"entry":[{},"VosText*linkName;","\u2009\u2009\u2009\/\/ Name of component to be executed"]},{"entry":[{},"void\u2003\u2009\u2009*exeLink;","\u2009\u2009\u2009\/\/ Arguments if any before activating the component"]},{"entry":[{},"VqlArgSet *reqArgs;","\/\/ Transmit to Client, Arguments required for exec"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"};"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"Thus, the PDSs above include information about how the user interface appears (where signs and symbols, for example, are located on the user interface), application models, such as the structure of the component and the interrelationships between the component and other components, and expression solving. Those of skill in the art will appreciate that, although two PDS examples are provided above and although a limited number of component types are provided above, the invention is applicable to other component types having different functionalities; and to other PDSs created to include the intended functionalities of the other component types and to the corresponding execution engines.","In embodiments of the invention, the run time engine ,  are kept in media and loaded into a device that includes a processor , . The processor ,  of the device links the PDSs ,  with parameter information to provide script specific PDSs and executes the script specific PDSs. In other embodiments, the processor would also temporarily store the script specific PDS and automatically delete the script specific PDS after the user exits the component.","Pursuant to an embodiment of the invention, PDSs are linked to corresponding component script by either or both the server  and the client , or in other embodiments, just the stand alone computer.  shows an embodiment of a server  sending script to a client  in response to a client request.","At step , the server  receives a client request for a program. Typically, the server  transceiver receives a request transmitted by the client transceiver . At step , the server  authenticates the user  based on a user access level. The server processor  may compare user identification and password information transmitted by the user with access level information stored in the user database. Other ways of user identification include biometrics, hardware locks and the like.","At step , a session number is created. Session numbers are often used in WAN environments, such as the world wide web. The session number identifies a particular communication between the client and the server. Identifying the communication allows either the client or the server to refer back to the communication at a later time and obviates the need for a specially reserved communication trunk in many instances. Pursuant to an aspect of the invention, the use of a session number is applied to LAN environments and assists client-server session management by facilitating the use of the connectionless communication protocol.","At step , the server  loads program script according to the user request. In one embodiment, the server processor  transfers the program script  from the long term memory  to the short term memory . At step , the server  searches for the appropriate component. Per instructions from the server parser , the server processor  transfers the run time engine  from the long term  to the short term  memory and searches for the appropriate component in the script. In other embodiments, if previously entered user data is referred to in the appropriate component, the server processor retrieves the previously entered user data from the user database . Typically, the first component searched for is a menu that is sent to the client. Other components may also be searched for depending on the client request. Examples of menu and form script in the VScript language are provided below.","In alternate embodiments of the invention, the PDSs ,  are linked to parameter information to provide a script specific predefined structure at the server, for testing or other purposes; in such cases, the server execution engine  may also instruct the server processor to execute the script specific predefined structure. In the alternate embodiment, at step , the components are linked to their corresponding PDSs that have the same functionality as the components to provide script specific PDSs. Per instructions from the server linker , the server processor  links the parameter information, including any relevant previously entered user data from the user database  and component scripts , to the PDS. (The linking process is the same at the server and the client and is discussed in greater detail below.)","At step , the appropriate script is transmitted to the client , typically by the server processor  and transceivers . Note that, in the examples provided above, the script of the actual components is written in Vscript, which is a script created for use with run time engines ,  of the invention. VScript is used because VScript allows for components to be written with less script than would be required to write the components with other programming languages. As a result, the amount of script that is transmitted from the server to the client is reduced, and the invention may be embodied in a larger variety of servers , clients , ,  and communication networks. It is believed that, in other embodiments of the invention, other programming languages may be used for the components, including C language, Fortran, Java and other languages.","In one embodiment of the invention, the client sends a request to the server  that prompts the server to send component script including the parameter information and other parameter information, such as relevant, previously entered user data to the client . The client searches for an identifier (described below) within the script, links the component to a PDS  to form a script specific PDS, and executes the script specific PDS, as shown in .","At step , the client  transmits a request to the server , typically by the client processor  forming a request and the client transceiver  transmitting the request to the server . As provided above, the server  verifies the client's access level by requesting the user to enter access information, and at step , the user enters user access information, which can be, for example, user identification and password information. The server  then sends the requested component script  that includes the parameter information about the component and the parameter information of any relevant, previously entered user data that is referred to in the component script to the user at step .","An example of a menu component script showing information about the particular menu's drop down menus and links within the drop down menu is provided below:",{"@attributes":{"id":"p-0073","num":"0072"},"tables":{"@attributes":{"id":"TABLE-US-00008","num":"00008"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"#DEFINE_MENU"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"{"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"#SET MENU.FONT = arial, 18"]},{"entry":[{},"#DEFINE.Group = &Masters"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"docForm as &Doctor (CTRL_I+SHIFT_X)"]},{"entry":[{},"grpForm as Test &Group"]},{"entry":[{},"tstForm as &Test"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"#DEFINE.Group = &Reports"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"docView as List of &Doctors"]},{"entry":[{},"grpView as List of Test &Groups"]},{"entry":[{},"tstView as &Test"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"#DEFINE.Group = &Maintenance"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"VQL.REINDEX as Reindex"]},{"entry":[{},"VQL.COMPACT as &Compact"]},{"entry":[{},"VQL.TRANSFER as Annual &Transfer"]},{"entry":[{},"VQL.ARCHIEVE as &Backup"]},{"entry":[{},"VQL.RESTORE as &Restore"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"Exit"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"An example of a form component script showing information about the title of the form and various fields within the form is provided below:",{"@attributes":{"id":"p-0075","num":"0074"},"tables":{"@attributes":{"id":"TABLE-US-00009","num":"00009"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"#DEFINE.FORM as tokForm_Clinic"},{"entry":"{"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"#SET FORM.OBJECT = TOKEN"]},{"entry":[{},"#SET FORM.TITLE = TOKEN ISSUE"]},{"entry":[{},"TokenId AS Bill No (06), Date AS Date (d6)"]},{"entry":[{},"PatName AS Patient Name (48)"]},{"entry":[{},"PatAgeYear AS \u2018Age_Years\u2019 (6), PatAgeMonth AS Months (4),"]},{"entry":[{},"PatSex AS Sex (4)"]},{"entry":[{},"Nationality AS Nationality (15)"]},{"entry":[{},"DocName AS Doctors Name (48)"]},{"entry":[{},"#DEFINE.GRID as Q"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"#SET GRID.OBJECT = RESULT"]},{"entry":[{},"#SET GRID.MAX_ROWS = 32"]},{"entry":[{},"#SET GRID.VIS_ROWS = 4"]},{"entry":[{},"TestId AS TestId (04)"]},{"entry":[{},"TEST.TestName(TestId) AS Test Description (48.40)"]},{"entry":[{},"Charges = (TEST.Charges*5.0) AS Test Charges (10.2)"]},{"entry":[{},"GRID_ROW.TokenId = TOKEN.TokenId"]},{"entry":[{},"GRID_ROW.SerNum = ROW_ID"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"BillValue = #GRID.TOTAL(Q, 3) AS Bill Value (10.2);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"The form shown in Script 9 includes several objects that are referred to within the form, such as the token and result objects. Exemplary script for the token and result objects is provided below (at Scripts 10 and 11):",{"@attributes":{"id":"p-0077","num":"0076"},"tables":{"@attributes":{"id":"TABLE-US-00010","num":"00010"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Object definition for TOKEN"]},{"entry":[{},"#Define.Object as TOKEN"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"#define.Record"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"98pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"long\u2003TokenId;","(LINK COUNTER)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"long\u2003PatId;"]},{"entry":[{},"double BillValue;"]},{"entry":[{},"double Discount;"]},{"entry":[{},"double PaidValue;"]},{"entry":[{},"short TokenStatus;"]},{"entry":[{},"short PatAgeYear;"]},{"entry":[{},"short PatAgeMonth;"]},{"entry":[{},"short DocId;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"98pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"short TestId[64];","(LINK TEST.TestId)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"date6 Date[7];"]},{"entry":[{},"char\u2002PatStatus[3];"]},{"entry":[{},"char\u2002PatName[49];"]},{"entry":[{},"char\u2002DocName[49];"]},{"entry":[{},"char\u2002Nationality[16];"]},{"entry":[{},"char\u2002PatSex[3];"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"};"]},{"entry":[{},"#SET Object.Key = token, \u201cTokenId(06)\u201d;"]},{"entry":[{},"#SET Object.Key = tokbydat, \u201cDate(6) + TokenId(06)\u201d;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},{"@attributes":{"id":"p-0078","num":"0077"},"tables":{"@attributes":{"id":"TABLE-US-00011","num":"00011"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"#define.Object as RESULT"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"#define.Record"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"105pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"long\u2003TokenId;","(LINK TOKEN.TokenId)"]},{"entry":[{},"double Charges;"]},{"entry":[{},"short SerNum;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"119pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"short TestId;","(LINK TEST.TestId)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"char\u2009\u2009Data[43];"]},{"entry":[{},"char\u2009\u2009DataEntered;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"};"]},{"entry":[{},"#SET Object.Key = result,\u201cTokenId(06) + TestId(04) +"]},{"entry":[{},"SerNum(02)\u201d;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"At step , the script and PDSs are linked by the use of identifiers in the script and corresponding identifiers in the PDSs. For example, in the form script, \u201c#SET FORM.TITLE\u201d is an identifier showing that the corresponding title of the form (\u201cTOKEN ISSUE\u201d) should be placed adjacent to \u201c*formTitle\u201d, which is the corresponding identifier in the form PDS. At step , the client  searches for identifiers within the transmitted parameter information. In one embodiment, the client processor  transfers the client run time engine  from the long term memory  to the short term memory , and the client parser  instructs the client processor  to search for the identifiers in the transmitted component script. The client parser  also instructs the client processor to search for any components that are linked to the requested component, and if so, requests those components from the server and proceeds to step ; if not, the client proceeds to step .","At step , the parameter information , including the parameter information about the component and the parameter information of any relevant, previously accessed user data, is linked to the corresponding PDS  to provide a script specific PDS. In the examples provided above, the token script (and the related objects) (Scripts 9-11) would be linked to the appropriate token PDS (Scripts 1-6) to provide a form specific PDS.","At step , the script specific PDS is executed. In one embodiment, the client execution engine  instructs the client processor  to execute the script specific PDS. Examples of the menu and form components executed by executing a menu script specific PDS and a form script specific PDS are shown in , respectively.","As provided above, the PDS includes the intended functionality of how the component user interface appears and a graphical display mechanism of the PDS is utilized. In one embodiment of the invention, a coordinate graphical display mechanism is utilized in which the execution engine  reads coordinates adjacent to component script to discern where the execution engine  should display particular information of the script on a display.","In another embodiment of the invention, an automatic graphical display mechanism is utilized. For example, when displaying a form using the automatic graphical display mechanism, the execution engine  determines where to insert information depending on how the script is written.  shows an exemplary form executed by an execution engine  employing an automatic graphical display mechanism. When executing the token of Script 9, the execution engine  provides a \u201cBill No\u201d field as the first field on the display in the top left hand corner because the \u201cBill No\u201d is the first field provided in the script. This field is six characters long, as provided in Script 9. A \u201cDate\u201d field having 6 characters is placed next to the \u201cBill No\u201d field because the \u201cDate\u201d field is on the same line as the \u201cBill No\u201d field. A \u201cPatient Name\u201d field having 48 characters is placed on the next line because the \u201cPatient Name\u201d field is provided on the subsequent line, as provided in Script 9. The integrity of the script structure is preserved after the script is linked to the PDS so that an automatic graphical display mechanism may properly execute the component. Note that, in other embodiments, the automatic graphic display mechanism may be configured differently to meet the needs of other programs.","Also at step , the execution engine  instructs the client processor  to utilize the expression solver intended functionality of the PDS to solve any expressions in the component script when executing the component. The client  solves any expression in the script when executing the script. An example of an expression that would be solved by the expression solver is labeled \u201ccharges=(TEST.Charges*5.0)\u201d in Script 9. In addition, at step , any interrelationships between the script specific PDS and other components are maintained based on the application model functionality of the PDS.","Because the PDS includes the intended functionalities regarding user interfaces, expression solving and application models, only parameter information need be transmitted from the server to the client. The component may be executed by combining the parameter information with the PDS to provide the script specific PDS and executing the script specific PDS. As a result, network bandwidth and server processing burdens are reduced. Prior systems required the server to either form the user interface, determine component structure, determine component interrelationships, or solve expressions, or perform all of such functions. Thus, either dense executable, dense byte code or unecessarily large source code files were transmitted across the network for component execution, and the systems were encumbered by network bandwidth and\/or server processing strains.","In one of the embodiments of the invention, at step , the client  determines whether additional components are required, and if so, additional components are requested if they were not received at step . Steps  to  are then repeated. If additional components are not required, at step , the client  determines whether it has finished using the component. If the user has not exited or closed the component, the client  has not finished using the component and, at step , continues to use the component. If the user has closed or exited the component, the client has finished using the component, either after step  or step , the client proceeds to step , when the client  automatically deletes all script  and script specific PDSs from the client short term memory .","Typically, when the client  receives script from the server  comprising of the parameter information, the client links the parameter information to the corresponding predefined structure  to provide the script specific PDS. The script and script specific PDSs are stored in the client short term memory . After the client  has completed using the program, the script and script specific PDSs are automatically deleted from the client short-term memory . By automatically deleting the script and script specific PDSs, problems associated with programmers neglecting to deallocate memory and processors being required to periodically scan for files to delete are alleviated.","Note that, as provided above,  show an embodiment of the invention applied to a client-server environment. Those of skill in the art will appreciate that the invention may also be applied to a stand alone environment. The scope of the invention is not to be limited to the embodiments shown above and is to be given its full scope according to the claims provided below."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["Many of the objects and advantages of the present invention will become apparent to those of ordinary skill in the relevant art after reviewing the following detailed description and accompanying drawings, wherein:",{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":["FIG. 1","FIG. 1"],"i":"a "},{"@attributes":{"id":"p-0021","num":"0020"},"figref":["FIG. 1","FIG. 1"],"i":"b "},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 6"}]},"DETDESC":[{},{}]}
