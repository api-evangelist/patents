---
title: Intermediate data format for database population
abstract: An approach is provided that receives input from multiple data sources and transforms it into a common, intermediate format, where only one generic parser is required for the purpose of transformation into RDF, and the subsequent input to a triplestore database. A triplestore management tool provides this capability. The triplestore management tool includes a formatting component configured to receive data sources from a plurality of data source parsers, and transform each of the data sources into a single format. A parsing component parses each transformed data source at a common parser, and loads each of the transformed data sources from the common parser to a triplestore database.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09471653&OS=09471653&RS=09471653
owner: International Business Machines Corporation
number: 09471653
owner_city: Armonk
owner_country: US
publication_date: 20111026
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION"],"p":["The present invention relates to database techniques and more specifically to Resource Description Framework (RDF) database triple-store population and access.","Resource Description Framework (RDF) is a collection of specifications originally designed as a meta-data model. The RDF meta-data model is based on an idea of making statements about resources in the form of subject-predicate-object expressions (e.g., triplets, triples, or RDF triplets). Typically, a subject denotes a resource, and a predicate denotes traits or aspects of the resource and expresses a relationship between the subject and an object.","A triplestore is a purpose-built database for the storage and retrieval of RDF meta-data. A triple store may be populated with data from a variety of structured and unstructured data sources. These may include, for instance, PDF documents, word processing documents, relational database data, XML feeds, and so on. In conventional techniques, a parser is often manually created for each data source to read the data and populate the database.","The application programming interface (API) for adding data to a triplestore varies from vendor to vendor. In a complex project where multiple, disparate data sources exist, each data source parser is typically matched to the underlying triplestorage API. However, if the triplestore vendor changes, each parser has to be updated to use the new API. This becomes problematic if many parsers are involved.","An approach is provided that receives input from multiple data sources and creates a common, intermediate data format that can be parsed by a single parser, regardless of the number or vendor type making use of the data. Specifically, the parser for each data source can be written to transform the source data into a common, intermediate format, where only a single parser is required for the purpose of transformation into RDF, and subsequent input to a triplestore database.","A first aspect of the present invention provides a method for triplestore database population. In this approach, the method comprises: receiving a set of data sources at each of a plurality of data source parsers; transforming each of the set of data sources into a single format; parsing each of the set of transformed data sources at a common parser; and loading each of the set of transformed data sources from the common parser into a triplestore database.","A second aspect of the present invention provides a system for triplestore database population comprising at least one processing unit, and memory operably associated with the at least one processing unit; a triplestore management tool storable in memory and executable by the at least one processing unit, the triplestore management tool comprising a formatting component configured to: receive a set of data sources from each of a plurality of data source parsers; and communicate with each of the plurality of data source parsers to transform each of the set of data sources into a single format. The triplestore management tool further comprises a parsing component configured to: parse each of the set of transformed data sources at a common parser; and load each of the set of transformed data sources from the common parser to a triplestore database.","A third aspect of the present invention provides a computer-readable storage device storing computer instructions, which when executed, enables a computer system for triplestore database population, the computer instructions comprising: receiving a set of data sources at each of a plurality of data source parsers; transforming each of the set of data sources into a single format; parsing each of the set of transformed data sources at a common parser; and loading each of the set of transformed data sources from the common parser into a triplestore database.","A fourth aspect of the present invention provides a method for triplestore database population, comprising the computer implemented steps of: receiving a set of data sources at each of a plurality of data source parsers; transforming each of the set of data sources into a single format; parsing each of the set of transformed data sources at a common parser; and loading each of the set of transformed data sources from the common parser into a triplestore database.","The drawings are not necessarily to scale. The drawings are merely schematic representations, not intended to portray specific parameters of the invention. The drawings are intended to depict only typical embodiments of the invention, and therefore should not be considered as limiting the scope of the invention. In the drawings, like numbering represents like elements.","The invention will now be described more fully herein with reference to the accompanying drawings, in which exemplary embodiments are shown. An approach is provided that receives input from multiple data sources and creates a common, intermediate data format, regardless of the number or vendor type making use of the data. The parser for each data source can be written to transform the source data into a common, intermediate data format, where only a single parser is required for the purpose of transformation into RDF, and the subsequent input to a triplestore database. Specifically, a triplestore management tool provides this capability. The triplestore management tool includes a formatting component configured to receive a set (i.e., one or more) of data sources from each of a plurality of data source parsers, and communicate with each of the plurality of data source parsers to transform each of the set of data sources into a single format. The triplestore management tool further comprises a parsing component configured to parse each of the set of transformed data sources at a common parser, and load each of the set of transformed data sources from the common parser to a triplestore database.","This disclosure may be embodied in many different forms and should not be construed as limited to the exemplary embodiments set forth herein. Rather, these exemplary embodiments are provided so that this disclosure will be thorough and complete and will fully convey the scope of this disclosure to those skilled in the art. In the description, details of well-known features and techniques may be omitted to avoid unnecessarily obscuring the presented embodiments. Reference throughout this specification to \u201cone embodiment,\u201d \u201can embodiment,\u201d or similar language means that a particular feature, structure, or characteristic described in connection with the embodiment is included in at least one embodiment of the present invention. Thus, appearances of the phrases \u201cin one embodiment,\u201d \u201cin an embodiment,\u201d and similar language throughout this specification may, but do not necessarily, all refer to the same embodiment.","Furthermore, the terminology used herein is for the purpose of describing particular embodiments only and is not intended to be limiting of this disclosure. As used herein, the singular forms \u201ca\u201d, \u201can\u201d, and \u201cthe\u201d are intended to include the plural forms as well, unless the context clearly indicates otherwise. Furthermore, the use of the terms \u201ca\u201d, \u201can\u201d, etc., do not denote a limitation of quantity, but rather denote the presence of at least one of the referenced items. It will be further understood that the terms \u201ccomprises\u201d and\/or \u201ccomprising\u201d, or \u201cincludes\u201d and\/or \u201cincluding\u201d, when used in this specification, specify the presence of stated features, regions, integers, steps, operations, elements, and\/or components, but do not preclude the presence or addition of one or more other features, regions, integers, steps, operations, elements, components, and\/or groups thereof.","Unless specifically stated otherwise, it may be appreciated that terms such as \u201cprocessing,\u201d \u201ccomputing,\u201d \u201ccalculating,\u201d \u201cevaluating,\u201d or the like, refer to the action and\/or processes of a computer or computing system, or similar electronic computing device, that manipulates and\/or transforms data represented as physical quantities (e.g., electronic) within the computing system's registers and\/or memories into other data similarly represented as physical quantities within the computing system's memories, registers or other such information storage, transmission or viewing devices. The embodiments are not limited in this context.","Referring now to , a computerized implementation  of the present invention will be described in greater detail. As depicted, implementation  includes computer system  deployed within a computer infrastructure . This is intended to demonstrate, among other things, that the present invention could be implemented within a network environment (e.g., the Internet, a wide area network (WAN), a local area network (LAN), a virtual private network (VPN), etc.), or on a stand-alone computer system. In the case of the former, communication throughout the network can occur via any combination of various types of communication links. For example, the communication links can comprise addressable connections that may utilize any combination of wired and\/or wireless transmission methods. Where communications occur via the Internet, connectivity could be provided by conventional TCP\/IP sockets-based protocol, and an Internet service provider could be used to establish connectivity to the Internet. Still yet, computer infrastructure  is intended to demonstrate that some or all of the components of implementation  could be deployed, managed, serviced, etc., by a service provider who offers to implement, deploy, and\/or perform the functions of the present invention for others.","Computer system  is intended to represent any type of computer system that may be implemented in deploying\/realizing the teachings recited herein. In this particular example, computer system  represents an illustrative system for data source transformation and triplestore database population. It should be understood that any other computers implemented under the present invention may have different components\/software, but will perform similar functions. As shown, computer system  includes a processing unit  capable of receiving input from a plurality of data sources (DS) A-N and delivering them to memory . Also, shown is memory  for storing a triplestore management tool , a bus , and device interfaces .","Processing unit  refers, generally, to any apparatus that performs logic operations, computational tasks, control functions, etc. A processor may include one or more subsystems, components, and\/or other processors. A processor will typically include various logic components that operate using a clock signal to latch data, advance logic states, synchronize computations and logic operations, and\/or provide other timing functions. During operation, processing unit  collects and routes signals representing outputs from external devices  (e.g., a graphical user interface operated by an end-user) to triplestore management tool . The signals can be transmitted over a LAN and\/or a WAN (e.g., T1, T3, 56 kb, X.25), broadband connections (ISDN, Frame Relay, ATM), wireless links (802.11, Bluetooth, etc.), and so on. In some embodiments, the video signals may be encrypted using, for example, trusted key-pair encryption. Different sensor systems may transmit information using different communication pathways, such as Ethernet or wireless networks, direct serial or parallel connections, USB, Firewire\u00ae, Bluetooth\u00ae, or other proprietary interfaces. (Firewire is a registered trademark of Apple Computer, Inc. Bluetooth is a registered trademark of Bluetooth Special Interest Group (SIG)).","In general, processing unit  executes computer program code, such as program code for operating triplestore management tool , which is stored in memory  and\/or storage system . While executing computer program code, processing unit  can read and\/or write data to\/from memory , storage system , and triplestore database . Storage system  and triplestore database  can include VCRs, DVRs, RAID arrays, USB hard drives, optical disk recorders, flash storage devices, and\/or any other data processing and storage elements for storing and\/or processing data. Although not shown, computer system  could also include I\/O interfaces that communicate with one or more external devices  that enable a user to interact with computer system  (e.g., a keyboard, a pointing device, a display, etc.).","Referring now to , triplestore management tool , which parses, transforms, and loads data into a triplestore database, will be described in greater detail. As shown, triplestore management tool  is in communication with a set of data source (DS) parsers A-N, each of which corresponds to a data source A-N. Data sources A-N may comprise any number of unique data source types, e.g., binary files (Microsoft\u00ae Office, PDF, XML, images, audio, video, etc.) relational database data, HTML web pages (including hosted microformats), web services, etc., each of which are formatted differently. The sources may differ in their location, quality of the provided data, and the protocol, i.e., the way data can be collected\/queried and the format of the data. Triplestore management tool  is capable of dealing with varying characteristics of data sources and their data.","As shown in , triplestore management tool  comprises a formatting component , which receives each uniquely formatted data source A-N from each of plurality of DS parsers A-N, and communicates with DS parsers A-N to transform each data source A-N into a single, common format. In one embodiment, formatting component  is configured to transform each data source A-N into a single, intermediate meta-data format  common to each data source A-N. That is, formatting component  operates with DS parsers A-N to extract and logically structure each parsed data source A-N. A variety of meta-data extraction techniques may provide this functionality, no one technique being dispositive. For example, meta-data extraction can be performed via template-based extraction, rule-based extraction, machine-learning-based extraction, and so on. The specific approach may be selected based on the source data. For example, if the source data is already highly structured (e.g., relational data), a template-based approach is typically sufficient. If the source data is unstructured (e.g., not structured for database management systems), machine learning might be more appropriate. If the source data lies somewhere in between (e.g. semi-structured), then a rule-based approach might be more beneficial. However, because the source data can be virtually anything (e.g., anything that is ASCII text), the specific approach to best extract the desired data is determined on the fly and on a case-by-case basis.","Next, the extracted meta-data is configured as a style-independent, text-based file format corresponding to data sources A-N. Formatting component  processes the extracted meta-data from data sources A-N into a common, formatted structure. For example, the common format may comprise the following, which is formatted in a Subject, Predicate, Object format:",{"@attributes":{"id":"p-0026","num":"0025"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<?xml version=\u20331.0\u2033 encoding=\u2033UTF-8\u2033?>"},{"entry":"<results file-name=\u2033Concepts\u2033>"},{"entry":"\u2003<results file-name=\u2033Sheet1\u2033>"},{"entry":"\u2003\u2003<resource concept=\u2033DomainTerm\u2033 text=\u2033application assembly tool\u2033>"},{"entry":"\u2003\u2003\u2003<property text=\u2033hasAcronym\u2033>"},{"entry":"\u2003\u2003\u2003\u2003<resource concept=\u2033DomainTerm\u2033 text=\u2033AAT\u2033\/>"},{"entry":"\u2003\u2003\u2003<\/property>"},{"entry":"\u2003\u2003<\/resource>"},{"entry":"\u2003\u2003<resource concept=\u2033DomainTerm\u2033 text=\u2033address box\u2033>"},{"entry":"\u2003\u2003\u2003<property text=\u2033hasAcronym\u2033>"},{"entry":"\u2003\u2003\u2003\u2003<resource concept=\u2033DomainTerm\u2033 text=\u2033AB\u2033\/>"},{"entry":"\u2003\u2003\u2003<\/property>"},{"entry":"\u2003\u2003<\/resource>"},{"entry":"\u2003\u2003<resource concept=\u2033DomainTerm\u2033 text=\u2033aggregate backup and"},{"entry":"recovery support\u2033>"},{"entry":"\u2003\u2003\u2003<property text=\u2033hasAcronym\u2033>"},{"entry":"\u2003\u2003\u2003\u2003<resource concept=\u2033DomainTerm\u2033 text=\u2033ABARS\u2033\/>"},{"entry":"\u2003\u2003\u2003<\/property>"},{"entry":"\u2003\u2003<\/resource>"},{"entry":"\u2003\u2003<resource concept=\u2033DomainTerm\u2033 text=\u2033automated build and test\u2033>"},{"entry":"\u2003\u2003\u2003<property text=\u2033hasAcronym\u2033>"},{"entry":"\u2003\u2003\u2003\u2003<resource concept=\u2033DomainTerm\u2033 text=\u2033ABAT\u2033\/>"},{"entry":"\u2003\u2003\u2003<\/property>"},{"entry":"\u2003\u2003<\/resource>"},{"entry":"\u2003\u2003...."},{"entry":"<\/results>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}},"br":{}},{"@attributes":{"id":"p-0027","num":"0026"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"161pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2003","resource element (subject)"]},{"entry":[{},{},"\u2003property child element (predicate)"]},{"entry":[{},{},"\u2003\u2003resource child element (object)"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}}},"Loading this single, commonly formatted data into triplestore database  now requires only a single parser (i.e., common parser ), which is generic. Triplestore management tool  comprises a parsing component  configured to parse the transformed data  from each of the set of data sources A-N at common parser , and load the transformed data  into triplestore database . In one embodiment, parsing component  is configured to parse data sources A-N into RDF data at common parser . So, for example, when the following portion of the common format:",{"@attributes":{"id":"p-0029","num":"0028"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<resource concept=\u2033DomainTerm\u2033 text=\u2033application assembly tool\u2033>"},{"entry":"\u2003<property text=\u2033hasAcronym\u2033>"},{"entry":"\u2003\u2003<resource concept=\u2033DomainTerm\u2033 text=\u2033AAT\u2033\/>"},{"entry":"\u2003<\/property"},{"entry":"<\/resource>,"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}},"br":{}},"application assembly tool rdf:type DomainTerm","application assembly tool hasAcronym AAT","AAT rdf:type DomainTerm.","Now that the triplestore has been populated by common parser  based on the intermediate data format, a change to the triplestore (e.g., a new triplestore vendor is introduced) requires only a change to common parser . The transformation process from data source to commonly formatted intermediate data format is not altered if the triplestore format changes. Each DS parser A-N for the source data files remains the same, as they are no longer tightly coupled to a pre-specified vendor triplestore following the transformation. Likewise, the common format to triplestore process will not change if the source(s) change. Parsing component  provides this functionality by continuously monitoring\/determining a triplestore database type of triplestore database , and analyzing a compatibility of common parser  with the triplestore database type. If the two are no longer compatible, the triplestore database vendor has likely changed, and common parser  needs to be replaced accordingly.","It can be appreciated that the approaches disclosed herein can be used within a computer system for triplestore database population, as shown in . In this case, triplestore management tool  can be provided, and one or more systems for performing the processes described in the invention can be obtained and deployed to computer infrastructure . To this extent, the deployment can comprise one or more of: (1) installing program code on a computing device, such as a computer system, from a computer-readable medium; (2) adding one or more computing devices to the infrastructure; and (3) incorporating and\/or modifying one or more existing systems of the infrastructure to enable the infrastructure to perform the process actions of the invention.","The exemplary computer system  may be described in the general context of computer-executable instructions, such as program modules, being executed by a computer. Generally, program modules include routines, programs, people, components, logic, data structures, and so on that perform particular tasks or implements particular abstract data types. Exemplary computer system  may be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment, program modules may be located in both local and remote computer storage media including memory storage devices.","The program modules carry out the methodologies disclosed herein, as shown in . Shown is a method  for triplestore database population, wherein, at S, a plurality of data sources are received at each of a plurality of data source parsers. At S, each data source is transformed into single format. Next, at S, each transformed data source is transformed at a common parser into RDF data, and loaded into a triplestore database at S. The triplestore database type is monitored at S, to determine whether the triplestore database and the common parser are compatible (S). If yes, the process returns to S for continued monitoring. If no, the common parser is replaced at S based on the triplestore database type, and the process returns to S to transform each data source into a single format compatible with the updated common parser and triplestore database.","The flowchart of  illustrates the architecture, functionality, and operation of possible implementations of systems, methods and computer program products according to various embodiments of the present invention. In this regard, each block in the flowchart may represent a module, segment, or portion of code, which comprises one or more executable instructions for implementing the specified logical function(s). It should also be noted that, in some alternative implementations, the functions noted in the blocks might occur out of the order noted in the figures. For example, two blocks shown in succession may, in fact, be executed substantially concurrently. It will also be noted that each block of flowchart illustration can be implemented by special purpose hardware-based systems that perform the specified functions or acts, or combinations of special purpose hardware and computer instructions.","Many of the functional units described in this specification have been labeled as modules in order to more particularly emphasize their implementation independence. For example, a module may be implemented as a hardware circuit comprising custom VLSI circuits or gate arrays, off-the-shelf semiconductors such as logic chips, transistors, or other discrete components. A module may also be implemented in programmable hardware devices such as field programmable gate arrays, programmable array logic, programmable logic devices or the like. Modules may also be implemented in software for execution by various types of processors. An identified module or component of executable code may, for instance, comprise one or more physical or logical blocks of computer instructions which may, for instance, be organized as an object, procedure, or function. Nevertheless, the executables of an identified module need not be physically located together, but may comprise disparate instructions stored in different locations which, when joined logically together, comprise the module and achieve the stated purpose for the module.","Further, a module of executable code could be a single instruction, or many instructions, and may even be distributed over several different code segments, among different programs, and across several memory devices. Similarly, operational data may be identified and illustrated herein within modules, and may be embodied in any suitable form and organized within any suitable type of data structure. The operational data may be collected as a single data set, or may be distributed over different locations including over different storage devices, over disparate memory devices, and may exist, at least partially, merely as electronic signals on a system or network.","Furthermore, as will be described herein, modules may also be implemented as a combination of software and one or more hardware devices. For instance, a module may be embodied in the combination of a software executable code stored on a memory device. In a further example, a module may be the combination of a processor that operates on a set of operational data. Still further, a module may be implemented in the combination of an electronic signal communicated via transmission circuitry.","As noted above, some of the embodiments may be embodied in hardware. The hardware may be referenced as a hardware element. In general, a hardware element may refer to any hardware structures arranged to perform certain operations. In one embodiment, for example, the hardware elements may include any analog or digital electrical or electronic elements fabricated on a substrate. The fabrication may be performed using silicon-based integrated circuit (IC) techniques, such as complementary metal oxide semiconductor (CMOS), bipolar, and bipolar CMOS (BiCMOS) techniques, for example. Examples of hardware elements may include processors, microprocessors, circuits, circuit elements (e.g., transistors, resistors, capacitors, inductors, and so forth), integrated circuits, application specific integrated circuits (ASIC), programmable logic devices (PLD), digital signal processors (DSP), field programmable gate array (FPGA), logic gates, registers, semiconductor device, chips, microchips, chip sets, and so forth. The embodiments are not limited in this context.","Also noted above, some embodiments may be embodied in software. The software may be referenced as a software element. In general, a software element may refer to any software structures arranged to perform certain operations. In one embodiment, for example, the software elements may include program instructions and\/or data adapted for execution by a hardware element, such as a processor. Program instructions may include an organized list of commands comprising words, values or symbols arranged in a predetermined syntax, that when executed, may cause a processor to perform a corresponding set of operations.","For example, an implementation of exemplary computer system  () may be stored on or transmitted across some form of computer readable media. Computer readable media can be any available media that can be accessed by a computer. By way of example, and not limitation, computer readable media may comprise \u201ccomputer storage media\u201d and \u201ccommunications media.\u201d","\u201cComputer-readable storage device\u201d includes volatile and non-volatile, removable and non-removable computer storable media implemented in any method or technology for storage of information such as computer readable instructions, data structures, program modules, or other data. Computer storage device includes, but is not limited to, RAM, ROM, EEPROM, flash memory or other memory technology, CD-ROM, digital versatile disks (DVD) or other optical storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other medium which can be used to store the desired information and which can be accessed by a computer.","\u201cCommunication media\u201d typically embodies computer readable instructions, data structures, program modules, or other data in a modulated data signal, such as carrier wave or other transport mechanism. Communication media also includes any information delivery media.","The term \u201cmodulated data signal\u201d means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example, and not limitation, communication media includes wired media such as a wired network or direct-wired connection, and wireless media such as acoustic, RF, infrared, and other wireless media. Combinations of any of the above are also included within the scope of computer readable media.","It is apparent that there has been provided an approach for triplestore database population based on a common, intermediate meta-data format and common parser. While the invention has been particularly shown and described in conjunction with a preferred embodiment thereof, it will be appreciated that variations and modifications will occur to those skilled in the art. Therefore, it is to be understood that the appended claims are intended to cover all such modifications and changes that fall within the true spirit of the invention."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 3"}]},"DETDESC":[{},{}]}
