---
title: Programming, verifying, visualizing, and deploying browser extensions with fine-grained security policies
abstract: An environment is described which enables the generation, analysis, and use of secure browser extensions. Each browser extension includes an extension body and a policy expressed in a logic-based specification language. The policy specifies the access control and dataflow privileges associated with the extension body in a fine-grained manner by leveraging the structure and content of resources that are accessible to the browser extension. A suite of analysis tools for testing the safety of the browser extension includes a visualization module identifies features of a resource that are accessible to the policy. A static analysis module uses a static analysis technique to determine whether the extension body satisfies the policy. The environment also includes a conversion module for converting the browser extension, once deemed safe, into a form for use by a particular type of browser. The browser can execute that extension without performing runtime safety checks.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08978106&OS=08978106&RS=08978106
owner: Microsoft Technology Licensing, LLC
number: 08978106
owner_city: Redmond
owner_country: US
publication_date: 20110321
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["A user may decide to download and install a browser extension to provide desired functionality that is not provided by the browser itself. When invoked, the browser extension can perform various tasks, depending on the objective of the browser extension. For instance, a browser extension may access and extract content provided by a web page with which the user is interacting and then perform any type of operations on the extracted content. In addition, or alternatively, the browser extension can modify the content presented by the web page. In addition or alternatively, the browser extension can access the user's browsing history and\/or perform other operations which affect local storage. In addition or alternatively, the browser extension can interact with other network-accessible third-party entities. For example, the browser extension can potentially transfer content extracted from a web page to a third-party entity, such as another website. Or a browser extension can obtain information from a third-party source and apply it to a web page that the user is viewing. These operations are cited by way of example, not limitation; browser extensions can perform yet other tasks.","The above-noted functions performed by browser extensions raise security concerns. For example, assume that a user is currently interacting with a bank-related website. A malicious extension can potentially overstep its stated functions and extract personal information regarding the user (such as the user's password), which it can then potentially send to a third party entity. In addition or alternatively, a malicious extension can modify the content of a web page in an undesirable manner, which may provide misinformation to the user and\/or prompt the user to perform harmful actions.","In view of the above concerns, browser providers have adopted various approaches to reduce the security risks associated with browser extensions. In a community-review approach, a browser provider may subject a newly created browser extension to community review. If the browser extension passes this review, the browser provider can add the browser extension to a collection of downloadable extensions. A browser can be configured such that it will not install a browser extension that does not originate from the trusted source. The authenticity of a browser extension can be assessed based on a signature-bearing certificate which accompanies the browser extension.","In a runtime privilege-checking approach, a browser provider can provide a manifest which accompanies the browser extension. The manifest specifies the privileges that are granted to the browser extension. When a user attempts to install such a browser extension, the browser can access the manifest and display the privileges associated with the browser extension. For example, the displayed privileges may indicate the nature and scope of the content that will be accessed by the browser extension. The displayed privileges may also indicate whether the browser extension is permitted to access the user's browsing history. If the user deems the privileges acceptable, he or she may agree to install the browser extension. Next assume that, during the runtime execution of the browser extension, the browser extension attempts to perform an operation which is outside the bounds of the privileges specified in the manifest. The browser can refuse to perform the operation and attempt to unload the browser extension, potentially informing the user about the unexpected extension behavior.","The above-described approaches are not fully satisfactory for illustrative reasons set forth herein.","An environment is described herein that involves the construction, analysis, visualization, and deployment of secure browser extensions. Each browser extension includes the executable code of the browser extension (the extension body) and a policy. The policy expresses fine-grained privileges that are granted to the extension body. More specifically, the policy may be expressed using a collection of metadata predicates applicable to the structure and content of resources accessible to the browser extension, such as network-accessible pages, together with a collection of permission predicates that grant respective permissions over the resources to the browser extension. Using these predicates, the policy can leverage the structure and content of the resources to pinpoint particular parts of the resources that are accessible to the browser extension.","According to one illustrative aspect, a policy can specify at least access control and data flow privileges. An access control privilege grants the browser extension permission to access information provided in a resource, such as a network-accessible page. A dataflow privilege constrains the interaction between resources, including an ability of the browser extension permission to interact with a third party entity, such as by sharing content provided on a page with the third-party entity, or vice versa.","According to one illustrative aspect, the policy can be generated using a logic-based specification language, such as Datalog. Datalog places constraints on the use of negation, a property that proves useful in the context of static analysis.","Accordingly to another illustrative aspect, the environment includes a suite of analysis tools that enable a curator to test the safety of a browser extension. Upon approval, the curator can add a browser extension to a network-accessible data store. Users can download selected browser extensions from this data store.","According to another illustrative aspect, one analysis tool comprises a visualization module. The visualization module renders an impact of the policy on a resource (such as a network-accessible page) by visually identifying features of the resource that are impacted by the policy.","According to another illustrative aspect, another analysis tool comprises a static analysis module. The static analysis uses a static analysis technique to automatically determine whether or not the extension body satisfies the policy, to provide a verification result. If the browser extension passes this test, an end user may install and run the browser extension without performing runtime safety analysis on the browser extension (because the static analysis has guaranteed that the browser extension will satisfy the policy).","According to another illustrative aspect, the extension body is formulated using a language that accommodates static type-checking, such as the language Fine.","According to another illustrative aspect, the extension body is formulated against at least one application programming interface (API), wherein the API includes logical pre-conditions and post-conditions. The logical pre-conditions and post-conditions can be expressed using refinement types.","According to another illustrative aspect, the static analysis involves modeling a runtime behavior of the browser extension by accumulating a monotonically-increasing set of facts about the extension body during the symbolic execution of the extension body. The monotonic nature of the modeling ensures that the extension body will continue to satisfy the policy for any runtime interleaved execution of unverified page script code (e.g., JavaScript) and browser extension code.","According to another illustrative aspect, the environment includes a conversion module that converts a browser extension (that has been deemed safe) to at least one format that is compatible with at least one target browser type, selected from a set of possible target browser types. This aspect allows different types of browsers to receive browser extensions produced and tested using the above-summarized analyses.","According to another illustrative aspect, the environment may receive a \u201clegacy\u201d browser extension that is not in a form that readily accommodates static analysis. The environment can include a translation module that converts at least part of this legacy browser extension into a form that enables it to be processed using the above-summarized types of analyses.","The above approach can be manifested in various types of systems, components, methods, computer readable media, data structures, articles of manufacture, and so on.","This Summary is provided to introduce a selection of concepts in a simplified form; these concepts are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter, nor is it intended to be used to limit the scope of the claimed subject matter.","The same numbers are used throughout the disclosure and figures to reference like components and features. Series 100 numbers refer to features originally found in , series 200 numbers refer to features originally found in , series 300 numbers refer to features originally found in , and so on.","This disclosure is organized as follows. Section A describes an illustrative environment for developing, analyzing, disseminating, and using secure browser extensions. Section B describes illustrative methods which explain the operation of the environment of Section A. Section C describes illustrative processing functionality that can be used to implement any aspect of the features described in Sections A and B.","As a preliminary matter, some of the figures describe concepts in the context of one or more structural components, variously referred to as functionality, modules, features, elements, etc. The various components shown in the figures can be implemented in any manner by any physical and tangible mechanisms (for instance, by software, hardware, firmware, etc., and\/or any combination thereof). In one case, the illustrated separation of various components in the figures into distinct units may reflect the use of corresponding distinct physical and tangible components in an actual implementation. Alternatively, or in addition, any single component illustrated in the figures may be implemented by plural actual physical components. Alternatively, or in addition, the depiction of any two or more separate components in the figures may reflect different functions performed by a single actual physical component. , to be discussed in turn, provides additional details regarding one illustrative physical implementation of the functions shown in the figures.","Other figures describe the concepts in flowchart form. In this form, certain operations are described as constituting distinct blocks performed in a certain order. Such implementations are illustrative and non-limiting. Certain blocks described herein can be grouped together and performed in a single operation, certain blocks can be broken apart into plural component blocks, and certain blocks can be performed in an order that differs from that which is illustrated herein (including a parallel manner of performing the blocks). The blocks shown in the flowcharts can be implemented in any manner by any physical and tangible mechanisms (for instance, by software, hardware, firmware, etc., and\/or any combination thereof).","As to terminology, the phrase \u201cconfigured to\u201d encompasses any way that any kind of physical and tangible functionality can be constructed to perform an identified operation. The functionality can be configured to perform an operation using, for instance, software, hardware, firmware, etc., and\/or any combination thereof.","The term \u201clogic\u201d encompasses any physical and tangible functionality for performing a task. For instance, each operation illustrated in the flowcharts corresponds to a logic component for performing that operation. An operation can be performed using, for instance, software, hardware, firmware, etc., and\/or any combination thereof. When implemented by a computing system, a logic component represents an electrical component that is a physical part of the computing system, however implemented.","The following explanation may identify one or more features as \u201coptional.\u201d This type of statement is not to be interpreted as an exhaustive indication of features that may be considered optional; that is, other features can be considered as optional, although not expressly identified in the text. Similarly, the explanation may indicate that one or more features can be implemented in the plural (that is, by providing more than one of the features). This statement is not be interpreted as an exhaustive indication of features that can be duplicated. Finally, the terms \u201cexemplary\u201d or \u201cillustrative\u201d refer to one implementation among potentially many implementations.","A. Illustrative Environment","A.1. Overview",{"@attributes":{"id":"p-0048","num":"0047"},"figref":["FIG. 1","FIG. 1","FIG. 1","FIG. 1"],"b":["100","100"]},"Starting with the development realm, a developer can use developer tool(s)  to author a browser extension, such as the representative browser extension . The representative browser extension  includes two portions: a policy  and an extension body . As will be described below, the extension body  includes logic which carries out the functions of the browser extension . The policy  specifies the privileges granted to the extension body  in a fine-grained manner. In other words, the policy  identifies the operations that the extension body  is entitled to perform.","In addition, various browser extensions  may exist which have been authored in formats that are not readily suited for analysis in the curator realm. These browser extensions  are referred to herein as \u201clegacy\u201d extensions to indicate that they may predate the provisions described herein (associated with the creation and analysis of the representative browser extension ).","The curator realm includes a curator analysis and extension distribution (CAED) system . The CAED system  includes two basic suites of functionality. A first suite of functionality analyzes browser extensions that have been submitted to the curator realm. As will be described below, the analysis performed by this functionality aims to determine whether the browser extensions are safe. A second suite of functionality converts the browser extensions that have been deemed safe to various forms that are compatible with respective types of browsers. In general operation, the CAED system  operates by receiving candidate browser extensions from various developers and other sources. The CAED system  performs various tests on the browser extensions to determine if the browser extensions are deemed safe. The CAED system  then makes the secure browser extensions available for download to end users, upon requests by those individual end users.","More specifically, the suite of analysis tools may include a visualization module , a static analysis module , and one or more other analysis modules . The visualization module  presents a visual depiction of the features of a resource, such as a target network-accessible page, that are accessible to the policy  of the browser extension . Such a network-accessible page may correspond to a web page that is accessible via the Internet, referred to below as simply a \u201cpage\u201d for brevity. The static analysis module  applies a static analysis technique to determine whether the extension body  satisfies the policy rules of the policy . The other analysis module(s)  can perform other safety-related testing on the browser extension , to be described below.","In addition, the CAED system  can perform analysis on a legacy extension. To do so, the CAED system  can use a translation module  to convert at least part of the legacy extension into a form that accommodates safety-related testing by the CAED system .","If a browser extension  is deemed safe, a conversion module  can then convert the browser extension  into one or more forms that are compatible with one or more types of browsers (e.g., where the different browsers may be provided by different browser developers). More specifically, prior to conversion, the browser extension  may exist in a language that accommodates static analysis. The conversion module  operates to convert the browser extension  from this analysis-friendly form to one or more forms that are executable by one or more respective browsers. The conversion module  stores the converted browser extension in a data store , adding it to a collection of other converted browser extensions that have been deemed safe. An interface module  disseminates the converted browser extensions to end users, e.g., upon request from the end users.","The user realm comprises a plurality of user devices (not shown) which host respective browsers. The browsers may have different types, e.g., produced by different respective browser developers. For example,  shows a browser type A  implemented by a first user device, a browser type B  implemented by a second user device, a browser type C  implemented by a third user device, and so on. For example,  shows that an end user who operates browser type A  is in the process of downloading a browser extension  that is compatible with the browser type A .","A browser extension which is downloaded from the CAED system  is assured to be secure by virtue of the static analysis and other testing performed by the CAED system . As such, a user can install the browser extension with confidence that it will not overstep the bounds of the privileges specified by its policy. For the same reason, the execution of the browser extension by the browser need not invoke safety-related runtime analysis on the browser extension.","Advancing to , this figure shows additional details regarding the development realm and the curator realm. Starting with the development realm, a developer can create the extension body  against one or more application programming interfaces (APIs) . The API(s)  provide functionality that can be invoked by the extension body  in order to interact with pages, to access local storage of a user device, to access network-accessible sites, and\/or to perform other functions. As will be described in greater detail below, the API(s)  can be annotated with logical pre-conditions and post-conditions, which can be expressed using refinement types. A type generally describes the nature of a feature (such as a function) that appears in the API(s) . A refinement type describes a predicate that further qualifies a type. A post-condition sets forth a predicate that is deemed to be true following the execution of some operation. A pre-condition sets forth a predicate that is expected to be satisfied prior to the execution of the operation. In one case, a developer can download the API(s)  from the CAED system . That is, the developer may not be tasked with the responsibility of authoring the API(s) .","More specifically, the developer can produce the extension body  in a language which readily accommodates static analysis, such as a high-level type-safe language. Without limitation, one such language is the language Fine; Fine is described in Nikhil Swamy, et al., \u201cEnforcing Stateful Authorization and Information Flow policies in Fine,\u201d , Vol. 6012, 2010, Springer-Verlag Berlin Heidelberg, pp. 529-549. Fine is a dependently typed ML dialect, and is a functional subset of F#. The principal feature of Fine is its type system, which is designed to support static verification of safety properties via a mixture of refinement and sub-structural types.","A developer can create the policy  in any type of logic-based specification language. For example, a developer can author the policy  in the first-order logic language Datalog. Datalog is a variant of Prolog. But Datalog applies various simplified assumptions (compared to Prolog) which ensure that programs produced in Datalog will terminate. Of particular bearing to the present description, Datalog programs employ restricted use of negation. Information on Datalog is readily available in the literature, such as in Robert Combs, , CRC Press, 1998.","As will be described in greater detail below, the developer can produce the policy  so that it specifies fine-grained privileges. In some cases, the privileges describe the parts of a page (and\/or other resources) that the browser extension  is entitled to access. These privileges are referred to as access control privileges. In addition, the privileges can describe constraints among resources, such as by specifying the manner in which the browser extension  is permitted to interact with a third-part entity, e.g., by transferring information from a page that the end user is viewing to another website. These privileges are referred to herein as dataflow privileges. In general, these privileges empower a developer to pinpoint specific parts of a page and\/or other resources by leveraging the structure and\/or content of the resources.","Upon receipt of the browser extension  at the CAED system , the visualization module  can be used to instantiate the policy  with respect to a particular page or other resource. The visualization module  performs this task by highlighting the parts of the page that the policy  entitles the browser extension  to access or the parts of the page that are otherwise impacted by the policy. In this manner, the curator can be given a way of quickly and easily understanding the nature and scope of the policy . But this approach does not exhaustively reveal the security-related impact of the policy . This is because the browser extension  may be designed to interact with many different pages, and it may be impractical for the user to instantiate the policy  for each of the pages. In addition, or alternatively, the policy  may impact only a specific part of a particular type of page. The user may be unsuccessful in discovering the page that is impacted by the policy .","The static analysis module , by contrast, provides a thorough determination of whether the extension body  satisfies the policy . As the name suggests, the static analysis module  performs analysis on the extension body  in a static manner, rather than during the runtime execution of the extension body . In one approach, the static analysis module  can be implemented as a Fine type checker which performs type-checking on extension bodies expressed in the language Fine, identified above.","The static analysis module  can rely on a Satisfiability Modulo Theories (SMT) module  to perform reasoning during the analysis of the extension body . One SMT module  that can be used is the Z3 SMT module provided by Microsoft Corporation of Redmond, Wash. The Z3 SMT module is described in various publications, including Leonardo de Moura, et al., \u201cZ3: An Efficient SMT Solver,\u201d , Vol. 4963, 2008, Springer-Verlag Berlin Heidelberg, pp. 337-340.","The static analysis module  operates by investigating the extension body  in the symbolic domain. As the analysis proceeds, the static analysis module  learns facts about the extension body , thereby gaining an increasingly refined understanding of the nature of the extension body . The static analysis module  stores these facts a virtual log . Eventually, the static analysis module  can reach a conclusion as to whether or not the extension body  complies with the rules specified by the policy .","More specifically, the virtual log  models the runtime behavior of a browser extension by maintaining a monotonically-increasing set of facts about the extension body . The qualifier \u201cmonotonic\u201d means that a property that is assessed as true at time t will remain true during the subsequent analysis of the extension body . This property ensues from the restrictions placed on negation by the logic-based specification language. The significance of this property with respect to the static type-checking will be explained below in subsection A.3.","Finally,  shows the use of the conversion module  to convert the browser extension  into a form that is compatible with at least one type of browser, producing a converted extension . This conversion operation may act on the extension body , or both the extension body  and the policy .",{"@attributes":{"id":"p-0067","num":"0066"},"figref":["FIG. 3","FIG. 1"],"b":["100","112","112","302","112","304","302","304","304"]},"Various user devices can also interact with the CAED system , such as illustrative user device  operated by an end user. The user device  can be implemented by any computing functionality, such as a personal computer, a computer workstation, a laptop computer, a game console device, a set-top box, a personal digital assistant device, a mobile telephone device, a book reader device, and so on.","In one implementation, the user device  may host a browser  of a particular type. The browser  includes browser functionality  which implements its core logic. The browser functionality  can also be supplemented by one or more browser extensions  which can be downloaded from the CAED system . The browser  can also interact with a browser-local storage, e.g., providing a browser history  and other local resources . A browser history describes the network-accessible sites that the user has visited in one or more browser sessions.","In another implementation, all or part of the browser  is implemented in remote fashion by network-accessible resources. The end user can use the user device  to interact with these remote browser resources.","Finally, the user device  includes one or more input devices  and one or more output devices  for interacting with the browser . The input devices  can include any combination of a key input device, a mouse device, a touch-sensitive input device, and so on. The output devices  can include any combination of a display mechanism, a printer, etc.","An end user may use the browser  to access one or more network-accessible sites  via the communication conduit . The network-accessible sites  can provide any information and\/or services via one or more network-accessible pages (e.g., web pages).","The environment  has various potential benefits. In one case, the environment  allows a developer to provide a browser extension that has privileges which are narrowly tailored to the tasks performed by the browser extension. This provides greater protection and assurances to the end users. By contrast, in the above-described runtime privilege-checking approach, the rights specified by its browser extension models are too coarse-grained. For example, a manifest in the runtime privilege-checking approach may grant a browser extension the right to access all of the content associated with a web page and\/or the entire user's browsing history. Thus, even though the runtime privilege-checking approach provides some degree of transparency in the installation process, it may fail to suitably safeguard sensitive data. In addition, the environment  can entirely eliminate (or at least reduce reliance on) runtime analysis of browser extensions, unlike the runtime privilege-checking approach. These potential advantages of the environment  are mentioned by way of example, not limitation.","A.2. Generation, Analysis, and Use of the Policy","Having now set forth an overview of the environment , the remainder of Section A will describe individual aspects in of the environment  in greater detail. To begin with,  describes the behavior of a representative browser extension, which will serve as a running example herein. The browser extension is invoked when the end user visits a page  provided by a social networking site. For example, the page  provides information regarding a hypothetical friend of the end user, named John Smith. The browser extension then extracts contact information  from the page  and sends it to a third party entity, such as an address book  maintained by another website. More specifically, the contact information that is extracted and transmitted corresponds to website links that appear on the page .","The browser extension may also pose risks. For example, there is a risk that the browser extension may overstep its bounds and extract more information than the website links. There is also a risk that the browser extension can make undesirable modifications to the page  and\/or send extracted information to non-authorized third party entities, and so on. The browser extension described herein removes these concerns.","The developer may begin by creating a policy that specifies the privileges which entitle the browser extension to perform the above-described tasks. In some cases, the developer may design a policy that targets one particular page (or other resources). In other cases, the developer may design a policy that implicates a collection of pages (or other resources). For example, the developer can construct a policy which uses wildcard characters to refer to a group of pages hosted by a particular website. This subsection provides additional information regarding the characteristics of the policy, its analysis, and its manner of use in conjunction with an extension body.",{"@attributes":{"id":"p-0078","num":"0077"},"figref":["FIGS. 5 and 6","FIG. 4","FIG. 5"],"b":["402","402","402","402","502","502"]},{"@attributes":{"id":"p-0079","num":"0078"},"figref":"FIG. 6","b":["402","402","602","602"]},"The policy can pinpoint particular parts of the page  by leveraging the markup language structure and content of the page . For example, the policy may include one or more rules which grant the browser extension the right to investigate all nodes having the attribute of \u201cclass.\u201d The policy can specify one or more other rules which allow it to extract any website information subsumed under a \u201c<div class=\u201cwebsite\u201d> node. Assume that such a rule targets part  in the page . The part  may comprise sub-tree insofar as the node \u201c<div class=\u201cwebsite\u201d> may have one or more child nodes. The policy rule may allow the browser extension to extract information provided in those child nodes, associated with link content  shown in .",{"@attributes":{"id":"p-0081","num":"0080"},"figref":"FIG. 7","b":["700","700"]},"Although not shown, a policy can also provide rules which express network-accessible site(s), e.g., in one case, corresponding to websites, with which a page may interact. The policy can construct such a rule by leveraging the manner in which such site(s) are identified, e.g., using URLs or other resource identifiers. For example, a policy can specify a rule which permits the extension body to interact with a group of pages associated with a site by identifying the URL of that site, together with appropriate wildcard characters that provide a desired scope of generality. In addition, a policy rule can specify a portion of a user's browsing history which is accessible to the extension body (if any). For instance, in some cases, a policy can permit the extension body to access a portion of the user's browsing history that pertains to interaction with a particular site. These access rights are mentioned by way of example, not limitation; a policy may describe additional types of rights.","Certain predicates in the policy  pertain to markup features in the page, such as \u201cEltParent e p,\u201d \u201cEltTagname p \u2018div\u2019,\u201d and \u201cEltAtrr p \u2018class\u2019 \u2018website\u2019.\u201d \u201cEltParent\u201d is a predicate which states that node p is the parent-element of node e. \u201cEltTagname p \u2018div\u2019\u201d states that the tag name of p is \u201cdiv.\u201d \u201cEltArr p \u2018class\u2019 \u2018website\u2019\u201d states that the node p has an attribute \u201cclass\u201d with value \u201cwebsite.\u201d This general class of predicates is referred to as metadata predicates. More generally stated, metadata predicates are applicable to the structure and content of resources accessible to the browser extension, the resources including at least one of: network-accessible pages; browser-local storage; resource identifiers; and network messages, etc. Further, the collection of metadata predicates is customizable. The predicate \u201cCanRead e\u201d, by contrast, is a member of a class of permission predicates. Permission predicates define permissions granted to the policy  over the resources. More specifically,  describes a collection of metadata predicates and a collection of permission predicates for one particular implementation of the environment . Note that the simplified \u201cCanRead\u201d permission predicate in  is replaced with predicates (in ) that more finely define the information on a page which the policy is permitted to read.","A policy can be integrated with an extension body (and associated APIs) in different ways, depending on the semantics of the overall programming model adopted by the environment . For example, according to one model, certain aspects of a page (or other resource) are considered non-sure, and certain parts are considered sensitive and secret. For example, in one implementation, the model can regard the tag structure and some of the attribute structure as non-secure. For example, the model can consider a CSS class attribute as pertaining to non-secure information. Generally, all of the non-secure information defines security metadata. In contrast, the model can view the text, links, images, and all other content on a page as sensitive and secret. The model permits a browser extension to access the security metadata without the granting of explicit privileges to do so. In contrast, the model makes the accessing of secret information contingent on the granting of explicit privileges.","The above design objectives can be achieved by annotating certain DOM-interaction operations with logical pre-conditions and post-conditions. For instance, assume that the browser extension includes a command which seeks to alter an attribute s of a node n to a value v, e.g., using a \u201csetAttr\u201d command. The model may regard an attempt to modify an attribute in this manner as a security-sensitive event. As such, the command to write to an attribute can be annotated with a pre-condition which seeks to ensure that the browser extension has permission to write to the attribute in question. This pre-condition can invoke the \u201cCanWriteAttr\u201d predicate (described in ) to perform the appropriate checking. The static analysis module  can evaluate the \u201cCanWriteAttr\u201d predicate by determining whether this condition is derivable from the policy and from the facts in the virtual log .","Next assume that the browser extension invokes a command that seeks to access security metadata in the DOM, which is considered non-secure. This command is therefore not annotated with a pre-condition. But such a command can be annotated with a post-condition which invokes one of the metadata predicates. When symbolically executed, this post-condition can prompt the static analysis module  to record facts in the virtual log . In one example, the facts may express the parent\/child relationships between the nodes in question. These facts can be used in subsequent security checks to grant privileges to browser extension.","Next assume that a browser extension includes a request to access an attribute s of a node n in the DOM, having a value v. The attribute may potentially pertain to secret information. Thus, a command to get the attribute (\u201cgetAtrr\u201d) can be annotated with a pre-condition which seeks to ensure that the browser extension has permission to get the attribute in question. This pre-condition can invoke the \u201cCanReadAttr\u201d predicate to perform the appropriate checking During symbolic execution, the static analysis module  can also record facts in the virtual log  at the completion of this security check. For instance, a first fact indicates that the node n indeed has the attribute-value pair (s and v) in question. A second fact records the fact that the value v was derived from the node n.","More specifically, one or more API(s) can be annotated with the above-described refinement types (e.g., pre-conditions and post-conditions) to provide refined API(s). For example, a first refined API can be used to interact with the DOM. A second refined API can be used to interact with the local storage, network resources, and browsing history. The extension body can, in turn, invoke various refined API(s). In this manner, the model can integrate the rules of the policy with the extension body. For example, the extension body may contain a command to write to an attribute in a page. To perform this function, the extension body invokes an appropriate operation in a refined DOM API. That operation may be annotated with a pre-condition which specifies that the extension body is expected to have explicit permission to modify the attribute. And to make this determination, the static analysis module  can examine the policy assumptions in the policy and the facts in the virtual log . The description below will set forth a detailed example of this manner of analysis.","Advancing to , this figure shows a user interface presentation  produced by the visualization module . The visualization module  applies the policy of a browser extension to a particular page or other resource. For example, in the example of , the purpose of the browser extension is to extract certain pieces of information from a social network page, e.g., page . Hence, the curator may test the policy by instantiating it for a particular page of that website. In the case of , the curator has applies the policy to a page associated with a friend having the hypothetical name John Smith.","The visualization module  can highlight the parts of the page that the policy is entitled to access or are otherwise impacted by the policy. For example, assume that the policy grants the browser extension the right to access all nodes having the \u201cclass\u201d attribute. In view of this, the visualization module  highlights any content in the page associated with this markup content, such as the label \u201cActivities\u201d . As described above, the policy also specifically grants the browser extension the authority to read the website-related text subsumed under the node \u201c<div class=\u2018website\u2019>\u201d. Hence, the visualization module  highlights the link content  associated with that node. Generally, the rules in the policy act as selectors which pick out particular parts of the page.","The user interface presentation  provides a readily understandable mechanism for revealing the scope of the privileges associated with the browser extension. That is, at a glance, the curator can gain insight as to what parts of a page the browser extension can access and which parts it cannot access. For example, the user interface presentation  reveals that the browser extension is not permitted to access the text associated with the \u201cActivities\u201d label, the \u201cInterest\u201d label, and so on.","In the above example, the assumption is made that the curator, who may be affiliated with the CAED system , operates the visualization module  to produce the user interface presentation . But other users can also perform this operation, such as end users.","The CAED system  can employ other tools which examine the policy of the browser extension. For example, a pattern analysis module (not shown) can examine the policy to determine if it contains undesirable patterns. For example, a policy is suspect if it grants a browser extension the privilege to modify a page in a manner that allows the browser extension to grant itself access to protected resources. The following policy exemplifies this undesirable pattern:","\u2200 e CanWriteAttr e \u201cclass\u201d","\u2200 e, k. EltAttr e \u201cclass\u201d \u201creadable\u201d\u2192CanReadValue e.","Here, the attribute (\u201cClass\u201d) which protects access to an element is mutable by the browser extension. To detect such a situation, the pattern analysis module can enumerate the set of attributes over which the browser extension has write privileges. The pattern analysis module can then perform a syntactic check to ensure that none of these attributes ever appear within a metadata predicate.","In another case, an analysis module can determine the scope of a policy, e.g., by determining the number of web pages that are accessible by the policy, or the extent of the browser history that is accessible by the policy. This analysis module can then provide any type of metric (or metrics) which convey the scope of the policy to the curator.","In another case, an analysis module can perform analysis which determines if there are any conflicts among two or more browser extensions. For example, two or more browser extension may attempt to access the same part of the same page. This may create conflicts which render the performance of the browser extensions unstable, even though each browser extension is deemed safe when considered in isolation. This analysis can be performed by examining just the policies of the browser extensions, or the policies in conjunction with their respective extension bodies (e.g., using static analysis, described below).","These types of analyses are cited by way of example, not limitation. The CAED system  can incorporate yet other types of analysis tools which examine the policies of the browser extensions.","As a final topic in this subsection, a developer can generate the policy in different ways. In one approach, a developer can manually write the extension body, followed by the policy. In another approach, the developer can manually write the policy first, followed by the extension body. In another approach, the developer can write the policy and extension body together as a single exercise.","In another case, the developer can first write the extension body. The developer can then use an automated (or semi-automated) tool to derive the policy based on the extension body. Such a tool can first determine the content in a page (and\/or other resource(s)) that the extension body is designed to access. In many cases, the extension body is directed to a particular page having a particular structure, or a finite collection of such pages and structures. As such, the tool can next determine the structure of the page(s) that are targeted by the extension body. The tool can then automatically construct a policy which includes appropriate metadata predicates to pinpoint the parts of the page(s) to which the extension body demands access. The tool can then choose appropriate permission predicates which enable the extension body to perform its specified tasks on the targeted parts.","A.3. Static Analysis of Browser Extensions","As described above, the static analysis module  performs static analysis on the policy and the extension body, in conjunction with any APIs implicated by the extension body. This yields a verification result that indicates whether or not the extension body satisfies the rules in the policy. However, when the browser extension is actually executed by a browser, the browser extension may run in conjunction with page-resident script code (e.g., JavaScript). In view of this, the more specific goal of the static analysis module  is to determine whether the browser extension satisfies the policy for any arbitrary interleaving of extension code and page script code. This safety property is referred to herein as execution safety, since the safety property implicates any unanticipated interleaving of extension code and page script code during the execution of the browser extension.",{"@attributes":{"id":"p-0104","num":"0103"},"figref":"FIG. 10","b":["1002","1002","1004","1004","1006","1004","1006","1006"]},"A typical browser will create a queue  comprising plural blocks of code, which it then executes in series. More specifically, the queue  can define a single thread of control that includes an arbitrary interleaving of page script code and extension code. This means that the browser may execute one or more blocks of page script code, followed by one or more blocks of extension code, followed by one or more blocks of page script code, and so on.","The extension code is statically verified in the manner described above, and can therefore be regarded as trusted. In contrast, the page script code is unverified (from the standpoint of static analysis module , which has no advance knowledge of the nature of the page script code). This interleaving of trusted and unverified code raises the following concern. Although the extension code has been deemed safe, there is a concern that it can interact with page script code in such a manner that it becomes unsafe.","The environment  adopts a model, however, which ensures the execution safety of the browser extension in the presence of unverified (and unanticipated) page script code. Namely, the environment  adopts a model in which a browser extension is dependent only on a monotonically increasing set of facts about the page metadata. As described above, this means that a fact in a set of facts will remain stable regardless of additional facts which are added to the set. In the context of , this means that the operations performed by the page script code will not interfere with any previous facts established by the extension code. That is, the page script code may add facts during its operation, but those facts will not interfere with prior facts established by the extension code. This property ensues in part from the use of Datalog to express the policies, which, as said, provides restricted use of negation.","The above conclusion has the following implication regarding the static analysis of the browser extensions. The static analysis module  can perform static analysis on the browser extension without consideration of any (later) intermingling of the extension code and unanticipated page script code during execution of the browser extension. That is, the facts maintained in the virtual log , and the conclusions derived therefrom, will not be subverted by the (later) presentation of unverified page script code.","Now advancing to a description of the static analysis itself, the process begins by producing a browser extension in Fine (or some other type-safe language) and linking the extension against libraries that implement extension-related APIs. The APIs are decorated with refinement types describing security-relevant pre-conditions and post-conditions. The approach then involves verifying the browser extension using a Fine refinement type checker or other suitable static analysis technique.","The manner in which the static analysis module  operates will be set forth below by way of an example. In connection with that example,  provides a refined API for interacting with the DOM.  describes a policy which grants privileges to an extension body. And  describes the extension body itself. The operation of the static analysis module  will be clarified in the context of the description of . As a whole, the browser extension in this example performs the basic operation outlined in , e.g., by extracting website information from one site and delivering it to another site.","Starting with , this figure shows a fragment of a refined DOM API that is accessible to the browser extension. In lines  and , the API defines two abstract types, \u201cdoe\u201d and \u201celt,\u201d identifying the types of web documents and document nodes, respectively.","The API next defines a number of type constructors corresponding to the predicates of the policy language (of ). More specifically, in lines -, the API provides definitions of several metadata predicates that can be used to express the structure of a page. For example, at line , the API defines a \u201cDocDomain\u201d predicate that constructs a proposition from a \u201cdoc\u201d and a string value. In lines -, the API provides predicates corresponding to authorization privileges. The language used to express the API accommodates the use of polymorphic propositions. For example, the \u201cFlowsFrom\u201d proposition at line  relates a value v of any type to another value v of some other type, to indicate that v was derived from v.","In lines -, the API provides a sampling of functions that browser extensions can use to inspect the structure of a page. The API gives each of these functions a refined type, where the refinement on the return value corresponds to a post-condition established by the function. In lines -, the API defines functions that provide browser extensions with access to security-sensitive data, e.g., the attributes of an element. The types of these functions are refined with both pre-conditions and post-conditions, where the pre-conditions correspond to authorization privileges that the caller is expected to possess in order to access, for example, an attribute. The post-conditions, as with the metadata queries, record properties of the page structure in the virtual log .","Generally, the nature of the functions listed in  is indicated by their descriptive labels. For example, the function \u201cgetAttr\u201d gets an attribute from the page. The function \u201cgetValue\u201d gets a value of an attribute. The function \u201cgetEltByld\u201d provides random access to a node using a node identifier. Some of the functions allow browser extensions to mutate the DOM. For example, using \u201ccreateElt\u201d and \u201cappendChild,\u201d a suitably privileged browser extension can alter the structure of a web page. The environment  models such mutation effects purely in terms of their effects on the virtual log . Since the virtual log  grows monotonically, a property that was once true of an element remains valid in the logic even after the element is mutated.","Now advancing to , this figure shows the policy of the browser extension. The policy includes five enumerated assumptions. In lines -, the policy defines a relation \u201cEltAncestor\u201d with respect to \u201cEltParent.\u201d These lines also define the transitive closure associated with this relationship. In lines  and , the policy grants the browser extension the privilege to: 1) read the \u201cclass\u201d attribute of every element on the page; and 2) to read the contents of any sub-tree in the page rooted at a \u201cdiv\u201d node whose class attribute is \u201cwebsite.\u201d Hence, the policy shown in  is a more elaborately-stated version of the simplified policy  described above (in connection with ).","Advancing to , this figure shows the extension body of the browser extension. At line , the extension body extracts a tag t of the element e. The post-condition of this function allows the static analysis module  to conclude, after line , that the proposition \u201cEltTagName e p\u201d is in the virtual log  (because the symbolic execution of this proposition causes this fact to be stored in the virtual log ). In order to check the call at line , the extension body is asked to prove that the pre-condition \u201cCanReadAttr e \u2018class\u2019\u201d is derivable. This result follows from the top-level assumptions of the policy.","After line , the static analysis module  can conclude that the fact \u201cEltAttr e \u201cclass\u201d\u201d is present in the virtual log . At line , in the then-branch of the conditional, the static analysis module  uses the types of the equality operation and the Boolean operator to refine its information about the contents of the virtual log . In particular, the static analysis module  concludes that, if control passes to line , then both \u201cEltTagName e \u2018div\u2019\u201d and \u201cEltAttrr e \u2018class\u2019 \u2018website\u2019\u201d are present in the virtual log . Using similar reasoning, the static analysis module  can conclude that, if control passes to line , \u201cEltParent e c\u201d is present in the virtual log .","Finally, at the call to \u201cgetValue c\u201d at line , the static analysis module  seeks to show that the pre-condition \u201cCanReadValue c\u201d is derivable. The static analysis module  can establish this fact based on the top-level assumptions in the policy, together with all the accumulated information about the contents of the virtual log .","This subsection closes with another example of an API, policy, and extension body associated with another browser extension, as shown in . This browser extension provides a news personalization service that operates in conjunction with the hypothetical news-related site abc.com. The browser extension re-arranges the news stories presented on the front page of the site abc.com in an order that is deemed to more likely interest the user. To operate in this manner, the browser extension performs the following four steps.","1) When the user browses to abc.com, the browser extension reads a preference file on the user's local file system (e.g., provided by the user device). That preference file specifies a user's news-related preferences.","2) The browser extension then sends data from this preference file to a social news website, the hypothetical xyz.com. From that source, the browser extension obtains popularity information which identifies news stories that are currently assessed as popular and which match the interests of the user.","3) The browser extension then consults the user's browsing history to determine the popular news stores that appear on abc.com, but have not already been accessed (and presumably read) by the user.","4) Finally, the browser extension re-arranges the abc.com page, placing unread popular stories towards the top of the page or in other prominent positions.","For this browser extension, assume that the developer aims to create a policy which ensures that xyz.com only obtains data from the preference file. Further, the developer may attempt to ensure that no information about the browsing history is leaked to abc.com (beyond what it can already determine based on the selections made by the user within that site).","Referring now to , in lines -, an API provides the browser extension with access to the local file system, URLs, network resources, and browsing history. Note that the API provides a mechanism, using the \u201chistoryOnSite\u201d function, to selectively access parts of the user's browsing history, rather than the entire user's browsing history. Namely, the \u201chistoryOnSite\u201d function performs this operation by permitting the browser extension to view the history of URLs that a user may have visited on a particular site, not all sites.","In lines -, the policy grants the extension body the right to read the preference (\u201cprefs\u201d) file and to read a user's browsing history only for abc.com. Line  particularly stipulates that only information derived from the \u201cprefs\u201d file can be sent to xyz.com. Lines - specify that the browser extension has the privilege to append an element e as the child of another element e, but only if e is an abc.com node, and if e was derived from a node in the same domain. In other words, this assumption gives the browser extension the right to reorder the structure of nodes on an abc.com page, but not to add any new content.","In lines -, the extension body includes code for reading data from the local preferences file and sending it to xyz.com. In line lines -, the extension body includes code that rearranges articles on the abc.com site.","Static analysis on the policy and extension body shown in  proceeds in the same manner described above with respect to . Namely, the static analysis module  symbolically executes the extension body. At various junctures, the static analysis module  adds facts to the virtual log . When evaluating permissions, the static analysis module  can consult the policy, in conjunction with the facts in the virtual log .","A.4. Conversions Performed by the CAED","As stated in the introductory section, the CAED can receive and test an extension body in a language which accommodates static analysis, such as Fine. If the browser extension is deemed acceptable, the conversion module  can then convert the browser extension to one or more native forms that are compatible with one or more respective types of browsers. The browsers can then execute the converted browser extensions.","In a first example, assume that the browser corresponds to Internet Explorer\u00ae (IE) provided by Microsoft Corporation of Redmond, Wash. The conversion module  can compile the Fine-expressed browser extensions into .NET libraries. These libraries can then be loaded by a single native IE extension, or a BHO, in IE parlance. The BHO is implemented in F# and hosts the browser extensions in an unprivileged AppDomain, a software-isolated process for .NET. The AppDomain makes it easy to load and unload extensions while the browser is running.","In a second example, assume that the browser correspond to Chrome\u2122, provided by Google Inc. of Mountain View, Calif. The conversion module  can compile the Fine-expressed browser extensions by translating .NET bytecode into JavaScript source code. In addition, the environment  can provide a JavaScript runtime system that exposes JavaScript's object-oriented DOM API as functions.","The conversion module  can perform other conversion operations associated with other browser types. For example the conversion module  can convert the Fine-expressed browser extensions into a form that is compatible with C3, an HTML5 experimentation platform written exclusively in C#.","In addition, the translation module  can accept legacy extensions from various sources. Consider, for example, legacy extensions which were originally authored for installment on the Chrome\u2122 browser. Each of these extensions has three parts: a manifest, a content script, and an extension core. The manifest specifies the access privileges of the browser extension. The context script provides the browser extension's interface to the DOM, e.g., by allowing the browser extension to read and write to pages. The extension core provides the bulk of the other logic associated with the browser extension, and, in particular, can perform functions such as local storage, cross-domain requests, etc. The context script and the extension core communicate by message passing.","In one approach, the translation module  can translate both the content script and the extension core from their native JavaScript to Fine (or some other type-safe language that accommodates static checking) In another case, the translation module  just translates the content script to Fine, leaving the extension core in JavaScript. This latter solution does not provide the same assurances as the first solution, but it is simpler to implement.","B. Illustrative Processes",{"@attributes":{"id":"p-0137","num":"0136"},"figref":["FIGS. 15-18","FIG. 1"],"b":["100","100"]},"Starting with , this figure shows a procedure  that describes one way to generate a browser extension. In block , a developer can generate the extension body against one or more refined API(s). In block , the developer can generate the logic-based policy. In other implementations, block  can proceed block , or blocks  and  can be performed as an integral action. In one case, the user manually creates the policy. In another case, the user automatically or semi-automatically generates the policy. In block , the developer sends the policy and the extension body to the CAED system .",{"@attributes":{"id":"p-0139","num":"0138"},"figref":"FIG. 16","b":["1600","112"]},{"@attributes":{"id":"p-0140","num":"0139"},"figref":"FIG. 17","b":["1700","112","1702","112","1704","112","114","1706","112","116","1708","112"]},"In block , the CAED system  determines whether the browser extension is acceptable, e.g., based on whether it satisfies the tests in blocks -. If not, in block , the CAED system  can optionally notify the developer of the problem. If the browser extension is acceptable, in block , the CAED system  can use the conversion module  to convert the browser extension from Fine to a form or forms associated with one or more types of target browsers. In block , the CAED system  stores the converted browser extensions produced in block  in the data store . In block , the CAED system  delivers requested browser extensions to the users.",{"@attributes":{"id":"p-0142","num":"0141"},"figref":"FIG. 18","b":["1800","112","1802","112","1804","112","1806","112","1808","112"]},"C. Representative Processing Functionality",{"@attributes":{"id":"p-0144","num":"0143"},"figref":["FIG. 19","FIG. 1"],"b":["1900","1900","100","102","112","306","1900","1900"]},"The processing functionality  can include volatile and non-volatile memory, such as RAM  and ROM , as well as one or more processing devices  (e.g., one or more CPUs, and\/or one or more GPUs, etc.). The processing functionality  also optionally includes various media devices , such as a hard disk module, an optical disk module, and so forth. The processing functionality  can perform various operations identified above when the processing device(s)  executes instructions that are maintained by memory (e.g., RAM , ROM , or elsewhere).","More generally, instructions and other information can be stored on any computer readable medium , including, but not limited to, static memory storage devices, magnetic storage devices, optical storage devices, and so on. The term computer readable medium also encompasses plural storage devices. In all cases, the computer readable medium  represents some form of physical and tangible entity.","The processing functionality  also includes an input\/output module  for receiving various inputs (via input modules ), and for providing various outputs (via output modules). One particular output mechanism may include a presentation module  and an associated graphical user interface (GUI) . The processing functionality  can also include one or more network interfaces  for exchanging data with other devices via one or more communication conduits . One or more communication buses  communicatively couple the above-described components together.","The communication conduit(s)  can be implemented in any manner, e.g., by a local area network, a wide area network (e.g., the Internet), etc., or any combination thereof. The communication conduit(s)  can include any combination of hardwired links, wireless links, routers, gateway functionality, name servers, etc., governed by any protocol or combination of protocols.","In closing, the description may have described various concepts in the context of illustrative challenges or problems. This manner of explication does not constitute an admission that others have appreciated and\/or articulated the challenges or problems in the manner specified herein.","Although the subject matter has been described in language specific to structural features and\/or methodological acts, it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather, the specific features and acts described above are disclosed as example forms of implementing the claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0022","num":"0021"},"figref":["FIG. 3","FIG. 1"]},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":["FIG. 6","FIG. 5"]},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0032","num":"0031"},"figref":["FIG. 13","FIG. 11","FIG. 11"]},{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 14"},{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 15"},{"@attributes":{"id":"p-0035","num":"0034"},"figref":["FIG. 16","FIG. 1"]},{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIG. 17"},{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIG. 18"},{"@attributes":{"id":"p-0038","num":"0037"},"figref":"FIG. 19"}]},"DETDESC":[{},{}]}
