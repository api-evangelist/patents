---
title: Responding to natural language queries
abstract: Disclosed herein are a system, non-transitory computer-readable medium, and method for responding to natural language queries. Keywords likely to appear in a natural language query are determined and each likely keyword is associated with a module. A response to a natural language query comprises information generated by each module associated with a likely keyword appearing in the natural language query.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09411803&OS=09411803&RS=09411803
owner: Hewlett Packard Enterprise Development LP
number: 09411803
owner_city: Houston
owner_country: US
publication_date: 20120928
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","DETAILED DESCRIPTION","CONCLUSION"],"p":["Natural language interfaces may be utilized to translate natural language queries into a database query using structured query language (\u201cSQL\u201d). Such a translation may be carried out using a semantic model that defines how the data is arranged in the database. The semantic model may comprise associations between certain keywords and database attributes (e.g., customer or employee). In turn, the database attributes may be associated with a database property type (e.g., table or column). These associations of the semantic model may be adjusted to reflect changes in the underlying database model.","Introduction:","As noted above, associations stored in semantic models may be used to translate natural language queries into SQL. However, not all databases are relational databases that respond to SQL queries. In some examples, data may be stored in a real-time memory database or some other format not obtainable via SQL. In these instances, modules or application programming interfaces (\u201cAPI\u201d) may be developed to retrieve the data via a computer program. Thus, a database structure may be hidden such that the data is only accessible by way of APIs. Finally, some data may not be stored in a database but instead generated in real time by a module. Without knowledge of a database structure, it is difficult to generate a semantic model to respond to natural language queries.","In view of the foregoing, aspects of the present disclosure provide techniques for responding to natural language queries when a database structure is unknown. In one aspect, keywords likely to appear in a natural language query are determined and each likely keyword is associated with a module. In another aspect, a response to a natural language query comprises information generated by each module associated with a likely keyword appearing in the natural language query. The aspects, features and advantages of the disclosure will be appreciated when considered with reference to the following description of examples and accompanying figures. The following description does not limit the disclosure; rather, the scope of the disclosure is defined by the appended claims and equivalents. The present disclosure is broken into sections. The first section, labeled \u201cEnvironment,\u201d describes an illustrative environment in which various examples may be implemented. The second section, labeled \u201cComponents,\u201d describes various physical and logical components for implementing various examples. The third section, labeled \u201cOperation,\u201d describes illustrative processes in accordance with aspects of the present disclosure.","Environment:",{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 1","b":["100","100","100"]},"The computer apparatus  may also contain a processor , which may be any number of well known processors, such as processors from Intel\u00ae Corporation. In another example, processor  may be an application specific integrated circuit (\u201cASIC\u201d). Non-transitory computer readable medium (\u201cCRM\u201d)  may store instructions that may be retrieved and executed by processor . As will be discussed in more detail below, the instructions may include an indexer , a query translator , a results generator , and a language learner . In one example, non-transitory CRM  may be used by or in connection with any instruction execution system that can fetch or obtain the logic from non-transitory CRM  and execute the instructions contained therein. Non-transitory computer readable media may comprise any one of many physical media such as, for example, electronic, magnetic, optical, electromagnetic, or semiconductor media. More specific examples of suitable non-transitory computer-readable media include, but are not limited to, a portable magnetic computer diskette such as floppy diskettes or hard drives, a read-only memory (\u201cROM\u201d), an erasable programmable read-only memory, a portable compact disc or other storage devices that may be coupled to computer apparatus  directly or indirectly. Alternatively, non-transitory CRM  may be a random access memory (\u201cRAM\u201d) device or may be divided into multiple memory segments organized as dual in-line memory modules (\u201cDIMMs\u201d). The non-transitory computer-readable medium (\u201cCRM\u201d)  may also include any combination of one or more of the foregoing and\/or other devices as well.","Although  functionally illustrates one processor and one non-transitory CRM as being within the same block, it will be understood that these components may actually comprise at least one or multiple processors and memories that may or may not be stored within the same physical housing. For example, any one of the memories may be a hard drive or other storage media located in a server farm of a data center. Accordingly, references to a processor, computer, or memory will be understood to include references to a collection of processors, computers, or memories that may or may not operate in parallel.","Components:","The instructions stored in non-transitory CRM  may comprise any set of instructions to be executed directly (such as machine code) or indirectly (such as scripts) by the processor(s). In that regard, the terms \u201cinstructions,\u201d \u201cmodules\u201d and \u201cprograms\u201d may be used interchangeably herein. The instructions may be stored in any computer language or format, such as in object code or modules of source code. Furthermore, it is understood that the instructions may be implemented in the form of hardware, software, or a combination of hardware and software and that the examples herein are merely illustrative.","Indexer  may determine which keywords are likely to appear in a natural language query and may associate each likely keyword with a module of a plurality of modules likely to provide an accurate answer to the natural language query. In one example, a module may be defined as an API whose underlying code obtains or generates data. Query translator  may determine whether at least one of the likely keywords determined by indexer  appears in a received natural language query. Results generator  may respond to the received natural language query with information generated by each module associated with a likely keyword appearing in a received natural language query. Language learner  may alter an association between a likely keyword and a module, when it is determined that the altered association is more likely to trigger an accurate response to a natural language query.","The modules exposed to indexer  may be preselected by an administrator or a developer of the modules. Indexer  may determine a keyword likely to appear in a natural language query based on source code text of a module. In one example, indexer  may convert the source code text of each module and parameters thereof to likely keywords when possible. Such conversion may be accomplished utilizing the \u201cCamel Case\u201d standard. Indexer  may determine variations of every likely keyword in order to achieve better compatibility with different usages of a word. This may be carried out with the porter stemming algorithm (e.g. status and statuses have the same stem). In a further example, indexer  may also associate the modules with synonyms of determined keywords to increase the range of keywords that may likely appear in a natural language query. Indexer  may receive a feed of such synonyms from, for example, the WordNet English database.","In yet a further example, indexer  may associate each likely keyword with an attribute of a module based on metadata associated with each attribute. An attribute of the module may be detected from the source code text. Examples of an attribute may be the module's signature or parameters of the module. Each module name and parameter name may be associated with a likely keyword based on an analysis of metadata regarding the data types, relationships, and possible values thereof. For example, a module's parameter whose type is integer may be associated with a likely keyword that is actually a number. Finally, other keywords may comprise data that may be sought after by a natural language query. For example, if a system contains employee data and an employee is named \u201cMary Jones,\u201d the first name \u201cMary\u201d and the last name \u201cJones\u201d may each be keywords associated with an attribute of a module enabled to generate information about the employee \u201cMary Jones.\u201d","The results generator  may rank the information returned by each module based on a probability that the information is a correct response to the natural language query. The probability may be partially based on an amount of information returned by each module. For example, if a module does not return any results, its rank may be lower. In a further example, the probability may be based on a number of associations between each module and likely keywords appearing in the received natural language query. For example, if a module is associated with five keywords in a received natural language query, it may be ranked higher than a module associated with one keyword.","In another example, results generator  may rank the information returned by each module using a context free grammar. Words in a received natural language query may be analyzed and compared to sentences of the context free grammar. The sentences may be generated and stored by language learner . Some of the sentences in the context free grammar may comprise previously received natural language queries. In one example, the context free grammar may be a stochastic or probabilistic context free grammar. In the probabilistic or stochastic context free grammar, each sentence thereof may be associated with a probability. Such probability may reflect how frequently each sentence triggered a correct answer to a previously received natural language query. In a further example, results generator  may use the Cocke-Younger-Kasami (\u201cCYK\u201d) algorithm to rank the relevant sentences of the context free grammar.","In another example, language learner  may comprise pattern learning logic to assign a probability to each association between keywords and modules. The probability assigned to each association may also reflect how frequently each association triggered a correct answer to a previously received natural language query.","Operation:","One working example of a system and method to process natural language queries is illustrated in . In particular,  is a flow diagram in accordance with aspects of the present disclosure.  present various aspects of natural language processing in accordance with the present disclosure. The actions shown in  will be discussed below with regard to the flow diagrams of .","As shown in block  of , a keyword likely to appear in a natural language query is associated with a module. The module may be one of a plurality of modules likely to provide an accurate answer to the natural language query. Referring now to the example of , example modules , , , and  are shown. The illustrative modules shown in  may be APIs for obtaining customer and employee information of a company. Module  may be a module to obtain the employee identifier of an employee whose first name and last name are being entered therein as parameters. Module  may obtain the address of an employee whose employee identifier is being entered therein as a parameter. Module  may obtain the address of a customer whose first name and last name are being entered therein as parameters. Finally, module  may obtain or otherwise calculate the salary of the employee whose identifier is being entered therein as a parameter. It is understood that the foregoing modules are merely for illustrative purposes and that many other types of modules or APIs may be defined.","Referring now to , associations between keywords and attributes of the modules are shown. The associations may be stored in computer registers, in a relational database as tables having a plurality of different columns and records, XML documents or flat files. The associations may comprise any information sufficient to identify the relevant data, such as numbers, descriptive text, proprietary codes, references to data stored in other areas of the same memory or different memories (including other network locations) or information that is used by a function to calculate the relevant data.","Association  and  of  show an association between the keyword \u201cLive\u201d and the modules \u201cGet employee address\u201d and \u201cGet customer address\u201d respectively. Thus, when query translator  detects the keyword \u201cLive\u201d the modules \u201cGet employee address\u201d and \u201cGet customer address\u201d may be called upon to provide an answer to the natural language query. Associations  and  may cause the modules \u201cGet employee address\u201d and \u201cGet customer address\u201d to be called upon when the keyword \u201cStreet\u201d is detected in an incoming natural language query. Association  associates the keyword \u201cMary\u201d with the \u201cfirst name\u201d parameter of \u201cGet employee Id\u201d and the keyword \u201cJones\u201d with the \u201clast name\u201d parameter of \u201cGet employee Id.\u201d The words \u201cMary\u201d and \u201cJones\u201d are delimited by a comma. Thus, if either of these keywords is detected, the \u201cGet employee Id\u201d module may be called upon with the \u201cfirst name\u201d parameter set to \u201cMary\u201d and the \u201clast name\u201d parameter set to \u201cJones.\u201d Similarly, association  associates the keyword \u201cMary\u201d with the \u201cfirst name\u201d parameter of the module \u201cGet customer address\u201d and the keyword \u201cSmith\u201d with the \u201clast name\u201d parameter thereof. Thus, detection of \u201cMary\u201d or \u201cSmith\u201d in an incoming natural language query may cause the \u201cGet customer address\u201d module to be called upon with the \u201cfirst name\u201d parameter set to \u201cMary\u201d and the \u201clast name\u201d parameter set to \u201cSmith.\u201d Associations  and  may cause the module \u201cGet employee salary\u201d to be called upon when the keywords \u201cMake\u201d or \u201cMoney\u201d are detected. Associations  thru  may cause the \u201cGet employee address,\u201d \u201cGet employee salary,\u201d or \u201cGet employee Id\u201d modules to be called upon when the keyword \u201cEmployee\u201d is detected in an incoming natural language query. Finally, association  may cause the module \u201cGet customer address\u201d to be called upon when the keyword \u201cCustomer\u201d is detected in an incoming natural language query. The foregoing example associations shown in  may be used to convert a natural language query into a series of calls to the example modules in . Once again, the forgoing semantic model is merely for illustrative purposes and it is understood that different words and associations may be arranged therein. Furthermore, as more data is added (e.g., new customer or new employee) new associations may be added to the semantic model of .","Referring back to , it may be determined whether at least one of the likely keywords determined by indexer  appears in a received natural language query, as shown in block . In block , a response to the received natural language query may be generated with information from each module associated with a likely keyword in the received natural language query. Referring back to the examples in , a user may type in a question: \u201cWhere does Mary live?\u201d In this example, the word \u201cMary\u201d and \u201clive\u201d are included in associations , , , and . The keyword \u201cLive\u201d is associated with both \u201cGet employee address\u201d and \u201cGet customer address,\u201d thus both may be called upon to answer the natural language query. However, the parameters may be determined from the keyword \u201cMary.\u201d Referring now to , block  shows example code that may be generated to retrieve an answer to the natural language query \u201cWhere does Mary live?\u201d Block  first shows a call to the \u201cGet employee Id\u201d module with the \u201cfirst name\u201d parameter set to \u201cMary,\u201d which was indicated in the natural language query. Since no \u201clast name\u201d was indicated in the query, the \u201cGet employee Id\u201d module may be called with the \u201clast name\u201d parameter set to \u201cJones,\u201d since this is the only other last name for \u201cMary\u201d in the semantic model associated with \u201cGet employee Id.\u201d However, other examples may have various last names for Mary associated with \u201cGet employee Id.\u201d The \u201cGet customer address\u201d module may be called with the first and last name parameters set to \u201cMary\u201d and \u201cSmith\u201d in accordance with association . Block  in  also shows a call to \u201cGet employee address\u201d in accordance with its association with the keyword \u201cLive.\u201d The identifier returned from \u201cGet employee Id\u201d is used as a parameter for \u201cGet employee address.\u201d","In block , the answers generated by the code in block  are shown. The first answer is the address of the employee Mary Jones. This may be chosen as the first answer based on previous indications that this was the correct answer when the query \u201cWhat is Mary's address?\u201d was received in the past. When a user clicks on an answer, language learner  may keep track of the answers that a user selects in order to determine a probability. The second answer is the address of the customer \u201cMary Smith.\u201d","Advantageously, the above-described system, method, and non-transitory computer readable medium convert natural language queries into computer code that calls upon modules to obtain answers to the query. In this regard, the answers may be obtained despite having no knowledge of the structure of the database in which the data is stored. Furthermore, answers to natural language queries may be generated even if the modules calculate the data in real-time rather than querying a database.","Although the disclosure herein has been described with reference to particular examples, it is to be understood that these examples are merely illustrative of the principles of the disclosure. It is therefore to be understood that numerous modifications may be made to the examples and that other arrangements may be devised without departing from the spirit and scope of the disclosure as defined by the appended claims. Furthermore, while particular processes are shown in a specific order in the appended drawings, such processes are not limited to any particular order unless such order is expressly set forth herein. Rather, processes may be performed in a different order or concurrently, and steps may be added or omitted."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0003","num":"0002"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0004","num":"0003"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0005","num":"0004"},"figref":"FIG. 3A"},{"@attributes":{"id":"p-0006","num":"0005"},"figref":["FIG. 3B","FIG. 3A"]},{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 4"}]},"DETDESC":[{},{}]}
