---
title: Memory overload protection
abstract: A method, system and program product for controlling memory overload for a computer system. The invention determines heap utilization of a server; determines a maximum session lifetime a configured percentile of at least one session; determines a traffic rate (comprised of an average traffic rate received from a proxy server and a variance of traffic rate received from a proxy server); and calculates a maximum traffic rate, wherein the maximum traffic rate determines the heap utilization at a maximum heap percentage.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08046423&OS=08046423&RS=08046423
owner: International Business Machines Corporation
number: 08046423
owner_city: Armonk
owner_country: US
publication_date: 20090528
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION"],"p":["The present invention relates generally to memory overload protection, and more particularly to optimizing heap utilization by measuring and controlling the traffic rate.","In a typical computer system topology, a proxy server receives work and forwards that work to a server. If a traffic rate, the rate at which proxy server sends work to server, is too rapid, server can run out of one or more resources required to perform work. If traffic rate is too slow, throughput can be suboptimal. An alternation between too rapid and too slow subjects server to erratic work flow creating difficulties for optimizing heap utilization.","One requirement of memory overload protection is that proxy server must not forward work to server too quickly. Otherwise an out-of-memory exception may occur.","Another requirement of memory overload protection is that proxy server must forward work to server quickly enough in order to make good use of the memory resources of server. Further, overall throughput to server must not be too erratic.","The present invention provides a method, system and program product for memory overload protection.","In a first aspect, the invention provides a memory overload protection system, including a computer hardware device comprising: a memory sensor system for determining a heap utilization of a server; a session monitor system for determining a maximum session lifetime a configured percentile of at least one session; a speedometer system for determining a traffic rate, wherein the traffic rate is comprised of an average traffic rate received from the proxy server and a variance of traffic rate received from the proxy server; and a memory overload controller for determining a maximum traffic rate, wherein the maximum traffic rate results in the heap utilization at a maximum heap percentage.","In a second aspect, the invention provides a method for memory overload protection, using at least one computer hardware device for performing the steps of: determining a heap utilization of a server; determining a maximum session lifetime a configured percentile of at least one session; determining a traffic rate, wherein the traffic rate is comprised of an average traffic rate received from the proxy server and a variance of traffic rate received from the proxy server; and determining a relationship between the traffic rate and the heap utilization, wherein the determining generates a maximum traffic rate, wherein the maximum traffic rate results in the heap utilization at a maximum heap percentage.","In a third aspect, the invention provides a program product for memory overload protection, comprising: program code for determining a heap utilization of a server; program code for determining a maximum session lifetime a configured percentile of at least one session; program code for determining a traffic rate, wherein the traffic rate is comprised of an average traffic rate received from the proxy server and a variance of traffic rate received from the proxy server; and program code for determining a maximum traffic rate, wherein the maximum traffic rate results in the heap utilization at a maximum heap percentage.","In a fourth aspect, the invention provides a method for deploying an application for providing memory overload protection, comprising: providing a computer infrastructure being operable to: determine a heap utilization of a server; determine a maximum session lifetime a configured percentile of at least one session; determine a traffic rate over the maximum session lifetime, wherein the traffic rate is comprised of an average traffic rate received from the proxy server and a variance of traffic rate received from the proxy server; and determine a relationship between the traffic rate and the heap utilization, wherein the determining generates a maximum traffic rate, wherein the maximum traffic rate results in the heap utilization at a maximum heap percentage.","The illustrative aspects of the present invention are designed to address at least one of the problems herein described and other problems not discussed.","The drawings are not necessarily to scale. The drawings are merely schematic representations, not intended to portray specific parameters of the invention. The drawings are intended to depict only typical embodiments of the invention, and therefore should not be considered as limiting the scope of the invention. In the drawings, like numbering represents like elements.",{"@attributes":{"id":"p-0018","num":"0017"},"figref":["FIG. 1","FIG. 1"],"b":["10","12","18","12","16","12","14","10","12","16","14","12","14","12","14","12","18","12","12"]},{"@attributes":{"id":"p-0019","num":"0018"},"figref":["FIG. 2","FIG. 2"],"b":["20","22","20","24","22","34","20","26","28","30","32"]},"In one embodiment of the invention, server  is configured with a maximum heap percentage, where a heap  is the amount of non-native memory allocated to a JVM . Maximum heap percentage is the maximum percentage of heap  that can be used by the server . In addition, proxy server  is provided with a speed limiter  that controls a speed limit  per server  and thereby regulates a traffic rate\u2014the rate at which the proxy server  forwards work  to server . If the traffic rate exceeds speed limit , proxy server  may either suspend or reject work .","Server  is responsible for setting speed limit  for proxy server  that is sending work to server . Server  calculates speed limit  by monitoring a change in heap utilization as traffic rate changes. Various data points in which \u201cX\u201d=\u201ctraffic rate\u201d and \u201cY\u201d=\u201cheap utilization\u201d are determined. A linear regression is used to determine a relationship between traffic rate and heap utilization. A maximum traffic rate that traffic should be sent to server  is determined and is set as speed limit  in proxy server .","A memory sensor system  is provided that determines a heap utilization of server . A person skilled in the art will readily recognize that as the accuracy of the memory sensor system  improves the performance of the memory overload protection improves in a corresponding manner. An accurate reading of non-garbage memory can be determined using standard Java\u2122 application programming interfaces (API) after a global garbage collection (GC). The Java\u2122 virtual machine tool interface (JVMTI) is used to determine when a global GC has completed. (For example: using the JVMTI_EVENT_GARBAGE_COLLECTION_FINISH JVMTI event.) When global GC has completed, the amount of non-garbage memory in use is calculated as Runtime.getRuntime( ).totalMemory( )\u2212Runtime.getRuntime( ).freeMemory( ).","A session monitor system  is provided that determines a maximum session lifetime of a configured percentile of at least one session. \u201cSession\u201d refers generically to HTTP sessions, session initiation protocol (SIP) dialogs, application sessions, or any similar structure. (For example, if maximum session lifetime reports a maximum lifetime of 95% of all sessions and if 95% of the sessions are less than 3 minutes, then maximum session lifetime is 3 minutes.)","A speedometer system  is provided that reports traffic rate. Traffic rate is comprised of an average traffic rate received from proxy server  and a variance of traffic rate received from proxy server  over the maximum session lifetime as reported by the session monitor system . Proxy server  contains speed limit  for server  to which it forwards work . The speed limit  controls the traffic rate.","A memory overload controller  (MOC) is provided at server . It should be recognized that  is one illustrated embodiment and that MOC  may reside on a separate server. Initially, MOC  sets speed limit  at a low value while it determines a traffic rate\/heap utilization relationship. MOC  allows work  through until it can calculate a minimum number of data points (\u201cminDataPoints\u201d), e.g.: minDataPoints>=2. MOC  calculates a data point correlating traffic rate to heap utilization when:\n\n","Referring to , the process of memory overload control in one embodiment of the invention is described. The process starts with setting a low speed limit  for the work  flow (S). Next, traffic rate and corresponding heap utilization are determined (S). A series of determinations are then made, including: \u201cCan a data point be calculated?\u201d (S); \u201cHas the heap utilization changed?\u201d (S); \u201cIs there a steady traffic rate for a time that is greater than or equal to the maximum session lifetime?\u201d (S); and \u201cIs there no traffic rate change for a time that is greater than or equal to the maximum session lifetime?\u201d (S). If the answer to (S); (S); (S); or (S) is no, then the speed limit  is increased (S) and the process returns to (S). If the answer to (S); (S); (S); and (S) is yes, the method determines if the number of data points greater than or equal to minDataPoints (S). If the answer to this is no, then the process returns to (S). If the answer to (S) is yes, then the method proceeds to apply linear regression to calculate a traffic rate\/heap utilization slope (S); calculate the maximum traffic rate that results in the heap utilization at a maximum heap percentage (S); set maximum traffic rate in the speed limit  (S); and if heap utilization is greater than maximum heap percentage, decrease speed limit  (S).","Referring to , an example of linear regression for determining the maximum traffic rate given the maximum heap percentage and two data points is illustrated. An example of a linear regression that may be used in accordance with the invention is:\n\n(maximum traffic rate\u22122)\/(maximum heap percentage\u22122)=(21)\/(21)\n\nmaximum traffic rate\u22122=(21)\/(21)*(maximum heap percentage\u22122)\n\nmaximum traffic rate=(21)\/(21)*(maximum heap percentage\u22122)+2\n\nA person skilled in the art will readily recognize that other linear regression models may be used as needed for specific applications of memory overload protection.\n","This invention addresses a server's optimized use of memory . The illustrated embodiment utilizes memory  allocated to a server  as a heap . A person skilled in the art will readily recognize this invention may be generalized to optimize allocations of memory  and other resources in computer systems. For example, memory overload protection as described by this invention may be used to optimize memory  allocated for a stack.","In one illustrative embodiment, this invention may be implemented in WebSphere Extended Deployment 6.1.0.3, in which the proxy server  comprises the \u201cOn Demand Router (ODR)\u201d and the server  comprises the \u201cWebSphere Application Server (WAS)\u201d.","Referring again to , it is understood that server  may be implemented as any type of computing infrastructure. Server  generally includes a processor , input\/output (I\/O) , memory , and bus . The processor  may comprise a single processing unit, or be distributed across one or more processing units in one or more locations, e.g., on a client and server. Memory  may comprise any known type of data storage, including magnetic media, optical media, random access memory (RAM), read-only memory (ROM), a data cache, a data object, etc. Moreover, memory  may reside at a single physical location, comprising one or more types of data storage, or be distributed across a plurality of physical systems in various forms.","I\/O  may comprise any system for exchanging information to\/from an external resource. External devices\/resources may comprise any known type of external device, including a monitor\/display, speakers, storage, another computer system, a hand-held device, keyboard, mouse, voice recognition system, speech output system, printer, facsimile, pager, etc. Bus  provides a communication link between each of the components in the server  and likewise may comprise any known type of transmission link, including electrical, optical, wireless, etc. Although not shown, additional components, such as cache memory, communication systems, system software, etc., may be incorporated into server .","Access to server  may be provided over a network such as the Internet, a local area network (LAN), a wide area network (WAN), a virtual private network (VPN), etc. Communication could occur via a direct hardwired connection (e.g., serial port), or via an addressable connection that may utilize any combination of wireline and\/or wireless transmission methods. Moreover, conventional network connectivity, such as Token Ring, Ethernet, WiFi or other conventional communications standards could be used. Still yet, connectivity could be provided by conventional TCP\/IP sockets-based protocol. In this instance, an Internet service provider could be used to establish interconnectivity. Further, as indicated above, communication could occur in a client-server or server-server environment.","It should be appreciated that the teachings of the present invention could be offered as a business method on a subscription or fee basis. For example, a server  comprising a memory overload protection system  could be created, maintained and\/or deployed by a service provider that offers the functions described herein for customers.","It is understood that in addition to being implemented as a system and method, the features may be provided as a program product stored on a computer-readable medium, which when executed, enables server  to provide a memory overload protection system . To this extent, the computer-readable medium may include program code, which implements the processes and systems described herein. It is understood that the term \u201ccomputer-readable medium\u201d comprises one or more of any type of physical embodiment of the program code. In particular, the computer-readable medium can comprise program code embodied on one or more portable storage articles of manufacture (e.g., a compact disc, a magnetic disk, a tape, etc.), on one or more data storage portions of a computing device, such as memory  and\/or a storage system.","As used herein, it is understood that the terms \u201cprogram code\u201d and \u201ccomputer program code\u201d are synonymous and mean any expression, in any language, code or notation, of a set of instructions that cause a computing device having an information processing capability to perform a particular function either directly or after any combination of the following: (a) conversion to another language, code or notation; (b) reproduction in a different material form; and\/or (c) decompression. To this extent, program code can be embodied as one or more types of program products, such as an application\/software program, component software\/a library of functions, an operating system, a basic I\/O system\/driver for a particular computing and\/or I\/O device, and the like. Further, it is understood that terms such as \u201ccomponent\u201d and \u201csystem\u201d are synonymous as used herein and represent any combination of hardware and\/or software capable of performing some function(s).","The block diagrams in the figures illustrate the architecture, functionality, and operation of possible implementations of systems, methods and computer readable medium according to various embodiments of the present invention. In this regard, each block in the block diagrams may represent a module, segment, or portion of code, which comprises one or more executable instructions for implementing the specified logical function(s). It should also be noted that the functions noted in the blocks may occur out of the order noted in the figures. For example, two blocks shown in succession may, in fact, be executed substantially concurrently, or the blocks may sometimes be executed in the reverse order, depending upon the functionality involved. It will also be noted that each block of the block diagrams can be implemented by special purpose hardware-based systems which perform the specified functions or acts, or combinations of special purpose hardware and computer instructions.","As used herein, an element or step recited in the singular and proceeded with the word \u201ca\u201d or \u201can\u201d should be understood as not excluding plural elements or steps, unless such exclusion is explicitly stated. Furthermore, references to \u201cone embodiment\u201d of the present invention are not intended to be interpreted as excluding the existence of additional embodiments that also incorporate the recited features. Moreover, unless explicitly stated to the contrary, embodiments \u201ccomprising\u201d or \u201chaving\u201d an element or a plurality of elements having a particular property may include additional such elements not having that property.","Although specific embodiments have been illustrated and described herein, those of ordinary skill in the art appreciate that any arrangement which is calculated to achieve the same purpose may be substituted for the specific embodiments shown and that the invention has other applications in other environments. This application is intended to cover any adaptations or variations of the present invention. The following claims are in no way intended to limit the scope of the invention to the specific embodiments described herein."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The above and other objects, features and advantages of the invention will be better understood by reading the following more particular description of the invention in conjunction with the accompanying drawings.",{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 4"}]},"DETDESC":[{},{}]}
