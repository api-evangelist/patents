---
title: Document serialization and comparison via object model
abstract: Technologies are described herein for serializing in-memory objects of an application program for purposes of comparison. A request to serialize in-memory objects of an application program is received. A list of one or more objects, properties, or methods to be serialized is read from a serialization driver file and the one or more objects, properties, or methods in an object memory of the application program are accessed through an object model exposed by the application program. Values from the one or more objects, properties, or methods in the object memory are serialized and stored in a generic object container that facilitates comparison between the serialized values from the application program and corresponding values from other versions of the application program.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08732664&OS=08732664&RS=08732664
owner: Microsoft Corporation
number: 08732664
owner_city: Redmond
owner_country: US
publication_date: 20110517
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["A software development team testing two different versions of an application program often needs to compare application documents or in-memory objects manipulated by the application program in order to determine if processing of the documents or objects in a new version of the application is flawed or may have been inadvertently changed. It may be complicated and difficult to compare the application documents as saved to a file, for example, because changes in file format may have occurred between the versions, or the application documents as saved to storage may not have a specific order or form.","There also may not be a method for generically comparing the entire application document or any subsets of objects therein when the application documents are loaded by the program. Therefore, the development team may manually compare a single aspect or a subset of data in the application document related to the software changes that were made between the versions of the application program, instead of comparing the entire document structure while testing. However, other portions or data in the application document outside of the subset tested could potentially differ as a result of the software changes, and these differences may go undetected in the testing of new versions of the software. This may result in new bugs being introduced into the software product.","It is with respect to these considerations and others that the disclosure made herein is presented.","Technologies are described herein for serializing in-memory objects of an application program for purposes of comparison. Utilizing the technologies presented herein, a software development team may serialize the in-memory application documents or objects maintained by two different versions of an application program in order to detect differences in the objects that may result from differences in application processing between the two versions of the application. The differences between the in-memory objects of the two versions of the application program may further be logged in order to aid software developers in identifying and fixing potential software bugs.","According to embodiments, a request to serialize in-memory objects of an application program is received. A list of one or more objects, properties, or methods to be serialized is read from a serialization driver file and the one or more objects, properties, or methods in an object memory of the application program are accessed through an object model exposed by the application program. Values from the one or more objects, properties, or methods in the object memory are serialized and stored in a generic object container that facilitates comparison between the serialized values from the application program and corresponding values from other versions of the application program.","It should be appreciated that the above-described subject matter may be implemented as a computer-controlled apparatus, a computer process, a computing system, or as an article of manufacture such as a computer-readable medium. These and various other features will be apparent from a reading of the following Detailed Description and a review of the associated drawings.","This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter, nor is it intended that this Summary be used to limit the scope of the claimed subject matter. Furthermore, the claimed subject matter is not limited to implementations that solve any or all disadvantages noted in any part of this disclosure.","The following detailed description is directed to technologies for serializing in-memory objects of an application program for purposes of comparison. While the subject matter described herein is presented in the general context of program modules that execute in conjunction with the execution of an operating system and application programs on a computer system, those skilled in the art will recognize that other implementations may be performed in combination with other types of program modules. Generally, program modules include routines, programs, components, data structures, and other types of structures that perform particular tasks or implement particular abstract data types. Moreover, those skilled in the art will appreciate that the subject matter described herein may be practiced with other computer system configurations, including hand-held devices, multiprocessor systems, microprocessor-based or programmable consumer electronics, minicomputers, mainframe computers, and the like.","In the following detailed description, references are made to the accompanying drawings that form a part hereof and that show, by way of illustration, specific embodiments or examples. In the accompanying drawings, like numerals represent like elements through the several figures.",{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 1","b":["100","100","102","102","102"]},"According embodiments, the computer system  may execute application programs A, B (referred to herein generally as application programs ) for the purposes of testing the application software. The application programs  may be utilized by users to manipulate and store data in files or application documents. For example, the application programs  may include productivity applications, such as the MICROSOFT\u00ae POWERPOINT\u00ae presentation software, the MICROSOFT\u00ae EXCEL\u00ae spreadsheet software, the MICROSOFT\u00ae WORD word processing software, or the MICROSOFT\u00ae VISIO\u00ae diagramming software, all from Microsoft Corp. of Redmond, Wash.","According to embodiments, the computer system  may concurrently or consecutively execute multiple versions of a particular application program, such application program v A and application program v B. Each version of the application program  executing on the computer system  may load an application document  containing application data. Each application program  may further create an object memory  containing objects and other application data loaded from the application document . The application objects and other data contained in the object memory  may be subsequently modified or manipulated by processing within the application program . In one embodiment, a software developer or tester may execute the same series of scripted application processing steps in each version of the application program  executing on the computer system  once the application document  is loaded in order to test the processing logic of the application.","An object comparison module  also executes on the computer system  that provides services to the software developer or tester to compare in-memory objects maintained in each version of the application program A and B executing on the computer system. The software developer or tester may desire to compare the objects in the object memories  after loading the application document  and\/or executing the series of scripted application processing steps in order to determine if any differences exist in the in-memory objects arising from differences in the processing logic between the versions application programs A and B. The object comparison module  may execute locally on the computer system , or may execute on a server computer, such as a Web server, accessed by a client application executing on the computer system . The object comparison module  may be implemented as hardware, software, or a combination of the two. The object comparison module  may be an add-in or component of a software development or testing suite, for example, and may include a number of application program modules and other components on the computer system .","According to embodiments, the object comparison module  accesses the object memories  maintained in each version of the application program A and B executing on the computer system  and serializes application objects and other data contained therein. The serialized application objects and data are stored in generic object containers A, B (referred to herein generally as generic object containers ), as will be described in more detail below in regard to . For example, the object comparison module  may access the object memory  maintained in application program v A to serialize application objects and data contained therein and store them in generic object container A, and access the object memory  maintained in application program v B to serialize application objects and data contained therein and stored them in generic object container B. The object comparison module  may then compare the contents of generic object container A to generic object container B and inform the software developer or tester of any differences between the containers.","In one embodiment, the object comparison module  accesses the object memories  through an object model  or other defined application programming interface (\u201cAPI\u201d) exposed by the application programs . For example, in the case of the MICROSOFT\u00ae productivity applications described above, the object comparison module  may access the application objects and data in the object memories  through the Primary Interop Assembly (\u201cPIA\u201d) exposed by these applications. The PIA provides access to the application objects maintained in the application programs  as well as type definitions and other metadata describing the objects, properties, and methods of the object model .","The object comparison module  may use reflection to traverse the object hierarchy defined in the object model  and access the properties and methods of the application objects and serialize and store the results in the generic object containers A and B. It will be appreciated that the object comparison module  may utilize other object models  or APIs known in the art related to other application programs  or application suites to access the object memories  beyond those described herein. It is intended that this application include all such methods of accessing the application objects and data in the object memories  of the application programs .","According to another embodiment, the serialization of the application objects and data maintained in the object memories  of the application programs  by the object comparison module  is driven by a serialization driver file . The serialization driver file  may be an XML file or other declarative format document that describes which objects, properties, and methods of the object model  exposed by the application programs  are to be serialized and stored in the generic object containers . This allows software developers or testers to target the comparison process to a subset of the application objects and data maintained in the object memories. This may also allow the exclusion of objects, properties, or methods from the comparison process when it is known that these items are defined differently or inconsistently between the versions of the application program  being tested. The serialization driver file  may also drive the comparison process of the generic object containers  containing the serialized object data, as will be described in more detail below.",{"@attributes":{"id":"p-0023","num":"0022"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 1"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"XML snippet from serialization driver file"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<ComparisonType type=\u2018PowerPoint.PresentationClass\u2019>"]},{"entry":[{},"\u2003\u2003<Property name=\u2018SectionProperties\u2019 type="]},{"entry":[{},"\u2003\u2003\u2019.PowerPoint.SectionProperties\u2019 \/>"]},{"entry":[{},"\u2003\u2003<List name=\u2018Slides\u2019 type=\u2018PowerPoint.SlideClass\u2019 \/>"]},{"entry":[{},"<\/ComparisonType>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"Table 1 provides an example XML snippet from an illustrative serialization driver file . In this example, the ComparisonType element may define a specific type of object in the object model  that the object comparison module  is to serialize and\/or compare. The type attribute ComparisonType element may specify the fully-namespace-resolved type name from the object model , such as the \u2018PowerPoint.PresentationClass\u2019 shown in Table 1. The Property element may define a property that exists under the \u2018PowerPoint.PresentationClass\u2019 object that is also to be serialized and compared, such as the \u2018SectionProperties\u2019 property, along with a specification of the type \u2018PowerPoint.SectionProperties\u2019 that the property will return. Similarly, the List element further shown in Table 1 may define a collection of items in the PowerPoint.PresentationClass' object that is to be serialized and compared. The List element in the serialization driver file  may signal the object comparison module  to iterate over the collection of items to serialize and store each separately.","In another embodiment, the serialization driver file  may contain further information that affects the comparison process. For example, for a particular property defined in a Property element of the serialization driver file , a tolerance attribute may be specified that defines a range for comparison of the values of the property within which the property values may be considered the same. In a further embodiment, the object comparison module  or another module or component may provide for the serialization driver file  to be initially generated from the object model  of the application program , containing all the objects, properties, and methods defined therein, and then allow the driver file to be tweaked and adjusted by the software developers and or testers based on knowledge of the differences between the versions of the application programs being tested and other testing needs.","According to another embodiment, as the object comparison module  performs the comparison process between the generic object containers A and B generated from the object memories  of the respective versions of the application program A and B executing on the computer system , the object comparison module  logs the differences encountered between object containers in a comparison log . The comparison log  may contain identifiers of the objects, properties, and methods in the object model  exhibiting differences between the different versions of the application program , as well as the actual property values or method data returned for the respective versions. The comparison log  may provide the software developers or testers with information required to identify and correct software bugs introduced into new versions of the application program .",{"@attributes":{"id":"p-0027","num":"0026"},"figref":["FIG. 2","FIG. 2"],"b":["112","110","108","104","112","110","114","108","110","202","202","202","112","202","114","202"]},"Each ComparableObject object  may further contain a hash table A-E (referred to herein generally as hash table ) that contains key-value pairs containing the serialized data from the properties and\/or methods of the object being serialized. As described above, the object comparison module  may iterate through the properties and methods of a particular object exposed by the object model  and use reflection to invoke each of them. According to one embodiment, the objects, properties, and methods accessed by the object comparison module  is driven by the serialization driver file , as described above.","If the reflection call returns a primitive, such as an integer, string, enum, boolean, or the like, then the object comparison module  may save the primitive result into an entry in the hash table, with the key corresponding to the property or method name, and the value containing to the returned primitive. If the reflection call returns another object, the object comparison module  may create a new ComparableObject object  to contain the object data and store a pointer to the new ComparableObject in the hash table of the parent ComparableObject object. If the reflection call returns a collection of items, such as a \u2018PowerPoint.Slides\u2019 type shown in , the object comparison module  may create a ComparableList object  containing a hash table B containing pointers to a ComparableObject object B-D for each item, such as the \u2018PowerPoint.Slide\u2019 item, in the collection. The result is a hierarchy of ComparableObject objects  and ComparableList objects  that represent a serialized version of top level object \u2018PowerPoint.Presentation\u2019 from the object memory  as accessed by the object comparison module  through the object model .","Referring now to , additional details will be provided regarding the embodiments presented herein. It should be appreciated that the logical operations described with respect to  are implemented (1) as a sequence of computer implemented acts or program modules running on a computing system and\/or (2) as interconnected machine logic circuits or circuit modules within the computing system. The implementation is a matter of choice dependent on the performance and other requirements of the computing system. Accordingly, the logical operations described herein are referred to variously as operations, structural devices, acts, or modules. These operations, structural devices, acts, and modules may be implemented in software, in firmware, in special purpose digital logic, and any combination thereof. It should also be appreciated that more or fewer operations may be performed than shown in the figures and described herein. The operations may also be performed in a different order than described.",{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 3","b":["300","104","104","102","300","110","102","300"]},"The routine  begins at operation , where the object comparison module  receives a request to compare the in-memory objects of two executing application programs A and B on the computer system . The application programs A and B may be executing concurrently, or they may be executed at different times with individual requests to serialize the in-memory objects of each instance of the application program received by the object comparison module  separately. The executing application programs A and B may be specified to the object comparison module  by application handle, process ID, application image name, or some other mechanism known in the art. According to one embodiment, the application programs A and B may have both loaded the same application document  into the object memories . In addition, a software developer, tester, or automated testing software may have executed the same series of scripted application processing steps in each version of the application program A and B, thus modifying the respective object memories  from their initially loaded state. In a further embodiment, the request may include a specification of a serialization driver file  to drive the serialization and comparison process.","From operation , the routine  proceeds to operation , where the object comparison module  accesses the object model  exposed by the application programs A and B to serialize application objects in the object memories  of each version of the application program executing on the computer system . The object comparison module  may use reflection to traverse the object hierarchy defined in the object model  and access the properties and methods of the objects and serialize and store the results in the generic object containers A and B, respectively. According to one embodiment, the object comparison module  may read the serialization driver file  specified in the request to determine which objects, properties, and methods of the object model  exposed by the application programs A and B to serialize and store in the generic object containers A and B.","The routine  then proceeds from operation  to operation , where the object comparison module  compares the two generic object containers A and B created from the object memories  of application programs A and B, respectively. In one embodiment, the comparison process is facilitated by the specialized objects created in the generic object containers  that store the serialized data from the object memories . For example, the object comparison module  may perform a simple comparison of the top level ComparableObject objects A in the generic object containers A and B. The ComparableObject class may overload the comparison operator to implement a comparison process that traverses the hierarchies of ComparableObject objects  and ComparableList objects  stored in the generic object containers A and B in order to perform a one-to-one comparison of all corresponding property and method values stored in the hash tables .","According to another embodiment, the comparison process may be further driven by the serialization driver file . For example, for a particular property defined in a Property element of the serialization driver file , a tolerance attribute may be specified that defines a range for comparison of the values of the property within which the property values may be considered the same. The object comparison module  may utilize any tolerance attributes specified for the properties and\/or methods specified in the serialization driver file  to perform the comparisons and determine if differences exist.","From operation , the routine  proceeds to operation , where the object comparison module  generates the comparison log  listing all differences found between the in-memory objects of the executing application programs  and B, as described above in regard to . The comparison log  may contain identifiers of the objects, properties, and methods in the object model  exhibiting differences between the different versions of the application programs , as well as the actual property values or method data returned for the respective versions. The comparison log  may provide the software developers or testers with information required to identify and correct software bugs introduced into new versions of the application program . From operation , the routine  ends.",{"@attributes":{"id":"p-0037","num":"0036"},"figref":["FIG. 4","FIG. 4"],"b":["400","102"]},"The computer architecture shown in  includes one or more central processing units (\u201cCPUs\u201d) . The CPUs  may be standard processors that perform the arithmetic and logical operations necessary for the operation of the computer . The CPUs  perform the necessary operations by transitioning from one discrete, physical state to the next through the manipulation of switching elements that differentiating between and change these states. Switching elements may generally include electronic circuits that maintain one of two binary states, such as flip-flops, and electronic circuits that provide an output state based on the logical combination of the states of one or more other switching elements, such as logic gates. These basic switching elements may be combined to create more complex logic circuits, including registers, adders-subtractors, arithmetic logic units, floating-point units, and other logic elements.","The computer architecture further includes a system memory , including a random access memory (\u201cRAM\u201d)  and a read-only memory  (\u201cROM\u201d), and a system bus  that couples the memory to the CPUs . A basic input\/output system containing the basic routines that help to transfer information between elements within the computer , such as during startup, is stored in the ROM . The computer  also includes a mass storage device  for storing an operating system , application programs, and other program modules, which are described in greater detail herein.","The mass storage device  is connected to the CPUs  through a mass storage controller (not shown) connected to the bus . The mass storage device  provides non-volatile storage for the computer . The computer  may store information on the mass storage device  by transforming the physical state of the device to reflect the information being stored. The specific transformation of physical state may depend on various factors, in different implementations of this description. Examples of such factors may include, but are not limited to, the technology used to implement the mass storage device, whether the mass storage device is characterized as primary or secondary storage, and the like.","For example, the computer  may store information to the mass storage device  by issuing instructions to the mass storage controller to alter the magnetic characteristics of a particular location within a magnetic disk drive, the reflective or refractive characteristics of a particular location in an optical storage device, or the electrical characteristics of a particular capacitor, transistor, or other discrete component in a solid-state storage device. Other transformations of physical media are possible without departing from the scope and spirit of the present description. The computer  may further read information from the mass storage device  by detecting the physical states or characteristics of one or more particular locations within the mass storage device.","As mentioned briefly above, a number of program modules and data files may be stored in the mass storage device  and RAM  of the computer , including an operating system  suitable for controlling the operation of a computer. The mass storage device  and RAM  may also store one or more program modules. In particular, the mass storage device  and the RAM  may store the object comparison module  or the application program(s) , both of which were described in detail above in regard to . The mass storage device  and the RAM  may also store other types of program modules or data.","In addition to the mass storage device  described above, the computer  may have access to other computer-readable media to store and retrieve information, such as program modules, data structures, or other data. It should be appreciated by those skilled in the art that computer-readable media may be any available media that can be accessed by the computer , including computer-readable storage media and communications media. Communications media includes transitory signals. Computer-readable storage media includes volatile and non-volatile, removable and non-removable media implemented in any method or technology for the storage of information, such as computer-readable instructions, data structures, program modules, or other data. For example, computer-readable storage media includes, but is not limited to, RAM, ROM, EPROM, EEPROM, flash memory or other solid state memory technology, CD-ROM, digital versatile disks (DVD), HD-DVD, BLU-RAY, or other optical storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other medium that can be used to store the desired information and that can be accessed by the computer .","The computer-readable storage medium may be encoded with computer-executable instructions that, when loaded into the computer , may transform the computer system from a general-purpose computing system into a special-purpose computer capable of implementing the embodiments described herein. The computer-executable instructions may be encoded on the computer-readable storage medium by altering the electrical, optical, magnetic, or other physical characteristics of particular locations within the media. These computer-executable instructions transform the computer  by specifying how the CPUs  transition between states, as described above. According to one embodiment, the computer  may have access to computer-readable storage media storing computer-executable instructions that, when executed by the computer, perform the routine  for serializing in-memory objects of an application program for purposes of comparison, described above in regard to .","According to various embodiments, the computer  may operate in a networked environment using logical connections to remote computing devices and computer systems through a network , such as a LAN, a WAN, the Internet, or a network of any topology known in the art. The computer  may connect to the network  through a network interface unit  connected to the bus . It should be appreciated that the network interface unit  may also be utilized to connect to other types of networks and remote computer systems.","The computer  may also include an input\/output controller  for receiving and processing input from a number of input devices, including a keyboard, a mouse, a touchpad, a touch screen, an electronic stylus, or other type of input device. Similarly, the input\/output controller  may provide output to a display device, such as a computer monitor, a flat-panel display, a digital projector, a printer, a plotter, or other type of output device. It will be appreciated that the computer  may not include all of the components shown in , may include other components that are not explicitly shown in , or may utilize an architecture completely different than that shown in .","Based on the foregoing, it should be appreciated that technologies for serializing in-memory objects of an application program for purposes of comparison are provided herein. Although the subject matter presented herein has been described in language specific to computer structural features, methodological acts, and computer-readable storage media, it is to be understood that the invention defined in the appended claims is not necessarily limited to the specific features, acts, or media described herein. Rather, the specific features, acts, and mediums are disclosed as example forms of implementing the claims.","The subject matter described above is provided by way of illustration only and should not be construed as limiting. Various modifications and changes may be made to the subject matter described herein without following the example embodiments and applications illustrated and described, and without departing from the true spirit and scope of the present invention, which is set forth in the following claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 4"}]},"DETDESC":[{},{}]}
