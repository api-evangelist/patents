---
title: Common handler framework
abstract: A common handler framework can allow handlers for multiple different types of web services programming models to be used in a single handler chain.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08024746&OS=08024746&RS=08024746
owner: Oracle International Corporation
number: 08024746
owner_city: Redwood Shores
owner_country: US
publication_date: 20071207
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CLAIM OF PRIORITY","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["This application claims priority to U.S. Provisional Application No. 60\/985,925 entitled \u201cCOMMON HANDLER FRAMEWORK\u201d by Ryan Eberhard, filed Nov. 6, 2007 which is hereby incorporated by reference.","Specifications such as JAX-WS specify the use of handler chains with web services. The handlers of the hander chain operate on web service messages.","The JAX-WS programming model is independent from and can be incompatible with the JAX-RPC programming model.","Embodiments of the present invention use a common handler framework to allow multiple different types of web service programming model handlers to be used concurrently.","In one example, handlers for both JAX-WS and JAX-RPC can be used in a single handler chain.",{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 1","b":["102","104"]},"In , the handler chain  includes native handlers  and  using a first web service programming model and a foreign handler  written in a second web servicing programming model. In one example, the handlers can include both JAX-WS and JAX-RPC handlers.","The common handler framework  can provide data to the foreign handler  in a format native to the web services programming model of the foreign handler . In one embodiment, the common handler framework  provides for a wrapper  over a foreign handler  to implement this functionality.","Some of the handlers can be provided by a middleware environment. These handlers can include security handler, a reliable messaging handler and a transaction handler. Other handlers can be provided by a web service application running on the middleware environment.",{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 1"},"Handlers can implement value-added services, such as security, reliable messaging, transactions, adding additional data, etc. Handlers can be configured by meta-data.","The Common Handler Framework  can know the execution environment (e.g. JAX-WS) and therefore knows if a handler is native (i.e. also JAX-WS in this case) or if a handler is foreign. Foreign handlers can be wrapped to allow them to appear as native to other handlers and to the execution environment. Likewise, the wrapping of the foreign handler can allow the execution environment and the other handlers to appear as if they were the same model (e.g. JAX-RPC).","Translation and simulation techniques can cover a handler's view of configuration and request\/response paradigms.","The following shows examples of the programming interfaces and configuration files that may be used to configure the tubeline including a handler chain for a JAX-WS 2.1 RI-based client or service and the configuration of the common handler framework (CHF) simulation layer that allows JAX-RPC-based handlers to run within JAX-WS.","A JAX-RPC handler simulation layer, such as that produced by a common handler framework, can allow pre-existing JAX-RPC handlers for the WS-* implementations to run within the JAX-WS environment. Web Services Interoperability Technologies (WSIT) implementations lack important enterprise-class features and can require significant work to integrate with existing application server configuration models. For instance, the WSIT WS-Security and WS-Policy implementations use a WSIT proprietary file for configuring policy rather than supporting a plug-point to integrate annotation and MBean support. Also, the WS-SC implementation contains no conversation storage or clustering features or plug-points that can be used to integrate these features.","The JAX-RPC simulation layer can be sufficiently rich so that pre-existing deployment listeners, such as WsDeploymentListener, can run to add handlers to what they believe is a JAX-RPC handler chain, but which will actually construct a JAX-WS tubeline. At runtime, the simulation layer can invoke the hosted JAX-RPC handlers providing access to handler chain flow-control and message context, such as WlMessageContext.","Since the JAX-WS RI does not provide a rich tubeline assembler model (currently, support is only for taking full control of tubeline generation or for overriding a small set of known tubes), this specification can define such a model. The tubeline assembler model defined here can allow native JAX-WS tubes to co-exist with CHF hosted handlers, while allowing for the configuration from both code and meta-data.","Application Servers, such as Web Logic Server (WLS), can provide a stand-alone client jar for JAX-RPC. In one embodiment, however, the classes in the jar are only sufficiently rich to provide unsecured (no WS-Security) access to services. In order to use WS-Security from a stand-alone client, customers can use the full archive, such as weblogic.jar, in the classpath.","Tubeline deployment can provide a mechanism to control tubeline assembly at deploy time. One implementation can provide at least two uses of this feature: a) deployment of \u201cstandard\u201d tubes, including WS-Addressing support and MU (must understand) handling, and b) deployment of tubes in support of JAX-RPC handler environment simulation.","Layered products can be able to use this functionality. Configuration can be by either code (service finder) or meta-data document.","The JAX-RPC Handler Environment Simulation can provide a simulation environment for JAX-RPC handlers and Application Server deployment listeners.","The JAX-RPC handler environment simulation functionality can allow pre-existing JAX-RPC handler implementations to be run under the JAX-WS 2.1 RI environment. The primary goal is to provide supportable WS-* implementations for JAX-WS as quickly as possible.","Since there is significant handler-related code that is executed at deploy-time in order to select handlers for inclusion on the handler chain and to order handlers, the simulation environment can also support an environment for running pre-existing WsDeploymentListener implementations.","However, not every pre-existing Handler or WsDeploymentListener for JAX-RPC is appropriate for the JAX-WS environment. This is because many of the JAX-RPC handlers implement functionality that is built-in to the JAX-WS RI (e.g. OperationLookupHandler or CodecHandler). Therefore, the environment simulation functionality can allow for the configuration of specific WsDeploymentListener implementations or handlers that will be deployed under JAX-WS, rather than rely on existing code in WsBuilder.","As much as is possible and as is required to support the selected JAX-RPC handlers, the simulation environment can provide a replica of the standard JAX-RPC environment.","JAX-RPC handler environment simulation functionality can support a deploy-time environment for pre-existing WsDeploymentListener implementations. Application Server or layered-products can configure which WsDeploymentListener implementations will be enabled for the JAX-WS environment as it is known that not all pre-existing handlers are appropriate.","When the process( ) method of a WsDeploymentListener instance is invoked, the parameter WsDeploymentContext can be fully functional and, in particular, deployment listeners can be able to access the handler list through context.getWsService( ).getPorts( ).next( ).getInternalHandlerList( ).","When the handler list is presented to the first deployment listener, it can be pre-populated with a selected set of HandlerInfo values, as defined below, in order to assist WsDeploymentListener implementations that use these values to assist with ordering and handler insertion. These pseudo HandlerInfo values need not to correspond to actual tubes on the tubeline or JAX-RPC handlers run in simulation.","If other TubelineDeploymentListener or WsDeploymentListener implementations have run ahead of the current WsDeploymentListener, then the handler list can reflect the management operations performed by those listeners. The name of any HandlerInfo in the list can reflect the name of the associated TubelineAssemblerItem.","To configure the processing of a WsDeploymentListener implementation using code, the following can be done:\n\n","If adding META-INF\/services\/weblogic.wsee.jaxws.tubeline.TubelineDeploymentListener to a web service WAR file, be sure to add the file under WEB-INF\/classes\/META-INF\/services\/ . . .","To configure the processing of a WsDeploymentListener implementation or to directly add a Handler to the tubeline using a meta-data file, one can do the following:\n\n","If adding META-INF\/tube-config.xml to a web service WAR file, be sure to add the file under WEB-INF\/classes\/META-INF\/.",{"@attributes":{"id":"p-0045","num":"0049"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Initial client HandlerInfo values"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"HandlerNames.CODEC_HANDLER"]},{"entry":[{},"HandlerNames.ADDRESSING_HANDLER"]},{"entry":[{},"HandlerNames.MIMEHEADER_HANDLER"]},{"entry":[{},"HandlerNames.ASYNC_HANDLER"]},{"entry":[{},"HandlerNames.CONNECTION_HANDLER"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"HandlerInfo values that represent TubelineAssemblerItems added by other TubelineDeploymentListener implementations will appear between HandlerNames.MIMEHEADER_HANDLER and HandlerNames.ASYNC_HANDLER, unless those TubelineAssemblerItems have ordering requirements.",{"@attributes":{"id":"p-0047","num":"0051"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Initial server HandlerInfo values"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"HandlerNames.MESSAGE_CONTEXT_INIT_HANDLER"]},{"entry":[{},"HandlerNames.CONNECTION_HANDLER"]},{"entry":[{},"HandlerNames.VERSION_REDIRECT_HANDLER"]},{"entry":[{},"HandlerNames.DIRECT_INVOKE_HANDLER"]},{"entry":[{},"HandlerNames.ADDRESSING_HANDLER"]},{"entry":[{},"HandlerNames.OPERATION_LOOKUP_HANDLER"]},{"entry":[{},"HandlerNames.ONE_WAY_HANDLER"]},{"entry":[{},"HandlerNames.PRE_INVOKE_HANDLER"]},{"entry":[{},"HandlerNames.CODEC_HANDLER"]},{"entry":[{},"HandlerNames.AUTHORIZATION_HANDLER"]},{"entry":[{},"HandlerNames.COMPONENT_HANDLER"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"HandlerInfo values that represent TubelineAssemblerItems added by other TubelineDeploymentListener implementations will appear between HandlerNames.AUTHORIZATION_HANDLER and HandlerNames.COMPONENT_HANDLER, unless those TubelineAssemblerItems have ordering requirements.","JAX-RPC handler environment simulation functionality can support a runtime environment for Hosted handler implementations. To do this, the simulation can correctly process exceptions and return values from Handler methods and Handlers can be able to cast the parameter MessageContext as WlMessageContext and access all methods and properties, except as noted.","Additionally, the properties available on the message context can be seeded. These properties can come from mandates in the JAX-RPC 1.1 specification or from Handlers run earlier in the handler chain.",{"@attributes":{"id":"p-0051","num":"0055"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Property Conversion"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"133pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["MessageContext property name","JAX-WS MessageContext property name"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Stub.USERNAME_PROPERTY","javax.xml.ws.security.auth.username"]},{"entry":["Stub.PASSWORD_PROPERTY","javax.xml.ws.security.auth.password"]},{"entry":["Stub.ENDPOINT_ADDRESS_PROPERTY","javax.xml.ws.service.endpoint.address"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"Simulated Handlers","The following handlers will not be run under JAX-WS; however, other handlers that will run on JAX-WS make references to values that these handlers add to the MessageContext. Therefore, the environment simulation can provide the following MessageContext properties for hosted Handlers.","MessageContextInitHandler","The MessageContextInitHandler can be simulated on the server-side only. During deployment of JAX-WS services, the WebLogic deployment sub-system can make the DeployInfo available, which we persist as part of the Container SPI (WLSContainer).",{"@attributes":{"id":"p-0056","num":"0060"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"133pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["MessageContext property name","Source"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["WlMessageContext.CONTEXT_PATH","DeployInfo info: info.getContextPath( )"]},{"entry":["WlMessageContext.SECURITY_REALM","DeployInfo info:"]},{"entry":[{},"info.getSecurityRealmName( )"]},{"entry":["WlMessageContext.APPLICATION_ID","DeployInfo info: info.getApplication( )"]},{"entry":["WlMessageContext.STREAM_ATTACHMENTS","DeployInfo info:"]},{"entry":[{},"Boolean.valueOf(info.getWlPortComp( ).get"]},{"entry":[{},"StreamAttachments( ))"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"In one embodiment, the OperationLookupHandler is simulated on the server-side only.",{"@attributes":{"id":"p-0058","num":"0062"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["MessageContext property name","Source"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["OperationLookupHandler.OPERATION_NAME_PROPERTY","packet.getMessage( ).getOperation(wsdlPort).getName( )"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"In one embodiment, on the client-side only, handlers can need access to the cross-invocation properties of the client that are used to seed future messages.",{"@attributes":{"id":"p-0060","num":"0064"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"119pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["MessageContext property name","Source"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["WLStub.INVOCATION_PROPERTIES","packet.proxy.getRequestContext( )"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},{"@attributes":{"id":"p-0061","num":"0065"},"tables":{"@attributes":{"id":"TABLE-US-00007","num":"00007"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"center"}},"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Exceptions"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"126pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Handler throws . . .","Re-thrown by JAX-WS Tube as . . ."]},{"entry":["javax.xml.rpc.soap.SOAPFaultException","javax.xml.ws.soap.SOAPFaultException"]},{"entry":["javax.xml.rpc.JAXRPCException","javax.xml.ws.WebServiceException"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"The header can understand processing.","If a handler hosted in the simulated environment supports GenericHandler.getHeaders( ), which returns QNames for headers understood by this handler, then JAX-RPC handler environment simulation will mark matching headers on inbound messages as understood so that the standard MU tubes operate correctly.","Where JAX-RPC clients used code like this:","Stub stub=(Stub) port;","stub._setProperty(name, value);",". . . JAX-WS clients can use:","((BindingProvider)port).getRequestContext( ).put(name, value);","The JAX-WS RI supplies tubes that implement WS-Addressing for the client and server. The Application Server support for JAX-WS can use these tubes rather than running the pre-existing JAX-RPC addressing handlers in the simulation environment. For general support of WS-Addressing, this can be sufficient. However, certain pre-existing JAX-RPC handlers (most notably the WS-RM handlers) rely on message context properties set by the JAX-RPC addressing handlers.","These message context properties can be populated into the simulated context.","Performance should not be impacted for use cases not using hosted Handlers.","Performance under JAX-WS with WS-Policy and WSS enabled is comparable with JAX-WS without security as JAX-RPC with security is with JAX-RPC without security (i.e. ratios should be consistent).","The Common Handler Framework functionality can depend and make requirements on the Application Server support for JAX-WS 2.1.","The JAX-WS RI can be packaged in the following modules:\n\n","The WebLogic WSEE module is packaged in the following module:\n\n","JDK 6.0 currently contains an older version of the JAX-WS RI (version 2.0.1). This can cause incompatibilities with our version of the JAX-WS RI, which is a modification on version 2.1.1. The Glassfish JAX-WS RI jars can be staged in the endorsed directory of the JDK.","The JAX-RPC stack can support a set of classes for programmatic dispatch including, most importantly, weblogic.wsee.jaxrpc.SoapDispatch.","Callers wishing to do internal invocations based on an endpoint can use the JAX-WS API's.","The schema for the tubeline deployment meta-data configuration file, META-INF\/tube-config.xml, can be as follows:",{"@attributes":{"id":"p-0079","num":"0092"},"tables":{"@attributes":{"id":"TABLE-US-00008","num":"00008"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<?xml version=\u201c1.0\u201d?>"},{"entry":"<xsd:schema xmlns:xsd=\u201chttp:\/\/www.w3.org\/2001\/XMLSchema\u201d"},{"entry":"targetNamespace=\u201chttp:\/\/www.bea.com\/weblogic\/wsee\/jaxws\/framework\/"},{"entry":"jaxrpc\/tube-config\u201d"},{"entry":"\u2002xmlns=\u201chttp:\/\/www.bea.com\/weblogic\/wsee\/jaxws\/framework\/jaxrpc\/"},{"entry":"tube-config\u201d"},{"entry":"elementFormDefault=\u201cqualified\u201d>"},{"entry":"\u2003<xsd:complexType name=\u201clist\u201d>"},{"entry":"\u2003\u2003<xsd:sequence>"},{"entry":"\u2003\u2003\u2003<xsd:element name=\u201citem\u201d type=\u201cxsd:string\u201d minOccurs=\u201c1\u201d"},{"entry":"maxOccurs=\u201cunbounded\u201d\/>"},{"entry":"\u2003\u2003<\/xsd:sequence>"},{"entry":"\u2003<\/xsd:complexType>"},{"entry":"\u2003<xsd:complexType name=\u201cassembler-item\u201d>"},{"entry":"\u2003\u2003<xsd:sequence>"},{"entry":"\u2003\u2003\u2003<xsd:element name=\u201cafter\u201d type=\u201clist\u201d minOccurs=\u201c0\u201d\/>"},{"entry":"\u2003\u2003\u2003<xsd:element name=\u201cbefore\u201d type=\u201clist\u201d minOccurs=\u201c0\u201d\/>"},{"entry":"\u2003\u2003\u2003<xsd:element name=\u201crequired\u201d type=\u201clist\u201d minOccurs=\u201c0\u201d\/>"},{"entry":"\u2003\u2003<\/xsd:sequence>"},{"entry":"\u2003\u2003<xsd:attribute name=\u201cclass\u201d type=\u201cxsd:string\u201d use=\u201crequired\u201d\/>"},{"entry":"\u2003\u2003<xsd:attribute name=\u201cname\u201d type=\u201cxsd:string\u201d use=\u201coptional\u201d\/>"},{"entry":"\u2003<\/xsd:complexType>"},{"entry":"\u2003<xsd:complexType name=\u201clistener\u201d>"},{"entry":"\u2003\u2003<xsd:attribute name=\u201cclass\u201d type=\u201cxsd:string\u201d use=\u201crequired\u201d\/>"},{"entry":"\u2003<\/xsd:complexType>"},{"entry":"\u2003<xsd:complexType name=\u201clisteners\u201d>"},{"entry":"\u2003\u2003<xsd:sequence>"},{"entry":"\u2003\u2003\u2003<xsd:element name=\u201clistener\u201d type=\u201clistener\u201d minOccurs=\u201c0\u201d"},{"entry":"maxOccurs=\u201cunbounded\u201d\/>"},{"entry":"\u2003\u2003\u2003<xsd:element name=\u201cassembler-item\u201d type=\u201cassembler-item\u201d"},{"entry":"minOccurs=\u201c0\u201d maxOccurs=\u201cunbounded\u201d\/>"},{"entry":"\u2003\u2003<\/xsd:sequence>"},{"entry":"\u2003<\/xsd:complexType>"},{"entry":"\u2003<xsd:complexType name=\u201cdeployment-listeners\u201d>"},{"entry":"\u2003\u2003<xsd:sequence>"},{"entry":"\u2003\u2003\u2003<xsd:element name=\u201cclient\u201d type=\u201clisteners\u201d minOccurs=\u201c0\u201d\/>"},{"entry":"\u2003\u2003\u2003<xsd:element name=\u201cserver\u201d type=\u201clisteners\u201d minOccurs=\u201c0\u201d\/>"},{"entry":"\u2003\u2003<\/xsd:sequence>"},{"entry":"\u2003<\/xsd:complexType>"},{"entry":"\u2003<xsd:element name=\u201cconfig\u201d>"},{"entry":"\u2003\u2003<xsd:complexType>"},{"entry":"\u2003\u2003\u2003<xsd:sequence>"},{"entry":"\u2003\u2003\u2003\u2003<xsd:element name=\u201cdeployment-listeners\u201d"},{"entry":"type=\u201cdeployment-listeners\u201d\/>"},{"entry":"\u2003\u2003\u2003<\/xsd:sequence>"},{"entry":"\u2003\u2003<\/xsd:complexType>"},{"entry":"\u2003<\/xsd:element>"},{"entry":"<\/xsd:schema>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"JAX-RPC 1.1 defines interfaces for SOAP-based message handlers that are configurable per endpoint (client or server) and that may validate or modify the SOAP message. Containers are specifically allowed by the specification to define proprietary handler API's for other purposes (e.g. stream based processing); however, application servers, such as WebLogic server, can use the same interfaces for internally developed handlers and those defined by customers.","In one embodiment, application servers can manage internal and user-developed handlers separately. In one embodiment, internal handlers can be managed through a handler list hardcoded in WsBuilder and through a set of deployment listeners that add additional headers (e.g. security). Deployment listeners are configured through a configuration file that can be modified by layered products, but not by customers. User-developed handlers can be configured through standard annotations, configuration files, or MBeans. The internal handler set can include a handler that is responsible for invoking the user-developed handler list.","Handler classes can specify a default constructor because instances are instantiated using reflection.","JAX-RPC 1.1 implementations can include an implementation of HandlerChain, which is responsible for invoking registered handlers. The HandlerChain may use invocation policy to decide in what order to invoke handlers, but the default invocation policy is to invoke handlers in the order of registration. Response and fault processing need never invoked for one-way methods. In one embodiment, support the default invocation policy, but deployment listeners can contain complex code to sort handlers during the registration process.","SOAPMessageContext can provide handler methods access to the SOAP message as a javax.xml.soap.SOAPMessage instance.","Instance Creation and State Management can be created via reflections and will be initialized using init( ) method.","In one embodiment, instances are not considered to be re-entrant, but may be pooled for reuse.","Request and response related state can be stored in the properties of the MessageContext (super interface of SOAPMessageContext). JAX-RPC 1.1 can define a small number of standard properties; however, many MessageContext properties, used by the existing WebLogic handlers, can be proprietary.","Handler instances should not rely on thread-local state to share state between handler instances.","JAX-WS 2.1 also defines interfaces for a handler model, including SOAP-based protocol handlers that can inspect and modify the SOAP message in a similar fashion to JAX-RPC SOAP message handlers.","Implementations, like the Glassfish JAX-WS RI, are also free to define proprietary handler models as long as they support the standard model. The JAX-WS RI defines a proprietary Pipe\/Tube model, including providing an implementation for a Tube that invokes the JAX-WS registered handlers. Handlers may be registered using standard annotations and configuration files or by defining an implementation of HandlerResolver.","Instances can be created using reflection and thus require a no-argument constructor. Handlers may register for dependency injection using javax.annotation.Resource annotation. Handlers may also register for post-injection initialization using javax.annotation.PostConstruct.","Once this initialization is done, the handler instance can be ready for use. Prior to destroying the handler instance, the method registered using the javax.annotation.PreDestroy annotation will be called, but this is not guaranteed per specification.","Request and response state can be stored in the invocation properties of the MessageContext (SOAPMessageContext for SOAPHandlers), which can be conceptually very similar to the JAX-RPC model. However, the JAX-WS standard invocation properties names are not the same as for JAX-RPC.","Handler instances should not rely on thread-local state to share state between handler instances.","The JAX-WS RI defines a proprietary set of APIs for internal handlers that include Pipes and Tubes, which are effectively \u201cPipes 2.0\u201d.","In the Pipe model, an ordered set of Pipes is defined for each endpoint at deployment time. Each Pipe in the \u201cpipeline\u201d is aware of the next pipe in the chain. Pipeline building is configured through a PipelineAssembler. The JAX-WS RI contains a default implementation, StandalonePipeAssempler, and allows for the implementation of the PipelineAssembler to be overridden.","The StandalonePipeAssembler can build a pipeline that contains a small number of required and\/or well-known pipes through callbacks to a pipeline hook (ClientPipelineHook\/ServerPipelineHook). These callbacks can include createClientMUPipe( ), createHandlerPipe( ), createSecurityPipe( ), createTransportPipe( ), etc. Environments can override the creation of the pipeline hook as a way to control the creation of one of these well-known pipes without having to take over general pipeline creation.","The main runtime method for Pipes is \u201cPacket process(Packet)\u201d where the parameter Packet represents the request state and the return value will specify the response state. In the normal success use-case, Pipe implementations are expected to call process on the next pipe in the chain (after modifying the Packet or contained Message, if necessary) and then inspect or modify the return-value Packet before returning from its own process method.","While this is a simple programming model, it does mean that an individual thread is blocked on the transport at the client for every concurrent two-way request. This tie between threads and request\/response state was the technical issue that drove the creation of Tubes in the JAX-WS RI 2.1.","The Tube model is also built on an ordered set of Tubes for each endpoint that is defined at deployment time. The configuration for Tubes is analogous to that of Pipes (TubelineAssemler, StandaloneTubeAssembler, etc.), with the exception of the pipeline hook which does not have a Tube analog. The only way to override \u201ctubeline\u201d creation is to provide an implementation of TubelineAssembler; however, a custom implementation can override or delegate to StandaloneTubeAssembler.","Rather than having a single process( ) method, as for Pipes, Tubes have separate methods for processRequest( ) and processResponse( ). Also, while Tubes are expected to know the next Tube in the tubeline, each Tube does not directly invoke the next Tube. Instead, processRequest( ) and processResponse( ) return an object that indicates the desired \u201cnext action\u201d (NextAction). Then, an internal controller invokes the next Tube and this invocation could be on a different thread or after a delay (e.g. server-side is waiting for the completion of an asynchronous service invocation and will now send response to client).","The JAX-WS RI 2.1 provides Tube implementations for all of the standard handlers (e.g. WS-A, MU) for which it earlier had Pipes. It also support mixed Pipes and Tubes in the same chain. The internal controller automatically adapts for Pipes with the caveat that as soon as a Pipe is detected in the chain all further invocations will be synchronous and on the same thread using the rules for Pipes.","Globally, the JAX-WS RI supports the services model (i.e. META-INF\/services) to allow environments to plug-in different implementations for well-known interfaces (see ServiceFinder).","On both the client and server, we can use the services model to override \u201ctubeline\u201d creation by specifying an implementation using: META INF\/services\/com.sun.xml.ws.api.pipe.TubelineAssemblerFactory","In a custom TubelineAssembler (created by the registered Factory), we can create tubelines that include JAX-WS RI standard tubes, WSIT pipes, and\/or wrapped versions of our current JAX-RPC handlers, as desired. Additionally, on the server-side only, environments such as WebLogic can override the TubelineAssemblerFactory using a Container (com.sun.xml.ws.api.server.Container.getSPI(TubelineAssemblerFactory.class)) implementation. When a Container is present, the Container is queried for a TubelineAssemblerFactory before the services model is used.","Controlling tubeline assembly at deployment time can be a pre-requisite for JAX-RPC handler environment simulation.","Out of the box, the JAX-WS RI 2.1 supplies only the ability to add a small number of \u201cwell known\u201d tubes to the tubeline (e.g. addressing support) or to take over full control for tubeline generation.","The functionality described in this section begins with the design assumption that the implementation will take over full control of tubeline generation and then provide support for aggregating tubeline items from many sources (standard tubes, CHF support, WSIT, layered products, etc.), ordering and validating the items in the tubeline, and finally building the tubeline.","Tubeline deployment functionality can support accepting tubeline items from a variety of sources, including:\n\n","This functionality can utilize the standard class loader resource and service finder (i.e. META-INF\/services) paradigms. In one embodiment on the service, the class loader of the service implementation class can be used. On the client, the class loader of the client delegate can be used. Configuration sources need not be dependent on the order in which they are processed.","In one embodiment, Tubeline deployment functionality allows tube items to specify ordering requirements (i.e. tubes that go before or after the current item) and requirements for related tubes that can be present in the final tubeline. Implementations that add tube items are not be required to provide their own tubeline sorting or validation. Ordering requirements and related tube requirements can be kept separate. Specifically, ordering requirements will not imply existence requirements.","On the client, tube line items can specify a requirement to be after the \u201cclient\u201d or before the \u201cconnection\u201d using these literal constants to force ordering to move the generated tubes nearer to the tubeline end at the client or connection, respectively. Tube line items specifying after \u201cclient\u201d can appear ahead of any other tube line item that does not also specify that it is after \u201cclient\u201d. Similarly, tube line items specifying before \u201cconnection\u201d can be ordered after all other items that do not also specify before \u201cconnection\u201d. Configuring before \u201cclient\u201d or after \u201cconnection\u201d can generate a deployment-time exception. Configuring impossible ordering relationships with tubeline items that do not specify after \u201cclient\u201d or before \u201cconnection\u201d can also generate an error.","On the server, tube line items can specify a requirement to be after the \u201cconnection\u201d or before the \u201cinvoker\u201d using these literal constants to force ordering to move the generated tubes nearer to the tubeline end at the connection or invoker, respectively. Tube line items specifying after \u201cconnection\u201d can appear ahead of any other tube line item that does not also specify that it is after \u201cconnection\u201d. Similarly, tube line items specifying before \u201cinvoker\u201d can be ordered after all other items that do not also specify before \u201cinvoker\u201d. Configuring before \u201cconnection\u201d or after \u201cinvoker\u201d will generate a deployment-time exception. Configuring impossible ordering relationships with tubeline items that do not specify after \u201cconnection\u201d or before \u201cinvoker\u201d can also generate an error.","Tubeline deployment functionality must support tubes mix-and-matched from various sources or technologies, including:\n\n","Tubeline deployment functionality can support configuration of tube items using an XML-based meta-data file, named META-INF\/tube-config.xml. If multiple files are available via the class loader resource handler, they can all be processed. The meta-data file schema can support separate configuration of client and service tubeline items and support for either referencing deployment listeners or individual tubeline items, including support for all ordering, tube reference, and mix-and-match requirements listed above.","Tubeline deployment functionality can generate tubeline items for standard tubes.",{"@attributes":{"id":"p-0117","num":"0136"},"tables":{"@attributes":{"id":"TABLE-US-00009","num":"00009"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Client tubeline items"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"84pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Tubeline",{},{}]},{"entry":["Item Name","Tube source","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["\u201cdump\u201d","context.createDumpTube","Debug dump tube"]},{"entry":["\u201cwsa\u201d","context.createWsaTube","WS-A tube"]},{"entry":["\u201cmu\u201d","context.createClientMUTube","Client \u201cMust Understand\u201d"]},{"entry":[{},{},"processing"]},{"entry":["\u201chandler\u201d","context.createHandlerTube","JAX-WS handler tube"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"Tubeline items need not specify service values. Tubeline items can specify that they should appear after \u201cclient\u201d and will be ordered as in the table, top to bottom.",{"@attributes":{"id":"p-0119","num":"0138"},"tables":{"@attributes":{"id":"TABLE-US-00010","num":"00010"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Server tubeline items"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"84pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Tubeline",{},{}]},{"entry":["Item Name","Tube source","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["\u201chandler\u201d","context.createHandlerTube","JAX-WS handler tube"]},{"entry":["\u201cmonitoring\u201d","context.createMonitoringTube","WLS monitoring tube (e.g."]},{"entry":[{},{},"diagnostics support)"]},{"entry":["\u201cmu\u201d","context.createServerMUTube","Server \u201cMust Understand\u201d"]},{"entry":[{},{},"processing"]},{"entry":["\u201cwsa\u201d","context.createWsaTube","WS-A tube"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"Tubeline items need not specify service values. Tubeline items can specify that they should appear before \u201cinvoker\u201d and will be ordered as in the table, top to bottom.","JAX-WS can provide a service programming model where the service implementation is passed a Source, DataSource, or SOAPMessage representing the message payload or, optionally, just the SOAP message body. This model can be used to implement dynamic web services or can be used simply when the application wishes to not use JAXB marshalling.","Tubeline deployment functionality must generate tubeline items for provider-based services in exactly the same manner as for JWS services.","JAX-WS can provide a client programming model where the client generates request messages as a Source, SOAPMessage, DataSource, or JAXB objects providing either the message payload or just the SOAP message body. This model can be used to implement dynamic service clients.","Tubeline deployment functionality can generate tubeline items for dispatch-based clients in the same manner as for clientgen, JAXB-based clients.","Using the provider and dispatch models together, along with the XML\/HTTP binding (not SOAP) can allow JAX-WS to provide basic support for REST services.","Tubeline deployment functionality can generate tubeline items for REST services and client. As there will be no SOAP message in a REST exchange, tubes that are part of a REST tubeline can receive an error if they attempt to access the SOAPMessage property. JAX-RPC environment simulation is not required for REST services and clients.","Since the standard tubeline items (described above) load the built-in client and server must understand (MU) tubes, additional tubes that process headers that may be marked with must understand equal true must be sorted nearer the connection.","These tubes can mark that they have understood a header using packet.getMessage( ).getHeaders( ) to get the HeaderList and then headerList.understood(int) passing the index of the header in the list.","The JAX-WS RI provides limited support for overriding the last item on the tubeline (\u201cterminal tube\u201d) for either the client or the server.","On the client side, this terminal tube is the connection tube (\u201ctransport tube\u201d). Layered products can override the connection tube by implementing com.sun.xml.ws.api.TransportTubeFactory and registering the implementation using the META-INF\/services pattern.","On the server-side, there need be no leading tube that represents the connection; instead, there can be a connection object and a set of adapters that hook-up the servlet container request and response objects to the beginning of tubeline execution.","The terminal tube for the server-side is the invoker and executes the target method of the JWS class instance. While the invoker tube cannot be replaced, the JWS class instance can be enhanced using Spring.","In the JAX-WS RI, the codec is created by the object representing the binding. There are static binding instances for SOAP 1.1 and 1.2, with and without MTOM, and for XML\/HTTP. The codec cannot be overridden for these bindings. However, new binding types may specify their own codec.","The WSIT codebase also works under the assumption that it will take over primary control of generating the client and server tubelines, as application server can do, complicating integration of WSIT tubes. This is understandable as there is no functionality for assembling tubeline items in the RI like the functionality defined in this specification. A further complication is that many WSIT tubes expect configuration via WSIT configuration files. Fortunately, some WSIT tubes, such as the WS-MEX support are simpler and can more easily be integrated with an application server.","Here is a sample of how to integrate a WSIT tube into the server-side tubeline using the WS-MEX support as an example:",{"@attributes":{"id":"p-0136","num":"0155"},"tables":{"@attributes":{"id":"TABLE-US-00011","num":"00011"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2003\u20031. Implement a TubelineDeploymentListener"},{"entry":"public class WSMEXDeploymentListener implements TubelineDeploymentListener {"},{"entry":"\u2003\u2003\u2002\u2009 public void createClient(ClientTubeAssemblerContext context,"},{"entry":"Set<TubelineAssemblerItem> items) {"},{"entry":"\u2003\u2003\u2003\u2003\u2003\/\/ no-op"},{"entry":"\u2003\u2003\u2002\u2009 }"},{"entry":"\u2003\u2003\u2002\u2009 public void createServer(ServerTubeAssemblerContext context,"},{"entry":"Set<TubelineAssemblerItem> items) {"},{"entry":"\u2003\u2003\u2003\u2003\u2003items.add(new TubelineAssemblerItem(\u201cmex\u201d, new"},{"entry":"AbstractTubeFactory( ) {"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003public Tube createServer(Tube next,"},{"entry":"ServerTubeAssemblerContext context) {"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003return new"},{"entry":"com.sun.xml.ws.mex.server.MetadataServerPipe(context.getEndpoint( ), next);"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003}"},{"entry":"\u2003\u2003\u2003\u2003\u2003}));"},{"entry":"\u2003\u2003\u2002\u2009 }"},{"entry":"}"},{"entry":"\u2003\u20032. Register the TubelineDeploymentListener implementation"},{"entry":"\u2003\u2003Use any of the supported methods to register the tubeline deployment listener"},{"entry":"\u2003\u2003implementation class (WSMEXDeploymentListener in this sample) with the tubeline"},{"entry":"\u2003\u2003deployment functionality and server-side tubelines will include the WSIT WS-MEX"},{"entry":"\u2003\u2003pipe."},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"The following gives user interface requirements on one embodiment which JAVA Programming Interface can be part of.","The package: weblogic.wsee.jaxws.tubeline.","TubelineDeploymentListener can be a Service interface for implementations that manage items on the tubeline.","Service interface for managing TubelineAssemblerItem instances for the tubeline of a particular context. Environments can register available TubelineDeploymentListener implementations using the services framework. Registered implementations are located by searching the class loader for META-INF\/services\/weblogic.wsee.jaxws.tubeline.TubelineDeploymentListener resources. On the server, the classloader for the service implementation class can be used. On the client, the classloader of the client delegate can be used. Located resources must indicate text files containing implementations class names, one per line.",{"@attributes":{"id":"p-0141","num":"0160"},"tables":{"@attributes":{"id":"TABLE-US-00012","num":"00012"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Method Summary"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["void","createClient(com.sun.xml.ws.api.pipe.ClientTubeAssemblerContext "]},{"entry":[{},"context, java.util.Set<TubelineAssemblerItem> items)"]},{"entry":[{},"\u2003\u2003Inspect and modify TubelineAssemblerItemS for the client "]},{"entry":[{},"based on functionality supported by listener."]},{"entry":["void","createServer(com.sun.xml.ws.api.pipe.ServerTubeAssemblerContext "]},{"entry":[{},"context, java.util.Set<TubelineAssemblerItem> items)"]},{"entry":[{},"\u2003\u2003Inspect and modify TubelineAssemblerItemS for the server "]},{"entry":[{},"based on functionality supported by listener."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"createClient\n\n","Inspect and modify TubelineAssemblerItemS for the client based on functionality supported by listener. This method may remove items from the set. The set implementation will maintain iteration ordering based on insertion ordering.","Parameters:","context\u2014Assembler context","items\u2014Set of TubelineAssemblerItemS","createServer\n\n","Inspect and modify TubelineAssemblerItemS for the server based on functionality supported by listener. This method may remove items from the set. The set implementation will maintain iteration ordering based on insertion ordering.","Parameters:","context\u2014Assembler context","items\u2014Set of TubelineAssemblerItemS","TubelineAssemblerItem","Meta-data class instance for single tube on the tubeline allows the specification of name, service values, ordering requirements, related tube requirements, and tube construction.","Class TubelineAssemblerItem\n\n","Requirements and factory for a single tubeline item. The JAX-WS deployer can use all of the configured TubelineAssemblerItemS (see TubelineDeploymentListener) to first validate that a legal tubeline can be built, then order the tubeline assemblers, and finally generate a tubeline for the client or service.","Each TubelineAssemblerItem can specify a unique name that will appear in relevant logs and by which this item can be referred by other TubelineAssemblerItemS. TubelineAssemblerItemS also can specify a TubeFactory, which can generate Tube instances, as required.","Ordering of TubelineAssemblerItemS can be controlled by allowing each item to specify the set of other items that it must go before or go after, respectively. Items that have no before or after relationship requirement can be ordered as they were in the Set of items generated by the TubelineDeploymentListenerS. Ordering requirements do not imply a requirement that other items exist in the configuration, e.g. if a \u201creliable-messaging\u201d item specifies that it must go before a \u201csecurity\u201d item this only affects ordering but will not invalidate the configuration if no item named \u201csecurity\u201d or supporting a service with that name is present.","Requirements that other TubelineAssemblerItemS be present in the tubeline can be specified by means of a set of mixed item names or supported service values. To control ordering and require that items be present, use both the required set and the go before or go after sets.",{"@attributes":{"id":"p-0159","num":"0184"},"tables":{"@attributes":{"id":"TABLE-US-00013","num":"00013"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Constructor Summary"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"TubelineAssemblerItem(java.lang.String name, TubeFactory factory)"},{"entry":"\u2003\u2003Creates item with name and factory."},{"entry":"TubelineAssemblerItem(java.lang.String name, TubeFactory factory,"},{"entry":"java.util.Set<java.lang.String> goAfter, java.util.Set<java.lang.String>"},{"entry":"goBefore, java.util.Set<java.lang.String> required)"},{"entry":"\u2003\u2003Creates item with name, factory, mandates on items that must go before"},{"entry":"or go after this item, and set of required names that must be present in the"},{"entry":"final tubeline."},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},{"@attributes":{"id":"p-0160","num":"0185"},"tables":{"@attributes":{"id":"TABLE-US-00014","num":"00014"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Constructor Summary"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"TubelineAssemblerItem(java.lang.String name, TubeFactory factory)"},{"entry":"\u2003\u2003Creates item with name and factory."},{"entry":"TubelineAssemblerItem(java.lang.String name, TubeFactory factory,"},{"entry":"java.util.Set<java.lang.String> goAfter, java.util.Set<java.lang.String>"},{"entry":"goBefore, java.util.Set<java.lang.String> required)"},{"entry":"\u2003\u2003Creates item with name, factory, mandates on items that must go before"},{"entry":"or go after this item, and set of required names that must be present"},{"entry":"in the final tubeline."},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},{"@attributes":{"id":"p-0161","num":"0186"},"tables":{"@attributes":{"id":"TABLE-US-00015","num":"00015"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Constructor Summary"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"TubelineAssemblerItem(java.lang.String name, TubeFactory factory)"},{"entry":"\u2003\u2003Creates item with name and factory."},{"entry":"TubelineAssemblerItem(java.lang.String name, TubeFactory factory,"},{"entry":"java.util.Set<java.lang.String> goAfter, java.util.Set<java.lang.String>"},{"entry":"goBefore, java.util.Set<java.lang.String> required)"},{"entry":"\u2003\u2003Creates item with name, factory, mandates on items that must go before"},{"entry":"or go after this item, and set of required names that must be present"},{"entry":"in the final tubeline."},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},{"@attributes":{"id":"p-0162","num":"0187"},"tables":{"@attributes":{"id":"TABLE-US-00016","num":"00016"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"center"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"Method Summary"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["boolean","equals(java.lang.Object obj)"]},{"entry":["TubeFactory","getFactory( )"]},{"entry":[{},"\u2003Gets tube factory property"]},{"entry":["java.util.Set<java.lang.String>","getGoAfter( )"]},{"entry":[{},"\u2003Gets set of item names for items that must go after this"]},{"entry":[{},"item"]},{"entry":["java.util.Set<java.lang.String>","getGoBefore( )"]},{"entry":[{},"\u2003Gets set of item names for items that must go before this"]},{"entry":[{},"item"]},{"entry":["java.lang.String","getName( )"]},{"entry":[{},"\u2003Gets item name"]},{"entry":["java.util.Set<java.lang.String>","getRequired( )"]},{"entry":[{},"\u2003Gets set of item names that must be present in final"]},{"entry":[{},"tubeline"]},{"entry":["int","hashCode( )"]},{"entry":["void","setFactory(TubeFactory factory)"]},{"entry":[{},"\u2003Sets tube factory property"]},{"entry":["void","setGoAfter(java.util.Set<java.lang.String> goAfter)"]},{"entry":[{},"\u2003Sets go after items names"]},{"entry":["void","setGoBefore(java.util.Set<java.lang.String> goBefore)"]},{"entry":[{},"\u2003Sets go before items names"]},{"entry":["void","setName(java.lang.String name)"]},{"entry":[{},"\u2003Sets item name"]},{"entry":["void","setRequired(java.util.Set<java.lang.String> required)"]},{"entry":[{},"\u2003Sets item names that must be present in final"]},{"entry":[{},"tubeline"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"Methods inherited from class java.lang.Object"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"getClass, notify, notifyAll, toString, wait, wait, wait"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"TubelineAssemblerItem","public TubelineAssemblerItem(java.lang.String name, TubeFactory factory)","Creates item with name and factory. Item supports no services and mandates no ordering or requirements for other items.","Parameters:","name\u2014Item name","factory\u2014Tube factory","TubelineAssemblerItem\n\n","Creates item with name, factory, mandates on items that must go before or go after this item, and set of required names or service values that must be present in the final tubeline.","Parameters:","name\u2014Item name","factory\u2014Tube factory","goAfter\u2014Set of item or service names for items that must be sorted after this item","goBefore\u2014Set of item or service names for items that must be sorted ahead of this item.","required\u2014Set of item or service names that must be present in the final tubeline","getFactory\n\n","Gets tube factory property","Returns:","Tube factory","setFactory\n\n","Sets tube factory property","Parameters:","factory\u2014Tube factory","getGoAfter\n\n","Gets set of item names for items that must go after this item","Returns:","Set of items that go after this item","setGoAfter\n\n","Sets go after items names","Parameters:","goAfter\u2014Go after items","getGoBefore\n\n","Gets set of item names for items that must go before this item","Returns:","Set of items that go before this item","setGoBefore\n\n","Sets go before items names","Parameters:","goBefore\u2014Go before items","getName\n\n","Gets item name","Returns:","Item name","setName\n\n","Sets item name","Parameters:","name\u2014Item name","getRequired\n\n","Gets set of item names that must be present in final tubeline","Returns:","Required set","setRequired\n\n","Sets item names that must be present in final tubeline","Parameters:","required\u2014Required set","hashCode\n\n","Overrides:","hashCode in class java.lang.Object","equals\n\n","Overrides:","equals in class java.lang.Object","TubeFactory","Interface for tube factory specific to TubelineAssemblerItem.",{"@attributes":{"id":"p-0225","num":"0267"},"figref":"FIG. 6"},"Interface TubeFactory","All Known Implementing Classes:","AbstractTubeFactory\n\n","Generates a Tube for a JAX-WS RI tubeline and links it into the existing tube chain.",{"@attributes":{"id":"p-0230","num":"0273"},"tables":{"@attributes":{"id":"TABLE-US-00017","num":"00017"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"287pt","align":"center"}},"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Method Summary"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["com.sun.xml.ws.api.pipe.Tube","createClient(com.sun.xml.ws.api.pipe.Tube next,"]},{"entry":[{},"com.sun.xml.ws.api.pipe.ClientTubeAssemblerContext context)"]},{"entry":[{},"\u2003Adds Tube to tubeline at client."]},{"entry":["com.sun.xml.ws.api.pipe.Tube","createServer(com.sun.xml.ws.api.pipe.Tube next,"]},{"entry":[{},"com.sun.xml.ws.api.pipe.ServerTubeAssemblerContext"]},{"entry":[{},"context)"]},{"entry":[{},"\u2003Adds Tube to tubeline at server."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"createClient\n\n","Adds Tube to tubeline at client.","Parameters:","next\u2014Next tube in tubeline; may be intermediate tube or transport.","context\u2014Client context","Returns:","Newly linked-in lead tube or next argument to leave tubeline unchanged.","createServer",{"@attributes":{"id":"p-0238","num":"0000"},"ul":{"@attributes":{"id":"ul0033","list-style":"none"},"li":["com.sun.xml.ws.api.pipe.Tube createServer(com.sun.xml.ws.api.pipe.Tube next,","com.sun.xml.ws.api.pipe.ServerTubeAssemblerContext context)"]}},"Adds Tube to tubeline at server.","Parameters:","next\u2014Next tube in tubeline; may be intermediate tube or invoker.","context\u2014Server context","Returns:","Newly linked-in lead tube or next argument to leave tubeline unchanged.","AbstractTubeFactory","Abstract implementation for TubeFactory","Class AbstractTubeFactory\n\n","TubeFactory\n\n","Abstract implementation of (@link TubeFactory}. Each create method returns the next tube argument, which makes no modification to the tubeline. Implementers of concrete tube factories may choose to override createClient or createServer, as desired.",{"@attributes":{"id":"p-0250","num":"0302"},"tables":{"@attributes":{"id":"TABLE-US-00018","num":"00018"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Constructor Summary"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"AbstractTubeFactory( )"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},{"@attributes":{"id":"p-0251","num":"0303"},"tables":{"@attributes":{"id":"TABLE-US-00019","num":"00019"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Constructor Summary"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"AbstractTubeFactory( )"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},{"@attributes":{"id":"p-0252","num":"0304"},"tables":{"@attributes":{"id":"TABLE-US-00020","num":"00020"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Constructor Summary"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"AbstractTubeFactory( )"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},{"@attributes":{"id":"p-0253","num":"0305"},"tables":{"@attributes":{"id":"TABLE-US-00021","num":"00021"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"266pt","align":"center"}},"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Method Summary"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["com.sun.xml.ws.api.pipe.Tube","createClient(com.sun.xml.ws.api.pipe.Tube next,"]},{"entry":[{},"com.sun.xml.ws.api.pipe.ClientTubeAssemblerContext"]},{"entry":[{},"context)"]},{"entry":[{},"\u2003Adds Tube to tubeline at client."]},{"entry":["com.sun.xml.ws.api.pipe.Tube","createServer(com.sun.xml.ws.api.pipe.Tube next,"]},{"entry":[{},"com.sun.xml.ws.api.pipe.ServerTubeAssemblerContext"]},{"entry":[{},"context)"]},{"entry":[{},"\u2003Adds Tube to tubeline at server."]},{"entry":["com.sun.xml.ws.api.pipe.Tube","createClient(com.sun.xml.ws.api.pipe.Tube next,"]},{"entry":[{},"com.sun.xml.ws.api.pipe.ClientTubeAssemblerContext"]},{"entry":[{},"context)"]},{"entry":[{},"\u2003Adds Tube to tubeline at client."]},{"entry":["com.sun.xml.ws.api.pipe.Tube","createServer(com.sun.xml.ws.api.pipe.Tube next,"]},{"entry":[{},"com.sun.xml.ws.api.pipe.ServerTubeAssemblerContext"]},{"entry":[{},"context)"]},{"entry":[{},"\u2003Adds Tube to tubeline at server."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"AbstractTubeFactory\n\n","createClient\n\n","Description copied from interface: TubeFactory","Adds Tube to tubeline at client.","Specified by:","createClient in interface TubeFactory","Parameters:","next\u2014Next tube in tubeline; may be intermediate tube or transport.","context\u2014Client context","Returns:","Newly linked-in lead tube or next argument to leave tubeline unchanged.","createServer\n\n","Description copied from interface: TubeFactory","Adds Tube to tubeline at server.","Specified by:","createServer in interface TubeFactory","Parameters:","next\u2014Next tube in tubeline; may be intermediate tube or invoker.","context\u2014Server context","Returns:","Newly linked-in lead tube or next argument to leave tubeline unchanged.","Ordering","Utility class for resolving ordering requirements.","Class Ordering\n\n","java.lang.Iterable<TubelineAssemblerItem>,","java.util.Collection<TubelineAssemblerItem>\n\n","Resolves ordering dependencies for a collection of (@link TubelineAssemblerItem}.",{"@attributes":{"id":"p-0281","num":"0343"},"tables":{"@attributes":{"id":"TABLE-US-00022","num":"00022"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Constructor Summary"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Ordering( )"]},{"entry":[{},"Ordering(java.util.Collection<TubelineAssemblerItem> items)"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},{"@attributes":{"id":"p-0282","num":"0344"},"tables":{"@attributes":{"id":"TABLE-US-00023","num":"00023"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Method Summary"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"126pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"91pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["boolean","add(TubelineAssemblerItem"]},{"entry":[{},"o)"]},{"entry":["java.util.Iterator<TubelineAssemblerItem>","iterator( )"]},{"entry":["int","size( )"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},{"@attributes":{"id":"p-0283","num":"0345"},"tables":{"@attributes":{"id":"TABLE-US-00024","num":"00024"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Methods inherited from class java.util.AbstractCollection"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"addAll, clear, contains, containsAll, isEmpty, remove, removeAll,"]},{"entry":[{},"retainAll, toArray, toArray, toString"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},{"@attributes":{"id":"p-0284","num":"0346"},"tables":{"@attributes":{"id":"TABLE-US-00025","num":"00025"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Methods inherited from class java.lang.Object"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"equals, getClass, hashCode, notify, notifyAll, wait, wait, wait"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},{"@attributes":{"id":"p-0285","num":"0347"},"tables":{"@attributes":{"id":"TABLE-US-00026","num":"00026"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Methods inherited from interface java.util.Collection"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"equals, hashCode"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"Ordering\n\n","Ordering\n\n","iterator\n\n","Specified by:","iterator in interface java.lang.Iterable<TubelineAssemblerItem>","Specified by:","iterator in interface java.util.Collection<TubelineAssemblerItem>","Specified by:","iterator in class java.util.AbstractCollection<TubelineAssemblerItem>","add\n\n","Specified by:","add in interface java.util.Collection<TubelineAssemblerItem>","Overrides:","add in class java.util.AbstractCollection<TubelineAssemblerItem>","size\n\n","Specified by:","size in interface java.util.Collection<TubelineAssemblerItem>","Specified by:","size in class java.util.AbstractCollection<TubelineAssemblerItem>","TubeFactoryCreator","Service interface for creating TubeFactory interfaces from Class instances. Useful for allowing meta-data file to support other technologies, such as a Handler class name.","Interface TubeFactoryCreator\n\n","Service interface for creating TubeFactory instance from configured class. Environments can register available TubeFactoryCreator implementations using the services framework. Registered implementations are located by searching the classpath for META-INF\/services\/weblogic.wsee.jaxws.tubeline.TubeFactoryCreator resources. On the server, the classloader for the service implementation class will be used. On the client, the classloader of the client delegate can be used. Located resources can indicate text files containing implementations class names, one per line.",{"@attributes":{"id":"p-0309","num":"0377"},"tables":{"@attributes":{"id":"TABLE-US-00027","num":"00027"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Method Summary"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["TubeFactory","create(java.lang.Class c)"]},{"entry":[{},"\u2003Creates TubeFactory instance based on a given class;"]},{"entry":[{},"typically read from meta-data."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"create\n\n","Creates TubeFactory instance based on a given class; typically read from meta-data.","Parameters:","c\u2014Class instance","Returns:","Tube factory generated in an implementation dependent fashion from an instance of the parameter class. Return null if this creator does not generate tube factories for the parameter class type.","TubelineDeploymentListenerCreator","Service interface for creating TubelineDeploymentListener interfaces from Class instances. Useful for allowing meta-data file to support other technologies, such as a WsDeploymentListener class name.","Interface TubelineDeploymentListenerCreator\n\n","Service interface for creating TubelineDeploymentListener instance from configured class. Environments can register available TubelineDeploymentListenerCreator implementations using the services framework. In one embodiment, registered implementations can be located by searching the classpath for META-INF\/services\/weblogic.wsee.jaxws.tubeline.TubelineDeploymentListenerCreator resources. On the server, the classloader for the service implementation class can be used. On the client, the classloader of the client delegate can be used. Located resources can indicate text files containing implementations class names, one per line.",{"@attributes":{"id":"p-0320","num":"0390"},"tables":{"@attributes":{"id":"TABLE-US-00028","num":"00028"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Method Summary"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["TubelineDeploymentListener","create(java.lang.Class c)"]},{"entry":[{},"\u2003Creates TubelineDeploymentListener"]},{"entry":[{},"instance based on a given class; typically"]},{"entry":[{},"read from meta-data."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"create\n\n","Creates TubelineDeploymentListener instance based on a given class; typically read from meta-data.","Parameters:","c\u2014Class instance","Returns:","Tubeline deployment listener generated in an implementation dependent fashion from an instance of the parameter class. Return null if this creator does not generate tubeline deployment listeners for the parameter class type.","Non-Java Programming Interfaces","For the Meta-data File and Schema, Tubeline deployment functionality can support the configuration of TubelineDeploymentListener implementations and\/or TubelineAssemblerItem values through the use of the META-INF\/tube-config.xml file. In one embodiment, environments can have multiple meta-data files, as long as they are available to the class loader's resource loading support, and each meta-data file will be processed.",{"@attributes":{"id":"p-0329","num":"0400"},"tables":{"@attributes":{"id":"TABLE-US-00029","num":"00029"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2003\u2003\u2003\u2003config"]},{"entry":[{},"\u2003\u2003<xsd:element name=\u201cconfig\u201d>"]},{"entry":[{},"\u2003\u2003\u2003\u2003<xsd:complexType>"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003<xsd:sequence>"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003<xsd:element name=\u201cdeployment-listeners\u201d"]},{"entry":[{},"type=\u201cdeployment-listeners\u201d\/>"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003<\/xsd:sequence>"]},{"entry":[{},"\u2003\u2003\u2003\u2003<\/xsd:complexType>"]},{"entry":[{},"\u2003\u2003<\/xsd:element>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"This can be the top-level element for tube-config.xml. The config element can contain the deployment-listeners element and will be the extension point for later additions of other non-deployment listener related configuration.","deployment-listeners",{"@attributes":{"id":"p-0332","num":"0403"},"tables":{"@attributes":{"id":"TABLE-US-00030","num":"00030"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<xsd:complexType name=\u201cdeployment-listeners\u201d>"},{"entry":"\u2003\u2003<xsd:sequence>"},{"entry":"\u2003\u2003\u2003\u2003<xsd:element name=\u201cclient\u201d type=\u201clisteners\u201d minOccurs=\u201c0\u201d\/>"},{"entry":"\u2003\u2003\u2003\u2003<xsd:element name=\u201cserver\u201d type=\u201clisteners\u201d minOccurs=\u201c0\u201d\/>"},{"entry":"\u2003\u2003<\/xsd:sequence>"},{"entry":"<\/xsd:complexType>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"Top-level type for deployment listener configuration can separate configuration between client and server.","listeners",{"@attributes":{"id":"p-0335","num":"0406"},"tables":{"@attributes":{"id":"TABLE-US-00031","num":"00031"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2003<xsd:complexType name=\u201clisteners\u201d>"]},{"entry":[{},"\u2003\u2003<xsd:sequence>"]},{"entry":[{},"\u2003\u2003\u2003<xsd:element name=\u201clistener\u201d type=\u201clistener\u201d minOccurs=\u201c0\u201d"]},{"entry":[{},"maxOccurs=\u201cunbounded\u201d\/>"]},{"entry":[{},"\u2003\u2003\u2003<xsd:element name=\u201cassembler-item\u201d type=\u201cassembler-item\u201d"]},{"entry":[{},"minOccurs=\u201c0\u201d maxOccurs=\u201cunbounded\u201d\/>"]},{"entry":[{},"\u2003\u2003<\/xsd:sequence>"]},{"entry":[{},"\u2003<\/xsd:complexType>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"The listener's type can support configuring zero-or-more TubelineDeploymentListener instances and\/or zero-or-more TubelineAssemblerItem values.","listener",{"@attributes":{"id":"p-0338","num":"0409"},"tables":{"@attributes":{"id":"TABLE-US-00032","num":"00032"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<xsd:complexType name=\u201clistener\u201d>"]},{"entry":[{},"\u2003\u2003<xsd:attribute name=\u201cclass\u201d type=\u201cxsd:string\u201d use=\u201crequired\u201d\/>"]},{"entry":[{},"<\/xsd:complexType>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"Can configure class name for TubelineDeploymentListener. If the class described by the class attribute implements TubelineDeploymentListener, then an instance can be used straight away. Otherwise, configured service implementations of TubelineDeploymentListenerCreator are consulted. This functionality can be intended to allow the class name to specify a WsDeploymentListener class or an instance of another technology.","assembler-item",{"@attributes":{"id":"p-0341","num":"0412"},"tables":{"@attributes":{"id":"TABLE-US-00033","num":"00033"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<xsd:complexType name=\u201cassembler-item\u201d>"},{"entry":"\u2003\u2003<xsd:sequence>"},{"entry":"\u2003\u2003\u2003\u2003<xsd:element name=\u201cafter\u201d type=\u201clist\u201d minOccurs=\u201c0\u201d\/>"},{"entry":"\u2003\u2003\u2003\u2003<xsd:element name=\u201cbefore\u201d type=\u201clist\u201d minOccurs=\u201c0\u201d\/>"},{"entry":"\u2003\u2003\u2003\u2003<xsd:element name=\u201crequired\u201d type=\u201clist\u201d minOccurs=\u201c0\u201d\/>"},{"entry":"\u2003\u2003<\/xsd:sequence>"},{"entry":"\u2003\u2003<xsd:attribute name=\u201cclass\u201d type=\u201cxsd:string\u201d use=\u201crequired\u201d\/>"},{"entry":"\u2003\u2003<xsd:attribute name=\u201cname\u201d type=\u201cxsd:string\u201d use=\u201coptional\u201d\/>"},{"entry":"<\/xsd:complexType>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"Can configure values for instance of TubelineAssemblerItem, including the class name for the implementation of TubeFactory. If the class described by the class attribute implements TubeFactory, then an instance can be used straight away. Otherwise, configured service implementations of TubeFactoryCreator can be consulted. This functionality can allow the class name to specify a Handler class or an instance of another technology.","list",{"@attributes":{"id":"p-0344","num":"0415"},"tables":{"@attributes":{"id":"TABLE-US-00034","num":"00034"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2003<xsd:complexType name=\u201clist\u201d>"]},{"entry":[{},"\u2003\u2003<xsd:sequence>"]},{"entry":[{},"\u2003\u2003\u2003<xsd:element name=\u201citem\u201d type=\u201cxsd:string\u201d minOccurs=\u201c1\u201d"]},{"entry":[{},"maxOccurs=\u201cunbounded\u201d\/>"]},{"entry":[{},"\u2003\u2003<\/xsd:sequence>"]},{"entry":[{},"\u2003<\/xsd:complexType>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"Simple ordered list of strings.","In one embodiment, Tubeline deployment only occurs during web service deployment, there need be no strict performance requirements (e.g. not involved in performance test suite code paths). However, care should be taken to ensure that tubeline deployment does not negatively impact deployment time or server start-up time, if services are deployed at server start-up."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0004","num":"0003"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0005","num":"0004"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0006","num":"0005"},"figref":"FIGS. 3A and 3B"},{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 10"}]},"DETDESC":[{},{}]}
