---
title: Systems and methods for providing a library of virtual images in a software provisioning environment
abstract: A provisioning server can maintain a library of virtual images. The virtual images can be a disk image of software that has been previously installed according to metadata. The metadata can represent parameters utilized to create the virtual image and the parameters required to provision the virtual image on a target machine. The provisioning server can maintain the metadata for a virtual image in a virtual image record associated with the virtual image. The provisioning server can provision a virtual image to one or more target machines. To provision the virtual image, the provisioning server can copy the virtual image to a storage device on the one or more target machines and configure the target machine according to metadata in the associated virtual image record.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08572587&OS=08572587&RS=08572587
owner: Red Hat, Inc.
number: 08572587
owner_city: Raleigh
owner_country: US
publication_date: 20090227
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD","DESCRIPTION OF THE RELATED ART","DETAILED DESCRIPTION OF EMBODIMENTS"],"p":["This invention relates generally to software provisioning. In particular, the invention relates to systems and methods for providing, maintaining, and provisioning virtual images in a software provisioning environment.","Software provisioning is the process of selecting a target machine, such as a server, loading the appropriate software (operating system, device drivers, middleware, and applications), and customizing and configuring the system and the software to make it ready for operation. Software provisioning can entail a variety of tasks, such as creating or changing a boot image, specifying parameters, e.g. IP address, IP gateway, to find associated network and storage resources, and then starting the machine and its newly-loaded software. Typically, a system administrator will perform these tasks using various tools because of the complexity of these tasks. Unfortunately, there is a lack of provisioning control tools that can adequately integrate and automate these tasks.","For most software provisioning, the software being installed must be customized and configured for each system in order to make it ready for operation. This installation processes must be repeated multiple times for a large network of systems. Often, the same or identical software is the subject of the installation process and must be installed in, and configured for, each system.","For simplicity and illustrative purposes, the principles of the present invention are described by referring mainly to exemplary embodiments thereof. However, one of ordinary skill in the art would readily recognize that the same principles are equally applicable to, and can be implemented in, all types of information and systems, and that any such variations do not depart from the true spirit and scope of the present invention. Moreover, in the following detailed description, references are made to the accompanying figures, which illustrate specific embodiments. Electrical, mechanical, logical and structural changes may be made to the embodiments without departing from the spirit and scope of the present invention. The following detailed description is, therefore, not to be taken in a limiting sense and the scope of the present invention is defined by the appended claims and their equivalents.","Embodiments of the present teachings relate to systems and methods for providing and provisioning virtual images in a software provisioning environment. More particularly, a provisioning server can maintain a library of virtual images and perform provisioning process on target machines utilizing the virtual images.","According to embodiments, the provisioning server can be configured to maintain a library of virtual images. The virtual images can be a disk image of software that has been previously installed according to metadata. The metadata can represent parameters utilized to create the virtual image and the parameters required to provision the virtual image on a target machine. The provisioning server can be configured to maintain the metadata for a virtual image in a virtual image record associated with the virtual image.","According to embodiments, the provisioning server can be configured to provision a virtual image to one or more target machines. To provision the virtual image, the provisioning server can be configured to copy the virtual image to a storage device on the one or more target machines and configure the target machine according to metadata in the associated virtual image record. The provisioning server can be configured to provision and instantiate the virtual image directly or instruct a helper client to provision and instantiate the virtual image.","According to embodiments, the provisioning server can be configured to generate the virtual images and store the virtual images in the library of virtual images. Additionally, the provisioning server can be configured to create the virtual image record from the metadata associated with the virtual image. Likewise, the provisioning server can be configured to receive the virtual image, metadata, and\/or virtual image record from an external source.","By utilizing a virtual image to deliver software, the provisioning server can install an instance of software once, create the virtual image, and clone the virtual image on any number of target machines. Because the virtual image includes the software in an installed state, the time for provisioning duplicate or similar software can be reduced by copying the virtual image to a target machine, thereby eliminating the need to re-install duplicate or similar software on each target machine.",{"@attributes":{"id":"p-0016","num":"0015"},"figref":["FIG. 1","FIG. 1"],"b":["100","100"]},"In particular, the provisioning environment  can manage software provisioning using a hierarchy of commands. In exemplary embodiments, the hierarchy can include at least four levels of commands. The lowest level in the hierarchy can comprise distribution commands, which primarily handle base operating system specific tasks of provisioning. The second level can comprise profile commands, which associate a configuration file, such as a kickstart file for Linux or other operating system, with a distribution and optionally allow for customization. The third level comprises system commands, which associate remote systems that are involved with the provisioning of the software. The fourth level comprises repository commands, which address configurations and tasks related to updating the software, remote installation procedures, and optionally customizing the software.","The provisioning environment  provides several capabilities and advantages over the known provisioning solutions. For example, the present invention is capable of handling a variety of forms of installations, such as preboot execution environment (\u201cPXE\u201d), virtualization, re-installations, and image installations.","In exemplary aspects, the provisioning environment  enables integrating virtualization into a PXE provisioning infrastructure and provides several options to reinstall running machines as well. The provisioning environment  can integrate mirroring of package repositories with the provisioning process, so that a provisioning server may serve as a central mirror point of contact for all of an organization's software needs. In aspects, a set of remote mirrored repositories can automatically be used by provisioned systems without additional setup.","Reference will now be made in detail to the exemplary aspects the provisioning environment . The provisioning environment  can be applied to provisioning any form of software, such as Windows systems, UNIX systems, and Linux systems. In the exemplary description that follows,  is presented to explain the provisioning environment  for provisioning software, such as Linux, and Linux based software, such as Fedora and Red Hat Enterprise Linux by Red Hat, Inc.","In provisioning of software such as Linux, many system administrators use what is known as the \u201ckickstart\u201d installation method. Kickstart files are files that specify the intended configuration of the software being provisioned. Kickstart files can be kept on a server and can be read by individual computers during the installation. This installation method allows the use of a single or relatively few standard kickstart files to install Linux on multiple machines, making it ideal for network and system administrators.","The kickstart file can be a simple text file, containing a list of items, each identified by a keyword. In general, a kickstart file can be edited with any text editor or word processor that can save files as ASCII text. One skilled in the art will recognize that the present invention may be applied to non-kickstart files in software provisioning. For example, configuration files such as AutoYAST Answer files used in Novell SuSe Linux and Sun Solaris Jumpstart files may also be used by the provisioning environment .","Typically, a kickstart file can be copied to the boot disk, or made available on the network. The network-based approach is most commonly used, as most kickstart installations for software provisioning, such as Linux systems, tend to be performed via a network using NES, FTP, or HTTP on networked computers. Administrators also find it desirable that kickstart installations can be performed using a local CD-ROM, or a local hard drive.","Using kickstart files, a system administrator can create a single file containing the parameters that are needed to complete a typical software installation. For example, kickstart files specify parameters related to: language selection; mouse configuration; keyboard selection; boot loader installation; disk partitioning; network configuration; NIS, LDAP, Kerberos, Hesiod, and Samba authentication; firewall configuration; and package selection.","According to exemplary aspects illustrated in , the provisioning environment  can include a provisioning server , a code repository  which provides access to distributions  and , a set of installation templates , a set of exception plugins , a helper client  running on target machines  in a network , a provisioning database  which comprises a distribution tree list  and template list . Each of these components will now be further described.","The provisioning server (from herein referred to as a \u201ccobbler\u201d)  is responsible for: serving as an extensible markup language remote procedure call (XMLRPC) handler, linking to or mirroring install distribution trees and a configuration database; hosting kickstart templates; hosting plugins; generating installation images, and the like. The cobbler server  can be implemented as software, such as Python code, installed on a boot server machine and provide a command line interface for configuration of the boot server. In addition, the cobbler server  can make itself available as a Python application programming interface (API) for use by higher level management software (not shown). The cobbler server  supports provisioning via PXE, image (ISO) installation, virtualization, re-provisioning. As will be described later, the last two modes are performed with the assistance of a helper client .","The code repository  is responsible for hosting distributions  and . The code repository  can be implemented using well known components of hardware and software. Additionally, the code repository  can include one or more repositories hosting distributions. The distributions  and  can include bundles of software that are already compiled and configured. The distributions  and  may be in the form of either rpm, deb, tgz, msi, exe formats, and the like. For example, as Linux distributions, the distributions  and  are bundles of software that comprise the Linux kernel, the non-kernel parts of the operating system, and assorted other software. The distributions  and  can take a variety of forms, from fully-featured desktop and server operating systems to minimal environments.","In exemplary aspects, the installation templates  are any data structure or processing element that can be combined with a set of installation configurations and processed to produce a resulting configuration file, such as a kickstart file.","In exemplary aspects, exception plugins  are software that interact with cobbler server  to customize the provisioning of software. In general, the exception plugins  are intended to address infrequent customization needs.","In exemplary aspects, the helper client (known as \u201ckoan\u201d, which stands for \u201ckickstart-over-a-network\u201d)  can assist the cobbler server  during the provisioning processes. The koan  can allow for both network provisioning of new virtualized guests and destructive provisioning of any existing system. When invoked, the koan  can request profile information from a remote boot server that has been configured with the cobbler server . In some aspects, what the koan  does with the profile data depends on whether it was invoked with -virt or replace-self.","In exemplary aspects, the koan  can enable replacing running systems as well as installing virtualized profiles. The koan  can also be pushed out to systems automatically from the boot server. In some aspects, the koan client  is also written in Python code to accommodate a variety of operating systems, machine architectures, etc.","In exemplary aspects, the network  can include a number of the target machines . The target machines  can represent the particular machines to which software provisioning is directed. The target machines  can represent a wide variety of computing devices, such as personal computers, servers, laptop computers, personal mobile devices, and the like. In some aspects, the target machines  can represent distributed computing environments such as cloud computing environments. Although  shows several of the target machines , the provisioning environment  can be capable of managing a wide range environments, such as datacenters with thousands of machines or server pools with just a few machines. Additionally, the cobbler server  can be connected to multiple networks .","In exemplary aspects, the provisioning database  can serve as a data storage location for holding data used by the cobbler server . For example, as shown, the provisioning database  can comprise the distribution tree list  and the template list . The distribution tree list  can provide an inventory of the distributions  and  that are hosted or mirrored by the cobbler server . The template list  can provide an inventory of the templates  that are hosted by the cobbler server .","As noted above, the cobbler server  can manage provisioning using a hierarchical concept of distribution commands, profile commands, system commands, and repository commands. This framework enables the cobbler server  to abstract the differences between multiple provisioning types (installation, reinstallation, and virtualization) and allows installation of all three from a common platform. This hierarchy of commands also permits the cobbler server  to integrate software repositories  with the provisioning process, thus allowing systems to be configured as a mirror for software updates and third party content as well as distribution content.","Distributions can contain information about base operating system tasks, such as what kernel and initial ramdisk (\u201cinitrd\u201d) are used in the provisioning, along with other information, such as required kernel parameters. Profiles associate one of the distributions  and  with a kickstart file and optionally customize it further, for example, using plugins . System commands associate a hostname, IP, or (machine access control) MAC with a distribution and optionally customize the profile further. Repositories contain update information, such as yum mirror information that the cobbler server  uses to mirror repository . The cobbler server  can also manage (generate) dynamic host configuration protocol (DHCP) configuration files using the templates .","In exemplary aspects, the cobbler server  can use a provisioning environment that is fully templated, allowing for kickstarts and PXE files to be customized by the user. The cobbler server  uses the concept of \u201cprofiles\u201d as an intermediate step between the operating system and the installed system. A profile is a description of what a system does rather than the software to be installed. For instance, a profile might describe a virtual web server with X amount of RAM, Y amounts of disk space, ruling a Linux distribution Z, and with an answer file W.","In exemplary aspects, the cobbler server  can provide a command line interface to configure a boot server in which it is installed. For example, the format of the cobbler server  commands can be generally in the format of: cobbler command [subcommand][-arg1=][-arg2=]. Thus, a user can specify various aspects of software provisioning via a single interface, such as a command line interface or other known interface. Examples of exemplary cobbler commands can be found in U.S. patent application Ser. No. 11\/763,315, U.S. Patent Application Publication No. 2008-0288938 and U.S. patent application Ser. No. 11\/763,333, U.S. Patent Publication No. 2008-0288939, all assigned to Red Hat Corporation, the disclosures of which are incorporated herein, in their entirety, by reference.","According to exemplary aspects, a user can use various commands of the provisioning environment  to specify distributions and install trees hosted by the code repository , such as a distribution from the distributions  or . A user can add or import a distribution or import it from installation media or an external network location.","According to exemplary aspects, in order to import a distribution, the cobbler server  can auto-add distributions and profiles from remote sources, whether this is an installation media (such as a DVD), an NFS path, or an rsync mirror. When importing an rsync mirror, the cobbler server  can try to detect the distribution type and automatically assign kickstarts. By default in some embodiments, the cobbler server can provision by erasing the hard drive, setting up eth0 for DHCP, and using a default password. If this is undesirable, an administrator may edit the kickstart files in \/etc\/cobbler to do something else or change the kickstart setting after the cobbler server  creates the profile.","According to exemplary aspects, a user may map profiles to the distributions and map systems to the profiles using profile commands and systems commands of the provisioning environment . A profile associates a distribution to additional specialized options, such as a kickstart automation file. In the cobbler server , profiles are the unit of provisioning and at least one profile exists for every distribution to be provisioned. A profile might represent, for instance, a web server or desktop configuration.","According to exemplary aspects, a user can map systems to profiles using system commands. System commands can assign a piece of hardware with cobbler server  to a profile. Systems can be defined by hostname, Internet Protocol (IP) address, or machine access control (MAC) address. When available, use of the MAC address to assign systems can be preferred.","According to exemplary aspects, the user can map repositories and profiles using repository commands. Repository commands can address configurations and tasks related to updating the software, remote installation procedures, and optionally customizing the software. These repository commands can also specify mirroring of the provisioned software to remote servers. Repository mirroring can allow the cobbler server  to mirror not only the trees  and , but also optional packages, third party content, and updates. Mirroring can be useful for faster, more up-to-date installations and faster updates, or providing software on restricted networks. The cobbler server  can also include other administrative features, such as allowing the user to view their provisioning configuration or information tracking the status of a requested software installation.","According to exemplary aspects, a user can utilize commands to create a provisioning infrastructure from a distribution mirror. Then a default PXE configuration is created, so that by default, systems will PXE boot into a fully automated install process for that distribution. The distribution mirror can be a network rsync mirror or a mounted DVD location.","According to exemplary aspects, the administrator uses a local kernel and initrd file (already downloaded), and shows how profiles would be created using two different kickstarts\u2014one for a web server configuration and one for a database server Then, a machine can be assigned to each profile.","According to exemplary aspects, a repo mirror can be set up for two repositories, and create a profile that will auto install those repository configurations on provisioned systems using that profile.","According to exemplary aspects, in addition to normal provisioning, the cobbler server  can support yet another option, called \u201cenchant\u201d. Enchant takes a configuration that has already been defined and applies it to a remote system that might not have the remote helper program installed. Users can use this command to replace a server that is being repurposed, or when no PXE environment can be created. Thus, the enchant option allows the remote the koan client  to be executed remotely from the cobbler server .","According to aspects, if the cobbler server  is configured to mirror certain repositories, the cobbler server  can then be used to associate profiles with those repositories. Systems installed under those profiles can be auto configured to use these repository mirrors in commands and, if supported, these repositories can be leveraged. This can be useful for a large install base, when fast installation and upgrades for systems are desired, or software not in a standard repository exists and provisioned systems desire to know about that repository.","According to exemplary aspects, the cobbler server  can also keep track of the status of kickstarting machines. For example, the \u201ccobbler status\u201d will show when the cobbler server  thinks a machine started kickstarting and when it last requested a file. This can be a desirable way to track machines that may have gone inactive during kickstarts. The cobbler server  can also make a special request in the post section of the kickstart to signal when a machine is finished kickstarting.","According to exemplary aspects, for certain commands, the cobbler server  will create new virtualized guests on a machine in accordance with orders from the cobbler server . Once finished, an administrator can use additional commands on the guest or other operations. The cobbler server  can automatically name domains based on their MAC addresses. For re-kickstarting, the cobbler server  can reprovision the system, deleting any current data and replacing it with the results of a network install.","According to exemplary aspects, the cobbler server  can configure boot methods for the provisioning requested by the user. For example, the cobbler server  can configure a PXE environment, such as a network card BIOS. Alternatively, the cobbler server  can compile and configure information for koan client . The cobbler server  can also optionally configure DHCP and DNS configuration information.","According to exemplary aspects, the cobbler server  can serve the request of the koan client . The koan client  can acknowledge the service of information of the cobbler server  and can then initiate installation of the software being provisioned. Additionally, the koan client  can either install the requested software, e.g., replace the existing operating system, or install a virtual machine.",{"@attributes":{"id":"p-0052","num":"0051"},"figref":["FIG. 2","FIG. 2"],"b":["100","102","115","120","115","115","102"]},"As shown in , the network  can include a number of target machines . For example, the target machines  can include a group of server computers, such as blade servers. The target machines  can include computing systems such as servers, personal computers, laptop computers, etc. In embodiments, the target machines  can include hardware typically found in conventional computing systems (processors, memory, video cards, network interface cards, storage devices, and the like).","In embodiments, the cobbler server  can be configured to provide provisioning processes for software distributions utilizing provisioning objects as described above. In the provisioning processes for software distributions, the cobbler server  installs a particular software distribution on a target machine  utilizing the provisioning objects such as profiles and templates.","In embodiments, the provisioning objects can include all the data required by a cobbler server to perform the software provisioning processes, such as the process described above, supported by the cobbler server For example, the provisioning objects can include software distributions; configuration templates (templates for generating configuration files, such as kickstart files); distribution profile information (mapping a distribution to profile; a configuration template or a configuration file, and additional preferences, such as kernel options, template variables, or virtual machine settings); target machine information (information representing the mapping of a physical piece of hardware, plus hardware specific customizations, to a profile that it should run); repos information (information representing external or internal software repositories stored on the cobbler server); images (such as distributions representing an undefined executable image (like \u201cmemtest\u201d); a virtual machine to be cloned, or an ISO file for use in installing a virtual machine); and the like.","In embodiments, the cobbler server  can be configured to maintain a library  of virtual images  and configured to perform provisioning processes utilizing virtual images  from the library  on the target machines . Each virtual image  can be a disk image of software that has been previously installed according to metadata. As such, the virtual image  can consist of the bits of the installed software. The software, contained in the virtual image , can include any number and type of applications and portions of an OS to support the applications. The cobbler server  can be configured to maintain the virtual images  in the library , a location of the virtual images  in the library  (if the virtual images  are stored remotely), or combinations thereof. The cobbler server  can be configured to maintain the library  in any type of storage device or system (CD, DVD, hard drive, portable storage memory, database etc.) whether local to the cobbler server  or remotely located.","In embodiments, the metadata, associated with a virtual image , can include parameters such as types of hardware or resources associated with the virtual image (processors, memory, storage, network interfaces, etc.), amount of hardware or resources associated with the virtual image (the amount of memory associated with the virtual image, the amount storage associated with the virtual image, etc.), configuration of the hardware or resources (the network settings for the virtual image, etc.), and the like. These parameters, contained in the metadata, can represent the parameters utilized to create the virtual image  and the parameters required to provision the virtual image  on a target machine .","In embodiments, to support provisioning the virtual images , the cobbler server  can be configured to maintain a set of virtual image records . The set of virtual image records  contains one or more virtual image records  associated with each virtual image  in the library . A virtual image record  can be configured to contain an identification of a particular virtual image , with which it is associated, and the metadata associated with the particular virtual image . Additionally, a particular virtual image  can be associated with multiple virtual image records . Each of the multiple virtual image records , associated with a particular virtual image , can contain different metadata representing different parameters utilized to create the particular virtual image  and the different parameters required to provision the particular virtual image  on a target machine . The cobbler server  can be configured to utilize the set of virtual image records  for provisioning the virtual image  on the target machines .","In embodiments, the virtual images  contained in the library  can originate from a variety of sources. The cobbler server  can be configured to generate the virtual images  and the virtual image records  associated with the generated virtual images . For example, the cobbler server  can be configured to communicate with a storage device . The storage device  can be any type of storage device or system (CD, DVD, hard drive, portable storage memory, database etc.) whether local to the cobbler server  or remotely located. To generate the virtual image , the cobbler server  can be configured to select a particular software distribution to install and determine the metadata for the virtual image . The metadata can be based on the parameters required by the particular software distribution. Once selected, the cobbler server  can be configured to install the particular software distribution on the storage device  according to the metadata.","In embodiments, after installation of the particular software distribution, the cobbler server  can be configured to copy the data (e.g. image of the bits) for the installed software distribution and configured to store the copy in the library  as the virtual image . Alternatively, the cobbler server  can be configured to store a location of the virtual image  in the library , if the virtual image is stored remotely. Likewise, the cobbler server  can be configured to store the metadata as a virtual image record  in the set of virtual image records .","In the embodiments as described above, the cobbler server  can generate the virtual image . Also, the cobbler server  can be configured to receive a virtual image  from an external source and store the virtual image  in the library . Also, the cobbler server  can be configured to receive metadata or a virtual image record  from an external source in order to generate a virtual image  or to associate with a received virtual image .","In embodiments, the cobbler server  can be configured to provision any of the virtual images  stored in the library  to any of the target machines . To achieve this, the cobbler server  can be configured to select a virtual image  from the library . After selecting the virtual image , the cobbler server  can be configured to determine the associated virtual image record  from the set of virtual image records . To determine the associated virtual image record , the cobbler server  can be configured to search the set of virtual image records  in order to locate the virtual image records  that contain the identification of the selected virtual image .","In embodiments, after selecting the virtual image  and determining the associated virtual image record , the cobbler server  can be configured to provided the selected virtual image  and the associated virtual image record  to the target machine  subject to the provisioning. To provide both, the cobbler server  can be configured to instruct the koan client  to retrieve the virtual image  and the associated image record . Likewise, the cobbler server  can be configured to provide the virtual image  and associated virtual image record  directly to the koan client .","In embodiments, after the virtual image  and the associated virtual image record  has been provided, the cobbler server  can be configured to instruct the koan client  to instantiate the virtual image  on the target machine . The koan client  can be configured to examine the associated virtual image record  to determine the metadata for the virtual image . Then, the koan client  can be configured to copy the virtual image  to a storage device that meets the parameters of the metadata. Additionally, the koan client  can configure the target machine , as necessary, according to the metadata of the virtual image record  in order to facilitate proper operation of the virtual image .","In the embodiments, as described above, the cobbler server  can be configured to operate in conjunction with the koan client  to provision the virtual image . Additionally, the cobbler server  can be configured to provision the virtual image, independently. To achieve this, the cobbler server  can be configured to examine the associated virtual image record  to determine the metadata for the virtual image . Then, the cobbler server  can be configured to copy the virtual image  to a storage device that meets the parameters of the metadata. Additionally, the cobbler server  can configure the target machine , as necessary, according to the metadata of the virtual image record  in order to facilitate proper operation of the virtual image .","In embodiments as described above, the virtual image  can be instantiated according to the virtual image record , as stored in the set of virtual image records . Additionally, the cobbler server  can be configured to alter the metadata of the virtual image record  prior to instantiating the virtual image . As such, the cobbler server  can tailor the instantiation of the virtual image  for the target machines .","In embodiments, the cobbler server  can initiate provisioning a virtual image  upon the occurrence of a number of events. The cobbler server  can be configured to receive a request to provision a particular virtual image . The request can originate from any source such as a target machine , a user of a target machine , an operator of the cobbler server , or any other source. Additionally, the cobbler server  can be configured to automatically initiate provisioning a virtual image . For example, the cobbler server  can initiate provisioning of a virtual image  when a new target machine  is added to the network , when a target machine  experiences errors or catastrophic failure, and the like. For instance, the cobbler server  can provide a virtual image , comprising a basic OS and applications, so that the new target machine  will include basic software to operate.","In embodiments, the cobbler server  can be configured to associate the virtual images  and the associated virtual image records  with other provisioning objects. For example, the cobbler server  can be configured to associate a particular virtual image  and associated virtual image records  with the a system record for a particular target machine . As such, when a provisioning process is initiated for the virtual image  associated with the system record, the cobbler server  can be configured to utilize the information in the system record (identification of the target machine , resources of the target machine , etc.) in the provisioning process.",{"@attributes":{"id":"p-0069","num":"0068"},"figref":"FIG. 3","b":["300","115","102","300","302","304","308","308","302","120","300","120","300","102","120"]},"Processor  further communicates with network interface , such as an Ethernet or wireless data connection, which in turn communicates with one or more networks , such as the Internet or other public or private networks. Processor  also communicates with the provisioning database , and the cobbler server , to execute control logic and perform the virtual image processes described above and below.","As illustrated, the cobbler server  can be implemented as a software application or program capable of being executed by a conventional computer platform. Likewise, the cobbler server  can also be implemented as a software module or program module capable of being incorporated in other software applications and programs. In either case, the cobbler server  can be implemented in any type of conventional proprietary or open-source computer language.",{"@attributes":{"id":"p-0072","num":"0071"},"figref":"FIG. 4","b":["100","402","404","102","215","215","210","102","215","102","230"]},"After installation of the particular software distribution, the cobbler server  can copy the data (e.g. image of the bits) for the installed software distribution and store the copy in the library  as the virtual image . Likewise, the cobbler server  can store the metadata as a virtual image record  in the set of virtual image records .","In , the cobbler server  can optionally receive one or more virtual images  from external sources and store the virtual images  in the library . For example, the cobbler server  can receive a virtual image  from an external source and store the virtual image  in the library . Also, the cobbler server  can receive metadata or a virtual image record  from an external source in order to generate a virtual image  or associate with a received virtual image .","In , the cobbler server  can initiate provisioning a virtual image  on a target machine . The cobbler server  can initiate provisioning a virtual image  upon the occurrence of a number of events. For example, the cobbler server  can receive a request to provision a particular virtual image . The request can originate from any source such as a target machine , a user of a target machine , an operator of the cobbler server , or any other source. Additionally, the cobbler server  can automatically initiate provisioning a virtual image .","In , the cobbler server  can determine a virtual image record  associated with the virtual image  to be provisioned. For example, to determine the associated virtual image record , the cobbler server  can search the set of virtual image records  in order to locate the virtual image records  that contain the identification of the virtual image .","In , the cobbler server  can provide the virtual image  to the target machine . For example, the cobbler server  can instruct the koan client  to retrieve the virtual image  and associated virtual image record . Likewise, the cobbler server  can be configured to provide the virtual image  and associated virtual image record  directly to the koan client . Additionally, the cobbler server  can provide the virtual image  to the target machine without utilizing the koan client .","In , the cobbler server  can instantiate the virtual image  on the target machine . For example, the cobbler server  can instruct the koan client  to instantiate the virtual image  on the target machine . The koan client  can examine the associated virtual image record  to determine the metadata for the virtual image . Then, the koan client  can copy the virtual image  to a storage device that meets the parameters of the metadata. Additionally, the koan client  can configure the target machine , as necessary, according to the metadata of the virtual image record  in order to facilitate proper operation of the virtual image .","Additionally, the cobbler server  can instantiate the virtual image , independently. The cobbler server  can examine the associated virtual image record  to determine the metadata for the virtual image . Then, the cobbler server  can to copy the virtual image  to a storage device that meets the parameters of the metadata. Additionally, the cobbler server  can configure the target machine , as necessary, according to the metadata of the virtual image record  in order to facilitate proper operation of the virtual image .","In , the process can end, but the process can return to any point and repeat.","While the invention has been described with reference to the exemplary embodiments thereof, those skilled in the art will be able to make various modifications to the described embodiments without departing from the true spirit and scope. The terms and descriptions used herein are set forth by way of illustration only and are not meant as limitations. In particular, although the method has been described by examples, the steps of the method may be performed in a different order than illustrated or simultaneously. Furthermore, to the extent that the terms \u201cincluding\u201d, \u201cincludes\u201d, \u201chaving\u201d, \u201chas\u201d, \u201cwith\u201d, or variants thereof are used in either the detailed description and the claims, such terms are intended to be inclusive in a manner similar to the term \u201ccomprising.\u201d As used herein, the term \u201cone or more of\u201d with respect to a listing of items such as, for example, A and B, means A alone, B alone, or A and B. Those skilled in the art will recognize that these and other variations are possible within the spirit and scope as defined in the following claims and their equivalents."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["Various features of the embodiments can be more fully appreciated, as the same become better understood with reference to the following detailed description of the embodiments when considered in connection with the accompanying figures, in which;",{"@attributes":{"id":"p-0006","num":"0005"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 4"}]},"DETDESC":[{},{}]}
