---
title: Database linking system
abstract: A method for linking database table elements across a plurality of databases is provided. The method comprises submitting a query to a first database specifying a first data element and a second data element, wherein the second data element resides in a table in the first database and determining that a table containing the first data element specified in the query is not present in the first database, a component resident in the first database sending a message to a second database requesting identification of tables containing data element associations that include the first data element, connecting a data element association across the first and second databases to identify at least one linking path between the first data element and the second data element, and selecting one of the linking paths of data element associations to link the first data element and the second data element and executing the query.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08316045&OS=08316045&RS=08316045
owner: Sprint Communications Company L.P.
number: 08316045
owner_city: Overland Park
owner_country: US
publication_date: 20090210
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","STATEMENT REGARDING FEDERALLY SPONSORED RESEARCH OR DEVELOPMENT","REFERENCE TO A MICROFICHE APPENDIX","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["None.","Not applicable.","Not applicable.","Information processed by multiple applications in large organizations may become spread over distant and disparate databases. Redundancy and synchronization of data may become problems when applications using the data are controlled by different groups within an organization. Issues may arise regarding which of several data sources is authoritative. Management may lose track of what data exists in the organization.","In an embodiment, a method for linking database table elements across a plurality of databases is provided. The method comprises submitting a query to a first database specifying a first data element and a second data element, wherein the second data element resides in a table in the first database and determining that a table containing the first data element specified in the query is not present in the first database. The method also comprises a component resident in the first database sending a message to a second database requesting identification of tables containing data element associations that include the first data element. The method also comprises connecting a data element association across the first and second databases to identify at least one linking path between the first data element and the second data element. The method also comprises selecting one of the linking paths of data element associations to link the first data element and the second data element and executing the query.","In another embodiment, a method for linking database table elements across a plurality of databases is provided. The method comprises submitting a query to a first database wherein a first data element is specified as the query result and a second data element needed to execute the query is resident in the first database. The method also comprises determining that a table including the first data element is not resident in a table in the first database. The method also comprises a software shim component in the first database submitting a request to a second database for data element associations between table columns in the second database that enables linkage of the first data element with the second data element. The method also comprises determining that the first data element is not resident in a table in the second database. The method also comprises a software shim component in the second database submitting a request to a third database for data element associations between table columns in the third database that enables linkage of the first data element with the second data element and determining that the first data element is resident in a table in the third database. The method also comprises a software shim component in the third database determining that at least one combination of data element associations contained in tables in the third database, second database, and the first database link the first data element with the second data element. The method also comprises sending a message containing the at least one combination of data element associations to the software shim component in the first database. The method also comprises the software shim component in the first database providing the location of the first data element to a database management system, the first data element accessible via a selected one of the determined combinations of data element associations across the databases. The method also comprises the database management system using the selected combination of data element associations to access the first data element.","In another embodiment, a method for linking database table elements across a plurality of databases is provided. The method comprises sending a message to databases requesting table association linkages between data elements to discover at least one series of linkages across databases mapping a data element specified in a query result to a data element needed to execute a query. The method also comprises receiving and analyzing a first reply from the databases containing mappings of data elements described in tables in the databases. The method also comprises sending a second message to a second database requesting data element associations, the second database selected as recipient of the second message based on information contained in the first reply. The method also comprises receiving and analyzing second replies from the second database containing further mappings between data elements resident in tables in the second database. The method also comprises combining the mappings of the data elements provided in the first reply with the mappings of the data elements provided in the second reply to discover linking paths across databases associating the data element specified in the query result with the data element needed to execute the query. The method also comprises caching for a predefined period of time the paths of data element associations across databases that permitted the linking of the data element specified in the query result with the data element needed to execute the query. The method also comprises creating a topology of cached linkages of data element associations across databases. The method also comprises publishing the topology for use by trusted databases when processing queries wherein the data element specified in the query result and the data element needed to execute the query are not directly mapped to each other.","These and other features will be more clearly understood from the following detailed description taken in conjunction with the accompanying drawings and claims.","It should be understood at the outset that although illustrative implementations of one or more embodiments are illustrated below, the disclosed systems and methods may be implemented using any number of techniques, whether currently known or in existence. The disclosure should in no way be limited to the illustrative implementations, drawings, and techniques illustrated below, but may be modified within the scope of the appended claims along with their full scope of equivalents.","Several embodiments of a database linking system permit a database management system to extend the reach of a query across a plurality of databases and to access data elements located in adjacent and distant databases. The system implements a component in each database to communicate with other databases and identify data element associations in tables across the databases. The system permits each database to share access to data element associations in its own database tables with neighboring databases and build a topology of table element association linkages across databases. In an embodiment, the system is able to extend the reach of the query across a plurality of disparate databases having different database management systems.","Topologies comprise networks of linkages of database table element associations across a plurality of databases. The use of topologies permits interconnected database elements to become available to each database within a trusted group of databases. A query to one database effectively becomes a query to all databases within a trusted group. The system taught by the present disclosure effectively permits linkages of table element associations to be discovered and stored in topologies and the topologies shared among the group of databases.","A database table associates two or more data elements in table columns. In an embodiment, commonly occurring data element such as account number for a mobile phone supplier may be separately associated with other data elements such as customer name, subscription plan, and equipment type in three different databases. While the account number data element is associated directly with each of those three other data elements in three separate databases, it may be difficult to associate any of those three other elements directly with each other, for example to generate a table associating some or all customer names with their corresponding equipment type. The present disclosure provides for this direct association between table elements.","In another embodiment involving the same data elements in a different arrangement, the account number may be associated with customer name in a first database, customer name may be associated with subscription plan in a second database, and subscription plan may be associated with equipment type in a third database. A query to the first database seeking equipment type based on account number would previously fail as the equipment type data element is not found in the first database. In an embodiment, the present disclosure teaches how linkages of data element associations to be discovered across a plurality of databases in a trusted group, promoting the query described above to be executed successfully. A query submitted to the first database may result in messages sent to the other databases. The equipment type data element may be found in the third database and table associations linking equipment type to other data elements and eventually back to account number in the first database may establish the linkage and permit the query to the first database to be successfully executed.","In an embodiment, the present disclosure teaches how databases may discover and store a plurality of such data element linkages across databases in topologies. In an embodiment, a shim component is provided that promotes individual databases to build and share their topologies with other trusted databases. In an embodiment, a shim component resides in each database and stores only the column headings or field names describing the listed data elements in each table within the host database and in databases with which the host database exchanges information in shared topologies. When a linkage of individual data elements is needed to execute a query but cannot be found in a stored topology, shim components may send queries to shim components in other databases to discover paths of data element associations that permit the data elements in a query to be linked. Each database may eventually become aware of the database in the group it can go to for retrieval of the needed information.","Shim components in associated databases may use a common application programming interface to learn and share information. In an embodiment, shim components may observe a common policy to resolve issues when a desired data element is located in two or more different database tables or if a specific data element in two or more places does not have the same value. In an embodiment, a system of metrics may be used to choose between multiple viable paths to desired data elements. For example, metrics may be used to determine the most cost effective path between data elements. Alternatively, the choice between multiple viable paths to desired data elements may be made based on a preferred database and\/or a higher level of trust and\/or security associated with one of the paths. In an embodiment, shim components within a trusted group may appoint a shim component in a particular database to represent and protect the group when external components seek association with data elements in databases inside the trusted group or when databases in the group may need to establish an association with an external database.","Turning now to , a system  of dynamically matrixed database linking is provided. The system  comprises a database management server , a database management system , an abstraction component , a database , a database table , a shim component , a database application server , a database application , a client device , and a network . In some embodiments, additional shim components , , additional databases , , additional database tables , , and additional client devices  will be present and active in the system . Attributes and functionality described with reference to the shim component  are representative of the attributes and functionality of the additional shim components , . Attributes and functionality described with reference to the database  may be taken to be representative of the attributes and functionality of the additional databases , . Attributes and functionality described with reference to the database table  may be taken to be representative of the attributes and functionality of the additional database tables , . Attributes and functionality described with reference to the client device  may be taken to be representative of the attributes and functionality of the additional client device .","The database management server  may be a computer system. Computer systems are discussed in greater detail hereinafter. The database management server  may comprise one computer or a plurality of computers, for example, a server farm wherein many server computers cooperate to share a processing load. The database management server  may comprise a plurality of computers that are located at different places, for example, to provide geographical diversity and increased service reliability. The database management server  executes one or more applications that provide services to the client devices ,  including hosting of the database management system  and the abstraction component .","The database management system  is computer software designed for the purpose of managing the databases , , . The database management system  controls the organization, storage, management, and retrieval of data in the databases , , .","The abstraction component  abstracts the details of the dynamically matrixed database linking system from the database management system , the database application , and the client devices , . When a database application  submits a query to the database management system  and a data element needed to execute the query is located in a different database ,  than the database  to which the query was submitted, the query initially may be held in a suspended state by the abstraction component . This state lasts until the necessary data elements can be located in at least one database ,  and the path between the data elements needed by the query is determined and provisioned. The abstraction component  abstracts or hides these actions from the database application  and the database management system . The abstraction component  may avoid an error being returned to the database management system  when the database  to which the query was submitted does not contain all of the needed data elements and searching stored topologies and querying other databases ,  becomes necessary. The abstraction component  makes a query submitted to a database  that is a member of a group of databases , ,  using the functionality of the system  to appear as a query to the database  only. The abstraction component  conceals the operation of the shim components , ,  as they search their stored topologies, query other databases , , , and determine the path of data element associations across databases , ,  to allow the query to be executed. In an embodiment, the database management system  and the database application  may not directly interact with the abstraction component  and shim components , ,  and may be unaware that their query may be extended across multiple databases , , . The abstraction component  prevents the database management system  from making contact with the shim components , , . The shim components , ,  may appear to the database management system  and other components of the system  as database tables.","The abstraction component  also coordinates communication between shim components , ,  when the shim components , ,  exchange topology information and issue requests to discover new paths between data elements across databases to assist in the execution of a query. When it is determined that the data elements needed to execute a query are not all located in the database  to which the query was submitted, the shim component  in the initially queried database  may determine that it needs to communicate with shim components ,  in other databases , . The other shim components ,  may have linkages of data element associations stored in their topologies that the querying shim component  may use to complete its query. Shim components ,  in additional databases ,  may assist the originating shim component  in forwarding queries to a larger population of databases to locate the needed data element and determine a path of data element linkages back to the shim component  in the originating database . In an embodiment, one or more shim components , ,  may serve in a gateway shim component role. In this role, the gateway shim component represents the trusted group in sending queries to databases external to the trusted group and in receiving queries from external components.","The shim component  may appear as a database table to other components of the database  as well as to the database management system . The shim component  may communicate with other shim components , . Shim components , ,  may exchange a variety of data and instructions as the shim components , ,  may need to locate optimal paths between remotely located data elements, resolve issues that may arise during the locating and sharing of data, and build, update, and exchange topology information. Shim components , ,  also may need to communicate when a desired data element is located in more than one database or when a data element found in multiple databases is likely the same data element but has different names. The abstraction component  may coordinate the communication between shim components , , . The role of the abstraction component in coordinating this communication is implicit in discussion henceforth about shim components , ,  interacting with each other and in shielding the database management system  from being party to or aware of any of these communications.","The abstraction component  also provides the database management system  with the provisioning stream of data element associations after the optimal path across databases , ,  has been determined. The provisioning stream is the path to the desired data element that permits the query to be executed. In an embodiment, the database management system  is only aware that it has submitted a query to a database . The actions of the abstraction component , the shim components , , , and any other components in determining and provisioning the path between data elements are not visible to the database management system . When the path is determined and provided to the abstraction component , the abstraction component  makes this path between elements available to the database management system  in a manner that hides the details of the access process from the database management system . The abstraction component  may insert a parameter or instruction into a query that when executed by the database management system  redirects a data access action to a different database ,  that is not visible to the database management system .","The database , ,  is a structured collection of records containing data in data tables , , , respectively. The database , ,  stores and makes information available to the database application  through the database management system  installed on the database management server  and possibly other server computers that may execute applications unrelated to the system .","Data tables , ,  are contained within the databases , , , respectively, and are the structures used to store individual data elements. Each vertical column in a table stores one row of data and all of the data values in a column store the same type of data. A data element is the name of the data values in a column, for example account number or user name. Data elements are all of the data values, for example the user names and account numbers listed in columns entitled \u201cuser name\u201d and \u201caccount number\u201d, respectively. A table may have a column entitled \u201cuser name\u201d and next to it another column entitled \u201caccount number.\u201d The two columns together may comprise a series of associations between the two data elements.","The shim component , ,  is a software component executing on database servers associated with the databases , , , respectively. The shim component  is aware of what is contained in its own database  and the relationships between fields in its own database . The shim component  also recognizes when a query that has been submitted to its host database  may require a data element that is not resident in a table in the host database . The database  with which the shim component  is associated may receive a query from the database management system  specifying a data element that is not resident in a table in the database  or is resident in a table in the database  but cannot be linked to the other data element or elements in the query permitting the query to successfully execute. The shim component  works with shim components ,  in other neighboring and trusted databases ,  to locate data element associations between tables in those databases ,  that may link together in a series or chain of data element associations permitting the query to execute. The shim component  permits a database application  to query broader sources of data by permitting a query submitted to one database  to effectively be a query to multiple databases , , . The shim component , ,  promotes an active relationship between all of the databases , ,  to rapidly and economically retrieve the desired information without involving the database management system , database application , or client devices , . The shim component  henceforth may be referred to as the first shim component , the shim component  henceforth may be referred to as the second shim component , and the shim component  henceforth may be referred to as the third shim component .","The shim component  comprises a communications component  that communicates with the abstraction component  when all of the data elements needed to execute a query are not resident in data table  in the host database  and contact with additional databases ,  is necessary to locate the needed data element. Without the presence of the communications component  and its interaction with the abstraction component , the database  would reply back to the database management system  that at least one data element specified by the query was not found. The database management system  would then fail the query and deliver an error message back to the database application . The communications component  also exchanges advertisement messages with other shim components ,  that share the topologies they have assembled. Advertisement messages may also notify databases , ,  of table element changes, such as a deletion or renaming of a table column, with advice that the databases , ,  may need to update their stored topologies. The shim component  may also advise other shim components ,  that it has learned of a new path of data associations between two data elements across a group of databases , , . That advice may prompt the recipient shim components ,  to update their own stored topologies with the newly discovered path.","The shim component  may use the communications component  to determine how the shim component  should communicate with shim components ,  in other databases ,  when a stored topology does not contain any known path to a required data element. Shim components , ,  exchange inquiries about the location of data elements in various databases , ,  and the table relationships between data elements that may provide the needed path of data element associations. Querying to locate a data element in a database ,  that may be distant and conducting recursive or referral-type interaction with other components to locate the best path to the desired data element may involve a series of exchanges between a number of components along the way before the path is established and the query may be executed.","The communications component , ,  may use a protocol exclusive to the present disclosure that allows the shim components , ,  to communicate with each other via the abstraction component . The protocol may provide certain connectors for tables and other components of the databases , ,  to access the functionality of the shim components , , .","The shim component , ,  also comprises the topology component , ,  that receives data element paths discovered by the shim component  of the host database  or sent to it by shim components ,  of other databases , . The topology component , ,  builds a topology or map of networked data element paths between data elements located across a plurality of databases in a trusted group of databases , ,  and perhaps including external databases. Topology components , ,  in shim components , ,  share all or portions of their topologies with each other and send advertisements with updates and new additions to their stored topologies. Shim components , ,  dynamically build their own topologies based on paths they discover in the course of their own query processing. The topology component , ,  also may make determinations about the path of associations to take between data elements when more than one path is available. The topology component , ,  may also record paths to data elements that are located in reliable data sources distant from the databases , ,  such as sources provided by vendors of well known technologies and public sites such as the Local Exchange Routing Guide (LERG) used by telecommunications providers.","Some well constructed topologies may provide a snapshot of all databases , ,  to each database , ,  in a trusted group and allows each to know where all databases , ,  are located and what other databases , ,  can be reached from each. A well constructed topology is also periodically edited by the topology component , ,  to remove data element associations that are not used or only occasionally used by the host database , , . A topology is not intended to become a substantial database on its own that may eventually become large and difficult to manage. A database , ,  only needs to store or cache data association paths that it uses on a regular basis to assist in executing queries. The topology component , ,  periodically reviews its stored topology and discards data association paths that the hosting database , ,  does not regularly use. How topologies are constructed and used depends on the level of intelligence desired for the shim components , , . In one embodiment, a shim component  may store only its own known data association paths and those of the shim components ,  in its neighboring databases , . Should the need arise to locate a data element in a more distant database, the process of conducting recursive or referral queries to those distant databases may involve several steps. In another embodiment, each shim component , ,  may store the entire topology for the trusted group of databases , , . Various factors may impact decisions on how topologies are constructed, stored, periodically pruned, and shared between shim components , , . These factors may comprise the quantity and structure of databases , ,  in a trusted group, the frequency of need for access to data elements that may require queries across databases , , , the costs of processing data element queries, and the costs of storing topology information in databases , , . A party considering these factors must weigh the storage costs of accumulating data element association path information in a topology against the processing costs of instructing databases , ,  to regularly send information back and forth between each other.","The shim component , ,  also comprises the resolution component , ,  that resolves issues that may arise during the interactions of shim components , ,  among themselves and with the abstraction component . A desired data element may be accessible by two or more valid paths of data element associations across databases , , . The resolution component , ,  selects the preferred path at the time a query has been submitted depending on the cost of reaching and accessing the desired data element using each available path. The resolution component , ,  also may determine the path to a desired data element by locating the desired data element in a database of record, a database  determined to be highly secure, reliable, and\/or accessible and used as the default location by the system  for that data element. The resolution component , ,  also may take into account the reliability of the links between the components in a proposed path of data element associations to a desired data element when considering data element paths. The cost of each available path may depend on database activity and network traffic at the time the query is being processed. The resolution component , ,  also may be engaged if a valid path to a desired data element is found but the desired data element has a different name than expected or has a vastly different value than expected, thus raising suspicion about the integrity of the data. The resolution component , ,  may intercede when a previously known valid path to a desired data element for any reason fails and an alternative path must be determined. When two or more databases , ,  exchange topologies, there is a risk that the information in the exchanged topologies may conflict and the resolution component , ,  may be engaged to resolve the conflict.","The resolution component , ,  may make or contribute to determinations about the construction, storing, editing, updating, and sharing of data association paths and topologies within and between shim components , , . When information within topologies is not used for a predetermined amount of time, that information may be archived and eventually discarded. When new data association paths between databases , ,  are discovered or table headings within databases , ,  undergo changes, that information should be shared with other shim components , , . The resolution component , ,  determines when and how this information is disseminated across components in the system .","In embodiments wherein a large quantity of databases , ,  and database tables , ,  are in operation, such as in a large corporation or government body, it is conceivable that two or more data table columns in different databases , ,  that contain the same data element may receive different names. For example, a column in database table  in database  that contains the internet protocol address data element may be given the name \u201cIP address\u201d while a highly similar or identical column in database table  of database  that also contains the same Internet protocol address data element may be given the name \u201cIP addr\u201d. This situation could hinder the successful accessing of data elements and prevent properly constructed queries from executing as shim components , ,  contain only column names. The resolution component , ,  uses the protocol previously discussed to resolve these types of issues so that mappings may be stored between disparately named columns such as \u201cIP address\u201d and \u201cIP addr\u201d and queries successfully execute. In an embodiment, such mappings may have to be manually created and reviewed by parties responsible for overseeing the operation of components of the system . These activities may comprise the construction and periodic editing of meta-tables that contain and standardize these mappings between disparately named columns of similar or identical data elements.","The present disclosure contemplates the standardization of database table column headings to avoid nomenclature conflicts of the type described above. The present disclosure also contemplates standardization of data characteristics of data elements. For example, all data elements in database table columns containing internet protocol addresses may comprise a maximum of twelve numeric characters representing standard thirty-two bit internet protocol addressing, for example 122.45.22.220 or 255.255.255.254 or a maximum of thirty-two alphanumeric characters representing the expanded 128 bit internet protocol addressing, for example Odb8:85a3:0000:2001:0000:8a2e:0370:7334.","The resolution component , ,  also makes determinations about how shim components , ,  trust and communicate with each other through the abstraction component  and with components of their host databases , , . In a large group of databases , , , not all shim components , ,  may be allowed to freely communicate with all other shim components , ,  or send broadcasts or multicasts across the databases , , . The bandwidth of networks hosting the databases , ,  may be limited and during busy times the networks may carry the large volumes of data typically generated by database operations. Networks of databases , ,  may not always be able to accommodate broadcasts by shim components , ,  conducting recursive and referral-based queries. The resolution component , ,  may construct a hierarchy of permissions dictating levels of privilege for communication between shim components , ,  to streamline communication and assist in reducing network traffic, in particular during times of heavy network use.","The resolution component , ,  also may make determinations about the shim components , ,  that are authorized to communicate with components, for example databases, that are situated outside a group of trusted databases , , . In an embodiment, executing a query may require accessing a data element and determining a path to a data element that involves databases of uncertain data integrity and security. Conversely, in another embodiment, a database or other component external to the trusted group of databases , ,  may request access to a data element inside the trusted group. In both cases, one or more shim components , ,  in the trusted group may be appointed to serve as the gateway or border component to provide access and security in either or both the inbound and outbound aspects of these activities. The resolution component , ,  performs the duties of appointing and overseeing the shim component(s) , ,  handling these responsibilities.","The resolution component , ,  may also resolve conflicts arising from different versions of database management system  submitting queries to the databases , , . A database , ,  may be able to accept queries from database management system  provided by two or more different vendors. The resolution component , ,  resolves conflicts arising from differences between query structure and query execution details required by the different vendors.","The database application server  may be a computer system. The database application server  may comprise one computer or a plurality of computers, for example a server farm wherein many server computers cooperate to share a processing load. The database application server  may comprise a plurality of computers that are located at different places, for example to provide geographical diversity and increased service reliability. The database application server  executes one or more applications that provide services to the client device  including the database application .","The database application  is a software application that executes on the database application server . The client device  uses the database application  to draw data from the database  and process the data per the instructions of the client device . The database application  originates and submits queries to the database management system  in accordance with instructions entered by the client device . Developers of database applications  commonly create frameworks or templates for queries that client devices  invoke when making choices within a database application . The database application  receives the request from the client device  and constructs a query based on the template created by the application developer and instructions or parameters supplied by the client device . The database management system  receives the query from the database application  and uses the query instructions to access the database . In an embodiment, the database application  and database management system  may reside on the same physical computer, in which case the database management server  and the database application server  are not separate devices.","The client device ,  is a device with the capacity to access the database application  on the database application server  using the network , furnish queries, and otherwise seek information from the database . The client device ,  may have client software installed to work with the database application . In an embodiment, the client device ,  may bypass the database application  and make direct contact through the network  with the database management system . In such an embodiment, the user of the client device ,  may be creating custom queries for processing by the database management system .","The network  promotes communication between the components of the system . The network  may be any communication network including a public data network (PDN), a public switched telephone network (PSTN), a private network, and\/or a combination thereof.","Turning now to , a method  of linking database table elements across a plurality of databases , ,  is provided. Reference also is made to  that depicts a detailed view of the databases , ,  with their respective database tables , ,  depicted in an expanded view and their respective shim components , ,  depicted in a collapsed view. The column names shown in the database tables , ,  are examples and have been inserted for discussion purposes. There is no difference in functionality between components depicted in  and components depicted in . The database tables , ,  shown in  have been provided example column names for data elements that might appear in databases , ,  used by a telecommunications service provider. In database table , the acronym IP address stands for the data element internet protocol address. In database table , the acronym NAI stands for network access identifier. In some contexts herein, the database  may be referred to as the first database , the database  may be referred to as the second database , and the database  may be referred to as the third database .","At block , the database management system  submits a query to the first database . In an embodiment, the query submitted is \u201cSELECT NAI where hardware=x\u201d. The query is requesting a listing of network access identifiers corresponding to hardware identifications equating to x, wherein x is a set of hardware identifications. As described in block , network access identifier is the first data element and hardware identification is the second data element. In the event the data elements network access identifier and hardware identification were located in the same database table, the query may execute with no assistance from components of the present disclosure.","At block , it is determined that the first data element, network access identifier, is not present in a data table  in the first database . This may occur when the database  attempts to execute the query and cannot find the network access identifier in the data table . The database  may generate and send an error message to the database management system  which the abstraction component  intercepts.","At block , the abstraction component  notifies the shim component  that a query has been submitted to the first database  wherein the desired query result specifies a data element, network access identifier, that is not present in the first database . The shim component  begins by searching its own stored topology of data association paths to determine if it has a stored path from the second data element, hardware identification, which is resident in database table , to the first data element, network access identifier, which is not resident in database table . If the shim component  finds such a path in its stored topology, it provides the path to the abstraction component  which provisions the path for the query, and the query executes. When it finds that it does not have such a path in its stored topology, the shim component  sends messages via the abstraction component  to the shim components ,  in databases , , respectively, requesting their assistance in locating at least one path of data element associations from the second data element, hardware identification, to the first data element, network access identifier, that may be located somewhere in a database table , .","At block , the shim components ,  begin as shim component  did by checking their topologies previously stored. They also check their own database tables ,  and shim component  discovers that the network access identifier is in fact a data element in database table . The shim components , ,  then query each other via the abstraction component  to find a data element linkage from network access identifier in database table  to hardware identification in database table . Through querying, the shim components , ,  discover that network access identifier is associated with internet protocol address in database table  in database , internet protocol address is associated with hostname in database table  in database , and hostname is associated with hardware identification in database table  in database . The needed linkage of data element associations has been found. All of these communications between shim components , ,  have been coordinated by the abstraction component  and the discovered path of data element associations is taken by the abstraction component  for its placement with the query.","At block , if more than one path of data element associations had been discovered between the first data element, network access identifier, and the second data element, hardware identification, the resolution component , ,  would have made a determination of the preferred path to use.","At block , the query is executed. The query, which had been held in a suspended state by the abstraction component  until a path of data element associations could be found, is released for execution. When the query searches for network access identifier on the database , instead of receiving an error, the path discovered by the shim components , ,  and provisioned by the abstraction component  provides access to the network access identifier in database table  situated in database . The query executes normally as if the network access identifier was located in database  instead of database . The database management system  may never be aware of the actions that took place between the shim components , ,  and the abstraction component .","Turning now to , a method  for linking database table elements across a plurality of databases is provided. As with discussion of the method , discussion of the method  will refer to components depicted in .","At block , the database management system  submits a query to the first database . In an embodiment, the query submitted is \u201cSELECT NAI where hardware=x\u201d. NAI is an acronym representing network access identifier and is the first data element noted in block . Hardware as noted in the query represents hardware identification and is the second data element described in block .","At block , the abstraction component  receives a message that the database table  does not contain the first data element. The message is received from the database  and would result in an error being passed to the database management system  without the action of the abstraction component .","At block , the first shim component  in the first database  sends a message to the second shim component  in the second database . The message contains a request for assistance in locating data element associations in table columns in the second database  that include or point to the location of the first data element, network access identifier, and link it back to the second data element, hardware identification, that is known to exist in the first database . As with the method , this action would not take place until the first shim component  has examined the topology it currently has stored for previously determined paths of data element associations linking the data elements specified in the query.","At block , the second database  determines that the first data element, network access identifier, is not resident in a table in the second database. The second database  may also notify its own resident second shim component  as well as the first database , its resident shim component , and the abstraction component . The second database  would also have examined the topology it currently has stored for previously determined paths of data element associations.","At block , the second shim component  in the second database  submits a request to the third shim component  in the third database  requesting assistance in locating data element associations in table columns in the third database  that include or point to the location of the first data element, network access identifier, and link it back to the second data element, hardware identification. The communication at block  between the second shim component  and the third shim component  is similar or identical to the earlier communication at block  between the first shim component  and the second shim component .","The steps of the method  describe a recursive type of query process in which the second shim component  in the second database  initiates express action to assist the first shim component  in the first database  by sending its message at block  to the third shim component  in the third database . The second shim component  in effect advises the first shim component  that it, the second shim component , will attempt to locate the first data element on behalf of the shim first component . In a more realistic example, the second shim component  may send a series of requests to neighboring or distant databases requesting information about the first data element and requesting suggestions of data path associations that may permit linkages back to the second data element in the first database . The second shim component  may then receive and examine any responses received and discover and provide a final result containing a valid mapping back to the first shim component . By contrast, in a referral type of query process, the second shim component , upon receiving the message from the first shim component  at block , may refer the first shim component  to neighboring and distant databases with the first shim component  then doing the work in locating the first data element and determining a path of data associations back to the second data element.","Resuming the steps of the method , at block , having received at block  the request from the first shim component  for assistance in locating the first data element, network access identifier, the third shim component  of the third database  searches its own data table  for the first data element. The third shim component  successfully finds network access identifier in database table . The third shim component  may notify the second shim component  and the first shim component  via the abstraction component  of its success in locating the requested first data element.","At block , the third shim component  may consult its own topology or make a request to the second shim component  or other components for assistance with linking the first data element, network access identifier, via data element associations back to the second data element, hardware identification, resident in the first database . This exemplifies the recursive character of this type of query activity, finding the sought-after first data element and working back through data element associations to link it to the second data element. At block , this iterative effort and communication between the shim components , ,  via the abstraction component  locates the path of data element associations from the database table  through the database table  to the database table . The first data element, network access identifier, is successfully linked to the second data element, hardware identification.","At block , the path of data element associations discovered at block  is communicated back to the first shim component  via the abstraction component . At block , the location of and path to the first data element is provided by the abstraction component  in the query being executed by the database management system .","At block , the database management system  successfully executes the query that may involve invoking instructions or parameters inserted into or otherwise associated with the query by the abstraction component  allowing the first data element to be reached across the path of data element associations discovered at block . The database management system  may not be aware that the instructions or parameters inserted into or associated with the query by the abstraction component  involve accessing a data element not located in the first database .","Turning now to , a method  for linking database table elements across a plurality of databases is provided. As with discussion of the method  and the method , discussion of the method  may refer to components depicted in  for discussion purposes only.","At block , the first shim component  sends a message to shim components ,  located in other databases , . The message contains a request for table association linkages to discover a path of data associations across databases , ,  that may permit a query received by the first database  from the database application  via the database management system  to be executed. In an embodiment, the query received by the first database  specifies data elements wherein a first data element, network access identifier, is not located in a database table in the first database  and the query specifies a second data element, hardware identification, that is located in database table  in the first database .","At block , the first shim component  receives a first reply from the shim components ,  contacted at block  containing mappings and data element associations known to the shim components ,  that may be of assistance to the first shim component  in mapping the first data element to the second data element. The first shim component  analyzes the mappings and data element associations provided by the other shim components , . The first shim component  may use the information to update or replace its own stored topology of data element associations. The first shim component  may determine that the information received at block  combined with data association information the first shim component  was previously aware of is inadequate in establishing a mapping to the needed first data element. In an embodiment, the first shim component  may in fact discover one mapping or path of data element associations to the needed first data element but it may be at too high a cost or network policies at the present time may for network traffic reasons prohibit the accessing of the mapping and an alternate mapping must be found.","At block , the first shim component  sends a second message to additional databases not shown in  or  but may be components of the system  similar to the databases , , . Accessing these additional databases may have been suggested by analysis of the information received in the first reply received at block . The second message contains requests for assistance similar to those contained in the message contained at block .","At block , the first shim component  receives a second reply. The second reply comprises responses from the additional databases sent the second message at block . The second reply contains further mappings and data element associations known to the shim components ,  in the additional databases that may be of assistance to the first shim component  in mapping the first data element to the second data element.","At block , the first shim component  analyzes the mappings and data element associations provided by the other shim components in the additional databases and combines that information and analysis with what it learned at block  and information it previously held in its stored topology. Based on this information and analysis, the first shim component  is able to determine a path of data associations between the data elements specified in the query permitting a path to be provisioned by the abstraction component  and provided to the database management system  for execution of the query.","At block , the first shim component  caches or stores in its topology for a limited period the newly discovered path of data element associations between the data elements specified in the query. The topology component  may invoke a policy that sets the time limit within which the path of data element associations may need to be used a specified number of times or otherwise be deleted from the topology. The first shim component  may broadcast the new information out to shim components ,  in nearby databases ,  so they may update or expand their stored topologies. In an embodiment, the first shim component  may cache for a limited time only the path of data element associations needed to execute the query or it may cache all or a portion of the information received in the first reply and the second reply.","At block , if they have not already done so, the shim components , ,  build topologies of cached linkages of data element associations across databases used to execute queries when data elements are not all located in the same database. At block , the shim components , ,  periodically publish for use by each other and other components of the system  their stored topologies for use in permitting queries to be executed when the data elements specified in the queries may not all reside in the same database , , .","Some aspects of the system described above may be implemented on any computer with sufficient processing power, memory resources, and network throughput capability to handle the necessary workload placed upon it.  illustrates a typical computer system suitable for implementing one or more embodiments disclosed herein. The computer system  includes a processor  (which may be referred to as a central processor unit or CPU) that is in communication with memory devices including secondary storage , read only memory (ROM) , random access memory (RAM) , input\/output (I\/O) devices , and network connectivity devices . The processor may be implemented as one or more CPU chips.","It is understood that by programming and\/or loading executable instructions onto the computer system , at least one of the CPU , the RAM , the ROM  are changed, transforming the computer system  in part into a particular machine or apparatus having the novel functionality taught by the present disclosure. It is fundamental to the electrical engineering and software engineering arts that functionality that can be implemented by loading executable software into a computer can be converted to a hardware implementation by well known design rules. Decisions between implementing a concept in software versus hardware typically hinge on considerations of stability of the design and numbers of units to be produced rather than any issues involved in translating from the software domain to the hardware domain. Generally, a design that is still subject to frequent change may be preferred to be implemented in software, because re-spinning a hardware implementation is more expensive than re-spinning a software design. Generally, a design that is stable that will be produced in large volume may be preferred to be implemented in hardware, for example in an application specific integrated circuit (ASIC), because for large production runs the hardware implementation may be less expensive than the software implementation. Often a design may be developed and tested in a software form and later transformed, by well known design rules, to an equivalent hardware implementation in an application specific integrated circuit that hardwires the instructions of the software. In the same manner as a machine controlled by a new ASIC is a particular machine or apparatus, likewise a computer that has been programmed and\/or loaded with executable instructions may be viewed as a particular machine or apparatus.","The secondary storage  is typically comprised of one or more disk drives or tape drives and is used for non-volatile storage of data and as an over-flow data storage device if RAM  is not large enough to hold all working data. Secondary storage  may be used to store programs which are loaded into RAM  when such programs are selected for execution. The ROM  is used to store instructions and perhaps data which are read during program execution. ROM  is a non-volatile memory device which typically has a small memory capacity relative to the larger memory capacity of secondary storage. The RAM  is used to store volatile data and perhaps to store instructions. Access to both ROM  and RAM  is typically faster than to secondary storage .","I\/O devices  may include printers, video monitors, liquid crystal displays (LCDs), touch screen displays, keyboards, keypads, switches, dials, mice, track balls, voice recognizers, card readers, paper tape readers, or other well-known input devices.","The network connectivity devices  may take the form of modems, modem banks, Ethernet cards, universal serial bus (USB) interface cards, serial interfaces, token ring cards, fiber distributed data interface (FDDI) cards, wireless local area network (WLAN) cards, radio transceiver cards such as code division multiple access (CDMA), global system for mobile communications (GSM), and\/or worldwide interoperability for microwave access (WiMAX) radio transceiver cards, and other well-known network devices. These network connectivity devices  may enable the processor  to communicate with an Internet or one or more intranets. With such a network connection, it is contemplated that the processor  might receive information from the network, or might output information to the network in the course of performing the above-described method steps. Such information, which is often represented as a sequence of instructions to be executed using processor , may be received from and outputted to the network, for example, in the form of a computer data signal embodied in a carrier wave","Such information, which may include data or instructions to be executed using processor  for example, may be received from and outputted to the network, for example, in the form of a computer data baseband signal or signal embodied in a carrier wave. The baseband signal or signal embodied in the carrier wave generated by the network connectivity devices  may propagate in or on the surface of electrical conductors, in coaxial cables, in waveguides, in optical media, for example optical fiber, or in the air or free space. The information contained in the baseband signal or signal embedded in the carrier wave may be ordered according to different sequences, as may be desirable for either processing or generating the information or transmitting or receiving the information. The baseband signal or signal embedded in the carrier wave, or other types of signals currently used or hereafter developed, referred to herein as the transmission medium, may be generated according to several methods well known to one skilled in the art.","The processor  executes instructions, codes, computer programs, scripts which it accesses from hard disk, floppy disk, optical disk (these various disk based systems may all be considered secondary storage ), ROM , RAM , or the network connectivity devices . While only one processor  is shown, multiple processors may be present. Thus, while instructions may be discussed as executed by a processor, the instructions may be executed simultaneously, serially, or otherwise executed by one or multiple processors.","While several embodiments have been provided in the present disclosure, it should be understood that the disclosed systems and methods may be embodied in many other specific forms without departing from the spirit or scope of the present disclosure. The present examples are to be considered as illustrative and not restrictive, and the intention is not to be limited to the details given herein. For example, the various elements or components may be combined or integrated in another system or certain features may be omitted or not implemented.","Also, techniques, systems, subsystems, and methods described and illustrated in the various embodiments as discrete or separate may be combined or integrated with other systems, modules, techniques, or methods without departing from the scope of the present disclosure. Other items shown or discussed as directly coupled or communicating with each other may be indirectly coupled or communicating through some interface, device, or intermediate component, whether electrically, mechanically, or otherwise. Other examples of changes, substitutions, and alterations are ascertainable by one skilled in the art and could be made without departing from the spirit and scope disclosed herein."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["For a more complete understanding of the present disclosure, reference is now made to the following brief description, taken in connection with the accompanying drawings and detailed description, wherein like reference numerals represent like parts.",{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 6"}]},"DETDESC":[{},{}]}
