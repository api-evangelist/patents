---
title: Systems and methods for data modeling in an item-based storage platform
abstract: Various embodiments of the present invention are directed to a data store comprising Items, Elements, and Relationships. An Item is a unit of data storable in a data store and further comprises said Element and said Relationship. An Element is an instance of a type comprising one or more fields. A Relationship is a link between at least two Items. The data store further comprising a Core Schema to define a set of Core Items by which a hardware/software interface system understands and directly processes said set of Core Items in a predetermined and predictable way. The Core Items are derived (directly or indirectly) from a common single Base Item which, in turn, is a foundational Item in a Base Schema.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07428546&OS=07428546&RS=07428546
owner: Microsoft Corporation
number: 07428546
owner_city: Redmond
owner_country: US
publication_date: 20030821
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["CROSS-REFERENCE ","FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION","TABLE OF CONTENTS","I. Introduction ","II. A New Storage Platform for Organizing, Searching,  and Sharing Data "],"p":["This application is related by subject matter to the inventions disclosed in the following commonly assigned applications: U.S. patent application Ser. No. 10\/647,058, filed on even date herewith, entitled \u201cSYSTEMS AND METHODS FOR REPRESENTING UNITS OF INFORMATION MANAGEABLE BY A HARDWARE\/SOFTWARE INTERFACE SYSTEM BUT INDEPENDENT OF PHYSICAL REPRESENTATION\u201d; U.S. patent application Ser. No. 10\/646,941 filed on even date herewith, entitled \u201cSYSTEMS AND METHODS FOR SEPARATING UNITS OF INFORMATION MANAGEABLE BY A HARDWARE\/SOFTWARE INTERFACE SYSTEM FROM THEIR PHYSICAL ORGANIZATION\u201d; U.S. Pat. application Ser. No. 10\/646,940, filed on even date herewith, entitled \u201cSYSTEMS AND METHODS FOR THE IMPLEMENTATION OF A BASE SCHEMA FOR ORGANIZING UNITS OF INFORMATION MANAGEABLE BY A HARDWARE\/SOFTWARE INTERFACE SYSTEM\u201d; U.S. patent application Ser. No. 10\/646,632, filed on even date herewith, entitled \u201cSYSTEMS AND METHODS FOR THE IMPLEMENTATION OF A CORE SCHEMA FOR PROVIDING A TOP-LEVEL STRUCTURE FOR ORGANIZING UNITS OF INFORMATION MANAGEABLE BY A HARDWARE\/SOFTWARE INTERFACE SYSTEM\u201d; U.S. patent application Ser. No. 10\/646,645, filed on even date herewith, entitled \u201cSYSTEMS AND METHOD FOR REPRESENTING RELATIONSHIPS BETWEEN UNITS OF INFORMATION MANAGEABLE BY A HARDWARE\/SOFTWARE INTERFACE SYSTEM\u201d; U.S. patent application Ser. No. 10\/646,575, filed on even date herewith, entitled \u201cSYSTEMS AND METHODS FOR INTERFACING APPLICATION PROGRAMS WITH AN ITEM-BASED STORAGE PLATFORM\u201d; and U.S. patent application Ser. No. 10\/646,646, filed on even date herewith, entitled \u201cSTORAGE PLATFORM FOR ORGANIZING, SEARCHING, AND SHARING DATA\u201d.","The present invention relates generally to the field of information storage and retrieval, and, more particularly, to an active storage platform for organizing, searching, and sharing different types of data in a computerized system.","Individual disk capacity has been growing at roughly seventy percent (70%) per year over the last decade. Moore's law accurately predicted the tremendous gains in central processing unit (CPU) power that has occurred over the years. Wired and wireless technologies have provided tremendous connectivity and bandwidth. Presuming current trends continue, within several years the average laptop computer will possess roughly one terabyte (TB) of storage and contain millions of files, and 500 gigabyte (GB) drives will become commonplace.","Consumers use their computers primarily for communication and organizing personal information, whether it is traditional personal information manager (PIM) style data or media such as digital music or photographs. The amount of digital content, and the ability to store the raw bytes, has increased tremendously; however the methods available to consumers for organizing and unifying this data has not kept pace. Knowledge workers spend enormous amounts of time managing and sharing information, and some studies estimate that knowledge workers spend 15-25% of their time on non-productive information related activities. Other studies estimate that a typical knowledge worker spends about 2.5 hours per day searching for information.","Developers and information technology (IT) departments invest significant amounts of time and money in building their own data stores for common storage abstractions to represent such things as people, places, times, and events. Not only does this result in duplicated work, but it also creates islands of common data with no mechanisms for common searching or sharing of that data. Just consider how many address books can exist today on a computer running the Microsoft Windows operating system. Many applications, such as e-mail clients and personal finance programs, keep individual address books, and there is little sharing among applications of the address book data that each such program individually maintains. Consequently, a finance program (like Microsoft Money) does not share addresses for payees with the addresses maintained in an email contact folder (like the one in Microsoft Outlook). Indeed, many users have multiple devices and logically should synchronize their personal data amongst themselves and across a wide variety of additional sources, including cell phones to commercial services such as MSN and AOL; nevertheless, collaboration of shared documents is largely achieved by attaching documents to e-mail messages\u2014that is, manually and inefficiently.","One reason for this lack of collaboration is that traditional approaches to the organization of information in computer systems have centered on the use of file-folder-and-directory-based systems (\u201cfile systems\u201d) to organize pluralities of files into directory hierarchies of folders based on an abstraction of the physical organization of the storage medium used to store the files. The Multics operating system, developed during the 1960s, can be credited with pioneering the use of the files, folders, and directories to manage storable units of data at the operating system level. Specifically, Multics used symbolic addresses within a hierarchy of files (thereby introducing the idea of a file path) where physical addresses of the files were not transparent to the user (applications and end-users). This file system was entirely unconcerned with the file format of any individual file, and the relationships amongst and between files was deemed irrelevant at the operating system level (that is, other than the location of the file within the hierarchy). Since the advent of Multics, storable data has been organized into files, folders, and directories at the operating system level. These files generally include the file hierarchy itself (the \u201cdirectory\u201d) embodied in a special file maintained by the file system. This directory, in turn, maintains a list of entries corresponding to all of the other files in the directory and the nodal location of such files in the hierarchy (herein referred to as the folders). Such has been the state of the art for approximately forty years.","However, while providing a reasonable representation of information residing in the computer's physical storage system, a file system is nevertheless an abstraction of that physical storage system, and therefore utilization of the files requires a level of indirection (interpretation) between what the user manipulates (units having context, features, and relationships to other units) and what the operating system provides (files, folders, and directories). Consequently, users (applications and\/or end-users) have no choice but to force units of information into a file system structure even when doing so is inefficient, inconsistent, or otherwise undesirable. Moreover, existing file systems know little about the structure of data stored in individual files and, because of this, most of the information remains locked up in files that may only be accessed (and comprehensible) to the applications that wrote them. Consequently, this lack of schematic description of information, and mechanisms for managing information, leads to the creation of silos of data with little data sharing among the individual silos. For example, many personal computer (PC) users have more than five distinct stores that contain information about the people they interact with on some level\u2014for example, Outlook Contacts, online account addressees, Windows Address Book, Quicken Payees, and instant messaging (IM) buddy lists\u2014because organizing files presents a significant challenge to these PC users. Because most existing file systems utilize a nested folder metaphor for organizing files and folders, as the number of files increases the effort necessary to maintain an organization scheme that is flexible and efficient becomes quite daunting. In such situations, it would be very useful to have multiple classifications of a single file; however, using hard or soft links in existing file systems is cumbersome and difficult to maintain.","Several unsuccessful attempts to address the shortcomings of file systems have been made in the past. Some of these previous attempts have involved the use of content addressable memory to provide a mechanism whereby data could be accessed by content rather than by physical address. However, these efforts have proven unsuccessful because, while content addressable memory has proven useful for small-scale use by devices such as caches and memory management units, large-scale use for devices such as physical storage media has not yet been possible for a variety of reasons, and thus such a solution simply does not exist. Other attempts using object-oriented database (OODB) systems have been made, but these attempts, while featuring strong database characteristics and good non-file representations, were not effective in handling file representations and could not replicate the speed, efficiency, and simplicity of the file and folder based hierarchical structure at the hardware\/software interface system level. Other efforts, such as those that attempted to use SmallTalk (and other derivatives), proved to be quite effective at handling file and non-file representations but lacked database features necessary to efficiently organize and utilize the relationships that exist between the various data files, and thus the overall efficiency of such systems was unacceptable. Yet other attempts to use BeOS (and other such operating systems research) proved to be inadequate at handling non-file representations\u2014the same core shortcoming of traditional file systems\u2014despite being able to adequately represent files while providing some necessary database features.","Database technology is another area of the art in which similar challenges exits. For example, while the relational database model has been a great commercial success, in truth independent software vendors (ISV) generally exercise a small portion of the functionality available in relational database software products (such as Microsoft SQL Server). Instead, most of an application's interaction with such a product is in the form of simple \u201cgets\u201d and \u201cputs\u201d. While there are a number of readily apparent reasons for this\u2014such as being platform or database agnostic\u2014one key reason that often goes unnoticed is that the database does not necessarily provide the exact abstractions that a major business application vendor really needs. For example, while the real world has the notion of \u201citems\u201d, such as \u201ccustomers\u201d or \u201corders\u201d (along with an order's embedded \u201cline items\u201d as items in and of themselves), relational databases only talk in terms of tables and rows. Consequently, while the application may desire to have aspects of consistency, locking, security, and\/or triggers at the item level (to name a few), generally databases provide these features only at the table\/row level. While this may work fine if each item gets mapped to a single row in some table in the database, in the case of an order with multiple line items there may be reasons why an item actually gets mapped to multiple tables and, when that is the case, the simple relational database system does not quite provide the right abstractions. Consequently, an application must build logic on top of the database to provide these basic abstractions. In other words, the basic relational model does not provide a sufficient platform for storage of data on which higher-level applications can easily be developed because the basic relational model requires a level of indirection between the application and the storage system\u2014where the semantic structure of the data might only be visible in the application in certain instances. While some database vendors are building higher-level functionality into their products\u2014such as providing object relational capabilities, new organizational models, and the like\u2014none have yet to provide the kind of comprehensive solution needed, where a truly comprehensive solution is one which provides both useful data model abstractions (such as \u201cItems,\u201d \u201cExtensions,\u201d \u201cRelationships,\u201d and so on) for useful domain abstractions (such as \u201cPersons,\u201d \u201cLocations,\u201d \u201cEvents,\u201d etc.).","In view of the foregoing deficiencies in existing data storage and database technologies, there is a need for a new storage platform that provides an improved ability to organize, search, and share all types of data in a computer system\u2014a storage platform that extends and broadens the data platform beyond existing file systems and database systems, and that is designed to be the store for all types of data. The present invention satisfies this need.","The following summary provides an overview of various aspects of the invention. It is not intended to provide an exhaustive description of all of the important aspects of the invention, nor to define the scope of the invention. Rather, this summary is intended to serve as an introduction to the detailed description and figures that follow.","The present invention is directed to a storage platform for organizing, searching, and sharing data. The storage platform of the present invention extends and broadens the concept of data storage beyond existing file systems and database systems, and is designed to be the store for all types of data including structured, non-structured, or semi-structured data.","According to one aspect of the present invention, the storage platform of the present invention comprises a data store implemented on a database engine. In various embodiments of the present invention, the database engine comprises a relational database engine with object relational extensions. The data store implements a data model that supports organization, searching, sharing, synchronization, and security of data. Specific types of data are described in schemas, and the platform provides a mechanism to extend the set of schemas to define new types of data (essentially subtypes of the basic types provides by the schemas). A synchronization capability facilitates the sharing of data among users or systems. File-system-like capabilities are provided that allow interoperability of the data store with existing file systems but without the limitation of such traditional file systems. A change tracking mechanism provides the ability track changes to the data store. The storage platform further comprises a set of application program interfaces that enable applications to access all of the foregoing capabilities of the storage platform and to access the data described in the schemas.","According to another aspect of the invention, the data model implemented by the data store defines units of data storage in terms of items, elements, and relationships. An item is a unit of data storable in a data store and can comprise one or more elements and relationships. An element is an instance of a type comprising one or more fields (also referred to herein as a property). A relationship is a link between two items. (As used herein, these and other specific terms may be capitalized in order to offset them from other terms used in close proximity; however, there is no intention whatsoever to distinguish between a capitalized term, e.g. \u201cItem\u201d, and the same term when not capitalized, e.g., \u201citem\u201d, and no such distinction should be presumed or implied.)","According to another aspect of the invention, a computer system comprises a plurality of Items where each Item constitutes a discrete storable unit of information that can be manipulated by a hardware\/software interface system; a plurality of Item Folders that constitute an organizational structure for said Items; and a hardware\/software interface system for manipulating a plurality of Items and wherein each Item belongs to at least one Item Folder and may belong to more than one Item Folder.","According to another aspect of the invention, a computer system comprises a plurality of Items, where each Item constitutes a discrete unit of information that can be manipulated by a hardware\/software interface system, and the Item or some of the Item's property values are computed dynamically as opposed to being derived from a persistent store. In other words, the hardware\/software interface system does not require that the Item be stored, and certain operations are supported such as the ability to enumerate the current set of Items or the ability to retrieve an Item given its identifier (which is more fully described in the sections that describe the application programming interface, or API) of the storage platform\u2014for example, an Item might be the current location of a cell phone or the temperature reading on a temperature sensor.","According to another aspect of the invention, a hardware\/software interface system for a computer system, wherein said hardware\/software interface system manipulates a plurality of Items, further comprises Items interconnected by a plurality of Relationships managed by the hardware\/software interface system. According to another aspect of the invention, a hardware\/software interface system for a computer system wherein said hardware\/software interface system manipulates a plurality of discrete units of information having properties understandable by said hardware\/software interface system. According to another aspect of the invention, a hardware\/software interface system for a computer system comprises a core schema to define a set of core Items which said hardware\/software interface system understands and can directly process in a predetermined and predictable way. According to another aspect of the invention, a method for manipulating a plurality of discrete units of information (\u201cItems\u201d) in a hardware\/software interface system for a computer system, said method comprising interconnecting said Items with a plurality of Relationships and managing said Relationships at the hardware\/software interface system level, is disclosed.","According to another feature of the invention, the API of the storage platform provides data classes for each item, item extension, and relationship defined in the set of storage platform schemas. In addition, the application programming interface provides a set of framework classes that define a common set of behaviors for the data classes and that, together with the data classes, provide the basic programming model for the storage platform API. According to another feature of the invention, the storage platform API provides a simplified query model that enables application programmers to form queries based on various properties of the items in the data store, in a manner that insulates the application programmer from the details of the query language of the underlying database engine. According to yet another aspect of the storage platform API of the present invention, the API collects changes to an item made by an application program and then organizes them into the correct updates required by the database engine (or any kind of storage engine) on which the data store is implemented. This enables application programmers to make changes to an item in memory, while leaving the complexity of data store updates to the API.","Through its common storage foundation and schematized data, the storage platform of the present invention enables more efficient application development for consumers, knowledge workers and enterprises. It offers a rich and extensible application programming interface that not only makes available the capabilities inherent in its data model, but also embraces and extends existing file system and database access methods.","Other features and advantages of the invention may become apparent from the following detailed description of the invention and accompanying drawings.",{"@attributes":{"id":"p-0057","num":"0000"},"ul":{"@attributes":{"id":"ul0001","list-style":"none"},"li":["I. INTRODUCTION\n    \n    ","II. A NEW STORAGE PLATFORM FOR ORGANIZING, SEARCHING, AND SHARING DATA\n    \n    "]}},"The subject matter of the present invention is described with specificity to meet statutory requirements. However, the description itself is not intended to limit the scope of this patent. Rather, the inventors have contemplated that the claimed subject matter might also be embodied in other ways, to include different steps or combinations of steps similar to the ones described in this document, in conjunction with other present or future technologies. Moreover, although the term \u201cstep\u201d may be used herein to connote different elements of methods employed, the term should not be interpreted as implying any particular order among or between various steps herein disclosed unless and except when the order of individual steps is explicitly described.","A. Exemplary Computing Environment","Numerous embodiments of the present invention may execute on a computer.  and the following discussion is intended to provide a brief general description of a suitable computing environment in which the invention may be implemented. Although not required, various aspects of the invention may be described in the general context of computer executable instructions, such as program modules, being executed by a computer, such as a client workstation or a server. Generally, program modules include routines, programs, objects, components, data structures and the like that perform particular tasks or implement particular abstract data types. Moreover, the invention may be practiced with other computer system configurations, including hand held devices, multi processor systems, microprocessor based or programmable consumer electronics, network PCs, minicomputers, mainframe computers and the like. The invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment, program modules may be located in both local and remote memory storage devices.","As shown in , an exemplary general purpose computing system includes a conventional personal computer  or the like, including a processing unit , a system memory , and a system bus  that couples various system components including the system memory to the processing unit . The system bus  may be any of several types of bus structures including a memory bus or memory controller, a peripheral bus, and a local bus using any of a variety of bus architectures. The system memory includes read only memory (ROM)  and random access memory (RAM) . A basic input\/output system  (BIOS), containing the basic routines that help to transfer information between elements within the personal computer , such as during start up, is stored in ROM . The personal computer  may further include a hard disk drive  for reading from and writing to a hard disk, not shown, a magnetic disk drive  for reading from or writing to a removable magnetic disk , and an optical disk drive  for reading from or writing to a removable optical disk  such as a CD ROM or other optical media. The hard disk drive , magnetic disk drive , and optical disk drive  are connected to the system bus  by a hard disk drive interface , a magnetic disk drive interface , and an optical drive interface , respectively. The drives and their associated computer readable media provide non volatile storage of computer readable instructions, data structures, program modules and other data for the personal computer . Although the exemplary environment described herein employs a hard disk, a removable magnetic disk  and a removable optical disk , it should be appreciated by those skilled in the art that other types of computer readable media which can store data that is accessible by a computer, such as magnetic cassettes, flash memory cards, digital video disks, Bernoulli cartridges, random access memories (RAMs), read only memories (ROMs) and the like may also be used in the exemplary operating environment. Likewise, the exemplary environment may also include many types of monitoring devices such as heat sensors and security or fire alarm systems, and other sources of information.","A number of program modules may be stored on the hard disk, magnetic disk , optical disk , ROM  or RAM , including an operating system , one or more application programs , other program modules  and program data . A user may enter commands and information into the personal computer  through input devices such as a keyboard  and pointing device . Other input devices (not shown) may include a microphone, joystick, game pad, satellite disk, scanner or the like. These and other input devices are often connected to the processing unit  through a serial port interface  that is coupled to the system bus, but may be connected by other interfaces, such as a parallel port, game port or universal serial bus (USB). A monitor  or other type of display device is also connected to the system bus  via an interface, such as a video adapter . In addition to the monitor , personal computers typically include other peripheral output devices (not shown), such as speakers and printers. The exemplary system of  also includes a host adapter , Small Computer System Interface (SCSI) bus , and an external storage device  connected to the SCSI bus .","The personal computer  may operate in a networked environment using logical connections to one or more remote computers, such as a remote computer . The remote computer  may be another personal computer, a server, a router, a network PC, a peer device or other common network node, and typically includes many or all of the elements described above relative to the personal computer , although only a memory storage device  has been illustrated in . The logical connections depicted in  include a local area network (LAN)  and a wide area network (WAN) . Such networking environments are commonplace in offices, enterprise wide computer networks, intranets and the Internet.","When used in a LAN networking environment, the personal computer  is connected to the LAN  through a network interface or adapter . When used in a WAN networking environment, the personal computer  typically includes a modem  or other means for establishing communications over the wide area network , such as the Internet. The modem , which may be internal or external, is connected to the system bus  via the serial port interface . In a networked environment, program modules depicted relative to the personal computer , or portions thereof, may be stored in the remote memory storage device. It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.","As illustrated in the block diagram of , a computer system  can be roughly divided into three component groups: the hardware component , the hardware\/software interface system component , and the applications programs component  (also referred to as the \u201cuser component\u201d or \u201csoftware component\u201d in certain contexts herein).","In various embodiments of a computer system , and referring back to , the hardware component  may comprise the central processing unit (CPU) , the memory (both ROM  and RAM ), the basic input\/output system (BIOS) , and various input\/output (I\/O) devices such as a keyboard , a mouse , a monitor , and\/or a printer (not shown), among other things. The hardware component  comprises the basic physical infrastructure for the computer system .","The applications programs component  comprises various software programs including but not limited to compilers, database systems, word processors, business programs, videogames, and so forth. Application programs provide the means by which computer resources are utilized to solve problems, provide solutions, and process data for various users (machines, other computer systems, and\/or end-users).","The hardware\/software interface system component  comprises (and, in some embodiments, may solely consist of) an operating system that itself comprises, in most cases, a shell and a kernel. An \u201coperating system\u201d (OS) is a special program that acts as an intermediary between application programs and computer hardware. The hardware\/software interface system component  may also comprise a virtual machine manager (VMM), a Common Language Runtime (CLR) or its functional equivalent, a Java Virtual Machine (JVM) or its functional equivalent, or other such software components in the place of or in addition to the operating system in a computer system. The purpose of a hardware\/software interface system is to provide an environment in which a user can execute application programs. The goal of any hardware\/software interface system is to make the computer system convenient to use, as well as utilize the computer hardware in an efficient manner.","The hardware\/software interface system is generally loaded into a computer system at startup and thereafter manages all of the application programs in the computer system. The application programs interact with the hardware\/software interface system by requesting services via an application program interface (API). Some application programs enable end-users to interact with the hardware\/software interface system via a user interface such as a command language or a graphical user interface (GUI).","A hardware\/software interface system traditionally performs a variety of services for applications. In a multitasking hardware\/software interface system where multiple programs may be running at the same time, the hardware\/software interface system determines which applications should run in what order and how much time should be allowed for each application before switching to another application for a turn. The hardware\/software interface system also manages the sharing of internal memory among multiple applications, and handles input and output to and from attached hardware devices such as hard disks, printers, and dial-up ports. The hardware\/software interface system also sends messages to each application (and, in certain case, to the end-user) regarding the status of operations and any errors that may have occurred. The hardware\/software interface system can also offload the management of batch jobs (e.g., printing) so that the initiating application is freed from this work and can resume other processing and\/or operations. On computers that can provide parallel processing, a hardware\/software interface system also manages dividing a program so that it runs on more than one processor at a time.","A hardware\/software interface system shell (simply referred to herein as a \u201cshell\u201d) is an interactive end-user interface to a hardware\/software interface system. (A shell may also be referred to as a \u201ccommand interpreter\u201d or, in an operating system, as an \u201coperating system shell\u201d). A shell is the outer layer of a hardware\/software interface system that is directly accessible by application programs and\/or end-users. In contrast to a shell, a kernel is a hardware\/software interface system's innermost layer that interacts directly with the hardware components.","While it is envisioned that numerous embodiments of the present invention are particularly well-suited for computerized systems, nothing in this document is intended to limit the invention to such embodiments. On the contrary, as used herein the term \u201ccomputer system\u201d is intended to encompass any and all devices capable of storing and processing information and\/or capable of using the stored information to control the behavior or execution of the device itself, regardless of whether such devices are electronic, mechanical, logical, or virtual in nature.","B. Traditional File-Based Storage","In most computer systems today, \u201cfiles\u201d are units of storable information that may include the hardware\/software interface system as well as application programs, data sets, and so forth. In all modern hardware\/software interface systems (Windows, Unix, Linux, Mac OS, virtual machine systems, and so forth), files are the basic discrete (storable and retrievable) units of information (e.g., data, programs, and so forth) that can be manipulated by the hardware\/software interface system. Groups of files are generally organized in \u201cfolders.\u201d In Microsoft Windows, the Macintosh OS, and other hardware\/software interface systems, a folder is a collection of files that can be retrieved, moved, and otherwise manipulated as single units of information. These folders, in turn, are organized in a tree-based hierarchical arrangement called a \u201cdirectory\u201d (discussed in more detail herein below). In certain other hardware\/software interface systems, such as DOS, z\/OS and most Unix-based operating systems, the terms \u201cdirectory\u201d and\/or \u201cfolder\u201d are interchangeable, and early Apple computer systems (e.g., the Apple IIe) used the term \u201ccatalog\u201d instead of directory; however, as used herein, all of these terms are deemed to be synonymous and interchangeable and are intended to further include all other equivalent terms for and references to hierarchical information storage structures and their folder and file components.","Traditionally, a directory (a.k.a. a directory of folders) is a tree-based hierarchical structure wherein files are grouped into folders and folder, in turn, are arranged according to relative nodal locations that comprise the directory tree. For example, as illustrated in , a DOS-based file system base folder (or \u201croot directory\u201d)  may comprise a plurality of folders , each of which may further comprise additional folders (as \u201csubfolders\u201d of that particular folder) , and each of these may also comprise additional folders  ad infinitum. Each of these folders may have one or more files  although, at the hardware\/software interface system level, the individual files in a folder have nothing in common other than their location in the tree hierarchy. Not surprisingly, this approach of organizing files into folder hierarchies indirectly reflects the physical organization of typical storage media used to store these files (e.g., hard disks, floppy disks, CD-ROMs, etc.).","In addition to the foregoing, each folder is a container for its subfolders and its files\u2014that is, each folder owns its subfolders and files. For example, when a folder is deleted by the hardware\/software interface system, that folder's subfolders and files are also deleted (which, in the case of each subfolder, further includes its own subfolders and files recursively). Likewise, each file is generally owned by only one folder and, although a file can be copied and the copy located in a different folder, a copy of a file is itself a distinct and separate unit that has no direct connection to the original (e.g., changes to the original file are not mirrored in the copy file at the hardware\/software interface system level). In this regard, files and folders are therefore characteristically \u201cphysical\u201d in nature because folders are the treated like physical containers, and files are treated as discrete and separate physical elements inside these containers.","The present invention is directed to a storage platform for organizing, searching, and sharing data. The storage platform of the present invention extends and broadens the data platform beyond the kinds of existing file systems and database systems discussed above, and is designed to be the store for all types of data, including a new form of data called Items.","A. Glossary","As used herein and in the claims, the following terms have the following meanings:","An \u201cItem\u201d is an unit of storable information accessible to a hardware\/software interface system that, unlike a simple file, is an object having a basic set of properties that are commonly supported across all objects exposed to an end-user by the hardware\/software interface system shell. Items also have properties and relationships that are commonly supported across all Item types including features that allow new properties and relationships to be introduced (and discussed in great detail later herein).","An \u201coperating system\u201d (OS) is a special program that acts as an intermediary between application programs and computer hardware. An operating system comprises, in most cases, a shell and a kernel.","A \u201chardware\/software interface system\u201d is software, or a combination of hardware and software, that serves as the interface between the underlying hardware components of a computer system and applications that execute on the computer system. A hardware\/software interface system typically comprises (and, in some embodiments, may solely consist of) an operating system. A hardware\/software interface system may also comprise a virtual machine manager (VMM), a Common Language Runtime (CLR) or its functional equivalent, a Java Virtual Machine (JVM) or its functional equivalent, or other such software components in the place of or in addition to the operating system in a computer system. The purpose of a hardware\/software interface system is to provide an environment in which a user can execute application programs. The goal of any hardware\/software interface system is to make the computer system convenient to use, as well as utilize the computer hardware in an efficient manner.","B. Storage Platform Overview","Referring to , a storage platform  in accordance with the present invention comprises a data store  implemented on a database engine . In one embodiment, the database engine comprises a relational database engine with object relational extensions. In one embodiment, the relational database engine  comprises the Microsoft SQL Server relational database engine.","The data store  implements a data model  that supports the organization, searching, sharing, synchronization, and security of data. Specific types of data are described in schemas, such as schemas , and the storage platform  provides tools  for deploying those schemas as well as for extending those schemas, as described more fully below.","A change tracking mechanism  implemented within the data store  provides the ability track changes to the data store. The data store  also provides security capabilities  and a promotion\/demotion capability , both of which are discussed more fully below. The data store  also provides a set of application programming interfaces  to expose the capabilities of the data store  to other storage platform components and application programs (e.g., application programs , , and ) that utilize the storage platform.","The storage platform of the present invention still further comprises an application programming interfaces (API) , which enables application programs, such as application programs , , and , to access all of the foregoing capabilities of the storage platform and to access the data described in the schemas. The storage platform API  may be used by application programs in combination with other APIs, such as the OLE DB API  and the Microsoft Windows Win32 API .","The storage platform  of the present invention may provide a variety of services  to application programs, including a synchronization service  that facilitates the sharing of data among users or systems. For example, the synchronization service  may enable interoperability with other data stores  having the same format as data store , as well as access to data stores  having other formats. The storage platform  also provides file system capabilities that allow interoperability of the data store  with existing file systems, such as the Windows NTFS files system .","In at least some embodiments, the storage platform  may also provide application programs with additional capabilities for enabling data to be acted upon and for enabling interaction with other systems. These capabilities may be embodied in the form of additional services , such as an Info Agent service  and a notification service , as well as in the form of other utilities .","In at least some embodiments, the storage platform is embodied in, or forms an integral part of, the hardware\/software interface system of a computer system. For example, and without limitation, the storage platform of the present invention may be embodied in, or form an integral part of, an operating system, a virtual machine manager (VMM), a Common Language Runtime (CLR) or its functional equivalent, or a Java Virtual Machine (JVM) or its functional equivalent.","Through its common storage foundation, and schematized data, the storage platform of the present invention enables more efficient application development for consumers, knowledge workers and enterprises. It offers a rich and extensible programming surface area that not only makes available the capabilities inherent in its data model, but also embraces and extends existing file system and database access methods.","In the following description, and in various ones of the figures, the storage platform  of the present invention may be referred to as \u201cWinFS.\u201d However, use of this name to refer to the storage platform is solely for convenience of description and is not intended to be limiting in any way.","C. The Data Model","The data store  of the storage platform  of the present invention implements a data model that supports the organization, searching, sharing, synchronization, and security of data that resides in the store. In the data model of the present invention, an \u201cItem\u201d is the fundamental unit of storage information. The data model provides a mechanism for declaring Items and Item extensions and for establishing relationships between Items and for organizing Items in Item Folders and in Categories, as described more fully below.","The data model relies on two primitive mechanisms, Types and Relationships. Types are structures which provide a format which governs the form of an instance of the Type. The format is expressed as an ordered set of Properties. A Property is a name for a value of set of values of a given Type. For example a USPostalAddress type might have the properties Street, City, Zip, State in which Street, City and State are of type String and Zip is of Type Int32. Street may be multi-valued (i.e. a set of values) allowing the address to have more than one value for the Street property. The system defines certain primitive types that can be used in the construction of other types\u2014these include String, Binary, Boolean, Int16, Int32, Int64, Single, Double, Byte, DateTime, Decimal and GUID. The Properties of a Type may be defined using any of the primitive types or (with some restrictions noted below) any of the constructed types. For example a Location Type might be defined that had Properties Coordinate and Address where the Address Property is of Type USPostalAddress as described above. Properties may also be required or optional.","Relationships can be declared and represent a mapping between the sets of instances of two types. For example there may be a Relationship declared between the Person Type and the Location Type called LivesAt which defines which people live at which locations. The Relationship has a name, two endpoints, namely a source endpoint and a target endpoint. Relationships may also have an ordered set of properties. Both the Source and Target endpoints have a Name and a Type. For example the LivesAt Relationship has a Source called Occupant of Type Person and a Target called Dwelling of Type Location and in addition has properties StartDate and EndDate indicating the period of time for which the occupant lived at the dwelling. Note that a Person may live at multiple dwellings over time and a dwelling may have multiple occupants so the most likely place to put the StartDate and EndDate information is on the relationship itself.","Relationships define a mapping between instances that is constrained by the types given as the endpoint types. For example the LivesAt relationship cannot be a relationship in which an Automobile is the Occupant because an Automobile is not a Person.","The data model does allow the definition of a subtype-supertype relationship between types. The subtype-supertype relationship also known as the BaseType relationship is defined in such a way that if Type A is a BaseType for Type B it must be the case that every instance of B is also an instance of A. Another way of expressing this is that every instance that conforms to B must also conform to A. If, for example A has a property Name of Type String while B has a property Age of Type Int16, it follows that any instance of B must have both a Name and an Age. The type hierarchy may be envisaged as an tree with a single supertype at the root. The branches from the root provide the first level subtypes, the branches at this level provide the second level subtypes and so on to the leaf-most subtypes which themselves do not have any subtypes. The tree is not constrained to be of a uniform depth but cannot contain any cycles. A given Type may have zero or many subtypes and zero or one super type. A given instance may conform to at most one type together with that type's super types. To put it another way, for a given instance at any level in the tree the instance may conform to at most one subtype at that level.","A type is said to be Abstract if instances of the type must also be an instance of a subtype of the type.","1. Items","An Item is a unit of storable information that, unlike a simple file, is an object having a basic set of properties that are commonly supported across all objects exposed to an end-user or application program by the storage platform. Items also have properties and relationships that are commonly supported across all Item types including features that allow new properties and relationships to be introduced, as discussed below.","Items are the objects for common operations such as copy, delete, move, open, print, backup, restore, replicate, and so forth. Items are the units that can be stored and retrieved, and all forms of storable information manipulated by the storage platform exist as Items, properties of Items, or Relationships between Items, each of which is discussed in greater detail herein below.","Items are intended to represent real-world and readily-understandable units of data like Contacts, People, Services, Locations, Documents (of all various sorts), and so on.  is a block diagram illustrating the structure of an Item. The unqualified name of the Item is \u201cLocation\u201d. The qualified name of the Item is \u201cCore.Location\u201d which indicates that this Item structure is defined as a specific type of Item in the Core Schema. (The Core Schema is discussed in more detail later herein.)","The Location Item has a plurality of properties including EAddresses, MetropolitanRegion, Neighborhood, and PostalAddresses. The specific type of property for each is indicated immediately following the property name and is separated from the property name by a colon (\u201c:\u201d). To the right of the type name, the number of values permitted for that property type is indicated between brackets (\u201c[ ]\u201d) wherein an asterisk (\u201c*\u201d) to the right of the colon (\u201c:\u201d) indicates an unspecified and\/or unlimited number (\u201cmany\u201d). A \u201c1\u201d to the right of the colon indicates that there can be at most one value. A zero (\u201c0\u201d) to the left of the colon indicates that the property is optional (there may be no value at all). A \u201c1\u201d to the left of the colon indicates that there must be at least one value (the property is required). Neighborhood and MetropolitanRegion are both of type \u201cnvarchar\u201d (or equivalent) which is a predefined data type or \u201csimple type\u201d (and denoted herein by the lack of capitalization). EAddresses and PostalAddresses, however, are properties of defined types or \u201ccomplex types\u201d (as denoted herein by capitalization) of types EAddress and PostalAddress respectively. A complex type is type that is derived from one or more simple data types and\/or from other complex types. The complex types for the properties of an Item also constitute \u201cnested elements\u201d since the details of the complex type are nested into the immediate Item to define its properties, and the information pertaining to these complex types is maintained with the Item that has these properties (within the Item's boundary, as discussed later herein). These concepts of typing are well known and readily appreciated by those of skill in the art.",{"@attributes":{"id":"p-0100","num":"0320"},"figref":["FIG. 5B","FIG. 5C","FIG. 5C","FIG. 5A"]},"Similar to but distinct from properties and their property types, Items inherently represent their own Item Types that can also be the subject of subtyping. In other words, the storage platform in several embodiments of the present invention allows an Item to be a subtype of another Item (whereby the one Item inherits the properties of the other, parent Item). Moreover, for various embodiments of the present invention, every Item is a subtype of the \u201cItem\u201d Item type which is the first and foundational Item type found in the Base Schema. (The Base Schema will also be discussed in detail later herein.)  illustrates an Item, the Location Item in this Instance, as being a subtype of the Item Item type found in the Base Schema. In this drawing, the arrow indicates that the Location Item (like all other Items) is a subtype of the Item Item type. The Item Item type, as the foundational Item from which all other Items are derived, has a number of important properties such as ItemId and various timestamps, and thereby defines the standard properties of all Items in an operating system. In the present figure, these properties of the Item Item type are inherited by Location and thereby become properties of Location.","Another way to represent the properties in the Location Item inherited from the Item Item type is to draw Location with the individual properties of each property type from the parent Item listed therein.  is a block diagram illustrating the Location Item wherein its inherited types described in addition to its immediate properties. It should be noted and understood that this Item is the same Item illustrated in , although in the present figure Location is illustrated with all of its properties, both immediate\u2014shown in both this figure and FIG. A\u2014and inherited\u2014shown in this figure but not  (whereas in  these properties are referenced by showing with an arrow that the Location Item is a subtype of the Item Item type).","Items are stand-alone objects; thus, if you delete an Item, all of the Items immediate and inherited properties are also deleted. Similarly, when retrieving an Item, what is received is the Item and all of its immediate and inherited properties (including the information pertaining to its complex property types). Certain embodiments of the present invention may enable one to request a subset of properties when retrieving a specific Item; however, the default for many such embodiments is to provide the Item with all of its immediate and inherited properties when retrieved. Moreover, the properties of Items can also be extended by adding new properties to the existing properties of that Item's type. These \u201cextensions\u201d are thereafter bona fide properties of the Item and subtypes of that Item type may automatically include the extension properties.","The \u201cboundary\u201d of the Item is represented by its properties (including complex property types, extensions, and so forth). An Item's boundary also represents the limit of an operation performed on an Item such as copy, delete, move, create, and so on. For example, in several embodiments of the present invention, when an Item is copied, everything within that Item's boundary is also copied. For each Item, the boundary encompasses the following:\n\n","2. Item Identification","Items are uniquely identified within the global items space with an ItemID. The Base.Item type defines a field ItemID of type GUID that stores the identity for the Item. An Item must have exactly one identity in the data store .","a) Item References","An item reference is a data structure that contains information to locate and identify an Item. In the data model, an abstract type is defined named ItemReference from which all item reference types derive. The ItemReference type defines a virtual method named Resolve. The Resolve method resolves the ItemReference and returns an Item. This method is overridden by the concrete subtypes of ItemReference, which implement a function that retrieves an Item given a reference. The Resolve method is invoked as part of the storage platform API .","(1) ItemIDReference","ItemIDReference is a subtype of ItemReference. It defines a Locator and an ItemID field. The Locator field names (i.e. identifies) an item domain. It is processed by a locator resolution method that can resolve the value of the Locator to an item domain. The ItemID field is of type ItemID","(2) ItemPathReference","ItemPathReference is a specialization of ItemReference that defines a Locator and a Path field. The Locator field identifies an item domain. It is processed by a locator resolution method that can resolve the value of the Locator to an item domain. The Path field contains a (relative) path in the storage platform namespace rooted at the item domain provided by the Locator.","This type of reference cannot be used in a set operation. The reference must generally be resolved through a path resolution process. The Resolve method of the storage platform API  provides this functionality.","b) Reference Type Hierarchy","The reference forms discussed above are represented through the reference type hierarchy illustrated in . Additional reference types that inherit from these types can be defined in the schemas. They can be used in a relationship declaration as type of the target field.","3. Item Folders and Categories","As discussed more fully below, groups of Items can are organized into special Items called Item Folders (which are not to be confused with file folders). Unlike in most file systems, however, an Item can belong to more than one Item Folder, such that when an Item is accessed in one Item Folder and revised, this revised Item can then be accessed directly from another Item folder. In essence, although access to an Item may occur from different Item Folders, what is actually being accessed is in fact the very same Item. However, an Item Folder does not necessarily own all of its member Items, or may simply co-own Items in conjunction with other folders, such that the deletion of an Item Folder does not necessarily result in the deletion of the Item. Nevertheless, in several embodiments of the present invention, an Item must belong to at least one Item Folder so that if the sole Item Folder for a particular Item is deleted then, for some embodiments, the Item is automatically deleted or, in alternative embodiments, the Item automatically becomes a member of a default Item Folder (e.g., a \u201cTrash Can\u201d Item Folder conceptually similar to similarly-named folders used in various file-and-folder-based systems).","As also discussed more fully below, Items may also belong to Categories based on common described characteristic such as (a) an Item Type (or Types), (b) a specific immediate or inherited property (or properties), or (c) a specific value (or values) corresponding to an Item property. For example, a Item comprising specific properties for personal contact information might automatically belong to a Contact Category, and any Item having contact information properties would likewise automatically belong to this Category. Likewise, any Item having a location property with a value of \u201cNew York City\u201d might automatically belong to a NewYorkCity Category.","Categories are conceptually different form Item Folders in that, whereas Item Folders may comprise Items that are not interrelated (i.e., without a common described characteristic), each Item in a Category has a common type, property, or value (a \u201ccommonality\u201d) that is described for that Category, and it is this commonality that forms the basis for its relationship to and among the other Items in the Category. Moreover, whereas an Item's membership in a particular Folder is not compulsory based on any particular aspect of that Item, for certain embodiments all Items having a commonality categorically related to a Category might automatically become a member of the Category at the hardware\/software interface system level. Conceptually, Categories can also be thought of as virtual Item Folders whose membership is based on the results of a specific query (such as in the context of a database), and Items that meet the conditions of this query (defined by the commonalities of the Category) would thus comprise the Category's membership.",{"@attributes":{"id":"p-0118","num":"0341"},"figref":"FIG. 4","b":["402","404","406","408","410","412","414","416","418","420","422","424","426","428","430","402","422","424","402","404","406","408","410","412","432","434","436","414","416","418","420"]},"In contrast to files, folders, and directories, the Items, Item Folders, and Categories of the present invention are not characteristically \u201cphysical\u201d in nature because they do not have conceptual equivalents of physical containers, and therefore Items may exist in more than one such location. The ability for Items to exist in more than one Item Folder location as well as being organized into Categories provides an enhanced and enriched degree of data manipulation and storage structure capabilities at the hardware\/software interface level, beyond that currently available in the art.","4. Schemas","a) Base Schema","To provide a universal foundation for the creation and use of Items, various embodiments of the storage platform of the present invention comprise a Base Schema that establishes a conceptual framework for creating and organizing Items and properties. The Base Schema defines certain special types of Items and properties, and the features of these special foundational types from which subtypes can be further derived. The use of this Base Schema allows a programmer to conceptually distinguish Items (and their respective types) from properties (and their respective types). Moreover, the Base Schema sets forth the foundational set of properties that all Items may possess as all Items (and their corresponding Item Types) are derived from this foundational Item in the Base Schema (and its corresponding Item Type).","As illustrated in , and in regard to several embodiments of the present invention, the Base Schema defines three top-level types: Item, Extension, and PropertyBase. As shown, the Item type is defined by the properties of this foundational \u201cItem\u201d Item type. In contrast, the top level property type \u201cPropertyBase\u201d has no predefined properties and is merely the anchor from which all other property types are derived and through which all derived property types are interrelated (being commonly derived from the single property type). The Extension type properties define which Item the extension extends as well as identification to distinguish one extension from another as an Item may have multiple extensions.","ItemFolder is a subtype of the Item Item type that, in addition to the properties inherited from Item, features a Relationship for establishing links to its members (if any), whereas both IdentityKey and Property are subtypes of PropertyBase. CategoryRef, in turn, is a subtype of IdentityKey.","b) Core Schema","Various embodiments of the storage platform of the present invention further comprise a Core Schema that provides a conceptual framework for top-level Items type structures.  is a block diagram illustrating Items in the Core Schema, and  is a block diagram illustrating the property types in the Core Schema. The distinction made between files with different extensions (*.com, *.exe, *.bat, *.sys, etc.) and other such criteria in file-and-folder-based systems is analogous to the function of the Core Schema. In the Item-based hardware\/software interface system, the Core Schema defines a set of core Item types that, directly (by Item type) or indirectly (by Item subtype), characterize all Items into one or more Core Schema Item types which the Item-based hardware\/software interface system understands and can directly process in a predetermined and predictable way. The predefined Item types reflect the most common Items in the Item-based hardware\/software interface system and thus a level of efficiency is gained by the Item-based hardware\/software interface system understanding these predefined Item types that comprise the Core Schema.","In certain embodiments, the Core Schema is not extendable\u2014that is, no additional Item types can be subtyped directly from the Item type in the Base Schema except for the specific predefined derived Item types that are part of the Core Schema. By preventing extensions to the Core Schema (that is, by preventing the addition of new Items to the Core Schema), the storage platform mandates the use of the Core Schema Item types since every subsequent Item type is necessarily a subtype of a Core Schema Item type. This structure enables a reasonable degree of flexibility in defining additional Item types while also preserving the benefits of having a predefined set of core Item types.","For various embodiments of the present invention, and in reference to , the specific Item types supported by the Core Schema may include one or more of the following:\n\n",{"@attributes":{"id":"p-0127","num":"0367"},"b":"5"},"Relationships are binary relationships where one Item is designated as source and the other Item as target. The source Item and the target Item are related by the relationship. The source Item generally controls the life-time of the relationship. That is, when the source Item is deleted, the relationship between the Items is also deleted.","Relationships are classified into: Containment and Reference relationships. The containment relationships control the life-time of the target Items, while the reference relationships do not provide any life-time management semantics.  illustrates the manner in which relationships are classified.","The Containment relationship types are further classified into Holding and Embedding relationships. When all holding relationships to an Item are removed, the Item is deleted. A holding relationship controls the life-time of the target through a reference counting mechanism. The embedding relationships enable modeling of compound Items and can be thought of as exclusive holding relationships. An Item can be a target of one or more holding relationships; but an Item can be target of exactly one embedding relationship. An Item that is a target of an embedding relationship can not be a target of any other holding or embedding relationships.","Reference relationships do not control the lifetime of the target Item. They may be dangling\u2014the target Item may not exist. Reference relationships can be used to model references to Items anywhere in the global Item name space (i.e. including remote data stores).","Fetching an Item does not automatically fetch its relationships. Applications must explicitly request the relationships of an Item. In addition, modifying a relationship does not modify the source or the target Item; similarly, adding a relationship does not affect the source\/target Item.","a) Relationship Declaration","The explicit relationship types are defined with the following elements:\n\n","The source Item is the owner of the relationship. While an Item designated as owner controls the life time of the relationship, the relationship itself is separate from the Items it relates. The storage platform API  provides mechanisms for exposing relationships associated with an Item.","Here is an example of a relationship declaration:",{"@attributes":{"id":"p-0136","num":"0384"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"<Relationship Name=\u201cEmployment\u201d BaseType=\u201cReference\u201d >"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<Source Name=\u201cEmployee\u201d ItemType=\u201cContact.Person\u201d\/>"]},{"entry":[{},"<Target Name=\u201cEmployer\u201d ItemType=\u201cContact.Organization\u201d"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"ReferenceType=\u201cItemIDReference\u201d\/>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<Property Name=\u201cStartDate\u201d Type=\u201cthe storage"]},{"entry":[{},"platformTypes.DateTime\u201d\/>"]},{"entry":[{},"<Property Name=\u201cEndDate\u201d Type=\u201cthe storage"]},{"entry":[{},"platformTypes.DateTime\u201d\/>"]},{"entry":[{},"<Property Name=\u201cOffice\u201d Type=\u201cthe storage"]},{"entry":[{},"platformTypes.DateTime\u201d\/>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<\/Relationship>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"This is an example of a Reference relationship. The relationship can not be created if the person Item that is referenced by the source reference does not exist. Also, if the person Item is deleted, the relationship instances between the person and organization are deleted. However, if the Organization Item is deleted, the relationship is not deleted and it is dangling.","b) Holding Relationship","Holding relationships are used to model reference count based life-time management of the target Items.","An Item can be a source endpoint for zero or more relationships to Items. An Item that is not an embedded Item can be a target of in one or more holding relationships.","The target endpoint reference type must be ItemIDReference and it must reference an Item in the same store as the relationship instance.","Holding relationships enforce lifetime management of the target endpoint. The creation of a holding relationship instance and the Item that it is targeting is an atomic operation. Additional holding relationship instances can be created that are targeting the same Item. When the last holding relationship instance with a given Item as target endpoint is deleted the target item is also deleted.","The types of the endpoint Items specified in the relationship declaration will generally be enforced when an instance of the relationship is created. The types of the endpoint Items can not be changed after the relationship is established.","Holding relationships play a key role in forming the Item namespace. They contain the \u201cName\u201d property that defines the name of the target Item relative to the source Item. This relative name is unique for all the holding relationships sourced from a given Item. The ordered list of this relative names starting from the root Item to a given Item forms the full name to the Item.","The holding relationships form a directed acyclic graph (DAG). When a holding relationship is created the system ensures that a cycle is not created, thus ensuring that the Item namespace forms a DAG.","While the holding relationship controls the life time of the target Item, it does not control the operational consistency of the target endpoint Item. The target Item is operationally independent from the Item that owns it through a holding relationship. Copy, Move, Backup and other operations on an Item that is a source of a holding relationship do not affect the Item that is a target of the same relationship\u2014for example that is, backing up a Folder Item does not automatically backup all the Items in the folder (targets of the FolderMember relationship).","The following is an example of a holding relationship:",{"@attributes":{"id":"p-0147","num":"0395"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<Relationship Name=\u201cFolderMembers\u201d BaseType=\u201cHolding\u201d >"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<Source Name=\u201cFolder\u201d ItemType=\u201cBase.Folder\u201d\/>"]},{"entry":[{},"<Target Name=\u201cItem\u201d ItemType=\u201cBase.Item\u201d"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"ReferenceType=\u201cItemIDReference\u201d \/>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/Relationship>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"The FolderMembers relationship enables the concept of a Folder as a generic collection of Items.","c) Embedding Relationships","Embedding relationships model the concept of exclusive control of the lifetime of the target Item. They enable the concept of compound Items.","The creation of an embedding relationship instance and the Item that it is targeting is an atomic operation. An Item can be a source of zero or more embedding relationship. However, an Item can be a target of one and only one embedding relationship. An Item that is a target of an embedding relationship can not be a target of a holding relationship.","The target endpoint reference type must be ItemIDReference and it must reference an Item in the same data store as the relationship instance.","The types of the endpoint Items specified in the relationship declaration will generally be enforced when an instance of the relationship is created. The types of the endpoint Items can not be changed after the relationship is established.","Embedding relationships control the operational consistency of the target endpoint. For example the operation of serializing of an Item may include serialization of all the embedding relationships that source from that Item as well as all of their targets; copying an Item also copies all its embedded Items.","The following is an example declaration:",{"@attributes":{"id":"p-0155","num":"0403"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"<Relationship Name=\u201cArchiveMembers\u201d BaseType=\u201cEmbedding\u201d >"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<Source Name=\u201cArchive\u201d ItemType=\u201cZip.Archive\u201d \/>"]},{"entry":[{},"<Target Name=\u201cMember\u201d ItemType=\u201cBase.Item \u201d"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"ReferenceType=\u201cItemIDReference\u201d \/>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<Property Name=\u201cZipSize\u201d Type=\u201cthe storage"]},{"entry":[{},"platformTypes.bigint\u201d \/>"]},{"entry":[{},"<Property Name=\u201cSizeReduction\u201d Type=\u201cthe storage"]},{"entry":[{},"platformTypes.float\u201d \/>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<\/Relationship>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}},"br":{}},"The reference relationship does not control life time of the Item it references. Even more, the reference relationships do not guarantee the existence of the target, nor do they guarantee the type of the target as specified in the relationship declaration. This means that the reference relationships can be dangling. Also, the reference relationship can reference Items in other data stores. Reference relationships can be thought of as a concept similar to links in web pages.","An example of reference relationship declaration is the following:",{"@attributes":{"id":"p-0158","num":"0406"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"<Relationship Name=\u201cDocumentAuthor\u201d BaseType=\u201cReference\u201d >"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<Sourc ItemType=\u201cDocument\u201d ItemType=\u201cBase.Document\u201d\/>"]},{"entry":[{},"<Target ItemType=\u201cAuthor\u201d ItemType=\u201cBase.Author\u201d"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"ReferenceType=\u201cItemIDReference\u201d \/>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<Property Type=\u201cRole\u201d Type=\u201cCore.CategoryRef\u201d \/>"]},{"entry":[{},"<Property Type=\u201cDisplayName\u201d Type=\u201cthe storage"]},{"entry":[{},"platformTypes.nvarchar(256)\u201d \/>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<\/Relationship>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"Any reference type is allowed in the target endpoint. The Items that participate in a reference relationship can be of any Item type.","Reference relationships are used to model most non-lifetime management relationships between Items. Since the existence of the target is not enforced, the reference relationship is convenient to model loosely-coupled relationships. The reference relationship can be used to target Items in other data stores including stores on other computers.","e) Rules and Constraints","The following additional rules and constraints apply for relationships:\n\n","In at least one embodiment, the storage platform of the present invention supports ordering of relationships. The ordering is achieved through a property named \u201cOrder\u201d in the base relationship definition. There is no uniqueness constraint on the Order field. The order of the relationships with the same \u201corder\u201d property value is not guaranteed, however it is guaranteed that they may be ordered after relationships with lower \u201corder\u201d value and before relationships with higher \u201corder\u201d field value.","Applications can get the relationships in the default order by ordering on the combination (SourceItemID, RelationshipID, Order). All relationship instances sourced from a given Item are ordered as a single collection regardless of the type of the relationships in the collection. This however guarantees that all relationships of a given type (e.g., FolderMembers) are an ordered subset of the relationship collection for a given Item.","The data store API  for manipulating relationships implement a set of operations that support ordering of relationships. The following terms are introduced to help explain the operations:\n\n","As previously mentioned, every Item must be a member of an Item Folder. In terms of Relationships, every Item must have a relationship with an Item Folder. In several embodiments of the present invention, certain relationships are represented by Relationships existing between the Items.","As implemented for various embodiments of the present invention, a Relationship provides a directed binary relationship that is \u201cextended\u201d by one Item (the source) to another Item (the target). A Relationship is owned by the source Item (the Item that extended it), and thus the Relationship is removed if the source is removed (e.g., the Relationship is deleted when the source Item is deleted). Moreover, in certain instances, a Relationship may share ownership of (co-own) the target Item, and such ownership might be reflected in the IsOwned property (or its equivalent) of the Relationship (as shown in  for the Relationship property type). In these embodiments, creation of a new IsOwned Relationship automatically increments a reference count on the target Item, and deletion of such a Relationship may decrement the reference count on the target Item. For these specific embodiments, Items continue to exist if they have a reference count greater than zero, and are automatically deleted if and when the count reaches zero. Again, an Item Folder is an Item that has (or is capable of having) a set of Relationships to other Items, these other Items comprising the membership of the Item Folder. Other actual implementations of Relationships are possible and anticipated by the present invention to achieve the functionality described herein.","Regardless of actual implementation, a Relationship is a selectable connection from one object to another. The ability for an Item to belong to more than one Item Folder, as well as to one or more Categories, and whether these Items, Folders, and Categories are public or private, is determined by the meanings given to the existence (or lack thereof) in an Item-based structure. These logical Relationships are the meanings assigned to a set of Relationships, regardless of physical implementation, which are specifically employed to achieve the functionality described herein. Logical Relationships are established between the Item and its Item Folder(s) or Categories (and vice versa) because, in essence, Item Folders and Categories are each a special type of Item. Consequently, Item Folders and Categories can be acted upon the same way as any other Item\u2014copied, added to an email message, embedded in a document, and so and so forth without limitation\u2014and Item Folders and Categories can be serialized and de-serialized (imported and exported) using the same mechanisms as for other Items. (For example, in XML all Items might have a serialization format, and this format applies equally to Item Folders, Categories, and Items.)","The aforementioned Relationships, which represent the relationship between an Item and it Item Folder(s) can logically extend from the Item to the Item Folder, from the Item Folder to the Item, or both. A Relationship that logically extends from an Item to an Item Folder denotes that the Item Folder is public to that Item and shares its membership information with that Item; conversely, the lack of a logical Relationship from an Item to an Item Folder denotes that the Item Folder is private to that Item and does not share its membership information with that Item. Similarly, a Relationship that logically extends from an Item Folder to an Item denotes that the Item is public and sharable to that Item Folder, whereas the lack of a logical Relationship from the Item Folder to the Item denotes that the Item is private and non-sharable. Consequently, when an Item Folder is exported to another system, it is the \u201cpublic\u201d Items that are shared in the new context, and when an Item searches its Items Folders for other, sharable Items, it is the \u201cpublic\u201d Item Folders that provide the Item with information regarding sharable Items that belong thereto.",{"@attributes":{"id":"p-0169","num":"0440"},"figref":"FIG. 9","b":["900","902","904","906","900","912","902","902","900","904","906","900","902","900","900","902","902","904","924","900","900","904","900","904","904","900","902","906","900","902","904","900","916","906","906","926","900","906","900","902","904","900","900","906"]},"As previously discussed, the Items in an Item Folder do not need to share a commonality because Item Folders are not \u201cdescribed.\u201d Categories, on the other hand, are described by a commonality that is common to all of its member Items. Consequently the membership of a Category is inherently limited to Items having the described commonality and, in certain embodiments, all Items meeting the description of a Category are automatically made members of the Category. Thus, whereas Item Folders allow trivial type structures to be represented by their membership, Categories allow membership based on the defined commonality.","Of course Category descriptions are logical in nature, and therefore a Category may be described by any logical representation of types, properties, and\/or values. For example, a logical representation for a Category may be its membership to comprise Items have one of two properties or both. If these described properties for the Category are \u201cA\u201d and \u201cB\u201d, then the Categories membership may comprise Items having property A but not B, Items having property B but not A, and Items having both properties A and B. This logical representation of properties is described by the logical operator \u201cOR\u201d where the set of members described by the Category are Items having property A OR B. Similar logical operands (including without limitation \u201cAND\u201d, \u201cXOR\u201d, and \u201cNOT\u201d alone or in combination) can also be used describe a category as will be appreciated by those of skill in the art.","Despite the distinction between Item Folders (not described) and Categories (described), Categories Relationship to Items and Items Relationship to Categories essentially the same way as disclosed herein above for Item Folders and Items in many embodiments of the present invention.",{"@attributes":{"id":"p-0173","num":"0444"},"figref":"FIG. 10","b":["1000","1002","1004","1006","1008","1008","1000","1000","1012","1002","1002","1000","1004","1006","1000","1002","1000","1000","1002","1002","1004","1024","1000","1000","1004","1000","1004","1004","1000","1002","1006","1000","1002","1004","1000","1016","1006","1006","1026","1000","1006","1000","1002","1004","1000","1000","1006"]},"Finally, because Categories and Item Folders are themselves Items, and Items may Relationship to each other, Categories may Relationship to Item Folders and vice versa, and Categories, Item Folders, and Items can Relationship to other Categories, Item Folders, and Item respectively in certain alternative embodiments. However, in various embodiments, Item Folder structures and\/or Category structures are prohibited, at the hardware\/software interface system level, from containing cycles. Where Item Folder and Category structures are akin to directed graphs, the embodiments that prohibit cycles are akin to directed acyclic graphs (DAGs) which, by mathematical definition in the art of graph theory, are directed graphs wherein no path starts and ends at the same vertex.","6. Extensibility","The storage platform is intended to be provided with an initial set of schemas , as described above. In addition, however, in at least some embodiments, the storage platform allows customers, including independent software vendor (ISVs), to create new schemas  (i.e. new Item and Nested Element types). This section addresses the mechanism for creating such schemas by extending the Item types and Nested Element types (or simply \u201cElement\u201d types) defined in the initial set of schemas .","Preferably, extension of the initial set of Item and Nested Element types is constrained as follows:\n\n","Since an Item type or Nested Element type defined by the initial set of storage platform schemas may not exactly match an ISV application's need, it is necessary to allow ISVs to customize the type. This is allowed with the notion of Extensions. Extensions are strongly typed instances but (a) they cannot exist independently and (b) they must be attached to an Item or Nested Element.","In addition to addressing the need for schema extensibility, Extensions are also intended to address the \u201cmulti-typing\u201d issue. Since, in some embodiments, the storage platform may not support multiple inheritance or overlapping subtypes, applications can use Extensions as a way to model overlapping type instances (e.g. Document is a legal document as well a secure document).","a) Item Extensions","To provide Item extensibility, the data model further defines an abstract type named Base.Extension. This is a root type for the hierarchy of extension types. Applications can subtype Base.Extension to create specific extension types.","The Base.Extension type is defined in the Base schema as follows:",{"@attributes":{"id":"p-0182","num":"0457"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<Type Name=\u201cBase.Extension\u201d IsAbstract=\u201cTrue\u201d>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<Propety Name=\u201cItemID\u201d"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Type=\u201cthe storage platformTypes.uniqueidentified\u201d"]},{"entry":[{},"Nullable=\u201cfalse\u201d"]},{"entry":[{},"MultiValued=\u201cfalse\u201d\/>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<Property Name=\u201cExtensionID\u201d"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Type=\u201cthe storage platformTypes.uniqueidentified\u201d"]},{"entry":[{},"Nullable=\u201cfalse\u201d"]},{"entry":[{},"MultiValued=\u201cfalse\u201d\/>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/Type>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"The ItemID field contains the ItemID of the item that the extension is associated with. An Item with this ItemID must exist. The extension can not be created if the item with the given ItemID does not exist. When the Item is deleted all the extensions with the same ItemID are deleted. The tuple (ItemID,ExtensionID) uniquely identifies an extension instance.","The structure of an extension type is similar to that of an item type:\n\n","The following restrictions apply for extension types\n\n","There are no constraints on the types of extensions that can be associated with a given Item type. Any extension type is allowed to extend any item type. When multiple extension instances are attached to an item, they are independent from each other in both structure and behavior.","The extension instances are stored and accessed separately from the item. All extension type instances are accessible from a global extension view. An efficient query can be composed that will return all the instances of a given type of extension regardless of what type of item they are associated with. The storage platform APIs provides a programming model that can store, retrieve and modify extensions on items.","The extension types can be type sub-typed using the storage platform single inheritance model. Deriving from an extension type creates a new extension type. The structure or the behavior of an extension cannot override or replace the structure or behaviors of the item type hierarchy.","Similar to Item types, Extension type instances can be directly accessed through the view associated with the extension type. The ItemID of the extension indicates which item they belong to and can be used to retrieve the corresponding Item object from the global Item view.","The extensions are considered part of the item for the purposes of operational consistency. The Copy\/Move, Backup\/Restore and other common operations that the storage platform defines may operate on the extensions as part of the item.","Consider the following example. A Contact type is defined in the Windows Type set.",{"@attributes":{"id":"p-0192","num":"0473"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<Type Name=\u201cContact\u201d BaseType=\u201cBase.Item\u201d >"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<Property Name=\u201cName\u201d"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Type=\u201cString\u201d"]},{"entry":[{},"Nullable=\u201cfalse\u201d"]},{"entry":[{},"MultiValued=\u201cfalse\u201d\/>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<Property Name=\u201cAddress\u201d"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Type=\u201cAddress\u201d"]},{"entry":[{},"Nullable=\u201ctrue\u201d"]},{"entry":[{},"MultiValued=\u201cfalse\u201d\/>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/Type>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"A CRM application developer would like to attach a CRM application extension to the contacts stored in the storage platform. The application developer would define a CRM extension that would contain the additional data structure that the application can manipulate.",{"@attributes":{"id":"p-0194","num":"0475"},"tables":{"@attributes":{"id":"TABLE-US-00007","num":"00007"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<Type Name=\u201cCRMExtension\u201d BaseType=\u201cBase.Extension\u201d >"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<Property Name=\u201cCustomerID\u201d"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Type=\u201cString\u201d"]},{"entry":[{},"Nullable=\u201cfalse\u201d"]},{"entry":[{},"MultiValued=\u201cfalse\u201d\/>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},". . ."]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/Type>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"An HR application developer may want to also attach additional data with the Contact. This data is independent from the CRM application data. Again the application developer can create an extension",{"@attributes":{"id":"p-0196","num":"0477"},"tables":{"@attributes":{"id":"TABLE-US-00008","num":"00008"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<Type Name=\u201cHRExtension\u201d EBaseType=\u201cBase.Extension\u201d >"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<Property Name=\u201cEmployeeID\u201d"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Type=\u201cString\u201d"]},{"entry":[{},"Nullable=\u201cfalse\u201d"]},{"entry":[{},"MultiValued=\u201cfalse\u201d\/>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},". . ."]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/Type>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"CRMExtension and HRExtension are two independent extensions that can be attached to Contact items. They are created and accessed independently of each other.","In the above example, the fields and methods of the CRMExtension type cannot override fields or methods of the Contact hierarchy. It should be noted that instances of the CRMExtension type can be attached to Item types other than Contact.","When the Contact item is retrieved, its item extensions are not automatically retrieved. Given a Contact item, its related item extensions can be accessed by querying the global extension view for extensions with the same ItemId.","All CRMExtension extensions in the system can be accessed through the CRMExtension type view, regardless of which item they belong to. All item extension of an item share the same item id. In the above example, the Contact item instance and the attached CRMExtension and HRExtension instances the same ItemID.","The following table summarizes the similarities and differences between Item, Extension and NestedElement types:",{"@attributes":{"id":"p-0202","num":"0483"},"tables":{"@attributes":{"id":"TABLE-US-00009","num":"00009"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Item vs Item Extension vs NestedElement"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"63pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Item","Item Extension","NestedElement"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"63pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Item ID","Has its own item id","Shares the item id","Does not have its"]},{"entry":[{},{},"of the item","own item id. Nested"]},{"entry":[{},{},{},"element is part of"]},{"entry":[{},{},{},"the item"]},{"entry":["Storage","Item hierarchy is","Item extension","Stored with item"]},{"entry":[{},"stored in its own","hierarchy is stored"]},{"entry":[{},"tables","in its own tables"]},{"entry":["Query\/Search","Can query item","Can query item","Can generally be"]},{"entry":[{},"tables","extension tables","queried only within"]},{"entry":[{},{},{},"the containing"]},{"entry":[{},{},{},"item context"]},{"entry":["Query\/Search","Can search across","Can search across","Can generally only"]},{"entry":["scope","all instances of an","all instances of an","search within nested"]},{"entry":[{},"item type","item extension type","element type"]},{"entry":[{},{},{},"instances of a singe"]},{"entry":[{},{},{},"(containing) item"]},{"entry":["Relationship","Can have Rela-","No Relation-","No Relationships to"]},{"entry":["semantics","tionships to","ships to item","nested elements"]},{"entry":[{},"items","extensions"]},{"entry":["Association","Can be related to","Can generally only","Related to item via"]},{"entry":["to items","other items via","be related via","fields. Nested"]},{"entry":[{},"holding, embedded","extensions. The","elements are part of"]},{"entry":[{},"and soft","extension semantics","the item"]},{"entry":[{},"Relationships","is similar to"]},{"entry":[{},{},"embedded item"]},{"entry":[{},{},"semantics"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}}]}},"br":{}},"Nested Element types are not extended with the same mechanism as the Item types. Extensions of nested elements are stored and accessed with the same mechanisms as fields of nested element types.","The data model defines a root for nested element types named Element:",{"@attributes":{"id":"p-0205","num":"0486"},"tables":{"@attributes":{"id":"TABLE-US-00010","num":"00010"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<Type Name=\u201cElement\u201d"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"IsAbstract=\u201cTrue\u201d>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<Property Name=\u201cElementID\u201d"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Type=\u201cthe storage platformTypes.uniqueidentifier\u201d"]},{"entry":[{},"Nullable=\u201cfalse\u201d"]},{"entry":[{},"MultiValued=\u201cfalse\u201d\/>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/Type>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"The NestedElement type inherits from this type. The NestedElement element type additionally defines a field that is a multi-set of Elements.",{"@attributes":{"id":"p-0207","num":"0488"},"tables":{"@attributes":{"id":"TABLE-US-00011","num":"00011"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<Type Name=\u201cNestedElement\u201d BaseType=\u201cBase.Element\u201d"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"IsAbstract=\u201cTrue\u201d>"]},{"entry":[{},"<Property Name=\u201cExtensions\u201d"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Type=\u201cBase.Element\u201d"]},{"entry":[{},"Nullable=\u201cfalse\u201d"]},{"entry":[{},"MultiValued=\u201ctrue\u201d\/>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/Type>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"The NestedElement extensions are different from item extensions in the following ways:\n\n","These extensions are stored the same way as other nested elements (of the item) are stored. Like other nested sets, the NestedElement extensions are stored in a UDT. They are accessible through the Extensions field of the nested element type.","The collection interfaces used to access multi-valued properties is also used for accessing and iterating over set of type extensions.","The following table summarizes and compares Item Extensions and NestedElement extensions.",{"@attributes":{"id":"p-0212","num":"0495"},"tables":{"@attributes":{"id":"TABLE-US-00012","num":"00012"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Item extensions vs NestedElement extensions"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"84pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Item Extension","NestedElement Extension"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"84pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Storage","Item extension","Stored like"]},{"entry":[{},"hierarchy is","nested elements"]},{"entry":[{},"stored in its"]},{"entry":[{},"own tables"]},{"entry":["Query\/Search","Can query item","Can generally only be"]},{"entry":[{},"extension","queried within the"]},{"entry":[{},"tables","containing item context"]},{"entry":["Query\/Search","Can search across all","Can generally only search"]},{"entry":["scope","instances of an item","within nested element type"]},{"entry":[{},"extension type","instances of a singe"]},{"entry":[{},{},"(containing) item"]},{"entry":["Programmability","Need special extension","NestedElement extensions"]},{"entry":[{},"APIs and special","are like any other multi-"]},{"entry":[{},"querying on","valued field of nested"]},{"entry":[{},"extension tables","element; normal nested"]},{"entry":[{},{},"element type APIs are used"]},{"entry":["Behavior","Can associate behavior","No behavior permitted (?)"]},{"entry":["Relationship","No Relationships","No Relationships to"]},{"entry":["semantics","to item extensions","NestedElement extensions"]},{"entry":["Item ID","Shares the item","Does not have its own item"]},{"entry":[{},"id of the item","id. NestedElement"]},{"entry":[{},{},"extension is part of the"]},{"entry":[{},{},"item"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}},"br":{}},"As mentioned above, the data store is implemented on a database engine. In the present embodiment, the database engine comprises a relational database engine that implements the SQL query language, such as the Microsoft SQL Server engine, with object relational extensions. This section describes the mapping of the data model that the data store implements to the relational store and provides information on the logical API consumed by storage platform clients, in accordance with the present embodiment. It is understood, however, that a different mapping may be employed when a different database engine is employed. Indeed, in addition to implementing the storage platform conceptual data model on a relational database engine, it can also be implemented on other types of databases, e.g. object-oriented and XML databases.","An object-oriented (OO) database system provides persistence and transactions for programming language objects (e.g. C++, Java). The storage platform notion of an \u201citem\u201d maps well to an \u201cObject\u201d in object-oriented systems, though embedded collections would have to be added to Objects. Other storage platform type concepts, like inheritance and nested element types, also map object-oriented type systems. Object-oriented systems typically already support object identity; hence, item identity can be mapped to object identity. The item behaviors (operations) map well to object methods. However, object-oriented systems typically lack organizational capabilities and are poor in searching. Also, object-oriented systems to do not provide support for unstructured and semi-structured data. To support the complete storage platform data model described herein, concepts like relationships, folders, and extensions would need to be added to the object data model. In addition, mechanisms like promotions, synchronization, notifications, and security would need to be implemented.","Similar to object-oriented systems, XML databases, based on XSD (XML Schema Definition), support a single-inheritance based type system. The item type system of the present invention could be mapped to the XSD type model. XSDs also do not provide support for behaviors. The XSDs for items would have to be augmented with item behaviors. XML databases deal with single XSD documents and lack organization and broad search capabilities. As with object-oriented databases, to support the data model described herein, other concepts like relationships, and folders would need to be incorporated into such XML databases; also, mechanisms like synchronization, notifications and security would need to be implemented.","1. Data Store Implementation Using UDTs","In the present embodiment, the relational database engine , which in one embodiment comprises the Microsoft SQL Server engine, supports built-in scalar types. Built-in scalar types are \u201cnative\u201d and \u201csimple\u201d. They are native in the sense that the user cannot define their own types and they are simple in that they cannot encapsulate a complex structure. User-defined types (hereinafter: UDTs) provide a mechanism for type extensibility above and beyond the native scalar type system by enabling users to extend the type system by defining complex, structured types. Once defined by a user, a UDT can be used anywhere in the type system that a built-in scalar type might be used.","In accordance with an aspect of the present invention, the storage platform schemas are mapped to UDT classes in the database engine store. Data store Items are mapped to UDT classes deriving from the Base.Item type. Like Items, Extensions are also mapped to UDT classes and make use of inheritance. The root Extension type is Base.Extension, from which all Extension types are derived.","A UDT is a CLR class\u2014it has state (i.e., data fields) and behavior (i.e., routines). UDTs are defined using any of the managed languages\u2014C#, VB.NET, etc. UDT methods and operators can be invoked in T-SQL against an instance of that type. A UDT can be: the type of a column in a row, the type of a parameter of a routine in T-SQL, or the type of a variable in T-SQL.","The following example illustrates the basics of UDTs. Assume that MapLib.dll has the assembly called MapLib. In this assembly, there's a class called Point, under the namespace BaseTypes:",{"@attributes":{"id":"p-0221","num":"0504"},"tables":{"@attributes":{"id":"TABLE-US-00013","num":"00013"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"namespace BaseTypes"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"public class Point"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/returns the distance from the specified point."]},{"entry":[{},"public double Distance(Point p)"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\/\/ return the distance between Point p and this Point"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"\/\/ other stuff in the class"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}},"br":{}},{"@attributes":{"id":"p-0222","num":"0505"},"tables":{"@attributes":{"id":"TABLE-US-00014","num":"00014"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"CREATE ASSEMBLY MapLib"]},{"entry":[{},"FROM \u2018\\\\mysrv\\share\\MapLib.dll\u2019"]},{"entry":[{},"go"]},{"entry":[{},"CREATE TYPE Point"]},{"entry":[{},"EXTERNAL NAME \u2018BaseTypes.Point\u2019"]},{"entry":[{},"go"]},{"entry":[{},"Once created, the \u201cPoint\u201d UDT can be used as a column in a"]},{"entry":[{},"table and methods can be invoked"]},{"entry":[{},"in T-SQL as shown below:"]},{"entry":[{},"Create table Cities("]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Name varchar(20),"]},{"entry":[{},"State varchar(20),"]},{"entry":[{},"Location Point)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"-- Retrieve the Distance of the cities"]},{"entry":[{},"-- from co-ordinates (32,23)"]},{"entry":[{},"Declare @p point(32, 23), @distance float"]},{"entry":[{},"Select Location::Distance(@p)"]},{"entry":[{},"From Cities"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"The mapping of storage platform schemas to UDT classes is fairly straightforward at a high level. Generally, a storage platform Schema is mapped to a CLR namespace. A storage platform Type is mapped to a CLR class. The CLR class inheritance mirrors the storage platform Type inheritance, and a storage platform Property is mapped to a CLR class property.","The Item hierarchy illustrated in  is used as an example in this document. It shows the Base.Item type from which all Item types are derived, along with a set of derived Item types (e.g., Contact.Person and Contact. Employee), with inheritance indicated by arrows.","2. Item Mapping","Given the desirability for Items to be globally searchable, and the support in the relational database of the present embodiment for inheritance and type substitutability, one possible implementation for Item storage in the database store would be to store all Items in a single table with a column of type Base.Item. Using type substitutability, Items of all types could be stored, and searches could be filtered by Item type and sub-type using Yukon's \u201cis of (Type)\u201d operator.","However, due to concerns about the overhead associated with such an approach, in the present embodiment, the Items are divided by top-level type, such that Items of each type \u201cfamily\u201d are stored in a separate table. Under this partitioning scheme, a table is created for each Item type inheriting directly from Base.Item. Types inheriting below these are stored in the appropriate type family table using type substitutability, as described above. Only the first level of inheritance from Base.Item is treated specially. For the example Item hierarchy shown in , this results in the following type family tables:",{"@attributes":{"id":"p-0228","num":"0511"},"tables":{"@attributes":{"id":"TABLE-US-00015","num":"00015"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"create table Contact.[Table!Person] ("]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"_Item Contact.Person not null,"]},{"entry":[{},"{Change tracking information}"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},")"]},{"entry":[{},"create table Doc.[Table!Document] ("]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"_Item Doc.Document not null,"]},{"entry":[{},"{Change tracking information}"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},")"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"A \u201cshadow\u201d table is used to store copies of globally searchable properties for all Items. This table may be maintained by the Update( ) method of the storage platform API, through which all data changes are made. Unlike the type family tables, this global Item table contains only the top-level scalar properties of the Item, not the full UDT Item object. The structure of the global Item table is as follows:",{"@attributes":{"id":"p-0230","num":"0513"},"tables":{"@attributes":{"id":"TABLE-US-00016","num":"00016"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"create table Base.[Table!Item] ("]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"ItemID \u2003uniqueidentifier not null\u2003constraint"]},{"entry":[{},"[PK_Clu_Item!ItemID] primary key clustered,"]},{"entry":[{},"TypeID\u2003uniqueidentifier\u2003not null,"]},{"entry":[{},"{Additional Properties of Base.Item},"]},{"entry":[{},"{Change tracking information}"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},")"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"The global Item table allows navigation to the Item object stored in a type family table by exposing an ItemID and a TypeID. The ItemID will generally uniquely identify the Item within the data store. The TypeID may be mapped using metadata, which is not described here, to a type name and the view containing the Item.","Since finding an Item by its ItemID may be a common operation, both in the context of the global Item table and otherwise, a Getltem() function is provided to retrieve an Item object given an Item's ItemID. This function has the following declaration:","Base.Item Base.Getltem (uniqueidentifier ItemID)","For convenient access and to hide implementation details to the extent possible, all queries of Items might be against views built on the Item tables described above. Specifically, views may be created for each Item type against the appropriate type family table. These type views may select all Items of the associated type, including sub-types. For convenience, in addition to the UDT object, the views may expose columns for all of the top-level fields of that type, including inherited fields. Views for the example Item hierarchy shown in  are as follows:",{"@attributes":{"id":"p-0234","num":"0517"},"tables":{"@attributes":{"id":"TABLE-US-00017","num":"00017"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"create view Contact.Person as"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"select _Item.ItemID, {Properties of Base.Item},"]},{"entry":[{},"{Properties of Contact.Person}, {Change tracking"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"information}, _Item"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"from Contact.[Table!Person]"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"--Note that the Contact.Employee view uses a \u201cwhere\u201d predicate"},{"entry":"-- to restrict the set of found Items to instances of Contact.Employee"},{"entry":"create view Contact.Employee as"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"select _Item.ItemID, {Properties of Base.Item},"]},{"entry":[{},"{Properties of Contact.Person}, {Properties of"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Contact.Employee},"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"{Change tracking information}, cast"]},{"entry":[{},"(_Item as Contact.Employee)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"from Contact.[Table!Person]"]},{"entry":[{},"where _Item is of (Contact.Employee)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"create view Doc.Document as"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"select _Item.ItemID, {Properties of Base.Item},"]},{"entry":[{},"{Properties of Doc.Document}, {Change tracking"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"information}, _Item"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"from Doc.[Table!Document]"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"--Note that the Doc.WordDocument view uses a \u201cwhere\u201d predicate"},{"entry":"-- to restrict the set of found Items to instances of Doc.WordDocument"},{"entry":"create view Doc.WordDocument as"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"select _Item.ItemID, {Properties of Base.Item},"]},{"entry":[{},"{Properties of Doc.Document}, {Properties of"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Doc.WordDocument},"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"{Change tracking information}, cast"]},{"entry":[{},"(_Item as Doc.WordDocument)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"from Doc.[Table!Document]"]},{"entry":[{},"where _Item is of (Doc.WordDocument)"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"For completeness, a view may also be created over the global Item table. This view may initially expose the same columns as the table:",{"@attributes":{"id":"p-0236","num":"0519"},"tables":{"@attributes":{"id":"TABLE-US-00018","num":"00018"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"create view Base.Item as"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"select ItemID, TypeID, {Properties of Base.Item},"]},{"entry":[{},"{Change tracking information}"]},{"entry":[{},"from Base.[Table!Item]"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"3. Extension Mapping","Extensions are very similar to Items and have some of the same requirements. As another root type supporting inheritance, Extensions are subject to many of the same considerations and trade-offs in storage. Because of this, a similar type family mapping is applied to Extensions, rather than a single table approach. Of course, in other embodiments, a single table approach could be used.","In the present embodiment, an Extension is associated with exactly one Item by ItemID, and contains an ExtensionID that is unique in the context of the Item. The Extension table has the following definition:",{"@attributes":{"id":"p-0240","num":"0523"},"tables":{"@attributes":{"id":"TABLE-US-00019","num":"00019"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"create table Base.[Table!Extension] ("]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"ItemID uniqueidentifier not null,"]},{"entry":[{},"ExtensionID uniqueidentifier not null,"]},{"entry":[{},"TypeID\u2003uniqueidentifier not null,"]},{"entry":[{},"{Properties of Base.Extension},"]},{"entry":[{},"{Change tracking information},"]},{"entry":[{},"constraint [PK_Clu_Extension!ItemID!ExtensionID]"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"primary key clustered (ItemID asc, ExtensionID asc)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},")"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"As with Items, a function might be provided to retrieve an Extension given its identity, which consists of an ItemID and ExtensionID pair. This function has the following declaration:","Base.Extension Base.GetExtension (uniqueidentifier ItemID, uniqueidentifier ExtensionID,)","A View is created for each Extension type, similar to the Item type views. Assume an Extension hierarchy parallel to the example Item hierarchy, with the following types: Base.Extension, Contact.PersonExtension, Contact.EmployeeExtension. The following views may be created:",{"@attributes":{"id":"p-0243","num":"0526"},"tables":{"@attributes":{"id":"TABLE-US-00020","num":"00020"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"create view Base.Extension as"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"select ItemID, ExtensionID, TypeID, {Properties of"]},{"entry":[{},"Base.Extension}, {Change tracking information}"]},{"entry":[{},"from Base.[Table!Extension]"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"create view Contact.[Extension!PersonExtension] as"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"select _Extension.ItemID, _Extension.ExtensionID,"]},{"entry":[{},"{Properties of Base.Extension, {Properties of"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Contact.PersonExtension},"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"{Change tracking information}, _Extension"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"from Base.[Table!PersonExtension]"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"create view Contact.[Extension!EmployeeExtension] as"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"select _Extension.ItemID, _Extension.Extension ID,"]},{"entry":[{},"{Properties of Base.Extension}, {Properties of"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Contact.Person Extension},"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"{Properties of Contact.EmployeeExtension},"]},{"entry":[{},"{Change tracking information},"]},{"entry":[{},"cast (_Extension as Contact.EmployeeExtension)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"from Base.[Table!PersonExtension]"]},{"entry":[{},"where _Extension is of (Contact.EmployeeExtension)"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"4. Nested Element Mapping","Nested Elements are types that can be embedded in Items, Extensions, Relationships, or other Nested Elements to form deeply nested structures. Like Items and Extensions, Nested Elements are implemented as UDT's, but they are stored within an Items and Extensions. Therefore, Nested Elements have no storage mapping beyond that of their Item and Extension containers. In other words, there are no tables in the system which directly store instances of NestedElement types, and there are no views dedicated specifically to Nested Elements.","5. Object Identity","Each entity in the data model, i.e., each Item, Extension and Relationship, has a unique key value. An Item is uniquely identified by its ItemId. An Extension is uniquely identified by a composite key of (ItemID, ExtensionID). A Relationship is identified by a composite key (ItemID, RelationshipId). ItemId, ExtensionID and RelationshipId are GUID values.","6. SQL Object Naming","All objects created in the data store can be stored in a SQL schema name derived from the storage platform schema name. For example, the storage platform Base schema (often called \u201cBase\u201d) may produce types in the \u201c[System.Storage]\u201d SQL schema such as \u201c[System.Storage].Item\u201d. Generated names are prefixed by a qualifier to eliminate naming conflicts. Where appropriate, an exclamation character (!) is used as a separator for each logical part of the name. The table below outlines the naming convention used for objects in the data store. Each schema element (Item, Extension, Relationship and View), is listed along with the decorated naming convention used to access instances in the data store.",{"@attributes":{"id":"p-0250","num":"0533"},"tables":{"@attributes":{"id":"TABLE-US-00021","num":"00021"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"84pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}},{"entry":["Object","Name Decoration","Description","Example"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Master Item","Master!Item","Provides a","[System.Storage]."]},{"entry":["Search View",{},"summary of items","[Master!Item]"]},{"entry":[{},{},"in the current"]},{"entry":[{},{},"item domain."]},{"entry":["Typed Item","ItemType","Provides all","[AcmeCorp.Doc]."]},{"entry":["search view",{},"property data","[OfficeDoc]"]},{"entry":[{},{},"from item and any"]},{"entry":[{},{},"parent type(s)."]},{"entry":["Master","Master!Extension","Provides a","[System.Storage]."]},{"entry":["Extension",{},"summary of all","[Master!Extension]"]},{"entry":["Search View",{},"extensions in the"]},{"entry":[{},{},"current item"]},{"entry":[{},{},"domain."]},{"entry":["Typed","Extension!extensionType","Provides all","[AcmeCorp.Doc]."]},{"entry":["extension",{},"property data for","[Extension!StickyNote]"]},{"entry":["search view",{},"extension."]},{"entry":["Master","Master!Relationship","Provides a","[System.Storage]."]},{"entry":["Relationship",{},"summary of all","[Master!Relationship]"]},{"entry":["View",{},"relationships in"]},{"entry":[{},{},"the current item"]},{"entry":[{},{},"domain."]},{"entry":["Relationship","Relationship!relationship","Provides all data","[AcmeCorp.Doc]."]},{"entry":["view","Name","associated with a","[Relationship!AuthorsFrom"]},{"entry":[{},{},"given relationship","Document]"]},{"entry":["View","View!viewName","Provides the","[AcmeCorp.Doc]."]},{"entry":[{},{},"columns\/types","[View!DocumentTitles]"]},{"entry":[{},{},"based on the"]},{"entry":[{},{},"schema view"]},{"entry":[{},{},"definition."]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}}}}},"7. Column Naming","When mapping any object model into a store, the possibility of naming collisions occur due to additional information stored along with an application object. In order to avoid naming collisions, all non-type specific columns (columns which do not map directly to a named Property in a type declaration) is be prefixed with an underscore (_) character. In the present embodiment, underscore (_) characters are disallowed as the beginning character of any identifier property. Further, in order to unify naming between CLR and the data store, all properties of a storage platform types or schema element (relationship, etc.) should have a capitalized first character.","8. Search Views","Views are provided by the storage platform for searching stored content. A SQL view is provided for each Item and Extension type. Further, views are provided to support Relationships and Views (as defined by the Data Model). All SQL views and underlying tables in the storage platform are read-only. Data may be stored or changed using the Update() method of the storage platform API, as described more fully below.","Each view explicitly defined in a storage platform schema (defined by the schema designer, and not automatically generated by the storage platform) is accessible by the named SQL view [<schema-name>].[View!<view-name>]. For example, a view named \u201cBookSales\u201d in the schema \u201cAcmePublisher.Books\u201d would be accessible using the name \u201c[AcmePublisher.Books].[View!BookSales]\u201d. Since the output format of a view is custom on a per-view basis (defined by an arbitrary query provided by the party defining the view), the columns are directly mapped based on the schema view definition.","All SQL search views in the storage platform data store use the following ordering convention for columns:\n\n","Members of each type family are searchable using a series of Item views, with there being one view per Item type in the data store.","a) Item","Each Item search view contains a row for each instance of an Item of the specific type or its subtypes. For example, the view for Document could return instances of Document, LegalDocument and ReviewDocument. Given this example, the Item views can be conceptualized as shown in .","(1) Master Item Search View","Each instance of a storage platform data store defines a special Item view called the Master Item View. This view provides summary information on each Item in the data store. The view provides one column per Item type property, a column which described the type of the Item and several columns which are used to provide change tracking and synchronization information. The master item view is identified in a data store using the name \u201c[System.Storage].[Master!Item]\u201d.",{"@attributes":{"id":"p-0261","num":"0549"},"tables":{"@attributes":{"id":"TABLE-US-00022","num":"00022"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"119pt","align":"left"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]},{"entry":[{},"Column","Type","Description"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"ItemId","ItemId","The storage platform identity"]},{"entry":[{},{},{},"of the Item"]},{"entry":[{},"_TypeId","TypeId","The TypeId of the Item - identifies"]},{"entry":[{},{},{},"the exact type of the Item and can"]},{"entry":[{},{},{},"be used to retrieve information on"]},{"entry":[{},{},{},"the type using a Metadata catalog."]},{"entry":[{},"_RootItemId","ItemId","The ItemId of the first"]},{"entry":[{},{},{},"non-embedded ancestor that controls"]},{"entry":[{},{},{},"the lifetime of this item."]},{"entry":[{},"<global",". . .","Global change tracking"]},{"entry":[{},"change",{},"information"]},{"entry":[{},"tracking>"]},{"entry":[{},"<Item","n\/a","One column per Item type"]},{"entry":[{},"props>",{},"property"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]}}}}},"(2) Typed Item Search Views","Each Item type also has a search view. While similar to the root Item view, this view also provides access to the Item object via the \u201c_Item\u201d column. Each typed item search view is identified in a data store using the name [schemaName].[itemTypeName]. For example [AcmeCorp.Doc].[OfficeDoc].",{"@attributes":{"id":"p-0264","num":"0552"},"tables":{"@attributes":{"id":"TABLE-US-00023","num":"00023"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"91pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Column","Type","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["ItemId","ItemId","The storage platform"]},{"entry":[{},{},"identity of the Item"]},{"entry":["<type change",". . .","Type change tracking"]},{"entry":["tracking>",{},"information"]},{"entry":["<parent props>","<property","One column per parent"]},{"entry":[{},"specific>","property"]},{"entry":["<item props>","<property","One column per exclusive"]},{"entry":[{},"specific>","property of this type"]},{"entry":["_Item","CLR type of Item","CLR object - type of"]},{"entry":[{},{},"declared Item"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}},"br":{}},"All Item Extensions in a WinFS Store are also accessible using search views.","(1) Master Extension Search View","Each instance of a data store defines a special Extension view called the Master Extension View. This view provides summary information on each Extension in the data store. The view has a column per Extension property, a column which describes the type of the Extension and several columns which are used to provide change tracking and synchronization information. The master extension view is identified in a data store using the name \u201c[System.Storage].[Master!Extension]\u201d.",{"@attributes":{"id":"p-0268","num":"0556"},"tables":{"@attributes":{"id":"TABLE-US-00024","num":"00024"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"98pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Column","Type","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["ItemId","ItemId","The storage platform identity"]},{"entry":[{},{},"of the Item with which"]},{"entry":[{},{},"this extension is associated"]},{"entry":["ExtensionId","ExtensionId","Id of this extension instance"]},{"entry":[{},"(GUID)"]},{"entry":["_TypeId","TypeId","The TypeId of the Extension"]},{"entry":[{},{},"identifies the exact type of"]},{"entry":[{},{},"the extension and can be used"]},{"entry":[{},{},"to retrieve information on"]},{"entry":[{},{},"the extension using the"]},{"entry":[{},{},"Metadata catalog."]},{"entry":["<global change",". . .","Global change tracking"]},{"entry":["tracking>",{},"information"]},{"entry":["<ext properties>","<property","One column per Extension"]},{"entry":[{},"specific>","type property"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}}},"(2) Typed Extension Search Views","Each Extension type also has a search view. While similar to the master extension view, this view also provides access to the Item object via the _Extension column. Each typed extension search view is identified in a data store using the name [schemaName].[Extension!extensionTypeName]. For example [AcmeCorp .Doc].[Extension !OfficeDocExt].",{"@attributes":{"id":"p-0271","num":"0559"},"tables":{"@attributes":{"id":"TABLE-US-00025","num":"00025"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"105pt","align":"left"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]},{"entry":[{},"Column","Type","Description"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"ItemId","ItemId","The storage platform identity"]},{"entry":[{},{},{},"of the Item with which this"]},{"entry":[{},{},{},"extension is associated"]},{"entry":[{},"ExtensionId","ExtensionId","Id of this extension instance"]},{"entry":[{},{},"(GUID)"]},{"entry":[{},"<type change",". . .","Type change tracking"]},{"entry":[{},"tracking>",{},"information"]},{"entry":[{},"<parent","<property","One column per parent"]},{"entry":[{},"props>","specific>","property"]},{"entry":[{},"<ext props>","<property","One column per exclusive"]},{"entry":[{},{},"specific>","property of this type"]},{"entry":[{},"_Extension","CLR type of","CLR object - type of"]},{"entry":[{},{},"Extension","declared Extension"]},{"entry":[{},{},"instance"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]}}}},"br":{}},"All nested elements are stored within Items, Extensions or Relationships instances. As such, they are accessed by querying the appropriate Item, Extension, or Relationship search view.","d) Relationships","As discussed above, Relationships form the fundamental unit of linking between Items in a storage platform data store.","(1) Master Relationship Search View","Each data store provides a Master Relationship View. This view provides information on all relationship instances in the data store. The master relationship view is identified in a data store using the name \u201c[System.Storage].[Master!Relationship]\u201d.",{"@attributes":{"id":"p-0276","num":"0564"},"tables":{"@attributes":{"id":"TABLE-US-00026","num":"00026"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"77pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Column","Type","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["ItemId","ItemId","Identity of source"]},{"entry":[{},{},"endpoint (ItemId)"]},{"entry":["RelationshipId","RelationshipId","The id of the"]},{"entry":[{},"(GUID)","relationship instance"]},{"entry":["_RelTypeId","RelationshipTypeId","The RelTypeId of"]},{"entry":[{},{},"the Relationship -"]},{"entry":[{},{},"identifies the type"]},{"entry":[{},{},"of the relationship"]},{"entry":[{},{},"instance using the"]},{"entry":[{},{},"Metadata catalog."]},{"entry":["<global change",". . .","Global change"]},{"entry":["tracking>",{},"tracking information."]},{"entry":["TargetItemReference","ItemReference","Identity of target"]},{"entry":[{},{},"endpoint"]},{"entry":["_Relationship","Relationship","Instance of the"]},{"entry":[{},{},"Relationship object"]},{"entry":[{},{},"for this instance"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}}},"(2) Relationship Instance Search Views","Each declared Relationship also has a search view which returns all instances of the particular relationship. While similar to the master relationship view, this view also provides named columns for each property of the relationship data. Each relationship instance search view is identified in a data store using the name [schemaName].[Relationship!relationshipName]. For example [AcmeCorp.Doc].[Relationship!DocumentAuthor].",{"@attributes":{"id":"p-0279","num":"0567"},"tables":{"@attributes":{"id":"TABLE-US-00027","num":"00027"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"77pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Column","Type","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["ItemId","ItemId","Identify of source"]},{"entry":[{},{},"endpoint (ItemId)"]},{"entry":["RelationshipId","RelationshipId","The id of the"]},{"entry":[{},"(GUID)","relationship"]},{"entry":[{},{},"instance"]},{"entry":["<type change",". . .","Type change"]},{"entry":["tracking>",{},"tracking information"]},{"entry":["TargetItemReference","ItemReference","Identity of target"]},{"entry":[{},{},"endpoint"]},{"entry":["<source name>","ItemId","Named property of"]},{"entry":[{},{},"source endpoint"]},{"entry":[{},{},"identity"]},{"entry":[{},{},"(alias for ItemId)"]},{"entry":["<target name>","ItemReference or","Named property of"]},{"entry":[{},"derived class","target endpoint"]},{"entry":[{},{},"identity"]},{"entry":[{},{},"(alias and cast for"]},{"entry":[{},{},"TargetItemReference)"]},{"entry":["<rel property>","<property","One column per"]},{"entry":[{},"specific>","property of the"]},{"entry":[{},{},"relationship definition"]},{"entry":["_Relationship","CLR type of","CLR object - type of"]},{"entry":[{},"Relationship","declare Relationship"]},{"entry":[{},"instance"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}}},"9. Updates","All views in the storage platform data store are read-only. In order to create a new instance of a data model element (item, extension or relationship), or to update an existing instance, the ProcessOperation or ProcessUpdategram methods of the storage platform API must be used. The ProcessOperation method is a single stored procedure defined by the data store which consumes an \u201coperation\u201d that details an action to be performed. The ProcessUpdategram method is a stored procedure which takes an ordered set of operations, known as an \u201cupdategram\u201d, which collectively detail a set of actions to be performed.","The operation format is extensible and provides various operations over the schema elements. Some common operations include:\n\n","10. Change Tracking & Tombstones","Change tracking and tombstone services are provided by the data store, as discussed more fully below. This section provides an outline of the change tracking information exposed in a data store.","a) Change Tracking","Each search view provided by the data store contains columns used to provide change tracking information; the columns are common across all Item, Extension and Relationship views. Storage platform Schema Views, defined explicitly by schema designers, do not automatically provide change tracking information\u2014such information is provided indirectly through the search views on which the view itself is built.","For each element in the data store, change tracking information is available from two places\u2014the \u201cmaster\u201d element view and the \u201ctyped\u201d element view. For example, change tracking information on the AcmeCorp.Document.Document Item type is available from the Master Item View \u201c[System.Storage].[Master!Item]\u201d and typed Item search view [AcmeCorp.Document].[Document].","(1) Change Tracking in \u201cMaster\u201d Search Views","Change tracking information in the master search views provides information on the creation and update versions of an element, information on which sync partner created the element, which sync partner last updated the element and the version numbers from each partner for creation and update. Partners in sync relationships (described below) are identified by partner key. A single UDT object named_ChangeTrackingInfo of type [System.Storage.Store].ChangeTrackinglnfo contains all this information. The type is defined in the System.Storage schema._ChangeTrackingInfo is available in all global search views for Item, Extension and Relationship. The type definition of ChangeTrackinglnfo is:",{"@attributes":{"id":"p-0289","num":"0588"},"tables":{"@attributes":{"id":"TABLE-US-00028","num":"00028"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"<Type Name=\u201cChangeTrackingInfo\u201d BaseType=\u201cBase.NestedElement\u201d>"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<FieldProperty Name=\u201cCreationLocalTS\u201d"]},{"entry":[{},"Type=\u201cSqlTypes.SqlInt64\u201d"]},{"entry":[{},"Nullable=\u201cFalse\u201d \/>"]},{"entry":[{},"<FieldProperty Name=\u201cCreatingPartnerKey\u201d"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"105pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Type=\u201cSqlTypes.SqlInt32\u201d","Nullable=\u201cFalse\u201d \/>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<FieldProperty Name=\u201cCreatingPartnerTS\u201d"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"105pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Type=\u201cSqlTypes.SqlInt64\u201d","Nullable=\u201cFalse\u201d \/>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<FieldProperty Name=\u201cLastUpdateLocalTS\u201d"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"105pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Type=\u201cSqlTypes.SqlInt64\u201d","Nullable=\u201cFalse\u201d \/>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<FieldProperty Name=\u201cLastUpdatingPartnerKey\u201d"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"105pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Type=\u201cSqlTypes.SqlInt32\u201d","Nullable=\u201cFalse\u201d \/>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<FieldProperty Name=\u201cLastUpdatingPartnerTS\u201d"]},{"entry":[{},"Type=\u201cSqlTypes.SqlInt64\u201d"]},{"entry":[{},"Nullable=\u201cFalse\u201d \/>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<\/Type>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}},"br":{}},{"@attributes":{"id":"p-0290","num":"0589"},"tables":{"@attributes":{"id":"TABLE-US-00029","num":"00029"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"112pt","align":"left"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Column","Description"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"_CreationLocalTS","Creation time stamp by the"]},{"entry":[{},{},"local machine"]},{"entry":[{},"_CreatingPartnerKey","PartnerKey of the partner who"]},{"entry":[{},{},"created this entity. If the entity"]},{"entry":[{},{},"was locally created, this is the"]},{"entry":[{},{},"local machine's PartnerKey."]},{"entry":[{},"_CreatingPartnerTS","Timestamp of the time at which"]},{"entry":[{},{},"this entity was created at the"]},{"entry":[{},{},"partner corresponding to"]},{"entry":[{},{},"_CreatingPartnerKey."]},{"entry":[{},"_LastUpdateLocalTS","Local timestamp corresponding"]},{"entry":[{},{},"to the update time"]},{"entry":[{},{},"at the local machine"]},{"entry":[{},"_LastUpdatingPartnerKey","PartnerKey of the partner who last"]},{"entry":[{},{},"updated this entity. If the last"]},{"entry":[{},{},"update to the entity was done"]},{"entry":[{},{},"locally, this is the local"]},{"entry":[{},{},"machine's PartnerKey."]},{"entry":[{},"_LastUpdatingPartnerTS","Timestamp of the time at which"]},{"entry":[{},{},"this entity was updated at the"]},{"entry":[{},{},"partner corresponding to"]},{"entry":[{},{},"_LastUpdatingPartnerKey."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"(2) Change Tracking in \u201cTyped\u201d Search Views","In addition to providing the same information as the global search view, each typed search view provides additional information recording the sync state of each element in the sync topology.",{"@attributes":{"id":"p-0293","num":"0592"},"tables":{"@attributes":{"id":"TABLE-US-00030","num":"00030"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"98pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Column","Type","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["<global change",". . .","Information from global change"]},{"entry":["tracking>",{},"tracking"]},{"entry":["_ChangeUnitVersions","MultiSet<ChangeUnitVersion>","Description of version numbers"]},{"entry":[{},{},"of the change units within the"]},{"entry":[{},{},"particular element"]},{"entry":["_ElementSyncMetadata","ElementSyncMetadata","Additional version-independent"]},{"entry":[{},{},"metadata about this item that"]},{"entry":[{},{},"is only of interest to the"]},{"entry":[{},{},"Synchronization runtime."]},{"entry":["_VersionSyncMetadata","VersionSyncMetadata","Additional version-specific"]},{"entry":[{},{},"metadata about this version that"]},{"entry":[{},{},"is only of interest to the"]},{"entry":[{},{},"Synchronization runtime"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}},"br":{}},"The data store provides tombstone information for Items, Extensions and Relationships. The tombstone views provide information about both live and tombstoned entities (items, extensions and relationships) in one place. The item and extension tombstone views do not provide access to the corresponding object, while the relationship tombstone view provides access to the relationship object (the relationship object is NULL in the case of a tombstoned relationship).","(1) Item Tombstones","Item tombstones are retrieved from the system via the view [System.Storage].[Tombstone!Item].",{"@attributes":{"id":"p-0297","num":"0596"},"tables":{"@attributes":{"id":"TABLE-US-00031","num":"00031"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"77pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Column","Type","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["ItemId","ItemID","Identity of the Item"]},{"entry":["_TypeID","TypeId","Type of the Item"]},{"entry":["<Item properties>",". . .","Properties defined"]},{"entry":[{},{},"for all items"]},{"entry":["_RootItemId","ItemID","ItemID of the first"]},{"entry":[{},{},"non-embedding item"]},{"entry":[{},{},"which contains"]},{"entry":[{},{},"this item."]},{"entry":["_ChangeTrackingInfo","CLR instance of","Change tracking"]},{"entry":[{},"type","information for"]},{"entry":[{},"ChangeTrackingInfo","this item"]},{"entry":["_IsDeleted","BIT","This is a flag that"]},{"entry":[{},{},"is 0 for live items,"]},{"entry":[{},{},"and 1 for tombstoned"]},{"entry":[{},{},"items."]},{"entry":["_DeletionWallclock","UTCDATETIME","The UTC wall clock"]},{"entry":[{},{},"date time accord-"]},{"entry":[{},{},"ing to the partner"]},{"entry":[{},{},"which deleted the"]},{"entry":[{},{},"item. It is NULL if"]},{"entry":[{},{},"the Item is live."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}}},"(2) Extension Tombstones","Extension tombstones are retrieved from the system using the view [System.Storage].[Tombstone!Extension]. Extension change tracking information is similar to that provided for Items with the addition of the ExtensionId property.",{"@attributes":{"id":"p-0300","num":"0599"},"tables":{"@attributes":{"id":"TABLE-US-00032","num":"00032"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"84pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Column","Type","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["ItemID","ItemID","Identity of the Item"]},{"entry":[{},{},"which owns the Extension"]},{"entry":["ExtensionId","ExtensionId","Extension Id of"]},{"entry":[{},{},"the Extension"]},{"entry":["_TypeID","TypeId","Type of the extension"]},{"entry":["_ChangeTrackingInfo","CLR instance of","Change tracking infor-"]},{"entry":[{},"type","mation for this extension"]},{"entry":[{},"ChangeTrackingInfo"]},{"entry":["_IsDeleted","BIT","This is a flag that is 0"]},{"entry":[{},{},"for live items, and 1 for"]},{"entry":[{},{},"tombstoned extensions."]},{"entry":["_DeletionWallclock","UTCDATETIME","The UTC wall clock date"]},{"entry":[{},{},"time according to the"]},{"entry":[{},{},"partner which deleted"]},{"entry":[{},{},"the extension. It is NULL"]},{"entry":[{},{},"if the extension is live."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}}},"(3) Relationships Tombstone","Relationship tombstones are retrieved from the system via the view [System.Storage].[Tombstone!Relationship]. Relationships tombstone information is similar to that provided for Extensions. However, additional information is provided on the target ItemRef of the relationship instance. In addition, the relationship object is also selected.",{"@attributes":{"id":"p-0303","num":"0602"},"tables":{"@attributes":{"id":"TABLE-US-00033","num":"00033"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"77pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Column","Type","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["ItemID","ItemID","Identity of the Item"]},{"entry":[{},{},"which owned the rela-"]},{"entry":[{},{},"tionship (identity of"]},{"entry":[{},{},"relationship source"]},{"entry":[{},{},"endpoint)"]},{"entry":["RelationshipId","RelationshipId","RelationshipId"]},{"entry":[{},{},"of the relationship"]},{"entry":["_TypeID","TypeId","Type of the"]},{"entry":[{},{},"relationship"]},{"entry":["_ChangeTrackingInfo","CLR instance of","Change tracking"]},{"entry":[{},"type","information for"]},{"entry":[{},"ChangeTrackingInfo","this relationship"]},{"entry":["_IsDeleted","BIT","This is a flag that is 0"]},{"entry":[{},{},"for live items, and 1 for"]},{"entry":[{},{},"tombstoned extensions."]},{"entry":["_DeletionWallclock","UTCDATETIME","The UTC wall clock date"]},{"entry":[{},{},"time according to the"]},{"entry":[{},{},"partner which deleted"]},{"entry":[{},{},"the relationship."]},{"entry":[{},{},"It is NULL if the"]},{"entry":[{},{},"relationship is live."]},{"entry":["_Relationship","CLR instance of a","This is the relationship"]},{"entry":[{},"Relationship","object for live rela-"]},{"entry":[{},{},"tionship. It is NULL for"]},{"entry":[{},{},"tombstoned relationships."]},{"entry":["TargetItemReference","ItemReference","Identity of"]},{"entry":[{},{},"target endpoint"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}}},"(4) Tombstone Cleanup","In order to prevent unbounded growth of tombstone information, the data store provides a tombstone cleanup task. This task determines when tombstone information may be discarded. The task computes a bound on the local create\/update version and then truncates the tombstone information by discarding all earlier tombstone versions.","11. Helper APIs and Functions","The Base mapping also provides a number of helper functions. These functions are supplied to aid common operations over the data model.",{"@attributes":{"id":"p-0308","num":"0607"},"tables":{"@attributes":{"id":"TABLE-US-00034","num":"00034"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"a)","Function [System.Storage].GetItem"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"Returns an Item object given an ItemId"},{"entry":"\/\/"},{"entry":"Item GetItem (ItemId ItemId)"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"b)","Function [System.Storage].GetExtension"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\/\/ Returns an extension object given an ItemId and ExtensionId"},{"entry":"\/\/"},{"entry":"Extension GetExtension (ItemId ItemId, ExtensionId ExtensionId)"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"c)","Function [System.Storage].GetRelationship"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\/\/ Returns an relationship object given an ItemId and RelationshipId"},{"entry":"\/\/"},{"entry":"Relationship GetRelationship (ItemId ItemId, RelationshipId"},{"entry":"RelationshipId)"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"12. Metadata","There are two types of metadata represented in the Store: instance metadata (the type of an Item, etc), and type metadata.","a) Schema Metadata","Schema metadata is stored in the data store as instances of Item types from the Meta schema.","b) Instance Metadata","Instance metadata is used by an application to query for the type of an Item and finds the extensions associated with an Item. Given the ItemId for an Item, an application can query the global item view to return the type of the Item and use this value to query the Meta.Type view to return information on the declared type of the Item. For example,",{"@attributes":{"id":"p-0313","num":"0612"},"tables":{"@attributes":{"id":"TABLE-US-00035","num":"00035"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ Return metadata Item object for given Item instance"]},{"entry":[{},"\/\/"]},{"entry":[{},"SELECT m._Item AS metadataInfoObj"]},{"entry":[{},"FROM [System.Storage].[Item] i INNER JOIN"]},{"entry":[{},"[Meta].[Type] m ON i._TypeId = m.ItemId"]},{"entry":[{},"WHERE i.ItemId = @ ItemId"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{}},"This section describes a security model for the storage platform of the present invention, in accordance with one embodiment","1. Overview","In accordance with the present embodiment, the granularity at which the security policy of the storage platform is specified and enforced is at the level of various operations on an item in a given data store; there is no ability to secure parts of an item separately from the whole. The security model specifies the set of principals who can be granted or denied access to perform these operations on an item through Access Control Lists (ACL's). Each ACL is an ordered collection of Access Control Entries (ACE's).","The security policy for an item can be completely described by the discretionary access control policy and the system access control policy. Each of these is a set of ACL's. The first set (DACL's) describes the discretionary access granted to the various principals by the owner of the item while the second set of ACL's is referred to as the SACL's (System Access Control Lists) which specify how the system auditing is done when an object is manipulated in certain ways. In addition to these, each item in the data store is associated with a SID that corresponds to the owner of the item (Owner SID).","The primary mechanism for organizing items in a storage platform data store is that of the containment hierarchy. The containment hierarchy is realized using holding relationships between items. The holding relationship between two items A and B expressed as \u201cA contains B\u201d enables the item A to influence the lifetime of the item B. Generally, an item in the data store cannot exist until there is a holding relationship from another item to it. The holding relationship, in addition to controlling the lifetime of the item, provides the necessary mechanism for propagating the security policy for an item.","The security policy specified for each item consists of two parts\u2014a part that is explicitly specified for that item and a part that is inherited from the parent of the item in the data store. The explicitly defined security policy for any item consists of two parts\u2014a part that governs access to the item under consideration and a part that influences the security policy inherited by all its descendants in the containment hierarchy. The security policy inherited by a descendant is a function of the explicitly defined policy and the inherited policy.","Since the security policy is propagated through holding relationships and can also be overridden at any item, it is necessary to specify how the effective security policy for an item is determined. In the present embodiment, an item in the data store containment hierarchy inherits an ACL along every path from the root of the store to the item.","Within the inherited ACL for any given path, the ordering of the various ACE's in the ACL determines the final security policy that is enforced. The following notation is used to describe the ordering of ACE's in an ACL. The ordering of the ACE's in an ACL that is inherited by an item is determined by the following two rules.","The first rule stratifies the ACEs inherited from the various items in a path to the item I from the root of the containment hierarchy. The ACE's inherited from a closer container takes precedence over the entries inherited from a distant container. Intuitively, this allows an administrator the ability to override ACE's inherited from farther up in the containment hierarchy. The rule is as follows:",{"@attributes":{"id":"p-0323","num":"0622"},"tables":{"@attributes":{"id":"TABLE-US-00036","num":"00036"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"For all inherited ACL's L on item 1"]},{"entry":[{},"For all items I1, I2"]},{"entry":[{},"For all ACE's A1 and A2 in L,"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"I1 is an ancestor of I2 and"]},{"entry":[{},"I2 is an ancestor of I3 and"]},{"entry":[{},"A1 is an ACE inherited from I1 and"]},{"entry":[{},"A2 is an ACE inherited from I2"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Implies"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"A2 precedes A1 in L"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"The second rule orders the ACE's that deny access to an item ahead of the ACE's that grant access to an item.",{"@attributes":{"id":"p-0325","num":"0624"},"tables":{"@attributes":{"id":"TABLE-US-00037","num":"00037"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"For all inherited ACL's L on item I"},{"entry":"For all items I1"},{"entry":"For all ACE's A1 and A2 in L,"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"I1 is an ancestor of I2 and"]},{"entry":[{},"A1 is an ACCESS_DENIED_ACE inherited from I1 and"]},{"entry":[{},"A2 is an ACCESS_GRANTED_ACE inherited from I1"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Implies"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"A1 precedes A2 in L"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"In the case of a containment hierarchy being a tree, there is exactly one path from the root of the tree to the item and the item has exactly one inherited ACL. Under these circumstances, the ACL inherited by an item matches the ACL inherited by a file (item) in the existing Windows security model in terms of the relative ordering of the ACE's within them.","However, the containment hierarchy in the data store is a directed acyclic graph (DAG) because multiple holding relationships are permitted to items. Under these conditions, there are multiple paths to an item from the root of the containment hierarchy. Since an item inherits an ACL along every path each item is associated with a collection of ACL's as opposed to a single one. Note that this is different from the traditional file system model, where exactly one ACL is associated with a file or folder.","There are two aspects that need to be elaborated when the containment hierarchy is a DAG as opposed to a tree. A description is needed of how the effective security policy for an item is computed when it inherits more than one ACL from its parents, and how they are organized and represented has a direct bearing on the administration of the security model for a storage platform data store.","The following algorithm evaluates the access rights for a given principal to a given item. Throughout this document, the following notation is used to describe the ACL's associated with an item.","Inherited_ACLs(ItemId)\u2014the set of ACL's inherited by an item whose item identity is ItemId from it's parents in the store.","Explicit_ACL(ItemId)\u2014the ACL explicitly defined for the item whose identity is ItemId.",{"@attributes":{"id":"p-0332","num":"0631"},"tables":{"@attributes":{"id":"TABLE-US-00038","num":"00038"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"NTSTATUS"]},{"entry":[{},"ACLAccessCheck("]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"84pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"PSID","pOwnerSid,"]},{"entry":[{},"PDACL","pDacl,"]},{"entry":[{},"DWORD","DesiredAccess,"]},{"entry":[{},"HANDLE","ClientToken,"]},{"entry":[{},"PPRIVILEGE_SET","pPrivilegeSet,"]},{"entry":[{},"DWORD","*pGrantedAccess)"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}]}}},"The above routine returns STATUS_SUCCESS if the desired access was not explicitly denied, and the pGrantedAccess determines which of the rights desired by the user were granted by the specified ACL. If any of the desired access was explicitly denied, the routine returns STATUS_ACCESS_DENIED.",{"@attributes":{"id":"p-0334","num":"0633"},"tables":{"@attributes":{"id":"TABLE-US-00039","num":"00039"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"NTSTATUS"},{"entry":"WinFSItemAccessCheck("}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"WINFS_ITEMID","ItemId,"]},{"entry":[{},"DWORD","DesiredAccess,"]},{"entry":[{},"HANDLE","ClientToken,"]},{"entry":[{},"PPRIVILEGE_SET","pPrivilegeSet)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"{"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"NTSTATUS","Status;"]},{"entry":[{},"PDACL","pExplicitACL = NULL;"]},{"entry":[{},"PDACL","pInheritedACLs = NULL;"]},{"entry":[{},"DWORD","NumberOfInheritedACLs = 0;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"pExplicitACL = GetExplicitACLForItem(ItemId);"]},{"entry":[{},"GetInheritedACLsForItem(ItemId,&pInheritedACLs,&NumberOfInheritedACLs)"]},{"entry":[{},"Status = ACLAccessCheck("]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"pOwnerSid,"]},{"entry":[{},"pExplicitACL,"]},{"entry":[{},"DesiredAccess,"]},{"entry":[{},"ClientToken,"]},{"entry":[{},"pPrivilegeSet,"]},{"entry":[{},"&GrantedAccess);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"if (Status != STATUS_SUCCESS)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"return Status;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"if (DesiredAccess == GrantedAccess)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"return STATUS_SUCCESS;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"for ("]},{"entry":[{},"i = 0;"]},{"entry":[{},"(i < NumberOfInheritedACLs && Status == STATUS_SUCCESS);"]},{"entry":[{},"i++ ) {"]},{"entry":[{},"GrantedAccessForACL = 0;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Status = ACLAccessCheck("]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"133pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"pOwnerSid,"]},{"entry":[{},"pExplicitACL,"]},{"entry":[{},"DesiredAccess,"]},{"entry":[{},"ClientToken,"]},{"entry":[{},"pPrivilegeSet,"]},{"entry":[{},"&GrantedAccessForACL);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"if (Status == STATUS_SUCCESS) {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"119pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"GrantedAccess |= GrantedAccessForACL;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"If ((Status == STATUS_SUCCESS) &&"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"(GrantedAccess != DesiredAccess)) {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Status = STATUS_ACCESS_DENIED;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"return Status;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"The sphere of influence of the security policy defined at any item covers all the descendants of the item in the containment hierarchy defined on the data store. For all items where in an explicit policy is defined we are in effect defining a policy that is inherited by all its descendants in the containment hierarchy. The effective ACL's inherited by all of the descendants is obtained by taking each of the ACL's inherited by the item and adding the inheritable ACE's in the explicit ACL to the beginning of the ACL. This is referred to as the set of inheritable ACL's associated with the item.","In the absence of any explicit specification of security in the containment hierarchy rooted at a folder item, the security specification of the folder applies to all the descendants of that item in the containment hierarchy. Thus, every item for which an explicit security policy specification is provided, defines a region of identically protected items, and the effective ACL's for all the items in the region is the set of inheritable ACL's for that item. This would completely define the regions in the case of a containment hierarchy that is a tree. If each region were to be associated with a number, then it would be sufficient to merely include the region to which an item belongs along with the item.","However, for containment hierarchies that are DAGs, the points in the containment hierarchy at which the effective security policy changes is determined by two kinds of items. The first is items for which an explicit ACL has been specified. Typically these are the points in the containment hierarchy where in the administrator has explicitly specified an ACL. The second is items that have more than one parent, and the parents have different security policies associated with them. Typically, these are the items that are the confluence points of security policy specified for the volume and indicate the beginning of a new security policy.","With this definition, all the items in the data store fall into one of two categories\u2014those that are the root of an identically protected security region and those that are not. The items that do not define security regions belong to exactly one security region. As in the case of trees, the effective security for an item can be specified by specifying the region to which an item belongs along with the item. This leads to a straight forward model for administering the security of a storage platform data store based upon the various identically protected regions in the store.","2. Detailed Description of the Security Model","This section provide details of how items are secured by describing how the individual rights within a Security Descriptor and its contained ACL's affect various operations.","a) Security Descriptor Structure","Before describing the details of the security model, a basic discussion of security descriptors is helpful. A security descriptor contains the security information associated with a securable object. A security descriptor consists of a SECURITY_DESCRIPTOR structure and its associated security information. A security descriptor can include the following security information:\n\n","Preferably, applications are not able to directly manipulate the contents of a security descriptor. There are functions for setting and retrieving the security information in an object's security descriptor. In addition, there are functions for creating and initializing a security descriptor for a new object.","A discretionary access control list (DACL) identifies the trustees that are allowed or denied access to a securable object. When a process tries to access a securable object, the system checks the ACEs in the object's DACL to determine whether to grant access to it. If the object does not have a DACL, the system grants full access to everyone. If the object's DACL has no ACEs, the system denies all attempts to access the object because the DACL does not allow any access rights. The system checks the ACEs in sequence until it finds one or more ACEs that allow all the requested access rights, or until any of the requested access rights are denied.","A system access control list (SACL) enables administrators to log attempts to access a secured object. Each ACE specifies the types of access attempts by a specified trustee that cause the system to generate a record in the security event log. An ACE in a SACL can generate audit records when an access attempt fails, when it succeeds, or both. A SACL may also raise an alarm when an unauthorized user attempts to gain access to an object.","All types of ACEs contain the following access control information:\n\n","The following table lists the three ACE types supported by all securable objects.",{"@attributes":{"id":"p-0347","num":"0654"},"tables":{"@attributes":{"id":"TABLE-US-00040","num":"00040"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"133pt","align":"left"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Type","Description"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Access-denied","Used in a DACL to deny access rights"]},{"entry":[{},"ACE","to a trustee."]},{"entry":[{},"Access-allowed","Used in a DACL to allow access rights"]},{"entry":[{},"ACE","to a trustee."]},{"entry":[{},"System-audit","Used in a SACL to generate an audit"]},{"entry":[{},"ACE","record when the trustee attempts to"]},{"entry":[{},{},"exercise the specified access rights."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"(1) Access Mask Format","All securable objects arrange their access rights using the access mask format shown in the . In this format, the low-order 16 bits are for object-specific access rights, the next 7 bits are for standard access rights, which apply to most types of objects, and the 4 high-order bits are used to specify generic access rights that each object type can map to a set of standard and object-specific rights. The ACCESS_SYSTEM_SECURITY bit corresponds to the right to access the object's SACL.","(2) Generic Access Rights","Generic rights are specified in the  high-order bits within the mask. Each type of securable object maps these bits to a set of its standard and object-specific access rights. For example, a file object maps the GENERIC_READ bit to the READ_CONTROL and SYNCHRONIZE standard access rights and to the FILE_READ_DATA, FILE_READ_EA, and FILE_READ_ATTRIBUTES object-specific access rights. Other types of objects map the GENERIC_READ bit to whatever set of access rights is appropriate for that type of object.","Generic access rights can be used to specify the type of access needed when opening a handle to an object. This is typically simpler than specifying all the corresponding standard and specific rights. The following table shows the constants defined for the generic access rights.",{"@attributes":{"id":"p-0353","num":"0660"},"tables":{"@attributes":{"id":"TABLE-US-00041","num":"00041"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"112pt","align":"left"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Constant","Generic meaning"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"GENERIC_ALL","Read, write, and execute access"]},{"entry":[{},"GENERIC_EXECUTE","Execute access"]},{"entry":[{},"GENERIC_READ","Read access"]},{"entry":[{},"GENERIC_WRITE","Write access"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"(32) Standard Access Rights","Each type of securable object has a set of access rights that correspond to operations specific to that type of object. In addition to these object-specific access rights, there is a set of standard access rights that correspond to operations common to most types of securable objects. The following table shows the constants defined for the standard access rights.",{"@attributes":{"id":"p-0356","num":"0663"},"tables":{"@attributes":{"id":"TABLE-US-00042","num":"00042"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"147pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Constant","Meaning"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["DELETE","The right to delete the object."]},{"entry":["READ_CONTROL","The right to read the information in the"]},{"entry":[{},"object's security descriptor, not"]},{"entry":[{},"including the information in the SACL."]},{"entry":["SYNCHRONIZE","The right to use the object for synchronization."]},{"entry":[{},"This enables a thread to wait until the object"]},{"entry":[{},"is in the signaled state. Some object types do not"]},{"entry":[{},"support this access right."]},{"entry":["WRITE_DAC","The right to modify the DACL in the object's"]},{"entry":[{},"security descriptor."]},{"entry":["WRITE_OWNER","The right to change the owner in the object's"]},{"entry":[{},"security descriptor."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}},"br":{}},"In the access mask structure of , item specific rights are placed in the Object Specific Rights section (low order 16-bits). Because in the present embodiment, the storage platform exposes two sets of APIs to administer security\u2014Win32 and the storage platform API, the file system object specific rights must be considered in order to motivate the design of the storage platform object specific rights.","(1) File and Directory Object Specific Rights","Consider the following table:",{"@attributes":{"id":"p-0360","num":"0667"},"tables":{"@attributes":{"id":"TABLE-US-00043","num":"00043"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"28pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}},{"entry":[{},"Directory",{},{},{}]},{"entry":["Directory","Description","File","File Description","Value"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["FILE_LIST","Right to list","FILE_READ","Right to read","0x0001"]},{"entry":["DIRECTORY","the contents","DATA","the correspond-"]},{"entry":[{},"of the directory",{},"ing file data"]},{"entry":["FILE_ADD_FILE","Right to create a file","FILE_WRITE","Right to write","0x0002"]},{"entry":[{},"in the directory","DATA","data to the file"]},{"entry":["FILE_ADD","Right to create","FILE_APPEND","Right to append","0x0004"]},{"entry":["SUBDIRECTORY","a subdirectory","DATA","data to the file"]},{"entry":["FILE_READ_EA","Right to read","FILE_READ_EA","Right to read","0x0008"]},{"entry":[{},"extended file",{},"extended file"]},{"entry":[{},"attributes",{},"attributes"]},{"entry":["FILE_WRITE_EA","Right to write","FILE_WRITE_EA","Right to write","0x0010"]},{"entry":[{},"extended file",{},"extended file"]},{"entry":[{},"attributes",{},"attributes"]},{"entry":["FILE_TRAVERSE","Right to","FILE_EXECUTE","For a native code","0x0020"]},{"entry":[{},"traverse the",{},"file, the right to"]},{"entry":[{},"directory.",{},"execute the file."]},{"entry":["FILE_DELETE","Right to delete a","None","None","0x0040"]},{"entry":["CHILD","directory and all"]},{"entry":[{},"the files it contains"]},{"entry":["FILE_READ","Right to read","FILE_READ","Right to read file","0x0080"]},{"entry":["ATTRIBUTES","directory attributes","ATTRIBUTES","attributes"]},{"entry":["FILE_WRITE","Right to write","FILE_WRITE","Right to write","0x0100"]},{"entry":["ATTRIBUTES","directory attributes","ATTRIBUTES","file attributes"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}}}}},"Referring to the foregoing table, note that file systems make a fundamental distinction between files and directories, which is why the file and directory rights overlap on the same bits. File systems define very granular rights, allowing applications to control behavior on these objects. For instance they allow applications to distinguish among Attributes (FILE_READ\/WRITE_ATTRIBUTES), Extended Attributes and the DATA stream associated with the file.","A goal of the security model of the storage platform of the present invention is to simplify the rights assignment model so applications operating on data store items (Contacts, Emails, etc.) generally do not have a need to distinguish between attributes, extended attributes and data streams, for example. However, for files and folders, the granular Win32 rights are preserved and the semantics of access via the storage platform are defined so that compatibility with Win32 applications can be provided. This mapping is discussed with each of the item rights specified below.","The following item rights are specified with their associated allowable operations. The equivalent Win32 rights backing each of these item rights is also provided.","(2) WinFSItemRead","This right allows read access to all elements of the item, including the items linked to the item via embedded relationships. It also allows enumeration of items linked to this item via holding relationships (a.k.a., directory listing). This includes the names of items linked via reference relationships. This right maps to:",{"@attributes":{"id":"p-0366","num":"0673"},"tables":{"@attributes":{"id":"TABLE-US-00044","num":"00044"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"File:"]},{"entry":[{},"(FILE_READ_DATA | SYNCHRONIZE)"]},{"entry":[{},"Folder:"]},{"entry":[{},"(FILE_LIST_DIRECTORY | SYNCHRONIZE)"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"The semantics are that a security application could set WinFSItemReadData and specify the rights mask as a combination of the file rights specified above.","(3) WinFSItemReadAttributes","This right allows read access to basic attributes of the Item, much as file systems distinguish between basic file attributes and data streams. Preferably, these basic attributes are those that reside in the base item that all items derive from. This right maps to:",{"@attributes":{"id":"p-0370","num":"0677"},"tables":{"@attributes":{"id":"TABLE-US-00045","num":"00045"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"File:"]},{"entry":[{},"(FILE_READ_ATTRIBUTES)"]},{"entry":[{},"Folder:"]},{"entry":[{},"(FILE_READ_ATTRIBUTES)"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"(4) WinFSItemWriteAttributes","This right allows write access to basic attributes of the Item, much as file systems distinguish between basic file attributes and data streams. Preferably, these basic attributes reside in the base item that all items derive from. This right maps to:",{"@attributes":{"id":"p-0373","num":"0680"},"tables":{"@attributes":{"id":"TABLE-US-00046","num":"00046"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"File:"]},{"entry":[{},"(FILE_WRITE_ATTRIBUTES)"]},{"entry":[{},"Folder:"]},{"entry":[{},"(FILE_WRITE_ATTRIBUTES)"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"(5) WinFSItemWrite","This right allows the ability to write to all elements of the item, including items linked via embedded relationships. This right also allows the ability to add or delete embedded relationships to other items. This right maps to:",{"@attributes":{"id":"p-0376","num":"0683"},"tables":{"@attributes":{"id":"TABLE-US-00047","num":"00047"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"File:"]},{"entry":[{},"(FILE_WRITE_DATA)"]},{"entry":[{},"Folder:"]},{"entry":[{},"(FILE_ADD_FILE)"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"In the storage platform data store, there is no distinction between items and folders, since items can also have holding Relationships to other items in the data store. Hence, if you have FILE_ADD_SUBDIRECTORY (or FILE_APPEND_DATA) rights, you can have an item be the source of Relationships to other items.","(6) WinFSItemAddLink","This right allows the ability to add holding Relationships to items in the store. It should be noted that since the security model for multiple holding Relationships changes the security on an item and the changes can bypasses WRITE_DAC if coming from a higher point in the hierarchy, WRITE_DAC is required on the destination item in order to be able to create a Relationship to it. This right maps to:",{"@attributes":{"id":"p-0380","num":"0687"},"tables":{"@attributes":{"id":"TABLE-US-00048","num":"00048"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"File:"]},{"entry":[{},"(FILE_APPEND_DATA)"]},{"entry":[{},"Folder:"]},{"entry":[{},"(FILE_ADD_SUBDIRECTORY)"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"(7) WinFSItemDeleteLink","This right allows the ability to delete a holding to an item even if the right to delete that item is not granted to the principal. This is consistent with the file system model and helps with purge. This right maps to:","File:","(FILE_DELETE_CHILD)\u2014Note that file systems do not have a file equivalent to this right, but we have the notion of items having holding Relationships to others and hence carry this right for non-folders as well.","Folder:","(FILE_DELETE_CHILD)","(8) Rights to Delete an Item","An item gets deleted if the last holding Relationship to the item disappears. There is no explicit notion of deleting an item. There is a purge operation which deletes all holding Relationships to an item, but that is a higher level facility and not a system primitive.","Any item specified using a path can be unlinked if either one of two conditions is satisfied: (1) the parent item along that path grants write access to the subject, or (2) the standard rights on the item itself grant DELETE. When the last Relationship is removed, the item disappears from the system. Any item specified using the ItemID can be unlinked if the standard rights on the item itself grant DELETE.","(9) Rights to Copy an Item","An item can be copied from a source to a destination folder if the subject is granted WinFSItemRead on the item and WinFSItemWrite on the destination folder.","(10) Rights to Move an Item","Move file in the file system requires just the DELETE right on the source file and FLE_ADD_FILE on the destination directory, since it preserves the ACL on the destination. However, a flag can be specified in the MoveFileEx call (MOVEFILE _COPY_ALLOWED) that lets an application specify that it in the case of a cross-volume move, it can tolerate CopyFile semantics. There are  potential choices with respect to what happens with the security descriptor upon a move:\n\n","In the present security model, if an application specifies the MOVEFILE_COPY_ALLOWED flag, the fourth option is performed for both the inter-and intra-volume cases. If this flag is not specified, the second option is performed unless the destination is also in the same security region (i.e., same inheritance semantics). A storage platform level move implements the fourth choice as well and requires READ_DATA on the source, much as a copy would.","(11) Rights to View the Security Policy on an Item","An item's security can be viewed if the item grants the standard right READ_CONTROL to the subject.","(12) Rights to Change the Security Policy on an Item","An item's security can be changed if the item grants the standard right WRITE_DAC to the subject. However, since the data store provides implicit inheritance, this has implications on how security can be changed on hierarchies. The rule is that if the root of the hierarchy grants WRITE_DAC, then the security policy is changed on the entire hierarchy regardless of whether specific items within the hierarchy (or DAG) do not grant WRITE_DAC to the subject.","(13) Rights that don't have a Direct Equivalent","In the present embodiment, FILE_EXECUTE (FILE_TRAVERSE for directories) do not have a direct equivalent in the storage platform. The model keeps these for Win32 compatibility, but does not have any access decisions made for items based on these rights. As for FILE_READ\/WRITE EA, because data store items do not have notions of extended attributes, semantics for this bit are not provided. However, the bit remains for Win32 compatibility.","3. Implementation","All the items that define identically protected regions have an entry associated with them in a security table. The security table is defined as follows:",{"@attributes":{"id":"p-0403","num":"0714"},"tables":{"@attributes":{"id":"TABLE-US-00049","num":"00049"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"49pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Item","Item","Explicit Item ACL","Path ACLs","Region ACLs"]},{"entry":["Identity","Ordpath"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}}}}},"The Item Identity entry is the Item Identity of the root of an identically protected security region. The Item Ordpath entry is the ordpath associated with the root of the identically protected security region. The Explicit Item ACL entry is the explicit ACL defined for the root of the identically protected security region. In some cases this can be NULL, e.g., when a new security region is defined because the item has multiple parents belonging to different regions. The Path ACLs entry is the set of ACL's inherited by the item, and the Region ACLs entry is the set of ACL's defined for the identically protected security region associated with the item.","The computation of effective security for any item in a given store leverages this table. In order to determine the security policy associated with an item, the security region associated with the item is obtained and the ACL's associated with that region are retrieved.","As the security policy associated with an item is changed either by directly adding explicit ACL's or indirectly by adding holding Relationships that result in the formation of new security regions, the security table is kept up to date to ensure that the above algorithm for determining the effective security of an item is valid.","The various changes to the store and the accompanying algorithms to maintain the security table are as follows:","a) Creating a New Item in a Container","When an item is newly created in a container, it inherits all the ACL's associated with the container. Since the newly created item has exactly one parent it belongs to the same region as its parent. Thus there is no need to create a new entry in the security table.","b) Adding an Explicit ACL to an Item.","When an ACL is added to an item, it defines a new security region for all its descendants in the containment hierarchy that belong to the same security region as the given item itself. For all the items that belong to other security regions but are descendants of the given item in the containment hierarchy, the security region remains unchanged but the effective ACL associated with the region is changed to reflect the addition of the new ACL.","The introduction of this new security region can trigger further region definitions for all those items which have multiple holding Relationships with ancestors that straddle the old security region and the newly defined security region. For all such items a new security region needs to be defined and the procedure repeated.",{"@attributes":{"id":"p-0411","num":"0722"},"figref":"FIGS. 27(","i":["a","b","c"],"b":["2","3"]},"The following sequence of updates to the security tables reflect the factoring of the identically protected security regions.","c) Adding a Holding Relationship to an Item","When a holding Relationship is added to an item it gives rise to one of three possibilities. If the target of the holding Relationship, i.e., the item under consideration is the root of a security region, the effective ACL associated with the region is changed and no further modifications to the security table is required. If the security region of the source of the new holding Relationship is identical to the security region of the existing parents of the item no changes are required. However, if the item now has parents that belong to different security regions, then a new security region is formed with the given item as the root of the security region. This change is propagated to all the items in the containment hierarchy by modifying the security region associated with the item. All the items that belong to the same security region as the item under consideration and its descendants in the containment hierarchy need to be changed. Once the change is made, all the items that have multiple holding Relationships must be examined to determine if further changes are required. Further changes may be required if any of these items have parents of different security regions.","d) Deleting a Holding Relationship from an Item","When a holding Relationship is deleted from an item it is possible to collapse a security region with its parent region if certain conditions are satisfied. More precisely this can be accomplished under the following conditions: (1) if the removal of the holding Relationship results in an item that has one parent and no explicit ACL is specified for that item; (2) if the removal of the holding Relationship results in an item whose parent's are all in the same security region and no explicit ACL is defined for that item. Under these circumstances the security region can be marked to be the same as the parent. This marking needs to be applied to all the items whose security region corresponds to the region being collapsed.","e) Deleting an Explicit ACL from an Item","When an explicit ACL is deleted from an item, it is possible to collapse the security region rooted at that item with that of its parents. More precisely, this can be done if the removal of the explicit ACL results in an item whose parents in the containment hierarchy belong to the same security region. Under these circumstances, the security region can be marked to be the same as the parent and the change applied to all the items whose security region corresponds to the region being collapsed.","f) Modifying an ACL Associated with an Item","In this scenario, no new additions to the security table are required. The effective ACL associated with the region is updated and the new ACL change is propagated to the security regions that are affected by it.","F. Notifications and Change Tracking","According to another aspect of the present invention, the storage platform provides a notifications capability that allows applications to track data changes. This feature is primarily intended for applications which maintain volatile state or execute business logic on data change events. Applications register for notifications on items, item extensions and item relationships. Notifications are delivered asynchronously after data changes have been committed. Applications may filter notifications by item, extension and relationship type as well as type of operation.","According to one embodiment, the storage platform API  provides two kinds of interfaces for notifications. First, applications register for simple data change events triggered by changes to items, item extensions and item relationships. Second, applications create \u201cwatcher\u201d objects to monitor sets of items, item extensions and relationships between items. The state of a watcher object can be saved and re-created after a system failure or after a system has gone off-line for an extended period of time. A single notification may reflect multiple updates.","1. Storage Change Events","This section provide a few examples of how the notification interfaces provided by the storage platform API  are used.","a) Events","Items, ItemExtensions and ItemRelationships expose data change events which are used by applications to register for data change notifications. The following code sample shows the definition of the ItemModified and ItemRemoved event handlers on the base Item class.",{"@attributes":{"id":"p-0422","num":"0733"},"tables":{"@attributes":{"id":"TABLE-US-00050","num":"00050"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ Events"]},{"entry":[{},"public event ItemModifiedEventHandler Item_ItemModified;"]},{"entry":[{},"public event ItemRemovedEventHandler Item_ItemRemoved;"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"All notifications carry sufficient data to retrieve the changed item from the data store. The following code sample shows how to register for events on an Item, ItemExtension, or ItemRelationship:",{"@attributes":{"id":"p-0424","num":"0735"},"tables":{"@attributes":{"id":"TABLE-US-00051","num":"00051"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"myItem.ItemModified += new"]},{"entry":[{},"ItemModifiedEventHandler(this.onItemUpdate);"]},{"entry":[{},"myItem.ItemRemoved += new"]},{"entry":[{},"ItemRemovedEventHandler(this.onItemDelete);"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"In the present embodiment, the storage platform guarantees that applications will be notified if the respective item has been modified or deleted since last delivering a notification or in case of a new registration since last fetched from the data store.","b) Watchers","In the present embodiment, the storage platform defines watcher classes for monitoring objects associated with a (1) folder or folder hierarchy, (2) an item context or (3) a specific item. For each of the three categories, the storage platform provides specific watcher classes which monitor associated items, item extensions or item relationships, e.g. the storage platform provides the respective FolderItemWatcher, FolderRelationshipWatcher and FolderExtensionWatcher classes.","When creating a watcher, an application may request notifications for pre-existing items, i.e. items, extensions or relationships. This option is mostly for applications which maintain a private item cache. If not requested, applications receive notifications for all updates which occur after the watcher object has been created.","Together with delivering notifications, the storage platform supplies a \u201cWatcherState\u201d object. The WatcherState can be serialized and saved on disk. The watcher state can subsequently be used to re-create the respective watcher after a failure or when reconnecting after going off-line. The newly re-created watcher will re-generate un-acknowledged notifications. Applications indicate delivery of a notification by calling the \u201cExclude\u201d method on the respective watcher state supplying a reference to a notification.","The storage platform delivers separate copies of the watcher state to each event handler. Watcher states received on subsequent invocations of the same event handler presume delivery of all previously received notifications.","By way of example, the following code sample shows the definition of a FolderItemWatcher.",{"@attributes":{"id":"p-0431","num":"0742"},"tables":{"@attributes":{"id":"TABLE-US-00052","num":"00052"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"public class FolderItemWatcher : Watcher"},{"entry":"{"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ Constructors"]},{"entry":[{},"public FolderItemWatcher_Constructor(Folder folder);"]},{"entry":[{},"public FolderItemWatcher_Constructor1(Folder folder,"]},{"entry":[{},"Type itemType);"]},{"entry":[{},"public FolderItemWatcher_Constructor2(ItemContext context,"]},{"entry":[{},"ItemId folderId);"]},{"entry":[{},"public FolderItemWatcher_Constructor3(Folder folder,"]},{"entry":[{},"Type itemType,"]},{"entry":[{},"FolderItemWatcherOptions options);"]},{"entry":[{},"public FolderItemWatcher_Constructor4(ItemContext context,"]},{"entry":[{},"ItemId folderId, Type itemType);"]},{"entry":[{},"public FolderItemWatcher_Constructor5(ItemContext context,"]},{"entry":[{},"ItemId folderId, Type itemType,"]},{"entry":[{},"FolderItemWatcherOptions options);"]},{"entry":[{},"\/\/ Properties"]},{"entry":[{},"public ItemId FolderItemWatcher_FolderId {get;}"]},{"entry":[{},"public Type FolderItemWatcher_ItemType {get;}"]},{"entry":[{},"public FolderItemWatcherOptions"]},{"entry":[{},"FolderItemWatcher_Options {get;}"]},{"entry":[{},"\/\/ Events"]},{"entry":[{},"public event ItemChangedEventHandler"]},{"entry":[{},"FolderItemWatcher_ItemChanged;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"The following code sample shows how to create a folder watcher object for monitoring the contents of a folder. The watcher generates notifications, i.e. events, when new music items are added or existing music items are updated or deleted. Folder watchers either monitor a particular folder or all folders within a folder hierarchy.",{"@attributes":{"id":"p-0433","num":"0744"},"tables":{"@attributes":{"id":"TABLE-US-00053","num":"00053"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"myFolderItemWatcher = new FolderItemWatcher(myFolder,"]},{"entry":[{},"typeof(Music));"]},{"entry":[{},"myFolderItemWatcher.ItemChanged += new"]},{"entry":[{},"ItemChangedEventHandler(this.onItemChanged);"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"2. Change Tracking and Notification Generation Mechanism","The storage platform provides a simple, yet efficient mechanism to track data changes and generate notifications. A client retrieves notifications on the same connection used to retrieve data. This greatly simplifies security checks, removes latencies and constraints on possible network configurations. Notifications are retrieved by issuing select statements. To prevent polling, clients may use a \u201cwaitfor\u201d feature provided by the database engine .  shows the basic storage platform notification concept. This waitfor query may be executed synchronously, in which case the calling thread is blocked until results are available, or asynchronously, in which case the thread is not blocked and results are returned on a separate thread, when available.","A combination of \u201cwaitfor\u201d and \u201cselect\u201d is attractive for monitoring data changes which fit into a particular data range as changes can be monitored by setting a notification lock on the respective data range. This holds for many common storage platform scenarios. Changes to individual items can be efficiently monitored by setting notification locks on the respective data range. Changes to folders and folder trees can be monitored by setting notification locks on path ranges. Changes to types and its subtypes can be monitored by setting notification locks on type ranges.","In general, there are three distinct phases associated with processing notifications: (1) data change or even detection, (2) subscription matching and (3) notification delivery. Excluding synchronous notification delivery, i.e. notification delivery as part of the transaction performing the data change, the storage platform can implement two forms of notification delivery:\n\n","Immediate event detection requires additional code to be executed as part of update operations. This allows the capture of all events of interest including events indicating a relative state change.","Deferred event detection removes the need to add additional code to update operations. Event detection is done by the ultimate subscriber. Deferred event detection naturally batches event detection and event delivery and fits well with the query execution infrastructure of the database engine  (e.g., SQL Server).","Deferred event detection relies on a log or trace left by update operations. The storage platform maintains a set of logical timestamps together with tombstones for deleted data items. When scanning the data store for changes, clients supply a timestamp which defines a low watermark for detecting changes and a set of timestamps to prevent duplicate notifications. Applications might receive notifications for all changes which happened after the time indicated by the low watermark.","Sophisticated applications with access to core views can further optimize and reduce the number of SQL statements necessary to monitor a potentially large set of items by creating private parameter and duplicate filter tables. Applications with special needs such as those having to support rich views can use the available change tracking framework to monitor data changes and refresh their private snapshots.","Preferably, therefore, in one embodiment, the storage platform implements a deferred event detection approach, as described more fully below.","a) Change Tracking","All items, extensions and item relationship definitions carry a unique identifier. Change tracking maintains a set of logical timestamps to record creation, update and deletion times for all data items. Tombstone entries are used to represent deleted data items.","Applications use that information to efficiently monitor whether a particular item, item extension or item relationship has been newly added, updated or deleted since the application last accessed the data store. The following example illustrates this mechanism.",{"@attributes":{"id":"p-0445","num":"0758"},"tables":{"@attributes":{"id":"TABLE-US-00054","num":"00054"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"create table [item-extension-relationship-table-template] ("]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"identifier uniqueidentifier not null default newid( )"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"created bigint,","not null, -- @ @ dbts when created"]},{"entry":[{},"updated bigint,"," not null, -- @ @ dbts when last updated"]},{"entry":[{},". . .."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},")"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"All deleted items, item extensions and relationships are recorded in a corresponding tombstone table. A template is shown below.",{"@attributes":{"id":"p-0447","num":"0760"},"tables":{"@attributes":{"id":"TABLE-US-00055","num":"00055"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"create table [item-extension-relationship-tombstone table-template] ("}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"identifier uniqueidentifier not null,"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"deleted bigint ","not null, -- @ @ dbts when deleted,"]},{"entry":[{},"created bigint ","not null, -- @ @ dbts when created"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"upated bigint","not null, -- @ @ dbts when last updated"]},{"entry":[{},". . .."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":")"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"For efficiency reasons, the storage platform maintains a set of global tables for items, item extensions, relationships and pathnames. Those global lookup tables can be used by applications to efficiently monitor data ranges and retrieve associated timestamp and type information.","b) Timestamp Management","Logical timestamps are \u201clocal\u201d to a database store, i.e. storage platform volume. Timestamps are monotonically increasing 64-bit values. Retaining a single timestamp is often sufficient to detect whether a data change occurred after last connecting to a storage platform volume. However, in most realistic scenarios, a few more timestamps need to be kept to check for duplicates. The reasons are explained below.","Relational database tables are logical abstractions built on top of a set of physical data structures, i.e. B-Tree's, heaps etc. Assigning a timestamp to a newly created or updated record is not an atomic action. Inserting that record into the underlying data structures may happen at different times, thus applications may see records out of order.",{"@attributes":{"id":"p-0451","num":"0764"},"figref":"FIG. 14","b":["3","2","3","2","314","2","314"]},"c) Data Change Detection\u2014Event Detection","When querying the data store, applications obtain a low watermark. Subsequently, applications use that watermark to scan the data store for entries whose creation, update or delete timestamp is greater than the low watermark returned.  illustrates this process.","To prevent duplicate notifications, applications remember timestamps which are greater than the low watermark returned and use those to filter out duplicates. Applications create session local temporary tables to efficiently handle a large set of duplicate timestamps. Before issuing a select statement, an application inserts all duplicate timestamps previously returned and deletes those which are older than the last low watermark returned, as illustrated below.",{"@attributes":{"id":"p-0454","num":"0767"},"tables":{"@attributes":{"id":"TABLE-US-00056","num":"00056"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"delete from $duplicates where ts < @ oldLowWaterMark;"]},{"entry":[{},"insert into $duplicates(ts) values(. . .), . . . ,(. . .);"]},{"entry":[{},"waitfor( select *, getLowWaterMark( ) as newLowWaterMark"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"from [global!items]"]},{"entry":[{},"where updated >= @oldLowWaterMark"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"and updated not in (select * from $duplicates))"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}},"br":{}},"According to another aspect of the present invention, the storage platform provides a synchronization service  that (i) allows multiple instances of the storage platform (each with its own data store ) to synchronize parts of their content according to a flexible set of rules, and (ii) provides an infrastructure for third parties to synchronize the data store of the storage platform of the present invention with with other data sources that implement proprietary protocols.","Storage platform-to-storage platform synchronization occurs among a group of participating replicas. For example, with reference to , it may be desirable to provide synchronization between the data store  of the storage platform  with another remote data store  under the control of another instance of the storage platform, perhaps running on a different computer system. The total membership of this group is not necessarily known to any given replica at any given time.","Different replicas can make the changes independently (i.e. concurrently). The process of synchronization is defined as making every replica aware of the changes made by other replicas. This synchronization capability is inherently multi-master.","The synchronization capability of the present invention allows replicas to:\n\n","1. Storage Platform-to-Storage Platform Synchronization","The primary application of the synchronization service  of the storage platform of the present invention is to synchronize multiple instances of the storage platform (each with its own data store). The synchronization service operates at the level of the storage platform schemas (rather than the underlying tables of the database engine ). Thus, for example, \u201cScopes\u201d are used to define synchronization sets as discussed below.","The synchronization service operates on the principle of \u201cnet changes\u201d. Rather than recording and sending individual operations (such as with transactional replication), the synchronization service sends the end-result of those operations, thus often consolidating the results of multiple operations into a single resulting change.","The synchronization service does not in general respect transaction boundaries. In other words, if two changes are made to a storage platform data store in a single transaction, there is no guarantee that these changes are applied at all other replicas atomically\u2014one may show up without the other. The exception to this principle is that if two changes are made to the same Item in the same transaction, then these changes are guaranteed to be sent and applied to other replicas atomically. Thus, Items are the consistency units of the synchronization service.","a) Synchronization (Sync) Controlling Applications","Any application can connect to the synchronization service and initiate a sync operation. Such an application provides all of the parameters needed to perform synchronization (see sync profile below). Such applications are referred to herein as Sync Controlling Applications (SCAs).","When synchronizing two storage platform instances, sync is initiated on one side by an SCA. That SCA informs the local synchronization service to synchronize with the remote partner. On the other side, the synchronization service is awoken by the messages sent by the synchronization service from the originating machine. It responds based on the persistent configuration information (see mappings below) present on the destination machine. The synchronization service can be run on schedule or in response to events. In these cases, the synchronization service implementing the schedule becomes the SCA.","To enable synchronization, two steps need to be taken. First, the schema designer must annotate the storage platform schema with appropriate sync semantics (designating Change Units as described below). Second, synchronization must be properly configured on all of the machines having an instance of the storage platform that is to participate in the synchronization (as described below).","b) Schema Annotation","A fundamental concept of the synchronization service is that of a Change Unit. A Change Unit is a smallest piece of schema that is individually tracked by the storage platform. For every Change Unit, the synchronization service may be able to determine whether it changed or did not change since the last sync.","Designating Change Units in the schema serves several purposes. First, it determines how chatty the synchronization service is on the wire. When a change is made inside a Change Unit, the entire Change Unit is sent to the other replicas, since the synchronization service does not know which part of the Change Unit was changed. Second, it determines the granularity of conflict detection. When two concurrent changes (these terms are defined in detail in subsequent sections) are made to the same change unit, the synchronization service raises a conflict; on the other hand, if concurrent changes are made to different change units, then no conflict is raised and the changes are automatically merged. Third, it strongly affects the amount of meta-data kept by the system. Much of the synchronization service meta-data is kept per-Change Unit; thus, making Change Units smaller increases the overhead of sync.","Defining Change Units requires finding the right trade-offs. For that reason, the synchronization service allows schema designers to participate in the process.","In one embodiment, the synchronization service does not support Change Units that are larger than an element. However, it does support the ability for schema designers to specify smaller change units than an element\u2014namely, grouping multiple attributes of an element into a separate Change Unit. In that embodiment, this is accomplished using the following syntax:",{"@attributes":{"id":"p-0470","num":"0790"},"tables":{"@attributes":{"id":"TABLE-US-00057","num":"00057"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<Type Name=\u201cAppointment\u201d MajorVersion=\u201c1\u201d"]},{"entry":[{},"MinorVersion=\u201c0\u201d ExtendsType=\u201cBase.Item\u201d"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Extends Version=\u201c1\u201d>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<Field Name=\u201cMeetingStatus\u201c Type=\u201dthe storage"]},{"entry":[{},"platformTypes.uniqueidentifier Nullable=\u201cFalse\u201d\/>"]},{"entry":[{},"<Field Name=\u201cOrganizerName\u201d Type=\u201cthe storage"]},{"entry":[{},"platformTypes.nvarchar(512)\u201d Nullable=\u201cFalse\u201d\/>"]},{"entry":[{},"<Field Name=\u201cOrganizerEmail\u201d Type=\u201cthe storage"]},{"entry":[{},"platformTypes.nvarchar(512)\u201d"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"84pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"TypeMajorVersion=\u201c1\u201d","MultiValued=\u201cTrue\u201d\/>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},". . ."]},{"entry":[{},"<ChangeUnit Name=\u201cCU_Status\u201d>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<Field Name=\u201cMeetingStatus\u201d\/>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/ChangeUnit>"]},{"entry":[{},"<ChangeUnit Name=\u201cCU_Organizer\u201d\/>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<Field Name=\u201cOrganizerName\u201d \/>"]},{"entry":[{},"<Field Name=\u201cOrganizerEmail\u201d \/>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/ChangeUnit>"]},{"entry":[{},". . ."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/Type>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}},"br":{}},"A group of storage platform partners that wish to keep certain parts of their data in sync are referred to as a sync community. While the members of the community want to stay in sync, they do not necessarily represent the data in exactly the same way; in other words, sync partners may transform the data they are synchronizing.","In a peer-to-peer scenario, it is impractical for peers to maintain transformation mappings for all of their partners. Instead, the synchronization service takes the approach of defining \u201cCommunity Folders\u201d. A community folder is an abstraction that represents a hypothetical \u201cshared folder\u201d that all community members are synchronizing with.","This notion is best illustrated by an example. If Joe wants to keep My Documents folders of his several computers in sync, Joe defines a community folder called, say, JoesDocuments. Then, on every computer, Joe configures a mapping between the hypothetical JoesDocuments folder and the local My Documents folder. From this point on, when Joe's computers synchronize with each other, they talk in terms of documents in JoesDocuments, rather than their local items. This way, all Joe's computers understand each other without having to know who the others are\u2014the Community Folder becomes the lingua franca of the sync community.","Configuring the synchronization service consists of three steps: (1) defining mappings between local folders and community folders; (2) defining sync profiles that determine what gets synchronized (e.g. whom to sync with and which subsets should be sent and which received); and (3) defining the schedules on which different sync profiles should run, or running them manually.","(1) Community Folder\u2014Mappings","Community Folder mappings are stored as XML configuration files on individual machines. Each mapping has the following schema:","\/mappings\/communityFolder",{"@attributes":{"id":"p-0477","num":"0000"},"ul":{"@attributes":{"id":"ul0089","list-style":"none"},"li":{"@attributes":{"id":"ul0089-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0090","list-style":"none"},"li":["This element names the community folder that this mapping is for. The name follows the syntax rules of Folders.\n\n\/mappings\/localFolder\n","This element names the local folder that the mapping transforms into. The name follows the syntax rules of Folders. The folder must already exist for the mapping to be valid.","The items within this folder are considered for synchronization per this mapping.\n\n\/mappings\/transformations\n","This element defines how to transform items from the community folder to the local folder and back. If absent or empty, no transformations are performed. In particular, this means that no IDs are mapped. This configuration is primarily useful for creating a cache of a Folder.\n\n\/mappings\/transformations\/mapIDs\n","This element requests that newly generated local IDs be assigned to all of the items mapped from the community folder, rather than reusing community IDs. The Sync Runtime will maintain ID mappings to convert items back and forth.\n\n\/mappings\/transformations\/localRoot\n","This element requests that all root items in the community folder be made children of the specified root.\n\n\/mappings\/runAs\n","This element controls under whose authority requests against this mapping are processed. If absent, sender is assumed.\n\n\/mappings\/runAs\/sender\n","The presence of this element indicates that the sender of messages to this mapping must be impersonated, and requests processed under his credentials."]}}}},"(2) Profiles","A Sync Profile is a total set of parameters needed to kick off synchronization. It is supplied by an SCA to the Sync Runtime to initiate sync. Sync profiles for storage platform-to-storage platform synchronization contain the following information:\n\n","The synchronization service provides a runtime CLR class that allows simple building of Sync Profiles. Profiles can also be serialized to and from XML files for easy storage (often alongside schedules). However, there is no standard place in the storage platform where all the profiles are stored; SCAs are welcome to construct a profile on the spot without ever persisting it. Note that there is no need to have a local mapping to initiate sync. All sync information can be specified in the profile. The mapping is, however, required in order to respond to sync requests initiated by the remote side.","(3) Schedules","In one embodiment, the synchronization service does not provide its own scheduling infrastructure. Instead, it relies on another component to peform this task\u2014the Windows Scheduler available with the Microsoft Windows operating system. The synchronization service includes a command-line utility that acts as an SCA and triggers synchronization based on a sync profile saved in an XML file. This utility makes it very easy to configure the Windows Scheduler to run synchronization either on schedule, or in response to events such as user logon or logoff.","d) Conflict Handling","Conflict handling in the synchronization service is divided into three stages: (1) conflict detection, which occurs at change application time\u2014this step determines if a change can be safely applied; (2) automatic conflict resolution and logging\u2014during this step (that takes place immediately after the conflict is detected) automatic conflict resolvers are consulted to see if the conflict can be resolved\u2014if not, the conflict can be optionally logged; and (3) conflict inspection and resolution\u2014this step takes place if some conflicts have been logged, and occurs outside of the context of the sync session\u2014at this time, logged conflicts can be resolved and removed from the log.","(1) Conflict Detection","In the present embodiment, the synchronization service detects two types of conflicts: knowledge-based and constraint-based.","(a) Knowledge-Based Conflicts","A knowledge-based conflict occurs when two replicas make independent changes to the same Change Unit. Two changes are called independent if they are made without knowledge of each other\u2014in other words, the version of the first is not covered by the knowledge of the second and vice versa. The synchronization service automatically detects all such conflicts based on the replicas' knowledge as described above.","It is sometimes helpful to think of conflicts as forks in the version history of a change unit. If no conflicts occur in the life of a change unit, its version history is a simple chain\u2014-each change occurring after the previous one. In the case of a knowledge-based conflict, two changes occur in parallel, causing the chain to split and become a version tree.","(b) Constraint-Based Conflicts","There are cases where independent changes violate an integrity constraint when applied together. For instance, two replicas creating a file with the same name in the same directory could cause such a conflict to occur.","A constraint-based conflict involves two independent changes Oust like a knowledge-based one), but they do not affect the same change unit. Rather, they affect different change units but with a constraint existing between them.","The synchronization service detects constraint violations at change application time and raises constraint-based conflicts automatically. Resolving constraint-based conflicts usually requires custom code that modifies the changes in such as way as to not violate the constraint; The synchronization service does not provide a general-purpose mechanism for doing so.","(2) Conflict Processing","When a conflict is detected, the synchronization service can take one of three actions (selected by the sync initiator in the Sync Profile): (1) reject the change, returning it back to sender; (2) log a conflict into a conflict log; or (3) resolve the conflict automatically.","If the change is rejected, the synchronization service acts as if the change did not arrive at the replica. A negative acknowledgement is sent back to the originator. This resolution policy is primarily useful on head-less replicas (such as file servers) where logging conflicts is not feasible. Instead, such replicas force the others to deal with the conflicts by rejecting them.","Sync initiators configure conflict resolution in their Sync Profiles. The synchronization service supports combining multiple conflict resolvers in a single profile in the following ways\u2014first, by specifying a list of conflict resolvers to be tried one after another, until one of them succeeds; and second, by associating conflict resolvers with conflict types, e.g. directing update-update knowledge-based conflicts to one resolver, but all the other conflicts to the log.","(a) Automatic Conflict Resolution","The synchronization service provides a number of default conflict resolvers. This list includes:\n\n","In addition, ISVs can implement and install their own conflict resolvers. Custom conflict resolvers may accept configuration parameters; such parameters must be specified by the SCA in the Conflict Resolution section of the Sync Profile.","When a conflict resolver handles a conflict, it returns the list of operations that need to be performed (in lieu of the conflicting change) back to the runtime. The synchronization service then applies these operations, having properly adjusted remote knowledge to include what the conflict handler has considered.","It is possible that another conflict is detected while applying the resolution. In such a case, the new conflict must be resolved before the original processing resumes.","When thinking of conflicts as branches in the version history of an item, conflict resolutions can be viewed as joins\u2014combining two branches to form a single point. Thus, conflict resolutions turn version histories into DAGs.","(b) Conflict Logging","A very particular kind of a conflict resolver is the Conflict Logger. The synchronization service logs conflicts as Items of type ConflictRecord. These records are related back to the items that are in conflict (unless the items themselves have been deleted). Each conflict record contains: the incoming change that caused the conflict; the type of the conflict: update-update, update-delete, delete-update, insert-insert, or constraint; and the version of the incoming change and the knowledge of the replica sending it. Logged conflicts are available for inspection and resolution as described below.","(c) Conflict Inspection and Resolution","The synchronization service provides an API for applications to examine the conflict log and to suggest resolutions of the conflicts in it. The API allows application to enumerate all conflicts, or conflicts, related to a given Item. It also allows such applications to resolve logged conflicts in one of three ways: (1) remote wins\u2014accepting the logged change and overwriting the conflicting local change; (2) local wins\u2014ignoring conflicting parts of the logged change; and (3) suggest new change\u2014where the application proposes a merge that, in its opinion, resolves the conflict. Once conflicts are resolved by an application, the synchronization service removes them from the log.","(d) Convergence of Replicas and Propagation of Conflict Resolutions","In complex synchronization scenarios, the same conflict can be detected at multiple replicas. If this occurs, several things can happen: (1) the conflict can be resolved on one replica, and the resolution be sent to the other; (2) the conflict is resolved on both replicas automatically; or (3) the conflict is resolved on both replicas manually (through the conflict inspection API).","To ensure convergence, the synchronization service forwards conflict resolutions to other replicas. When a change that resolves a conflict arrives at a replica, the synchronization service automatically finds any conflict records in the log that are resolved by this update and eliminates them. In this sense, a conflict resolution at one replica is binding on all the other replicas.","If different winners are chosen by different replicas for the same conflict, the synchronization service applies the principle of binding conflict resolution and picks one of the two resolutions to win over the other automatically. The winner is picked in a deterministic fashion that is guaranteed to produce the same results at all times (one embodiment uses replica ID lexicographic comparisons).","If different \u201cnew changes\u201d are suggested by different replicas for the same conflict, the synchronization service treats this new conflict as a special conflict and uses the Conflict Logger to prevent it from propagating to other replicas. Such situation commonly arises with manual conflict resolution.","2. Synchronizing to Non-Storage Platform Data Stores","According to another aspect of the storage platform of the present invention, the storage platform provides an architecture for ISVs to implement Sync Adapters that allow the storage platform to synchronize to legacy systems such as Microsoft Exchange, AD, Hotmail, etc. Sync Adapters benefit from the many Sync Service provided by the synchronization service, as described below.","Despite the name, Sync Adapters do not need to be implemented as plug-ins into some storage platform architecture. If desired, a \u201csync adapter\u201d can simply be any application that utilizes the synchronization service runtime interfaces to obtain services such as change enumeration and application.","In order to make it simpler for others to configure and run synchronization to a given backend, Sync Adapter writers are encouraged to expose the standard Sync Adapter interface, which runs sync given the Sync Profile as described above. The profile provides configuration information to the adapter, some of which adapters pass to the Sync Runtime to control runtime services (e.g. the Folder to synchronize).","a) Sync Services","The synchronization service provides a number of sync services to adapter writers. For the rest of this section, it is convenient to refer to the machine on which the storage platform is doing synchronization as the \u201cclient\u201d and the non-storage platform backend that the adapter is talking to as the \u201cserver\u201d.","(1) Change Enumeration","Based on the change-tracking data maintained by the synchronization service, Change Enumeration allows sync adapters to easily enumerate the changes that have occurred to a data store Folder since the last time synchronization with this partner was attempted.","Changes are enumerated based on the concept of an \u201canchor\u201d\u2014an opaque structure that represents information about the last synchronization. The anchor takes the form of the storage platform Knowledge, as described in the proceeding sections. Sync adapters utilizing change enumeration services fall into two broad categories: those using \u201cstored anchors\u201d vs. those using \u201csupplied anchors\u201d.","The distinction is based on where the information about the last sync is stored\u2014on the client, or on the server. It is often easier for adapters to store this information on the client\u2014the backend is often not capable of conveniently storing this information. On the other hand, if multiple clients synchronize to the same backend, storing this information on the client is inefficient and in some cases incorrect\u2014it makes one client unaware of the changes that the other client has already pushed up to the server. If an adapter wants to use a server-stored anchor, the adapter needs to supply it back to the storage platform at the time of change enumeration.","In order for the storage platform to maintain the anchor (either for local or remote storage), the storage platform needs to be made aware of the changes that were successfully applied at the server. These and only these changes can be included in the anchor. During change enumeration, Sync Adapters use an Acknowledgement interface to report which changes were successfully applied. At the end of synchronization, adapters using supplied anchors must read the new anchor (which incorporates all of the successfully-applied changes) and send it to their backend.","Often, Adapters need to store adapter-specific data along with the items they insert into the storage platform data store. Common examples of such data are remote IDs and remote versions (timestamps). The synchronization service provides a mechanism for storing this data, and Change Enumeration provides a mechanism to receive this extra data along with the changes being returned. This eliminates the need for adapters to re-query the database in most cases.","(2) Change Application","Change Application allows Sync Adapters to apply changes received from their backend to the local storage platform. Adapters are expected to transform the changes to the storage platform schema.","The primary function of change application is to automatically detect conflicts. As in the case of Storage Platform-to-Storage Platform sync, a conflict is defined as two overlapping changes being made without knowledge of each other. When adapters use Change Application, they must specify the anchor with respect to which conflict detection is performed. Change Application raises a conflict if an overlapping local change that is not covered by the adapter's knowledge is detected. Similar to Change Enumeration, adapters may use either stored or supplied anchors. Change Application supports efficient storage of adapter-specific meta-data. Such data may be attached by the adapter to the changes being applied, and might be stored by the synchronization service. The data might be returned on next change enumeration.","(3) Conflict Resolution","The Conflict Resolution mechanisms described above (logging and automatic resolution options) are available to sync adapters as well. Sync adapters may specify the policy for conflict resolution when applying changes. If specified, conflicts may be passed on to the specified conflict handler and resolved (if possible). Conflicts can also be logged. It is possible that the adapter may detect a conflict when attempting to apply a local change to the backend. In such a case, the adapter may still pass the conflict on to the Sync Runtime to be resolved according to policy. In addition, Sync Adapters may request that any conflicts detected by the synchronization service be sent back to them for processing. This is particularly convenient in the case where the backend is capable of storing or resolving conflicts.","b) Adapter Implementation","While some \u201cadapters\u201d are simply applications utilizing runtime interfaces, adapters are encouraged to implement the standard adapter interfaces. These interfaces allow Sync Controlling Applications to: request that the adapter perform synchronization according to a given Sync Profile; cancel on-going synchronization; and receive progress reporting (percentage complete) on an ongoing sync.","3. Security","The synchronization service strives to introduce as little as possible into the security model implemented by the storage platform. Rather than defining new rights for synchronization, existing rights are used. Specifically,\n\n","The synchronization service does not maintain secure authorship information. When a change is made at replica A by user U and forwarded to replica B, the fact that the change was originally made at A (or by U) is lost. If B forwards this change to replica C, this is done under B's authority, not that of A. This leads to the following limitation: if a replica is not trusted to make its own changes to an item, it cannot forward changes made by others.","When the synchronization service is initiated, it is done by a Sync Controlling Application. The synchronization service impersonates the identity of the SCA and performs all operations (both locally and remotely) under that identity. To illustrate, observe that user U cannot cause the local synchronization service to retrieve changes from a remote storage platform for items that user U does not have read access.","4. Manageability","Monitoring a distributed community of replicas is a complex problem. The synchronization service may use a \u201csweep\u201d algorithm to collect and distribute information about the status of the replicas. The properties of the sweep algorithm ensure that information about all configured replicas is eventually collected and that failing (non-responsive) replicas are detected.","This community-wide monitoring information is made available at every replica. Monitoring tools can be run at an arbitrarily-chosen replica to examine this monitoring information and make administrative decisions. Any configuration changes must be made directly at the affected replicas.","H. Traditional File System Interoperability","As mentioned above, the storage platform of the present invention is, in at least some embodiments, intended to be embodied as an integral part of the hardware\/software interface system of a computer system. For example, the storage platform of the present invention may be embodied as an integral part of an operating system, such as the Microsoft Windows family of operating systems. In that capacity, the storage platform API becomes a part of the operating system APIs through which application programs interact with the operating system. Thus, the storage platform becomes the means through which application programs store information on the operating system, and the Item based data model of the storage platform therefore replaces the traditional files system of such an operating system. For example, as embodied in the Microsoft Windows family of operating systems, the storage platform might replace the NTFS file system implemented in that operating system. Presently, application programs access the services of the NTFS file system through the Win32 APIs exposed by the Windows family of operating systems.","Recognizing, however, that completely replacing the NTFS file system with the storage platform of the present invention would require recoding of existing Win32-based application programs and that such recoding may be undesirable, it would be beneficial for the storage platform of the present invention to provide some interoperability with existing file systems, such as NTFS. In one embodiment of the present invention, therefore, the storage platform enables application programs which rely on the Win32 programming model to access the contents of both the data store of the storage platform as well as the traditional NTFS file system. To this end, the storage platform uses a naming convention that is a superset of the Win32 naming conventions to facilitate easy interoperability. Further, the storage platform supports accessing files and directories stored in a storage platform volume through the Win32 API.","1. Model for Interoperability","According to this aspect of the present invention, and in accordance with the exemplay embodiment discussed above, the storage platform implements one namespace in which non-file and file items can be organized. With this model, the following advantages are achieved:\n\n","As a consequence of this model, in the present embodiment, search capabilities may not be provided over data sources that are not migrated into the storage platform data store. This includes removable media, remote servers and files on the local disk. A Sync Adapter is provided which manifests proxy items (shortcuts +promoted metadata) in the storage platform for items residing in foreign file systems. Proxy items do not attempt to mimic files either in terms of the namespace hierarchy of the data source or in terms of security.","The symmetry achieved on the namespace and programming model between file and non-file content provides a better path for applications to migrate content from file systems to more structured items in the storage platform data store over time. By providing a native file item type in the storage platform data store, application programs can transition file data into the storage platform while still being able to manipulate this data via Win32 . Eventually, application programs might migrate to the storage platform API completely and structure their data in terms of storage platform Items rather than files.","2. Data Store Features","In order to provide the desired level of interoperability, in one embodiment, the following features of the storage platform data store are implemented.","a) Not a Volume","The storage platform data store is not exposed as a separate file system volume. The storage platform leverages FILESTREAMs directly hosted on NTFS. Thus, there is no change to the on-disk format, thereby obviating any need to expose the storage platform as a new file system at the volume level.","Instead, a data store (namespace) is constructed corresponding to an NTFS volume. The database and FILESTREAMs backing this portion of the namespace is located on the NTFS volume with which the storage platform data store is associated. A data store corresponding to the system volume is also provided.","b) Store Structure","The structure of the store is best illustrated with an example. Consider, as an example, the directory tree on the system volume of a machine named HomeMachine, as illustrated in . In accordance with the file system interoperability feature of the present invention, corresponding to the c:\\drive, there is a storage platform data store exposed to the Win32 APIs via a UNC share, called, for example, \u201cWinFSOnC.\u201d This makes the associated data store accessible via the following UNC name: \\\\HomeMachine\\WinFSOnC.","In this embodiment, files and\/or folders need to be migrated from NTFS to the storage platform explicitly. So, if a user desires to move the My Documents folder into the storage platform data store in order to avail his or herself of all the extra search\/categorization features offered by the storage platform, the hierarchy would look as shown in . It is important to note that these folders are actually moved in this example. Another point to note is that the namespace moves into the storage platform, the actual streams are renamed as FILESTREAMs with appropriate pointers hooked up within the storage platform.","c) Not all Files are Migrated","Files that correspond to user data or that need the searching\/categorization that the storage platform provides are candidates for migration into the storage platform data store. Preferably, in order to limit issues of application program compatibility with the storage platform, the set of files that are migrated to the storage platform of the present invention, in the context of the Microsft Windows operating system, are limited to the files in the MyDocuments folder, Internet Explorer (IE) Favorites, IE History, and Desktop .ini files in the Documents and Settings directory. Preferably, migrating Windows system files is not permitted.","d) NTFS Namespace Access to Storage Platform Files","In the embodiment described herein, it is desirable that files migrated into the storage platform not be accessed via the NTFS namespace even though the actual file streams are stored in NTFS. This way, complicated locking and security considerations that arise from a multi-headed implementation are avoided.","e) Expected Namespace\/Drive Letters","Access to files and folders in the storage platform is provided via a UNC name of the form \\\\<machine name>\\<WinfsShareName>. For the class of applications that require drive letters for operation, a drive letter can be mapped to this UNC name.","I. Storage Platform API","As mentioned above, the storage platform comprises an API that enables application programs to access the features and capabilities of the storage platform discussed above and to access items stored in the data store. This section describes one embodiment of a storage platform API of the storage platform of the present invention.",{"@attributes":{"id":"p-0546","num":"0891"},"figref":"FIG. 19","b":["1900","302","1900","340","302","340","322","332","350","350","350","322"],"i":["a","b","c"]},"1. Overview","The data access mechanism of the present embodiment of the storage platform API of the present invention addresses four areas: query, navigation, actions, events.","Query","In one embodiment, the storage platform data store is implemented on a relational database engine ; as a result, the full expressive power of the SQL language is inherent in the storage platform. Higher level query objects provide a simplified model for querying the store, but may not encapsulate the full expressive power of the storage.","Navigation","The storage platform data model builds a rich, extensible type system on the underlying database abstractions. For the developer, the storage platform data is a web of items. The storage platform API enables navigation from item to item via filtering, relationships, folders, etc. This is a higher level of abstraction than the base SQL queries; at the same time, it allows rich filtering and navigation capabilities to be used with familiar CLR coding patterns.","Actions","The storage platform API exposes common actions on all items\u2014Create, Delete, Update; these are exposed as methods on objects. In addition, domain specific actions such as SendMail, CheckFreeBusy, etc. are also available as methods. The API framework uses well defined patterns that ISVs can use to add value by defining additional actions.","Events","Data in the storage platform is dynamic. To let applications react when data in the store is changed, the API exposes rich eventing, subscription, and notification capabilities to the developer.","2. Naming and Scopes","It is useful to distinguish between namespace and naming. The term namespace, as it's commonly used, refers to the set of all names available within some system. The system could be an XML schema, a program, the web, the set of all ftp sites (and their contents), etc. Naming is the process or algorithm used to assign unique names to all entities of interest within a namespace. Thus, naming is of interest because it is desirable to unambiguously refer to a given unit within a namespace. Thus, the term \u201cnamespace,\u201d as used herein, refers to the set of all names available in all the storage platform instances in the universe. Items are the named entities in the the storage platform namespace. The UNC naming convention is used to ensure uniqueness of item names. Every item in every the storage platform store in the universe is addressable by a UNC name.","The highest organizational level in the the storage platform namespace is a service\u2014which is simply an instance of the storage platform. The next level of organization is a volume. A volume is the largest autonomous container of items. Each storage platform instance contains one or more volumes. Within a volume are items. Items are the data atoms in the storage platform.","Data in the real world is almost always organized according to some system that makes sense in a given domain. Underlying all such data organization schemes is the notion of dividing the universe of our data into named groups. As discussed above, this notion is modeled in the storage platform by the concept of a Folder. A Folder is a special type of Item; there are 2 types of Folders: Containment Folders and Virtual Folders.","Referring to , a Containment Folder is an item which contains holding Relationships to other Items and is the equivalent of the common concept of a file system folder. Each Item is \u201ccontained\u201d within at least one containment folder.","A Virtual Folder is a more dynamic way of organizing a collection of Items; it is simply a name given a set of Items\u2014the set is either enumerated explicitly or specified by a query. The Virtual Folder is itself an Item and can be thought of as representing a set of (non-holding) Relationships to a set of Items.","Sometimes, there is the need to model a tighter notion of containment; for example, a Word document embedded in an email message is, in a sense, bound more tightly to its container than, for example, a file contained within a folder. This notion is expressed by the concept of Embedded Items. An Embedded Item has a special kind of relationship which references another Item; the referenced Item can be bound to or otherwise manipulated only within the context of the containing Item.","Finally, the storage platform provides the notion of categories as a way of classification of Items and Elements. Every Item or Element in the storage platform can have associated with it one or more categories. A category is, in essence, simply a name that is tagged on to the Item\/Element. This name can be used in searches. The storage platform data model allows the definition of a hierarchy of categories, thus enabling a tree-like classification of data.","An unambiguous name for an item is the triplet: (<serviceName, <volumeID>, <ItemID>). Some items (specifically, Folders and VirtualFolders) are collections of other items. This gives rise to an alternative way of identifying items: (<serviceName>, <volumeID>, <itemPath>).","The storage platform names include the notion of a service context: a service context is a name which maps to a (<volumeName>, <path>) pair. It identifies an item or a set of items\u2014for instance, a folder, virtual folder, etc. With the concept of service contexts, the UNC name for any item in the the storage platform namespace becomes:\n\n","Users can create and delete service contexts. Also, the root directory in each volume has a pre-defined context: volume-name$.","An ItemContext scopes a query (for example, a Find operation) by limiting the results returned to those Items that live within a specified path.","3. Storage Platform API Components",{"@attributes":{"id":"p-0566","num":"0912"},"figref":"FIG. 20","b":["2002","2004","2006","2008"]},"According to one aspect of the present invention, at design time, the schema author submits a schema document  and code for domain methods to the set of storage platform API design time tools . These tools generate the client side data classes  and the store schema  and store class definitions  for that schema. \u201cDomain\u201d refers to a particular schema; for instance, we talk about domain methods for classes in the Contacts schema, etc. These data classes  are used at runtime by the application developer, in concert with the storage platform API runtime framework classes , to manipulate the storage platform data.","For purposes of illustrating various aspects of the storage platform API of the present invention, examples are presented based on an exemplary Contacts schema. A pictorial representation of this exemplary schema is illustrated in  B.","4. Data Classes","According to an aspect of the present invention, each Item, Item Extension, and Element type, as well as each Relationship, in the storage platform data store has a corresponding class in the storage platform API. Roughly, the fields of the type map to the fields of the class. Each item, item extension, and element in the storage platform is available as an object of the corresponding class in the storage platform API. The developer can query for, create, modify, or delete these objects.","The storage platform comprises an initial set of schemas. Each schema defines a set of Item and Element types, and a set of Relationships. The following is one embodiment of an algorithm for generating data classes from these schema entities:\n\n","The data classes exist in the System.Storage.<schemaName>namespace, where <schemaName> is the name of the corresponding schema\u2014such as Contacts, Files, etc. For example, all classes corresponding to the Contacts schema are in the System.Storage.Contacts namespace.","By way of example, with reference to , the contacts schema results in the following classes, contained in the System.Storage.Contact namespace:\n\n","By way of further example, the detailed structure of the Person type, as defined in the Contacts schema, is shown in XML below:",{"@attributes":{"id":"p-0575","num":"0943"},"tables":{"@attributes":{"id":"TABLE-US-00058","num":"00058"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<Type Name=\u201cPerson\u201d MajorVersion=\u201c1\u201d MinorVersion=\u201c0\u201d"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"ExtendsType=\u201cCore.Principal\u201d ExtendsVersion=\u201c1\u201d>"]},{"entry":[{},"<Field Name=\u201cBirthdate\u201d Type=\u201cthe storage"]},{"entry":[{},"platformTypes.datetime\u201d"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Nullable=\u201ctrue\u201d TypeMajorVersion=\u201c1\u201d\/>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<Field Name=\u201cGender\u201d Type=\u201cBase.CategoryRef\u201d"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Nullable=\u201ctrue\u201d MultiValued=\u201cfalse\u201d"]},{"entry":[{},"TypeMajorVersion=\u201c1\u201d\/>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<Field Name=\u201cPersonalNames\u201d Type=\u201cContact.FullName\u201d"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Nullable=\u201ctrue\u201d MultiValued=\u201ctrue\u201d"]},{"entry":[{},"TypeMajorVersion=\u201c1\u201d\/>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<Field Name=\u201cPersonalEAddresses\u201d Type=\u201cCore.EAddress\u201d"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Nullable=\u201ctrue\u201d MultiValued=\u201ctrue\u201d"]},{"entry":[{},"TypeMajorVersion=\u201c1\u201d\/>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<Field Name=\u201cPersonalPostalAddresses\u201d"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Type=\u201cCore.PostalAddress\u201d Nullable=\u201ctrue\u201d"]},{"entry":[{},"MultiValued=\u201ctrue\u201d TypeMajorVersion=\u201c1\u201d\/>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<Field Name=\u201cPersonalPicture\u201d Type=\u201cthe storage"]},{"entry":[{}," platformTypes.image\u201d"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Nullable=\u201ctrue\u201d TypeMajorVersion=\u201c1\u201d\/>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<Field Name=\u201cNotes\u201d Type=\u201cCore.RichText\u201d"]},{"entry":[{}," Nullable=\u201ctrue\u201d"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"MultiValued=\u201ctrue\u201d TypeMajorVersion=\u201c1\u201d\/>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<Field Name=\u201cProfession\u201d Type=\u201cBase.CategoryRef\u201d"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Nullable=\u201ctrue\u201d MultiValued=\u201ctrue\u201d"]},{"entry":[{},"TypeMajorVersion=\u201c1\u201d\/>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<Field Name=\u201cDataSource\u201d Type=\u201cBase.IdentityKey\u201d"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Nullable=\u201ctrue\u201d MultiValued=\u201ctrue\u201d"]},{"entry":[{},"TypeMajorVersion=\u201c1\u201d\/>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<Field Name=\u201cExpirationDate\u201d Type=\u201cthe storage"]},{"entry":[{}," platformTypes.datetime\u201d"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Nullable=\u201ctrue\u201d TypeMajorVersion=\u201c1\u201d\/>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<Field Name=\u201cHasAllAddressBookData\u201d Type=\u201cthe"]},{"entry":[{},"storage platformTypes.bit\u201d"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Nullable=\u201ctrue\u201d TypeMajorVersion=\u201c1\u201d\/>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<Field Name=\u201cEmployeeOf\u201d Type=\u201cContact.EmployeeData\u201d"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Nullable=\u201ctrue\u201d MultiValued=\u201ctrue\u201d"]},{"entry":[{},"TypeMajorVersion=\u201c1\u201d\/>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/Type>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"This type results in the following class (only the public members are shown): partial public class Person:",{"@attributes":{"id":"p-0577","num":"0945"},"tables":{"@attributes":{"id":"TABLE-US-00059","num":"00059"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"partial public class Person :"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"System.Storage.Core.Principal,"]},{"entry":[{},"System.Windows.Data.IDataUnit"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"{"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"public System.Data.SqlTypes.SqlDateTime"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Birthdate { get; set; }"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"public System.Storage.Base.CategoryRef"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Gender { get; set: }"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"public System.Storage.Contact.FullNameCollection"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"PersonalNames { get; }"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"public System.Storage.Core.EAddressCollection"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"PersonalEAddresses { get; }"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"public System.Storage.Core.PostalAddressCollection"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"PersonalPostalAddresses { get; }"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"public System.Data.SqlTypes.SqlBinary"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"PersonalPicture { get; set; }"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"public System.Storage.Core.RichTextCollection"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Notes { get; }"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"public System.Storage.Base.CategoryRefCollection"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Profession { get; }"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"public System.Storage.Base.IdentityKeyCollection"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"DataSource { get; }"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"public System.Data.SqlTypes.SqlDateTime"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Expiration Date { get; set; }"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"public System.Data.SqlTypes.SqlBoolean"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"HasAllAddressBookData { get; set; }"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"public System.Storage.Contact.EmployeeDataCollection"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"EmployeeOf { get; }"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"public Person( );"]},{"entry":[{},"public Person( System.Storage.Base.Folder folder, string name );"]},{"entry":[{},"public static new System.Storage.FindResult"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"FindAll( System.Storage.ItemStore store );"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"public static new System.Storage.FindResult"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"FindAll("]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"System.Storage.ItemStore store,"]},{"entry":[{},"string filter );"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"public static new Person"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"FindOne("]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"System.Storage.ItemStore store,"]},{"entry":[{},"string filter );"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"public new event"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"System.Windows.Data.PropertyChangedEventHandler"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"PropertyChangedHandler;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"public static new Person"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"FindByID("]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"System.Storage.ItemStore store,"]},{"entry":[{},"long item_key );"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"As yet another example, the detailed structure of the TelephoneNumber type, as defined in the Contacts schema, is shown in the XML below:",{"@attributes":{"id":"p-0579","num":"0947"},"tables":{"@attributes":{"id":"TABLE-US-00060","num":"00060"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<Type Name=\u201cTelephoneNumber\u201d ExtendsType=\u201cCore.EAddress\u201d"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"MajorVersion=\u201c1\u201d MinorVersion=\u201c0\u201d ExtendsVersion=\u201c1\u201d>"]},{"entry":[{},"<Field Name=\u201cCountryCode\u201d Type=\u201cthe storage"]},{"entry":[{},"platformTypes.nvarchar(50)\u201d"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Nullable=\u201ctrue\u201d MultiValued=\u201cfalse\u201d"]},{"entry":[{},"TypeMajorVersion=\u201c1\u201d\/>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<Field Name=\u201cAreaCode\u201d Type=\u201cthe storage"]},{"entry":[{},"platformTypes.nvarchar(256)\u201d"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Nullable=\u201ctrue\u201d TypeMajorVersion=\u201c1\u201d\/>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<Field Name=\u201cNumber\u201d Type=\u201cthe storage"]},{"entry":[{},"platformTypes.nvarchar(256)\u201d"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Nullable=\u201ctrue\u201d TypeMajorVersion=\u201c1\u201d\/>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<Field Name=\u201cExtension\u201d Type=\u201cthe storage"]},{"entry":[{},"platformTypes.nvarchar(256)\u201d"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Nullable=\u201ctrue\u201d TypeMajorVersion=\u201c1\u201d\/>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<Field Name=\u201cPIN\u201d Type=\u201cthe storage"]},{"entry":[{},"platformTypes.nvarchar(50)\u201d"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Nullable=\u201ctrue\u201d TypeMajorVersion=\u201c1\u201d\/>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/Type>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"This type results in the following class (only the public members are shown):",{"@attributes":{"id":"p-0581","num":"0949"},"tables":{"@attributes":{"id":"TABLE-US-00061","num":"00061"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"partial public class TelephoneNumber :"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"System.Storage.Core.EAddress,"]},{"entry":[{},"System.Windows.Data.IDataUnit"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"{"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"public System.Data.SqlTypes.SqlString CountryCode"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"{ get; set; }"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"public System.Data.SqlTypes.SqlString AreaCode"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"{ get; set; }"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"public System.Data.SqlTypes.SqlString Number"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"{ get; set; }"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"public System.Data.SqlTypes.SqlString Extension"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"{ get; set; }"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"public System.Data.SqlTypes.SqlString PIN"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"{ get; set; }"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"public TelephoneNumber( );"]},{"entry":[{},"public new event"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"System.Windows.Data.PropertyChangedEventHandler"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"PropertyChangedHandler;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"The hierarchy of classes resulting from a given schema directly reflects the hierarchy of types in that schema. As an example, consider the Item types defined in the Contacts schema (see, ). The class hierarchy corresponding to this in the storage platform API would be as follows:",{"@attributes":{"id":"p-0583","num":"0951"},"tables":{"@attributes":{"id":"TABLE-US-00062","num":"00062"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Object"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"DataClass"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"ElementBase"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"RootItemBase"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Item"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"119pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Principal"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"105pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Group"]},{"entry":[{},"Household"]},{"entry":[{},"Organization"]},{"entry":[{},"Person"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"126pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"User"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"105pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Service"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"126pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"PresenceService"]},{"entry":[{},"ContactService"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"140pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"ADService"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"RootNestedBase"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},". . . (Element classes)"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"Yet another schema, the schema that allows representing all the audio\/video media in the system (ripped audio files, audio CDs, DVDs, home videos, etc.), enables users\/applications to store, organize, search through, and manipulate different kinds of audio\/video media. The base media document schema is generic enough to represent any media, and the extensions to this base schema are designed to handle domain-specific properties separately for audio and video media. This schema, and many, many others, are envisioned to operate directly or indirectly under the Core Schema.","5. Runtime Framework","The basic storage platform API programming model is object persistence. Application programs (or \u201capplications\u201d) execute a search on a store and retrieve objects representing the data in the store. Applications modify the retrieved objects or create new objects, then cause their changes to be propagated into the store. This process is managed by an ItemContext object. Searches are executed using an ItemSearcher object and search results are accessible via a FindResult object.","a) Runtime Framework Classes","According to another inventive aspect of the storage platform API, the runtime framework implements a number of classes to support the operation of the data classes. These framework classes define a common set of behaviors for the data classes and, together with the data classes, provide the basic programming model for the storage platform API. Classes in the runtime framework belong to the System.Storage namespace. In the present embodiment, the framework classes comprise the following main classes: ItemContext, ItemSearcher, and FindResult. Other minor classes, enum values, and delegates may also be provided.","(1) ItemContext","An ItemContext object (i) represents a set of item domains that an application program wants to search, (ii) maintains state information for each object that represents the state of the data as retrieved from the storage platform, and (iii) manages the transactions used when interacting with the storage platform and any file system with which the storage platform may interoperate.","As an object persistence engine, ItemContext provides the following services:\n\n","ItemContext also performs a number of services unique to the storage platform:\n\n","Appendix A provides a source code listing of the ItemContext class, in accordance with one embodiment thereof.","(2) ItemSearcher","The ItemSearcher class supports simple searches, which return whole Item objects, streams of Item objects, or streams of values projected from Items. ItemSearcher encapsulates the core functionality that is common to all of these: the concept of a target type and parameterized filters that are applied to that target type. The ItemSearcher also allows searchers to be pre-compiled, or prepared, as an optimization when the same search will be executed multiple types. Appendix B provides a source code listing of the ItemSearcher class and several closely related classes, in accordance with one embodiment thereof.","(a) Target Type","The search target type is set when constructing an ItemSearcher. The target type is a CLR type that is mapped to a queryable extent by the data store. Specifically, it is a CLR type that is mapped to item, relationship, and item extension types as well as schematized views.","When retrieving a searcher using the ItemContext.GetSearcher method, the searcher's target type is specified as a parameter. When a static GetSearcher method is invoked on an item, relationship, or item extension type (e.g. Person.GetSearcher), the target type is the item, relationship, or item extension type.","Search expressions provided in an ItemSearcher (for example, the search filter and through find options, or projection definitions) are always relative to the search target type. These expressions may specify properties of the target type (including properties of nested elements) and may specify joins to relationship and item extensions as described elsewhere.","The search target type is made available via a read only property (for example, an ItemSearcher.Type property).","(b) Filters","The ItemSearcher contains a property to specify filters (for example, a property named \u201cFilters\u201d as a collection of SearchExpression objects) that define the filter used in the search. All filters in the collection are combined using a logical and operator when the search is executed. The filter may contain parameter references. Parameter values are specified through the Parameters property.","(c) Preparing Searches","In situations where the same search is to be executed repeatedly, possibly with only parameter changes, some performance improvement can be gained by pre-compiling, or preparing, the search. This is accomplished with a set of prepare methods on the ItemSearcher (for example, a method to prepare a Find that returns one or more Items, perhaps named \u201cPrepareFind\u201d. and a method to prepare a Find that returns a projection, perhaps named \u201cPrepareProject\u201d). For example:",{"@attributes":{"id":"p-0601","num":"0977"},"tables":{"@attributes":{"id":"TABLE-US-00063","num":"00063"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"ItemSearcher searcher = . . .;"]},{"entry":[{},"PreparedFind pf = searcher.PrepareFind( );"]},{"entry":[{},". . ."]},{"entry":[{},"result = pf.FindAll( );"]},{"entry":[{},". . ."]},{"entry":[{},"result = pf.FindAll( );"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{}},"There are a number of options that can be applied to a simple search. These may be specified, for example, in a FindOptions object and passed to the Find methods. For example:",{"@attributes":{"id":"p-0603","num":"0979"},"tables":{"@attributes":{"id":"TABLE-US-00064","num":"00064"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"ItemSearcher searcher = Person.GetSearcher( context );"]},{"entry":[{},"FindOptions options = new FindOptions( );"]},{"entry":[{},"options.MaxResults = 10;"]},{"entry":[{},"options.SortOptions.Add( \u201cPersonalNames.Surname\u201d,"]},{"entry":[{},"SortOrder.Ascending );"]},{"entry":[{},"FindResult result = searcher.FindAll( options );"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"As a convenience, sort options may also be passed directly to the Find methods:",{"@attributes":{"id":"p-0605","num":"0981"},"tables":{"@attributes":{"id":"TABLE-US-00065","num":"00065"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"ItemSearcher searcher = Person.GetSearcher( context );"},{"entry":"FindResult result = searcher.FindAll("}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"new SortOption( \u201cPersonalNames.Surname\u201d,"]},{"entry":[{},"SortOrder.Ascending ) );"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"The DelayLoad option determines if the values of large binary properties are loaded when the search results are retrieved or if loading is delayed until they are referenced. The MaxResults option determines the maximum number of results that are returned. This is equivalent to specifying TOP in a SQL query. It is most often used in conjunction with sorting.","A sequence of SortOption objects can be specified (for example, using a FindOptions.SortOptions property). The search results will be sorted as specified by the first SortOption object, then by as specified by the second SortOption object, etc. The SortOption specifies a search expression that indicates the property that will be used for sorting. The expression specifies one of the following:\n\n","For example, assuming the search target type is System.Storage.Contact.Person:\n\n","(3) Item Result Stream (\u201cFindResult\u201d)","The ItemSearcher (for example, through the FindeAll method) returns an object that can be used to access the objects returned by the search (for example, a \u201cFindResult\u201d object). Appendix C provides a source code listing of the FindResult class and several closely related classes, in accordance with one embodiment thereof.","There are two distinct methods for getting results from a FindResult object: using the reader pattern defined by IObjectReader (and IAsyncObjectReader) and using the enumerator pattern as defined by IEnumerable and IEnumerator. The enumerator pattern is standard in the CLR and supports language constructs like C#'s foreach. For example:",{"@attributes":{"id":"p-0612","num":"0996"},"tables":{"@attributes":{"id":"TABLE-US-00066","num":"00066"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"ItemSearcher searcher = Person.GetSearcher( context );"]},{"entry":[{},"searcher.Filters.Add( \u201cPersonalNames.Surname = \u2018Smith\u2019\u201d );"]},{"entry":[{},"FindResult result = searcher.FindAll( );"]},{"entry":[{},"foreach( Person person in result ) . . .;"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"The reader pattern is supported because it allows results to be processed more efficiently by eliminating a data copy in some cases. For example:",{"@attributes":{"id":"p-0614","num":"0998"},"tables":{"@attributes":{"id":"TABLE-US-00067","num":"00067"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"ItemSearcher searcher = Person.GetSearcher( context );"]},{"entry":[{},"searcher.Filters.Add( \u201cPersonalNames.SurName = \u2018Smith\u2019\u201d );"]},{"entry":[{},"FindResult result = searcher.FindAll( );"]},{"entry":[{},"while( result.Read( ) )"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Person person = (Person)result.Current;"]},{"entry":[{},". . ."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"In addition, the reader pattern supports asynchronous operation:",{"@attributes":{"id":"p-0616","num":"1000"},"tables":{"@attributes":{"id":"TABLE-US-00068","num":"00068"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"ItemSearcher searcher = Person.GetSearcher( context );"},{"entry":"searcher.Filters.Add( \u201cPersonalNames.SurName = \u2018Smith\u2019\u201d );"},{"entry":"FindResult result = searcher.FindAll( );"},{"entry":"IAysncResult asyncResult = result.BeginRead( new AsyncCallback("},{"entry":"MyCallback ) );"},{"entry":"void MyCallback( IAsyncResult asyncResult )"},{"entry":"{"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"if( result.EndRead( asyncResult ) )"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Person person = (Person)result.Current;"]},{"entry":[{},". . ."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"In the present embodiment, a FindResult should be closed when it is no longer needed. This can be done by calling the Close method or using language constructs such as C#'s using statement. For example:",{"@attributes":{"id":"p-0618","num":"1002"},"tables":{"@attributes":{"id":"TABLE-US-00069","num":"00069"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"ItemSearcher searcher = Person.GetSearcher( context );"]},{"entry":[{},"searcher.Filters.Add( \u201cPersonalNames.SurName = \u2018Smith\u2019\u201d);"]},{"entry":[{},"using( FindResult result = searcher.FindAll( ) )"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"while( result.Read( ) )"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Person person = (Person)result.Current;"]},{"entry":[{},". . ."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}},"br":{}},{"@attributes":{"id":"p-0619","num":"1003"},"figref":"FIG. 22","ul":{"@attributes":{"id":"ul0113","list-style":"none"},"li":{"@attributes":{"id":"ul0113-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0114","list-style":"none"},"li":["1. An application , , or binds to an item in the storage platform.","2. The framework  creates an ItemContext object  corresponding to the bound item and returns it to the application.","3. The application submits a Find on this ItemContext to get a collection of Items; the returned collection is conceptually an object graph  (due to relationships).","4. The application changes, deletes, and inserts data.","5. The application saves the changes by calling the Update( ) method.\n\nc) Common Programming Patterns\n"]}}}},"This section provides a variety of examples of how the storage platform API framework classes can be used to manipulate items in the data store.","(1) Opening and Closing ItemContext Objects","An application gets the ItemContext object it will use to interact with the data store, e.g. by calling a static ItemContext.Open method and providing the path or paths that identify the item domains that will be associated with the ItemContext. Item domains scope the searches performed using the ItemContext such that only the domain item and the items contained in that item will be subject to the search. Examples are as follows:",{"@attributes":{"id":"p-0623","num":"1012"},"tables":{"@attributes":{"id":"TABLE-US-00070","num":"00070"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"Open an ItemContext with the DefaultStore storage platform"},{"entry":"share on the local computer"},{"entry":"ItemContext ic = ItemContext.Open( );"},{"entry":"Open an ItemContext with a given storage platform share"},{"entry":"ItemContext ic = ItemContext.Open( @\u201c\\\\myserver1\\DefaultStore\u201d );"},{"entry":"Open an ItemContext with an item under a storage platform"},{"entry":"share"},{"entry":"ItemContext ic = ItemContext.Open("},{"entry":"@\u201c\\\\myserver1\\WinFSSpecs\\api\\m6\u201d );"},{"entry":"Open an ItemContext with multiple item domains"},{"entry":"ItemContext ic = ItemContext.Open( @\u201c\\\\myserver1\\My Documents\u201d,"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"@\u201c\\\\jane1\\My Documents\u201d,"]},{"entry":[{},"@\u201c\\\\jane2\\My Documents\u201d );"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"When an ItemContext is no longer needed, it must be closed.",{"@attributes":{"id":"p-0625","num":"1014"},"tables":{"@attributes":{"id":"TABLE-US-00071","num":"00071"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Explicitly Close an ItemContext"]},{"entry":[{},"ItemContext ic = ItemContext.Open( );"]},{"entry":[{},". . ."]},{"entry":[{},"ic.Close( );"]},{"entry":[{},"Close using statement with an ItemContext"]},{"entry":[{},"using( ItemContext ic = ItemContext.Open( ) )"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},". . .;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"(2) Searching for Objects","According to another aspect of the present invention, the storage platform API provides a simplified query model that enables application programmers to form queries based on various properties of the items in the data store, in a manner that insulates the application programmer from the details of the query language of the underlying database engine.","Applications can execute a search across the domains specified when the ItemContext was opened using an ItemSearcher object returned by the ItemContext.GetSearcher method. Search results are accessed using a FindResult object. Assume the following declarations for the examples below:",{"@attributes":{"id":"p-0629","num":"1018"},"tables":{"@attributes":{"id":"TABLE-US-00072","num":"00072"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"ItemContext ic = . . .;"]},{"entry":[{},"ItemSearcher searcher = null;"]},{"entry":[{},"FindResult result = null;"]},{"entry":[{},"Item item = null;"]},{"entry":[{},"Relationship relationship = null;"]},{"entry":[{},"ItemExtension itemExtension = null;"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"The basic search pattern involves using an ItemSearcher object retrieved from an ItemContext by calling the GetSearcher method.",{"@attributes":{"id":"p-0631","num":"1020"},"tables":{"@attributes":{"id":"TABLE-US-00073","num":"00073"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Search for all items of a given type"]},{"entry":[{},"searcher = ic.GetSearcher( typeof( Person ) );"]},{"entry":[{},"result = searcher.FindAll( );"]},{"entry":[{},"foreach( Person p in result ) . . .;"]},{"entry":[{},"Search for items of a given type that satisfy a filter"]},{"entry":[{},"searcher = ic.GetSearcher( typeof( Person ) );"]},{"entry":[{},"searcher.Filters.Add( \u201cPersonalNames.Surname = \u2018Smith\u2019\u201d );"]},{"entry":[{},"result = searcher.FindAll( );"]},{"entry":[{},"foreach( Person p in result ) . . .;"]},{"entry":[{},"Use a parameter in a filter string"]},{"entry":[{},"searcher = ic.GetSearcher( typeof( Person ) );"]},{"entry":[{},"searcher.Filters.Add( \u201cBirthdate < @ Date\u201d );"]},{"entry":[{},"searcher.Parameters[\u201cDate\u201d] = someDate;"]},{"entry":[{},"result = searcher.FindAll( );"]},{"entry":[{},"foreach( Person p in result ) . . .;"]},{"entry":[{},"Search for relationships of a given type and satisfying a filter"]},{"entry":[{},"searcher = ic.GetSearcher( typeof( EmployeeEmployer ) );"]},{"entry":[{},"searcher.Filters.Add( \u201cStartDate <= @ Date AND"]},{"entry":[{},"(EndDate >= @ Date OR isnull(EndDate))\u201d );"]},{"entry":[{},"searcher.Parameters[\u201cDate\u201d] = someDate;"]},{"entry":[{},"result = searcher.FindAll( );"]},{"entry":[{},"Foreach( EmployeeEmployer ee in result ) . . .;"]},{"entry":[{},"Search for items with relationships of a given type and satisfying"]},{"entry":[{},"a filter"]},{"entry":[{},"searcher = ic.GetSearcher( typeof( Folder ) );"]},{"entry":[{},"searcher.Filters.Add( \u201cMemberRelationships.Name like"]},{"entry":[{},"\u2018A %\u2019\u201d ); \/\/ See [ApiRel]"]},{"entry":[{},"result = searcher.FindAll( );"]},{"entry":[{},"Foreach( Folder f in result ) . . .;"]},{"entry":[{},"Search for item extensions of a given type and"]},{"entry":[{},"satisfying a filter"]},{"entry":[{},"searcher = ic.GetSearcher( typeof( ShellExtension ) );"]},{"entry":[{},"searcher.Filters.Add( \u201cKeywords.Value = \u2018Foo\u2019\u201d );"]},{"entry":[{},"result = searcher.FindAll( );"]},{"entry":[{},"foreach( ShellExtension se in result ) . . .;"]},{"entry":[{},"Search for items with item extensions of a given type and"]},{"entry":[{},"satisfying a filter"]},{"entry":[{},"searcher = ic.GetSearcher( typeof( Person ) );"]},{"entry":[{},"searcher.Filters.Add( \u201cExtensions.Cast(@Type).Keywords.Value ="]},{"entry":[{},"\u2018Foo\u2019\u201d ); \/\/ See [ApiExt]"]},{"entry":[{},"searcher.Parameters[\u201cType\u201d] = typeof( ShellExtension );"]},{"entry":[{},"result = searcher.FindAll( );"]},{"entry":[{},"foreach( Person p in result ) . . .;"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{}},"Various options can be specified when executing a search, including sorting, delay loading, and limiting the number of results.",{"@attributes":{"id":"p-0633","num":"1022"},"tables":{"@attributes":{"id":"TABLE-US-00074","num":"00074"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Sort search results"]},{"entry":[{},"searcher = ic.GetSearcher( typeof( Person ) );"]},{"entry":[{},"searcher.Filters.Add( \u201cPersonalNames.Surname = \u2018Smith\u2019\u201d );"]},{"entry":[{},"SearchOptions options = new SearchOptions( );"]},{"entry":[{},"options.SortOptions.Add( new SortOption( \u201cBirthdate\u201d,"]},{"entry":[{},"SortOrder.Ascending ) );"]},{"entry":[{},"result = searcher.FindAll( options );"]},{"entry":[{},"foreach( Person p in result ) . . .;"]},{"entry":[{},"\/\/ A shortcut is available:"]},{"entry":[{},"searcher = ic.GetSearcher( typeof( Person ) );"]},{"entry":[{},"searcher.Filters.Add( \u201cPersonalNames.Surname = \u2018Smith\u2019\u201d );"]},{"entry":[{},"result = searcher.FindAll( new SortOption( \u201cBirthdate\u201d,"]},{"entry":[{},"SortOrder.Ascending ) );"]},{"entry":[{},"foreach( Person p in result ) . . .;"]},{"entry":[{},"Limit result count"]},{"entry":[{},"searcher = ic.GetSearcher( typeof( Person ) );"]},{"entry":[{},"searcher.Filters.Add( \u201cPersonalNames.Surname = \u2018Smith\u2019\u201d );"]},{"entry":[{},"SearchOptions options = new SearchOptions( );"]},{"entry":[{},"options.MaxResults = 10;"]},{"entry":[{},"result = searcher.FindAll( options );"]},{"entry":[{},"foreach( Person p in result ) . . .;"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{}},"On occasion retrieving only the first result is useful, especially when specifying sort criteria. In addition, some searches are expected to return only one object and are not expected to return no objects.",{"@attributes":{"id":"p-0635","num":"1024"},"tables":{"@attributes":{"id":"TABLE-US-00075","num":"00075"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Search for one object"]},{"entry":[{},"searcher = ic.GetSearcher( typeof( Person ) );"]},{"entry":[{},"searcher.Filters.Add( \u201cPersonalNames.Surname = \u2018Smith\u2019\u201d );"]},{"entry":[{},"Person p = searcher.FindOne( new SortOption( \u201cBirthdate\u201d"]},{"entry":[{},"SortOrder.Ascending ) ) as Person;"]},{"entry":[{},"if( p != null ) . . .;"]},{"entry":[{},"Search for single object that is expected to always exist"]},{"entry":[{},"searcher = ic.GetSearcher( typeof( Person ) );"]},{"entry":[{},"searcher.Filters.Add( \u201cPersonalNames[Surname = \u2018Smith\u2019"]},{"entry":[{},"AND Givenname \u2018John\u2019]\u201d );"]},{"entry":[{},"try"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Person p = searcher.FindOnly( );"]},{"entry":[{},". . .;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"catch( Exception e )"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},". . .;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}},"br":{}},"There are also a number of shortcut methods on ItemContext that make executing simple searches as easy as possible.",{"@attributes":{"id":"p-0637","num":"1026"},"tables":{"@attributes":{"id":"TABLE-US-00076","num":"00076"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"Search using the ItemContext.FindAll shortcut"},{"entry":"result = ic.FindAll( typeof( Person ), \u201cPersonalNames.Surname ="},{"entry":"\u2018Smith\u2019\u201d );"},{"entry":"foreach( Person p in result ) . . .;"},{"entry":"Search using the ItemContext.FindOne shortcut"},{"entry":"Person p = ic.FindOne( typeof( Person ), \u201cPersonalNames.Surname ="},{"entry":"\u2018Smith\u2019\u201d ) as Person;"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}},"br":{}},"In addition, Items, relationships, and item extensions can be retrieved by providing their id(s). Items may also be retrieved by path.",{"@attributes":{"id":"p-0639","num":"1028"},"tables":{"@attributes":{"id":"TABLE-US-00077","num":"00077"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Get items, relationships, and item extensions given their id(s)"]},{"entry":[{},"item = ic.FindItemById( iid );"]},{"entry":[{},"relationship = ic.FindRelationshipById( iid, rid );"]},{"entry":[{},"itemExtension = ic.FindItemExtensionById( iid, eid );"]},{"entry":[{},"Get items given a path"]},{"entry":[{},"\/\/ Single domain only"]},{"entry":[{},"item = ic.FindItemByPath( @\u201ctemp\\foo.txt\u201d );"]},{"entry":[{},"\/\/ Single or multi-domain"]},{"entry":[{},"result = ic.FindAllItemsByPath( @\u201ctemp\\foo.txt\u201d );"]},{"entry":[{},"foreach( Item I in result ) . . .;"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{}},"There are many places in the storage platform API where it is desirable to provide a helper method that executes a search in the context of another object or with specific parameters. The GetSearcher pattern enables these scenarios. There are many GetSearcher methods in the API. Each returns an ItemSearcher pre-configured to perform a given search. For example:",{"@attributes":{"id":"p-0641","num":"1030"},"tables":{"@attributes":{"id":"TABLE-US-00078","num":"00078"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"searcher = itemContext.GetSearcher(\u2009);"]},{"entry":[{},"searcher = Person.GetSearcher(\u2009);"]},{"entry":[{},"searcher = EmployeeEmployer.GetSearcherGivenEmployer("]},{"entry":[{},"organization );"]},{"entry":[{},"searcher = person.GetSearcherForReports(\u2009);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"You can add additional filters before executing the search:"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"searcher = person.GetSearcherForReports(\u2009);"]},{"entry":[{},"searcher.Filters.Add( \u201cPersonalNames.Surname=\u2018Smith\u2019\u201d );"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"You can choose how you want the results:"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"FindResult findResult = searcher.FindAll(\u2009);"]},{"entry":[{},"Person person = searcher.FindOne(\u2009);"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"(3) Updating the Store","Once an object has been retrieved by a search it may be modified by the application as needed. New objects may also be created and associated with existing objects. Once the application has made all the changes that form a logical group, the application calls ItemContext.Update to persist those changes to the store. According to yet another aspect of the storage platform API of the present invention, the API collects changes to an item made by an application program and then organizes them into the correct updates required by the database engine (or any kind of storage engine) on which the data store is implemented. This enables application programmers to make changes to an item in memory, while leaving the complexity of data store updates to the API.",{"@attributes":{"id":"p-0644","num":"1033"},"tables":{"@attributes":{"id":"TABLE-US-00079","num":"00079"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"Save Changes to a Single Item"},{"entry":"Person p = ic.FindItemById( pid ) as Person;"},{"entry":"p.DisplayName = \u201cfoo\u201d;"},{"entry":"p.TelephoneNumbers.Add( new TelephoneNumber( \u201c425-555-1234\u201d ) );"},{"entry":"ic.Update(\u2009);"},{"entry":"Save Changes to Multiple Items"},{"entry":"Household h1 = ic.FindItemById( hid1 ) as Household;"},{"entry":"Household h2 = ic.FindItemById( hid2 ) as Household;"},{"entry":"Person p = ic.FindItemById( pid ) as Person;"},{"entry":"h1.MemberRelationships.Remove( p );"},{"entry":"h2.MemberRelationships.Add( p );"},{"entry":"ic.Update(\u2009);"},{"entry":"Create a new Item"},{"entry":"Folder f = ic.FindItemById( fid ) as Folder;"},{"entry":"Person p = new Person(\u2009);"},{"entry":"p.DisplayName = \u201cfoo\u201d;"},{"entry":"f.Relationships.Add( new FolderMember( p, \u201cfoo\u201d ) );"},{"entry":"ic.Update(\u2009);"},{"entry":"\/\/ Or using a shortcut. . ."},{"entry":"Folder f = ic.FindItemById( fid ) as Folder;"},{"entry":"Person p = new Person(\u2009);"},{"entry":"p.DisplayName = \u201cfoo\u201d;"},{"entry":"f.MemberRelationships.Add( p, \u201cfoo\u201d );"},{"entry":"ic.Update(\u2009);"},{"entry":"Delete relationships (and possibly the target Item)"},{"entry":"searcher = ic.GetSearcher( typeof( FolderMember ) );"},{"entry":"searcher.Filters.Add( \u201cSourceItemId=@fid\u201d );"},{"entry":"searcher.Filters.Add( \u201cTargetItemId=@pid\u201d );"},{"entry":"searcher.Parameters.Add( \u201cfid\u201d, fid );"},{"entry":"searcher.Parameters.Add( \u201cpid\u201d, pid );"},{"entry":"foreach( FolderMember fm in searcher.FindAll(\u2009) ) fm.MarkForDelete(\u2009);"},{"entry":"ic.Update(\u2009);"},{"entry":"\/\/ Or using a shortcut. . ."},{"entry":"Folder f = ic.FindItemById( fid ) as Folder;"},{"entry":"f.MemberRelationships.Remove( pid );"},{"entry":"ic.Update(\u2009);"},{"entry":"Add an Item Extension"},{"entry":"Item item = ic.FindItemById( iid );"},{"entry":"MyExtension me = new MyExtension(\u2009);"},{"entry":"me.Foo = \u201cbar\u201d;"},{"entry":"item.Extensions.Add( me );"},{"entry":"ic.Update(\u2009);"},{"entry":"Delete Item Extensions"},{"entry":"searcher = ic.GetSearcher( typeof( MyExtension ) );"},{"entry":"searcher.Filters.Add( \u201cItemId=@iid\u201d );"},{"entry":"searcher.Parameters.Add( \u201ciid\u201d, iid );"},{"entry":"foreach( MyExtension me in searcher.FindAll(\u2009) ) me.MarkForDelete(\u2009);"},{"entry":"ic.Update(\u2009);"},{"entry":"\/\/ Or using a shortcut. . ."},{"entry":"Item i = ic.FindItemById( iid );"},{"entry":"i.Extensions.Remove( typeof( MyExtension ) );"},{"entry":"ic.Update(\u2009);"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"6. Security","With reference to section II.E above (Security), in the present embodiment of the storage platform API, there are five methods available on the Item Context for retrieving and modifying the security policy associated with an item in the store. These are:\n\n","GetItemSecurity and SetltemSecurity provide the mechanism to retrieve and modify the explicit ACL associated with the item. This ACL is independent of the paths that exist to the item and will be in play independent of the holding relationships which have this item as the target. This enables the administrators to reason about the item security independent of the paths that exist to the item if they so desire.","The GetPathSecurity and SetPathSecurity provide the mechanism for retrieving and modifying the ACL that exists on an item because of a holding relationship from another folder. This ACL is composed from the ACL's of the various ancestors to the item along the path under consideration along with the explicit ACL if any supplied for that path. The difference between this ACL and the ACL in the previous case is that this ACL remains in play only as long as the corresponding holding relationship exists while the explicit item ACL is independent of any holding relationship to an item.","The ACL's that can be set on an item with SetltemSecurity and SetPathSecurity is restricted to inheritable and object specific ACE's. They cannot contain any ACE marked as inherited.","The GetEffectiveItemSecurity retrieves the various path based ACL's as well as the explicit ACL on the item. This reflects the authorization policy in effect on the given item.","7. Support for Relationships","As discussed above, the data model of the storage platform defines \u201crelationships\u201d that allow items to be related to one another. When the data classes for a schema are generated, the following classes are produced for each relationship type:\n\n","This section describes the support for relationships in the storage platform API.","a) Base Relationship Types","The storage platform API provides a number of types in the System.Storage namespace that form the foundation of the relationship API. These are:\n\n","(1) Relationship Class","The following is the base class for relationship classes.",{"@attributes":{"id":"p-0657","num":"1056"},"tables":{"@attributes":{"id":"TABLE-US-00080","num":"00080"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"public abstract class Relationship : StoreObject"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ Create with default values."]},{"entry":[{},"protected Relationship( ItemIDReference"]},{"entry":[{},"targetIt mReferenc );"]},{"entry":[{},"\/\/ Informs the relationship that it has been added to a"]},{"entry":[{},"relationship collection. The object"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ will interrogate the collection to determine the source"]},{"entry":[{},"item, item context, etc."]},{"entry":[{},"internal AddedToCollection( VirtualRelationshipCollection"]},{"entry":[{},"collection );"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ The relationship's id."]},{"entry":[{},"public RelationshipId RelationshipId { get; }"]},{"entry":[{},"\/\/ The id of the source item."]},{"entry":[{},"public ItemId SourceItemId { get; }"]},{"entry":[{},"\/\/ Get the source item."]},{"entry":[{},"public Item SourceItem { get; }"]},{"entry":[{},"\/\/ Reference to the target item."]},{"entry":[{},"public ItemIdReference TargetItemReference { get; }"]},{"entry":[{},"\/\/ Get the target item (calls"]},{"entry":[{},"TargetItemReference.GetItem(\u2009))."]},{"entry":[{},"public Item TargetItem { get; }"]},{"entry":[{},"\/\/ Determines if the ItemContext already has a connection"]},{"entry":[{},"to the target item's domain (calls"]},{"entry":[{},"\/\/TargetItemReference.IsDomainConnected)."]},{"entry":[{},"public bool IsTargetDomainConnected { get; }"]},{"entry":[{},"\/\/ The name of the target item in the namespace. The"]},{"entry":[{},"name must be unique across all the"]},{"entry":[{},"\/\/ source item's holding relationships."]},{"entry":[{},"public OptionalValue<string> Name {get; set;}"]},{"entry":[{},"\/\/ Determines if this is a holding or reference"]},{"entry":[{},"relationship."]},{"entry":[{},"public OptionalValue<bool> IsOwned {get; set;}"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"(2) ItemReference Class","The following is the base class for item reference types.",{"@attributes":{"id":"p-0660","num":"1059"},"tables":{"@attributes":{"id":"TABLE-US-00081","num":"00081"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"public abstract class ItemReference : NestedElement"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ Create with default values."]},{"entry":[{},"protected ItemReference(\u2009);"]},{"entry":[{},"\/\/ Returns the item referenced."]},{"entry":[{},"public virtual Item GetItem(\u2009);"]},{"entry":[{},"\/\/ Determine if a connection to the referenced item's domain"]},{"entry":[{},"has been established."]},{"entry":[{},"public virtual bool IsDomainConnected(\u2009);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"ItemReference objects may identify items that exist in a store other than the one where the item reference itself resides. Each derived type specifies how a reference to a remote store is constructed and used. Implementations of GetItem and IsDomainConnected in derived classes use the ItemContext's multi-domain support to load items from the necessary domain and to determine if a connection to the domain has already been established.","(3) ItemIdReference Class","The following is the ItemIdReference class\u2014an Item reference that uses an item id to identify the target item.",{"@attributes":{"id":"p-0664","num":"1063"},"tables":{"@attributes":{"id":"TABLE-US-00082","num":"00082"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"public class ItemIdReference : ItemReference"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ Construct a new ItemIdReference with default values."]},{"entry":[{},"public ItemIdReference(\u2009);"]},{"entry":[{},"\/\/ Construct a new ItemIdReference to the specified item. The"]},{"entry":[{},"domain associated with the"]},{"entry":[{},"\/\/ Item is used as the locator."]},{"entry":[{},"public ItemIdReference( Item item );"]},{"entry":[{},"\/\/ Construct a new ItemIdReference with a null locator and the"]},{"entry":[{},"given target item id."]},{"entry":[{},"public ItemIdReference( ItemId itemId );"]},{"entry":[{},"\/\/ Construct a new ItemIdReference with the given locator and"]},{"entry":[{},"item id values."]},{"entry":[{},"public ItemIdReference( string locator, ItemId itemId );"]},{"entry":[{},"\/\/ The id of the target item."]},{"entry":[{},"public ItemId ItemId {get; set;}"]},{"entry":[{},"\/\/ A path identifying that WinFS item that contains the target"]},{"entry":[{},"item in its domain. If null,"]},{"entry":[{},"\/\/ the domain that contains the item is not known."]},{"entry":[{},"public OptionalValue<string> Locator {get; set;}"]},{"entry":[{},"\/\/ Determine if a connection to the referenced item's domain"]},{"entry":[{},"has been established."]},{"entry":[{},"public override bool IsDomainConnected(\u2009);"]},{"entry":[{},"\/\/ Retrieves the referenced item."]},{"entry":[{},"public override Item GetItem(\u2009);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"GetItem and IsDomainConnected use the ItemContext's multi-domain support to load items from the necessary domain and to determine if a connection to the domain has already been established. This feature is not implemented yet.","(4) ItemPathReference Class","The ItemPathReference Class is an item reference that uses a path to identify the target item. The code for the class is as follows:",{"@attributes":{"id":"p-0668","num":"1067"},"tables":{"@attributes":{"id":"TABLE-US-00083","num":"00083"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"public class ItemPathReference : ItemReference"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ Construct an item path reference with default values."]},{"entry":[{},"public ItemPathReference(\u2009);"]},{"entry":[{},"\/\/ Construct an item path reference with no locator and"]},{"entry":[{},"the given path."]},{"entry":[{},"public ItemPathReference( string path );"]},{"entry":[{},"\/\/ Construct an item path reference with the given"]},{"entry":[{},"locator and path."]},{"entry":[{},"public ItemPathReference( string locator, string path );"]},{"entry":[{},"\/\/ A path identifying that WinFS item that contains the"]},{"entry":[{},"target item in it's domain."]},{"entry":[{},"public OptionalValue<string> Locator {get; set;}"]},{"entry":[{},"\/\/ The path of the target item relative to the item domain"]},{"entry":[{},"specified by locator."]},{"entry":[{},"public string Path {get; set;}"]},{"entry":[{},"\/\/ Determine if a connection to the referenced item's domain"]},{"entry":[{},"has been established."]},{"entry":[{},"public override bool IsDomainConnected(\u2009);"]},{"entry":[{},"\/\/ Retrieves the referenced item."]},{"entry":[{},"public override Item GetItem(\u2009);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"GetItem and IsDomainConnected use the ItemContext's multi-domain support to load items from the necessary domain and to determine if a connection to the domain has already been established.","(5) RelationshipId Structure","The RelationshipId Structure encapsulates a relationship id GUID.","public class RelationshipId",{"@attributes":{"id":"p-0672","num":"1071"},"tables":{"@attributes":{"id":"TABLE-US-00084","num":"00084"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"{"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ Generates a new relations id GUID."]},{"entry":[{},"public static RelationshipId NewRelationshipId(\u2009);"]},{"entry":[{},"\/\/ Initialize with a new relationship id GUID."]},{"entry":[{},"public RelationshipId(\u2009);"]},{"entry":[{},"\/\/ Initialize with the specified GUID."]},{"entry":[{},"public RelationshipId( Guid id );"]},{"entry":[{},"\/\/ Initialize with a string representation of a GUID."]},{"entry":[{},"public RelationshipId( string id );"]},{"entry":[{},"\/\/ Returns a string representation of the relationship id GUID."]},{"entry":[{},"public override string ToString(\u2009);"]},{"entry":[{},"\/\/ Converts a System.Guid instance into a RelationshipId instance."]},{"entry":[{},"public static implicit operator RelationshipId(Guid guid);"]},{"entry":[{},"\/\/ Converts a RelationshipId instance into a System.Guid instance."]},{"entry":[{},"public static implicit operator Guid(RelationshipId relationshipId);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"This value type wraps a guid so that parameters and properties can be strongly typed as a relationship id. OptionalValue<RelationshipId> should be used when a relationship id is nullable. An Empty value, such as provided by System.Guid.Empty, is not exposed. A RelationshipId cannot be constructed with an empty value. When the default constructor is used to create a RelationshipId, a new GUID is created.","(6) VirtualRelationshipCoflection Class","The VirtualRelationshipCollection class implements a collection of relationship objects that includes objects from the data store, plus new objects that have been added to the collection, but not including objects that have been removed from the store. Objects of a specified relationship type with a given source item id are included in the collection.","This is the base class for the relationship collection class that is generated for each relationship type. That class can be used as the type of a property in the source item type to provide access and easy manipulation of a given item's relationships.","Enumerating the contents of a VirtualRelationshipCollection requires that a potentially large number of relationship objects be loaded from the store. Applications should use the Count property to determine how many relationships could be loaded before they enumerate the contents of the collection. Adding and removing objects to\/from the collection does not require relationships to be loaded from the store.","For efficiency, it is preferable that applications search for relationships that satisfy specific criteria instead of enumerating all of an item's relationships using a VirtualRelationshipCollection object. Adding relationship objects to the collection causes the represented relationships to be created in the store when ItemContext.Update is called. Removing relationship objects from the collection causes the represented relationship to be deleted in the store when ItemContext.Update is called. The virtual collection contains the correct set of objects regardless of whether or not a relationship object is added\/removed through the Item.Relationships collection or any other relationship collection on that item.","The following code defines the VirtualRelationshipCollection class:",{"@attributes":{"id":"p-0680","num":"1079"},"tables":{"@attributes":{"id":"TABLE-US-00085","num":"00085"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"public abstract class VirtualRelationshipCollection : ICollection"},{"entry":"{"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ The collection will contain the relationships of the"]},{"entry":[{},"specified type owned by the item"]},{"entry":[{},"\/\/ identified by itemId."]},{"entry":[{},"protected VirtualRelationshipCollection( ItemContext itemContext,"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"119pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"ItemId itemId,"]},{"entry":[{},"Type relationshipType );"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ The enumerator will return all the objects retrieved from"]},{"entry":[{},"the store minus any object that"]},{"entry":[{},"\/\/ with the state Deleted in addition to objects that have the"]},{"entry":[{},"state Inserted."]},{"entry":[{},"public IEnumerator GetEnumerator(\u2009);"]},{"entry":[{},"\/\/ Returns a count of the number of relationship objects that"]},{"entry":[{},"would be returned by the"]},{"entry":[{},"\/\/ enumerator. This count is computed without needing to"]},{"entry":[{},"retrieve all objects from the store."]},{"entry":[{},"public int Count { get; }"]},{"entry":[{},"\/\/ Always returns false."]},{"entry":[{},"public bool ICollection.IsSynchronized(\u2009) { get; }"]},{"entry":[{},"\/\/ Always returns this object."]},{"entry":[{},"public object ICollection.SyncRoot { get; }"]},{"entry":[{},"\/\/ Searches the store for the necessary objects."]},{"entry":[{},"public void Refresh(\u2009);"]},{"entry":[{},"\/\/ Adds the specified relationship to the collection. The"]},{"entry":[{},"object must have the state"]},{"entry":[{},"\/\/ Constructed or Removed. If the state is Constructed, it"]},{"entry":[{},"is changed to Added. If the state"]},{"entry":[{},"\/\/ is Removed, it is changed to Retrieved or Modified as"]},{"entry":[{},"appropriate. The relationship's"]},{"entry":[{},"\/\/ source item id must be the same as the source item id"]},{"entry":[{},"provided when the collection was"]},{"entry":[{},"\/\/ constructed."]},{"entry":[{},"protected void Add( Relationship relationship );"]},{"entry":[{},"\/\/ Removes the specified relationship from the collection."]},{"entry":[{},"The object's state must be"]},{"entry":[{},"\/\/ Added, Retrieved or Modified. If the object's state is"]},{"entry":[{},"Added, it will be set to"]},{"entry":[{},"\/\/ Constructed. If the object's state is Retrieved or"]},{"entry":[{},"Modified, it will be set to Removed."]},{"entry":[{},"\/\/ The relationship's source item id must be the same as the"]},{"entry":[{},"source item id provided when"]},{"entry":[{},"\/\/ the collection was constructed."]},{"entry":[{},"protected void Remove( Relationship relationship );"]},{"entry":[{},"\/\/ The objects that have been removed from the collection."]},{"entry":[{},"public ICollection RemovedRelationships { get; }"]},{"entry":[{},"\/\/ The objects that have been added to the collection."]},{"entry":[{},"public ICollection AddedRelationships { get; }"]},{"entry":[{},"\/\/ The objects that have been retrieved from the store."]},{"entry":[{},"This collection will be empty until"]},{"entry":[{},"\/\/ after the VirtualRelationshipCollection is enumerated"]},{"entry":[{},"or Refresh is called (getting this"]},{"entry":[{},"\/\/ property's value does not cause the collection to be"]},{"entry":[{},"filled)."]},{"entry":[{},"public ICollection StoredRelationships { get; }"]},{"entry":[{},"\/\/ Asynchronous methods."]},{"entry":[{},"public IAsyncResult BeginGetCount( IAsyncCallback callback,"]},{"entry":[{},"object state );"]},{"entry":[{},"public int EndGetCount( IAsyncResult asyncResult );"]},{"entry":[{},"public IAsyncResult BeginRefresh( IAsyncCallback callback,"]},{"entry":[{},"object state );"]},{"entry":[{},"public void EndRefresh( IAsyncResult asyncResult );"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}},"br":{}},"When generating classes for a storage platform schema, a class is generated for each relationship declaration. In addition to a class that represents a relationship itself, a relationship collection class is also generated for each relationship. These classes are used as the type of properties in the relationship's source or target item classes.","This section describes the classes that are generated using a number of \u201cprototype\u201d classes. That is, given a specified relationship declaration, the class that is generated is described. It is important to note the class, type, and end point names used in the prototype classes are place holders for the names specified in the schema for the relationship, and should not be taken literally.","(1) Generated Relationship Types","This section describes the classes that are generated for each relationship type. For example:",{"@attributes":{"id":"p-0685","num":"1084"},"tables":{"@attributes":{"id":"TABLE-US-00086","num":"00086"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<Relationship Name=\u201cRelationshipPrototype\u201d"]},{"entry":[{},"BaseType=\u201cHolding\u201d>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<Source Name=\u201cHead\u201d ItemType=\u201cFoo\u201d\/>"]},{"entry":[{},"<Target Name=\u201cTail\u201d ItemType=\u201cBar\u201d"]},{"entry":[{},"ReferenceType=\u201cItemIDReference\u201d \/>"]},{"entry":[{},"<Property Name=\u201cSomeProperty\u201d"]},{"entry":[{},"Type=\u201cWinFSTypes.String\u201d \/>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/Relationship>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"Given this relationship definition RelationshipPrototype and RelationshipPrototypeCollection classes would be generated. The RelationshipPrototype class represents the relationship itself. The RelationshipPrototypeCollection class provides access to the RelationshipPrototype instances that have a specified item as the source end point.","(2) RelationshipPrototype Class","This is a prototypical relationship class for a holding relationship named \u201cHoldingRelationshipPrototype\u201d where the source end point is named \u201cHead\u201d and specifies the \u201cFoo\u201d item type and the target end point is named \u201cTail\u201d and specifies the \u201cBar\u201d item type. It is defined as follows:",{"@attributes":{"id":"p-0689","num":"1088"},"tables":{"@attributes":{"id":"TABLE-US-00087","num":"00087"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"public class RelationshipPrototype : Relationship"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"public RelationshipPrototype( Bar tailItem );"]},{"entry":[{},"public RelationshipPrototype( Bar tailItem, string name );"]},{"entry":[{},"public RelationshipPrototype( Bar tailItem, string name,"]},{"entry":[{},"bool IsOwned );"]},{"entry":[{},"public RelationshipPrototype( Bar tailItem, bool IsOwned );"]},{"entry":[{},"public RelationshipPrototype( ItemIdReference"]},{"entry":[{},"tailItemReference );"]},{"entry":[{},"\/\/ Get the Head item (calls base.SourceItem)."]},{"entry":[{},"public Foo HeadItem { get; }"]},{"entry":[{},"\/\/ Get the Tail item (calls base.TargetItem)."]},{"entry":[{},"public Bar TailItem { get; }"]},{"entry":[{},"\/\/ Represents additional properties declared in the schema"]},{"entry":[{},"for the relationship. These are"]},{"entry":[{},"\/\/ generated just as for properties in an item or nested"]},{"entry":[{},"element type."]},{"entry":[{},"public string SomeProperty {get; set;}"]},{"entry":[{},"public static ItemSearcher GetSearcher( ItemContext"]},{"entry":[{},"itemContext );"]},{"entry":[{},"public static ItemSearcher GetSearcher( Foo headItem );"]},{"entry":[{},"public static FindResult FindAll( string filter );"]},{"entry":[{},"public static RelationshipPrototype FindOne( string"]},{"entry":[{},"filter );"]},{"entry":[{},"public static RelationshipPrototype FindOnly( string"]},{"entry":[{},"filter );"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"(3) RelationshipPrototypeCollection Class","This is a prototypical class, generated with the RelationshipPrototype class, that maintains a collection of RelationshipPrototype relationship instances owned by a specified item. It is defined as follows:",{"@attributes":{"id":"p-0692","num":"1091"},"tables":{"@attributes":{"id":"TABLE-US-00088","num":"00088"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"public class RelationshipPrototypeCollection :"]},{"entry":[{},"VirtualRelationshipCollection"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"public RelationshipPrototypeCollection( ItemContext"]},{"entry":[{},"itemContext,"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"ItemId headItemId );"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"public void Add( RelationshipPrototype relationship );"]},{"entry":[{},"public RelationshipPrototype Add( Bar bar );"]},{"entry":[{},"public RelationshipPrototype Add( Bar bar, string nam );"]},{"entry":[{},"public RelationshipPrototype Add( Bar bar, string name,"]},{"entry":[{},"b\u2003l IsOwned );"]},{"entry":[{},"public RelationshipPrototype Add( Bar bar, bo l IsOwned );"]},{"entry":[{},"public void Remove( RelationshipPrototype relationship );"]},{"entry":[{},"public void Remove( Bar bar );"]},{"entry":[{},"public void Remove( ItemId barItemId );"]},{"entry":[{},"public void Remove( RelationshipId relationshipId );"]},{"entry":[{},"public void Remove( string name );"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}},"br":{}},"The Item class contains a Relationships property that provide access to the relationships in which that item is the source of the relationship. The Relationships property has the type RelationshipCollection.","(1) Item Class","The following code shows the relationship context properties of the Item class:.",{"@attributes":{"id":"p-0696","num":"1095"},"tables":{"@attributes":{"id":"TABLE-US-00089","num":"00089"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"public abstract class Item : StoreObject"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"..."]},{"entry":[{},"\/\/ Collection of relationships where this item is the source."]},{"entry":[{},"public RelationshipCollection Relationships {get;}"]},{"entry":[{},"..."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"(2) RelationshipCollection Class","This class provides access to the relationship instances where a given item is the source of the relationship. It is defined as follows:",{"@attributes":{"id":"p-0699","num":"1098"},"tables":{"@attributes":{"id":"TABLE-US-00090","num":"00090"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"public class RelationshipCollection : VirtualRelationshipCollection"},{"entry":"{"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"public RelationshipCollection( ItemContext itemContext,"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"ItemId headItemId );"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"public void Add( Relationship relationship );"]},{"entry":[{},"public Relationship Add( Bar bar );"]},{"entry":[{},"public Relationship Add( Bar bar, string name );"]},{"entry":[{},"public Relationship Add( Bar bar, string name, bool IsOwned );"]},{"entry":[{},"public Relationship Add( Bar bar, bool IsOwned );"]},{"entry":[{},"public void Remove( Relationship relationship );"]},{"entry":[{},"public void Remove( Bar bar );"]},{"entry":[{},"public void Remove( ItemId barItemId );"]},{"entry":[{},"public void Remove( RelationshipId relationshipId );"]},{"entry":[{},"public void Remove( string name );"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}},"br":{}},"It is possible to specify the traversal of a join between relationships and related items in a search expression.","(1) Traversing From Items to Relationships","When the current context of a search expression is a set of items, a join between the items and relationship instances where the item is the source can be done using the Item.Relationships property. Joining to relationships of a specific type can be specified using the search expression Cast operator.","Strongly typed relationship collections (e.g. Folder.MemberRelationships) can also be used in a search expression. The cast to the relationship type is implicit.","Once the set of relationships has been established, the properties of that relationship are available for use in predicates or as the target of a projection. When used to specify the target of a projection, the set of relationships would be returned. For example, the following statement would find all persons related to an organization where the StartDate property of the relationships had a value greater then or equal to \u20181\/1\/2000\u2019.",{"@attributes":{"id":"p-0705","num":"1104"},"tables":{"@attributes":{"id":"TABLE-US-00091","num":"00091"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"FindResult result = Person.FindAll( context,"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u201cRelationships.Cast(Contact.EmployeeOfOrganization).StartDate >"]},{"entry":[{},"\u20181\/1\/2000\u2019\u201d );"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}},"br":{}},{"@attributes":{"id":"p-0706","num":"1105"},"tables":{"@attributes":{"id":"TABLE-US-00092","num":"00092"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"FindResult result = Person.FindAll( context,"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u201cEmployerRelationships.StartDate > \u20181\/1\/2000\u2019\u201d );"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"(2) Traversing From Relationships to Items","When the current context of the search expression is a set of relationships, a join from a relationship to either end point of the relationship can be traversed by specifying the name of the end point. Once the set of related items has been established, the properties of those items are available for use in predicates or as the target of a projection. When used to specify the target of a projection, the set of items would be returned. For example, the following statement would find all EmployeeOfOrganization relationships (regardless of organization) where the employee's last name is name \u201cSmith\u201d:",{"@attributes":{"id":"p-0709","num":"1108"},"tables":{"@attributes":{"id":"TABLE-US-00093","num":"00093"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"FindResult result = EmployeeOfOrganization.FindAll( context,"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u201cEmployee.PersonalNames[SurName=\u2018Smith\u2019]\u201d );"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"The search expression Cast operator can be used to filter the type of the end point item. For example, to find all the MemberOfFolder relationship instances where the member is a Person item with the surname \u201cSmith\u201d:",{"@attributes":{"id":"p-0711","num":"1110"},"tables":{"@attributes":{"id":"TABLE-US-00094","num":"00094"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"FindResult result = MemberOfFolder.FindAll( context,"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u201cMember.Cast(Contact.Person).PersonalNames[Surname=\u2018Smith\u2019]\u201d );"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"(3) Combining Relationship Traversal","The previous two patterns, traversing from items to relationships and from relationships to items, can be combined to achieve arbitrarily complex traversals. For example, to find all organizations with an employee that has the Surname \u201cSmith\u201d:",{"@attributes":{"id":"p-0714","num":"1113"},"tables":{"@attributes":{"id":"TABLE-US-00095","num":"00095"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"FindResult result = Organization.FindAll( context,"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u201cEmployeeRelationships.\u201d +"]},{"entry":[{},"\u201cEmployee.\u201d +"]},{"entry":[{},"\u201cPersonalNames[SurName = \u2018Smith\u2019]\u201d );"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"The example below would find all Person items representing people who live in a household that is in the \u201cNew York\u201d area (TODO: this is no longer supported . . . what is the alternative).",{"@attributes":{"id":"p-0716","num":"1115"},"tables":{"@attributes":{"id":"TABLE-US-00096","num":"00096"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"FindResult result = Person.FindAll( context,"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u201cRelationships.Cast(Contact.MemberOfHousehold).\u201d +"]},{"entry":[{},"\u201cHousehold.\u201d +"]},{"entry":[{},"\u201cRelationships.Cast(Contact.LocationOfHousehold).\u201d +"]},{"entry":[{},"\u201cMetropolitonRegion = \u2018New York\u2019\u201d );"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}},"br":{}},"The following are examples of how the relationship support in the storage platform API can be used to manipulate relationships. For the examples below, assume the following declarations:",{"@attributes":{"id":"p-0718","num":"1117"},"tables":{"@attributes":{"id":"TABLE-US-00097","num":"00097"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"ItemContext ic = . . .;"]},{"entry":[{},"ItemId fid = . . .; \/\/ a folder item's id"]},{"entry":[{},"Folder folder = Folder.FindById( ic, fid );"]},{"entry":[{},"ItemId sid = . . .; \/\/ a source item's id."]},{"entry":[{},"Item source = Item.FindById( ic, sid );"]},{"entry":[{},"ItemId tid = . . .; \/\/ an target item's id."]},{"entry":[{},"Item target = Item.FindById( ic, tid );"]},{"entry":[{},"ItemSearcher searcher = null;"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"(1) Searching for Relationships","It is possible to search for source or target relationships. Filters can be used to select relationships of a specified type and that have given property values. Filters can also be used to select relationships based related item type or property values. For example, the following searches can be performed:",{"@attributes":{"id":"p-0721","num":"1120"},"tables":{"@attributes":{"id":"TABLE-US-00098","num":"00098"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"266pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"All relationships where a given item is the source"},{"entry":"searcher = Relationship.GetSearcher( folder );"},{"entry":"foreach( Relationship relationship in searcher.FindAll(\u2009) ) . . .;"},{"entry":"All relationships where a given item is the source that have a name that matches \u201cA%\u201d"},{"entry":"searcher = Relationship.GetSearcher( folder );"},{"entry":"searcher.Filters.Add( \u201cName like \u2018A%\u2019\u201d );"},{"entry":"foreach( Relationship relationship in searcher.FindAll(\u2009) ) . . .;"},{"entry":"All FolderMember relationships where a given item is the source"},{"entry":"searcher = FolderMember.GetSearcher( folder );"},{"entry":"foreach( FolderMember folderMember in searcher.FindAll(\u2009) ) . . .;"},{"entry":"All FolderMember relationships where a given item is the source and a name like \u2018A%\u2019"},{"entry":"searcher = FolderMember.GetSearcher( folder );"},{"entry":"searcher.Filters.Add( \u201cName like \u2018A%\u2019\u201d );"},{"entry":"foreach( FolderMember folderMember in searcher.FindAll(\u2009) ) . . .;"},{"entry":"All FolderMember relationships where the target item is a Person"},{"entry":"searcher = FolderMember.GetSearcher( folder );"},{"entry":"searcher.Filters.Add( \u201cMemberItem.Cast(Person)\u201d );"},{"entry":"foreach( FolderMember folderMember in searcher.FindAll(\u2009) ) . . .;"},{"entry":"All FolderMember relationships where the target item is a Person with the Surname \u201cSmith\u201d"},{"entry":"searcher = FolderMember.GetSearcher( folder );"},{"entry":"searcher.Filters.Add( \u201cMemberItem.Cast(Person).PersonalNames.Surname=\u2018Smith\u2019\u201d );"},{"entry":"foreach( FolderMember folderMember in searcher.FindAll(\u2009) ) . . .;"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"In addition to the GetSearcher API shown above, each relationship class supports static FindAll, FindOne, and FindOnly API. In addition, a relationship type can be specified when calling ItemContext.GetSearcher, ItemContext.FindAll, ItemContext.FindOne, or ItemContext.FindOnly.","(2) Navigating from a Relationship to the Source and Target Items","Once a relationship object has been retrieved through a search, it is possible to \u201cnavigate\u201d to the target or source item. The base relationship class provides SourceItem and TargetItem properties that return an Item object. The generated relationship class provides the equivalent strongly typed and named properties (e.g. FolderMember.FolderItem and FolderMember.MemberItem). For example:",{"@attributes":{"id":"p-0725","num":"1124"},"tables":{"@attributes":{"id":"TABLE-US-00099","num":"00099"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"Navigate to source and target item for relationship with the name \u2033Foo\u2033"},{"entry":"searcher = Relationship.GetSearcher(\u2009);"},{"entry":"searcher.Filters.Add( \u2033Name=\u2018Foo\u2019\u2033 );"},{"entry":"foreach( Relationship relationship in searcher.FindAll(\u2009) )"},{"entry":"{"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Item source = relationship.SourceItem;"]},{"entry":[{},"Item target = relationship.TargetItem;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":"Navigate to the target item"},{"entry":"searcher = FolderMember.GetSearcher( folder );"},{"entry":"searcher.Filters.Add( \u2033Name like \u2018A%\u2019\u2033 );"},{"entry":"foreach( FolderMember folderMember in searcher.FindAll(\u2009) )"},{"entry":"{"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Item member = folderMember.TargetItem;"]},{"entry":[{},". . ."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"Navigating to a target item works even if the target item is not in the domain where the relationship was found. In such cases, the storage platform API opens a connection to the target domain as needed. Applications can determine if a connection would be required before retrieving the target item.",{"@attributes":{"id":"p-0727","num":"1126"},"tables":{"@attributes":{"id":"TABLE-US-00100","num":"00100"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Check for target item in an unconnected domain"]},{"entry":[{},"searcher = Relationship.GetSearcher( source );"]},{"entry":[{},"foreach( Relationship relationship in searcher.FindAll(\u2009) )"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"if( reltionship.IsTargetDomainConnected )"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Item member = relationship.TargetItem;"]},{"entry":[{},". . ."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"(3) Navigating from Source Items to Relationships","Given an item object, it is possible to navigate to the relationships for which that item is the source without executing an explicit search. This is done using the Item.Relationships collection property or a strongly typed collection property such as Folder.MemberRelationships. From a relationship, it is possible to navigate to the target item. Such navigation works even if the target item is not in the item domain associated with the source item's ItemContext, including when the target item is not in the same store as the target item. For example:",{"@attributes":{"id":"p-0730","num":"1129"},"tables":{"@attributes":{"id":"TABLE-US-00101","num":"00101"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"Navigate from a Source Item to Relationship to Target Items"},{"entry":"Console.WriteLine( \u201cItem {0} is the source of the following"},{"entry":"relationships:\u201d, source.ItemId );"},{"entry":"foreach( Relationship relationship in source.Relationships )"},{"entry":"{"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Item target = relationship.TargetItem;"]},{"entry":[{},"Console.WriteLine( \u201c {0} ==> {1}\u201d,"]},{"entry":[{},"relationship.RelationshipId, target.ItemId );"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":"Navigate from a Folder Item to Foldermember Relationships to Target"},{"entry":"Items"},{"entry":"Console.WriteLine( \u201cItem {0} is the source of the following"},{"entry":"relationships:\u201d, folder.ItemId );"},{"entry":"foreach( FolderMember folderMember in folder.MemberRelationships )"},{"entry":"{"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Item target = folderMember.GetMemberItem(\u2009);"]},{"entry":[{},"Console.WriteLine( \u201c {0} ==> {1}\u201d,"]},{"entry":[{},"folderMember.RelationshipId, target.ItemId );"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"An item may have many relationships, so applications should use caution when enumerating a relationship collection. In general, a search should be used to identify particular relationships of interest instead of enumerating the entire collection. Still, having a collection based programming model for relationships is valuable enough, and items with many relationships rare enough, that the risk of abuse by the developer is justified. Applications can check the number of relationships in the collection and use a different programming model if needed. For example:",{"@attributes":{"id":"p-0732","num":"1131"},"tables":{"@attributes":{"id":"TABLE-US-00102","num":"00102"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Check the size of a relationship collection"]},{"entry":[{},"if( folder.MemberRelationships.Count > 1000 )"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Console.WriteLine( \u201cToo many relationships!\u201d );"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"else"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},". . ."]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"The relationship collections described above are \u201cvirtual\u201d in the sense that they are not actually populated with objects that represent each relationship unless the application attempts to enumerate the collection. If the collection is enumerated, the results reflect what is in the store, plus what has been added by the application but not yet saved, but not any relationships that have been removed by the application but not saved.","(4) Creating Relationships (and Items)","New relationships are created by creating a relationship object, adding it to a relationship collection in the source item, and updating the ItemContext. To create a new item, a holding or embedding relationship must be created. For example:",{"@attributes":{"id":"p-0736","num":"1135"},"tables":{"@attributes":{"id":"TABLE-US-00103","num":"00103"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"Add a new item to an existing folder"},{"entry":"Bar bar = new Bar(\u2009);"},{"entry":"folder.Relationships.Add( new FolderMember( bar, \u201cname\u201d ) );"},{"entry":"ic.Update(\u2009);"},{"entry":"\/\/ Or"},{"entry":"Bar bar = new Bar(\u2009);"},{"entry":"folder.MemberRelationships.Add( new FolderMember( bar, \u201cname\u201d ) );"},{"entry":"ic.Update(\u2009);"},{"entry":"\/\/ Or"},{"entry":"Bar bar = new Bar(\u2009);"},{"entry":"folder.MemberRelationships.Add( bar, name );"},{"entry":"ic.Update(\u2009);"},{"entry":"Add an existing item to an existing folder"},{"entry":"folder.MemberRelationships.Add( target, \u201cname\u201d );"},{"entry":"ic.Update(\u2009);"},{"entry":"Add an existing item to a new folder"},{"entry":"Folder existingFolder = ic.FindItemById( fid ) as Folder;"},{"entry":"Folder newFolder = new Folder(\u2009);"},{"entry":"existingFolder.MemberRelationships.Add( newFolder, \u201ca name\u201d );"},{"entry":"newFolder.MemberRelationships.Add( target, \u201ca name\u201d );"},{"entry":"ic.Update(\u2009);"},{"entry":"Add a new item to a new folder"},{"entry":"Folder existingFolder = ic.FindItemById( fid ) as Folder;"},{"entry":"Folder newFolder = new Folder(\u2009);"},{"entry":"existingFolder.MemberRelationships.Add( newFolder, \u201ca name\u201d );"},{"entry":"Bar bar = new Bar(\u2009);"},{"entry":"newFolder.MemberRelationships.Add( bar, \u201ca name\u201d );"},{"entry":"ic.Update(\u2009);"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"(5) Deleting Relationships (and Items)",{"@attributes":{"id":"p-0738","num":"1137"},"tables":{"@attributes":{"id":"TABLE-US-00104","num":"00104"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Delete a holding relationship"]},{"entry":[{},"\/\/ If the source item and relationship ids are known. . ."]},{"entry":[{},"RelationshipId rid = . . .;"]},{"entry":[{},"Relationship r = ic.FindRelationshipById( fid, rid );"]},{"entry":[{},"r.MarkForDelete;"]},{"entry":[{},"ic.Update(\u2009);"]},{"entry":[{},"\/\/ Otherwise. . ."]},{"entry":[{},"folder.MemberRelationships.Remove( target );"]},{"entry":[{},"ic.Update(\u2009);"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"8. \u201cExtending\u201d the Storage Platform API","As noted above, every storage platform schema results in a set of classes. These classes have standard methods such as Find* and also have properties for getting and setting field values. These classes and associated methods form the foundation of the storage platform API.","a) Domain Behaviors","In addition to these standard methods, every schema has a set of domain specific methods for it. We call these domain behaviors. For example, some of the domain behaviors in the Contacts schema are:\n\n","It is important to note that while we make a distinction between \u201cstandard\u201d behaviors (Find*, etc) and domain behaviors, they simply appear as methods to the programmer. The distinction between these methods lies in the fact that standard behaviors are generated automatically from the schema files by the storage platform API design time tools while domain behaviors are hard-coded.","By their very nature, these domain behaviors should be hand-crafted. This leads to a practical problem: the initial version of C# requires that the entire implementation of a class be within a single file. Thus, this forces the auto-generated class files to have to be edited to add domain behaviors. By itself, this can be a problem.","A feature called partial classes has been introduced in C# for problems such as these. Basically, a partial class allows the class implementation to span multiple files. A partial class is the same as a regular class except that its declaration is preceded by the keyword partial: partial public class Person: DeriveditemBase",{"@attributes":{"id":"p-0745","num":"1150"},"tables":{"@attributes":{"id":"TABLE-US-00105","num":"00105"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"partial public class Person"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"public EmailAddress PrimaryEmailAddress"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"get { \/*implementation*\/ }"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}},"br":{}},"Data classes with domain behaviors form a foundation that application developers build on. However, it is neither possible nor desirable for data classes to expose every conceivable behavior related to that data. The storage platform allows a developer to build on the base functionality offered by the storage platform API. The basic pattern here is to write a class whose methods take one or more of the the storage platform data classes as parameters. For example, the value add classes for sending email using Microsoft Outlook or using Microsoft Windows messenger can be as below:",{"@attributes":{"id":"p-0747","num":"1152"},"tables":{"@attributes":{"id":"TABLE-US-00106","num":"00106"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"MailMessage m = MailMessage.FindOne(. . .);"},{"entry":"OutlookEMailServices.SendMessage(m);"},{"entry":"Person p = Person.FindOne(. . .);"},{"entry":"WindowsMessagerServices m = new WindowsMessagerServices(p);"},{"entry":"m.MessageReceived += new MessageReceivedHandler( f );"},{"entry":"m.SendMessage(\u201cHello\u201d);"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"These value-add classes can be registered with the storage platform. The registration data is associated with the schema metadata the storage platform maintains for every installed storage platform type. This metadata is stored as storage platform items and can be queried.","Registration of value-add classes is a powerful feature; for example, it allows the following scenario: Right click on a Person object in the Shell explorer and the set of actions allowed could be derived from the value-add classes registered for Person.","c) Value-add Behaviors as Service Providers","In the present embodiment, the storage platform API provides a mechanism whereby value-add classes can be registered as \u201cservices\u201d for a given type. This enables an application to set and get service providers (=value add classes) of a given type. Value-add classes wishing to utilize this mechanism should implement a well known interface; for example:","interface IChatServices",{"@attributes":{"id":"p-0751","num":"1156"},"tables":{"@attributes":{"id":"TABLE-US-00107","num":"00107"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"interface IChatServices"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"void SendMessage(string msg);"]},{"entry":[{},"event MessageReceivedHandler MessageReceived;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"class WindowsMessengerServices : IChatServices"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},". . ."]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"class YahooMessengerServices : IChatServices"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},". . ."]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"All the storage platform API data classes implement the ICachedServiceProvider interface. This interface extends the System.IServiceProvider interface as follows:",{"@attributes":{"id":"p-0753","num":"1158"},"tables":{"@attributes":{"id":"TABLE-US-00108","num":"00108"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"interface ICachedServiceProvider : System.IServiceProvider"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"void SetService(System.Type type, Object provider);"]},{"entry":[{},"void RemoteService(System.Type type);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}},"br":{}},"To support this interface, the storage platform data class maintains a hashtable of service providers keyed by type. When a service provider is requested, the implementation first looks in the hashtable to see if a service provider of the specified type has been set. If not, the registered service provider infrastructure is used to identify a service provider of the specified type. An instance of this provider is then created, added to the hashtable, and returned. Note that it is also possible for a shared method on the data class to request a service provider and forward an operation to that provider. For example, this could be used to provide a Send method on the mail message class that uses the e-mail system specified by the user.","9. Design Time Framework","This section describes how a storage platform Schema gets turned into storage platform API classes on the client and UDT classes on the server, in accordance with the present embodiment of the invention. Thee diagram of  shows the components involved.","With reference to , the types in the schema are contained in an XML file (box ). This file also contains field level and item level constraints associated with the schema. The storage platform Class generator (xfscs.exe\u2014box ) takes this file and generates the partial classes for the store UDTs (box ) and partial classes for the client classes (box  ). For each schema domain, there exist additional methods\u2014which we call domain behaviors. There are domain behaviors that make sense on the store (box ), on the client (box ), and in both places (box ). The code in boxes , , and  are hand written (not\u2014auto generated). The partial classes in boxes , , and  together form the complete class implementation for the storage platform API domain classes. Boxes , , and  are compiled (box  ) to form the storage platform API classes\u2014box  (actually, the storage platform API is the result of compiling boxes , , and  that result from all initial schema domains). In addition to the domain classes, there also exist additional classes which implement value-add behavior. These classes make use of one or more classes in one or more schema domains. This is represented by box . The partial classes in box , , and  together form the complete class implementation for server UDT classes. Boxes , , and  are compiled (box ) to form the server side UDT assembly\u2014box  (actually, the server side UDT assembly is the result of compiler-plus-ing boxes , , and  that result from all initial schema domains). The DDL Command Generator module (box ) takes the UDT assembly (box ) and the Schema file (box ), and installs them on the data store. This process involves, among other things, the generation of tables and views for the types in each schema.","10. Query Formalism","When reduced to the basics, the application's pattern when using the storage platform API is: Open an ItemContext; use Find with a filter criterion to retrieve the desired objects; operate on the objects; and send changes back to the store. This section is concerned with the syntax of what goes into the filter string.","The filter string provided when finding the storage platform data objects describes the conditions that the properties of the objects must meet in order to be returned. The syntax used by the storage platform API supports type casts and relationship traversal.","a) Filter Basics","A filter string is either empty, indicating that all objects of the specified type are to be returned, or a boolean expression that each returned object must satisfy. The expression references the object's properties. The storage platform API runtime knows how these property names map to the storage platform type field names and, ultimately, to the SQL views maintained by the the storage platform store.","Consider the following examples:",{"@attributes":{"id":"p-0763","num":"1168"},"tables":{"@attributes":{"id":"TABLE-US-00109","num":"00109"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ Find all people"]},{"entry":[{},"FindResult res1 = Person.FindAll(ctx)"]},{"entry":[{},"\/\/ Find all people that have a Gender property value equal"]},{"entry":[{},"\/\/ to \u201cMale\u201d"]},{"entry":[{},"FindResult res2 = Person.FindAll(ctx, \u201cGender=\u2018Male\u2019\u201d)"]},{"entry":[{},"\/\/ Find all people that have a Gender property value equal"]},{"entry":[{},"\/\/ to \u201cMale\u201d and that were born in the last millennium."]},{"entry":[{},"FindResult res3 = Person.FindAll("]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"ctx,"]},{"entry":[{},"\u201cGender=\u2018Male\u2019 And Birthdate < \u20181\/1\/2001\u2019\u201d)"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"The properties of nested objects can also be used in the filter. For example:",{"@attributes":{"id":"p-0765","num":"1170"},"tables":{"@attributes":{"id":"TABLE-US-00110","num":"00110"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ Find all people that were modified in the last 24 hours"]},{"entry":[{},"FindResult res1 = Person.FindAll("]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"ctx,"]},{"entry":[{},"String.Format(\u2033Item.Modified >"]},{"entry":[{},"\u2018{0}\u2019\u201d,DateTime.Now.Subtract(new"]},{"entry":[{},"TimeSpan(24,0,0))));"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"For collections, it is possible to filter members using a condition in square brackets. For example:",{"@attributes":{"id":"p-0767","num":"1172"},"tables":{"@attributes":{"id":"TABLE-US-00111","num":"00111"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\/\/ Find all people with the first name \u201cJohn\u201d and the last name"},{"entry":"\/\/ \u201cSmith\u201d"},{"entry":"FindResult res1 = Person.FindAll("}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"ctx,"]},{"entry":[{},"\u201cPersonalNames[GivenName=\u2018John\u2019 And Surname=\u2018Smith\u2019]\u201d)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\/\/ Find all people with a real time address from provider \u2018x\u2019"},{"entry":"\/\/ and with an online status category of \u2018y\u2019"},{"entry":"FindResult res2 = Person.FindAll("}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"ctx,"]},{"entry":[{},"\u201cPersonalRealtimeAddress[ProviderURI=\u2018x\u2019].BasicPresence.\u201d +"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u201cOnlineStatus.Category=\u2018y\u2019\u201d)"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"The following example lists all people born since Dec. 31, 1999:",{"@attributes":{"id":"p-0769","num":"1174"},"tables":{"@attributes":{"id":"TABLE-US-00112","num":"00112"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"ItemContext ctx = ItemContext.Open(\u201cWork Contacts\u201d);"]},{"entry":[{},"FindResult results ="]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Person.FindAll( ctx, \u201cBirthdate > \u201812\/31\/1999\u2019\u201d );"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"foreach( Person person in results )"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Console.WriteLine(person.DisplayName);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"ctx.Close(\u2009);"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"Line  creates a new ItemContext object to access the \u201cWork Contacts\u201d on the storage platform share on the local computer. Lines  and  get a collection of Person objects where the Birthdate property specifies a date more recent then Dec. 31, 1999, as specified by the expression \u201cBirthdate>\u2018Dec. 31, 1999\u201d\u2019. The execution of this FindAll operation is illustrated in .","b) Type Casts","It is often the case that the type of a value stored in a property is derived from the properties declared type. For example, the PersonalEAddresses property in Person contains a collection of types derived from EAddress such as EMailAddress and TelephoneNumber. In order to filter based on telephone area code, it is necessary to cast from the EAddress type to the TelephoneNumber type:",{"@attributes":{"id":"p-0772","num":"1177"},"tables":{"@attributes":{"id":"TABLE-US-00113","num":"00113"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\/\/ Find all people with a phone number in the 425 area code"},{"entry":"FindResult res1 = Person.FindAll("}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"ctx,"]},{"entry":[{},"\u201cPersonalEAddresses.\u201d +"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u201cCast(System.Storage.Contact.TelephoneNumber)).\u201d +"]},{"entry":[{},"\u201cAreaCode=\u2018425\u2019\u201d);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\/\/ Alternatively, you could pass the type name as follows:"},{"entry":"FindResult res1 = Person.FindAll("}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"ctx,"]},{"entry":[{},"String.Format(\u201cPersonalEAddresses.Cast({0})).AreaCode=\u2018425\u2019\u201d,"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"typeof(TelephoneNumber).FullName ))"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}},"br":{}},"Below is a description of the filter syntax supported by the storage platform API, in accordance with one embodiment.",{"@attributes":{"id":"p-0774","num":"1179"},"tables":{"@attributes":{"id":"TABLE-US-00114","num":"00114"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"Filter ::= EmptyFilter | Condition"},{"entry":"EmptyFilter ::="},{"entry":"Condition ::= SimpleCondition | CompoundCondition |"},{"entry":"ParenthesizedCondition"},{"entry":"SimpleCondition ::= ExistanceCheck | Comparison"},{"entry":"ExistanceCheck ::= PropertyReference"},{"entry":"Comparison ::= PropertyReference ComparisonOp Constant"},{"entry":"CompoundCondition ::= SimpleCondition BooleanOp Condition"},{"entry":"ParenthesizedCondition ::= \u2018(\u2018 Condition \u2019)\u2019"},{"entry":"ComparisonOp ::= \u2018!=\u2019 | \u2018==\u2019 | \u2018=\u2019 | \u2018<\u2019 | \u2018>\u2019 | \u2018>=\u2019 | \u2018<=\u2019"},{"entry":"BooleanOp ::= \u2018And\u2019 | \u2018&&\u2019 | \u2018Or\u2019 | \u2018||\u2019"},{"entry":"Constant ::= StringConstant | NumericConstatant"},{"entry":"StringConstant ::= \u2018\u2018\u2018 (any Unicode character)* \u2019\u2019\u2019"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Note: embedded \u2018 characters are escaped by duplication"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"NumericConstant ::= 0-9*"},{"entry":"PropertyReference ::= SimplePropertyName | CompoundPropertyName"},{"entry":"SimplePropertyName ::= (all Unicode characters except \u2018.\u2019 and space)*"},{"entry":"Filter?"},{"entry":"Filter ::= \u2018[\u2018 Condition \u2019]\u2019"},{"entry":"CompoundPropertyName ::="}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"(Typecast | RelationshipTraversal | SimplePropertyName) \u2018.\u2019"]},{"entry":[{},"PropertyReference"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"TypeCast ::= \u2018Cast(\u2018 TypeName \u2019)\u2019"},{"entry":"RelationshipTraversal ::= TraversalToSource | TraversalToTarget"},{"entry":"TraversalToSource ::= \u2018Source(\u2018 FullRelationshipName \u2019)\u2019"},{"entry":"TraversalToTarget ::= \u2018Target(\u2018 FullRelationshipName \u2019)\u2019"},{"entry":"TypeName ::= a fully qualified CLR type name"},{"entry":"FullRelationshipName ::= SchemaName \u2018.\u2019 RelationshipName"},{"entry":"SchemaName ::= the storage platformName"},{"entry":"RelationshipName ::= the storage platformName"},{"entry":"the storage platformName ::= as defined in [SchemaDef]"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"11. Remoting","a) Local\/Remote Transparency in the API","Data access in the storage platform is targeted to the local storage platform instance. The local instance serves as a router if the query (or part thereof) refers to remote data. The API layer thus provides local\/remote transparency: there is no structural difference in the API between local and remote data access. It is purely a function of the requested scope.","The storage platform data store also implements distributed queries; thus, it is possible to connect to a local storage platform instance and perform a query which includes items from different volumes, some of which are on the local store and others on the remote store. The store unions the results and presents it to the application. From the point of view of the storage platform API (and hence the application developer) any remote access is completely seamless and transparent.","The storage platform API allows an application to determine if a given ItemContext object (as returned by the ItemContext.Open method) represents a local or remote connection using the IsRemote property\u2014this is a property on the ItemContext object. Among other things, the application may wish to provide visual feedback to help set user expectations for performance, reliability, etc.","b) Storage Platform Implementation of Remoting","The storage platform data stores talk to each other using a special OLEDB provider which runs over HFTP (the default OLEDB provider uses TDS). In one embodiment, a distributed query goes through the default OPENROWSET functionality of the relational database engine. A special user defined function (UDF): DoRemoteQuery(server, queryText) is provided to do actual remoting.","c) Accessing Non-Storage Platform Stores","In one embodiment of the storage platform of the present invention, there is no generic provider architecture that allows any store to participate in storage platform data access. However, a limited provider architecture for the specific case of Microsoft Exchange and Microsoft Active Directory (AD) is provided. This implies that developers can use the storage platform API and access data in AD and Exchange just as they would in the storage platform, but that the data they can access is limited to the storage platform schematized types. Thus, address book (=collection of the storage platform Person types) is supported in AD, and mail, calendar and contacts are supported for Exchange.","d) Relationship to DFS","The storage platform property promoter does not promote past mount points. Even though the namespace is rich enough to access through mount points, queries do not pass through them. The storage platform volumes can appear as leaf nodes in a DFS tree.","e) Relationship to GXA\/Indigo","A developer can use the storage platform API to expose a \u201cGXA head\u201d on top of the data store. Conceptually, this is no different from creating any other web service. The storage platform API does not talk to a storage platform data store using GXA. As mentioned above, the API talks to the local store using TDS; any remoting is handled by the local store using the synchronization service.","12. Constraints","The storage platform data model allows value constraints on types. These constraints are evaluated on the store automatically and the process is transparent to the user. Note that constraints are checked at the server. Having noted this, sometimes, it is desirable to give the developer the flexibility to verify that the input data satisfies the constraints without incurring the overhead of a round trip to the server. This is especially useful in interactive applications where the end user enters the data which is used to populate an object. The storage platform API provides this facility.","Recall that a storage platform Schema is specified in an XML file, which is used by the storage platform to generate the appropriate database objects representing the schema. It is also used by the design time framework of the storage platform API to auto generate classes.","Here's a partial listing of the XML file used to generate the Contacts schema:",{"@attributes":{"id":"p-0787","num":"1192"},"tables":{"@attributes":{"id":"TABLE-US-00115","num":"00115"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<Schema Name=\u201cContacts\u201d MajorVersion=\u201c1\u201d"},{"entry":"MinorVersion=\u201c8\u201d>"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<ReferencedSchema Name=\u201cBase\u201d MajorVersion=\u201c1\u201d \/>"]},{"entry":[{},"<Type Name=\u201cPerson\u201d MajorVersion=\u201c1\u201d MinorVersion=\u201c0\u201d"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"ExtendsType=\u201cPrincipal\u201d ExtendsVersion=\u201c1\u201d>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<Field Name=\u201cBirthdate\u201d Type=\u201cthe"]},{"entry":[{},"storage platformTypes.datetime\u201d"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Nullable=\u201ctrue\u201d MultiValued=\u201cfalse\u201d \/>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<Field Name=\u201cGender\u201d Type=\u201cthe storage"]},{"entry":[{},"platformTypes.nvarchar(16)\u201d"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Nullable=\u201ctrue\u201d MultiValued=\u201cfalse\u201d \/>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<Field Name=\u201cPersonalNames\u201d Type=\u201cFullName\u201d"]},{"entry":[{},"TypeMajorVersion=\u201c1\u201d"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Nullable=\u201ctrue\u201d MultiValued=\u201ctrue\u201d \/>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<Field Name=\u201cPersonalEAddresses\u201d Type=\u201cEAddress\u201d"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"TypeMajorVersion=\u201c1\u201d Nullable=\u201ctrue\u201d"]},{"entry":[{},"MultiValued=\u201ctrue\u201d \/>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<Field Name=\u201cPersonalPostalAddresses\u201d Type="]},{"entry":[{},"\u201cPostalAddress\u201d"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"TypeMajorVersion=\u201c1\u201d Nullable=\u201ctrue\u201d"]},{"entry":[{},"MultiValued=\u201ctrue\u201d \/>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<Check>expression<\/Check>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/Type>"]},{"entry":[{},". . ."]},{"entry":[{},". . ."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<\/Schema>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"The Check tags in the XML above specify the constraints on the Person type. There can be more than one check tag. The above constraint is generally checked in the store. To specify that the constraint can also be checked explicitly by the application, the above XML is modified like so:",{"@attributes":{"id":"p-0789","num":"1194"},"tables":{"@attributes":{"id":"TABLE-US-00116","num":"00116"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"<Schema Name=\u201cContacts\u201d MajorVersion=\u201c1\u201d MinorVersion=\u201c8\u201d>"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<ReferencedSchema Name=\u201cBase\u201d MajorVersion=\u201c1\u201d \/>"]},{"entry":[{},"<Type Name=\u201cPerson\u201d . . .>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<Field Name=\u201cBirthdate\u201d Type=\u201cthe"]},{"entry":[{},"storage platformTypes.datetime\u201d"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Nullable=\u201ctrue\u201d Multivalued=\u201cfalse\u201d \/>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},". . ."]},{"entry":[{},"<Check InApplication=\u201ctrue\u201d>expression<\/Check>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/Type>"]},{"entry":[{},". . ."]},{"entry":[{},". . ."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<\/Schema>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}},"br":{}},{"@attributes":{"id":"p-0790","num":"1195"},"tables":{"@attributes":{"id":"TABLE-US-00117","num":"00117"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"ItemContext ctx = ItemContext.Open(\u2009);"},{"entry":"\/\/ Create a contact in the user's My Contacts folder."},{"entry":"Folder f = UserDataFolder.FindMyPersonalContactsFolder( ctx );"},{"entry":"Person p = new Person( f );"},{"entry":"\/\/ Set the person's birthdate."},{"entry":"p.Birthdate = new DateTime( 1959, 6, 9 );"},{"entry":"\/\/ Add a name categorized as a personal name"},{"entry":"FullName name = new FullName( FullName.Category.PrimaryName );"},{"entry":"name.GivenName = \u201cJoe\u201d;"},{"entry":"name.Surname = \u201cSmith\u201d;"},{"entry":"p.PersonalNames.Add( name );"},{"entry":"\/\/validate the Person object"},{"entry":"if (p.Validate(\u2009) == false)"},{"entry":"{"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\/\/ data does not represent a valid person"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":"\/\/ save changes"},{"entry":"p.Update(\u2009);"},{"entry":"ctx.Close(\u2009);"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"There exist multiple access paths to the the storage platform store\u2014the storage platform API, ADO.NET, ODBC, OLEDB, and ADO. This raises the question of authoritative constraint checking\u2014that is, how can we guarantee that data written from, say, ODBC, go through the same data integrity constraints as would data written from the storage platform API. Since all constraints are checked at the store, the constraints are now authoritative. Regardless of what API path one uses to get to the store, all writes to the store are filtered through the constraint checks at the store.","13. Sharing","A share in the storage platform is of the form:","\\\\<DNS Name>\\<Context Service>, where <DNS Name> is the DNS name of the machine, and <Context Service> is a containment folder, virtual folder, or an item in a volume on that machine. For example, assume that the machine \u201cJohns_Desktop\u201d has a volume called Johns_Information, and in this volume there exists a folder called Contacts_Categories; this folder contains a folder called Work, which has the work contacts for John:","\\\\Johns_Desktop\\Johns_Information$\\Contacts_Categories\\Work This can be shared as \u201cWorkContacts\u201d. With the definition of this share, \\\\Johns_Desktop\\WorkContacts\\JaneSmith is a valid storage platform name, and identifies the Person item JaneSmith.","a) Representing a Share","The share item type has the following properties: the share name, and the share target (this can be a non-holding link). For example, the aforementioned share's name is WorkContacts and target is Contacts_CategoriesWork on the volume Johns_Information. Below is the schema fragment for the Share type:",{"@attributes":{"id":"p-0797","num":"1202"},"tables":{"@attributes":{"id":"TABLE-US-00118","num":"00118"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"<Schema"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"xmlns="]},{"entry":[{},"\u201chttp:\/\/schemas.microsoft.com\/winfs\/2002\/11\/18\/schema\u201d"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Name=\u201cShare\u201d MajorVersion=\u201c1\u201d MinorVersion=\u201c0\u201d>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<ReferencedSchema Name=\u201cBase\u201d MajorVersion=\u201c1\u201d\/>"]},{"entry":[{},"<ReferencedSchema Name=\u201cthe storage platformTypes\u201d"]},{"entry":[{},"MajorVersion=\u201c1\u201d\/>"]},{"entry":[{},"<Type Name=\u201cShare\u201d MajorVersion=\u201c1\u201d MinorVersion=\u201c0\u201d"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"ExtendsType=\u201cBase.Item\u201d ExtendsVersion=\u201c1\u201d>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<Field Name=\u201cName\u201d Type=\u201cthe storage"]},{"entry":[{},"platformTypes.nvarchar(512)\u201d"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"TypeMajorVersion=\u201c1\u201d\/>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<Field Name=\u201cTarget\u201d Type=\u201cBase.RelationshipData\u201d"]},{"entry":[{},"TypeMajorVersion=\u201c1\u201d\/>"]},{"entry":[{},"<\/Type>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<\/Schema>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}},"br":{}},"Because a share is an item, shares can be managed just as with other items. A share can be created, deleted, and modified. A share is also secured the same way as other storage platform items.","c) Accessing Shares","An application accesses a remote storage platform share by passing the share name (e.g. \\\\Johns_Desktop\\WorkContacts) to the storage platform API in the ItemContext.Open( ) method call. ItemContext.Open returns an ItemContext object instance. The storage platform API then talks to the local storage platform service (recall that accessing remote storage platform shares is done via the local storage platform). In turn, the local storage platform service talks to a remote storage platform service (e.g. on machine Johns_Desktop) with the given share name (e.g. WorkContacts). The remote storage platform service then translates WorkContacts into Contacts_Categories\\Work and opens it. After that, query and other operations are performed just like other scopes.","d) Discoverability","In one embodiment, an application program can discover shares available on a given <DNS Name>, in the following ways. According to the first way, the storage platform API accepts a DNS name (e.g. Johns_Desktop) as the scope parameter in ItemContext.Open( ) method. The storage platform API then connects to the storage platform store with this DNS name as part of a connection string. With this connection, the only possible thing an application can do is call ItemContext.FindAll(typeof(Share)). A storage platform service then unions all the shares on all the attached volumes and returns the collection of shares. According to the second way, on a local machine, an administrator can easily discover the shares on a particular volume by FindAll(typeof(Share)), or a particular folder by FindAll(typeof(Share), \u201cTarget(ShareDestination).Id=folderId\u201d).","14. Semantics of Find","The Find* methods (regardless of whether they are called on the ItemContext object or on an individual item) generally apply to Items (including embedded items) within a given context. Nested elements do not have a Find\u2014they cannot be searched independently of their containing Items. This is consistent with the semantic desired by the storage platform data model, where nested elements derive their \u201cidentity\u201d from the containing item. To make this notion clearer, here are examples of valid and invalid find operations:\n\n","Valid, since there is a search criterion on an Item (a Person named \u201cMurali\u201d). The exception to this rule is for nested element types derived directly or indirectly from the Base.Relationship type. These types can be queried individually through relationship classes. Such queries can be supported because the storage platform implementation employs a \u201cmaster link table\u201d to store Relationship elements instead of embedding them inside item UDTs.","15. The Storage Platform Contacts API","This section gives an overview of the storage platform Contacts API. The schema behind the Contacts API is shown in .","a) Overview of System.Storage.Contact","The storage platform API includes a namespace for dealing with items and elements in the Contacts schema. This namespace is called System.Storage.Contact.","This schema has, for example, the following classes:\n\n","Below is a list of domain behaviors for the Contacts schema. When viewed from a high enough level, domain behaviors fall into well-recognizable categories:\n\n","The table below gives, for each class in Contacts that has domain behaviors, a list of these methods and the category they belong to.",{"@attributes":{"id":"p-0810","num":"1225"},"tables":{"@attributes":{"id":"TABLE-US-00119","num":"00119"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"105pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["BasicPresence","Category","UnknownCategoryURI,"]},{"entry":[{},"URIs","OfflineCategoryURI,"]},{"entry":[{},{},"BusyCategoryURI,"]},{"entry":[{},{},"AwayCategoryURI,"]},{"entry":[{},{},"OnlineCategoryURI"]},{"entry":[{},"Static","ConvertPresenceStateToString -"]},{"entry":[{},"helpers","format presence state as a"]},{"entry":[{},{},"localized string (actually"]},{"entry":[{},{},"localization needs to be"]},{"entry":[{},{},"added; just does a friendly"]},{"entry":[{},{},"English string now)."]},{"entry":["Category","Category","Home, Work, Primary,"]},{"entry":[{},"GUIDs","Secondary, Cell, Fax,"]},{"entry":[{},{},"Pager"]},{"entry":["EmailAddress","Derived","Address - combines username"]},{"entry":[{},"properties","and domain"]},{"entry":[{},"Static","IsValidEmailAddress"]},{"entry":[{},"helpers"]},{"entry":["Folder","Derived","GetChildItemCollection -"]},{"entry":[{},"properties","makes an item collection"]},{"entry":[{},{},"based on the Targets of the"]},{"entry":[{},{},"FolderMembership."]},{"entry":[{},"Static","GetKnownFolder - specialized"]},{"entry":[{},"helpers","queries to get well-known"]},{"entry":[{},{},"folders"]},{"entry":[{},{},"AddToPersonalContacts -"]},{"entry":[{},{},"adds an item to the well-"]},{"entry":[{},{},"known personal contacts"]},{"entry":[{},{},"folder"]},{"entry":["Items","Static","GetItemFromID - does ID"]},{"entry":[{},"helpers","based query"]},{"entry":["Relationship","Instance","BindToTarget - returns Item"]},{"entry":[{},"helpers","for Target"]},{"entry":["Person","Derived","PersonalRealtimeAddresses,"]},{"entry":[{},"collections","PersonalEmailAddresses,"]},{"entry":[{},{},"PersonalTelephoneNumbers"]},{"entry":[{},"Derived","OnlineStatus,"]},{"entry":[{},"properties","OnlineStatusIconSource,"]},{"entry":[{},{},"PrimaryEmailAddress,"]},{"entry":[{},{},"PrimarySecurityID"]},{"entry":[{},"Static","CreatePersonalContact,"]},{"entry":[{},"helpers","CreateTemporaryContact -"]},{"entry":[{},{},"creates new person in"]},{"entry":[{},{},"well-known folder"]},{"entry":[{},{},"GetCurrentUser - get's"]},{"entry":[{},{},"Person for currently"]},{"entry":[{},{},"logged in user"]},{"entry":["SecurityID","Derived","UserName, DomainName,"]},{"entry":[{},"properties","DomainUserName"]},{"entry":["TelephoneNumber","Instance","SetFromUserInputString -"]},{"entry":[{},"helpers","parses telephone number"]},{"entry":[{},{},"string into parts"]},{"entry":[{},"Static","ParseNumber - parses"]},{"entry":[{},"helpers","telephone number string"]},{"entry":[{},{},"into parts"]},{"entry":["User","Instance","AutoLoginToAllProfiles -"]},{"entry":[{},"helpers","logs into all profiles that"]},{"entry":[{},{},"are marked for autologin"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}}},"16. Storage Platform File API","This section gives an overview of the the storage platform File API, in accordance with one embodiment of the present invention.","a) Introduction","(1) Reflecting an NTFS Volume in the Storage Platform","The storage platform provides a way of indexing over content in existing NTFS volumes. This is accomplished by extracting (\u201cpromoting\u201d) properties from each file stream or directory in NTFS and storing these properties as Items in the storage platform.","The storage platform File schema defines two item types\u2014File and Directory\u2014to store promoted file system entities. The Directory type is a subtype of the Folder type; it is a containment folder which contains other Directory items or File items.","A Directory item can contain Directory and File items; it cannot contain items of any other type. As far as the storage platform is concerned, Directory and File items are read-only from any of the data access APIs. The File System Promotion Manager (FSPM) service asynchronously promotes changed properties into the storage platform. The properties of File and Directory items can be changed by the Win32 API. The storage platform API can be used to read any of the properties of these items, including the stream associated with a File item.","(2) Creating Files and Directories in the Storage Platform Namespace","When an NTFS volume gets promoted to a storage platform volume, all the files and directories therein are in a specific part of that volume. This area is read-only from the storage platform perspective; the FSPM can create new directories and files and\/or change properties of existing items.","The rest of the namespace of this volume can contain the usual gamut of the storage platform item types\u2014Principal, Organization, Document, Folder, etc. The storage platform also allows you to create Files and Directories in any part of the the storage platform namespace. These \u201cnative\u201d Files and Directories have no counterpart in the NTFS file system; they are stored entirely in the storage platform. Furthermore, changes to properties are visible immediately.","However, the programming model remains the same: they are still read-only as far as the the storage platform data access APIs are concerned. The \u201cnative\u201d Files and Directories have to be updated using Win32 APIs. This simplifies the developer's mental model, which is:\n\n",{"@attributes":{"id":"p-0821","num":"1241"},"figref":"FIG. 25"},"c) Overview of System.Storage.Files","The storage platform API includes a namespace for dealing with file objects. This namespace is called System.Storage.Files. The data members of the classes in System.Storage.Files directly reflect the information stored in the storage platform store; this information is \u201cpromoted\u201d from the file system objects or may be created natively using the Win32 API. The System.Storage.Files namespace has two classes: FileItem and DirectoryItem. The members of these classes and methods thereof can be readily divined by looking at the schema diagram in . FileItem and DirectoryItem are read-only from the storage platform API. In order to modify them, one has to use the Win32 API or classes in System.IO.","d) Code Examples","In this section, three code examples are provided illustrating the use of the classes in System.Storage.Files.","(1) Opening a File and Writing to it","This example shows how to do \u201ctraditional\u201d file manipulation. ltemContext ctx=itemContext.Open( );",{"@attributes":{"id":"p-0826","num":"1246"},"tables":{"@attributes":{"id":"TABLE-US-00120","num":"00120"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"ItemContext ctx = ItemContext.Open(\u2009);"]},{"entry":[{},"FileItem f = FileItem.FindByPath(ctx, @\u201c\\My"]},{"entry":[{},"Documents\\billg.ppt\u201d);"]},{"entry":[{},"\/\/ example of handling file properties - ensure that file is"]},{"entry":[{},"\/\/ not read-only"]},{"entry":[{},"if (!f.IsReadOnly)"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"FileStream fs = f.OpenWrite(\u2009);"]},{"entry":[{},"\/\/ Read, write, close file stream fs"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"ctx.Close(\u2009);"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}},"br":{},"b":["3","7","9"]},"(2) Using Queries","Since the storage platform store holds properties promoted from the file system, it is possible to easily do rich queries on the files. In this example, all files modified in the last three days are listed:",{"@attributes":{"id":"p-0829","num":"1249"},"tables":{"@attributes":{"id":"TABLE-US-00121","num":"00121"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ List all files modified in the last 3 days"]},{"entry":[{},"FindResult result = FileItem.FindAll("]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"ctx,"]},{"entry":[{},"\u201cModified >= \u2018{0}\u2019\u201d,"]},{"entry":[{},"DateTime.Now.AddDays(\u22123));"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"foreach ( FileItem file in result )"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},". . ."]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"Here's another example of using queries\u2014this one finds all writable files of a certain type (=extension):",{"@attributes":{"id":"p-0831","num":"1251"},"tables":{"@attributes":{"id":"TABLE-US-00122","num":"00122"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ Find all writable .cs files in a particular directory."]},{"entry":[{},"\/\/ Equivalent to: dir c:\\win\\src\\api\\*.cs \/a-r-d"]},{"entry":[{},"DirectoryItem dir ="]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"DirectoryItem.FindByPath(ctx, @\u201cc:\\win\\src\\api\u201d);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"FindResult result = dir.GetFiles("]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\u201cExtension=\u2018cs\u2019 and IsReadOnly=false\u201d);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"foreach ( File file in result )"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},". . ."]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}},"br":{}},"In one embodiment, in addition to the standard properties and methods, the file class also has domain behaviors (hand coded properties and methods). These behaviors are generally based on methods in the corresponding System.IO classes.","J. Conclusion","As the foregoing illustrates, the present invention is directed to a storage platform for organizing, searching, and sharing data. The storage platform of the present invention extends and broadens the concept of data storage beyond existing file systems and database systems, and is designed to be the store for all types of data, including structured, non-structured, or semi-structured data, such as relational (tabular) data, XML, and a new form of data called Items. Through its common storage foundation and schematized data, the storage platform of the present invention enables more efficient application development for consumers, knowledge workers and enterprises. It offers a rich and extensible application programming interface that not only makes available the capabilities inherent in its data model, but also embraces and extends existing file system and database access methods. It is understood that changes may be made to the embodiments described above without departing from the broad inventive concepts thereof. Accordingly, the present invention is not limited to the particular embodiments disclosed, but is intended to cover all modifications that are within the spirit and scope of the invention as defined by the appended claims.","As is apparent from the above, all or portions of the various systems, methods, and aspects of the present invention may be embodied in the form of program code (i.e., instructions). This program code may be stored on a computer-readable medium, such as a magnetic, electrical, or optical storage medium, including without limitation a floppy diskette, CD-ROM, CD-RW, DVD-ROM, DVD-RAM, magnetic tape, flash memory, hard disk drive, or any other machine-readable storage medium, wherein, when the program code is loaded into and executed by a machine, such as a computer or server, the machine becomes an apparatus for practicing the invention. The present invention may also be embodied in the form of program code that is transmitted over some transmission medium, such as over electrical wiring or cabling, through fiber optics, over a network, including the Internet or an intranet, or via any other form of transmission, wherein, when the program code is received and loaded into and executed by a machine, such as a computer, the machine becomes an apparatus for practicing the invention. When implemented on a general-purpose processor, the program code combines with the processor to provide a unique apparatus that operates analogously to specific logic circuits.",{"@attributes":{"id":"p-0835","num":"1255"},"tables":{"@attributes":{"id":"TABLE-US-00123","num":"00123"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"APPENDIX A"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"namespac\u2002 System.Storage"},{"entry":"{"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"abstract class ItemContext : IDisposable, IServiceProvider"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"ItemContext Creation and Management Members"]},{"entry":[{},"\/\/ Applications cannot create ItemContext objects"]},{"entry":[{},"directly nor can they derive"]},{"entry":[{},"\/\/ classes from ItemContext."]},{"entry":[{},"interal ItemContext(\u2009);"]},{"entry":[{},"\/\/ Create ItemContext that can be used to search the"]},{"entry":[{},"specified paths or, if no path"]},{"entry":[{},"\/\/ is specified, the default store on the local computer."]},{"entry":[{},"public static ItemContext Open(\u2009);"]},{"entry":[{},"public static ItemContext Open( string path );"]},{"entry":[{},"public static ItemContext Open( params string[\u2009]"]},{"entry":[{},"paths );"]},{"entry":[{},"\/\/ Return the paths specified when the ItemContext was"]},{"entry":[{},"created."]},{"entry":[{},"public string[\u2009] GetOpenPaths(\u2009);"]},{"entry":[{},"\/\/ Create a copy of this ItemContext. The copy will have"]},{"entry":[{},"independent transaction, caching"]},{"entry":[{},"\/\/ and update state. The cache will initially be empty."]},{"entry":[{},"It is expected that using a"]},{"entry":[{},"\/\/ cloned ItemContext would be more efficient then opening"]},{"entry":[{},"a new ItemContext using the"]},{"entry":[{},"\/\/ same item domain(s)."]},{"entry":[{},"public ItemContext Clone(\u2009);"]},{"entry":[{},"\/\/ Close the ItemContext. Any attempt to use the ItemContext"]},{"entry":[{},"after it is closed will"]},{"entry":[{},"\/\/ result in an ObjectDisposedException."]},{"entry":[{},"public void Close(\u2009);"]},{"entry":[{},"void IDisposable.Dispose(\u2009);"]},{"entry":[{},"\/\/ True if any domain specified when the ItemConext was"]},{"entry":[{},"opened resolved to a remote"]},{"entry":[{},"\/\/ computer."]},{"entry":[{},"public bool IsRemote { get; }"]},{"entry":[{},"\/\/ Returns an object that can provide the requested"]},{"entry":[{},"service type. Returns null if the"]},{"entry":[{},"\/\/ requested service cannot be provided. The use of the"]},{"entry":[{},"IServiceProvider pattern allows"]},{"entry":[{},"\/\/ API that are not normally used and could confuse"]},{"entry":[{},"developers to be factored out of"]},{"entry":[{},"\/\/ the ItemContext class. ItemContext can provide the"]},{"entry":[{},"following kinds of services:"]},{"entry":[{},"\/\/ IItemSerialization, IStoreObjectCache"]},{"entry":[{},"public object GetService( Type serviceType );"]},{"entry":[{},"Update Related Members"]},{"entry":[{},"\/\/ Saves changes represented by all modified objects"]},{"entry":[{},"and all objects passed to"]},{"entry":[{},"\/\/ MarkForCreate or MarkForDelete. May throw"]},{"entry":[{},"UpdateCollisionException if an update"]},{"entry":[{},"\/\/ collision is detected."]},{"entry":[{},"public void Update(\u2009);"]},{"entry":[{},"\/\/ Saves changes represented by the specified"]},{"entry":[{},"objects. The objects must have either"]},{"entry":[{},"\/\/ been modified or passed to MarkForCreate or"]},{"entry":[{},"MarkForDelete, otherwise Argument-"]},{"entry":[{},"\/\/ Exception is thrown. May throw"]},{"entry":[{},"UpdateCollisionException if an update collision is"]},{"entry":[{},"\/\/ detected."]},{"entry":[{},"public void Update( object obj ctToUpdate );"]},{"entry":[{},"public void Update( IEnumerable objectsToUpdate );"]},{"entry":[{},"\/\/ Refreshes the content of the specified objects"]},{"entry":[{},"from the store. If the object has"]},{"entry":[{},"\/\/ been modified, the changes are overwritten and"]},{"entry":[{},"the object is no longer considered"]},{"entry":[{},"\/\/ modified. Throws ArgumentException if anything"]},{"entry":[{},"other then an item, item extension,"]},{"entry":[{},"\/\/ or relationship object is specified."]},{"entry":[{},"public void Refresh( object objectToRefresh );"]},{"entry":[{},"public void Refresh( IEnumerable objectsToRefresh );"]},{"entry":[{},"\/\/ Raised when an update detects that data has been"]},{"entry":[{},"changed in the store between when a"]},{"entry":[{},"\/\/ modified object was retrieved and an attempt was"]},{"entry":[{},"made to save it. If no event handler"]},{"entry":[{},"\/\/ is registered, the update throws an exception. If"]},{"entry":[{},"an event handler is registered, it"]},{"entry":[{},"\/\/ can throw an exception to abort the update, case the"]},{"entry":[{},"modified object to overwrite"]},{"entry":[{},"\/\/ the data in the store or merge the changes made in"]},{"entry":[{},"the store and in the object."]},{"entry":[{},"public event ChangeCollisionEventHandler UpdateCollision;"]},{"entry":[{},"\/\/ Raised at various points during update processing to"]},{"entry":[{},"provide update progress"]},{"entry":[{},"\/\/ information."]},{"entry":[{},"public event UpdateProgressEventhandler UpdateProgress;"]},{"entry":[{},"\/\/ Async versions of Update"]},{"entry":[{},"public IAsyncResult BeginUpdate( IAsyncCallback callback,"]},{"entry":[{},"object state );"]},{"entry":[{},"public IAsyncResult BeginUpdate( object objectToUpdate,"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"IAsyncCallback callback,"]},{"entry":[{},"object state );"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"public IAsyncResult BeginUpdate( IEnumerable"]},{"entry":[{},"objectsToUpdate,"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"IAsyncCallback callback,"]},{"entry":[{},"object state );"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"public void EndUpdate( IAsyncResult result );"]},{"entry":[{},"\/\/ Async versions of Refresh"]},{"entry":[{},"public IAsyncResult BeginRefresh( object objectToRefresh,"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"IAsyncCallback callback,"]},{"entry":[{},"object state );"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"public IAsyncResult BeginRefresh( IEnumerable"]},{"entry":[{},"objectsToRefresh,"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"IAsyncCallback callback,"]},{"entry":[{},"object state );"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"public void EndRefresh( IAsyncResult result );"]},{"entry":[{},"Transaction Related Members"]},{"entry":[{},"\/\/ Begins a transaction with the specified isolation"]},{"entry":[{},"level. The default isolation level"]},{"entry":[{},"\/\/ is ReadCommited. In all cases, a distributed"]},{"entry":[{},"transaction is started because it may"]},{"entry":[{},"\/\/ have to encompass changes stream typed item properties."]},{"entry":[{},"public Transaction BeginTransaction(\u2009);"]},{"entry":[{},"public Transaction BeginTransaction( System.Data."]},{"entry":[{},"IsolationLevel isolationLevel );"]},{"entry":[{},"Search Related Members"]},{"entry":[{},"\/\/ Create an ItemSearcher that will search this item"]},{"entry":[{},"context for objects of the"]},{"entry":[{},"\/\/ specified type. Throws ArgumentException if a type"]},{"entry":[{},"othern then an item,"]},{"entry":[{},"\/\/ relationship, or item extension is specified."]},{"entry":[{},"public ItemS archer GetSearcher( Type type );"]},{"entry":[{},"\/\/ Find an item given its id."]},{"entry":[{},"public Item FindItemById( It mId itemId );"]},{"entry":[{},"\/\/ Find an item given its path. The path may be absolute"]},{"entry":[{},"or relative. If it is relative,"]},{"entry":[{},"\/\/ NotSupportedException will be thrown if multiple item"]},{"entry":[{},"domains were specified when"]},{"entry":[{},"\/\/ the ItemContext was opened. Will return null if no such"]},{"entry":[{},"item exists. Creates a"]},{"entry":[{},"\/\/ connection to the \\\\machine\\share part of the"]},{"entry":[{},"domain to retrieve the item. The"]},{"entry":[{},"\/\/ item will be assocaited with that domain."]},{"entry":[{},"public Item FindItemByPath( string path );"]},{"entry":[{},"\/\/ Find an item given its path. The path is relative to the"]},{"entry":[{},"specified item domain."]},{"entry":[{},"\/\/ Creates a connection to the specified domain to retrieve"]},{"entry":[{},"the item. The item will be"]},{"entry":[{},"\/\/ associated with that domain. Will return null if no"]},{"entry":[{},"such item exists."]},{"entry":[{},"public Item FindItemByPath( string domain, string path );"]},{"entry":[{},"\/\/ Find a set of items given a path. The path is relative"]},{"entry":[{},"to the item domains specified"]},{"entry":[{},"\/\/ when the ItemContext was opened. Will return an empty"]},{"entry":[{},"result if no such item exists."]},{"entry":[{},"public FindResult FindAllItemsByPath( string path );"]},{"entry":[{},"\/\/ Find a relationship given its ids."]},{"entry":[{},"public Relationship FindRelationshipById( ItemId itemID,"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"RelationshipId relationshipId );"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ Find a item extension given its ids."]},{"entry":[{},"public ItemExtension FindItemExtensionById( ItemId itemId,"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"ItemExtensionId itemExtensionId );"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ Find all item, relationship, or item extensions of"]},{"entry":[{},"the specified type optionally"]},{"entry":[{},"\/\/ satisifing a given filter. Throws ArgumentException"]},{"entry":[{},"if a type other then one of"]},{"entry":[{},"\/\/ these is specified."]},{"entry":[{},"public FindResult FindAll( Type type );"]},{"entry":[{},"public FindResult FindAll( Type type, string filter );"]},{"entry":[{},"\/\/ Find any item, relationship, or item extensions of"]},{"entry":[{},"the specified type that satisfies"]},{"entry":[{},"\/\/ a given filter. Throws ArgumentException if a type"]},{"entry":[{},"other then one of these is"]},{"entry":[{},"\/\/ specified. Returns null if no such object is found."]},{"entry":[{},"public object FindOne( Type type, string filter );"]},{"entry":[{},"\/\/ Find the item, relationship, or item extensions of"]},{"entry":[{},"the specified type that satisfies"]},{"entry":[{},"\/\/ a given filter. Throws ArgumentException if a type"]},{"entry":[{},"other then one of these is"]},{"entry":[{},"\/\/ specified. Throws ObjectNotFoundException if no"]},{"entry":[{},"such object was found. Throws"]},{"entry":[{},"\/\/ MultipleObjectsFoundException if more then one"]},{"entry":[{},"object was found."]},{"entry":[{},"public object FindOnly( Type type, string filter );"]},{"entry":[{},"\/\/ Returns true if an item, relationship, or item"]},{"entry":[{},"extensions of the specified type that"]},{"entry":[{},"\/\/ satisfies a given filter exists."]},{"entry":[{},"Throws ArgumentException if a type other then one"]},{"entry":[{},"\/\/ of these is specified."]},{"entry":[{},"public bool Exists( Type type, string filter );"]},{"entry":[{},"\/\/ Specifies how the objects returned by a search"]},{"entry":[{},"relate to the object identity map"]},{"entry":[{},"\/\/ maintained by the ItemContext."]},{"entry":[{},"public SearchCollisionMode S archCollisionMode"]},{"entry":[{},"{ get; s t; }"]},{"entry":[{},"\/\/ Raised when PreserveModifiedObjects is specified"]},{"entry":[{},"for ResultMapping. This event allows"]},{"entry":[{},"\/\/ the application to selectivly update the modified"]},{"entry":[{},"object with data retrieved with the"]},{"entry":[{},"\/\/ search."]},{"entry":[{},"public event ChangeCollisionEventHandler SearchCollision;"]},{"entry":[{},"\/\/ Incorporate an object from annother ItemContext into"]},{"entry":[{},"this item context. If an object"]},{"entry":[{},"\/\/ representing the same item, relationship or item"]},{"entry":[{},"extension does not already exist"]},{"entry":[{},"\/\/ this this ItemContext's identity map, a clone of"]},{"entry":[{},"the object is created and added to"]},{"entry":[{},"\/\/ the map. If an object does exist, it is updated"]},{"entry":[{},"with the state and content of the"]},{"entry":[{},"\/\/ specified object in a way concistant with the"]},{"entry":[{},"SearchCollisionMode."]},{"entry":[{},"public Item IncorporateItem( Item item );"]},{"entry":[{},"public Relationship IncorporateRelationship( Relationship"]},{"entry":[{},"relationship );"]},{"entry":[{},"public ItemExtension IncorporateItemExtension( ItemExtension"]},{"entry":[{},"itemExtension );"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"\/\/Handler for ItemContext.UpdateCollision and"]},{"entry":[{},"ItemSearcher.SearchCollision events."]},{"entry":[{},"public delegate void ChangeCollisionEventHandler( object source,"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"ChangeCollisionEventArgs args );"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ Arguments for the ChangeCollisionEventHandler delegate."]},{"entry":[{},"public class ChangeCollisionEventArgs : EventArgs"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ Modified item, item extension, or relationship object."]},{"entry":[{},"public object ModifiedObject { get; }"]},{"entry":[{},"\/\/ Properties from store."]},{"entry":[{},"public IDictionary StoredProperties { get; }"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"\/\/ Handler for ItemContext.UpdateProgress."]},{"entry":[{},"public delegate void UpdateProgressEventHandler( ItemContext"]},{"entry":[{},"itemContext,"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"UpdateProgressEventArgs args );"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ Arguments for the UpdateProgressEventHandler delegate"]},{"entry":[{},"public class ChangeCollisionEventArgs : EventArgs"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ The current update operation."]},{"entry":[{},"public UpdateOperation CurrentOperation { get; }"]},{"entry":[{},"\/\/ The object that is currently being updated."]},{"entry":[{},"public object CurrentObject { get; }"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"\/\/ Specifies how the objects returned by a search relate to"]},{"entry":[{},"the objects identity map"]},{"entry":[{},"\/\/ maintained by the ItemContext."]},{"entry":[{},"public enum SearchCollisionMode"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ Indicates that new objects should be created and"]},{"entry":[{},"returned. Objects representing the"]},{"entry":[{},"\/\/ same item, item extension, or relationship in the"]},{"entry":[{},"identity map are ignored. If this"]},{"entry":[{},"\/\/ option is specified the SearchCollision event will"]},{"entry":[{},"not be raised."]},{"entry":[{},"DoNotMapS archResults,"]},{"entry":[{},"\/\/ Indicates that objects from the identity map should"]},{"entry":[{},"be returned. If the content of"]},{"entry":[{},"\/\/ an object has been modified by the application,"]},{"entry":[{},"the modified object's content is"]},{"entry":[{},"\/\/ preserved. If the object has not been modified,"]},{"entry":[{},"its content is updated with the"]},{"entry":[{},"\/\/ data returned by the search. The Application may"]},{"entry":[{},"provide an handler for the"]},{"entry":[{},"\/\/ SearchCollision event and selectivly update the"]},{"entry":[{},"object as desired."]},{"entry":[{},"PreserveModifiedObjects,"]},{"entry":[{},"\/\/ Indicates that the objects from the identity map"]},{"entry":[{},"should be returned. The content"]},{"entry":[{},"\/\/ of the object is updated with the data returned"]},{"entry":[{},"by the search, even if the object"]},{"entry":[{},"\/\/ has been modified by the application. If this"]},{"entry":[{},"option is specified the Search-"]},{"entry":[{},"\/\/ Collision event will not be raised."]},{"entry":[{},"OverwriteModifiedObjects"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"\/\/ The current update operation."]},{"entry":[{},"public enum UpdateOperation"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ Provided when Update is first called."]},{"entry":[{},"CurrentObject will be null."]},{"entry":[{},"OverallUpdateStarting,"]},{"entry":[{},"\/\/ Provided just before Update returns after a"]},{"entry":[{},"successful update. CurrentObject will be"]},{"entry":[{},"\/\/ null."]},{"entry":[{},"OverallUpdateCompletedSucessfully,"]},{"entry":[{},"\/\/ Provided just before Update throws an exception."]},{"entry":[{},"CurrentObject will be the exception"]},{"entry":[{},"\/\/ object."]},{"entry":[{},"OverallUpdateCompletedUnsuccessfully,"]},{"entry":[{},"\/\/ Provided when the update of an object is started."]},{"entry":[{},"CurrentObject will reference the"]},{"entry":[{},"\/\/ object that will be used for the updated."]},{"entry":[{},"ObjectUpdateStaring,"]},{"entry":[{},"\/\/ Provided when a new connection is needed."]},{"entry":[{},"CurrentObject will be a string that contains"]},{"entry":[{},"\/\/ the path identifying an item domain as passed"]},{"entry":[{},"to ItemContext.Open or retrieved from"]},{"entry":[{},"\/\/ the Location field of a relationship."]},{"entry":[{},"OpeningConnection"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},{"@attributes":{"id":"p-0836","num":"1256"},"tables":{"@attributes":{"id":"TABLE-US-00124","num":"00124"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":[{"entry":"APPENDIX B"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"namespace System.Storage"},{"entry":"{"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ Executes a search across a specific type in an item context."]},{"entry":[{},"public class ItemSearcher"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Constructors"]},{"entry":[{},"public ItemSearcher( );"]},{"entry":[{},"public ItemSearcher( Type targetType, ItemContext context );"]},{"entry":[{},"public ItemSearcher( Type targetType, ItemContext context,"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"params SearchExpression[ ] filters );"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Properties"]},{"entry":[{},"\/\/ The filters used to identify matching objects."]},{"entry":[{},"public SearchExpressionCollection Filters {get;}"]},{"entry":[{},"\/\/ The ItemContext that specifies the domains that will be"]},{"entry":[{},"\/\/ searched."]},{"entry":[{},"public ItemContext ItemContext {get; set;}"]},{"entry":[{},"\/\/ The search parameter collection."]},{"entry":[{},"public ParameterCollection Parameters {get;}"]},{"entry":[{},"\/\/ The type the searcher will operate against. For simple searches"]},{"entry":[{},"\/\/ this is the type of the object that will be returned."]},{"entry":[{},"public Type TargetType {get; set;}"]},{"entry":[{},"Search Methods"]},{"entry":[{},"\/\/ Find objects of TargetType that satisfiy the conditions"]},{"entry":[{},"\/\/ specified by Filters. Returns an empty FindResult if no such"]},{"entry":[{},"\/\/ objects exist."]},{"entry":[{},"public FindResult FindAll( );"]},{"entry":[{},"public FindResult FindAll( FindOptions findOptions );"]},{"entry":[{},"public FindResult FindAll( params SortOption[ ] sortOptions );"]},{"entry":[{},"\/\/ Find any one object of TargetType that satisifies the conditions"]},{"entry":[{},"\/\/ specified by Filters. Returns null if no such object exists."]},{"entry":[{},"public object FindOne( );"]},{"entry":[{},"public object FindOne( FindOptions findOptions );"]},{"entry":[{},"public object FindOne( params SortOption[ ] sortOptions );"]},{"entry":[{},"\/\/ Find the object of TargetType that satisfies the conditions"]},{"entry":[{},"\/\/ specified by Filters. Throws ObjectNotFoundException if no"]},{"entry":[{},"\/\/ such object was found. Throws MultipleObjects-"]},{"entry":[{},"\/\/ FoundException if more then one object was found."]},{"entry":[{},"public object FindOnly( );"]},{"entry":[{},"public object FindOnly( FindOptions findOptions );"]},{"entry":[{},"\/\/ Determine if an object of TargetType that satisfies the"]},{"entry":[{},"\/\/ conditions specified by Filters exists."]},{"entry":[{},"public bool Exists( );"]},{"entry":[{},"\/\/ Creates an object that can be used to more efficiently execute"]},{"entry":[{},"\/\/ the same search repeatedly."]},{"entry":[{},"public PreparedFind PrepareFind( );"]},{"entry":[{},"public PreparedFind PrepareFind( FindOptions findOptions );"]},{"entry":[{},"public PreparedFind PrepareFind( params SortOption[ ]"]},{"entry":[{},"\u2003\u2003sortOptions );"]},{"entry":[{},"\/\/ Retrieves the number of records that would be returned by"]},{"entry":[{},"\/\/ FindAll( )."]},{"entry":[{},"public int Getcount( );"]},{"entry":[{},"\/\/ Asynchronous versions of various methods."]},{"entry":[{},"public IAsyncResult BeginFindAll( AsyncCallback callback,"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"object state );"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"public IAsyncResult BeginFindAll( FindOptions findOptions,"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"AsyncCallback callback,"]},{"entry":[{},"object state );"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"public IAsyncResult BeginFindAll( SortOption[ ] sortOptions,"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"AsyncCallback callback,"]},{"entry":[{},"object state );"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"public FindResult EndFindAll( IAsyncResult ar );"]},{"entry":[{},"public IAsyncResult BeginFindOne( AsyncCallback callback,"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"object state );"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"public IAsyncResult BeginFindOne( FindOptions findOptions,"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"AsyncCallback callback,"]},{"entry":[{},"object state );"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"public IAsyncResult BeginFindOne( SortOption[ ] sortOptions,"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"AsyncCallback callback,"]},{"entry":[{},"object state );"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"public object EndFindOne( IAsyncResult asyncResult );"]},{"entry":[{},"public IAsyncResult BeginFindOnly( AsyncCallback callback,"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"object state );"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"public IAsyncResult BeginFindOnly( FindOptions findOptions,"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"AsyncCallback callback,"]},{"entry":[{},"object state );"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"public IAsyncResult BeginFindOnly( SortOption[ ] sortOptions,"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"AsyncCallback callback,"]},{"entry":[{},"object state );"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"public object EndFindOnly( IAsyncResult asyncResult );"]},{"entry":[{},"public IAsyncResult BeginGetCount( AsyncCallback callback,"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"object state );"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"public int EndGetCount( IAsyncResult asyncResult );"]},{"entry":[{},"public IAsyncResult BeginExists( AsyncCallback callback,"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"objectstate);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"public bool EndExists( IAsyncResult asyncResult );"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ Options used when executing a search."]},{"entry":[{},"public class FindOptions"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"public FindOptions( );"]},{"entry":[{},"public FindOptions( params SortOption[ ] sortOptions );"]},{"entry":[{},"\/\/ Specifies if delay loadable fields should be delay loaded."]},{"entry":[{},"public bool DelayLoad {get; set;}"]},{"entry":[{},"\/\/ The number of matches that are returned."]},{"entry":[{},"public int MaxResults {get; set;}"]},{"entry":[{},"\/\/ A collection of sort options."]},{"entry":[{},"public SortOptionCollection SortOptions {get;}"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"\/\/ Represents a parameter name and value."]},{"entry":[{},"public class Parameter"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ Initializes a Parameter object with a name and value."]},{"entry":[{},"public Parameter( string name, object value );"]},{"entry":[{},"\/\/ The parameter's name."]},{"entry":[{},"public string Name {get;}"]},{"entry":[{},"\/\/ The parameter's value."]},{"entry":[{},"public object Value {get; set;}"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"\/\/ A collection of parameter name\/value pairs."]},{"entry":[{},"public class ParameterCollection : ICollection"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"public ParameterCollection( );"]},{"entry":[{},"public int Count {get;}"]},{"entry":[{},"public object this[string name] {get; set;}"]},{"entry":[{},"public object SyncRoot {get;}"]},{"entry":[{},"public void Add( Parameter parameter );"]},{"entry":[{},"public Parameter Add( string name, object value );"]},{"entry":[{},"public bool Contains( Parameter parameter );"]},{"entry":[{},"public bool Contains( string name );"]},{"entry":[{},"public void CopyTo( Parameter[ ] array, int index );"]},{"entry":[{},"void ICollection.CopyTo( Array array, int index );"]},{"entry":[{},"IEnumerator IEnumerable.GetEnumerator( );"]},{"entry":[{},"public void Remove( Parameter parameter );"]},{"entry":[{},"public void Remove( string name );"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"\/\/ Represents a search that has been optimized for repeated execution."]},{"entry":[{},"public class PreparedFind"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"public ItemContext ItemContext {get;}"]},{"entry":[{},"public ParameterCollection Parameters {get;}"]},{"entry":[{},"public FindResult FindAll( );"]},{"entry":[{},"public object FindOne( );"]},{"entry":[{},"public object FindOnly( );"]},{"entry":[{},"public bool Exists( );"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"\/\/ Specifies sorting options used in a search."]},{"entry":[{},"public class SortOption"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ Initialize a object with default values."]},{"entry":[{},"public SortOption( );"]},{"entry":[{},"\/\/ Initializes a SortOptions object with SearchExpression, order."]},{"entry":[{},"public SortOption( SearchExpression searchExpression,"]},{"entry":[{},"\u2003\u2003SortOrder order );"]},{"entry":[{},"\/\/ A search SearchExpression that identifies the property that will"]},{"entry":[{},"\/\/ be sorted."]},{"entry":[{},"public SearchExpression Expression {get; set;}"]},{"entry":[{},"\/\/ Specifies ascending or descending sort order."]},{"entry":[{},"public SortOrder Order {get; set;}"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"\/\/ A collection of sort option objects."]},{"entry":[{},"public class SortOptionCollection : IList"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"public SortOptionCollection( );"]},{"entry":[{},"public SortOption this[int index] {get; set;}"]},{"entry":[{},"public int Add( SortOption value );"]},{"entry":[{},"public int Add( SearchExpression expression, SortOrder order );"]},{"entry":[{},"int IList.Add( object value );"]},{"entry":[{},"public void Clear( );"]},{"entry":[{},"public bool Contains( SortOption value );"]},{"entry":[{},"bool IList.Contains( object value );"]},{"entry":[{},"public void CopyTo( SortOption[ ] array, int index );"]},{"entry":[{},"void ICollection.CopyTo( Array array, int index );"]},{"entry":[{},"public int Count {get;}"]},{"entry":[{},"IEnumerator IEnumerable.GetEnumerator( );"]},{"entry":[{},"public void Insert( int index, SortOption value );"]},{"entry":[{},"void IList.Insert( int index, object value );"]},{"entry":[{},"public int IndexOf( SortOption value );"]},{"entry":[{},"int IList.IndexOf( object value );"]},{"entry":[{},"public void Remove( SortOption value );"]},{"entry":[{},"void IList.Remove( object value );"]},{"entry":[{},"public void RemoveAt( int index );"]},{"entry":[{},"public object SyncRoot {get;}"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"\/\/ Specifies the sort order using in a SortOption object."]},{"entry":[{},"public enum SortOrder"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Ascending,"]},{"entry":[{},"Descending"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},{"@attributes":{"id":"p-0837","num":"1257"},"tables":{"@attributes":{"id":"TABLE-US-00125","num":"00125"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":[{"entry":"APPENDIX C"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"namespace System.Storage"},{"entry":"{"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"public abstract class FindResult : IAsyncObjectReader"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"public FindResult( );"]},{"entry":[{},"\/\/ Moves the FindResult to the next position in the result."]},{"entry":[{},"public bool Read( );"]},{"entry":[{},"public IAsyncResult BeginRead( AsyncCallback callback, object"]},{"entry":[{},"\u2003\u2003state );"]},{"entry":[{},"public bool EndRead( IAsyncResult asyncResult);"]},{"entry":[{},"\/\/ The current object."]},{"entry":[{},"public object Current {get;}"]},{"entry":[{},"\/\/ Returns whether or not the FindResult contains any objects."]},{"entry":[{},"public bool HasResults {get;}"]},{"entry":[{},"\/\/ Returns whether or not the FindResult is closed."]},{"entry":[{},"public bool IsClosed {get;}"]},{"entry":[{},"\/\/ Returns the type of items in this FindResult."]},{"entry":[{},"public Type ObjectType {get;}"]},{"entry":[{},"\/\/ Closes the FindResult"]},{"entry":[{},"public void Close( );"]},{"entry":[{},"void IDisposable.Dispose( );"]},{"entry":[{},"\/\/ Returns an enumerator over the FindResult, starting at the"]},{"entry":[{},"\/\/ current position. Advancing any enumerator on the FindResult"]},{"entry":[{},"\/\/ advances all enumerators as well as the FindResult itself."]},{"entry":[{},"IEnumerator IEnumerable.GetEnumerator( );"]},{"entry":[{},"public FindResultEnumerator GetEnumerator( );"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"public abstract class FindResultEnumerator : IEnumerator,"]},{"entry":[{},"\u2003\u2003IDisposable"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"public abstract object Current { get; }"]},{"entry":[{},"public abstract bool MoveNext( );"]},{"entry":[{},"public abstract void Reset( );"]},{"entry":[{},"public abstract void Close( );"]},{"entry":[{},"void IDisposable.Dispose( );"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":"namespace System"},{"entry":"{"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ A common interface for iterating over objects."]},{"entry":[{},"public interface IObjectReader : IEnumerable, IDisposable"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"object Current {get;}"]},{"entry":[{},"bool IsClosed {get:}"]},{"entry":[{},"bool HasResults {get;}"]},{"entry":[{},"Type ObjectType {get;}"]},{"entry":[{},"bool Read( );"]},{"entry":[{},"void Close( );"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"\/\/ Adds asynchronous methods to IObjectReader"]},{"entry":[{},"public interface IAsyncObjectReader : IObjectReader"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"IAsyncResult BeginRead( AsyncCallback callback, object state );"]},{"entry":[{},"bool EndRead( IAsyncResult result );"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The foregoing summary, as well as the following detailed description of the invention, is better understood when read in conjunction with the appended drawings. For the purpose of illustrating the invention, there is shown in the drawings exemplary embodiments of various aspects of the invention; however, the invention is not limited to the specific methods and instrumentalities disclosed. In the drawings:",{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 2A"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 5A"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":["FIG. 5B","FIG. 5A"]},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 5C"},{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 6A"},{"@attributes":{"id":"p-0032","num":"0031"},"figref":["FIG. 6B","FIG. 6A"]},{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 8A"},{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 8B"},{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0038","num":"0037"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0039","num":"0038"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0040","num":"0039"},"figref":"FIG. 13"},{"@attributes":{"id":"p-0041","num":"0040"},"figref":"FIG. 14"},{"@attributes":{"id":"p-0042","num":"0041"},"figref":"FIG. 15"},{"@attributes":{"id":"p-0043","num":"0042"},"figref":"FIG. 16"},{"@attributes":{"id":"p-0044","num":"0043"},"figref":"FIG. 17"},{"@attributes":{"id":"p-0045","num":"0044"},"figref":"FIG. 18"},{"@attributes":{"id":"p-0046","num":"0045"},"figref":"FIG. 19"},{"@attributes":{"id":"p-0047","num":"0046"},"figref":"FIG. 20"},{"@attributes":{"id":"p-0048","num":"0047"},"figref":"FIGS. 21A and 21B"},{"@attributes":{"id":"p-0049","num":"0048"},"figref":"FIG. 22"},{"@attributes":{"id":"p-0050","num":"0049"},"figref":"FIG. 23"},{"@attributes":{"id":"p-0051","num":"0050"},"figref":"FIG. 24"},{"@attributes":{"id":"p-0052","num":"0051"},"figref":"FIG. 25"},{"@attributes":{"id":"p-0053","num":"0052"},"figref":"FIG. 26"},{"@attributes":{"id":"p-0054","num":"0053"},"figref":"FIGS. 27(","i":["a","b","c"]},{"@attributes":{"id":"p-0055","num":"0054"},"figref":"FIG. 28"},{"@attributes":{"id":"p-0056","num":"0055"},"figref":"FIG. 29"}]},"DETDESC":[{},{}]}
