---
title: Semantic objects
abstract: A computer-implemented method of providing access to information stored in diverse formats comprises receiving from an application a semantic request having a request name that semantically identifies a type of information sought by the request, converting the received semantic request to a generic request having corresponding request parameters, transmitting the converted request to a data access system, receiving data from the data access system corresponding to the converted request, and providing the data to the application.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07577682&OS=07577682&RS=07577682
owner: SAP AG
number: 07577682
owner_city: Walldorf
owner_country: DE
publication_date: 20030731
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["The following description relates to programming objects that provide for intuitive development of enterprise resource planning systems.","Enterprise resource planning (ERP) systems are generally integrated computer systems that manage multiple functions within an organization, such as human resources, manufacturing, customer relationships, supplier relationships, sales force automation, project management, product life-cycle management, and the like. ERP systems can contain an almost endless array of information. For example, information may be stored in a highly-organized format, such as a flat-file database. This type of information could include information about members of the organization (e.g., employees), such as names, employee numbers, starting work date, and accrued vacation time. Information may also be stored in a less-organized format, e.g., as word processing documents, images, spreadsheets, text files, or audio files. This diverse range of information types can create real challenges for developers working to implement an ERP system in a manner that is intuitive and easy-to-use.","Most organizations are also unable to set up an entire ERP system at one time. Rather, such systems typically grow and morph over time as the organization makes decisions about new software purchases (decisions that might be made without coordination from department-to-department or division-to-division), or acquires new pieces of the organization (such as through mergers with, or purchases of, other organizations that have their own current computer systems). As a result, a large organization will often have many databases that store similar information in different organizational formats. In addition, the databases may be provided by different companies, and thus use different protocols for accessing the information. These differences bring even greater variation to the data that developers must provide to users of a system.","Tools are available that assist developers in taming this mass of information stored in different formats on different systems. For example, various abstraction layers may be provided to translate information requests into the appropriate protocol for various data storage systems, such as those provided by Oracle, IBM, Informix, Sybase, and Microsoft, and systems that follow various models such as the LDAP model, X.500, and other, proprietary database models. These layers help simplify data access for a developer to some extent. Still, further simplification of access to data may be preferred in particular situations. In particular, it is helpful to better integrate any back-end data storage systems with the user interface that is prepared by a developer of a computer system.","This document discloses a computer-implemented method and system that provides simplified access to data stored in an organization's computer system. The method comprises receiving from an application a semantic request having a request name that semantically identifies a type of information sought by the request, converting the received semantic request to a generic request having corresponding request parameters, transmitting the converted request to a data access system, receiving data from the data access system corresponding to the converted request, and providing the data to the application. The method may also comprise typecasting the data received form the data access system before providing the data to the application. In addition, if a database connection has not yet been opened, an object for receiving and converting the semantic request may be created, a database connection corresponding to the semantic request may be opened, and properties of data corresponding to the semantic request may be requested.","The semantic request may comprise a uniform resource identifier, and the object may be a group object configured to access information about groups of entities. The created object may request the properties of a resource corresponding to the converted request, and the converted request may comprise parameters corresponding to, but not present in, the semantic request.","In another embodiment, a computer-implemented method for establishing an object for simplifying data access is provided. The method comprises identifying a generic data access command for communicating with a data access system, creating a semantic data access command that corresponds to the generic data access command, providing a semantic object configured to receive the semantic data access command from an application, and providing a corresponding generic data access command to a data access system. The semantic data access command may comprise a uniform resource identifier, and the generic data access command may comprise parameters corresponding to, but not present in, the semantic data access command. Also, if a database connection has not previously been opened, the semantic object may open a database connection corresponding to the semantic data access command and request properties of data corresponding to the semantic data access command.","In another embodiment, a system for providing simplified access to data stored in diverse formats is described. The system may comprise a plurality of user applications configured to receive requests from, and present data to, one or more users of the system, a semantic object that is accessible by one or more of the user applications using a name that semantically suggests the action to be performed by the semantic object, and a repository system that receives the generic data request and responds to the semantic object with data corresponding to the request. The semantic object may produce in response to a request from the one or more user applications, a generic data request having one or more parameters that convey information relating to the request. The semantic object may also type cast the data corresponding to the request to the user application. A semantic object provider configured to give access to prepared semantic objects in response to a request from a user application may also be provided. The provider may accept additional semantic objects after the system has been established, and may be configured to access semantic objects over a remote communication link. The system may also comprise a portal that provides access to the user applications.","In another embodiment, an article comprising a machine-readable medium storing instructions operable to cause one or more machines to perform operations is provided. The operations may include receiving from an application a semantic request having a request name that semantically identifies a type of information sought by the request, converting the received semantic request to a generic request having corresponding request parameters, transmitting the converted request to a data access system, receiving data from the data access system corresponding to the converted request, and providing the data to the application. Instructions operable to cause one or more machines to typecast the data received from the data access system before providing the data to the application may also be provided. The semantic request may comprise a uniform resource identifier. If a database connection has not previously been opened, instructions may be provided that are operable to create an object for receiving and converting the semantic request, open a database connection corresponding to the semantic request, and request properties of data corresponding to the semantic request. The object may be a group object configured to access information about groups of of entities, and the created object may request the properties of a resource corresponding to the converted request. The converted request may also comprise parameters corresponding to, but not present in, the semantic request.","Advantageously, the method and system may provide an effective means by which a developer can produce code for a particular system in a simplified manner and by using less time. In addition, a user may be provided with data in a way that requires fewer programming steps, and does not require the developer to understand the back-end system where the data is stored.","Details of one or more implementations are set forth in the accompanying drawings and the description below. Other features and advantages may be apparent from the description and drawings, and from the claims.","Like reference symbols in the various drawings indicate like elements.","The systems and techniques described here relate to enabling a computer software developer to access persistently stored data in a simpler and more convenient manner.",{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 1","b":["10","12","18","12","12","18","12","12","18","18","12","18","12","18","10"]},"Semantic object provider  is shown as receiving the data request from application  in the form of a semantic request. As described more fully below, the semantic request is in a format that indicates the nature of the data resource to which the application is seeking access. For example, if the data request relates to information about an employee of an organization, the semantic data request may take the form of \u201cgetUser.\u201d A request that would cause a database to be queried to obtain the name of an employee based on the employee's number could take the form of:",{"@attributes":{"id":"p-0024","num":"0023"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"class Room {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},". . ."]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"public IUser getAdministrator( )"]},{"entry":[{},". . ."]},{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"The request may also contain a locational identifier for the data, such as a uniform resource identifier (URI). This identifier provides a unique address for the information that is being sought by the application. As with navigation using a Web browser and URL's, the application needs to know the identification or location of a starting object (such as a particular collaboration room). This starting object may be identified by a Resource ID (RID) that is a form of URI, and could, for example, be a parameter of a URL, such as \u201chttp:\/\/my.portal.com\/apps\/room?rid=\/rooms\/Project3000Room.\u201d Once the starting parameter is known, the application may move through the objects more easily, much like moving between various pages at a single web site. Discussion of the operation of URI's can generally be accessed from the Internet Engineering Task Force (www.ietf.org).","The appropriate semantic object of semantic object provider  may then interpret the semantic request and translate or convert it into an appropriate generic request to be processed by access layer . For example, where the semantic object is \u201cGetUser,\u201d and the request seeks information about the user's name, as in the example above, the generic command could be phrased as follows:\n\n","As one can readily appreciate, this generic request is more complicated and less intuitive for a developer than is the semantic request. In particular, the generic request has a label that does not indicate the type of information that is sought by the request. Thus, by providing that the system, rather than the developer, provide this request, the system allows the developer to understand a programming environment much more easily. Also, the generic request has a number of parameters that are required to allow the data system  to locate the appropriate information. The semantic objects, in contrast, require little additional information. As a result, a developer using semantic objects can learn such a system more easily, will not have to type as much code, and will be less likely to make errors in the code.","Semantic objects provider  and its corresponding semantic objects may be made available as shared components of system . As such, they may be accessed by multiple different applications or portions of applications in system . For example, a CRM application that seeks access to employee information may be written to access semantic objects, while an application for establishing collaboration sessions among employees could also use the same objects. Also, although the semantic objects have been described as being related to a semantic object provider , the provider could be each of the semantic objects themselves.","Access layer  receives the request, determines the type of data system  on which the corresponding information is located, and makes the appropriate request for the data. This final request may be made by any number of different methods, and generally is not dependent on, nor does it affect, the manner in which the semantic object provider  operates.","When information has been read out of data system , it begins its trip to application . As with the request, the response may be transformed and translated as it is passed from component-to-component. For example, the response passed from data system  to access layer  may be provided in a format that is unique to the provider of the data system. The access layer  may translate the response into a generic format that is universal across multiple different data storage systems. This translation allows simplified communication from access layer  to semantic object provider . Finally, a semantic object from semantic object provider  receives the response and provides it to the application .","While this embodiment has been described as having four distinct components, system  may be arranged in any appropriate manner. For example, two or more of the components could be combined, or additional components could be provided. In addition, the order of, and interrelationships between, the various components could be rearranged. As one example, the responsive message would not have to follow a path through all of the components before reaching the application .",{"@attributes":{"id":"p-0032","num":"0033"},"figref":"FIG. 2","b":["20","20","20","22","24","24","26","28","30","28","28","30","32"]},"Semantic objects  are provided as part of an application programming interface (API) to user interfaces . In this embodiment, the semantic objects  include user object , group object , and contact object . User object  provides access to information regarding the users of system , i.e., the individuals who have network logins for system . Contact object  provides access to information regarding contacts, which are entities (typically individuals) with whom communication may be conducted. For example, the contacts may be thought of as entries in an on-line address-book for an organization. The contacts may include users, but may also include entities outside the organization. The group object  accesses information about groups of entities, such as e-mail distribution lists, members of virtual meetings and virtual rooms, and chat participants.","The semantic objects  may be provided to a developer as part of an ERP system or as part of an add-on for such a system. Alternatively, a developer could produce semantic objects, either from scratch, or by building upon existing objects or libraries of objects. Also, various additional semantic objects  may be made available for access, such as by remote on-line access (e.g., through the Internet) or from third-party providers.","Semantic objects  may request access to information through repository , which may employ a repository manager . A repository framework provides for the abstraction of various items in a persistence layer, so as to assist in integrating various kinds of persistence systems (e.g., file systems, databases, LDAP, and R\/3). A new persistent storage system can be integrated into the main system by implementing a repository manager that is configured to work with that particular persistent storage system (e.g., a Lotus Notes respository manager). Repository  can comprise any appropriate system or subsystem for managing data, whether in highly organized form or in less-organized form. Repository  in turn communicates with user management , which can be any appropriate backend system whose responsbility is to store and organize user-related information. User management  can, for example, define data structures for users and for the roles of users in a system, and is responsible for tracking user actions and states, such as user login and access rights.","User object  comprises the software representation of a user that is logged onto the system . The object may be used to access information that is typically stored within the user management  system. The application may use the user object  to check access rights (e.g., whether a particular user can view a particular document), and the application generally displays details of this object, such as the user name. The object generally asks the repository framework resource for its attributes, and receives back the attributes, such as by primitive data types (e.g., strings integers, or floating point numbers).","The group object  is a collection that returns a list of users, and the application can then display the list. The repository framework may store a special resource known as a collection, and the group object  may obtain access to this resource. The group object  can be analogized to directories in a file system that manages various files.","Contact object  is a specialization of the user object. It provides the same information as a user object, but has a different semantic meaning. Generally, a contact is an external user (such as an employee at a partner company), while a user is someone who has physical access to the portal system. A contact may be provided with a login state that is always false.","Other components of system  provide the functionality through which the user interfaces  can operate. For example, collaboration framework  provides access to a number of collaboration services . Framework  may provide services to allow the scheduling and launch of collaboration sessions, to allow connection to a disparate range of collaboration services (and to limit access to particular services depending on the participants in a session and their individual access rights and abilities). In addition, framework  may provide for the tracking and auditing of collaboration sessions, so, for example, information about sessions (e.g., transcripts of chat sessions, documents that are used or edited in a virtual meeting, or audio or video files) are properly stored and indexed so that they can be located and used later.","Portal runtime  is the environment in which the portal applications may operate. For example, the lowest runtime may be a VM, or Java virtual machine (where Java is used to implement the portal). The next level may be the J2EE engine, which is the application server that operates like a VM application. The third level may be a J2EE engine service. The various other applications may then be deployed as services to the portal.",{"@attributes":{"id":"p-0041","num":"0042"},"figref":"FIG. 3","b":["60","61","65","71","61","62","64","62","64"]},"The semantic object provider  implements the Semantic Object class , which defines an application programming interface for creating and working with semantic objects. The semantic object implementation class  is derived from the semantic object class . It takes the \u201ccreate instance\u201d attribute, and performs the \u201cbaseResource\u201d operation to store information relating to the class persistently. The room implementation class , provided by the application, is derived from the semantic object implementation class , and provides generic functionality that is implemented in the semantic object base class. The semantic object provider  also implements an object registry , which interacts with classes implemented by a repository framework , as described below.","The repository framework  implements a resource , which defines an interface for receiving requests for information stored in a persistent data storage system. The resource class  defines objects having generic interfaces for interacting with the storage system (e.g., get\/setAttribute, lock\/unlock, and rename). In addition, the repository framework  implements a resource implementation , which is derived from the resource class  and from the object registry  that is implemented by the semantic object . The implementation maps or converts a semantic attribute (e.g., first name) to a generic attribute (e.g., getAttribute(\u201cFIRST NAME\u201d)). The object registry  maps information between the room interface and the database table (or other storage).","As shown, the connection between the semantic object class  and the resource class  may be implemented once centrally, such as the first time that an application needs access to a particular group of information. The connection to the resource may then be maintained, so that the application (or applications) do not need to repeatedly make the connection. For example, the application may start with a generic resource object by asking a resource factory the following:\n\n","The resource, when obtained, may then be cast to a semantic object, as follows:\n\n","The resource is then responsible for creating the semantic object instance. In the constructor, the resource can set itself as a return pointer.","Objects may also be type cast with the system. For example, the semantic object mechanism can create a new object from a resource that is of a different type (such as using the as( ) method in ). Other type cast mechanisms, such as the standard Java type cast, can also be used.",{"@attributes":{"id":"p-0048","num":"0051"},"figref":"FIG. 4","b":["80","82","84","86","88","90"]},"Once these steps have occurred, or if a connection has already been established, the provider may then pass the interpreted or converted request to a repository (box ). For example, while the incoming request could be in a semantic format, the outgoing request will be in a more generic format, with parameters that specify the required processing that is only implicit in the semantic request. Also, although the interpretation of the request is shown as occurring before the determination of whether a connection is open, the interpretation could occur after the determination, and the request could be partly interpreted (such as to determine its associated object) before the determination, and partly interpreted after.","After passing the request on, the semantic object waits for a response containing data. The semantic object or semantic object provider may receive the data (step ), and if the data has been provided in a type that differs from the requirements of the requesting application, the semantic object can type cast the data (step ) so as to provide it with the appropriate format for the application. At this point, the semantic object may pass the data to the application (step ).",{"@attributes":{"id":"p-0051","num":"0054"},"figref":"FIG. 5","b":["100","100","102","104","100","104","108","100","104","106","106"]},{"@attributes":{"id":"p-0052","num":"0055"},"figref":"FIG. 6","b":["110","112","114","110","114"]},"Various implementations of the systems and techniques described here can be realized in digital electronic circuitry, integrated circuitry, specially designed ASICs (application specific integrated circuits), computer hardware, firmware, software, and\/or combinations thereof. These various implementations can include implementation in one or more computer programs that are executable and\/or interpretable on a programmable system including at least one programmable processor, which may be special or general purpose, coupled to receive data and instructions from, and to transmit data and instructions to, a storage system, at least one input device, and at least one output device.","These computer programs (also known as programs, software, software applications or code) include machine instructions for a programmable processor, and can be implemented in a high-level procedural and\/or object-oriented programming language, and\/or in assembly\/machine language. As used herein, the term \u201cmachine-readable medium\u201d refers to any computer program product, apparatus and\/or device (e.g., magnetic discs, optical disks, memory, Programmable Logic Devices (PLDs)) used to provide machine instructions and\/or data to a programmable processor.","To provide for interaction with a user, the systems and techniques described here can be implemented on a computer having a display device (e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor) for displaying information to the user and a keyboard and a pointing device (e.g., a mouse or a trackball) by which the user can provide input to the computer. Other kinds of devices can be used to provide for interaction with a user as well; for example, feedback provided to the user can be any form of sensory feedback (e.g., visual feedback, auditory feedback, or tactile feedback); and input from the user can be received in any form, including acoustic, speech, or tactile input.","The systems and techniques described here can be implemented in a computing system that includes a back-end component (e.g., as a data server), or that includes a middleware component (e.g., an application server), or that includes a front-end component (e.g., a client computer having a graphical user interface or a Web browser through which a user can interact with an implementation of the systems and techniques described here), or any combination of such back-end, middleware, or front-end components. The components of the system can be interconnected by any form or medium of digital data communication (e.g., a communication network). Examples of communication networks include a local area network (\u201cLAN\u201d), a wide area network (\u201cWAN\u201d), and the Internet.","The computing system can include clients and servers. A client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other.","Although a few embodiments have been described in detail above, other modifications are possible. Portions of this disclosure discuss operation though a portal, but any of a number of access systems and methods may be used to manage collaboration sessions. The logic flows depicted in  do not require the particular order shown, or sequential order, to achieve desirable results. Other embodiments may be within the scope of the following claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"DRAWING DESCRIPTIONS","p":["These and other aspects will now be described in detail with reference to the following drawings.",{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 6"}]},"DETDESC":[{},{}]}
