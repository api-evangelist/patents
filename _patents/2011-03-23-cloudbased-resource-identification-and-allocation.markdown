---
title: Cloud-based resource identification and allocation
abstract: Systems, methods, and computer readable media for identifying resources to implement a service in a cloud computing environment are disclosed. In general, the disclosed methodologies analyze a cloud's ability to support a desired service while maintaining separation between the cloud's logical layers. For example, given a list of resources needed to implement a target service, a hierarchical plan may be generated. The plan may then be used by each layer to track and record the availability of various possible layer-specific resource selections. Since each layer may be permitted access only to that portion of the plan that is associated with, or applicable to, the specific layer, the logical separation between different layers may be enforced. As a consequence, each layer may implement its resource selection mechanisms in any desired manner.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08843633&OS=08843633&RS=08843633
owner: BMC Software, Inc.
number: 08843633
owner_city: Houston
owner_country: US
publication_date: 20110323
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DETAILED DESCRIPTION","Graphic Example","Algorithm Example","Algorithm Example","Algorithm Example"],"p":["This disclosure relates generally to the field of computer network management. More particularly, but not by way of limitation, it relates to techniques for identifying and allocating resources to provision a specified service in a cloud computing environment.","The North American National Institute for Standard and Technology (NIST) describes cloud computing as a model for enabling on-demand network access to a shared pool of configurable computing resources (e.g., networks, servers, storage, applications, and services) that can be rapidly provisioned with minimal management effort or service provider interaction. In many modern environments the implementation of a cloud may be conceptually divided into layers\u2014where each layer can \u201ctalk\u201d with only those layers directly above and below it (typically through Application Programming Interfaces or APIs). For example, The NIST describes three basic cloud model layers Software as a Service (SaaS), Platform as a Service (PaaS) and Infrastructure as a Service (IaaS). in one cloud environment the user may interact with a workload manager (at the SaaS layer) in which services are defined (e.g., a shopping cart web application). Conceptually below this may be a PaaS layer in which a given resource (e.g., a compute cluster) is defined which, in truth, may be comprised of one or more elements from the IaaS layer (e.g., compute platforms or blades).","When provisioning a new cloud-based service, a user typically provides a set of resource requirements. The task is then to determine if the necessary resources are available and, if so, to allocate them so that the service may be provided. In the past, one of three approaches are adopted for this task: brute force; merging of architectural layers; and finding an optimal solution. In the brute-force approach, an assumption is made that the necessary resources are available. Under this assumption, each needed resource is identified and allocated in turn. A drawback to this approach is that if \u2018N\u2019 resources of a specified type are needed, but only (N-1) of those resources are actually available, the process fails on the attempted allocation of the Nth resource. At that time, all prior allocations must be undone. For complex services, this approach can be very time consumptive and, in addition, inefficient in its use of typing up resources that ultimately cannot be used. In an approach that merges the architectural layers of a cloud, a single layer gains visibility to all aspects of a service's topology. While this can work, and work efficiently, it results in an architecture that is rigid and inflexible. No architectural layer implementation may be changed without affecting all other layers. In an optimal solution approach, a function may be generated based on the required resources whereafter all suitable resources are identified through an investigation of each layer to identify all possible solutions to satisfy the target service request (i.e., the function). Once identified, all possible solutions are evaluated against a measurement metric and the \u201cbest\u201d solution is chosen. A drawback to this approach is that it can be very time consumptive. For large systems (i.e., services requiring a number of different resources, some of which may be defined in terms of collections of other resources), the optimal solution may take an infinitely long time to identify.","Thus, it would be beneficial to provide a mechanism to identify those resources needed to satisfy a service request that is cost effective in terms of both time and resource use.","In one embodiment the invention provides a method to identify resources required to support an application. The method includes receiving a plan indicating all of the resources required to support the service and, further, having sections corresponding to different architectural layers in the computing system (e.g., first and second layers) within which the service is to be provided; identifying one or more eligible resources of a type needed to support the application from all the resources indicated by the plan; selecting a particular resource instance from the eligible resources; updating the plan to indicate the particular resource instance was selected; and calling a lower architectural layer to supply the selected particular resource instance. (In general, each architectural layer communicates only with those layers immediately above and below itself.)","In another embodiment, if a particular architectural layer needs multiple instances of a particular type of resource from its lower layer, it may make a separate call to that layer for each needed instance (e.g., in parallel). In this way, methods to identify selected resources may be made in parallel. In accord with this approach, if a lower architectural layer indicates a first instance of a particular type is not available, its immediately higher layer may select another eligible instance of the resource (if one is available) and issue another call to its lower layer. Once all of the resources needed to support a desired application, the identified resources may be allocated (without fear of the process failing) and provisioned to supply the service. Illustrative web-based applications that may be deployed using the disclosed technology include a shopping cart and a wiki application (e.g., embodied in a two-tier architecture that includes a database and some PHP code that runs in Apache).","In still other embodiments, the disclosed methods may be implemented in one or more program modules and stored on a tangible (i.e., non-transitory) storage medium. In yet another embodiment, computer systems may be interconnected to provide the described functionality.","This disclosure pertains to systems, methods, and computer readable media for identifying resources to implement a service in a cloud computing environment. (As used herein, the term resource may be physical or virtual.) In general, techniques are disclosed herein for analyzing a cloud's ability to support a desired service while maintaining separation between the cloud's logical (or architectural) layers. In one embodiment, given a list of resources needed to implement a target service, a hierarchical plan may be generated. The plan may then be used by each layer to track and record the availability of various possible layer-specific resource selections. Once all of the necessary resources are identified, they may be safely and quickly allocated and provisioned to implement the service. In another embodiment, each layer may be permitted access only to that portion of the plan that is associated with, or applicable to, the specific layer. Because the logical separation between different layers is enforced, each layer may implement its resource selection mechanisms in any desired manner without interfering with the operation of other layers within the system.","In the following description, for purposes of explanation, numerous specific details are set forth in order to provide a thorough understanding of the inventive concept. As part of the this description, some structures and devices may be shown in block diagram form in order to avoid obscuring the invention. Moreover, the language used in this disclosure has been principally selected for readability and instructional purposes, and may not have been selected to delineate or circumscribe the inventive subject matter, resort to the claims being necessary to determine such inventive subject matter. Reference in the specification to \u201cone embodiment\u201d or to \u201can embodiment\u201d means that a particular feature, structure, or characteristic described in connection with the embodiment is included in at least one embodiment of the invention, and multiple references to \u201cone embodiment\u201d or \u201can embodiment\u201d should not be understood as necessarily all referring to the same embodiment.","It will be appreciated that in the development of any actual implementation (as in any development project), numerous decisions must be made to achieve the developers' specific goals (e.g., compliance with system- and business-related constraints), and that these goals will vary from one implementation to another. It will also be appreciated that such development efforts might be complex and time-consuming, but would nevertheless be a routine undertaking for those of ordinary skill in the network management and resource allocation field having the benefit of this disclosure.","Referring to , resource allocation operation  in accordance with one embodiment is shown in flowchart form. To begin, the resources required to support a target service are specified (block ). In one embodiment the required resources may be specified through blueprint . Application blueprint  may be thought of as a complete definition for a given application (e.g., a web-based shopping cart application). Blueprint  describes the application's requirements in a logical fashion and may even define or specify an application's topology. Blueprint  may also include a deployment model aspect that defines how blueprint 's logical elements may be mapped to a particular data center environment and for a particular deployment intent. Additional details concerning blueprints and deployment models may be found in the commonly owned and co-pending U.S. patent application entitled \u201cApplication Blueprint and Deployment Model for Dynamic Business Service Management (BSM),\u201d Ser. No. 12\/847,949, which is hereby incorporated in its entirety.","Plan  may then be generated (block ) as resources eligible to support the service are identified (block ). In some embodiments, plan  may be implemented as a tree-like object that is at least partially accessible from each of the different layers. In general, plan  may record the details of what has been allocated for each required resource in the blueprint's deployment model and may further be annotated with details of how\/where that resource was allocated. More specifically, in one embodiment each node in plan  includes: the type of resource required; the resource instances available (after taking into account any system or user specified rules\/policies) and, for each instance, an indication of whether that instance was evaluated for eligibility and failed (i.e., determined not to be available for a target application); the currently selected resource; and related resources that are related to the currently selected resource.","As suggested in , acts in accordance with block  start at a first, top-most layer, and iteratively or recursively pass to lower layers resource requests. (See discussion below with respect to .) If the necessary resources are identified and available (the \u201cYES\u201d prong of block ), they may be allocated to instantiate the desired service (block ). If, on the other hand, the required resources either do not exist or are not available (the \u201cNO\u201d prong of block ), service instantiation fails (block ). In this latter case, a message may be sent (in any fashion) to the individual requesting the service and\/or logged.","By way of providing context for the following discussion, consider  in which cloud environment  includes provisioning server , configuration management database (CMDB) repository , storage resource pool , compute resource pool , and a pool of \u201cother\u201d resources  coupled through network . It will be recognized that multiple physical resources may be used to implement the illustrated logical functions. In like fashion, multiple logical functions may be implemented using a single physical resource. More specifically, provisioning server  may be one or more physical devices. Similarly, storage resource pool  and compute resource pool  may include any number of physical and\/or logical storage devices and processing elements respectively. Resource pool  represents an aggregation of all other types of resources used by cloud environment  (e.g., routers, switches, firewalls, printers, personal computer systems such as desktop, notebook and tablet computer systems, and mobile devices). Further, network  represents a method of communicatively coupling devices and may include wide area networks (WANs), local area networks (LANs), intranets, or the Internet, any combination of these technologies and either wired or wireless network communication capabilities.","Referring now to , resource identification operation  in accordance with one embodiment uses plan  to identify one or more level-specific resources needed to satisfy the plan (block ). If the required resource is not available (the \u201cNO\u201d prong of block ), operation  returns failure for the current layer (block ). (See discussion below.) If one or more needed resources are available (the \u201cYES\u201d prong of block ), one resource instance is selected from the identified eligible resources (block ) and plan  is updated to reflect the selection (block ). A further check may be made to determine if the selected resource is itself comprised of one or more resources from a lower level (block ). If the selected resource needs no additional resources (the \u201cNO\u201d prong of block ), resource identification operation  returns success for the current layer (block ). If the selected resource needs at least one resource from a lower layer (the \u201cYES\u201d prong of block ), an indication of the needed resource and at least a part of plan  are used to issue a request for the resource to the next lower layer (block )\u2014such action causing a (logically) recursive call to block .","With respect to acts in accordance with block , the identification of one or more resources may be made using any desired user or system specified constraints (e.g., policies). For example, plan  may simply require a relational database. System policy may, however, prioritize the selection of relational databases such that Oracle\u00ae databases are selected first if available, followed by a MySQL\u00ae database if available, followed by a Microsoft Access\u00ae database if neither of the first two are available. (ORACLE is a registered trademark of the Oracle International Corporation. MYSQL is a registered trademark of MySQL AB, a Swedish company. MICROSOFT ACCESS is a registered trademark of the Microsoft Corporation.)","With respect to acts in accordance with block , selection of one resource instance from multiple available resource instances may be made using any desired user or system specified constraints (e.g., policies). For example, selection criteria may be made to maximize performance, equalize load, minimize cost, etc.","Referring to , in one embodiment each layer may be implemented in terms of three functional elements, components or modules: Layer Control module ; Advisor module ; and Policy Engine . As illustrated, Layer Control module  receives resource requests from higher layers , issues resource requests to lower layers , receives results in response to those requests from lower layers  and passes results to higher layers  (all through, for example, layer APIs  and ). In addition, Layer Control module  may use Advisor module  to select one resource instance from a set or collection of available resource instances and may further be guided in its selection by Policy Engine module . In one embodiment, only that part of the plan (e.g., plan ) applicable to the receiving layer is accessible to that layer. For example, in a plan organized as a tree structure, if layer-A deals with resources at level-A, that is the only part of the entire plan that it may access. In this manner, separation may be maintained between layers. In another embodiment, Layer Control module  may incorporate the functions of either, or both, Advisor module  and Policy Engine module . One benefit of maintaining the functional separation suggested by  is that each function may then be updated without impacting the operation of the other functions.","Referring to , illustrative system  illustrates a four-layer cloud architecture which includes root node  (layer 1), two pod resources  and  (layer 2), five network container resources - (layer 3) and nine virtual cluster resources - (layer 4). As used here, the term \u201cpod\u201d refers to a modular unit of data center components. Pods provide a predictable set of resource characteristics (e.g., network, compute, and storage resource pools, power, and space consumption) that may be added repeatedly as needed; the phrase \u201cnetwork container\u201d is an abstraction that permits network administrators to configure physical and virtual network infrastructure and network services through templates; and the phrase \u201cvirtual cluster\u201d refers to a collection of resources that appear to outside clients as a single virtual cluster IP address, where this address is not tied to a specific physical device.","The goal in this example (e.g., as specified in a blueprint) is to identify those resources needed by a target application: 1 pod, 1 network container, and 1 virtual cluster. Track  illustrates a selection path through system  that could be taken by a resource identification operation in accordance with one embodiment (e.g., operation ). Initially pod  was determined not to be eligible, as indicated by diagonal hashing (e.g., through the evaluation of policies by a layer control module and, possibly, the use of an Advisor module and Policy Engine as depicted in ). As a consequence, the provisioning operation evaluated pod  finding it eligible. Subsequent evaluation determined that both network containers  and  were eligible while network container  was not. Selection path  indicates that network container  was (arbitrarily) chosen first for further evaluation, but when it was determined that its only virtual cluster  was not eligible, the provisioning operation backtracked to the pod layer. There it found network container  and virtual cluster  eligible. Having identified as eligible the target application's required resources the resource identification operation is complete. One of ordinary skill in the art will recognize that while a depth-first search of system  was adopted here, that is not necessary\u2014any path through a system's architecture may be adopted. Also, while the use of policies was noted only in connection with the evaluation of pod eligibility, the same process may be used to make all eligibility determinations. In one embodiment each layer may employ its own layer control module (e.g., Layer Control module ) and either an advisor module (e.g., Advisor module ) and\/or a policy engine (e.g., Policy Engine ).","Problem Set-Up","To identify the resources needed to support a target application, a resource identification operation (e.g., operation ) takes as input, the type of resource to allocate (call this type \u2018X\u2019), the parent resource to draw from such as a network container, compute pool or virtual cluster (call this instance \u2018P\u2019), and a plan object. Assume that a target service's blueprint requires three (3) instances of type \u2018Y\u2019 resource and that these should be drawn from type \u2018X\u2019 resources.","Successful Resource Identification","Referring to , illustrative resource identification operation  as it relates to the current example is shown. To begin, a check may be made to the current plan to determine if it has a record for a resource of type X related to P (block ). If such a record exists (the \u201cYES\u201d prong of block ), a further check may be made to determine if a lock exists on the resource (block ). If the resource is locked (the \u201cYES\u201d prong of block ), operation  waits for the lock to release (block ) whereafter it returns to block . If the current plan has a record for resource X but there is no lock (the \u201cNO\u201d prong of block ), a further check may be made to determine if the identified resource satisfies any specified affinity requirements (block ). If the affinity requirements are satisfied, or if there are no affinity requirements (the \u201cYES\u201d prong of block ), operation  continues at block  in  (see discussion below). If there are affinity requirements that are not met by the identified resource (the \u201cNO\u201d prong of block ), processing returns to block  to identify another potential resource. If the current plan does not have a record for resource of type X (the \u201cNO\u201d prong of block ), a lock may be acquired related to the type X information in the plan (block ). Next, all of the eligible resources of type X available to the current layer within the domain of P may be be identified (block ) and the list of one or more available resources attached to the plan (block ). At this point, it may be useful to recall that identification of eligible resources may make use of policies or rules. Following acts in accordance with block , a specific one of the available resource instances may be selected, call this instance S (block ). In one embodiment, the selection of a specific instance may be performed by an advisor module (e.g., Advisor module ) in collaboration, for example, with a layer control module (e.g., Layer Control module ) and\/or a policy engine (e.g., Policy Engine ). Once selected, the plan may be updated with information about instance S (block ), whereafter the lock taken in accordance with block  may be released (block ).","Referring to , after releasing the lock in accordance with block  a check may be made to determine if resources from a lower layer are required (block ). In the current example, it was noted that the target application required three (3) instances of type \u2018Y\u2019 resource and that these should be drawn from type \u2018X\u2019 resources. In such a case, lower layer resources are required (the \u201cYES\u201d prong of block ) and, as such, three calls to the next lower layer may be issued for instances of type Y (block ). Operation  would then (logically) continue at block \u2014only this time it would be a different layer performing the actions. That is, operation  (like operation ) may \u201crecurse.\u201d Returning now to block , if no additional lower layer resources are required (the \u201cNO\u201d prong of block ), the layer waits for a return from its lower layer (block ). On return, a check may be made to determine if the current layer is the top most layer (block ). If the current layer is the top most layer (the \u201cYES\u201d prong of block ), Operation  completes successfully. If the current layer is not the top most layer (the \u201cNO\u201d prong of block ), a return to the next upper layer may be made (block ). The effect of returning to a higher layer is a return to block  which, in turn, leads to block .","At the end of operation  the plan may contain details about what resources have been selected at each layer. It is noted that during operation , the system may also place soft-locks on the selected resources as well as take established soft-allocations into account. As used herein, the term \u201csystem\u201d refers to the collection of operating modules at each layer. For example, if there are 3 layers and each layer includes a layer control module (e.g., module ), an advisor module (e.g., module ) and a policy engine (e.g., Policy Engine ), the \u201csystem\u201d would refer the aggregate collection of modules.","Dealing With Failure","Referring now to , if an advisor module had indicated that S was not a viable option (perhaps because of capacity), failure response operation  could be invoked. When the call to operation  indicates that S is not a viable option, the layer above where P was selected receives an event indicating the failure (block ). That layer's control module (or functional equivalent) may then cancel the child processes that are executing based on the decision to select instance P (block ). After all processes have been terminated, the control module may take a lock on the plan (block ) and update the plan to indicate the instance P was attempted and failed (block ). If another instance is available (the \u201cYES\u201d prong of block ), it may be selected and the lock taken in accordance with block  released (block ) whereafter operation  may once again be initiated. If another instance is not available (the \u201cNO\u201d prong of block ), the lock taken in accordance with block  may be release (block ) after which a check may be made to determine if the current layer is the \u201ctop layer.\u201d If such is the case (the \u201cYES\u201d prong of block ), the resource identification process fails\u2014meaning that the system cannot satisfy the users request (block ). If the current layer is not the top most layer (the \u201cNO\u201d prong of block ), the failure may be reported to the next higher layer (block ).","Various changes in the components as well as in the details of the illustrated operational methods are possible without departing from the scope of the following claims. For instance, the disclosed methodologies are not restricted to cloud-based computing systems, but rather, may be useful in any computer system that may be modeled as a layered system.","It will be recognized that the disclosed methodologies (and their functional equivalents) may be embodied as one or more software program modules that can be executed by one or more programmable control devices. A programmable control device (e.g., provisioning server , one or more devices in compute resource pool  or a programmable resource in pool ) may include any programmable controller device including, for example, one or more members of the Intel Atom\u00ae, Core\u00ae, Pentium\u00ae and Celeron\u00ae processor families from Intel Corporation. (INTEL, INTEL ATOM, CORE, PENTIUM, and CELERON are registered trademarks of the Intel Corporation.) Custom designed state machines may be used to implement some or all of the operations disclosed herein. Such devices may be embodied in a hardware device such as an application specific integrated circuits (ASICs) and field programmable gate array (FPGAs). Storage devices suitable for tangibly embodying program instructions (e.g., storage pool  objects as well as long-term storage and random access memory included in a programmable device such as provisioning server ) include, but are not limited to: magnetic disks (fixed, floppy, and removable) and tape; optical media such as CD-ROMs and digital video disks (\u201cDVDs\u201d); and semiconductor memory devices such as Electrically Programmable Read-Only Memory (\u201cEPROM\u201d), Electrically Erasable Programmable Read-Only Memory (\u201cEEPROM\u201d), Programmable Gate Arrays and flash devices.","Finally, it is to be understood that the above description is intended to be illustrative, and not restrictive. For example, the above-described embodiments may be used in combination with each other. Many other embodiments will be apparent to those of skill in the art upon reviewing the above description. The scope of the invention therefore should be determined with reference to the appended claims, along with the full scope of equivalents to which such claims are entitled. In the appended claims, the terms \u201cincluding\u201d and \u201cin which\u201d are used as the plain-English equivalents of the respective terms \u201ccomprising\u201d and \u201cwherein.\u201d"],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIGS. 6A and 6B"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 7"}]},"DETDESC":[{},{}]}
