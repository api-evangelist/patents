---
title: Method and system for pluggable terminal with TAPI
abstract: Systems, methods, and data structures for pluggable terminals are provided. Pluggable terminals are part of client and server TAPI communications systems. Pluggable terminal allow third parties to provide their own media processing devices and implement control methods for those devices. Methods for plugging in a pluggable terminal and conducting a communications session using the new pluggable terminal are described. A data structure for a pluggable terminal type has a wrapper around a media processing device control method. A data structure for registering a pluggable terminal has a terminal class name, a unique identifier, and a set of media types supported by the pluggable terminal. A data structure for a terminal base class has an interface for plugging in a pluggable terminal and another interface for a TAPI application component.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06904485&OS=06904485&RS=06904485
owner: Microsoft Corporation
number: 06904485
owner_city: Redmond
owner_country: US
publication_date: 20000825
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["RELATED APPLICATIONS","TECHNICAL FIELD","COPYRIGHT NOTICE\u2014PERMISSION","BACKGROUND","SUMMARY","DETAILED DESCRIPTION","CONCLUSION"],"p":["This application is a continuation-in-part of U.S. Ser. No. 09\/157,469, filed Sep. 21, 1998, now U.S. Pat. No. 6,343,116 entitled \u201cComputer Telephony Application Programming Interface.\u201d U.S. Ser. No. 09\/157,469 is incorporated herein by this reference and is not admitted to be prior art with respect to the present invention.","This invention relates generally to computer telephony, and more particularly to an application programming interface for computer telephony.","A portion of the disclosure of this patent document contains material, which is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure as it appears in the Patent and Trademark Office patent files or records, but otherwise reserves all copyright rights whatsoever. The following notice applies to the software and data as described below and in the drawings attached hereto: Copyright\u00a9 1999, 2000, Microsoft Corporation, All Rights Reserved.","With the advent of computer networking, such as local-area networks (LAN), wide-area networks (WAN), intranets and the Internet, several applications have become popularized. In one such application, a user of a first client computer is able to \u201ccall\u201d and communicate with a user of a second client computer. This type of application is generally known as computer telephony.","To accommodate computer telephony, operating systems such as versions of the MICROSOFT WINDOWS operating systems include telephony application programming interfaces, or TAPI's. (It is noted that TAPI typically refers specifically to Microsoft's Telephony API and is not usually used in reference to other telephony API's. However, as used in this application, TAPI refers to telephony API's generically.) Application programming interfaces (API's) are interfaces by which computer programs can provide for specific functionality that is included within the operating systems. This means that programmers developing such programs do not have to develop their own code to provide this functionality, but rather can rely on the code within the operating system itself. Thus, a TAPI relates to a computer telephony application programming interface.","In the MICROSOFT WINDOWS 95 operating system, as well as other versions of the MICROSOFT WINDOWS operating system, TAPI version 2.1 provides for some basic computer telephony functionality for utilization by computer programs. In particular, TAPI 2.1 provides for call control\u2014the initiation and termination of computer telephony calls. However, call control is only one aspect of computer telephony. For example, once a computer telephony call is placed, the media aspects of the call must also be controlled.","However, TAPI 2.1, as well as other prior art telephony API's, do not provide for this functionality.","The media aspects of the call relate to the information (or, media) that is itself the subject of the call. For example, a voice call includes audio information transmitted by both the caller and callee of a call, a video call includes both audio information and visual (video) information, etc. Currently, any multimedia devices that are to be used in conjunction with a computer telephony call\u2014such as microphones to detect sound, and speakers to play sound\u2014must have specific drivers written for this purpose, to be used specifically in conjunction with computer telephony calls. Other multimedia devices that may be present, in other words, may not be usable in conjunction with the call.","TAPI 2.1, as well as other prior art telephony API's, are also represented as a framework that is not easily expanded. For example, TAPI 2.1 is procedurally based, which means the API cannot easily accommodate new aspects and features without redeveloping the entire API. For the reasons outlined in this background, as well as other reasons, there is, therefore, a need for the present invention.","The above-identified problems, shortcomings and disadvantages with the prior art, as well as other problems, shortcoming and disadvantages, are solved by the present invention, which will be understood by reading and studying the specification and the drawings. In one embodiment, a system includes at least one call control object and at least one media control object. The call control objects are to initiate and terminate a computer telephony call having a media stream. The media control objects are to end-point the media stream of the computer telephony call. In a further embodiment, there is also a media control manager to instantiate a media control object for each multimedia device of the system.","Thus, embodiments of the invention provide for advantages not found in the prior art. The invention provides for well-defined media control: besides call control objects, embodiments of the invention include media control objects to end-point (for example, source or sink) the media stream of a computer telephony call. The invention provides for the utilization of multimedia devices (including virtual devices as well as physical devices) that may not have been installed specifically for telephony purposes, via the media control manager instantiating media control objects for such devices. Furthermore, the invention provides for an object-based hierarchy to TAPI's (e.g., via the call control objects and the media control objects), to maximize flexibility and further expansion of TAPI's based on the invention.","The invention includes systems, methods, computers, application programming interfaces, and computer-readable media of varying scope. Besides the embodiments, advantages and aspects of the invention described here, the invention also includes other embodiments, advantages and aspects, as will become apparent by reading and studying the drawings and the following description.","In the following detailed description of exemplary embodiments of the invention, reference is made to the accompanying drawings which form a part hereof, and in which is shown by way of illustration specific exemplary embodiments in which the invention may be practiced. These embodiments are described in sufficient detail to enable those skilled in the art to practice the invention, and it is to be understood that other embodiments may be utilized and that logical, mechanical, electrical and other changes may be made without departing from the spirit or scope of the present invention. The following detailed description is, therefore, not to be taken in a limiting sense, and the scope of the present invention is defined only by the appended claims.","The detailed description is divided into five sections. In the first section, the hardware and the operating environment in conjunction with which embodiments of the invention may be practiced are described. In the second section, a system of one embodiment of the invention is presented. In the third section, a method, in accordance with an embodiment of the invention, is provided. In the fourth section, various system, method, and data structure embodiments of one aspect of the present invention, namely pluggable terminals, are described. Finally, in the fifth section, a conclusion of the detailed description is provided.","Hardware and Operating Environment","Referring to , a diagram of the hardware and operating environment in conjunction with which embodiments of the invention may be practiced is shown. The description of  is intended to provide a brief, general description of suitable computer hardware and a suitable computing environment in conjunction with which the invention may be implemented. Although not required, the invention is described in the general context of computer-executable instructions, such as program modules, being executed by a computer, such as a personal computer. Generally, program modules include routines, programs, objects, components, data structures, etc., that perform particular tasks or implement particular abstract data types.","Moreover, those skilled in the art will appreciate that the invention may be practiced with other computer system configurations, including hand-held devices, multiprocessor systems, microprocessor-based or programmable consumer electronics, network PCS, minicomputers, mainframe computers, and the like. The invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment, program modules may be located in both local and remote memory storage devices.","The exemplary hardware and operating environment of  for implementing the invention includes a general purpose computing device in the form of a computer , including a processing unit , a system memory , and a system bus  that operatively couples various system components include the system memory to the processing unit . There may be only one or there may be more than one processing unit , such that the processor of computer  comprises a single central-processing unit (CPU), or a plurality of processing units, commonly referred to as a parallel processing environment. The computer  may be a conventional computer, a distributed computer, or any other type of computer; the invention is not so limited.","The system bus  may be any of several types of bus structures including a memory bus or memory controller, a peripheral bus, and a local bus using any of a variety of bus architectures. The system memory may also be referred to as simply the memory, and includes read only memory (ROM)  and random access memory (RAM) . A basic input\/output system (BIOS) , containing the basic routines that help to transfer information between elements within the computer , such as during start-up, is stored in ROM . The computer  further includes a hard disk drive  for reading from and writing to a hard disk, not shown, a magnetic disk drive  for reading from or writing to a removable magnetic disk , and an optical disk drive  for reading from or writing to a removable optical disk  such as a CD ROM or other optical media.","The hard disk drive , magnetic disk drive , and optical disk drive  are connected to the system bus  by a hard disk drive interface , a magnetic disk drive interface , and an optical disk drive interface , respectively. The drives and their associated computer-readable media provide nonvolatile storage of computer-readable instructions, data structures, program modules and other data for the computer . It should be appreciated by those skilled in the art that any type of computer-readable media which can store data that is accessible by a computer, such as magnetic cassettes, flash memory cards, digital video disks, Bernoulli cartridges, random access memories (RAMs), read only memories (ROMs), and the like, may be used in the exemplary operating environment.","A number of program modules may be stored on the hard disk, magnetic disk , optical disk , ROM , or RAM , including an operating system , one or more application programs , other program modules , and program data . A user may enter commands and information into the personal computer  through input devices such as a keyboard  and pointing device . Other input devices (not shown) may include a microphone, joystick, game pad, satellite dish, scanner, or the like. These and other input devices are often connected to the processing unit  through a serial port interface  that is  coupled to the system bus, but may be connected by other interfaces, such as a parallel port, game port, or a universal serial bus (USB). A monitor  or other type of display device is also connected to the system bus  via an interface, such as a video adapter . In addition to the monitor, computers typically include other peripheral output devices (not shown), such as speakers and printers.","The computer  may operate in a networked environment using logical connections to one or more remote computers, such as remote computer . These logical connections are achieved by a communication device coupled to or a part of the computer ; the invention is not limited to a particular type of communications device. The remote computer  may be another computer, a server, a router, a network PC, a client, a peer device or other common network node, and typically includes many or all of the elements described above relative to the computer , although only a memory storage device  has been illustrated in FIG. . The logical connections depicted in  include a local-area network (LAN)  and a wide-area network (WAN) . Such networking environments are commonplace in office networks, enterprise-wide computer networks, intranets and the Internet, which are all types of networks.","When used in a LAN-networking environment, the computer  is connected to the local network  through a network interface or adapter , which is one type of communications device. When used in a WAN-networking environment, the computer  typically includes a modem , a type of communications device, or any other type of communications device for establishing communications over the wide area network , such as the Internet. The modern , which may be internal or external, is connected to the system bus  via the serial port interface . In a networked environment, program modules depicted relative to the personal computer , or portions thereof, may be stored in the remote memory storage device. It is appreciated that the network connections shown are exemplary and other means of and communications devices for establishing a communications link between the computers may be used.","The hardware and operating environment in conjunction with which embodiments of the invention may be practiced has been described. The computer in conjunction with which embodiments of the invention may be practiced may be a conventional computer, a distributed computer, or any other type of computer; the invention is not so limited. Such a computer typically includes one or more processing units as its processor, and a computer-readable medium such as a memory. The computer may also include a communications device such as a network adapter or a modem, so that it is able to communicatively couple other computers.","System","In this section of the detailed description, a description of a computerized system according to an embodiment of the invention is provided. The description is provided by reference to FIG.  and FIG. . Referring first to , an object hierarchy according to an embodiment of the invention is shown. The system includes a telephony application programming interface object (TAPI object) , an address object , a terminal object , a call object , and a call-hub object . For each of objects , ,  and , only a single object of each type is shown in  for purposes of clarity; however, there can be in one embodiment of the invention multiple instantiations of each of these objects. Each of the objects , ,  and  may in one embodiment correspond to a specific means for performing functionality of the object.","The interface object  provides an interface by which computer programs can access the functionality provided by these other objects. This means that the computer programs themselves do not have to include code for this functionality, but instead can rely on the functionality provided by the objects themselves as already existing, and as interfaced to such programs via the interface object . Application programming interfaces within operating systems such as versions of the MICROSOFT WINDOWS operating system are known within the art.","The address object  is a type of first-party call control object. A call control object is an object that provides for the initiation and termination of a computer telephony call having a media stream\u2014that is, the object provides for the connection and ending of a call. In particular, the address object  is an object over which a computer telephony call may be placed. That is, the address object  represents a line or device that can make or receive calls on it. In different embodiments of the invention, the object represents a modem attached to a PSTN (Public Switching Telephone Network) phone line, an ISDN (Integrated Services Digital Network) hardware card attached to an ISDN line, a DSL (Digital Subscriber Loop) modem attached to a PSTN phone line having DSL capability, and an IP (Internet Protocol) address that is able to make IP telephony calls. However, the invention is not limited to a particular representation. The address object  is a first-party call control object in that it relates to a party of the telephony call\u2014for example, the caller or callee of the telephony call\u2014as opposed to a third party not specifically of the telephony call.","The terminal object  is a type of media control object. A media control object is an object that end-points the media stream of a computer telephony call. The media stream of a computer telephony call is the information that actually makes up the call\u2014for example, audio information in the case of a voice call, audio and image (video) information in the case of a video call, etc. A media control object end-points the media stream in that it can be a sink object, which is a finishing end point such as speaker or a monitor where the media stream ends or is \u201csunk\u201d after it has been communicated from one party to the call to another party to the call, or a source object, which is a beginning end point such as a microphone or a speaker where the media stream begins or is \u201csourced\u201d such that it is then communicated from one party to the call to another party to the call. The terminal object  can represent physical devices, such as the microphone or speakers on a sound card, a video camera, and a phone, as well as more dynamic, virtual devices, such as a video window on the screen, a file to which the media stream is saved, and a DTMF (Dual Tone Multiple Frequency) detector.","The call object  is another type of first-party call control object. In particular, the call object  represents an end-point of the computer telephony call. For example, for a caller to callee direct call, there would be two call objects , a first object representing the first end point of the call, and a second object representing the second end point of the call. In a conference call, there would be more than two call objects , one object  for each participant (end point).","The call-hub object  is a third-party call control object. The call-hub object  relates the call objects  for a particular computer telephony call. In other words, it represents a telephony connection itself, and is basically a collection of call objects that are all related because they are on the same telephony connection. For example, one type of call-hub object  is a tracking object in a call center environment, to track the callers on a particular call, the duration of the phone call, etc. A third-party call control object is also able to initiate and terminate a phone call. However, the object is a third-party call control object in that it does not specifically relate to a particular party of the telephony call, but rather may encompass all the parties of the call (as well as information regarding the call).","Referring next to , a block diagram of an architecture according to one embodiment of the invention is shown. The architecture includes a TAPI application , the TAPI , a telephony server , a telephony service provider , a media stream provider , and a terminal manager . The TAPI application  is a computer program that utilizes the functionality provided by the TAPI . That is, the TAPI application  is any type of computer program that utilizes the TAPI , through which the application is able to access telephony call control and media control functionality provided by the TAPI .","The telephony server  and the telephony service provider  make up the call control aspects of the architecture of FIG. . The telephony server  keeps track of all telephony capabilities on a given computerized system; for example, such as that found within versions of the MICROSOFT WINDOWS NT operating system. The telephone service provider  is a component used to control a specific piece of telephony hardware. Although only one provider  is shown in , the invention is not so limited; there can be many such providers installed.","The media stream provider  and the terminal manager  make up the media control aspects of the architecture of FIG. . The media stream provider  is an extension of the provider , and works together with the provider  to implement call control (via the provider ) and media control (via the provider ). All call control requests proceed through the telephony server  to the provider , and all media control requests proceed through to the provider . The media stream provider  is a component used to control a specific media stream (such as audio, video, etc.). Furthermore, there is a media stream provider  for each different media stream; although only one provider  is shown in , the invention is not so limited\u2014there can be many such providers installed.","The terminal manager  is a media control manager. It is a component that instantiates a media control object for each installed multimedia device. That is, it is a component that allows telephony applications (such as application ) to use any multimedia device installed within a telephony environment. When the manager  is initialized, it discovers all multimedia devices that it can use that are installed on a given computer, such as sound cards, video capture cards, as well as other multimedia hardware; the invention is not so limited. The manager than creates a media control object, such as a terminal object, for each of these devices. The manager  also creates terminal objects or media control objects for other media sources or sink that do not necessarily correspond to hardware, but rather to virtual devices. These types of device represent media stream processing that is performed by the computer itself, rather than specific hardware. For example, these types of terminals may include a video window, a speech recognition engine, and a file; the invention is not so limited.","The TAPI  in one embodiment has an interface that defines how the provider  communicates with the terminal manager . This interface allows any provider  (there may be more than one provider , although for purposes of clarity only one is shown in ) to query the manager  for the devices that are represented as terminal or media control objects. The interface also allows the provider  to determine from the manager  how to include these devices within media streams that the provider  is to set up. Therefore, the manager  allows any provider  to access the same set of terminal or media control objects, and use them with any telephony hardware.","Exemplary Methods","In this section of the detailed description, exemplary methods according to embodiments of the invention are presented. This description is provided in reference to FIGS. () through (). These exemplary methods are desirably realized at least in part as one or more programs running on a computer\u2014that is, as a program executed from a computer-readable medium such as a memory by a processor of a computer. The programs are desirably storable on a computer-readable medium such as a floppy disk or a CD-ROM, for distribution and installation and execution on another (suitably equipped) computer.","Thus, in one embodiment, a computer program is executed by a processor of a computer from a medium therefrom, where the program may include address objects, call objects, terminal objects, and call-hub objects, as described in the previous section of the detailed description. Each of these objects may in one embodiment also correspond to a specific means for performing the functionality of the object. In another embodiment, the computer program also includes a terminal manager, which detects a plurality of multimedia devices and instantiates a terminal object for each multimedia device detected, as has also been described in the previous section of the detailed description.","Referring now to FIG. (), a flowchart of a method for placing an outgoing computer telephony call, according to an embodiment of the invention, is shown. In , a TAPI object is instantiated by an application program so that the program is able to use the functionality provided by the TAPI. In , the TAPI object is initialized. For example, a terminal manager is run to instantiate terminal objects for physical and virtual multimedia devices, as has been described in the previous section of the detailed description.","In , the TAPI object is queried for an enumeration of the address objects available from the TAPI object. Each address object has certain telephony capabilities\u2014for example, one may relate to an ISDN line, another to a PSTN line, etc. Thus, in , each address object is queried to learn its telephony capabilities. The desired address object or objects are then selected, depending on the type of call desired (e.g., a regular voice call may go over a PSTN line, a video call may go over one or more ISDN lines, etc.).","In , a call object is instantiated from a desired address object or objects. The call object thus relates to the computer performing the method of FIG. () as being the caller for a specific computer telephony call utilizing the desired address object or objects. In , the desired address object or objects are queried for an enumeration of the terminal objects available from the address object or objects. For example, an address object relating to a PSTN line over which voice calls are placed may have a terminal object relating to a microphone and a terminal object relating to a sound card connected to a speaker. Depending on the type of call desired, then, in  at least one desired terminal object enumerated in  is selected. Finally, in , the outgoing computer telephony call is connected (i.e., placed) over the desired address object or objects utilizing the desired terminal object or objects.","Thus, placing a computer telephony call according to the embodiment of the invention of FIG. () involves determining the address objects that are available such that a call may be placed over them, and selecting a desired address object or objects. A call object is created for the specific call to be placed. The terminal objects that are available for the utilized address objects are then determined, and the desired terminal objects are selected. The call is then placed, such that the address objects represent the communication media over which the call is placed, and the terminal objects represent the multimedia devices that act as end points for the media stream communicated over the communication media.","Referring next to FIG. (), a flowchart of a method for receiving an incoming computer telephony call, according to an embodiment of the invention, is shown. In , a TAPI object is instantiated by an application program so that the program is able to use the functionality provided by the TAPI. In , the TAPI object is initialized. For example, a terminal manager is run to instantiate terminal objects for physical and virtual multimedia devices, as has been described in the previous section of the detailed description.","In , the TAPI object is queried for an enumeration of the address objects available from the TAPI object. Each address object has certain telephony capabilities\u2014for example, one may relate to an ISDN line, another to a PSTN line, etc. Thus, in , each address object is queried to learn its telephony capabilities. The desired address object or objects are then selected, depending on the type of call that is desired to be listened for (e.g., a regular voice call may be received over a PSTN line, a video call may be received over one or more ISDN lines, etc.).","In , an event callback is instantiated and registered on the TAPI object. The event callback is a request by the application program performing the method of FIG. () to have the TAPI object notify the application program when the desired event occurs\u2014in this case, when an incoming call is received. In , the desired address object or objects are also registered with the TAPI object. These are the address object or objects over which an incoming computer telephony call is to be listen for by the TAPI object, such that upon occurrence of such an event, the application program performing the method of FIG. () is notified. Thus, in , a notification of an incoming computer telephony call from the TAPI object is received on the event callback. After receiving notification, the available terminals are enumerated  and the desired terminals are selected . In , the incoming computer telephony call is connected (i.e., received) over the desired address object or objects.","As has been described, receiving a computer telephony call according to the embodiment of the invention of FIG. () involves determining the address objects that are available such that a call may be received over them, and selecting a desired address object or objects. An event callback is created and registered, so that notification is received when a call arrives over the desired address object or objects. The call is then received (created), such that the address objects represent the communication media over which the call is received.","Pluggable Terminals","In the past, integrating many proprietary media processing devices into a TAPI system was messy. Consider the plight of a user trying to get TAPI to work with many different types of proprietary media processing devices-each with a different interface and method of operation requiring special treatment. Also, if a user wanted to add a new media processing device defined by a third party, then the user had to either revise TAPI APIs or program a private extension into a Media Stream Provider (MSP) component.","Now in TAPI 3.1, users have greater flexibility and ease with pluggable terminals. New media processing devices defined by third parties, such as sound cards, cameras, microphones, speakers, and virtual devices, are plugged into TAPI as pluggable terminals ready to send or receive multimedia communications. Pluggable terminals hide the detailed information about how the media processing device works and provide a uniform interface to TAPI. Thus, TAPI uses each pluggable terminal for multimedia communications in the same way; no special treatment is necessary. TAPI no longer needs detailed information about how each device works and users no longer need to program private extensions into the MSP component. Pluggable terminals allow TAPI to process media generically, so users can easily plug in whatever new media processing they want to do. Furthermore, once a pluggable terminal is created and plugged in, it becomes available to all users.","One aspect of the present invention is directed to systems, methods, and data structures for pluggable terminals. Pluggable terminals are part of client and server TAPI communications systems. One software system comprises a TAPI application component for conducting at least one communications session and at least one pluggable terminal for processing media during the communications session. Another TAPI communications system comprises a processor, a storage device coupled to the processor, and at least one pluggable terminal operative on the processor to process media during a communications session. Yet another TAPI communications system comprises a processor, a storage device coupled to the processor, and a TAPI application component operative on the processor to select at least one pluggable terminal for a communications session.","There are methods for plugging in and using pluggable terminals for processing media in a communications session. One method of plugging in a pluggable terminal comprises wrapping a media processing device control method to create a pluggable terminal type and making the pluggable terminal type available to a TAPI application component. One method of using a pluggable terminal comprises plugging in the pluggable terminal, selecting a pluggable terminal from a list of available terminals, and processing media during a communications by using a method of the pluggable terminal.","There are several data structures associated with pluggable terminals. One pluggable terminal type data structure has a wrapper around a media processing device control method. One data structure for registering a pluggable terminal has a terminal class name, a unique identifier, a set of media flow directions, and a set of media types supported by the pluggable terminal. One terminal base class data structure has an interface for plugging in a pluggable terminal and another interface for a TAPI application component.","These and other features, aspects, and advantages of the present invention will become better understood with reference to the following description and appended claims.",{"@attributes":{"id":"p-0072","num":"0071"},"figref":["FIG. 5","FIG. 3"],"b":["512","512"]},"In one embodiment, the pluggable terminal  is plugged in and made available to a TAPI application component  to process media during a communications session. The TAPI application component  is an application program that uses the computer telephony services provided by a TAPI component . Some example TAPI applications are web phones, electronic banking, videoconferencing, electronic commerce, television set top boxes, web gaming, handheld computing, mobile phones, and the like. The communications session is an exchange of information over a connection among terminals, such as an IP telephony call. The communications session includes multiple simultaneous communications, such as playing music while saving it to a file.","In one embodiment, when the TAPI application component  initializes TAPI , a terminal manager component  creates a terminal object based on a pluggable terminal type associated with the pluggable terminal  and registers the pluggable terminal . The terminal manager component  discovers all available terminals, including the pluggable terminal , and gives a list of them to the TAPI application component  so that one or more may be selected for a communications session.","In one embodiment, once the pluggable terminal  is selected by the TAPI application component , the pluggable terminal  processes media during the communications session. A Media Stream Provider (MSP) component  controls the media processing and coordinates the media processing with a Telephony Service Provider (TSP) component . The TSP component  performs call control and controls communications devices. The TSP component  controls communications devices, such as modems, the H323 protocol for IP telephony, specialized communications protocols, and other hardware and software communications devices. A TAPI server component  tracks telephony resources.",{"@attributes":{"id":"p-0076","num":"0075"},"figref":"FIG. 6","b":["600","602","606","604","606","604","604","606","608","608","600","602","604","600","602","602"]},"One system embodiment, such as the system in , comprises software components implemented as Common Object Model (COM) components, but the present invention could also be implemented as Common Object Request Broker Architecture (CORBA) components, Remote Method Invocation (RMI) between Java objects, or some other architecture enabling pieces of programs, called objects, to communicate with one another regardless of what programming language they were written in.",{"@attributes":{"id":"p-0078","num":"0077"},"figref":"FIG. 7","b":["700","702","704","706","702","700","712","702","702","714","716","702","712","702","710"]},{"@attributes":{"id":"p-0079","num":"0078"},"figref":"FIG. 8","b":["800","802","804","806","808","802","804","802","800","800"]},{"@attributes":{"id":"p-0080","num":"0079"},"figref":"FIG. 9","b":["900","902","904"]},"In one embodiment, making the pluggable terminal type available to the TAPI application component  comprises the following acts shown in FIG. : creating a terminal object from the pluggable terminal type upon initialization of a TAPI system ; registering the pluggable terminal ; discovering all available terminals, including the pluggable terminal ; and sending a list of available terminals, including the pluggable terminal, to the TAPI application component .","In one embodiment, wrapping the media processing device control method  comprises the following acts shown in FIG. : deriving the pluggable terminal type from a terminal base class ; providing a first interface for plugging into a TAPI system ; and providing a second interface including at least one media processing method for the TAPI application component .",{"@attributes":{"id":"p-0083","num":"0082"},"figref":"FIG. 12","b":["1202","1106","1200"],"ul":{"@attributes":{"id":"ul0001","list-style":"none"},"li":{"@attributes":{"id":"ul0001-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0002","list-style":"none"},"li":["1. Audio, video, text, and graphics;","2. Modem transmissions, facsimile transmissions, and telephony transmissions;","3. Videoconferencing transmissions, co-browsing transmissions, application sharing transmissions, document sharing transmissions, and collaborative computing transmissions;","4. Chat transmissions, visual chat transmissions, IP telephony transmissions, and instant messaging transmissions;","5. PSTN calls, tone transmissions, speech transmissions, IP interactive voice response system transmissions, IP unified message system transmissions, and caller identification transmissions;","6. Music, movies, still pictures, and photographs;","7. Radio transmissions, television transmissions, and cable transmissions;","8. Portable device transmissions, wearable computer transmissions, tablet transmissions, handheld device transmissions, and pocket-sized personal computer transmissions; and","9. Digital phone calls and cellular phone calls.\n\nThe invention is not limited to a method of processing media from any one group.\n"]}}}},{"@attributes":{"id":"p-0084","num":"0092"},"figref":"FIG. 13","b":["1300","1302","1304","1306"]},{"@attributes":{"id":"p-0085","num":"0093"},"figref":"FIG. 14","b":["1400","1402","1404","1406","1402"]},"In one method embodiment of the present invention shown in , selecting the pluggable terminal from the list of available terminals for a communications session  comprises: requesting a list of available terminals ; discovering all available terminals, including the pluggable terminal ; listing all available terminals ; selecting the pluggable terminal from the list of available terminals ; and creating a terminal object from a pluggable terminal type associated with the selected pluggable terminal . In another embodiment, the method  also includes controlling media processing  and coordinating media processing with call control .",{"@attributes":{"id":"p-0087","num":"0095"},"figref":"FIG. 16","b":["1600","1602","1604","1606","1608","1602","1606","1608"],"ul":{"@attributes":{"id":"ul0003","list-style":"none"},"li":{"@attributes":{"id":"ul0003-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0004","list-style":"none"},"li":["1. Audio, video, text, and graphics;","2. Modem transmissions, facsimile transmissions, and telephony transmissions;","3. Videoconferencing transmissions, co-browsing transmissions, application sharing transmissions, document sharing transmissions, and collaborative computing transmissions;","4. Chat transmissions, visual chat transmissions, IP telephony transmissions, and instant messaging transmissions;","5. PSTN calls, tone transmissions, speech transmissions, IP interactive voice response system transmissions, IP unified message system transmissions, and caller identification transmissions;","6. Music, movies, still pictures, and photographs;","7. Radio transmissions, television transmissions, and cable transmissions;","8. Portable device transmissions, wearable computer transmissions, tablet transmissions, handheld device transmissions, and pocket-sized personal computer transmissions; and","9. Digital phone calls and cellular phone calls.\n\nThe invention is not limited to selecting media types from any one group for a data structure for registering a pluggable terminal.\n"]}}}},"In another embodiment, the data structure for registering a pluggable terminal  has these additional fields: a name for the pluggable terminal , a company name identifying the company that made the new pluggable terminal , and a version for the new pluggable terminal . In another embodiment, the data structure  also includes a method for registering itself . In a further embodiment, the data structure  also includes a method for firing events to a terminal manager component . However, the method  is not limited to an event mechanism and may also be a method of callbacks or any other method for signaling events among components.",{"@attributes":{"id":"p-0089","num":"0106"},"figref":"FIG. 17","b":["1700","1702","1704","1706","1708","1710","1712"]},"In one embodiment shown in , the pluggable terminal type data structure  has one or more methods for controlling a media processing device , where the device supports a media type selected from one of the following groups :\n\n",{"@attributes":{"id":"p-0091","num":"0117"},"figref":"FIG. 19","b":["1900","1902","1904"]},"The following example shows how to create a pluggable terminal for a new audio file format. In an example embodiment, a hardware vendor figures out how the audio file format fits into DirectShow\u00ae, creates filters using DirectShow\u00ae, wraps the audio file format processing methods as a pluggable terminal, and then plugs it into the TAPI system.","The following example shows how to leverage existing media processing code. In an example embodiment, a TAPI application developer, who is transitioning applications from TAPI version 2 to TAPI version 3 and, therefore, has existing code manipulating media streams directly, wraps that code in a pluggable terminal and then plugs it into the TAPI system.","The following example shows how pluggable terminals are created automatically by a TAPI system. In an example embodiment, a terminal manager component uses DirectShow\u00ae to find all multimedia devices present on a computer and then creates pluggable terminals corresponding to each multimedia device. For example, a wave device is wrapped as a pluggable terminal.","In an example embodiment, a TAPI application component selects specific pluggable terminals to use on a computer telephony call. In another example embodiment, a TAPI application component selects specific pluggable terminals to use on a call based on the media processing required for a communications session. In another example embodiment, an address object finds out which existing pluggable terminals are owned by the address object and can be used on a call, before a TAPI application program selects them. In another example embodiment, a TAPI application component creates multiple instances of a pluggable terminal and the instances are used on two computer telephony calls at the same time. Some examples of multiple instances are pluggable terminals for files, Dual Tone Multi-Frequency (DTMF) detection and generation pluggable terminals, and video window pluggable terminals. In another example embodiment, a pluggable terminal is a media streaming terminal that lets a TAPI application component read and write directly to a media stream.","Computer telephony application programming interface has been described. Although specific embodiments have been illustrated and described herein, it will be appreciated by those of ordinary skill in the art that any arrangement which is calculated to achieve the same purpose may be substituted for the specific embodiments shown. This application is intended to cover any adaptations or variations of the present invention. Therefore, it is manifestly intended that this invention be limited only by the following claims and equivalents thereof."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 3"},"FIG. () shows a method for placing an outgoing computer telephony call according to an embodiment of the invention; and,","FIG. () shows a method for receiving an incoming computer telephony call according to an embodiment of the invention.",{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 13"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 14"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 15"},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 16"},{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 17"},{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 18"},{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 19"}]},"DETDESC":[{},{}]}
