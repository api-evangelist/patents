---
title: Looping constructs in object model software
abstract: A system and method for providing looping constructs to an object model where the looping construct is contained within a child object of a parent object. The system and method further provides for an enumerator to map between indexes representing a collection of objects to a child object comprising a looping construct, and thereby enabling iterations for each variable of the collection of objects.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07685582&OS=07685582&RS=07685582
owner: Microsoft Corporation
number: 07685582
owner_city: Redmond
owner_country: US
publication_date: 20041005
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF ILLUSTRATIVE EMBODIMENTS"],"p":["The invention generally relates to object model software applications and particularly to looping constructs within an object model.","In applications coded in programming languages such as C, Pascal, etc., it is common for a section of the program to be executed multiple times, with each execution occurring immediately upon completion of a prior execution. This repetition of workflow may be referred to as iterative programming or \u201clooping.\u201d Looping is an important programming technique that enables an application to repeat a set of instructions or display output over and over until a condition is or a set of conditions are met. Looping may allow a programmer to repeat a set of instructions in an efficient, logical way. Not only may looping be efficient, it may also provide control over how many times a set of instructions in a section of code may be executed.","A program executing a section of code in a loop may continue doing so until some condition or completion event occurs. For example, a loop may execute until an evaluated result of a given expression is false. This type of loop may be referred to as a For loop. Also for example, a loop may execute for each item in a collection. Each item may be pulled from various places in memory based on a memory address. This type of loop may be referred to as a ForEach loop. There are other types of loops well known to those skilled in the art such as, but not limited to, While loops, Jump loops, Until loops, etc.","Instead of using programming languages such as C or Pascal, software applications may be developed using an object model. The object model applications may, in many respects, mimic traditional programming language. An object model may be defined as a collection of objects and relationships. Each of the objects may be associated with one or more properties that govern the execution behavior of the object. An object model may be a collection of objects that may be instantiated. Relationships between instantiated objects may be created to build a cohesive application. Such an object model may have a hierarchy of objects. That is, parent objects may have children objects. The objects may perform functions or operations. Each operation may define a work item to be performed within an object. The operation may perform the work of the application by, for example, copying files, downloading files, cleaning data, performing queries, etc.","A problem exists, however, in applying a programming language looping paradigm to an application built on an object model. Looping constructs in programming languages may freely access items stored throughout memory based on, for example, a memory address. Objects within an object model, on the other hand, may have implicit or explicit boundaries that hinder, for example, iterating over a collection of objects or assigning a variable to a loop.","For example, an object model may use \u201csteps\u201d to control the execution of an operation. To support looping, the object model may require a programmatic approach that stipulates that an object be inserted at some point in a workflow. The object may be capable of modifying the execution status of the execution engine. This object may \u201ctrick\u201d the execution engine by indicating that a given section to be executed in a loop was not yet executed even when the section has been executed. This \u201ctricking\u201d may be accomplished by a script object and may be used as many times as the \u201cloop\u201d is needed to run. The script object may go to a parent object, traverse the object model to find the next step, apply a precedence constraint, and then modify the object model by indicating that the operation was not yet executed.","The script task method of employing a looping paradigm in an application based on an object model may be problematic. First, it is complicated. Second, in a user interface, it may not be apparent where a loop ends or starts. Therefore it may be difficult to understand and configure the loop coding. Without well-defined boundaries, there may be no way to represent the loop visually.","It would be useful, therefore, to be able to apply looping constructs to a software application based on an object model such that information or objects located outside a looping construct object may be more easily communicated to a looping construct object. Additionally, it would be useful if the looping construct may be represented visually. Such an approach may enable understanding and configuring of the loop from a user interface.","The invention enables the execution of looping constructs within an object model by providing for communication between objects. Such communication may be akin to the ability of the programming language looping constructs to pull information from various memory locations. An object within the object model may contain a looping construct such as a For or a ForEach construct. The For or ForEach object each may be contained within sub-objects or child objects of a workflow parent object and may execute more than once per parent execution based on parameters specific to them. A ForEach loop, for example, may execute once for each item in a collection through a mapping mechanism that enables the ForEach loop object to communicate with the collection. A For loop may execute until an evaluated result of a given expression is false and communicate with an object comprising a collection of variables. Placing the looping construct within a child object may preclude the use of, for example, script objects. Additionally, the invention may obviate the need to traverse a parent object in order to \u201ctrick\u201d the parent object by indicating that the object has not yet executed.","The invention, therefore, may allow the simulation of familiar programming language looping paradigms in an object model. The invention may also enable a user to identify looping constructs contained in code. This may enable, for example, a user to know where and how to insert break points to determine the current state of the application during object execution. Also, an object writer may not be required to write all of the code to instigate a looping construct. Instead, the object writer may benefit from the looping code already contained in an object and therefore, the object writer need only write the code for the specific operation.","Example Computing Environment",{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 1"},"Although not required, the invention can be implemented via an application programming interface (API), for use by a developer or tester, and\/or included within the network browsing software which will be described in the general context of computer-executable instructions, such as program modules, being executed by one or more computers (e.g., client workstations, servers, or other devices). Generally, program modules include routines, programs, objects, components, data structures and the like that perform particular tasks or implement particular abstract data types. Typically, the functionality of the program modules may be combined or distributed as desired in various embodiments. Moreover, those skilled in the art will appreciate that the invention may be practiced with other computer system configurations. Other well known computing systems, environments, and\/or configurations that may be suitable for use with the invention include, but are not limited to, personal computers (PCs), automated teller machines, server computers, hand-held or laptop devices, multi-processor systems, microprocessor-based systems, programmable consumer electronics, network PCs, minicomputers, mainframe computers, and the like. An embodiment of the invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network or other data transmission medium. In a distributed computing environment, program modules may be located in both local and remote computer storage media including memory storage devices.",{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 1","b":["100","100","100","100"]},"With reference to , an example system for implementing the invention includes a general purpose computing device in the form of a computer . Components of computer  may include, but are not limited to, a processing unit , a system memory , and a system bus  that couples various system components including the system memory to the processing unit . The system bus  may be any of several types of bus structures including a memory bus or memory controller, a peripheral bus, and a local bus using any of a variety of bus architectures. By way of example, and not limitation, such architectures include Industry Standard Architecture (ISA) bus, Micro Channel Architecture (MCA) bus, Enhanced ISA (EISA) bus, Video Electronics Standards Association (VESA) local bus, and Peripheral Component Interconnect (PCI) bus (also known as Mezzanine bus).","Computer  typically includes a variety of computer readable media. Computer readable media can be any available media that can be accessed by computer  and includes both volatile and nonvolatile, removable and non-removable media. By way of example, and not limitation, computer readable media may comprise computer storage media and communication media. Computer storage media includes both volatile and nonvolatile, removable and non-removable media implemented in any method or technology for storage of information such as computer readable instructions, data structures, program modules or other data. Computer storage media includes, but is not limited to, random access memory (RAM), read-only memory (ROM), Electrically-Erasable Programmable Read-Only Memory (EEPROM), flash memory or other memory technology, compact disc read-only memory (CDROM), digital versatile disks (DVD) or other optical disk storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other medium which can be used to store the desired information and which can be accessed by computer . Communication media typically embodies computer readable instructions, data structures, program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term \u201cmodulated data signal\u201d means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example, and not limitation, communication media includes wired media such as a wired network or direct-wired connection, and wireless media such as acoustic, radio frequency (RF), infrared, and other wireless media. Combinations of any of the above should also be included within the scope of computer readable media.","The system memory  includes computer storage media in the form of volatile and\/or nonvolatile memory such as ROM  and RAM . A basic input\/output system  (BIOS), containing the basic routines that help to transfer information between elements within computer , such as during start-up, is typically stored in ROM . RAM  typically contains data and\/or program modules that are immediately accessible to and\/or presently being operated on by processing unit . By way of example, and not limitation,  illustrates operating system , application programs , other program modules , and program data . RAM  may contain other data and\/or program modules.","The computer  may also include other removable\/non-removable, volatile\/nonvolatile computer storage media. By way of example only,  illustrates a hard disk drive  that reads from or writes to non-removable, nonvolatile magnetic media, a magnetic disk drive  that reads from or writes to a removable, nonvolatile magnetic disk , and an optical disk drive  that reads from or writes to a removable, nonvolatile optical disk , such as a CD ROM or other optical media. Other removable\/non-removable, volatile\/nonvolatile computer storage media that can be used in the example operating environment include, but are not limited to, magnetic tape cassettes, flash memory cards, digital versatile disks, digital video tape, solid state RAM, solid state ROM, and the like. The hard disk drive  is typically connected to the system bus  through a non-removable memory interface such as interface , and magnetic disk drive  and optical disk drive  are typically connected to the system bus  by a removable memory interface, such as interface .","The drives and their associated computer storage media discussed above and illustrated in  provide storage of computer readable instructions, data structures, program modules and other data for the computer . In , for example, hard disk drive  is illustrated as storing operating system , application programs , other program modules , and program data . Note that these components can either be the same as or different from operating system , application programs , other program modules , and program data . Operating system , application programs , other program modules , and program data  are given different numbers here to illustrate that, at a minimum, they are different copies. A user may enter commands and information into the computer  through input devices such as a keyboard  and pointing device , commonly referred to as a mouse, trackball or touch pad. Other input devices (not shown) may include a microphone, joystick, game pad, satellite dish, scanner, or the like. These and other input devices are often connected to the processing unit -through a user input interface  that is coupled to the system bus , but may be connected by other interface and bus structures, such as a parallel port, game port or a universal serial bus (USB).","A monitor  or other type of display device is also connected to the system bus  via an interface, such as a video interface . In addition to monitor , computers may also include other peripheral output devices such as speakers  and printer , which may be connected through an output peripheral interface .","The computer  may operate in a networked environment using logical connections to one or more remote computers, such as a remote computer . The remote computer  may be a personal computer, a server, a router, a network PC, a peer device or other common network node, and typically includes many or all of the elements described above relative to the computer , although only a memory storage device  has been illustrated in . The logical connections depicted in  include a local area network (LAN)  and a wide area network (WAN) , but may also include other networks. Such networking environments are commonplace in offices, enterprise-wide computer networks, intranets and the Internet.","When used in a LAN networking environment, the computer  is connected to the LAN  through a network interface or adapter . When used in a WAN networking environment, the computer  typically includes a modem  or other means for establishing communications over the WAN , such as the Internet. The modem , which may be internal or external, may be connected to the system bus  via the user input interface , or other appropriate mechanism. In a networked environment, program modules depicted relative to the computer , or portions thereof, may be stored in the remote memory storage device. By way of example, and not limitation,  illustrates remote application programs  as residing on memory device . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.","One of ordinary skill in the art can appreciate that a computer  or other client devices can be deployed as part of a computer network. In this regard, the present invention pertains to any computer system having any number of memory or storage units, and any number of applications and processes occurring across any number of storage units or volumes. An embodiment of the present invention may apply to an environment with server computers and client computers deployed in a network environment, having remote or local storage. The present invention may also apply to a standalone computing device, having programming language functionality, interpretation and execution capabilities.","Looping Constructs in Object Model Software",{"@attributes":{"id":"p-0029","num":"0028"},"figref":["FIG. 2","FIG. 1"],"b":["200","110","200","205","210","220","230","210","220","230","212","222","232","200","233","234"]},"The object model may be similar to a programming language paradigm. A parent object such as the parent object  may have workflow constraints. Each task , ,  within each child object , ,  may be set to run in an ordered object workflow. A task as used in this specification may be an object that performs a function or operation or has a certain purpose within a workflow. The ordered object workflow may be in the direction of arrows , . Generally, with the exception of tasks ,  within looping objects such as For loop child object  and ForEach loop child object , tasks within a parent object and also within child objects may execute in a linear fashion. Alternatively, such tasks may execute consistent with any precedence constraints. Precedence constraints may control a sequence in which tasks execute.","In the system , child objects ,  may be looping constructs. The looping constructs of child objects ,  may include respective second and third tasks. It should be recognized that child objects ,  may contain any number of tasks and that the second and third tasks ,  are provided for example purposes and may be other looping constructs.","In the example embodiment of the invention depicted in , the looping construct is implemented through use of the object model. Each task , ,  may perform a specific function and may be given only enough information to perform the function. In this way, the workflow of the parent object  is broken down into the execution of tasks , ,  within individual child objects , , . Such use eliminates the need for cumbersome and confusing coded script tasks described above. Instead of using a \u201cstep\u201d used in other hierarchical object models, the parent object  may contain child objects , , , each of which may execute its task or function. In this way, the traditional programming language looping paradigm may be mimicked in an object model such as the parent object . The system  may execute designated workflow repetitively within the child objects , .","The child object  of parent object  may contain a first task . The first task  may be executed first because it is first in a linear workflow of the parent object . Alternatively, the first task  may be executed first because a precedence constraint has been applied within the parent object  indicating as much. The child object  may include logic within the first task  and may provide parameters. The first task  may be any type of task or function. For example, the first task  may be opening a new document, downloading a file or files, cleaning data, or performing a query or queries. The first task  may be a looping function as well.","The For loop child object  may include a looping construct such as a For loop. The ForEach loop child object  may include a looping construct such as a ForEach loop. A runtime execution environment within the parent object  may \u201cknow\u201d about the looping constructs within the child objects , , and also may know how to execute them. Additionally, the child objects ,  that contain looping constructs may know how to interact with the runtime execution environment of the parent object .","The For loop child object  may enable the execution of the same workflow over and over, based on an expression. The child object  may include execution of a second task  within a For loop. The child object  additionally could contain other tasks in addition to the second task . The runtime execution environment of the parent object  may know about the For loop child object  and therefore may know that the second task  may be executed numerous times. The For loop child object  may contain an initialization expression  which may, for example, obtain a variable such as a \u201ccount\u201d variable. The \u201ccount\u201d variable may be set to 0. The For loop child object  may also contain an increment expression , which may increase the variable \u201ccount\u201d by the number of times that the second task  has been executed. The child object  may also contain an evaluation expression . The evaluation expression  may determine when the variable \u201ccount\u201d equals a predetermined number. When the evaluation expression determines that \u201ccount\u201d equals the predetermined number, execution of the second task  may be completed. The workflow within parent object  may then proceed to the next object based on a linear progression or on a precedence constraint.","The parent object  may include a ForEach loop child object  within its workflow. The ForEach loop child object  may include a third task  to be executed for each character in the enumerator . The enumerator  may be a wrapper around the collection of objects . The collection of objects  may be, for example, tables within a database, databases on an enterprise network, node lists, or sub-elements within an extensible markup language (XML) document. The collection of objects may be any other type of object over which the ForEach loop child object  may iterate. The enumerator  may be of any type, and the type may depend on the type of object over which the third task  may iterate. The enumerator  may be, for example, a file enumerator for iterating over files. The enumerator  may be a table enumerator used for iterating over table. Alternatively, it may be a row enumerator used for iterating over rows in a table. Additionally, the enumerator  may be specific to the object over which the third task  may iterate. If, for example, the enumerator is a row enumerator, then it may include a data base name, a user name, a password, and a name of a table. A row enumerator may also need to know which rows will be needed for the iteration\u2014which rows will be enumerated. The row enumerator may communicate with a server (not shown) to obtain data it needs. The row enumerator may be populated as it receives information about each row. Alternatively, the row enumerator may execute a \u201cbatch get\u201d and fill in all elements in the enumerator at one time. The logic for populating the enumerator  may be included within the enumerator . The details provided for a row enumerator are provided for example only. A row enumerator as well as other types of enumerators may require other data and have varying properties.","The ForEach loop object  may be in communication with the enumerator . Through the enumerator , the ForEach loop child object  may enumerate or iterate over each character in the collection of objects . When the third task  within the ForEach loop child object  is executed, the ForEach loop child object  may communicate with the enumerator through an interface . The enumerator  may provide its first item to the ForEach loop child object  for use in execution of the third task .","The enumerator  may notify the ForEach loop child object  when it has provided every item in the enumerator . The ForEach loop child object  may know how to process this completion information such that the parent object  may move on to the next object in the workflow.","Additionally, the ForEach loop child object  may include duplicates or \u201cclones\u201d of the third task . That is, the ForEach loop child object may have a clone or clones of the third task , . It should be recognized that there may be any number of clones of the task or tasks within a ForEach loop child object . This cloning also may be referred as \u201cparellizing\u201d\u2014that is, each of the cloned tasks ,  may be executed in parallel with (or at the same time as) the third task . The cloning or copying may be completed by saving the third task  to an extensible markup language (XML) document, creating a new task based on the third task , and loading the new task into the ForEach loop child object.","The third task  may be executed using the values for properties provided by the enumerator . While the third task  is executing, the enumerator  may provide another item from the collection of objects  to the clone of the third task . While the clone of the third task  is executing, the enumerator may provide another item from the collection of objects  to the clone of the third task . Additionally, if the ForEach loop child object contains more than one task, then each of the tasks may be cloned in a similar manner to expedite the execution of the loop. In this way, the ForEach loop child object may more quickly complete all of its iterations so that the parent object  may move more quickly down the workflow of child objects.",{"@attributes":{"id":"p-0041","num":"0040"},"figref":["FIG. 3","FIG. 1"],"b":["300","300","310","350","370","310","350","370","110"]},"The ForEach loop child object  may include one or more tasks such as task A , task B , and task C . The tasks - may include one or more properties. In the example embodiment of the ForEach loop child object depicted , task A may include a property X. Property X may be a variable, and a value for property X may be required before task A may be executed. As explained below, this value may be provided by the enumerator . Task B  likewise may require a value for its property Y, and task C  may require a value for its property Z. Additionally, logic may be provided within the ForEach loop child object  such that each of the tasks - may be executed numerous times, with each execution using a different value for its variable property.","The values for the properties within the tasks - may ultimately be provided by the collection . The collection  may be any type of collection. For example, the collection  may be tables within a database, databases on an enterprise network, node lists, or sub-elements within an extensible markup language (XML) document, etc. The collection  may have values or indexes within index lists , , and . Such indexes may be viewed in a graphical or chart form such as depicted in the collection . Such indexes, however, may not actually be organized as such within the collection .","The enumerator  may obtain an index from the collection  and provide that index to the ForEach loop child object for use in the execution of tasks -. The enumerator  may perform a mapping function, pulling each index from the collection , and assigning the index to a property such as property X, Y or Z of, respectively, tasks A, B, and C - of the ForEach loop child object. The enumerator may complete this mapping function for each iteration of the ForEach loop child object until all index values have been provided to the ForEach loop child object .","For example, the enumerator may comprise logic  such that, the first time (first iteration) that the ForEach child loop object executes, the enumerator may pull an index  from Index ,  of the collection . The logic  may enable the enumerator  to assign the Index ,  value to property X of task A . The enumerator additionally may comprise logic  such that, for this first iteration, the enumerator may also pull an index  from Index ,  of the collection . The enumerator may assign the Index ,  value to property Y of task B . Likewise, the enumerator may have logic  to pull an index  from Index ,  of the collection  and assign the Index ,  to property Z of task C . The ForEach loop child object may then execute its tasks -. This may complete the first iteration.","The logic within the ForEach loop child object will provide for the tasks - to execute again, and the enumerator will provide values for properties X-Z from the second iteration row of collection  as it did for the first iteration. This process may repeat until, in the example shown in , iteration  is complete. Upon completion of iteration , the enumerator will notify the ForEach loop child object  that the collection  has no more index values to pass. The ForEach loop child object  may have logic to understand this, and the parent object  (described with regard to ) may then move on down its object model workflow to the next object (not shown in ).","In this way, the enumerator  may act as a translation layer between the collection  and a child object such as ForEach loop child object . In a coding paradigm written in, for example, C programming language, a ForEach loop may need a memory address for a property such as property X of task A . From the memory address, the value for the property X may be found and used. In one embodiment of the invention, the coding paradigm of the ForEach loop may be translated into the object model paradigm. In the object model paradigm, the objects such as the ForEach loop child object  may not know about memory locations. Therefore, a translation layer such as the enumerator  may be necessary to take values of objects and assign them to properties within a task such as task A .",{"@attributes":{"id":"p-0048","num":"0047"},"figref":["FIG. 4","FIG. 3","FIG. 3"],"b":["370","310","410","310","370","310","350","370","420","350","375","370","310","375","310","430","375","320","320","340","350","375","320","340","320","320","340","440"]},"While the task  or tasks - are executed, at step , the enumerator may provide one or more indexes  to the ForEach loop child object . The ForEach loop child object  may assign the one or more indexes  to a property or properties of a cloned task or tasks at step . At step , the cloned task or tasks may be executed. The mapping may then continue until all indexes in the collection have been used in the iteration. Upon completion of the iteration, the parent object, at step , may move to the next object in the object model.","The various techniques described herein may be implemented in connection with hardware or software or, where appropriate, with a combination of both. Thus, the methods and apparatus of the present invention, or certain aspects or portions thereof, may take the form of program code (i.e., instructions) embodied in tangible media, such as floppy diskettes, CD-ROMs, hard drives, or any other machine-readable storage medium, wherein, when the program code is loaded into and executed by a machine, such as a computer, the machine becomes an apparatus for practicing the invention. In the case of program code execution on programmable computers, the computing device will generally include a processor, a storage medium readable by the processor (including volatile and non-volatile memory and\/or storage elements), at least one input device, and at least one output device. One or more programs that may utilize the creation and\/or implementation of domain-specific programming models aspects of the present invention, e.g., through the use of a data processing API or the like, are preferably implemented in a high level procedural or object oriented programming language to communicate with a computer system. However, the program(s) can be implemented in assembly or machine language, if desired. In any case, the language may be a compiled or interpreted language; and combined with hardware implementations.","While the present invention has been described in connection with the preferred embodiments of the various figures, it is to be understood that other embodiments may be used or modifications and additions may be made to the described embodiments for performing the same function of the present invention without deviating therefrom. For example, embodiments of the invention have been described with regard to a For loop and a ForEach loop, each of which may be contained in an object. It should be recognized that other looping paradigms, such as a While or a GoTo loop may also be contained in an object in accordance with the invention. In no way is the present invention limited to the examples provided and described herein. Therefore, the present invention should not be limited to any single embodiment, but rather should be construed in breadth and scope in accordance with the appended claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The foregoing summary, as well as the following detailed description of illustrative embodiments, is better understood when read in conjunction with the appended drawings. For the purpose of illustrating the invention, there is shown in the drawings example constructions of the invention; however, the invention is not limited to the specific methods and instrumentalities disclosed. In the drawings:",{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 4"}]},"DETDESC":[{},{}]}
