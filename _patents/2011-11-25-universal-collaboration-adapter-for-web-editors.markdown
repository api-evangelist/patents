---
title: Universal collaboration adapter for web editors
abstract: Various embodiments of systems and methods for a universal collaboration adapter for web editors are described herein. In one aspect, the method executed by one or more computers in a network of computers includes analyzing a document object model (DOM) representing a document in a tree structure and identifying an event or manipulation associated with the DOM. Typically, the DOM manipulations correspond to the document manipulations. An operation corresponding to the identified event is selected. The operation is sent to a generic collaboration engine for transmission to a server. The server transmits the operation to various participants for collaborative editing. The identification of the DOM manipulations (instead of editor-specific manipulations) provides a universal collaboration adapter for various editors. Further, recording or identifying local DOM manipulations and replaying remote DOM manipulations enable transforming a single-user web editor into the multi-user or collaborative web editor.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08769014&OS=08769014&RS=08769014
owner: SAP AG
number: 08769014
owner_city: Walldorf
owner_country: DE
publication_date: 20111125
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION"],"p":["A web-based collaboration tool (e.g., a web editor) helps geographically dispersed users or teams to jointly create or modify a document. The document may be a text document, a software diagram, a table, and the like. The Collaboration tools allow the users to join a shared editing session to edit any part of the document from anywhere and at anytime. Collaboration tools usually include a synchronization component to resolve conflicts while the document is being edited by several users. Typically, the synchronization component uses a conflict resolution scheme to resolve conflicts. The synchronization component may be linked to the collaboration tool through a collaboration adapter. Each collaboration tool or editor use their specific collaboration adapter to link to the synchronization component. Typically, each collaboration tool implements a highly tailored collaboration adapter suitable for the specific collaboration tool or editor.","However, to develop and maintain different collaboration adapters specifically for different editors is a waste of resources.","Various embodiments of systems and methods for universal collaboration adapter are described herein. In one aspect, the method executed by one or more computers in a network of computers includes identifying a document object model (DOM) representing a document, identifying an event associated with the document object model, selecting an operation representing the identified event, and transferring the operation to a generic collaboration engine for replaying the operation or transmitting the operation to various participants (e.g., remote users) through a server.","These and other benefits and features of embodiments of the invention will be apparent upon consideration of the following detailed description of preferred embodiments thereof, presented in connection with the following drawings.","Embodiments of techniques for providing a universal collaboration adapter for web editors are described herein. In the following description, numerous specific details are set forth to provide a thorough understanding of embodiments of the invention. One skilled in the relevant art will recognize, however, that the invention can be practiced without one or more of the specific details, or with other methods, components, materials, etc. In other instances, well-known structures, materials, or operations are not shown or described in detail to avoid obscuring aspects of the invention.","Reference throughout this specification to \u201cone embodiment\u201d, \u201cthis embodiment\u201d and similar phrases, means that a particular feature, structure, or characteristic described in connection with the embodiment is included in at least one embodiment of the present invention. Thus, the appearances of these phrases in various places throughout this specification are not necessarily all referring to the same embodiment. Furthermore, the particular features, structures, or characteristics may be combined in any suitable manner in one or more embodiments.",{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 1","b":["101","102","103","104"]},{"@attributes":{"id":"p-0020","num":"0019"},"figref":["FIG. 2","FIG. 3"],"b":["200","210","220","220","220","210","210","210","210","230","210","230","230","230","300","300","300","310","1"],"i":"n"},"The one or more users may require to work collaboratively on the document. The document may be created using the web editor . The web editor  may be based upon the DOM. Consequently, the document may be represented in the DOM (e.g., the tree structure). For example, the following HTML document may be represented in the tree structure , as illustrated in :",{"@attributes":{"id":"p-0022","num":"0021"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<html>"},{"entry":"\u2003<head>"},{"entry":"\u2003\u2003\u2003<script"},{"entry":"\u2003\u2003\u2002type=\u201dtext\/ javascript\u201d"},{"entry":"\u2003\u2003\u2002src=\u201dgci.js\u201d>"},{"entry":"\u2003\u2003\u2003<\/script>"},{"entry":"\u2003<\/head>"},{"entry":"\u2003<body>"},{"entry":"\u2003\u2003<div id=\u201dMyToolPalette\u201d>"},{"entry":"\u2003\u2003\u2002............"},{"entry":"\u2003\u2003<\/div>"},{"entry":"\u2003\u2003<svg id= \u201cSyncRoot\u201d>"},{"entry":"\u2003\u2003\u2002<circle cx=\u201d30\u201d cy=\u201d30\u201d r=\u201d20\u201d fill=\u201dwhite\u201d\/>"},{"entry":"\u2003\u2003\u2009<rect x=\u201d50\u201d y=\u201d50\u201d width=\u201d100\u201d height=\u201d100\u201d fill=\u201dwhite\u201d\/>"},{"entry":"\u2003\u2003<\/svg>"},{"entry":"\u2003<\/body>"},{"entry":"<\/html>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"The tree structure  includes a root node  (i.e., <html>) and multiple descendants  (-). Typically, the tree structure  including the root node  and the descendants  (-) may be manipulated corresponding to the modification in the document. For example, if a <circle> (e.g., <circle cx=30 cy=30 r=20 fill=\u2033red\u2033\/>) is created and appended under the <svg> element in the document, a new node <circle> is included as a child node of the node (i.e., <svg> node) and the tree structure  gets modified. Typically, the tree structure  is modified into a tree structure , as illustrated in . The tree structure  includes the new node as the child node of the node (<svg> node). Therefore, if the document is modified, the DOM or tree structure  is manipulated accordingly.","The DOM tree  is manipulated by executing the action or DOM operation. For example, the tree  may be transformed into the tree  by executing the DOM operation \u201ccreate\u201d (e.g., node =document.createElementNS (\u2018http:\/\/www.w3.org\/2000\/svg,\u2019 circle=) and the DOM operation \u201cappend\u201d (e.g., node .appendChild(node)). Once the DOM operation is performed, the event corresponding to the DOM operation may be triggered or fired. The event indicates that the DOM operation (e.g., create node) is performed on the DOM .","In one embodiment, the event may be one of the followings:\n\n","Each event (E1-E4) corresponds to one or more respective DOM operations. For example, the event E1 (i.e., DOMNodeInserted) may correspond to the \u2018insert,\u2019 or \u2018append\u2019 operation, the event E2 (i.e., DOMNodeRemoved) may correspond to the \u2018remove\u2019operation, the event E3 (i.e., DOMAttrModified) corresponds to the \u2018change attribute\u2019 operation, and the event E4 (i.e., DOMCharacterDataModified) corresponds to the \u2018change text\u2019 operation. In one embodiment, for example, if an attribute of a node is changed, the event E3 is fired. For example, if the fill color of the circle node changes from fill=\u2033white\u2033 to fill=\u2033red\u2033, then the event E3 is fired. Similarly, if the radius \u2018r\u2019 of the circle is changed from 20 to 40, then the event E3 is fired. In another embodiment, if text changes in a text node the event E4 is fired. For example, if the text in <p>Hello<\/p> changes to <p>Hello World<\/p>, the event E4 is fired.","The event may be identified by the UCA . Typically, the UCA  includes an event observer (DOM listener)  to identify and record the event. For example, if a paragraph <p>Hello<\/p> is added to the HTML document, the DOM operation (e.g., create text node <p>) is executed to manipulate the DOM according to the manipulation in the HTML document. Once the text node <p> is created, the event E1 may be triggered. The event E1 indicates that the new node (i.e., node <p>) is inserted into the DOM. The event E1 (i.e, \u201cDOMNodeInserted\u201d) is identified by the event observer .","There may be separate event observers (-) for each of the respective events (E1-E4). For example, there may be the event observer for identifying or observing the event E1 (i.e., \u201cDOMNodeInserted\u201d) and the event observer for observing the event E2 (i.e., \u201cDOMNodeRemoved\u201d). Similarly, there may be the event observer for observing the event E3 (i.e., \u201cDOMAttrModified\u201d) and the event observer for observing the event E4 (i.e., \u201cDOMCharacterDataModified\u201d).","In one embodiment, one or more nodes  (-) may be registered with the one or more events observers (-) to identify the respective events. For example, the event observer may be registered or added to the node to observe the event \u201cDOMNodeInserted\u201d. In one embodiment, the event observer may be registered with the node by including code. For example, the event observer may be added to the node by including the following code: node.addEventObserver(\u201cDOMNodeInserted,\u201d function() {. . . },false) to observe the event \u201cDOMNodeInserted.\u201d","Once the event observer is registered with the node , the node and each of its descendant nodes (e.g., ) may be observed by the event observer . For example, if the new node is inserted as the child node of the node , the event \u201cDOMNodeInserted\u201d is triggered and is identified by the event observer . The event observer registered with the node observes events associated with the node and each of its descendant nodes, e.g., ","In one embodiment, the registered nodes (i.e., nodes registered with one or more events observers) are defined as a \u2018sync root node.\u2019 Each sync root node and its descendants are observed by their respective event observers. For example, the node may be defined as the sync root node and registered with the event observers  (-) to identify the events \u201cDOMNodeInserted,\u201d \u201cDOMNodeRemoved,\u201d \u201cDOMAttrModified,\u201d and \u201cDOMCharacterDataModified,\u201d respectively. Each of the descendants  (-) of the sync root node is automatically registered with the event observers (-) and will be observed by the event observers (-).","Once the event is identified, the UCA  selects an operation (e.g., the operational transformation (OT) operation) corresponding to the event. For example, if the event \u201cDOMNodeInserted\u201d is identified, the UCA  may select the OT operation (e.g., CreateNode). In one embodiment, the UCA  may generate the OT operation (e.g., CreateNode) corresponding to the event \u201cDOMNodeInserted.\u201d In another embodiment, the event \u201cDOMNodeInserted\u201d may be mapped to other OT operations. The OT operation (e.g., CreateNode) may be transferred to the GCE . The GCE  transmits the OT operation (e.g., CreateNode) to the server . The server  transmits the OT operation (CreateNode) to the one or more users or participants. Typically, the server  transmits the OT operation (CreateNode) to the one or more generic collaboration engine (GCE)  (-) associated with the one or more users.","In one embodiment, the server  may receive one or more remote OT operations from the one or more GCE (-). The server  transfers the one or more remote OT operations to the GCE . The GCE  may include synchronization components  to resolve conflicts. The conflict may be generated from the OT operation corresponding to the event and the one or more remote OT operations received from the server . For example, if the OT operation corresponding to the event intends to add an element \u2018x\u2019 at position  in a word \u2018ABC\u2019 of the document (i.e., local operation ins(\u2018x\u2019, 2)) and the remote OT operation received from the server intend to add the element \u2018y\u2019 at position  of the same word \u2018ABC\u2019 (i.e., remote operation ins(\u2018y\u2019, 2)) then the conflict is generated. Typically, the synchronization components  include a conflict resolution scheme  to resolve the conflict. The conflict resolution scheme , e.g., operational transformation (OT) scheme may be used. Typically, in the OT conflict resolution scheme  before applying the remote OT operation to the local DOM, the remote OT operation is transformed\/modified. The transformed remote operation may be transferred to the UCA .","The UCA  receives the one or more remote OT operations and\/or the one or more transformed OT operations from the GCE . The UCA  converts each of the received OT operation into one or more DOM operations. The UCA  includes a manipulator  to convert the received OT operation into the one or more DOM operations. The DOM operations may be applied to the DOM. In one embodiment, the DOM operation may include, e.g., CreateAttribute(), CreateTextNode(), CreateElement(), etc. Consequently, the remote OT operations are replayed on the local DOM. In one embodiment, the synchronization component  may include a transformer, a composer, an OT document, and an OT processor, etc., to resolve the conflict. In another embodiment, the synchronization component  may include a messaging hub  to communicate with the server .","In one embodiment, the unregistered nodes (i.e., the nodes not registered with any of the event observers (-)) are not observed. For example, the node for tool palette (format node) may not be synced or registered with any of the event observers. Typically, the events triggered for the unregistered nodes will be filtered and will not be identified or transmitted (shared). Consequently, if a user selects a tool in the tool palette (e.g., font bold) then it would solely affect the user's editor instance and not the other participants' editor.",{"@attributes":{"id":"p-0036","num":"0039"},"figref":"FIG. 8","b":["230","230","300","801","230","300","802","803","230","710","804","710","300","210","805","803","230","300","210","806"]},{"@attributes":{"id":"p-0037","num":"0040"},"figref":"FIG. 9","b":["230","210","230","901","230","902","210","620","903"]},"Embodiments provide the universal collaboration adapter (UCA) for various DOM-based web editors. The UCA is reusable and therefore, the requirement of different collaboration adapter for different web editors is obviated. Further, the UCA is implemented on a platform and language neutral standardized interface (i.e., DOM's API) instead of the editor specific API. Consequently, the UCA identifies or records the DOM events (local DOM manipulations) corresponding to any editor-specific operations. Additionally, the UCA enables transformation of a single user web editor into a multi-user (collaborative) web editor. Typically, the recording of local DOM manipulations on the single-user web editor and replaying the remote DOM manipulations received from the multiple users (through the server) enables the transformation of the single-user web editor into the multi-user or collaborative web editor.","Some embodiments of the invention may include the above-described methods being written as one or more software components. These components, and the functionality associated with each, may be used by client, server, distributed, or peer computer systems. These components may be written in a computer language corresponding to one or more programming languages such as, functional, declarative, procedural, object-oriented, lower level languages and the like. They may be linked to other components via various application programming interfaces and then compiled into one complete application for a server or a client. Alternatively, the components maybe implemented in server and client applications. Further, these components may be linked together via various distributed programming protocols. Some example embodiments of the invention may include remote procedure calls being used to implement one or more of these components across a distributed programming environment. For example, a logic level may reside on a first computer system that is remotely located from a second computer system containing an interface level (e.g., a graphical user interface). These first and second computer systems can be configured in a server-client, peer-to-peer, or some other configuration. The clients can vary in complexity from mobile and handheld devices, to thin clients and on to thick clients or even other servers.","The above-illustrated software components are tangibly stored on a computer readable storage medium as instructions. The term \u201ccomputer readable storage medium\u201d should be taken to include a single medium or multiple media that stores one or more sets of instructions. The term \u201ccomputer readable storage medium\u201d should be taken to include any physical article that is capable of undergoing a set of physical changes to physically store, encode, or otherwise carry a set of instructions for execution by a computer system which causes the computer system to perform any of the methods or process steps described, represented, or illustrated herein. Examples of computer readable storage media include, but are not limited to: magnetic media, such as hard disks, floppy disks, and magnetic tape; optical media such as CD-ROMs, DVDs and holographic indicator devices; magneto-optical media; and hardware devices that are specially configured to store and execute, such as application-specific integrated circuits (\u201cASICs\u201d), programmable logic devices (\u201cPLDs\u201d) and ROM and RAM devices. Examples of computer readable instructions include machine code, such as produced by a compiler, and files containing higher-level code that are executed by a computer using an interpreter. For example, an embodiment of the invention may be implemented using Java, C++, or other object-oriented programming language and development tools. Another embodiment of the invention may be implemented in hard-wired circuitry in place of, or in combination with machine readable software instructions.",{"@attributes":{"id":"p-0041","num":"0044"},"figref":"FIG. 10","b":["1000","1000","1005","1055","1000","1040","1055","1010","1015","1010","1015","1005","1015","1000","1025","1030","1000","1025","1030","1000","1035","1000","1050","1050","1000","1045","1000","1020","1060","1060","1060","1050","1060"]},"A data source is an information resource. Data sources include sources of data that enable data storage and retrieval. Data sources may include databases, such as, relational, transactional, hierarchical, multi-dimensional (e.g., OLAP), object oriented databases, and the like. Further data sources include tabular data (e.g., spreadsheets, delimited text files), data tagged with a markup language (e.g., XML data), transactional data, unstructured data (e.g., text files, screen scrapings), hierarchical data (e.g., data in a file system, XML data), files, a plurality of reports, and any other data source accessible through an established protocol, such as, Open DataBase Connectivity (ODBC), produced by an underlying software system, e.g., an ERP system, and the like. Data sources may also include a data source where the data is not tangibly stored or otherwise ephemeral such as data streams, broadcast data, and the like. These data sources can include associated data foundations, semantic layers, management systems, security systems and so on.","In the above description, numerous specific details are set forth to provide a thorough understanding of embodiments of the invention. One skilled in the relevant art will recognize, however that the invention can be practiced without one or more of the specific details or with other methods, components, techniques, etc. In other instances, well-known operations or structures are not shown or described in details to avoid obscuring aspects of the invention.","Although the processes illustrated and described herein include series of steps, it will be appreciated that the different embodiments of the present invention are not limited by the illustrated ordering of steps, as some steps may occur in different orders, some concurrently with other steps apart from that shown and described herein. In addition, not all illustrated steps may be required to implement a methodology in accordance with the present invention. Moreover, it will be appreciated that the processes may be implemented in association with the apparatus and systems illustrated and described herein as well as in association with other systems not illustrated.","The above descriptions and illustrations of embodiments of the invention, including what is described in the Abstract, is not intended to be exhaustive or to limit the invention to the precise forms disclosed. While specific embodiments of, and examples for, the invention are described herein for illustrative purposes, various equivalent modifications are possible within the scope of the invention, as those skilled in the relevant art will recognize. These modifications can be made to the invention in light of the above detailed description. Rather, the scope of the invention is to be determined by the following claims, which are to be interpreted in accordance with established doctrines of claim construction."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The invention is illustrated by way of example and not by way of limitation in the figures of the accompanying drawings in which like references indicate similar elements. The embodiments of the invention, together with its advantages, may be best understood from the following detailed description taken in conjunction with the accompanying drawings.",{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":["FIG. 5","FIG. 4"]},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 10"}]},"DETDESC":[{},{}]}
