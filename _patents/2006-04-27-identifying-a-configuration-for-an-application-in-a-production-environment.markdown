---
title: Identifying a configuration for an application in a production environment
abstract: Various embodiments of a computer-implemented method, computer system and computer program product provide a configuration recommendation. Request-processing performance data of an application is received. The request-processing performance data is collected by an application monitor during an execution of the application on a source hardware system. One or more request-processing performance measurements are determined based on the request-processing performance data. One or more target objectives of the application are received. An analytic engine is invoked to provide a configuration recommendation of a target hardware system on which to execute the application based on one or more request-processing performance measurements and one or more target objectives.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07756973&OS=07756973&RS=07756973
owner: International Business Machines Corporation
number: 07756973
owner_city: Armonk
owner_country: US
publication_date: 20060427
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION","Trademarks"],"p":["In co-pending application Ser. No. 10\/686,988, entitled \u201cAutonomic Computing Algorithm for Identification of an Optimum Configuration for a Web Infrastructure,\u201d filed Oct. 15, 2003, by Noshir C. Wadia and Peng Ye, assigned to the assignee of the present invention, and incorporated herein by reference in its entirety, there is described various embodiments of a method, system and article of manufacture for autonomic identification of an optimum hardware configuration for a Web infrastructure. Although not limited thereto, various embodiments of the present invention employ embodiments of the method, system and article of manufacture for autonomic identification of an optimum hardware configuration for a Web infrastructure.","In co-pending application Ser. No. 10\/174,030, entitled \u201cMethod, System and Article of Manufacture for an Analytic Modeling Technique for Handling Multiple Objectives,\u201d filed Jun. 17, 2002, by Michael Ignatowski and Noshir C. Wadia, assigned to the assignee of the present invention, and incorporated herein by reference in its entirety, there is described various embodiments of a method, system and article of manufacture method, system and article of manufacture for an analytic modeling technique for handling multiple objectives. Although not limited thereto, various embodiments of the present invention employ embodiments of the method, system and article of manufacture method, system and article of manufacture for an analytic modeling technique for handling multiple objectives.","1.0 Field of the Invention","This invention relates to identifying a configuration for an application; and in particular, this invention relates to identifying a configuration for an application in a production environment.","2.0 Description of the Related Art","Many businesses provide services using the Internet.  depicts an exemplary web application environment  which provides a web service. A number of clients at, for example, a cell phone -, a server -, and computer systems - and - connect to a network  such as the Internet and request information, such as a web page, from a web server . The web server  receives the request and returns a response to the request, for example, the web page. The exemplary web server  of  comprises various types of application software and hardware on which that application software executes.","In , the web server  has three tiers. A first tier has one or more web presentation servers . The web presentation servers  are software applications which respond to requests from the clients and provide the response if the information is available at the presentation server, or pass the request to the second tier.","The second tier has one or more web application servers . The web application servers are software applications which provide integration business logic to execute the web application. In this example, the web application servers  access a third tier. The third tier has one or more database servers . The database servers are also software applications. For example, if the processing of the request reaches the database servers , the requested data is passed to the web application servers , which may further processes the requested data, and pass the requested data to the web presentation servers  which generate a web page which is returned to the client.","In this example, each tier of server application software executes on computer system hardware which is separate from the computer system hardware of the other tiers. In some web application environments, each web presentation server, web application server, and database server may execute on a different computer system. Other web application environments may combine the functionality of the tiers on a single computer system. Yet other web application environments may combine the functionality of the web presentation servers and application servers on a single computer system separate from the database servers. In various web application environments, an edge server may be between the presentation server(s)  and the network .","When businesses plan to provide a new web application, or provide an existing application to a larger group of users, the configuration of the hardware that will handle the load of the application and that will satisfy performance targets at an acceptable cost, needs to be determined. Therefore, there is a need for a technique to determine a hardware configuration to implement a new or expand an existing application.","To overcome the limitations in the prior art described above, and to overcome other limitations that will become apparent upon reading and understanding the present specification, various embodiments of a computer-implemented method, computer system and computer program product provide a configuration recommendation. Request-processing performance data of an application is received. The request-processing performance data is collected by an application monitor during an execution of the application on a source hardware system. One or more request-processing performance measurements are determined based on the request-processing performance data. One or more target objectives of the application are received. An analytic engine is invoked to provide a configuration recommendation of a target hardware system on which to execute the application based on the one or more request-processing performance measurements, and the one or more target objectives.","In this way, various embodiments provide a technique to determine a hardware configuration to implement a new or expand an existing application.","To facilitate understanding, identical reference numerals have been used, where possible, to designate identical elements that are common to some of the figures.","After considering the following description, those skilled in the art will clearly realize that the teachings of the various embodiments of the present invention can be utilized to provide a hardware configuration recommendation. Request-processing performance data of an application is received. The request-processing performance data is collected by an application monitor during an execution of the application on a source hardware system. One or more request-processing performance measurements are determined based on the request-processing performance data. One or more target objectives of the application are received. An analytic engine is invoked to provide a configuration recommendation of a target hardware system on which to execute the application based on the performance measurements, and one or more target objectives.","The source hardware system is a data processing system such as a server computer. In various embodiments, the server computer may execute the Windows, AIX, Linux, MVS, z\/OS, Solaris, HP-UX or Unix operating system. In other embodiments, the server computer may execute other operating systems. The target hardware system is also a data processing system such as a server computer which may execute any of the operating systems described above.","Various embodiments of the present invention provide a process that integrates data collection on software application executing on a source computer system with an analytic engine that provides a hardware configuration recommendation for a target computer system. In various embodiments, the analytic engine may be a capacity planning tool, and in other embodiments, the analytic engine may be a mathematical modeling tool. In some embodiments, the analytic engine implements a method, system and article of manufacture for autonomic identification of an optimum hardware configuration for a Web infrastructure as described in U.S. patent application Ser. No. 10\/686,988, titled \u201cAutonomic Computing Algorithm for Identification of an Optimum Configuration for a Web Infrastructure\u201d. In other embodiments, other analytic engines may be used.","Various embodiments of the present invention facilitate the Information Technology Infrastructure Library Application Management process.",{"@attributes":{"id":"p-0044","num":"0043"},"figref":"FIG. 2","b":["40","42","40","42"]},"In the application development phase , in step , requirements are generated. In step , a software design is generated based on the requirements. In step , application software is built based on the software design.","In step , an initial configuration estimate is made for the application software, also referred to as the application. In various embodiments, an Initial Configuration Estimate (ICE) module invokes an analytic engine to provide a configuration recommendation of a target computer system on which to execute the application based on target objectives and performance data of an execution of the application on an existing computer system, that is, a hardware system. In some embodiments, the ICE module is implemented as a wizard. The ICE wizard is used to bridge the gap between the application development phase  and the service management phase . Typically the target computer system is in a production execution environment. In various embodiments, using performance data from an execution of the application on an existing computer system in an execution environment, whether that execution environment is a pre-production, quality assurance or existing production environment, improves the accuracy of the analytic engine's recommendation because the calculations performed by the analytic engine are based on an actual execution of the application.","In the service management phase , in step , the application is deployed to the target computer system. The target computer system is configured in accordance with the recommendation of the analytic engine. In step , the application is operated. In step , various optimizations may be applied to the application and the environment.",{"@attributes":{"id":"p-0048","num":"0047"},"figref":"FIG. 3A","b":["58","59"]},"In step , the user configures an application monitor to collect data on the application. In various embodiments, the user configures a data collector which is part of the application monitor. In some embodiments, the application monitor is the IBM WebSphere Application Monitor (WSAM); however, the invention is not meant to be limited to WSAM and other application monitors may be used. In some embodiments, the user schedules the playback of the recorded tests on the application.","In step , a load is driven against the application once the application monitor is monitoring the application and performance data is collected. The load comprises requests such as requests for web pages. In, for example, a pre-production, quality assurance and development environment, a load is driven against the application using automation software, for example, the recorded tests are played back. In an alternate embodiment, for example, in a production environment, step  is omitted and the application serves its usual traffic; therefore the load comprises requests from users of the application.","In step , the user invokes the ICE wizard.",{"@attributes":{"id":"p-0052","num":"0051"},"figref":["FIG. 3B","FIG. 3A","FIG. 3B"],"b":["62","63"]},"In step , the ICE wizard retrieves performance data of the application. The performance data is collected by the application monitor. In various embodiments, the performance data comprises request-processing performance data.","In step , the ICE wizard receives at least one source hardware identifier indicating the type of server computer system on which the performance data of the application is collected.","In step , the ICE wizard determines one or more performance measurements based on the performance data. The ICE wizard transforms at least a portion of the performance data which is collected by the application monitor to provide one or more performance measurements suitable for the analytic engine. In various embodiments, the ICE wizard computes at least one performance measurement based on the performance data.","In step , the ICE wizard invokes the analytic engine to provide a configuration recommendation of a target hardware system on which to execute the application based on at least one of the performance measurements, the source hardware identifier and at least one target objective. In various embodiments, the ICE wizard provides at least one of the performance measurements, the source hardware identifier, and one or more target objectives as parameters to the analytic engine. In some embodiments, for example, in which the ICE wizard and analytic engine are used with a predetermined source hardware system, step  is omitted and the source hardware identifier is not provided to the analytic engine.","In step , the ICE wizard presents the configuration recommendation. In various embodiments, the ICE wizard presents the configuration recommendation on a display. In other embodiments, other output devices such a printer may be used.",{"@attributes":{"id":"p-0058","num":"0057"},"figref":"FIG. 4","b":["70","70","72","74","76","78","80","82","84"]},"In response to activating the \u201cPERFORMANCE ANALYSIS\u201d menu button , a menu is displayed. The menu comprises a \u201cCREATE REPORTS\u201d menu item button , a \u201cVIEW SAVED REPORTS\u201d button , and a \u201cDAILY STATISTICS\u201d button . A button may be activated using any well-known manner such as clicking on the button using a mouse, activating the button using a keyboard, or other techniques that are known or that may become known.","In response to activating the \u201cCREATE REPORTS\u201d menu item button , another menu is displayed. This menu comprises an \u201cAPPLICATION REPORTS\u201d menu button , a \u201cSERVER REPORTS\u201d menu button , a \u201cPRODUCTION ELIGIBILITY REPORT\u201d button , an \u201cINITIAL CONFIGURATION REPORT\u201d button , and an \u201cITIL PROCESS REPORT\u201d button .",{"@attributes":{"id":"p-0061","num":"0060"},"figref":["FIG. 5","FIG. 4"],"b":["110","108","110","110"]},"In the \u201cAPPLICATION PROPERTIES\u201d window , an \u201cApplication Name\u201d text box  allows a user to enter the name of the application, and a \u201cVersion\u201d text box  allows a user to enter the version of the application.","The \u201cAPPLICATION PROPERTIES\u201d window  has a \u201cProduction Eligibility Report\u201d tab  and an \u201cInitial Configuration Report\u201d tab . In the \u201cInitial Configuration Report\u201d tab , record scripts, playback scripts and various parameters of the Initial Configuration Report may be specified. In some embodiments, to gather performance data, the user executes record and playback scripts in a sequential stream for a desired or predetermined period of time. The user reports this activity in the \u201cInitial Configuration Report\u201d tab .","In a \u201cRECORD SCRIPTS\u201d area , an \u201cOwner\u201d text box  allows a user to specify an owner. A start date and time  of a record script can be specified, or a current date may be selected using the \u201cCurrent Date\u201d button . The user enters an end date and time of when the user completed the process of recording scripts in end date and time text boxes , or a current date may be entered as the end date and time by activating the \u201cCurrent Date\u201d button .","In a \u201cPLAYBACK SCRIPTS\u201d area , an \u201cOwner\u201d text box  allows a user to specify a name of the owner who played back, or scheduled the playback of, the scripts. The user enters a start date and time of when the user began the process of playing back a script in a start date and time  text box. A current date and time may be entered into the start date and time text boxes  by activating the \u201cCurrent Date\u201d button .","The end date and time specifies the date and time when the user completed the process of recording scripts. The user enters the end date and time of when the user completed the process of playing back the scripts in end date and time text boxes . A current date and time may be entered into the end date and time text boxes  by activating the \u201cCurrent Date\u201d button .","The start date and time and end date and time of the \u201cPLAYBACK SCRIPTS\u201d area help users to organize their workflow. In various embodiments, there is no relationship between the start date and time, and end date and time, which is entered in the \u201cPLAYBACK SCRIPTS\u201d area and any other processes, such as the execution of the test scripts. In some embodiments, a record script and a playback script are not specified.","An \u201cINITIAL CONFIGURATION REPORT\u201d area  displays a \u201cReport Name\u201d , an \u201cOwner\u201d , a \u201cReport Date Start\u201d , a \u201cReport Date End\u201d , and a \u201cReport Run On\u201d date and time . An Initial Configuration Report is also referred to as an Initial Configuration Estimate or ICE report. The \u201cReport Name\u201d  is the name given the ICE report at the time the ICE report is saved. The \u201cOwner\u201d  is the name of a user who created the ICE report. The \u201cReport Date Start\u201d  displays the start of the date range used for building the ICE report. In various embodiments, the \u201cReport Date Start\u201d  is aligned with the start date of the scripts which are played back. The \u201cReport Date End\u201d  displays the end of the date range used for building the ICE report. In various embodiments, the \u201cReport Date End\u201d  is aligned with the end date of the scripts which are played back. The \u201cReport Run On\u201d date and time  displays the date and time that the ICE report is run or executed. In , an Initial Configuration Report is to be created, therefore the \u201cReport Name\u201d , the \u201cOwner\u201d , the \u201cReport Date Start\u201d , the \u201cReport Date End\u201d , and the \u201cReport Run On\u201d date and time  are set to Not Applicable (\u201cN\/A\u201d).","In response to activating a \u201cUse Existing\u201d dropdown button , a menu of saved ICE reports from which the user can select is displayed.","In response to activating a \u201cCancel\u201d button , no further action is taken and the Application Properties window  exits. In response to activating a \u201cSave\u201d button , data entered in the Initial Configuration Report tab is saved.","In response to activating a \u201cCreate\u201d button , the ICE wizard is invoked. The \u201cCreate\u201d button  causes an Initial Configuration Estimate (ICE) Report to be created based on the specified application name and version, specified record script and specified playback script. In other embodiments, the ICE wizard is invoked in response to activating the \u201cINITIAL CONFIGURATION REPORT\u201d button  ().","In various embodiments, and as illustrated above, the ICE wizard is implemented within the application monitor user interface framework. In other embodiments, the ICE wizard is implemented outside the user interface framework of the application monitor.","In response to being invoked, the ICE wizard presents a sequence of windows to lead the user through the ICE process. The user steps through the ICE wizard to specify the server, time period, performance target load and output objectives, response time calculation, and source and target information.",{"@attributes":{"id":"p-0074","num":"0073"},"figref":"FIG. 6","b":["190","192","194","196","198","200","202","204","206","208"]},{"@attributes":{"id":"p-0075","num":"0074"},"figref":["FIG. 7","FIG. 6"],"b":["210","210","214","212","218","216"]},"In response to activating a \u201cCancel\u201d button , the ICE wizard exits. In response to activating a \u201cNext>\u201d button , the ICE wizard saves the selected group and server in an input data structure, and presents the \u201cSelect Date Range\u201d window  ().",{"@attributes":{"id":"p-0077","num":"0076"},"figref":["FIG. 8","FIG. 6"],"b":["230","230","232","234","234","232","234"]},"To enter a custom start date , the user can select a month, day and year using the month, day and year text-box\/glyph pairs, ,  and , respectively. The user enters a desired start time in the start-time text box . To enter a custom end date , the user can select a month, day and year using the month, day and year text-box\/glyph pairs, ,  and , respectively. The user enters a desired start time in the start-time text box . The start date and time is referred to as a start date range setting and the end date and time is referred to as an end date range setting.","In response to activating a \u201cCancel\u201d button , the ICE wizard terminates. In response to activating a \u201c<Back\u201d button, the ICE wizard presents the \u201cServer Selection\u201d window  of . In response to activating a \u201cNext>\u201d button , ICE wizard saves the start and end dates and times in the input data structure, and presents the \u201cPerformance Target Objectives-Load\u201d window  of .",{"@attributes":{"id":"p-0080","num":"0079"},"figref":["FIG. 9","FIG. 6"],"b":["270","270","272","274","276","278","280","282","284","286"]},"In response to activating a \u201cCancel\u201d button , the ICE wizard exits. In response to a \u201c<Back\u201d button  being activated, the ICE wizard displays the \u201cSelect Date Range\u201d window. In response to activating a \u201cNext>\u201d button , the ICE wizard stores the number of user visits per second as a specific arrival rate or the page view rate, depending on whether check box  or  is checked, stores the average user session time if check box  is checked, and the number of concurrent users if the check box  is checked, in the input data structure, and displays the \u201cPerformance Target Objectives-Outputs\u201d window  of . In various embodiments, either the specific arrival rate or the page view rate is stored in the input data structure, but not both.",{"@attributes":{"id":"p-0082","num":"0081"},"figref":["FIG. 10","FIG. 6"],"b":["300","300","302","304","306","308","310"]},"In response to activating a \u201cCancel\u201d button , the ICE wizard exits. In response to a \u201c<Back\u201d button  being activated, the ICE wizard displays the \u201cPerformance Target Objectives-Load\u201d window. In response to activating a \u201cNext>\u201d button , the ICE wizard stores the response time per page view and CPU utilization if their associated check box is checked, and the percent contingency factor in the input data structure, and displays the \u201cResponse Time Calculation\u201d window  of .",{"@attributes":{"id":"p-0084","num":"0083"},"figref":["FIG. 11","FIG. 6","FIG. 10"],"b":["320","320","320"]},"Three radio buttons, ,  and , allow a user to specify one of an \u201cAverage Response Time\u201d, a \u201c90th Percentile Response Time\u201d, and a \u201c95th Percentile Response Time,\u201d respectively. The radio buttons ,  and  are mutually exclusive. The ICE wizard provides an indication of the selected response time calculation to the analytic engine, and the analytic engine provides a configuration recommendation in accordance with the indication of the selected response time calculation. For example, a successful workload may have an average response time which below a specified performance target objective, but still have individual requests that exceed the performance target objective. In response to providing the 90or 95percentile setting to the analytic engine, the analytic engine applies the 90or 95percentile setting to the response time performance target objective, by enforcing that either nine out of ten requests for the 90percentile setting, or nineteen out of twenty requests for the 95percentile setting, meet the specified performance target objective","In response to activating a \u201cCancel\u201d button , the ICE wizard exits. In response to activating a \u201c<Back\u201d button , the ICE wizard displays the \u201cPerformance Target Objectives-Outputs\u201d window  of . In response to activating a \u201cNext>\u201d button , the ICE wizard stores an indication representing the selected type of response time, and displays the \u201cSource Configuration\u201d window  of .",{"@attributes":{"id":"p-0087","num":"0086"},"figref":["FIG. 12","FIG. 6"],"b":["340","340"]},"In response to a \u201cUse SSL\u201d checkbox  being checked, the ICE wizard receives a percentage (%) of transactions using Secure Sockets Layer (SSL) of the source system in a \u201c% of Transactions Using SSL\u201d text box . The source session persistence is selected by a user, and is received by the ICE wizard, using the \u201cPersistent\u201d and \u201cNon-Persistent\u201d radio buttons,  and , respectively. The application server hardware of the source system is specified using a \u201cBrand\u201d text box  and associated glyph . In response to activating the glyph , a list of source brands is displayed and the user selects one of the source brands from the list which is displayed in the \u201cBrand\u201d text box . In various embodiments, the list of source brands comprises hardware, for example, Web Application Servers that execute Windows NT, AIX, Linux, MVS, Linux_PPC, Solaris and HP-UX. However, in other embodiments, other source brands may be used. A source model is also specified using a \u201cModel\u201d text box  and associated glyph . In response to activating the glyph , a list of source models is displayed and the user selects one of the source models from the list which is displayed in the \u201cModel\u201d text box . For example, a source brand may be a \u201cpSeries (RS\/6000) and the Model may be a \u201cP670 4-way 1500.\u201d In various embodiments, the list of source brands and source models is provided with the ICE wizard.","In response to activating a \u201cCancel\u201d button , the ICE wizard exits. In response to activating a \u201c<Back\u201d button , the ICE wizard displays the \u201cResponse Time Calculation\u201d window  of . In response to activating a \u201cNext>\u201d button , the ICE wizard stores the percentage of transactions using SSL if the \u201cUse SSL\u201d checkbox  is checked, an indication of the specified session persistence, the selected brand and the selected model in the input data structure, and displays the \u201cTarget Configuration\u201d window  of .",{"@attributes":{"id":"p-0090","num":"0089"},"figref":["FIG. 13","FIG. 6"],"b":["360","360"]},"In response to a \u201cUse SSL\u201d checkbox  being checked, the ICE wizard receives a percentage (%) of transactions using Secure Sockets Layer of the target system in a \u201c% of Transactions Using SSL\u201d text box . The target session persistence is selected by a user, and received by the ICE wizard, using the \u201cPersistent\u201d and \u201cNon-Persistent\u201d radio buttons,  and , respectively. The target application server hardware class is specified using a \u201cBrand\u201d text box  and associated glyph . In response to activating the glyph , a list of target brands is displayed and the user selects one of the target brands from the list which is displayed in the \u201cBrand\u201d text box . In various embodiments, the list of target brands is the same as in the list of source brands Source Configuration window  of .","In response to activating a \u201cCancel\u201d button , the ICE wizard exits. In response to activating a \u201c<Back\u201d button , the ICE wizard displays the \u201cSource Configuration\u201d window  of . In response to activating a \u201cNext>\u201d button , the ICE wizard stores the target percentage of transactions using SSL if the checkbox  is checked, the selected target session persistence and the target brand in the input data structure, calculates one or more performance measurements, invokes the analytic engine and displays the \u201cRecommendation\u201d window  of .",{"@attributes":{"id":"p-0093","num":"0092"},"figref":["FIG. 14","FIG. 13","FIG. 14","FIG. 14"],"b":"376"},"In step , the ICE wizard retrieves request-processing performance data from the application monitor based on the server selection, and in some embodiments, the group, which is specified in the server selection window, and the date range settings which are specified in the date range window. The request-processing performance data comprises a list of CPU times and response times for the requests which are received within the start and end date range settings which are specified in the date range window. A request may be considered to be within the start and end date range settings if the start date and time of the request is greater than or equal to the start date range setting and less than or equal to the end date range setting. Alternately, a request may be considered to be within the start and end date range settings if the start date and time of the request is greater than the start date range setting and less than the end date range setting.","In various embodiments, a request can be any type of request which the application monitor can monitor, such as a request for a web page or data. Examples of requests comprise Servlets, Java Server Pages (JSPs), Enterprise Java Beans (EJBs), Portlets and standalone Java DataBase Connectivity (JDBC) calls, such as in the third tier of the three-tier architecture described above with reference to .","In step , the ICE wizard calculates the average CPU time per request based on the request-processing performance data. The ICE wizard calculates the average CPU time per request based on the total number of requests within the start and end date range settings which are specified in the date range window. The total CPU time is calculated from the individual CPU time which is captured by the application monitor for individual requests. The start and end date range settings define which requests are included in the calculation of the total CPU time. The total CPU time is equal to the sum of the CPU times of the individual requests within the start and end date range settings. The total CPU time is divided by the number of requests within the start and end date range settings to provide the average CPU time per request.","In other embodiments, the application monitor directly measures the average CPU time per request, and the ICE wizard queries the application monitor to retrieve the average CPU time per request.","In step , the ICE wizard sets the \u201cService time\u201d equal to the average CPU time per request. The ICE wizard stores the Service time in the input data structure.","In step , the ICE wizard calculates the \u201cAverage Response Time per request\u201d based on the request-processing performance data. The response time per request represents an amount of time between receiving a request, for example, for a web page, and responding to that request, for example, returning the web page, for the requests within the start and end date range settings. The ICE wizard sums the response times of the requests which are retrieved in step , and divides the sum by the number of requests to provide the Average Response Time per request.","In step , the ICE wizard calculates the \u201cAverage time for Input\/Outputs (I\/Os) per page view\u201d as follows:\n\nAverage time for I\/Os per page view=Average Response Time per request\u2212Average CPU time per request.\n\nThe ICE wizard stores the \u201cAverage time for I\/Os per page view\u201d in the input data structure.\n","In other embodiments, the application monitor directly measures the \u201cAverage time for I\/Os per page view\u201d, and the ICE wizard queries the application monitor to retrieve the \u201cAverage time for I\/Os per page view\u201d.","In step , the ICE wizard calculates a \u201cThink time per request\u201d. The Think time per request is calculated based on the requests which are received by the application within the start and end date range settings. In various embodiments, the Think time represents an amount of time during which the system is not actually processing a request, but waiting for resources to become available. Examples of resources comprise the CPU and database connection pools. The ICE wizard calculates a duration of load which is equal to the end date range setting minus the start date range setting which are specified in the date range window.","The ICE wizard sets an average number (#) of sessions equal to an average number (#) of live sessions. In various embodiments, each time the user requests a new web page, that request is a distinct request. The session is a device which allows a server to provide a seemingly continuous request-response experience to a user. A session is an amount of memory which the server uses to identify a user and the user's previous activity. A \u201clive\u201d session corresponds to an active request. Sessions are typically maintained in expectation of a user submitting another request. Therefore, at any point in time, the sessions that the server maintains can be divided into a group of sessions that correspond to users for whom the system is actively processing requests, and another group of sessions which the server is maintaining with an expectation that the user will issue a subsequent request. After a predetermined interval of time, the system terminates the sessions that are no longer active to save memory.","The ICE wizard retrieves a total number of live sessions during the specified date range settings from the application monitor The total number of live sessions represents a total number of simultaneous live sessions at any point in time during the start and end date range settings, and is used as the average number of sessions.","The ICE wizard sets a total response time equal to the sum of the response time of all requests at the server within the start and end date range settings which are specified in the date range window.","The ICE wizard determines the total number of requests which are received by the application at the server that are within the start and end date range settings which are specified in the date range window.","The ICE wizard calculates the Think time per request as follows:",{"@attributes":{"id":"p-0108","num":"0107"},"maths":{"@attributes":{"id":"MATH-US-00001","num":"00001"},"math":{"@attributes":{"overflow":"scroll"},"mrow":{"mfrac":[{"mrow":{"mi":["Think","time"],"mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}}},"mi":"request"},{"mrow":[{"mrow":{"mo":["(",")"],"mrow":{"mrow":[{"mo":["(",")"],"mrow":{"mi":["duration","of","load","average","\u00a3","of","sessions"],"mo":["\u2062","\u2062","\u2062","\u2062","\u00d7","\u2062","\u2062","\u2062","\u2062","\u2062","\u2062"],"mstyle":[{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},{"mspace":{"@attributes":{"width":"0.6em","height":"0.6ex"}}},{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}}]}},{"mi":["total","response","time"],"mo":["\u2062","\u2062","\u2062","\u2062"],"mstyle":[{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}}]}],"mo":"-"}},"mo":"\u2062","mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}}},{"mi":["total","number","of","requests"],"mo":["\u2062","\u2062","\u2062","\u2062","\u2062","\u2062"],"mstyle":[{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}}]}]}],"mo":"="}}}},"The ICE wizard stores the Think time per request in the input data structure.","In other embodiments, the application monitor directly measures the Think time per request, and the ICE wizard queries the application monitor to retrieve the Think time per request.","In step , the ICE wizard invokes the analytic engine to provide a configuration recommendation of a target hardware system on which to execute the application based on at least one target objective, a specified source server, a specified source configuration, a specified target session information, and at least one of the Service time, Average time for I\/Os per page view, and think time. In various embodiments, the analytic engine receives data from the ICE wizard using the input data structure, and provides the configuration recommendation based on at least one parameter of the input data structure. Typically one or more instructions are executed on a data processing system to invoke the analytic engine. In various embodiments, the analytic engine provides an application programming interface comprising one or more instructions which can be used to invoke the analytic engine.","In various embodiments, the ICE wizard invokes the analytic engine, via an application programming interface, and provides the Service Time, Average time for I\/Os per page view, and the Think Time, along with the specified source configuration of the \u201cSource Configuration Window\u201d, and one or more specified performance targets which are specified in the \u201cPerformance Target Objectives-Load\u201d window, the \u201cPerformance Target Objectives-Outputs\u201d window, \u201cResponse Time Calculation\u201d window and \u201cTarget Configuration\u201d window, to the analytic engine via the input data structure.","In some embodiments, the analytic engine recommends a hardware configuration of a user-specified target hardware system. In other embodiments, for example, if no target hardware system is specified, the analytic engine recommends a target hardware system.","In various embodiments, the analytic engine implements a technique described in U.S. patent application Ser. No. 10\/174,030, entitled \u201cMethod, System and Article of Manufacture for an Analytic Modeling Technique for Handling Multiple Objectives,\u201d to determine a configuration recommendation. For example, in some embodiments, the analytic engine uses the actual Service time, Average time for I\/Os per page view, and Think time per request that is provided by the ICE wizard to calculate response times to estimate the performance of a target computer system.","In some embodiments, the analytic engine implements a technique described in application Ser. No. 10\/686,988, entitled \u201cAutonomic Computing Algorithm for Identification of an Optimum Configuration for a Web Infrastructure,\u201d to determine a configuration recommendation.","In step , the ICE wizard displays the configuration recommendation provided by the analytic engine in the \u201cRecommendation\u201d window  of . The values in the \u201cRecommendation\u201d window  are provided to the ICE wizard by the analytic engine in the configuration-recommendation data structure.",{"@attributes":{"id":"p-0117","num":"0116"},"figref":["FIG. 15","FIG. 6"],"b":["400","400"]},"The configuration recommendation provided by the analytic engine is displayed in tabs comprising a \u201cSolution\u201d tab , an \u201cOverall\u201d tab , a \u201cMinimum Response Time\u201d tab , a \u201cUtilization\u201d tab , and a \u201cMemory\u201d tab . The \u201cSolution\u201d tab  displays a Brand , Model , number of nodes , disk access time in milliseconds (ms) , and a number (#) of disks .","In response to activating a \u201cCancel\u201d button , the ICE wizard exits. In response to activating a \u201c<Back\u201d button , the ICE wizard displays the \u201cTarget Configuration\u201d window  of . In response to a \u201cNext>\u201d button  being activated, the ICE wizard displays the \u201cSave Report\u201d window  of .",{"@attributes":{"id":"p-0120","num":"0119"},"figref":["FIG. 16","FIG. 6"],"b":["400","400","432","434","436","438","440","442","444"]},{"@attributes":{"id":"p-0121","num":"0120"},"figref":["FIG. 17","FIG. 6"],"b":["406","400","400","406"]},{"@attributes":{"id":"p-0122","num":"0121"},"figref":["FIG. 18","FIG. 6"],"b":["408","400","408","452","454","456","458"]},{"@attributes":{"id":"p-0123","num":"0122"},"figref":["FIG. 19","FIG. 6"],"b":["410","400","410","462"]},{"@attributes":{"id":"p-0124","num":"0123"},"figref":["FIG. 20","FIG. 6","FIG. 21"],"b":["470","470","472","474","476","480"]},{"@attributes":{"id":"p-0125","num":"0124"},"figref":["FIG. 21","FIG. 6"],"b":["480","480","482","484","486","488","490","492","494","496"]},"Various embodiments of the invention can take the form of an entirely hardware embodiment, an entirely software embodiment or an embodiment containing both hardware and software elements. In a preferred embodiment, the invention is implemented in software, which includes but is not limited to firmware, resident software, microcode, etc.","Furthermore, various embodiments of the invention can take the form of a computer program product accessible from a computer usable or computer-readable medium providing program code for use by or in connection with a computer or any instruction execution system. For the purposes of this description, a computer usable or computer readable medium can be any apparatus that can contain, store, communicate, propagate, or transport the program for use by or in connection with the instruction execution system, apparatus, or device.","The medium can be an electronic, magnetic, optical, electromagnetic, infrared, or semiconductor system (or apparatus or device) or a propagation medium. Examples of a computer-readable medium include a semiconductor or solid state memory, magnetic tape, a removable computer diskette, a random access memory (RAM), a read-only memory (ROM), a rigid magnetic disk and an optical disk. Current examples of optical disks include compact disk read only memory (CD-ROM), compact disk read\/write (CD-R\/W) and digital video disk (DVD). The term \u201ccomputer readable storage medium\u201d is defined to be any apparatus that can store the program for use by or in connection with the instruction execution system, apparatus, or device, such as semiconductor or solid state memory, magnetic tape, a removable computer diskette, a random access memory (RAM), a read-only memory (ROM), a rigid magnetic disk and an optical disk. The term \u201ccomputer usable communication medium\u201d is defined to be any apparatus that can communicate, propagate, or transport the program for use by or in connection with the instruction execution system, apparatus, or device.",{"@attributes":{"id":"p-0129","num":"0128"},"figref":"FIG. 22","b":["500","500","502","504","506","504"]},"Input\/output or I\/O devices  (including but not limited to, for example, a keyboard , pointing device such as a mouse , a display , printer , etc.) can be coupled to the system bus  either directly or through intervening I\/O controllers.","Network adapters, such as a network interface (NI) , may also be coupled to the system bus  to enable the data processing system to become coupled to other data processing systems or remote printers or storage devices through intervening private or public networks . Modems, cable modem and Ethernet cards are just a few of the currently available types of network adapters. The network adapter may be coupled to the network  via a network transmission line, for example twisted pair, coaxial cable or fiber optic cable, or a wireless interface that uses a wireless transmission medium. In addition, the software in which various embodiments are implemented may be accessible through the transmission medium, for example, from a server over the network.","The memory elements  store an operating system , the application , the application monitor , performance data  which is collected by the application monitor, the ICE wizard , the input data structure , the analytic engine , the configuration-recommendation data structure  that contains the configuration recommendation provided by the analytic engine , and one or more ICE Reports . In some embodiments, the analytic engine  and ICE wizard  are combined. In various embodiments, the application , application monitor  and performance data  are on a different data processing system from the data processing system containing the ICE wizard  and analytic engine .","The operating system  may be implemented by any conventional operating system such as the z\/OS\u00ae, MVS\u00ae, OS\/390\u00ae, AIX\u00ae, UNIX\u00ae, Windows\u00ae, LINUX\u00ae, Solaris\u00ae or HP-UX\u00ae operating system.","The exemplary data processing system  illustrated in  is not intended to limit the present invention. Other alternative hardware environments may be used without departing from the scope of the present invention.",{"@attributes":{"id":"p-0135","num":"0134"},"figref":["FIG. 23","FIG. 22","FIG. 11"],"b":["542","542","560","576","580","590","602","604","606","576","320","602","604","606"]},"The performance target objectives  comprise user visits per second , page views per second , average user session time , number of concurrent users , response time per page view , CPU utilization  and percent contingency factor . The performance target objectives  are provided in the \u201cPerformance Target Objectives\u201d windows  ( ().","The source configuration parameters  are input in the \u201cSource Configuration\u201d window  () comprise the percent transactions using SSL , session persistent indicator , source hardware brand  and source hardware model . The target configuration parameters  are input in the \u201cTarget Configuration\u201d window  () comprise the percent transactions using SSL , session persistent indicator , and target hardware brand . In some embodiments, the target hardware brand  is not supplied and the analytic engine recommends a target hardware brand.","The foregoing detailed description of various embodiments of the invention has been presented for the purposes of illustration and description. It is not intended to be exhaustive or to limit the invention to the precise form disclosed. Many modifications and variations are possible in light of the above teachings. It is intended that the scope of the invention be limited not by this detailed description, but rather by the claims appended thereto.","IBM\u00ae, z\/OS\u00ae, MVS\u00ae, OS\/390\u00ae and AIX\u00ae trademarks of International Business Machines Corporation in the United States, other countries, or both. Windows\u00ae is a registered trademark of Microsoft Corporation. LINUX\u00ae is a registered trademark of Linus Torvalds. Java is and all Java-based trademarks are trademarks of Sun Microsystems, Inc. in the United States, other countries, or both. Solaris\u00ae is a registered trademark of Sun Microsystems Inc. HP-UX\u00ae is a registered trademark of Hewlett-Packard Development Company, L.P. UNIX\u00ae is a registered trademark of the Open Group in the United States and other countries."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The teachings of the present invention can be readily understood by considering the following description in conjunction with the accompanying drawings, in which:",{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 3A"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":["FIG. 3B","FIG. 3A"]},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":["FIG. 6","FIG. 3A"]},{"@attributes":{"id":"p-0022","num":"0021"},"figref":["FIG. 7","FIG. 6"]},{"@attributes":{"id":"p-0023","num":"0022"},"figref":["FIG. 8","FIG. 6"]},{"@attributes":{"id":"p-0024","num":"0023"},"figref":["FIG. 9","FIG. 6"]},{"@attributes":{"id":"p-0025","num":"0024"},"figref":["FIG. 10","FIG. 6"]},{"@attributes":{"id":"p-0026","num":"0025"},"figref":["FIG. 11","FIG. 6"]},{"@attributes":{"id":"p-0027","num":"0026"},"figref":["FIG. 12","FIG. 6"]},{"@attributes":{"id":"p-0028","num":"0027"},"figref":["FIG. 13","FIG. 6"]},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 14"},{"@attributes":{"id":"p-0030","num":"0029"},"figref":["FIG. 15","FIG. 6"]},{"@attributes":{"id":"p-0031","num":"0030"},"figref":["FIG. 16","FIG. 6"]},{"@attributes":{"id":"p-0032","num":"0031"},"figref":["FIG. 17","FIG. 6"]},{"@attributes":{"id":"p-0033","num":"0032"},"figref":["FIG. 18","FIG. 6"]},{"@attributes":{"id":"p-0034","num":"0033"},"figref":["FIG. 19","FIG. 6"]},{"@attributes":{"id":"p-0035","num":"0034"},"figref":["FIG. 20","FIG. 6"]},{"@attributes":{"id":"p-0036","num":"0035"},"figref":["FIG. 21","FIG. 6"]},{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIG. 22"},{"@attributes":{"id":"p-0038","num":"0037"},"figref":["FIG. 23","FIG. 22"]}]},"DETDESC":[{},{}]}
